cscope 15 $HOME/Data/gh_pcsx4gcw0               0003814962
	@frontend/320240/pollux_set.c

43 
	~<°dio.h
>

44 
	~<°dlib.h
>

45 
	~<°rög.h
>

47 
	#BINARY


	)

50 
	$∑r£_lcd_timögs
(c⁄° *
°r
, *
d©a
)

52 *
lcd_timögs
 = 
d©a
;

53 c⁄° *
p
 = 
°r
;

54 
ªt
, 
c
;

55 
ªt
 = 
	`ssˇnf
(
°r
, "%d,%d,%d,%d,%d,%d,%d,%d",

56 &
lcd_timögs
[0], &lcd_timings[1], &lcd_timings[2], &lcd_timings[3],

57 &
lcd_timögs
[4], &lcd_timings[5], &lcd_timings[6], &lcd_timings[7]);

58 i‡(
ªt
 != 8)

61 
c
 = 0; c < 7 && *
p
 != 0;Ö++)

62 i‡(*
p
 == ',')

63 
c
++;

64 i‡(
c
 != 7)

67 '0' <*
p
 && *p <= '9')

68 
p
++;

70  
p
 - 
°r
;

71 
	}
}

73 
	$∑r£_øm_timögs
(c⁄° *
°r
, *
d©a
)

75 *
øm_timögs
 = 
d©a
;

76 c⁄° *
p
 = 
°r
;

77 
ªt
, 
c
;

78 
ˇs
;

80 
ªt
 = 
	`ssˇnf
(
p
, "%f,%d,%d,%d,%d,%d,%d",

81 &
ˇs
, &
øm_timögs
[1], &ram_timings[2], &ram_timings[3],

82 &
øm_timögs
[4], &ram_timings[5], &ram_timings[6]);

83 i‡(
ªt
 != 7)

85 i‡(
ˇs
 == 2)

86 
øm_timögs
[0] = 1;

87 i‡(
ˇs
 == 2.5)

88 
øm_timögs
[0] = 2;

89 i‡(
ˇs
 == 3)

90 
øm_timögs
[0] = 3;

93 
c
 = 0; c < 6 && *
p
 != 0;Ö++)

94 i‡(*
p
 == ',')

95 
c
++;

96 i‡(
c
 != 6)

98 '0' <*
p
 && *p <= '9')

99 
p
++;

101  
p
 - 
°r
;

102 
	}
}

104 
	$∑r£_decimÆ
(c⁄° *
°r
, *
d©a
)

106 *
ï
;

108 *(*)
d©a
 = 
	`°πoul
(
°r
, &
ï
, 10);

109 i‡(
ï
 =
°r
)

112  
ï
 - 
°r
;

113 
	}
}

116 
	$≠∂y_lcd_timögs
(vﬁ©ûê*
memªgs
, *
d©a
)

118 *
lcd_timögs
 = 
d©a
;

119 
i
;

121 
i
 = 0; i < 8; i++) {

122 i‡(
lcd_timögs
[
i
] & ~0xffff) {

123 
	`Ârötf
(
°dîr
, "pﬁlux_£t: invÆidÜcdÅimög %d: %d\n", 
i
, 
lcd_timögs
[i]);

128 
i
 = 0; i < 8; i++)

129 
memªgs
[(0x307c>>1Ë+ 
i
] = 
lcd_timögs
[i];

132 
	}
}

135 sig√d 
	madj
;

136 sig√d 
	mmö
;

137 sig√d 
	mmax
;

139 
	gøm_ønges
[] = {

149 
	$≠∂y_øm_timögs
(vﬁ©ûê*
memªgs
, *
d©a
)

151 *
øm_timögs
 = 
d©a
;

152 
i
, 
vÆ
;

154 
i
 = 0; i < 7; i++)

156 
øm_timögs
[
i
] +
øm_ønges
[i].
adj
;

157 i‡(
øm_timögs
[
i
] < 
øm_ønges
[i].
mö
 ||Ñam_timögs[i] >Ñam_ønges[i].
max
) {

158 
	`Ârötf
(
°dîr
, "pﬁlux_£t: invÆid RAMÅimög %d\n", 
i
);

163 
vÆ
 = 
memªgs
[0x14802>>1] & 0x0f00;

164 
vÆ
 |(
øm_timögs
[4] << 12) | (ram_timings[5] << 4) |Ñam_timings[6];

165 
memªgs
[0x14802>>1] = 
vÆ
;

167 
vÆ
 = 
memªgs
[0x14804>>1] & 0x4000;

168 
vÆ
 |(
øm_timögs
[0] << 12) | (ram_timings[1] << 8) |

169 (
øm_timögs
[2] << 4) |Ñam_timings[3];

170 
vÆ
 |= 0x8000;

171 
memªgs
[0x14804>>1] = 
vÆ
;

173 
i
 = 0; i < 0x100000 && (
memªgs
[0x14804>>1] & 0x8000); i++)

177 
	}
}

179 
	$≠∂y_dpc_˛kdiv0
(vﬁ©ûê*
memªgs
, *
d©a
)

181 
pcd
 = *(*)
d©a
;

182 
tmp
;

184 i‡((
pcd
 - 1) & ~0x3f) {

185 
	`Ârötf
(
°dîr
, "pﬁlux_£t: invÆidÜcd clkdiv0: %d\n", 
pcd
);

189 
pcd
 = (pcd - 1) & 0x3f;

190 
tmp
 = 
memªgs
[0x31c4>>1];

191 
memªgs
[0x31c4>>1] = (
tmp
 & ~0x3f0Ë| (
pcd
 << 4);

194 
	}
}

196 
	$≠∂y_˝u˛k
(vﬁ©ûê*
memªgs
, *
d©a
)

198 vﬁ©ûê*
memªgl
 = (vﬁ©ûê*)
memªgs
;

199 
mhz
 = *(*)
d©a
;

200 
adiv
, 
mdiv
, 
pdiv
, 
sdiv
 = 0;

201 
i
, 
vf000
, 
vf004
;

204 
	#SYS_CLK_FREQ
 27

	)

205 
pdiv
 = 9;

206 
mdiv
 = (
mhz
 * 
pdiv
Ë/ 
SYS_CLK_FREQ
;

207 i‡(
mdiv
 & ~0x3ff)

209 
vf004
 = (
pdiv
<<18Ë| (
mdiv
<<8Ë| 
sdiv
;

212 
adiv
 = 1; 
mhz
 /ádiv > 250;ádiv++)

215 
vf000
 = 
memªgl
[0xf000>>2];

216 
vf000
 = (vf000 & ~0x3c0Ë| ((
adiv
 - 1) << 6);

217 
memªgl
[0xf000>>2] = 
vf000
;

218 
memªgl
[0xf004>>2] = 
vf004
;

219 
memªgl
[0xf07c>>2] |= 0x8000;

220 
i
 = 0; (
memªgl
[0xf07c>>2] & 0x8000) && i < 0x100000; i++)

223 
	`¥ötf
("˛ock sëÅÿ%dMHz, AHB sëÅÿ%dMHz\n", 
mhz
, mhz / 
adiv
);

225 
	}
}

227 
	glcd_timögs
[8];

228 
	gøm_timögs
[7];

229 
	gdpc_˛kdiv0
;

230 
	g˝u˛k
;

232 c⁄° 
	glcd_t_hñp
[] = "htotal,hswidth,hastart,haend,vtotal,vswidth,vastart,vaend";

233 c⁄° 
	gøm_t_hñp
[] = "CAS,tRC,tRAS,tWR,tMRD,tRP,tRCD";

236 c⁄° *
	m«me
;

237 c⁄° *
	mhñp
;

238 (*
	m∑r£
)(c⁄° *
	m°r
, *
	md©a
);

239 (*
	m≠∂y
)(vﬁ©ûê*
	mmemªgs
, *
	md©a
);

240 *
	md©a
;

242 
	gÆl_∑øms
[] = {

243 { "lcd_timögs", 
lcd_t_hñp
, 
∑r£_lcd_timögs
, 
≠∂y_lcd_timögs
, 
lcd_timögs
 },

244 { "øm_timögs", 
øm_t_hñp
, 
∑r£_øm_timögs
, 
≠∂y_øm_timögs
, 
øm_timögs
 },

245 { "dpc_˛kdiv0", "dividî", 
∑r£_decimÆ
, 
≠∂y_dpc_˛kdiv0
, &
dpc_˛kdiv0
 },

246 { "˛kdiv0", "dividî", 
∑r£_decimÆ
, 
≠∂y_dpc_˛kdiv0
, &
dpc_˛kdiv0
 },

247 { "˝u˛k", "MHZ", 
∑r£_decimÆ
, 
≠∂y_˝u˛k
, &
˝u˛k
 },

249 
	#ALL_PARAM_COUNT
 ((
Æl_∑øms
Ë/ ◊Œ_∑øms[0]))

	)

255 
	$pﬁlux_£t
(vﬁ©ûê*
memªgs
, c⁄° *
°r
)

257 
∑r£d_∑øms
[
ALL_PARAM_COUNT
];

258 
≠∂õd_∑øms
[
ALL_PARAM_COUNT
];

259 
≠∂õd_somëhög
 = 0;

260 c⁄° *
p
, *
po
;

261 
i
, 
ªt
;

263 i‡(
°r
 =
NULL
)

266 
	`mem£t
(
∑r£d_∑øms
, 0, (parsed_params));

267 
	`mem£t
(
≠∂õd_∑øms
, 0, (applied_params));

269 
p
 = 
°r
;

272 
agaö
:

273 *
p
 == ';' || *p == ' ')

274 
p
++;

275 i‡(*
p
 == 0)

278 
i
 = 0; i < 
ALL_PARAM_COUNT
; i++)

280 
∑øm_Àn
 = 
	`°æí
(
Æl_∑øms
[
i
].
«me
);

281 i‡(
	`°∫cmp
(
p
, 
Æl_∑øms
[
i
].
«me
, 
∑øm_Àn
) == 0 &&Ö[param_len] == '=')

283 
p
 +
∑øm_Àn
 + 1;

284 
ªt
 = 
Æl_∑øms
[
i
].
	`∑r£
(
p
,áŒ_∑øms[i].
d©a
);

285 i‡(
ªt
 < 0) {

286 
	`Ârötf
(
°dîr
, "pﬁlux_£à∑r£r:Éº‹áà%-10s\n", 
p
);

287 
	`Ârötf
(
°dîr
, " vÆid f‹m© is: <%s>\n", 
Æl_∑øms
[
i
].
hñp
);

290 
∑r£d_∑øms
[
i
] = 1;

291 
p
 +
ªt
;

292 
agaö
;

297 
po
 = 
p
; *p != 0 && *p != ';';Ö++)

300 
	`Ârötf
(
°dîr
, "unhandledÖaram: ");

301 
	`fwrôe
(
po
, 1, 
p
 -Öo, 
°dîr
);

302 
	`Ârötf
(
°dîr
, "\n");

306 
i
 = 0; i < 
ALL_PARAM_COUNT
; i++)

308 i‡(!
∑r£d_∑øms
[
i
])

311 
ªt
 = 
Æl_∑øms
[
i
].
	`≠∂y
(
memªgs
,áŒ_∑øms[i].
d©a
);

312 i‡(
ªt
 < 0) {

313 
	`Ârötf
(
°dîr
, "pollux_set: failedÅoápply %s (bad value?)\n",

314 
Æl_∑øms
[
i
].
«me
);

318 
≠∂õd_somëhög
 = 1;

319 
≠∂õd_∑øms
[
i
] = 1;

322 i‡(
≠∂õd_somëhög
)

324 
c
;

325 
	`¥ötf
("applied: ");

326 
i
 = 
c
 = 0; i < 
ALL_PARAM_COUNT
; i++)

328 i‡(!
≠∂õd_∑øms
[
i
])

330 i‡(
c
 != 0)

331 
	`¥ötf
(", ");

332 
	`¥ötf
("%s", 
Æl_∑øms
[
i
].
«me
);

333 
c
++;

335 
	`¥ötf
("\n");

339 
	}
}

341 #ifde‡
BINARY


342 
	~<sys/ty≥s.h
>

343 
	~<sys/°©.h
>

344 
	~<f˙é.h
>

345 
	~<sys/mm™.h
>

346 
	~<uni°d.h
>

348 
	$ußge
(c⁄° *
bö¨y
)

350 
i
;

351 
	`¥ötf
("usage:\n%s <set_str[;set_str[;...]]>\n"

352 "£t_°r:\n", 
bö¨y
);

353 
i
 = 0; i < 
ALL_PARAM_COUNT
; i++)

354 
	`¥ötf
(" %s=<%s>\n", 
Æl_∑øms
[
i
].
«me
,áŒ_∑øms[i].
hñp
);

355 
	}
}

357 
	$maö
(
¨gc
, *
¨gv
[])

359 vﬁ©ûê*
memªgs
;

360 
ªt
, 
memdev
;

362 i‡(
¨gc
 != 2) {

363 
	`ußge
(
¨gv
[0]);

367 
memdev
 = 
	`›í
("/dev/mem", 
O_RDWR
);

368 i‡(
memdev
 == -1)

370 
	`≥º‹
("open(/dev/mem) failed");

374 
memªgs
 = 
	`mm≠
(0, 0x20000, 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
, 
memdev
, 0xc0000000);

375 i‡(
memªgs
 =
MAP_FAILED
)

377 
	`≥º‹
("mmap(memregs) failed");

378 
	`˛o£
(
memdev
);

382 
ªt
 = 
	`pﬁlux_£t
(
memªgs
, 
¨gv
[1]);

384 
	`munm≠
((*)
memªgs
, 0x20000);

385 
	`˛o£
(
memdev
);

387  
ªt
;

388 
	}
}

	@frontend/320240/ui_gp2x.h

1 #i‚de‡
UI_FEATURES_H


2 
	#UI_FEATURES_H


	)

4 
	#MENU_BIOS_PATH
 "pcsx_ª¨med/bios/"

	)

5 
	#MENU_SHOW_VARSCALER
 0

	)

6 
	#MENU_SHOW_VOUTMODE
 0

	)

7 
	#MENU_SHOW_SCALER2
 1

	)

8 
	#MENU_SHOW_NUBS_BTNS
 0

	)

9 
	#MENU_SHOW_VIBRATION
 1

	)

10 
	#MENU_SHOW_DEADZONE
 1

	)

11 
	#MENU_SHOW_MINIMIZE
 0

	)

12 
	#MENU_SHOW_FULLSCREEN
 0

	)

13 
	#MENU_SHOW_VOLUME
 1

	)

	@frontend/Cheat.h

	@frontend/blit320.h

1 
blô320_640
(*
d°
, c⁄° *
§c
, 
unu£d
);

2 
blô320_512
(*
d°
, c⁄° *
§c
, 
unu£d
);

3 
blô320_368
(*
d°
, c⁄° *
§c
, 
unu£d
);

	@frontend/cspace.c

11 
	~"c•a˚.h
"

18 #i‚de‡
__¨m__


20 
	$bgr555_to_rgb565
(*
d°_
, c⁄° *
§c_
, 
byãs
)

22 c⁄° *
§c
 = 
§c_
;

23 *
d°
 = 
d°_
;

24 
p
;

25 
x
;

27 
x
 = 0; x < 
byãs
 / 4; x++) {

28 
p
 = 
§c
[
x
];

29 
p
 = ((p & 0x7c007c00) >> 10) | ((p & 0x03e003e0) << 1)

30 | ((
p
 & 0x001f001f) << 11);

31 
d°
[
x
] = 
p
;

33 
	}
}

37 #i‚de‡
__ARM_NEON__


39 
	$bgr888_to_rgb565
(*
d°_
, c⁄° *
§c_
, 
byãs
)

41 c⁄° *
§c
 = 
§c_
;

42 *
d°
 = 
d°_
;

43 
r1
, 
g1
, 
b1
, 
r2
, 
g2
, 
b2
;

45 ; 
byãs
 >6; byã†-6, 
§c
 +6, 
d°
++) {

46 
r1
 = 
§c
[0] & 0xf8;

47 
g1
 = 
§c
[1] & 0xfc;

48 
b1
 = 
§c
[2] & 0xf8;

49 
r2
 = 
§c
[3] & 0xf8;

50 
g2
 = 
§c
[4] & 0xfc;

51 
b2
 = 
§c
[5] & 0xf8;

52 *
d°
 = (
r2
 << 24Ë| (
g2
 << 19Ë| (
b2
 << 13) |

53 (
r1
 << 8Ë| (
g1
 << 3Ë| (
b1
 >> 3);

55 
	}
}

58 
	$rgb888_to_rgb565
(*
d°
, c⁄° *
§c
, 
byãs
Ë{
	}
}

59 
	$bgr888_to_rgb888
(*
d°
, c⁄° *
§c
, 
byãs
Ë{
	}
}

64 
	gyuv_ry
[32], 
	gyuv_gy
[32], 
	gyuv_by
[32];

65 
	gyuv_u
[32 * 2], 
	gyuv_v
[32 * 2];

67 
	$bgr_to_uyvy_öô
()

69 
i
, 
v
;

77 
i
 = 0; i < 32; i++) {

78 
yuv_ry
[
i
] = ()(0.299f * i * 65536.0f + 0.5f);

79 
yuv_gy
[
i
] = ()(0.587f * i * 65536.0f + 0.5f);

80 
yuv_by
[
i
] = ()(0.114f * i * 65536.0f + 0.5f);

82 
i
 = -32; i < 32; i++) {

83 
v
 = ()(8 * 0.565‡* 
i
) + 128;

84 i‡(
v
 < 0)

85 
v
 = 0;

86 i‡(
v
 > 255)

87 
v
 = 255;

88 
yuv_u
[
i
 + 32] = 
v
;

89 
v
 = ()(8 * 0.713‡* 
i
) + 128;

90 i‡(
v
 < 0)

91 
v
 = 0;

92 i‡(
v
 > 255)

93 
v
 = 255;

94 
yuv_v
[
i
 + 32] = 
v
;

96 
	}
}

98 
	$rgb565_to_uyvy
(*
d
, c⁄° *
s
, 
pixñs
)

100 *
d°
 = 
d
;

101 c⁄° *
§c
 = 
s
;

102 c⁄° *
yu
 = 
yuv_u
 + 32;

103 c⁄° *
yv
 = 
yuv_v
 + 32;

104 
r0
, 
g0
, 
b0
, 
r1
, 
g1
, 
b1
;

105 
y0
, 
y1
, 
u
, 
v
;

107 ; 
pixñs
 > 0; 
§c
 +2, 
d°
++,Öixels -= 2)

109 
r0
 = (
§c
[0] >> 11) & 0x1f;

110 
g0
 = (
§c
[0] >> 6) & 0x1f;

111 
b0
 = 
§c
[0] & 0x1f;

112 
r1
 = (
§c
[1] >> 11) & 0x1f;

113 
g1
 = (
§c
[1] >> 6) & 0x1f;

114 
b1
 = 
§c
[1] & 0x1f;

115 
y0
 = (
yuv_ry
[
r0
] + 
yuv_gy
[
g0
] + 
yuv_by
[
b0
]) >> 16;

116 
y1
 = (
yuv_ry
[
r1
] + 
yuv_gy
[
g1
] + 
yuv_by
[
b1
]) >> 16;

117 
u
 = 
yu
[
b0
 - 
y0
];

118 
v
 = 
yv
[
r0
 - 
y0
];

120 
y0
 = 16 + 219 * y0 / 31;

121 
y1
 = 16 + 219 * y1 / 31;

123 *
d°
 = (
y1
 << 24Ë| (
v
 << 16Ë| (
y0
 << 8Ë| 
u
;

125 
	}
}

127 
	$bgr555_to_uyvy
(*
d
, c⁄° *
s
, 
pixñs
)

129 *
d°
 = 
d
;

130 c⁄° *
§c
 = 
s
;

131 c⁄° *
yu
 = 
yuv_u
 + 32;

132 c⁄° *
yv
 = 
yuv_v
 + 32;

133 
r0
, 
g0
, 
b0
, 
r1
, 
g1
, 
b1
;

134 
y0
, 
y1
, 
u
, 
v
;

136 ; 
pixñs
 > 0; 
§c
 +2, 
d°
++,Öixels -= 2)

138 
b0
 = (
§c
[0] >> 10) & 0x1f;

139 
g0
 = (
§c
[0] >> 5) & 0x1f;

140 
r0
 = 
§c
[0] & 0x1f;

141 
b1
 = (
§c
[1] >> 10) & 0x1f;

142 
g1
 = (
§c
[1] >> 5) & 0x1f;

143 
r1
 = 
§c
[1] & 0x1f;

144 
y0
 = (
yuv_ry
[
r0
] + 
yuv_gy
[
g0
] + 
yuv_by
[
b0
]) >> 16;

145 
y1
 = (
yuv_ry
[
r1
] + 
yuv_gy
[
g1
] + 
yuv_by
[
b1
]) >> 16;

146 
u
 = 
yu
[
b0
 - 
y0
];

147 
v
 = 
yv
[
r0
 - 
y0
];

148 
y0
 = 16 + 219 * y0 / 31;

149 
y1
 = 16 + 219 * y1 / 31;

151 *
d°
 = (
y1
 << 24Ë| (
v
 << 16Ë| (
y0
 << 8Ë| 
u
;

153 
	}
}

155 
	$bgr888_to_uyvy
(*
d
, c⁄° *
s
, 
pixñs
)

157 *
d°
 = 
d
;

158 c⁄° *
§c8
 = 
s
;

159 c⁄° *
yu
 = 
yuv_u
 + 32;

160 c⁄° *
yv
 = 
yuv_v
 + 32;

161 
r0
, 
g0
, 
b0
, 
r1
, 
g1
, 
b1
;

162 
y0
, 
y1
, 
u
, 
v
;

164 ; 
pixñs
 > 0; 
§c8
 +3*2, 
d°
++,Öixels -= 2)

166 
r0
 = 
§c8
[0], 
g0
 = src8[1], 
b0
 = src8[2];

167 
r1
 = 
§c8
[3], 
g1
 = src8[4], 
b1
 = src8[5];

168 
y0
 = (
r0
 * 19595 + 
g0
 * 38470 + 
b0
 * 7471) >> 16;

169 
y1
 = (
r1
 * 19595 + 
g1
 * 38470 + 
b1
 * 7471) >> 16;

170 
u
 = 
yu
[(
b0
 - 
y0
) / 8];

171 
v
 = 
yv
[(
r0
 - 
y0
) / 8];

172 
y0
 = 16 + 219 * y0 / 255;

173 
y1
 = 16 + 219 * y1 / 255;

175 *
d°
 = (
y1
 << 24Ë| (
v
 << 16Ë| (
y0
 << 8Ë| 
u
;

177 
	}
}

	@frontend/cspace.h

1 #ifde‡
__˝lu•lus


6 
bgr555_to_rgb565
(*
d°
, c⁄° *
§c
, 
byãs
);

7 
bgr888_to_rgb888
(*
d°
, c⁄° *
§c
, 
byãs
);

8 
bgr888_to_rgb565
(*
d°
, c⁄° *
§c
, 
byãs
);

9 
rgb888_to_rgb565
(*
d°
, c⁄° *
§c
, 
byãs
);

11 
bgr555_to_rgb565_b
(*
d°
, c⁄° *
§c
, 
byãs
,

12 
brighäess2k
);

14 
bgr_to_uyvy_öô
();

15 
rgb565_to_uyvy
(*
d
, c⁄° *
s
, 
pixñs
);

16 
bgr555_to_uyvy
(*
d
, c⁄° *
s
, 
pixñs
);

17 
bgr888_to_uyvy
(*
d
, c⁄° *
s
, 
pixñs
);

19 #ifde‡
__˝lu•lus


	@frontend/in_tsbutton.c

11 
	~<°dio.h
>

12 
	~<t¶ib.h
>

14 
	~"libpico„/öput.h
"

15 
	~"∂_gun_ts.h
"

16 
	~"ö_tsbuâ⁄.h
"

18 
	#IN_TSBUTTON_PREFIX
 "tsbuâ⁄:"

	)

19 
	#IN_TSBUTTON_COUNT
 4

	)

20 
	gtsbuâ⁄_down_id
;

21 
	gœ°_tsbuâ⁄_id
;

23 
	#TS_WIDTH
 320

	)

24 
	#TS_HEIGHT
 240

	)

27 *
tsdev
;

29 c⁄° * c⁄° 
	gö_tsbuâ⁄_keys
[
IN_TSBUTTON_COUNT
] = {

33 
	$ö_tsbuâ⁄_¥obe
(c⁄° 
ö_drv_t
 *
drv
)

35 
tsdev
 *
dev
 =Åsdev;

36 i‡(
dev
 =
NULL
) {

37 
	`Ârötf
(
°dîr
, "in_tsbutton_probe: missingÅsdev\n");

41 
	`ö_ªgi°î
(
IN_TSBUTTON_PREFIX
 "touchscreenás buttons",

42 
	`∂_gun_ts_gë_fd
(
dev
), 
NULL
, 
IN_TSBUTTON_COUNT
, 
ö_tsbuâ⁄_keys
, 0);

43 
	}
}

46 
	$ö_tsbuâ⁄_gë_key_«mes
(c⁄° 
ö_drv_t
 *
drv
, *
cou¡
)

48 *
cou¡
 = 
IN_TSBUTTON_COUNT
;

49  
ö_tsbuâ⁄_keys
;

50 
	}
}

52 
	$upd©e_buâ⁄
()

54 
tsdev
 *
dev
 =Åsdev;

55 
sx
 = 0, 
sy
 = 0, 
•
 = 0;

57 i‡(
dev
 =
NULL
)

60 i‡(
	`∂_gun_ts_upd©e_øw
(
dev
, &
sx
, &
sy
, &
•
)) {

61 i‡(
•
 == 0)

62 
tsbuâ⁄_down_id
 = -1;

66 
tsbuâ⁄_down_id
 = 0;

67 i‡(
sx
 > 
TS_WIDTH
 / 2)

68 
tsbuâ⁄_down_id
++;

69 i‡(
sy
 > 
TS_HEIGHT
 / 2)

70 
tsbuâ⁄_down_id
 += 2;

75 
	}
}

77 
	$ö_tsbuâ⁄_upd©e
(*
drv_d©a
, c⁄° *
böds
, *
ªsu…
)

79 
ªt
, 
t
;

81 
ªt
 = 
	`upd©e_buâ⁄
();

82 i‡(
ªt
 != 0)

83  
ªt
;

85 i‡(
tsbuâ⁄_down_id
 >= 0)

86 
t
 = 0;Å < 
IN_BINDTYPE_COUNT
;Å++)

87 
ªsu…
[
t
] |
böds
[
	`IN_BIND_OFFS
(
tsbuâ⁄_down_id
,Å)];

90 
	}
}

92 
	$ö_tsbuâ⁄_upd©e_keycode
(*
d©a
, *
is_down
)

94 
ªt
, 
ªt_kc
 = -1, 
ªt_down
 = 0;

96 
ªt
 = 
	`upd©e_buâ⁄
();

97 i‡(
ªt
 != 0)

98  
ªt
;

100 i‡(
tsbuâ⁄_down_id
 =
œ°_tsbuâ⁄_id
)

103 i‡(
tsbuâ⁄_down_id
 >= 0) {

104 i‡(
œ°_tsbuâ⁄_id
 >= 0) {

105 
ªt_kc
 = 
œ°_tsbuâ⁄_id
;

106 
œ°_tsbuâ⁄_id
 = -1;

109 
ªt_down
 = 1;

110 
ªt_kc
 = 
tsbuâ⁄_down_id
;

111 
œ°_tsbuâ⁄_id
 = 
tsbuâ⁄_down_id
;

115 
ªt_kc
 = 
œ°_tsbuâ⁄_id
;

116 
œ°_tsbuâ⁄_id
 = -1;

119 i‡(
is_down
 !
NULL
)

120 *
is_down
 = 
ªt_down
;

122  
ªt_kc
;

123 
	}
}

125 c⁄° 
ö_drv_t
 
	gö_tsbuâ⁄_drv
 = {

126 .
¥efix
 = 
IN_TSBUTTON_PREFIX
,

127 .
	g¥obe
 = 
ö_tsbuâ⁄_¥obe
,

128 .
	ggë_key_«mes
 = 
ö_tsbuâ⁄_gë_key_«mes
,

129 .
	gupd©e
 = 
ö_tsbuâ⁄_upd©e
,

130 .
	gupd©e_keycode
 = 
ö_tsbuâ⁄_upd©e_keycode
,

133 
	$ö_tsbuâ⁄_öô
()

135 
tsbuâ⁄_down_id
 = 
œ°_tsbuâ⁄_id
 = -1;

136 
	`ö_ªgi°î_drivî
(&
ö_tsbuâ⁄_drv
, 
NULL
, NULL);

137 
	}
}

	@frontend/in_tsbutton.h

1 
ö_tsbuâ⁄_öô
();

	@frontend/libpicofe/arm/neon_eagle2x.h

25 #i‡!
deföed
(
_NEON_EAGLE2X_H_INCLUDED_
)

26 
	#_NEON_EAGLE2X_H_INCLUDED_


	)

28 
	~<öây≥s.h
>

30 #ifde‡
__˝lu•lus


34 
√⁄_ógÀ2x_8_8
(c⁄° 
uöt8_t
 *
§c
, uöt8_à*
d°
, 
width
, 
§c°ride
, 
d°°ride
, 
height
);

35 
√⁄_ógÀ2x_16_16
(c⁄° 
uöt16_t
 *
§c
, uöt16_à*
d°
, 
width
, 
§c°ride
, 
d°°ride
, 
height
);

37 
√⁄_ógÀ2x_8_16
(c⁄° 
uöt8_t
 *
§c
, 
uöt16_t
 *
d°
, c⁄° 
uöt32_t
 *
∑Àâe
, 
width
, 
§c°ride
, 
d°°ride
, 
height
);

39 #ifde‡
__˝lu•lus


	@frontend/libpicofe/arm/neon_scale2x.h

25 #i‡!
deföed
(
_NEON_SCALE2X_H_INCLUDED_
)

26 
	#_NEON_SCALE2X_H_INCLUDED_


	)

28 
	~<öây≥s.h
>

30 #ifde‡
__˝lu•lus


34 
√⁄_sˇÀ2x_8_8
(c⁄° 
uöt8_t
 *
§c
, uöt8_à*
d°
, 
width
, 
§c°ride
, 
d°°ride
, 
height
);

35 
√⁄_sˇÀ2x_16_16
(c⁄° 
uöt16_t
 *
§c
, uöt16_à*
d°
, 
width
, 
§c°ride
, 
d°°ride
, 
height
);

37 
√⁄_sˇÀ2x_8_16
(c⁄° 
uöt8_t
 *
§c
, 
uöt16_t
 *
d°
, c⁄° 
uöt32_t
 *
∑Àâe
, 
width
, 
§c°ride
, 
d°°ride
, 
height
);

39 #ifde‡
__˝lu•lus


	@frontend/libpicofe/arm_linux.h

1 
ˇche_Êush_d_övÆ_i
(*
°¨t_addr
, *
íd_addr
);

	@frontend/libpicofe/config_file.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~"öput.h
"

16 
	~"míu.h
"

17 
	~"c⁄fig_fûe.h
"

18 
	~"Õrötf.h
"

20 
	#¨øy_size
(
x
Ë((xË/ (x[0]))

	)

22 *
	$my°rù
(*
°r
)

24 
i
, 
Àn
;

26 
Àn
 = 
	`°æí
(
°r
);

27 
i
 = 0; i < 
Àn
; i++)

28 i‡(
°r
[
i
] != ' ') ;

29 i‡(
i
 > 0Ë
	`memmove
(
°r
, så + i, 
Àn
 - i + 1);

31 
Àn
 = 
	`°æí
(
°r
);

32 
i
 = 
Àn
 - 1; i >= 0; i--)

33 i‡(
°r
[
i
] != ' ' && str[i] != '\r' && str[i] != '\n') ;

34 
°r
[
i
+1] = 0;

36  
°r
;

37 
	}
}

39 
	$gë_löe
(*
d
, 
size_t
 
size
, c⁄° *
s
)

41 c⁄° *
≥
;

42 
size_t
 
Àn
;

44 
≥
 = 
s
; *pe != '\r' && *pe != '\n' && *pe != 0;Öe++)

46 
Àn
 = 
≥
 - 
s
;

47 i‡(
Àn
 > 
size
 - 1)

48 
Àn
 = 
size
 - 1;

49 
	`°∫˝y
(
d
, 
s
, 
Àn
);

50 
d
[
Àn
] = 0;

52 
	`my°rù
(
d
);

53 
	}
}

55 
	$c⁄fig_wrôe_keys
(
FILE
 *
f
)

57 
d
;

59 
d
 = 0; d < 
IN_MAX_DEVS
; d++)

61 c⁄° *
böds
 = 
	`ö_gë_dev_böds
(
d
);

62 c⁄° *
«me
 = 
	`ö_gë_dev_«me
(
d
, 0, 0);

63 
k
, 
cou¡
 = 0;

65 i‡(
böds
 =
NULL
 || 
«me
 == NULL)

68 
	`Ârötf
(
f
, "böddev = %s\n", 
«me
);

69 
	`ö_gë_c⁄fig
(
d
, 
IN_CFG_BIND_COUNT
, &
cou¡
);

71 
k
 = 0; k < 
cou¡
; k++)

73 
i
, 
kböds
, 
mask
;

74 
a˘
[32];

76 
a˘
[0] =áct[31] = 0;

77 
«me
 = 
	`ö_gë_key_«me
(
d
, 
k
);

79 
kböds
 = 
böds
[
	`IN_BIND_OFFS
(
k
, 
IN_BINDTYPE_PLAYER12
)];

80 
i
 = 0; 
kböds
 && 
me_˘æ_a˘i⁄s
[i].
«me
 !
NULL
; i++) {

81 
mask
 = 
me_˘æ_a˘i⁄s
[
i
].mask;

82 i‡(
mask
 & 
kböds
) {

83 
	`°∫˝y
(
a˘
, 
me_˘æ_a˘i⁄s
[
i
].
«me
, 31);

84 
	`Ârötf
(
f
, "böd %†∂ayî1 %s\n", 
«me
, 
	`my°rù
(
a˘
));

85 
kböds
 &~
mask
;

87 
mask
 = 
me_˘æ_a˘i⁄s
[
i
].mask << 16;

88 i‡(
mask
 & 
kböds
) {

89 
	`°∫˝y
(
a˘
, 
me_˘æ_a˘i⁄s
[
i
].
«me
, 31);

90 
	`Ârötf
(
f
, "böd %†∂ayî2 %s\n", 
«me
, 
	`my°rù
(
a˘
));

91 
kböds
 &~
mask
;

95 
kböds
 = 
böds
[
	`IN_BIND_OFFS
(
k
, 
IN_BINDTYPE_EMU
)];

96 
i
 = 0; 
kböds
 && 
emu˘æ_a˘i⁄s
[i].
«me
 !
NULL
; i++) {

97 
mask
 = 
emu˘æ_a˘i⁄s
[
i
].mask;

98 i‡(
mask
 & 
kböds
) {

99 
	`°∫˝y
(
a˘
, 
emu˘æ_a˘i⁄s
[
i
].
«me
, 31);

100 
	`Ârötf
(
f
, "böd %†%s\n", 
«me
, 
	`my°rù
(
a˘
));

101 
kböds
 &~
mask
;

106 #ifde‡
ANALOG_BINDS


107 
k
 = 0; k < 
	`¨øy_size
(
ö_adev
); k++)

109 i‡(
ö_adev
[
k
] =
d
)

110 
	`Ârötf
(
f
, "böd_™Æog = %d\n", 
k
);

114 
	}
}

116 
	$∑r£_böd_vÆ
(c⁄° *
vÆ
, *
ty≥
)

118 
i
;

120 *
ty≥
 = 
IN_BINDTYPE_NONE
;

121 i‡(
vÆ
[0] == 0)

124 i‡(
	`°∫ˇ£cmp
(
vÆ
, "player", 6) == 0)

126 
∂ayî
, 
shi·
 = 0;

127 
∂ayî
 = 
	`©oi
(
vÆ
 + 6) - 1;

129 i‡(()
∂ayî
 > 1)

131 i‡(
∂ayî
 == 1)

132 
shi·
 = 16;

134 *
ty≥
 = 
IN_BINDTYPE_PLAYER12
;

135 
i
 = 0; 
me_˘æ_a˘i⁄s
[i].
«me
 !
NULL
; i++) {

136 i‡(
	`°∫ˇ£cmp
(
me_˘æ_a˘i⁄s
[
i
].
«me
, 
vÆ
 + 8, 
	`°æí
(val + 8)) == 0)

137  
me_˘æ_a˘i⁄s
[
i
].
mask
 << 
shi·
;

140 
i
 = 0; 
emu˘æ_a˘i⁄s
[i].
«me
 !
NULL
; i++) {

141 i‡(
	`°∫ˇ£cmp
(
emu˘æ_a˘i⁄s
[
i
].
«me
, 
vÆ
, 
	`°æí
(val)) == 0) {

142 *
ty≥
 = 
IN_BINDTYPE_EMU
;

143  
emu˘æ_a˘i⁄s
[
i
].
mask
;

148 
	}
}

150 
	$c⁄fig_ªad_keys
(c⁄° *
cfg_c⁄ã¡
)

152 
dev
[256], 
key
[128], *
a˘
;

153 c⁄° *
p
;

154 
böd
, 
bödty≥
;

155 
dev_id
;

157 
p
 = 
cfg_c⁄ã¡
;

158 
p
 !
NULL
 && (∞
	`°r°r
(p, "binddev = ")) != NULL) {

159 
p
 += 10;

161 
	`gë_löe
(
dev
, (dev), 
p
);

162 
dev_id
 = 
	`ö_c⁄fig_∑r£_dev
(
dev
);

163 i‡(
dev_id
 < 0) {

164 
	`¥ötf
("öput: c™'àh™dÀ dev: %s\n", 
dev
);

168 
	`ö_unböd_Æl
(
dev_id
, -1, -1);

169 (
p
 = 
	`°r°r
(p, "bind"))) {

170 i‡(
	`°∫cmp
(
p
, "binddev = ", 10) == 0)

173 #ifde‡
ANALOG_BINDS


174 i‡(
	`°∫cmp
(
p
, "bind_analog", 11) == 0) {

175 
ªt
 = 
	`ssˇnf
(
p
, "böd_™Æog = %d", &
böd
);

176 
p
 += 11;

177 i‡(
ªt
 != 1) {

178 
	`¥ötf
("öput:Ö¨£Éº‹: %16s..\n", 
p
);

181 i‡(()
böd
 >
	`¨øy_size
(
ö_adev
)) {

182 
	`¥ötf
("öput:á«log id %d ouào‡ønge\n", 
böd
);

185 
ö_adev
[
böd
] = 
dev_id
;

190 
p
 += 4;

191 i‡(*
p
 != ' ') {

192 
	`¥ötf
("öput:Ö¨£Éº‹: %16s..\n", 
p
);

196 
	`gë_löe
(
key
, (key), 
p
);

197 
a˘
 = 
	`°rchr
(
key
, '=');

198 i‡(
a˘
 =
NULL
) {

199 
	`¥ötf
("∑r£ faûed: %16s..\n", 
p
);

202 *
a˘
 = 0;

203 
a˘
++;

204 
	`my°rù
(
key
);

205 
	`my°rù
(
a˘
);

207 
böd
 = 
	`∑r£_böd_vÆ
(
a˘
, &
bödty≥
);

208 i‡(
böd
 != -1 && bind != 0) {

210 
	`ö_c⁄fig_böd_key
(
dev_id
, 
key
, 
böd
, 
bödty≥
);

213 
	`Õrötf
("c⁄fig: unh™dÀdá˘i⁄ \"%s\"\n", 
a˘
);

216 
	`ö_˛ón_böds
();

217 
	}
}

	@frontend/libpicofe/config_file.h

1 
	~<°dio.h
>

3 
c⁄fig_wrôe_keys
(
FILE
 *
f
);

4 
c⁄fig_ªad_keys
(c⁄° *
cfg
);

	@frontend/libpicofe/fonts.c

1 
	~<°dio.h
>

2 
	~<°d¨g.h
>

4 
	gf⁄td©a8x8
[64*16] =

91 
	gf⁄td©a6x8
[256][8] = {

223 
	$basic_ãxt_out16_nf
(*
fb
, 
w
, 
x
, 
y
, c⁄° *
ãxt
)

225 
i
, 
l
;

226 *
s¸ìn
;

227 
vÆ
 = 0xffff;

229 
s¸ìn
 = (*)
fb
 + 
x
 + 
y
 * 
w
;

230 
i
 = 0; ; i++, 
s¸ìn
 += 8)

232 
c
 = 
ãxt
[
i
];

233 i‡(
c
 == 0)

235 i‡(
c
 == ' ')

238 
l
 = 0;Ü < 8;Ü++)

240 
fd
 = 
f⁄td©a8x8
[
c
 * 8 + 
l
];

241 *
s
 = 
s¸ìn
 + 
l
 * 
w
;

242 
fd1
, 
fdp
 = 0;

244 i‡(
fd
&0x80Ë
s
[0] = 
vÆ
;

245 i‡(
fd
&0x40Ë
s
[1] = 
vÆ
;

246 i‡(
fd
&0x20Ë
s
[2] = 
vÆ
;

247 i‡(
fd
&0x10Ë
s
[3] = 
vÆ
;

248 i‡(
fd
&0x08Ë
s
[4] = 
vÆ
;

249 i‡(
fd
&0x04Ë
s
[5] = 
vÆ
;

250 i‡(
fd
&0x02Ë
s
[6] = 
vÆ
;

251 i‡(
fd
&0x01Ë
s
[7] = 
vÆ
;

254 i‡(
l
 > 0)

255 
fdp
 = 
f⁄td©a8x8
[
c
 * 8 + 
l
 - 1];

257 
fd1
 = 0x80; fd1 !0; fd1 >>1, 
s
++)

258 i‡(!(
fd
 & (
fd1
 >> 1)Ë&& ((
fdp
 | fd) & fd1))

259 
s
[1] = (s[1] >> 1) & 0x39ef;

262 
	}
}

264 
	$basic_ãxt_out_uyvy_nf
(*
fb
, 
w
, 
x
, 
y
, c⁄° *
ãxt
)

266 
i
, 
l
;

267 *
s¸ìn
;

269 
s¸ìn
 = (*)
fb
 + 
x
 + 
y
 * 
w
;

270 
i
 = 0; ; i++, 
s¸ìn
 += 8)

272 
c
 = 
ãxt
[
i
];

273 i‡(
c
 == 0)

275 i‡(
c
 == ' ')

278 
l
 = 0;Ü < 8;Ü++)

280 
fd
 = 
f⁄td©a8x8
[
c
 * 8 + 
l
];

281 *
s
 = (*)(
s¸ìn
 + 
l
 * 
w
);

282 
fd1
, 
fdp
 = 0;

284 i‡(
fd
&0x80Ë
s
[0 * 2 + 1] = 235;

285 i‡(
fd
&0x40Ë
s
[1 * 2 + 1] = 235;

286 i‡(
fd
&0x20Ë
s
[2 * 2 + 1] = 235;

287 i‡(
fd
&0x10Ë
s
[3 * 2 + 1] = 235;

288 i‡(
fd
&0x08Ë
s
[4 * 2 + 1] = 235;

289 i‡(
fd
&0x04Ë
s
[5 * 2 + 1] = 235;

290 i‡(
fd
&0x02Ë
s
[6 * 2 + 1] = 235;

291 i‡(
fd
&0x01Ë
s
[7 * 2 + 1] = 235;

294 i‡(
l
 > 0)

295 
fdp
 = 
f⁄td©a8x8
[
c
 * 8 + 
l
 - 1];

297 
fd1
 = 0x80; fd1 !0; fd1 >>1, 
s
 += 2)

298 i‡(!(
fd
 & (
fd1
 >> 1)Ë&& ((
fdp
 | fd) & fd1))

299 
s
[1] /= 2;

302 
	}
}

304 
	$basic_ãxt_out16
(*
fb
, 
w
, 
x
, 
y
, c⁄° *
ãxto
, ...)

306 
va_li°
 
¨gs
;

307 
buf„r
[256];

309 
	`va_°¨t
(
¨gs
, 
ãxto
);

310 
	`v¢¥ötf
(
buf„r
, (buf„r), 
ãxto
, 
¨gs
);

311 
	`va_íd
(
¨gs
);

313 
	`basic_ãxt_out16_nf
(
fb
, 
w
, 
x
, 
y
, 
buf„r
);

314 
	}
}

	@frontend/libpicofe/fonts.h

2 
f⁄td©a8x8
[64*16];

3 
f⁄td©a6x8
[256-32][8];

5 
basic_ãxt_out16_nf
(*
fb
, 
w
, 
x
, 
y
, c⁄° *
ãxt
);

6 
basic_ãxt_out16
(*
fb
, 
w
, 
x
, 
y
, c⁄° *
ãxto
, ...);

7 
basic_ãxt_out_uyvy_nf
(*
fb
, 
w
, 
x
, 
y
, c⁄° *
ãxt
);

	@frontend/libpicofe/gl.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	~<EGL/egl.h
>

5 
	~<GLES/gl.h
>

6 
	~"gl_∂©f‹m.h
"

7 
	~"gl.h
"

9 
EGLDi•œy
 
	gedpy
;

10 
EGLSurÁ˚
 
	gesfc
;

11 
EGLC⁄ãxt
 
	ge˘xt
;

14 *
	ggl_es_di•œy
;

15 *
	ggl_es_surÁ˚
;

17 
	$gl_have_îr‹
(c⁄° *
«me
)

19 
GLíum
 
e
 = 
	`glGëEº‹
();

20 i‡(
e
 !
GL_NO_ERROR
) {

21 
	`Ârötf
(
°dîr
, "GLÉº‹: %†%x\n", 
«me
, 
e
);

25 
	}
}

27 
	$gÀs_have_îr‹
(c⁄° *
«me
)

29 
EGLöt
 
e
 = 
	`eglGëEº‹
();

30 i‡(
e
 !
EGL_SUCCESS
) {

31 
	`Ârötf
(
°dîr
, "%†%x\n", 
«me
, 
e
);

35 
	}
}

37 
	$gl_öô
(*
di•œy
, *
wödow
, *
quúks
)

39 
EGLC⁄fig
 
ecfg
 = 
NULL
;

40 
GLuöt
 
ãxtuª_«me
 = 0;

41 *
tmp_ãxtuª_mem
 = 
NULL
;

42 
EGLöt
 
num_c⁄fig
;

43 
ªtvÆ
 = -1;

44 
ªt
;

45 
EGLöt
 
©å
[] =

47 
EGL_NONE


50 
ªt
 = 
	`gl_∂©f‹m_öô
(&
di•œy
, &
wödow
, 
quúks
);

51 i‡(
ªt
 != 0) {

52 
	`Ârötf
(
°dîr
, "gl_∂©f‹m_öô faûed wôh %d\n", 
ªt
);

53 
out
;

56 
tmp_ãxtuª_mem
 = 
	`ˇŒoc
(1, 1024 * 512 * 2);

57 i‡(
tmp_ãxtuª_mem
 =
NULL
) {

58 
	`Ârötf
(
°dîr
, "OOM\n");

59 
out
;

62 
edpy
 = 
	`eglGëDi•œy
((
EGLN©iveDi•œyTy≥
)
di•œy
);

63 i‡(
edpy
 =
EGL_NO_DISPLAY
) {

64 
	`Ârötf
(
°dîr
, "FailedÅo get EGL display\n");

65 
out
;

68 i‡(!
	`eglInôülize
(
edpy
, 
NULL
, NULL)) {

69 
	`Ârötf
(
°dîr
, "FailedÅo initialize EGL\n");

70 
out
;

73 i‡(!
	`eglChoo£C⁄fig
(
edpy
, 
©å
, &
ecfg
, 1, &
num_c⁄fig
)) {

74 
	`Ârötf
(
°dîr
, "FaûedÅÿchoo£ c⁄fig (%x)\n", 
	`eglGëEº‹
());

75 
out
;

78 i‡(
ecfg
 =
NULL
 || 
num_c⁄fig
 == 0) {

79 
	`Ârötf
(
°dîr
, "No EGL configsávailable\n");

80 
out
;

83 
esfc
 = 
	`eglCª©eWödowSurÁ˚
(
edpy
, 
ecfg
,

84 (
EGLN©iveWödowTy≥
)
wödow
, 
NULL
);

85 i‡(
esfc
 =
EGL_NO_SURFACE
) {

86 
	`Ârötf
(
°dîr
, "UnableÅo create EGL surface (%x)\n",

87 
	`eglGëEº‹
());

88 
out
;

91 
e˘xt
 = 
	`eglCª©eC⁄ãxt
(
edpy
, 
ecfg
, 
EGL_NO_CONTEXT
, 
NULL
);

92 i‡(
e˘xt
 =
EGL_NO_CONTEXT
) {

93 
	`Ârötf
(
°dîr
, "UnableÅo create EGL context (%x)\n",

94 
	`eglGëEº‹
());

95 
out
;

98 
	`eglMakeCuºít
(
edpy
, 
esfc
,Ésfc, 
e˘xt
);

100 
	`glE«bÀ
(
GL_TEXTURE_2D
);

102 
	`glGíTextuªs
(1, &
ãxtuª_«me
);

104 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ãxtuª_«me
);

106 
	`glTexImage2D
(
GL_TEXTURE_2D
, 0, 
GL_RGB
, 1024, 512, 0, GL_RGB,

107 
GL_UNSIGNED_SHORT_5_6_5
, 
tmp_ãxtuª_mem
);

108 i‡(
	`gl_have_îr‹
("glTexImage2D"))

109 
out
;

112 
	`glTexP¨amëîf
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
GL_LINEAR
);

113 
	`glTexP¨amëîf
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
GL_LINEAR
);

116 
	`glLﬂdIdítôy
();

117 
	`glFr⁄tFa˚
(
GL_CW
);

118 
	`glE«bÀ
(
GL_CULL_FACE
);

120 
	`glE«bÀClõ¡Sèã
(
GL_TEXTURE_COORD_ARRAY
);

121 
	`glE«bÀClõ¡Sèã
(
GL_VERTEX_ARRAY
);

123 i‡(
	`gl_have_îr‹
("init"))

124 
out
;

126 
gl_es_di•œy
 = (*)
edpy
;

127 
gl_es_surÁ˚
 = (*)
esfc
;

128 
ªtvÆ
 = 0;

129 
out
:

130 
	`‰ì
(
tmp_ãxtuª_mem
);

131  
ªtvÆ
;

132 
	}
}

134 
	gvîti˚s
[] = {

141 
	gãxtuª
[] = {

148 
	$gl_Êù
(c⁄° *
fb
, 
w
, 
h
)

150 
ﬁd_w
, 
ﬁd_h
;

152 i‡(
fb
 !
NULL
) {

153 i‡(
w
 !
ﬁd_w
 || 
h
 !
ﬁd_h
) {

154 
f_w
 = ()
w
 / 1024.0f;

155 
f_h
 = ()
h
 / 512.0f;

156 
ãxtuª
[1*2 + 0] = 
f_w
;

157 
ãxtuª
[2*2 + 1] = 
f_h
;

158 
ãxtuª
[3*2 + 0] = 
f_w
;

159 
ãxtuª
[3*2 + 1] = 
f_h
;

160 
ﬁd_w
 = 
w
;

161 
ﬁd_h
 = 
h
;

164 
	`glTexSubImage2D
(
GL_TEXTURE_2D
, 0, 0, 0, 
w
, 
h
,

165 
GL_RGB
, 
GL_UNSIGNED_SHORT_5_6_5
, 
fb
);

166 i‡(
	`gl_have_îr‹
("glTexSubImage2D"))

170 
	`glVîãxPoöãr
(3, 
GL_FLOAT
, 0, 
vîti˚s
);

171 
	`glTexCo‹dPoöãr
(2, 
GL_FLOAT
, 0, 
ãxtuª
);

172 
	`glDøwAºays
(
GL_TRIANGLE_STRIP
, 0, 4);

174 i‡(
	`gl_have_îr‹
("glDrawArrays"))

177 
	`eglSw≠Buf„rs
(
edpy
, 
esfc
);

178 i‡(
	`gÀs_have_îr‹
("eglSwapBuffers"))

182 
	}
}

184 
	$gl_föish
()

186 
	`eglMakeCuºít
(
edpy
, 
EGL_NO_SURFACE
, EGL_NO_SURFACE, 
EGL_NO_CONTEXT
);

187 
	`eglDe°royC⁄ãxt
(
edpy
, 
e˘xt
);

188 
e˘xt
 = 
EGL_NO_CONTEXT
;

189 
	`eglDe°roySurÁ˚
(
edpy
, 
esfc
);

190 
esfc
 = 
EGL_NO_SURFACE
;

191 
	`eglTîmö©e
(
edpy
);

192 
edpy
 = 
EGL_NO_DISPLAY
;

194 
gl_es_di•œy
 = (*)
edpy
;

195 
gl_es_surÁ˚
 = (*)
esfc
;

197 
	`gl_∂©f‹m_föish
();

198 
	}
}

	@frontend/libpicofe/gl.h

1 #i‚de‡
LIBPICOFE_GL_H


2 
	#LIBPICOFE_GL_H


	)

4 #ifde‡
HAVE_GLES


6 
gl_öô
(*
di•œy
, *
wödow
, *
quúks
);

7 
gl_Êù
(c⁄° *
fb
, 
w
, 
h
);

8 
gl_föish
();

11 *
gl_es_di•œy
;

12 *
gl_es_surÁ˚
;

16 
__ölöe
 
	$gl_öô
(*
di•œy
, *
wödow
, *
quúks
)

19 
	}
}

20 
__ölöe
 
	$gl_Êù
(c⁄° *
fb
, 
w
, 
h
)

23 
	}
}

24 
__ölöe
 
	$gl_föish
()

26 
	}
}

28 
	#gl_es_di•œy
 (*)0

	)

29 
	#gl_es_surÁ˚
 (*)0

	)

33 
	#GL_QUIRK_ACTIVATE_RECREATE
 1

	)

	@frontend/libpicofe/gl_platform.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<EGL/egl.h
>

4 
	~<GLES/gl.h
>

6 
	~"gl.h
"

7 
	~"gl_∂©f‹m.h
"

9 #ifde‡
VCOS_VERSION


16 
	~<bcm_ho°.h
>

17 
	~<X11/Xlib.h
>

18 
	~<dlf˙.h
>

20 
Di•œy
 *
	gx11di•œy
;

21 
Wödow
 
	gx11wödow
;

22 
DISPMANX_DISPLAY_HANDLE_T
 
	gm_di•m™Di•œy
;

23 
EGL_DISPMANX_WINDOW_T
 
	gm_«tiveWödow
;

25 *
	gx11lib
;

26 
	#FPTR
(
f
Ë
	`ty≥of
(fË* 
p
##
	)
f

27 
FPTR
(
XGëGeomëry
);

28 
FPTR
(
XGëWödowAâribuãs
);

29 
FPTR
(
XTøn¶©eCo‹dö©es
);

31 
	$gë_wödow_ª˘
(
VC_RECT_T
 *
ª˘
)

33 
XWödowAâribuãs
 
x©ås_roŸ
;

34 
uöt32_t
 
di•_w
 = 0, 
di•_h
 = 0;

35 
dx
 = 0, 
dy
 = 0;

36 
dw
 = 0, 
dh
 = 0, 
dummy
;

37 
Wödow
 
roŸ
, 
dummyw
;

39 
	`gøphics_gë_di•œy_size
(0, &
di•_w
, &
di•_h
);

40 i‡(
di•_w
 =0 || 
di•_h
 == 0)

41 
	`Ârötf
(
°dîr
, "ERROR: graphics_get_display_size is broken\n");

44 
ª˘
->
x
 =Ñe˘->
y
 = 0;

45 
ª˘
->
width
 = 
di•_w
;

46 
ª˘
->
height
 = 
di•_h
;

48 i‡(
x11di•œy
 =
NULL
 || 
x11wödow
 == 0)

51 
	`pXGëGeomëry
(
x11di•œy
, 
x11wödow
, &
roŸ
, &
dx
, &
dy
, &
dw
, &
dh
,

52 &
dummy
, &dummy);

53 
	`pXGëWödowAâribuãs
(
x11di•œy
, 
roŸ
, &
x©ås_roŸ
);

55 i‡(
dw
 =
x©ås_roŸ
.
width
 && 
dh
 =x©ås_roŸ.
height
)

58 
	`pXTøn¶©eCo‹dö©es
(
x11di•œy
, 
x11wödow
, 
roŸ
,

59 
dx
, 
dy
, &dx, &dy, &
dummyw
);

63 
dx
 +(
di•_w
 - 
x©ås_roŸ
.
width
) / 2;

64 
dy
 +(
di•_h
 - 
x©ås_roŸ
.
height
) / 2;

66 
ª˘
->
x
 = 
dx
;

67 
ª˘
->
y
 = 
dy
;

68 
ª˘
->
width
 = 
dw
;

69 
ª˘
->
height
 = 
dh
;

70 
	}
}

72 
	$submô_ª˘
()

74 
DISPMANX_UPDATE_HANDLE_T
 
m_di•m™Upd©e
;

75 
DISPMANX_ELEMENT_HANDLE_T
 
m_di•m™EÀmít
;

76 
VC_RECT_T
 
§cRe˘
 = { 0, };

77 
VC_RECT_T
 
d°Re˘
;

79 
	`gë_wödow_ª˘
(&
d°Re˘
);

81 
m_di•m™Di•œy
 = 
	`vc_di•m™x_di•œy_›í
(0);

82 
m_di•m™Upd©e
 = 
	`vc_di•m™x_upd©e_°¨t
(0);

84 
m_di•m™EÀmít
 = 
	`vc_di•m™x_ñemít_add
(
m_di•m™Upd©e
,

85 
m_di•m™Di•œy
, 0, &
d°Re˘
, 0, &
§cRe˘
,

86 
DISPMANX_PROTECTION_NONE
, 0, 0, 
DISPMANX_NO_ROTATE
);

88 
m_«tiveWödow
.
ñemít
 = 
m_di•m™EÀmít
;

89 
m_«tiveWödow
.
width
 = 
d°Re˘
.width;

90 
m_«tiveWödow
.
height
 = 
d°Re˘
.height;

92 
	`vc_di•m™x_upd©e_submô_sync
(
m_di•m™Upd©e
);

93 
	}
}

95 
	$gl_∂©f‹m_öô
(**
di•œy
, **
wödow
, *
quúks
)

97 
x11di•œy
 = 
NULL
;

98 
x11wödow
 = 0;

100 
x11lib
 = 
	`dl›í
("libX11.so.6", 
RTLD_LAZY
);

101 i‡(
x11lib
 !
NULL
) {

102 
pXGëGeomëry
 = 
	`dlsym
(
x11lib
, "XGetGeometry");

103 
pXGëWödowAâribuãs
 = 
	`dlsym
(
x11lib
, "XGetWindowAttributes");

104 
pXTøn¶©eCo‹dö©es
 = 
	`dlsym
(
x11lib
, "XTranslateCoordinates");

105 i‡(
pXGëGeomëry
 !
NULL
 && 
pXGëWödowAâribuãs
 != NULL

106 && 
pXTøn¶©eCo‹dö©es
 !
NULL
)

108 
x11di•œy
 = *
di•œy
;

109 
x11wödow
 = (
Wödow
)*
wödow
;

113 
	`bcm_ho°_öô
();

114 
	`submô_ª˘
();

116 *
di•œy
 = 
EGL_DEFAULT_DISPLAY
;

117 *
wödow
 = &
m_«tiveWödow
;

118 *
quúks
 |
GL_QUIRK_ACTIVATE_RECREATE
;

121 
	}
}

123 
	$gl_∂©f‹m_föish
()

125 
	`vc_di•m™x_di•œy_˛o£
(
m_di•m™Di•œy
);

126 
	`bcm_ho°_deöô
();

128 i‡(
x11lib
) {

129 
	`dl˛o£
(
x11lib
);

130 
x11lib
 = 
NULL
;

133 
x11di•œy
 = 
NULL
;

134 
x11wödow
 = 0;

135 
	}
}

139 
	$gl_∂©f‹m_öô
(**
di•œy
, **
wödow
, *
quúks
)

142 
	}
}

144 
	$gl_∂©f‹m_föish
()

146 
	}
}

	@frontend/libpicofe/gl_platform.h

1 
gl_∂©f‹m_öô
(**
di•œy
, **
wödow
, *
quúks
);

2 
gl_∂©f‹m_föish
();

	@frontend/libpicofe/gp2x/in_gp2x.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sys/°©.h
>

17 
	~<f˙é.h
>

18 
	~<uni°d.h
>

20 
	~"../öput.h
"

21 
	~"soc.h
"

22 
	~"∂©_gp2x.h
"

23 
	~"ö_gp2x.h
"

25 
	#IN_GP2X_PREFIX
 "gp2x:"

	)

26 
	#IN_GP2X_NBUTTONS
 32

	)

30 
	gö_gp2x_combo_keys
 = 0;

31 
	gö_gp2x_combo_a˘s
 = 0;

32 
	ggpiodev
 = -1;

34 (*
ö_gp2x_gë_bôs
)();

36 c⁄° *
ö_gp2x_keys
[
IN_GP2X_NBUTTONS
] = {

37 [0 ... 
IN_GP2X_NBUTTONS
-1] = 
NULL
,

38 [
GP2X_BTN_UP
] = "Up", [
GP2X_BTN_LEFT
] = "Left",

39 [
GP2X_BTN_DOWN
] = "Down", [
GP2X_BTN_RIGHT
] = "Right",

40 [
GP2X_BTN_START
] = "Sèπ", [
GP2X_BTN_SELECT
] = "Select",

41 [
GP2X_BTN_L
] = "L", [
GP2X_BTN_R
] = "R",

42 [
GP2X_BTN_A
] = "A", [
GP2X_BTN_B
] = "B",

43 [
GP2X_BTN_X
] = "X", [
GP2X_BTN_Y
] = "Y",

44 [
GP2X_BTN_VOL_DOWN
] = "VOL DOWN",

45 [
GP2X_BTN_VOL_UP
] = "VOL UP",

46 [
GP2X_BTN_PUSH
] = "PUSH"

47 
	}
};

50 
	$ö_gp2x_gë_mm•2_bôs
()

52 
vÆue
;

53 
vÆue
 = 
memªgs
[0x1198>>1] & 0xff;

54 i‡(
vÆue
 == 0xFD) value = 0xFA;

55 i‡(
vÆue
 == 0xF7) value = 0xEB;

56 i‡(
vÆue
 == 0xDF) value = 0xAF;

57 i‡(
vÆue
 == 0x7F) value = 0xBE;

58 
vÆue
 |
memªgs
[0x1184>>1] & 0xFF00;

59 
vÆue
 |
memªgs
[0x1186>>1] << 16;

60 
vÆue
 = ~value & 0x08c0ff55;

62  
vÆue
;

63 
	}
}

65 
	$ö_gp2x_gë_wiz_bôs
()

67 
r
, 
vÆue
 = 0;

68 
r
 = 
	`ªad
(
gpiodev
, &
vÆue
, 4);

69 i‡(
vÆue
 & 0x02)

70 
vÆue
 |= 0x05;

71 i‡(
vÆue
 & 0x08)

72 
vÆue
 |= 0x14;

73 i‡(
vÆue
 & 0x20)

74 
vÆue
 |= 0x50;

75 i‡(
vÆue
 & 0x80)

76 
vÆue
 |= 0x41;

79 
vÆue
 &= 0x7ff55;

80 i‡(
vÆue
 & (1 << 16))

81 
vÆue
 |1 << 
GP2X_BTN_VOL_UP
;

82 i‡(
vÆue
 & (1 << 17))

83 
vÆue
 |1 << 
GP2X_BTN_VOL_DOWN
;

84 i‡(
vÆue
 & (1 << 18))

85 
vÆue
 |1 << 
GP2X_BTN_PUSH
;

86 
vÆue
 &= ~0x70000;

88  
vÆue
;

89 
	}
}

91 
	$ö_gp2x_¥obe
(c⁄° 
ö_drv_t
 *
drv
)

93 
gp2x_dev_id
)

95 
GP2X_DEV_GP2X
:

96 
ö_gp2x_gë_bôs
 = 
ö_gp2x_gë_mm•2_bôs
;

98 
GP2X_DEV_WIZ
:

99 
gpiodev
 = 
	`›í
("/dev/GPIO", 
O_RDONLY
);

100 i‡(
gpiodev
 < 0) {

101 
	`≥º‹
("in_gp2x: couldn't open /dev/GPIO");

104 
ö_gp2x_gë_bôs
 = 
ö_gp2x_gë_wiz_bôs
;

111 
	`ö_ªgi°î
(
IN_GP2X_PREFIX
 "GP2XÖad", -1, 
NULL
,

112 
IN_GP2X_NBUTTONS
, 
ö_gp2x_keys
, 1);

113 
	}
}

115 
	$ö_gp2x_‰ì
(*
drv_d©a
)

117 i‡(
gpiodev
 >= 0) {

118 
	`˛o£
(
gpiodev
);

119 
gpiodev
 = -1;

121 
	}
}

124 
	$ö_gp2x_gë_key_«mes
(c⁄° 
ö_drv_t
 *
drv
, *
cou¡
)

126 *
cou¡
 = 
IN_GP2X_NBUTTONS
;

127  
ö_gp2x_keys
;

128 
	}
}

131 
	$ö_gp2x_upd©e
(*
drv_d©a
, c⁄° *
böds
, *
ªsu…
)

133 
ty≥_°¨t
 = 0;

134 
i
, 
t
, 
keys
;

136 
keys
 = 
	`ö_gp2x_gë_bôs
();

138 i‡(
keys
 & 
ö_gp2x_combo_keys
) {

139 
ªsu…
[
IN_BINDTYPE_EMU
] = 
	`ö_combos_do
(
keys
, 
böds
, 
GP2X_BTN_PUSH
,

140 
ö_gp2x_combo_keys
, 
ö_gp2x_combo_a˘s
);

141 
ty≥_°¨t
 = 
IN_BINDTYPE_PLAYER12
;

144 
i
 = 0; 
keys
; i++, keys >>= 1) {

145 i‡(!(
keys
 & 1))

148 
t
 = 
ty≥_°¨t
;Å < 
IN_BINDTYPE_COUNT
;Å++)

149 
ªsu…
[
t
] |
böds
[
	`IN_BIND_OFFS
(
i
,Å)];

153 
	}
}

155 
	$ö_gp2x_upd©e_keycode
(*
d©a
, *
is_down
)

157 
ﬁd_vÆ
 = 0;

158 
vÆ
, 
diff
, 
i
;

160 
vÆ
 = 
	`ö_gp2x_gë_bôs
();

161 
diff
 = 
vÆ
 ^ 
ﬁd_vÆ
;

162 i‡(
diff
 == 0)

166 
i
 = 0; i < (
diff
)*8; i++)

167 i‡(
diff
 & (1<<
i
))

170 
ﬁd_vÆ
 ^1 << 
i
;

172 i‡(
is_down
)

173 *
is_down
 = !!(
vÆ
 & (1<<
i
));

174  
i
;

175 
	}
}

178 
	mkey
;

179 
	mpbä
;

180 } 
	gkey_pbä_m≠
[] =

182 { 
GP2X_BTN_UP
, 
PBTN_UP
 },

183 { 
GP2X_BTN_DOWN
, 
PBTN_DOWN
 },

184 { 
GP2X_BTN_LEFT
, 
PBTN_LEFT
 },

185 { 
GP2X_BTN_RIGHT
, 
PBTN_RIGHT
 },

186 { 
GP2X_BTN_B
, 
PBTN_MOK
 },

187 { 
GP2X_BTN_X
, 
PBTN_MBACK
 },

188 { 
GP2X_BTN_A
, 
PBTN_MA2
 },

189 { 
GP2X_BTN_Y
, 
PBTN_MA3
 },

190 { 
GP2X_BTN_L
, 
PBTN_L
 },

191 { 
GP2X_BTN_R
, 
PBTN_R
 },

192 { 
GP2X_BTN_SELECT
, 
PBTN_MENU
 },

195 
	#KEY_PBTN_MAP_SIZE
 ((
key_pbä_m≠
Ë/ (key_pbä_m≠[0]))

	)

197 
	$ö_gp2x_míu_å™¶©e
(*
drv_d©a
, 
keycode
, *
ch¨code
)

199 
i
;

200 i‡(
keycode
 < 0)

203 
keycode
 = -keycode;

204 
i
 = 0; i < 
KEY_PBTN_MAP_SIZE
; i++)

205 i‡(
key_pbä_m≠
[
i
].
pbä
 =
keycode
)

206  
key_pbä_m≠
[
i
].
key
;

210 
i
 = 0; i < 
KEY_PBTN_MAP_SIZE
; i++)

211 i‡(
key_pbä_m≠
[
i
].
key
 =
keycode
)

212  
key_pbä_m≠
[
i
].
pbä
;

216 
	}
}

220 
	mcode
;

221 
	mbty≥
;

222 
	mbô
;

223 } 
	gö_gp2x_defböds
[] =

226 { 
BTN_UP
, 
IN_BINDTYPE_PLAYER12
, 0 },

227 { 
BTN_DOWN
, 
IN_BINDTYPE_PLAYER12
, 1 },

228 { 
BTN_LEFT
, 
IN_BINDTYPE_PLAYER12
, 2 },

229 { 
BTN_RIGHT
, 
IN_BINDTYPE_PLAYER12
, 3 },

230 { 
BTN_X
, 
IN_BINDTYPE_PLAYER12
, 4 },

231 { 
BTN_B
, 
IN_BINDTYPE_PLAYER12
, 5 },

232 { 
BTN_A
, 
IN_BINDTYPE_PLAYER12
, 6 },

233 { 
BTN_START
, 
IN_BINDTYPE_PLAYER12
, 7 },

234 { 
BTN_SELECT
, 
IN_BINDTYPE_EMU
, 
PEVB_MENU
 },

236 { 
BTN_L
, 
IN_BINDTYPE_EMU
, 
PEVB_STATE_SAVE
 },

237 { 
BTN_R
, 
IN_BINDTYPE_EMU
, 
PEVB_STATE_LOAD
 },

238 { 
BTN_VOL_UP
, 
IN_BINDTYPE_EMU
, 
PEVB_VOL_UP
 },

239 { 
BTN_VOL_DOWN
, 
IN_BINDTYPE_EMU
, 
PEVB_VOL_DOWN
 },

245 
	$ö_gp2x_˛ón_böds
(*
drv_d©a
, *
böds
, *
def_böds
)

247 
i
, 
cou¡
 = 0;

250 
i
 = 0; i < 
IN_GP2X_NBUTTONS
; i++) {

251 
t
, 
offs
;

252 
t
 = 0;Å < 
IN_BINDTYPE_COUNT
;Å++) {

253 
offs
 = 
	`IN_BIND_OFFS
(
i
, 
t
);

254 i‡(
ö_gp2x_keys
[
i
] =
NULL
)

255 
böds
[
offs
] = 
def_böds
[offs] = 0;

256 i‡(
böds
[
offs
])

257 
cou¡
++;

260 
eb
 = 
böds
[
	`IN_BIND_OFFS
(
i
, 
IN_BINDTYPE_EMU
)];

261 i‡(
eb
 & (
PEV_VOL_DOWN
|
PEV_VOL_UP
))

262 
have_vﬁ
 = 1;

263 i‡(
eb
 & 
PEV_MENU
)

264 
have_míu
 = 1;

271 i‡(!
have_vﬁ
 && 
böds
[
GP2X_BTN_VOL_UP
] =0 && böds[
GP2X_BTN_VOL_DOWN
] == 0) {

272 
böds
[
	`IN_BIND_OFFS
(
GP2X_BTN_VOL_UP
, 
IN_BINDTYPE_EMU
)] = 
PEV_VOL_UP
;

273 
böds
[
	`IN_BIND_OFFS
(
GP2X_BTN_VOL_DOWN
, 
IN_BINDTYPE_EMU
)] = 
PEV_VOL_DOWN
;

274 
cou¡
 += 2;

277 i‡(!
have_míu
) {

278 
böds
[
	`IN_BIND_OFFS
(
GP2X_BTN_SELECT
, 
IN_BINDTYPE_EMU
)] = 
PEV_MENU
;

279 
cou¡
++;

283 
	`ö_combos_föd
(
böds
, 
GP2X_BTN_PUSH
, &
ö_gp2x_combo_keys
, &
ö_gp2x_combo_a˘s
);

285  
cou¡
;

286 
	}
}

288 c⁄° 
ö_drv_t
 
	gö_gp2x_drv
 = {

289 .
¥efix
 = 
IN_GP2X_PREFIX
,

290 .
	g¥obe
 = 
ö_gp2x_¥obe
,

291 .
	g‰ì
 = 
ö_gp2x_‰ì
,

292 .
	ggë_key_«mes
 = 
ö_gp2x_gë_key_«mes
,

293 .
	g˛ón_böds
 = 
ö_gp2x_˛ón_böds
,

294 .
	gupd©e
 = 
ö_gp2x_upd©e
,

295 .
	gupd©e_keycode
 = 
ö_gp2x_upd©e_keycode
,

296 .
	gmíu_å™¶©e
 = 
ö_gp2x_míu_å™¶©e
,

299 
	$ö_gp2x_öô
(c⁄° 
ö_deÁu…_böd
 *
defböds
)

301 i‡(
gp2x_dev_id
 =
GP2X_DEV_WIZ
)

302 
ö_gp2x_keys
[
GP2X_BTN_START
] = "MENU";

304 
ö_gp2x_combo_keys
 = 
ö_gp2x_combo_a˘s
 = 0;

306 
	`ö_ªgi°î_drivî
(&
ö_gp2x_drv
, 
defböds
, 
NULL
);

307 
	}
}

	@frontend/libpicofe/gp2x/in_gp2x.h

2 
	gö_deÁu…_böd
;

4 
ö_gp2x_öô
(c⁄° 
ö_deÁu…_böd
 *
defböds
);

6 íum { 
	mGP2X_BTN_UP
 = 0, 
	mGP2X_BTN_LEFT
 = 2, 
	mGP2X_BTN_DOWN
 = 4, 
	mGP2X_BTN_RIGHT
 = 6,

7 
	mGP2X_BTN_START
 = 8, 
	mGP2X_BTN_SELECT
 = 9, 
	mGP2X_BTN_L
 = 10, 
	mGP2X_BTN_R
 = 11,

8 
	mGP2X_BTN_A
 = 12, 
	mGP2X_BTN_B
 = 13, 
	mGP2X_BTN_X
 = 14, 
	mGP2X_BTN_Y
 = 15,

9 
	mGP2X_BTN_VOL_UP
 = 23, 
	mGP2X_BTN_VOL_DOWN
 = 22, 
	mGP2X_BTN_PUSH
 = 27 };

12 #i‚de‡
GP2X_DEV_GP2X


13 
gp2x_dev_id
;

14 
	#GP2X_DEV_GP2X
 1

	)

15 
	#GP2X_DEV_WIZ
 2

	)

16 
	#GP2X_DEV_CAANOO
 3

	)

	@frontend/libpicofe/gp2x/plat.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<dúít.h
>

17 
	~<löux/öput.h
>

18 
	~<î∫o.h
>

20 
	~"../∂©.h
"

21 
	~"../öput.h
"

22 
	~"∂©_gp2x.h
"

23 
	~"soc.h
"

25 
	gdeÁu…_˝u_˛ock
;

26 
	ggp2x_dev_id
;

28 c⁄° * c⁄° 
	gˇ™oo_keys
[
KEY_MAX
 + 1] = {

29 [0 ... 
KEY_MAX
] = 
NULL
,

30 [
KEY_UP
] = "Up",

31 [
KEY_LEFT
] = "Left",

32 [
KEY_RIGHT
] = "Right",

33 [
KEY_DOWN
] = "Down",

34 [
BTN_TRIGGER
] = "A",

35 [
BTN_THUMB
] = "X",

36 [
BTN_THUMB2
] = "B",

37 [
BTN_TOP
] = "Y",

38 [
BTN_TOP2
] = "L",

39 [
BTN_PINKIE
] = "R",

40 [
BTN_BASE
] = "Home",

41 [
BTN_BASE2
] = "Lock",

42 [
BTN_BASE3
] = "I",

43 [
BTN_BASE4
] = "II",

44 [
BTN_BASE5
] = "Push",

48 
∂©_èrgë
 
	g∂©_èrgë
;

50 
	$∂©_èrgë_öô
()

52 
gp2x_soc_t
 
soc
;

53 
FILE
 *
f
;

55 
soc
 = 
	`soc_dëe˘
();

56 
soc
)

58 
SOCID_MMSP2
:

59 
	`mm•2_öô
();

60 
deÁu…_˝u_˛ock
 = 200;

61 
gp2x_dev_id
 = 
GP2X_DEV_GP2X
;

63 
SOCID_POLLUX
:

64 
	`pﬁlux_öô
();

65 
deÁu…_˝u_˛ock
 = 533;

66 
f
 = 
	`f›í
("/dev/accel", "rb");

67 i‡(
f
) {

68 
	`¥ötf
("detected Caanoo\n");

69 
gp2x_dev_id
 = 
GP2X_DEV_CAANOO
;

70 
	`f˛o£
(
f
);

73 
	`¥ötf
("detected Wiz\n");

74 
gp2x_dev_id
 = 
GP2X_DEV_WIZ
;

78 
	`¥ötf
("couldÇotÑecognize SoC.\n");

83 
	}
}

86 
	$∂©_èrgë_£tup_öput
()

88 i‡(
gp2x_dev_id
 =
GP2X_DEV_CAANOO
)

89 
	`ö_£t_c⁄fig
(
	`ö_«me_to_id
("evdev:pollux-analog"),

90 
IN_CFG_KEY_NAMES
,

91 
ˇ™oo_keys
, (caanoo_keys));

92 
	}
}

94 
	$∂©_èrgë_föish
()

96 
gp2x_soc_t
 
soc
;

98 
soc
 = 
	`soc_dëe˘
();

99 
soc
)

101 
SOCID_MMSP2
:

102 
	`mm•2_föish
();

104 
SOCID_POLLUX
:

105 
	`pﬁlux_föish
();

110 
	}
}

	@frontend/libpicofe/gp2x/plat_gp2x.h

1 #i‚de‡
__GP2X_H__


2 
	#__GP2X_H__


	)

4 
deÁu…_˝u_˛ock
;

8 
	mGP2X_DEV_GP2X
 = 1,

9 
	mGP2X_DEV_WIZ
,

10 
	mGP2X_DEV_CAANOO
,

12 
gp2x_dev_id
;

14 
∂©_gë_ticks_ms_good
();

15 
∂©_gë_ticks_us_good
();

	@frontend/libpicofe/gp2x/pollux_set.c

43 
	~<°dio.h
>

44 
	~<°dlib.h
>

45 
	~<°rög.h
>

46 
	~"pﬁlux_£t.h
"

49 
	$∑r£_lcd_timögs
(c⁄° *
°r
, *
d©a
)

51 *
lcd_timögs
 = 
d©a
;

52 c⁄° *
p
 = 
°r
;

53 
ªt
, 
c
;

54 
ªt
 = 
	`ssˇnf
(
°r
, "%d,%d,%d,%d,%d,%d,%d,%d",

55 &
lcd_timögs
[0], &lcd_timings[1], &lcd_timings[2], &lcd_timings[3],

56 &
lcd_timögs
[4], &lcd_timings[5], &lcd_timings[6], &lcd_timings[7]);

57 i‡(
ªt
 != 8)

60 
c
 = 0; c < 7 && *
p
 != 0;Ö++)

61 i‡(*
p
 == ',')

62 
c
++;

63 i‡(
c
 != 7)

66 '0' <*
p
 && *p <= '9')

67 
p
++;

69  
p
 - 
°r
;

70 
	}
}

72 
	$∑r£_øm_timögs
(c⁄° *
°r
, *
d©a
)

74 *
øm_timögs
 = 
d©a
;

75 c⁄° *
p
 = 
°r
;

76 
ªt
, 
c
;

77 
ˇs
;

79 
ªt
 = 
	`ssˇnf
(
p
, "%f,%d,%d,%d,%d,%d,%d",

80 &
ˇs
, &
øm_timögs
[1], &ram_timings[2], &ram_timings[3],

81 &
øm_timögs
[4], &ram_timings[5], &ram_timings[6]);

82 i‡(
ªt
 != 7)

84 i‡(
ˇs
 == 2)

85 
øm_timögs
[0] = 1;

86 i‡(
ˇs
 == 2.5)

87 
øm_timögs
[0] = 2;

88 i‡(
ˇs
 == 3)

89 
øm_timögs
[0] = 3;

92 
c
 = 0; c < 6 && *
p
 != 0;Ö++)

93 i‡(*
p
 == ',')

94 
c
++;

95 i‡(
c
 != 6)

97 '0' <*
p
 && *p <= '9')

98 
p
++;

100  
p
 - 
°r
;

101 
	}
}

103 
	$∑r£_decimÆ
(c⁄° *
°r
, *
d©a
)

105 *
ï
;

107 *(*)
d©a
 = 
	`°πoul
(
°r
, &
ï
, 10);

108 i‡(
ï
 =
°r
)

111  
ï
 - 
°r
;

112 
	}
}

115 
	$≠∂y_lcd_timögs
(vﬁ©ûê*
memªgs
, *
d©a
)

117 *
lcd_timögs
 = 
d©a
;

118 
i
;

120 
i
 = 0; i < 8; i++) {

121 i‡(
lcd_timögs
[
i
] & ~0xffff) {

122 
	`Ârötf
(
°dîr
, "pﬁlux_£t: invÆidÜcdÅimög %d: %d\n", 
i
, 
lcd_timögs
[i]);

127 
i
 = 0; i < 8; i++)

128 
memªgs
[(0x307c>>1Ë+ 
i
] = 
lcd_timögs
[i];

131 
	}
}

134 sig√d 
	madj
;

135 sig√d 
	mmö
;

136 sig√d 
	mmax
;

138 
	gøm_ønges
[] = {

148 
	$≠∂y_øm_timögs
(vﬁ©ûê*
memªgs
, *
d©a
)

150 *
øm_timögs
 = 
d©a
;

151 
i
, 
vÆ
;

153 
i
 = 0; i < 7; i++)

155 
øm_timögs
[
i
] +
øm_ønges
[i].
adj
;

156 i‡(
øm_timögs
[
i
] < 
øm_ønges
[i].
mö
 ||Ñam_timögs[i] >Ñam_ønges[i].
max
) {

157 
	`Ârötf
(
°dîr
, "pﬁlux_£t: invÆid RAMÅimög %d\n", 
i
);

162 
vÆ
 = 
memªgs
[0x14802>>1] & 0x0f00;

163 
vÆ
 |(
øm_timögs
[4] << 12) | (ram_timings[5] << 4) |Ñam_timings[6];

164 
memªgs
[0x14802>>1] = 
vÆ
;

166 
vÆ
 = 
memªgs
[0x14804>>1] & 0x4000;

167 
vÆ
 |(
øm_timögs
[0] << 12) | (ram_timings[1] << 8) |

168 (
øm_timögs
[2] << 4) |Ñam_timings[3];

169 
vÆ
 |= 0x8000;

170 
memªgs
[0x14804>>1] = 
vÆ
;

172 
i
 = 0; i < 0x100000 && (
memªgs
[0x14804>>1] & 0x8000); i++)

176 
	}
}

178 
	$≠∂y_dpc_˛kdiv0
(vﬁ©ûê*
memªgs
, *
d©a
)

180 
pcd
 = *(*)
d©a
;

181 
tmp
;

183 i‡((
pcd
 - 1) & ~0x3f) {

184 
	`Ârötf
(
°dîr
, "pﬁlux_£t: invÆidÜcd clkdiv0: %d\n", 
pcd
);

188 
pcd
 = (pcd - 1) & 0x3f;

189 
tmp
 = 
memªgs
[0x31c4>>1];

190 
memªgs
[0x31c4>>1] = (
tmp
 & ~0x3f0Ë| (
pcd
 << 4);

193 
	}
}

195 
	$≠∂y_˝u˛k
(vﬁ©ûê*
memªgs
, *
d©a
)

197 vﬁ©ûê*
memªgl
 = (vﬁ©ûê*)
memªgs
;

198 
mhz
 = *(*)
d©a
;

199 
adiv
, 
mdiv
, 
pdiv
, 
sdiv
 = 0;

200 
i
, 
vf000
, 
vf004
;

203 
	#SYS_CLK_FREQ
 27

	)

204 
pdiv
 = 9;

205 
mdiv
 = (
mhz
 * 
pdiv
Ë/ 
SYS_CLK_FREQ
;

206 i‡(
mdiv
 & ~0x3ff)

208 
vf004
 = (
pdiv
<<18Ë| (
mdiv
<<8Ë| 
sdiv
;

211 
adiv
 = 1; 
mhz
 /ádiv > 250;ádiv++)

214 
vf000
 = 
memªgl
[0xf000>>2];

215 
vf000
 = (vf000 & ~0x3c0Ë| ((
adiv
 - 1) << 6);

216 
memªgl
[0xf000>>2] = 
vf000
;

217 
memªgl
[0xf004>>2] = 
vf004
;

218 
memªgl
[0xf07c>>2] |= 0x8000;

219 
i
 = 0; (
memªgl
[0xf07c>>2] & 0x8000) && i < 0x100000; i++)

222 
	`¥ötf
("˛ock sëÅÿ%dMHz, AHB sëÅÿ%dMHz\n", 
mhz
, mhz / 
adiv
);

224 
	}
}

226 
	glcd_timögs
[8];

227 
	gøm_timögs
[7];

228 
	gdpc_˛kdiv0
;

229 
	g˝u˛k
;

231 c⁄° 
	glcd_t_hñp
[] = "htotal,hswidth,hastart,haend,vtotal,vswidth,vastart,vaend";

232 c⁄° 
	gøm_t_hñp
[] = "CAS,tRC,tRAS,tWR,tMRD,tRP,tRCD";

235 c⁄° *
	m«me
;

236 c⁄° *
	mhñp
;

237 (*
	m∑r£
)(c⁄° *
	m°r
, *
	md©a
);

238 (*
	m≠∂y
)(vﬁ©ûê*
	mmemªgs
, *
	md©a
);

239 *
	md©a
;

241 
	gÆl_∑øms
[] = {

242 { "lcd_timögs", 
lcd_t_hñp
, 
∑r£_lcd_timögs
, 
≠∂y_lcd_timögs
, 
lcd_timögs
 },

243 { "øm_timögs", 
øm_t_hñp
, 
∑r£_øm_timögs
, 
≠∂y_øm_timögs
, 
øm_timögs
 },

244 { "dpc_˛kdiv0", "dividî", 
∑r£_decimÆ
, 
≠∂y_dpc_˛kdiv0
, &
dpc_˛kdiv0
 },

245 { "˛kdiv0", "dividî", 
∑r£_decimÆ
, 
≠∂y_dpc_˛kdiv0
, &
dpc_˛kdiv0
 },

246 { "˝u˛k", "MHZ", 
∑r£_decimÆ
, 
≠∂y_˝u˛k
, &
˝u˛k
 },

248 
	#ALL_PARAM_COUNT
 ((
Æl_∑øms
Ë/ ◊Œ_∑øms[0]))

	)

254 
	$pﬁlux_£t
(vﬁ©ûê*
memªgs
, c⁄° *
°r
)

256 
∑r£d_∑øms
[
ALL_PARAM_COUNT
];

257 
≠∂õd_∑øms
[
ALL_PARAM_COUNT
];

258 
≠∂õd_somëhög
 = 0;

259 c⁄° *
p
, *
po
;

260 
i
, 
ªt
;

262 i‡(
°r
 =
NULL
)

265 
	`mem£t
(
∑r£d_∑øms
, 0, (parsed_params));

266 
	`mem£t
(
≠∂õd_∑øms
, 0, (applied_params));

268 
p
 = 
°r
;

271 
agaö
:

272 *
p
 == ';' || *p == ' ')

273 
p
++;

274 i‡(*
p
 == 0)

277 
i
 = 0; i < 
ALL_PARAM_COUNT
; i++)

279 
∑øm_Àn
 = 
	`°æí
(
Æl_∑øms
[
i
].
«me
);

280 i‡(
	`°∫cmp
(
p
, 
Æl_∑øms
[
i
].
«me
, 
∑øm_Àn
) == 0 &&Ö[param_len] == '=')

282 
p
 +
∑øm_Àn
 + 1;

283 
ªt
 = 
Æl_∑øms
[
i
].
	`∑r£
(
p
,áŒ_∑øms[i].
d©a
);

284 i‡(
ªt
 < 0) {

285 
	`Ârötf
(
°dîr
, "pﬁlux_£à∑r£r:Éº‹áà%-10s\n", 
p
);

286 
	`Ârötf
(
°dîr
, " vÆid f‹m© is: <%s>\n", 
Æl_∑øms
[
i
].
hñp
);

289 
∑r£d_∑øms
[
i
] = 1;

290 
p
 +
ªt
;

291 
agaö
;

296 
po
 = 
p
; *p != 0 && *p != ';';Ö++)

299 
	`Ârötf
(
°dîr
, "unhandledÖaram: ");

300 
	`fwrôe
(
po
, 1, 
p
 -Öo, 
°dîr
);

301 
	`Ârötf
(
°dîr
, "\n");

305 
i
 = 0; i < 
ALL_PARAM_COUNT
; i++)

307 i‡(!
∑r£d_∑øms
[
i
])

310 
ªt
 = 
Æl_∑øms
[
i
].
	`≠∂y
(
memªgs
,áŒ_∑øms[i].
d©a
);

311 i‡(
ªt
 < 0) {

312 
	`Ârötf
(
°dîr
, "pollux_set: failedÅoápply %s (bad value?)\n",

313 
Æl_∑øms
[
i
].
«me
);

317 
≠∂õd_somëhög
 = 1;

318 
≠∂õd_∑øms
[
i
] = 1;

321 i‡(
≠∂õd_somëhög
)

323 
c
;

324 
	`¥ötf
("applied: ");

325 
i
 = 
c
 = 0; i < 
ALL_PARAM_COUNT
; i++)

327 i‡(!
≠∂õd_∑øms
[
i
])

329 i‡(
c
 != 0)

330 
	`¥ötf
(", ");

331 
	`¥ötf
("%s", 
Æl_∑øms
[
i
].
«me
);

332 
c
++;

334 
	`¥ötf
("\n");

338 
	}
}

340 
	$pﬁlux_£t_‰omív
(vﬁ©ûê*
memªgs
,

341 c⁄° *
ív_v¨
)

343 c⁄° *
£t_°rög
;

344 
ªt
 = -1;

346 
£t_°rög
 = 
	`gëív
(
ív_v¨
);

347 i‡(
£t_°rög
)

348 
ªt
 = 
	`pﬁlux_£t
(
memªgs
, 
£t_°rög
);

350 
	`¥ötf
("ív v¨ %†nŸ deföed.\n", 
ív_v¨
);

352  
ªt
;

353 
	}
}

355 #ifde‡
BINARY


356 
	~<sys/ty≥s.h
>

357 
	~<sys/°©.h
>

358 
	~<f˙é.h
>

359 
	~<sys/mm™.h
>

360 
	~<uni°d.h
>

362 
	$ußge
(c⁄° *
bö¨y
)

364 
i
;

365 
	`¥ötf
("usage:\n%s <set_str[;set_str[;...]]>\n"

366 "£t_°r:\n", 
bö¨y
);

367 
i
 = 0; i < 
ALL_PARAM_COUNT
; i++)

368 
	`¥ötf
(" %s=<%s>\n", 
Æl_∑øms
[
i
].
«me
,áŒ_∑øms[i].
hñp
);

369 
	}
}

371 
	$maö
(
¨gc
, *
¨gv
[])

373 vﬁ©ûê*
memªgs
;

374 
ªt
, 
memdev
;

376 i‡(
¨gc
 != 2) {

377 
	`ußge
(
¨gv
[0]);

381 
memdev
 = 
	`›í
("/dev/mem", 
O_RDWR
);

382 i‡(
memdev
 == -1)

384 
	`≥º‹
("open(/dev/mem) failed");

388 
memªgs
 = 
	`mm≠
(0, 0x20000, 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
, 
memdev
, 0xc0000000);

389 i‡(
memªgs
 =
MAP_FAILED
)

391 
	`≥º‹
("mmap(memregs) failed");

392 
	`˛o£
(
memdev
);

396 
ªt
 = 
	`pﬁlux_£t
(
memªgs
, 
¨gv
[1]);

398 
	`munm≠
((*)
memªgs
, 0x20000);

399 
	`˛o£
(
memdev
);

401  
ªt
;

402 
	}
}

	@frontend/libpicofe/gp2x/pollux_set.h

1 #ifde‡
__˝lu•lus


6 
pﬁlux_£t
(vﬁ©ûê*
memªgs
, c⁄° *
°r
);

7 
pﬁlux_£t_‰omív
(vﬁ©ûê*
memªgs
,

8 c⁄° *
ív_v¨
);

10 #ifde‡
__˝lu•lus


	@frontend/libpicofe/gp2x/soc.c

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<sys/°©.h
>

16 
	~<f˙é.h
>

17 
	~<sys/mm™.h
>

18 
	~<uni°d.h
>

20 
	~"soc.h
"

22 vﬁ©ûê*
	gmemªgs
;

23 vﬁ©ûê*
	gmemªgl
;

24 
	gmemdev
 = -1;

26 (*
gp2x_gë_ticks_ms
)();

27 (*
gp2x_gë_ticks_us
)();

29 
gp2x_soc_t
 
	$soc_dëe˘
()

31 vﬁ©ûê*
memªgs
;

32 vﬁ©ûê*
memªgl
;

33 
gp2x_soc_t
 
ªt
 = -2;

34 
pﬁlux_chù«me
[0x30/4 + 1];

35 *
pﬁlux_chù«me_c
 = (*)
pﬁlux_chù«me
;

36 
memdev_tmp
;

37 
i
;

39 i‡(()
ªt
 != -2)

41  
ªt
;

43 
memdev_tmp
 = 
	`›í
("/dev/mem", 
O_RDONLY
);

44 i‡(
memdev_tmp
 == -1)

46 
	`≥º‹
("open(/dev/mem)");

47 
ªt
 = -1;

51 
memªgs
 = 
	`mm≠
(0, 0x20000, 
PROT_READ
, 
MAP_SHARED
,

52 
memdev_tmp
, 0xc0000000);

53 i‡(
memªgs
 =
MAP_FAILED
)

55 
	`≥º‹
("mmap(memregs)");

56 
	`˛o£
(
memdev_tmp
);

57 
ªt
 = -1;

60 
memªgl
 = (vﬁ©ûê*)
memªgs
;

62 i‡(
memªgs
[0x1836>>1] == 0x2330)

64 
	`¥ötf
("looksÜikeÅhis is MMSP2\n");

65 
ªt
 = 
SOCID_MMSP2
;

66 
out
;

71 
i
 = 0; i < 0x30; i += 4)

73 
pﬁlux_chù«me
[
i
 >> 2] = 
memªgl
[(0x1f810 + i) >> 2];

75 
pﬁlux_chù«me_c
[0x30] = 0;

77 
i
 = 0; i < 0x30; i++)

79 
c
 = 
pﬁlux_chù«me_c
[
i
];

80 i‡(
c
 < 0x20 || c > 0x7f)

81 
nŸ_pﬁlux_like
;

84 
	`¥ötf
("foundÖﬁlux-likêid: \"%s\"\n", 
pﬁlux_chù«me_c
);

86 i‡(
	`°∫cmp
(
pﬁlux_chù«me_c
, "MAGICEYES-LEAPFROG-LF1000", 25) ||

87 
	`°∫cmp
(
pﬁlux_chù«me_c
, "MAGICEYES-POLLUX", 16))

89 
ªt
 = 
SOCID_POLLUX
;

90 
out
;

93 
nŸ_pﬁlux_like
:

94 
out
:

95 
	`munm≠
((*)
memªgs
, 0x20000);

96 
	`˛o£
(
memdev_tmp
);

97  
ªt
;

98 
	}
}

	@frontend/libpicofe/gp2x/soc.h

2 vﬁ©ûê*
memªgs
;

3 vﬁ©ûê*
memªgl
;

4 
memdev
;

7 
	mSOCID_MMSP2
 = 1,

8 
	mSOCID_POLLUX
,

9 } 
	tgp2x_soc_t
;

11 
gp2x_soc_t
 
soc_dëe˘
();

13 
mm•2_öô
();

14 
mm•2_föish
();

16 
pﬁlux_öô
();

17 
pﬁlux_föish
();

20 (*
gp2x_gë_ticks_ms
)();

21 (*
gp2x_gë_ticks_us
)();

	@frontend/libpicofe/gp2x/soc_mmsp2.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~<m©h.h
>

16 
	~<sys/ty≥s.h
>

17 
	~<sys/°©.h
>

18 
	~<f˙é.h
>

19 
	~<sys/mm™.h
>

20 
	~<sys/io˘l.h
>

21 
	~<uni°d.h
>

22 
	~<löux/soundˇrd.h
>

24 
	~"soc.h
"

25 
	~"soc_mm•2.h
"

26 
	~"∂©_gp2x.h
"

27 
	~"../löux/¢dout_oss.h
"

28 
	~"../∂©.h
"

30 
	gmixîdev
 = -1;

31 
	gtouchdev
 = -1;

32 
	gtouchˇl
[7] = { 6203, 0, -1501397, 0, -4200, 16132680, 65536 };

34 
	ggamma_was_ch™ged
 = 0;

35 
	g˝u˛k_was_ch™ged
 = 0;

36 
	gmemtimex_ﬁd
[2];

37 
	gªg0910
;

40 
	$∑u£940
(
yes
)

42 i‡(
yes
)

43 
memªgs
[0x0904>>1] &= 0xFFFE;

45 
memªgs
[0x0904>>1] |= 1;

46 
	}
}

48 
	$ª£t940
(
yes
, 
b™k
)

50 
memªgs
[0x3B48>>1] = ((
yes
&1Ë<< 7Ë| (
b™k
 & 0x03);

51 
	}
}

61 
	#SYS_CLK_FREQ
 7372800

	)

63 
	g˝u_cuºít_mhz
 = 200;

65 
	$mm•2_˛ock_gë
()

68  
˝u_cuºít_mhz
;

69 
	}
}

71 
	$mm•2_˛ock_£t
(
mhz
)

73 
mdiv
, 
pdiv
, 
sdiv
 = 0;

74 
v
;

75 
i
;

77 
pdiv
 = 3;

78 
mdiv
 = (
mhz
 * 
pdiv
 * 1000000Ë/ 
SYS_CLK_FREQ
;

79 i‡(
mdiv
 & ~0xff) {

80 
	`Ârötf
(
°dîr
, "övÆid cpu˛k MHz: %u\n", 
mhz
);

83 
v
 = ((
mdiv
-8)<<8Ë| ((
pdiv
-2)<<2Ë| 
sdiv
;

84 
memªgs
[0x910>>1] = 
v
;

86 
i
 = 0; i < 10000; i++)

87 i‡(!(
memªgs
[0x902>>1] & 1))

90 
˝u˛k_was_ch™ged
 = 1;

91 
˝u_cuºít_mhz
 = 
mhz
;

93 
	}
}

96 
	#TIMING_CHECK
(
t
, 
adj
, 
mask
) \

97 
t
 +
adj
; \

98 i‡(
t
 & ~
mask
) \

99 
bad


	)

101 
__©åibuã__
((
noölöe
)Ë
	$•íd_cy˛es
(
c
)

103 
asm
 volatile(

106 : "Ù" (
c
) : "0" (c) : "cc");

107 
	}
}

109 
	$£t_øm_timög_vÆs
(
tCAS
, 
tRC
, 
tRAS
, 
tWR
, 
tMRD
, 
tRFC
, 
tRP
, 
tRCD
)

111 
i
;

112 
	`TIMING_CHECK
(
tCAS
, -2, 0x1);

113 
	`TIMING_CHECK
(
tRC
, -1, 0xf);

114 
	`TIMING_CHECK
(
tRAS
, -1, 0xf);

115 
	`TIMING_CHECK
(
tWR
, -1, 0xf);

116 
	`TIMING_CHECK
(
tMRD
, -1, 0xf);

117 
	`TIMING_CHECK
(
tRFC
, -1, 0xf);

118 
	`TIMING_CHECK
(
tRP
, -1, 0xf);

119 
	`TIMING_CHECK
(
tRCD
, -1, 0xf);

122 
	`•íd_cy˛es
(1);

124 
memªgs
[0x3802>>1] = ((
tMRD
 & 0xFË<< 12Ë| ((
tRFC
 & 0xFË<< 8Ë| ((
tRP
 & 0xFË<< 4Ë| (
tRCD
 & 0xF);

125 
memªgs
[0x3804>>1] = 0x8000 | ((
tCAS
 & 1Ë<< 12Ë| ((
tRC
 & 0xFË<< 8Ë| ((
tRAS
 & 0xFË<< 4Ë| (
tWR
 & 0xF);

128 
	`•íd_cy˛es
(128*1024);

129 
i
 = 0; i < 8*1024; i++)

130 i‡(!(
memªgs
[0x3804>>1] & 0x8000))

133 
	`¥ötf
("RAMÅimings set.\n");

135 
bad
:

136 
	`Ârötf
(
°dîr
, "RAMÅimings invalid.\n");

137 
	}
}

139 
	$£t_øm_timögs_
()

142 
	`£t_øm_timög_vÆs
(2, 6, 4, 1, 1, 1, 2, 2);

143 
	}
}

145 
	$un£t_øm_timögs_
()

147 
memªgs
[0x3802>>1] = 
memtimex_ﬁd
[0];

148 
memªgs
[0x3804>>1] = 
memtimex_ﬁd
[1] | 0x8000;

149 
	`¥ötf
("RAMÅimingsÑesetÅo startup values.\n");

150 
	}
}

155 
	mªg
, 
	mvÆmask
, 
	mvÆ
;

157 
	tªg_£âög
;

160 c⁄° 
ªg_£âög
 
	glcd_øã_120
[] =

173 c⁄° 
ªg_£âög
 
	glcd_øã_100
[] =

185 
ªg_£âög
 
	glcd_øã_deÁu…s
[] =

197 
	$gë_ªg_£âög
(
ªg_£âög
 *
£t
)

199 ; 
£t
->
ªg
; set++)

201 
vÆ
 = 
memªgs
[
£t
->
ªg
 >> 1];

202 
vÆ
 &
£t
->
vÆmask
;

203 
£t
->
vÆ
 = val;

205 
	}
}

207 
	$£t_ªg_£âög
(c⁄° 
ªg_£âög
 *
£t
)

209 ; 
£t
->
ªg
; set++)

211 
vÆ
 = 
memªgs
[
£t
->
ªg
 >> 1];

212 
vÆ
 &~
£t
->
vÆmask
;

213 
vÆ
 |
£t
->val;

214 
memªgs
[
£t
->
ªg
 >> 1] = 
vÆ
;

216 
	}
}

218 
	$mm•2_lcdøã_£t
(
is_∑l
)

220 i‡(
memªgs
[0x2800>>1] & 0x100)

223 
	`¥ötf
("£âög cu°om LCDÑe‰esh (%d Hz)... ", 
is_∑l
 ? 100 : 120);

224 
	`fÊush
(
°dout
);

226 
	`£t_ªg_£âög
(
is_∑l
 ? 
lcd_øã_100
 : 
lcd_øã_120
);

227 
	`¥ötf
("done.\n");

229 
	}
}

231 
	$un£t_lcd_cu°om_øã_
()

233 
	`¥ötf
("resetÅoÖrev LCDÑefresh.\n");

234 
	`£t_ªg_£âög
(
lcd_øã_deÁu…s
);

235 
	}
}

237 
	$£t_lcd_gamma_
(
g100
, 
A_SNs_curve
)

239 
gamma
 = (Ë
g100
 / 100.0f;

240 
i
;

241 
gamma
 = 1 / gamma;

243 i‡(
g100
 == 100)

244 
A_SNs_curve
 = 0;

247 
memªgs
[0x2880>>1] &= ~(1<<12);

249 
memªgs
[0x295C>>1] = 0;

250 
i
 = 0; i < 256; i++)

252 
g
;

253 
s
;

254 c⁄° 
gªy50
=143, 
gªy75
=177, 
gªy25
=97;

255 
bœh
;

257 i‡(
A_SNs_curve
)

260 
bœh
 = (–-128 * 
	`exp
(-
	`powf
((Ë
i
/64.0f + 2.0f , 2.0f))) +

261 –-64 * 
	`exp
(-
	`powf
((Ë
i
/64.0f + 1.0f , 2.0f))) +

262 (
gªy25
 * 
	`exp
(-
	`powf
((Ë
i
/64.0f - 1.0f , 2.0f))) +

263 (
gªy50
 * 
	`exp
(-
	`powf
((Ë
i
/64.0f - 2.0f , 2.0f))) +

264 (
gªy75
 * 
	`exp
(-
	`powf
((Ë
i
/64.0f - 3.0f , 2.0f))) +

265 –256 * 
	`exp
(-
	`powf
((Ë
i
/64.0f - 4.0f , 2.0f))) +

266 –320 * 
	`exp
(-
	`powf
((Ë
i
/64.0f - 5.0f , 2.0f))) +

267 –384 * 
	`exp
(-
	`powf
((Ë
i
/64.0f - 6.0f , 2.0f)))) / 1.772637;

268 
bœh
 += 0.5;

272 
bœh
 = ()
i
;

275 
g
 = ()(255.0 * 
	`pow
(
bœh
/255.0, 
gamma
));

277 
s
 = (
g
<<8) | g;

278 
memªgs
[0x295E>>1]
s
;

279 
memªgs
[0x295E>>1]
g
;

282 
gamma_was_ch™ged
 = 1;

283 
	}
}

285 
	$mm•2_gamma_£t
(
vÆ
, 
bœck_Àvñ
)

287 
	`£t_lcd_gamma_
(
vÆ
, 1);

289 
	}
}

293 
	sucb1x00_ts_evít


295 
	m¥essuª
;

296 
	mx
;

297 
	my
;

298 
	m∑d
;

299 
timevÆ
 
	m°amp
;

300 } 
	tUCB1X00_TS_EVENT
;

302 
	$gp2x_touch∑d_ªad
(*
x
, *
y
)

304 
UCB1X00_TS_EVENT
 
evít
;

305 
zîo_£í
 = 0;

306 
ªtvÆ
;

308 i‡(
touchdev
 < 0)  -1;

310 
ªtvÆ
 = 
	`ªad
(
touchdev
, &
evít
, (event));

311 i‡(
ªtvÆ
 <= 0) {

312 
	`≥º‹
("touchÑead failed");

316 i‡(
evít
.
¥essuª
 =0Ë
zîo_£í
 = 1;

318 i‡(
x
Ë*x = (
evít
.x * 
touchˇl
[0] +Åouchcal[2]) >> 16;

319 i‡(
y
Ë*y = (
evít
.y * 
touchˇl
[4] +Åouchcal[5]) >> 16;

322  
zîo_£í
 ? 
evít
.
¥essuª
 : 0;

323 
	}
}

325 
	$¥oc_£t
(c⁄° *
∑th
, c⁄° *
vÆ
)

327 
FILE
 *
f
;

328 
tmp
[16];

330 
f
 = 
	`f›í
(
∑th
, "w");

331 i‡(
f
 =
NULL
) {

332 
	`¥ötf
("ÁûedÅÿ›í: %s\n", 
∑th
);

336 
	`Ârötf
(
f
, "0\n");

337 
	`f˛o£
(
f
);

339 
	`¥ötf
("\"%s\" i†£àto: ", 
∑th
);

340 
f
 = 
	`f›í
(
∑th
, "r");

341 i‡(
f
 =
NULL
) {

342 
	`¥ötf
("(open failed)\n");

346 
	`fgës
(
tmp
, —mp), 
f
);

347 
	`¥ötf
("%s", 
tmp
);

348 
	`f˛o£
(
f
);

349 
	}
}

351 
	$°ï_vﬁume
(*
vﬁume
, 
diff
)

353 
ªt
, 
vÆ
;

355 i‡(
mixîdev
 < 0)

358 *
vﬁume
 +
diff
;

359 i‡(*
vﬁume
 >= 100)

360 *
vﬁume
 = 100;

361 i‡(*
vﬁume
 < 0)

362 *
vﬁume
 = 0;

364 
vÆ
 = *
vﬁume
;

365 
vÆ
 |= val << 8;

367 
ªt
 = 
	`io˘l
(
mixîdev
, 
SOUND_MIXER_WRITE_PCM
, &
vÆ
);

368 i‡(
ªt
 == -1) {

369 
	`≥º‹
("WRITE_PCM");

370  
ªt
;

374 
	}
}

376 
	$mm•2_öô
()

378 
memdev
 = 
	`›í
("/dev/mem", 
O_RDWR
);

379 i‡(
memdev
 == -1)

381 
	`≥º‹
("open(\"/dev/mem\")");

382 
	`exô
(1);

385 
memªgs
 = 
	`mm≠
(0, 0x10000, 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
, 
memdev
, 0xc0000000);

386 i‡(
memªgs
 =
MAP_FAILED
)

388 
	`≥º‹
("mmap(memregs)");

389 
	`exô
(1);

391 
memªgl
 = (vﬁ©ûê*Ë
memªgs
;

393 
memªgs
[0x2880>>1] &= ~0x383;

396 
	`gë_ªg_£âög
(
lcd_øã_deÁu…s
);

399 
ªg0910
 = 
memªgs
[0x0910>>1];

400 
memtimex_ﬁd
[0] = 
memªgs
[0x3802>>1];

401 
memtimex_ﬁd
[1] = 
memªgs
[0x3804>>1];

404 
touchdev
 = 
	`›í
("/dev/touchs¸ìn/wm97xx", 
O_RDONLY
);

405 i‡(
touchdev
 >= 0) {

406 
FILE
 *
pcf
 = 
	`f›í
("/etc/pointercal", "r");

407 i‡(
pcf
) {

408 
	`fsˇnf
(
pcf
, "%d %d %d %d %d %d %d", &
touchˇl
[0], &touchcal[1],

409 &
touchˇl
[2], &touchcal[3], &touchcal[4], &touchcal[5], &touchcal[6]);

410 
	`f˛o£
(
pcf
);

412 
	`¥ötf
("foundÅouchscreen/wm97xx\n");

416 
	`¥oc_£t
("/proc/sys/vm/max-readahead", "0\n");

417 
	`¥oc_£t
("/proc/sys/vm/min-readahead", "0\n");

419 
mixîdev
 = 
	`›í
("/dev/mixî", 
O_RDWR
);

420 i‡(
mixîdev
 == -1)

421 
	`≥º‹
("open(/dev/mixer)");

423 
	`£t_øm_timögs_
();

425 
∂©_èrgë
.
˝u_˛ock_gë
 = 
mm•2_˛ock_gë
;

426 
∂©_èrgë
.
˝u_˛ock_£t
 = 
mm•2_˛ock_£t
;

427 
∂©_èrgë
.
lcdøã_£t
 = 
mm•2_lcdøã_£t
;

428 
∂©_èrgë
.
gamma_£t
 = 
mm•2_gamma_£t
;

429 
∂©_èrgë
.
°ï_vﬁume
 = step_volume;

431 
gp2x_gë_ticks_ms
 = 
∂©_gë_ticks_ms_good
;

432 
gp2x_gë_ticks_us
 = 
∂©_gë_ticks_us_good
;

434 
¢dout_oss_ˇn_ª°¨t
 = 0;

435 
	}
}

437 
	$mm•2_föish
()

439 
	`ª£t940
(1, 3);

440 
	`∑u£940
(1);

442 
	`un£t_lcd_cu°om_øã_
();

443 i‡(
gamma_was_ch™ged
)

444 
	`£t_lcd_gamma_
(100, 0);

445 
	`un£t_øm_timögs_
();

446 i‡(
˝u˛k_was_ch™ged
)

447 
memªgs
[0x910>>1] = 
ªg0910
;

449 
	`munm≠
((*)
memªgs
, 0x10000);

450 
	`˛o£
(
memdev
);

451 i‡(
touchdev
 >= 0)

452 
	`˛o£
(
touchdev
);

453 i‡(
mixîdev
 >= 0)

454 
	`˛o£
(
mixîdev
);

455 
	}
}

	@frontend/libpicofe/gp2x/soc_mmsp2.h

2 
memdev
;

3 vﬁ©ûê*
gp2x_memªgs
;

4 vﬁ©ûê*
gp2x_memªgl
;

7 
∑u£940
(
yes
);

8 
ª£t940
(
yes
, 
b™k
);

	@frontend/libpicofe/gp2x/soc_pollux.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<sys/°©.h
>

24 
	~<f˙é.h
>

25 
	~<sys/mm™.h
>

26 
	~<uni°d.h
>

27 
	~<sys/io˘l.h
>

28 
	~<löux/soundˇrd.h
>

30 
	~"soc.h
"

31 
	~"∂©_gp2x.h
"

32 
	~"pﬁlux_£t.h
"

33 
	~"../∂©.h
"

35 
	gb©tdev
 = -1, 
	gmixîdev
 = -1;

36 
	g˝u_˛ock_Ælowed
;

37 
	gßved_memtimex
[2];

38 
	gßved_video_ªgs
[2][6];

39 
	gtimî_dri·
;

41 #i‚de‡
ARRAY_SIZE


42 
	#ARRAY_SIZE
(
x
Ë((xË/ (x[0]))

	)

47 
	$decode_∂l
(
ªg
)

49 
v
;

50 
p
, 
m
, 
s
;

52 
p
 = (
ªg
 >> 18) & 0x3f;

53 
m
 = (
ªg
 >> 8) & 0x3ff;

54 
s
 = 
ªg
 & 0xff;

56 i‡(
p
 == 0)

57 
p
 = 1;

59 
v
 = 27000000;

60 
v
 = v * 
m
 / (
p
 << 
s
);

61  
v
;

62 
	}
}

65 
	$£t_øm_timögs
()

67 
	`pﬁlux_£t_‰omív
(
memªgs
, "POLLUX_RAM_TIMINGS");

68 
	}
}

70 
	$un£t_øm_timögs
()

72 
i
;

74 
memªgs
[0x14802>>1] = 
ßved_memtimex
[0];

75 
memªgs
[0x14804>>1] = 
ßved_memtimex
[1] | 0x8000;

77 
i
 = 0; i < 0x100000; i++)

78 i‡(!(
memªgs
[0x14804>>1] & 0x8000))

81 
	`¥ötf
("RAMÅimingsÑesetÅo startup values.\n");

82 
	}
}

84 
	#TIMER_BASE3
 0x1980

	)

85 
	#TIMER_REG
(
x
Ë
memªgl
[(
TIMER_BASE3
 + xË>> 2]

	)

87 
	$gp2x_gë_ticks_us_
()

89 
div
 = 
	`TIMER_REG
(0x08) & 3;

90 
	`TIMER_REG
(0x08Ë0x48 | 
div
;

91  
	`TIMER_REG
(0);

92 
	}
}

94 
	$gp2x_gë_ticks_ms_
()

97 
v64
;

98 
v64
 = ()
	`gp2x_gë_ticks_us_
() * 4294968;

99  
v64
 >> 32;

100 
	}
}

102 
	$timî_˛ónup
()

104 
	`TIMER_REG
(0x40) = 0x0c;

105 
	`TIMER_REG
(0x08) = 0x23;

106 
	`TIMER_REG
(0x00) = 0;

107 
	`TIMER_REG
(0x40) = 0;

108 
	`TIMER_REG
(0x44) = 0;

109 
	}
}

111 
	$ßve_mu…ùÀ_ªgs
(*
de°
, 
ba£
, 
cou¡
)

113 c⁄° vﬁ©ûê*
ªgs
 = 
memªgl
 + 
ba£
 / 4;

114 
i
;

116 
i
 = 0; i < 
cou¡
; i++)

117 
de°
[
i
] = 
ªgs
[i];

118 
	}
}

120 
	$ª°‹e_mu…ùÀ_ªgs
(
ba£
, c⁄° *
§c
, 
cou¡
)

122 vﬁ©ûê*
ªgs
 = 
memªgl
 + 
ba£
 / 4;

123 
i
;

125 
i
 = 0; i < 
cou¡
; i++)

126 
ªgs
[
i
] = 
§c
[i];

127 
	}
}

129 
	$pﬁlux_gë_ªÆ_¢d_øã
(
ªq_øã
)

131 
˛k0_§c
, 
˛k1_§c
, 
øã
, 
div
;

133 
˛k0_§c
 = (
memªgl
[0xdbc4>>2] >> 1) & 7;

134 
˛k1_§c
 = (
memªgl
[0xdbc8>>2] >> 1) & 7;

135 i‡(
˛k0_§c
 > 1 || 
˛k1_§c
 != 7) {

136 
	`Ârötf
(
°dîr
, "gë_ªÆ_¢d_øã: bad clk sour˚s: %d %d\n", 
˛k0_§c
, 
˛k1_§c
);

137  
ªq_øã
;

140 
øã
 = 
	`decode_∂l
(
˛k0_§c
 ? 
memªgl
[0xf008>>2] : memregl[0xf004>>2]);

143 
div
 = ((
memªgl
[0xdbc4>>2] >> 4) & 0x3f) + 1;

144 
øã
 /
div
;

145 
div
 = ((
memªgl
[0xdbc8>>2] >> 4) & 0x3f) + 1;

146 
øã
 /
div
;

147 
øã
 /= 64;

150 
øã
 -øã * 
timî_dri·
 / 1000000;

151 
	`¥ötf
("adju°edÑ©e: %d\n", 
øã
);

153 i‡(
øã
 < 8000-1000 ||Ñate > 44100+1000) {

154 
	`Ârötf
(
°dîr
, "gë_ªÆ_¢d_øã: gŸ badÑ©e: %d\n", 
øã
);

155  
ªq_øã
;

158  
øã
;

159 
	}
}

162 
	$pﬁlux_˝u_˛ock_gë
()

164  
	`decode_∂l
(
memªgl
[0xf004>>2]) / 1000000;

165 
	}
}

167 
	$pﬁlux_˝u_˛ock_£t
(
mhz
)

169 
adiv
, 
mdiv
, 
pdiv
, 
sdiv
 = 0;

170 
i
, 
vf000
, 
vf004
;

172 i‡(!
˝u_˛ock_Ælowed
)

174 i‡(
mhz
 =
	`pﬁlux_˝u_˛ock_gë
())

178 
	#SYS_CLK_FREQ
 27

	)

179 
pdiv
 = 9;

180 
mdiv
 = (
mhz
 * 
pdiv
Ë/ 
SYS_CLK_FREQ
;

181 i‡(
mdiv
 & ~0x3ff)

183 
vf004
 = (
pdiv
<<18Ë| (
mdiv
<<8Ë| 
sdiv
;

186 
adiv
 = 1; 
mhz
 /ádiv > 250;ádiv++)

189 
vf000
 = 
memªgl
[0xf000>>2];

190 
vf000
 = (vf000 & ~0x3c0Ë| ((
adiv
 - 1) << 6);

191 
memªgl
[0xf000>>2] = 
vf000
;

192 
memªgl
[0xf004>>2] = 
vf004
;

193 
memªgl
[0xf07c>>2] |= 0x8000;

194 
i
 = 0; (
memªgl
[0xf07c>>2] & 0x8000) && i < 0x100000; i++)

197 
	`¥ötf
("˛ock sëÅÿ%dMHz, AHB sëÅÿ%dMHz\n", 
mhz
, mhz / 
adiv
);

199 
	}
}

201 
	$pﬁlux_b©_ˇ∑côy_gë
()

203 
magic_vÆ
 = 0;

205 i‡(
b©tdev
 < 0)

207 i‡(
	`ªad
(
b©tdev
, &
magic_vÆ
, (magic_val)) != (magic_val))

209 
magic_vÆ
) {

216 
	}
}

218 
	$°ï_vﬁume
(*
vﬁume
, 
diff
)

220 
ªt
, 
vÆ
;

222 i‡(
mixîdev
 < 0)

225 *
vﬁume
 +
diff
;

226 i‡(*
vﬁume
 > 255)

227 *
vﬁume
 = 255;

228 i‡(*
vﬁume
 < 0)

229 *
vﬁume
 = 0;

231 
vÆ
 = *
vﬁume
;

232 
vÆ
 |= val << 8;

234 
ªt
 = 
	`io˘l
(
mixîdev
, 
SOUND_MIXER_WRITE_PCM
, &
vÆ
);

235 i‡(
ªt
 == -1) {

236 
	`≥º‹
("WRITE_PCM");

237  
ªt
;

241 
	}
}

243 
	$pﬁlux_öô
()

245 
øã
, 
timî_div
, 
timî_div2
;

247 
memdev
 = 
	`›í
("/dev/mem", 
O_RDWR
);

248 i‡(
memdev
 == -1) {

249 
	`≥º‹
("open(/dev/mem) failed");

250 
	`exô
(1);

253 
memªgs
 = 
	`mm≠
(0, 0x20000, 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
,

254 
memdev
, 0xc0000000);

255 i‡(
memªgs
 =
MAP_FAILED
) {

256 
	`≥º‹
("mmap(memregs) failed");

257 
	`exô
(1);

259 
memªgl
 = (vﬁ©ûê*)
memªgs
;

261 
ßved_memtimex
[0] = 
memªgs
[0x14802>>1];

262 
ßved_memtimex
[1] = 
memªgs
[0x14804>>1];

264 
	`£t_øm_timögs
();

267 
	`ßve_mu…ùÀ_ªgs
(
ßved_video_ªgs
[0], 0x4058, 
	`ARRAY_SIZE
(saved_video_regs[0]));

268 
	`ßve_mu…ùÀ_ªgs
(
ßved_video_ªgs
[1], 0x4458, 
	`ARRAY_SIZE
(saved_video_regs[1]));

272 i‡((
memªgl
[0xf000>>2] & 0x03000030) == 0x01000000)

273 
˝u_˛ock_Ælowed
 = 1;

275 
˝u_˛ock_Ælowed
 = 0;

276 
	`Ârötf
(
°dîr
, "unexpected PLL config (%08x), overclocking disabled\n",

277 
memªgl
[0xf000>>2]);

281 
øã
 = 
	`decode_∂l
(
memªgl
[0xf008>>2]);

282 
	`¥ötf
("PLL1 @ %dHz\n", 
øã
);

285 
timî_div
 = (
øã
 + 500000) / 1000000;

286 
timî_div2
 = 0;

287 
timî_div
 > 256) {

288 
timî_div
 /= 2;

289 
timî_div2
++;

291 i‡(1 <
timî_div
 &&Åimî_div <256 && 
timî_div2
 < 4) {

292 
timî_øã
 = (
øã
 >> 
timî_div2
Ë/ 
timî_div
;

293 i‡(
	`TIMER_REG
(0x08) & 8) {

294 
	`Ârötf
(
°dîr
, "warning:Åimer in use, overriding!\n");

295 
	`timî_˛ónup
();

297 
timî_dri·
 = 
timî_øã
 - 1000000;

298 i‡(
timî_dri·
 != 0)

299 
	`Ârötf
(
°dîr
, "warning:Åimer drift %d us\n",

300 
timî_dri·
);

302 
timî_div2
 = (timer_div2 + 3) & 3;

303 
	`TIMER_REG
(0x44Ë((
timî_div
 - 1) << 4) | 2;

304 
	`TIMER_REG
(0x40) = 0x0c;

305 
	`TIMER_REG
(0x08Ë0x68 | 
timî_div2
;

307 
gp2x_gë_ticks_ms
 = 
gp2x_gë_ticks_ms_
;

308 
gp2x_gë_ticks_us
 = 
gp2x_gë_ticks_us_
;

311 
	`Ârötf
(
°dîr
, "warning: couldÇot make use ofÅimer\n");

314 
gp2x_gë_ticks_ms
 = 
∂©_gë_ticks_ms_good
;

315 
gp2x_gë_ticks_us
 = 
∂©_gë_ticks_us_good
;

318 
b©tdev
 = 
	`›í
("/dev/pﬁlux_b©t", 
O_RDONLY
);

319 i‡(
b©tdev
 < 0)

320 
	`≥º‹
("Warning: could't openÖollux_batt");

322 
mixîdev
 = 
	`›í
("/dev/mixî", 
O_RDWR
);

323 i‡(
mixîdev
 == -1)

324 
	`≥º‹
("open(/dev/mixer)");

326 
∂©_èrgë
.
˝u_˛ock_gë
 = 
pﬁlux_˝u_˛ock_gë
;

327 
∂©_èrgë
.
˝u_˛ock_£t
 = 
pﬁlux_˝u_˛ock_£t
;

328 
∂©_èrgë
.
b©_ˇ∑côy_gë
 = 
pﬁlux_b©_ˇ∑côy_gë
;

329 
∂©_èrgë
.
°ï_vﬁume
 = step_volume;

330 
	}
}

332 
	$pﬁlux_föish
()

334 
	`timî_˛ónup
();

336 
	`un£t_øm_timögs
();

338 
	`ª°‹e_mu…ùÀ_ªgs
(0x4058, 
ßved_video_ªgs
[0],

339 
	`ARRAY_SIZE
(
ßved_video_ªgs
[0]));

340 
	`ª°‹e_mu…ùÀ_ªgs
(0x4458, 
ßved_video_ªgs
[1],

341 
	`ARRAY_SIZE
(
ßved_video_ªgs
[1]));

342 
memªgl
[0x4058>>2] |= 0x10;

343 
memªgl
[0x4458>>2] |= 0x10;

345 i‡(
b©tdev
 >= 0)

346 
	`˛o£
(
b©tdev
);

347 i‡(
mixîdev
 >= 0)

348 
	`˛o£
(
mixîdev
);

349 
	`munm≠
((*)
memªgs
, 0x20000);

350 
	`˛o£
(
memdev
);

351 
	}
}

	@frontend/libpicofe/gp2x/soc_pollux.h

2 vﬁ©ûê*
memªgs
;

3 vﬁ©ûê*
memªgl
;

4 
memdev
;

6 
pﬁlux_gë_ªÆ_¢d_øã
(
ªq_øã
);

	@frontend/libpicofe/in_sdl.c

12 
	~<°dio.h
>

13 
	~<SDL.h
>

14 
	~"öput.h
"

15 
	~"ö_sdl.h
"

17 
	#IN_SDL_PREFIX
 "sdl:"

	)

19 
	tkeybôs_t
;

20 
	#KEYBITS_WORD_BITS
 ((
keybôs_t
Ë* 8)

	)

22 
	sö_sdl_°©e
 {

23 c⁄° 
ö_drv_t
 *
	mdrv
;

24 
SDL_Joy°ick
 *
	mjoy
;

25 
	mjoy_id
;

26 
	maxis_keydown
[2];

27 
keybôs_t
 
	mkey°©e
[
SDLK_LAST
 / 
KEYBITS_WORD_BITS
 + 1];

30 (*
ext_evít_h™dÀr
)(*
evít
);

32 c⁄° * c⁄° 
ö_sdl_keys
[
SDLK_LAST
] = {

33 [
SDLK_BACKSPACE
] = "backspace",

34 [
SDLK_TAB
] = "tab",

35 [
SDLK_CLEAR
] = "clear",

36 [
SDLK_RETURN
] = "return",

37 [
SDLK_PAUSE
] = "pause",

38 [
SDLK_ESCAPE
] = "escape",

39 [
SDLK_SPACE
] = "space",

40 [
SDLK_EXCLAIM
] = "!",

41 [
SDLK_QUOTEDBL
] = "\"",

42 [
SDLK_HASH
] = "#",

43 [
SDLK_DOLLAR
] = "$",

44 [
SDLK_AMPERSAND
] = "&",

45 [
SDLK_QUOTE
] = "'",

46 [
SDLK_LEFTPAREN
] = "(",

47 [
SDLK_RIGHTPAREN
] = ")",

48 [
SDLK_ASTERISK
] = "*",

49 [
SDLK_PLUS
] = "+",

50 [
SDLK_COMMA
] = ",",

51 [
SDLK_MINUS
] = "-",

52 [
SDLK_PERIOD
] = ".",

53 [
SDLK_SLASH
] = "/",

54 [
SDLK_0
] = "0",

55 [
SDLK_1
] = "1",

56 [
SDLK_2
] = "2",

57 [
SDLK_3
] = "3",

58 [
SDLK_4
] = "4",

59 [
SDLK_5
] = "5",

60 [
SDLK_6
] = "6",

61 [
SDLK_7
] = "7",

62 [
SDLK_8
] = "8",

63 [
SDLK_9
] = "9",

64 [
SDLK_COLON
] = ":",

65 [
SDLK_SEMICOLON
] = ";",

66 [
SDLK_LESS
] = "<",

67 [
SDLK_EQUALS
] = "=",

68 [
SDLK_GREATER
] = ">",

69 [
SDLK_QUESTION
] = "?",

70 [
SDLK_AT
] = "@",

71 [
SDLK_LEFTBRACKET
] = "[",

72 [
SDLK_BACKSLASH
] = "\\",

73 [
SDLK_RIGHTBRACKET
] = "]",

74 [
SDLK_CARET
] = "^",

75 [
SDLK_UNDERSCORE
] = "_",

76 [
SDLK_BACKQUOTE
] = "`",

77 [
SDLK_a
] = "a",

78 [
SDLK_b
] = "b",

79 [
SDLK_c
] = "c",

80 [
SDLK_d
] = "d",

81 [
SDLK_e
] = "e",

82 [
SDLK_f
] = "f",

83 [
SDLK_g
] = "g",

84 [
SDLK_h
] = "h",

85 [
SDLK_i
] = "i",

86 [
SDLK_j
] = "j",

87 [
SDLK_k
] = "k",

88 [
SDLK_l
] = "l",

89 [
SDLK_m
] = "m",

90 [
SDLK_n
] = "n",

91 [
SDLK_o
] = "o",

92 [
SDLK_p
] = "p",

93 [
SDLK_q
] = "q",

94 [
SDLK_r
] = "r",

95 [
SDLK_s
] = "s",

96 [
SDLK_t
] = "t",

97 [
SDLK_u
] = "u",

98 [
SDLK_v
] = "v",

99 [
SDLK_w
] = "w",

100 [
SDLK_x
] = "x",

101 [
SDLK_y
] = "y",

102 [
SDLK_z
] = "z",

103 [
SDLK_DELETE
] = "delete",

105 [
SDLK_KP0
] = "[0]",

106 [
SDLK_KP1
] = "[1]",

107 [
SDLK_KP2
] = "[2]",

108 [
SDLK_KP3
] = "[3]",

109 [
SDLK_KP4
] = "[4]",

110 [
SDLK_KP5
] = "[5]",

111 [
SDLK_KP6
] = "[6]",

112 [
SDLK_KP7
] = "[7]",

113 [
SDLK_KP8
] = "[8]",

114 [
SDLK_KP9
] = "[9]",

115 [
SDLK_KP_PERIOD
] = "[.]",

116 [
SDLK_KP_DIVIDE
] = "[/]",

117 [
SDLK_KP_MULTIPLY
] = "[*]",

118 [
SDLK_KP_MINUS
] = "[-]",

119 [
SDLK_KP_PLUS
] = "[+]",

120 [
SDLK_KP_ENTER
] = "enter",

121 [
SDLK_KP_EQUALS
] = "equals",

123 [
SDLK_UP
] = "up",

124 [
SDLK_DOWN
] = "down",

125 [
SDLK_RIGHT
] = "right",

126 [
SDLK_LEFT
] = "left",

127 [
SDLK_INSERT
] = "insert",

128 [
SDLK_HOME
] = "home",

129 [
SDLK_END
] = "end",

130 [
SDLK_PAGEUP
] = "page up",

131 [
SDLK_PAGEDOWN
] = "page down",

133 [
SDLK_F1
] = "f1",

134 [
SDLK_F2
] = "f2",

135 [
SDLK_F3
] = "f3",

136 [
SDLK_F4
] = "f4",

137 [
SDLK_F5
] = "f5",

138 [
SDLK_F6
] = "f6",

139 [
SDLK_F7
] = "f7",

140 [
SDLK_F8
] = "f8",

141 [
SDLK_F9
] = "f9",

142 [
SDLK_F10
] = "f10",

143 [
SDLK_F11
] = "f11",

144 [
SDLK_F12
] = "f12",

145 [
SDLK_F13
] = "f13",

146 [
SDLK_F14
] = "f14",

147 [
SDLK_F15
] = "f15",

149 [
SDLK_NUMLOCK
] = "numlock",

150 [
SDLK_CAPSLOCK
] = "capsÜock",

151 [
SDLK_SCROLLOCK
] = "scrollÜock",

152 [
SDLK_RSHIFT
] = "right shift",

153 [
SDLK_LSHIFT
] = "left shift",

154 [
SDLK_RCTRL
] = "right ctrl",

155 [
SDLK_LCTRL
] = "left ctrl",

156 [
SDLK_RALT
] = "rightált",

157 [
SDLK_LALT
] = "leftált",

158 [
SDLK_RMETA
] = "right meta",

159 [
SDLK_LMETA
] = "left meta",

160 [
SDLK_LSUPER
] = "left super",

161 [
SDLK_RSUPER
] = "right super",

162 [
SDLK_MODE
] = "alt gr",

163 [
SDLK_COMPOSE
] = "compose",

164 
	}
};

166 
	$ö_sdl_¥obe
(c⁄° 
ö_drv_t
 *
drv
)

168 c⁄° 
ö_pd©a
 *
pd©a
 = 
drv
->pdata;

169 c⁄° * c⁄° * 
key_«mes
 = 
ö_sdl_keys
;

170 
ö_sdl_°©e
 *
°©e
;

171 
SDL_Joy°ick
 *
joy
;

172 
i
, 
joycou¡
;

173 
«me
[256];

175 i‡(
pd©a
->
key_«mes
)

176 
key_«mes
 = 
pd©a
->key_names;

178 
°©e
 = 
	`ˇŒoc
(1, (*state));

179 i‡(
°©e
 =
NULL
) {

180 
	`Ârötf
(
°dîr
, "in_sdl: OOM\n");

184 
°©e
->
drv
 = drv;

185 
	`ö_ªgi°î
(
IN_SDL_PREFIX
 "keys", -1, 
°©e
, 
SDLK_LAST
,

186 
key_«mes
, 0);

189 
	`SDL_InôSubSy°em
(
SDL_INIT_JOYSTICK
);

191 
joycou¡
 = 
	`SDL_NumJoy°icks
();

192 
i
 = 0; i < 
joycou¡
; i++) {

193 
joy
 = 
	`SDL_Joy°ickO≥n
(
i
);

194 i‡(
joy
 =
NULL
)

197 
°©e
 = 
	`ˇŒoc
(1, (*state));

198 i‡(
°©e
 =
NULL
) {

199 
	`Ârötf
(
°dîr
, "in_sdl: OOM\n");

202 
°©e
->
joy
 = joy;

203 
°©e
->
joy_id
 = 
i
;

204 
°©e
->
drv
 = drv;

206 
	`¢¥ötf
(
«me
, “ame), 
IN_SDL_PREFIX
 "%s", 
	`SDL_Joy°ickName
(
i
));

207 
	`ö_ªgi°î
(
«me
, -1, 
°©e
, 
SDLK_LAST
, 
key_«mes
, 0);

210 i‡(
joycou¡
 > 0)

211 
	`SDL_Joy°ickEvítSèã
(
SDL_ENABLE
);

212 
	}
}

214 
	$ö_sdl_‰ì
(*
drv_d©a
)

216 
ö_sdl_°©e
 *
°©e
 = 
drv_d©a
;

218 i‡(
°©e
 !
NULL
) {

219 i‡(
°©e
->
joy
 !
NULL
)

220 
	`SDL_Joy°ickClo£
(
°©e
->
joy
);

221 
	`‰ì
(
°©e
);

223 
	}
}

226 
	$ö_sdl_gë_key_«mes
(c⁄° 
ö_drv_t
 *
drv
, *
cou¡
)

228 c⁄° 
ö_pd©a
 *
pd©a
 = 
drv
->pdata;

229 *
cou¡
 = 
SDLK_LAST
;

231 i‡(
pd©a
->
key_«mes
)

232  
pd©a
->
key_«mes
;

233  
ö_sdl_keys
;

234 
	}
}

237 
	$upd©e_key°©e
(
keybôs_t
 *
key°©e
, 
sym
, 
is_down
)

239 
keybôs_t
 *
ks_w‹d
, 
mask
;

241 
mask
 = 1;

242 
mask
 <<
sym
 & (
KEYBITS_WORD_BITS
 - 1);

243 
ks_w‹d
 = 
key°©e
 + 
sym
 / 
KEYBITS_WORD_BITS
;

244 i‡(
is_down
)

245 *
ks_w‹d
 |
mask
;

247 *
ks_w‹d
 &~
mask
;

248 
	}
}

250 
	$h™dÀ_evít
(
ö_sdl_°©e
 *
°©e
, 
SDL_Evít
 *
evít
,

251 *
kc_out
, *
down_out
)

253 i‡(
evít
->
ty≥
 !
SDL_KEYDOWN
 &&Évít->ty≥ !
SDL_KEYUP
)

256 
	`upd©e_key°©e
(
°©e
->
key°©e
, 
evít
->
key
.
keysym
.
sym
,

257 
evít
->
ty≥
 =
SDL_KEYDOWN
);

258 i‡(
kc_out
 !
NULL
)

259 *
kc_out
 = 
evít
->
key
.
keysym
.
sym
;

260 i‡(
down_out
 !
NULL
)

261 *
down_out
 = 
evít
->
ty≥
 =
SDL_KEYDOWN
;

264 
	}
}

266 
	$h™dÀ_joy_evít
(
ö_sdl_°©e
 *
°©e
, 
SDL_Evít
 *
evít
,

267 *
kc_out
, *
down_out
)

269 
kc
 = -1, 
down
 = 0, 
ªt
 = 0;

272 
evít
->
ty≥
) {

273 
SDL_JOYAXISMOTION
:

274 i‡(
evít
->
jaxis
.
which
 !
°©e
->
joy_id
)

276 i‡(
evít
->
jaxis
.
axis
 > 1)

278 i‡(-16384 <
evít
->
jaxis
.
vÆue
 &&Évent->jaxis.value <= 16384) {

279 
kc
 = 
°©e
->
axis_keydown
[
evít
->
jaxis
.
axis
];

280 
°©e
->
axis_keydown
[
evít
->
jaxis
.
axis
] = 0;

281 
ªt
 = 1;

283 i‡(
evít
->
jaxis
.
vÆue
 < -16384) {

284 
kc
 = 
°©e
->
axis_keydown
[
evít
->
jaxis
.
axis
];

285 i‡(
kc
)

286 
	`upd©e_key°©e
(
°©e
->
key°©e
, 
kc
, 0);

287 
kc
 = 
evít
->
jaxis
.
axis
 ? 
SDLK_UP
 : 
SDLK_LEFT
;

288 
°©e
->
axis_keydown
[
evít
->
jaxis
.
axis
] = 
kc
;

289 
down
 = 1;

290 
ªt
 = 1;

292 i‡(
evít
->
jaxis
.
vÆue
 > 16384) {

293 
kc
 = 
°©e
->
axis_keydown
[
evít
->
jaxis
.
axis
];

294 i‡(
kc
)

295 
	`upd©e_key°©e
(
°©e
->
key°©e
, 
kc
, 0);

296 
kc
 = 
evít
->
jaxis
.
axis
 ? 
SDLK_DOWN
 : 
SDLK_RIGHT
;

297 
°©e
->
axis_keydown
[
evít
->
jaxis
.
axis
] = 
kc
;

298 
down
 = 1;

299 
ªt
 = 1;

303 
SDL_JOYBUTTONDOWN
:

304 
SDL_JOYBUTTONUP
:

305 i‡(
evít
->
jbuâ⁄
.
which
 !
°©e
->
joy_id
)

307 
kc
 = ()
evít
->
jbuâ⁄
.
buâ⁄
 + 
SDLK_WORLD_0
;

308 
down
 = 
evít
->
jbuâ⁄
.
°©e
 =
SDL_PRESSED
;

309 
ªt
 = 1;

315 i‡(
ªt
)

316 
	`upd©e_key°©e
(
°©e
->
key°©e
, 
kc
, 
down
);

317 i‡(
kc_out
 !
NULL
)

318 *
kc_out
 = 
kc
;

319 i‡(
down_out
 !
NULL
)

320 *
down_out
 = 
down
;

322  
ªt
;

323 
	}
}

325 
	#JOY_EVENTS
 (
SDL_JOYAXISMOTIONMASK
 | 
SDL_JOYBALLMOTIONMASK
 | 
SDL_JOYHATMOTIONMASK
 \

326 | 
SDL_JOYBUTTONDOWNMASK
 | 
SDL_JOYBUTTONUPMASK
)

	)

328 
	$cﬁÀ˘_evíts
(
ö_sdl_°©e
 *
°©e
, *
⁄e_kc
, *
⁄e_down
)

330 
SDL_Evít
 
evíts
[4];

331 
Uöt32
 
mask
 = 
°©e
->
joy
 ? 
JOY_EVENTS
 : (
SDL_ALLEVENTS
 & ~JOY_EVENTS);

332 
cou¡
, 
maxcou¡
;

333 
i
, 
ªt
, 
ªtvÆ
 = 0;

334 
num_evíts
, 
num_≥ïed_evíts
;

335 
SDL_Evít
 *
evít
;

337 
maxcou¡
 = (
⁄e_kc
 !
NULL
Ë? 1 : (
evíts
) / (events[0]);

339 
	`SDL_PumpEvíts
();

341 
num_evíts
 = 
	`SDL_PìpEvíts
(
NULL
, 0, 
SDL_PEEKEVENT
, 
mask
);

343 
num_≥ïed_evíts
 = 0;Çum_≥ïed_evít†< 
num_evíts
;Çum_≥ïed_evít†+
cou¡
) {

344 
cou¡
 = 
	`SDL_PìpEvíts
(
evíts
, 
maxcou¡
, 
SDL_GETEVENT
, 
mask
);

345 i‡(
cou¡
 <= 0)

347 
i
 = 0; i < 
cou¡
; i++) {

348 
evít
 = &
evíts
[
i
];

349 i‡(
°©e
->
joy
)

350 
ªt
 = 
	`h™dÀ_joy_evít
(
°©e
,

351 
evít
, 
⁄e_kc
, 
⁄e_down
);

353 
ªt
 = 
	`h™dÀ_evít
(
°©e
,

354 
evít
, 
⁄e_kc
, 
⁄e_down
);

355 i‡(
ªt
 < 0) {

356 
ªt
) {

358 
	`SDL_PushEvít
(
evít
);

361 i‡(
ext_evít_h™dÀr
 !
NULL
)

362 
	`ext_evít_h™dÀr
(
evít
);

368 
ªtvÆ
 |
ªt
;

369 i‡(
⁄e_kc
 !
NULL
 && 
ªt
)

372 
i
++; i < 
cou¡
; i++)

373 
	`SDL_PushEvít
(&
evíts
[
i
]);

374 
out
;

379 
out
:

380  
ªtvÆ
;

381 
	}
}

383 
	$ö_sdl_upd©e
(*
drv_d©a
, c⁄° *
böds
, *
ªsu…
)

385 
ö_sdl_°©e
 *
°©e
 = 
drv_d©a
;

386 
keybôs_t
 
mask
;

387 
i
, 
sym
, 
bô
, 
b
;

389 
	`cﬁÀ˘_evíts
(
°©e
, 
NULL
, NULL);

391 
i
 = 0; i < 
SDLK_LAST
 / 
KEYBITS_WORD_BITS
 + 1; i++) {

392 
mask
 = 
°©e
->
key°©e
[
i
];

393 i‡(
mask
 == 0)

395 
bô
 = 0; 
mask
 != 0; bit++, mask >>= 1) {

396 i‡((
mask
 & 1) == 0)

398 
sym
 = 
i
 * 
KEYBITS_WORD_BITS
 + 
bô
;

400 
b
 = 0; b < 
IN_BINDTYPE_COUNT
; b++)

401 
ªsu…
[
b
] |
böds
[
	`IN_BIND_OFFS
(
sym
, b)];

406 
	}
}

408 
	$ö_sdl_upd©e_keycode
(*
drv_d©a
, *
is_down
)

410 
ö_sdl_°©e
 *
°©e
 = 
drv_d©a
;

411 
ªt_kc
 = -1, 
ªt_down
 = 0;

413 
	`cﬁÀ˘_evíts
(
°©e
, &
ªt_kc
, &
ªt_down
);

415 i‡(
is_down
 !
NULL
)

416 *
is_down
 = 
ªt_down
;

418  
ªt_kc
;

419 
	}
}

421 
	$ö_sdl_míu_å™¶©e
(*
drv_d©a
, 
keycode
, *
ch¨code
)

423 
ö_sdl_°©e
 *
°©e
 = 
drv_d©a
;

424 c⁄° 
ö_pd©a
 *
pd©a
 = 
°©e
->
drv
->pdata;

425 c⁄° * c⁄° * 
key_«mes
 = 
ö_sdl_keys
;

426 c⁄° 
míu_keym≠
 *
m≠
;

427 
m≠_Àn
;

428 
ªt
 = 0;

429 
i
;

431 i‡(
pd©a
->
key_«mes
)

432 
key_«mes
 = 
pd©a
->key_names;

434 i‡(
°©e
->
joy
) {

435 
m≠
 = 
pd©a
->
joy_m≠
;

436 
m≠_Àn
 = 
pd©a
->
jm≠_size
;

438 
m≠
 = 
pd©a
->
key_m≠
;

439 
m≠_Àn
 = 
pd©a
->
km≠_size
;

442 i‡(
keycode
 < 0)

445 
keycode
 = -keycode;

446 
i
 = 0; i < 
m≠_Àn
; i++)

447 i‡(
m≠
[
i
].
pbä
 =
keycode
)

448  
m≠
[
i
].
key
;

452 
i
 = 0; i < 
m≠_Àn
; i++) {

453 i‡(
m≠
[
i
].
key
 =
keycode
) {

454 
ªt
 = 
m≠
[
i
].
pbä
;

459 i‡(
ch¨code
 !
NULL
 && ()
keycode
 < 
SDLK_LAST
 &&

460 
key_«mes
[
keycode
] !
NULL
 && key_names[keycode][1] == 0)

462 
ªt
 |
PBTN_CHAR
;

463 *
ch¨code
 = 
key_«mes
[
keycode
][0];

467  
ªt
;

468 
	}
}

470 c⁄° 
ö_drv_t
 
	gö_sdl_drv
 = {

471 .
¥efix
 = 
IN_SDL_PREFIX
,

472 .
	g¥obe
 = 
ö_sdl_¥obe
,

473 .
	g‰ì
 = 
ö_sdl_‰ì
,

474 .
	ggë_key_«mes
 = 
ö_sdl_gë_key_«mes
,

475 .
	gupd©e
 = 
ö_sdl_upd©e
,

476 .
	gupd©e_keycode
 = 
ö_sdl_upd©e_keycode
,

477 .
	gmíu_å™¶©e
 = 
ö_sdl_míu_å™¶©e
,

480 
ö_sdl_öô
(c⁄° 
ö_pd©a
 *
pd©a
, (*
h™dÀr
)(*
evít
))

482 i‡(!
pd©a
) {

483 
	`Ârötf
(
°dîr
, "in_sdl: Missing inputÖlatform data\n");

487 
	`ö_ªgi°î_drivî
(&
ö_sdl_drv
, 
pd©a
->
defböds
,Ödata);

488 
ext_evít_h™dÀr
 = 
h™dÀr
;

490 
	}
}

	@frontend/libpicofe/in_sdl.h

1 
ö_sdl_öô
(c⁄° 
ö_pd©a
 *
pd©a
, (*
h™dÀr
)(*
evít
));

	@frontend/libpicofe/input.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

16 
	~"öput.h
"

17 
	~"∂©.h
"

18 
	~"Õrötf.h
"

20 #ifde‡
IN_VK


21 #îr‹ 
√eds
 
upd©e
: 
ö_vk_öô
 
ö_vk_upd©e


22 
	~"../wö32/ö_vk.h
"

27 
	mdrv_id
;

28 
	mdrv_fd_hnd
;

29 *
	mdrv_d©a
;

30 *
	m«me
;

31 
	mkey_cou¡
;

32 *
	mböds
;

33 c⁄° * c⁄° *
	mkey_«mes
;

34 
	m¥obed
:1;

35 
	md€s_combos
:1;

36 } 
	tö_dev_t
;

38 
ö_drv_t
 *
	gö_drivîs
;

39 
ö_dev_t
 
	gö_devi˚s
[
IN_MAX_DEVS
];

40 
	gö_drivî_cou¡
 = 0;

41 
	gö_dev_cou¡
 = 0;

42 
	gö_have_async_devs
 = 0;

43 
	gö_¥obe_dev_id
;

44 
	gmíu_key_°©e
 = 0;

45 
	gmíu_œ°_u£d_dev
 = 0;

47 
	#DRV
(
id
Ë
ö_drivîs
[id]

	)

50 *
	$ö_Æloc_böds
(
drv_id
, 
key_cou¡
)

52 c⁄° 
ö_deÁu…_böd
 *
defböds
;

53 *
böds
, *
böds_d
;

54 
i
;

56 
böds
 = 
	`ˇŒoc
(
key_cou¡
 * 
IN_BINDTYPE_COUNT
 * 2, (binds[0]));

57 i‡(
böds
 =
NULL
)

58  
NULL
;

60 
böds_d
 = 
böds
 + 
key_cou¡
 * 
IN_BINDTYPE_COUNT
;

63 
defböds
 = 
	`DRV
(
drv_id
).defbinds;

64 i‡(
defböds
 !
NULL
) {

65 
i
 = 0; ; i++) {

66 i‡(
defböds
[
i
].
bô
 =0 && defböds[i].
bty≥
 == 0

67 && 
defböds
[
i
].
bô
 == 0)

70 
böds_d
[
	`IN_BIND_OFFS
(
defböds
[
i
].
code
, defböds[i].
bty≥
)] |=

71 1 << 
defböds
[
i
].
bô
;

75  
böds
;

76 
	}
}

78 
	$ö_u≈robe
(
ö_dev_t
 *
dev
)

80 i‡(
dev
->
¥obed
)

81 
	`DRV
(
dev
->
drv_id
).
	`‰ì
(dev->
drv_d©a
);

82 
dev
->
¥obed
 = 0;

83 
dev
->
drv_d©a
 = 
NULL
;

84 
	}
}

86 
	$ö_‰ì
(
ö_dev_t
 *
dev
)

88 
	`ö_u≈robe
(
dev
);

89 
	`‰ì
(
dev
->
«me
);

90 
dev
->
«me
 = 
NULL
;

91 
	`‰ì
(
dev
->
böds
);

92 
dev
->
böds
 = 
NULL
;

93 
	}
}

97 
	$ö_ªgi°î
(c⁄° *
¬ame
, 
drv_fd_hnd
, *
drv_d©a
,

98 
key_cou¡
, c⁄° * c⁄° *
key_«mes
, 
combos
)

100 
i
, 
ªt
, 
du≥_cou¡
 = 0, *
böds
;

101 
«me
[256], *
«me_íd
, *
tmp
;

103 
	`°∫˝y
(
«me
, 
¬ame
, (name));

104 
«me
[(name)-12] = 0;

105 
«me_íd
 = 
«me
 + 
	`°æí
(name);

107 
i
 = 0; i < 
ö_dev_cou¡
; i++)

109 i‡(
ö_devi˚s
[
i
].
«me
 =
NULL
)

111 i‡(
	`°rcmp
(
ö_devi˚s
[
i
].
«me
,Çame) == 0)

113 i‡(
ö_devi˚s
[
i
].
¥obed
) {

114 
du≥_cou¡
++;

115 
	`•rötf
(
«me_íd
, " [%d]", 
du≥_cou¡
);

118 
upd©e
;

122 i‡(
i
 >
IN_MAX_DEVS
)

125 
i
 = 0; i < 
IN_MAX_DEVS
; i++)

126 i‡(!
ö_devi˚s
[
i
].
¥obed
) ;

127 i‡(
i
 >
IN_MAX_DEVS
) {

128 
	`Õrötf
("öput:Åoÿm™y devi˚s, c™'àadd %s\n", 
«me
);

131 
	`ö_‰ì
(&
ö_devi˚s
[
i
]);

134 
tmp
 = 
	`°rdup
(
«me
);

135 i‡(
tmp
 =
NULL
)

138 
böds
 = 
	`ö_Æloc_böds
(
ö_¥obe_dev_id
, 
key_cou¡
);

139 i‡(
böds
 =
NULL
) {

140 
	`‰ì
(
tmp
);

144 
	`mem˝y
(
böds
, böd†+ 
key_cou¡
 * 
IN_BINDTYPE_COUNT
,

145 (
böds
[0]Ë* 
key_cou¡
 * 
IN_BINDTYPE_COUNT
);

147 
ö_devi˚s
[
i
].
«me
 = 
tmp
;

148 
ö_devi˚s
[
i
].
böds
 = binds;

149 
ö_devi˚s
[
i
].
key_cou¡
 = key_count;

150 i‡(
i
 + 1 > 
ö_dev_cou¡
)

151 
ö_dev_cou¡
 = 
i
 + 1;

153 
	`Õrötf
("öput:Çew devi˚ #%d \"%s\"\n", 
i
, 
«me
);

154 
upd©e
:

155 
ö_devi˚s
[
i
].
¥obed
 = 1;

156 
ö_devi˚s
[
i
].
d€s_combos
 = 
combos
;

157 
ö_devi˚s
[
i
].
drv_id
 = 
ö_¥obe_dev_id
;

158 
ö_devi˚s
[
i
].
drv_fd_hnd
 = drv_fd_hnd;

159 
ö_devi˚s
[
i
].
key_«mes
 = key_names;

160 
ö_devi˚s
[
i
].
drv_d©a
 = drv_data;

162 i‡(
ö_devi˚s
[
i
].
böds
 !
NULL
) {

163 
ªt
 = 
	`DRV
(
ö_¥obe_dev_id
).
	`˛ón_böds
(
drv_d©a
, 
ö_devi˚s
[
i
].
böds
,

164 
ö_devi˚s
[
i
].
böds
 + 
key_cou¡
 * 
IN_BINDTYPE_COUNT
);

165 i‡(
ªt
 == 0) {

167 
	`‰ì
(
ö_devi˚s
[
i
].
böds
);

168 
ö_devi˚s
[
i
].
böds
 = 
NULL
;

171 
	}
}

175 
	$ö_combos_föd
(c⁄° *
böds
, 
œ°_key
, *
combo_keys
, *
combo_a˘s
)

177 
a˘
, 
u
;

179 *
combo_keys
 = *
combo_a˘s
 = 0;

180 
a˘
 = 0;á˘ < (
böds
[0]) * 8;áct++)

182 
keyc
 = 0;

183 
u
 = 0; u <
œ°_key
; u++)

184 i‡(
böds
[
	`IN_BIND_OFFS
(
u
, 
IN_BINDTYPE_EMU
)] & (1 << 
a˘
))

185 
keyc
++;

187 i‡(
keyc
 > 1)

190 
u
 = 0; u <
œ°_key
; u++)

192 i‡(
böds
[
	`IN_BIND_OFFS
(
u
, 
IN_BINDTYPE_EMU
)] & (1 << 
a˘
)) {

193 *
combo_keys
 |1 << 
u
;

194 *
combo_a˘s
 |1 << 
a˘
;

199 
	}
}

201 
	$ö_combos_do
(
keys
, c⁄° *
böds
, 
œ°_key
, 
combo_keys
, 
combo_a˘s
)

203 
i
, 
ªt
 = 0;

205 
i
 = 0; i <
œ°_key
; i++)

207 
a˘s
, 
a˘s_c
, 
u
;

209 i‡(!(
keys
 & (1 << 
i
)))

212 
a˘s
 = 
böds
[
	`IN_BIND_OFFS
(
i
, 
IN_BINDTYPE_EMU
)];

213 i‡(!
a˘s
)

216 i‡(!(
combo_keys
 & (1 << 
i
))) {

217 
ªt
 |
a˘s
;

221 
a˘s_c
 = 
a˘s
 & 
combo_a˘s
;

222 
u
 = 
œ°_key
;

223 i‡(
a˘s_c
) {

225 
u
 = 
i
 + 1; u <
œ°_key
; u++)

226 i‡–(
keys
 & (1 << 
u
)Ë&& (
böds
[
	`IN_BIND_OFFS
(u, 
IN_BINDTYPE_EMU
)] & 
a˘s_c
) ) {

227 
ªt
 |
a˘s_c
 & 
böds
[
	`IN_BIND_OFFS
(
u
, 
IN_BINDTYPE_EMU
)];

228 
keys
 &~((1 << 
i
Ë| (1 << 
u
));

233 i‡(
u
 >
œ°_key
)

234 
ªt
 |
a˘s
 & ~
combo_a˘s
;

237  
ªt
;

238 
	}
}

240 
	$ö_¥obe
()

242 
i
;

244 
ö_have_async_devs
 = 0;

245 
míu_key_°©e
 = 0;

246 
míu_œ°_u£d_dev
 = 0;

248 
i
 = 0; i < 
ö_dev_cou¡
; i++)

249 
	`ö_u≈robe
(&
ö_devi˚s
[
i
]);

251 
i
 = 0; i < 
ö_drivî_cou¡
; i++) {

252 
ö_¥obe_dev_id
 = 
i
;

253 
ö_drivîs
[
i
].
	`¥obe
(&
	`DRV
(i));

257 
i
 = 0; i < 
ö_dev_cou¡
; i++) {

258 i‡(!
ö_devi˚s
[
i
].
¥obed
 && in_devi˚s[i].
böds
 =
NULL
) {

259 
ö_dev_cou¡
--;

260 i‡(
i
 < 
ö_dev_cou¡
) {

261 
	`‰ì
(
ö_devi˚s
[
i
].
«me
);

262 
	`memmove
(&
ö_devi˚s
[
i
], &in_devices[i+1],

263 (
ö_dev_cou¡
 - 
i
Ë* (
ö_devi˚s
[0]));

269 i‡(
ö_devi˚s
[
i
].
¥obed
 && in_devi˚s[i].
drv_fd_hnd
 == -1)

270 
ö_have_async_devs
 = 1;

273 i‡(
ö_have_async_devs
)

274 
	`Õrötf
("input:ásync-only devices detected..\n");

276 
	`ö_debug_dump
();

277 
	}
}

280 
	$ö_upd©e
(*
ªsu…
)

282 
i
, 
ªt
 = 0;

284 
i
 = 0; i < 
ö_dev_cou¡
; i++) {

285 
ö_dev_t
 *
dev
 = &
ö_devi˚s
[
i
];

286 i‡(
dev
->
¥obed
 && dev->
böds
 !
NULL
)

287 
ªt
 |
	`DRV
(
dev
->
drv_id
).
	`upd©e
(dev->
drv_d©a
, dev->
böds
, 
ªsu…
);

290  
ªt
;

291 
	}
}

293 
ö_dev_t
 *
	$gë_dev
(
dev_id
)

295 i‡(
dev_id
 < 0 || dev_id >
IN_MAX_DEVS
)

296  
NULL
;

298  &
ö_devi˚s
[
dev_id
];

299 
	}
}

301 
	$ö_upd©e_™Æog
(
dev_id
, 
axis_id
, *
ªsu…
)

303 
ö_dev_t
 *
dev
 = 
	`gë_dev
(
dev_id
);

305 i‡(
dev
 =
NULL
 || !dev->
¥obed
)

308  
	`DRV
(
dev
->
drv_id
).
	`upd©e_™Æog
(dev->
drv_d©a
, 
axis_id
, 
ªsu…
);

309 
	}
}

311 
	$ö_upd©e_kc_async
(*
dev_id_out
, *
is_down_out
, 
timeout_ms
)

313 
i
, 
is_down
, 
ªsu…
;

314 
ticks
;

316 
ticks
 = 
	`∂©_gë_ticks_ms
();

320 
i
 = 0; i < 
ö_dev_cou¡
; i++) {

321 
ö_dev_t
 *
d
 = &
ö_devi˚s
[
i
];

322 i‡(!
d
->
¥obed
)

325 
ªsu…
 = 
	`DRV
(
d
->
drv_id
).
	`upd©e_keycode
(d->
drv_d©a
, &
is_down
);

326 i‡(
ªsu…
 == -1)

329 i‡(
dev_id_out
)

330 *
dev_id_out
 = 
i
;

331 i‡(
is_down_out
)

332 *
is_down_out
 = 
is_down
;

333  
ªsu…
;

336 i‡(
timeout_ms
 >0 && ()(
	`∂©_gë_ticks_ms
(Ë- 
ticks
) >Åimeout_ms)

339 
	`∂©_¶ìp_ms
(10);

343 
	}
}

348 
	$ö_upd©e_keycode
(*
dev_id_out
, *
is_down_out
, *
ch¨code
, 
timeout_ms
)

350 
ªsu…
 = -1, 
dev_id
 = 0, 
is_down
, 
ªsu…_míu
;

351 
fds_hnds
[
IN_MAX_DEVS
];

352 
i
, 
ªt
, 
cou¡
 = 0;

353 
ö_drv_t
 *
drv
 = 
NULL
;

354 
ticks
;

356 i‡(
ö_have_async_devs
) {

357 
ªsu…
 = 
	`ö_upd©e_kc_async
(&
dev_id
, &
is_down
, 
timeout_ms
);

358 i‡(
ªsu…
 == -1)

360 
drv
 = &
	`DRV
(
ö_devi˚s
[
dev_id
].
drv_id
);

361 
föish
;

364 
ticks
 = 
	`∂©_gë_ticks_ms
();

366 
i
 = 0; i < 
ö_dev_cou¡
; i++) {

367 i‡(
ö_devi˚s
[
i
].
¥obed
)

368 
fds_hnds
[
cou¡
++] = 
ö_devi˚s
[
i
].
drv_fd_hnd
;

371 i‡(
cou¡
 == 0) {

373 
	`Õrötf
("input: failedÅo find devicesÅoÑead\n");

374 
	`exô
(1);

379 
ªt
 = 
	`∂©_waô_evít
(
fds_hnds
, 
cou¡
, 
timeout_ms
);

380 i‡(
ªt
 < 0)

383 
i
 = 0; i < 
ö_dev_cou¡
; i++) {

384 i‡(
ö_devi˚s
[
i
].
drv_fd_hnd
 =
ªt
) {

385 
dev_id
 = 
i
;

390 
drv
 = &
	`DRV
(
ö_devi˚s
[
dev_id
].
drv_id
);

391 
ªsu…
 = 
drv
->
	`upd©e_keycode
(
ö_devi˚s
[
dev_id
].
drv_d©a
, &
is_down
);

392 i‡(
ªsu…
 >= 0)

395 i‡(
ªsu…
 == -2) {

396 
	`Õrötf
("öput: \"%s\"Éº‹ed out,Ñemovög.\n", 
ö_devi˚s
[
dev_id
].
«me
);

397 
	`ö_u≈robe
(&
ö_devi˚s
[
dev_id
]);

401 i‡(
timeout_ms
 >= 0) {

402 
ticks2
 = 
	`∂©_gë_ticks_ms
();

403 
timeout_ms
 -
ticks2
 - 
ticks
;

404 
ticks
 = 
ticks2
;

405 i‡(
timeout_ms
 <= 0)

410 i‡(
ªsu…
 < 0)

412 
föish
:

415 
ªsu…_míu
 = 
drv
->
	`míu_å™¶©e
(
ö_devi˚s
[
dev_id
].
drv_d©a
, 
ªsu…
, 
ch¨code
);

416 i‡(
ªsu…_míu
 != 0) {

417 i‡(
is_down
)

418 
míu_key_°©e
 |
ªsu…_míu
;

420 
míu_key_°©e
 &~
ªsu…_míu
;

423 i‡(
dev_id_out
 !
NULL
)

424 *
dev_id_out
 = 
dev_id
;

425 i‡(
is_down_out
 !
NULL
)

426 *
is_down_out
 = 
is_down
;

427  
ªsu…
;

428 
	}
}

431 
	$ö_míu_waô_™y
(*
ch¨code
, 
timeout_ms
)

433 
keys_ﬁd
 = 
míu_key_°©e
;

434 
ªt
;

438 
code
, 
is_down
 = 0, 
dev_id
 = 0;

440 
code
 = 
	`ö_upd©e_keycode
(&
dev_id
, &
is_down
, 
ch¨code
, 
timeout_ms
);

441 i‡(
code
 < 0)

444 i‡(
keys_ﬁd
 !
míu_key_°©e
) {

445 
míu_œ°_u£d_dev
 = 
dev_id
;

450 
ªt
 = 
míu_key_°©e
;

451 
míu_key_°©e
 &~
PBTN_CHAR
;

452  
ªt
;

453 
	}
}

456 
	$ö_míu_waô
(
öãª°ög
, *
ch¨code
, 
aut‹ï_dñay_ms
)

458 
öp_¥ev
 = 0;

459 
ª≥©s
 = 0;

460 
ªt
, 
ªÀa£
 = 0, 
waô
 = 450;

462 i‡(
ª≥©s
)

463 
waô
 = 
aut‹ï_dñay_ms
;

465 
ªt
 = 
	`ö_míu_waô_™y
(
ch¨code
, 
waô
);

466 i‡(
ªt
 =
öp_¥ev
)

467 
ª≥©s
++;

469 !(
ªt
 & 
öãª°ög
)) {

470 
ªt
 = 
	`ö_míu_waô_™y
(
ch¨code
, -1);

471 
ªÀa£
 = 1;

474 i‡(
ªÀa£
 || 
ªt
 !
öp_¥ev
)

475 
ª≥©s
 = 0;

477 
öp_¥ev
 = 
ªt
;

480 i‡((
ªt
 & 
PBTN_UP
Ë&& (ªà& 
PBTN_LEFT
))Ñet &= ~PBTN_LEFT;

481 i‡((
ªt
 & 
PBTN_UP
Ë&& (ªà& 
PBTN_RIGHT
))Ñet &= ~PBTN_RIGHT;

482 i‡((
ªt
 & 
PBTN_DOWN
Ë&& (ªà& 
PBTN_LEFT
))Ñet &= ~PBTN_LEFT;

483 i‡((
ªt
 & 
PBTN_DOWN
Ë&& (ªà& 
PBTN_RIGHT
))Ñet &= ~PBTN_RIGHT;

485  
ªt
;

486 
	}
}

488 c⁄° *
	$ö_gë_dev_böds
(
dev_id
)

490 
ö_dev_t
 *
dev
 = 
	`gë_dev
(
dev_id
);

492  
dev
 ? dev->
böds
 : 
NULL
;

493 
	}
}

495 c⁄° *
	$ö_gë_dev_def_böds
(
dev_id
)

497 
ö_dev_t
 *
dev
 = 
	`gë_dev
(
dev_id
);

498 i‡(
dev
 =
NULL
)

499  
NULL
;

500 i‡(
dev
->
böds
 =
NULL
)

501  
NULL
;

503  
dev
->
böds
 + dev->
key_cou¡
 * 
IN_BINDTYPE_COUNT
;

504 
	}
}

506 
	$ö_gë_c⁄fig
(
dev_id
, 
wh©
, *
vÆ
)

508 *
ivÆ
 = 
vÆ
;

509 
ö_dev_t
 *
dev
;

511 
dev
 = 
	`gë_dev
(
dev_id
);

512 i‡(
dev
 =
NULL
 || 
vÆ
 == NULL)

515 
wh©
) {

516 
IN_CFG_BIND_COUNT
:

517 *
ivÆ
 = 
dev
->
key_cou¡
;

519 
IN_CFG_DOES_COMBOS
:

520 *
ivÆ
 = 
dev
->
d€s_combos
;

522 
IN_CFG_BLOCKING
:

523 
IN_CFG_KEY_NAMES
:

526 i‡(!
dev
->
¥obed
)

529  
	`DRV
(
dev
->
drv_id
).
	`gë_c⁄fig
(dev->
drv_d©a
, 
wh©
, 
ivÆ
);

533 
	}
}

535 
	$ö_£t_blockög
(
is_blockög
)

537 
i
, 
ªt
;

540 i‡(!
ö_have_async_devs
) {

541 
i
 = 0; i < 
ö_dev_cou¡
; i++) {

542 i‡(!
ö_devi˚s
[
i
].
¥obed
)

545 
	`DRV
(
ö_devi˚s
[
i
].
drv_id
).
	`£t_c⁄fig
(

546 
ö_devi˚s
[
i
].
drv_d©a
, 
IN_CFG_BLOCKING
,

547 
is_blockög
);

551 
míu_key_°©e
 = 0;

555 
ªt
 = 
	`ö_upd©e_keycode
(
NULL
, NULL, NULL, 0);

556 } 
ªt
 >= 0);

559 
	}
}

561 
	$ö_£t_c⁄fig
(
dev_id
, 
wh©
, c⁄° *
vÆ
, 
size
)

563 c⁄° * c⁄° *
«mes
;

564 c⁄° *
ivÆ
 = 
vÆ
;

565 
ö_dev_t
 *
dev
;

566 
cou¡
;

568 i‡(
wh©
 =
IN_CFG_BLOCKING
)

569  
	`ö_£t_blockög
(*
ivÆ
);

571 
dev
 = 
	`gë_dev
(
dev_id
);

572 i‡(
dev
 =
NULL
)

575 
wh©
) {

576 
IN_CFG_KEY_NAMES
:

577 
«mes
 = 
vÆ
;

578 
cou¡
 = 
size
 / (
«mes
[0]);

580 i‡(
cou¡
 < 
dev
->
key_cou¡
) {

581 
	`Õrötf
("input: set_key_names:ÇotÉnough keys\n");

585 
dev
->
key_«mes
 = 
«mes
;

587 
IN_CFG_DEFAULT_DEV
:

589 
míu_œ°_u£d_dev
 = 
dev_id
;

595 i‡(
dev
->
¥obed
)

596  
	`DRV
(
dev
->
drv_id
).
	`£t_c⁄fig
(dev->
drv_d©a
, 
wh©
, *
ivÆ
);

599 
	}
}

601 c⁄° *
	$ö_gë_dev_«me
(
dev_id
, 
mu°_be_a˘ive
, 
skù_pfix
)

603 c⁄° *
«me
, *
tmp
;

604 
ö_dev_t
 *
dev
;

606 
dev
 = 
	`gë_dev
(
dev_id
);

607 i‡(
dev
 =
NULL
)

608  
NULL
;

610 i‡(
mu°_be_a˘ive
 && !
dev
->
¥obed
)

611  
NULL
;

613 
«me
 = 
dev
->name;

614 i‡(
«me
 =
NULL
 || !
skù_pfix
)

615  
«me
;

618 
tmp
 = 
	`°rchr
(
«me
, ':');

619 i‡(
tmp
 !
NULL
)

620 
«me
 = 
tmp
 + 1;

622  
«me
;

623 
	}
}

625 
	$ö_«me_to_id
(c⁄° *
dev_«me
)

627 
i
;

629 
i
 = 0; i < 
ö_dev_cou¡
; i++)

630 i‡(
	`°rcmp
(
dev_«me
, 
ö_devi˚s
[
i
].
«me
) == 0)

633 i‡(
i
 >
ö_dev_cou¡
) {

634 
	`Õrötf
("öput: in_«me_to_id:Çÿsuch devi˚: %s\n", 
dev_«me
);

638  
i
;

639 
	}
}

642 c⁄° *
	$ö_gë_key_«me
(
dev_id
, 
keycode
)

644 c⁄° *
«me
 = 
NULL
;

645 
x«me
[16];

646 
ö_drv_t
 *
drv
;

647 
ö_dev_t
 *
dev
;

649 i‡(
dev_id
 < 0)

650 
dev_id
 = 
míu_œ°_u£d_dev
;

652 
dev
 = 
	`gë_dev
(
dev_id
);

653 i‡(
dev
 =
NULL
)

656 
drv
 = &
	`DRV
(
dev
->
drv_id
);

657 i‡(
keycode
 < 0)

658 
keycode
 = 
drv
->
	`míu_å™¶©e
(
dev
->
drv_d©a
, keycode, 
NULL
);

660 i‡(
dev
->
key_«mes
 !
NULL
 && 0 <
keycode
 && keycodê< dev->
key_cou¡
)

661 
«me
 = 
dev
->
key_«mes
[
keycode
];

662 i‡(
«me
 !
NULL
)

663  
«me
;

665 i‡(
drv
->
gë_key_«me
 !
NULL
)

666 
«me
 = 
drv
->
	`gë_key_«me
(
keycode
);

667 i‡(
«me
 !
NULL
)

668  
«me
;

671 i‡((
keycode
 >= '0' && keycode <= '9') || (keycode >= 'a' && keycode <= 'z')

672 || (
keycode
 >= 'A' && keycode <= 'Z'))

673 
	`•rötf
(
x«me
, "%c", 
keycode
);

675 
	`•rötf
(
x«me
, "\\x%02X", 
keycode
);

676  
x«me
;

677 
	}
}

679 
	$ö_gë_key_code
(
dev_id
, c⁄° *
key_«me
)

681 
ö_dev_t
 *
dev
;

682 
i
;

684 i‡(
dev_id
 < 0)

685 
dev_id
 = 
míu_œ°_u£d_dev
;

687 
dev
 = 
	`gë_dev
(
dev_id
);

688 i‡(
dev
 =
NULL
)

691 i‡(
dev
->
key_«mes
 =
NULL
)

694 
i
 = 0; i < 
dev
->
key_cou¡
; i++)

695 i‡(
dev
->
key_«mes
[
i
] && 
	`°rˇ£cmp
(dev->key_«mes[i], 
key_«me
) == 0)

696  
i
;

699 
	}
}

701 
	$ö_böd_key
(
dev_id
, 
keycode
, 
mask
, 
böd_ty≥
, 
f‹˚_unböd
)

703 
ªt
, 
cou¡
;

704 
ö_dev_t
 *
dev
;

706 
dev
 = 
	`gë_dev
(
dev_id
);

707 i‡(
dev
 =
NULL
 || 
böd_ty≥
 >
IN_BINDTYPE_COUNT
)

710 
cou¡
 = 
dev
->
key_cou¡
;

712 i‡(
dev
->
böds
 =
NULL
) {

713 i‡(
f‹˚_unböd
)

715 
dev
->
böds
 = 
	`ö_Æloc_böds
(dev->
drv_id
, 
cou¡
);

716 i‡(
dev
->
böds
 =
NULL
)

720 i‡(
keycode
 < 0 || keycodê>
cou¡
)

723 i‡(
f‹˚_unböd
)

724 
dev
->
böds
[
	`IN_BIND_OFFS
(
keycode
, 
böd_ty≥
)] &~
mask
;

726 
dev
->
böds
[
	`IN_BIND_OFFS
(
keycode
, 
böd_ty≥
)] ^
mask
;

728 
ªt
 = 
	`DRV
(
dev
->
drv_id
).
	`˛ón_böds
(dev->
drv_d©a
, dev->
böds
,

729 
dev
->
böds
 + 
cou¡
 * 
IN_BINDTYPE_COUNT
);

730 i‡(
ªt
 == 0) {

731 
	`‰ì
(
dev
->
böds
);

732 
dev
->
böds
 = 
NULL
;

736 
	}
}

745 
	$ö_unböd_Æl
(
dev_id_
, 
a˘_mask
, 
böd_ty≥
)

747 
dev_id
 = 0, 
dev_œ°
 = 
IN_MAX_DEVS
 - 1;

748 
i
, 
cou¡
;

749 
ö_dev_t
 *
dev
;

751 i‡(
dev_id_
 >= 0)

752 
dev_id
 = 
dev_œ°
 = 
dev_id_
;

754 i‡(
böd_ty≥
 >
IN_BINDTYPE_COUNT
)

757 ; 
dev_id
 <
dev_œ°
; dev_id++) {

758 
dev
 = &
ö_devi˚s
[
dev_id
];

759 
cou¡
 = 
dev
->
key_cou¡
;

761 i‡(
dev
->
böds
 =
NULL
)

764 i‡(
a˘_mask
 != -1) {

765 
i
 = 0; i < 
cou¡
; i++)

766 
dev
->
böds
[
	`IN_BIND_OFFS
(
i
, 
böd_ty≥
)] &~
a˘_mask
;

769 
	`mem£t
(
dev
->
böds
, 0, (dev->böds[0]Ë* 
cou¡
 * 
IN_BINDTYPE_COUNT
);

771 
	}
}

774 
	$ö_c⁄fig_∑r£_dev
(c⁄° *
«me
)

776 
drv_id
 = -1, 
i
;

778 
i
 = 0; i < 
ö_drivî_cou¡
; i++) {

779 
Àn
 = 
	`°æí
(
ö_drivîs
[
i
].
¥efix
);

780 i‡(
	`°∫cmp
(
«me
, 
ö_drivîs
[
i
].
¥efix
, 
Àn
) == 0) {

781 
drv_id
 = 
i
;

786 i‡(
drv_id
 < 0) {

787 
	`Õrötf
("öput: missög drivî f‹ '%s'\n", 
«me
);

791 
i
 = 0; i < 
ö_dev_cou¡
; i++)

793 i‡(
ö_devi˚s
[
i
].
«me
 =
NULL
)

795 i‡(
	`°rcmp
(
ö_devi˚s
[
i
].
«me
,Çame) == 0)

796  
i
;

799 i‡(
i
 >
IN_MAX_DEVS
)

802 
i
 = 0; i < 
IN_MAX_DEVS
; i++)

803 i‡(
ö_devi˚s
[
i
].
«me
 =
NULL
) ;

804 i‡(
i
 >
IN_MAX_DEVS
) {

805 
	`Õrötf
("input:Åoo many devices, can'tádd '%s'\n",

806 
«me
);

811 
	`mem£t
(&
ö_devi˚s
[
i
], 0, (in_devices[i]));

813 
ö_devi˚s
[
i
].
«me
 = 
	`°rdup
(name);

814 i‡(
ö_devi˚s
[
i
].
«me
 =
NULL
)

817 
ö_devi˚s
[
i
].
key_«mes
 = 
	`DRV
(
drv_id
).
	`gë_key_«mes
(&DRV(drv_id),

818 &
ö_devi˚s
[
i
].
key_cou¡
);

819 
ö_devi˚s
[
i
].
drv_id
 = drv_id;

821 i‡(
i
 + 1 > 
ö_dev_cou¡
)

822 
ö_dev_cou¡
 = 
i
 + 1;

824  
i
;

825 
	}
}

827 
	$ö_c⁄fig_böd_key
(
dev_id
, c⁄° *
key
, 
a˘s
, 
böd_ty≥
)

829 
ö_dev_t
 *
dev
;

830 
i
, 
offs
, 
kc
;

832 
dev
 = 
	`gë_dev
(
dev_id
);

833 i‡(
dev
 =
NULL
 || 
böd_ty≥
 >
IN_BINDTYPE_COUNT
)

837 i‡(
key
[0] == '\\' && key[1] == 'x') {

838 *
p
 = 
NULL
;

839 
kc
 = ()
	`°πoul
(
key
 + 2, &
p
, 16);

840 i‡(
p
 =
NULL
 || *p != 0)

841 
kc
 = -1;

845 i‡(
dev
->
böds
 =
NULL
) {

846 
dev
->
böds
 = 
	`ö_Æloc_böds
(dev->
drv_id
, dev->
key_cou¡
);

847 i‡(
dev
->
böds
 =
NULL
)

851 
kc
 = -1;

852 i‡(
dev
->
key_«mes
 !
NULL
) {

853 
i
 = 0; i < 
dev
->
key_cou¡
; i++) {

854 c⁄° *
k
 = 
dev
->
key_«mes
[
i
];

855 i‡(
k
 !
NULL
 && 
	`°rˇ£cmp
(k, 
key
) == 0) {

856 
kc
 = 
i
;

862 i‡(
kc
 < 0)

863 
kc
 = 
	`DRV
(
dev
->
drv_id
).
	`gë_key_code
(
key
);

864 i‡(
kc
 < 0 && 
	`°æí
(
key
) == 1) {

866 
kc
 = 
key
[0];

870 i‡(
kc
 < 0 || k¯>
dev
->
key_cou¡
) {

871 
	`Õrötf
("input: bad key: '%s' for device '%s'\n",

872 
key
, 
dev
->
«me
);

876 i‡(
böd_ty≥
 =
IN_BINDTYPE_NONE
) {

877 
i
 = 0; i < 
IN_BINDTYPE_COUNT
; i++)

878 
dev
->
böds
[
	`IN_BIND_OFFS
(
kc
, 
i
)] = 0;

882 
offs
 = 
	`IN_BIND_OFFS
(
kc
, 
böd_ty≥
);

883 i‡(
dev
->
böds
[
offs
] == -1)

884 
dev
->
böds
[
offs
] = 0;

885 
dev
->
böds
[
offs
] |
a˘s
;

887 
	}
}

889 
	$ö_˛ón_böds
()

891 
i
;

893 
i
 = 0; i < 
IN_MAX_DEVS
; i++) {

894 
ªt
, 
cou¡
, *
böds
, *
def_böds
;

895 
ö_dev_t
 *
dev
 = &
ö_devi˚s
[
i
];

897 i‡(
dev
->
böds
 =
NULL
 || !dev->
¥obed
)

900 
cou¡
 = 
dev
->
key_cou¡
;

901 
böds
 = 
dev
->binds;

902 
def_böds
 = 
böds
 + 
cou¡
 * 
IN_BINDTYPE_COUNT
;

904 
ªt
 = 
	`DRV
(
dev
->
drv_id
).
	`˛ón_böds
(dev->
drv_d©a
, 
böds
, 
def_böds
);

905 i‡(
ªt
 == 0) {

907 
	`‰ì
(
dev
->
böds
);

908 
dev
->
böds
 = 
NULL
;

911 
	}
}

913 
	$ö_debug_dump
()

915 
i
;

917 
	`Õrötf
("# drvÖrobed bindsÇame\n");

918 
i
 = 0; i < 
IN_MAX_DEVS
; i++) {

919 
ö_dev_t
 *
d
 = &
ö_devi˚s
[
i
];

920 i‡(!
d
->
¥obed
 && d->
«me
 =
NULL
 && d->
böds
 == NULL)

922 
	`Õrötf
("%d %3d %6¯%5¯%s\n", 
i
, 
d
->
drv_id
,

923 
d
->
¥obed
 ? 'y' : 'n',

924 
d
->
böds
 ? 'y' : 'n', d->
«me
);

926 i‡(
d
->
böds
) {

927 
kc
, 
o
, 
t
, 
h
;

928 
kc
 = 0; k¯< 
d
->
key_cou¡
; kc++) {

929 
o
 = 
	`IN_BIND_OFFS
(
kc
, 0);

930 
t
 = 
h
 = 0;Å < 
IN_BINDTYPE_COUNT
;Å++)

931 
h
 |
d
->
böds
[
o
 + 
t
];

932 i‡(
h
 == 0)

934 
	`Õrötf
(" [%3d] =", 
kc
);

935 
t
 = 0;Å < 
IN_BINDTYPE_COUNT
;Å++)

936 
	`¥ötf
(" %x", 
d
->
böds
[
o
 + 
t
]);

937 
	`¥ötf
("\n");

942 
	}
}

946 
	$ö_def_‰ì
(*
drv_d©a
Ë{
	}
}

947 
	$ö_def_˛ón_böds
(*
drv_d©a
, *
b
, *
db
Ë{  1; 
	}
}

948 
	$ö_def_gë_c⁄fig
(*
drv_d©a
, 
wh©
, *
vÆ
Ë{  -1; 
	}
}

949 
	$ö_def_£t_c⁄fig
(*
drv_d©a
, 
wh©
, 
vÆ
Ë{  -1; 
	}
}

950 
	$ö_def_upd©e_™Æog
(*
drv_d©a
, 
axis_id
, *
ªsu…
Ë{  -1; 
	}
}

951 
	$ö_def_upd©e_keycode
(*
drv_d©a
, *
is_down
Ë{  0; 
	}
}

952 
	$ö_def_míu_å™¶©e
(*
drv_d©a
, 
keycode
, *
ccode
Ë{  0; 
	}
}

953 
	$ö_def_gë_key_code
(c⁄° *
key_«me
Ë{  -1; 
	}
}

954 c⁄° *
	$ö_def_gë_key_«me
(
keycode
Ë{  
NULL
; 
	}
}

956 
	#CHECK_ADD_STUB
(
d
, 
f
) \

957 i‡(
d
.
f
 =
NULL
Ëd.‡
ö_def_
##
	)
f

960 
	$ö_ªgi°î_drivî
(c⁄° 
ö_drv_t
 *
drv
,

961 c⁄° 
ö_deÁu…_böd
 *
defböds
, c⁄° *
pd©a
)

963 
cou¡_√w
 = 
ö_drivî_cou¡
 + 1;

964 
ö_drv_t
 *
√w_drivîs
;

966 
√w_drivîs
 = 
	`ªÆloc
(
ö_drivîs
, 
cou¡_√w
 * (in_drivers[0]));

967 i‡(
√w_drivîs
 =
NULL
) {

968 
	`Õrötf
("input: in_register_driver OOM\n");

972 
	`mem˝y
(&
√w_drivîs
[
ö_drivî_cou¡
], 
drv
, (new_drivers[0]));

974 
	`CHECK_ADD_STUB
(
√w_drivîs
[
ö_drivî_cou¡
], 
‰ì
);

975 
	`CHECK_ADD_STUB
(
√w_drivîs
[
ö_drivî_cou¡
], 
˛ón_böds
);

976 
	`CHECK_ADD_STUB
(
√w_drivîs
[
ö_drivî_cou¡
], 
gë_c⁄fig
);

977 
	`CHECK_ADD_STUB
(
√w_drivîs
[
ö_drivî_cou¡
], 
£t_c⁄fig
);

978 
	`CHECK_ADD_STUB
(
√w_drivîs
[
ö_drivî_cou¡
], 
upd©e_™Æog
);

979 
	`CHECK_ADD_STUB
(
√w_drivîs
[
ö_drivî_cou¡
], 
upd©e_keycode
);

980 
	`CHECK_ADD_STUB
(
√w_drivîs
[
ö_drivî_cou¡
], 
míu_å™¶©e
);

981 
	`CHECK_ADD_STUB
(
√w_drivîs
[
ö_drivî_cou¡
], 
gë_key_code
);

982 
	`CHECK_ADD_STUB
(
√w_drivîs
[
ö_drivî_cou¡
], 
gë_key_«me
);

983 i‡(
pd©a
)

984 
√w_drivîs
[
ö_drivî_cou¡
].
pd©a
 =Ödata;

985 i‡(
defböds
)

986 
√w_drivîs
[
ö_drivî_cou¡
].
defböds
 = defbinds;

987 
ö_drivîs
 = 
√w_drivîs
;

988 
ö_drivî_cou¡
 = 
cou¡_√w
;

991 
	}
}

993 
	$ö_öô
()

995 
ö_drivîs
 = 
NULL
;

996 
	`mem£t
(
ö_devi˚s
, 0, (in_devices));

997 
ö_drivî_cou¡
 = 0;

998 
ö_dev_cou¡
 = 0;

999 
	}
}

1002 
	$maö
()

1004 
ªt
;

1006 
	`ö_öô
();

1007 
	`ö_¥obe
();

1009 
	`ö_£t_blockög
(1);

1013 
dev
 = 0, 
down
;

1014 
ªt
 = 
	`ö_upd©e_keycode
(&
dev
, &
down
);

1015 
	`Õrötf
("#%i: %ò%ò(%s)\n", 
dev
, 
down
, 
ªt
, 
	`ö_gë_key_«me
(dev,Ñet));

1019 
ªt
 = 
	`ö_míu_waô_™y
();

1020 
	`Õrötf
("%08x\n", 
ªt
);

1025 
	}
}

	@frontend/libpicofe/input.h

1 #i‚de‡
INCLUDE_uXt8Z4R7EMpuEEtvSibXjNhKH3741VNc


2 
	#INCLUDE_uXt8Z4R7EMpuEEtvSibXjNhKH3741VNc
 1

	)

4 
	#IN_MAX_DEVS
 10

	)

5 
	#IN_ABS_RANGE
 1024

	)

8 
	#PBTN_UP
 (1 << 0)

	)

9 
	#PBTN_DOWN
 (1 << 1)

	)

10 
	#PBTN_LEFT
 (1 << 2)

	)

11 
	#PBTN_RIGHT
 (1 << 3)

	)

13 
	#PBTN_MOK
 (1 << 4)

	)

14 
	#PBTN_MBACK
 (1 << 5)

	)

15 
	#PBTN_MA2
 (1 << 6Ë

	)

16 
	#PBTN_MA3
 (1 << 7)

	)

18 
	#PBTN_L
 (1 << 8)

	)

19 
	#PBTN_R
 (1 << 9)

	)

21 
	#PBTN_MENU
 (1 << 10)

	)

23 
	#PBTN_CHAR
 (1 << 11Ë

	)

29 
	#PEVB_VOL_DOWN
 30

	)

30 
	#PEVB_VOL_UP
 29

	)

31 
	#PEVB_STATE_LOAD
 28

	)

32 
	#PEVB_STATE_SAVE
 27

	)

33 
	#PEVB_SWITCH_RND
 26

	)

34 
	#PEVB_SSLOT_PREV
 25

	)

35 
	#PEVB_SSLOT_NEXT
 24

	)

36 
	#PEVB_MENU
 23

	)

37 
	#PEVB_FF
 22

	)

38 
	#PEVB_PICO_PNEXT
 21

	)

39 
	#PEVB_PICO_PPREV
 20

	)

40 
	#PEVB_PICO_SWINP
 19

	)

42 
	#PEV_VOL_DOWN
 (1 << 
PEVB_VOL_DOWN
)

	)

43 
	#PEV_VOL_UP
 (1 << 
PEVB_VOL_UP
)

	)

44 
	#PEV_STATE_LOAD
 (1 << 
PEVB_STATE_LOAD
)

	)

45 
	#PEV_STATE_SAVE
 (1 << 
PEVB_STATE_SAVE
)

	)

46 
	#PEV_SWITCH_RND
 (1 << 
PEVB_SWITCH_RND
)

	)

47 
	#PEV_SSLOT_PREV
 (1 << 
PEVB_SSLOT_PREV
)

	)

48 
	#PEV_SSLOT_NEXT
 (1 << 
PEVB_SSLOT_NEXT
)

	)

49 
	#PEV_MENU
 (1 << 
PEVB_MENU
)

	)

50 
	#PEV_FF
 (1 << 
PEVB_FF
)

	)

51 
	#PEV_PICO_PNEXT
 (1 << 
PEVB_PICO_PNEXT
)

	)

52 
	#PEV_PICO_PPREV
 (1 << 
PEVB_PICO_PPREV
)

	)

53 
	#PEV_PICO_SWINP
 (1 << 
PEVB_PICO_SWINP
)

	)

55 
	#PEV_MASK
 0x7ff80000

	)

60 
	mIN_CFG_BIND_COUNT
 = 0,

61 
	mIN_CFG_DOES_COMBOS
,

62 
	mIN_CFG_BLOCKING
,

63 
	mIN_CFG_KEY_NAMES
,

64 
	mIN_CFG_ABS_DEAD_ZONE
,

65 
	mIN_CFG_ABS_AXIS_COUNT
,

66 
	mIN_CFG_DEFAULT_DEV
,

70 
	mIN_BINDTYPE_NONE
 = -1,

71 
	mIN_BINDTYPE_EMU
 = 0,

72 
	mIN_BINDTYPE_PLAYER12
,

73 
	mIN_BINDTYPE_COUNT


76 
	#IN_BIND_OFFS
(
key
, 
bty≥
) \

77 ((
key
Ë* 
IN_BINDTYPE_COUNT
 + (
bty≥
))

	)

79 
I≈utDrivî
 
	tö_drv_t
;

81 
	sI≈utDrivî
 {

82 c⁄° *
	m¥efix
;

83 (*
	m¥obe
)(c⁄° 
ö_drv_t
 *
	mdrv
);

84 (*
	m‰ì
)(*
	mdrv_d©a
);

86 (*
	mgë_key_«mes
)(c⁄° 
ö_drv_t
 *
	mdrv
, *
	mcou¡
);

87 (*
	m˛ón_böds
)(*
	mdrv_d©a
, *
	mböds
, *
	mdef_föds
);

88 (*
	mgë_c⁄fig
)(*
	mdrv_d©a
, 
	mwh©
, *
	mvÆ
);

89 (*
	m£t_c⁄fig
)(*
	mdrv_d©a
, 
	mwh©
, 
	mvÆ
);

90 (*
	mupd©e
)(*
	mdrv_d©a
, c⁄° *
	mböds
, *
	mªsu…
);

91 (*
	mupd©e_™Æog
)(*
	mdrv_d©a
, 
	maxis_id
, *
	mªsu…
);

93 (*
	mupd©e_keycode
)(*
	mdrv_d©a
, *
	mis_down
);

94 (*
	mmíu_å™¶©e
)(*
	mdrv_d©a
, 
	mkeycode
, *
	mch¨code
);

95 (*
	mgë_key_code
)(c⁄° *
	mkey_«me
);

96 c⁄° * (*
	mgë_key_«me
)(
	mkeycode
);

98 c⁄° 
ö_deÁu…_böd
 *
	mdefböds
;

99 c⁄° *
	mpd©a
;

102 
	sö_deÁu…_böd
 {

103 
	mcode
;

104 
	mbty≥
;

105 
	mbô
;

108 
	smíu_keym≠
 {

109 
	mkey
;

110 
	mpbä
;

113 
	sö_pd©a
 {

114 c⁄° 
ö_deÁu…_böd
 *
	mdefböds
;

115 c⁄° 
míu_keym≠
 *
	mkey_m≠
;

116 
size_t
 
	mkm≠_size
;

117 c⁄° 
míu_keym≠
 *
	mjoy_m≠
;

118 
size_t
 
	mjm≠_size
;

119 c⁄° * c⁄° *
	mkey_«mes
;

123 
ö_ªgi°î_drivî
(c⁄° 
ö_drv_t
 *
drv
,

124 c⁄° 
ö_deÁu…_böd
 *
defböds
, c⁄° *
pd©a
);

125 
ö_ªgi°î
(c⁄° *
¬ame
, 
drv_fd_hnd
, *
drv_d©a
,

126 
key_cou¡
, c⁄° * c⁄° *
key_«mes
, 
combos
);

127 
ö_combos_föd
(c⁄° *
böds
, 
œ°_key
, *
combo_keys
, *
combo_a˘s
);

128 
ö_combos_do
(
keys
, c⁄° *
böds
, 
œ°_key
, 
combo_keys
, 
combo_a˘s
);

130 
ö_öô
();

131 
ö_¥obe
();

132 
ö_upd©e
(*
ªsu…
);

133 
ö_upd©e_™Æog
(
dev_id
, 
axis_id
, *
vÆue
);

134 
ö_upd©e_keycode
(*
dev_id
, *
is_down
, *
ch¨code
, 
timeout_ms
);

135 
ö_míu_waô_™y
(*
ch¨code
, 
timeout_ms
);

136 
ö_míu_waô
(
öãª°ög
, *
ch¨code
, 
aut‹ï_dñay_ms
);

137 
ö_c⁄fig_∑r£_dev
(c⁄° *
dev_«me
);

138 
ö_c⁄fig_böd_key
(
dev_id
, c⁄° *
key
, 
böds
, 
böd_ty≥
);

139 
ö_gë_c⁄fig
(
dev_id
, 
wh©
, *
vÆ
);

140 
ö_£t_c⁄fig
(
dev_id
, 
wh©
, c⁄° *
vÆ
, 
size
);

141 
ö_gë_key_code
(
dev_id
, c⁄° *
key_«me
);

142 
ö_«me_to_id
(c⁄° *
dev_«me
);

143 
ö_böd_key
(
dev_id
, 
keycode
, 
mask
, 
böd_ty≥
, 
f‹˚_unböd
);

144 
ö_unböd_Æl
(
dev_id
, 
a˘_mask
, 
böd_ty≥
);

145 
ö_˛ón_böds
();

146 
ö_debug_dump
();

148 c⁄° *
ö_gë_dev_böds
(
dev_id
);

149 c⁄° *
ö_gë_dev_def_böds
(
dev_id
);

150 c⁄° *
ö_gë_dev_«me
(
dev_id
, 
mu°_be_a˘ive
, 
skù_pfix
);

151 c⁄° *
ö_gë_key_«me
(
dev_id
, 
keycode
);

153 
	#ö_£t_c⁄fig_öt
(
dev_id
, 
wh©
, 
v
) { \

154 
vÆ_
 = 
v
; \

155 
	`ö_£t_c⁄fig
(
dev_id
, 
wh©
, &
vÆ_
, (val_)); \

156 }

	)

	@frontend/libpicofe/linux/fbdev.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sys/°©.h
>

17 
	~<f˙é.h
>

18 
	~<sys/io˘l.h
>

19 
	~<sys/mm™.h
>

20 
	~<uni°d.h
>

21 
	~<löux/fb.h
>

22 
	~<löux/m©roxfb.h
>

24 
	~"fbdev.h
"

26 
	#PFX
 "fbdev: "

	)

28 
	svout_fbdev
 {

29 
	mfd
;

30 *
	mmem
;

31 
size_t
 
	mmem_size
;

32 
fb_v¨_s¸ìnöfo
 
	mfbv¨_ﬁd
;

33 
fb_v¨_s¸ìnöfo
 
	mfbv¨_√w
;

34 
	mbuf„r_wrôe
;

35 
	mfb_size
;

36 
	mbuf„r_cou¡
;

37 
	mt›_b‹dî
, 
	mbŸtom_b‹dî
;

38 *
	mmem_ßved
;

39 
size_t
 
	mmem_ßved_size
;

42 *
	$vout_fbdev_Êù
(
vout_fbdev
 *
fbdev
)

44 
døw_buf
;

46 i‡(
fbdev
->
buf„r_cou¡
 < 2)

47  
fbdev
->
mem
;

49 
døw_buf
 = 
fbdev
->
buf„r_wrôe
;

50 
fbdev
->
buf„r_wrôe
++;

51 i‡(
fbdev
->
buf„r_wrôe
 >fbdev->
buf„r_cou¡
)

52 
fbdev
->
buf„r_wrôe
 = 0;

54 
fbdev
->
fbv¨_√w
.
yoff£t
 =

55 (
fbdev
->
t›_b‹dî
 + fbdev->
fbv¨_√w
.
yªs
 + fbdev->
bŸtom_b‹dî
Ë* 
døw_buf
 +

56 
fbdev
->
t›_b‹dî
;

58 
	`io˘l
(
fbdev
->
fd
, 
FBIOPAN_DISPLAY
, &fbdev->
fbv¨_√w
);

60  (*)
fbdev
->
mem
 + fbdev->
fb_size
 * fbdev->
buf„r_wrôe
;

61 
	}
}

63 
	$vout_fbdev_waô_vsync
(
vout_fbdev
 *
fbdev
)

65 
¨g
 = 0;

66 
	`io˘l
(
fbdev
->
fd
, 
FBIO_WAITFORVSYNC
, &
¨g
);

67 
	}
}

70 *
	$vout_fbdev_ªsize
(
vout_fbdev
 *
fbdev
, 
w
, 
h
, 
bµ
,

71 
À·_b‹dî
, 
right_b‹dî
, 
t›_b‹dî
, 
bŸtom_b‹dî
, 
buf„r_˙t
)

73 
w_tŸÆ
 = 
À·_b‹dî
 + 
w
 + 
right_b‹dî
;

74 
h_tŸÆ
 = 
t›_b‹dî
 + 
h
 + 
bŸtom_b‹dî
;

75 
size_t
 
mem_size
;

76 
ªt
;

79 
	`io˘l
(
fbdev
->
fd
, 
FBIOBLANK
, 
FB_BLANK_UNBLANK
);

81 i‡(
fbdev
->
fbv¨_√w
.
bôs_≥r_pixñ
 !
bµ
 ||

82 
fbdev
->
fbv¨_√w
.
xªs
 !
w
 ||

83 
fbdev
->
fbv¨_√w
.
yªs
 !
h
 ||

84 
fbdev
->
fbv¨_√w
.
xªs_vútuÆ
 !
w_tŸÆ
||

85 
fbdev
->
fbv¨_√w
.
yªs_vútuÆ
 < 
h_tŸÆ
 ||

86 
fbdev
->
fbv¨_√w
.
xoff£t
 !
À·_b‹dî
 ||

87 
fbdev
->
buf„r_cou¡
 !
buf„r_˙t
)

89 i‡(
fbdev
->
fbv¨_√w
.
bôs_≥r_pixñ
 !
bµ
 ||

90 
w
 !
fbdev
->
fbv¨_√w
.
xªs
 || 
h
 !fbdev->fbv¨_√w.
yªs
)

91 
	`¥ötf
(
PFX
 "swôchögÅÿ%dx%d@%d\n", 
w
, 
h
, 
bµ
);

93 
fbdev
->
fbv¨_√w
.
xªs
 = 
w
;

94 
fbdev
->
fbv¨_√w
.
yªs
 = 
h
;

95 
fbdev
->
fbv¨_√w
.
xªs_vútuÆ
 = 
w_tŸÆ
;

96 
fbdev
->
fbv¨_√w
.
yªs_vútuÆ
 = 
h_tŸÆ
 * 
buf„r_˙t
;

97 
fbdev
->
fbv¨_√w
.
xoff£t
 = 
À·_b‹dî
;

98 
fbdev
->
fbv¨_√w
.
yoff£t
 = 
t›_b‹dî
;

99 
fbdev
->
fbv¨_√w
.
bôs_≥r_pixñ
 = 
bµ
;

100 
fbdev
->
fbv¨_√w
.
n⁄°d
 = 0;

101 
fbdev
->
buf„r_cou¡
 = 
buf„r_˙t
;

102 
fbdev
->
buf„r_wrôe
 = 
buf„r_˙t
 > 1 ? 1 : 0;

105 
	`vout_fbdev_waô_vsync
(
fbdev
);

107 
ªt
 = 
	`io˘l
(
fbdev
->
fd
, 
FBIOPUT_VSCREENINFO
, &fbdev->
fbv¨_√w
);

108 i‡(
ªt
 == -1) {

110 
fbdev
->
fbv¨_√w
.
yªs_vútuÆ
 = 
h_tŸÆ
;

111 
ªt
 = 
	`io˘l
(
fbdev
->
fd
, 
FBIOPUT_VSCREENINFO
, &fbdev->
fbv¨_√w
);

112 i‡(
ªt
 == -1) {

113 
	`≥º‹
(
PFX
 "FBIOPUT_VSCREENINFO ioctl");

114  
NULL
;

116 
fbdev
->
buf„r_cou¡
 = 1;

117 
fbdev
->
buf„r_wrôe
 = 0;

118 
	`Ârötf
(
°dîr
, 
PFX
 "Warning: failedÅo increase virtualÑesolution, "

124 
fbdev
->
fb_size
 = 
w_tŸÆ
 * 
h_tŸÆ
 * 
bµ
 / 8;

125 
fbdev
->
t›_b‹dî
 =Åop_border;

126 
fbdev
->
bŸtom_b‹dî
 = bottom_border;

128 
mem_size
 = 
fbdev
->
fb_size
 * fbdev->
buf„r_cou¡
;

129 i‡(
fbdev
->
mem_size
 >= mem_size)

130 
out
;

132 i‡(
fbdev
->
mem
 !
NULL
)

133 
	`munm≠
(
fbdev
->
mem
, fbdev->
mem_size
);

135 
fbdev
->
mem
 = 
	`mm≠
(0, 
mem_size
, 
PROT_WRITE
|
PROT_READ
, 
MAP_SHARED
, fbdev->
fd
, 0);

136 i‡(
fbdev
->
mem
 =
MAP_FAILED
 && fbdev->
buf„r_cou¡
 > 1) {

137 
	`Ârötf
(
°dîr
, 
PFX
 "W¨nög: c™'àm≠ %zd byãs, doubÀbuf„rög dißbÀd\n", 
mem_size
);

138 
fbdev
->
buf„r_cou¡
 = 1;

139 
fbdev
->
buf„r_wrôe
 = 0;

140 
mem_size
 = 
fbdev
->
fb_size
;

141 
fbdev
->
mem
 = 
	`mm≠
(0, 
mem_size
, 
PROT_WRITE
|
PROT_READ
, 
MAP_SHARED
, fbdev->
fd
, 0);

143 i‡(
fbdev
->
mem
 =
MAP_FAILED
) {

144 
fbdev
->
mem
 = 
NULL
;

145 
fbdev
->
mem_size
 = 0;

146 
	`≥º‹
(
PFX
 "mmap framebuffer");

147  
NULL
;

150 
fbdev
->
mem_size
 = mem_size;

152 
out
:

153  (*)
fbdev
->
mem
 + fbdev->
fb_size
 * fbdev->
buf„r_wrôe
;

154 
	}
}

156 
	$vout_fbdev_˛ór
(
vout_fbdev
 *
fbdev
)

158 
	`mem£t
(
fbdev
->
mem
, 0, fbdev->
mem_size
);

159 
	}
}

161 
	$vout_fbdev_˛ór_löes
(
vout_fbdev
 *
fbdev
, 
y
, 
cou¡
)

163 
°ride
 = 
fbdev
->
fbv¨_√w
.
xªs_vútuÆ
 * fbdev->fbv¨_√w.
bôs_≥r_pixñ
 / 8;

164 
i
;

166 i‡(
y
 + 
cou¡
 > 
fbdev
->
t›_b‹dî
 + fbdev->
fbv¨_√w
.
yªs
)

167 
cou¡
 = 
fbdev
->
t›_b‹dî
 + fbdev->
fbv¨_√w
.
yªs
 - 
y
;

169 i‡(
y
 >0 && 
cou¡
 > 0)

170 
i
 = 0; i < 
fbdev
->
buf„r_cou¡
; i++)

171 
	`mem£t
((*)
fbdev
->
mem
 + fbdev->
fb_size
 * 
i
 + 
y
 * 
°ride
, 0, såidê* 
cou¡
);

172 
	}
}

174 
	$vout_fbdev_gë_fd
(
vout_fbdev
 *
fbdev
)

176  
fbdev
->
fd
;

177 
	}
}

179 
vout_fbdev
 *
	$vout_fbdev_öô
(c⁄° *
fbdev_«me
, *
w
, *
h
, 
bµ
, 
buf„r_˙t
)

181 
vout_fbdev
 *
fbdev
;

182 
ªq_w
, 
ªq_h
;

183 *
¥ë
;

184 
ªt
;

186 
fbdev
 = 
	`ˇŒoc
(1, (*fbdev));

187 i‡(
fbdev
 =
NULL
)

188  
NULL
;

190 
fbdev
->
fd
 = 
	`›í
(
fbdev_«me
, 
O_RDWR
);

191 i‡(
fbdev
->
fd
 == -1) {

192 
	`Ârötf
(
°dîr
, 
PFX
 "%s: ", 
fbdev_«me
);

193 
	`≥º‹
("open");

194 
Áû_›í
;

197 
ªt
 = 
	`io˘l
(
fbdev
->
fd
, 
FBIOGET_VSCREENINFO
, &fbdev->
fbv¨_ﬁd
);

198 i‡(
ªt
 == -1) {

199 
	`≥º‹
(
PFX
 "FBIOGET_VSCREENINFO ioctl");

200 
Áû
;

203 
fbdev
->
fbv¨_√w
 = fbdev->
fbv¨_ﬁd
;

205 
ªq_w
 = 
fbdev
->
fbv¨_√w
.
xªs
;

206 i‡(*
w
 != 0)

207 
ªq_w
 = *
w
;

208 
ªq_h
 = 
fbdev
->
fbv¨_√w
.
yªs
;

209 i‡(*
h
 != 0)

210 
ªq_h
 = *
h
;

212 
¥ë
 = 
	`vout_fbdev_ªsize
(
fbdev
, 
ªq_w
, 
ªq_h
, 
bµ
, 0, 0, 0, 0, 
buf„r_˙t
);

213 i‡(
¥ë
 =
NULL
)

214 
Áû
;

216 
	`¥ötf
(
PFX
 "%s: %ix%i@%d\n", 
fbdev_«me
, 
fbdev
->
fbv¨_√w
.
xªs
,

217 
fbdev
->
fbv¨_√w
.
yªs
, fbdev->fbv¨_√w.
bôs_≥r_pixñ
);

218 *
w
 = 
fbdev
->
fbv¨_√w
.
xªs
;

219 *
h
 = 
fbdev
->
fbv¨_√w
.
yªs
;

221 
	`mem£t
(
fbdev
->
mem
, 0, fbdev->
mem_size
);

224 
ªt
 = 0;

225 
ªt
 = 
	`io˘l
(
fbdev
->
fd
, 
FBIO_WAITFORVSYNC
, &ret);

226 i‡(
ªt
 != 0)

227 
	`Ârötf
(
°dîr
, 
PFX
 "Warning: vsync doesn't seemÅo be supported\n");

229 i‡(
fbdev
->
buf„r_cou¡
 > 1) {

230 
fbdev
->
buf„r_wrôe
 = 0;

231 
fbdev
->
fbv¨_√w
.
yoff£t
 = fbdev->fbv¨_√w.
yªs
 * (fbdev->
buf„r_cou¡
 - 1);

232 
ªt
 = 
	`io˘l
(
fbdev
->
fd
, 
FBIOPAN_DISPLAY
, &fbdev->
fbv¨_√w
);

233 i‡(
ªt
 != 0) {

234 
fbdev
->
buf„r_cou¡
 = 1;

235 
	`Ârötf
(
°dîr
, 
PFX
 "Warning: can'tÖan display, doublebuffering disabled\n");

239 
	`¥ötf
("fbdev initialized.\n");

240  
fbdev
;

242 
Áû
:

243 
	`˛o£
(
fbdev
->
fd
);

244 
Áû_›í
:

245 
	`‰ì
(
fbdev
);

246  
NULL
;

247 
	}
}

249 
	$vout_fbdev_ªÀa£
(
vout_fbdev
 *
fbdev
)

251 
	`io˘l
(
fbdev
->
fd
, 
FBIOPUT_VSCREENINFO
, &fbdev->
fbv¨_ﬁd
);

252 i‡(
fbdev
->
mem
 !
MAP_FAILED
)

253 
	`munm≠
(
fbdev
->
mem
, fbdev->
mem_size
);

254 
fbdev
->
mem
 = 
NULL
;

255 
	}
}

257 
	$vout_fbdev_ßve
(
vout_fbdev
 *
fbdev
)

259 *
tmp
;

261 i‡(
fbdev
 =
NULL
 || fbdev->
mem
 =NULL || fbdev->mem =
MAP_FAILED
) {

262 
	`Ârötf
(
°dîr
, 
PFX
 "badárgs for save\n");

266 i‡(
fbdev
->
mem_ßved_size
 < fbdev->
mem_size
) {

267 
tmp
 = 
	`ªÆloc
(
fbdev
->
mem_ßved
, fbdev->
mem_size
);

268 i‡(
tmp
 =
NULL
)

270 
fbdev
->
mem_ßved
 = 
tmp
;

272 
	`mem˝y
(
fbdev
->
mem_ßved
, fbdev->
mem
, fbdev->
mem_size
);

273 
fbdev
->
mem_ßved_size
 = fbdev->
mem_size
;

275 
	`vout_fbdev_ªÀa£
(
fbdev
);

277 
	}
}

279 
	$vout_fbdev_ª°‹e
(
vout_fbdev
 *
fbdev
)

281 
ªt
;

283 i‡(
fbdev
 =
NULL
 || fbdev->
mem
 != NULL) {

284 
	`Ârötf
(
°dîr
, 
PFX
 "badárgs/state forÑestore\n");

288 
fbdev
->
mem
 = 
	`mm≠
(0, fbdev->
mem_size
, 
PROT_WRITE
|
PROT_READ
, 
MAP_SHARED
, fbdev->
fd
, 0);

289 i‡(
fbdev
->
mem
 =
MAP_FAILED
) {

290 
	`≥º‹
(
PFX
 "restore: memoryÑestore failed");

293 
	`mem˝y
(
fbdev
->
mem
, fbdev->
mem_ßved
, fbdev->
mem_size
);

295 
ªt
 = 
	`io˘l
(
fbdev
->
fd
, 
FBIOPUT_VSCREENINFO
, &fbdev->
fbv¨_√w
);

296 i‡(
ªt
 == -1) {

297 
	`≥º‹
(
PFX
 "restore: FBIOPUT_VSCREENINFO");

302 
	}
}

304 
	$vout_fbdev_föish
(
vout_fbdev
 *
fbdev
)

306 
	`vout_fbdev_ªÀa£
(
fbdev
);

307 i‡(
fbdev
->
fd
 >= 0)

308 
	`˛o£
(
fbdev
->
fd
);

309 
fbdev
->
fd
 = -1;

310 
	`‰ì
(
fbdev
);

311 
	}
}

	@frontend/libpicofe/linux/fbdev.h

1 
	gvout_fbdev
;

3 
vout_fbdev
 *
vout_fbdev_öô
(c⁄° *
fbdev_«me
, *
w
, *
h
, 
bµ
, 
buf„r_cou¡
);

4 *
vout_fbdev_Êù
(
vout_fbdev
 *
fbdev
);

5 
vout_fbdev_waô_vsync
(
vout_fbdev
 *
fbdev
);

6 *
vout_fbdev_ªsize
(
vout_fbdev
 *
fbdev
, 
w
, 
h
, 
bµ
,

7 
À·_b‹dî
, 
right_b‹dî
, 
t›_b‹dî
, 
bŸtom_b‹dî
,

8 
buf„r_cou¡
);

9 
vout_fbdev_˛ór
(
vout_fbdev
 *
fbdev
);

10 
vout_fbdev_˛ór_löes
(
vout_fbdev
 *
fbdev
, 
y
, 
cou¡
);

11 
vout_fbdev_gë_fd
(
vout_fbdev
 *
fbdev
);

12 
vout_fbdev_ßve
(
vout_fbdev
 *
fbdev
);

13 
vout_fbdev_ª°‹e
(
vout_fbdev
 *
fbdev
);

14 
vout_fbdev_föish
(
vout_fbdev
 *
fbdev
);

	@frontend/libpicofe/linux/host_dasm.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~<°d¨g.h
>

16 
	~<bfd.h
>

17 
	~<dis-asm.h
>

19 
	~"ho°_dasm.h
"

21 **
g_¨gv
;

23 
dißs£mbÀ_öfo
 
	gdi
;

25 #ifde‡
__¨m__


26 
	#¥öt_ö¢_func
 
¥öt_ö¢_lôée_¨m


	)

27 
	#BFD_ARCH
 
bfd_¨ch_¨m


	)

28 
	#BFD_MACH
 
bfd_mach_¨m_unknown


	)

29 
	#DASM_OPTS
 "ªg-«mes-°d"

	)

31 
	#¥öt_ö¢_func
 
¥öt_ö¢_i386_öãl


	)

32 
	#BFD_ARCH
 
bfd_¨ch_i386


	)

33 
	#BFD_MACH
 
bfd_mach_i386_i386_öãl_sy¡ax


	)

34 
	#DASM_OPTS
 
NULL


	)

38 
asymbﬁ
 **
	gsymbﬁs
;

39 
	gsymcou¡
, 
	gsym°‹age
;

40 
	göô_d⁄e
;

46 
	$ªmove_u£Àss_symbﬁs
 (
asymbﬁ
 **
symbﬁs
, 
cou¡
)

48 
asymbﬁ
 **
ö_±r
 = 
symbﬁs
, **
out_±r
 = symbols;

50 --
cou¡
 >= 0)

52 
asymbﬁ
 *
sym
 = *
ö_±r
++;

54 i‡(
sym
->
«me
 =
NULL
 || sym->name[0] == '\0' || sym->name[0] == '$')

56 i‡(
sym
->
Êags
 & (
BSF_DEBUGGING
 | 
BSF_SECTION_SYM
))

58 i‡(
	`bfd_is_und_£˘i⁄
 (
sym
->
£˘i⁄
)

59 || 
	`bfd_is_com_£˘i⁄
 (
sym
->
£˘i⁄
))

61 i‡(
sym
->
vÆue
 + sym->
£˘i⁄
->
vma
 == 0)

68 *
out_±r
++ = 
sym
;

71  
out_±r
 - 
symbﬁs
;

72 
	}
}

74 
	$¶uΩ_symèb
(c⁄° *
fûíame
)

76 
bfd
 *
abfd
;

78 
symcou¡
 = 0;

80 
abfd
 = 
	`bfd_›ír
(
fûíame
, 
NULL
);

81 i‡(
abfd
 =
NULL
) {

82 
	`Ârötf
(
°dîr
, "ÁûedÅÿ›í: %s\n", 
fûíame
);

83 
no_symbﬁs
;

86 i‡(!
	`bfd_check_f‹m©
(
abfd
, 
bfd_obje˘
))

87 
no_symbﬁs
;

89 i‡(!(
	`bfd_gë_fûe_Êags
(
abfd
Ë& 
HAS_SYMS
))

90 
no_symbﬁs
;

92 
sym°‹age
 = 
	`bfd_gë_symèb_uµî_bound
(
abfd
);

93 i‡(
sym°‹age
 <= 0)

94 
no_symbﬁs
;

96 
symbﬁs
 = 
	`mÆloc
(
sym°‹age
);

97 i‡(
symbﬁs
 =
NULL
)

98 
no_symbﬁs
;

100 
symcou¡
 = 
	`bfd_ˇn⁄iˇlize_symèb
(
abfd
, 
symbﬁs
);

101 i‡(
symcou¡
 < 0)

102 
no_symbﬁs
;

104 
symcou¡
 = 
	`ªmove_u£Àss_symbﬁs
(
symbﬁs
, symcount);

108 
no_symbﬁs
:

109 
	`Ârötf
(
°dîr
, "nÿsymbﬁ†ö %s\n", 
	`bfd_gë_fûíame
(
abfd
));

110 i‡(
symbﬁs
 !
NULL
)

111 
	`‰ì
(
symbﬁs
);

112 
symbﬁs
 = 
NULL
;

113 i‡(
abfd
 !
NULL
)

114 
	`bfd_˛o£
(
abfd
);

115 
	}
}

117 c⁄° *
	$lookup_«me
(
bfd_vma
 
addr
)

119 
asymbﬁ
 **
•å
 = 
symbﬁs
;

120 
i
;

122 
i
 = 0; i < 
symcou¡
; i++) {

123 
asymbﬁ
 *
sym
 = *
•å
++;

125 i‡(
addr
 =
sym
->
vÆue
 + sym->
£˘i⁄
->
vma
)

126  
sym
->
«me
;

129  
NULL
;

130 
	}
}

134 
	$dis_asm_ªad_mem‹y
(
bfd_vma
 
memaddr
, 
bfd_byã
 *
myaddr
, 
Àn
,

135 
dißs£mbÀ_öfo
 *
öfo
)

137 
	`mem˝y
(
myaddr
, (*)()
memaddr
, 
Àn
);

139 
	}
}

142 
	$dis_asm_mem‹y_îr‹
(
°©us
, 
bfd_vma
 
memaddr
,

143 
dißs£mbÀ_öfo
 *
öfo
)

145 
	`Ârötf
(
°dîr
, "mem‹y_îr‹ %p\n", (*)()
memaddr
);

146 
	}
}

149 
	$dis_asm_¥öt_addªss
(
bfd_vma
 
addr
, 
dißs£mbÀ_öfo
 *
öfo
)

151 c⁄° *
«me
;

153 
	`¥ötf
("%08x", ()
addr
);

155 
«me
 = 
	`lookup_«me
(
addr
);

156 i‡(
«me
 !
NULL
)

157 
	`¥ötf
(" <%s>", 
«me
);

158 
	}
}

160 
	$ö¢_¥ötf
(*
f
, c⁄° *
f‹m©
, ...)

162 
va_li°
 
¨gs
;

163 
size_t
 
n
;

165 
	`va_°¨t
(
¨gs
, 
f‹m©
);

166 
n
 = 
	`v¥ötf
(
f‹m©
, 
¨gs
);

167 
	`va_íd
(
¨gs
);

169  
n
;

170 
	}
}

172 
	$ho°_dasm_öô
()

174 
	`bfd_öô
();

175 
	`¶uΩ_symèb
(
g_¨gv
[0]);

177 
	`öô_dißs£mbÀ_öfo
(&
di
, 
NULL
, 
ö¢_¥ötf
);

178 
di
.
Êavour
 = 
bfd_èrgë_unknown_Êavour
;

179 
di
.
mem‹y_îr‹_func
 = 
dis_asm_mem‹y_îr‹
;

180 
di
.
¥öt_addªss_func
 = 
dis_asm_¥öt_addªss
;

182 
di
.
ªad_mem‹y_func
 = 
dis_asm_ªad_mem‹y
;

183 
di
.
¨ch
 = 
BFD_ARCH
;

184 
di
.
mach
 = 
BFD_MACH
;

185 
di
.
ídün
 = 
BFD_ENDIAN_LITTLE
;

186 
di
.
dißs£mbÀr_›ti⁄s
 = 
DASM_OPTS
;

187 
	`dißs£mbÀ_öô_f‹_èrgë
(&
di
);

188 
öô_d⁄e
 = 1;

189 
	}
}

191 
	$ho°_dasm
(*
addr
, 
Àn
)

193 
bfd_vma
 
vma_íd
, 
vma
 = (bfd_vma)()
addr
;

194 c⁄° *
«me
;

196 i‡(!
öô_d⁄e
)

197 
	`ho°_dasm_öô
();

199 
vma_íd
 = 
vma
 + 
Àn
;

200 
vma
 < 
vma_íd
) {

201 
«me
 = 
	`lookup_«me
(
vma
);

202 i‡(
«me
 !
NULL
)

203 
	`¥ötf
("%s:\n", 
«me
);

205 
	`¥ötf
(" %08lx ", ()
vma
);

206 
vma
 +
	`¥öt_ö¢_func
(vma, &
di
);

207 
	`¥ötf
("\n");

209 
	}
}

211 
	$ho°_dasm_√w_symbﬁ_
(*
addr
, c⁄° *
«me
)

213 
bfd_vma
 
vma
 = (bfd_vma)()
addr
;

214 
asymbﬁ
 *
sym
, **
tmp
;

216 i‡(!
öô_d⁄e
)

217 
	`ho°_dasm_öô
();

218 i‡(
symbﬁs
 =
NULL
)

220 i‡(
sym°‹age
 <
symcou¡
 * (
symbﬁs
[0])) {

221 
tmp
 = 
	`ªÆloc
(
symbﬁs
, 
sym°‹age
 * 2);

222 i‡(
tmp
 =
NULL
)

224 
sym°‹age
 *= 2;

225 
symbﬁs
 = 
tmp
;

228 
symbﬁs
[
symcou¡
] = 
	`ˇŒoc
((*symbols[0]), 1);

229 i‡(
symbﬁs
[
symcou¡
] =
NULL
)

233 
sym
 = 
symbﬁs
[
symcou¡
];

234 
sym
->
£˘i⁄
 = 
symbﬁs
[0]->section;

235 
sym
->
vÆue
 = 
vma
 - sym->
£˘i⁄
->vma;

236 
sym
->
«me
 =Çame;

237 
symcou¡
++;

238 
	}
}

	@frontend/libpicofe/linux/host_dasm.h

1 
ho°_dasm
(*
addr
, 
Àn
);

2 
ho°_dasm_√w_symbﬁ_
(*
addr
, c⁄° *
«me
);

3 
	#ho°_dasm_√w_symbﬁ
(
sym
) \

4 
	`ho°_dasm_√w_symbﬁ_
(
sym
, #sym)

	)

	@frontend/libpicofe/linux/in_evdev.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sys/°©.h
>

17 
	~<f˙é.h
>

18 
	~<sys/io˘l.h
>

19 
	~<uni°d.h
>

20 
	~<löux/öput.h
>

21 
	~<î∫o.h
>

23 
	~"../öput.h
"

24 
	~"ö_evdev.h
"

26 
	#MAX_ABS_DEVS
 8

	)

29 
	mfd
;

30 *
	mkbôs
;

31 
	mabs_mö_x
;

32 
	mabs_max_x
;

33 
	mabs_mö_y
;

34 
	mabs_max_y
;

35 
	mabs_lz⁄e
;

36 
	mabs_œ°x
;

37 
	mabs_œ°y
;

38 
	mkc_fú°
;

39 
	mkc_œ°
;

40 
	mabs_cou¡
;

41 
	mabs_mu…
[
MAX_ABS_DEVS
];

42 
	mabs_adj
[
MAX_ABS_DEVS
];

43 
	mabs_to_digôÆ
:1;

45 c⁄° 
ö_drv_t
 *
	mdrv
;

46 } 
	tö_evdev_t
;

48 #i‚de‡
KEY_CNT


49 
	#KEY_CNT
 (
KEY_MAX
 + 1)

	)

52 
	#KEYBITS_BIT
(
x
Ë(
keybôs
[(x)/(keybits[0])/8] & \

53 (1 << ((
x
Ë& ((
keybôs
[0])*8-1))))

	)

55 
	#KEYBITS_BIT_SET
(
x
Ë(
keybôs
[(x)/(keybits[0])/8] |= \

56 (1 << ((
x
Ë& ((
keybôs
[0])*8-1))))

	)

58 
	#KEYBITS_BIT_CLEAR
(
x
Ë(
keybôs
[(x)/(keybits[0])/8] &= \

59 ~(1 << ((
x
Ë& ((
keybôs
[0])*8-1))))

	)

61 
	gö_evdev_Ælow_abs_⁄ly
;

63 
	#IN_EVDEV_PREFIX
 "evdev:"

	)

65 c⁄° * c⁄° 
	gö_evdev_keys
[
KEY_CNT
] = {

67 [
KEY_RESERVED
] = "Re£rved", [
KEY_ESC
] = "Esc",

68 [
KEY_1
] = "1", [
KEY_2
] = "2",

69 [
KEY_3
] = "3", [
KEY_4
] = "4",

70 [
KEY_5
] = "5", [
KEY_6
] = "6",

71 [
KEY_7
] = "7", [
KEY_8
] = "8",

72 [
KEY_9
] = "9", [
KEY_0
] = "0",

73 [
KEY_MINUS
] = "Möus", [
KEY_EQUAL
] = "Equal",

74 [
KEY_BACKSPACE
] = "Back•a˚", [
KEY_TAB
] = "Tab",

75 [
KEY_Q
] = "Q", [
KEY_W
] = "W",

76 [
KEY_E
] = "E", [
KEY_R
] = "R",

77 [
KEY_T
] = "T", [
KEY_Y
] = "Y",

78 [
KEY_U
] = "U", [
KEY_I
] = "I",

79 [
KEY_O
] = "O", [
KEY_P
] = "P",

80 [
KEY_LEFTBRACE
] = "Le·Bø˚", [
KEY_RIGHTBRACE
] = "RightBrace",

81 [
KEY_ENTER
] = "E¡î", [
KEY_LEFTCTRL
] = "LeftControl",

82 [
KEY_A
] = "A", [
KEY_S
] = "S",

83 [
KEY_D
] = "D", [
KEY_F
] = "F",

84 [
KEY_G
] = "G", [
KEY_H
] = "H",

85 [
KEY_J
] = "J", [
KEY_K
] = "K",

86 [
KEY_L
] = "L", [
KEY_SEMICOLON
] = "Semicolon",

87 [
KEY_APOSTROPHE
] = "Apo°r›he", [
KEY_GRAVE
] = "Grave",

88 [
KEY_LEFTSHIFT
] = "Le·Shi·", [
KEY_BACKSLASH
] = "BackSlash",

89 [
KEY_Z
] = "Z", [
KEY_X
] = "X",

90 [
KEY_C
] = "C", [
KEY_V
] = "V",

91 [
KEY_B
] = "B", [
KEY_N
] = "N",

92 [
KEY_M
] = "M", [
KEY_COMMA
] = "Comma",

93 [
KEY_DOT
] = "DŸ", [
KEY_SLASH
] = "Slash",

94 [
KEY_RIGHTSHIFT
] = "RightShi·", [
KEY_KPASTERISK
] = "KPAsterisk",

95 [
KEY_LEFTALT
] = "Le·A…", [
KEY_SPACE
] = "Space",

96 [
KEY_CAPSLOCK
] = "C≠sLock", [
KEY_F1
] = "F1",

97 [
KEY_F2
] = "F2", [
KEY_F3
] = "F3",

98 [
KEY_F4
] = "F4", [
KEY_F5
] = "F5",

99 [
KEY_F6
] = "F6", [
KEY_F7
] = "F7",

100 [
KEY_F8
] = "F8", [
KEY_F9
] = "F9",

101 [
KEY_F10
] = "F10", [
KEY_NUMLOCK
] = "NumLock",

102 [
KEY_SCROLLLOCK
] = "S¸ﬁlLock", [
KEY_KP7
] = "KP7",

103 [
KEY_KP8
] = "KP8", [
KEY_KP9
] = "KP9",

104 [
KEY_KPMINUS
] = "KPMöus", [
KEY_KP4
] = "KP4",

105 [
KEY_KP5
] = "KP5", [
KEY_KP6
] = "KP6",

106 [
KEY_KPPLUS
] = "KPPlus", [
KEY_KP1
] = "KP1",

107 [
KEY_KP2
] = "KP2", [
KEY_KP3
] = "KP3",

108 [
KEY_KP0
] = "KP0", [
KEY_KPDOT
] = "KPDot",

109 [
KEY_ZENKAKUHANKAKU
] = "Zíkaku/H™kaku", [
KEY_102ND
] = "102nd",

110 [
KEY_F11
] = "F11", [
KEY_F12
] = "F12",

111 [
KEY_KPJPCOMMA
] = "KPJpComma", [
KEY_KPENTER
] = "KPEnter",

112 [
KEY_RIGHTCTRL
] = "RightCål", [
KEY_KPSLASH
] = "KPSlash",

113 [
KEY_SYSRQ
] = "SysRq", [
KEY_RIGHTALT
] = "RightAlt",

114 [
KEY_LINEFEED
] = "LöeFìd", [
KEY_HOME
] = "Home",

115 [
KEY_UP
] = "Up", [
KEY_PAGEUP
] = "PageUp",

116 [
KEY_LEFT
] = "Le·", [
KEY_RIGHT
] = "Right",

117 [
KEY_END
] = "End", [
KEY_DOWN
] = "Down",

118 [
KEY_PAGEDOWN
] = "PageDown", [
KEY_INSERT
] = "Insert",

119 [
KEY_DELETE
] = "Dñëe", [
KEY_MACRO
] = "Macro",

120 [
KEY_HELP
] = "Hñp", [
KEY_MENU
] = "Menu",

121 [
KEY_COFFEE
] = "Cof„e", [
KEY_DIRECTION
] = "Direction",

122 [
BTN_0
] = "Bä0", [
BTN_1
] = "Btn1",

123 [
BTN_2
] = "Bä2", [
BTN_3
] = "Btn3",

124 [
BTN_4
] = "Bä4", [
BTN_5
] = "Btn5",

125 [
BTN_6
] = "Bä6", [
BTN_7
] = "Btn7",

126 [
BTN_8
] = "Bä8", [
BTN_9
] = "Btn9",

127 [
BTN_LEFT
] = "Le·Bä", [
BTN_RIGHT
] = "RightBtn",

128 [
BTN_MIDDLE
] = "MiddÀBä", [
BTN_SIDE
] = "SideBtn",

129 [
BTN_EXTRA
] = "ExåaBä", [
BTN_FORWARD
] = "ForwardBtn",

130 [
BTN_BACK
] = "BackBä", [
BTN_TASK
] = "TaskBtn",

131 [
BTN_TRIGGER
] = "Triggî", [
BTN_THUMB
] = "ThumbBtn",

132 [
BTN_THUMB2
] = "ThumbBä2", [
BTN_TOP
] = "TopBtn",

133 [
BTN_TOP2
] = "T›Bä2", [
BTN_PINKIE
] = "PinkieBtn",

134 [
BTN_BASE
] = "Ba£Bä", [
BTN_BASE2
] = "BaseBtn2",

135 [
BTN_BASE3
] = "Ba£Bä3", [
BTN_BASE4
] = "BaseBtn4",

136 [
BTN_BASE5
] = "Ba£Bä5", [
BTN_BASE6
] = "BaseBtn6",

137 [
BTN_DEAD
] = "BäDód", [
BTN_A
] = "BtnA",

138 [
BTN_B
] = "BäB", [
BTN_C
] = "BtnC",

139 [
BTN_X
] = "BäX", [
BTN_Y
] = "BtnY",

140 [
BTN_Z
] = "BäZ", [
BTN_TL
] = "BtnTL",

141 [
BTN_TR
] = "BäTR", [
BTN_TL2
] = "BtnTL2",

142 [
BTN_TR2
] = "BäTR2", [
BTN_SELECT
] = "BtnSelect",

143 [
BTN_START
] = "BäSèπ", [
BTN_MODE
] = "BtnMode",

144 [
BTN_THUMBL
] = "BäThumbL", [
BTN_THUMBR
] = "BtnThumbR",

145 [
BTN_TOUCH
] = "Touch", [
BTN_STYLUS
] = "Stylus",

146 [
BTN_STYLUS2
] = "Stylus2", [
BTN_TOOL_DOUBLETAP
] = "Tool Doubletap",

147 [
BTN_TOOL_TRIPLETAP
] = "Toﬁ TrùÀèp", [
BTN_GEAR_DOWN
] = "WheelBtn",

148 [
BTN_GEAR_UP
] = "Gó∏up", [
KEY_OK
] = "Ok",

152 
	$ö_evdev_¥obe
(c⁄° 
ö_drv_t
 *
drv
)

154 
keybôs
[
KEY_CNT
 / () / 8];

155 
absbôs
[(
ABS_MAX
+1) / () / 8];

156 
i
;

160 
	`mem£t
(
keybôs
, 0, (keybits));

161 
	`mem£t
(
absbôs
, 0, (absbits));

163 
i
 = 0;; i++)

165 
suµ‹t
 = 0, 
cou¡
 = 0;

166 
u
, 
ªt
, 
fd
, 
kc_fú°
 = 
KEY_MAX
, 
kc_œ°
 = 0, 
have_abs
 = 0;

167 
ö_evdev_t
 *
dev
;

168 
«me
[64];

170 
	`¢¥ötf
(
«me
, “ame), "/dev/öput/evít%d", 
i
);

171 
fd
 = 
	`›í
(
«me
, 
O_RDONLY
|
O_NONBLOCK
);

172 i‡(
fd
 == -1) {

173 i‡(
î∫o
 =
EACCES
)

179 
ªt
 = 
	`io˘l
(
fd
, 
	`EVIOCGBIT
(0, (
suµ‹t
)), &support);

180 i‡(
ªt
 == -1) {

181 
	`¥ötf
("ö_evdev: io˘»Áûed o¿%s\n", 
«me
);

182 
skù
;

185 i‡(
suµ‹t
 & (1 << 
EV_KEY
)) {

186 
ªt
 = 
	`io˘l
(
fd
, 
	`EVIOCGBIT
(
EV_KEY
, (
keybôs
)), keybits);

187 i‡(
ªt
 == -1) {

188 
	`¥ötf
("ö_evdev: io˘»Áûed o¿%s\n", 
«me
);

189 
skù
;

193 
u
 = 0; u < 
KEY_CNT
; u++) {

194 i‡(
	`KEYBITS_BIT
(
u
)) {

195 i‡(
u
 < 
kc_fú°
)

196 
kc_fú°
 = 
u
;

197 i‡(
u
 > 
kc_œ°
)

198 
kc_œ°
 = 
u
;

199 i‡(
u
 !
KEY_POWER
 && u !
KEY_SLEEP
 && u !
BTN_TOUCH
)

200 
cou¡
++;

201 i‡(
u
 =
BTN_TOUCH
)

202 
skù
;

207 
dev
 = 
	`ˇŒoc
(1, (*dev));

208 i‡(
dev
 =
NULL
)

209 
skù
;

211 
dev
->
drv
 = drv;

213 
ªt
 = 
	`io˘l
(
fd
, 
	`EVIOCGKEY
((
keybôs
)), keybits);

214 i‡(
ªt
 == -1) {

215 
	`¥ötf
("Warning: EVIOCGKEYÇot supported, will haveÅoÅrack state\n");

216 
dev
->
kbôs
 = 
	`ˇŒoc
(
KEY_CNT
, ());

217 i‡(
dev
->
kbôs
 =
NULL
) {

218 
	`‰ì
(
dev
);

219 
skù
;

224 i‡(
suµ‹t
 & (1 << 
EV_ABS
)) {

225 
öput_absöfo
 
aöfo
;

226 
di°
;

227 
ªt
 = 
	`io˘l
(
fd
, 
	`EVIOCGBIT
(
EV_ABS
, (
absbôs
)),ábsbits);

228 i‡(
ªt
 == -1)

229 
no_abs
;

230 i‡(
absbôs
[0] & (1 << 
ABS_X
)) {

231 
ªt
 = 
	`io˘l
(
fd
, 
	`EVIOCGABS
(
ABS_X
), &
aöfo
);

232 i‡(
ªt
 == -1)

233 
no_abs
;

234 
di°
 = 
aöfo
.
maximum
 -áöfo.
möimum
;

235 
dev
->
abs_lz⁄e
 = 
di°
 / 4;

236 
dev
->
abs_mö_x
 = 
aöfo
.
möimum
;

237 
dev
->
abs_max_x
 = 
aöfo
.
maximum
;

239 i‡(
absbôs
[0] & (1 << 
ABS_Y
)) {

240 
ªt
 = 
	`io˘l
(
fd
, 
	`EVIOCGABS
(
ABS_Y
), &
aöfo
);

241 i‡(
ªt
 == -1)

242 
no_abs
;

243 
di°
 = 
aöfo
.
maximum
 -áöfo.
möimum
;

244 
dev
->
abs_mö_y
 = 
aöfo
.
möimum
;

245 
dev
->
abs_max_y
 = 
aöfo
.
maximum
;

247 
u
 = 0; u < 
MAX_ABS_DEVS
; u++) {

248 
ªt
 = 
	`io˘l
(
fd
, 
	`EVIOCGABS
(
u
), &
aöfo
);

249 i‡(
ªt
 == -1)

251 
di°
 = 
aöfo
.
maximum
 -áöfo.
möimum
;

252 i‡(
di°
 != 0)

253 
dev
->
abs_mu…
[
u
] = 
IN_ABS_RANGE
 * 2 * 65536 / 
di°
;

254 
dev
->
abs_adj
[
u
] = -(
aöfo
.
maximum
 +áöfo.
möimum
 + 1) / 2;

255 
have_abs
 = 1;

257 
dev
->
abs_cou¡
 = 
u
;

260 
no_abs
:

261 i‡(
cou¡
 =0 && !
have_abs
) {

262 
	`‰ì
(
dev
);

263 
skù
;

266 
dev
->
fd
 = fd;

267 
dev
->
kc_fú°
 = kc_first;

268 
dev
->
kc_œ°
 = kc_last;

269 i‡(
cou¡
 > 0 || 
ö_evdev_Ælow_abs_⁄ly
)

270 
dev
->
abs_to_digôÆ
 = 1;

271 
	`°r˝y
(
«me
, 
IN_EVDEV_PREFIX
);

272 
	`io˘l
(
fd
, 
	`EVIOCGNAME
((
«me
)-6),Çame+6);

273 
	`¥ötf
("in_evdev: found \"%s\" with %dÉvents (type %08x)\n",

274 
«me
+6, 
cou¡
, 
suµ‹t
);

275 
	`ö_ªgi°î
(
«me
, 
fd
, 
dev
, 
KEY_CNT
, 
ö_evdev_keys
, 0);

278 
skù
:

279 
	`˛o£
(
fd
);

281 
	}
}

283 
	$ö_evdev_‰ì
(*
drv_d©a
)

285 
ö_evdev_t
 *
dev
 = 
drv_d©a
;

286 i‡(
dev
 =
NULL
)

288 
	`˛o£
(
dev
->
fd
);

289 
	`‰ì
(
dev
);

290 
	}
}

293 
	$ö_evdev_gë_key_«mes
(c⁄° 
ö_drv_t
 *
drv
, *
cou¡
)

295 c⁄° 
ö_pd©a
 *
pd©a
 = 
drv
->pdata;

296 *
cou¡
 = 
KEY_CNT
;

298 i‡(
pd©a
->
key_«mes
)

299  
pd©a
->
key_«mes
;

300  
ö_evdev_keys
;

301 
	}
}

303 
	$‹_böds
(c⁄° *
böds
, 
key
, *
ªsu…
)

305 
t
;

306 
t
 = 0;Å < 
IN_BINDTYPE_COUNT
;Å++)

307 
ªsu…
[
t
] |
böds
[
	`IN_BIND_OFFS
(
key
,Å)];

308 
	}
}

312 
	$ö_evdev_upd©e
(*
drv_d©a
, c⁄° *
böds
, *
ªsu…
)

314 
öput_evít
 
ev
[16];

315 
öput_absöfo
 
aöfo
;

316 
keybôs_
[
KEY_CNT
 / ()];

317 *
keybôs
 = 
keybôs_
;

318 
ö_evdev_t
 *
dev
 = 
drv_d©a
;

319 
rd
, 
ªt
, 
u
, 
lz⁄e
;

321 i‡(
dev
->
kbôs
 =
NULL
) {

322 
ªt
 = 
	`io˘l
(
dev
->
fd
, 
	`EVIOCGKEY
((
keybôs_
)), keybits_);

323 i‡(
ªt
 == -1) {

324 
	`≥º‹
("in_evdev: ioctl failed");

329 
keybôs
 = 
dev
->
kbôs
;

331 
rd
 = 
	`ªad
(
dev
->
fd
, 
ev
, (ev));

332 i‡(
rd
 < ()(
ev
[0])) {

333 i‡(
î∫o
 !
EAGAIN
)

334 
	`≥º‹
("in_evdev:Ñead failed");

337 
u
 = 0; u < 
rd
 / (
ev
[0]); u++) {

338 i‡(
ev
[
u
].
ty≥
 !
EV_KEY
)

340 i‡(
ev
[
u
].
vÆue
 == 1)

341 
	`KEYBITS_BIT_SET
(
ev
[
u
].
code
);

342 i‡(
ev
[
u
].
vÆue
 == 0)

343 
	`KEYBITS_BIT_CLEAR
(
ev
[
u
].
code
);

348 
u
 = 
dev
->
kc_fú°
; u <dev->
kc_œ°
; u++) {

349 i‡(
	`KEYBITS_BIT
(
u
))

350 
	`‹_böds
(
böds
, 
u
, 
ªsu…
);

354 
lz⁄e
 = 
dev
->
abs_lz⁄e
;

355 i‡(
dev
->
abs_to_digôÆ
 && 
lz⁄e
 != 0) {

356 
ªt
 = 
	`io˘l
(
dev
->
fd
, 
	`EVIOCGABS
(
ABS_X
), &
aöfo
);

357 i‡(
ªt
 != -1) {

358 i‡(
aöfo
.
vÆue
 < 
dev
->
abs_mö_x
 + 
lz⁄e
Ë
	`‹_böds
(
böds
, 
KEY_LEFT
, 
ªsu…
);

359 i‡(
aöfo
.
vÆue
 > 
dev
->
abs_max_x
 - 
lz⁄e
Ë
	`‹_böds
(
böds
, 
KEY_RIGHT
, 
ªsu…
);

361 
ªt
 = 
	`io˘l
(
dev
->
fd
, 
	`EVIOCGABS
(
ABS_Y
), &
aöfo
);

362 i‡(
ªt
 != -1) {

363 i‡(
aöfo
.
vÆue
 < 
dev
->
abs_mö_y
 + 
lz⁄e
Ë
	`‹_böds
(
böds
, 
KEY_UP
, 
ªsu…
);

364 i‡(
aöfo
.
vÆue
 > 
dev
->
abs_max_y
 - 
lz⁄e
Ë
	`‹_böds
(
böds
, 
KEY_DOWN
, 
ªsu…
);

369 
	}
}

371 
	$ö_evdev_upd©e_™Æog
(*
drv_d©a
, 
axis_id
, *
ªsu…
)

373 
öput_absöfo
 
aöfo
;

374 
ö_evdev_t
 *
dev
 = 
drv_d©a
;

375 
ªt
;

377 i‡(()
axis_id
 >
MAX_ABS_DEVS
)

380 
ªt
 = 
	`io˘l
(
dev
->
fd
, 
	`EVIOCGABS
(
axis_id
), &
aöfo
);

381 i‡(
ªt
 != 0)

382  
ªt
;

384 *
ªsu…
 = (
aöfo
.
vÆue
 + 
dev
->
abs_adj
[
axis_id
]Ë* dev->
abs_mu…
[axis_id];

385 *
ªsu…
 >>= 16;

387 
	}
}

389 
	$ö_evdev_£t_blockög
(
ö_evdev_t
 *
dev
, 
y
)

391 
Êags
;

392 
ªt
;

394 
Êags
 = ()
	`f˙é
(
dev
->
fd
, 
F_GETFL
);

395 i‡(()
Êags
 == -1) {

396 
	`≥º‹
("in_evdev: F_GETFL fcntl failed");

400 i‡(
Êags
 & 
O_NONBLOCK
) {

402 
öput_evít
 
ev
;

404 
ªt
 = 
	`ªad
(
dev
->
fd
, &
ev
, (ev));

406 
ªt
 =(
ev
));

409 i‡(
y
)

410 
Êags
 &~
O_NONBLOCK
;

412 
Êags
 |
O_NONBLOCK
;

413 
ªt
 = 
	`f˙é
(
dev
->
fd
, 
F_SETFL
, 
Êags
);

414 i‡(
ªt
 == -1) {

415 
	`≥º‹
("in_evdev: F_SETFL fcntl failed");

420 
	}
}

422 
	$ö_evdev_gë_c⁄fig
(*
drv_d©a
, 
wh©
, *
vÆ
)

424 
ö_evdev_t
 *
dev
 = 
drv_d©a
;

426 
wh©
) {

427 
IN_CFG_ABS_AXIS_COUNT
:

428 *
vÆ
 = 
dev
->
abs_cou¡
;

435 
	}
}

437 
	$ö_evdev_£t_c⁄fig
(*
drv_d©a
, 
wh©
, 
vÆ
)

439 
ö_evdev_t
 *
dev
 = 
drv_d©a
;

440 
tmp
;

442 
wh©
) {

443 
IN_CFG_BLOCKING
:

444  
	`ö_evdev_£t_blockög
(
dev
, 
vÆ
);

445 
IN_CFG_ABS_DEAD_ZONE
:

446 i‡(
vÆ
 < 1 || vÆ > 99 || 
dev
->
abs_lz⁄e
 == 0)

449 
tmp
 = (
dev
->
abs_max_x
 - dev->
abs_mö_x
) / 2;

450 
dev
->
abs_lz⁄e
 = 
tmp
 -Åm∞* 
vÆ
 / 100;

451 i‡(
dev
->
abs_lz⁄e
 < 1)

452 
dev
->
abs_lz⁄e
 = 1;

453 i‡(
dev
->
abs_lz⁄e
 >
tmp
)

454 
dev
->
abs_lz⁄e
 = 
tmp
 - 1;

461 
	}
}

463 
	$ö_evdev_upd©e_keycode
(*
d©a
, *
is_down
)

465 
ªt_kc
 = -1, 
ªt_down
 = 0;

466 
ö_evdev_t
 *
dev
 = 
d©a
;

467 
öput_evít
 
ev
;

468 
rd
;

472 
rd
 = 
	`ªad
(
dev
->
fd
, &
ev
, (ev));

473 i‡(
rd
 < (Ë(
ev
)) {

474 i‡(
î∫o
 !
EAGAIN
) {

475 
	`≥º‹
("in_evdev:ÉrrorÑeading");

477 
ªt_kc
 = -2;

479 
out
;

482 i‡(
ev
.
ty≥
 =
EV_KEY
) {

483 i‡(
ev
.
vÆue
 < 0 ||Év.value > 1)

484 
out
;

485 
ªt_kc
 = 
ev
.
code
;

486 
ªt_down
 = 
ev
.
vÆue
;

487 
out
;

489 i‡(
ev
.
ty≥
 =
EV_ABS
 && 
dev
->
abs_to_digôÆ
)

491 
lz⁄e
 = 
dev
->
abs_lz⁄e
, 
down
 = 0, *
œ°
;

494 i‡(
lz⁄e
 !0 && 
ev
.
code
 =
ABS_X
) {

495 i‡(
ev
.
vÆue
 < 
dev
->
abs_mö_x
 + 
lz⁄e
)

496 
down
 = 
KEY_LEFT
;

497 i‡(
ev
.
vÆue
 > 
dev
->
abs_max_x
 - 
lz⁄e
)

498 
down
 = 
KEY_RIGHT
;

499 
œ°
 = &
dev
->
abs_œ°x
;

501 i‡(
lz⁄e
 !0 && 
ev
.
code
 =
ABS_Y
) {

502 i‡(
ev
.
vÆue
 < 
dev
->
abs_mö_y
 + 
lz⁄e
)

503 
down
 = 
KEY_UP
;

504 i‡(
ev
.
vÆue
 > 
dev
->
abs_max_y
 - 
lz⁄e
)

505 
down
 = 
KEY_DOWN
;

506 
œ°
 = &
dev
->
abs_œ°y
;

509 
out
;

511 i‡(
down
 =*
œ°
)

512 
out
;

514 i‡(
down
 =0 || *
œ°
 != 0) {

516 
ªt_kc
 = *
œ°
;

517 
ªt_down
 = 0;

518 *
œ°
 = 0;

519 
out
;

521 
ªt_kc
 = *
œ°
 = 
down
;

522 
ªt_down
 = 1;

523 
out
;

526 
out
:

527 i‡(
is_down
 !
NULL
)

528 *
is_down
 = 
ªt_down
;

530  
ªt_kc
;

531 
	}
}

533 
	$ö_evdev_míu_å™¶©e
(*
drv_d©a
, 
keycode
, *
ch¨code
)

535 
ö_evdev_t
 *
dev
 = 
drv_d©a
;

536 c⁄° 
ö_pd©a
 *
pd©a
 = 
dev
->
drv
->pdata;

537 
ªt
 = 0;

538 
i
;

540 i‡(
keycode
 < 0)

543 
keycode
 = -keycode;

544 
i
 = 0; i < 
pd©a
->
km≠_size
; i++)

545 i‡(
pd©a
->
key_m≠
[
i
].
pbä
 =
keycode
) {

546 
k
 = 
pd©a
->
key_m≠
[
i
].
key
;

548 i‡(
dev
->
kc_fú°
 <
k
 && k <dev->
kc_œ°
)

549  
k
;

554 
i
 = 0; i < 
pd©a
->
km≠_size
; i++) {

555 i‡(
pd©a
->
key_m≠
[
i
].
key
 =
keycode
) {

556 
ªt
 = 
pd©a
->
key_m≠
[
i
].
pbä
;

561 i‡(
ch¨code
 !
NULL
 && ()
keycode
 < 
KEY_CNT
 &&

562 
ö_evdev_keys
[
keycode
] !
NULL
 && in_evdev_keys[keycode][1] == 0)

564 
c
 = 
ö_evdev_keys
[
keycode
][0];

565 i‡('A' <
c
 && c <= 'Z')

566 
c
 = 'a' + c - 'A';

567 
ªt
 |
PBTN_CHAR
;

568 *
ch¨code
 = 
c
;

572  
ªt
;

573 
	}
}

576 
	$ö_evdev_˛ón_böds
(*
drv_d©a
, *
böds
, *
def_böds
)

578 
keybôs
[
KEY_CNT
 / ()];

579 
ö_evdev_t
 *
dev
 = 
drv_d©a
;

580 
i
, 
t
, 
ªt
, 
offs
, 
cou¡
 = 0;

582 
	`mem£t
(
keybôs
, 0, (keybits));

583 
ªt
 = 
	`io˘l
(
dev
->
fd
, 
	`EVIOCGBIT
(
EV_KEY
, (
keybôs
)), keybits);

584 i‡(
ªt
 == -1) {

585 
	`≥º‹
("in_evdev: ioctl failed");

589 i‡(
dev
->
abs_to_digôÆ
 && dev->
abs_lz⁄e
 != 0) {

590 
	`KEYBITS_BIT_SET
(
KEY_LEFT
);

591 
	`KEYBITS_BIT_SET
(
KEY_RIGHT
);

592 
	`KEYBITS_BIT_SET
(
KEY_UP
);

593 
	`KEYBITS_BIT_SET
(
KEY_DOWN
);

596 
i
 = 0; i < 
KEY_CNT
; i++) {

597 
t
 = 0;Å < 
IN_BINDTYPE_COUNT
;Å++) {

598 
offs
 = 
	`IN_BIND_OFFS
(
i
, 
t
);

599 i‡(!
	`KEYBITS_BIT
(
i
))

600 
böds
[
offs
] = 
def_böds
[offs] = 0;

601 i‡(
böds
[
offs
])

602 
cou¡
++;

606  
cou¡
;

607 
	}
}

609 c⁄° 
ö_drv_t
 
	gö_evdev_drv
 = {

610 .
¥efix
 = 
IN_EVDEV_PREFIX
,

611 .
	g¥obe
 = 
ö_evdev_¥obe
,

612 .
	g‰ì
 = 
ö_evdev_‰ì
,

613 .
	ggë_key_«mes
 = 
ö_evdev_gë_key_«mes
,

614 .
	g˛ón_böds
 = 
ö_evdev_˛ón_böds
,

615 .
	ggë_c⁄fig
 = 
ö_evdev_gë_c⁄fig
,

616 .
	g£t_c⁄fig
 = 
ö_evdev_£t_c⁄fig
,

617 .
	gupd©e
 = 
ö_evdev_upd©e
,

618 .
	gupd©e_™Æog
 = 
ö_evdev_upd©e_™Æog
,

619 .
	gupd©e_keycode
 = 
ö_evdev_upd©e_keycode
,

620 .
	gmíu_å™¶©e
 = 
ö_evdev_míu_å™¶©e
,

623 
	$ö_evdev_öô
(c⁄° 
ö_pd©a
 *
pd©a
)

625 i‡(!
pd©a
) {

626 
	`Ârötf
(
°dîr
, "in_sdl: Missing inputÖlatform data\n");

630 
	`ö_ªgi°î_drivî
(&
ö_evdev_drv
, 
pd©a
->
defböds
,Ödata);

632 
	}
}

	@frontend/libpicofe/linux/in_evdev.h

1 
ö_evdev_Ælow_abs_⁄ly
;

3 
ö_evdev_öô
(c⁄° 
ö_pd©a
 *
pd©a
);

	@frontend/libpicofe/linux/plat.c

12 
	#_GNU_SOURCE
 1

	)

13 
	~<°dio.h
>

14 
	~<°rög.h
>

15 
	~<°d¨g.h
>

16 
	~<dúít.h
>

17 
	~<sys/time.h
>

18 
	~<time.h
>

19 
	~<uni°d.h
>

20 
	~<sys/mm™.h
>

21 
	~<î∫o.h
>

22 
	~<sys/°©.h
>

24 
	~"../∂©.h
"

27 
	#HUGETLB_PAGESIZE
 (2 * 1024 * 1024)

	)

28 
	#HUGETLB_THRESHOLD
 (
HUGETLB_PAGESIZE
 / 2)

	)

29 #i‚de‡
MAP_HUGETLB


30 
	#MAP_HUGETLB
 0x40000

	)

34 
	$∂©_is_dú
(c⁄° *
∑th
)

36 
DIR
 *
dú
;

37 i‡((
dú
 = 
	`›ídú
(
∑th
))) {

38 
	`˛o£dú
(
dú
);

42 
	}
}

44 
	$∂©_gë_d©a_dú
(*
d°
, 
Àn
)

46 #ifde‡
PICO_DATA_DIR


47 
	`mem˝y
(
d°
, 
PICO_DATA_DIR
,  PICO_DATA_DIR);

48  (
PICO_DATA_DIR
) - 1;

50 
j
, 
ªt
 = 
	`ªadlök
("/¥oc/£lf/exe", 
d°
, 
Àn
 - 1);

51 i‡(
ªt
 < 0) {

52 
	`≥º‹
("readlink");

53 
ªt
 = 0;

55 
d°
[
ªt
] = 0;

57 
j
 = 
ªt
 - 1; j > 0; j--)

58 i‡(
d°
[
j
] == '/') {

59 
d°
[++
j
] = 0;

62  
j
;

64 
	}
}

66 
	$∂©_gë_skö_dú
(*
d°
, 
Àn
)

68 
ªt
 = 
	`∂©_gë_d©a_dú
(
d°
, 
Àn
);

69 i‡(
ªt
 < 0)

70  
ªt
;

72 
	`mem˝y
(
d°
 + 
ªt
, "skin/",  "skin/");

73  
ªt
 + ("skin/") - 1;

74 
	}
}

76 #i‚de‡
PICO_HOME_DIR


77 
	#PICO_HOME_DIR
 "/.picodrive/"

	)

79 
	$∂©_gë_roŸ_dú
(*
d°
, 
Àn
)

81 #i‡!
	`deföed
(
__GP2X__
Ë&& !deföed(
PANDORA
)

82 c⁄° *
home
 = 
	`gëív
("HOME");

83 
ªt
;

85 i‡(
home
 !
NULL
) {

86 
ªt
 = 
	`¢¥ötf
(
d°
, 
Àn
, "%s%s", 
home
, 
PICO_HOME_DIR
);

87 i‡(
ªt
 >
Àn
)

88 
ªt
 = 
Àn
 - 1;

89 
	`mkdú
(
d°
, 0755);

90  
ªt
;

93  
	`∂©_gë_d©a_dú
(
d°
, 
Àn
);

94 
	}
}

96 #ifde‡
__GP2X__


98 
	#∂©_gë_ticks_ms
 
∂©_gë_ticks_ms_good


	)

99 
	#∂©_gë_ticks_us
 
∂©_gë_ticks_us_good


	)

102 
	$∂©_gë_ticks_ms
()

104 
timevÆ
 
tv
;

105 
ªt
;

107 
	`gëtimeofday
(&
tv
, 
NULL
);

109 
ªt
 = ()
tv
.
tv_£c
 * 1000;

111 
ªt
 +(()
tv
.
tv_u£c
 * 4195) >> 22;

113  
ªt
;

114 
	}
}

116 
	$∂©_gë_ticks_us
()

118 
timevÆ
 
tv
;

119 
ªt
;

121 
	`gëtimeofday
(&
tv
, 
NULL
);

123 
ªt
 = ()
tv
.
tv_£c
 * 1000000;

124 
ªt
 +()
tv
.
tv_u£c
;

126  
ªt
;

127 
	}
}

129 
	$∂©_¶ìp_ms
(
ms
)

131 
	`u¶ìp
(
ms
 * 1000);

132 
	}
}

134 
	$∂©_waô_evít
(*
fds_hnds
, 
cou¡
, 
timeout_ms
)

136 
timevÆ
 
tv
, *
timeout
 = 
NULL
;

137 
i
, 
ªt
, 
fdmax
 = -1;

138 
fd_£t
 
fd£t
;

140 i‡(
timeout_ms
 >= 0) {

141 
tv
.
tv_£c
 = 
timeout_ms
 / 1000;

142 
tv
.
tv_u£c
 = (
timeout_ms
 % 1000) * 1000;

143 
timeout
 = &
tv
;

146 
	`FD_ZERO
(&
fd£t
);

147 
i
 = 0; i < 
cou¡
; i++) {

148 i‡(
fds_hnds
[
i
] > 
fdmax
) fdmax = fds_hnds[i];

149 
	`FD_SET
(
fds_hnds
[
i
], &
fd£t
);

152 
ªt
 = 
	`£À˘
(
fdmax
 + 1, &
fd£t
, 
NULL
, NULL, 
timeout
);

153 i‡(
ªt
 == -1)

155 
	`≥º‹
("plat_wait_event: select failed");

156 
	`¶ìp
(1);

160 i‡(
ªt
 == 0)

163 
ªt
 = -1;

164 
i
 = 0; i < 
cou¡
; i++)

165 i‡(
	`FD_ISSET
(
fds_hnds
[
i
], &
fd£t
))

166 
ªt
 = 
fds_hnds
[
i
];

168  
ªt
;

169 
	}
}

171 *
	$∂©_mm≠
(
addr
, 
size_t
 
size
, 
√ed_exec
, 
is_fixed
)

173 
hugëlb_w¨√d
;

174 
¥Ÿ
 = 
PROT_READ
 | 
PROT_WRITE
;

175 
Êags
 = 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
;

176 *
ªq
, *
ªt
;

178 
ªq
 = (*)
addr
;

179 i‡(
√ed_exec
)

180 
¥Ÿ
 |
PROT_EXEC
;

185 i‡(
size
 >
HUGETLB_THRESHOLD
)

186 
Êags
 |
MAP_HUGETLB
;

188 
ªt
 = 
	`mm≠
(
ªq
, 
size
, 
¥Ÿ
, 
Êags
, -1, 0);

189 i‡(
ªt
 =
MAP_FAILED
 && (
Êags
 & 
MAP_HUGETLB
)) {

190 i‡(!
hugëlb_w¨√d
) {

191 
	`Ârötf
(
°dîr
,

193 
ªq
, 
size
, 
î∫o
);

194 
hugëlb_w¨√d
 = 1;

196 
Êags
 &~
MAP_HUGETLB
;

197 
ªt
 = 
	`mm≠
(
ªq
, 
size
, 
¥Ÿ
, 
Êags
, -1, 0);

199 i‡(
ªt
 =
MAP_FAILED
)

200  
NULL
;

202 i‡(
ªq
 !
NULL
 && 
ªt
 !=Ñeq) {

203 
	`Ârötf
(
°dîr
, "%s: mmapedÅo %p,Ñequested %p\n",

204 
is_fixed
 ? "îr‹" : "w¨nög", 
ªt
, 
ªq
);

205 i‡(
is_fixed
) {

206 
	`munm≠
(
ªt
, 
size
);

207  
NULL
;

211  
ªt
;

212 
	}
}

214 *
	$∂©_mªm≠
(*
±r
, 
size_t
 
ﬁdsize
, size_à
√wsize
)

216 *
ªt
;

218 
ªt
 = 
	`mªm≠
(
±r
, 
ﬁdsize
, 
√wsize
, 
MREMAP_MAYMOVE
);

219 i‡(
ªt
 =
MAP_FAILED
)

220  
NULL
;

221 i‡(
ªt
 !
±r
)

222 
	`¥ötf
("w¨nög: mªm≠ moved: %∞-> %p\n", 
±r
, 
ªt
);

224  
ªt
;

225 
	}
}

227 
	$∂©_munm≠
(*
±r
, 
size_t
 
size
)

229 
ªt
;

231 
ªt
 = 
	`munm≠
(
±r
, 
size
);

232 i‡(
ªt
 !0 && (
size
 & (
HUGETLB_PAGESIZE
 - 1))) {

234 
size
 = (sizê+ 
HUGETLB_PAGESIZE
 - 1) & ~(HUGETLB_PAGESIZE - 1);

235 
ªt
 = 
	`munm≠
(
±r
, 
size
);

237 i‡(
ªt
 != 0) {

238 
	`Ârötf
(
°dîr
,

239 "munm≠(%p, %zuËÁûed: %d\n", 
±r
, 
size
, 
î∫o
);

241 
	}
}

243 
	$∂©_mem_£t_exec
(*
±r
, 
size_t
 
size
)

245 
ªt
 = 
	`m¥Ÿe˘
(
±r
, 
size
, 
PROT_READ
 | 
PROT_WRITE
 | 
PROT_EXEC
);

246 i‡(
ªt
 != 0)

247 
	`Ârötf
(
°dîr
, "mprotect(%p, %zd) failed: %d\n",

248 
±r
, 
size
, 
î∫o
);

250  
ªt
;

251 
	}
}

254 
	$Õrötf
(c⁄° *
fmt
, ...)

256 
va_li°
 
vl
;

258 
	`va_°¨t
(
vl
, 
fmt
);

259 
	`v¥ötf
(
fmt
, 
vl
);

260 
	`va_íd
(
vl
);

261 
	}
}

	@frontend/libpicofe/linux/sndout_alsa.c

12 
	~<°dio.h
>

13 
	~<Æß/asoundlib.h
>

14 
	~<uni°d.h
>

16 
	~"¢dout_Æß.h
"

18 
	#PFX
 "¢dout_Æß: "

	)

20 
¢d_pcm_t
 *
	gh™dÀ
;

21 
¢d_pcm_u‰ames_t
 
	gbuf„r_size
, 
	g≥riod_size
;

22 *
	gsûít_≥riod
;

23 
	gch™√ls
;

24 
	gÁûuª_cou¡î
;

26 
	$¢dout_Æß_öô
()

28 
ªt
;

30 
ªt
 = 
	`¢d_pcm_›í
(&
h™dÀ
, "deÁu…", 
SND_PCM_STREAM_PLAYBACK
, 0);

31 i‡(
ªt
 != 0)

35 
	}
}

37 
	$¢dout_Æß_°¨t
(
øã_
, 
°îeo
)

39 
¢d_pcm_hw_∑øms_t
 *
hw∑øms
 = 
NULL
;

40 
øã
 = 
øã_
;

41 
ßm∂es
, 
shi·
;

42 
ªt
;

44 
ßm∂es
 = 
øã
 * 40 / 1000;

45 
shi·
 = 8; (1 << shi·Ë< 
ßm∂es
; shift++)

47 
≥riod_size
 = 1 << 
shi·
;

48 
buf„r_size
 = 8 * 
≥riod_size
;

50 
	`¢d_pcm_hw_∑øms_Æloˇ
(&
hw∑øms
);

52 
ªt
 = 
	`¢d_pcm_hw_∑øms_™y
(
h™dÀ
, 
hw∑øms
);

53 
ªt
 |
	`¢d_pcm_hw_∑øms_£t_ac˚ss
(
h™dÀ
, 
hw∑øms
, 
SND_PCM_ACCESS_RW_INTERLEAVED
);

54 
ªt
 |
	`¢d_pcm_hw_∑øms_£t_f‹m©
(
h™dÀ
, 
hw∑øms
, 
SND_PCM_FORMAT_S16_LE
);

55 
ªt
 |
	`¢d_pcm_hw_∑øms_£t_ch™√ls
(
h™dÀ
, 
hw∑øms
, 
°îeo
 ? 2 : 1);

56 
ªt
 |
	`¢d_pcm_hw_∑øms_£t_øã_√¨
(
h™dÀ
, 
hw∑øms
, &
øã
, 0);

57 
ªt
 |
	`¢d_pcm_hw_∑øms_£t_buf„r_size_√¨
(
h™dÀ
, 
hw∑øms
, &
buf„r_size
);

58 
ªt
 |
	`¢d_pcm_hw_∑øms_£t_≥riod_size_√¨
(
h™dÀ
, 
hw∑øms
, &
≥riod_size
, 
NULL
);

60 i‡(
ªt
 != 0) {

61 
	`Ârötf
(
°dîr
, 
PFX
 "failedÅo set hwparams\n");

62 
Áû
;

65 
ªt
 = 
	`¢d_pcm_hw_∑øms
(
h™dÀ
, 
hw∑øms
);

66 i‡(
ªt
 != 0) {

67 
	`Ârötf
(
°dîr
, 
PFX
 "ÁûedÅÿ≠∂y hw∑øms: %d\n", 
ªt
);

68 
Áû
;

71 
	`¢d_pcm_hw_∑øms_gë_buf„r_size
(
hw∑øms
, &
buf„r_size
);

72 
	`¢d_pcm_hw_∑øms_gë_≥riod_size
(
hw∑øms
, &
≥riod_size
, 
NULL
);

73 
	`¢d_pcm_hw_∑øms_gë_ch™√ls
(
hw∑øms
, &
ch™√ls
);

75 
sûít_≥riod
 = 
	`ˇŒoc
(
≥riod_size
 * 
ch™√ls
, 2);

77 
ªt
 = 
	`¢d_pcm_¥ï¨e
(
h™dÀ
);

78 i‡(
ªt
 != 0) {

79 
	`Ârötf
(
°dîr
, 
PFX
 "¢d_pcm_¥ï¨êÁûed: %d\n", 
ªt
);

80 
Áû
;

83 
ªt
 = 
	`¢d_pcm_°¨t
(
h™dÀ
);

84 i‡(
ªt
 != 0) {

85 
	`Ârötf
(
°dîr
, 
PFX
 "¢d_pcm_°¨àÁûed: %d\n", 
ªt
);

86 
Áû
;

89 
Áûuª_cou¡î
 = 0;

93 
Áû
:

95 
	`fÊush
(
°dout
);

96 
	`fÊush
(
°dîr
);

98 
	}
}

100 
	$¢dout_Æß_°›
()

102 
ªt
 = 
	`¢d_pcm_dr›
(
h™dÀ
);

103 i‡(
ªt
 != 0)

104 
	`Ârötf
(
°dîr
, 
PFX
 "¢d_pcm_dr› faûed: %d\n", 
ªt
);

106 
	`‰ì
(
sûít_≥riod
);

107 
sûít_≥riod
 = 
NULL
;

108 
	}
}

110 
	$¢dout_Æß_waô
()

112 
¢d_pcm_s‰ames_t
 
À·
;

116 
À·
 = 
	`¢d_pcm_avaû
(
h™dÀ
);

117 i‡(
À·
 < 0 ||Üe· >
buf„r_size
 / 2)

120 
	`u¶ìp
(4000);

122 
	}
}

124 
	$¢dout_Æß_wrôe_nb
(c⁄° *
ßm∂es
, 
Àn
)

126 
¢d_pcm_s‰ames_t
 
À·
;

127 
ªt
;

129 
Àn
 /= 2;

130 i‡(
ch™√ls
 == 2)

131 
Àn
 /= 2;

133 
À·
 = 
	`¢d_pcm_avaû
(
h™dÀ
);

134 i‡(
À·
 >0 &&Üe· < 
Àn
)

137 
ªt
 = 
	`¢d_pcm_wrôei
(
h™dÀ
, 
ßm∂es
, 
Àn
);

138 i‡(
ªt
 < 0) {

139 
ªt
 = 
	`¢d_pcm_ªcovî
(
h™dÀ
,Ñet, 1);

140 i‡(
ªt
 !0 && 
Áûuª_cou¡î
++ < 5)

141 
	`Ârötf
(
°dîr
, 
PFX
 "¢d_pcm_ªcovî: %d\n", 
ªt
);

143 i‡(
sûít_≥riod
)

144 
	`¢d_pcm_wrôei
(
h™dÀ
, 
sûít_≥riod
, 
≥riod_size
);

145 
	`¢d_pcm_wrôei
(
h™dÀ
, 
ßm∂es
, 
Àn
);

148  
Àn
;

149 
	}
}

151 
	$¢dout_Æß_exô
()

153 
	`¢d_pcm_˛o£
(
h™dÀ
);

154 
h™dÀ
 = 
NULL
;

155 
	}
}

	@frontend/libpicofe/linux/sndout_alsa.h

2 
¢dout_Æß_öô
();

3 
¢dout_Æß_°¨t
(
øã
, 
°îeo
);

4 
¢dout_Æß_°›
();

5 
¢dout_Æß_waô
();

6 
¢dout_Æß_wrôe_nb
(c⁄° *
ßm∂es
, 
Àn
);

7 
¢dout_Æß_exô
();

	@frontend/libpicofe/linux/sndout_oss.c

13 
	~<°dio.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<sys/°©.h
>

16 
	~<f˙é.h
>

17 
	~<sys/io˘l.h
>

18 
	~<sys/soundˇrd.h
>

19 
	~<uni°d.h
>

21 
	~"¢dout_oss.h
"

23 
	g¢dout_oss_‰ag_‰ames
 = 1;

24 
	g¢dout_oss_ˇn_ª°¨t
 = 1;

26 
	gsounddev
 = -1, 
	gmixîdev
 = -1;

27 
	gˇn_wrôe_ß„
;

29 
	#FRAG_COUNT
 4

	)

31 
	$¢dout_oss_öô
()

33 i‡(
mixîdev
 >0Ë
	`˛o£
(mixerdev);

34 
mixîdev
 = 
	`›í
("/dev/mixî", 
O_RDWR
);

35 i‡(
mixîdev
 == -1)

37 
	`≥º‹
("open(\"/dev/mixer\")");

41 
	}
}

43 
	$¢dout_oss_°›
()

47 i‡(!
¢dout_oss_ˇn_ª°¨t
)

50 i‡(
sounddev
 < 0)

56 
	`˛o£
(
sounddev
);

57 
sounddev
 = -1;

58 
	}
}

60 
	$¢dout_oss_°¨t
(
øã
, 
°îeo
)

62 
s_ﬁdøã
 = 0, 
s_ﬁd°îeo
 = 0;

63 
‰ag
, 
bsize
, 
bôs
, 
ªt
;

67 i‡(
sounddev
 >0 && 
øã
 =
s_ﬁdøã
 && 
s_ﬁd°îeo
 =
°îeo
)

70 
	`¢dout_oss_°›
();

71 
sounddev
 = 
	`›í
("/dev/d•", 
O_WRONLY
);

72 i‡(
sounddev
 == -1)

74 
	`≥º‹
("open(\"/dev/dsp\")");

75 
sounddev
 = 
	`›í
("/dev/d•1", 
O_WRONLY
);

76 i‡(
sounddev
 == -1) {

77 
	`≥º‹
("open(\"/dev/dsp1\")");

86 
bsize
 = (
¢dout_oss_‰ag_‰ames
 * 
øã
 / 50) * 4;

88 
‰ag
 = 0; 
bsize
; bsize >>= 1, frag++)

91 
‰ag
 |
FRAG_COUNT
 << 16;

92 
ªt
 = 
	`io˘l
(
sounddev
, 
SNDCTL_DSP_SETFRAGMENT
, &
‰ag
);

93 i‡(
ªt
 < 0)

94 
	`≥º‹
("SNDCTL_DSP_SETFRAGMENT failed");

96 
bôs
 = 16;

97 
ªt
 = 
	`io˘l
(
sounddev
, 
SNDCTL_DSP_STEREO
, &
°îeo
);

98 i‡(
ªt
 == 0)

99 
ªt
 = 
	`io˘l
(
sounddev
, 
SNDCTL_DSP_SETFMT
, &
bôs
);

100 i‡(
ªt
 == 0)

101 
ªt
 = 
	`io˘l
(
sounddev
, 
SNDCTL_DSP_SPEED
, &
øã
);

102 i‡(
ªt
 < 0)

103 
	`≥º‹
("failedÅo setáudio format");

105 #ifde‡
__GP2X__


107 
	`u¶ìp
(192*1024);

110 
	`¥ötf
("sndout_oss_start: %d/%dbit/%s, %d buffers of %i bytes\n",

111 
øã
, 
bôs
, 
°îeo
 ? "°îeo" : "m⁄o", 
‰ag
 >> 16, 1 << (frag & 0xffff));

113 
s_ﬁdøã
 = 
øã
; 
s_ﬁd°îeo
 = 
°îeo
;

114 
ˇn_wrôe_ß„
 = 0;

116 
	}
}

118 
	$¢dout_oss_wrôe
(c⁄° *
buff
, 
Àn
)

120  
	`wrôe
(
sounddev
, 
buff
, 
Àn
);

121 
	}
}

123 
	~"../∂©.h
"

127 
	$¢dout_oss_wrôe_nb
(c⁄° *
buff
, 
Àn
)

129 
œg_cou¡î
, 
skù_cou¡î
;

130 
t
;

131 
ªt
;

133 i‡(
œg_cou¡î
 > 2) {

135 
œg_cou¡î
 = 0;

136 
skù_cou¡î
 = 
FRAG_COUNT
;

139 i‡(
skù_cou¡î
 > 0) {

140 
skù_cou¡î
--;

141  
Àn
;

144 
t
 = 
	`∂©_gë_ticks_ms
();

145 
ªt
 = 
	`¢dout_oss_wrôe
(
buff
, 
Àn
);

146 
t
 = 
	`∂©_gë_ticks_ms
() -Å;

147 i‡(
t
 > 1) {

149 
œg_cou¡î
++;

150 i‡(
œg_cou¡î
 > 2)

151 
	`¥ötf
("audiÿœg %u\n", 
t
);

154 
œg_cou¡î
 = 0;

156  
ªt
;

157 
	}
}

159 
	$¢dout_oss_ˇn_wrôe
(
byãs
)

161 
audio_buf_öfo
 
bi
;

162 
ªt
;

164 #ifde‡
__GP2X__


167 i‡(
ˇn_wrôe_ß„
++ < 8)

170 
ªt
 = 
	`io˘l
(
sounddev
, 
SNDCTL_DSP_GETOSPACE
, &
bi
);

171 i‡(
ªt
 < 0)

175  
bi
.
byãs
 - bi.
‰agsize
 >= bytes ? 1 : 0;

176 
	}
}

178 
	$¢dout_oss_waô
()

181 
	`io˘l
(
sounddev
, 
SOUND_PCM_SYNC
, 0);

182 
	}
}

184 
	$¢dout_oss_£tvﬁ
(
l
, 
r
)

186 i‡(
mixîdev
 < 0) ;

188 
l
ˆ<0?0:l;Üˆ>255?255:l; 
r
=r<0?0:r;Ñ=r>255?255:r;

189 
l
<<=8;Ü|=
r
;

190 
	`io˘l
(
mixîdev
, 
SOUND_MIXER_WRITE_PCM
, &
l
);

191 
	}
}

193 
	$¢dout_oss_exô
()

195 i‡(
sounddev
 >0Ë
	`˛o£
(sounddev); sounddev = -1;

196 i‡(
mixîdev
 >0Ë
	`˛o£
(mixerdev); mixerdev = -1;

197 
	}
}

	@frontend/libpicofe/linux/sndout_oss.h

1 
¢dout_oss_öô
();

2 
¢dout_oss_°¨t
(
øã
, 
°îeo
);

3 
¢dout_oss_°›
();

4 
¢dout_oss_wrôe
(c⁄° *
buff
, 
Àn
);

5 
¢dout_oss_wrôe_nb
(c⁄° *
buff
, 
Àn
);

6 
¢dout_oss_ˇn_wrôe
(
byãs
);

7 
¢dout_oss_waô
();

8 
¢dout_oss_£tvﬁ
(
l
, 
r
);

9 
¢dout_oss_exô
();

12 
¢dout_oss_‰ag_‰ames
;

13 
¢dout_oss_ˇn_ª°¨t
;

	@frontend/libpicofe/linux/xenv.c

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 
	~<±hªad.h
>

16 
	~<dlf˙.h
>

17 
	~<X11/Xlib.h
>

18 
	~<X11/Xutû.h
>

19 
	~<X11/XKBlib.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<sys/°©.h
>

23 
	~<f˙é.h
>

24 
	~<uni°d.h
>

25 
	~<sys/io˘l.h
>

26 
	~<ãrmios.h
>

27 
	~<löux/kd.h
>

29 
	~"xív.h
"

31 
	#PFX
 "xív: "

	)

33 
	#FPTR
(
f
Ë
	`ty≥of
(fË* 
p
##
	)
f

34 
	#FPTR_LINK
(
xf
, 
dl
, 
f
) { \

35 
xf
.
p
##
f
 = 
	`dlsym
(
dl
, #f); \

36 i‡(
xf
.
p
##
f
 =
NULL
) { \

37 
	`Ârötf
(
°dîr
, "missing symbol: %s\n", #f); \

38 
Áû
; \

40 }

	)

42 
	sx°uff
 {

43 
Di•œy
 *
	mdi•œy
;

44 
Wödow
 
	mwödow
;

45 
FPTR
(
XCª©eBôm≠FromD©a
);

46 
FPTR
(
XCª©ePixm≠Curs‹
);

47 
FPTR
(
XFªePixm≠
);

48 
FPTR
(
XO≥nDi•œy
);

49 
FPTR
(
XDi•œyName
);

50 
FPTR
(
XClo£Di•œy
);

51 
FPTR
(
XCª©eSim∂eWödow
);

52 
FPTR
(
XCh™geWödowAâribuãs
);

53 
FPTR
(
XSñe˘I≈ut
);

54 
FPTR
(
XM≠Wödow
);

55 
FPTR
(
XNextEvít
);

56 
FPTR
(
XCheckTy≥dEvít
);

57 
FPTR
(
XWôhdøwWödow
);

58 
FPTR
(
XGøbKeybﬂrd
);

59 
FPTR
(
XPídög
);

60 
FPTR
(
XLookupKeysym
);

61 
FPTR
(
XkbSëDëe˘abÀAutoRïót
);

62 
FPTR
(
XSt‹eName
);

63 
FPTR
(
XIc⁄ifyWödow
);

64 
FPTR
(
XMoveResizeWödow
);

65 
FPTR
(
XI¡înAtom
);

66 
FPTR
(
XSëWMHöts
);

67 
FPTR
(
XSync
);

70 
x°uff
 
	gg_x°uff
;

72 
Curs‹
 
	$å™•¨ít_curs‹
(
x°uff
 *
xf
, 
Di•œy
 *
di•œy
, 
Wödow
 
wö
)

74 
Curs‹
 
curs‹
;

75 
Pixm≠
 
pix
;

76 
XCﬁ‹
 
dummy
;

77 
d
 = 0;

79 
	`mem£t
(&
dummy
, 0, (dummy));

80 
pix
 = 
xf
->
	`pXCª©eBôm≠FromD©a
(
di•œy
, 
wö
, &
d
, 1, 1);

81 
curs‹
 = 
xf
->
	`pXCª©ePixm≠Curs‹
(
di•œy
, 
pix
,Öix,

82 &
dummy
, &dummy, 0, 0);

83 
xf
->
	`pXFªePixm≠
(
di•œy
, 
pix
);

84  
curs‹
;

85 
	}
}

87 
	$x11h_öô
(*
xív_Êags
, c⁄° *
wödow_tôÀ
)

89 
di•œy_width
, 
di•œy_height
;

90 
Di•œy
 *
di•œy
;

91 
XSëWödowAâribuãs
 
©åibuãs
;

92 
Wödow
 
wö
;

93 
VisuÆ
 *
visuÆ
;

94 
evt_mask
;

95 *
x11lib
;

96 
s¸ìn
;

98 
	`mem£t
(&
g_x°uff
, 0, (g_xstuff));

99 
x11lib
 = 
	`dl›í
("libX11.so.6", 
RTLD_LAZY
);

100 i‡(
x11lib
 =
NULL
) {

101 
	`Ârötf
(
°dîr
, "libX11.sÿlﬂd faûed:\n%s\n", 
	`dÀº‹
());

102 
Áû
;

104 
	`FPTR_LINK
(
g_x°uff
, 
x11lib
, 
XCª©eBôm≠FromD©a
);

105 
	`FPTR_LINK
(
g_x°uff
, 
x11lib
, 
XCª©ePixm≠Curs‹
);

106 
	`FPTR_LINK
(
g_x°uff
, 
x11lib
, 
XFªePixm≠
);

107 
	`FPTR_LINK
(
g_x°uff
, 
x11lib
, 
XO≥nDi•œy
);

108 
	`FPTR_LINK
(
g_x°uff
, 
x11lib
, 
XDi•œyName
);

109 
	`FPTR_LINK
(
g_x°uff
, 
x11lib
, 
XClo£Di•œy
);

110 
	`FPTR_LINK
(
g_x°uff
, 
x11lib
, 
XCª©eSim∂eWödow
);

111 
	`FPTR_LINK
(
g_x°uff
, 
x11lib
, 
XCh™geWödowAâribuãs
);

112 
	`FPTR_LINK
(
g_x°uff
, 
x11lib
, 
XSñe˘I≈ut
);

113 
	`FPTR_LINK
(
g_x°uff
, 
x11lib
, 
XM≠Wödow
);

114 
	`FPTR_LINK
(
g_x°uff
, 
x11lib
, 
XNextEvít
);

115 
	`FPTR_LINK
(
g_x°uff
, 
x11lib
, 
XCheckTy≥dEvít
);

116 
	`FPTR_LINK
(
g_x°uff
, 
x11lib
, 
XWôhdøwWödow
);

117 
	`FPTR_LINK
(
g_x°uff
, 
x11lib
, 
XGøbKeybﬂrd
);

118 
	`FPTR_LINK
(
g_x°uff
, 
x11lib
, 
XPídög
);

119 
	`FPTR_LINK
(
g_x°uff
, 
x11lib
, 
XLookupKeysym
);

120 
	`FPTR_LINK
(
g_x°uff
, 
x11lib
, 
XkbSëDëe˘abÀAutoRïót
);

121 
	`FPTR_LINK
(
g_x°uff
, 
x11lib
, 
XSt‹eName
);

122 
	`FPTR_LINK
(
g_x°uff
, 
x11lib
, 
XIc⁄ifyWödow
);

123 
	`FPTR_LINK
(
g_x°uff
, 
x11lib
, 
XMoveResizeWödow
);

124 
	`FPTR_LINK
(
g_x°uff
, 
x11lib
, 
XI¡înAtom
);

125 
	`FPTR_LINK
(
g_x°uff
, 
x11lib
, 
XSëWMHöts
);

126 
	`FPTR_LINK
(
g_x°uff
, 
x11lib
, 
XSync
);

130 
g_x°uff
.
di•œy
 = di•œy = g_x°uff.
	`pXO≥nDi•œy
(
NULL
);

131 i‡(
di•œy
 =
NULL
)

133 
	`Ârötf
(
°dîr
, "cannot connectÅo X server %s, X handling disabled.\n",

134 
g_x°uff
.
	`pXDi•œyName
(
NULL
));

135 
Áû2
;

138 
visuÆ
 = 
	`DeÁu…VisuÆ
(
di•œy
, 0);

139 i‡(
visuÆ
->
˛ass
 !
TrueCﬁ‹
)

140 
	`Ârötf
(
°dîr
, 
PFX
 "warning:ÇonÅrue color visual\n");

142 
	`¥ötf
(
PFX
 "X víd‹: %s,Ññ: %d, di•œy: %s,ÖrŸocﬁ vî: %d.%d\n", 
	`SîvîVíd‹
(
di•œy
),

143 
	`Víd‹Rñó£
(
di•œy
), 
	`Di•œySåög
(di•œy), 
	`PrŸocﬁVîsi⁄
(display),

144 
	`PrŸocﬁRevisi⁄
(
di•œy
));

146 
s¸ìn
 = 
	`DeÁu…S¸ìn
(
di•œy
);

148 
di•œy_width
 = 
	`Di•œyWidth
(
di•œy
, 
s¸ìn
);

149 
di•œy_height
 = 
	`Di•œyHeight
(
di•œy
, 
s¸ìn
);

150 
	`¥ötf
(
PFX
 "di•œy i†%dx%d\n", 
di•œy_width
, 
di•œy_height
);

152 
g_x°uff
.
wödow
 = 
wö
 = g_x°uff.
	`pXCª©eSim∂eWödow
(
di•œy
,

153 
	`RoŸWödow
(
di•œy
, 
s¸ìn
), 0, 0, 
di•œy_width
, 
di•œy_height
,

154 0, 
	`BœckPixñ
(
di•œy
, 
s¸ìn
), BlackPixel(display, screen));

156 
©åibuãs
.
ovîride_ªdúe˘
 = 
True
;

157 
©åibuãs
.
curs‹
 = 
	`å™•¨ít_curs‹
(&
g_x°uff
, 
di•œy
, 
wö
);

158 
g_x°uff
.
	`pXCh™geWödowAâribuãs
(
di•œy
, 
wö
, 
CWOvîrideRedúe˘
 | 
CWCurs‹
, &
©åibuãs
);

160 i‡(
wödow_tôÀ
 !
NULL
)

161 
g_x°uff
.
	`pXSt‹eName
(
di•œy
, 
wö
, 
wödow_tôÀ
);

162 
evt_mask
 = 
ExposuªMask
 | 
FocusCh™geMask
 | 
Pr›îtyCh™geMask
;

163 i‡(
xív_Êags
 && (*xív_Êag†& 
XENV_CAP_KEYS
))

164 
evt_mask
 |
KeyPªssMask
 | 
KeyRñó£Mask
;

165 i‡(
xív_Êags
 && (*xív_Êag†& 
XENV_CAP_MOUSE
))

166 
evt_mask
 |
Buâ⁄PªssMask
 | 
Buâ⁄Rñó£Mask
 | 
PoöãrMŸi⁄Mask
;

167 
g_x°uff
.
	`pXSñe˘I≈ut
(
di•œy
, 
wö
, 
evt_mask
);

168 
g_x°uff
.
	`pXM≠Wödow
(
di•œy
, 
wö
);

169 
g_x°uff
.
	`pXGøbKeybﬂrd
(
di•œy
, 
wö
, 
FÆ£
, 
GøbModeAsync
, GøbModeAsync, 
CuºítTime
);

170 
g_x°uff
.
	`pXkbSëDëe˘abÀAutoRïót
(
di•œy
, 1, 
NULL
);

174 
g_x°uff
.
	`pXSync
(
di•œy
, 
FÆ£
);

177 
Áû2
:

178 
	`dl˛o£
(
x11lib
);

179 
Áû
:

180 
g_x°uff
.
di•œy
 = 
NULL
;

181 
	`Ârötf
(
°dîr
, "x11 handling disabled.\n");

183 
	}
}

185 
x11h_upd©e
((*
key_cb
)(*
cb_¨g
, 
kc
, 
is_¥es£d
),

186 (*
mou£b_cb
)(*
cb_¨g
, 
x
, 
y
, 
buâ⁄
, 
is_¥es£d
),

187 (*
mou£m_cb
)(*
cb_¨g
, 
x
, 
y
),

188 *
cb_¨g
)

190 
XEvít
 
evt
;

191 
keysym
;

193 
g_x°uff
.
	`pXPídög
(g_x°uff.
di•œy
))

195 
g_x°uff
.
	`pXNextEvít
(g_x°uff.
di•œy
, &
evt
);

196 
evt
.
ty≥
)

198 
Expo£
:

199 
g_x°uff
.
	`pXCheckTy≥dEvít
(g_x°uff.
di•œy
, 
Expo£
, &
evt
))

203 
KeyPªss
:

204 
keysym
 = 
g_x°uff
.
	`pXLookupKeysym
(&
evt
.
xkey
, 0);

205 i‡(
key_cb
 !
NULL
)

206 
	`key_cb
(
cb_¨g
, 
keysym
, 1);

209 
KeyRñó£
:

210 
keysym
 = 
g_x°uff
.
	`pXLookupKeysym
(&
evt
.
xkey
, 0);

211 i‡(
key_cb
 !
NULL
)

212 
	`key_cb
(
cb_¨g
, 
keysym
, 0);

215 
Buâ⁄Pªss
:

216 i‡(
mou£b_cb
 !
NULL
)

217 
	`mou£b_cb
(
cb_¨g
, 
evt
.
xbuâ⁄
.
x
,Évt.xbuâ⁄.
y
,

218 
evt
.
xbuâ⁄
.
buâ⁄
, 1);

221 
Buâ⁄Rñó£
:

222 i‡(
mou£b_cb
 !
NULL
)

223 
	`mou£b_cb
(
cb_¨g
, 
evt
.
xbuâ⁄
.
x
,Évt.xbuâ⁄.
y
,

224 
evt
.
xbuâ⁄
.
buâ⁄
, 0);

227 
MŸi⁄NŸify
:

228 i‡(
mou£m_cb
 !
NULL
)

229 
	`mou£m_cb
(
cb_¨g
, 
evt
.
xmŸi⁄
.
x
,Évt.xmŸi⁄.
y
);

233 
	}
}

235 
	$x11h_waô_vm°©e
()

237 
Atom
 
wm_°©e
 = 
g_x°uff
.
	`pXI¡înAtom
(g_x°uff.
di•œy
, "WM_STATE", 
FÆ£
);

238 
XEvít
 
evt
;

239 
i
;

241 
	`u¶ìp
(20000);

243 
i
 = 0; i < 20; i++) {

244 
g_x°uff
.
	`pXPídög
(g_x°uff.
di•œy
)) {

245 
g_x°uff
.
	`pXNextEvít
(g_x°uff.
di•œy
, &
evt
);

247 i‡(
evt
.
ty≥
 =
Pr›îtyNŸify
 &&Évt.
x¥›îty
.
©om
 =
wm_°©e
)

250 
	`u¶ìp
(200000);

253 
	`Ârötf
(
°dîr
, 
PFX
 "timeout waiting for wm_state change\n");

254 
	}
}

256 
	$x11h_möimize
()

258 
XSëWödowAâribuãs
 
©åibuãs
;

259 
Di•œy
 *
di•œy
 = 
g_x°uff
.display;

260 
Wödow
 
wödow
 = 
g_x°uff
.window;

261 
s¸ìn
 = 
	`DeÁu…S¸ìn
(
g_x°uff
.
di•œy
);

262 
di•œy_width
, 
di•œy_height
;

263 
XWMHöts
 
wm_höts
;

264 
XEvít
 
evt
;

266 
g_x°uff
.
	`pXWôhdøwWödow
(
di•œy
, 
wödow
, 
s¸ìn
);

268 
©åibuãs
.
ovîride_ªdúe˘
 = 
FÆ£
;

269 
g_x°uff
.
	`pXCh™geWödowAâribuãs
(
di•œy
, 
wödow
,

270 
CWOvîrideRedúe˘
, &
©åibuãs
);

272 
wm_höts
.
Êags
 = 
SèãHöt
;

273 
wm_höts
.
öôül_°©e
 = 
Ic⁄icSèã
;

274 
g_x°uff
.
	`pXSëWMHöts
(
di•œy
, 
wödow
, &
wm_höts
);

276 
g_x°uff
.
	`pXM≠Wödow
(
di•œy
, 
wödow
);

278 
g_x°uff
.
	`pXNextEvít
(
di•œy
, &
evt
) == 0)

281 
evt
.
ty≥
)

283 
FocusIn
:

284 
out
;

290 
out
:

291 
g_x°uff
.
	`pXWôhdøwWödow
(
di•œy
, 
wödow
, 
s¸ìn
);

294 
	`x11h_waô_vm°©e
();

296 
©åibuãs
.
ovîride_ªdúe˘
 = 
True
;

297 
g_x°uff
.
	`pXCh™geWödowAâribuãs
(
di•œy
, 
wödow
,

298 
CWOvîrideRedúe˘
, &
©åibuãs
);

301 
di•œy_width
 = 
	`Di•œyWidth
(
di•œy
, 
s¸ìn
);

302 
di•œy_height
 = 
	`Di•œyHeight
(
di•œy
, 
s¸ìn
);

303 
g_x°uff
.
	`pXMoveResizeWödow
(
di•œy
, 
wödow
, 0, 0, 
di•œy_width
, 
di•œy_height
);

305 
g_x°uff
.
	`pXM≠Wödow
(
di•œy
, 
wödow
);

306 
g_x°uff
.
	`pXGøbKeybﬂrd
(
di•œy
, 
wödow
, 
FÆ£
, 
GøbModeAsync
, GøbModeAsync, 
CuºítTime
);

307 
g_x°uff
.
	`pXkbSëDëe˘abÀAutoRïót
(
di•œy
, 1, 
NULL
);

310 
g_x°uff
.
	`pXSync
(
di•œy
, 
FÆ£
);

313 
	}
}

315 
ãrmios
 
	gg_kbd_ãrmios_ßved
;

316 
	gg_kbdfd
 = -1;

318 
	$ây_öô
()

320 
ãrmios
 
kbd_ãrmios
;

321 
mode
;

323 
g_kbdfd
 = 
	`›í
("/dev/ây", 
O_RDWR
);

324 i‡(
g_kbdfd
 == -1) {

325 
	`≥º‹
(
PFX
 "open /dev/tty");

329 i‡(
	`io˘l
(
g_kbdfd
, 
KDGETMODE
, &
mode
) == -1) {

330 
	`≥º‹
(
PFX
 "(not hiding FB): KDGETMODE");

331 
Áû
;

334 i‡(
	`tcgë©å
(
g_kbdfd
, &
kbd_ãrmios
) == -1) {

335 
	`≥º‹
(
PFX
 "tcgetattr");

336 
Áû
;

339 
g_kbd_ãrmios_ßved
 = 
kbd_ãrmios
;

340 
kbd_ãrmios
.
c_lÊag
 &~(
ICANON
 | 
ECHO
);

341 
kbd_ãrmios
.
c_iÊag
 &~(
ISTRIP
 | 
IGNCR
 | 
ICRNL
 | 
INLCR
 | 
IXOFF
 | 
IXON
);

342 
kbd_ãrmios
.
c_cc
[
VMIN
] = 0;

343 
kbd_ãrmios
.
c_cc
[
VTIME
] = 0;

345 i‡(
	`tc£èâr
(
g_kbdfd
, 
TCSAFLUSH
, &
kbd_ãrmios
) == -1) {

346 
	`≥º‹
(
PFX
 "tcsetattr");

347 
Áû
;

350 i‡(
	`io˘l
(
g_kbdfd
, 
KDSETMODE
, 
KD_GRAPHICS
) == -1) {

351 
	`≥º‹
(
PFX
 "KDSETMODE KD_GRAPHICS");

352 
	`tc£èâr
(
g_kbdfd
, 
TCSAFLUSH
, &
g_kbd_ãrmios_ßved
);

353 
Áû
;

358 
Áû
:

359 
	`˛o£
(
g_kbdfd
);

360 
g_kbdfd
 = -1;

362 
	}
}

364 
	$ây_íd
()

366 i‡(
g_kbdfd
 < 0)

369 i‡(
	`io˘l
(
g_kbdfd
, 
KDSETMODE
, 
KD_TEXT
) == -1)

370 
	`≥º‹
(
PFX
 "KDSETMODE KD_TEXT");

372 i‡(
	`tc£èâr
(
g_kbdfd
, 
TCSAFLUSH
, &
g_kbd_ãrmios_ßved
) == -1)

373 
	`≥º‹
(
PFX
 "tcsetattr");

375 
	`˛o£
(
g_kbdfd
);

376 
g_kbdfd
 = -1;

377 
	}
}

379 
	$xív_öô
(*
xív_Êags
, c⁄° *
wödow_tôÀ
)

381 
ªt
;

383 
ªt
 = 
	`x11h_öô
(
xív_Êags
, 
wödow_tôÀ
);

384 i‡(
ªt
 == 0)

385 
out
;

387 i‡(
xív_Êags
 !
NULL
)

388 *
xív_Êags
 &~(
XENV_CAP_KEYS
 | 
XENV_CAP_MOUSE
);

389 
ªt
 = 
	`ây_öô
();

390 i‡(
ªt
 == 0)

391 
out
;

393 
	`Ârötf
(
°dîr
, 
PFX
 "error: both x11h_initándÅty_init failed\n");

394 
ªt
 = -1;

395 
out
:

396  
ªt
;

397 
	}
}

399 
xív_upd©e
((*
key_cb
)(*
cb_¨g
, 
kc
, 
is_¥es£d
),

400 (*
mou£b_cb
)(*
cb_¨g
, 
x
, 
y
, 
buâ⁄
, 
is_¥es£d
),

401 (*
mou£m_cb
)(*
cb_¨g
, 
x
, 
y
),

402 *
cb_¨g
)

404 i‡(
g_x°uff
.
di•œy
) {

405 
	`x11h_upd©e
(
key_cb
, 
mou£b_cb
, 
mou£m_cb
, 
cb_¨g
);

411 
	}
}

414 
	$xív_möimize
()

416 
ªt
;

418 i‡(
g_x°uff
.
di•œy
) {

419 
	`xív_upd©e
(
NULL
, NULL, NULL, NULL);

420 
ªt
 = 
	`x11h_möimize
();

421 
	`xív_upd©e
(
NULL
, NULL, NULL, NULL);

422  
ªt
;

426 
	}
}

428 
	$xív_föish
()

431 
	`ây_íd
();

432 
	}
}

435 
	$maö
()

437 
i
, 
r
, 
d
;

439 
	`xív_öô
("justáÅest");

441 
i
 = 0; i < 5; i++) {

442 (
r
 = 
	`xív_upd©e
(&
d
)) > 0)

443 
	`¥ötf
("%d %x %d\n", 
d
, 
r
,Ñ);

444 
	`¶ìp
(1);

446 i‡(
i
 == 1)

447 
	`xív_möimize
();

448 
	`¥ötf
("Œ %d\n", 
i
);

451 
	`¥ötf
("xenv_finish..\n");

452 
	`xív_föish
();

455 
	}
}

	@frontend/libpicofe/linux/xenv.h

1 #i‚de‡
LIBPICOFE_XENV_H


2 
	#LIBPICOFE_XENV_H


	)

4 
	#XENV_CAP_KEYS
 (1<<0)

	)

5 
	#XENV_CAP_MOUSE
 (1<<1)

	)

9 
xív_öô
(*
xív_Êags
, c⁄° *
wödow_tôÀ
);

13 
xív_upd©e
((*
key_cb
)(*
cb_¨g
, 
kc
, 
is_¥es£d
),

14 (*
mou£b_cb
)(*
cb_¨g
, 
x
, 
y
, 
buâ⁄
, 
is_¥es£d
),

15 (*
mou£m_cb
)(*
cb_¨g
, 
x
, 
y
),

16 *
cb_¨g
);

18 
	`xív_möimize
();

19 
	`xív_föish
();

	@frontend/libpicofe/lprintf.h

1 #ifde‡
__˝lu•lus


5 
Õrötf
(c⁄° *
fmt
, ...);

7 #ifde‡
__˝lu•lus


	@frontend/libpicofe/menu.c

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 
	~<°dlib.h
>

15 
	~<°d¨g.h
>

16 
	~<time.h
>

17 
	~<loˇÀ.h
>

19 
	~"míu.h
"

20 
	~"f⁄ts.h
"

21 
	~"ªad≤g.h
"

22 
	~"Õrötf.h
"

23 
	~"öput.h
"

24 
	~"∂©.h
"

25 
	~"posix.h
"

27 
	g°©ic_buff
[64];

28 
	gmíu_îr‹_time
 = 0;

29 
	gmíu_îr‹_msg
[64] = { 0, };

30 *
	gg_míus¸ìn_±r
;

31 *
	gg_míubg_§c_±r
;

32 *
	gg_míubg_±r
;

34 
	gg_míus¸ìn_w
;

35 
	gg_míus¸ìn_h
;

37 
	gg_auto°©ñd_›t
;

39 *
	gmíu_f⁄t_d©a
 = 
NULL
;

40 
	gmíu_ãxt_cﬁ‹
 = 0xfffe;

41 
	gmíu_£l_cﬁ‹
 = -1;

44 #i‡
MENU_X2


45 c⁄° 
	gme_mf⁄t_w
 = 16, 
	gme_mf⁄t_h
 = 20;

46 c⁄° 
	gme_sf⁄t_w
 = 12, 
	gme_sf⁄t_h
 = 20;

48 c⁄° 
	gme_mf⁄t_w
 = 8, 
	gme_mf⁄t_h
 = 10;

49 c⁄° 
	gme_sf⁄t_w
 = 6, 
	gme_sf⁄t_h
 = 10;

52 
	gg_míu_fûãr_off
;

53 
	gg_b‹dî_°yÀ
;

54 
	gb‹dî_À·
, 
	gb‹dî_right
, 
	gb‹dî_t›
, 
	gb‹dî_bŸtom
;

57 
	$ãxt_out16_
(
x
, 
y
, c⁄° *
ãxt
, 
cﬁ‹
)

59 
i
, 
lh
, 
å
, 
tg
, 
tb
, 
Àn
;

60 *
de°
 = (*)
g_míus¸ìn_±r
 + 
x
 + 
y
 * 
g_míus¸ìn_w
;

61 
å
 = (
cﬁ‹
 & 0xf800) >> 8;

62 
tg
 = (
cﬁ‹
 & 0x07e0) >> 3;

63 
tb
 = (
cﬁ‹
 & 0x001f) << 3;

65 i‡(
ãxt
 == (*)1)

68 
ãxt
 = "";

69 
Àn
 = 1;

73 c⁄° *
p
;

74 
p
 = 
ãxt
; *p != 0 && *p != '\n';Ö++)

76 
Àn
 = 
p
 - 
ãxt
;

79 
lh
 = 
me_mf⁄t_h
;

80 i‡(
y
 + 
lh
 > 
g_míus¸ìn_h
)

81 
lh
 = 
g_míus¸ìn_h
 - 
y
;

83 
i
 = 0; i < 
Àn
; i++)

85 *
§c
 = 
míu_f⁄t_d©a
 + ()
ãxt
[
i
] * 
me_mf⁄t_w
 * 
me_mf⁄t_h
 / 2;

86 *
d°
 = 
de°
;

87 
u
, 
l
;

89 
l
 = 0;Ü < 
lh
;Ü++, 
d°
 +
g_míus¸ìn_w
 - 
me_mf⁄t_w
)

91 
u
 = 
me_mf⁄t_w
 / 2; u > 0; u--, 
§c
++)

93 
c
, 
r
, 
g
, 
b
;

94 
c
 = *
§c
 >> 4;

95 
r
 = (*
d°
 & 0xf800) >> 8;

96 
g
 = (*
d°
 & 0x07e0) >> 3;

97 
b
 = (*
d°
 & 0x001f) << 3;

98 
r
 = (
c
^0xf)*r/15 + c*
å
/15;

99 
g
 = (
c
^0xf)*g/15 + c*
tg
/15;

100 
b
 = (
c
^0xf)*b/15 + c*
tb
/15;

101 *
d°
++ = ((
r
<<8)&0xf800Ë| ((
g
<<3)&0x07e0Ë| (
b
>>3);

102 
c
 = *
§c
 & 0xf;

103 
r
 = (*
d°
 & 0xf800) >> 8;

104 
g
 = (*
d°
 & 0x07e0) >> 3;

105 
b
 = (*
d°
 & 0x001f) << 3;

106 
r
 = (
c
^0xf)*r/15 + c*
å
/15;

107 
g
 = (
c
^0xf)*g/15 + c*
tg
/15;

108 
b
 = (
c
^0xf)*b/15 + c*
tb
/15;

109 *
d°
++ = ((
r
<<8)&0xf800Ë| ((
g
<<3)&0x07e0Ë| (
b
>>3);

112 
de°
 +
me_mf⁄t_w
;

115 i‡(
x
 < 
b‹dî_À·
)

116 
b‹dî_À·
 = 
x
;

117 i‡(
x
 + 
i
 * 
me_mf⁄t_w
 > 
b‹dî_right
)

118 
b‹dî_right
 = 
x
 + 
i
 * 
me_mf⁄t_w
;

119 i‡(
y
 < 
b‹dî_t›
)

120 
b‹dî_t›
 = 
y
;

121 i‡(
y
 + 
me_mf⁄t_h
 > 
b‹dî_bŸtom
)

122 
b‹dî_bŸtom
 = 
y
 + 
me_mf⁄t_h
;

123 
	}
}

125 
	$ãxt_out16
(
x
, 
y
, c⁄° *
ãxto
, ...)

127 
va_li°
 
¨gs
;

128 
buf„r
[256];

129 
maxw
 = (
g_míus¸ìn_w
 - 
x
Ë/ 
me_mf⁄t_w
;

131 i‡(
maxw
 < 0)

134 
	`va_°¨t
(
¨gs
, 
ãxto
);

135 
	`v¢¥ötf
(
buf„r
, (buf„r), 
ãxto
, 
¨gs
);

136 
	`va_íd
(
¨gs
);

138 i‡(
maxw
 > (
buf„r
) - 1)

139 
maxw
 = (
buf„r
) - 1;

140 
buf„r
[
maxw
] = 0;

142 
	`ãxt_out16_
(
x
,
y
,
buf„r
,
míu_ãxt_cﬁ‹
);

143 
	}
}

146 
	$smÆ…ext_out16_
(
x
, 
y
, c⁄° *
ãxto
, 
cﬁ‹
)

148 *
§c
;

149 *
d°
;

150 
mu…ùlõr
 = 
me_sf⁄t_w
 / 6;

151 
i
;

153 
i
 = 0;; i++, 
x
 +
me_sf⁄t_w
)

155 
c
 = (Ë
ãxto
[
i
];

156 
h
 = 8;

158 i‡(!
c
 || c == '\n')

161 
§c
 = 
f⁄td©a6x8
[
c
];

162 
d°
 = (*)
g_míus¸ìn_±r
 + 
x
 + 
y
 * 
g_míus¸ìn_w
;

164 
h
--)

166 
m
, 
w2
, 
h2
;

167 
h2
 = 
mu…ùlõr
; h2 > 0; h2--)

169 
m
 = 0x20; m; m >>= 1) {

170 i‡(*
§c
 & 
m
)

171 
w2
 = 
mu…ùlõr
; w2 > 0; w2--)

172 *
d°
++ = 
cﬁ‹
;

174 
d°
 +
mu…ùlõr
;

177 
d°
 +
g_míus¸ìn_w
 - 
me_sf⁄t_w
;

179 
§c
++;

182 
	}
}

184 
	$smÆ…ext_out16
(
x
, 
y
, c⁄° *
ãxto
, 
cﬁ‹
)

186 
buf„r
[128];

187 
maxw
 = (
g_míus¸ìn_w
 - 
x
Ë/ 
me_sf⁄t_w
;

189 i‡(
maxw
 < 0)

192 
	`°∫˝y
(
buf„r
, 
ãxto
, (buffer));

193 i‡(
maxw
 > (
buf„r
) - 1)

194 
maxw
 = (
buf„r
) - 1;

195 
buf„r
[
maxw
] = 0;

197 
	`smÆ…ext_out16_
(
x
, 
y
, 
buf„r
, 
cﬁ‹
);

198 
	}
}

200 
	$míu_døw_£À˘i⁄
(
x
, 
y
, 
w
)

202 
i
, 
h
;

203 *
d°
, *
de°
;

205 
	`ãxt_out16_
(
x
, 
y
, (*)1, (
míu_£l_cﬁ‹
 < 0Ë? 
míu_ãxt_cﬁ‹
 : menu_sel_color);

207 i‡(
míu_£l_cﬁ‹
 < 0) ;

209 i‡(
y
 > 0) y--;

210 
de°
 = (*)
g_míus¸ìn_±r
 + 
x
 + 
y
 * 
g_míus¸ìn_w
 + 
me_mf⁄t_w
 * 2 - 2;

211 
h
 = 
me_mf⁄t_h
 + 1; h > 0; h--)

213 
d°
 = 
de°
;

214 
i
 = 
w
 - (
me_mf⁄t_w
 * 2 - 2); i > 0; i--)

215 *
d°
++ = 
míu_£l_cﬁ‹
;

216 
de°
 +
g_míus¸ìn_w
;

218 
	}
}

220 
	$∑r£_hex_cﬁ‹
(*
buff
)

222 *
ídp
 = 
buff
;

223 
t
 = (Ë
	`°πoul
(
buff
, &
ídp
, 16);

224 i‡(
ídp
 !
buff
)

225 #ifde‡
PSP


226  ((
t
<<8)&0xf800) | ((t>>5)&0x07e0) | ((t>>19)&0x1f);

228  ((
t
>>8)&0xf800) | ((t>>5)&0x07e0) | ((t>>3)&0x1f);

231 
	}
}

233 
	$tﬁowî_sim∂e
(
c
)

235 i‡('A' <
c
 && c <= 'Z')

236 
c
 = c - 'A' + 'a';

237  
c
;

238 
	}
}

240 
	$míu_öô_ba£
()

242 
i
, 
c
, 
l
, 
pos
;

243 *
fd
, *
fds
;

244 
buff
[256];

245 
FILE
 *
f
;

247 i‡(
míu_f⁄t_d©a
 !
NULL
)

248 
	`‰ì
(
míu_f⁄t_d©a
);

250 
míu_f⁄t_d©a
 = 
	`ˇŒoc
((
MENU_X2
 ? 256 * 320 : 128 * 160) / 2, 1);

251 i‡(
míu_f⁄t_d©a
 =
NULL
)

255 
c
 = 0, 
fd
 = 
míu_f⁄t_d©a
; c < 128; c++)

257 
l
 = 0;Ü < 8;Ü++)

259 
fd8x8
 = 
f⁄td©a8x8
[
c
*8+
l
];

260 i‡(
fd8x8
&0x80Ë*
fd
 = 0xf0;

261 i‡(
fd8x8
&0x40Ë*
fd
 |= 0x0f; fd++;

262 i‡(
fd8x8
&0x20Ë*
fd
 = 0xf0;

263 i‡(
fd8x8
&0x10Ë*
fd
 |= 0x0f; fd++;

264 i‡(
fd8x8
&0x08Ë*
fd
 = 0xf0;

265 i‡(
fd8x8
&0x04Ë*
fd
 |= 0x0f; fd++;

266 i‡(
fd8x8
&0x02Ë*
fd
 = 0xf0;

267 i‡(
fd8x8
&0x01Ë*
fd
 |= 0x0f; fd++;

269 
fd
 += 8*2/2;

272 i‡(
MENU_X2
) {

274 
fds
 = 
míu_f⁄t_d©a
 + 128 * 160 / 2 - 4;

275 
fd
 = 
míu_f⁄t_d©a
 + 256 * 320 / 2 - 1;

276 
c
 = 255; c >= 0; c--)

278 
l
 = 9;Ü >0;Ü--, 
fds
 -= 4)

280 
i
 = 3; i >= 0; i--) {

281 
px
 = 
fds
[
i
] & 0x0f;

282 *
fd
-- = 
px
 | (px << 4);

283 
px
 = (
fds
[
i
] >> 4) & 0x0f;

284 *
fd
-- = 
px
 | (px << 4);

286 
i
 = 3; i >= 0; i--) {

287 
px
 = 
fds
[
i
] & 0x0f;

288 *
fd
-- = 
px
 | (px << 4);

289 
px
 = (
fds
[
i
] >> 4) & 0x0f;

290 *
fd
-- = 
px
 | (px << 4);

297 
pos
 = 
	`∂©_gë_skö_dú
(
buff
, (buff));

298 
	`°r˝y
(
buff
 + 
pos
, "font.png");

299 
	`ªad≤g
(
míu_f⁄t_d©a
, 
buff
, 
READPNG_FONT
,

300 
MENU_X2
 ? 256 : 128, MENU_X2 ? 320 : 160);

302 
	`mem˝y
(
míu_f⁄t_d©a
, míu_f⁄t_d©®+ (()'>'Ë* 
me_mf⁄t_w
 * 
me_mf⁄t_h
 / 2,

303 
me_mf⁄t_w
 * 
me_mf⁄t_h
 / 2);

304 
	`°r˝y
(
buff
 + 
pos
, "selector.png");

305 
	`ªad≤g
(
míu_f⁄t_d©a
, 
buff
, 
READPNG_SELECTOR
, 
me_mf⁄t_w
, 
me_mf⁄t_h
);

308 
	`°r˝y
(
buff
 + 
pos
, "skin.txt");

309 
f
 = 
	`f›í
(
buff
, "r");

310 i‡(
f
 !
NULL
)

312 
	`Õrötf
("found skin.txt\n");

313 !
	`„of
(
f
))

315 i‡(
	`fgës
(
buff
, (buff), 
f
Ë=
NULL
)

317 i‡(
buff
[0] == '#' || buff[0] == '/') ;

318 i‡(
buff
[0] == '\r' || buff[0] == '\n') ;

319 i‡(
	`°∫cmp
(
buff
, "text_color=", 11) == 0)

321 
tmp
 = 
	`∑r£_hex_cﬁ‹
(
buff
+11);

322 i‡(
tmp
 >0Ë
míu_ãxt_cﬁ‹
 =Åmp;

323 
	`Õrötf
("skin.txt:ÖarseÉrror forÅext_color\n");

325 i‡(
	`°∫cmp
(
buff
, "selection_color=", 16) == 0)

327 
tmp
 = 
	`∑r£_hex_cﬁ‹
(
buff
+16);

328 i‡(
tmp
 >0Ë
míu_£l_cﬁ‹
 =Åmp;

329 
	`Õrötf
("skin.txt:ÖarseÉrror for selection_color\n");

332 
	`Õrötf
("skö.txt:Ö¨£Éº‹: %s\n", 
buff
);

334 
	`f˛o£
(
f
);

338 
	`£éoˇÀ
(
LC_TIME
, "");

339 
	}
}

341 
	$míu_d¨kí_bg
(*
d°
, *
§c
, 
pixñs
, 
d¨kî
)

343 *
de°
 = 
d°
;

344 *
s‹c
 = 
§c
;

345 
pixñs
 /= 2;

346 i‡(
d¨kî
)

348 
pixñs
--)

350 
p
 = *
s‹c
++;

351 *
de°
++ = ((
p
&0xf79ef79e)>>1) - ((p&0xc618c618)>>3);

356 
pixñs
--)

358 
p
 = *
s‹c
++;

359 *
de°
++ = (
p
&0xf79ef79e)>>1;

362 
	}
}

364 
	$míu_d¨kí_ãxt_bg
()

366 
x
, 
y
, 
xmö
, 
xmax
, 
ymax
, 
ls
;

367 *
s¸ìn
 = 
g_míus¸ìn_±r
;

369 
xmö
 = 
b‹dî_À·
 - 3;

370 i‡(
xmö
 < 0)

371 
xmö
 = 0;

372 
xmax
 = 
b‹dî_right
 + 2;

373 i‡(
xmax
 > 
g_míus¸ìn_w
 - 1)

374 
xmax
 = 
g_míus¸ìn_w
 - 1;

376 
y
 = 
b‹dî_t›
 - 3;

377 i‡(
y
 < 0)

378 
y
 = 0;

379 
ymax
 = 
b‹dî_bŸtom
 + 2;

380 i‡(
ymax
 > 
g_míus¸ìn_h
 - 1)

381 
ymax
 = 
g_míus¸ìn_h
 - 1;

383 
x
 = 
xmö
; x <
xmax
; x++)

384 
s¸ìn
[
y
 * 
g_míus¸ìn_w
 + 
x
] = 0xa514;

385 
y
++; y < 
ymax
; y++)

387 
ls
 = 
y
 * 
g_míus¸ìn_w
;

388 
s¸ìn
[
ls
 + 
xmö
] = 0xffff;

389 
x
 = 
xmö
 + 1; x < 
xmax
; x++)

391 
p
 = 
s¸ìn
[
ls
 + 
x
];

392 i‡(
p
 !
míu_ãxt_cﬁ‹
)

393 
s¸ìn
[
ls
 + 
x
] = ((
p
&0xf79e)>>1) - ((p&0xc618)>>3);

395 
s¸ìn
[
ls
 + 
xmax
] = 0xffff;

397 
ls
 = 
y
 * 
g_míus¸ìn_w
;

398 
x
 = 
xmö
; x <
xmax
; x++)

399 
s¸ìn
[
ls
 + 
x
] = 0xffff;

400 
	}
}

402 
	gb‹dîs_≥ndög
;

404 
	$míu_ª£t_b‹dîs
()

406 
b‹dî_À·
 = 
g_míus¸ìn_w
;

407 
b‹dî_right
 = 0;

408 
b‹dî_t›
 = 
g_míus¸ìn_h
;

409 
b‹dî_bŸtom
 = 0;

410 
	}
}

412 
	$míu_døw_begö
(
√ed_bg
, 
no_b‹dîs
)

414 
	`∂©_video_míu_begö
();

416 
	`míu_ª£t_b‹dîs
();

417 
b‹dîs_≥ndög
 = 
g_b‹dî_°yÀ
 && !
no_b‹dîs
;

419 i‡(
√ed_bg
) {

420 i‡(
g_b‹dî_°yÀ
 && 
no_b‹dîs
) {

421 
	`míu_d¨kí_bg
(
g_míus¸ìn_±r
, 
g_míubg_±r
,

422 
g_míus¸ìn_w
 * 
g_míus¸ìn_h
, 1);

425 
	`mem˝y
(
g_míus¸ìn_±r
, 
g_míubg_±r
,

426 
g_míus¸ìn_w
 * 
g_míus¸ìn_h
 * 2);

429 
	}
}

431 
	$míu_døw_íd
()

433 i‡(
b‹dîs_≥ndög
)

434 
	`míu_d¨kí_ãxt_bg
();

435 
	`∂©_video_míu_íd
();

436 
	}
}

438 
	$míu_£∑øti⁄
()

440 i‡(
b‹dîs_≥ndög
) {

441 
	`míu_d¨kí_ãxt_bg
();

442 
	`míu_ª£t_b‹dîs
();

444 
	}
}

446 
	$me_id2off£t
(c⁄° 
míu_íåy
 *
ít
, 
míu_id
 
id
)

448 
i
;

449 
i
 = 0; 
ít
->
«me
;Ént++, i++)

450 i‡(
ít
->
id
 =idË 
i
;

452 
	`Õrötf
("%s: id %ònŸ found\n", 
__FUNCTION__
, 
id
);

454 
	}
}

456 
	$me_íabÀ
(
míu_íåy
 *
íåõs
, 
míu_id
 
id
, 
íabÀ
)

458 
i
 = 
	`me_id2off£t
(
íåõs
, 
id
);

459 
íåõs
[
i
].
íabÀd
 = 
íabÀ
;

460 
	}
}

462 
	$me_cou¡
(c⁄° 
míu_íåy
 *
ít
)

464 
ªt
;

466 
ªt
 = 0; 
ít
->
«me
;Ént++,Ñet++)

469  
ªt
;

470 
	}
}

472 
	$me_ªad_⁄off
(c⁄° 
míu_íåy
 *
ít
)

475 i‡(
ít
->
mask
 & 0xffff0000)

476  *(*)
ít
->
v¨
 &É¡->
mask
;

477 i‡(
ít
->
mask
 & 0xff00)

478  *(*)
ít
->
v¨
 &É¡->
mask
;

480  *(*)
ít
->
v¨
 &É¡->
mask
;

481 
	}
}

483 
	$me_toggÀ_⁄off
(
míu_íåy
 *
ít
)

486 i‡(
ít
->
mask
 & 0xffff0000)

487 *(*)
ít
->
v¨
 ^ít->
mask
;

488 i‡(
ít
->
mask
 & 0xff00)

489 *(*)
ít
->
v¨
 ^ít->
mask
;

491 *(*)
ít
->
v¨
 ^ít->
mask
;

492 
	}
}

494 
me_døw
(c⁄° 
míu_íåy
 *
íåõs
, 
£l
, (*
døw_m‹e
)())

496 c⁄° 
míu_íåy
 *
ít
, *
ít_£l
 = 
íåõs
;

497 
x
, 
y
, 
w
 = 0, 
h
 = 0;

498 
offs
, 
cﬁ2_offs
 = 27 * 
me_mf⁄t_w
;

499 
vi_£l_ 
 = 0;

500 c⁄° *
«me
;

501 
i
, 
n
;

504 
ít
 = 
íåõs
, 
i
 = 
n
 = 0;É¡->
«me
;Ént++, i++)

506 
wt
;

508 i‡(!
ít
->
íabÀd
)

511 i‡(
i
 =
£l
) {

512 
ít_£l
 = 
ít
;

513 
vi_£l_ 
 = 
n
;

516 
«me
 = 
NULL
;

517 
wt
 = 
	`°æí
(
ít
->
«me
Ë* 
me_mf⁄t_w
;

518 i‡(
wt
 =0 && 
ít
->
gíî©e_«me
)

519 
«me
 = 
ít
->
	`gíî©e_«me
”¡->
id
, &
offs
);

520 i‡(
«me
 !
NULL
)

521 
wt
 = 
	`°æí
(
«me
Ë* 
me_mf⁄t_w
;

523 i‡(
ít
->
beh
 !
MB_NONE
)

525 i‡(
wt
 > 
cﬁ2_offs
)

526 
cﬁ2_offs
 = 
wt
 + 
me_mf⁄t_w
;

527 
wt
 = 
cﬁ2_offs
;

529 
ít
->
beh
) {

530 
MB_NONE
:

532 
MB_OPT_ONOFF
:

533 
MB_OPT_RANGE
:

534 
wt
 +
me_mf⁄t_w
 * 3;

536 
MB_OPT_CUSTOM
:

537 
MB_OPT_CUSTONOFF
:

538 
MB_OPT_CUSTRANGE
:

539 
«me
 = 
NULL
;

540 
offs
 = 0;

541 i‡(
ít
->
gíî©e_«me
 !
NULL
)

542 
«me
 = 
ít
->
	`gíî©e_«me
”¡->
id
, &
offs
);

543 i‡(
«me
 !
NULL
)

544 
wt
 +(
	`°æí
(
«me
Ë+ 
offs
Ë* 
me_mf⁄t_w
;

546 
MB_OPT_ENUM
:

547 
wt
 +10 * 
me_mf⁄t_w
;

552 i‡(
wt
 > 
w
)

553 
w
 = 
wt
;

554 
n
++;

556 
h
 = 
n
 * 
me_mf⁄t_h
;

557 
w
 +
me_mf⁄t_w
 * 2;

559 i‡(
w
 > 
g_míus¸ìn_w
) {

560 
	`Õrötf
("width %d > %d\n", 
w
, 
g_míus¸ìn_w
);

561 
w
 = 
g_míus¸ìn_w
;

563 i‡(
h
 > 
g_míus¸ìn_h
) {

564 
	`Õrötf
("heighà%d > %d\n", 
w
, 
g_míus¸ìn_h
);

565 
h
 = 
g_míus¸ìn_h
;

568 
x
 = 
g_míus¸ìn_w
 / 2 - 
w
 / 2;

569 
y
 = 
g_míus¸ìn_h
 / 2 - 
h
 / 2;

570 #ifde‡
MENU_ALIGN_LEFT


571 i‡(
x
 > 12) x = 12;

575 
	`míu_døw_begö
(1, 0);

576 
	`míu_døw_£À˘i⁄
(
x
, 
y
 + 
vi_£l_ 
 * 
me_mf⁄t_h
, 
w
);

577 
x
 +
me_mf⁄t_w
 * 2;

579 
ít
 = 
íåõs
;É¡->
«me
;Ént++)

581 c⁄° **
«mes
;

582 
Àn
, 
À·«me_íd
 = 0;

584 i‡(!
ít
->
íabÀd
)

587 
«me
 = 
ít
->name;

588 i‡(
	`°æí
(
«me
) == 0) {

589 i‡(
ít
->
gíî©e_«me
)

590 
«me
 = 
ít
->
	`gíî©e_«me
”¡->
id
, &
offs
);

592 i‡(
«me
 !
NULL
) {

593 
	`ãxt_out16
(
x
, 
y
, 
«me
);

594 
À·«me_íd
 = 
x
 + (
	`°æí
(
«me
Ë+ 1Ë* 
me_mf⁄t_w
;

597 
ít
->
beh
) {

598 
MB_NONE
:

600 
MB_OPT_ONOFF
:

601 
	`ãxt_out16
(
x
 + 
cﬁ2_offs
, 
y
, 
	`me_ªad_⁄off
(
ít
) ? "ON" : "OFF");

603 
MB_OPT_RANGE
:

604 
	`ãxt_out16
(
x
 + 
cﬁ2_offs
, 
y
, "%i", *(*)
ít
->
v¨
);

606 
MB_OPT_CUSTOM
:

607 
MB_OPT_CUSTONOFF
:

608 
MB_OPT_CUSTRANGE
:

609 
«me
 = 
NULL
;

610 
offs
 = 0;

611 i‡(
ít
->
gíî©e_«me
)

612 
«me
 = 
ít
->
	`gíî©e_«me
”¡->
id
, &
offs
);

613 i‡(
«me
 !
NULL
)

614 
	`ãxt_out16
(
x
 + 
cﬁ2_offs
 + 
offs
 * 
me_mf⁄t_w
, 
y
, "%s", 
«me
);

616 
MB_OPT_ENUM
:

617 
«mes
 = (c⁄° **)
ít
->
d©a
;

618 
i
 = 0; 
«mes
[i] !
NULL
; i++) {

619 
offs
 = 
x
 + 
cﬁ2_offs
;

620 
Àn
 = 
	`°æí
(
«mes
[
i
]);

621 i‡(
Àn
 > 10)

622 
offs
 +(10 - 
Àn
 - 2Ë* 
me_mf⁄t_w
;

623 i‡(
offs
 < 
À·«me_íd
)

624 
offs
 = 
À·«me_íd
;

625 i‡(
i
 =*(*)
ít
->
v¨
) {

626 
	`ãxt_out16
(
offs
, 
y
, "%s", 
«mes
[
i
]);

633 
y
 +
me_mf⁄t_h
;

636 
	`míu_£∑øti⁄
();

639 
h
 = (
g_míus¸ìn_h
 - h) / 2;

640 i‡(
míu_îr‹_msg
[0] != 0) {

641 i‡(
h
 >
me_mf⁄t_h
 + 4)

642 
	`ãxt_out16
(5, 
g_míus¸ìn_h
 - 
me_mf⁄t_h
 - 4, 
míu_îr‹_msg
);

644 
	`Õrötf
("menu msg doesn't fit!\n");

646 i‡(
	`∂©_gë_ticks_ms
(Ë- 
míu_îr‹_time
 > 2048)

647 
míu_îr‹_msg
[0] = 0;

649 i‡(
ít_£l
->
hñp
 !
NULL
) {

650 c⁄° *
tmp
 = 
ít_£l
->
hñp
;

651 
l
;

652 
l
 = 0; 
tmp
 !
NULL
 && *tmp != 0;Ü++)

653 
tmp
 = 
	`°rchr
(tmp + 1, '\n');

654 i‡(
h
 >
l
 * 
me_sf⁄t_h
 + 4)

655 
tmp
 = 
ít_£l
->
hñp
; 
l
 > 0;Ü--,Åm∞
	`°rchr
(tmp, '\n') + 1)

656 
	`smÆ…ext_out16
(5, 
g_míus¸ìn_h
 - (
l
 * 
me_sf⁄t_h
 + 4), 
tmp
, 0xffff);

659 
	`míu_£∑øti⁄
();

661 i‡(
døw_m‹e
 !
NULL
)

662 
	`døw_m‹e
();

664 
	`míu_døw_íd
();

665 
	}
}

667 
	$me_¥o˚ss
(
míu_íåy
 *
íåy
, 
is_√xt
, 
is_Ã
)

669 c⁄° **
«mes
;

670 
c
;

671 
íåy
->
beh
)

673 
MB_OPT_ONOFF
:

674 
MB_OPT_CUSTONOFF
:

675 
	`me_toggÀ_⁄off
(
íåy
);

677 
MB_OPT_RANGE
:

678 
MB_OPT_CUSTRANGE
:

679 
c
 = 
is_Ã
 ? 10 : 1;

680 *(*)
íåy
->
v¨
 +
is_√xt
 ? 
c
 : -c;

681 i‡(*(*)
íåy
->
v¨
 < (Î¡ry->
mö
)

682 *(*)
íåy
->
v¨
 = (Î¡ry->
max
;

683 i‡(*(*)
íåy
->
v¨
 > (Î¡ry->
max
)

684 *(*)
íåy
->
v¨
 = (Î¡ry->
mö
;

686 
MB_OPT_ENUM
:

687 
«mes
 = (c⁄° **)
íåy
->
d©a
;

688 
c
 = 0; 
«mes
[c] !
NULL
; c++)

690 *(sig√d *)
íåy
->
v¨
 +
is_√xt
 ? 1 : -1;

691 i‡(*(sig√d *)
íåy
->
v¨
 < 0)

692 *(sig√d *)
íåy
->
v¨
 = 0;

693 i‡(*(sig√d *)
íåy
->
v¨
 >
c
)

694 *(sig√d *)
íåy
->
v¨
 = 
c
 - 1;

699 
	}
}

701 
debug_míu_lo›
();

703 
me_lo›_d
(
míu_íåy
 *
míu
, *
míu_£l
, (*
døw_¥ï
)(), (*
døw_m‹e
)())

705 
ªt
 = 0, 
öp
, 
£l
 = *
míu_£l
, 
míu_£l_max
;

707 
míu_£l_max
 = 
	`me_cou¡
(
míu
) - 1;

708 i‡(
míu_£l_max
 < 0) {

709 
	`Õrötf
("noÉnabled menuÉntries\n");

713 (!
míu
[
£l
].
íabÀd
 || !míu[£l].
£À˘abÀ
Ë&& sñ < 
míu_£l_max
)

714 
£l
++;

717 
	`me_døw
(
míu
, 
£l
, 
NULL
);

718 
	`ö_míu_waô_™y
(
NULL
, 50Ë& (
PBTN_MOK
|
PBTN_MBACK
|
PBTN_MENU
));

722 i‡(
døw_¥ï
 !
NULL
)

723 
	`døw_¥ï
();

725 
	`me_døw
(
míu
, 
£l
, 
døw_m‹e
);

726 
öp
 = 
	`ö_míu_waô
(
PBTN_UP
|
PBTN_DOWN
|
PBTN_LEFT
|
PBTN_RIGHT
|

727 
PBTN_MOK
|
PBTN_MBACK
|
PBTN_MENU
|
PBTN_L
|
PBTN_R
, 
NULL
, 70);

728 i‡(
öp
 & (
PBTN_MENU
|
PBTN_MBACK
))

731 i‡(
öp
 & 
PBTN_UP
 ) {

733 
£l
--;

734 i‡(
£l
 < 0)

735 
£l
 = 
míu_£l_max
;

737 !
míu
[
£l
].
íabÀd
 || !míu[£l].
£À˘abÀ
);

739 i‡(
öp
 & 
PBTN_DOWN
) {

741 
£l
++;

742 i‡(
£l
 > 
míu_£l_max
)

743 
£l
 = 0;

745 !
míu
[
£l
].
íabÀd
 || !míu[£l].
£À˘abÀ
);

749 i‡((
öp
 & (
PBTN_L
|
PBTN_R
)) == (PBTN_L|PBTN_R))

750 
	`debug_míu_lo›
();

752 i‡(
öp
 & (
PBTN_LEFT
|
PBTN_RIGHT
|
PBTN_L
|
PBTN_R
)) {

753 i‡(
	`me_¥o˚ss
(&
míu
[
£l
], (
öp
 & (
PBTN_RIGHT
|
PBTN_R
)) ? 1 : 0,

754 
öp
 & (
PBTN_L
|
PBTN_R
)))

758 i‡(
öp
 & (
PBTN_MOK
|
PBTN_LEFT
|
PBTN_RIGHT
|
PBTN_L
|
PBTN_R
))

761 i‡(
míu
[
£l
].
h™dÀr
 !
NULL
 && (míu[£l].
beh
 !
MB_NONE
 || (
öp
 & 
PBTN_MOK
))) {

762 
ªt
 = 
míu
[
£l
].
	`h™dÀr
(míu[£l].
id
, 
öp
);

763 i‡(
ªt
) ;

764 
míu_£l_max
 = 
	`me_cou¡
(
míu
) - 1;

768 *
míu_£l
 = 
£l
;

770  
ªt
;

771 
	}
}

773 
	$me_lo›
(
míu_íåy
 *
míu
, *
míu_£l
)

775  
	`me_lo›_d
(
míu
, 
míu_£l
, 
NULL
, NULL);

776 
	}
}

780 
døw_míu_mesßge
(c⁄° *
msg
, (*
døw_m‹e
)())

782 
x
, 
y
, 
h
, 
w
, 
wt
;

783 c⁄° *
p
;

785 
p
 = 
msg
;

786 
h
 = 1, 
w
 = 0; *
p
 != 0; h++) {

787 
wt
 = 0; *
p
 != 0 && *p != '\n';Ö++)

788 
wt
++;

790 i‡(
wt
 > 
w
)

791 
w
 = 
wt
;

792 i‡(*
p
 == 0)

794 
p
++;

797 
x
 = 
g_míus¸ìn_w
 / 2 - 
w
 * 
me_mf⁄t_w
 / 2;

798 
y
 = 
g_míus¸ìn_h
 / 2 - 
h
 * 
me_mf⁄t_h
 / 2;

799 i‡(
x
 < 0) x = 0;

800 i‡(
y
 < 0) y = 0;

802 
	`míu_døw_begö
(1, 0);

804 
p
 = 
msg
; *∞!0 && 
y
 <
g_míus¸ìn_h
 - 
me_mf⁄t_h
; y += me_mfont_h) {

805 
	`ãxt_out16
(
x
, 
y
, 
p
);

807 ; *
p
 != 0 && *p != '\n';Ö++)

809 i‡(*
p
 != 0)

810 
p
++;

813 
	`míu_£∑øti⁄
();

815 i‡(
døw_m‹e
 !
NULL
)

816 
	`døw_m‹e
();

818 
	`míu_døw_íd
();

819 
	}
}

823 
	$do_dñëe
(c⁄° *
Â©h
, c⁄° *
‚ame
)

825 
Àn
, 
mid
, 
öp
;

826 c⁄° *
nm
;

827 
tmp
[64];

829 
	`míu_døw_begö
(1, 0);

831 
Àn
 = 
	`°æí
(
‚ame
);

832 i‡(
Àn
 > 
g_míus¸ìn_w
 / 
me_sf⁄t_w
)

833 
Àn
 = 
g_míus¸ìn_w
 / 
me_sf⁄t_w
;

835 
mid
 = 
g_míus¸ìn_w
 / 2;

836 
	`ãxt_out16
(
mid
 - 
me_mf⁄t_w
 * 15 / 2, 8 * 
me_mf⁄t_h
, "AboutÅo delete");

837 
	`smÆ…ext_out16
(
mid
 - 
Àn
 * 
me_sf⁄t_w
 / 2, 9 * 
me_mf⁄t_h
 + 5, 
‚ame
, 0xbdff);

838 
	`ãxt_out16
(
mid
 - 
me_mf⁄t_w
 * 13 / 2, 11 * 
me_mf⁄t_h
, "Are you sure?");

840 
nm
 = 
	`ö_gë_key_«me
(-1, -
PBTN_MA3
);

841 
	`¢¥ötf
(
tmp
, —mp), "(%†- c⁄fúm, ", 
nm
);

842 
Àn
 = 
	`°æí
(
tmp
);

843 
nm
 = 
	`ö_gë_key_«me
(-1, -
PBTN_MBACK
);

844 
	`¢¥ötf
(
tmp
 + 
Àn
, —mpË-Üí, "%†- c™˚l)", 
nm
);

845 
Àn
 = 
	`°æí
(
tmp
);

847 
	`ãxt_out16
(
mid
 - 
me_mf⁄t_w
 * 
Àn
 / 2, 12 * 
me_mf⁄t_h
, 
tmp
);

848 
	`míu_døw_íd
();

850 
	`ö_míu_waô_™y
(
NULL
, 50Ë& (
PBTN_MENU
|
PBTN_MA2
));

851 
öp
 = 
	`ö_míu_waô
(
PBTN_MA3
|
PBTN_MBACK
, 
NULL
, 100);

852 i‡(
öp
 & 
PBTN_MA3
)

853 
	`ªmove
(
Â©h
);

854 
	}
}

858 
	$døw_dúli°
(*
curdú
, 
dúít
 **
«mñi°
,

859 
n
, 
£l
, 
show_hñp
)

861 
max_˙t
, 
°¨t
, 
i
, 
x
, 
pos
;

862 *
d¨kí_±r
;

863 
buff
[64];

865 
max_˙t
 = 
g_míus¸ìn_h
 / 
me_sf⁄t_h
;

866 
°¨t
 = 
max_˙t
 / 2 - 
£l
;

867 
n
--;

869 
	`míu_døw_begö
(1, 1);

874 
d¨kí_±r
 = (*)
g_míus¸ìn_±r
 + 
g_míus¸ìn_w
 * 
max_˙t
/2 * 
me_sf⁄t_h
;

875 
	`míu_d¨kí_bg
(
d¨kí_±r
, d¨kí_±r, 
g_míus¸ìn_w
 * 
me_sf⁄t_h
 * 8 / 10, 0);

877 
x
 = 5 + 
me_mf⁄t_w
 + 1;

878 i‡(
°¨t
 - 2 >= 0)

879 
	`smÆ…ext_out16
(14, (
°¨t
 - 2Ë* 
me_sf⁄t_h
, 
curdú
, 0xffff);

880 
i
 = 0; i < 
n
; i++) {

881 
pos
 = 
°¨t
 + 
i
;

882 i‡(
pos
 < 0) ;

883 i‡(
pos
 >
max_˙t
) ;

884 i‡(
«mñi°
[
i
+1]->
d_ty≥
 =
DT_DIR
) {

885 
	`smÆ…ext_out16
(
x
, 
pos
 * 
me_sf⁄t_h
, "/", 0xfff6);

886 
	`smÆ…ext_out16
(
x
 + 
me_sf⁄t_w
, 
pos
 * 
me_sf⁄t_h
, 
«mñi°
[
i
+1]->
d_«me
, 0xfff6);

888 
cﬁ‹
 = 
	`‚ame2cﬁ‹
(
«mñi°
[
i
+1]->
d_«me
);

889 
	`smÆ…ext_out16
(
x
, 
pos
 * 
me_sf⁄t_h
, 
«mñi°
[
i
+1]->
d_«me
, 
cﬁ‹
);

892 
	`smÆ…ext_out16
(5, 
max_˙t
/2 * 
me_sf⁄t_h
, ">", 0xffff);

894 i‡(
show_hñp
) {

895 
d¨kí_±r
 = (*)
g_míus¸ìn_±r


896 + 
g_míus¸ìn_w
 * (
g_míus¸ìn_h
 - 
me_sf⁄t_h
 * 5 / 2);

897 
	`míu_d¨kí_bg
(
d¨kí_±r
, darken_ptr,

898 
g_míus¸ìn_w
 * (
me_sf⁄t_h
 * 5 / 2), 1);

900 
	`¢¥ötf
(
buff
, (buff), "%s - select, %s - back",

901 
	`ö_gë_key_«me
(-1, -
PBTN_MOK
), in_gë_key_«me(-1, -
PBTN_MBACK
));

902 
	`smÆ…ext_out16
(
x
, 
g_míus¸ìn_h
 - 
me_sf⁄t_h
 * 3 - 2, 
buff
, 0xe78c);

904 
	`¢¥ötf
(
buff
, (buff), 
g_míu_fûãr_off
 ?

906 
	`ö_gë_key_«me
(-1, -
PBTN_MA3
));

907 
	`smÆ…ext_out16
(
x
, 
g_míus¸ìn_h
 - 
me_sf⁄t_h
 * 2 - 2, 
buff
, 0xe78c);

909 
	`¢¥ötf
(
buff
, (buff), 
g_auto°©ñd_›t
 ?

911 
	`ö_gë_key_«me
(-1, -
PBTN_MA2
));

912 
	`smÆ…ext_out16
(
x
, 
g_míus¸ìn_h
 - 
me_sf⁄t_h
 * 1 - 2, 
buff
, 0xe78c);

915 
	`míu_døw_íd
();

916 
	}
}

918 
	$sˇndú_cmp
(c⁄° *
p1
, c⁄° *
p2
)

920 c⁄° 
dúít
 **
d1
 = (c⁄° dúíà**)
p1
;

921 c⁄° 
dúít
 **
d2
 = (c⁄° dúíà**)
p2
;

922 i‡((*
d1
)->
d_ty≥
 =(*
d2
)->d_type)

923  
	`Æphas‹t
(
d1
, 
d2
);

924 i‡((*
d1
)->
d_ty≥
 =
DT_DIR
)

926 i‡((*
d2
)->
d_ty≥
 =
DT_DIR
)

929  
	`Æphas‹t
(
d1
, 
d2
);

930 
	}
}

932 c⁄° **
	gfûãr_exts_öã∫Æ
;

934 
	$sˇndú_fûãr
(c⁄° 
dúít
 *
ít
)

936 c⁄° **
fûãr
 = 
fûãr_exts_öã∫Æ
;

937 c⁄° *
ext
;

938 
i
;

940 i‡(
ít
 =
NULL
 ||É¡->
d_«me
 == NULL)

943 
ít
->
d_ty≥
) {

944 
DT_DIR
:

946 
DT_LNK
:

947 
DT_UNKNOWN
:

952 
ext
 = 
	`°ºchr
(
ít
->
d_«me
, '.');

953 i‡(
ext
 =
NULL
)

956 
ext
++;

957 
i
 = 0; 
fûãr
[i] !
NULL
; i++)

958 i‡(
	`°rˇ£cmp
(
ext
, 
fûãr
[
i
]) == 0)

962 
	}
}

964 
	$dúít_£ek_ch¨
(
dúít
 **
«mñi°
, 
Àn
, 
£l
, 
c
)

966 
i
;

968 
£l
++;

969 
i
 = 
£l
 + 1; ; i++) {

970 i‡(
i
 >
Àn
)

971 
i
 = 1;

972 i‡(
i
 =
£l
)

975 i‡(
	`tﬁowî_sim∂e
(
«mñi°
[
i
]->
d_«me
[0]Ë=
c
)

979  
i
 - 1;

980 
	}
}

982 c⁄° *
míu_lo›_rom£l
(*
cuº_∑th
, 
Àn
,

983 c⁄° **
fûãr_exts
,

984 (*
exåa_fûãr
)(
dúít
 **
«mñi°
, 
cou¡
,

985 c⁄° *
ba£dú
))

987 
rom_‚ame_ªlﬂd
[256];

988 
£l_‚ame
[256];

989 (*
fûãr
)(c⁄° 
dúít
 *);

990 
dúít
 **
«mñi°
 = 
NULL
;

991 
n
 = 0, 
öp
 = 0, 
£l
 = 0, 
show_hñp
 = 0;

992 *
cuº_∑th_ª°‹e
 = 
NULL
;

993 c⁄° *
ªt
 = 
NULL
;

994 
ch™ged
;

995 
cöp
;

996 
r
, 
i
;

998 
fûãr_exts_öã∫Æ
 = 
fûãr_exts
;

999 
£l_‚ame
[0] = 0;

1002 i‡(!
	`∂©_is_dú
(
cuº_∑th
)) {

1003 *
p
 = 
	`°ºchr
(
cuº_∑th
, '/');

1004 i‡(
p
 !
NULL
) {

1005 *
p
 = 0;

1006 
cuº_∑th_ª°‹e
 = 
p
;

1007 
	`¢¥ötf
(
£l_‚ame
, (£l_‚ame), "%s", 
p
 + 1);

1010 i‡(
rom_‚ame_ªlﬂd
[0] == 0)

1011 
show_hñp
 = 2;

1014 
ªsˇn
:

1015 i‡(
«mñi°
 !
NULL
) {

1016 
n
-- > 0)

1017 
	`‰ì
(
«mñi°
[
n
]);

1018 
	`‰ì
(
«mñi°
);

1019 
«mñi°
 = 
NULL
;

1022 
fûãr
 = 
NULL
;

1023 i‡(!
g_míu_fûãr_off
)

1024 
fûãr
 = 
sˇndú_fûãr
;

1026 
n
 = 
	`sˇndú
(
cuº_∑th
, &
«mñi°
, 
fûãr
, (*)
sˇndú_cmp
);

1027 i‡(
n
 < 0) {

1028 *
t
;

1029 
	`Õrötf
("míu_lo›_rom£»Áûed, dú: %s\n", 
cuº_∑th
);

1032 
t
 = 
	`gëcwd
(
cuº_∑th
, 
Àn
);

1033 i‡(
t
 =
NULL
)

1034 
	`∂©_gë_roŸ_dú
(
cuº_∑th
, 
Àn
);

1035 
n
 = 
	`sˇndú
(
cuº_∑th
, &
«mñi°
, 
fûãr
, (*)
sˇndú_cmp
);

1036 i‡(
n
 < 0) {

1038 
	`Õrötf
("míu_lo›_rom£»Áûed, dú: %s\n", 
cuº_∑th
);

1039  
NULL
;

1044 
ch™ged
 = 0;

1045 
i
 = 0; i < 
n
; i++) {

1046 
°©
 
°
;

1048 i‡(
«mñi°
[
i
]->
d_ty≥
 =
DT_REG
 ||Çamñi°[i]->d_ty≥ =
DT_DIR
)

1051 
	`¢¥ötf
(
rom_‚ame_ªlﬂd
, (rom_fname_reload),

1052 "%s/%s", 
cuº_∑th
, 
«mñi°
[
i
]->
d_«me
);

1053 
r
 = 
	`°©
(
rom_‚ame_ªlﬂd
, &
°
);

1054 i‡(
r
 == 0)

1056 i‡(
	`S_ISREG
(
°
.
°_mode
)) {

1057 
«mñi°
[
i
]->
d_ty≥
 = 
DT_REG
;

1058 
ch™ged
 = 1;

1060 i‡(
	`S_ISDIR
(
°
.
°_mode
)) {

1061 
«mñi°
[
i
]->
d_ty≥
 = 
DT_DIR
;

1062 
ch™ged
 = 1;

1067 i‡(!
g_míu_fûãr_off
 && 
exåa_fûãr
 !
NULL
)

1068 
n
 = 
	`exåa_fûãr
(
«mñi°
,Ç, 
cuº_∑th
);

1070 i‡(
n
 > 1 && 
ch™ged
)

1071 
	`qs‹t
(
«mñi°
, 
n
, “amñi°[0]), 
sˇndú_cmp
);

1075 
£l
 = 0;

1076 i‡(
£l_‚ame
[0] != 0) {

1077 
i
 = 1; i < 
n
; i++) {

1078 *
d«me
 = 
«mñi°
[
i
]->
d_«me
;

1079 i‡(
d«me
[0] =
£l_‚ame
[0] && 
	`°rcmp
(dname, sel_fname) == 0) {

1080 
£l
 = 
i
 - 1;

1087 
	`døw_dúli°
(
cuº_∑th
, 
«mñi°
, 
n
, 
£l
, 
show_hñp
);

1088 
	`ö_míu_waô_™y
(
NULL
, 50Ë& (
PBTN_MOK
|
PBTN_MBACK
|
PBTN_MENU
))

1093 
	`døw_dúli°
(
cuº_∑th
, 
«mñi°
, 
n
, 
£l
, 
show_hñp
);

1094 
öp
 = 
	`ö_míu_waô
(
PBTN_UP
|
PBTN_DOWN
|
PBTN_LEFT
|
PBTN_RIGHT


1095 | 
PBTN_L
|
PBTN_R
|
PBTN_MA2
|
PBTN_MA3
|
PBTN_MOK
|
PBTN_MBACK


1096 | 
PBTN_MENU
|
PBTN_CHAR
, &
cöp
, 33);

1097 i‡(
öp
 & 
PBTN_MA3
) {

1098 
g_míu_fûãr_off
 = !g_menu_filter_off;

1099 
	`¢¥ötf
(
£l_‚ame
, (sel_fname), "%s",

1100 
«mñi°
[
£l
+1]->
d_«me
);

1101 
ªsˇn
;

1103 i‡(
öp
 & 
PBTN_UP
 ) { 
£l
--; i‡(£»< 0Ë£»
n
-2; }

1104 i‡(
öp
 & 
PBTN_DOWN
Ë{ 
£l
++; i‡(£»> 
n
-2) sel = 0; }

1105 i‡(
öp
 & 
PBTN_LEFT
Ë{ 
£l
-=10; if (sel < 0) sel = 0; }

1106 i‡(
öp
 & 
PBTN_L
Ë{ 
£l
-=24; if (sel < 0) sel = 0; }

1107 i‡(
öp
 & 
PBTN_RIGHT
Ë{ 
£l
+=10; i‡(£»> 
n
-2) sel =Ç-2; }

1108 i‡(
öp
 & 
PBTN_R
Ë{ 
£l
+=24; i‡(£»> 
n
-2) sel =Ç-2; }

1110 i‡((
öp
 & 
PBTN_MOK
Ë|| (ö∞& (
PBTN_MENU
|
PBTN_MA2
)) == (PBTN_MENU|PBTN_MA2))

1112 i‡(
«mñi°
[
£l
+1]->
d_ty≥
 =
DT_REG
)

1114 
	`¢¥ötf
(
rom_‚ame_ªlﬂd
, (rom_fname_reload),

1115 "%s/%s", 
cuº_∑th
, 
«mñi°
[
£l
+1]->
d_«me
);

1116 i‡(
öp
 & 
PBTN_MOK
) {

1117 
ªt
 = 
rom_‚ame_ªlﬂd
;

1120 
	`do_dñëe
(
rom_‚ame_ªlﬂd
, 
«mñi°
[
£l
+1]->
d_«me
);

1121 
ªsˇn
;

1123 i‡(
«mñi°
[
£l
+1]->
d_ty≥
 =
DT_DIR
)

1125 
√wÀn
;

1126 *
p
, *
√wdú
;

1127 i‡(!(
öp
 & 
PBTN_MOK
))

1129 
√wÀn
 = 
	`°æí
(
cuº_∑th
Ë+ såÀn(
«mñi°
[
£l
+1]->
d_«me
) + 2;

1130 
√wdú
 = 
	`mÆloc
(
√wÀn
);

1131 i‡(
√wdú
 =
NULL
)

1133 i‡(
	`°rcmp
(
«mñi°
[
£l
+1]->
d_«me
, "..") == 0) {

1134 *
°¨t
 = 
cuº_∑th
;

1135 
p
 = 
°¨t
 + 
	`°æí
(start) - 1;

1136 *
p
 ='/' &&Ö > 
°¨t
)Ö--;

1137 *
p
 !'/' &&Ö > 
°¨t
)Ö--;

1138 i‡(
p
 <
°¨t
Ë
	`°r˝y
(
√wdú
, "/");

1139 { 
	`°∫˝y
(
√wdú
, 
°¨t
, 
p
-start);Çewdir[p-start] = 0; }

1141 
	`°r˝y
(
√wdú
, 
cuº_∑th
);

1142 
p
 = 
√wdú
 + 
	`°æí
(newdir) - 1;

1143 *
p
 ='/' &&Ö >
√wdú
) *p-- = 0;

1144 
	`°rˇt
(
√wdú
, "/");

1145 
	`°rˇt
(
√wdú
, 
«mñi°
[
£l
+1]->
d_«me
);

1147 
ªt
 = 
	`míu_lo›_rom£l
(
√wdú
, 
√wÀn
, 
fûãr_exts
, 
exåa_fûãr
);

1148 
	`‰ì
(
√wdú
);

1152 i‡(
öp
 & 
PBTN_MA2
) {

1153 
g_auto°©ñd_›t
 = !g_autostateld_opt;

1154 
show_hñp
 = 3;

1156 i‡(
öp
 & 
PBTN_CHAR
) {

1158 
£l
 = 
	`dúít_£ek_ch¨
(
«mñi°
, 
n
, sñ, 
cöp
);

1161 i‡(
öp
 & 
PBTN_MBACK
)

1164 i‡(
show_hñp
 > 0)

1165 
show_hñp
--;

1168 i‡(
n
 > 0) {

1169 
n
-- > 0)

1170 
	`‰ì
(
«mñi°
[
n
]);

1171 
	`‰ì
(
«mñi°
);

1175 i‡(
cuº_∑th_ª°‹e
 !
NULL
)

1176 *
cuº_∑th_ª°‹e
 = '/';

1178  
ªt
;

1179 
	}
}

1183 
	#STATE_SLOT_COUNT
 10

	)

1185 
	g°©e_¶Ÿ_Êags
 = 0;

1186 
	g°©e_¶Ÿ_times
[
STATE_SLOT_COUNT
];

1188 
	$°©e_check_¶Ÿs
()

1190 
¶Ÿ
;

1192 
°©e_¶Ÿ_Êags
 = 0;

1194 
¶Ÿ
 = 0; slŸ < 
STATE_SLOT_COUNT
; slot++) {

1195 
°©e_¶Ÿ_times
[
¶Ÿ
] = 0;

1196 i‡(
	`emu_check_ßve_fûe
(
¶Ÿ
, &
°©e_¶Ÿ_times
[slot]))

1197 
°©e_¶Ÿ_Êags
 |1 << 
¶Ÿ
;

1199 
	}
}

1201 
døw_ßve°©e_bg
(
¶Ÿ
);

1203 
	$døw_ßve°©e_míu
(
míu_£l
, 
is_lﬂdög
)

1205 
i
, 
x
, 
y
, 
w
, 
h
;

1206 
time_buf
[32];

1208 i‡(
°©e_¶Ÿ_Êags
 & (1 << 
míu_£l
))

1209 
	`døw_ßve°©e_bg
(
míu_£l
);

1211 
w
 = (13 + 2Ë* 
me_mf⁄t_w
;

1212 
h
 = (1+2+
STATE_SLOT_COUNT
+1Ë* 
me_mf⁄t_h
;

1213 
x
 = 
g_míus¸ìn_w
 / 2 - 
w
 / 2;

1214 i‡(
x
 < 0) x = 0;

1215 
y
 = 
g_míus¸ìn_h
 / 2 - 
h
 / 2;

1216 i‡(
y
 < 0) y = 0;

1217 #ifde‡
MENU_ALIGN_LEFT


1218 i‡(
x
 > 12 + 
me_mf⁄t_w
 * 2)

1219 
x
 = 12 + 
me_mf⁄t_w
 * 2;

1222 
	`míu_døw_begö
(1, 1);

1224 
	`ãxt_out16
(
x
, 
y
, 
is_lﬂdög
 ? "Load state" : "Save state");

1225 
y
 +3 * 
me_mf⁄t_h
;

1227 
	`míu_døw_£À˘i⁄
(
x
 - 
me_mf⁄t_w
 * 2, 
y
 + 
míu_£l
 * 
me_mf⁄t_h
, (23 + 2) * me_mfont_w + 4);

1230 
i
 = 0; i < 
STATE_SLOT_COUNT
; i++, 
y
 +
me_mf⁄t_h
)

1232 i‡(!(
°©e_¶Ÿ_Êags
 & (1 << 
i
)))

1233 
	`°r˝y
(
time_buf
, "free");

1235 
	`°r˝y
(
time_buf
, "USED");

1236 i‡(
°©e_¶Ÿ_times
[
i
] != 0) {

1237 
time_t
 
time
 = 
°©e_¶Ÿ_times
[
i
];

1238 
tm
 *
t
 = 
	`loˇ…ime
(&
time
);

1239 
	`°r·ime
(
time_buf
, —ime_buf), "%x %R", 
t
);

1243 
	`ãxt_out16
(
x
, 
y
, "SLOT %ò(%s)", 
i
, 
time_buf
);

1245 
	`ãxt_out16
(
x
, 
y
, "back");

1247 
	`míu_døw_íd
();

1248 
	}
}

1250 
	$míu_lo›_ßve°©e
(
is_lﬂdög
)

1252 
míu_£l
 = 
STATE_SLOT_COUNT
;

1253 
míu_£l_max
 = 
STATE_SLOT_COUNT
;

1254 
öp
 = 0;

1255 
ªt
 = 0;

1257 
	`°©e_check_¶Ÿs
();

1259 i‡(!(
°©e_¶Ÿ_Êags
 & (1 << 
míu_£l
)Ë&& 
is_lﬂdög
)

1260 
míu_£l
 = 
míu_£l_max
;

1264 
	`døw_ßve°©e_míu
(
míu_£l
, 
is_lﬂdög
);

1265 
öp
 = 
	`ö_míu_waô
(
PBTN_UP
|
PBTN_DOWN
|
PBTN_MOK
|
PBTN_MBACK
, 
NULL
, 100);

1266 i‡(
öp
 & 
PBTN_UP
) {

1268 
míu_£l
--;

1269 i‡(
míu_£l
 < 0)

1270 
míu_£l
 = 
míu_£l_max
;

1271 } !(
°©e_¶Ÿ_Êags
 & (1 << 
míu_£l
)Ë&& míu_£»!
míu_£l_max
 && 
is_lﬂdög
);

1273 i‡(
öp
 & 
PBTN_DOWN
) {

1275 
míu_£l
++;

1276 i‡(
míu_£l
 > 
míu_£l_max
)

1277 
míu_£l
 = 0;

1278 } !(
°©e_¶Ÿ_Êags
 & (1 << 
míu_£l
)Ë&& míu_£»!
míu_£l_max
 && 
is_lﬂdög
);

1280 i‡(
öp
 & 
PBTN_MOK
) {

1281 i‡(
míu_£l
 < 
STATE_SLOT_COUNT
) {

1282 
°©e_¶Ÿ
 = 
míu_£l
;

1283 i‡(
	`emu_ßve_lﬂd_game
(
is_lﬂdög
, 0)) {

1284 
	`míu_upd©e_msg
(
is_lﬂdög
 ? "Load failed" : "Save failed");

1287 
ªt
 = 1;

1292 i‡(
öp
 & 
PBTN_MBACK
)

1296  
ªt
;

1297 
	}
}

1301 *
	$a˘i⁄_böds
(
∂ayî_idx
, 
a˘i⁄_mask
, 
dev_id
)

1303 
dev
 = 0, 
dev_œ°
 = 
IN_MAX_DEVS
 - 1;

1304 
ˇn_combo
 = 1, 
ty≥
;

1306 
°©ic_buff
[0] = 0;

1308 
ty≥
 = 
IN_BINDTYPE_EMU
;

1309 i‡(
∂ayî_idx
 >= 0) {

1310 
ˇn_combo
 = 0;

1311 
ty≥
 = 
IN_BINDTYPE_PLAYER12
;

1313 i‡(
∂ayî_idx
 == 1)

1314 
a˘i⁄_mask
 <<= 16;

1316 i‡(
dev_id
 >= 0)

1317 
dev
 = 
dev_œ°
 = 
dev_id
;

1319 ; 
dev
 <
dev_œ°
; dev++) {

1320 
k
, 
cou¡
 = 0, 
combo
 = 0;

1321 c⁄° *
böds
;

1323 
böds
 = 
	`ö_gë_dev_böds
(
dev
);

1324 i‡(
böds
 =
NULL
)

1327 
	`ö_gë_c⁄fig
(
dev
, 
IN_CFG_BIND_COUNT
, &
cou¡
);

1328 
	`ö_gë_c⁄fig
(
dev
, 
IN_CFG_DOES_COMBOS
, &
combo
);

1329 
combo
 = combÿ&& 
ˇn_combo
;

1331 
k
 = 0; k < 
cou¡
; k++) {

1332 c⁄° *
x«me
;

1333 
Àn
;

1335 i‡(!(
böds
[
	`IN_BIND_OFFS
(
k
, 
ty≥
)] & 
a˘i⁄_mask
))

1338 
x«me
 = 
	`ö_gë_key_«me
(
dev
, 
k
);

1339 
Àn
 = 
	`°æí
(
°©ic_buff
);

1340 i‡(
Àn
) {

1341 
	`°∫ˇt
(
°©ic_buff
, 
combo
 ? " + " : ", ",

1342 (
°©ic_buff
Ë- 
Àn
 - 1);

1343 
Àn
 +
combo
 ? 3 : 2;

1345 
	`°∫ˇt
(
°©ic_buff
, 
x«me
, (°©ic_buffË- 
Àn
 - 1);

1349  
°©ic_buff
;

1350 
	}
}

1352 
	$cou¡_bound_keys
(
dev_id
, 
a˘i⁄_mask
, 
bödty≥
)

1354 c⁄° *
böds
;

1355 
k
, 
keys
 = 0;

1356 
cou¡
 = 0;

1358 
böds
 = 
	`ö_gë_dev_böds
(
dev_id
);

1359 i‡(
böds
 =
NULL
)

1362 
	`ö_gë_c⁄fig
(
dev_id
, 
IN_CFG_BIND_COUNT
, &
cou¡
);

1363 
k
 = 0; k < 
cou¡
; k++)

1365 i‡(
böds
[
	`IN_BIND_OFFS
(
k
, 
bödty≥
)] & 
a˘i⁄_mask
)

1366 
keys
++;

1369  
keys
;

1370 
	}
}

1372 
	$døw_key_c⁄fig
(c⁄° 
me_böd_a˘i⁄
 *
›ts
, 
›t_˙t
, 
∂ayî_idx
,

1373 
£l
, 
dev_id
, 
dev_cou¡
, 
is_böd
)

1375 
buff
[64], 
buff2
[32];

1376 c⁄° *
dev_«me
;

1377 
x
, 
y
, 
w
, 
i
;

1379 
w
 = ((
∂ayî_idx
 >0Ë? 20 : 30Ë* 
me_mf⁄t_w
;

1380 
x
 = 
g_míus¸ìn_w
 / 2 - 
w
 / 2;

1381 
y
 = (
g_míus¸ìn_h
 - 4 * 
me_mf⁄t_h
Ë/ 2 - (2 + 
›t_˙t
) * me_mfont_h / 2;

1382 i‡(
x
 < 
me_mf⁄t_w
 * 2)

1383 
x
 = 
me_mf⁄t_w
 * 2;

1385 
	`míu_døw_begö
(1, 0);

1386 i‡(
∂ayî_idx
 >= 0)

1387 
	`ãxt_out16
(
x
, 
y
, "Pœyî %òc⁄åﬁs", 
∂ayî_idx
 + 1);

1389 
	`ãxt_out16
(
x
, 
y
, "Emulator controls");

1391 
y
 +2 * 
me_mf⁄t_h
;

1392 
	`míu_døw_£À˘i⁄
(
x
 - 
me_mf⁄t_w
 * 2, 
y
 + 
£l
 * 
me_mf⁄t_h
, 
w
 + 2 * me_mfont_w);

1394 
i
 = 0; i < 
›t_˙t
; i++, 
y
 +
me_mf⁄t_h
)

1395 
	`ãxt_out16
(
x
, 
y
, "%†: %s", 
›ts
[
i
].
«me
,

1396 
	`a˘i⁄_böds
(
∂ayî_idx
, 
›ts
[
i
].
mask
, 
dev_id
));

1398 
	`míu_£∑øti⁄
();

1400 i‡(
dev_id
 < 0)

1401 
dev_«me
 = "(all devices)";

1403 
dev_«me
 = 
	`ö_gë_dev_«me
(
dev_id
, 0, 1);

1404 
w
 = 
	`°æí
(
dev_«me
Ë* 
me_mf⁄t_w
;

1405 i‡(
w
 < 30 * 
me_mf⁄t_w
)

1406 
w
 = 30 * 
me_mf⁄t_w
;

1407 i‡(
w
 > 
g_míus¸ìn_w
)

1408 
w
 = 
g_míus¸ìn_w
;

1410 
x
 = 
g_míus¸ìn_w
 / 2 - 
w
 / 2;

1412 i‡(!
is_böd
) {

1413 
	`¢¥ötf
(
buff2
, (buff2), "%s", 
	`ö_gë_key_«me
(-1, -
PBTN_MOK
));

1414 
	`¢¥ötf
(
buff
, (buff), "%†- böd, %†- cÀ¨", 
buff2
,

1415 
	`ö_gë_key_«me
(-1, -
PBTN_MA2
));

1416 
	`ãxt_out16
(
x
, 
g_míus¸ìn_h
 - 4 * 
me_mf⁄t_h
, 
buff
);

1419 
	`ãxt_out16
(
x
, 
g_míus¸ìn_h
 - 4 * 
me_mf⁄t_h
, "Pressá buttonÅo bind/unbind");

1421 i‡(
dev_cou¡
 > 1) {

1422 
	`ãxt_out16
(
x
, 
g_míus¸ìn_h
 - 3 * 
me_mf⁄t_h
, 
dev_«me
);

1423 
	`ãxt_out16
(
x
, 
g_míus¸ìn_h
 - 2 * 
me_mf⁄t_h
, "PressÜeft/right for other devs");

1426 
	`míu_døw_íd
();

1427 
	}
}

1429 
	$key_c⁄fig_lo›
(c⁄° 
me_böd_a˘i⁄
 *
›ts
, 
›t_˙t
, 
∂ayî_idx
)

1431 
i
, 
£l
 = 0, 
míu_£l_max
 = 
›t_˙t
 - 1, 
d€s_combos
 = 0;

1432 
dev_id
, 
böd_dev_id
, 
dev_cou¡
, 
kc
, 
is_down
, 
mkey
;

1433 
unböd
, 
bödty≥
, 
mask_shi·
;

1435 
i
 = 0, 
dev_id
 = -1, 
dev_cou¡
 = 0; i < 
IN_MAX_DEVS
; i++) {

1436 i‡(
	`ö_gë_dev_«me
(
i
, 1, 0Ë!
NULL
) {

1437 
dev_cou¡
++;

1438 i‡(
dev_id
 < 0)

1439 
dev_id
 = 
i
;

1443 i‡(
dev_id
 == -1) {

1444 
	`Õrötf
("no devs, can't do config\n");

1448 
dev_id
 = -1;

1449 
mask_shi·
 = 0;

1450 i‡(
∂ayî_idx
 == 1)

1451 
mask_shi·
 = 16;

1452 
bödty≥
 = 
∂ayî_idx
 >0 ? 
IN_BINDTYPE_PLAYER12
 : 
IN_BINDTYPE_EMU
;

1456 
	`døw_key_c⁄fig
(
›ts
, 
›t_˙t
, 
∂ayî_idx
, 
£l
, 
dev_id
, 
dev_cou¡
, 0);

1457 
mkey
 = 
	`ö_míu_waô
(
PBTN_UP
|
PBTN_DOWN
|
PBTN_LEFT
|
PBTN_RIGHT


1458 |
PBTN_MBACK
|
PBTN_MOK
|
PBTN_MA2
, 
NULL
, 100);

1459 
mkey
) {

1460 
PBTN_UP
: 
£l
--; i‡(£»< 0Ë£»
míu_£l_max
; ;

1461 
PBTN_DOWN
: 
£l
++; i‡(£»> 
míu_£l_max
) sel = 0; ;

1462 
PBTN_LEFT
:

1463 
i
 = 0, 
dev_id
--; i < 
IN_MAX_DEVS
 + 1; i++, dev_id--) {

1464 i‡(
dev_id
 < -1)

1465 
dev_id
 = 
IN_MAX_DEVS
 - 1;

1466 i‡(
dev_id
 =-1 || 
	`ö_gë_dev_«me
(dev_id, 0, 0Ë!
NULL
)

1470 
PBTN_RIGHT
:

1471 
i
 = 0, 
dev_id
++; i < 
IN_MAX_DEVS
; i++, dev_id++) {

1472 i‡(
dev_id
 >
IN_MAX_DEVS
)

1473 
dev_id
 = -1;

1474 i‡(
dev_id
 =-1 || 
	`ö_gë_dev_«me
(dev_id, 0, 0Ë!
NULL
)

1478 
PBTN_MBACK
:

1480 
PBTN_MOK
:

1481 i‡(
£l
 >
›t_˙t
)

1483 
	`ö_míu_waô_™y
(
NULL
, 30Ë& 
PBTN_MOK
)

1486 
PBTN_MA2
:

1487 
	`ö_unböd_Æl
(
dev_id
, 
›ts
[
£l
].
mask
 << 
mask_shi·
, 
bödty≥
);

1492 
	`døw_key_c⁄fig
(
›ts
, 
›t_˙t
, 
∂ayî_idx
, 
£l
, 
dev_id
, 
dev_cou¡
, 1);

1495 
is_down
 = 1; is_down; )

1496 
kc
 = 
	`ö_upd©e_keycode
(&
böd_dev_id
, &
is_down
, 
NULL
, -1);

1498 
i
 = 
	`cou¡_bound_keys
(
böd_dev_id
, 
›ts
[
£l
].
mask
 << 
mask_shi·
, 
bödty≥
);

1499 
unböd
 = (
i
 > 0);

1502 
	`ö_gë_c⁄fig
(
böd_dev_id
, 
IN_CFG_DOES_COMBOS
, &
d€s_combos
);

1503 i‡(
i
 =1 && 
bödty≥
 =
IN_BINDTYPE_EMU
 && 
d€s_combos
)

1504 
unböd
 = 0;

1506 i‡(
unböd
)

1507 
	`ö_unböd_Æl
(
böd_dev_id
, 
›ts
[
£l
].
mask
 << 
mask_shi·
, 
bödty≥
);

1509 
	`ö_böd_key
(
böd_dev_id
, 
kc
, 
›ts
[
£l
].
mask
 << 
mask_shi·
, 
bödty≥
, 0);

1512 i‡(
dev_id
 != -1)

1513 
dev_id
 = 
böd_dev_id
;

1515 
	}
}

	@frontend/libpicofe/menu.h

11 #i‚de‡
LIBPICOFE_MENU_H


12 
	#LIBPICOFE_MENU_H


	)

16 
	mMB_NONE
 = 1,

17 
	mMB_OPT_ONOFF
,

18 
	mMB_OPT_RANGE
,

19 
	mMB_OPT_CUSTOM
,

20 
	mMB_OPT_CUSTONOFF
,

21 
	mMB_OPT_CUSTRANGE
,

22 
	mMB_OPT_ENUM
,

23 } 
	tmíu_behavi‹
;

27 c⁄° *
	m«me
;

28 
míu_behavi‹
 
	mbeh
;

29 
	mid
;

30 *
	mv¨
;

31 
	mmask
;

32 sig√d 
	mmö
;

33 sig√d 
	mmax
;

34 
	míabÀd
:1;

35 
	m√ed_to_ßve
:1;

36 
	m£À˘abÀ
:1;

37 (*
	mh™dÀr
)(
	mid
, 
	mkeys
);

38 c⁄° * (*
	mgíî©e_«me
)(
	mid
, *
	moffs
);

39 c⁄° *
	md©a
;

40 c⁄° *
	mhñp
;

41 } 
	tmíu_íåy
;

43 
	#mì_h™dÀr_id_h
(
«me
, 
id
, 
h™dÀr
, 
hñp
) \

44 { 
«me
, 
MB_NONE
, 
id
, 
NULL
, 0, 0, 0, 1, 0, 1, 
h™dÀr
, NULL, NULL, 
hñp
 }

	)

46 
	#mì_h™dÀr_id
(
«me
, 
id
, 
h™dÀr
) \

47 
	`mì_h™dÀr_id_h
(
«me
, 
id
, 
h™dÀr
, 
NULL
)

	)

49 
	#mì_h™dÀr
(
«me
, 
h™dÀr
) \

50 
	`mì_h™dÀr_id
(
«me
, 
MA_NONE
, 
h™dÀr
)

	)

52 
	#mì_h™dÀr_h
(
«me
, 
h™dÀr
, 
hñp
) \

53 
	`mì_h™dÀr_id_h
(
«me
, 
MA_NONE
, 
h™dÀr
, 
hñp
)

	)

55 
	#mì_œbñ
(
«me
) \

56 { 
«me
, 
MB_NONE
, 
MA_NONE
, 
NULL
, 0, 0, 0, 1, 0, 0, NULL, NULL, NULL, NULL }

	)

58 
	#mì_œbñ_mk
(
id
, 
«me_func
) \

59 { "", 
MB_NONE
, 
id
, 
NULL
, 0, 0, 0, 1, 0, 0, NULL, 
«me_func
, NULL, NULL }

	)

61 
	#mì_⁄off_h
(
«me
, 
id
, 
v¨
, 
mask
, 
hñp
) \

62 { 
«me
, 
MB_OPT_ONOFF
, 
id
, &(
v¨
), 
mask
, 0, 0, 1, 1, 1, 
NULL
, NULL, NULL, 
hñp
 }

	)

64 
	#mì_⁄off
(
«me
, 
id
, 
v¨
, 
mask
) \

65 
	`mì_⁄off_h
(
«me
, 
id
, 
v¨
, 
mask
, 
NULL
)

	)

67 
	#mì_ønge_h
(
«me
, 
id
, 
v¨
, 
mö
, 
max
, 
hñp
) \

68 { 
«me
, 
MB_OPT_RANGE
, 
id
, &(
v¨
), 0, 
mö
, 
max
, 1, 1, 1, 
NULL
, NULL, NULL, 
hñp
 }

	)

70 
	#mì_ønge
(
«me
, 
id
, 
v¨
, 
mö
, 
max
) \

71 
	`mì_ønge_h
(
«me
, 
id
, 
v¨
, 
mö
, 
max
, 
NULL
)

	)

73 
	#mì_ønge_hide
(
«me
, 
id
, 
v¨
, 
mö
, 
max
) \

74 { 
«me
, 
MB_OPT_RANGE
, 
id
, &(
v¨
), 0, 
mö
, 
max
, 0, 1, 0, 
NULL
, NULL, NULL, NULL }

	)

76 
	#mì_cu°_s_h
(
«me
, 
id
, 
√ed_ßve
, 
h™dÀr
, 
«me_func
, 
hñp
) \

77 { 
«me
, 
MB_OPT_CUSTOM
, 
id
, 
NULL
, 0, 0, 0, 1, 
√ed_ßve
, 1, 
h™dÀr
, 
«me_func
, NULL, 
hñp
 }

	)

79 
	#mì_cu°_h
(
«me
, 
id
, 
h™dÀr
, 
«me_func
, 
hñp
) \

80 
	`mì_cu°_s_h
(
«me
, 
id
, 1, 
h™dÀr
, 
«me_func
, 
hñp
)

	)

82 
	#mì_cu°
(
«me
, 
id
, 
h™dÀr
, 
«me_func
) \

83 
	`mì_cu°_h
(
«me
, 
id
, 
h™dÀr
, 
«me_func
, 
NULL
)

	)

85 
	#mì_cu°_noßve
(
«me
, 
id
, 
h™dÀr
, 
«me_func
) \

86 
	`mì_cu°_s_h
(
«me
, 
id
, 0, 
h™dÀr
, 
«me_func
, 
NULL
)

	)

88 
	#mì_⁄off_cu°
(
«me
, 
id
, 
v¨
, 
mask
, 
«me_func
) \

89 { 
«me
, 
MB_OPT_CUSTONOFF
, 
id
, &(
v¨
), 
mask
, 0, 0, 1, 1, 1, 
NULL
, 
«me_func
, NULL, NULL }

	)

91 
	#mì_ønge_cu°_h
(
«me
, 
id
, 
v¨
, 
mö
, 
max
, 
«me_func
, 
hñp
) \

92 { 
«me
, 
MB_OPT_CUSTRANGE
, 
id
, &(
v¨
), 0, 
mö
, 
max
, 1, 1, 1, 
NULL
, 
«me_func
, NULL, 
hñp
 }

	)

94 
	#mì_ønge_cu°
(
«me
, 
id
, 
v¨
, 
mö
, 
max
, 
«me_func
) \

95 
	`mì_ønge_cu°_h
(
«me
, 
id
, 
v¨
, 
mö
, 
max
, 
«me_func
, 
NULL
)

	)

97 
	#mì_íum_h
(
«me
, 
id
, 
v¨
, 
«mes_li°
, 
hñp
) \

98 { 
«me
, 
MB_OPT_ENUM
, 
id
, &(
v¨
), 0, 0, 0, 1, 1, 1, 
NULL
, NULL, 
«mes_li°
, 
hñp
 }

	)

100 
	#mì_íum
(
«me
, 
id
, 
v¨
, 
«mes_li°
) \

101 
	`mì_íum_h
(
«me
, 
id
, 
v¨
, 
«mes_li°
, 
NULL
)

	)

103 
	#mì_íd
 \

104 { 
NULL
, 0, 0, NULL, 0, 0, 0, 0, 0, 0, NULL, NULL, NULL, NULL }

	)

108 *
	m«me
;

109 
	mmask
;

110 } 
	tme_böd_a˘i⁄
;

112 
me_böd_a˘i⁄
 
me_˘æ_a˘i⁄s
[];

113 
me_böd_a˘i⁄
 
emu˘æ_a˘i⁄s
[];

115 *
g_míubg_§c_±r
;

116 *
g_míubg_±r
;

117 *
g_míus¸ìn_±r
;

118 
g_míus¸ìn_w
;

119 
g_míus¸ìn_h
;

121 
g_auto°©ñd_›t
;

123 
míu_öô_ba£
();

124 
míu_upd©e_msg
(c⁄° *
msg
);

125 
ãxt_out16
(
x
, 
y
, c⁄° *
ãxto
, ...);

127 
míu_íåy
 *
me_li°_gë_fú°
();

128 
míu_íåy
 *
me_li°_gë_√xt
();

	@frontend/libpicofe/pandora/picorestore.c

29 
	~<°dio.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<sys/°©.h
>

32 
	~<f˙é.h
>

33 
	~<uni°d.h
>

34 
	~<sys/io˘l.h
>

35 
	~<löux/fb.h
>

36 
	~<löux/om≠fb.h
>

37 
	~<löux/kd.h
>

39 
	$maö
()

41 
fb_v¨_s¸ìnöfo
 
fbv¨
;

42 
om≠fb_∂™e_öfo
 
pi
;

43 
om≠fb_mem_öfo
 
mi
;

44 
ªt
, 
fbdev
, 
kbdfd
;

46 
fbdev
 = 
	`›í
("/dev/fb0", 
O_RDWR
);

47 i‡(
fbdev
 == -1) {

48 
	`≥º‹
("open fb0");

49 
íd_fb0
;

52 
ªt
 = 
	`io˘l
(
fbdev
, 
FBIOGET_VSCREENINFO
, &
fbv¨
);

53 i‡(
ªt
 == -1) {

54 
	`≥º‹
("FBIOGET_VSCREENINFO ioctl");

55 
íd_fb0
;

58 i‡(
fbv¨
.
yoff£t
 != 0) {

59 
	`¥ötf
("fixing yoffset.. ");

60 
fbv¨
.
yoff£t
 = 0;

61 
ªt
 = 
	`io˘l
(
fbdev
, 
FBIOPAN_DISPLAY
, &
fbv¨
);

62 i‡(
ªt
 < 0)

63 
	`≥º‹
("ioctl FBIOPAN_DISPLAY");

65 
	`¥ötf
("ok\n");

68 
íd_fb0
:

69 i‡(
fbdev
 >= 0)

70 
	`˛o£
(
fbdev
);

72 
fbdev
 = 
	`›í
("/dev/fb1", 
O_RDWR
);

73 i‡(
fbdev
 == -1) {

74 
	`≥º‹
("open fb1");

75 
íd_fb1
;

78 
ªt
 = 
	`io˘l
(
fbdev
, 
OMAPFB_QUERY_PLANE
, &
pi
);

79 
ªt
 |
	`io˘l
(
fbdev
, 
OMAPFB_QUERY_MEM
, &
mi
);

80 i‡(
ªt
 != 0)

81 
	`≥º‹
("QUERY_*");

83 
pi
.
íabÀd
 = 0;

84 
ªt
 = 
	`io˘l
(
fbdev
, 
OMAPFB_SETUP_PLANE
, &
pi
);

85 i‡(
ªt
 != 0)

86 
	`≥º‹
("SETUP_PLANE");

88 
mi
.
size
 = 0;

89 
ªt
 = 
	`io˘l
(
fbdev
, 
OMAPFB_SETUP_MEM
, &
mi
);

90 i‡(
ªt
 != 0)

91 
	`≥º‹
("SETUP_MEM");

93 
íd_fb1
:

94 i‡(
fbdev
 >= 0)

95 
	`˛o£
(
fbdev
);

97 
kbdfd
 = 
	`›í
("/dev/ây", 
O_RDWR
);

98 i‡(
kbdfd
 == -1) {

99 
	`≥º‹
("open /dev/tty");

103 i‡(
	`io˘l
(
kbdfd
, 
KDSETMODE
, 
KD_TEXT
) == -1)

104 
	`≥º‹
("KDSETMODE KD_TEXT");

106 
	`˛o£
(
kbdfd
);

109 
	}
}

	@frontend/libpicofe/pandora/plat.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<dúít.h
>

17 
	~<löux/öput.h
>

18 
	~<î∫o.h
>

20 
	~"../∂©.h
"

21 
	~"../öput.h
"

23 c⁄° * c⁄° 
	g∑nd‹a_gpio_keys
[
KEY_MAX
 + 1] = {

24 [0 ... 
KEY_MAX
] = 
NULL
,

25 [
KEY_UP
] = "Up",

26 [
KEY_LEFT
] = "Left",

27 [
KEY_RIGHT
] = "Right",

28 [
KEY_DOWN
] = "Down",

29 [
KEY_HOME
] = "(A)",

30 [
KEY_PAGEDOWN
] = "(X)",

31 [
KEY_END
] = "(B)",

32 [
KEY_PAGEUP
] = "(Y)",

33 [
KEY_RIGHTSHIFT
]= "(L)",

34 [
KEY_RIGHTCTRL
] = "(R)",

35 [
KEY_LEFTALT
] = "Start",

36 [
KEY_LEFTCTRL
] = "Select",

37 [
KEY_MENU
] = "Pandora",

40 c⁄° 
	g≤d_s¸ùt_ba£
[] = "sudo -n /usr/pandora/scripts";

42 
	$sˇn_f‹_fûãrs
()

44 
dúít
 *
ít
;

45 
i
, 
cou¡
 = 0;

46 c⁄° **
mfûãrs
;

47 
buff
[64];

48 
DIR
 *
dú
;

50 
dú
 = 
	`›ídú
("/etc/pandora/conf/dss_fir");

51 i‡(
dú
 =
NULL
) {

52 
	`≥º‹
("filter opendir");

57 
î∫o
 = 0;

58 
ít
 = 
	`ªaddú
(
dú
);

59 i‡(
ít
 =
NULL
) {

60 i‡(
î∫o
 != 0)

61 
	`≥º‹
("readdir");

65 i‡(
ít
->
d_ty≥
 !
DT_REG
 &&É¡->d_ty≥ !
DT_LNK
)

68 
cou¡
++;

71 i‡(
cou¡
 == 0)

74 
mfûãrs
 = 
	`ˇŒoc
(
cou¡
 + 1, (mfilters[0]));

75 i‡(
mfûãrs
 =
NULL
)

78 
	`ªwöddú
(
dú
);

79 
i
 = 0; (
ít
 = 
	`ªaddú
(
dú
)); ) {

80 
size_t
 
Àn
;

82 i‡(
ít
->
d_ty≥
 !
DT_REG
 &&É¡->d_ty≥ !
DT_LNK
)

85 
Àn
 = 
	`°æí
(
ít
->
d_«me
);

88 i‡(
Àn
 >3 && 
	`°rcmp
(
ít
->
d_«me
 +Üen - 3, "_v3") == 0)

90 i‡(
Àn
 >3 && 
	`°rcmp
(
ít
->
d_«me
 +Üen - 3, "_v5") == 0)

94 i‡(
Àn
 > 5 && 
	`°rcmp
(
ít
->
d_«me
 +Üen - 5, "_up_h") == 0)

95 
Àn
 -= 5;

97 i‡(
Àn
 > (
buff
) - 1)

100 
	`°∫˝y
(
buff
, 
ít
->
d_«me
, 
Àn
);

101 
buff
[
Àn
] = 0;

102 
mfûãrs
[
i
] = 
	`°rdup
(
buff
);

103 i‡(
mfûãrs
[
i
] !
NULL
)

104 
i
++;

106 
	`˛o£dú
(
dú
);

108 
∂©_èrgë
.
hwfûãrs
 = 
mfûãrs
;

109 
	}
}

111 
	$do_sy°em
(c⁄° *
cmd
)

113 
ªt
;

115 
ªt
 = 
	`sy°em
(
cmd
);

116 i‡(
ªt
 >= 0)

117 
ªt
 = 0;

119  
ªt
;

120 
	}
}

122 
	$ªad_öt_‰om_fûe
(c⁄° *
‚ame
)

124 
ªt
 = -1;

125 
FILE
 *
f
;

127 
f
 = 
	`f›í
(
‚ame
, "r");

128 i‡(
f
) {

129 
	`fsˇnf
(
f
, "%d", &
ªt
);

130 
	`f˛o£
(
f
);

132  
ªt
;

133 
	}
}

135 
	$lcdøã_£t
(
is_∑l
)

137 
ﬁd_∑l
 = -1;

138 
buf
[128];

140 i‡(
is_∑l
 =
ﬁd_∑l
)

142 
ﬁd_∑l
 = 
is_∑l
;

144 
	`¢¥ötf
(
buf
, (buf), "%s/op_lcdrate.sh %d",

145 
≤d_s¸ùt_ba£
, 
is_∑l
 ? 50 : 60);

146  
	`do_sy°em
(
buf
);

147 
	}
}

149 
	$hwfûãr_£t
(
which
)

151 
ﬁd_fûãr
 = -1;

152 
buf
[128];

153 
i
;

155 i‡(
∂©_èrgë
.
hwfûãrs
 =
NULL
)

158 i‡(
which
 =
ﬁd_fûãr
)

161 
i
 = 0; i <
which
; i++)

162 i‡(
∂©_èrgë
.
hwfûãrs
[
i
] =
NULL
)

165 
ﬁd_fûãr
 = 
which
;

167 
	`¢¥ötf
(
buf
, (buf), "%s/op_videofir.sh %s",

168 
≤d_s¸ùt_ba£
, 
∂©_èrgë
.
hwfûãrs
[
which
]);

169  
	`do_sy°em
(
buf
);

170 
	}
}

172 
	$˝u_˛ock_gë
()

174  
	`ªad_öt_‰om_fûe
("/proc/pandora/cpu_mhz_max");

175 
	}
}

177 
	$˝u_˛ock_£t
(
˝u_˛ock
)

179 
buf
[128];

181 i‡(
˝u_˛ock
 < 14)

184 i‡(
˝u_˛ock
 =
	`˝u_˛ock_gë
())

187 
	`¢¥ötf
(
buf
, (buf),

189 
≤d_s¸ùt_ba£
, 
˝u_˛ock
);

190  
	`do_sy°em
(
buf
);

191 
	}
}

193 
	$b©_ˇ∑côy_gë
()

195  
	`ªad_öt_‰om_fûe
("/sys/class/power_supply/bq27500-0/capacity");

196 
	}
}

198 
	$gamma_£t
(
vÆ
, 
bœck_Àvñ
)

200 
buf
[128];

202 
	`¢¥ötf
(
buf
, (buf), "%s/op_gamma.sh -b %d %.2f",

203 
≤d_s¸ùt_ba£
, 
bœck_Àvñ
, ()
vÆ
 / 100.0f);

204  
	`do_sy°em
(
buf
);

205 
	}
}

209 
	$swôch_œyî
(
which
, 
íabÀ
)

211 
was_ovl_íabÀd
 = -1;

212 
tv_íabÀd
 = 0;

213 
buf
[128];

214 
ªt
;

216 i‡(
which
 != 1)

218 i‡(
íabÀ
 =
was_ovl_íabÀd
)

221 
was_ovl_íabÀd
 = -1;

223 
tv_íabÀd
 = 
	`ªad_öt_‰om_fûe
(

225 i‡(
tv_íabÀd
 < 0)

228 i‡(!
tv_íabÀd
) {

233 
	`¢¥ötf
(
buf
, (buf), "%s/op_tvout.sh -l %d",

234 
≤d_s¸ùt_ba£
, 
íabÀ
);

235 
ªt
 = 
	`do_sy°em
(
buf
);

236 i‡(
ªt
 == 0)

237 
was_ovl_íabÀd
 = 
íabÀ
;

239  
ªt
;

240 
	}
}

242 
∂©_èrgë
 
	g∂©_èrgë
 = {

243 
˝u_˛ock_gë
,

244 
˝u_˛ock_£t
,

245 
b©_ˇ∑côy_gë
,

246 
hwfûãr_£t
,

247 
lcdøã_£t
,

248 
gamma_£t
,

249 .
swôch_œyî
 = switch_layer,

252 
	$∂©_èrgë_öô
()

254 
	`sˇn_f‹_fûãrs
();

257 
	}
}

260 
	$∂©_èrgë_£tup_öput
()

262 
gpiokeys_id
;

264 
gpiokeys_id
 = 
	`ö_«me_to_id
("evdev:gpio-keys");

265 
	`ö_£t_c⁄fig
(
gpiokeys_id
, 
IN_CFG_KEY_NAMES
,

266 
∑nd‹a_gpio_keys
, (pandora_gpio_keys));

267 
	`ö_£t_c⁄fig
(
gpiokeys_id
, 
IN_CFG_DEFAULT_DEV
, 
NULL
, 0);

268 
	}
}

270 
	$∂©_èrgë_föish
()

272 
	}
}

	@frontend/libpicofe/plat.h

1 #i‚de‡
LIBPICOFE_PLAT_H


2 
	#LIBPICOFE_PLAT_H


	)

4 
	~<°dlib.h
>

6 #ifde‡
__˝lu•lus


11 
	s∂©_èrgë
 {

12 (*
˝u_˛ock_gë
)();

13 (*
˝u_˛ock_£t
)(
˛ock
);

14 (*
b©_ˇ∑côy_gë
)();

15 (*
hwfûãr_£t
)(
which
);

16 (*
lcdøã_£t
)(
is_∑l
);

17 (*
gamma_£t
)(
vÆ
, 
bœck_Àvñ
);

18 (*
°ï_vﬁume
)(*
vﬁume
, 
diff
);

19 (*
swôch_œyî
)(
which
, 
íabÀ
);

20 c⁄° **
vout_mëhods
;

21 
vout_mëhod
;

22 
vout_fuŒs¸ìn
;

23 c⁄° **
hwfûãrs
;

24 
hwfûãr
;

27 
∂©_èrgë
Ölat_target;

28 
∂©_èrgë_öô
();

29 
∂©_èrgë_föish
();

30 
∂©_èrgë_£tup_öput
();

33 
__ölöe
 
∂©_èrgë_˝u_˛ock_gë
()

35 i‡(
	g∂©_èrgë
.
	g˝u_˛ock_gë
)

36  
	g∂©_èrgë
.
˝u_˛ock_gë
();

40 
__ölöe
 
∂©_èrgë_˝u_˛ock_£t
(
mhz
)

42 i‡(
	g∂©_èrgë
.
	g˝u_˛ock_£t
)

43  
	g∂©_èrgë
.
˝u_˛ock_£t
(
mhz
);

48 
__ölöe
 
∂©_èrgë_b©_ˇ∑côy_gë
()

50 i‡(
	g∂©_èrgë
.
	gb©_ˇ∑côy_gë
)

51  
	g∂©_èrgë
.
b©_ˇ∑côy_gë
();

56 
__ölöe
 
∂©_èrgë_hwfûãr_£t
(
which
)

58 i‡(
	g∂©_èrgë
.
	ghwfûãr_£t
)

59  
	g∂©_èrgë
.
hwfûãr_£t
(
which
);

64 
__ölöe
 
∂©_èrgë_lcdøã_£t
(
is_∑l
)

66 i‡(
	g∂©_èrgë
.
	glcdøã_£t
)

67  
	g∂©_èrgë
.
lcdøã_£t
(
is_∑l
);

72 
__ölöe
 
∂©_èrgë_gamma_£t
(
vÆ
, 
bœck_Àvñ
)

74 i‡(
	g∂©_èrgë
.
	ggamma_£t
)

75  
	g∂©_èrgë
.
gamma_£t
(
vÆ
, 
bœck_Àvñ
);

80 
__ölöe
 
∂©_èrgë_°ï_vﬁume
(*
vﬁume
, 
diff
)

82 i‡(
	g∂©_èrgë
.
	g°ï_vﬁume
)

83  
	g∂©_èrgë
.
°ï_vﬁume
(
vﬁume
, 
diff
);

88 
__ölöe
 
∂©_èrgë_swôch_œyî
(
which
, 
íabÀ
)

90 i‡(
	g∂©_èrgë
.
	gswôch_œyî
)

91  
	g∂©_èrgë
.
swôch_œyî
(
which
, 
íabÀ
);

96 
∂©_video_míu_íãr
(
is_rom_lﬂded
);

97 
∂©_video_míu_begö
();

98 
∂©_video_míu_íd
();

99 
∂©_video_míu_Àave
();

101 
∂©_video_Êù
();

102 
∂©_video_waô_vsync
();

105 
∂©_gë_roŸ_dú
(*
d°
, 
Àn
);

108 
∂©_gë_skö_dú
(*
d°
, 
Àn
);

110 
∂©_is_dú
(c⁄° *
∑th
);

111 
∂©_waô_evít
(*
fds_hnds
, 
cou¡
, 
timeout_ms
);

112 
∂©_¶ìp_ms
(
ms
);

114 *
∂©_mm≠
(
addr
, 
size_t
 
size
, 
√ed_exec
, 
is_fixed
);

115 *
∂©_mªm≠
(*
±r
, 
size_t
 
ﬁdsize
, size_à
√wsize
);

116 
∂©_munm≠
(*
±r
, 
size_t
 
size
);

117 
∂©_mem_£t_exec
(*
±r
, 
size_t
 
size
);

120 
∂©_gë_ticks_ms
();

121 
∂©_gë_ticks_us
();

122 
∂©_waô_tûl_us
(
us
);

124 
∂©_debug_ˇt
(*
°r
);

126 #ifde‡
__˝lu•lus


	@frontend/libpicofe/plat_dummy.c

1 
	~"∂©.h
"

3 
∂©_èrgë
 
	g∂©_èrgë
;

5 
	$∂©_èrgë_öô
()

8 
	}
}

10 
	$∂©_èrgë_föish
()

12 
	}
}

14 
	$∂©_èrgë_£tup_öput
()

16 
	}
}

	@frontend/libpicofe/plat_sdl.c

12 
	~<°dio.h
>

13 
	~<SDL.h
>

14 
	~<SDL_syswm.h
>

16 
	~"míu.h
"

17 
	~"∂©.h
"

18 
	~"gl.h
"

19 
	~"∂©_sdl.h
"

22 
	#WM_DECORATION_H
 32

	)

24 
SDL_SurÁ˚
 *
	g∂©_sdl_s¸ìn
;

25 
SDL_Ovîœy
 *
	g∂©_sdl_ovîœy
;

26 
	g∂©_sdl_gl_a˘ive
;

27 (*
∂©_sdl_ªsize_cb
)(
w
, 
h
);

28 (*
∂©_sdl_quô_cb
)();

30 
vid_drv_«me
[32];

31 
wödow_w
, 
wödow_h
;

32 
fs_w
, 
fs_h
;

33 
ﬁd_fuŒs¸ìn
;

34 
vout_mode_ovîœy
 = -1, 
vout_mode_gl
 = -1;

35 *
di•œy
, *
wödow
;

36 
gl_quúks
;

39 
	$∂©_sdl_ch™ge_video_mode
(
w
, 
h
, 
f‹˚
)

41 
¥ev_w
, 
¥ev_h
;

43 i‡(
w
 == 0)

44 
w
 = 
¥ev_w
;

46 
¥ev_w
 = 
w
;

47 i‡(
h
 == 0)

48 
h
 = 
¥ev_h
;

50 
¥ev_h
 = 
h
;

53 i‡(
∂©_èrgë
.
vout_mëhod
 != 0

54 && 
∂©_èrgë
.
vout_mëhod
 !
vout_mode_ovîœy


55 && 
∂©_èrgë
.
vout_mëhod
 !
vout_mode_gl
)

57 
	`Ârötf
(
°dîr
, "övÆid vout_mëhod: %d\n", 
∂©_èrgë
.
vout_mëhod
);

58 
∂©_èrgë
.
vout_mëhod
 = 0;

62 i‡(
∂©_èrgë
.
vout_mëhod
 =
vout_mode_gl
 && 
∂©_sdl_gl_a˘ive


63 && 
∂©_èrgë
.
vout_fuŒs¸ìn
 =
ﬁd_fuŒs¸ìn
 && !
f‹˚
)

68 i‡(
∂©_sdl_ovîœy
 !
NULL
) {

69 
	`SDL_FªeYUVOvîœy
(
∂©_sdl_ovîœy
);

70 
∂©_sdl_ovîœy
 = 
NULL
;

72 i‡(
∂©_sdl_gl_a˘ive
) {

73 
	`gl_föish
();

74 
∂©_sdl_gl_a˘ive
 = 0;

77 i‡(
∂©_èrgë
.
vout_mëhod
 != 0) {

78 
Uöt32
 
Êags
 = 
SDL_RESIZABLE
 | 
SDL_SWSURFACE
;

79 
wö_w
 = 
wödow_w
;

80 
wö_h
 = 
wödow_h
;

82 i‡(
∂©_èrgë
.
vout_fuŒs¸ìn
) {

83 
Êags
 |
SDL_FULLSCREEN
;

84 
wö_w
 = 
fs_w
;

85 
wö_h
 = 
fs_h
;

90 
	`SDL_PumpEvíts
();

92 
∂©_sdl_s¸ìn
 = 
	`SDL_SëVideoMode
(
wö_w
, 
wö_h
, 0, 
Êags
);

93 i‡(
∂©_sdl_s¸ìn
 =
NULL
) {

94 
	`Ârötf
(
°dîr
, "SDL_SëVideoModêÁûed: %s\n", 
	`SDL_GëEº‹
());

95 
∂©_èrgë
.
vout_mëhod
 = 0;

99 i‡(
∂©_èrgë
.
vout_mëhod
 =
vout_mode_ovîœy
) {

100 
∂©_sdl_ovîœy
 = 
	`SDL_Cª©eYUVOvîœy
(
w
, 
h
, 
SDL_UYVY_OVERLAY
, 
∂©_sdl_s¸ìn
);

101 i‡(
∂©_sdl_ovîœy
 !
NULL
) {

102 i‡(()
∂©_sdl_ovîœy
->
pixñs
[0] & 3)

103 
	`Ârötf
(
°dîr
, "warning: overlayÖointer is unaligned\n");

105 
	`∂©_sdl_ovîœy_˛ór
();

108 
	`Ârötf
(
°dîr
, "warning: couldÇot create overlay.\n");

109 
∂©_èrgë
.
vout_mëhod
 = 0;

112 i‡(
∂©_èrgë
.
vout_mëhod
 =
vout_mode_gl
) {

113 
∂©_sdl_gl_a˘ive
 = (
	`gl_öô
(
di•œy
, 
wödow
, &
gl_quúks
) == 0);

114 i‡(!
∂©_sdl_gl_a˘ive
) {

115 
	`Ârötf
(
°dîr
, "warning: couldÇot init GL.\n");

116 
∂©_èrgë
.
vout_mëhod
 = 0;

120 i‡(
∂©_èrgë
.
vout_mëhod
 == 0) {

121 
	`SDL_PumpEvíts
();

123 
∂©_sdl_s¸ìn
 = 
	`SDL_SëVideoMode
(
w
, 
h
, 16, 
SDL_HWSURFACE
 | 
SDL_DOUBLEBUF
);

124 i‡(
∂©_sdl_s¸ìn
 =
NULL
) {

125 
	`Ârötf
(
°dîr
, "SDL_SëVideoModêÁûed: %s\n", 
	`SDL_GëEº‹
());

130 
ﬁd_fuŒs¸ìn
 = 
∂©_èrgë
.
vout_fuŒs¸ìn
;

131 i‡(
∂©_sdl_ªsize_cb
 !
NULL
)

132 
	`∂©_sdl_ªsize_cb
(
∂©_sdl_s¸ìn
->
w
,Öœt_sdl_s¸ìn->
h
);

135 
	}
}

137 
	$∂©_sdl_evít_h™dÀr
(*
evít_
)

139 
was_a˘ive
;

140 
SDL_Evít
 *
evít
 = 
evít_
;

142 
evít
->
ty≥
) {

143 
SDL_VIDEORESIZE
:

145 i‡(
∂©_èrgë
.
vout_mëhod
 != 0

146 && !
∂©_èrgë
.
vout_fuŒs¸ìn
 && !
ﬁd_fuŒs¸ìn
)

148 
wödow_w
 = 
evít
->
ªsize
.
w
;

149 
wödow_h
 = 
evít
->
ªsize
.
h
;

150 
	`∂©_sdl_ch™ge_video_mode
(0, 0, 1);

153 
SDL_ACTIVEEVENT
:

154 i‡(
evít
->
a˘ive
.
gaö
 && !
was_a˘ive
) {

155 i‡(
∂©_sdl_ovîœy
 !
NULL
) {

156 
SDL_Re˘
 
d°ª˘
 = { 0, 0, 
∂©_sdl_s¸ìn
->
w
,Öœt_sdl_s¸ìn->
h
 };

157 
	`SDL_Di•œyYUVOvîœy
(
∂©_sdl_ovîœy
, &
d°ª˘
);

159 i‡(
∂©_sdl_gl_a˘ive
) {

160 i‡(
gl_quúks
 & 
GL_QUIRK_ACTIVATE_RECREATE
) {

161 
	`gl_föish
();

162 
∂©_sdl_gl_a˘ive
 = (
	`gl_öô
(
di•œy
, 
wödow
, &
gl_quúks
) == 0);

164 
	`gl_Êù
(
NULL
, 0, 0);

168 
was_a˘ive
 = 
evít
->
a˘ive
.
gaö
;

170 
SDL_QUIT
:

171 i‡(
∂©_sdl_quô_cb
 !
NULL
)

172 
	`∂©_sdl_quô_cb
();

175 
	}
}

177 
	$∂©_sdl_öô
()

179 c⁄° *
vout_li°
[] = { 
NULL
, NULL, NULL, NULL };

180 c⁄° 
SDL_VideoInfo
 *
öfo
;

181 
SDL_SysWMöfo
 
wmöfo
;

182 
ovîœy_w‹ks
 = 0;

183 
gl_w‹ks
 = 0;

184 
i
, 
ªt
, 
h
;

186 
ªt
 = 
	`SDL_Inô
(
SDL_INIT_VIDEO
 | 
SDL_INIT_NOPARACHUTE
);

187 i‡(
ªt
 != 0) {

188 
	`Ârötf
(
°dîr
, "SDL_Inô faûed: %s\n", 
	`SDL_GëEº‹
());

192 
öfo
 = 
	`SDL_GëVideoInfo
();

193 i‡(
öfo
 !
NULL
) {

194 
fs_w
 = 
öfo
->
cuºít_w
;

195 
fs_h
 = 
öfo
->
cuºít_h
;

196 
	`¥ötf
("∂©_sdl: usög %dx%dá†fuŒs¸ì¿ªsﬁuti⁄\n", 
fs_w
, 
fs_h
);

199 
g_míus¸ìn_w
 = 640;

200 i‡(
fs_w
 !0 && 
g_míus¸ìn_w
 > fs_w)

201 
g_míus¸ìn_w
 = 
fs_w
;

202 
g_míus¸ìn_h
 = 480;

203 i‡(
fs_h
 != 0) {

204 
h
 = 
fs_h
;

205 i‡(
öfo
 && info->
wm_avaûabÀ
 && 
h
 > 
WM_DECORATION_H
)

206 
h
 -
WM_DECORATION_H
;

207 i‡(
g_míus¸ìn_h
 > 
h
)

208 
g_míus¸ìn_h
 = 
h
;

211 
ªt
 = 
	`∂©_sdl_ch™ge_video_mode
(
g_míus¸ìn_w
, 
g_míus¸ìn_h
, 1);

212 i‡(
ªt
 != 0) {

213 
∂©_sdl_s¸ìn
 = 
	`SDL_SëVideoMode
(0, 0, 16, 
SDL_SWSURFACE
);

214 i‡(
∂©_sdl_s¸ìn
 =
NULL
) {

215 
	`Ârötf
(
°dîr
, "SDL_SëVideoModêÁûed: %s\n", 
	`SDL_GëEº‹
());

216 
Áû
;

219 i‡(
∂©_sdl_s¸ìn
->
w
 < 320 ||Öœt_sdl_s¸ìn->
h
 < 240) {

220 
	`Ârötf
(
°dîr
, "resolution %dx%d isÅoo small, sorry.\n",

221 
∂©_sdl_s¸ìn
->
w
,Öœt_sdl_s¸ìn->
h
);

222 
Áû
;

225 
g_míus¸ìn_w
 = 
wödow_w
 = 
∂©_sdl_s¸ìn
->
w
;

226 
g_míus¸ìn_h
 = 
wödow_h
 = 
∂©_sdl_s¸ìn
->
h
;

229 
∂©_sdl_s¸ìn
 = 
	`SDL_SëVideoMode
(
g_míus¸ìn_w
, 
g_míus¸ìn_h
,

230 0, 
∂©_sdl_s¸ìn
->
Êags
);

231 i‡(
∂©_sdl_s¸ìn
 =
NULL
) {

232 
	`Ârötf
(
°dîr
, "SDL_SëVideoModêÁûed: %s\n", 
	`SDL_GëEº‹
());

233 
Áû
;

236 
∂©_sdl_ovîœy
 = 
	`SDL_Cª©eYUVOvîœy
(
∂©_sdl_s¸ìn
->
w
,Öœt_sdl_s¸ìn->
h
,

237 
SDL_UYVY_OVERLAY
, 
∂©_sdl_s¸ìn
);

238 i‡(
∂©_sdl_ovîœy
 !
NULL
) {

239 
	`¥ötf
("plat_sdl: overlay: fmt %x,Ölanes: %d,Öitch: %d, hw: %d\n",

240 
∂©_sdl_ovîœy
->
f‹m©
,Öœt_sdl_ovîœy->
∂™es
, *∂©_sdl_ovîœy->
pôches
,

241 
∂©_sdl_ovîœy
->
hw_ovîœy
);

243 i‡(
∂©_sdl_ovîœy
->
hw_ovîœy
)

244 
ovîœy_w‹ks
 = 1;

246 
	`Ârötf
(
°dîr
, "warning: video overlay isÇot hardwareáccelerated, "

248 
	`SDL_FªeYUVOvîœy
(
∂©_sdl_ovîœy
);

249 
∂©_sdl_ovîœy
 = 
NULL
;

252 
	`Ârötf
(
°dîr
, "overlay isÇotávailable.\n");

255 
	`SDL_VideoDrivîName
(
vid_drv_«me
, (vid_drv_name));

256 #ifde‡
SDL_VIDEO_DRIVER_X11


257 i‡(
	`°rcmp
(
vid_drv_«me
, "x11") == 0) {

258 
	`SDL_VERSION
(&
wmöfo
.
vîsi⁄
);

259 
ªt
 = 
	`SDL_GëWMInfo
(&
wmöfo
);

260 i‡(
ªt
 > 0) {

261 
di•œy
 = 
wmöfo
.
öfo
.
x11
.display;

262 
wödow
 = (*)
wmöfo
.
öfo
.
x11
.window;

266 ()
wmöfo
;

269 
ªt
 = 
	`gl_öô
(
di•œy
, 
wödow
, &
gl_quúks
);

270 i‡(
ªt
 == 0) {

271 
gl_w‹ks
 = 1;

272 
	`gl_föish
();

275 
i
 = 0;

276 
vout_li°
[
i
++] = "SDL Window";

277 i‡(
ovîœy_w‹ks
) {

278 
∂©_èrgë
.
vout_mëhod
 = 
vout_mode_ovîœy
 = 
i
;

279 
vout_li°
[
i
++] = "Video Overlay";

281 i‡(
gl_w‹ks
) {

282 
∂©_èrgë
.
vout_mëhod
 = 
vout_mode_gl
 = 
i
;

283 
vout_li°
[
i
++] = "OpenGL";

285 
∂©_èrgë
.
vout_mëhods
 = 
vout_li°
;

289 
Áû
:

290 
	`SDL_Quô
();

292 
	}
}

294 
	$∂©_sdl_föish
()

296 i‡(
∂©_sdl_ovîœy
 !
NULL
) {

297 
	`SDL_FªeYUVOvîœy
(
∂©_sdl_ovîœy
);

298 
∂©_sdl_ovîœy
 = 
NULL
;

300 i‡(
∂©_sdl_gl_a˘ive
) {

301 
	`gl_föish
();

302 
∂©_sdl_gl_a˘ive
 = 0;

306 i‡(
	`°rcmp
(
vid_drv_«me
, "x11") != 0)

307 
	`SDL_SëVideoMode
(
fs_w
, 
fs_h
, 16, 
SDL_SWSURFACE
);

308 
	`SDL_Quô
();

309 
	}
}

311 
	$∂©_sdl_ovîœy_˛ór
()

313 
pixñs
 = 
∂©_sdl_ovîœy
->
w
 *Öœt_sdl_ovîœy->
h
;

314 *
d°
 = (*)
∂©_sdl_ovîœy
->
pixñs
[0];

315 
v
 = 0x10801080;

317 ; 
pixñs
 > 0; 
d°
 += 4,Öixels -= 2 * 4)

318 
d°
[0] = d°[1] = d°[2] = d°[3] = 
v
;

320 ; 
pixñs
 > 0; 
d°
++,Öixels -= 2)

321 *
d°
 = 
v
;

322 
	}
}

	@frontend/libpicofe/plat_sdl.h

1 
	~<SDL.h
>

3 
SDL_SurÁ˚
 *
∂©_sdl_s¸ìn
;

4 
SDL_Ovîœy
 *
∂©_sdl_ovîœy
;

5 
∂©_sdl_gl_a˘ive
;

6 (*
∂©_sdl_ªsize_cb
)(
w
, 
h
);

7 (*
∂©_sdl_quô_cb
)();

9 
	`∂©_sdl_öô
();

10 
	`∂©_sdl_ch™ge_video_mode
(
w
, 
h
, 
f‹˚
);

11 
	`∂©_sdl_ovîœy_˛ór
();

12 
	`∂©_sdl_evít_h™dÀr
(*
evít_
);

13 
	`∂©_sdl_föish
();

	@frontend/libpicofe/posix.h

1 #i‚de‡
LIBPICOFE_POSIX_H


2 
	#LIBPICOFE_POSIX_H


	)

5 #i‡
deföed
(
__löux__
Ë|| deföed(
__MINGW32__
)

7 
	~<dúít.h
>

8 
	~<uni°d.h
>

9 
	~<sys/°©.h
>

10 
	~<sys/ty≥s.h
>

12 #ifde‡
__MINGW32__


13 #w¨nög 
hacks
!

14 
	#mkdú
(
∑th«me
,
mode
Ë
	`mkdú
’©h«me)

	)

15 
	#d_ty≥
 
d_öo


	)

16 
	#DT_REG
 0

	)

17 
	#DT_DIR
 0

	)

	@frontend/libpicofe/readpng.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~<≤g.h
>

16 
	~"ªad≤g.h
"

17 
	~"Õrötf.h
"

19 
	$ªad≤g
(*
de°
, c⁄° *
‚ame
, 
ªad≤g_wh©
 
wh©
, 
ªq_w
, 
ªq_h
)

21 
FILE
 *
Â
;

22 
≤g_°ru˘p
 
≤g_±r
 = 
NULL
;

23 
≤g_öf›
 
öfo_±r
 = 
NULL
;

24 
≤g_byãµ
 
row_±r
 = 
NULL
;

25 
ªt
 = -1;

27 i‡(
de°
 =
NULL
 || 
‚ame
 == NULL)

32 
Â
 = 
	`f›í
(
‚ame
, "rb");

33 i‡(
Â
 =
NULL
)

35 
	`Õrötf
(
__FILE__
 ": faûedÅÿ›í: %s\n", 
‚ame
);

39 
≤g_±r
 = 
	`≤g_¸óã_ªad_°ru˘
(
PNG_LIBPNG_VER_STRING
, 
NULL
, NULL, NULL);

40 i‡(!
≤g_±r
)

42 
	`Õrötf
(
__FILE__
 ":Öng_create_read_struct() failed\n");

43 
	`f˛o£
(
Â
);

47 
öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(
≤g_±r
);

48 i‡(!
öfo_±r
)

50 
	`Õrötf
(
__FILE__
 ":Öng_create_info_struct() failed\n");

51 
d⁄e
;

55 
	`≤g_öô_io
(
≤g_±r
, 
Â
);

56 
	`≤g_ªad_≤g
(
≤g_±r
, 
öfo_±r
, 
PNG_TRANSFORM_STRIP_16
 | 
PNG_TRANSFORM_STRIP_ALPHA
 | 
PNG_TRANSFORM_PACKING
, 
NULL
);

57 
row_±r
 = 
	`≤g_gë_rows
(
≤g_±r
, 
öfo_±r
);

58 i‡(
row_±r
 =
NULL
)

60 
	`Õrötf
(
__FILE__
 ":Öng_get_rows() failed\n");

61 
d⁄e
;

67 
wh©
)

69 
READPNG_BG
:

71 
height
, 
width
, 
h
, 
x_ofs
 = 0, 
y_ofs
 = 0;

72 *
d°
 = 
de°
;

74 i‡(
	`≤g_gë_bô_dïth
(
≤g_±r
, 
öfo_±r
) != 8)

76 
	`Õrötf
(
__FILE__
 ": bg imagêu£†%ibpc,Çìded 8bpc\n", 
	`≤g_gë_bô_dïth
(
≤g_±r
, 
öfo_±r
));

79 
width
 = 
	`≤g_gë_image_width
(
≤g_±r
, 
öfo_±r
);

80 i‡(
width
 > 
ªq_w
) {

81 
x_ofs
 = (
width
 - 
ªq_w
) / 2;

82 
width
 = 
ªq_w
;

84 
height
 = 
	`≤g_gë_image_height
(
≤g_±r
, 
öfo_±r
);

85 i‡(
height
 > 
ªq_h
) {

86 
y_ofs
 = (
height
 - 
ªq_h
) / 2;

87 
height
 = 
ªq_h
;

90 
h
 = 0; h < 
height
; h++)

92 *
§c
 = 
row_±r
[
h
 + 
y_ofs
] + 
x_ofs
 * 3;

93 
Àn
 = 
width
;

94 
Àn
--)

96 #ifde‡
PSP


97 *
d°
++ = ((
§c
[2]&0xf8)<<8) | ((src[1]&0xf8)<<3) | (src[0] >> 3);

99 *
d°
++ = ((
§c
[0]&0xf8)<<8) | ((src[1]&0xf8)<<3) | (src[2] >> 3);

101 
§c
 += 3;

103 
d°
 +
ªq_w
 - 
width
;

108 
READPNG_FONT
:

110 
x
, 
y
, 
x1
, 
y1
;

111 *
d°
 = 
de°
;

112 i‡(
	`≤g_gë_image_width
(
≤g_±r
, 
öfo_±r
Ë!
ªq_w
 || 
	`≤g_gë_image_height
’ng_±r, info_±rË!
ªq_h
)

114 
	`Õrötf
(
__FILE__
 ": unexpected font image size %dx%d,Çeeded %dx%d\n",

115 ()
	`≤g_gë_image_width
(
≤g_±r
, 
öfo_±r
), ()
	`≤g_gë_image_height
’ng_±r, info_±r), 
ªq_w
, 
ªq_h
);

118 i‡(
	`≤g_gë_bô_dïth
(
≤g_±r
, 
öfo_±r
) != 8)

120 
	`Õrötf
(
__FILE__
 ": f⁄àimagêu£†%ibµ,Çìded 8bµ\n", 
	`≤g_gë_bô_dïth
(
≤g_±r
, 
öfo_±r
));

123 
y
 = 0; y < 16; y++)

125 
x
 = 0; x < 16; x++)

128 
sym_w
 = 
ªq_w
 / 16;

129 
sym_h
 = 
ªq_h
 / 16;

130 
y1
 = 0; y1 < 
sym_h
; y1++)

132 *
§c
 = 
row_±r
[
y
*
sym_h
 + 
y1
] + 
x
*
sym_w
;

133 
x1
 = 
sym_w
/2; x1 > 0; x1--, 
§c
+=2)

134 *
d°
++ = ((
§c
[0]^0xff) & 0xf0) | ((src[1]^0xff) >> 4);

141 
READPNG_SELECTOR
:

143 
x1
, 
y1
;

144 *
d°
 = 
de°
;

145 i‡(
	`≤g_gë_image_width
(
≤g_±r
, 
öfo_±r
Ë!
ªq_w
 || 
	`≤g_gë_image_height
’ng_±r, info_±rË!
ªq_h
)

147 
	`Õrötf
(
__FILE__
 ": unexpected selector image size %ix%i,Çeeded %dx%d\n",

148 ()
	`≤g_gë_image_width
(
≤g_±r
, 
öfo_±r
), ()
	`≤g_gë_image_height
’ng_±r, info_±r), 
ªq_w
, 
ªq_h
);

151 i‡(
	`≤g_gë_bô_dïth
(
≤g_±r
, 
öfo_±r
) != 8)

153 
	`Õrötf
(
__FILE__
 ": sñe˘‹ imagêu£†%ibµ,Çìded 8bµ\n", 
	`≤g_gë_bô_dïth
(
≤g_±r
, 
öfo_±r
));

156 
y1
 = 0; y1 < 
ªq_h
; y1++)

158 *
§c
 = 
row_±r
[
y1
];

159 
x1
 = 
ªq_w
/2; x1 > 0; x1--, 
§c
+=2)

160 *
d°
++ = ((
§c
[0]^0xff) & 0xf0) | ((src[1]^0xff) >> 4);

165 
READPNG_24
:

167 
height
, 
width
, 
h
;

168 *
d°
 = 
de°
;

169 i‡(
	`≤g_gë_bô_dïth
(
≤g_±r
, 
öfo_±r
) != 8)

171 
	`Õrötf
(
__FILE__
 ": imagêu£†%ibpc,Çìded 8bpc\n", 
	`≤g_gë_bô_dïth
(
≤g_±r
, 
öfo_±r
));

174 
width
 = 
	`≤g_gë_image_width
(
≤g_±r
, 
öfo_±r
);

175 i‡(
width
 > 
ªq_w
)

176 
width
 = 
ªq_w
;

177 
height
 = 
	`≤g_gë_image_height
(
≤g_±r
, 
öfo_±r
);

178 i‡(
height
 > 
ªq_h
)

179 
height
 = 
ªq_h
;

181 
h
 = 0; h < 
height
; h++)

183 
Àn
 = 
width
;

184 *
§c
 = 
row_±r
[
h
];

185 
d°
 +(
ªq_w
 - 
width
) * 3;

186 
Àn
 = 
width
;Üí > 0;Üí--, 
d°
+=3, 
§c
+=3)

187 
d°
[0] = 
§c
[2], dst[1] = src[1], dst[2] = src[0];

194 
ªt
 = 0;

195 
d⁄e
:

196 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, 
öfo_±r
 ? &öfo_±∏: 
NULL
, (
≤g_öf›p
)NULL);

197 
	`f˛o£
(
Â
);

198  
ªt
;

199 
	}
}

201 
	$wrôïng
(c⁄° *
‚ame
, *
§c
, 
w
, 
h
)

203 
≤g_°ru˘p
 
≤g_±r
 = 
NULL
;

204 
≤g_öf›
 
öfo_±r
 = 
NULL
;

205 
≤g_byãµ
 
row_poöãrs
;

206 
i
, 
j
, 
ªt
 = -1;

207 
FILE
 *
f
;

209 
f
 = 
	`f›í
(
‚ame
, "wb");

210 i‡(
f
 =
NULL
) {

211 
	`Õrötf
(
__FILE__
 ": faûedÅÿ›í \"%s\"\n", 
‚ame
);

215 
row_poöãrs
 = 
	`ˇŒoc
(
h
, (row_pointers[0]));

216 i‡(
row_poöãrs
 =
NULL
)

217 
íd1
;

219 
i
 = 0; i < 
h
; i++) {

220 *
d°
 = 
	`mÆloc
(
w
 * 3);

221 i‡(
d°
 =
NULL
)

222 
íd2
;

223 
row_poöãrs
[
i
] = 
d°
;

224 
j
 = 0; j < 
w
; j++, 
§c
++, 
d°
 += 3) {

225 
d°
[0] = (*
§c
 & 0xf800) >> 8;

226 
d°
[1] = (*
§c
 & 0x07e0) >> 3;

227 
d°
[2] = (*
§c
 & 0x001f) << 3;

232 
≤g_±r
 = 
	`≤g_¸óã_wrôe_°ru˘
(
PNG_LIBPNG_VER_STRING
, 
NULL
, NULL, NULL);

233 i‡(
≤g_±r
 =
NULL
) {

234 
	`Ârötf
(
°dîr
, "png_create_write_struct() failed");

235 
íd2
;

238 
öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(
≤g_±r
);

239 i‡(
öfo_±r
 =
NULL
) {

240 
	`Ârötf
(
°dîr
, "png_create_info_struct() failed");

241 
íd3
;

244 i‡(
	`£tjmp
(
	`≤g_jmpbuf
(
≤g_±r
)) != 0) {

245 
	`Ârötf
(
°dîr
, "error inÖng code\n");

246 
íd4
;

249 
	`≤g_öô_io
(
≤g_±r
, 
f
);

251 
	`≤g_£t_IHDR
(
≤g_±r
, 
öfo_±r
, 
w
, 
h
,

252 8, 
PNG_COLOR_TYPE_RGB
, 
PNG_INTERLACE_NONE
,

253 
PNG_COMPRESSION_TYPE_DEFAULT
, 
PNG_FILTER_TYPE_DEFAULT
);

255 
	`≤g_wrôe_öfo
(
≤g_±r
, 
öfo_±r
);

256 
	`≤g_wrôe_image
(
≤g_±r
, 
row_poöãrs
);

257 
	`≤g_wrôe_íd
(
≤g_±r
, 
NULL
);

259 
ªt
 = 0;

261 
íd4
:

263 
íd3
:

264 
	`≤g_de°roy_wrôe_°ru˘
(&
≤g_±r
, &
öfo_±r
);

265 
íd2
:

266 
i
 = 0; i < 
h
; i++)

267 
	`‰ì
(
row_poöãrs
[
i
]);

268 
	`‰ì
(
row_poöãrs
);

269 
íd1
:

270 
	`f˛o£
(
f
);

271  
ªt
;

272 
	}
}

	@frontend/libpicofe/readpng.h

1 #i‚de‡
LIBPICOFE_READPNG_H


2 
	#LIBPICOFE_READPNG_H


	)

6 
	mREADPNG_BG
 = 1,

7 
	mREADPNG_FONT
,

8 
	mREADPNG_SELECTOR
,

9 
	mREADPNG_24
,

11 
	tªad≤g_wh©
;

13 #ifde‡
__˝lu•lus


17 
ªad≤g
(*
de°
, c⁄° *
‚ame
, 
ªad≤g_wh©
 
wh©
, 
w
, 
h
);

18 
wrôïng
(c⁄° *
‚ame
, *
§c
, 
w
, 
h
);

20 #ifde‡
__˝lu•lus


	@frontend/libpicofe/sndout.c

12 
	~<°dio.h
>

13 
	~<°rög.h
>

15 
	~"löux/¢dout_oss.h
"

16 
	~"löux/¢dout_Æß.h
"

17 
	~"¢dout_sdl.h
"

18 
	~"¢dout.h
"

20 
	$¢dout_nuŒ_öô
()

23 
	}
}

25 
	$¢dout_nuŒ_exô
()

27 
	}
}

29 
	$¢dout_nuŒ_°¨t
(
øã
, 
°îeo
)

32 
	}
}

34 
	$¢dout_nuŒ_°›
()

36 
	}
}

38 
	$¢dout_nuŒ_waô
()

40 
	}
}

42 
	$¢dout_nuŒ_wrôe_nb
(c⁄° *
d©a
, 
byãs
)

44  
byãs
;

45 
	}
}

47 
	#SNDOUT_DRIVER
(
«me
) { \

49 
¢dout_
##
«me
##
_öô
, \

50 
¢dout_
##
«me
##
_exô
, \

51 
¢dout_
##
«me
##
_°¨t
, \

52 
¢dout_
##
«me
##
_°›
, \

53 
¢dout_
##
«me
##
_waô
, \

54 
¢dout_
##
«me
##
_wrôe_nb
, \

55 }

	)

57 
¢dout_drivî
 
	g¢dout_avaû
[] =

59 #ifde‡
HAVE_SDL


60 
SNDOUT_DRIVER
(
sdl
),

62 #ifde‡
HAVE_ALSA


63 
SNDOUT_DRIVER
(
Æß
),

65 #ifde‡
HAVE_OSS


66 
SNDOUT_DRIVER
(
oss
),

68 
SNDOUT_DRIVER
(
nuŒ
)

71 
¢dout_drivî
 
	g¢dout_cuºít
;

73 
	$¢dout_öô
()

75 
i
;

77 
i
 = 0; i < (
¢dout_avaû
) / (sndout_avail[0]); i++) {

78 i‡(
¢dout_avaû
[
i
].
	`öô
() == 0)

82 
	`mem˝y
(&
¢dout_cuºít
, &
¢dout_avaû
[
i
], (sndout_current));

83 
	`¥ötf
("usög %†audiÿouçuàdrivî\n", 
¢dout_cuºít
.
«me
);

84 
	}
}

	@frontend/libpicofe/sndout.h

1 #i‚de‡
LIBPICOFE_SNDOUT_H


2 
	#LIBPICOFE_SNDOUT_H


	)

4 
	s¢dout_drivî
 {

5 c⁄° *
	m«me
;

6 (*
	möô
)();

7 (*
	mexô
)();

8 (*
	m°¨t
)(
	møã
, 
	m°îeo
);

9 (*
	m°›
)();

10 (*
	mwaô
)();

11 (*
	mwrôe_nb
)(c⁄° *
	md©a
, 
	mbyãs
);

14 
¢dout_drivî
 
¢dout_cuºít
;

16 
¢dout_öô
();

18 
ölöe
 
	$¢dout_exô
()

20 
¢dout_cuºít
.
	`exô
();

21 
	}
}

23 
ölöe
 
	$¢dout_°¨t
(
øã
, 
°îeo
)

25  
¢dout_cuºít
.
	`°¨t
(
øã
, 
°îeo
);

26 
	}
}

28 
ölöe
 
	$¢dout_°›
()

30 
¢dout_cuºít
.
	`°›
();

31 
	}
}

33 
ölöe
 
	$¢dout_waô
()

35 
¢dout_cuºít
.
	`waô
();

36 
	}
}

38 
ölöe
 
	$¢dout_wrôe_nb
(c⁄° *
d©a
, 
byãs
)

40  
¢dout_cuºít
.
	`wrôe_nb
(
d©a
, 
byãs
);

41 
	}
}

	@frontend/libpicofe/sndout_sdl.c

12 
	~<SDL.h
>

13 
	~"¢dout_sdl.h
"

17 
	#BUF_LEN
 32768

	)

18 
	#BUF_MASK
 (
BUF_LEN
 - 1)

	)

20 
	gbuf
[
BUF_LEN
];

21 
	gbuf_w
, 
	gbuf_r
;

22 
	g°¨ãd
;

24 
	$ˇŒback
(*
u£rd©a
, 
Uöt8
 *
°ªam
, 
Àn
)

26 
have
 = (
buf_w
 - 
buf_r
Ë& 
BUF_MASK
;

27 
buf_À·
 = 
BUF_LEN
 - 
buf_r
;

29 
Àn
 /= 2;

30 i‡(
have
 > 
Àn
)

31 
have
 = 
Àn
;

32 i‡(
have
 > 0) {

33 i‡(
have
 > 
buf_À·
) {

34 
	`mem˝y
(
°ªam
, 
buf
 + 
buf_r
, 
buf_À·
 * 2);

35 
°ªam
 +
buf_À·
 * 2;

36 
buf_r
 = 0;

37 
have
 -
buf_À·
;

38 
Àn
 -
buf_À·
;

40 
	`mem˝y
(
°ªam
, 
buf
 + 
buf_r
, 
have
 * 2);

41 
°ªam
 +
have
 * 2;

42 
buf_r
 = (buf_∏+ 
have
Ë& 
BUF_MASK
;

43 
Àn
 -
have
;

46 i‡(
Àn
 > 0) {

48 
	`mem£t
(
°ªam
, 0, 
Àn
 * 2);

50 
	}
}

52 
	$¢dout_sdl_öô
()

54 
ªt
;

56 
ªt
 = 
	`SDL_InôSubSy°em
(
SDL_INIT_AUDIO
);

57 i‡(
ªt
 != 0)

61 
	}
}

63 
	$¢dout_sdl_°¨t
(
øã
, 
°îeo
)

65 
SDL_AudioS≥c
 
desúed
;

66 
ßm∂es
, 
shi·
;

67 
ªt
;

69 i‡(
°¨ãd
)

70 
	`¢dout_sdl_°›
();

72 
desúed
.
‰eq
 = 
øã
;

73 
desúed
.
f‹m©
 = 
AUDIO_S16LSB
;

74 
desúed
.
ch™√ls
 = 
°îeo
 ? 2 : 1;

75 
desúed
.
ˇŒback
 = callback;

76 
desúed
.
u£rd©a
 = 
NULL
;

78 
ßm∂es
 = 
øã
 >> 6;

79 
shi·
 = 8; (1 << shi·Ë< 
ßm∂es
; shift++)

81 
desúed
.
ßm∂es
 = 1 << 
shi·
;

83 
ªt
 = 
	`SDL_O≥nAudio
(&
desúed
, 
NULL
);

84 i‡(
ªt
 != 0) {

85 
	`Ârötf
(
°dîr
, "SDL_O≥nAudio: %s\n", 
	`SDL_GëEº‹
());

89 
buf_w
 = 
buf_r
 = 0;

91 
	`SDL_Pau£Audio
(0);

92 
°¨ãd
 = 1;

95 
	}
}

97 
	$¢dout_sdl_°›
()

99 
	`SDL_Pau£Audio
(1);

100 
	`SDL_Clo£Audio
();

101 
°¨ãd
 = 0;

102 
	}
}

104 
	$¢dout_sdl_waô
()

106 
À·
;

110 
À·
 = (
buf_r
 - 
buf_w
 - 2Ë& 
BUF_MASK
;

111 i‡(
À·
 >
BUF_LEN
 / 2)

114 
	`SDL_Dñay
(4);

116 
	}
}

118 
	$¢dout_sdl_wrôe_nb
(c⁄° *
ßm∂es
, 
Àn
)

120 
maxÀn
 = (
buf_r
 - 
buf_w
 - 2Ë& 
BUF_MASK
;

121 
buf_À·
 = 
BUF_LEN
 - 
buf_w
;

122 
ªtvÆ
;

124 
Àn
 /= 2;

125 i‡(
Àn
 > 
maxÀn
)

127 
Àn
 = 
maxÀn
;

128 i‡(
Àn
 == 0)

132 
ªtvÆ
 = 
Àn
;

134 i‡(
Àn
 > 
buf_À·
) {

135 
	`mem˝y
(
buf
 + 
buf_w
, 
ßm∂es
, 
buf_À·
 * 2);

136 
ßm∂es
 = (c⁄° *)ßm∂e†+ 
buf_À·
;

137 
Àn
 -
buf_À·
;

138 
buf_w
 = 0;

140 
	`mem˝y
(
buf
 + 
buf_w
, 
ßm∂es
, 
Àn
 * 2);

141 
buf_w
 = (buf_w + 
Àn
Ë& 
BUF_MASK
;

143  
ªtvÆ
;

144 
	}
}

146 
	$¢dout_sdl_exô
()

148 i‡(
°¨ãd
)

149 
	`¢dout_sdl_°›
();

150 
	`SDL_QuôSubSy°em
(
SDL_INIT_AUDIO
);

151 
	}
}

	@frontend/libpicofe/sndout_sdl.h

1 
¢dout_sdl_öô
();

2 
¢dout_sdl_°¨t
(
øã
, 
°îeo
);

3 
¢dout_sdl_°›
();

4 
¢dout_sdl_waô
();

5 
¢dout_sdl_wrôe_nb
(c⁄° *
buff
, 
Àn
);

6 
¢dout_sdl_exô
();

	@frontend/libpicofe/win32/direct.cpp

12 
	~<ddøw.h
>

13 
	~"../Õrötf.h
"

14 
	~"dúe˘.h
"

15 
	~"maö.h
"

17 
	#EmuWidth
 320

	)

18 
	#EmuHeight
 240

	)

20 
	#RELEASE
(
x
Ëi‡(xËx->
	`Rñó£
(); x=
NULL
;

	)

21 
	#LOGFAIL
(Ë
	`Õrötf
("Áû: %†%s:%i\n", 
__FUNCTION__
, 
__FILE__
, 
__LINE__
)

	)

23 
LPDIRECTDRAW7
 
	gm_pDD
 = 
NULL
;

24 
LPDIRECTDRAWSURFACE7
 
	gm_pddsFr⁄tBuf„r
 = 
NULL
;

25 
LPDIRECTDRAWSURFACE7
 
	gm_pddsBackBuf„r
 = 
NULL
;

28 
	$Dúe˘Exô
()

30 
	`RELEASE
(
m_pddsBackBuf„r
);

31 
	`RELEASE
(
m_pddsFr⁄tBuf„r
);

32 
	`RELEASE
(
m_pDD
);

33 
	}
}

35 
	$Dúe˘Inô
()

37 
HRESULT
 
ªt
;

38 
LPDIRECTDRAWCLIPPER
 
pcClù≥r
 = 
NULL
;

39 
DDSURFACEDESC2
 
ddsd
;

41 
ªt
 = 
	`Dúe˘DøwCª©eEx
(
NULL
, (
VOID
**)&
m_pDD
, 
IID_IDúe˘Døw7
, NULL);

42 i‡(
ªt
Ë{ 
	`LOGFAIL
();  1; }

45 
ªt
 = 
m_pDD
->
	`SëCo›î©iveLevñ
–
FømeWnd
, 
DDSCL_NORMAL
 );

46 i‡(
ªt
Ë{ 
	`LOGFAIL
(); 
Áû
; }

49 
	`ZîoMem‹y
–&
ddsd
, ( ddsd ) );

50 
ddsd
.
dwSize
 = ( ddsd );

51 
ddsd
.
dwFœgs
 = 
DDSD_CAPS
;

52 
ddsd
.
ddsC≠s
.
dwC≠s
 = 
DDSCAPS_PRIMARYSURFACE
;

54 
ªt
 = 
m_pDD
->
	`Cª©eSurÁ˚
–&
ddsd
, &
m_pddsFr⁄tBuf„r
, 
NULL
 );

55 i‡(
ªt
Ë{ 
	`LOGFAIL
(); 
Áû
; }

58 
ddsd
.
dwFœgs
 = 
DDSD_CAPS
 | 
DDSD_WIDTH
 | 
DDSD_HEIGHT
;

59 
ddsd
.
ddsC≠s
.
dwC≠s
 = 
DDSCAPS_OFFSCREENPLAIN
 | 
DDSCAPS_SYSTEMMEMORY
;

60 
ddsd
.
dwWidth
 = 
EmuWidth
;

61 
ddsd
.
dwHeight
 = 
EmuHeight
;

63 
ªt
 = 
m_pDD
->
	`Cª©eSurÁ˚
–&
ddsd
, &
m_pddsBackBuf„r
, 
NULL
 );

64 i‡(
ªt
Ë{ 
	`LOGFAIL
(); 
Áû
; }

67 
ªt
 = 
m_pDD
->
	`Cª©eClù≥r
–0, &
pcClù≥r
, 
NULL
 );

68 i‡(
ªt
Ë{ 
	`LOGFAIL
(); 
Áû
; }

70 
ªt
 = 
pcClù≥r
->
	`SëHWnd
–0, 
FømeWnd
 );

71 i‡(
ªt
Ë{ 
	`LOGFAIL
(); 
Áû
; }

73 
ªt
 = 
m_pddsFr⁄tBuf„r
->
	`SëClù≥r
–
pcClù≥r
 );

74 i‡(
ªt
Ë{ 
	`LOGFAIL
(); 
Áû
; }

76 
	`RELEASE
(
pcClù≥r
);

79 
Áû
:

80 
	`RELEASE
(
pcClù≥r
);

81 
	`Dúe˘Exô
();

83 
	}
}

85 
	$Dúe˘S¸ìn
(c⁄° *
emu_s¸ìn
)

87 c⁄° *
ps
 = (c⁄° *)
emu_s¸ìn
;

88 
DDSURFACEDESC2
 
sd
;

89 
ªt
, 
x
, 
y
;

91 
	`mem£t
(&
sd
, 0, (sd));

92 
sd
.
dwSize
 = (sd);

93 
ªt
 = 
m_pddsBackBuf„r
->
	`Lock
(
NULL
, &
sd
, 
DDLOCK_SURFACEMEMORYPTR
|
DDLOCK_WAIT
|
DDLOCK_WRITEONLY
, NULL);

94 i‡(
ªt
Ë{ 
	`LOGFAIL
();  1; }

98 i‡(
sd
.
ddpfPixñF‹m©
.
dwRGBBôCou¡
 == 32)

100 *
d°
 = (*)
sd
.
ÕSurÁ˚
;

101 
y
 = 0; y < 
EmuHeight
; y++)

103 
x
 = 0; x < 
EmuWidth
; x++)

105 
s
 = *
ps
++;

106 
d°
[
x
] = ((
s
&0xf800)<<8) | ((s&0x07e0)<<5) | ((s&0x001f)<<3);

108 
d°
 = (*)((*)d° + 
sd
.
lPôch
);

111 i‡(
sd
.
ddpfPixñF‹m©
.
dwRGBBôCou¡
 == 24)

113 *
d°
 = 
sd
.
ÕSurÁ˚
;

114 
y
 = 0; y < 
EmuHeight
; y++)

116 *
d°1
 = (*Ë
d°
;

117 
x
 = 0; x < 
EmuWidth
; x++, 
d°1
 += 3)

119 
s
 = *
ps
++;

120 
d°1
[2] = (
s
&0xf800)>>8; dst1[1] = (s&0x07e0)>>3; dst1[0] = s<<3;

122 
d°
 = (*)((*)d° + 
sd
.
lPôch
);

125 i‡(
sd
.
ddpfPixñF‹m©
.
dwRGBBôCou¡
 == 16)

127 *
d°
 = (*)
sd
.
ÕSurÁ˚
;

128 
y
 = 0; y < 
EmuHeight
; y++)

130 
	`mem˝y
(
d°
, 
ps
, 
EmuWidth
*2);

131 
ps
 +
EmuWidth
;

132 
d°
 = (*)((*)d° + 
sd
.
lPôch
);

137 
	`LOGFAIL
();

140 
ªt
 = 
m_pddsBackBuf„r
->
	`U∆ock
(
NULL
);

141 i‡(
ªt
Ë{ 
	`LOGFAIL
();  1; }

143 
	}
}

145 
	$Dúe˘CÀ¨
(
cﬁour
)

147 
ªt
 = 0;

148 
DDBLTFX
 
ddb…fx
;

149 
	`ZîoMem‹y
–&
ddb…fx
, (ddbltfx) );

150 
ddb…fx
.
dwSize
 = (ddbltfx);

151 
ddb…fx
.
dwFûlCﬁ‹
 = 
cﬁour
;

153 i‡(
m_pddsBackBuf„r
 !
NULL
)

154 
ªt
 = 
m_pddsBackBuf„r
->
	`B…
–
NULL
, NULL, NULL, 
DDBLT_COLORFILL
, &
ddb…fx
 );

155 i‡(
ªt
Ë{ 
	`LOGFAIL
();  1; }

157 
	}
}

159 
	$Dúe˘Pª£¡
()

161 
ªt
 = 0;

162 i‡(
FømeRe˘My
.
right
 - FømeRe˘My.
À·
 > 0 && FømeRe˘My.
bŸtom
 - FømeRe˘My.
t›
 > 0)

163 
ªt
 = 
m_pddsFr⁄tBuf„r
->
	`B…
(&
FømeRe˘My
, 
m_pddsBackBuf„r
, &
EmuS¸ìnRe˘
, 
DDBLT_WAIT
, 
NULL
);

164 i‡(
ªt
Ë{ 
	`LOGFAIL
();  1; }

166 
	}
}

170 #ifde‡
USE_D3D


171 
IDúe˘3D8
 *
	gDúe˘3D
=
NULL
;

172 
IDúe˘3DDevi˚8
 *
	gDevi˚
=
NULL
;

173 
IDúe˘3DSurÁ˚8
 *
	gDúe˘Back
=
NULL
;

175 
IDúe˘3DVîãxBuf„r8
 *
	gVîãxBuf„r
=
NULL
;

177 
	sCu°omVîãx


179 
	mx
,
	my
,
	mz
;

180 
	mcﬁour
;

181 
	mu
,
	mv
;

183 
	#D3DFVF_CUSTOMVERTEX
 (
D3DFVF_XYZ
|
D3DFVF_DIFFUSE
|
D3DFVF_TEX1
)

	)

185 
Cu°omVîãx
 
	gVîãxLi°
[4];

187 
	$Dúe˘Inô
()

189 
D3DPRESENT_PARAMETERS
 
d3dµ
;

190 
D3DDISPLAYMODE
 
mode
;

191 
i
,
u
,
ªt
=0;

193 
	`mem£t
(&
d3dµ
,0,(d3dpp));

194 
	`mem£t
(&
mode
,0,(mode));

196 
Dúe˘3D
=
	`Dúe˘3DCª©e8
(
D3D_SDK_VERSION
); i‡(Dúe˘3D==
NULL
)  1;

199 
d3dµ
.
BackBuf„rWidth
 =
MaöWidth
;

200 
d3dµ
.
BackBuf„rHeight
=
MaöHeight
;

201 
d3dµ
.
BackBuf„rCou¡
 =1;

202 
d3dµ
.
Sw≠Ef„˘
=
D3DSWAPEFFECT_DISCARD
;

203 
d3dµ
.
Mu…iSam∂eTy≥
 =
D3DMULTISAMPLE_NONE
;

205 #ifde‡
_XBOX


206 
d3dµ
.
BackBuf„rF‹m©
=
D3DFMT_X8R8G8B8
;

207 
d3dµ
.
FuŒS¸ìn_Re‰eshR©eInHz
=60;

209 
Dúe˘3D
->
	`GëAd≠ãrDi•œyMode
(
D3DADAPTER_DEFAULT
,&
mode
);

210 
d3dµ
.
BackBuf„rF‹m©
=
mode
.
F‹m©
;

211 
d3dµ
.
Wödowed
=1;

212 
d3dµ
.
hDevi˚Wödow
=
FømeWnd
;

216 
i
=0;i<3;i++)

218 
behave
=
D3DCREATE_HARDWARE_VERTEXPROCESSING
;

221 i‡(
i
==1Ë
behave
=
D3DCREATE_MIXED_VERTEXPROCESSING
;

222 i‡(
i
==2Ë
behave
=
D3DCREATE_SOFTWARE_VERTEXPROCESSING
;

224 
Dúe˘3D
->
	`Cª©eDevi˚
(
D3DADAPTER_DEFAULT
,
D3DDEVTYPE_HAL
,
FømeWnd
,

225 
behave
|
D3DCREATE_MULTITHREADED
,&
d3dµ
,&
Devi˚
);

226 i‡(
Devi˚
) ;

229 i‡(
Devi˚
==
NULL
)

233 
Dúe˘3D
->
	`Cª©eDevi˚
(
D3DADAPTER_DEFAULT
,
D3DDEVTYPE_REF
,
FømeWnd
,

234 
D3DCREATE_SOFTWARE_VERTEXPROCESSING
|
D3DCREATE_MULTITHREADED
,&
d3dµ
,&
Devi˚
);

235 i‡(
Devi˚
==
NULL
Ë
Áû0
;

236 
HMODULE
 
ã°
 = 
	`LﬂdLibøry
("d3d8d.dll");

237 i‡(
ã°
 !
NULL
Ë
	`FªeLibøry
(test);

239 
	`îr‹
("Sorry, butÅhisÖrogramÑequires Direct3D with hardwareácceleration.\n\n"

242 
Áû1
;

245 
Áû1
;

249 
Devi˚
->
	`GëBackBuf„r
(0,
D3DBACKBUFFER_TYPE_MONO
,&
Dúe˘Back
);

250 i‡(
Dúe˘Back
==
NULL
Ë
Áû1
;

252 
Devi˚
->
	`Cª©eVîãxBuf„r
((
VîãxLi°
),0,
D3DFVF_CUSTOMVERTEX
,
D3DPOOL_DEFAULT
,&
VîãxBuf„r
);

253 i‡(
VîãxBuf„r
==
NULL
Ë
Áû2
;

255 
ªt
=
	`TexS¸ìnInô
(); i‡‘ëË
Áû3
;

259 
Devi˚
->
	`SëRídîSèã
(
D3DRS_LIGHTING
,0);

262 
Devi˚
->
	`SëTextuªSègeSèã
(0,
D3DTSS_ADDRESSU
,
D3DTADDRESS_CLAMP
);

263 
Devi˚
->
	`SëTextuªSègeSèã
(0,
D3DTSS_ADDRESSV
,
D3DTADDRESS_CLAMP
);

267 
Áû3
:

268 
	`RELEASE
(
VîãxBuf„r
)

269 
Áû2
:

270 
	`RELEASE
(
Dúe˘Back
)

271 
Áû1
:

272 
	`RELEASE
(
Devi˚
)

273 
Áû0
:

274 
	`RELEASE
(
Dúe˘3D
)

277 
	}
}

279 
	$Dúe˘Exô
()

281 
	`TexS¸ìnExô
();

284 
	`RELEASE
(
VîãxBuf„r
)

285 
	`RELEASE
(
Dúe˘Back
)

286 
	`RELEASE
(
Devi˚
)

287 
	`RELEASE
(
Dúe˘3D
)

288 
	}
}

290 
	$Dúe˘CÀ¨
(
cﬁour
)

292 i‡(
Devi˚
 !
NULL
) {

293 
Devi˚
->
	`CÀ¨
(0,
NULL
,
D3DCLEAR_TARGET
,
cﬁour
,1.0f,0);

298 
	}
}

300 
	$Dúe˘Pª£¡
()

302 i‡(
Devi˚
 !
NULL
) {

303 
Devi˚
->
	`Pª£¡
(
NULL
,NULL,NULL,NULL);

308 
	}
}

310 
	#PI
 3.14159265f

	)

312 
	$MakeVîãxLi°
()

314 
Cu°omVîãx
 *
vît
=
NULL
,*
pv
=NULL;

315 
di°
=0.0f;

316 
sˇÀx
=0.0f,
sˇÀy
=0.0f;

317 
cﬁour
=0xffffff;

318 
right
=0.0f,
bŸtom
=0.0f;

320 i‡(
Lo›Mode
!=8Ë
cﬁour
=0x102040;

322 
di°
=10.0f; 
sˇÀx
=di°*1.3333f; 
sˇÀy
=dist;

324 
sˇÀx
*=640.0f/()
MaöWidth
;

325 
sˇÀy
*=448.0f/()
MaöHeight
;

327 
vît
=
VîãxLi°
;

330 
pv
=
vît
;

331 
pv
->
z
=
di°
;

332 
pv
->
x
=-
sˇÀx
;Öv->
y
=
sˇÀy
;

333 
pv
->
cﬁour
=colour;Öv++;

335 *
pv
=
vît
[0];Öv->
x

sˇÀx
;Öv->
y

sˇÀy
;Öv++;

336 *
pv
=
vît
[0];Öv->
x
=-
sˇÀx
;Öv->
y
=-
sˇÀy
;Öv++;

337 *
pv
=
vît
[0];Öv->
x

sˇÀx
;Öv->
y
=-
sˇÀy
;Öv++;

340 
right
 =()
EmuWidth
 /()
TexWidth
;

341 
bŸtom
=()
EmuHeight
/()
TexHeight
;

344 
pv
=
vît
;

345 
pv
->
u
=0.0f;Öv->
v
=0.00f;Öv++;

346 
pv
->
u
=
right
;Öv->
v
=0.00f;Öv++;

347 
pv
->
u
=0.0f;Öv->
v
=
bŸtom
;Öv++;

348 
pv
->
u
=
right
;Öv->
v
=
bŸtom
;Öv++;

351 
	}
}

353 
	$SëupM©ri˚s
()

355 
D3DXVECTOR3
 
	`eye
 ( 0.0f, 0.0f, 0.0f );

356 
D3DXVECTOR3
 
	`look
( 0.0f, 0.0f, 0.0f );

357 
D3DXVECTOR3
 
	`up
 ( 0.0f, 1.0f, 0.0f );

358 
D3DXMATRIX
 
m©
;

359 
nudgex
=0.0f,
nudgey
=0.0f;

361 
	`mem£t
(&
m©
,0,(mat));

363 
m©
.
m
[0][0]=mat.m[1][1]=mat.m[2][2]=mat.m[3][3]=1.0f;

364 
Devi˚
->
	`SëTønsf‹m
(
D3DTS_WORLD
,&
m©
);

366 
look
.
x
=()
I≈
.
axis
[2]/2457.6f;

367 
look
.
y
=()
I≈
.
axis
[3]/2457.6f;

368 
look
.
z
=10.0f;

371 
nudgex
=13.3333f/()(
MaöWidth
 <<1);

372 
nudgey
=10.0000f/()(
MaöHeight
<<1);

373 
eye
.
x
 +=
nudgex
;Éye.
y
 +=
nudgey
;

374 
look
.
x
+=
nudgex
;Üook.
y
+=
nudgey
;

376 
	`D3DXM©rixLookAtLH
(&
m©
,&
eye
,&
look
,&
up
);

377 
Devi˚
->
	`SëTønsf‹m
(
D3DTS_VIEW
,&
m©
);

379 
	`D3DXM©rixPî•e˘iveFovLH
(&
m©
, 0.5f*
PI
, 1.3333f, 0.2f, 1000.0f);

380 
Devi˚
->
	`SëTønsf‹m
(
D3DTS_PROJECTION
,&
m©
);

382 
	}
}

384 
	$Dúe˘S¸ìn
()

386 *
lock
=
NULL
;

387 
ªt
;

389 i‡(
Devi˚
 =
NULL
)

390  
	`Dúe˘S¸ìnDDøw
();

393 #ifde‡
_XBOX


394 
	`TexS¸ìnSwizzÀ
();

396 
ªt
=
	`TexS¸ìnLöór
();

397 i‡(
ªt
Ë
	`Õrötf
("TexScreenLinear failed\n");

400 
	`SëupM©ri˚s
();

402 
	`MakeVîãxLi°
();

405 
VîãxBuf„r
->
	`Lock
(0,(
VîãxLi°
),&
lock
,0);

406 i‡(
lock
==
NULL
Ë{ 
	`Õrötf
("VertexBuffer->Lock failed\n");  1; }

407 
	`mem˝y
(
lock
,
VîãxLi°
,(VertexList));

408 
VîãxBuf„r
->
	`U∆ock
();

410 
Devi˚
->
	`BegöS˚√
();

411 
Devi˚
->
	`SëTextuª
(0,
TexS¸ìn
);

412 
Devi˚
->
	`SëSåómSour˚
(0,
VîãxBuf„r
,(
Cu°omVîãx
));

413 
Devi˚
->
	`SëVîãxShadî
(
D3DFVF_CUSTOMVERTEX
);

414 
Devi˚
->
	`DøwPrimôive
(
D3DPT_TRIANGLESTRIP
,0,2);

415 
Devi˚
->
	`EndS˚√
();

418 
	}
}

	@frontend/libpicofe/win32/direct.h

1 #ifde‡
__˝lu•lus


5 
Dúe˘Inô
();

6 
Dúe˘Exô
();

8 
Dúe˘S¸ìn
(c⁄° *
emu_s¸ìn
);

9 
Dúe˘CÀ¨
(
cﬁour
);

10 
Dúe˘Pª£¡
();

13 #ifde‡
__˝lu•lus


	@frontend/libpicofe/win32/dsnd.cpp

12 
	~<°dlib.h
>

13 
	#WIN32_LEAN_AND_MEAN


	)

14 
	~<wödows.h
>

15 
	~<mmsy°em.h
>

16 
	~<dsound.h
>

18 
	~"d¢d.h
"

19 
	~"../Õrötf.h
"

21 
	#NSEGS
 4

	)

22 
	#RELEASE
(
x
Ëi‡(xËx->
	`Rñó£
(); x=
NULL
;

	)

24 
LPDIRECTSOUND
 
	gDSound
;

25 
LPDIRECTSOUNDBUFFER
 
	gLo›Buf„r
;

26 
LPDIRECTSOUNDNOTIFY
 
	gDSoundNŸify
;

27 
HANDLE
 
	g£g_∂ayed_evít
;

28 
	gLo›Lí
, 
	gLo›Wrôe
, 
	gLo›Seg
;

30 
	$Lo›Bœnk
()

32 *
mema
=
NULL
,*
memb
=NULL;

33 
DWORD
 
sizó
=0,
sizeb
=0;

35 
Lo›Buf„r
->
	`Lock
(0, 
Lo›Lí
, &
mema
,&
sizó
, &
memb
,&
sizeb
, 0);

37 i‡(
mema
Ë
	`mem£t
(mema,0,
sizó
);

39 
Lo›Buf„r
->
	`U∆ock
(
mema
,
sizó
, 
memb
,
sizeb
);

42 
	}
}

44 
	$DSoundInô
(
HWND
 
wnd_co›
, 
øã
, 
°îeo
, 
£g_ßm∂es
)

46 
DSBUFFERDESC
 
dsbd
;

47 
WAVEFORMATEX
 
wfx
;

48 
DSBPOSITIONNOTIFY
 
nŸifõs
[
NSEGS
];

49 
i
;

51 
	`mem£t
(&
dsbd
,0,(dsbd));

52 
	`mem£t
(&
wfx
,0,(wfx));

55 
wfx
.
wF‹m©Tag
=
WAVE_FORMAT_PCM
;

56 
wfx
.
nCh™√ls
=
°îeo
 ? 2 : 1;

57 
wfx
.
nSam∂esPîSec
=
øã
;

58 
wfx
.
wBôsPîSam∂e
=16;

60 
wfx
.
nBlockAlign
=(
WORD
)((wfx.
nCh™√ls
*wfx.
wBôsPîSam∂e
)>>3);

61 
wfx
.
nAvgByãsPîSec
=wfx.
nBlockAlign
*wfx.
nSam∂esPîSec
;

64 
	`Dúe˘SoundCª©e
(
NULL
,&
DSound
,NULL);

65 i‡(
DSound
==
NULL
)  1;

67 
Lo›Seg
 = 
£g_ßm∂es
 * 2;

68 i‡(
°îeo
)

69 
Lo›Seg
 *= 2;

71 
Lo›Lí
 = 
Lo›Seg
 * 
NSEGS
;

73 
DSound
->
	`SëCo›î©iveLevñ
(
wnd_co›
, 
DSSCL_PRIORITY
);

74 
dsbd
.
dwFœgs
=
DSBCAPS_GLOBALFOCUS
;

75 
dsbd
.
dwFœgs
|=
DSBCAPS_GETCURRENTPOSITION2
|
DSBCAPS_CTRLPOSITIONNOTIFY
;

78 
dsbd
.
dwSize
=(dsbd);

79 
dsbd
.
dwBuf„rByãs
=
Lo›Lí
;

80 
dsbd
.
ÕwfxF‹m©
=&
wfx
;

82 
DSound
->
	`Cª©eSoundBuf„r
(&
dsbd
,&
Lo›Buf„r
,
NULL
);

83 i‡(
Lo›Buf„r
==
NULL
)  1;

85 
Lo›Buf„r
->
	`QuîyI¡îÁ˚
(
IID_IDúe˘SoundNŸify
, (
LPVOID
*)&
DSoundNŸify
);

86 i‡(
DSoundNŸify
 =
NULL
) {

87 
	`Õrötf
("QueryInterface(IID_IDirectSoundNotify) failed\n");

88 
out
;

91 
£g_∂ayed_evít
 = 
	`Cª©eEvít
(
NULL
, 0, 0, NULL);

92 i‡(
£g_∂ayed_evít
 =
NULL
)

93 
out
;

95 
i
 = 0; i < 
NSEGS
; i++) {

96 
nŸifõs
[
i
].
dwOff£t
 = i * 
Lo›Seg
;

97 
nŸifõs
[
i
].
hEvítNŸify
 = 
£g_∂ayed_evít
;

99 
i
 = 
DSoundNŸify
->
	`SëNŸifiˇti⁄Posôi⁄s
(
NSEGS
, 
nŸifõs
);

100 i‡(
i
 !
DS_OK
) {

101 
	`Õrötf
("SetNotificationPositions failed\n");

102 
out
;

105 
out
:

106 
	`Lo›Bœnk
();

107 
Lo›Buf„r
->
	`Pœy
(0, 0, 
DSBPLAY_LOOPING
);

109 
	}
}

111 
	$DSoundExô
()

113 i‡(
Lo›Buf„r
)

114 
Lo›Buf„r
->
	`St›
();

115 
	`RELEASE
(
DSoundNŸify
);

116 
	`RELEASE
(
Lo›Buf„r
)

117 
	`RELEASE
(
DSound
)

118 
	`Clo£H™dÀ
(
£g_∂ayed_evít
);

119 
£g_∂ayed_evít
 = 
NULL
;

120 
	}
}

122 
	$WrôeSeg
(c⁄° *
buff
)

124 *
mema
=
NULL
,*
memb
=NULL;

125 
DWORD
 
sizó
=0,
sizeb
=0;

126 
ªt
;

129 
ªt
 = 
Lo›Buf„r
->
	`Lock
(
Lo›Wrôe
, 
Lo›Seg
, &
mema
, &
sizó
, &
memb
, &
sizeb
, 0);

130 i‡(
ªt
 !
DS_OK
)

131 
	`Õrötf
("Lo›Buf„r->Lock(ËÁûed: %i\n", 
ªt
);

133 i‡(
mema
Ë
	`mem˝y
(mema,
buff
,
sizó
);

135 i‡(
sizeb
 !0Ë
	`Õrötf
("sizeb isÇot 0! (%i)\n", sizeb);

137 
ªt
 = 
Lo›Buf„r
->
	`U∆ock
(
mema
,
sizó
, 
memb
, 
sizeb
);

138 i‡(
ªt
 !
DS_OK
)

139 
	`Õrötf
("Lo›Buf„r->U∆ock(ËÁûed: %i\n", 
ªt
);

142 
	}
}

144 
	$DSoundUpd©e
(c⁄° *
buff
, 
blockög
)

146 
DWORD
 
∂ay
 = 0;

147 
pos
;

149 
Lo›Buf„r
->
	`GëCuºítPosôi⁄
(&
∂ay
, 
NULL
);

150 
pos
 = 
∂ay
;

154 i‡(
blockög
) {

155 
Lo›Wrôe
 <
pos
 &&Öo†< Lo›Wrôê+ 
Lo›Seg
) {

156 
	`WaôF‹SögÀObje˘
(
£g_∂ayed_evít
, 5000);

157 
Lo›Buf„r
->
	`GëCuºítPosôi⁄
(&
∂ay
, 
NULL
);

158 
pos
 = 
∂ay
;

162 i‡(
Lo›Wrôe
 <
pos
 &&Öo†< Lo›Wrôê+ 
Lo›Seg
)

166 
	`WrôeSeg
(
buff
);

169 
Lo›Wrôe
 +
Lo›Seg
;

170 i‡(
Lo›Wrôe
 + 
Lo›Seg
 > 
Lo›Lí
)

171 
Lo›Wrôe
 = 0;

174 
	}
}

	@frontend/libpicofe/win32/dsnd.h

1 #ifde‡
__˝lu•lus


5 
DSoundInô
(
HWND
 
wnd_co›
, 
øã
, 
°îeo
, 
£g_ßm∂es
);

6 
DSoundExô
();

7 
DSoundUpd©e
(c⁄° *
buff
, 
blockög
);

9 *
DSoundNext
;

11 #ifde‡
__˝lu•lus


	@frontend/libpicofe/win32/in_vk.c

12 
	#RC_INVOKED


13 
	~<wöu£r.h
>

	)

14 #unde‡
RC_INVOKED


15 
	~<°rög.h
>

17 
	~"../öput.h
"

18 
	~"../emu.h
"

19 
	~"ö_vk.h
"

21 
	#IN_VK_PREFIX
 "vk:"

	)

22 
	#IN_VK_NKEYS
 0x100

	)

24 c⁄° * c⁄° 
	gö_vk_¥efix
 = 
IN_VK_PREFIX
;

25 c⁄° * c⁄° 
	gö_vk_keys
[
IN_VK_NKEYS
] = {

26 [0 ... (
IN_VK_NKEYS
 - 1)] = 
NULL
,

27 [
VK_LBUTTON
] = "LBUTTON", [
VK_RBUTTON
] = "RBUTTON",

28 [
VK_TAB
] = "TAB", [
VK_RETURN
] = "RETURN",

29 [
VK_SHIFT
] = "SHIFT", [
VK_CONTROL
] = "CONTROL",

30 [
VK_LEFT
] = "LEFT", [
VK_UP
] = "UP",

31 [
VK_RIGHT
] = "RIGHT", [
VK_DOWN
] = "DOWN",

32 [
VK_SPACE
] = "SPACE",

36 
	gö_vk_add_∂12
;

39 
	gö_vk_keys_down
[4];

76 
	$ö_vk_¥obe
()

78 
	`mem£t
(
ö_vk_keys_down
, 0, (in_vk_keys_down));

79 
	`ö_ªgi°î
(
IN_VK_PREFIX
 "vk", 
IN_DRVID_VK
, -1, (*)1, 
IN_VK_NKEYS
, 
NULL
, 0);

80 
	}
}

82 
	$ö_vk_gë_böd_cou¡
()

84  
IN_VK_NKEYS
;

85 
	}
}

88 
	$ö_vk_upd©e
(*
drv_d©a
, c⁄° *
böds
, *
ªsu…
)

90 
i
, 
t
, 
k
;

92 
i
 = 0; i < 
	`¨øy_size
(
ö_vk_keys_down
); i++) {

93 
k
 = 
ö_vk_keys_down
[
i
];

94 i‡(!
k
)

97 
t
 = 0;Å < 
IN_BINDTYPE_COUNT
;Å++)

98 
ªsu…
[
t
] |
böds
[
	`IN_BIND_OFFS
(
k
,Å)];

101 
ªsu…
[
IN_BINDTYPE_PLAYER12
] |
ö_vk_add_∂12
;

104 
	}
}

106 
	$ö_vk_keydown
(
kc
)

108 
i
;

111 
i
 = 0; i < 
	`¨øy_size
(
ö_vk_keys_down
); i++)

112 i‡(
ö_vk_keys_down
[
i
] =
kc
)

116 
i
 = 0; i < 
	`¨øy_size
(
ö_vk_keys_down
); i++) {

117 i‡(
ö_vk_keys_down
[
i
] == 0) {

118 
ö_vk_keys_down
[
i
] = 
kc
;

122 
	}
}

124 
	$ö_vk_keyup
(
kc
)

126 
i
;

127 
i
 = 0; i < 
	`¨øy_size
(
ö_vk_keys_down
); i++)

128 i‡(
ö_vk_keys_down
[
i
] =
kc
)

129 
ö_vk_keys_down
[
i
] = 0;

130 
	}
}

132 
	$ö_vk_upd©e_keycode
(*
d©a
, *
is_down
)

135 
	}
}

138 
	mkey
;

139 
	mpbä
;

140 } 
	gkey_pbä_m≠
[] =

142 { 
VK_UP
, 
PBTN_UP
 },

143 { 
VK_DOWN
, 
PBTN_DOWN
 },

144 { 
VK_LEFT
, 
PBTN_LEFT
 },

145 { 
VK_RIGHT
, 
PBTN_RIGHT
 },

146 { 
VK_RETURN
, 
PBTN_MOK
 },

157 
	#KEY_PBTN_MAP_SIZE
 ((
key_pbä_m≠
Ë/ (key_pbä_m≠[0]))

	)

159 
	$ö_vk_míu_å™¶©e
(*
drv_d©a
, 
keycode
)

161 
i
;

162 i‡(
keycode
 < 0)

165 
keycode
 = -keycode;

166 
i
 = 0; i < 
KEY_PBTN_MAP_SIZE
; i++)

167 i‡(
key_pbä_m≠
[
i
].
pbä
 =
keycode
)

168  
key_pbä_m≠
[
i
].
key
;

172 
i
 = 0; i < 
KEY_PBTN_MAP_SIZE
; i++)

173 i‡(
key_pbä_m≠
[
i
].
key
 =
keycode
)

174  
key_pbä_m≠
[
i
].
pbä
;

178 
	}
}

180 
	$ö_vk_gë_key_code
(c⁄° *
key_«me
)

182 
i
;

184 i‡(
key_«me
[1] == 0 && 'A' <= key_name[0] && key_name[0] <= 'Z')

185  
key_«me
[0];

187 
i
 = 0; i < 
IN_VK_NKEYS
; i++) {

188 c⁄° *
k
 = 
ö_vk_keys
[
i
];

189 i‡(
k
 !
NULL
 && 
	`°rˇ£cmp
(k, 
key_«me
) == 0)

190  
i
;

194 
	}
}

196 c⁄° *
	$ö_vk_gë_key_«me
(
keycode
)

198 c⁄° *
«me
 = 
NULL
;

199 
buff
[4];

201 i‡('A' <
keycode
 && keycode < 'Z') {

202 
buff
[0] = 
keycode
;

203 
buff
[1] = 0;

204  
buff
;

207 i‡(0 <
keycode
 && keycodê< 
IN_VK_NKEYS
)

208 
«me
 = 
ö_vk_keys
[
keycode
];

209 i‡(
«me
 =
NULL
)

210 
«me
 = "Unkn";

212  
«me
;

213 
	}
}

216 
	mcode
;

217 
	mbty≥
;

218 
	mbô
;

219 } 
	gö_vk_def_böds
[] =

222 { 
VK_UP
, 
IN_BINDTYPE_PLAYER12
, 0 },

223 { 
VK_DOWN
, 
IN_BINDTYPE_PLAYER12
, 1 },

224 { 
VK_LEFT
, 
IN_BINDTYPE_PLAYER12
, 2 },

225 { 
VK_RIGHT
, 
IN_BINDTYPE_PLAYER12
, 3 },

226 { 'S', 
IN_BINDTYPE_PLAYER12
, 4 },

227 { 'D', 
IN_BINDTYPE_PLAYER12
, 5 },

228 { 'A', 
IN_BINDTYPE_PLAYER12
, 6 },

229 { 
VK_RETURN
, 
IN_BINDTYPE_PLAYER12
, 7 },

230 { 'E', 
IN_BINDTYPE_PLAYER12
, 8 },

231 { 'W', 
IN_BINDTYPE_PLAYER12
, 9 },

232 { 'Q', 
IN_BINDTYPE_PLAYER12
,10 },

233 { 'R', 
IN_BINDTYPE_PLAYER12
,11 },

244 
	#DEF_BIND_COUNT
 ((
ö_vk_def_böds
Ë/ (ö_vk_def_böds[0]))

	)

246 
	$ö_vk_gë_def_böds
(*
böds
)

248 
i
;

250 
i
 = 0; i < 
DEF_BIND_COUNT
; i++)

251 
böds
[
	`IN_BIND_OFFS
(
ö_vk_def_böds
[
i
].
code
, in_vk_def_böds[i].
bty≥
)] =

252 1 << 
ö_vk_def_böds
[
i
].
bô
;

253 
	}
}

256 
	$ö_vk_˛ón_böds
(*
drv_d©a
, *
böds
, *
def_böds
)

258 
i
, 
cou¡
 = 0;

260 
i
 = 0; i < 
IN_VK_NKEYS
; i++) {

261 
t
, 
offs
;

262 
t
 = 0;Å < 
IN_BINDTYPE_COUNT
;Å++) {

263 
offs
 = 
	`IN_BIND_OFFS
(
i
, 
t
);

264 i‡(
	`°rcmp
(
	`ö_vk_gë_key_«me
(
i
), "Unkn") == 0)

265 
böds
[
offs
] = 
def_böds
[offs] = 0;

266 i‡(
böds
[
offs
])

267 
cou¡
++;

271  
cou¡
;

272 
	}
}

274 
	$ö_vk_öô
(*
vdrv
)

276 
ö_drv_t
 *
drv
 = 
vdrv
;

278 
drv
->
¥efix
 = 
ö_vk_¥efix
;

279 
drv
->
¥obe
 = 
ö_vk_¥obe
;

280 
drv
->
gë_böd_cou¡
 = 
ö_vk_gë_böd_cou¡
;

281 
drv
->
gë_def_böds
 = 
ö_vk_gë_def_böds
;

282 
drv
->
˛ón_böds
 = 
ö_vk_˛ón_böds
;

283 
drv
->
míu_å™¶©e
 = 
ö_vk_míu_å™¶©e
;

284 
drv
->
gë_key_code
 = 
ö_vk_gë_key_code
;

285 
drv
->
gë_key_«me
 = 
ö_vk_gë_key_«me
;

286 
drv
->
upd©e_keycode
 = 
ö_vk_upd©e_keycode
;

287 
	}
}

	@frontend/libpicofe/win32/in_vk.h

1 #ifde‡
IN_VK


3 
ö_vk_öô
(*
vdrv
);

4 
ö_vk_upd©e
(*
drv_d©a
, c⁄° *
böds
, *
ªsu…
);

6 
ö_vk_keydown
(
kc
);

7 
ö_vk_keyup
(
kc
);

9 
ö_vk_add_∂12
;

13 
	#ö_vk_öô
(
x
)

	)

14 
	#ö_vk_upd©e
(
a
,
b
,
c
Ë0

	)

	@frontend/libretro.c

8 
	#_GNU_SOURCE
 1

9 
	~<°dio.h
>

	)

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

12 
	~<°rögs.h
>

14 
	~"../libpcsxc‹e/misc.h
"

15 
	~"../libpcsxc‹e/psxcou¡îs.h
"

16 
	~"../libpcsxc‹e/psxmem_m≠.h
"

17 
	~"../libpcsxc‹e/√w_dy«ªc/√w_dy«ªc.h
"

18 
	~"../libpcsxc‹e/cdrom.h
"

19 
	~"../libpcsxc‹e/cdriso.h
"

20 
	~"../libpcsxc‹e/chót.h
"

21 
	~"../∂ugös/dfsound/out.h
"

22 
	~"../∂ugös/dfsound/•u_c⁄fig.h
"

23 
	~"../∂ugös/dföput/exã∫Æs.h
"

24 
	~"c•a˚.h
"

25 
	~"maö.h
"

26 
	~"∂ugö.h
"

27 
	~"∂ugö_lib.h
"

28 
	~"ªvisi⁄.h
"

29 
	~"libªåo.h
"

31 
ªåo_video_ª‰esh_t
 
	gvideo_cb
;

32 
ªåo_öput_pﬁl_t
 
	göput_pﬁl_cb
;

33 
ªåo_öput_°©e_t
 
	göput_°©e_cb
;

34 
ªåo_ívú⁄mít_t
 
	gívú⁄_cb
;

35 
ªåo_audio_ßm∂e_b©ch_t
 
	gaudio_b©ch_cb
;

36 
ªåo_rumbÀ_öãrÁ˚
 
	grumbÀ
;

38 *
	gvout_buf
;

39 
	gvout_width
, 
	gvout_height
;

40 
	gvout_doffs_ﬁd
, 
	gvout_fb_dúty
;

41 
boﬁ
 
	gvout_ˇn_du≥
;

42 
boﬁ
 
	gdupög_íabÀ
;

44 
	g∂ugös_›íed
;

45 
	gis_∑l_mode
;

48 
Mcd1D©a
[
MCD_SIZE
];

49 
McdDißbÀ
[2];

52 
	gö_ty≥1
, 
	gö_ty≥2
;

53 
	gö_a1
[2] = { 127, 127 }, 
	gö_a2
[2] = { 127, 127 };

54 
	gö_key°©e
;

55 
	gö_íabÀ_vibøti⁄
 = 1;

58 
	#VOUT_MAX_WIDTH
 1024

	)

59 
	#VOUT_MAX_HEIGHT
 512

	)

61 
	$öô_memˇrd
(*
mcd_d©a
)

63 
off
 = 0;

64 
i
;

66 
	`mem£t
(
mcd_d©a
, 0, 
MCD_SIZE
);

68 
mcd_d©a
[
off
++] = 'M';

69 
mcd_d©a
[
off
++] = 'C';

70 
off
 += 0x7d;

71 
mcd_d©a
[
off
++] = 0x0e;

73 
i
 = 0; i < 15; i++) {

74 
mcd_d©a
[
off
++] = 0xa0;

75 
off
 += 0x07;

76 
mcd_d©a
[
off
++] = 0xff;

77 
mcd_d©a
[
off
++] = 0xff;

78 
off
 += 0x75;

79 
mcd_d©a
[
off
++] = 0xa0;

82 
i
 = 0; i < 20; i++) {

83 
mcd_d©a
[
off
++] = 0xff;

84 
mcd_d©a
[
off
++] = 0xff;

85 
mcd_d©a
[
off
++] = 0xff;

86 
mcd_d©a
[
off
++] = 0xff;

87 
off
 += 0x04;

88 
mcd_d©a
[
off
++] = 0xff;

89 
mcd_d©a
[
off
++] = 0xff;

90 
off
 += 0x76;

92 
	}
}

94 
	$vout_›í
()

97 
	}
}

99 
	$vout_£t_mode
(
w
, 
h
, 
øw_w
, 
øw_h
, 
bµ
)

101 
vout_width
 = 
w
;

102 
vout_height
 = 
h
;

103 
	}
}

105 #i‚de‡
FRONTEND_SUPPORTS_RGB565


106 
	$c⁄vît
(*
buf
, 
size_t
 
byãs
)

108 
i
, 
v
, *
p
 = 
buf
;

110 
i
 = 0; i < 
byãs
 / 4; i++) {

111 
v
 = 
p
[
i
];

112 
p
[
i
] = (
v
 & 0x001f001f) | ((v >> 1) & 0x7fe07fe0);

114 
	}
}

117 
	$vout_Êù
(c⁄° *
vøm
, 
°ride
, 
bgr24
, 
w
, 
h
)

119 *
de°
 = 
vout_buf
;

120 c⁄° *
§c
 = 
vøm
;

121 
d°ride
 = 
vout_width
, 
h1
 = 
h
;

122 
doffs
;

124 i‡(
vøm
 =
NULL
) {

126 
	`mem£t
(
vout_buf
, 0, 
d°ride
 * 
h
 * 2);

127 
out
;

130 
doffs
 = (
vout_height
 - 
h
Ë* 
d°ride
;

131 
doffs
 +(
d°ride
 - 
w
) / 2 & ~1;

132 i‡(
doffs
 !
vout_doffs_ﬁd
) {

134 
	`mem£t
(
vout_buf
, 0, 
d°ride
 * 
h
 * 2);

135 
vout_doffs_ﬁd
 = 
doffs
;

137 
de°
 +
doffs
;

139 i‡(
bgr24
)

142 ; 
h1
-- > 0; 
de°
 +
d°ride
, 
§c
 +
°ride
)

144 
	`bgr888_to_rgb565
(
de°
, 
§c
, 
w
 * 3);

149 ; 
h1
-- > 0; 
de°
 +
d°ride
, 
§c
 +
°ride
)

151 
	`bgr555_to_rgb565
(
de°
, 
§c
, 
w
 * 2);

155 
out
:

156 #i‚de‡
FRONTEND_SUPPORTS_RGB565


157 
	`c⁄vît
(
vout_buf
, 
vout_width
 * 
vout_height
 * 2);

159 
vout_fb_dúty
 = 1;

160 
∂_ª¨med_cbs
.
Êù_˙t
++;

161 
	}
}

163 
	$vout_˛o£
()

165 
	}
}

167 *
	$∂_mm≠
(
size
)

169  
	`psxM≠
(0, 
size
, 0, 
MAP_TAG_VRAM
);

170 
	}
}

172 
	$∂_munm≠
(*
±r
, 
size
)

174 
	`psxUnm≠
(
±r
, 
size
, 
MAP_TAG_VRAM
);

175 
	}
}

177 
ª¨med_cbs
 
	g∂_ª¨med_cbs
 = {

178 .
∂_vout_›í
 = 
vout_›í
,

179 .
	g∂_vout_£t_mode
 = 
vout_£t_mode
,

180 .
	g∂_vout_Êù
 = 
vout_Êù
,

181 .
	g∂_vout_˛o£
 = 
vout_˛o£
,

182 .
	gmm≠
 = 
∂_mm≠
,

183 .
	gmunm≠
 = 
∂_munm≠
,

185 .
	ggpu_h˙t
 = &
hSyncCou¡
,

186 .
	ggpu_‰ame_cou¡
 = &
‰ame_cou¡î
,

189 
	$∂_‰ame_limô
()

192 
°›
 = 1;

193 
	}
}

195 
	$∂_timög_¥ï¨e
(
is_∑l
)

197 
is_∑l_mode
 = 
is_∑l
;

198 
	}
}

200 
	$∂©_åiggî_vibøã
(
∑d
, 
low
, 
high
)

202 
rumbÀ
.
	`£t_rumbÀ_°©e
(
∑d
, 
RETRO_RUMBLE_STRONG
, 
high
 << 8);

203 
rumbÀ
.
	`£t_rumbÀ_°©e
(
∑d
, 
RETRO_RUMBLE_WEAK
, 
low
 ? 0xffff : 0x0);

204 
	}
}

206 
	$∂_upd©e_gun
(*
xn
, *
yn
, *
xªs
, *
yªs
, *
ö
)

208 
	}
}

211 
	$¢d_öô
()

214 
	}
}

216 
	$¢d_föish
()

218 
	}
}

220 
	$¢d_busy
()

223 
	}
}

225 
	$¢d_„ed
(*
buf
, 
byãs
)

227 i‡(
audio_b©ch_cb
 !
NULL
)

228 
	`audio_b©ch_cb
(
buf
, 
byãs
 / 4);

229 
	}
}

231 
	$out_ªgi°î_libªåo
(
out_drivî
 *
drv
)

233 
drv
->
«me
 = "libretro";

234 
drv
->
öô
 = 
¢d_öô
;

235 
drv
->
föish
 = 
¢d_föish
;

236 
drv
->
busy
 = 
¢d_busy
;

237 
drv
->
„ed
 = 
¢d_„ed
;

238 
	}
}

241 
	$ªåo_£t_ívú⁄mít
(
ªåo_ívú⁄mít_t
 
cb
)

243 c⁄° 
ªåo_v¨übÀ
 
v¨s
[] = {

248 #i‚de‡
DRC_DISABLE


251 #ifde‡
__ARM_NEON__


259 { 
NULL
, NULL },

262 
ívú⁄_cb
 = 
cb
;

264 
	`cb
(
RETRO_ENVIRONMENT_SET_VARIABLES
, (*)
v¨s
);

265 
	}
}

267 
	$ªåo_£t_video_ª‰esh
(
ªåo_video_ª‰esh_t
 
cb
Ë{ 
video_cb
 = cb; 
	}
}

268 
	$ªåo_£t_audio_ßm∂e
(
ªåo_audio_ßm∂e_t
 
cb
Ë{ ()cb; 
	}
}

269 
	$ªåo_£t_audio_ßm∂e_b©ch
(
ªåo_audio_ßm∂e_b©ch_t
 
cb
Ë{ 
audio_b©ch_cb
 = cb; 
	}
}

270 
	$ªåo_£t_öput_pﬁl
(
ªåo_öput_pﬁl_t
 
cb
Ë{ 
öput_pﬁl_cb
 = cb; 
	}
}

271 
	$ªåo_£t_öput_°©e
(
ªåo_öput_°©e_t
 
cb
Ë{ 
öput_°©e_cb
 = cb; 
	}
}

273 
	$ªåo_≠i_vîsi⁄
()

275  
RETRO_API_VERSION
;

276 
	}
}

278 
	$ªåo_£t_c⁄åﬁÀr_p‹t_devi˚
(
p‹t
, 
devi˚
)

280 
	}
}

282 
	$ªåo_gë_sy°em_öfo
(
ªåo_sy°em_öfo
 *
öfo
)

284 
	`mem£t
(
öfo
, 0, (*info));

285 
öfo
->
libøry_«me
 = "PCSX-ReARMed";

286 
öfo
->
libøry_vîsi⁄
 = "r22";

287 
öfo
->
vÆid_exãnsi⁄s
 = "bin|cue|img|mdf|pbp|toc|cbn|m3u";

288 
öfo
->
√ed_fuŒ∑th
 = 
åue
;

289 
	}
}

291 
	$ªåo_gë_sy°em_av_öfo
(
ªåo_sy°em_av_öfo
 *
öfo
)

293 
	`mem£t
(
öfo
, 0, (*info));

294 
öfo
->
timög
.
Âs
 = 
is_∑l_mode
 ? 50 : 60;

295 
öfo
->
timög
.
ßm∂e_øã
 = 44100;

296 
öfo
->
geomëry
.
ba£_width
 = 320;

297 
öfo
->
geomëry
.
ba£_height
 = 240;

298 
öfo
->
geomëry
.
max_width
 = 
VOUT_MAX_WIDTH
;

299 
öfo
->
geomëry
.
max_height
 = 
VOUT_MAX_HEIGHT
;

300 
öfo
->
geomëry
.
a•e˘_øtio
 = 4.0 / 3.0;

301 
	}
}

304 
size_t
 
	$ªåo_£rülize_size
()

309 
	}
}

311 
	sßve_Â
 {

312 *
	mbuf
;

313 
size_t
 
	mpos
;

314 
	mis_wrôe
;

317 *
	$ßve_›í
(c⁄° *
«me
, c⁄° *
mode
)

319 
ßve_Â
 *
Â
;

321 i‡(
«me
 =
NULL
 || 
mode
 == NULL)

322  
NULL
;

324 
Â
 = 
	`mÆloc
((*fp));

325 i‡(
Â
 =
NULL
)

326  
NULL
;

328 
Â
->
buf
 = (*)
«me
;

329 
Â
->
pos
 = 0;

330 
Â
->
is_wrôe
 = (
mode
[0] == 'w' || mode[1] == 'w');

332  
Â
;

333 
	}
}

335 
	$ßve_ªad
(*
fûe
, *
buf
, 
u32
 
Àn
)

337 
ßve_Â
 *
Â
 = 
fûe
;

338 i‡(
Â
 =
NULL
 || 
buf
 == NULL)

341 
	`mem˝y
(
buf
, 
Â
->bu‡+ fp->
pos
, 
Àn
);

342 
Â
->
pos
 +
Àn
;

343  
Àn
;

344 
	}
}

346 
	$ßve_wrôe
(*
fûe
, c⁄° *
buf
, 
u32
 
Àn
)

348 
ßve_Â
 *
Â
 = 
fûe
;

349 i‡(
Â
 =
NULL
 || 
buf
 == NULL)

352 
	`mem˝y
(
Â
->
buf
 + fp->
pos
, buf, 
Àn
);

353 
Â
->
pos
 +
Àn
;

354  
Àn
;

355 
	}
}

357 
	$ßve_£ek
(*
fûe
, 
offs
, 
whí˚
)

359 
ßve_Â
 *
Â
 = 
fûe
;

360 i‡(
Â
 =
NULL
)

363 
whí˚
) {

364 
SEEK_CUR
:

365 
Â
->
pos
 +
offs
;

366  
Â
->
pos
;

367 
SEEK_SET
:

368 
Â
->
pos
 = 
offs
;

369  
Â
->
pos
;

373 
	}
}

375 
	$ßve_˛o£
(*
fûe
)

377 
ßve_Â
 *
Â
 = 
fûe
;

378 
size_t
 
r_size
 = 
	`ªåo_£rülize_size
();

379 i‡(
Â
 =
NULL
)

382 i‡(
Â
->
pos
 > 
r_size
)

383 
	`SysPrötf
("ERROR: save buffer overflow detected\n");

384 i‡(
Â
->
is_wrôe
 && fp->
pos
 < 
r_size
)

386 
	`mem£t
(
Â
->
buf
 + fp->
pos
, 0, 
r_size
 - fp->pos);

387 
	`‰ì
(
Â
);

388 
	}
}

390 
boﬁ
 
	$ªåo_£rülize
(*
d©a
, 
size_t
 
size
)

392 
ªt
 = 
	`SaveSèã
(
d©a
);

393  
ªt
 =0 ? 
åue
 : 
Ál£
;

394 
	}
}

396 
boﬁ
 
	$ªåo_un£rülize
(c⁄° *
d©a
, 
size_t
 
size
)

398 
ªt
 = 
	`LﬂdSèã
(
d©a
);

399  
ªt
 =0 ? 
åue
 : 
Ál£
;

400 
	}
}

403 
	$ªåo_chót_ª£t
()

405 
	`CÀ¨AŒChóts
();

406 
	}
}

408 
	$ªåo_chót_£t
(
ödex
, 
boﬁ
 
íabÀd
, c⁄° *
code
)

410 
buf
[256];

411 
ªt
;

414 
	`°∫˝y
(
buf
, 
code
, (buf));

415 
buf
[(buf) - 1] = 0;

417 i‡(
ödex
 < 
NumChóts
)

418 
ªt
 = 
	`EdôChót
(
ödex
, "", 
buf
);

420 
ªt
 = 
	`AddChót
("", 
buf
);

422 i‡(
ªt
 != 0)

423 
	`SysPrötf
("FaûedÅÿ£àchóà%#u\n", 
ödex
);

424 i‡(
ödex
 < 
NumChóts
)

425 
Chóts
[
ödex
].
E«bÀd
 = 
íabÀd
;

426 
	}
}

429 
boﬁ
 
	gdisk_eje˘ed
;

430 
	gdisk_cuºít_ödex
;

431 
	gdisk_cou¡
;

432 
	sdisks_°©e
 {

433 *
	m‚ame
;

434 
	möã∫Æ_ödex
;

435 } 
	gdisks
[8];

437 
boﬁ
 
	$disk_£t_eje˘_°©e
(
boﬁ
 
eje˘ed
)

440 
	`SëCdO≥nCa£Time
(
eje˘ed
 ? -1 : (
	`time
(
NULL
) + 2));

441 
	`LidI¡îru±
();

443 
disk_eje˘ed
 = 
eje˘ed
;

444  
åue
;

445 
	}
}

447 
boﬁ
 
	$disk_gë_eje˘_°©e
()

450  
disk_eje˘ed
;

451 
	}
}

453 
	$disk_gë_image_ödex
()

455  
disk_cuºít_ödex
;

456 
	}
}

458 
boﬁ
 
	$disk_£t_image_ödex
(
ödex
)

460 i‡(
ödex
 >(
disks
) / (disks[0]))

461  
Ál£
;

463 
CdromId
[0] = '\0';

464 
CdromLabñ
[0] = '\0';

466 i‡(
disks
[
ödex
].
‚ame
 =
NULL
) {

467 
	`SysPrötf
("missög disk #%u\n", 
ödex
);

468 
	`CDR_shutdown
();

472 
disk_cuºít_ödex
 = 
ödex
;

473  
åue
;

476 
	`SysPrötf
("swôchögÅÿdisk %u: \"%s\" #%d\n", 
ödex
,

477 
disks
[
ödex
].
‚ame
, disks[ödex].
öã∫Æ_ödex
);

479 
cdrIsoMu…idiskSñe˘
 = 
disks
[
ödex
].
öã∫Æ_ödex
;

480 
	`£t_cd_image
(
disks
[
ödex
].
‚ame
);

481 i‡(
	`RñﬂdCdromPlugö
() < 0) {

482 
	`SysPrötf
("failedÅoÜoad cdrÖlugin\n");

483  
Ál£
;

485 i‡(
	`CDR_›í
() < 0) {

486 
	`SysPrötf
("failedÅo open cdrÖlugin\n");

487  
Ál£
;

490 i‡(!
disk_eje˘ed
) {

491 
	`SëCdO≥nCa£Time
(
	`time
(
NULL
) + 2);

492 
	`LidI¡îru±
();

495 
disk_cuºít_ödex
 = 
ödex
;

496  
åue
;

497 
	}
}

499 
	$disk_gë_num_images
()

501  
disk_cou¡
;

502 
	}
}

504 
boﬁ
 
	$disk_ª∂a˚_image_ödex
(
ödex
,

505 c⁄° 
ªåo_game_öfo
 *
öfo
)

507 *
ﬁd_‚ame
;

508 
boﬁ
 
ªt
 = 
åue
;

510 i‡(
ödex
 >(
disks
) / (disks[0]))

511  
Ál£
;

513 
ﬁd_‚ame
 = 
disks
[
ödex
].
‚ame
;

514 
disks
[
ödex
].
‚ame
 = 
NULL
;

515 
disks
[
ödex
].
öã∫Æ_ödex
 = 0;

517 i‡(
öfo
 !
NULL
) {

518 
disks
[
ödex
].
‚ame
 = 
	`°rdup
(
öfo
->
∑th
);

519 i‡(
ödex
 =
disk_cuºít_ödex
)

520 
ªt
 = 
	`disk_£t_image_ödex
(
ödex
);

523 i‡(
ﬁd_‚ame
 !
NULL
)

524 
	`‰ì
(
ﬁd_‚ame
);

526  
ªt
;

527 
	}
}

529 
boﬁ
 
	$disk_add_image_ödex
()

531 i‡(
disk_cou¡
 >= 8)

532  
Ál£
;

534 
disk_cou¡
++;

535  
åue
;

536 
	}
}

538 
ªåo_disk_c⁄åﬁ_ˇŒback
 
	gdisk_c⁄åﬁ
 = {

539 .
£t_eje˘_°©e
 = 
disk_£t_eje˘_°©e
,

540 .
	ggë_eje˘_°©e
 = 
disk_gë_eje˘_°©e
,

541 .
	ggë_image_ödex
 = 
disk_gë_image_ödex
,

542 .
	g£t_image_ödex
 = 
disk_£t_image_ödex
,

543 .
	ggë_num_images
 = 
disk_gë_num_images
,

544 .
	gª∂a˚_image_ödex
 = 
disk_ª∂a˚_image_ödex
,

545 .
	gadd_image_ödex
 = 
disk_add_image_ödex
,

549 #ifde‡
_WIN32


550 
	#SLASH
 '\\'

	)

552 
	#SLASH
 '/'

	)

555 
	gba£_dú
[
PATH_MAX
];

557 
boﬁ
 
	$ªad_m3u
(c⁄° *
fûe
)

559 
löe
[
PATH_MAX
];

560 
«me
[
PATH_MAX
];

561 
FILE
 *
f
 = 
	`f›í
(
fûe
, "r");

562 i‡(!
f
)

563  
Ál£
;

565 
	`fgës
(
löe
, ÷öe), 
f
Ë&& 
disk_cou¡
 < (
disks
) / (disks[0])) {

566 i‡(
löe
[0] == '#')

568 *
ˇºige_ªtu∫
 = 
	`°rchr
(
löe
, '\r');

569 i‡(
ˇºige_ªtu∫
)

570 *
ˇºige_ªtu∫
 = '\0';

571 *
√wlöe
 = 
	`°rchr
(
löe
, '\n');

572 i‡(
√wlöe
)

573 *
√wlöe
 = '\0';

575 i‡(
löe
[0] != '\0')

577 
	`¢¥ötf
(
«me
, “ame), "%s%c%s", 
ba£_dú
, 
SLASH
, 
löe
);

578 
disks
[
disk_cou¡
++].
‚ame
 = 
	`°rdup
(
«me
);

582 
	`f˛o£
(
f
);

583  (
disk_cou¡
 != 0);

584 
	}
}

586 
	$exåa˘_dúe˘‹y
(*
buf
, c⁄° *
∑th
, 
size_t
 
size
)

588 *
ba£
;

589 
	`°∫˝y
(
buf
, 
∑th
, 
size
 - 1);

590 
buf
[
size
 - 1] = '\0';

592 
ba£
 = 
	`°ºchr
(
buf
, '/');

593 i‡(!
ba£
)

594 
ba£
 = 
	`°ºchr
(
buf
, '\\');

596 i‡(
ba£
)

597 *
ba£
 = '\0';

600 
buf
[0] = '.';

601 
buf
[1] = '\0';

603 
	}
}

605 #i‡
deföed
(
__QNX__
Ë|| deföed(
_WIN32
)

612 
	$°rˇ£°r
(c⁄° *
s
, c⁄° *
föd
)

614 
c
, 
sc
;

615 
size_t
 
Àn
;

617 i‡((
c
 = *
föd
++) != 0) {

618 
c
 = 
	`tﬁowî
(()c);

619 
Àn
 = 
	`°æí
(
föd
);

622 i‡((
sc
 = *
s
++) == 0)

623  (
NULL
);

624 } ()
	`tﬁowî
(()
sc
Ë!
c
);

625 } 
	`°∫ˇ£cmp
(
s
, 
föd
, 
Àn
) != 0);

626 
s
--;

628  ((*)
s
);

629 
	}
}

632 
boﬁ
 
	$ªåo_lﬂd_game
(c⁄° 
ªåo_game_öfo
 *
öfo
)

634 
size_t
 
i
;

635 
boﬁ
 
is_m3u
 = (
	`°rˇ£°r
(
öfo
->
∑th
, ".m3u"Ë!
NULL
);

637 
ªåo_öput_des¸ùt‹
 
desc
[] = {

638 { 0, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_LEFT
, "D-Pad Left" },

639 { 0, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_UP
, "D-Pad Up" },

640 { 0, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_DOWN
, "D-Pad Down" },

641 { 0, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_RIGHT
, "D-Pad Right" },

642 { 0, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_B
, "Cross" },

643 { 0, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_A
, "Circle" },

644 { 0, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_X
, "Triangle" },

645 { 0, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_Y
, "Square" },

646 { 0, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_L
, "L1" },

647 { 0, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_L2
, "L2" },

648 { 0, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_L3
, "L3" },

649 { 0, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_R
, "R1" },

650 { 0, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_R2
, "R2" },

651 { 0, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_R3
, "R3" },

652 { 0, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_SELECT
, "Select" },

653 { 0, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_START
, "Start" },

654 { 0, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_LEFT
, 
RETRO_DEVICE_ID_ANALOG_X
, "Left Analog X" },

655 { 0, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_LEFT
, 
RETRO_DEVICE_ID_ANALOG_Y
, "Left Analog Y" },

656 { 0, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_RIGHT
, 
RETRO_DEVICE_ID_ANALOG_X
, "Right Analog X" },

657 { 0, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_RIGHT
, 
RETRO_DEVICE_ID_ANALOG_Y
, "Right Analog Y" },

660 { 1, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_LEFT
, "D-Pad Left" },

661 { 1, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_UP
, "D-Pad Up" },

662 { 1, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_DOWN
, "D-Pad Down" },

663 { 1, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_RIGHT
, "D-Pad Right" },

664 { 1, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_B
, "Cross" },

665 { 1, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_A
, "Circle" },

666 { 1, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_X
, "Triangle" },

667 { 1, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_Y
, "Square" },

668 { 1, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_L
, "L1" },

669 { 1, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_L2
, "L2" },

670 { 1, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_L3
, "L3" },

671 { 1, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_R
, "R1" },

672 { 1, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_R2
, "R2" },

673 { 1, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_R3
, "R3" },

674 { 1, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_SELECT
, "Select" },

675 { 1, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_START
, "Start" },

676 { 1, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_LEFT
, 
RETRO_DEVICE_ID_ANALOG_X
, "Left Analog X" },

677 { 1, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_LEFT
, 
RETRO_DEVICE_ID_ANALOG_Y
, "Left Analog Y" },

678 { 1, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_RIGHT
, 
RETRO_DEVICE_ID_ANALOG_X
, "Right Analog X" },

679 { 1, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_RIGHT
, 
RETRO_DEVICE_ID_ANALOG_Y
, "Right Analog Y" },

681 { 2, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_LEFT
, "D-Pad Left" },

682 { 2, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_UP
, "D-Pad Up" },

683 { 2, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_DOWN
, "D-Pad Down" },

684 { 2, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_RIGHT
, "D-Pad Right" },

685 { 2, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_B
, "Cross" },

686 { 2, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_A
, "Circle" },

687 { 2, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_X
, "Triangle" },

688 { 2, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_Y
, "Square" },

689 { 2, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_L
, "L1" },

690 { 2, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_L2
, "L2" },

691 { 2, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_L3
, "L3" },

692 { 2, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_R
, "R1" },

693 { 2, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_R2
, "R2" },

694 { 2, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_R3
, "R3" },

695 { 2, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_SELECT
, "Select" },

696 { 2, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_START
, "Start" },

697 { 2, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_LEFT
, 
RETRO_DEVICE_ID_ANALOG_X
, "Left Analog X" },

698 { 2, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_LEFT
, 
RETRO_DEVICE_ID_ANALOG_Y
, "Left Analog Y" },

699 { 2, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_RIGHT
, 
RETRO_DEVICE_ID_ANALOG_X
, "Right Analog X" },

700 { 2, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_RIGHT
, 
RETRO_DEVICE_ID_ANALOG_Y
, "Right Analog Y" },

702 { 3, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_LEFT
, "D-Pad Left" },

703 { 3, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_UP
, "D-Pad Up" },

704 { 3, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_DOWN
, "D-Pad Down" },

705 { 3, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_RIGHT
, "D-Pad Right" },

706 { 3, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_B
, "Cross" },

707 { 3, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_A
, "Circle" },

708 { 3, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_X
, "Triangle" },

709 { 3, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_Y
, "Square" },

710 { 3, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_L
, "L1" },

711 { 3, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_L2
, "L2" },

712 { 3, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_L3
, "L3" },

713 { 3, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_R
, "R1" },

714 { 3, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_R2
, "R2" },

715 { 3, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_R3
, "R3" },

716 { 3, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_SELECT
, "Select" },

717 { 3, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_START
, "Start" },

718 { 3, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_LEFT
, 
RETRO_DEVICE_ID_ANALOG_X
, "Left Analog X" },

719 { 3, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_LEFT
, 
RETRO_DEVICE_ID_ANALOG_Y
, "Left Analog Y" },

720 { 3, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_RIGHT
, 
RETRO_DEVICE_ID_ANALOG_X
, "Right Analog X" },

721 { 3, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_RIGHT
, 
RETRO_DEVICE_ID_ANALOG_Y
, "Right Analog Y" },

723 { 4, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_LEFT
, "D-Pad Left" },

724 { 4, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_UP
, "D-Pad Up" },

725 { 4, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_DOWN
, "D-Pad Down" },

726 { 4, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_RIGHT
, "D-Pad Right" },

727 { 4, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_B
, "Cross" },

728 { 4, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_A
, "Circle" },

729 { 4, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_X
, "Triangle" },

730 { 4, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_Y
, "Square" },

731 { 4, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_L
, "L1" },

732 { 4, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_L2
, "L2" },

733 { 4, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_L3
, "L3" },

734 { 4, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_R
, "R1" },

735 { 4, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_R2
, "R2" },

736 { 4, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_R3
, "R3" },

737 { 4, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_SELECT
, "Select" },

738 { 4, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_START
, "Start" },

739 { 4, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_LEFT
, 
RETRO_DEVICE_ID_ANALOG_X
, "Left Analog X" },

740 { 4, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_LEFT
, 
RETRO_DEVICE_ID_ANALOG_Y
, "Left Analog Y" },

741 { 4, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_RIGHT
, 
RETRO_DEVICE_ID_ANALOG_X
, "Right Analog X" },

742 { 4, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_RIGHT
, 
RETRO_DEVICE_ID_ANALOG_Y
, "Right Analog Y" },

744 { 5, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_LEFT
, "D-Pad Left" },

745 { 5, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_UP
, "D-Pad Up" },

746 { 5, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_DOWN
, "D-Pad Down" },

747 { 5, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_RIGHT
, "D-Pad Right" },

748 { 5, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_B
, "Cross" },

749 { 5, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_A
, "Circle" },

750 { 5, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_X
, "Triangle" },

751 { 5, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_Y
, "Square" },

752 { 5, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_L
, "L1" },

753 { 5, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_L2
, "L2" },

754 { 5, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_L3
, "L3" },

755 { 5, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_R
, "R1" },

756 { 5, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_R2
, "R2" },

757 { 5, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_R3
, "R3" },

758 { 5, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_SELECT
, "Select" },

759 { 5, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_START
, "Start" },

760 { 5, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_LEFT
, 
RETRO_DEVICE_ID_ANALOG_X
, "Left Analog X" },

761 { 5, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_LEFT
, 
RETRO_DEVICE_ID_ANALOG_Y
, "Left Analog Y" },

762 { 5, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_RIGHT
, 
RETRO_DEVICE_ID_ANALOG_X
, "Right Analog X" },

763 { 5, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_RIGHT
, 
RETRO_DEVICE_ID_ANALOG_Y
, "Right Analog Y" },

765 { 6, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_LEFT
, "D-Pad Left" },

766 { 6, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_UP
, "D-Pad Up" },

767 { 6, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_DOWN
, "D-Pad Down" },

768 { 6, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_RIGHT
, "D-Pad Right" },

769 { 6, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_B
, "Cross" },

770 { 6, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_A
, "Circle" },

771 { 6, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_X
, "Triangle" },

772 { 6, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_Y
, "Square" },

773 { 6, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_L
, "L1" },

774 { 6, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_L2
, "L2" },

775 { 6, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_L3
, "L3" },

776 { 6, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_R
, "R1" },

777 { 6, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_R2
, "R2" },

778 { 6, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_R3
, "R3" },

779 { 6, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_SELECT
, "Select" },

780 { 6, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_START
, "Start" },

781 { 6, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_LEFT
, 
RETRO_DEVICE_ID_ANALOG_X
, "Left Analog X" },

782 { 6, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_LEFT
, 
RETRO_DEVICE_ID_ANALOG_Y
, "Left Analog Y" },

783 { 6, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_RIGHT
, 
RETRO_DEVICE_ID_ANALOG_X
, "Right Analog X" },

784 { 6, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_RIGHT
, 
RETRO_DEVICE_ID_ANALOG_Y
, "Right Analog Y" },

786 { 7, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_LEFT
, "D-Pad Left" },

787 { 7, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_UP
, "D-Pad Up" },

788 { 7, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_DOWN
, "D-Pad Down" },

789 { 7, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_RIGHT
, "D-Pad Right" },

790 { 7, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_B
, "Cross" },

791 { 7, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_A
, "Circle" },

792 { 7, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_X
, "Triangle" },

793 { 7, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_Y
, "Square" },

794 { 7, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_L
, "L1" },

795 { 7, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_L2
, "L2" },

796 { 7, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_L3
, "L3" },

797 { 7, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_R
, "R1" },

798 { 7, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_R2
, "R2" },

799 { 7, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_R3
, "R3" },

800 { 7, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_SELECT
, "Select" },

801 { 7, 
RETRO_DEVICE_JOYPAD
, 0, 
RETRO_DEVICE_ID_JOYPAD_START
, "Start" },

802 { 7, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_LEFT
, 
RETRO_DEVICE_ID_ANALOG_X
, "Left Analog X" },

803 { 7, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_LEFT
, 
RETRO_DEVICE_ID_ANALOG_Y
, "Left Analog Y" },

804 { 7, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_RIGHT
, 
RETRO_DEVICE_ID_ANALOG_X
, "Right Analog X" },

805 { 7, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_RIGHT
, 
RETRO_DEVICE_ID_ANALOG_Y
, "Right Analog Y" },

810 
	`ívú⁄_cb
(
RETRO_ENVIRONMENT_SET_INPUT_DESCRIPTORS
, 
desc
);

812 #ifde‡
FRONTEND_SUPPORTS_RGB565


813 
ªåo_pixñ_f‹m©
 
fmt
 = 
RETRO_PIXEL_FORMAT_RGB565
;

814 i‡(
	`ívú⁄_cb
(
RETRO_ENVIRONMENT_SET_PIXEL_FORMAT
, &
fmt
)) {

815 
	`SysPrötf
("RGB565 supported, using it\n");

819 i‡(
öfo
 =
NULL
 || info->
∑th
 == NULL) {

820 
	`SysPrötf
("info->pathÑequired\n");

821  
Ál£
;

824 i‡(
∂ugös_›íed
) {

825 
	`Clo£Plugös
();

826 
∂ugös_›íed
 = 0;

829 
i
 = 0; i < (
disks
) / (disks[0]); i++) {

830 i‡(
disks
[
i
].
‚ame
 !
NULL
) {

831 
	`‰ì
(
disks
[
i
].
‚ame
);

832 
disks
[
i
].
‚ame
 = 
NULL
;

834 
disks
[
i
].
öã∫Æ_ödex
 = 0;

837 
disk_cuºít_ödex
 = 0;

838 
	`exåa˘_dúe˘‹y
(
ba£_dú
, 
öfo
->
∑th
, (base_dir));

840 i‡(
is_m3u
) {

841 i‡(!
	`ªad_m3u
(
öfo
->
∑th
)) {

842 
	`SysPrötf
("failedÅoÑead m3u file\n");

843  
Ál£
;

846 
disk_cou¡
 = 1;

847 
disks
[0].
‚ame
 = 
	`°rdup
(
öfo
->
∑th
);

850 
	`£t_cd_image
(
disks
[0].
‚ame
);

853 i‡(
	`LﬂdPlugös
() == -1) {

854 
	`SysPrötf
("failedÅoÜoadÖlugins\n");

855  
Ál£
;

858 
∂ugös_›íed
 = 1;

859 
NëO≥√d
 = 0;

861 i‡(
	`O≥nPlugös
() == -1) {

862 
	`SysPrötf
("failedÅo openÖlugins\n");

863  
Ál£
;

866 
	`∂ugö_ˇŒ_ª¨med_cbs
();

867 
	`dföput_a˘iv©e
();

869 
C⁄fig
.
PsxAuto
 = 1;

870 i‡(
	`CheckCdrom
() == -1) {

871 
	`SysPrötf
("unsuµ‹ãd/övÆid CD image: %s\n", 
öfo
->
∑th
);

872  
Ál£
;

875 
	`SysRe£t
();

877 i‡(
	`LﬂdCdrom
() == -1) {

878 
	`SysPrötf
("couldÇotÜoad CD-ROM!\n");

879  
Ál£
;

881 
	`emu_⁄_√w_cd
(0);

884 i‡(!
is_m3u
) {

885 
disk_cou¡
 = 
cdrIsoMu…idiskCou¡
 < 8 ? cdrIsoMultidiskCount : 8;

886 
i
 = 1; i < (
disks
Ë/ (disks[0]Ë&& i < 
cdrIsoMu…idiskCou¡
; i++) {

887 
disks
[
i
].
‚ame
 = 
	`°rdup
(
öfo
->
∑th
);

888 
disks
[
i
].
öã∫Æ_ödex
 = i;

892  
åue
;

893 
	}
}

895 
boﬁ
 
	$ªåo_lﬂd_game_•ecül
(
game_ty≥
, c⁄° 
ªåo_game_öfo
 *
öfo
, 
size_t
 
num_öfo
)

897  
Ál£
;

898 
	}
}

900 
	$ªåo_u∆ﬂd_game
()

902 
	}
}

904 
	$ªåo_gë_ªgi⁄
()

906  
is_∑l_mode
 ? 
RETRO_REGION_PAL
 : 
RETRO_REGION_NTSC
;

907 
	}
}

909 *
	$ªåo_gë_mem‹y_d©a
(
id
)

911 i‡(
id
 =
RETRO_MEMORY_SAVE_RAM
)

912  
Mcd1D©a
;

914  
NULL
;

915 
	}
}

917 
size_t
 
	$ªåo_gë_mem‹y_size
(
id
)

919 i‡(
id
 =
RETRO_MEMORY_SAVE_RAM
)

920  
MCD_SIZE
;

923 
	}
}

925 
	$ªåo_ª£t
()

927 
	`SysRe£t
();

928 
	}
}

930 c⁄° 
	gªåo_psx_m≠
[] = {

931 [
RETRO_DEVICE_ID_JOYPAD_B
] = 1 << 
DKEY_CROSS
,

932 [
RETRO_DEVICE_ID_JOYPAD_Y
] = 1 << 
DKEY_SQUARE
,

933 [
RETRO_DEVICE_ID_JOYPAD_SELECT
] = 1 << 
DKEY_SELECT
,

934 [
RETRO_DEVICE_ID_JOYPAD_START
] = 1 << 
DKEY_START
,

935 [
RETRO_DEVICE_ID_JOYPAD_UP
] = 1 << 
DKEY_UP
,

936 [
RETRO_DEVICE_ID_JOYPAD_DOWN
] = 1 << 
DKEY_DOWN
,

937 [
RETRO_DEVICE_ID_JOYPAD_LEFT
] = 1 << 
DKEY_LEFT
,

938 [
RETRO_DEVICE_ID_JOYPAD_RIGHT
] = 1 << 
DKEY_RIGHT
,

939 [
RETRO_DEVICE_ID_JOYPAD_A
] = 1 << 
DKEY_CIRCLE
,

940 [
RETRO_DEVICE_ID_JOYPAD_X
] = 1 << 
DKEY_TRIANGLE
,

941 [
RETRO_DEVICE_ID_JOYPAD_L
] = 1 << 
DKEY_L1
,

942 [
RETRO_DEVICE_ID_JOYPAD_R
] = 1 << 
DKEY_R1
,

943 [
RETRO_DEVICE_ID_JOYPAD_L2
] = 1 << 
DKEY_L2
,

944 [
RETRO_DEVICE_ID_JOYPAD_R2
] = 1 << 
DKEY_R2
,

945 [
RETRO_DEVICE_ID_JOYPAD_L3
] = 1 << 
DKEY_L3
,

946 [
RETRO_DEVICE_ID_JOYPAD_R3
] = 1 << 
DKEY_R3
,

948 
	#RETRO_PSX_MAP_LEN
 ((
ªåo_psx_m≠
Ë/ ‘ëro_psx_m≠[0]))

	)

950 
	$upd©e_v¨übÀs
(
boﬁ
 
ö_Êight
)

952 
ªåo_v¨übÀ
 
v¨
;

954 
v¨
.
vÆue
 = 
NULL
;

955 
v¨
.
key
 = "pcsx_rearmed_frameskip";

957 i‡(
	`ívú⁄_cb
(
RETRO_ENVIRONMENT_GET_VARIABLE
, &
v¨
Ë|| v¨.
vÆue
)

958 
∂_ª¨med_cbs
.
‰ameskù
 = 
	`©oi
(
v¨
.
vÆue
);

960 
v¨
.
vÆue
 = 
NULL
;

961 
v¨
.
key
 = "pcsx_rearmed_region";

963 i‡(
	`ívú⁄_cb
(
RETRO_ENVIRONMENT_GET_VARIABLE
, &
v¨
Ë|| v¨.
vÆue
)

965 
C⁄fig
.
PsxAuto
 = 0;

966 i‡(
	`°rcmp
(
v¨
.
vÆue
, "Automatic") == 0)

967 
C⁄fig
.
PsxAuto
 = 1;

968 i‡(
	`°rcmp
(
v¨
.
vÆue
, "NTSC") == 0)

969 
C⁄fig
.
PsxTy≥
 = 0;

970 i‡(
	`°rcmp
(
v¨
.
vÆue
, "PAL") == 0)

971 
C⁄fig
.
PsxTy≥
 = 1;

974 
v¨
.
vÆue
 = 
NULL
;

975 
v¨
.
key
 = "pcsx_rearmed_pad1type";

977 i‡(
	`ívú⁄_cb
(
RETRO_ENVIRONMENT_GET_VARIABLE
, &
v¨
Ë|| v¨.
vÆue
)

979 
ö_ty≥1
 = 
PSE_PAD_TYPE_STANDARD
;

980 i‡(
	`°rcmp
(
v¨
.
vÆue
, "analog") == 0)

981 
ö_ty≥1
 = 
PSE_PAD_TYPE_ANALOGPAD
;

984 
v¨
.
vÆue
 = 
NULL
;

985 
v¨
.
key
 = "pcsx_rearmed_pad2type";

987 i‡(
	`ívú⁄_cb
(
RETRO_ENVIRONMENT_GET_VARIABLE
, &
v¨
Ë|| v¨.
vÆue
)

989 
ö_ty≥2
 = 
PSE_PAD_TYPE_STANDARD
;

990 i‡(
	`°rcmp
(
v¨
.
vÆue
, "analog") == 0)

991 
ö_ty≥2
 = 
PSE_PAD_TYPE_ANALOGPAD
;

994 #ifde‡
__ARM_NEON__


995 
v¨
.
vÆue
 = "NULL";

996 
v¨
.
key
 = "pcsx_rearmed_neon_interlace_enable";

998 i‡(
	`ívú⁄_cb
(
RETRO_ENVIRONMENT_GET_VARIABLE
, &
v¨
Ë|| v¨.
vÆue
)

1000 i‡(
	`°rcmp
(
v¨
.
vÆue
, "disabled") == 0)

1001 
∂_ª¨med_cbs
.
gpu_√⁄
.
Ælow_öãæa˚
 = 0;

1002 i‡(
	`°rcmp
(
v¨
.
vÆue
, "enabled") == 0)

1003 
∂_ª¨med_cbs
.
gpu_√⁄
.
Ælow_öãæa˚
 = 1;

1006 
v¨
.
vÆue
 = 
NULL
;

1007 
v¨
.
key
 = "pcsx_rearmed_neon_enhancement_enable";

1009 i‡(
	`ívú⁄_cb
(
RETRO_ENVIRONMENT_GET_VARIABLE
, &
v¨
Ë|| v¨.
vÆue
)

1011 i‡(
	`°rcmp
(
v¨
.
vÆue
, "disabled") == 0)

1012 
∂_ª¨med_cbs
.
gpu_√⁄
.
íh™˚mít_íabÀ
 = 0;

1013 i‡(
	`°rcmp
(
v¨
.
vÆue
, "enabled") == 0)

1014 
∂_ª¨med_cbs
.
gpu_√⁄
.
íh™˚mít_íabÀ
 = 1;

1017 
v¨
.
vÆue
 = 
NULL
;

1018 
v¨
.
key
 = "pcsx_rearmed_neon_enhancement_no_main";

1020 i‡(
	`ívú⁄_cb
(
RETRO_ENVIRONMENT_GET_VARIABLE
, &
v¨
Ë|| v¨.
vÆue
)

1022 i‡(
	`°rcmp
(
v¨
.
vÆue
, "disabled") == 0)

1023 
∂_ª¨med_cbs
.
gpu_√⁄
.
íh™˚mít_no_maö
 = 0;

1024 i‡(
	`°rcmp
(
v¨
.
vÆue
, "enabled") == 0)

1025 
∂_ª¨med_cbs
.
gpu_√⁄
.
íh™˚mít_no_maö
 = 1;

1029 
v¨
.
vÆue
 = "NULL";

1030 
v¨
.
key
 = "pcsx_rearmed_duping_enable";

1032 i‡(
	`ívú⁄_cb
(
RETRO_ENVIRONMENT_GET_VARIABLE
, &
v¨
Ë|| v¨.
vÆue
)

1034 i‡(
	`°rcmp
(
v¨
.
vÆue
, "off") == 0)

1035 
dupög_íabÀ
 = 
Ál£
;

1036 i‡(
	`°rcmp
(
v¨
.
vÆue
, "on") == 0)

1037 
dupög_íabÀ
 = 
åue
;

1040 #i‚de‡
DRC_DISABLE


1041 
v¨
.
vÆue
 = 
NULL
;

1042 
v¨
.
key
 = "pcsx_rearmed_drc";

1044 i‡(
	`ívú⁄_cb
(
RETRO_ENVIRONMENT_GET_VARIABLE
, &
v¨
Ë|| v¨.
vÆue
)

1046 
R3000A˝u
 *
¥ev_˝u
 = 
psxCpu
;

1048 i‡(
	`°rcmp
(
v¨
.
vÆue
, "disabled") == 0)

1049 
C⁄fig
.
Cpu
 = 
CPU_INTERPRETER
;

1050 i‡(
	`°rcmp
(
v¨
.
vÆue
, "enabled") == 0)

1051 
C⁄fig
.
Cpu
 = 
CPU_DYNAREC
;

1053 
psxCpu
 = (
C⁄fig
.
Cpu
 =
CPU_INTERPRETER
Ë? &
psxI¡
 : &
psxRec
;

1054 i‡(
psxCpu
 !
¥ev_˝u
) {

1055 
¥ev_˝u
->
	`Shutdown
();

1056 
psxCpu
->
	`Inô
();

1057 
psxCpu
->
	`Re£t
();

1062 
v¨
.
vÆue
 = "NULL";

1063 
v¨
.
key
 = "pcsx_rearmed_spu_reverb";

1065 i‡(
	`ívú⁄_cb
(
RETRO_ENVIRONMENT_GET_VARIABLE
, &
v¨
Ë|| v¨.
vÆue
)

1067 i‡(
	`°rcmp
(
v¨
.
vÆue
, "off") == 0)

1068 
•u_c⁄fig
.
iU£Revîb
 = 
Ál£
;

1069 i‡(
	`°rcmp
(
v¨
.
vÆue
, "on") == 0)

1070 
•u_c⁄fig
.
iU£Revîb
 = 
åue
;

1073 
v¨
.
vÆue
 = "NULL";

1074 
v¨
.
key
 = "pcsx_rearmed_spu_interpolation";

1076 i‡(
	`ívú⁄_cb
(
RETRO_ENVIRONMENT_GET_VARIABLE
, &
v¨
Ë|| v¨.
vÆue
)

1078 i‡(
	`°rcmp
(
v¨
.
vÆue
, "simple") == 0)

1079 
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
 = 1;

1080 i‡(
	`°rcmp
(
v¨
.
vÆue
, "gaussian") == 0)

1081 
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
 = 2;

1082 i‡(
	`°rcmp
(
v¨
.
vÆue
, "cubic") == 0)

1083 
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
 = 3;

1084 i‡(
	`°rcmp
(
v¨
.
vÆue
, "off") == 0)

1085 
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
 = 0;

1088 i‡(
ö_Êight
) {

1090 
	`∂ugö_ˇŒ_ª¨med_cbs
();

1092 i‡(
GPU_›í
 !
NULL
 && 
GPU_˛o£
 != NULL) {

1093 
	`GPU_˛o£
();

1094 
	`GPU_›í
(&
gpuDi•
, "PCSX", 
NULL
);

1097 
	`dföput_a˘iv©e
();

1099 
	}
}

1101 
	$ªåo_run
()

1103 
i
;

1105 
	`öput_pﬁl_cb
();

1107 
boﬁ
 
upd©ed
 = 
Ál£
;

1108 i‡(
	`ívú⁄_cb
(
RETRO_ENVIRONMENT_GET_VARIABLE_UPDATE
, &
upd©ed
) && updated)

1109 
	`upd©e_v¨übÀs
(
åue
);

1111 
ö_key°©e
 = 0;

1112 
i
 = 0; i < 
RETRO_PSX_MAP_LEN
; i++)

1113 i‡(
	`öput_°©e_cb
(1, 
RETRO_DEVICE_JOYPAD
, 0, 
i
))

1114 
ö_key°©e
 |
ªåo_psx_m≠
[
i
];

1115 
ö_key°©e
 <<= 16;

1116 
i
 = 0; i < 
RETRO_PSX_MAP_LEN
; i++)

1117 i‡(
	`öput_°©e_cb
(0, 
RETRO_DEVICE_JOYPAD
, 0, 
i
))

1118 
ö_key°©e
 |
ªåo_psx_m≠
[
i
];

1120 i‡(
ö_ty≥1
 =
PSE_PAD_TYPE_ANALOGPAD
)

1122 
ö_a1
[0] = (
	`öput_°©e_cb
(0, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_LEFT
, 
RETRO_DEVICE_ID_ANALOG_X
) / 256) + 128;

1123 
ö_a1
[1] = (
	`öput_°©e_cb
(0, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_LEFT
, 
RETRO_DEVICE_ID_ANALOG_Y
) / 256) + 128;

1124 
ö_a2
[0] = (
	`öput_°©e_cb
(0, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_RIGHT
, 
RETRO_DEVICE_ID_ANALOG_X
) / 256) + 128;

1125 
ö_a2
[1] = (
	`öput_°©e_cb
(0, 
RETRO_DEVICE_ANALOG
, 
RETRO_DEVICE_INDEX_ANALOG_RIGHT
, 
RETRO_DEVICE_ID_ANALOG_Y
) / 256) + 128;

1128 
°›
 = 0;

1129 
psxCpu
->
	`Execuã
();

1131 
	`video_cb
((
vout_fb_dúty
 || !
vout_ˇn_du≥
 || !
dupög_íabÀ
Ë? 
vout_buf
 : 
NULL
,

1132 
vout_width
, 
vout_height
, vout_width * 2);

1133 
vout_fb_dúty
 = 0;

1134 
	}
}

1136 
boﬁ
 
	$åy_u£_bios
(c⁄° *
∑th
)

1138 
FILE
 *
f
;

1139 
size
;

1140 c⁄° *
«me
;

1142 
f
 = 
	`f›í
(
∑th
, "rb");

1143 i‡(
f
 =
NULL
)

1144  
Ál£
;

1146 
	`f£ek
(
f
, 0, 
SEEK_END
);

1147 
size
 = 
	`·ñl
(
f
);

1148 
	`f˛o£
(
f
);

1150 i‡(
size
 != 512 * 1024)

1151  
Ál£
;

1153 
«me
 = 
	`°ºchr
(
∑th
, 
SLASH
);

1154 i‡(
«me
++ =
NULL
)

1155 
«me
 = 
∑th
;

1156 
	`¢¥ötf
(
C⁄fig
.
Bios
, (C⁄fig.Bios), "%s", 
«me
);

1157  
åue
;

1158 
	}
}

1161 
	~<sys/ty≥s.h
>

1162 
	~<dúít.h
>

1164 
boﬁ
 
	$föd_™y_bios
(c⁄° *
dú∑th
, *
∑th
, 
size_t
 
∑th_size
)

1166 
DIR
 *
dú
;

1167 
dúít
 *
ít
;

1168 
boﬁ
 
ªt
 = 
Ál£
;

1170 
dú
 = 
	`›ídú
(
dú∑th
);

1171 i‡(
dú
 =
NULL
)

1172  
Ál£
;

1174 (
ít
 = 
	`ªaddú
(
dú
))) {

1175 i‡(
	`°∫ˇ£cmp
(
ít
->
d_«me
, "scph", 4) != 0)

1178 
	`¢¥ötf
(
∑th
, 
∑th_size
, "%s/%s", 
dú∑th
, 
ít
->
d_«me
);

1179 
ªt
 = 
	`åy_u£_bios
(
∑th
);

1180 i‡(
ªt
)

1183 
	`˛o£dú
(
dú
);

1184  
ªt
;

1185 
	}
}

1187 
	#föd_™y_bios
(...Ë
Ál£


	)

1190 
	$check_sy°em_•ecs
()

1192 
Àvñ
 = 6;

1193 
	`ívú⁄_cb
(
RETRO_ENVIRONMENT_SET_PERFORMANCE_LEVEL
, &
Àvñ
);

1194 
	}
}

1196 
	$ªåo_öô
()

1198 c⁄° *
bios
[] = { "scph1001", "scph5501", "scph7001" };

1199 c⁄° *
dú
;

1200 
∑th
[256];

1201 
i
, 
ªt
;

1202 
boﬁ
 
found_bios
 = 
Ál£
;

1204 
ªt
 = 
	`emu_c‹e_¥eöô
();

1205 
ªt
 |
	`emu_c‹e_öô
();

1206 i‡(
ªt
 != 0) {

1207 
	`SysPrötf
("PCSX init failed.\n");

1208 
	`exô
(1);

1211 #i‡
	`deföed
(
_POSIX_C_SOURCE
) && (_POSIX_C_SOURCE >= 200112L)

1212 
	`posix_memÆign
(&
vout_buf
, 16, 
VOUT_MAX_WIDTH
 * 
VOUT_MAX_HEIGHT
 * 2);

1214 
vout_buf
 = 
	`mÆloc
(
VOUT_MAX_WIDTH
 * 
VOUT_MAX_HEIGHT
 * 2);

1217 i‡(
	`ívú⁄_cb
(
RETRO_ENVIRONMENT_GET_SYSTEM_DIRECTORY
, &
dú
) && dir)

1219 
	`¢¥ötf
(
C⁄fig
.
BiosDú
, (C⁄fig.BiosDú), "%s/", 
dú
);

1221 
i
 = 0; i < (
bios
) / (bios[0]); i++) {

1222 
	`¢¥ötf
(
∑th
, ’©h), "%s/%s.bö", 
dú
, 
bios
[
i
]);

1223 
found_bios
 = 
	`åy_u£_bios
(
∑th
);

1224 i‡(
found_bios
)

1228 i‡(!
found_bios
)

1229 
found_bios
 = 
	`föd_™y_bios
(
dú
, 
∑th
, (path));

1231 i‡(
found_bios
) {

1232 
	`SysPrötf
("found BIOS fûe: %s\n", 
C⁄fig
.
Bios
);

1236 
	`SysPrötf
("no BIOS files found.\n");

1237 
ªåo_mesßge
 
msg
 =

1242 
	`ívú⁄_cb
(
RETRO_ENVIRONMENT_SET_MESSAGE
, (*)&
msg
);

1245 
	`ívú⁄_cb
(
RETRO_ENVIRONMENT_GET_CAN_DUPE
, &
vout_ˇn_du≥
);

1246 
	`ívú⁄_cb
(
RETRO_ENVIRONMENT_SET_DISK_CONTROL_INTERFACE
, &
disk_c⁄åﬁ
);

1247 
	`ívú⁄_cb
(
RETRO_ENVIRONMENT_GET_RUMBLE_INTERFACE
, &
rumbÀ
);

1252 #i‡!
	`deföed
(
__¨m__
Ë|| deföed(
__ARM_ARCH_7A__
)

1253 
cy˛e_mu…ùlõr
 = 175;

1255 
cy˛e_mu…ùlõr
 = 200;

1257 
∂_ª¨med_cbs
.
gpu_≥›s
.
iU£Dôhî
 = 1;

1258 
•u_c⁄fig
.
iU£FixedUpd©es
 = 1;

1260 
McdDißbÀ
[0] = 0;

1261 
McdDißbÀ
[1] = 1;

1262 
	`öô_memˇrd
(
Mcd1D©a
);

1264 
SaveFuncs
.
›í
 = 
ßve_›í
;

1265 
SaveFuncs
.
ªad
 = 
ßve_ªad
;

1266 
SaveFuncs
.
wrôe
 = 
ßve_wrôe
;

1267 
SaveFuncs
.
£ek
 = 
ßve_£ek
;

1268 
SaveFuncs
.
˛o£
 = 
ßve_˛o£
;

1270 
	`upd©e_v¨übÀs
(
Ál£
);

1271 
	`check_sy°em_•ecs
();

1272 
	}
}

1274 
	$ªåo_deöô
()

1276 
	`SysClo£
();

1277 
	`‰ì
(
vout_buf
);

1278 
vout_buf
 = 
NULL
;

1279 
	}
}

	@frontend/libretro.h

23 #i‚de‡
LIBRETRO_H__


24 
	#LIBRETRO_H__


	)

26 
	~<°döt.h
>

27 
	~<°ddef.h
>

28 
	~<limôs.h
>

30 #ifde‡
__˝lu•lus


34 #i‚de‡
__˝lu•lus


35 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
SN_TARGET_PS3
)

38 
	#boﬁ
 

	)

39 
	#åue
 1

	)

40 
	#Ál£
 0

	)

42 
	~<°dboﬁ.h
>

50 
	#RETRO_API_VERSION
 1

	)

66 
	#RETRO_DEVICE_TYPE_SHIFT
 8

	)

67 
	#RETRO_DEVICE_MASK
 ((1 << 
RETRO_DEVICE_TYPE_SHIFT
Ë- 1)

	)

68 
	#RETRO_DEVICE_SUBCLASS
(
ba£
, 
id
Ë(((id + 1Ë<< 
RETRO_DEVICE_TYPE_SHIFT
Ë| ba£)

	)

71 
	#RETRO_DEVICE_NONE
 0

	)

76 
	#RETRO_DEVICE_JOYPAD
 1

	)

85 
	#RETRO_DEVICE_MOUSE
 2

	)

93 
	#RETRO_DEVICE_KEYBOARD
 3

	)

97 
	#RETRO_DEVICE_LIGHTGUN
 4

	)

106 
	#RETRO_DEVICE_ANALOG
 5

	)

138 
	#RETRO_DEVICE_POINTER
 6

	)

144 
	#RETRO_DEVICE_ID_JOYPAD_B
 0

	)

145 
	#RETRO_DEVICE_ID_JOYPAD_Y
 1

	)

146 
	#RETRO_DEVICE_ID_JOYPAD_SELECT
 2

	)

147 
	#RETRO_DEVICE_ID_JOYPAD_START
 3

	)

148 
	#RETRO_DEVICE_ID_JOYPAD_UP
 4

	)

149 
	#RETRO_DEVICE_ID_JOYPAD_DOWN
 5

	)

150 
	#RETRO_DEVICE_ID_JOYPAD_LEFT
 6

	)

151 
	#RETRO_DEVICE_ID_JOYPAD_RIGHT
 7

	)

152 
	#RETRO_DEVICE_ID_JOYPAD_A
 8

	)

153 
	#RETRO_DEVICE_ID_JOYPAD_X
 9

	)

154 
	#RETRO_DEVICE_ID_JOYPAD_L
 10

	)

155 
	#RETRO_DEVICE_ID_JOYPAD_R
 11

	)

156 
	#RETRO_DEVICE_ID_JOYPAD_L2
 12

	)

157 
	#RETRO_DEVICE_ID_JOYPAD_R2
 13

	)

158 
	#RETRO_DEVICE_ID_JOYPAD_L3
 14

	)

159 
	#RETRO_DEVICE_ID_JOYPAD_R3
 15

	)

162 
	#RETRO_DEVICE_INDEX_ANALOG_LEFT
 0

	)

163 
	#RETRO_DEVICE_INDEX_ANALOG_RIGHT
 1

	)

164 
	#RETRO_DEVICE_ID_ANALOG_X
 0

	)

165 
	#RETRO_DEVICE_ID_ANALOG_Y
 1

	)

168 
	#RETRO_DEVICE_ID_MOUSE_X
 0

	)

169 
	#RETRO_DEVICE_ID_MOUSE_Y
 1

	)

170 
	#RETRO_DEVICE_ID_MOUSE_LEFT
 2

	)

171 
	#RETRO_DEVICE_ID_MOUSE_RIGHT
 3

	)

172 
	#RETRO_DEVICE_ID_MOUSE_WHEELUP
 4

	)

173 
	#RETRO_DEVICE_ID_MOUSE_WHEELDOWN
 5

	)

174 
	#RETRO_DEVICE_ID_MOUSE_MIDDLE
 6

	)

177 
	#RETRO_DEVICE_ID_LIGHTGUN_X
 0

	)

178 
	#RETRO_DEVICE_ID_LIGHTGUN_Y
 1

	)

179 
	#RETRO_DEVICE_ID_LIGHTGUN_TRIGGER
 2

	)

180 
	#RETRO_DEVICE_ID_LIGHTGUN_CURSOR
 3

	)

181 
	#RETRO_DEVICE_ID_LIGHTGUN_TURBO
 4

	)

182 
	#RETRO_DEVICE_ID_LIGHTGUN_PAUSE
 5

	)

183 
	#RETRO_DEVICE_ID_LIGHTGUN_START
 6

	)

186 
	#RETRO_DEVICE_ID_POINTER_X
 0

	)

187 
	#RETRO_DEVICE_ID_POINTER_Y
 1

	)

188 
	#RETRO_DEVICE_ID_POINTER_PRESSED
 2

	)

191 
	#RETRO_REGION_NTSC
 0

	)

192 
	#RETRO_REGION_PAL
 1

	)

195 
	eªåo_œnguage


197 
RETRO_LANGUAGE_ENGLISH
 = 0,

198 
RETRO_LANGUAGE_JAPANESE
 = 1,

199 
RETRO_LANGUAGE_FRENCH
 = 2,

200 
RETRO_LANGUAGE_SPANISH
 = 3,

201 
RETRO_LANGUAGE_GERMAN
 = 4,

202 
RETRO_LANGUAGE_ITALIAN
 = 5,

203 
RETRO_LANGUAGE_DUTCH
 = 6,

204 
RETRO_LANGUAGE_PORTUGUESE
 = 7,

205 
RETRO_LANGUAGE_RUSSIAN
 = 8,

206 
RETRO_LANGUAGE_KOREAN
 = 9,

207 
RETRO_LANGUAGE_CHINESE_TRADITIONAL
 = 10,

208 
RETRO_LANGUAGE_CHINESE_SIMPLIFIED
 = 11,

209 
RETRO_LANGUAGE_LAST
,

212 
RETRO_LANGUAGE_DUMMY
 = 
INT_MAX


219 
	#RETRO_MEMORY_MASK
 0xff

	)

226 
	#RETRO_MEMORY_SAVE_RAM
 0

	)

231 
	#RETRO_MEMORY_RTC
 1

	)

234 
	#RETRO_MEMORY_SYSTEM_RAM
 2

	)

237 
	#RETRO_MEMORY_VIDEO_RAM
 3

	)

240 
	eªåo_key


242 
RETROK_UNKNOWN
 = 0,

243 
RETROK_FIRST
 = 0,

244 
RETROK_BACKSPACE
 = 8,

245 
RETROK_TAB
 = 9,

246 
RETROK_CLEAR
 = 12,

247 
RETROK_RETURN
 = 13,

248 
RETROK_PAUSE
 = 19,

249 
RETROK_ESCAPE
 = 27,

250 
RETROK_SPACE
 = 32,

251 
RETROK_EXCLAIM
 = 33,

252 
RETROK_QUOTEDBL
 = 34,

253 
RETROK_HASH
 = 35,

254 
RETROK_DOLLAR
 = 36,

255 
RETROK_AMPERSAND
 = 38,

256 
RETROK_QUOTE
 = 39,

257 
RETROK_LEFTPAREN
 = 40,

258 
RETROK_RIGHTPAREN
 = 41,

259 
RETROK_ASTERISK
 = 42,

260 
RETROK_PLUS
 = 43,

261 
RETROK_COMMA
 = 44,

262 
RETROK_MINUS
 = 45,

263 
RETROK_PERIOD
 = 46,

264 
RETROK_SLASH
 = 47,

265 
RETROK_0
 = 48,

266 
RETROK_1
 = 49,

267 
RETROK_2
 = 50,

268 
RETROK_3
 = 51,

269 
RETROK_4
 = 52,

270 
RETROK_5
 = 53,

271 
RETROK_6
 = 54,

272 
RETROK_7
 = 55,

273 
RETROK_8
 = 56,

274 
RETROK_9
 = 57,

275 
RETROK_COLON
 = 58,

276 
RETROK_SEMICOLON
 = 59,

277 
RETROK_LESS
 = 60,

278 
RETROK_EQUALS
 = 61,

279 
RETROK_GREATER
 = 62,

280 
RETROK_QUESTION
 = 63,

281 
RETROK_AT
 = 64,

282 
RETROK_LEFTBRACKET
 = 91,

283 
RETROK_BACKSLASH
 = 92,

284 
RETROK_RIGHTBRACKET
 = 93,

285 
RETROK_CARET
 = 94,

286 
RETROK_UNDERSCORE
 = 95,

287 
RETROK_BACKQUOTE
 = 96,

288 
RETROK_a
 = 97,

289 
RETROK_b
 = 98,

290 
RETROK_c
 = 99,

291 
RETROK_d
 = 100,

292 
RETROK_e
 = 101,

293 
RETROK_f
 = 102,

294 
RETROK_g
 = 103,

295 
RETROK_h
 = 104,

296 
RETROK_i
 = 105,

297 
RETROK_j
 = 106,

298 
RETROK_k
 = 107,

299 
RETROK_l
 = 108,

300 
RETROK_m
 = 109,

301 
RETROK_n
 = 110,

302 
RETROK_o
 = 111,

303 
RETROK_p
 = 112,

304 
RETROK_q
 = 113,

305 
RETROK_r
 = 114,

306 
RETROK_s
 = 115,

307 
RETROK_t
 = 116,

308 
RETROK_u
 = 117,

309 
RETROK_v
 = 118,

310 
RETROK_w
 = 119,

311 
RETROK_x
 = 120,

312 
RETROK_y
 = 121,

313 
RETROK_z
 = 122,

314 
RETROK_DELETE
 = 127,

316 
RETROK_KP0
 = 256,

317 
RETROK_KP1
 = 257,

318 
RETROK_KP2
 = 258,

319 
RETROK_KP3
 = 259,

320 
RETROK_KP4
 = 260,

321 
RETROK_KP5
 = 261,

322 
RETROK_KP6
 = 262,

323 
RETROK_KP7
 = 263,

324 
RETROK_KP8
 = 264,

325 
RETROK_KP9
 = 265,

326 
RETROK_KP_PERIOD
 = 266,

327 
RETROK_KP_DIVIDE
 = 267,

328 
RETROK_KP_MULTIPLY
 = 268,

329 
RETROK_KP_MINUS
 = 269,

330 
RETROK_KP_PLUS
 = 270,

331 
RETROK_KP_ENTER
 = 271,

332 
RETROK_KP_EQUALS
 = 272,

334 
RETROK_UP
 = 273,

335 
RETROK_DOWN
 = 274,

336 
RETROK_RIGHT
 = 275,

337 
RETROK_LEFT
 = 276,

338 
RETROK_INSERT
 = 277,

339 
RETROK_HOME
 = 278,

340 
RETROK_END
 = 279,

341 
RETROK_PAGEUP
 = 280,

342 
RETROK_PAGEDOWN
 = 281,

344 
RETROK_F1
 = 282,

345 
RETROK_F2
 = 283,

346 
RETROK_F3
 = 284,

347 
RETROK_F4
 = 285,

348 
RETROK_F5
 = 286,

349 
RETROK_F6
 = 287,

350 
RETROK_F7
 = 288,

351 
RETROK_F8
 = 289,

352 
RETROK_F9
 = 290,

353 
RETROK_F10
 = 291,

354 
RETROK_F11
 = 292,

355 
RETROK_F12
 = 293,

356 
RETROK_F13
 = 294,

357 
RETROK_F14
 = 295,

358 
RETROK_F15
 = 296,

360 
RETROK_NUMLOCK
 = 300,

361 
RETROK_CAPSLOCK
 = 301,

362 
RETROK_SCROLLOCK
 = 302,

363 
RETROK_RSHIFT
 = 303,

364 
RETROK_LSHIFT
 = 304,

365 
RETROK_RCTRL
 = 305,

366 
RETROK_LCTRL
 = 306,

367 
RETROK_RALT
 = 307,

368 
RETROK_LALT
 = 308,

369 
RETROK_RMETA
 = 309,

370 
RETROK_LMETA
 = 310,

371 
RETROK_LSUPER
 = 311,

372 
RETROK_RSUPER
 = 312,

373 
RETROK_MODE
 = 313,

374 
RETROK_COMPOSE
 = 314,

376 
RETROK_HELP
 = 315,

377 
RETROK_PRINT
 = 316,

378 
RETROK_SYSREQ
 = 317,

379 
RETROK_BREAK
 = 318,

380 
RETROK_MENU
 = 319,

381 
RETROK_POWER
 = 320,

382 
RETROK_EURO
 = 321,

383 
RETROK_UNDO
 = 322,

385 
RETROK_LAST
,

387 
RETROK_DUMMY
 = 
INT_MAX


390 
	eªåo_mod


392 
RETROKMOD_NONE
 = 0x0000,

394 
RETROKMOD_SHIFT
 = 0x01,

395 
RETROKMOD_CTRL
 = 0x02,

396 
RETROKMOD_ALT
 = 0x04,

397 
RETROKMOD_META
 = 0x08,

399 
RETROKMOD_NUMLOCK
 = 0x10,

400 
RETROKMOD_CAPSLOCK
 = 0x20,

401 
RETROKMOD_SCROLLOCK
 = 0x40,

403 
RETROKMOD_DUMMY
 = 
INT_MAX


408 
	#RETRO_ENVIRONMENT_EXPERIMENTAL
 0x10000

	)

410 
	#RETRO_ENVIRONMENT_PRIVATE
 0x20000

	)

413 
	#RETRO_ENVIRONMENT_SET_ROTATION
 1

	)

419 
	#RETRO_ENVIRONMENT_GET_OVERSCAN
 2

	)

423 
	#RETRO_ENVIRONMENT_GET_CAN_DUPE
 3

	)

432 
	#RETRO_ENVIRONMENT_SET_MESSAGE
 6

	)

439 
	#RETRO_ENVIRONMENT_SHUTDOWN
 7

	)

444 
	#RETRO_ENVIRONMENT_SET_PERFORMANCE_LEVEL
 8

	)

461 
	#RETRO_ENVIRONMENT_GET_SYSTEM_DIRECTORY
 9

	)

475 
	#RETRO_ENVIRONMENT_SET_PIXEL_FORMAT
 10

	)

486 
	#RETRO_ENVIRONMENT_SET_INPUT_DESCRIPTORS
 11

	)

495 
	#RETRO_ENVIRONMENT_SET_KEYBOARD_CALLBACK
 12

	)

499 
	#RETRO_ENVIRONMENT_SET_DISK_CONTROL_INTERFACE
 13

	)

506 
	#RETRO_ENVIRONMENT_SET_HW_RENDER
 14

	)

518 
	#RETRO_ENVIRONMENT_GET_VARIABLE
 15

	)

526 
	#RETRO_ENVIRONMENT_SET_VARIABLES
 16

	)

561 
	#RETRO_ENVIRONMENT_GET_VARIABLE_UPDATE
 17

	)

567 
	#RETRO_ENVIRONMENT_SET_SUPPORT_NO_GAME
 18

	)

574 
	#RETRO_ENVIRONMENT_GET_LIBRETRO_PATH
 19

	)

588 
	#RETRO_ENVIRONMENT_SET_AUDIO_CALLBACK
 22

	)

614 
	#RETRO_ENVIRONMENT_SET_FRAME_TIME_CALLBACK
 21

	)

623 
	#RETRO_ENVIRONMENT_GET_RUMBLE_INTERFACE
 23

	)

630 
	#RETRO_ENVIRONMENT_GET_INPUT_DEVICE_CAPABILITIES
 24

	)

639 
	#RETRO_ENVIRONMENT_GET_SENSOR_INTERFACE
 (25 | 
RETRO_ENVIRONMENT_EXPERIMENTAL
)

	)

648 
	#RETRO_ENVIRONMENT_GET_CAMERA_INTERFACE
 (26 | 
RETRO_ENVIRONMENT_EXPERIMENTAL
)

	)

673 
	#RETRO_ENVIRONMENT_GET_LOG_INTERFACE
 27

	)

683 
	#RETRO_ENVIRONMENT_GET_PERF_INTERFACE
 28

	)

689 
	#RETRO_ENVIRONMENT_GET_LOCATION_INTERFACE
 29

	)

696 
	#RETRO_ENVIRONMENT_GET_CONTENT_DIRECTORY
 30

	)

706 
	#RETRO_ENVIRONMENT_GET_SAVE_DIRECTORY
 31

	)

720 
	#RETRO_ENVIRONMENT_SET_SYSTEM_AV_INFO
 32

	)

753 
	#RETRO_ENVIRONMENT_SET_PROC_ADDRESS_CALLBACK
 33

	)

764 
	#RETRO_ENVIRONMENT_SET_SUBSYSTEM_INFO
 34

	)

783 
	#RETRO_ENVIRONMENT_SET_CONTROLLER_INFO
 35

	)

808 
	#RETRO_ENVIRONMENT_SET_MEMORY_MAPS
 (36 | 
RETRO_ENVIRONMENT_EXPERIMENTAL
)

	)

821 
	#RETRO_ENVIRONMENT_SET_GEOMETRY
 37

	)

840 
	#RETRO_ENVIRONMENT_GET_USERNAME
 38

	)

849 
	#RETRO_ENVIRONMENT_GET_LANGUAGE
 39

	)

855 
	#RETRO_MEMDESC_CONST
 (1 << 0Ë

	)

856 
	#RETRO_MEMDESC_BIGENDIAN
 (1 << 1Ë

	)

857 
	#RETRO_MEMDESC_ALIGN_2
 (1 << 16Ë

	)

858 
	#RETRO_MEMDESC_ALIGN_4
 (2 << 16)

	)

859 
	#RETRO_MEMDESC_ALIGN_8
 (3 << 16)

	)

860 
	#RETRO_MEMDESC_MINSIZE_2
 (1 << 24Ë

	)

861 
	#RETRO_MEMDESC_MINSIZE_4
 (2 << 24)

	)

862 
	#RETRO_MEMDESC_MINSIZE_8
 (3 << 24)

	)

863 
	sªåo_mem‹y_des¸ùt‹


865 
uöt64_t
 
Êags
;

880 *
±r
;

881 
size_t
 
off£t
;

885 
size_t
 
°¨t
;

893 
size_t
 
£À˘
;

897 
size_t
 
disc⁄√˘
;

906 
size_t
 
Àn
;

937 c⁄° *
addr•a˚
;

978 
	sªåo_mem‹y_m≠


980 c⁄° 
ªåo_mem‹y_des¸ùt‹
 *
des¸ùt‹s
;

981 
num_des¸ùt‹s
;

984 
	sªåo_c⁄åﬁÀr_des¸ùti⁄


989 c⁄° *
desc
;

996 
id
;

999 
	sªåo_c⁄åﬁÀr_öfo


1001 c⁄° 
ªåo_c⁄åﬁÀr_des¸ùti⁄
 *
ty≥s
;

1002 
num_ty≥s
;

1005 
	sªåo_subsy°em_mem‹y_öfo


1008 c⁄° *
exãnsi⁄
;

1013 
ty≥
;

1016 
	sªåo_subsy°em_rom_öfo


1019 c⁄° *
desc
;

1022 c⁄° *
vÆid_exãnsi⁄s
;

1025 
boﬁ
 
√ed_fuŒ∑th
;

1028 
boﬁ
 
block_exåa˘
;

1032 
boﬁ
 
ªquúed
;

1036 c⁄° 
ªåo_subsy°em_mem‹y_öfo
 *
mem‹y
;

1037 
num_mem‹y
;

1040 
	sªåo_subsy°em_öfo


1043 c⁄° *
desc
;

1050 c⁄° *
idít
;

1058 c⁄° 
ªåo_subsy°em_rom_öfo
 *
roms
;

1061 
num_roms
;

1064 
id
;

1067 (*
ªåo_¥oc_addªss_t
)();

1083 
ªåo_¥oc_addªss_t
 (*
	tªåo_gë_¥oc_addªss_t
)(c⁄° *
	tsym
);

1085 
	sªåo_gë_¥oc_addªss_öãrÁ˚


1087 
ªåo_gë_¥oc_addªss_t
 
gë_¥oc_addªss
;

1090 
	eªåo_log_Àvñ


1092 
RETRO_LOG_DEBUG
 = 0,

1093 
RETRO_LOG_INFO
,

1094 
RETRO_LOG_WARN
,

1095 
RETRO_LOG_ERROR
,

1097 
RETRO_LOG_DUMMY
 = 
INT_MAX


1101 (*
ªåo_log_¥ötf_t
)(
	tªåo_log_Àvñ
 
	tÀvñ
,

1102 c⁄° *
	tfmt
, ...);

1104 
	sªåo_log_ˇŒback


1106 
ªåo_log_¥ötf_t
 
log
;

1112 
	#RETRO_SIMD_SSE
 (1 << 0)

	)

1113 
	#RETRO_SIMD_SSE2
 (1 << 1)

	)

1114 
	#RETRO_SIMD_VMX
 (1 << 2)

	)

1115 
	#RETRO_SIMD_VMX128
 (1 << 3)

	)

1116 
	#RETRO_SIMD_AVX
 (1 << 4)

	)

1117 
	#RETRO_SIMD_NEON
 (1 << 5)

	)

1118 
	#RETRO_SIMD_SSE3
 (1 << 6)

	)

1119 
	#RETRO_SIMD_SSSE3
 (1 << 7)

	)

1120 
	#RETRO_SIMD_MMX
 (1 << 8)

	)

1121 
	#RETRO_SIMD_MMXEXT
 (1 << 9)

	)

1122 
	#RETRO_SIMD_SSE4
 (1 << 10)

	)

1123 
	#RETRO_SIMD_SSE42
 (1 << 11)

	)

1124 
	#RETRO_SIMD_AVX2
 (1 << 12)

	)

1125 
	#RETRO_SIMD_VFPU
 (1 << 13)

	)

1126 
	#RETRO_SIMD_PS
 (1 << 14)

	)

1127 
	#RETRO_SIMD_AES
 (1 << 15)

	)

1129 
uöt64_t
 
	tªåo_≥rf_tick_t
;

1130 
öt64_t
 
	tªåo_time_t
;

1132 
	sªåo_≥rf_cou¡î


1134 c⁄° *
idít
;

1135 
ªåo_≥rf_tick_t
 
°¨t
;

1136 
ªåo_≥rf_tick_t
 
tŸÆ
;

1137 
ªåo_≥rf_tick_t
 
ˇŒ_˙t
;

1139 
boﬁ
 
ªgi°îed
;

1145 
ªåo_time_t
 (*
	tªåo_≥rf_gë_time_u£c_t
)();

1151 
ªåo_≥rf_tick_t
 (*
	tªåo_≥rf_gë_cou¡î_t
)();

1154 
uöt64_t
 (*
	tªåo_gë_˝u_„©uªs_t
)();

1159 (*
ªåo_≥rf_log_t
)();

1166 (*
ªåo_≥rf_ªgi°î_t
)(
	tªåo_≥rf_cou¡î
 *
	tcou¡î
);

1169 (*
ªåo_≥rf_°¨t_t
)(
	tªåo_≥rf_cou¡î
 *
	tcou¡î
);

1172 (*
ªåo_≥rf_°›_t
)(
	tªåo_≥rf_cou¡î
 *
	tcou¡î
);

1207 
	sªåo_≥rf_ˇŒback


1209 
ªåo_≥rf_gë_time_u£c_t
 
gë_time_u£c
;

1210 
ªåo_gë_˝u_„©uªs_t
 
gë_˝u_„©uªs
;

1212 
ªåo_≥rf_gë_cou¡î_t
 
gë_≥rf_cou¡î
;

1213 
ªåo_≥rf_ªgi°î_t
 
≥rf_ªgi°î
;

1214 
ªåo_≥rf_°¨t_t
 
≥rf_°¨t
;

1215 
ªåo_≥rf_°›_t
 
≥rf_°›
;

1216 
ªåo_≥rf_log_t
 
≥rf_log
;

1222 
	eªåo_£ns‹_a˘i⁄


1224 
RETRO_SENSOR_ACCELEROMETER_ENABLE
 = 0,

1225 
RETRO_SENSOR_ACCELEROMETER_DISABLE
,

1227 
RETRO_SENSOR_DUMMY
 = 
INT_MAX


1231 
	#RETRO_SENSOR_ACCELEROMETER_X
 0

	)

1232 
	#RETRO_SENSOR_ACCELEROMETER_Y
 1

	)

1233 
	#RETRO_SENSOR_ACCELEROMETER_Z
 2

	)

1235 
boﬁ
 (*
	tªåo_£t_£ns‹_°©e_t
)(
	tp‹t
,

1236 
	tªåo_£ns‹_a˘i⁄
 
	ta˘i⁄
, 
	tøã
);

1238 (*
ªåo_£ns‹_gë_öput_t
)(
	tp‹t
, 
	tid
);

1240 
	sªåo_£ns‹_öãrÁ˚


1242 
ªåo_£t_£ns‹_°©e_t
 
£t_£ns‹_°©e
;

1243 
ªåo_£ns‹_gë_öput_t
 
gë_£ns‹_öput
;

1246 
	eªåo_ˇmîa_buf„r


1248 
RETRO_CAMERA_BUFFER_OPENGL_TEXTURE
 = 0,

1249 
RETRO_CAMERA_BUFFER_RAW_FRAMEBUFFER
,

1251 
RETRO_CAMERA_BUFFER_DUMMY
 = 
INT_MAX


1255 
boﬁ
 (*
	tªåo_ˇmîa_°¨t_t
)();

1258 (*
ªåo_ˇmîa_°›_t
)();

1264 (*
ªåo_ˇmîa_li„time_°©us_t
)();

1270 (*
ªåo_ˇmîa_‰ame_øw_‰amebuf„r_t
)(c⁄° 
	tuöt32_t
 *
	tbuf„r
,

1271 
	twidth
, 
	theight
, 
	tsize_t
 
	tpôch
);

1291 (*
ªåo_ˇmîa_‰ame_›ígl_ãxtuª_t
)(
	tãxtuª_id
,

1292 
	tãxtuª_èrgë
, c⁄° *
	tafföe
);

1294 
	sªåo_ˇmîa_ˇŒback


1299 
uöt64_t
 
ˇps
;

1301 
width
;

1302 
height
;

1303 
ªåo_ˇmîa_°¨t_t
 
°¨t
;

1304 
ªåo_ˇmîa_°›_t
 
°›
;

1307 
ªåo_ˇmîa_‰ame_øw_‰amebuf„r_t
 
‰ame_øw_‰amebuf„r
;

1309 
ªåo_ˇmîa_‰ame_›ígl_ãxtuª_t
 
‰ame_›ígl_ãxtuª
;

1315 
ªåo_ˇmîa_li„time_°©us_t
 
öôülized
;

1321 
ªåo_ˇmîa_li„time_°©us_t
 
deöôülized
;

1333 (*
ªåo_loˇti⁄_£t_öãrvÆ_t
)(
	töãrvÆ_ms
,

1334 
	töãrvÆ_di°™˚
);

1339 
boﬁ
 (*
	tªåo_loˇti⁄_°¨t_t
)();

1343 (*
ªåo_loˇti⁄_°›_t
)();

1347 
boﬁ
 (*
	tªåo_loˇti⁄_gë_posôi⁄_t
)(*
	tœt
, *
	tl⁄
,

1348 *
	th‹iz_accuøcy
, *
	tvît_accuøcy
);

1354 (*
ªåo_loˇti⁄_li„time_°©us_t
)();

1356 
	sªåo_loˇti⁄_ˇŒback


1358 
ªåo_loˇti⁄_°¨t_t
 
°¨t
;

1359 
ªåo_loˇti⁄_°›_t
 
°›
;

1360 
ªåo_loˇti⁄_gë_posôi⁄_t
 
gë_posôi⁄
;

1361 
ªåo_loˇti⁄_£t_öãrvÆ_t
 
£t_öãrvÆ
;

1363 
ªåo_loˇti⁄_li„time_°©us_t
 
öôülized
;

1364 
ªåo_loˇti⁄_li„time_°©us_t
 
deöôülized
;

1367 
	eªåo_rumbÀ_ef„˘


1369 
RETRO_RUMBLE_STRONG
 = 0,

1370 
RETRO_RUMBLE_WEAK
 = 1,

1372 
RETRO_RUMBLE_DUMMY
 = 
INT_MAX


1382 
boﬁ
 (*
	tªåo_£t_rumbÀ_°©e_t
)(
	tp‹t
,

1383 
	tªåo_rumbÀ_ef„˘
 
	tef„˘
, 
	tuöt16_t
 
	t°ªngth
);

1385 
	sªåo_rumbÀ_öãrÁ˚


1387 
ªåo_£t_rumbÀ_°©e_t
 
£t_rumbÀ_°©e
;

1391 (*
ªåo_audio_ˇŒback_t
)();

1400 (*
ªåo_audio_£t_°©e_ˇŒback_t
)(
	tboﬁ
 
	tíabÀd
);

1402 
	sªåo_audio_ˇŒback


1404 
ªåo_audio_ˇŒback_t
 
ˇŒback
;

1405 
ªåo_audio_£t_°©e_ˇŒback_t
 
£t_°©e
;

1416 
öt64_t
 
	tªåo_u£c_t
;

1417 (*
ªåo_‰ame_time_ˇŒback_t
)(
	tªåo_u£c_t
 
	tu£c
);

1418 
	sªåo_‰ame_time_ˇŒback


1420 
ªåo_‰ame_time_ˇŒback_t
 
ˇŒback
;

1424 
ªåo_u£c_t
 
ª„ªn˚
;

1430 
	#RETRO_HW_FRAME_BUFFER_VALID
 ((*)-1)

	)

1441 (*
ªåo_hw_c⁄ãxt_ª£t_t
)();

1446 
uöçå_t
 (*
	tªåo_hw_gë_cuºít_‰amebuf„r_t
)();

1449 
ªåo_¥oc_addªss_t
 (*
	tªåo_hw_gë_¥oc_addªss_t
)(c⁄° *
	tsym
);

1451 
	eªåo_hw_c⁄ãxt_ty≥


1453 
RETRO_HW_CONTEXT_NONE
 = 0,

1455 
RETRO_HW_CONTEXT_OPENGL
 = 1,

1457 
RETRO_HW_CONTEXT_OPENGLES2
 = 2,

1460 
RETRO_HW_CONTEXT_OPENGL_CORE
 = 3,

1462 
RETRO_HW_CONTEXT_OPENGLES3
 = 4,

1465 
RETRO_HW_CONTEXT_OPENGLES_VERSION
 = 5,

1467 
RETRO_HW_CONTEXT_DUMMY
 = 
INT_MAX


1470 
	sªåo_hw_ªndî_ˇŒback


1473 
ªåo_hw_c⁄ãxt_ty≥
 
c⁄ãxt_ty≥
;

1487 
ªåo_hw_c⁄ãxt_ª£t_t
 
c⁄ãxt_ª£t
;

1490 
ªåo_hw_gë_cuºít_‰amebuf„r_t
 
gë_cuºít_‰amebuf„r
;

1493 
ªåo_hw_gë_¥oc_addªss_t
 
gë_¥oc_addªss
;

1496 
boﬁ
 
dïth
;

1499 
boﬁ
 
°ícû
;

1506 
boﬁ
 
bŸtom_À·_‹igö
;

1509 
vîsi⁄_maj‹
;

1512 
vîsi⁄_mö‹
;

1517 
boﬁ
 
ˇche_c⁄ãxt
;

1528 
ªåo_hw_c⁄ãxt_ª£t_t
 
c⁄ãxt_de°roy
;

1545 
boﬁ
 
debug_c⁄ãxt
;

1565 (*
ªåo_keybﬂrd_evít_t
)(
	tboﬁ
 
	tdown
, 
	tkeycode
,

1566 
	tuöt32_t
 
	tch¨a˘î
, 
	tuöt16_t
 
	tkey_modifõrs
);

1568 
	sªåo_keybﬂrd_ˇŒback


1570 
ªåo_keybﬂrd_evít_t
 
ˇŒback
;

1589 
boﬁ
 (*
	tªåo_£t_eje˘_°©e_t
)(
	tboﬁ
 
	teje˘ed
);

1592 
boﬁ
 (*
	tªåo_gë_eje˘_°©e_t
)();

1597 (*
ªåo_gë_image_ödex_t
)();

1603 
boﬁ
 (*
	tªåo_£t_image_ödex_t
)(
	tödex
);

1606 (*
ªåo_gë_num_images_t
)();

1608 
ªåo_game_öfo
;

1622 
boﬁ
 (*
	tªåo_ª∂a˚_image_ödex_t
)(
	tödex
,

1623 c⁄° 
	tªåo_game_öfo
 *
	töfo
);

1629 
boﬁ
 (*
	tªåo_add_image_ödex_t
)();

1631 
	sªåo_disk_c⁄åﬁ_ˇŒback


1633 
ªåo_£t_eje˘_°©e_t
 
£t_eje˘_°©e
;

1634 
ªåo_gë_eje˘_°©e_t
 
gë_eje˘_°©e
;

1636 
ªåo_gë_image_ödex_t
 
gë_image_ödex
;

1637 
ªåo_£t_image_ödex_t
 
£t_image_ödex
;

1638 
ªåo_gë_num_images_t
 
gë_num_images
;

1640 
ªåo_ª∂a˚_image_ödex_t
 
ª∂a˚_image_ödex
;

1641 
ªåo_add_image_ödex_t
 
add_image_ödex
;

1644 
	eªåo_pixñ_f‹m©


1650 
RETRO_PIXEL_FORMAT_0RGB1555
 = 0,

1654 
RETRO_PIXEL_FORMAT_XRGB8888
 = 1,

1662 
RETRO_PIXEL_FORMAT_RGB565
 = 2,

1665 
RETRO_PIXEL_FORMAT_UNKNOWN
 = 
INT_MAX


1668 
	sªåo_mesßge


1670 c⁄° *
msg
;

1671 
‰ames
;

1677 
	sªåo_öput_des¸ùt‹


1680 
p‹t
;

1681 
devi˚
;

1682 
ödex
;

1683 
id
;

1688 c⁄° *
des¸ùti⁄
;

1691 
	sªåo_sy°em_öfo


1696 c⁄° *
libøry_«me
;

1698 c⁄° *
libøry_vîsi⁄
;

1700 c⁄° *
vÆid_exãnsi⁄s
;

1718 
boﬁ
 
√ed_fuŒ∑th
;

1724 
boﬁ
 
block_exåa˘
;

1727 
	sªåo_game_geomëry


1729 
ba£_width
;

1730 
ba£_height
;

1731 
max_width
;

1732 
max_height
;

1734 
a•e˘_øtio
;

1741 
	sªåo_sy°em_timög


1743 
Âs
;

1744 
ßm∂e_øã
;

1747 
	sªåo_sy°em_av_öfo


1749 
ªåo_game_geomëry
 
geomëry
;

1750 
ªåo_sy°em_timög
 
timög
;

1753 
	sªåo_v¨übÀ


1762 c⁄° *
key
;

1765 c⁄° *
vÆue
;

1768 
	sªåo_game_öfo


1770 c⁄° *
∑th
;

1776 c⁄° *
d©a
;

1778 
size_t
 
size
;

1779 c⁄° *
mëa
;

1786 
boﬁ
 (*
	tªåo_ívú⁄mít_t
)(
	tcmd
, *
	td©a
);

1799 (*
ªåo_video_ª‰esh_t
)(c⁄° *
	td©a
, 
	twidth
,

1800 
	theight
, 
	tsize_t
 
	tpôch
);

1806 (*
ªåo_audio_ßm∂e_t
)(
	töt16_t
 
	tÀ·
, i¡16_à
	tright
);

1814 
size_t
 (*
	tªåo_audio_ßm∂e_b©ch_t
)(c⁄° 
	töt16_t
 *
	td©a
,

1815 
	tsize_t
 
	t‰ames
);

1818 (*
ªåo_öput_pﬁl_t
)();

1827 
öt16_t
 (*
	tªåo_öput_°©e_t
)(
	tp‹t
, 
	tdevi˚
,

1828 
	tödex
, 
	tid
);

1835 
ªåo_£t_ívú⁄mít
(
ªåo_ívú⁄mít_t
);

1836 
ªåo_£t_video_ª‰esh
(
ªåo_video_ª‰esh_t
);

1837 
ªåo_£t_audio_ßm∂e
(
ªåo_audio_ßm∂e_t
);

1838 
ªåo_£t_audio_ßm∂e_b©ch
(
ªåo_audio_ßm∂e_b©ch_t
);

1839 
ªåo_£t_öput_pﬁl
(
ªåo_öput_pﬁl_t
);

1840 
ªåo_£t_öput_°©e
(
ªåo_öput_°©e_t
);

1843 
ªåo_öô
();

1844 
ªåo_deöô
();

1848 
ªåo_≠i_vîsi⁄
();

1853 
ªåo_gë_sy°em_öfo
(
ªåo_sy°em_öfo
 *
öfo
);

1861 
ªåo_gë_sy°em_av_öfo
(
ªåo_sy°em_av_öfo
 *
öfo
);

1871 
ªåo_£t_c⁄åﬁÀr_p‹t_devi˚
(
p‹t
, 
devi˚
);

1874 
ªåo_ª£t
();

1884 
ªåo_run
();

1892 
size_t
 
ªåo_£rülize_size
();

1896 
boﬁ
 
ªåo_£rülize
(*
d©a
, 
size_t
 
size
);

1897 
boﬁ
 
ªåo_un£rülize
(c⁄° *
d©a
, 
size_t
 
size
);

1899 
ªåo_chót_ª£t
();

1900 
ªåo_chót_£t
(
ödex
, 
boﬁ
 
íabÀd
, c⁄° *
code
);

1903 
boﬁ
 
ªåo_lﬂd_game
(c⁄° 
ªåo_game_öfo
 *
game
);

1907 
boﬁ
 
ªåo_lﬂd_game_•ecül
(

1908 
game_ty≥
,

1909 c⁄° 
ªåo_game_öfo
 *
öfo
, 
size_t
 
num_öfo


1913 
ªåo_u∆ﬂd_game
();

1916 
ªåo_gë_ªgi⁄
();

1919 *
ªåo_gë_mem‹y_d©a
(
id
);

1920 
size_t
 
ªåo_gë_mem‹y_size
(
id
);

1922 #ifde‡
__˝lu•lus


	@frontend/main.c

8 
	~<°dio.h
>

9 
	~<°rög.h
>

10 
	~<°d¨g.h
>

11 
	~<uni°d.h
>

12 
	~<sig«l.h
>

13 
	~<time.h
>

14 #i‚de‡
_WIN32


15 
	~<dlf˙.h
>

18 
	~"maö.h
"

19 
	~"∂ugö.h
"

20 
	~"∂ugö_lib.h
"

21 
	~"p˙t.h
"

22 
	~"míu.h
"

23 
	~"∂©.h
"

24 
	~"../libpcsxc‹e/misc.h
"

25 
	~"../libpcsxc‹e/chót.h
"

26 
	~"../libpcsxc‹e/√w_dy«ªc/√w_dy«ªc.h
"

27 
	~"../∂ugös/cdrcimg/cdrcimg.h
"

28 
	~"../∂ugös/dfsound/•u_c⁄fig.h
"

29 
	~"ªvisi⁄.h
"

31 #i‚de‡
NO_FRONTEND


32 
	~"libpico„/öput.h
"

33 
	~"libpico„/∂©.h
"

34 
	~"libpico„/ªad≤g.h
"

36 
toggÀ_Á°_f‹w¨d
(
f‹˚_off
);

37 
check_¥ofûe
();

38 
check_memˇrds
();

40 #i‚de‡
BOOT_MSG


41 
	#BOOT_MSG
 "BoŸög up..."

	)

45 
SèπDebuggî
();

46 
St›Debuggî
();

48 
	gªady_to_go
, 
	gg_emu_w™t_quô
, 
	gg_emu_ª£âög
;

49 
	ggpuDi•
;

50 
	gcfgfûe_ba£«me
[
MAXPATHLEN
];

51 
	g°©e_¶Ÿ
;

52 
sched_a˘i⁄
 
	gemu_a˘i⁄
, 
	gemu_a˘i⁄_ﬁd
;

53 
	ghud_msg
[64];

54 
	ghud_√w_msg
;

56 
	$make_∑th
(*
buf
, 
size_t
 
size
, c⁄° *
dú
, c⁄° *
‚ame
)

58 i‡(
‚ame
)

59 
	`¢¥ötf
(
buf
, 
size
, ".%s%s", 
dú
, 
‚ame
);

61 
	`¢¥ötf
(
buf
, 
size
, ".%s", 
dú
);

62 
	}
}

63 
	#MAKE_PATH
(
buf
, 
dú
, 
‚ame
) \

64 
	`make_∑th
(
buf
, (buf), 
dú
, 
‚ame
)

	)

66 
	$gë_gameid_fûíame
(*
buf
, 
size
, c⁄° *
fmt
, 
i
) {

67 
åimœbñ
[33];

68 
j
;

70 
	`°∫˝y
(
åimœbñ
, 
CdromLabñ
, 32);

71 
åimœbñ
[32] = 0;

72 
j
 = 31; j >= 0; j--)

73 i‡(
åimœbñ
[
j
] == ' ')

74 
åimœbñ
[
j
] = 0;

78 
	`¢¥ötf
(
buf
, 
size
, 
fmt
, 
åimœbñ
, 
CdromId
, 
i
);

81 
	}
}

83 
	$£t_cd_image
(c⁄° *
‚ame
)

85 c⁄° *
ext
 = 
NULL
;

87 i‡(
‚ame
 !
NULL
)

88 
ext
 = 
	`°ºchr
(
‚ame
, '.');

90 i‡(
ext
 && (

91 
	`°rˇ£cmp
(
ext
, ".z") == 0 || strcasecmp(ext, ".bz") == 0 ||

92 
	`°rˇ£cmp
(
ext
, ".znx") == 0 )) {

93 
	`SëIsoFûe
(
NULL
);

94 
	`cdrcimg_£t_‚ame
(
‚ame
);

95 
	`°r˝y
(
C⁄fig
.
Cdr
, "builtin_cdrcimg");

97 
	`SëIsoFûe
(
‚ame
);

98 
	`°r˝y
(
C⁄fig
.
Cdr
, "builtin_cdr");

100 
	}
}

102 
	$£t_deÁu…_∑ths
()

104 #i‚de‡
NO_FRONTEND


105 
	`¢¥ötf
(
C⁄fig
.
P©chesDú
, (C⁄fig.P©chesDú), "." 
PATCHES_DIR
);

106 
	`MAKE_PATH
(
C⁄fig
.
Mcd1
, 
MEMCARD_DIR
, "card1.mcd");

107 
	`MAKE_PATH
(
C⁄fig
.
Mcd2
, 
MEMCARD_DIR
, "card2.mcd");

108 
	`°r˝y
(
C⁄fig
.
BiosDú
, "bios");

111 
	`°r˝y
(
C⁄fig
.
PlugösDú
, "plugins");

112 
	`°r˝y
(
C⁄fig
.
Gpu
, "builtin_gpu");

113 
	`°r˝y
(
C⁄fig
.
Spu
, "builtin_spu");

114 
	`°r˝y
(
C⁄fig
.
Cdr
, "builtin_cdr");

115 
	`°r˝y
(
C⁄fig
.
Pad1
, "builtin_pad");

116 
	`°r˝y
(
C⁄fig
.
Pad2
, "builtin_pad");

117 
	`°r˝y
(
C⁄fig
.
Në
, "Disabled");

118 
	}
}

120 
	$emu_£t_deÁu…_c⁄fig
()

123 
C⁄fig
.
Xa
 = C⁄fig.
Cdda
 = C⁄fig.
Sio
 =

124 
C⁄fig
.
SpuIrq
 = C⁄fig.
RC¡Fix
 = C⁄fig.
VSyncWA
 = 0;

125 
C⁄fig
.
PsxAuto
 = 1;

127 
∂_ª¨med_cbs
.
gpu_√⁄
.
Ælow_öãæa˚
 = 2;

128 
∂_ª¨med_cbs
.
gpu_√⁄
.
íh™˚mít_íabÀ
 =

129 
∂_ª¨med_cbs
.
gpu_√⁄
.
íh™˚mít_no_maö
 = 0;

130 
∂_ª¨med_cbs
.
gpu_≥›s
.
iU£Dôhî
 = 0;

131 
∂_ª¨med_cbs
.
gpu_≥›s
.
dwA˘Fixes
 = 1<<7;

132 
∂_ª¨med_cbs
.
gpu_u«i
.
abe_hack
 =

133 
∂_ª¨med_cbs
.
gpu_u«i
.
no_light
 =

134 
∂_ª¨med_cbs
.
gpu_u«i
.
no_bÀnd
 = 0;

135 
	`mem£t
(&
∂_ª¨med_cbs
.
gpu_≥›sgl
, 0, (pl_rearmed_cbs.gpu_peopsgl));

136 
∂_ª¨med_cbs
.
gpu_≥›sgl
.
iVRamSize
 = 64;

137 
∂_ª¨med_cbs
.
gpu_≥›sgl
.
iTexG¨bageCﬁÀ˘i⁄
 = 1;

139 
•u_c⁄fig
.
iU£Revîb
 = 1;

140 
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
 = 1;

141 
•u_c⁄fig
.
iXAPôch
 = 0;

142 
•u_c⁄fig
.
iVﬁume
 = 768;

143 
•u_c⁄fig
.
iTempo
 = 0;

144 
•u_c⁄fig
.
iU£Thªad
 = 1;

145 #i‡
	`deföed
(
__¨m__
Ë&& !deföed(
__ARM_ARCH_7A__
)

146 
•u_c⁄fig
.
iU£Revîb
 = 0;

147 
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
 = 0;

148 
•u_c⁄fig
.
iTempo
 = 1;

150 
√w_dy«ªc_hacks
 = 0;

151 
cy˛e_mu…ùlõr
 = 200;

153 
ö_ty≥1
 = 
PSE_PAD_TYPE_STANDARD
;

154 
ö_ty≥2
 = 
PSE_PAD_TYPE_STANDARD
;

155 
	}
}

157 
	$do_emu_a˘i⁄
()

159 
ªt
;

161 
emu_a˘i⁄_ﬁd
 = 
emu_a˘i⁄
;

163 
emu_a˘i⁄
) {

164 
SACTION_LOAD_STATE
:

165 
ªt
 = 
	`emu_lﬂd_°©e
(
°©e_¶Ÿ
);

166 
	`¢¥ötf
(
hud_msg
, (hud_msg), 
ªt
 == 0 ? "LOADED" : "FAIL!");

168 
SACTION_SAVE_STATE
:

169 
ªt
 = 
	`emu_ßve_°©e
(
°©e_¶Ÿ
);

170 
	`¢¥ötf
(
hud_msg
, (hud_msg), 
ªt
 == 0 ? "SAVED" : "FAIL!");

172 #i‚de‡
NO_FRONTEND


173 
SACTION_ENTER_MENU
:

174 
	`toggÀ_Á°_f‹w¨d
(1);

175 
	`míu_lo›
();

177 
SACTION_NEXT_SSLOT
:

178 
°©e_¶Ÿ
++;

179 i‡(
°©e_¶Ÿ
 > 9)

180 
°©e_¶Ÿ
 = 0;

181 
do_°©e_¶Ÿ
;

182 
SACTION_PREV_SSLOT
:

183 
°©e_¶Ÿ
--;

184 i‡(
°©e_¶Ÿ
 < 0)

185 
°©e_¶Ÿ
 = 9;

186 
do_°©e_¶Ÿ
:

187 
	`¢¥ötf
(
hud_msg
, (hud_msg), "STATE SLOT %d [%s]", 
°©e_¶Ÿ
,

188 
	`emu_check_°©e
(
°©e_¶Ÿ
) == 0 ? "USED" : "FREE");

189 
hud_√w_msg
 = 3;

190 
	`SysPrötf
("* %s\n", 
hud_msg
);

192 
SACTION_TOGGLE_FSKIP
:

193 
∂_ª¨med_cbs
.
fskù_advi˚
 = 0;

194 
∂_ª¨med_cbs
.
‰ameskù
++;

195 i‡(
∂_ª¨med_cbs
.
‰ameskù
 > 1)

196 
∂_ª¨med_cbs
.
‰ameskù
 = -1;

197 
	`¢¥ötf
(
hud_msg
, (hud_msg), "FRAMESKIP: %s",

198 
∂_ª¨med_cbs
.
‰ameskù
 == -1 ? "AUTO" :

199 
∂_ª¨med_cbs
.
‰ameskù
 == 0 ? "OFF" : "1" );

200 
	`∂ugö_ˇŒ_ª¨med_cbs
();

202 
SACTION_SWITCH_DISPMODE
:

203 
	`∂_swôch_di•mode
();

204 
	`∂ugö_ˇŒ_ª¨med_cbs
();

205 i‡(
GPU_›í
 !
NULL
 && 
GPU_˛o£
 != NULL) {

206 
	`GPU_˛o£
();

207 
	`GPU_›í
(&
gpuDi•
, "PCSX", 
NULL
);

210 
SACTION_FAST_FORWARD
:

211 
	`toggÀ_Á°_f‹w¨d
(0);

212 
	`∂ugö_ˇŒ_ª¨med_cbs
();

214 
SACTION_TOGGLE_FPS
:

215 i‡((
g_›ts
 & (
OPT_SHOWFPS
|
OPT_SHOWCPU
))

216 =(
OPT_SHOWFPS
|
OPT_SHOWCPU
))

217 
g_›ts
 &~(
OPT_SHOWFPS
|
OPT_SHOWCPU
);

218 i‡(
g_›ts
 & 
OPT_SHOWFPS
)

219 
g_›ts
 |
OPT_SHOWCPU
;

221 
g_›ts
 |
OPT_SHOWFPS
;

223 
SACTION_TOGGLE_FULLSCREEN
:

224 
∂©_èrgë
.
vout_fuŒs¸ìn
 = !plat_target.vout_fullscreen;

225 i‡(
GPU_›í
 !
NULL
 && 
GPU_˛o£
 != NULL) {

226 
	`GPU_˛o£
();

227 
	`GPU_›í
(&
gpuDi•
, "PCSX", 
NULL
);

230 
SACTION_SCREENSHOT
:

232 
buf
[
MAXPATHLEN
];

233 *
s¸buf
;

234 
w
, 
h
, 
bµ
;

235 
time_t
 
t
 = 
	`time
(
NULL
);

236 
tm
 *
tb
 = 
	`loˇ…ime
(&
t
);

237 
ti
 = 
tb
->
tm_yday
 * 1000000 +Åb->
tm_hour
 * 10000 +

238 
tb
->
tm_mö
 * 100 +Åb->
tm_£c
;

240 
s¸buf
 = 
	`∂_¥ï¨e_s¸ìnshŸ
(&
w
, &
h
, &
bµ
);

241 
	`gë_gameid_fûíame
(
buf
, (buf),

242 "s¸ìnshŸs/%.32s-%.9s.%d.≤g", 
ti
);

243 
ªt
 = -1;

244 i‡(
s¸buf
 !0 && 
bµ
 == 16)

245 
ªt
 = 
	`wrôïng
(
buf
, 
s¸buf
, 
w
, 
h
);

246 i‡(
ªt
 == 0)

247 
	`¢¥ötf
(
hud_msg
, (hud_msg), "SCREENSHOT TAKEN");

250 
SACTION_VOLUME_UP
:

251 
SACTION_VOLUME_DOWN
:

253 
vﬁume
;

254 
	`∂©_èrgë_°ï_vﬁume
(&
vﬁume
,

255 
emu_a˘i⁄
 =
SACTION_VOLUME_UP
 ? 1 : -1);

258 
SACTION_MINIMIZE
:

259 i‡(
GPU_˛o£
 !
NULL
)

260 
	`GPU_˛o£
();

262 
	`∂©_möimize
();

264 i‡(
GPU_›í
 !
NULL
) {

265 
ªt
 = 
	`GPU_›í
(&
gpuDi•
, "PCSX", 
NULL
);

266 i‡(
ªt
)

267 
	`SysMesßge
("GPU_›íÑëu∫ed %d", 
ªt
);

275 
hud_√w_msg
 = 3;

276 
	}
}

278 
	$basic_lˇ£
(
c
)

280 i‡('A' <
c
 && c <= 'Z')

281  
c
 - 'A' + 'a';

282  
c
;

283 
	}
}

285 
	$cdidcmp
(c⁄° *
id1
, c⁄° *
id2
)

287 *
id1
 !0 && *
id2
 != 0) {

288 i‡(*
id1
 == '_') { id1++; ; }

289 i‡(*
id2
 == '_') { id2++; ; }

290 i‡(
	`basic_lˇ£
(*
id1
Ë!basic_lˇ£(*
id2
))

292 
id1
++;

293 
id2
++;

296  *
id1
 - *
id2
;

297 
	}
}

299 
	$∑r£_cwchót
()

301 
löe
[256], 
buf
[64], 
«me
[64], *
p
;

302 
√wchót
 = 1;

303 
u32
 
a
, 
v
;

304 
FILE
 *
f
;

306 
f
 = 
	`f›í
("cheatpops.db", "r");

307 i‡(
f
 =
NULL
)

311 
	`fgës
(
löe
, ÷öe), 
f
)) {

312 i‡(
	`ssˇnf
(
löe
, "_S %63s", 
buf
) != 1)

314 i‡(
	`cdidcmp
(
buf
, 
CdromId
) == 0)

318 i‡(
	`„of
(
f
))

319 
out
;

321 
	`SysPrötf
("cwchóà£˘i⁄ found f‹ %s\n", 
CdromId
);

322 
	`fgës
(
löe
, ÷öe), 
f
))

324 
p
 = 
löe
 + 
	`°æí
(line);

325 
p
--;Ö >
löe
 && (*p == '\r' || *p == '\n' || *p == ' ');Ö--)

326 *
p
 = 0;

327 i‡(*
p
 == 0 || *p == '#' || *p == ';')

330 i‡(
	`°∫cmp
(
löe
, "_S", 2) == 0)

332 i‡(
	`°∫cmp
(
löe
, "_G", 2) == 0) {

333 
	`SysPrötf
(" cwchóàgamê«me: '%s'\n", 
löe
 + 3);

336 i‡(
	`°∫cmp
(
löe
, "_C0", 3) == 0) {

337 i‡(!
√wchót
 && 
Chóts
[
NumChóts
 - 1].
n
 == 0) {

338 
	`SysPrötf
("chóà'%s' faûedÅÿ∑r£\n", 
«me
);

339 
	`‰ì
(
Chóts
[
NumChóts
 - 1].
Des¸
);

340 
NumChóts
--;

342 
	`¢¥ötf
(
«me
, “ame), "%s", 
löe
 + 4);

343 
√wchót
 = 1;

346 i‡(
	`ssˇnf
(
löe
, "_L %x %x", &
a
, &
v
) != 2) {

347 
	`SysPrötf
("löêÁûedÅÿ∑r£: '%s'\n", 
löe
);

351 i‡(
√wchót
) {

352 i‡(
NumChóts
 >
NumChótsAŒoˇãd
) {

353 
NumChótsAŒoˇãd
 += 16;

354 
Chóts
 = 
	`ªÆloc
(Chóts, (
Chót
) *

355 
NumChótsAŒoˇãd
);

356 i‡(
Chóts
 =
NULL
)

359 
Chóts
[
NumChóts
].
Des¸
 = 
	`°rdup
(
«me
);

360 
Chóts
[
NumChóts
].
E«bÀd
 = 0;

361 
Chóts
[
NumChóts
].
WasE«bÀd
 = 0;

362 
Chóts
[
NumChóts
].
Fú°
 = 
NumCodes
;

363 
Chóts
[
NumChóts
].
n
 = 0;

364 
NumChóts
++;

365 
√wchót
 = 0;

368 i‡(
NumCodes
 >
NumCodesAŒoˇãd
) {

369 
NumCodesAŒoˇãd
 += 16;

370 
ChótCodes
 = 
	`ªÆloc
(ChótCodes, (
ChótCode
) *

371 
NumCodesAŒoˇãd
);

372 i‡(
ChótCodes
 =
NULL
)

375 
ChótCodes
[
NumCodes
].
Addr
 = 
a
;

376 
ChótCodes
[
NumCodes
].
VÆ
 = 
v
;

377 
NumCodes
++;

378 
Chóts
[
NumChóts
 - 1].
n
++;

381 
out
:

382 
	`f˛o£
(
f
);

383 
	}
}

385 
	$emu_⁄_√w_cd
(
show_hud_msg
)

387 
	`CÀ¨AŒChóts
();

388 
	`∑r£_cwchót
();

390 i‡(
C⁄fig
.
HLE
) {

391 
	`SysPrötf
("note:Ñunning with HLE BIOS,Éxpect compatibilityÖroblems\n");

392 
	`SysPrötf
("----------------------------------------------------------\n");

395 i‡(
show_hud_msg
) {

396 
	`¢¥ötf
(
hud_msg
, (hud_msg), 
BOOT_MSG
);

397 
hud_√w_msg
 = 3;

399 
	}
}

401 
	$emu_c‹e_¥eöô
()

405 
	`°r˝y
(
cfgfûe_ba£«me
, "pcsx.cfg");

407 #ifde‡
IOS


408 
emuLog
 = 
	`f›í
("/User/Documents/pcsxr.log", "w");

409 i‡(
emuLog
 =
NULL
)

410 
emuLog
 = 
	`f›í
("pcsxr.log", "w");

411 i‡(
emuLog
 =
NULL
)

413 
emuLog
 = 
°dout
;

415 
	`SëIsoFûe
(
NULL
);

417 
	`mem£t
(&
C⁄fig
, 0, (Config));

419 
	`£t_deÁu…_∑ths
();

420 
	`emu_£t_deÁu…_c⁄fig
();

421 
	`°r˝y
(
C⁄fig
.
Bios
, "HLE");

424 
	}
}

426 
	$emu_c‹e_öô
()

428 
	`SysPrötf
("Sèπög PCSX-ReARMed " 
REV
 "\n");

430 #i‚de‡
NO_FRONTEND


431 
	`check_¥ofûe
();

432 
	`check_memˇrds
();

435 i‡(
	`EmuInô
() == -1) {

436 
	`SysPrötf
("PSXÉmulator couldn't be initialized.\n");

440 
	`LﬂdMcds
(
C⁄fig
.
Mcd1
, C⁄fig.
Mcd2
);

442 i‡(
C⁄fig
.
Debug
) {

443 
	`SèπDebuggî
();

447 
	}
}

449 
	$emu_c‹e_ask_exô
()

451 
°›
 = 1;

452 
g_emu_w™t_quô
 = 1;

453 
	}
}

455 #i‚de‡
NO_FRONTEND


457 
	~<sys/°©.h
>

458 
	~<sys/ty≥s.h
>

460 
	$¸óã_¥ofûe_dú
(c⁄° *
dúe˘‹y
) {

461 
∑th
[
MAXPATHLEN
];

463 
	`MAKE_PATH
(
∑th
, 
dúe˘‹y
, 
NULL
);

464 
	`mkdú
(
∑th
, 
S_IRWXU
 | 
S_IRWXG
);

465 
	}
}

467 
	$check_¥ofûe
() {

469 
	`¸óã_¥ofûe_dú
(
PCSX_DOT_DIR
);

471 
	`¸óã_¥ofûe_dú
(
BIOS_DIR
);

472 
	`¸óã_¥ofûe_dú
(
MEMCARD_DIR
);

473 
	`¸óã_¥ofûe_dú
(
STATES_DIR
);

474 
	`¸óã_¥ofûe_dú
(
PLUGINS_DIR
);

475 
	`¸óã_¥ofûe_dú
(
PLUGINS_CFG_DIR
);

476 
	`¸óã_¥ofûe_dú
(
CHEATS_DIR
);

477 
	`¸óã_¥ofûe_dú
(
PATCHES_DIR
);

478 
	`¸óã_¥ofûe_dú
(
PCSX_DOT_DIR
 "cfg");

479 
	`¸óã_¥ofûe_dú
("/screenshots/");

480 
	}
}

482 
	$check_memˇrds
()

484 
buf
[
MAXPATHLEN
];

485 
FILE
 *
f
;

486 
i
;

488 
i
 = 1; i <= 9; i++) {

489 
	`¢¥ötf
(
buf
, (buf), ".%sˇrd%d.mcd", 
MEMCARD_DIR
, 
i
);

491 
f
 = 
	`f›í
(
buf
, "rb");

492 i‡(
f
 =
NULL
) {

493 
	`SysPrötf
("Cª©ög memˇrd: %s\n", 
buf
);

494 
	`Cª©eMcd
(
buf
);

497 
	`f˛o£
(
f
);

499 
	}
}

501 
	$maö
(
¨gc
, *
¨gv
[])

503 
fûe
[
MAXPATHLEN
] = "";

504 
∑th
[
MAXPATHLEN
];

505 c⁄° *
cdfûe
 = 
NULL
;

506 c⁄° *
lﬂd°_f
 = 
NULL
;

507 
psxout
 = 0;

508 
lﬂd°
 = 0;

509 
i
;

511 
	`emu_c‹e_¥eöô
();

514 
i
 = 1; i < 
¨gc
; i++) {

515 i‡(!
	`°rcmp
(
¨gv
[
i
], "-psxout")Ë
psxout
 = 1;

516 i‡(!
	`°rcmp
(
¨gv
[
i
], "-lﬂd")Ë
lﬂd°
 = 
	`©ﬁ
(argv[++i]);

517 i‡(!
	`°rcmp
(
¨gv
[
i
], "-cfg")) {

518 i‡(
i
+1 >
¨gc
) ;

519 
	`°∫˝y
(
cfgfûe_ba£«me
, 
¨gv
[++
i
], 
MAXPATHLEN
-100);

520 
	`SysPrötf
("Usög c⁄fig fûê%s.\n", 
cfgfûe_ba£«me
);

522 i‡(!
	`°rcmp
(
¨gv
[
i
], "-cdfile")) {

523 
isofûíame
[
MAXPATHLEN
];

525 i‡(
i
+1 >
¨gc
) ;

526 
	`°∫˝y
(
isofûíame
, 
¨gv
[++
i
], 
MAXPATHLEN
);

527 i‡(
isofûíame
[0] != '/') {

528 
	`gëcwd
(
∑th
, 
MAXPATHLEN
);

529 i‡(
	`°æí
(
∑th
Ë+ såÀn(
isofûíame
Ë+ 1 < 
MAXPATHLEN
) {

530 
	`°rˇt
(
∑th
, "/");

531 
	`°rˇt
(
∑th
, 
isofûíame
);

532 
	`°r˝y
(
isofûíame
, 
∑th
);

534 
isofûíame
[0] = 0;

537 
cdfûe
 = 
isofûíame
;

539 i‡(!
	`°rcmp
(
¨gv
[
i
], "-loadf")) {

540 i‡(
i
+1 >
¨gc
) ;

541 
lﬂd°_f
 = 
¨gv
[++
i
];

543 i‡(!
	`°rcmp
(
¨gv
[
i
], "-h") ||

544 !
	`°rcmp
(
¨gv
[
i
], "-help") ||

545 !
	`°rcmp
(
¨gv
[
i
], "--help")) {

546 
	`¥ötf
("PCSX-ReARMed " 
REV
 "\n");

547 
	`¥ötf
("%s\n", 
	`_
(

558 
	`°∫˝y
(
fûe
, 
¨gv
[
i
], 
MAXPATHLEN
);

559 i‡(
fûe
[0] != '/') {

560 
	`gëcwd
(
∑th
, 
MAXPATHLEN
);

561 i‡(
	`°æí
(
∑th
Ë+ såÀn(
fûe
Ë+ 1 < 
MAXPATHLEN
) {

562 
	`°rˇt
(
∑th
, "/");

563 
	`°rˇt
(
∑th
, 
fûe
);

564 
	`°r˝y
(
fûe
, 
∑th
);

566 
fûe
[0] = 0;

571 i‡(
cdfûe
)

572 
	`£t_cd_image
(
cdfûe
);

577 
	`ö_öô
();

578 
	`∂_öô
();

579 
	`∂©_öô
();

580 
	`míu_öô
();

582 i‡(
	`emu_c‹e_öô
() != 0)

585 i‡(
psxout
)

586 
C⁄fig
.
PsxOut
 = 1;

588 i‡(
	`LﬂdPlugös
() == -1) {

591 
	`£t_deÁu…_∑ths
();

592 
	`¢¥ötf
(
∑th
, ’©h), "." 
PCSX_DOT_DIR
 "%s", 
cfgfûe_ba£«me
);

593 
	`ªmove
(
∑th
);

594 
	`SysMesßge
("FailedÜoadingÖlugins!");

597 
	`p˙t_hook_∂ugös
();

599 i‡(
	`O≥nPlugös
() == -1) {

602 
	`∂ugö_ˇŒ_ª¨med_cbs
();

604 
	`CheckCdrom
();

605 
	`SysRe£t
();

607 i‡(
fûe
[0] != '\0') {

608 i‡(
	`Lﬂd
(
fûe
) != -1)

609 
ªady_to_go
 = 1;

611 i‡(
cdfûe
) {

612 i‡(
	`LﬂdCdrom
() == -1) {

613 
	`Clo£Plugös
();

614 
	`SysPrötf
(
	`_
("CouldÇotÜoad CD-ROM!\n"));

617 
	`emu_⁄_√w_cd
(!
lﬂd°
);

618 
ªady_to_go
 = 1;

622 i‡(
lﬂd°_f
) {

623 
ªt
 = 
	`LﬂdSèã
(
lﬂd°_f
);

624 
	`SysPrötf
("%s state file: %s\n",

625 
ªt
 ? "ÁûedÅÿlﬂd" : "lﬂded", 
lﬂd°_f
);

626 
ªady_to_go
 |
ªt
 == 0;

629 i‡(
ªady_to_go
) {

630 
	`míu_¥ï¨e_emu
();

633 i‡(
lﬂd°
) {

634 
ªt
 = 
	`emu_lﬂd_°©e
(
lﬂd°
 - 1);

635 
	`SysPrötf
("%s state %d\n",

636 
ªt
 ? "ÁûedÅÿlﬂd" : "lﬂded", 
lﬂd°
);

640 
	`míu_lo›
();

642 
	`∂_°¨t_w©chdog
();

644 !
g_emu_w™t_quô
)

646 
°›
 = 0;

647 
emu_a˘i⁄
 = 
SACTION_NONE
;

649 
psxCpu
->
	`Execuã
();

650 i‡(
emu_a˘i⁄
 !
SACTION_NONE
)

651 
	`do_emu_a˘i⁄
();

654 
	`¥ötf
("Exit..\n");

655 
	`Clo£Plugös
();

656 
	`SysClo£
();

657 
	`míu_föish
();

658 
	`∂©_föish
();

661 
	}
}

663 
	$toggÀ_Á°_f‹w¨d
(
f‹˚_off
)

665 
Á°_f‹w¨d
;

666 
n‹mÆ_g_›ts
;

667 
n‹mÆ_‰ameskù
;

668 
n‹mÆ_íh™˚mít_íabÀ
;

670 i‡(
f‹˚_off
 && !
Á°_f‹w¨d
)

673 
Á°_f‹w¨d
 = !fast_forward;

674 i‡(
Á°_f‹w¨d
) {

675 
n‹mÆ_g_›ts
 = 
g_›ts
;

676 
n‹mÆ_‰ameskù
 = 
∂_ª¨med_cbs
.
‰ameskù
;

677 
n‹mÆ_íh™˚mít_íabÀ
 =

678 
∂_ª¨med_cbs
.
gpu_√⁄
.
íh™˚mít_íabÀ
;

680 
g_›ts
 |
OPT_NO_FRAMELIM
;

681 
∂_ª¨med_cbs
.
‰ameskù
 = 3;

682 
∂_ª¨med_cbs
.
gpu_√⁄
.
íh™˚mít_íabÀ
 = 0;

684 
g_›ts
 = 
n‹mÆ_g_›ts
;

685 
∂_ª¨med_cbs
.
‰ameskù
 = 
n‹mÆ_‰ameskù
;

686 
∂_ª¨med_cbs
.
gpu_√⁄
.
íh™˚mít_íabÀ
 =

687 
n‹mÆ_íh™˚mít_íabÀ
;

689 
	`∂_timög_¥ï¨e
(
C⁄fig
.
PsxTy≥
);

692 i‡(!
f‹˚_off
)

693 
	`¢¥ötf
(
hud_msg
, (hud_msg), "FAST FORWARD %s",

694 
Á°_f‹w¨d
 ? "ON" : "OFF");

695 
	}
}

697 
	$Sig«lExô
(
sig
) {

699 
	`∂©_föish
();

700 
	`exô
(1);

701 
	}
}

704 
	$SysRunGui
() {

705 
	`¥ötf
("SysRunGui\n");

706 
	}
}

708 
	$dummy_œ˚
()

710 
	}
}

712 
	$SysRe£t
() {

716 *
ªÆ_œ˚
 = 
GPU_upd©eLa˚
;

717 
GPU_upd©eLa˚
 = 
dummy_œ˚
;

718 
g_emu_ª£âög
 = 1;

721 
	`∂_timög_¥ï¨e
(
C⁄fig
.
PsxTy≥
);

723 
	`EmuRe£t
();

726 
	`CDR_°›
();

728 
GPU_upd©eLa˚
 = 
ªÆ_œ˚
;

729 
g_emu_ª£âög
 = 0;

730 
	}
}

732 
	$SysClo£
() {

733 
	`EmuShutdown
();

734 
	`Rñó£Plugös
();

736 
	`St›Debuggî
();

738 i‡(
emuLog
 !
NULL
 &&ÉmuLog !
°dout
 &&ÉmuLog !
°dîr
) {

739 
	`f˛o£
(
emuLog
);

740 
emuLog
 = 
NULL
;

742 
	}
}

744 
	$SysUpd©e
() {

745 
	}
}

747 
	$gë_°©e_fûíame
(*
buf
, 
size
, 
i
) {

748  
	`gë_gameid_fûíame
(
buf
, 
size
,

749 "." 
STATES_DIR
 "%.32s-%.9s.%3.3d", 
i
);

750 
	}
}

752 
	$emu_check_°©e
(
¶Ÿ
)

754 
‚ame
[
MAXPATHLEN
];

755 
ªt
;

757 
ªt
 = 
	`gë_°©e_fûíame
(
‚ame
, (‚ame), 
¶Ÿ
);

758 i‡(
ªt
 != 0)

759  
ªt
;

761  
	`CheckSèã
(
‚ame
);

762 
	}
}

764 
	$emu_ßve_°©e
(
¶Ÿ
)

766 
‚ame
[
MAXPATHLEN
];

767 
ªt
;

769 
ªt
 = 
	`gë_°©e_fûíame
(
‚ame
, (‚ame), 
¶Ÿ
);

770 i‡(
ªt
 != 0)

771  
ªt
;

773 
ªt
 = 
	`SaveSèã
(
‚ame
);

774 #i‡
	`deföed
(
__¨m__
Ë&& !deföed(
__ARM_ARCH_7A__
)

775 
	`sync
();

777 
	`SysPrötf
("* %s \"%s\" [%d]\n",

778 
ªt
 =0 ? "ßved" : "ÁûedÅÿßve", 
‚ame
, 
¶Ÿ
);

779  
ªt
;

780 
	}
}

782 
	$emu_lﬂd_°©e
(
¶Ÿ
)

784 
‚ame
[
MAXPATHLEN
];

785 
ªt
;

787 
hud_msg
[0] = 0;

789 
ªt
 = 
	`gë_°©e_fûíame
(
‚ame
, (‚ame), 
¶Ÿ
);

790 i‡(
ªt
 != 0)

791  
ªt
;

793  
	`LﬂdSèã
(
‚ame
);

794 
	}
}

796 #i‚de‡
ANDROID


798 
	$SysPrötf
(c⁄° *
fmt
, ...) {

799 
va_li°
 
li°
;

801 
	`va_°¨t
(
li°
, 
fmt
);

802 
	`vÂrötf
(
emuLog
, 
fmt
, 
li°
);

803 
	`va_íd
(
li°
);

804 
	`fÊush
(
emuLog
);

805 
	}
}

809 
	~<™droid/log.h
>

811 
	$SysPrötf
(c⁄° *
fmt
, ...) {

812 
va_li°
 
li°
;

814 
	`va_°¨t
(
li°
, 
fmt
);

815 
	`__™droid_log_v¥öt
(
ANDROID_LOG_INFO
, "PCSX", 
fmt
, 
li°
);

816 
	`va_íd
(
li°
);

817 
	}
}

821 
	$SysMesßge
(c⁄° *
fmt
, ...) {

822 
va_li°
 
li°
;

823 
msg
[512];

824 
ªt
;

826 
	`va_°¨t
(
li°
, 
fmt
);

827 
ªt
 = 
	`v¢¥ötf
(
msg
, (msg), 
fmt
, 
li°
);

828 
	`va_íd
(
li°
);

830 i‡(
ªt
 < (
msg
) && msg[ret - 1] == '\n')

831 
msg
[
ªt
 - 1] = 0;

833 
	`SysPrötf
("%s\n", 
msg
);

834 
	}
}

836 
	#PARSEPATH
(
d°
, 
§c
) \

837 
±r
 = 
§c
 + 
	`°æí
(src); \

838 *
±r
 !'\\' &&Öå !
§c
)Ötr--; \

839 i‡(
±r
 !
§c
) { \

840 
	`°r˝y
(
d°
, 
±r
+1); \

841 }

	)

843 
	$_O≥nPlugös
() {

844 
ªt
;

846 #i‚de‡
NO_FRONTEND


847 
	`sig«l
(
SIGINT
, 
Sig«lExô
);

848 
	`sig«l
(
SIGPIPE
, 
Sig«lExô
);

851 
	`GPU_˛órDy«ªc
(
˛órDy«ªc
);

853 
ªt
 = 
	`CDR_›í
();

854 i‡(
ªt
 < 0Ë{ 
	`SysMesßge
(
	`_
("Error opening CD-ROMÖlugin!"));  -1; }

855 
ªt
 = 
	`SPU_›í
();

856 i‡(
ªt
 < 0Ë{ 
	`SysMesßge
(
	`_
("Error opening SPUÖlugin!"));  -1; }

857 
	`SPU_ªgi°îCÆlback
(
SPUúq
);

858 
	`SPU_ªgi°îScheduÀCb
(
SPUscheduÀ
);

862 
ªt
 = 
	`PAD1_›í
(&
gpuDi•
);

863 i‡(
ªt
 < 0Ë{ 
	`SysMesßge
(
	`_
("Error opening Controller 1Ölugin!"));  -1; }

864 
ªt
 = 
	`PAD2_›í
(&
gpuDi•
);

865 i‡(
ªt
 < 0Ë{ 
	`SysMesßge
(
	`_
("Error opening Controller 2Ölugin!"));  -1; }

867 i‡(
C⁄fig
.
U£Në
 && !
NëO≥√d
) {

868 
√tInfo
 
öfo
;

869 
∑th
[
MAXPATHLEN
];

870 
dŸdú
[
MAXPATHLEN
];

872 
	`MAKE_PATH
(
dŸdú
, "/.pcsx/∂ugös/", 
NULL
);

874 
	`°r˝y
(
öfo
.
EmuName
, "PCSX");

875 
	`°∫˝y
(
öfo
.
CdromID
, 
CdromId
, 9);

876 
	`°∫˝y
(
öfo
.
CdromLabñ
, CdromLabel, 9);

877 
öfo
.
psxMem
 = 
psxM
;

878 
öfo
.
GPU_showS¸ìnPic
 = GPU_showScreenPic;

879 
öfo
.
GPU_di•œyText
 = GPU_displayText;

880 
öfo
.
GPU_showS¸ìnPic
 = GPU_showScreenPic;

881 
öfo
.
PAD_£tSísôive
 = 
PAD1_£tSísôive
;

882 
	`•rötf
(
∑th
, "%s%s", 
C⁄fig
.
BiosDú
, C⁄fig.
Bios
);

883 
	`°r˝y
(
öfo
.
BIOS∑th
, 
∑th
);

884 
	`°r˝y
(
öfo
.
MCD1∑th
, 
C⁄fig
.
Mcd1
);

885 
	`°r˝y
(
öfo
.
MCD2∑th
, 
C⁄fig
.
Mcd2
);

886 
	`•rötf
(
∑th
, "%s%s", 
dŸdú
, 
C⁄fig
.
Gpu
);

887 
	`°r˝y
(
öfo
.
GPU∑th
, 
∑th
);

888 
	`•rötf
(
∑th
, "%s%s", 
dŸdú
, 
C⁄fig
.
Spu
);

889 
	`°r˝y
(
öfo
.
SPU∑th
, 
∑th
);

890 
	`•rötf
(
∑th
, "%s%s", 
dŸdú
, 
C⁄fig
.
Cdr
);

891 
	`°r˝y
(
öfo
.
CDR∑th
, 
∑th
);

892 
	`NET_£tInfo
(&
öfo
);

894 
ªt
 = 
	`NET_›í
(&
gpuDi•
);

895 i‡(
ªt
 < 0) {

896 i‡(
ªt
 == -2) {

899 *
±r
;

901 
	`PARSEPATH
(
C⁄fig
.
Bios
, 
öfo
.
BIOS∑th
);

902 
	`PARSEPATH
(
C⁄fig
.
Gpu
, 
öfo
.
GPU∑th
);

903 
	`PARSEPATH
(
C⁄fig
.
Spu
, 
öfo
.
SPU∑th
);

904 
	`PARSEPATH
(
C⁄fig
.
Cdr
, 
öfo
.
CDR∑th
);

906 
	`°r˝y
(
C⁄fig
.
Mcd1
, 
öfo
.
MCD1∑th
);

907 
	`°r˝y
(
C⁄fig
.
Mcd2
, 
öfo
.
MCD2∑th
);

910 
C⁄fig
.
U£Në
 = 
FALSE
;

913 i‡(
	`NET_quîyPœyî
() == 1) {

914 i‡(
	`SídPcsxInfo
(Ë=-1Ë
C⁄fig
.
U£Në
 = 
FALSE
;

916 i‡(
	`RecvPcsxInfo
(Ë=-1Ë
C⁄fig
.
U£Në
 = 
FALSE
;

919 
NëO≥√d
 = 
TRUE
;

920 } i‡(
C⁄fig
.
U£Në
) {

921 
	`NET_ªsume
();

925 
	}
}

927 
	$O≥nPlugös
() {

928 
ªt
;

930 (
ªt
 = 
	`_O≥nPlugös
()) == -2) {

931 
	`Rñó£Plugös
();

932 
	`LﬂdMcds
(
C⁄fig
.
Mcd1
, C⁄fig.
Mcd2
);

933 i‡(
	`LﬂdPlugös
() == -1)  -1;

935  
ªt
;

936 
	}
}

938 
	$Clo£Plugös
() {

939 
ªt
;

941 #i‚de‡
NO_FRONTEND


942 
	`sig«l
(
SIGINT
, 
SIG_DFL
);

943 
	`sig«l
(
SIGPIPE
, 
SIG_DFL
);

946 
ªt
 = 
	`CDR_˛o£
();

947 i‡(
ªt
 < 0Ë{ 
	`SysMesßge
(
	`_
("Error closing CD-ROMÖlugin!")); ; }

948 
ªt
 = 
	`SPU_˛o£
();

949 i‡(
ªt
 < 0Ë{ 
	`SysMesßge
(
	`_
("Error closing SPUÖlugin!")); ; }

950 
ªt
 = 
	`PAD1_˛o£
();

951 i‡(
ªt
 < 0Ë{ 
	`SysMesßge
(
	`_
("Error closing Controller 1 Plugin!")); ; }

952 
ªt
 = 
	`PAD2_˛o£
();

953 i‡(
ªt
 < 0Ë{ 
	`SysMesßge
(
	`_
("Error closing Controller 2Ölugin!")); ; }

958 i‡(
C⁄fig
.
U£Në
) {

959 
	`NET_∑u£
();

961 
	}
}

964 c⁄° *
	gbuûtö_∂ugös
[] = {

969 c⁄° 
	gbuûtö_∂ugö_ids
[] = {

970 
PLUGIN_GPU
, 
PLUGIN_SPU
, 
PLUGIN_CDR
, 
PLUGIN_PAD
,

971 
PLUGIN_CDRCIMG
,

974 *
	$SysLﬂdLibøry
(c⁄° *
lib
) {

975 c⁄° *
tmp
 = 
	`°ºchr
(
lib
, '/');

976 *
ªt
 = 
NULL
;

977 
i
;

979 
	`SysPrötf
("∂ugö: %s\n", 
lib
);

981 i‡(
tmp
 !
NULL
) {

982 
tmp
++;

983 
i
 = 0; i < 
	`ARRAY_SIZE
(
buûtö_∂ugös
); i++)

984 i‡(
	`°rcmp
(
tmp
, 
buûtö_∂ugös
[
i
]) == 0)

985  (*)()(
PLUGIN_DL_BASE
 + 
buûtö_∂ugö_ids
[
i
]);

988 #i‚de‡
_WIN32


989 
ªt
 = 
	`dl›í
(
lib
, 
RTLD_NOW
);

990 i‡(
ªt
 =
NULL
)

991 
	`SysMesßge
("dl›í: %s", 
	`dÀº‹
());

996  
ªt
;

997 
	}
}

999 *
	$SysLﬂdSym
(*
lib
, c⁄° *
sym
) {

1000 
∂ugid
 = ()()
lib
;

1002 i‡(
PLUGIN_DL_BASE
 <
∂ugid
 &&Ölugid < PLUGIN_DL_BASE + 
	`ARRAY_SIZE
(
buûtö_∂ugös
))

1003  
	`∂ugö_lök
(
∂ugid
 - 
PLUGIN_DL_BASE
, 
sym
);

1005 #i‚de‡
_WIN32


1006  
	`dlsym
(
lib
, 
sym
);

1008  
NULL
;

1010 
	}
}

1012 c⁄° *
	$SysLibEº‹
() {

1013 #i‚de‡
_WIN32


1014  
	`dÀº‹
();

1018 
	}
}

1020 
	$SysClo£Libøry
(*
lib
) {

1021 
∂ugid
 = ()()
lib
;

1023 i‡(
PLUGIN_DL_BASE
 <
∂ugid
 &&Ölugid < PLUGIN_DL_BASE + 
	`ARRAY_SIZE
(
buûtö_∂ugös
))

1026 #i‚de‡
_WIN32


1027 
	`dl˛o£
(
lib
);

1029 
	}
}

	@frontend/main.h

19 #i‚de‡
__FRONTEND_MAIN_H__


20 
	#__FRONTEND_MAIN_H__


	)

22 
	~"c⁄fig.h
"

24 
	#DEFAULT_MEM_CARD_1
 "/.pcsx/memˇrds/ˇrd1.mcd"

	)

25 
	#DEFAULT_MEM_CARD_2
 "/.pcsx/memˇrds/ˇrd2.mcd"

	)

26 
	#MEMCARD_DIR
 "/.pcsx/memˇrds/"

	)

27 
	#PLUGINS_DIR
 "/.pcsx/∂ugös/"

	)

28 
	#PLUGINS_CFG_DIR
 "/.pcsx/∂ugös/cfg/"

	)

29 
	#PCSX_DOT_DIR
 "/.pcsx/"

	)

30 
	#STATES_DIR
 "/.pcsx/s°©es/"

	)

31 
	#CHEATS_DIR
 "/.pcsx/chóts/"

	)

32 
	#PATCHES_DIR
 "/.pcsx/∑tches/"

	)

33 
	#BIOS_DIR
 "/bios/"

	)

35 
cfgfûe_ba£«me
[
MAXPATHLEN
];

37 
°©e_¶Ÿ
;

41 
emu_c‹e_¥eöô
();

42 
emu_c‹e_öô
();

44 
emu_c‹e_ask_exô
();

46 
emu_£t_deÁu…_c⁄fig
();

47 
emu_⁄_√w_cd
(
show_hud_msg
);

49 
gë_°©e_fûíame
(*
buf
, 
size
, 
i
);

50 
emu_check_°©e
(
¶Ÿ
);

51 
emu_ßve_°©e
(
¶Ÿ
);

52 
emu_lﬂd_°©e
(
¶Ÿ
);

54 
£t_cd_image
(c⁄° *
‚ame
);

56 
gpuDi•
;

57 
ªady_to_go
, 
g_emu_w™t_quô
, 
g_emu_ª£âög
;

59 
hud_msg
[64];

60 
hud_√w_msg
;

62 
	esched_a˘i⁄
 {

63 
	mSACTION_NONE
,

64 
	mSACTION_ENTER_MENU
,

65 
	mSACTION_LOAD_STATE
,

66 
	mSACTION_SAVE_STATE
,

67 
	mSACTION_NEXT_SSLOT
,

68 
	mSACTION_PREV_SSLOT
,

69 
	mSACTION_TOGGLE_FSKIP
,

70 
	mSACTION_SWITCH_DISPMODE
,

71 
	mSACTION_FAST_FORWARD
,

72 
	mSACTION_SCREENSHOT
,

73 
	mSACTION_VOLUME_UP
,

74 
	mSACTION_VOLUME_DOWN
,

75 
	mSACTION_MINIMIZE
,

76 
	mSACTION_TOGGLE_FPS
,

77 
	mSACTION_TOGGLE_FULLSCREEN
,

78 
	mSACTION_GUN_TRIGGER
 = 16,

79 
	mSACTION_GUN_A
,

80 
	mSACTION_GUN_B
,

81 
	mSACTION_GUN_TRIGGER2
,

84 
	#SACTION_GUN_MASK
 (0x0‡<< 
SACTION_GUN_TRIGGER
)

	)

86 
ölöe
 
	$emu_£t_a˘i⁄
(
sched_a˘i⁄
 
a˘i⁄_
)

88 
sched_a˘i⁄
 
emu_a˘i⁄
, 
emu_a˘i⁄_ﬁd
;

89 
°›
;

91 i‡(
a˘i⁄_
 =
SACTION_NONE
)

92 
emu_a˘i⁄_ﬁd
 = 0;

93 i‡(
a˘i⁄_
 !
emu_a˘i⁄_ﬁd
)

94 
°›
 = 1;

95 
emu_a˘i⁄
 = 
a˘i⁄_
;

96 
	}
}

	@frontend/menu.c

11 
	#_GNU_SOURCE
 1

	)

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 
	~<î∫o.h
>

15 
	~<dlf˙.h
>

16 
	~<zlib.h
>

17 
	~<sys/ty≥s.h
>

18 
	~<sys/°©.h
>

19 
	~<uni°d.h
>

20 
	~<dúít.h
>

22 
	~"maö.h
"

23 
	~"míu.h
"

24 
	~"c⁄fig.h
"

25 
	~"∂ugö.h
"

26 
	~"∂ugö_lib.h
"

27 
	~"∂©.h
"

28 
	~"p˙t.h
"

29 
	~"c•a˚.h
"

30 
	~"libpico„/∂©.h
"

31 
	~"libpico„/öput.h
"

32 
	~"libpico„/löux/ö_evdev.h
"

33 
	~"libpico„/∂©.h
"

34 
	~"../libpcsxc‹e/misc.h
"

35 
	~"../libpcsxc‹e/cdrom.h
"

36 
	~"../libpcsxc‹e/cdriso.h
"

37 
	~"../libpcsxc‹e/chót.h
"

38 
	~"../libpcsxc‹e/√w_dy«ªc/√w_dy«ªc.h
"

39 
	~"../∂ugös/dföput/exã∫Æs.h
"

40 
	~"../∂ugös/dfsound/•u_c⁄fig.h
"

41 
	~"p£mu_∂ugö_defs.h
"

42 
	~"ªvisi⁄.h
"

44 
	#REARMED_BIRTHDAY_TIME
 1293306830

	)

46 
	#¨øy_size
(
x
Ë((xË/ (x[0]))

	)

50 
	mMA_NONE
 = 1,

51 
	mMA_MAIN_RESUME_GAME
,

52 
	mMA_MAIN_SAVE_STATE
,

53 
	mMA_MAIN_LOAD_STATE
,

54 
	mMA_MAIN_RESET_GAME
,

55 
	mMA_MAIN_LOAD_ROM
,

56 
	mMA_MAIN_SWAP_CD
,

57 
	mMA_MAIN_SWAP_CD_MULTI
,

58 
	mMA_MAIN_RUN_BIOS
,

59 
	mMA_MAIN_RUN_EXE
,

60 
	mMA_MAIN_LOAD_CHEATS
,

61 
	mMA_MAIN_CHEATS
,

62 
	mMA_MAIN_CONTROLS
,

63 
	mMA_MAIN_CREDITS
,

64 
	mMA_MAIN_EXIT
,

65 
	mMA_CTRL_PLAYER1
,

66 
	mMA_CTRL_PLAYER2
,

67 
	mMA_CTRL_ANALOG
,

68 
	mMA_CTRL_EMU
,

69 
	mMA_CTRL_DEV_FIRST
,

70 
	mMA_CTRL_DEV_NEXT
,

71 
	mMA_CTRL_NUBS_BTNS
,

72 
	mMA_CTRL_DEADZONE
,

73 
	mMA_CTRL_VIBRATION
,

74 
	mMA_CTRL_DONE
,

75 
	mMA_OPT_SAVECFG
,

76 
	mMA_OPT_SAVECFG_GAME
,

77 
	mMA_OPT_CPU_CLOCKS
,

78 
	mMA_OPT_SPU_THREAD
,

79 
	mMA_OPT_DISP_OPTS
,

80 
	mMA_OPT_VARSCALER
,

81 
	mMA_OPT_VARSCALER_C
,

82 
	mMA_OPT_SCALER2
,

83 
	mMA_OPT_HWFILTER
,

84 
	mMA_OPT_SWFILTER
,

85 
	mMA_OPT_GAMMA
,

86 
	mMA_OPT_VOUT_MODE
,

87 
	mMA_OPT_SCANLINES
,

88 
	mMA_OPT_SCANLINE_LEVEL
,

89 } 
	tmíu_id
;

91 
	gœ°_vout_w
, 
	gœ°_vout_h
, 
	gœ°_vout_bµ
;

92 
	g˝u_˛ock
, 
	g˝u_˛ock_°
, 
	gvﬁume_boo°
, 
	g‰ameskù
;

93 
	gœ°_£À˘ed_‚ame
[
MAXPATHLEN
];

94 
	gc⁄fig_ßve_cou¡î
, 
	gªgi⁄
, 
	gö_ty≥_£l1
, 
	gö_ty≥_£l2
;

95 
	gpsx_˛ock
;

96 
	gmemˇrd1_£l
 = -1, 
	gmemˇrd2_£l
 = -1;

97 
g_auto°©ñd_›t
;

98 
	gg_›ts
, 
	gg_sˇÀr
, 
	gg_gamma
 = 100;

99 
	gsˇ∆öes
, 
	gsˇ∆öe_Àvñ
 = 20;

100 
	gso·_sˇlög
, 
	g™Æog_dódz⁄e
;

101 
	gso·_fûãr
;

103 #ifde‡
__ARM_ARCH_7A__


104 
	#DEFAULT_PSX_CLOCK
 57

	)

105 
	#DEFAULT_PSX_CLOCK_S
 "57"

	)

107 
	#DEFAULT_PSX_CLOCK
 50

	)

108 
	#DEFAULT_PSX_CLOCK_S
 "50"

	)

111 c⁄° *
	gbio£s
[24];

112 c⁄° *
	ggpu_∂ugös
[16];

113 c⁄° *
	g•u_∂ugös
[16];

114 c⁄° *
	gmemˇrds
[32];

115 
	gbios_£l
, 
	ggpu_∂ug£l
, 
	g•u_∂ug£l
;

117 #i‚de‡
UI_FEATURES_H


118 
	#MENU_BIOS_PATH
 "bios/"

	)

119 
	#MENU_SHOW_VARSCALER
 0

	)

120 
	#MENU_SHOW_VOUTMODE
 1

	)

121 
	#MENU_SHOW_SCALER2
 0

	)

122 
	#MENU_SHOW_NUBS_BTNS
 0

	)

123 
	#MENU_SHOW_VIBRATION
 0

	)

124 
	#MENU_SHOW_DEADZONE
 0

	)

125 
	#MENU_SHOW_MINIMIZE
 0

	)

126 
	#MENU_SHOW_FULLSCREEN
 1

	)

127 
	#MENU_SHOW_VOLUME
 0

	)

130 
	$mö
(
x
, 
y
Ë{  x < y ? x : y; 
	}
}

131 
	$max
(
x
, 
y
Ë{  x > y ? x : y; 
	}
}

133 
	$emu_make_∑th
(*
buff
, c⁄° *
íd
, 
size
)

135 
pos
, 
íd_Àn
;

137 
íd_Àn
 = 
	`°æí
(
íd
);

138 
pos
 = 
	`∂©_gë_roŸ_dú
(
buff
, 
size
);

139 
	`°∫˝y
(
buff
 + 
pos
, 
íd
, 
size
 -Öos);

140 
buff
[
size
 - 1] = 0;

141 i‡(
pos
 + 
íd_Àn
 > 
size
 - 1)

142 
	`¥ötf
("W¨nög:Ö©hÅrunˇãd: %s\n", 
buff
);

143 
	}
}

145 
	$emu_check_ßve_fûe
(
¶Ÿ
, *
time
)

147 
‚ame
[
MAXPATHLEN
];

148 
°©
 
°©us
;

149 
ªt
;

151 
ªt
 = 
	`emu_check_°©e
(
¶Ÿ
);

152 i‡(
ªt
 !0 || 
time
 =
NULL
)

153  
ªt
 == 0 ? 1 : 0;

155 
ªt
 = 
	`gë_°©e_fûíame
(
‚ame
, (‚ame), 
¶Ÿ
);

156 i‡(
ªt
 != 0)

159 
ªt
 = 
	`°©
(
‚ame
, &
°©us
);

160 i‡(
ªt
 != 0)

163 i‡(
°©us
.
°_mtime
 < 
REARMED_BIRTHDAY_TIME
)

166 *
time
 = 
°©us
.
°_mtime
;

169 
	}
}

171 
	$emu_ßve_lﬂd_game
(
lﬂd
, 
unu£d
)

173 
ªt
;

175 i‡(
lﬂd
) {

176 
ªt
 = 
	`emu_lﬂd_°©e
(
°©e_¶Ÿ
);

179 i‡(
C⁄fig
.
HLE
)

180 
bios_£l
 = 0;

181 i‡(
bios_£l
 =0 && 
bio£s
[1] !
NULL
)

183 
bios_£l
 = 1;

186 
ªt
 = 
	`emu_ßve_°©e
(
°©e_¶Ÿ
);

188  
ªt
;

189 
	}
}

191 
	$rm_«mñi°_íåy
(
dúít
 **
«mñi°
,

192 
cou¡
, c⁄° *
«me
)

194 
i
;

196 
i
 = 1; i < 
cou¡
; i++) {

197 i‡(
«mñi°
[
i
] =
NULL
 ||Çamñi°[i]->
d_ty≥
 =
DT_DIR
)

200 i‡(
	`°rcmp
(
«me
, 
«mñi°
[
i
]->
d_«me
) == 0) {

201 
	`‰ì
(
«mñi°
[
i
]);

202 
«mñi°
[
i
] = 
NULL
;

206 
	}
}

208 
	$›ti⁄Æ_cdimg_fûãr
(
dúít
 **
«mñi°
, 
cou¡
,

209 c⁄° *
ba£dú
)

211 c⁄° *
ext
, *
p
;

212 
buf
[256], 
buf2
[256];

213 
i
, 
d
, 
ªt
, 
good_cue
;

214 
°©64
 
°©f
;

215 
FILE
 *
f
;

217 i‡(
cou¡
 <= 1)

218  
cou¡
;

220 
i
 = 1; i < 
cou¡
; i++) {

221 i‡(
«mñi°
[
i
] =
NULL
 ||Çamñi°[i]->
d_ty≥
 =
DT_DIR
)

224 
ext
 = 
	`°ºchr
(
«mñi°
[
i
]->
d_«me
, '.');

225 i‡(
ext
 =
NULL
) {

227 
	`‰ì
(
«mñi°
[
i
]);

228 
«mñi°
[
i
] = 
NULL
;

231 
ext
++;

234 i‡(
	`°rˇ£cmp
(
ext
, "cue") == 0)

236 
	`¢¥ötf
(
buf
, (buf), "%s/%s", 
ba£dú
,

237 
«mñi°
[
i
]->
d_«me
);

239 
f
 = 
	`f›í
(
buf
, "r");

240 i‡(
f
 =
NULL
) {

241 
	`‰ì
(
«mñi°
[
i
]);

242 
«mñi°
[
i
] = 
NULL
;

246 
good_cue
 = 0;

247 
	`fgës
(
buf
, (buf), 
f
)) {

248 
ªt
 = 
	`ssˇnf
(
buf
, " FILE \"%256[^\"]\"", 
buf2
);

249 i‡(
ªt
 != 1)

250 
ªt
 = 
	`ssˇnf
(
buf
, " FILE %256s", 
buf2
);

251 i‡(
ªt
 != 1)

254 
p
 = 
	`°ºchr
(
buf2
, '/');

255 i‡(
p
 =
NULL
)

256 
p
 = 
	`°ºchr
(
buf2
, '\\');

257 i‡(
p
 !
NULL
)

258 
p
++;

260 
p
 = 
buf2
;

262 
	`¢¥ötf
(
buf
, (buf), "%s/%s", 
ba£dú
, 
p
);

263 
ªt
 = 
	`°©64
(
buf
, &
°©f
);

264 i‡(
ªt
 == 0) {

265 
	`rm_«mñi°_íåy
(
«mñi°
, 
cou¡
, 
p
);

266 
good_cue
 = 1;

269 
	`f˛o£
(
f
);

271 i‡(!
good_cue
) {

272 
	`‰ì
(
«mñi°
[
i
]);

273 
«mñi°
[
i
] = 
NULL
;

278 
p
 = 
	`°rˇ£°r
(
«mñi°
[
i
]->
d_«me
, "track");

279 i‡(
p
 !
NULL
) {

280 
ªt
 = 
	`°πoul
(
p
 + 5, 
NULL
, 10);

281 i‡(
ªt
 > 1) {

282 
	`‰ì
(
«mñi°
[
i
]);

283 
«mñi°
[
i
] = 
NULL
;

290 
i
 = 
d
 = 1; i < 
cou¡
; i++)

291 i‡(
«mñi°
[
i
] !
NULL
)

292 
«mñi°
[
d
++] =Çamñi°[
i
];

294  
d
;

295 
	}
}

298 
	$míu_sync_c⁄fig
()

300 
Ælow_abs_⁄ly_ﬁd
;

302 
C⁄fig
.
PsxAuto
 = 1;

303 i‡(
ªgi⁄
 > 0) {

304 
C⁄fig
.
PsxAuto
 = 0;

305 
C⁄fig
.
PsxTy≥
 = 
ªgi⁄
 - 1;

307 
cy˛e_mu…ùlõr
 = 10000 / 
psx_˛ock
;

309 
ö_ty≥_£l1
) {

310 1: 
ö_ty≥1
 = 
PSE_PAD_TYPE_ANALOGPAD
; ;

311 2: 
ö_ty≥1
 = 
PSE_PAD_TYPE_GUNCON
; ;

312 : 
ö_ty≥1
 = 
PSE_PAD_TYPE_STANDARD
;

314 
ö_ty≥_£l2
) {

315 1: 
ö_ty≥2
 = 
PSE_PAD_TYPE_ANALOGPAD
; ;

316 2: 
ö_ty≥2
 = 
PSE_PAD_TYPE_GUNCON
; ;

317 : 
ö_ty≥2
 = 
PSE_PAD_TYPE_STANDARD
;

319 i‡(
ö_evdev_Ælow_abs_⁄ly
 !
Ælow_abs_⁄ly_ﬁd
) {

320 
	`ö_¥obe
();

321 
Ælow_abs_⁄ly_ﬁd
 = 
ö_evdev_Ælow_abs_⁄ly
;

324 
•u_c⁄fig
.
iVﬁume
 = 768 + 128 * 
vﬁume_boo°
;

325 
∂_ª¨med_cbs
.
‰ameskù
 = frameskip - 1;

326 
	`∂_timög_¥ï¨e
(
C⁄fig
.
PsxTy≥
);

327 
	}
}

329 
	$míu_£t_defc⁄fig
()

331 
	`emu_£t_deÁu…_c⁄fig
();

333 
g_›ts
 = 0;

334 
g_sˇÀr
 = 
SCALE_4_3
;

335 
g_gamma
 = 100;

336 
vﬁume_boo°
 = 0;

337 
‰ameskù
 = 0;

338 
™Æog_dódz⁄e
 = 50;

339 
so·_sˇlög
 = 1;

340 
so·_fûãr
 = 0;

341 
sˇ∆öes
 = 0;

342 
sˇ∆öe_Àvñ
 = 20;

343 
∂©_èrgë
.
vout_fuŒs¸ìn
 = 0;

344 
psx_˛ock
 = 
DEFAULT_PSX_CLOCK
;

346 
ªgi⁄
 = 0;

347 
ö_ty≥_£l1
 = 
ö_ty≥_£l2
 = 0;

348 
ö_evdev_Ælow_abs_⁄ly
 = 0;

350 
	`míu_sync_c⁄fig
();

351 
	}
}

353 
	#CE_CONFIG_STR
(
vÆ
) \

354 { #vÆ, 0, 
C⁄fig
.
vÆ
 }

	)

356 
	#CE_CONFIG_VAL
(
vÆ
) \

357 { #vÆ, (
C⁄fig
.
vÆ
), &C⁄fig.vÆ }

	)

359 
	#CE_STR
(
vÆ
) \

360 { #vÆ, 0, 
vÆ
 }

	)

362 
	#CE_INTVAL
(
vÆ
) \

363 { #vÆ, (
vÆ
), &vÆ }

	)

365 
	#CE_INTVAL_N
(
«me
, 
vÆ
) \

366 { 
«me
, (
vÆ
), &vÆ }

	)

368 
	#CE_INTVAL_P
(
vÆ
) \

369 { #vÆ, (
∂_ª¨med_cbs
.
vÆ
), &∂_ª¨med_cbs.vÆ }

	)

372 
	#CE_CONFIG_STR_V
(
vÆ
, 
vî
) \

373 { #vÆ #vî, 0, 
C⁄fig
.
vÆ
 }

	)

375 
	#CE_INTVAL_V
(
vÆ
, 
vî
) \

376 { #vÆ #vî, (
vÆ
), &vÆ }

	)

378 
	#CE_INTVAL_PV
(
vÆ
, 
vî
) \

379 { #vÆ #vî, (
∂_ª¨med_cbs
.
vÆ
), &∂_ª¨med_cbs.vÆ }

	)

382 c⁄° *
	m«me
;

383 
size_t
 
	mÀn
;

384 *
	mvÆ
;

385 } 
	gc⁄fig_d©a
[] = {

386 
CE_CONFIG_STR
(
Bios
),

387 
CE_CONFIG_STR_V
(
Gpu
, 3),

388 
CE_CONFIG_STR
(
Spu
),

390 
CE_CONFIG_VAL
(
Xa
),

392 
CE_CONFIG_VAL
(
Mdec
),

393 
CE_CONFIG_VAL
(
Cdda
),

394 
CE_CONFIG_VAL
(
Debug
),

395 
CE_CONFIG_VAL
(
PsxOut
),

396 
CE_CONFIG_VAL
(
SpuIrq
),

397 
CE_CONFIG_VAL
(
RC¡Fix
),

398 
CE_CONFIG_VAL
(
VSyncWA
),

399 
CE_CONFIG_VAL
(
Cpu
),

400 
CE_INTVAL
(
ªgi⁄
),

401 
CE_INTVAL_V
(
g_sˇÀr
, 3),

402 
CE_INTVAL
(
g_gamma
),

403 
CE_INTVAL
(
g_œyî_x
),

404 
CE_INTVAL
(
g_œyî_y
),

405 
CE_INTVAL
(
g_œyî_w
),

406 
CE_INTVAL
(
g_œyî_h
),

407 
CE_INTVAL
(
so·_fûãr
),

408 
CE_INTVAL
(
sˇ∆öes
),

409 
CE_INTVAL
(
sˇ∆öe_Àvñ
),

410 
CE_INTVAL
(
∂©_èrgë
.
vout_mëhod
),

411 
CE_INTVAL
(
∂©_èrgë
.
hwfûãr
),

412 
CE_INTVAL
(
∂©_èrgë
.
vout_fuŒs¸ìn
),

413 
CE_INTVAL
(
°©e_¶Ÿ
),

414 
CE_INTVAL
(
˝u_˛ock
),

415 
CE_INTVAL
(
g_›ts
),

416 
CE_INTVAL
(
ö_ty≥_£l1
),

417 
CE_INTVAL
(
ö_ty≥_£l2
),

418 
CE_INTVAL
(
™Æog_dódz⁄e
),

419 
CE_INTVAL
(
memˇrd1_£l
),

420 
CE_INTVAL
(
memˇrd2_£l
),

421 
CE_INTVAL
(
g_auto°©ñd_›t
),

422 
CE_INTVAL_N
("adev0_is_nublike", 
ö_adev_is_nublike
[0]),

423 
CE_INTVAL_N
("adev1_is_nublike", 
ö_adev_is_nublike
[1]),

424 
CE_INTVAL_V
(
‰ameskù
, 3),

425 
CE_INTVAL_P
(
gpu_≥›s
.
iU£Dôhî
),

426 
CE_INTVAL_P
(
gpu_≥›s
.
dwA˘Fixes
),

427 
CE_INTVAL_P
(
gpu_u«i
.
löeskù
),

428 
CE_INTVAL_P
(
gpu_u«i
.
abe_hack
),

429 
CE_INTVAL_P
(
gpu_u«i
.
no_light
),

430 
CE_INTVAL_P
(
gpu_u«i
.
no_bÀnd
),

431 
CE_INTVAL_P
(
gpu_√⁄
.
Ælow_öãæa˚
),

432 
CE_INTVAL_P
(
gpu_√⁄
.
íh™˚mít_íabÀ
),

433 
CE_INTVAL_P
(
gpu_√⁄
.
íh™˚mít_no_maö
),

434 
CE_INTVAL_P
(
gpu_≥›sgl
.
bDøwDôhî
),

435 
CE_INTVAL_P
(
gpu_≥›sgl
.
iFûãrTy≥
),

436 
CE_INTVAL_P
(
gpu_≥›sgl
.
iFømeTexTy≥
),

437 
CE_INTVAL_P
(
gpu_≥›sgl
.
iU£Mask
),

438 
CE_INTVAL_P
(
gpu_≥›sgl
.
bO∑quePass
),

439 
CE_INTVAL_P
(
gpu_≥›sgl
.
bAdv™˚dBÀnd
),

440 
CE_INTVAL_P
(
gpu_≥›sgl
.
bU£Fa°Mdec
),

441 
CE_INTVAL_P
(
gpu_≥›sgl
.
iVRamSize
),

442 
CE_INTVAL_P
(
gpu_≥›sgl
.
iTexG¨bageCﬁÀ˘i⁄
),

443 
CE_INTVAL_P
(
gpu_≥›sgl
.
dwA˘Fixes
),

444 
CE_INTVAL
(
•u_c⁄fig
.
iU£Revîb
),

445 
CE_INTVAL
(
•u_c⁄fig
.
iXAPôch
),

446 
CE_INTVAL
(
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
),

447 
CE_INTVAL
(
•u_c⁄fig
.
iTempo
),

448 
CE_INTVAL
(
•u_c⁄fig
.
iU£Thªad
),

449 
CE_INTVAL
(
c⁄fig_ßve_cou¡î
),

450 
CE_INTVAL
(
ö_evdev_Ælow_abs_⁄ly
),

451 
CE_INTVAL
(
vﬁume_boo°
),

452 
CE_INTVAL
(
psx_˛ock
),

453 
CE_INTVAL
(
√w_dy«ªc_hacks
),

454 
CE_INTVAL
(
ö_íabÀ_vibøti⁄
),

457 *
	$gë_cd_œbñ
()

459 
åimœbñ
[33];

460 
j
;

462 
	`°∫˝y
(
åimœbñ
, 
CdromLabñ
, 32);

463 
åimœbñ
[32] = 0;

464 
j
 = 31; j >= 0; j--)

465 i‡(
åimœbñ
[
j
] == ' ')

466 
åimœbñ
[
j
] = 0;

468  
åimœbñ
;

469 
	}
}

471 
	$make_cfg_‚ame
(*
buf
, 
size_t
 
size
, 
is_game
)

473 i‡(
is_game
)

474 
	`¢¥ötf
(
buf
, 
size
, "." 
PCSX_DOT_DIR
 "cfg/%.32s-%.9s.cfg", 
	`gë_cd_œbñ
(), 
CdromId
);

476 
	`¢¥ötf
(
buf
, 
size
, "." 
PCSX_DOT_DIR
 "%s", 
cfgfûe_ba£«me
);

477 
	}
}

479 
keys_wrôe_Æl
(
FILE
 *
f
);

480 *
my°rù
(*
°r
);

482 
	$míu_wrôe_c⁄fig
(
is_game
)

484 
cfgfûe
[
MAXPATHLEN
];

485 
FILE
 *
f
;

486 
i
;

488 
c⁄fig_ßve_cou¡î
++;

490 
	`make_cfg_‚ame
(
cfgfûe
, (cfgfûe), 
is_game
);

491 
f
 = 
	`f›í
(
cfgfûe
, "w");

492 i‡(
f
 =
NULL
) {

493 
	`¥ötf
("míu_wrôe_c⁄fig: faûedÅÿ›í: %s\n", 
cfgfûe
);

497 
i
 = 0; i < 
	`ARRAY_SIZE
(
c⁄fig_d©a
); i++) {

498 
	`Ârötf
(
f
, "%†", 
c⁄fig_d©a
[
i
].
«me
);

499 
c⁄fig_d©a
[
i
].
Àn
) {

501 
	`Ârötf
(
f
, "%s\n", (*)
c⁄fig_d©a
[
i
].
vÆ
);

504 
	`Ârötf
(
f
, "%x\n", *(
u8
 *)
c⁄fig_d©a
[
i
].
vÆ
);

507 
	`Ârötf
(
f
, "%x\n", *(
u16
 *)
c⁄fig_d©a
[
i
].
vÆ
);

510 
	`Ârötf
(
f
, "%x\n", *(
u32
 *)
c⁄fig_d©a
[
i
].
vÆ
);

513 
	`¥ötf
("menu_write_config: unhandledÜen %d for %s\n",

514 ()
c⁄fig_d©a
[
i
].
Àn
, c⁄fig_d©a[i].
«me
);

519 
	`keys_wrôe_Æl
(
f
);

520 
	`f˛o£
(
f
);

523 
	}
}

525 
	$míu_do_œ°_cd_img
(
is_gë
)

527 c⁄° *
deÁu…s
[] = { "/media", "/mnt/sd", "/mnt" };

528 
∑th
[256];

529 
°©64
 
°
;

530 
FILE
 *
f
;

531 
i
, 
ªt
 = -1;

533 
	`¢¥ötf
(
∑th
, ’©h), "." 
PCSX_DOT_DIR
 "lastcdimg.txt");

534 
f
 = 
	`f›í
(
∑th
, 
is_gë
 ? "r" : "w");

535 i‡(
f
 =
NULL
) {

536 
ªt
 = -1;

537 
out
;

540 i‡(
is_gë
) {

541 
ªt
 = 
	`‰ód
(
œ°_£À˘ed_‚ame
, 1, ÷a°_£À˘ed_‚ameË- 1, 
f
);

542 
œ°_£À˘ed_‚ame
[
ªt
] = 0;

543 
	`my°rù
(
œ°_£À˘ed_‚ame
);

546 
	`Ârötf
(
f
, "%s\n", 
œ°_£À˘ed_‚ame
);

547 
	`f˛o£
(
f
);

549 
out
:

550 i‡(
is_gë
) {

551 
i
 = 0; 
œ°_£À˘ed_‚ame
[0] == 0

552 || 
	`°©64
(
œ°_£À˘ed_‚ame
, &
°
Ë!0; 
i
++)

554 i‡(
i
 >
	`ARRAY_SIZE
(
deÁu…s
))

556 
	`°r˝y
(
œ°_£À˘ed_‚ame
, 
deÁu…s
[
i
]);

561 
	}
}

563 
	$∑r£_°r_vÆ
(*
cvÆ
, c⁄° *
§c
)

565 *
tmp
;

566 
	`°∫˝y
(
cvÆ
, 
§c
, 
MAXPATHLEN
);

567 
cvÆ
[
MAXPATHLEN
 - 1] = 0;

568 
tmp
 = 
	`°rchr
(
cvÆ
, '\n');

569 i‡(
tmp
 =
NULL
)

570 
tmp
 = 
	`°rchr
(
cvÆ
, '\r');

571 i‡(
tmp
 !
NULL
)

572 *
tmp
 = 0;

573 
	}
}

575 
keys_lﬂd_Æl
(c⁄° *
cfg
);

577 
	$míu_lﬂd_c⁄fig
(
is_game
)

579 
cfgfûe
[
MAXPATHLEN
];

580 
i
, 
ªt
 = -1;

581 
size
;

582 *
cfg
;

583 
FILE
 *
f
;

585 
	`make_cfg_‚ame
(
cfgfûe
, (cfgfûe), 
is_game
);

586 
f
 = 
	`f›í
(
cfgfûe
, "r");

587 i‡(
f
 =
NULL
) {

588 
	`¥ötf
("míu_lﬂd_c⁄fig: faûedÅÿ›í: %s\n", 
cfgfûe
);

589 
Áû
;

592 
	`f£ek
(
f
, 0, 
SEEK_END
);

593 
size
 = 
	`·ñl
(
f
);

594 i‡(
size
 <= 0) {

595 
	`¥ötf
("bad sizê%ld: %s\n", 
size
, 
cfgfûe
);

596 
Áû
;

599 
cfg
 = 
	`mÆloc
(
size
 + 1);

600 i‡(
cfg
 =
NULL
)

601 
Áû
;

603 
	`f£ek
(
f
, 0, 
SEEK_SET
);

604 i‡(
	`‰ód
(
cfg
, 1, 
size
, 
f
) != size) {

605 
	`¥ötf
("ÁûedÅÿªad: %s\n", 
cfgfûe
);

606 
Áû_ªad
;

608 
cfg
[
size
] = 0;

610 
i
 = 0; i < 
	`ARRAY_SIZE
(
c⁄fig_d©a
); i++) {

611 *
tmp
, *
tmp2
;

612 
u32
 
vÆ
;

614 
tmp
 = 
	`°r°r
(
cfg
, 
c⁄fig_d©a
[
i
].
«me
);

615 i‡(
tmp
 =
NULL
)

617 
tmp
 +
	`°æí
(
c⁄fig_d©a
[
i
].
«me
);

618 i‡(
	`°∫cmp
(
tmp
, " = ", 3) != 0)

620 
tmp
 += 3;

622 i‡(
c⁄fig_d©a
[
i
].
Àn
 == 0) {

623 
	`∑r£_°r_vÆ
(
c⁄fig_d©a
[
i
].
vÆ
, 
tmp
);

627 
tmp2
 = 
NULL
;

628 
vÆ
 = 
	`°πoul
(
tmp
, &
tmp2
, 16);

629 i‡(
tmp2
 =
NULL
 || 
tmp
 ==Åmp2)

632 
c⁄fig_d©a
[
i
].
Àn
) {

634 *(
u8
 *)
c⁄fig_d©a
[
i
].
vÆ
 = val;

637 *(
u16
 *)
c⁄fig_d©a
[
i
].
vÆ
 = val;

640 *(
u32
 *)
c⁄fig_d©a
[
i
].
vÆ
 = val;

643 
	`¥ötf
("menu_load_config: unhandledÜen %d for %s\n",

644 ()
c⁄fig_d©a
[
i
].
Àn
, c⁄fig_d©a[i].
«me
);

649 i‡(!
is_game
) {

650 *
tmp
 = 
	`°r°r
(
cfg
, "lastcdimg = ");

651 i‡(
tmp
 !
NULL
) {

652 
tmp
 += 12;

653 
	`∑r£_°r_vÆ
(
œ°_£À˘ed_‚ame
, 
tmp
);

657 
	`keys_lﬂd_Æl
(
cfg
);

658 
ªt
 = 0;

659 
Áû_ªad
:

660 
	`‰ì
(
cfg
);

661 
Áû
:

662 i‡(
f
 !
NULL
)

663 
	`f˛o£
(
f
);

665 
	`míu_sync_c⁄fig
();

668 
i
 = 
bios_£l
 = 0; 
bio£s
[i] !
NULL
; i++)

669 i‡(
	`°rcmp
(
C⁄fig
.
Bios
, 
bio£s
[
i
]) == 0)

670 { 
bios_£l
 = 
i
; ; }

672 
i
 = 
gpu_∂ug£l
 = 0; 
gpu_∂ugös
[i] !
NULL
; i++)

673 i‡(
	`°rcmp
(
C⁄fig
.
Gpu
, 
gpu_∂ugös
[
i
]) == 0)

674 { 
gpu_∂ug£l
 = 
i
; ; }

676 
i
 = 
•u_∂ug£l
 = 0; 
•u_∂ugös
[i] !
NULL
; i++)

677 i‡(
	`°rcmp
(
C⁄fig
.
Spu
, 
•u_∂ugös
[
i
]) == 0)

678 { 
•u_∂ug£l
 = 
i
; ; }

681 
mcd1_ﬁd
[(
C⁄fig
.
Mcd1
)];

682 
mcd2_ﬁd
[(
C⁄fig
.
Mcd2
)];

683 
	`°r˝y
(
mcd1_ﬁd
, 
C⁄fig
.
Mcd1
);

684 
	`°r˝y
(
mcd2_ﬁd
, 
C⁄fig
.
Mcd2
);

686 i‡(()
memˇrd1_£l
 < 
	`ARRAY_SIZE
(
memˇrds
)) {

687 i‡(
memˇrd1_£l
 == 0)

688 
	`°r˝y
(
C⁄fig
.
Mcd1
, "none");

689 i‡(
memˇrds
[
memˇrd1_£l
] !
NULL
)

690 
	`¢¥ötf
(
C⁄fig
.
Mcd1
, (Config.Mcd1), ".%s%s",

691 
MEMCARD_DIR
, 
memˇrds
[
memˇrd1_£l
]);

693 i‡(()
memˇrd2_£l
 < 
	`ARRAY_SIZE
(
memˇrds
)) {

694 i‡(
memˇrd2_£l
 == 0)

695 
	`°r˝y
(
C⁄fig
.
Mcd2
, "none");

696 i‡(
memˇrds
[
memˇrd2_£l
] !
NULL
)

697 
	`¢¥ötf
(
C⁄fig
.
Mcd2
, (Config.Mcd2), ".%s%s",

698 
MEMCARD_DIR
, 
memˇrds
[
memˇrd2_£l
]);

700 i‡(
	`°rcmp
(
mcd1_ﬁd
, 
C⁄fig
.
Mcd1
Ë|| såcmp(
mcd2_ﬁd
, C⁄fig.
Mcd2
))

701 
	`LﬂdMcds
(
C⁄fig
.
Mcd1
, C⁄fig.
Mcd2
);

703  
ªt
;

704 
	}
}

706 c⁄° *
	gfûãr_exts
[] = {

708 "bz", "znx", "pbp", "cbn", 
NULL


712 
	$‚ame2cﬁ‹
(c⁄° *
‚ame
)

714 c⁄° *
Ÿhî_exts
[] = {

717 c⁄° *
ext
 = 
	`°ºchr
(
‚ame
, '.');

718 
i
;

720 i‡(
ext
 =
NULL
)

722 
ext
++;

723 
i
 = 0; 
fûãr_exts
[i] !
NULL
; i++)

724 i‡(
	`°rˇ£cmp
(
ext
, 
fûãr_exts
[
i
]) == 0)

726 
i
 = 0; i < 
	`¨øy_size
(
Ÿhî_exts
); i++)

727 i‡(
	`°rˇ£cmp
(
ext
, 
Ÿhî_exts
[
i
]) == 0)

730 
	}
}

732 
døw_ßve°©e_bg
(
¶Ÿ
);

734 
	#MENU_ALIGN_LEFT


	)

735 #ifde‡
__ARM_ARCH_7A__


736 
	#MENU_X2
 1

	)

738 
	#MENU_X2
 0

	)

741 
	~"libpico„/míu.c
"

744 
	$døw_ßve°©e_bg
(
¶Ÿ
)

746 c⁄° 
psx_widths
[8] = { 256, 368, 320, 384, 512, 512, 640, 640 };

747 
x
, 
y
, 
w
, 
h
;

748 
‚ame
[
MAXPATHLEN
];

749 
GPUFªeze_t
 *
gpu
;

750 
u16
 *
s
, *
d
;

751 
gzFûe
 
f
;

752 
ªt
;

753 
u32
 
tmp
;

755 
ªt
 = 
	`gë_°©e_fûíame
(
‚ame
, (‚ame), 
¶Ÿ
);

756 i‡(
ªt
 != 0)

759 
f
 = 
	`gz›í
(
‚ame
, "rb");

760 i‡(
f
 =
NULL
)

763 i‡((
ªt
 = ()
	`gz£ek
(
f
, 0x29933d, 
SEEK_SET
)) != 0x29933d) {

764 
	`Ârötf
(
°dîr
, "gz£ek faûed: %d\n", 
ªt
);

765 
	`gz˛o£
(
f
);

769 
gpu
 = 
	`mÆloc
((*gpu));

770 i‡(
gpu
 =
NULL
) {

771 
	`gz˛o£
(
f
);

775 
ªt
 = 
	`gzªad
(
f
, 
gpu
, (*gpu));

776 
	`gz˛o£
(
f
);

777 i‡(
ªt
 !(*
gpu
)) {

778 
	`Ârötf
(
°dîr
, "gzread failed\n");

779 
out
;

782 
	`mem˝y
(
g_míubg_±r
, 
g_míubg_§c_±r
, 
g_míus¸ìn_w
 * 
g_míus¸ìn_h
 * 2);

784 i‡(
gpu
->
ulSètus
 & 0x800000)

785 
out
;

787 
x
 = 
gpu
->
ulC⁄åﬁ
[5] & 0x3ff;

788 
y
 = (
gpu
->
ulC⁄åﬁ
[5] >> 10) & 0x1ff;

789 
w
 = 
psx_widths
[(
gpu
->
ulSètus
 >> 16) & 7];

790 
tmp
 = 
gpu
->
ulC⁄åﬁ
[7];

791 
h
 = ((
tmp
 >> 10) & 0x3ff) - (tmp & 0x3ff);

792 i‡(
gpu
->
ulSètus
 & 0x80000)

793 
h
 *= 2;

794 i‡(
h
 <= 0 || h > 512)

795 
out
;

796 i‡(
y
 > 512 - 64)

797 
y
 = 0;

798 i‡(
y
 + 
h
 > 512)

799 
h
 = 512 - 
y
;

800 
s
 = (
u16
 *)
gpu
->
psxVRam
 + 
y
 * 1024 + 
x
;

802 
x
 = 
	`max
(0, 
g_míus¸ìn_w
 - 
w
) & ~3;

803 
y
 = 
	`max
(0, 
g_míus¸ìn_h
 / 2 - 
h
 / 2);

804 
w
 = 
	`mö
(
g_míus¸ìn_w
, w);

805 
h
 = 
	`mö
(
g_míus¸ìn_h
, h);

806 
d
 = (
u16
 *)
g_míubg_±r
 + 
g_míus¸ìn_w
 * 
y
 + 
x
;

808 ; 
h
 > 0; h--, 
d
 +
g_míus¸ìn_w
, 
s
 += 1024) {

809 i‡(
gpu
->
ulSètus
 & 0x200000)

810 
	`bgr888_to_rgb565
(
d
, 
s
, 
w
 * 3);

812 
	`bgr555_to_rgb565
(
d
, 
s
, 
w
 * 2);

815 i‡(
g_míus¸ìn_w
 - 
w
 < 320)

816 
	`míu_d¨kí_bg
(
d
, d, 
w
 * 2, 0);

819 
out
:

820 
	`‰ì
(
gpu
);

821 
	}
}

825 
me_böd_a˘i⁄
 
	gme_˘æ_a˘i⁄s
[] =

827 { "UP ", 1 << 
DKEY_UP
},

828 { "DOWN ", 1 << 
DKEY_DOWN
 },

829 { "LEFT ", 1 << 
DKEY_LEFT
 },

830 { "RIGHT ", 1 << 
DKEY_RIGHT
 },

831 { "TRIANGLE", 1 << 
DKEY_TRIANGLE
 },

832 { "CIRCLE ", 1 << 
DKEY_CIRCLE
 },

833 { "CROSS ", 1 << 
DKEY_CROSS
 },

834 { "SQUARE ", 1 << 
DKEY_SQUARE
 },

835 { "L1 ", 1 << 
DKEY_L1
 },

836 { "R1 ", 1 << 
DKEY_R1
 },

837 { "L2 ", 1 << 
DKEY_L2
 },

838 { "R2 ", 1 << 
DKEY_R2
 },

839 { "L3 ", 1 << 
DKEY_L3
 },

840 { "R3 ", 1 << 
DKEY_R3
 },

841 { "START ", 1 << 
DKEY_START
 },

842 { "SELECT ", 1 << 
DKEY_SELECT
 },

843 { 
NULL
, 0 }

846 
me_böd_a˘i⁄
 
	gemu˘æ_a˘i⁄s
[] =

848 { "SavêSèã ", 1 << 
SACTION_SAVE_STATE
 },

849 { "Lﬂd Sèã ", 1 << 
SACTION_LOAD_STATE
 },

850 { "Pªv SavêSlŸ ", 1 << 
SACTION_PREV_SSLOT
 },

851 { "NexàSavêSlŸ ", 1 << 
SACTION_NEXT_SSLOT
 },

852 { "ToggÀ Fømeskù ", 1 << 
SACTION_TOGGLE_FSKIP
 },

853 { "TakêS¸ìnshŸ ", 1 << 
SACTION_SCREENSHOT
 },

854 { "Show/HidêFPS ", 1 << 
SACTION_TOGGLE_FPS
 },

855 #ifde‡
__ARM_ARCH_7A__


856 { "Swôch Rídîî ", 1 << 
SACTION_SWITCH_DISPMODE
 },

858 { "Fa° F‹w¨d ", 1 << 
SACTION_FAST_FORWARD
 },

859 #i‡
MENU_SHOW_MINIMIZE


860 { "Möimizê ", 1 << 
SACTION_MINIMIZE
 },

862 #i‡
MENU_SHOW_FULLSCREEN


863 { "ToggÀ fuŒs¸ìn", 1 << 
SACTION_TOGGLE_FULLSCREEN
 },

865 { "E¡î Míu ", 1 << 
SACTION_ENTER_MENU
 },

866 { "Gu¿Triggî ", 1 << 
SACTION_GUN_TRIGGER
 },

867 { "Gu¿A buâ⁄ ", 1 << 
SACTION_GUN_A
 },

868 { "Gu¿B buâ⁄ ", 1 << 
SACTION_GUN_B
 },

869 { "Gu¿Offs¸ì¿Triggî", 1 << 
SACTION_GUN_TRIGGER2
 },

870 #i‡
MENU_SHOW_VOLUME


871 { "VﬁumêU∞ ", 1 << 
SACTION_VOLUME_UP
 },

872 { "VﬁumêDow¿ ", 1 << 
SACTION_VOLUME_DOWN
 },

874 { 
NULL
, 0 }

877 *
	$my°rù
(*
°r
)

879 
i
, 
Àn
;

881 
Àn
 = 
	`°æí
(
°r
);

882 
i
 = 0; i < 
Àn
; i++)

883 i‡(
°r
[
i
] != ' ') ;

884 i‡(
i
 > 0Ë
	`memmove
(
°r
, så + i, 
Àn
 - i + 1);

886 
Àn
 = 
	`°æí
(
°r
);

887 
i
 = 
Àn
 - 1; i >= 0; i--)

888 i‡(
°r
[
i
] != ' ' && str[i] != '\r' && str[i] != '\n') ;

889 
°r
[
i
+1] = 0;

891  
°r
;

892 
	}
}

894 
	$gë_löe
(*
d
, 
size_t
 
size
, c⁄° *
s
)

896 c⁄° *
≥
;

897 
size_t
 
Àn
;

899 
≥
 = 
s
; *pe != '\r' && *pe != '\n' && *pe != 0;Öe++)

901 
Àn
 = 
≥
 - 
s
;

902 i‡(
Àn
 > 
size
 - 1)

903 
Àn
 = 
size
 - 1;

904 
	`°∫˝y
(
d
, 
s
, 
Àn
);

905 
d
[
Àn
] = 0;

907 
	`my°rù
(
d
);

908 
	}
}

910 
	$keys_wrôe_Æl
(
FILE
 *
f
)

912 
d
;

914 
d
 = 0; d < 
IN_MAX_DEVS
; d++)

916 c⁄° *
böds
 = 
	`ö_gë_dev_böds
(
d
);

917 c⁄° *
«me
 = 
	`ö_gë_dev_«me
(
d
, 0, 0);

918 
k
, 
cou¡
 = 0;

920 i‡(
böds
 =
NULL
 || 
«me
 == NULL)

923 
	`Ârötf
(
f
, "böddev = %s\n", 
«me
);

924 
	`ö_gë_c⁄fig
(
d
, 
IN_CFG_BIND_COUNT
, &
cou¡
);

926 
k
 = 0; k < 
cou¡
; k++)

928 
i
, 
kböds
, 
mask
;

929 
a˘
[32];

931 
a˘
[0] =áct[31] = 0;

932 
«me
 = 
	`ö_gë_key_«me
(
d
, 
k
);

934 
kböds
 = 
böds
[
	`IN_BIND_OFFS
(
k
, 
IN_BINDTYPE_PLAYER12
)];

935 
i
 = 0; 
kböds
 && i < 
	`ARRAY_SIZE
(
me_˘æ_a˘i⁄s
) - 1; i++) {

936 
mask
 = 
me_˘æ_a˘i⁄s
[
i
].mask;

937 i‡(
mask
 & 
kböds
) {

938 
	`°∫˝y
(
a˘
, 
me_˘æ_a˘i⁄s
[
i
].
«me
, 31);

939 
	`Ârötf
(
f
, "böd %†∂ayî1 %s\n", 
«me
, 
	`my°rù
(
a˘
));

940 
kböds
 &~
mask
;

942 
mask
 = 
me_˘æ_a˘i⁄s
[
i
].mask << 16;

943 i‡(
mask
 & 
kböds
) {

944 
	`°∫˝y
(
a˘
, 
me_˘æ_a˘i⁄s
[
i
].
«me
, 31);

945 
	`Ârötf
(
f
, "böd %†∂ayî2 %s\n", 
«me
, 
	`my°rù
(
a˘
));

946 
kböds
 &~
mask
;

950 
kböds
 = 
böds
[
	`IN_BIND_OFFS
(
k
, 
IN_BINDTYPE_EMU
)];

951 
i
 = 0; 
kböds
 && 
emu˘æ_a˘i⁄s
[i].
«me
 !
NULL
; i++) {

952 
mask
 = 
emu˘æ_a˘i⁄s
[
i
].mask;

953 i‡(
mask
 & 
kböds
) {

954 
	`°∫˝y
(
a˘
, 
emu˘æ_a˘i⁄s
[
i
].
«me
, 31);

955 
	`Ârötf
(
f
, "böd %†%s\n", 
«me
, 
	`my°rù
(
a˘
));

956 
kböds
 &~
mask
;

961 
k
 = 0; k < 
	`¨øy_size
(
ö_adev
); k++)

963 i‡(
ö_adev
[
k
] =
d
)

964 
	`Ârötf
(
f
, "böd_™Æog = %d\n", 
k
);

967 
	}
}

969 
	$∑r£_böd_vÆ
(c⁄° *
vÆ
, *
ty≥
)

971 
i
;

973 *
ty≥
 = 
IN_BINDTYPE_NONE
;

974 i‡(
vÆ
[0] == 0)

977 i‡(
	`°∫ˇ£cmp
(
vÆ
, "player", 6) == 0)

979 
∂ayî
, 
shi·
 = 0;

980 
∂ayî
 = 
	`©oi
(
vÆ
 + 6) - 1;

982 i‡(()
∂ayî
 > 1)

984 i‡(
∂ayî
 == 1)

985 
shi·
 = 16;

987 *
ty≥
 = 
IN_BINDTYPE_PLAYER12
;

988 
i
 = 0; 
me_˘æ_a˘i⁄s
[i].
«me
 !
NULL
; i++) {

989 i‡(
	`°∫ˇ£cmp
(
me_˘æ_a˘i⁄s
[
i
].
«me
, 
vÆ
 + 8, 
	`°æí
(val + 8)) == 0)

990  
me_˘æ_a˘i⁄s
[
i
].
mask
 << 
shi·
;

993 
i
 = 0; 
emu˘æ_a˘i⁄s
[i].
«me
 !
NULL
; i++) {

994 i‡(
	`°∫ˇ£cmp
(
emu˘æ_a˘i⁄s
[
i
].
«me
, 
vÆ
, 
	`°æí
(val)) == 0) {

995 *
ty≥
 = 
IN_BINDTYPE_EMU
;

996  
emu˘æ_a˘i⁄s
[
i
].
mask
;

1001 
	}
}

1003 
	$keys_lﬂd_Æl
(c⁄° *
cfg
)

1005 
dev
[256], 
key
[128], *
a˘
;

1006 c⁄° *
p
;

1007 
böd
, 
bödty≥
;

1008 
ªt
, 
dev_id
;

1010 
p
 = 
cfg
;

1011 
p
 !
NULL
 && (∞
	`°r°r
(p, "binddev = ")) != NULL) {

1012 
p
 += 10;

1014 
	`gë_löe
(
dev
, (dev), 
p
);

1015 
dev_id
 = 
	`ö_c⁄fig_∑r£_dev
(
dev
);

1016 i‡(
dev_id
 < 0) {

1017 
	`¥ötf
("öput: c™'àh™dÀ dev: %s\n", 
dev
);

1021 
	`ö_unböd_Æl
(
dev_id
, -1, -1);

1022 (
p
 = 
	`°r°r
(p, "bind"))) {

1023 i‡(
	`°∫cmp
(
p
, "binddev = ", 10) == 0)

1026 i‡(
	`°∫cmp
(
p
, "bind_analog", 11) == 0) {

1027 
ªt
 = 
	`ssˇnf
(
p
, "böd_™Æog = %d", &
böd
);

1028 
p
 += 11;

1029 i‡(
ªt
 != 1) {

1030 
	`¥ötf
("öput:Ö¨£Éº‹: %16s..\n", 
p
);

1033 i‡(()
böd
 >
	`¨øy_size
(
ö_adev
)) {

1034 
	`¥ötf
("öput:á«log id %d ouào‡ønge\n", 
böd
);

1037 
ö_adev
[
böd
] = 
dev_id
;

1041 
p
 += 4;

1042 i‡(*
p
 != ' ') {

1043 
	`¥ötf
("öput:Ö¨£Éº‹: %16s..\n", 
p
);

1047 
	`gë_löe
(
key
, (key), 
p
);

1048 
a˘
 = 
	`°rchr
(
key
, '=');

1049 i‡(
a˘
 =
NULL
) {

1050 
	`¥ötf
("∑r£ faûed: %16s..\n", 
p
);

1053 *
a˘
 = 0;

1054 
a˘
++;

1055 
	`my°rù
(
key
);

1056 
	`my°rù
(
a˘
);

1058 
böd
 = 
	`∑r£_böd_vÆ
(
a˘
, &
bödty≥
);

1059 i‡(
böd
 != -1 && bind != 0) {

1061 
	`ö_c⁄fig_böd_key
(
dev_id
, 
key
, 
böd
, 
bödty≥
);

1064 
	`Õrötf
("c⁄fig: unh™dÀdá˘i⁄ \"%s\"\n", 
a˘
);

1067 
	`ö_˛ón_böds
();

1068 
	}
}

1070 
	$key_c⁄fig_lo›_wøp
(
id
, 
keys
)

1072 
id
) {

1073 
MA_CTRL_PLAYER1
:

1074 
	`key_c⁄fig_lo›
(
me_˘æ_a˘i⁄s
, 
	`¨øy_size
(me_ctrl_actions) - 1, 0);

1076 
MA_CTRL_PLAYER2
:

1077 
	`key_c⁄fig_lo›
(
me_˘æ_a˘i⁄s
, 
	`¨øy_size
(me_ctrl_actions) - 1, 1);

1079 
MA_CTRL_EMU
:

1080 
	`key_c⁄fig_lo›
(
emu˘æ_a˘i⁄s
, 
	`¨øy_size
(emuctrl_actions) - 1, -1);

1086 
	}
}

1088 c⁄° 
	gh_nubmode
[] = "MapsÇub-likeánalog controlsÅo PSX ones better\n"

1090 c⁄° *
	gadev«mes
[
IN_MAX_DEVS
 + 2];

1091 
	g°ick_£l
[2];

1093 
míu_íåy
 
	ge_míu_keyc⁄fig_™Æog
[] =

1095 
mì_íum
 ("Le· stick (L3)", 0, 
°ick_£l
[0], 
adev«mes
),

1096 
mì_ønge
 (" Xáxis", 0, 
ö_adev_axis
[0][0], 0, 7),

1097 
mì_ønge
 (" Yáxis", 0, 
ö_adev_axis
[0][1], 0, 7),

1098 
mì_⁄off_h
("Çub mode", 0, 
ö_adev_is_nublike
[0], 1, 
h_nubmode
),

1099 
mì_íum
 ("Righà°ick (R3)", 0, 
°ick_£l
[1], 
adev«mes
),

1100 
mì_ønge
 (" Xáxis", 0, 
ö_adev_axis
[1][0], 0, 7),

1101 
mì_ønge
 (" Yáxis", 0, 
ö_adev_axis
[1][1], 0, 7),

1102 
mì_⁄off_h
("Çub mode", 0, 
ö_adev_is_nublike
[1], 1, 
h_nubmode
),

1103 
mì_íd
,

1106 
	$key_c⁄fig_™Æog
(
id
, 
keys
)

1108 
i
, 
d
, 
cou¡
, 
£l
 = 0;

1109 
£l2dev_m≠
[
IN_MAX_DEVS
];

1111 
	`mem£t
(
adev«mes
, 0, (adevnames));

1112 
	`mem£t
(
£l2dev_m≠
, 0xff, (sel2dev_map));

1113 
	`mem£t
(
°ick_£l
, 0, (stick_sel));

1115 
adev«mes
[0] = "None";

1116 
i
 = 1;

1117 
d
 = 0; d < 
IN_MAX_DEVS
; d++)

1119 c⁄° *
«me
 = 
	`ö_gë_dev_«me
(
d
, 0, 1);

1120 i‡(
«me
 =
NULL
)

1123 
cou¡
 = 0;

1124 
	`ö_gë_c⁄fig
(
d
, 
IN_CFG_ABS_AXIS_COUNT
, &
cou¡
);

1125 i‡(
cou¡
 == 0)

1128 i‡(
ö_adev
[0] =
d
Ë
°ick_£l
[0] = 
i
;

1129 i‡(
ö_adev
[1] =
d
Ë
°ick_£l
[1] = 
i
;

1130 
£l2dev_m≠
[
i
] = 
d
;

1131 
adev«mes
[
i
++] = 
«me
;

1133 
adev«mes
[
i
] = 
NULL
;

1135 
	`me_lo›
(
e_míu_keyc⁄fig_™Æog
, &
£l
);

1137 
ö_adev
[0] = 
£l2dev_m≠
[
°ick_£l
[0]];

1138 
ö_adev
[1] = 
£l2dev_m≠
[
°ick_£l
[1]];

1141 
	}
}

1143 c⁄° *
	$mgn_dev_«me
(
id
, *
offs
)

1145 c⁄° *
«me
 = 
NULL
;

1146 
ô
 = 0;

1148 i‡(
id
 =
MA_CTRL_DEV_FIRST
)

1149 
ô
 = 0;

1151 ; 
ô
 < 
IN_MAX_DEVS
; it++) {

1152 
«me
 = 
	`ö_gë_dev_«me
(
ô
, 1, 1);

1153 i‡(
«me
 !
NULL
)

1157 
ô
++;

1158  
«me
;

1159 
	}
}

1161 c⁄° *
	$mgn_ßvñﬂdcfg
(
id
, *
offs
)

1164 
	}
}

1166 
	$mh_ßvecfg
(
id
, 
keys
)

1168 i‡(
	`míu_wrôe_c⁄fig
(
id
 =
MA_OPT_SAVECFG_GAME
 ? 1 : 0) == 0)

1169 
	`míu_upd©e_msg
("config saved");

1171 
	`míu_upd©e_msg
("failedÅo write config");

1174 
	}
}

1176 
	$mh_öput_ªsˇn
(
id
, 
keys
)

1179 
	`ö_¥obe
();

1180 
	`míu_upd©e_msg
("rescan complete.");

1183 
	}
}

1185 c⁄° *
	gmí_ö_ty≥_£l
[] = {

1189 
NULL


1191 c⁄° 
	gh_nub_bäs
[] = "Experimental, keepÅhis OFF if unsure. SelectÑescanáfter change.";

1192 c⁄° 
	gh_nŸsgun
[] = "Don'tÅrigger (shoot) whenÅouching screen in gun games.";

1193 c⁄° 
	gh_vibøti⁄
[]= "Must selectánalogáboveándÉnableÅhis ingameÅoo.";

1195 
míu_íåy
 
	ge_míu_keyc⁄fig
[] =

1197 
mì_h™dÀr_id
("Pœyî 1", 
MA_CTRL_PLAYER1
, 
key_c⁄fig_lo›_wøp
),

1198 
mì_h™dÀr_id
("Pœyî 2", 
MA_CTRL_PLAYER2
, 
key_c⁄fig_lo›_wøp
),

1199 
mì_h™dÀr_id
("A«log c⁄åﬁs", 
MA_CTRL_ANALOG
, 
key_c⁄fig_™Æog
),

1200 
mì_h™dÀr_id
("Emuœt‹/Gu¿c⁄åﬁs", 
MA_CTRL_EMU
, 
key_c⁄fig_lo›_wøp
),

1201 
mì_œbñ
 (""),

1202 
mì_íum
 ("P‹à1 devi˚", 0, 
ö_ty≥_£l1
, 
mí_ö_ty≥_£l
),

1203 
mì_íum
 ("P‹à2 devi˚", 0, 
ö_ty≥_£l2
, 
mí_ö_ty≥_£l
),

1204 
mì_⁄off_h
 ("Nub†a†buâ⁄s", 
MA_CTRL_NUBS_BTNS
, 
ö_evdev_Ælow_abs_⁄ly
, 1, 
h_nub_bäs
),

1205 
mì_⁄off_h
 ("Vibøti⁄", 
MA_CTRL_VIBRATION
, 
ö_íabÀ_vibøti⁄
, 1, 
h_vibøti⁄
),

1206 
mì_ønge
 ("A«log dódz⁄e", 
MA_CTRL_DEADZONE
, 
™Æog_dódz⁄e
, 1, 99),

1207 
mì_⁄off_h
 ("NÿTS Gu¿åiggî", 0, 
g_›ts
, 
OPT_TSGUN_NOTRIGGER
, 
h_nŸsgun
),

1208 
mì_cu°_noßve
("SavêglobÆ c⁄fig", 
MA_OPT_SAVECFG
, 
mh_ßvecfg
, 
mgn_ßvñﬂdcfg
),

1209 
mì_cu°_noßve
("Savêcfg f‹Üﬂded game", 
MA_OPT_SAVECFG_GAME
, 
mh_ßvecfg
, 
mgn_ßvñﬂdcfg
),

1210 
mì_h™dÀr
 ("Resˇ¿devi˚s:", 
mh_öput_ªsˇn
),

1211 
mì_œbñ
 (""),

1212 
mì_œbñ_mk
 (
MA_CTRL_DEV_FIRST
, 
mgn_dev_«me
),

1213 
mì_œbñ_mk
 (
MA_CTRL_DEV_NEXT
, 
mgn_dev_«me
),

1214 
mì_œbñ_mk
 (
MA_CTRL_DEV_NEXT
, 
mgn_dev_«me
),

1215 
mì_œbñ_mk
 (
MA_CTRL_DEV_NEXT
, 
mgn_dev_«me
),

1216 
mì_œbñ_mk
 (
MA_CTRL_DEV_NEXT
, 
mgn_dev_«me
),

1217 
mì_œbñ_mk
 (
MA_CTRL_DEV_NEXT
, 
mgn_dev_«me
),

1218 
mì_œbñ_mk
 (
MA_CTRL_DEV_NEXT
, 
mgn_dev_«me
),

1219 
mì_íd
,

1222 
	$míu_lo›_keyc⁄fig
(
id
, 
keys
)

1224 
£l
 = 0;

1227 
	`me_lo›
(
e_míu_keyc⁄fig
, &
£l
);

1229 
	}
}

1233 c⁄° *
	gmí_sˇÀr
[] = {

1234 "1x1", "öãgî sˇÀd 2x", "sˇÀd 4:3", "öãgî sˇÀd 4:3", "fuŒs¸ìn", "cu°om", 
NULL


1236 c⁄° *
	gmí_so·_fûãr
[] = { "None",

1237 #ifde‡
__ARM_NEON__


1240 
NULL
 };

1241 c⁄° *
	gmí_dummy
[] = { 
NULL
 };

1242 c⁄° 
	gh_sˇÀr
[] = "int. 2x - scales w. or h. 2x if it fits on screen\n"

1244 c⁄° 
	gh_csˇÀr
[] = "DisplaysÅhe scalerÜayer, you canÑesize it\n"

1246 c⁄° 
	gh_ovîœy
[] = "OverlayÖrovides hardwareáccelerated scaling";

1247 c⁄° 
	gh_so·_fûãr
[] = "Works only if game usesÜowÑesolution modes";

1248 c⁄° 
	gh_sˇ∆öe_l
[] = "Scanline brightness, 0-100%";

1249 c⁄° 
	gh_gamma
[] = "Gamma/brightnessádjustment (default 100)";

1251 
	$míu_lo›_csˇÀr
(
id
, 
keys
)

1253 
öp
;

1255 
g_sˇÀr
 = 
SCALE_CUSTOM
;

1257 
	`∂©_gvideo_›í
(
C⁄fig
.
PsxTy≥
);

1261 
	`míu_døw_begö
(0, 1);

1262 
	`mem£t
(
g_míus¸ìn_±r
, 4, 
g_míus¸ìn_w
 * 
g_míus¸ìn_h
 * 2);

1263 
	`ãxt_out16
(2, 2, "%d,%d", 
g_œyî_x
, 
g_œyî_y
);

1264 
	`ãxt_out16
(2, 480 - 18, "%dx%d | d-∑d:Ñesize, R+d-∑d: move", 
g_œyî_w
, 
g_œyî_h
);

1265 
	`míu_døw_íd
();

1267 
öp
 = 
	`ö_míu_waô
(
PBTN_UP
|
PBTN_DOWN
|
PBTN_LEFT
|
PBTN_RIGHT


1268 |
PBTN_R
|
PBTN_MOK
|
PBTN_MBACK
, 
NULL
, 40);

1269 i‡(
öp
 & 
PBTN_UP
Ë
g_œyî_y
--;

1270 i‡(
öp
 & 
PBTN_DOWN
Ë
g_œyî_y
++;

1271 i‡(
öp
 & 
PBTN_LEFT
Ë
g_œyî_x
--;

1272 i‡(
öp
 & 
PBTN_RIGHT
Ë
g_œyî_x
++;

1273 i‡(!(
öp
 & 
PBTN_R
)) {

1274 i‡(
öp
 & 
PBTN_UP
Ë
g_œyî_h
 += 2;

1275 i‡(
öp
 & 
PBTN_DOWN
Ë
g_œyî_h
 -= 2;

1276 i‡(
öp
 & 
PBTN_LEFT
Ë
g_œyî_w
 += 2;

1277 i‡(
öp
 & 
PBTN_RIGHT
Ë
g_œyî_w
 -= 2;

1279 i‡(
öp
 & (
PBTN_MOK
|
PBTN_MBACK
))

1282 i‡(
öp
 & (
PBTN_UP
|
PBTN_DOWN
|
PBTN_LEFT
|
PBTN_RIGHT
)) {

1283 i‡(
g_œyî_x
 < 0) g_layer_x = 0;

1284 i‡(
g_œyî_x
 > 640) g_layer_x = 640;

1285 i‡(
g_œyî_y
 < 0) g_layer_y = 0;

1286 i‡(
g_œyî_y
 > 420) g_layer_y = 420;

1287 i‡(
g_œyî_w
 < 160) g_layer_w = 160;

1288 i‡(
g_œyî_h
 < 60) g_layer_h = 60;

1289 i‡(
g_œyî_x
 + 
g_œyî_w
 > 800)

1290 
g_œyî_w
 = 800 - 
g_œyî_x
;

1291 i‡(
g_œyî_y
 + 
g_œyî_h
 > 480)

1292 
g_œyî_h
 = 480 - 
g_œyî_y
;

1294 
	`∂©_gvideo_›í
(
C⁄fig
.
PsxTy≥
);

1298 
	`∂©_gvideo_˛o£
();

1301 
	}
}

1303 
míu_íåy
 
	ge_míu_gfx_›ti⁄s
[] =

1305 
mì_íum_h
 ("SˇÀr", 
MA_OPT_VARSCALER
, 
g_sˇÀr
, 
mí_sˇÀr
, 
h_sˇÀr
),

1306 
mì_íum
 ("Videÿouçuàmode", 
MA_OPT_VOUT_MODE
, 
∂©_èrgë
.
vout_mëhod
, 
mí_dummy
),

1307 
mì_⁄off
 ("So·w¨êSˇlög", 
MA_OPT_SCALER2
, 
so·_sˇlög
, 1),

1308 
mì_íum
 ("H¨dw¨êFûãr", 
MA_OPT_HWFILTER
, 
∂©_èrgë
.
hwfûãr
, 
mí_dummy
),

1309 
mì_íum_h
 ("So·w¨êFûãr", 
MA_OPT_SWFILTER
, 
so·_fûãr
, 
mí_so·_fûãr
, 
h_so·_fûãr
),

1310 #ifde‡
__ARM_NEON__


1311 
mì_⁄off
 ("Sˇ∆öes", 
MA_OPT_SCANLINES
, 
sˇ∆öes
, 1),

1312 
mì_ønge_h
 ("Sˇ∆öêbrighäess", 
MA_OPT_SCANLINE_LEVEL
, 
sˇ∆öe_Àvñ
, 0, 100, 
h_sˇ∆öe_l
),

1314 
mì_ønge_h
 ("Gamm®adju°mít", 
MA_OPT_GAMMA
, 
g_gamma
, 1, 200, 
h_gamma
),

1316 
mì_cu°_h
 ("Sëu∞cu°om sˇÀr", 
MA_OPT_VARSCALER_C
, 
míu_lo›_csˇÀr
, 
NULL
, 
h_csˇÀr
),

1317 
mì_íd
,

1320 
	$míu_lo›_gfx_›ti⁄s
(
id
, 
keys
)

1322 
£l
 = 0;

1324 
	`me_lo›
(
e_míu_gfx_›ti⁄s
, &
£l
);

1327 
	}
}

1331 #ifde‡
__ARM_NEON__


1333 c⁄° 
	gh_gpu_√⁄
[] =

1335 c⁄° 
	gh_gpu_√⁄_íh™˚d
[] =

1338 c⁄° 
	gh_gpu_√⁄_íh™˚d_hack
[] =

1340 c⁄° *
	gmí_gpu_öãæa˚
[] = { "Off", "On", "Auto", 
NULL
 };

1342 
míu_íåy
 
	ge_míu_∂ugö_gpu_√⁄
[] =

1344 
mì_íum
 ("E«bÀ i¡îœ˚ mode", 0, 
∂_ª¨med_cbs
.
gpu_√⁄
.
Ælow_öãæa˚
, 
mí_gpu_öãæa˚
),

1345 
mì_⁄off_h
 ("Enh™˚dÑesﬁuti⁄ (¶ow)", 0, 
∂_ª¨med_cbs
.
gpu_√⁄
.
íh™˚mít_íabÀ
, 1, 
h_gpu_√⁄_íh™˚d
),

1346 
mì_⁄off_h
 ("Enh™˚dÑes. s≥ed hack", 0, 
∂_ª¨med_cbs
.
gpu_√⁄
.
íh™˚mít_no_maö
, 1, 
h_gpu_√⁄_íh™˚d_hack
),

1347 
mì_íd
,

1350 
	$míu_lo›_∂ugö_gpu_√⁄
(
id
, 
keys
)

1352 
£l
 = 0;

1353 
	`me_lo›
(
e_míu_∂ugö_gpu_√⁄
, &
£l
);

1355 
	}
}

1359 
míu_íåy
 
	ge_míu_∂ugö_gpu_u«i
[] =

1361 
mì_⁄off
 ("SkùÉvîy 2ndÜöe", 0, 
∂_ª¨med_cbs
.
gpu_u«i
.
löeskù
, 1),

1362 
mì_⁄off
 ("Abe'†Odys£y hack", 0, 
∂_ª¨med_cbs
.
gpu_u«i
.
abe_hack
, 1),

1363 
mì_⁄off
 ("DißbÀÜightög", 0, 
∂_ª¨med_cbs
.
gpu_u«i
.
no_light
, 1),

1364 
mì_⁄off
 ("DißbÀ bÀndög", 0, 
∂_ª¨med_cbs
.
gpu_u«i
.
no_bÀnd
, 1),

1365 
mì_íd
,

1368 
	$míu_lo›_∂ugö_gpu_u«i
(
id
, 
keys
)

1370 
£l
 = 0;

1371 
	`me_lo›
(
e_míu_∂ugö_gpu_u«i
, &
£l
);

1373 
	}
}

1375 c⁄° *
	gmí_gpu_dôhîög
[] = { "N⁄e", "Gamêdïíd™t", "Always", 
NULL
 };

1377 c⁄° 
	gh_gpu_1
[] = "Capcom fighting games";

1378 c⁄° 
	gh_gpu_2
[] = "Black screens in Lunar";

1379 c⁄° 
	gh_gpu_3
[] = "Compatibility mode";

1380 c⁄° 
	gh_gpu_6
[] = "Pandemonium 2";

1382 c⁄° 
	gh_gpu_8
[] = "Needed by Dark Forces";

1383 c⁄° 
	gh_gpu_9
[] = "better g-colors, worseÅextures";

1384 c⁄° 
	gh_gpu_10
[] = "Toggle busy flagsáfter drawing";

1386 
míu_íåy
 
	ge_míu_∂ugö_gpu_≥›s
[] =

1388 
mì_íum
 ("Dôhîög", 0, 
∂_ª¨med_cbs
.
gpu_≥›s
.
iU£Dôhî
, 
mí_gpu_dôhîög
),

1390 
mì_⁄off_h
 ("Ex∑nd s¸ì¿width", 0, 
∂_ª¨med_cbs
.
gpu_≥›s
.
dwA˘Fixes
, 1<<1, 
h_gpu_1
),

1391 
mì_⁄off_h
 ("Ign‹êbrighäes†cﬁ‹", 0, 
∂_ª¨med_cbs
.
gpu_≥›s
.
dwA˘Fixes
, 1<<2, 
h_gpu_2
),

1392 
mì_⁄off_h
 ("DißbÀ co‹dö©êcheck", 0, 
∂_ª¨med_cbs
.
gpu_≥›s
.
dwA˘Fixes
, 1<<3, 
h_gpu_3
),

1393 
mì_⁄off_h
 ("Lazy s¸ì¿upd©e", 0, 
∂_ª¨med_cbs
.
gpu_≥›s
.
dwA˘Fixes
, 1<<6, 
h_gpu_6
),

1395 
mì_⁄off_h
 ("Rïóãd fœàãxÅrüngÀ†",0,
∂_ª¨med_cbs
.
gpu_≥›s
.
dwA˘Fixes
, 1<<8, 
h_gpu_8
),

1396 
mì_⁄off_h
 ("Døw quad†wôhÅrüngÀs", 0, 
∂_ª¨med_cbs
.
gpu_≥›s
.
dwA˘Fixes
, 1<<9, 
h_gpu_9
),

1397 
mì_⁄off_h
 ("Fakê'gpu busy' sèãs", 0, 
∂_ª¨med_cbs
.
gpu_≥›s
.
dwA˘Fixes
, 1<<10, 
h_gpu_10
),

1398 
mì_íd
,

1401 
	$míu_lo›_∂ugö_gpu_≥›s
(
id
, 
keys
)

1403 
£l
 = 0;

1404 
	`me_lo›
(
e_míu_∂ugö_gpu_≥›s
, &
£l
);

1406 
	}
}

1408 c⁄° *
	gmí_≥›sgl_ãxfûãr
[] = { "None", "Standard", "Extended",

1409 "Sènd¨d-•rôes", "Exãnded-•rôes", "Sènd¨d+•rôes", "Exãnded+•rôes", 
NULL
 };

1410 c⁄° *
	gmí_≥›sgl_fbãx
[] = { "Emulated VRam", "Black", "Card", "Card+soft" };

1412 
míu_íåy
 
	ge_míu_∂ugö_gpu_≥›sgl
[] =

1414 
mì_⁄off
 ("Dôhîög", 0, 
∂_ª¨med_cbs
.
gpu_≥›sgl
.
bDøwDôhî
, 1),

1415 
mì_íum
 ("Textuª Fûãrög", 0, 
∂_ª¨med_cbs
.
gpu_≥›sgl
.
iFûãrTy≥
, 
mí_≥›sgl_ãxfûãr
),

1416 
mì_íum
 ("Fømebuf„∏Textuªs", 0, 
∂_ª¨med_cbs
.
gpu_≥›sgl
.
iFømeTexTy≥
, 
mí_≥›sgl_fbãx
),

1417 
mì_⁄off
 ("Mask Dëe˘", 0, 
∂_ª¨med_cbs
.
gpu_≥›sgl
.
iU£Mask
, 1),

1418 
mì_⁄off
 ("O∑quêPass", 0, 
∂_ª¨med_cbs
.
gpu_≥›sgl
.
bO∑quePass
, 1),

1419 
mì_⁄off
 ("Adv™˚d BÀnd", 0, 
∂_ª¨med_cbs
.
gpu_≥›sgl
.
bAdv™˚dBÀnd
, 1),

1420 
mì_⁄off
 ("U£ Fa° Mdec", 0, 
∂_ª¨med_cbs
.
gpu_≥›sgl
.
bU£Fa°Mdec
, 1),

1421 
mì_ønge
 ("Textuª RAM sizê(MB)", 0, 
∂_ª¨med_cbs
.
gpu_≥›sgl
.
iVRamSize
, 4, 128),

1422 
mì_⁄off
 ("Textuª g¨bagêcﬁÀ˘i⁄", 0, 
∂_ª¨med_cbs
.
gpu_≥›sgl
.
iTexG¨bageCﬁÀ˘i⁄
, 1),

1423 
mì_œbñ
 ("Fixes/hacks:"),

1424 
mì_⁄off
 ("FF7 curs‹", 0, 
∂_ª¨med_cbs
.
gpu_≥›sgl
.
dwA˘Fixes
, 1<<0),

1425 
mì_⁄off
 ("Dúe˘ FB upd©es", 0, 
∂_ª¨med_cbs
.
gpu_≥›sgl
.
dwA˘Fixes
, 1<<1),

1426 
mì_⁄off
 ("Bœck brighäess", 0, 
∂_ª¨med_cbs
.
gpu_≥›sgl
.
dwA˘Fixes
, 1<<2),

1427 
mì_⁄off
 ("Sw≠ fr⁄àdëe˘i⁄", 0, 
∂_ª¨med_cbs
.
gpu_≥›sgl
.
dwA˘Fixes
, 1<<3),

1428 
mì_⁄off
 ("DißbÀ co‹d check", 0, 
∂_ª¨med_cbs
.
gpu_≥›sgl
.
dwA˘Fixes
, 1<<4),

1429 
mì_⁄off
 ("Nÿbluêglôche†(LoD)", 0, 
∂_ª¨med_cbs
.
gpu_≥›sgl
.
dwA˘Fixes
, 1<<5),

1430 
mì_⁄off
 ("So· FBác˚ss", 0, 
∂_ª¨med_cbs
.
gpu_≥›sgl
.
dwA˘Fixes
, 1<<6),

1431 
mì_⁄off
 ("FF9Ñe˘", 0, 
∂_ª¨med_cbs
.
gpu_≥›sgl
.
dwA˘Fixes
, 1<<9),

1432 
mì_⁄off
 ("Nÿsubå. bÀndög", 0, 
∂_ª¨med_cbs
.
gpu_≥›sgl
.
dwA˘Fixes
, 1<<10),

1433 
mì_⁄off
 ("Lazy u∂ﬂd (DW7)", 0, 
∂_ª¨med_cbs
.
gpu_≥›sgl
.
dwA˘Fixes
, 1<<11),

1434 
mì_⁄off
 ("Addôi⁄Æ u∂ﬂds", 0, 
∂_ª¨med_cbs
.
gpu_≥›sgl
.
dwA˘Fixes
, 1<<15),

1435 
mì_íd
,

1438 
	$míu_lo›_∂ugö_gpu_≥›sgl
(
id
, 
keys
)

1440 
£l
 = 0;

1441 
	`me_lo›
(
e_míu_∂ugö_gpu_≥›sgl
, &
£l
);

1443 
	}
}

1445 c⁄° *
	gmí_•u_öãΩ
[] = { "N⁄e", "Sim∂e", "Gaussün", "Cubic", 
NULL
 };

1446 c⁄° 
	gh_•u_vﬁboo°
[] = "Large values cause distortion";

1447 c⁄° 
	gh_•u_ãmpo
[] = "Slows downáudio ifÉmu isÅoo slow\n"

1450 
míu_íåy
 
	ge_míu_∂ugö_•u
[] =

1452 
mì_ønge_h
 ("Vﬁumêboo°", 0, 
vﬁume_boo°
, -5, 30, 
h_•u_vﬁboo°
),

1453 
mì_⁄off
 ("Revîb", 0, 
•u_c⁄fig
.
iU£Revîb
, 1),

1454 
mì_íum
 ("I¡îpﬁ©i⁄", 0, 
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
, 
mí_•u_öãΩ
),

1455 
mì_⁄off
 ("Adju° XAÖôch", 0, 
•u_c⁄fig
.
iXAPôch
, 1),

1456 
mì_⁄off_h
 ("Adju°Åempo", 0, 
•u_c⁄fig
.
iTempo
, 1, 
h_•u_ãmpo
),

1457 
mì_íd
,

1460 
	$míu_lo›_∂ugö_•u
(
id
, 
keys
)

1462 
£l
 = 0;

1463 
	`me_lo›
(
e_míu_∂ugö_•u
, &
£l
);

1465 
	}
}

1467 c⁄° 
	gh_bios
[] = "HLE is simulated BIOS. BIOS selection is saved in\n"

1470 c⁄° 
	gh_∂ugö_gpu
[] =

1471 #ifde‡
__ARM_NEON__


1478 c⁄° 
	gh_∂ugö_•u
[] = "spunullÉffectively disables sound\n"

1480 c⁄° 
	gh_gpu_≥›s
[] = "Configure P.E.Op.S. SoftGL Driver V1.17";

1481 c⁄° 
	gh_gpu_≥›sgl
[]= "Configure P.E.Op.S. MesaGL Driver V1.78";

1482 c⁄° 
	gh_gpu_u«i
[] = "Configure Unai/PCSX4ALL Team GPUÖlugin";

1483 c⁄° 
	gh_•u
[] = "Configure built-in P.E.Op.S. Sound Driver V1.7";

1485 
míu_íåy
 
	ge_míu_∂ugö_›ti⁄s
[] =

1487 
mì_íum_h
 ("BIOS", 0, 
bios_£l
, 
bio£s
, 
h_bios
),

1488 
mì_íum_h
 ("GPUÖlugö", 0, 
gpu_∂ug£l
, 
gpu_∂ugös
, 
h_∂ugö_gpu
),

1489 
mì_íum_h
 ("SPUÖlugö", 0, 
•u_∂ug£l
, 
•u_∂ugös
, 
h_∂ugö_•u
),

1490 #ifde‡
__ARM_NEON__


1491 
mì_h™dÀr_h
 ("C⁄figuª buût-ö GPUÖlugö", 
míu_lo›_∂ugö_gpu_√⁄
, 
h_gpu_√⁄
),

1493 
mì_h™dÀr_h
 ("C⁄figuª gpu_≥›†∂ugö", 
míu_lo›_∂ugö_gpu_≥›s
, 
h_gpu_≥›s
),

1494 
mì_h™dÀr_h
 ("C⁄figuª gpu_u«òGPUÖlugö", 
míu_lo›_∂ugö_gpu_u«i
, 
h_gpu_u«i
),

1495 
mì_h™dÀr_h
 ("C⁄figuª gpu_gÀ†GPUÖlugö", 
míu_lo›_∂ugö_gpu_≥›sgl
, 
h_gpu_≥›sgl
),

1496 
mì_h™dÀr_h
 ("C⁄figuª buût-ö SPUÖlugö", 
míu_lo›_∂ugö_•u
, 
h_•u
),

1497 
mì_íd
,

1500 
míu_íåy
 
	ge_míu_maö2
[];

1502 
	$míu_lo›_∂ugö_›ti⁄s
(
id
, 
keys
)

1504 
£l
 = 0;

1505 
	`me_lo›
(
e_míu_∂ugö_›ti⁄s
, &
£l
);

1508 
	`¢¥ötf
(
C⁄fig
.
Bios
, (C⁄fig.Bios), "%s", 
bio£s
[
bios_£l
]);

1509 
	`¢¥ötf
(
C⁄fig
.
Gpu
, (C⁄fig.Gpu), "%s", 
gpu_∂ugös
[
gpu_∂ug£l
]);

1510 
	`¢¥ötf
(
C⁄fig
.
Spu
, (C⁄fig.Spu), "%s", 
•u_∂ugös
[
•u_∂ug£l
]);

1511 
	`me_íabÀ
(
e_míu_maö2
, 
MA_MAIN_RUN_BIOS
, 
bios_£l
 != 0);

1514 
	}
}

1518 c⁄° 
	gh_cfg_psx˛k
[] = "Ovî/undî-˛ockÅhêPSX, deÁu… i†" 
DEFAULT_PSX_CLOCK_S
 "\n"

1520 c⁄° 
	gh_cfg_nosmc
[] = "Will cause crashes whenÜoading, break memcards";

1521 c⁄° 
	gh_cfg_gãu¬
[] = "May cause graphical glitches";

1522 c⁄° 
	gh_cfg_gãÊgs
[] = "Will cause graphical glitches";

1524 
míu_íåy
 
	ge_míu_•ìd_hacks
[] =

1526 
mì_ønge_h
 ("PSX CPU clock, %%", 0, 
psx_˛ock
, 1, 500, 
h_cfg_psx˛k
),

1527 
mì_⁄off_h
 ("DißbÀ SMC checks", 0, 
√w_dy«ªc_hacks
, 
NDHACK_NO_SMC_CHECK
, 
h_cfg_nosmc
),

1528 
mì_⁄off_h
 ("AssumêGTEÑeg†u¬ìded", 0, 
√w_dy«ªc_hacks
, 
NDHACK_GTE_UNNEEDED
, 
h_cfg_gãu¬
),

1529 
mì_⁄off_h
 ("DißbÀ GTE fœgs", 0, 
√w_dy«ªc_hacks
, 
NDHACK_GTE_NO_FLAGS
, 
h_cfg_gãÊgs
),

1530 
mì_íd
,

1533 
	$míu_lo›_•ìd_hacks
(
id
, 
keys
)

1535 
£l
 = 0;

1536 
	`me_lo›
(
e_míu_•ìd_hacks
, &
£l
);

1538 
	}
}

1540 c⁄° 
	gh_cfg_˝ul
[] = "Shows CPU usage in %";

1541 c⁄° 
	gh_cfg_•u
[] = "Showsáctive SPU channels\n"

1543 c⁄° 
	gh_cfg_Ê
[] = "Frame Limiter keepsÅhe game fromÑunningÅoo fast";

1544 c⁄° 
	gh_cfg_xa
[] = "Disables XA sound, which can sometimes improveÖerformance";

1545 c⁄° 
	gh_cfg_cdda
[] = "Disable CD Audio foráÖerformance boost\n"

1547 c⁄° 
	gh_cfg_sio
[] = "You shouldÇotÇeedÅhis, breaks games";

1548 c⁄° 
	gh_cfg_•uúq
[] = "CompatibilityÅweak; should beÜeft off";

1549 c⁄° 
	gh_cfg_r˙t1
[] = "Parasite Eve 2, Vandal Hearts 1/2 Fix\n"

1551 c⁄° 
	gh_cfg_r˙t2
[] = "InuYasha Sengoku Battle Fix\n"

1553 c⁄° 
	gh_cfg_nodrc
[] = "Disable dynamicÑecompileránd use interpreter\n"

1555 c⁄° 
	gh_cfg_shacks
[] = "Breaks games but may give betterÖerformance\n"

1558 
míu_íåy
 
	ge_míu_adv_›ti⁄s
[] =

1560 
mì_⁄off_h
 ("Show CPUÜﬂd", 0, 
g_›ts
, 
OPT_SHOWCPU
, 
h_cfg_˝ul
),

1561 
mì_⁄off_h
 ("Show SPU ch™√ls", 0, 
g_›ts
, 
OPT_SHOWSPU
, 
h_cfg_•u
),

1562 
mì_⁄off_h
 ("DißbÀ FømêLimôî", 0, 
g_›ts
, 
OPT_NO_FRAMELIM
, 
h_cfg_Ê
),

1563 
mì_⁄off_h
 ("DißbÀ XA Decodög", 0, 
C⁄fig
.
Xa
, 1, 
h_cfg_xa
),

1564 
mì_⁄off_h
 ("DißbÀ CD Audio", 0, 
C⁄fig
.
Cdda
, 1, 
h_cfg_cdda
),

1566 
mì_⁄off_h
 ("SPU IRQ Alway†E«bÀd", 0, 
C⁄fig
.
SpuIrq
, 1, 
h_cfg_•uúq
),

1568 
mì_⁄off_h
 ("RoŸcou¡î hack 2", 0, 
C⁄fig
.
VSyncWA
, 1, 
h_cfg_r˙t2
),

1569 
mì_⁄off_h
 ("DißbÀ dy«ª¯(¶ow!)",0, 
C⁄fig
.
Cpu
, 1, 
h_cfg_nodrc
),

1570 
mì_h™dÀr_h
 ("[S≥ed hacks]", 
míu_lo›_•ìd_hacks
, 
h_cfg_shacks
),

1571 
mì_íd
,

1574 
	$míu_lo›_adv_›ti⁄s
(
id
, 
keys
)

1576 
£l
 = 0;

1577 
	`me_lo›
(
e_míu_adv_›ti⁄s
, &
£l
);

1579 
	}
}

1583 
	$mh_ª°‹e_deÁu…s
(
id
, 
keys
)

1585 
	`míu_£t_defc⁄fig
();

1586 
	`míu_upd©e_msg
("defaultsÑestored");

1588 
	}
}

1590 c⁄° *
	gmí_ªgi⁄
[] = { "Auto", "NTSC", "PAL", 
NULL
 };

1591 c⁄° *
	gmí_‰ameskù
[] = { "Auto", "Off", "1", "2", "3", 
NULL
 };

1597 c⁄° 
	gh_ª°‹e_def
[] = "Switches backÅo default /Ñecommended\n"

1599 c⁄° 
	gh_‰ameskù
[] = "Warning: frameskip sometimes causes glitches\n";

1601 
míu_íåy
 
	ge_míu_›ti⁄s
[] =

1605 
mì_íum_h
 ("Fømeskù", 0, 
‰ameskù
, 
mí_‰ameskù
, 
h_‰ameskù
),

1606 
mì_⁄off
 ("Show FPS", 0, 
g_›ts
, 
OPT_SHOWFPS
),

1607 
mì_íum
 ("Regi⁄", 0, 
ªgi⁄
, 
mí_ªgi⁄
),

1608 
mì_ønge
 ("CPU clock", 
MA_OPT_CPU_CLOCKS
, 
˝u_˛ock
, 20, 5000),

1609 #ifde‡
C64X_DSP


1610 
mì_⁄off
 ("U£ C64x DSP f‹ sound", 
MA_OPT_SPU_THREAD
, 
•u_c⁄fig
.
iU£Thªad
, 1),

1612 
mì_⁄off
 ("Thªaded SPU", 
MA_OPT_SPU_THREAD
, 
•u_c⁄fig
.
iU£Thªad
, 1),

1614 
mì_h™dÀr_id
("[Di•œy]", 
MA_OPT_DISP_OPTS
, 
míu_lo›_gfx_›ti⁄s
),

1615 
mì_h™dÀr
 ("[BIOS/Plugös]", 
míu_lo›_∂ugö_›ti⁄s
),

1616 
mì_h™dÀr
 ("[Adv™˚d]", 
míu_lo›_adv_›ti⁄s
),

1617 
mì_cu°_noßve
("SavêglobÆ c⁄fig", 
MA_OPT_SAVECFG
, 
mh_ßvecfg
, 
mgn_ßvñﬂdcfg
),

1618 
mì_cu°_noßve
("Savêcfg f‹Üﬂded game",
MA_OPT_SAVECFG_GAME
, 
mh_ßvecfg
, 
mgn_ßvñﬂdcfg
),

1619 
mì_h™dÀr_h
 ("Re°‹êdeÁu… c⁄fig", 
mh_ª°‹e_deÁu…s
, 
h_ª°‹e_def
),

1620 
mì_íd
,

1623 
	$míu_lo›_›ti⁄s
(
id
, 
keys
)

1625 
£l
 = 0;

1627 
	`me_íabÀ
(
e_míu_›ti⁄s
, 
MA_OPT_CPU_CLOCKS
, 
˝u_˛ock_°
 > 0);

1628 
	`me_íabÀ
(
e_míu_›ti⁄s
, 
MA_OPT_SPU_THREAD
, 
•u_c⁄fig
.
iThªadAvaû
);

1629 
	`me_íabÀ
(
e_míu_›ti⁄s
, 
MA_OPT_SAVECFG_GAME
, 
ªady_to_go
 && 
CdromId
[0]);

1631 
	`me_lo›
(
e_míu_›ti⁄s
, &
£l
);

1634 
	}
}

1638 
	$døw_‰ame_debug
(
GPUFªeze_t
 *
gpuf
, 
x
, 
y
)

1640 
w
 = 
	`mö
(
g_míus¸ìn_w
, 1024);

1641 
h
 = 
	`mö
(
g_míus¸ìn_h
, 512);

1642 
u16
 *
d
 = 
g_míus¸ìn_±r
;

1643 
u16
 *
s
 = (u16 *)
gpuf
->
psxVRam
 + 
y
 * 1024 + 
x
;

1644 
buff
[64];

1645 
ty
 = 1;

1647 
gpuf
->
ulFªezeVîsi⁄
 = 1;

1648 i‡(
GPU_‰ìze
 !
NULL
)

1649 
	`GPU_‰ìze
(1, 
gpuf
);

1651 ; 
h
 > 0; h--, 
d
 +
g_míus¸ìn_w
, 
s
 += 1024)

1652 
	`bgr555_to_rgb565
(
d
, 
s
, 
w
 * 2);

1654 
	`smÆ…ext_out16
(4, 1, "buûd: "
__DATE__
 " " 
__TIME__
 " " 
REV
, 0xe7fc);

1655 
	`¢¥ötf
(
buff
, (buff), "GPU sr: %08x", 
gpuf
->
ulSètus
);

1656 
	`smÆ…ext_out16
(4, (
ty
 +
me_sf⁄t_h
), 
buff
, 0xe7fc);

1657 
	`¢¥ötf
(
buff
, (buff), "PC/SP: %08x %08x", 
psxRegs
.
pc
,ÖsxRegs.
GPR
.
n
.
•
);

1658 
	`smÆ…ext_out16
(4, (
ty
 +
me_sf⁄t_h
), 
buff
, 0xe7fc);

1659 
	}
}

1661 
	$debug_míu_lo›
()

1663 
öp
, 
df_x
 = 0, 
df_y
 = 0;

1664 
GPUFªeze_t
 *
gpuf
;

1666 
gpuf
 = 
	`mÆloc
((*gpuf));

1667 i‡(
gpuf
 =
NULL
)

1672 
	`míu_døw_begö
(0, 1);

1673 
	`døw_‰ame_debug
(
gpuf
, 
df_x
, 
df_y
);

1674 
	`míu_døw_íd
();

1676 
öp
 = 
	`ö_míu_waô
(
PBTN_MOK
|
PBTN_MBACK
|
PBTN_MA2
|
PBTN_MA3
|
PBTN_L
|
PBTN_R
 |

1677 
PBTN_UP
|
PBTN_DOWN
|
PBTN_LEFT
|
PBTN_RIGHT
, 
NULL
, 10);

1678 i‡(
öp
 & 
PBTN_MBACK
) ;

1679 i‡(
öp
 & 
PBTN_UP
Ë{ i‡(
df_y
 > 0) df_y--; }

1680 i‡(
öp
 & 
PBTN_DOWN
Ë{ i‡(
df_y
 < 512 - 
g_míus¸ìn_h
) df_y++; }

1681 i‡(
öp
 & 
PBTN_LEFT
Ë{ i‡(
df_x
 > 0) df_x -= 2; }

1682 i‡(
öp
 & 
PBTN_RIGHT
Ë{ i‡(
df_x
 < 1024 - 
g_míus¸ìn_w
) df_x += 2; }

1685 
	`‰ì
(
gpuf
);

1686 
	}
}

1690 
	$døw_mc_ic⁄
(
dx
, 
dy
, c⁄° 
u16
 *
s
)

1692 
u16
 *
d
;

1693 
x
, 
y
, 
l
, 
p
;

1695 
d
 = (
u16
 *)
g_míus¸ìn_±r
 + 
g_míus¸ìn_w
 * 
dy
 + 
dx
;

1697 
y
 = 0; y < 16; y++, 
s
 += 16) {

1698 
l
 = 0;Ü < 2;Ü++, 
d
 +
g_míus¸ìn_w
) {

1699 
x
 = 0; x < 16; x++) {

1700 
p
 = 
s
[
x
];

1701 
d
[
x
*2] = d[x*2 + 1] = ((
p
 & 0x7c00) >> 10)

1702 | ((
p
 & 0x03e0) << 1) | ((p & 0x1f) << 11);

1706 
	}
}

1708 
	$døw_mc_bg
()

1710 
McdBlock
 *
blocks1
, *
blocks2
;

1711 
maxic⁄s
 = 15;

1712 
i
, 
y
, 
row2
;

1714 
blocks1
 = 
	`mÆloc
(15 * (blocks1[0]));

1715 
blocks2
 = 
	`mÆloc
(15 * (
blocks1
[0]));

1716 i‡(
blocks1
 =
NULL
 || 
blocks2
 == NULL)

1717 
out
;

1719 
i
 = 0; i < 15; i++) {

1720 
	`GëMcdBlockInfo
(1, 
i
 + 1, &
blocks1
[i]);

1721 
	`GëMcdBlockInfo
(2, 
i
 + 1, &
blocks2
[i]);

1724 
	`míu_døw_begö
(1, 1);

1726 
	`mem˝y
(
g_míus¸ìn_±r
, 
g_míubg_§c_±r
, 
g_míus¸ìn_w
 * 
g_míus¸ìn_h
 * 2);

1728 
y
 = 
g_míus¸ìn_h
 / 2 - 15 * 32 / 2;

1729 i‡(
y
 < 0) {

1731 
y
 = 0;

1732 
maxic⁄s
 = 
g_míus¸ìn_h
 / 32;

1735 
row2
 = 
g_míus¸ìn_w
 / 2;

1736 
i
 = 0; i < 
maxic⁄s
; i++) {

1737 
	`døw_mc_ic⁄
(8, 
y
 + 
i
 * 32, (
u16
 *)
blocks1
[i].
Ic⁄
);

1738 
	`smÆ…ext_out16
(10+32, 
y
 + 
i
 * 32 + 8, 
blocks1
[i].
sTôÀ
, 0xf71e);

1740 
	`døw_mc_ic⁄
(
row2
 + 8, 
y
 + 
i
 * 32, (
u16
 *)
blocks2
[i].
Ic⁄
);

1741 
	`smÆ…ext_out16
(
row2
 + 10+32, 
y
 + 
i
 * 32 + 8, 
blocks2
[i].
sTôÀ
, 0xf71e);

1744 
	`míu_d¨kí_bg
(
g_míubg_±r
, 
g_míus¸ìn_±r
, 
g_míus¸ìn_w
 * 
g_míus¸ìn_h
, 0);

1746 
	`míu_døw_íd
();

1747 
out
:

1748 
	`‰ì
(
blocks1
);

1749 
	`‰ì
(
blocks2
);

1750 
	}
}

1752 
	$h™dÀ_memˇrd_£l
()

1754 
	`°r˝y
(
C⁄fig
.
Mcd1
, "none");

1755 i‡(
memˇrd1_£l
 != 0)

1756 
	`¢¥ötf
(
C⁄fig
.
Mcd1
, (C⁄fig.Mcd1), ".%s%s", 
MEMCARD_DIR
, 
memˇrds
[
memˇrd1_£l
]);

1757 
	`°r˝y
(
C⁄fig
.
Mcd2
, "none");

1758 i‡(
memˇrd2_£l
 != 0)

1759 
	`¢¥ötf
(
C⁄fig
.
Mcd2
, (C⁄fig.Mcd2), ".%s%s", 
MEMCARD_DIR
, 
memˇrds
[
memˇrd2_£l
]);

1760 
	`LﬂdMcds
(
C⁄fig
.
Mcd1
, C⁄fig.
Mcd2
);

1761 
	`døw_mc_bg
();

1762 
	}
}

1764 
míu_íåy
 
	ge_memˇrd_›ti⁄s
[] =

1766 
mì_íum
("Mem‹y c¨d 1", 0, 
memˇrd1_£l
, 
memˇrds
),

1767 
mì_íum
("Mem‹y c¨d 2", 0, 
memˇrd2_£l
, 
memˇrds
),

1768 
mì_íd
,

1771 
	$míu_lo›_memˇrds
(
id
, 
keys
)

1773 
£l
 = 0;

1774 *
p
;

1775 
i
;

1777 
memˇrd1_£l
 = 
memˇrd2_£l
 = 0;

1778 
p
 = 
	`°ºchr
(
C⁄fig
.
Mcd1
, '/');

1779 i‡(
p
 !
NULL
)

1780 
i
 = 0; 
memˇrds
[i] !
NULL
; i++)

1781 i‡(
	`°rcmp
(
p
 + 1, 
memˇrds
[
i
]) == 0)

1782 { 
memˇrd1_£l
 = 
i
; ; }

1783 
p
 = 
	`°ºchr
(
C⁄fig
.
Mcd2
, '/');

1784 i‡(
p
 !
NULL
)

1785 
i
 = 0; 
memˇrds
[i] !
NULL
; i++)

1786 i‡(
	`°rcmp
(
p
 + 1, 
memˇrds
[
i
]) == 0)

1787 { 
memˇrd2_£l
 = 
i
; ; }

1789 
	`me_lo›_d
(
e_memˇrd_›ti⁄s
, &
£l
, 
h™dÀ_memˇrd_£l
, 
NULL
);

1791 
	`mem˝y
(
g_míubg_±r
, 
g_míubg_§c_±r
, 
g_míus¸ìn_w
 * 
g_míus¸ìn_h
 * 2);

1794 
	}
}

1798 
	$døw_chóéi°
(
£l
)

1800 
max_˙t
, 
°¨t
, 
i
, 
pos
, 
a˘ive
;

1802 
max_˙t
 = 
g_míus¸ìn_h
 / 
me_sf⁄t_h
;

1803 
°¨t
 = 
max_˙t
 / 2 - 
£l
;

1805 
	`míu_døw_begö
(1, 1);

1807 
i
 = 0; i < 
NumChóts
; i++) {

1808 
pos
 = 
°¨t
 + 
i
;

1809 i‡(
pos
 < 0) ;

1810 i‡(
pos
 >
max_˙t
) ;

1811 
a˘ive
 = 
Chóts
[
i
].
E«bÀd
;

1812 
	`smÆ…ext_out16
(14, 
pos
 * 
me_sf⁄t_h
,

1813 
a˘ive
 ? "ON " : "OFF",áctive ? 0xfff6 : 0xffff);

1814 
	`smÆ…ext_out16
(14 + 
me_sf⁄t_w
*4, 
pos
 * 
me_sf⁄t_h
,

1815 
Chóts
[
i
].
Des¸
, 
a˘ive
 ? 0xfff6 : 0xffff);

1817 
pos
 = 
°¨t
 + 
i
;

1818 i‡(
pos
 < 
max_˙t
)

1819 
	`smÆ…ext_out16
(14, 
pos
 * 
me_sf⁄t_h
, "done", 0xffff);

1821 
	`ãxt_out16
(5, 
max_˙t
 / 2 * 
me_sf⁄t_h
, ">");

1822 
	`míu_døw_íd
();

1823 
	}
}

1825 
	$míu_lo›_chóts
()

1827 
míu_£l
 = 0;

1828 
öp
;

1832 
	`døw_chóéi°
(
míu_£l
);

1833 
öp
 = 
	`ö_míu_waô
(
PBTN_UP
|
PBTN_DOWN
|
PBTN_LEFT
|
PBTN_RIGHT
|
PBTN_L
|
PBTN_R


1834 |
PBTN_MOK
|
PBTN_MBACK
, 
NULL
, 33);

1835 i‡(
öp
 & 
PBTN_UP
 ) { 
míu_£l
--; i‡(míu_£»< 0Ëmíu_£»
NumChóts
; }

1836 i‡(
öp
 & 
PBTN_DOWN
Ë{ 
míu_£l
++; i‡(míu_£»> 
NumChóts
) menu_sel = 0; }

1837 i‡(
öp
 &(
PBTN_LEFT
|
PBTN_L
)Ë{ 
míu_£l
-=10; if (menu_sel < 0) menu_sel = 0; }

1838 i‡(
öp
 &(
PBTN_RIGHT
|
PBTN_R
)Ë{ 
míu_£l
+=10; i‡(míu_£»> 
NumChóts
) menu_sel = NumCheats; }

1839 i‡(
öp
 & 
PBTN_MOK
) {

1840 i‡(
míu_£l
 < 
NumChóts
)

1841 
Chóts
[
míu_£l
].
E«bÀd
 = !Cheats[menu_sel].Enabled;

1844 i‡(
öp
 & 
PBTN_MBACK
)

1847 
	}
}

1851 
	$míu_bios_w¨n
()

1853 
öp
;

1854 c⁄° 
msg
[] =

1857 
MENU_BIOS_PATH
 "\n\n"

1869 
tmp_msg
[(
msg
) + 64];

1871 
	`¢¥ötf
(
tmp_msg
, —mp_msg), 
msg
,

1872 
	`ö_gë_key_«me
(-1, -
PBTN_MOK
), in_gë_key_«me(-1, -
PBTN_MBACK
));

1875 
	`døw_míu_mesßge
(
tmp_msg
, 
NULL
);

1877 
öp
 = 
	`ö_míu_waô
(
PBTN_MOK
|
PBTN_MBACK
, 
NULL
, 70);

1878 i‡(
öp
 & (
PBTN_MBACK
|
PBTN_MOK
))

1881 
	}
}

1885 
míu_íåy
 
	ge_míu_maö
[];

1887 
	$døw_‰ame_maö
()

1889 
tm
 *
tmp
;

1890 
time_t
 
…ime
;

1891 
ˇ∑côy
;

1892 
…ime_s
[16];

1893 
buff
[64];

1894 *
out
;

1896 i‡(
CdromId
[0] != 0) {

1897 
	`¢¥ötf
(
buff
, (buff), "%.32s/%.9s (runningás %s, with %s)",

1898 
	`gë_cd_œbñ
(), 
CdromId
, 
C⁄fig
.
PsxTy≥
 ? "PAL" : "NTSC",

1899 
C⁄fig
.
HLE
 ? "HLE" : "BIOS");

1900 
	`smÆ…ext_out16
(4, 1, 
buff
, 0x105f);

1903 i‡(
ªady_to_go
) {

1904 
ˇ∑côy
 = 
	`∂©_èrgë_b©_ˇ∑côy_gë
();

1905 
…ime
 = 
	`time
(
NULL
);

1906 
tmp
 = 
	`loˇ…ime
(&
…ime
);

1907 
	`°r·ime
(
…ime_s
, ÷time_s), "%H:%M", 
tmp
);

1908 i‡(
ˇ∑côy
 >= 0) {

1909 
	`¢¥ötf
(
buff
, (buff), "%†%3d%%", 
…ime_s
, 
ˇ∑côy
);

1910 
out
 = 
buff
;

1913 
out
 = 
…ime_s
;

1914 
	`smÆ…ext_out16
(4, 1 + 
me_sf⁄t_h
, 
out
, 0x105f);

1916 
	}
}

1918 
	$døw_‰ame_¸edôs
()

1920 
	`smÆ…ext_out16
(4, 1, "buûd: " 
__DATE__
 " " 
__TIME__
 " " 
REV
, 0xe7fc);

1921 
	}
}

1923 c⁄° 
	g¸edôs_ãxt
[] =

1929 #ifde‡
__ARM_NEON__


1939 
	$ª£t_game
()

1942 i‡(
bios_£l
 =0 && !
C⁄fig
.
HLE
)

1945 
	`Clo£Plugös
();

1946 
	`O≥nPlugös
();

1947 
	`SysRe£t
();

1948 i‡(
	`CheckCdrom
() != -1) {

1949 
	`LﬂdCdrom
();

1952 
	}
}

1954 
	$ªlﬂd_∂ugös
(c⁄° *
cdimg
)

1956 
∂_vout_buf
 = 
NULL
;

1958 
	`Clo£Plugös
();

1960 
	`£t_cd_image
(
cdimg
);

1961 
	`LﬂdPlugös
();

1962 
	`p˙t_hook_∂ugös
();

1963 
NëO≥√d
 = 0;

1964 i‡(
	`O≥nPlugös
() == -1) {

1965 
	`míu_upd©e_msg
("failedÅo openÖlugins");

1968 
	`∂ugö_ˇŒ_ª¨med_cbs
();

1970 
cdrIsoMu…idiskCou¡
 = 1;

1971 
CdromId
[0] = '\0';

1972 
CdromLabñ
[0] = '\0';

1975 
	}
}

1977 
	$run_bios
()

1979 i‡(
bios_£l
 == 0)

1982 
ªady_to_go
 = 0;

1983 i‡(
	`ªlﬂd_∂ugös
(
NULL
) != 0)

1985 
	`SysRe£t
();

1987 
ªady_to_go
 = 1;

1989 
	}
}

1991 
	$run_exe
()

1993 c⁄° *
exts
[] = { "exe", 
NULL
 };

1994 c⁄° *
‚ame
;

1996 
‚ame
 = 
	`míu_lo›_rom£l
(
œ°_£À˘ed_‚ame
,

1997 (
œ°_£À˘ed_‚ame
), 
exts
, 
NULL
);

1998 i‡(
‚ame
 =
NULL
)

2001 
ªady_to_go
 = 0;

2002 i‡(
	`ªlﬂd_∂ugös
(
NULL
) != 0)

2005 
	`SysRe£t
();

2006 i‡(
	`Lﬂd
(
‚ame
) != 0) {

2007 
	`míu_upd©e_msg
("exeÜoad failed, bad file?");

2008 
	`¥ötf
("meh\n");

2012 
ªady_to_go
 = 1;

2014 
	}
}

2016 
	$run_cd_image
(c⁄° *
‚ame
)

2018 
autﬁﬂd_°©e
 = 
g_auto°©ñd_›t
;

2020 
ªady_to_go
 = 0;

2021 
	`ªlﬂd_∂ugös
(
‚ame
);

2024 
C⁄fig
.
PsxAuto
 = 1;

2026 i‡(
	`CheckCdrom
() == -1) {

2028 
	`Clo£Plugös
();

2029 
	`míu_upd©e_msg
("unsupported/invalid CD image");

2033 
	`SysRe£t
();

2036 i‡(
	`LﬂdCdrom
() == -1) {

2037 
	`Clo£Plugös
();

2038 
	`míu_upd©e_msg
("failedÅoÜoad CD image");

2042 
	`emu_⁄_√w_cd
(1);

2043 
ªady_to_go
 = 1;

2045 i‡(
autﬁﬂd_°©e
) {

2046 
√we°
 = 0;

2047 
time
, 
¶Ÿ
, 
√we°_¶Ÿ
 = -1;

2049 
¶Ÿ
 = 0; slot < 10; slot++) {

2050 i‡(
	`emu_check_ßve_fûe
(
¶Ÿ
, &
time
)) {

2051 i‡(()
time
 > 
√we°
) {

2052 
√we°
 = 
time
;

2053 
√we°_¶Ÿ
 = 
¶Ÿ
;

2058 i‡(
√we°_¶Ÿ
 >= 0) {

2059 
	`Õrötf
("autﬁﬂd slŸ %d\n", 
√we°_¶Ÿ
);

2060 
	`emu_lﬂd_°©e
(
√we°_¶Ÿ
);

2063 
	`Õrötf
("no saveÅoáutoload.\n");

2068 
	}
}

2070 
	$rom£l_run
()

2072 
¥ev_gpu
, 
¥ev_•u
;

2073 c⁄° *
‚ame
;

2075 
‚ame
 = 
	`míu_lo›_rom£l
(
œ°_£À˘ed_‚ame
,

2076 (
œ°_£À˘ed_‚ame
), 
fûãr_exts
,

2077 
›ti⁄Æ_cdimg_fûãr
);

2078 i‡(
‚ame
 =
NULL
)

2081 
	`¥ötf
("£À˘ed fûe: %s\n", 
‚ame
);

2083 
	`√w_dy«ªc_˛ór_fuŒ
();

2085 i‡(
	`run_cd_image
(
‚ame
) != 0)

2088 
¥ev_gpu
 = 
gpu_∂ug£l
;

2089 
¥ev_•u
 = 
•u_∂ug£l
;

2090 i‡(
	`míu_lﬂd_c⁄fig
(1) != 0)

2091 
	`míu_lﬂd_c⁄fig
(0);

2095 i‡(
¥ev_gpu
 !
gpu_∂ug£l
 || 
¥ev_•u
 !
•u_∂ug£l
) {

2096 
	`¥ötf
("plugin change detected,ÑeloadingÖlugins..\n");

2097 i‡(
	`run_cd_image
(
‚ame
) != 0)

2101 
	`°r˝y
(
œ°_£À˘ed_‚ame
, 
‚ame
);

2102 
	`míu_do_œ°_cd_img
(0);

2104 
	}
}

2106 
	$sw≠_cd_image
()

2108 c⁄° *
‚ame
;

2110 
‚ame
 = 
	`míu_lo›_rom£l
(
œ°_£À˘ed_‚ame
,

2111 (
œ°_£À˘ed_‚ame
), 
fûãr_exts
,

2112 
›ti⁄Æ_cdimg_fûãr
);

2113 i‡(
‚ame
 =
NULL
)

2116 
	`¥ötf
("£À˘ed fûe: %s\n", 
‚ame
);

2118 
CdromId
[0] = '\0';

2119 
CdromLabñ
[0] = '\0';

2121 
	`£t_cd_image
(
‚ame
);

2122 i‡(
	`RñﬂdCdromPlugö
() < 0) {

2123 
	`míu_upd©e_msg
("failedÅoÜoad cdrÖlugin");

2126 i‡(
	`CDR_›í
() < 0) {

2127 
	`míu_upd©e_msg
("failedÅo open cdrÖlugin");

2131 
	`SëCdO≥nCa£Time
(
	`time
(
NULL
) + 2);

2132 
	`LidI¡îru±
();

2134 
	`°r˝y
(
œ°_£À˘ed_‚ame
, 
‚ame
);

2136 
	}
}

2138 
	$sw≠_cd_mu…idisk
()

2140 
cdrIsoMu…idiskSñe˘
++;

2141 
CdromId
[0] = '\0';

2142 
CdromLabñ
[0] = '\0';

2144 
	`CDR_˛o£
();

2145 i‡(
	`CDR_›í
() < 0) {

2146 
	`míu_upd©e_msg
("failedÅo open cdrÖlugin");

2150 
	`SëCdO≥nCa£Time
(
	`time
(
NULL
) + 2);

2151 
	`LidI¡îru±
();

2154 
	}
}

2156 
	$lﬂd_pcsx_cht
()

2158 c⁄° *
exts
[] = { "cht", 
NULL
 };

2159 c⁄° *
‚ame
;

2160 
msg
[64];

2162 
‚ame
 = 
	`míu_lo›_rom£l
(
œ°_£À˘ed_‚ame
,

2163 (
œ°_£À˘ed_‚ame
), 
exts
, 
NULL
);

2164 i‡(
‚ame
 =
NULL
)

2167 
	`¥ötf
("£À˘ed chóàfûe: %s\n", 
‚ame
);

2168 
	`LﬂdChóts
(
‚ame
);

2170 i‡(
NumChóts
 =0 && 
NumCodes
 == 0)

2171 
	`míu_upd©e_msg
("failedÅoÜoad cheats");

2173 
	`¢¥ötf
(
msg
, (msg), "%d chót(sËlﬂded", 
NumChóts
 + 
NumCodes
);

2174 
	`míu_upd©e_msg
(
msg
);

2176 
	`me_íabÀ
(
e_míu_maö
, 
MA_MAIN_CHEATS
, 
ªady_to_go
 && 
NumChóts
);

2177 
	}
}

2179 
	$maö_míu_h™dÀr
(
id
, 
keys
)

2181 
id
)

2183 
MA_MAIN_RESUME_GAME
:

2184 i‡(
ªady_to_go
)

2187 
MA_MAIN_SAVE_STATE
:

2188 i‡(
ªady_to_go
)

2189  
	`míu_lo›_ßve°©e
(0);

2191 
MA_MAIN_LOAD_STATE
:

2192 i‡(
ªady_to_go
)

2193  
	`míu_lo›_ßve°©e
(1);

2195 
MA_MAIN_RESET_GAME
:

2196 i‡(
ªady_to_go
 && 
	`ª£t_game
() == 0)

2199 
MA_MAIN_LOAD_ROM
:

2200 i‡(
	`rom£l_run
() == 0)

2203 
MA_MAIN_SWAP_CD
:

2204 i‡(
	`sw≠_cd_image
() == 0)

2207 
MA_MAIN_SWAP_CD_MULTI
:

2208 i‡(
	`sw≠_cd_mu…idisk
() == 0)

2211 
MA_MAIN_RUN_BIOS
:

2212 i‡(
	`run_bios
() == 0)

2215 
MA_MAIN_RUN_EXE
:

2216 i‡(
	`run_exe
() == 0)

2219 
MA_MAIN_CHEATS
:

2220 
	`míu_lo›_chóts
();

2222 
MA_MAIN_LOAD_CHEATS
:

2223 
	`lﬂd_pcsx_cht
();

2225 
MA_MAIN_CREDITS
:

2226 
	`døw_míu_mesßge
(
¸edôs_ãxt
, 
døw_‰ame_¸edôs
);

2227 
	`ö_míu_waô
(
PBTN_MOK
|
PBTN_MBACK
, 
NULL
, 70);

2229 
MA_MAIN_EXIT
:

2230 
	`emu_c‹e_ask_exô
();

2233 
	`Õrötf
("%s: somëhög unknow¿£À˘ed\n", 
__FUNCTION__
);

2238 
	}
}

2240 
míu_íåy
 
	ge_míu_maö2
[] =

2242 
mì_h™dÀr_id
("Ch™gêCD image", 
MA_MAIN_SWAP_CD
, 
maö_míu_h™dÀr
),

2243 
mì_h™dÀr_id
("Nexàmu…idisk CD", 
MA_MAIN_SWAP_CD_MULTI
, 
maö_míu_h™dÀr
),

2244 
mì_h™dÀr_id
("Ru¿BIOS", 
MA_MAIN_RUN_BIOS
, 
maö_míu_h™dÀr
),

2245 
mì_h™dÀr_id
("Ru¿EXE", 
MA_MAIN_RUN_EXE
, 
maö_míu_h™dÀr
),

2246 
mì_h™dÀr
 ("Memˇrd m™agî", 
míu_lo›_memˇrds
),

2247 
mì_h™dÀr_id
("Lﬂd PCSX chóts..", 
MA_MAIN_LOAD_CHEATS
, 
maö_míu_h™dÀr
),

2248 
mì_íd
,

2251 
	$maö_míu2_h™dÀr
(
id
, 
keys
)

2253 
£l
 = 0;

2255 
	`me_íabÀ
(
e_míu_maö2
, 
MA_MAIN_SWAP_CD
, 
ªady_to_go
);

2256 
	`me_íabÀ
(
e_míu_maö2
, 
MA_MAIN_SWAP_CD_MULTI
, 
ªady_to_go
 && 
cdrIsoMu…idiskCou¡
 > 1);

2257 
	`me_íabÀ
(
e_míu_maö2
, 
MA_MAIN_RUN_BIOS
, 
bios_£l
 != 0);

2258 
	`me_íabÀ
(
e_míu_maö2
, 
MA_MAIN_LOAD_CHEATS
, 
ªady_to_go
);

2260  
	`me_lo›_d
(
e_míu_maö2
, &
£l
, 
NULL
, 
døw_‰ame_maö
);

2261 
	}
}

2263 c⁄° 
	gh_exåa
[] = "Change CD, manage memcards..\n";

2265 
míu_íåy
 
	ge_míu_maö
[] =

2267 
mì_œbñ
 (""),

2268 
mì_œbñ
 (""),

2269 
mì_h™dÀr_id
("Resumêgame", 
MA_MAIN_RESUME_GAME
, 
maö_míu_h™dÀr
),

2270 
mì_h™dÀr_id
("SavêSèã", 
MA_MAIN_SAVE_STATE
, 
maö_míu_h™dÀr
),

2271 
mì_h™dÀr_id
("Lﬂd Sèã", 
MA_MAIN_LOAD_STATE
, 
maö_míu_h™dÀr
),

2272 
mì_h™dÀr_id
("Re£àgame", 
MA_MAIN_RESET_GAME
, 
maö_míu_h™dÀr
),

2273 
mì_h™dÀr_id
("Lﬂd CD image", 
MA_MAIN_LOAD_ROM
, 
maö_míu_h™dÀr
),

2274 
mì_h™dÀr
 ("O±i⁄s", 
míu_lo›_›ti⁄s
),

2275 
mì_h™dÀr
 ("C⁄åﬁs", 
míu_lo›_keyc⁄fig
),

2276 
mì_h™dÀr_id
("Chóts", 
MA_MAIN_CHEATS
, 
maö_míu_h™dÀr
),

2277 
mì_h™dÀr_h
 ("Exå®°uff", 
maö_míu2_h™dÀr
, 
h_exåa
),

2278 
mì_h™dÀr_id
("Cªdôs", 
MA_MAIN_CREDITS
, 
maö_míu_h™dÀr
),

2279 
mì_h™dÀr_id
("Exô", 
MA_MAIN_EXIT
, 
maö_míu_h™dÀr
),

2280 
mì_íd
,

2285 
míu_Àave_emu
();

2287 
	$míu_lo›
()

2289 
w¨√d_about_bios
 = 0;

2290 
£l
 = 0;

2292 
	`míu_Àave_emu
();

2294 i‡(
c⁄fig_ßve_cou¡î
 == 0) {

2296 i‡(
bio£s
[1] !
NULL
) {

2298 
	`¢¥ötf
(
C⁄fig
.
Bios
, (C⁄fig.Bios), "%s", 
bio£s
[1]);

2299 
bios_£l
 = 1;

2301 i‡(!
w¨√d_about_bios
) {

2302 
	`míu_bios_w¨n
();

2303 
w¨√d_about_bios
 = 1;

2307 
	`me_íabÀ
(
e_míu_maö
, 
MA_MAIN_RESUME_GAME
, 
ªady_to_go
);

2308 
	`me_íabÀ
(
e_míu_maö
, 
MA_MAIN_SAVE_STATE
, 
ªady_to_go
 && 
CdromId
[0]);

2309 
	`me_íabÀ
(
e_míu_maö
, 
MA_MAIN_LOAD_STATE
, 
ªady_to_go
 && 
CdromId
[0]);

2310 
	`me_íabÀ
(
e_míu_maö
, 
MA_MAIN_RESET_GAME
, 
ªady_to_go
);

2311 
	`me_íabÀ
(
e_míu_maö
, 
MA_MAIN_CHEATS
, 
ªady_to_go
 && 
NumChóts
);

2313 
	`ö_£t_c⁄fig_öt
(0, 
IN_CFG_BLOCKING
, 1);

2316 
	`me_lo›_d
(
e_míu_maö
, &
£l
, 
NULL
, 
døw_‰ame_maö
);

2317 } !
ªady_to_go
 && !
g_emu_w™t_quô
);

2320 
	`ö_míu_waô_™y
(
NULL
, 50Ë& (
PBTN_MENU
|
PBTN_MOK
|
PBTN_MBACK
))

2323 
	`ö_£t_c⁄fig_öt
(0, 
IN_CFG_BLOCKING
, 0);

2325 
	`míu_¥ï¨e_emu
();

2326 
	}
}

2328 
	$qs‹t_°rcmp
(c⁄° *
p1
, c⁄° *
p2
)

2330 * c⁄° *
s1
 = (* c⁄° *)
p1
;

2331 * c⁄° *
s2
 = (* c⁄° *)
p2
;

2332  
	`°rˇ£cmp
(*
s1
, *
s2
);

2333 
	}
}

2335 
	$sˇn_bios_∂ugös
()

2337 
‚ame
[
MAXPATHLEN
];

2338 
dúít
 *
ít
;

2339 
bios_i
, 
gpu_i
, 
•u_i
, 
mc_i
;

2340 *
p
;

2341 
DIR
 *
dú
;

2343 
bio£s
[0] = "HLE";

2344 
gpu_∂ugös
[0] = "builtin_gpu";

2345 
•u_∂ugös
[0] = "builtin_spu";

2346 
memˇrds
[0] = "(none)";

2347 
bios_i
 = 
gpu_i
 = 
•u_i
 = 
mc_i
 = 1;

2349 
	`¢¥ötf
(
‚ame
, (‚ame), "%s/", 
C⁄fig
.
BiosDú
);

2350 
dú
 = 
	`›ídú
(
‚ame
);

2351 i‡(
dú
 =
NULL
) {

2352 
	`≥º‹
("scan_bios_plugins bios opendir");

2353 
do_∂ugös
;

2357 
°©
 
°
;

2359 
î∫o
 = 0;

2360 
ít
 = 
	`ªaddú
(
dú
);

2361 i‡(
ít
 =
NULL
) {

2362 i‡(
î∫o
 != 0)

2363 
	`≥º‹
("readdir");

2367 i‡(
ít
->
d_ty≥
 !
DT_REG
 &&É¡->d_ty≥ !
DT_LNK
)

2370 
	`¢¥ötf
(
‚ame
, (‚ame), "%s/%s", 
C⁄fig
.
BiosDú
, 
ít
->
d_«me
);

2371 i‡(
	`°©
(
‚ame
, &
°
Ë!0 || st.
°_size
 != 512*1024) {

2372 
	`¥ötf
("bad BIOS fûe: %s\n", 
ít
->
d_«me
);

2376 i‡(
bios_i
 < 
	`ARRAY_SIZE
(
bio£s
) - 1) {

2377 
bio£s
[
bios_i
++] = 
	`°rdup
(
ít
->
d_«me
);

2381 
	`¥ötf
("toÿm™y BIOSes, dr›pög \"%s\"\n", 
ít
->
d_«me
);

2384 
	`˛o£dú
(
dú
);

2386 
do_∂ugös
:

2387 
	`¢¥ötf
(
‚ame
, (‚ame), "%s/", 
C⁄fig
.
PlugösDú
);

2388 
dú
 = 
	`›ídú
(
‚ame
);

2389 i‡(
dú
 =
NULL
) {

2390 
	`≥º‹
("scan_bios_pluginsÖlugins opendir");

2391 
do_memˇrds
;

2395 *
h
, *
tmp
;

2397 
î∫o
 = 0;

2398 
ít
 = 
	`ªaddú
(
dú
);

2399 i‡(
ít
 =
NULL
) {

2400 i‡(
î∫o
 != 0)

2401 
	`≥º‹
("readdir");

2404 
p
 = 
	`°r°r
(
ít
->
d_«me
, ".so");

2405 i‡(
p
 =
NULL
)

2408 
	`¢¥ötf
(
‚ame
, (‚ame), "%s/%s", 
C⁄fig
.
PlugösDú
, 
ít
->
d_«me
);

2409 
h
 = 
	`dl›í
(
‚ame
, 
RTLD_LAZY
 | 
RTLD_LOCAL
);

2410 i‡(
h
 =
NULL
) {

2411 
	`Ârötf
(
°dîr
, "%s\n", 
	`dÀº‹
());

2416 
tmp
 = 
	`dlsym
(
h
, "GPUinit");

2417 i‡(
tmp
) {

2418 
	`dl˛o£
(
h
);

2419 i‡(
gpu_i
 < 
	`ARRAY_SIZE
(
gpu_∂ugös
) - 1)

2420 
gpu_∂ugös
[
gpu_i
++] = 
	`°rdup
(
ít
->
d_«me
);

2424 
tmp
 = 
	`dlsym
(
h
, "SPUinit");

2425 i‡(
tmp
) {

2426 
	`dl˛o£
(
h
);

2427 i‡(
•u_i
 < 
	`ARRAY_SIZE
(
•u_∂ugös
) - 1)

2428 
•u_∂ugös
[
•u_i
++] = 
	`°rdup
(
ít
->
d_«me
);

2432 
	`Ârötf
(
°dîr
, "ign‹ög unidítifõdÖlugö: %s\n", 
‚ame
);

2433 
	`dl˛o£
(
h
);

2436 
	`˛o£dú
(
dú
);

2438 
do_memˇrds
:

2439 
dú
 = 
	`›ídú
("." 
MEMCARD_DIR
);

2440 i‡(
dú
 =
NULL
) {

2441 
	`≥º‹
("scan_bios_plugins memcards opendir");

2446 
°©
 
°
;

2448 
î∫o
 = 0;

2449 
ít
 = 
	`ªaddú
(
dú
);

2450 i‡(
ít
 =
NULL
) {

2451 i‡(
î∫o
 != 0)

2452 
	`≥º‹
("readdir");

2456 i‡(
ít
->
d_ty≥
 !
DT_REG
 &&É¡->d_ty≥ !
DT_LNK
)

2459 
	`¢¥ötf
(
‚ame
, (‚ame), "." 
MEMCARD_DIR
 "%s", 
ít
->
d_«me
);

2460 i‡(
	`°©
(
‚ame
, &
°
) != 0) {

2461 
	`¥ötf
("bad memˇrd fûe: %s\n", 
ít
->
d_«me
);

2465 i‡(
mc_i
 < 
	`ARRAY_SIZE
(
memˇrds
) - 1) {

2466 
memˇrds
[
mc_i
++] = 
	`°rdup
(
ít
->
d_«me
);

2470 
	`¥ötf
("toÿm™y memˇrds, dr›pög \"%s\"\n", 
ít
->
d_«me
);

2473 i‡(
mc_i
 > 2)

2474 
	`qs‹t
(
memˇrds
 + 1, 
mc_i
 - 1, (memˇrds[0]), 
qs‹t_°rcmp
);

2476 
	`˛o£dú
(
dú
);

2477 
	}
}

2479 
	$míu_öô
()

2481 
buff
[
MAXPATHLEN
];

2482 
i
;

2484 
˝u_˛ock_°
 = 
˝u_˛ock
 = 
	`∂©_èrgë_˝u_˛ock_gë
();

2486 
	`sˇn_bios_∂ugös
();

2487 
	`míu_öô_ba£
();

2489 
	`míu_£t_defc⁄fig
();

2490 
	`míu_lﬂd_c⁄fig
(0);

2491 
	`míu_do_œ°_cd_img
(1);

2492 
œ°_vout_w
 = 320;

2493 
œ°_vout_h
 = 240;

2494 
œ°_vout_bµ
 = 16;

2496 
g_míubg_§c_±r
 = 
	`ˇŒoc
(
g_míus¸ìn_w
 * 
g_míus¸ìn_h
 * 2, 1);

2497 
g_míubg_±r
 = 
	`ˇŒoc
(
g_míus¸ìn_w
 * 
g_míus¸ìn_h
 * 2, 1);

2498 i‡(
g_míubg_§c_±r
 =
NULL
 || 
g_míubg_±r
 == NULL) {

2499 
	`Ârötf
(
°dîr
, "OOM\n");

2500 
	`exô
(1);

2503 
	`emu_make_∑th
(
buff
, "skin/background.png", (buff));

2504 
	`ªad≤g
(
g_míubg_§c_±r
, 
buff
, 
READPNG_BG
, 
g_míus¸ìn_w
, 
g_míus¸ìn_h
);

2506 
i
 = 
∂©_èrgë
.
˝u_˛ock_£t
 !
NULL


2507 && 
∂©_èrgë
.
˝u_˛ock_gë
 !
NULL
 && 
˝u_˛ock_°
 > 0;

2508 
	`me_íabÀ
(
e_míu_gfx_›ti⁄s
, 
MA_OPT_CPU_CLOCKS
, 
i
);

2510 
i
 = 
	`me_id2off£t
(
e_míu_gfx_›ti⁄s
, 
MA_OPT_VOUT_MODE
);

2511 
e_míu_gfx_›ti⁄s
[
i
].
d©a
 = 
∂©_èrgë
.
vout_mëhods
;

2512 
	`me_íabÀ
(
e_míu_gfx_›ti⁄s
, 
MA_OPT_VOUT_MODE
,

2513 
∂©_èrgë
.
vout_mëhods
 !
NULL
);

2515 
i
 = 
	`me_id2off£t
(
e_míu_gfx_›ti⁄s
, 
MA_OPT_HWFILTER
);

2516 
e_míu_gfx_›ti⁄s
[
i
].
d©a
 = 
∂©_èrgë
.
hwfûãrs
;

2517 
	`me_íabÀ
(
e_míu_gfx_›ti⁄s
, 
MA_OPT_HWFILTER
,

2518 
∂©_èrgë
.
hwfûãrs
 !
NULL
);

2520 
	`me_íabÀ
(
e_míu_gfx_›ti⁄s
, 
MA_OPT_GAMMA
,

2521 
∂©_èrgë
.
gamma_£t
 !
NULL
);

2523 #i‚de‡
__ARM_ARCH_7A__


2524 
	`me_íabÀ
(
e_míu_gfx_›ti⁄s
, 
MA_OPT_SWFILTER
, 0);

2526 
	`me_íabÀ
(
e_míu_gfx_›ti⁄s
, 
MA_OPT_VARSCALER
, 
MENU_SHOW_VARSCALER
);

2527 
	`me_íabÀ
(
e_míu_gfx_›ti⁄s
, 
MA_OPT_VOUT_MODE
, 
MENU_SHOW_VOUTMODE
);

2528 
	`me_íabÀ
(
e_míu_gfx_›ti⁄s
, 
MA_OPT_VARSCALER_C
, 
MENU_SHOW_VARSCALER
);

2529 
	`me_íabÀ
(
e_míu_gfx_›ti⁄s
, 
MA_OPT_SCALER2
, 
MENU_SHOW_SCALER2
);

2530 
	`me_íabÀ
(
e_míu_keyc⁄fig
, 
MA_CTRL_NUBS_BTNS
, 
MENU_SHOW_NUBS_BTNS
);

2531 
	`me_íabÀ
(
e_míu_keyc⁄fig
, 
MA_CTRL_VIBRATION
, 
MENU_SHOW_VIBRATION
);

2532 
	`me_íabÀ
(
e_míu_keyc⁄fig
, 
MA_CTRL_DEADZONE
, 
MENU_SHOW_DEADZONE
);

2533 
	}
}

2535 
	$míu_nŸify_mode_ch™ge
(
w
, 
h
, 
bµ
)

2537 
œ°_vout_w
 = 
w
;

2538 
œ°_vout_h
 = 
h
;

2539 
œ°_vout_bµ
 = 
bµ
;

2540 
	}
}

2542 
	$míu_Àave_emu
()

2544 i‡(
GPU_˛o£
 !
NULL
) {

2545 
ªt
 = 
	`GPU_˛o£
();

2546 i‡(
ªt
)

2547 
	`Ârötf
(
°dîr
, "W¨nög: GPU_˛o£Ñëu∫ed %d\n", 
ªt
);

2550 
	`∂©_video_míu_íãr
(
ªady_to_go
);

2552 
	`mem˝y
(
g_míubg_±r
, 
g_míubg_§c_±r
, 
g_míus¸ìn_w
 * 
g_míus¸ìn_h
 * 2);

2553 i‡(
∂_vout_buf
 !
NULL
 && 
ªady_to_go
) {

2554 
x
 = 
	`max
(0, 
g_míus¸ìn_w
 - 
œ°_vout_w
);

2555 
y
 = 
	`max
(0, 
g_míus¸ìn_h
 / 2 - 
œ°_vout_h
 / 2);

2556 
w
 = 
	`mö
(
g_míus¸ìn_w
, 
œ°_vout_w
);

2557 
h
 = 
	`mö
(
g_míus¸ìn_h
, 
œ°_vout_h
);

2558 
u16
 *
d
 = (u16 *)
g_míubg_±r
 + 
g_míus¸ìn_w
 * 
y
 + 
x
;

2559 *
s
 = 
∂_vout_buf
;

2561 i‡(
œ°_vout_bµ
 == 16) {

2562 ; 
h
 > 0; h--, 
d
 +
g_míus¸ìn_w
, 
s
 +
œ°_vout_w
 * 2)

2563 
	`míu_d¨kí_bg
(
d
, 
s
, 
w
, 0);

2566 ; 
h
 > 0; h--, 
d
 +
g_míus¸ìn_w
, 
s
 +
œ°_vout_w
 * 3) {

2567 
	`rgb888_to_rgb565
(
d
, 
s
, 
w
 * 3);

2568 
	`míu_d¨kí_bg
(
d
, d, 
w
, 0);

2573 i‡(
ªady_to_go
)

2574 
˝u_˛ock
 = 
	`∂©_èrgë_˝u_˛ock_gë
();

2575 
	}
}

2577 
	$míu_¥ï¨e_emu
()

2579 
R3000A˝u
 *
¥ev_˝u
 = 
psxCpu
;

2581 
	`∂©_video_míu_Àave
();

2583 
psxCpu
 = (
C⁄fig
.
Cpu
 =
CPU_INTERPRETER
Ë? &
psxI¡
 : &
psxRec
;

2584 i‡(
psxCpu
 !
¥ev_˝u
) {

2585 
¥ev_˝u
->
	`Shutdown
();

2586 
psxCpu
->
	`Inô
();

2588 
psxCpu
->
	`Re£t
();

2593 i‡(
C⁄fig
.
Cdda
)

2594 
	`CDR_°›
();

2596 
	`míu_sync_c⁄fig
();

2597 i‡(
˝u_˛ock
 > 0)

2598 
	`∂©_èrgë_˝u_˛ock_£t
(
˝u_˛ock
);

2601 
	`∂ugö_ˇŒ_ª¨med_cbs
();

2603 i‡(
GPU_›í
 !
NULL
) {

2604 
ªt
 = 
	`GPU_›í
(&
gpuDi•
, "PCSX", 
NULL
);

2605 i‡(
ªt
)

2606 
	`Ârötf
(
°dîr
, "W¨nög: GPU_›íÑëu∫ed %d\n", 
ªt
);

2609 
	`dföput_a˘iv©e
();

2610 
	}
}

2612 
	$míu_upd©e_msg
(c⁄° *
msg
)

2614 
	`°∫˝y
(
míu_îr‹_msg
, 
msg
, (menu_error_msg));

2615 
míu_îr‹_msg
[(menu_error_msg) - 1] = 0;

2617 
míu_îr‹_time
 = 
	`∂©_gë_ticks_ms
();

2618 
	`Õrötf
("msg: %s\n", 
míu_îr‹_msg
);

2619 
	}
}

2621 
	$míu_föish
()

2623 i‡(
˝u_˛ock_°
 > 0)

2624 
	`∂©_èrgë_˝u_˛ock_£t
(
˝u_˛ock_°
);

2625 
	}
}

	@frontend/menu.h

1 
míu_öô
();

2 
míu_¥ï¨e_emu
();

3 
míu_lo›
();

4 
míu_föish
();

6 
míu_nŸify_mode_ch™ge
(
w
, 
h
, 
bµ
);

8 
	eg_›ts_›ts
 {

9 
	mOPT_SHOWFPS
 = 1 << 0,

10 
	mOPT_SHOWCPU
 = 1 << 1,

11 
	mOPT_NO_FRAMELIM
 = 1 << 2,

12 
	mOPT_SHOWSPU
 = 1 << 3,

13 
	mOPT_TSGUN_NOTRIGGER
 = 1 << 4,

16 
	eg_sˇÀr_›ts
 {

17 
	mSCALE_1_1
,

18 
	mSCALE_2_2
,

19 
	mSCALE_4_3
,

20 
	mSCALE_4_3v2
,

21 
	mSCALE_FULLSCREEN
,

22 
	mSCALE_CUSTOM
,

25 
	eg_so·_fûãr_›ts
 {

26 
	mSOFT_FILTER_NONE
,

27 
	mSOFT_FILTER_SCALE2X
,

28 
	mSOFT_FILTER_EAGLE2X
,

31 
g_›ts
, 
g_sˇÀr
, 
g_gamma
;

32 
sˇ∆öes
, 
sˇ∆öe_Àvñ
;

33 
so·_sˇlög
, 
™Æog_dódz⁄e
;

34 
so·_fûãr
;

36 
g_míus¸ìn_w
;

37 
g_míus¸ìn_h
;

	@frontend/nopic.h

4 
	mwidth
;

5 
	mheight
;

6 
	mbyãs_≥r_pixñ
;

7 
	mpixñ_d©a
[128 * 96 * 3 + 1];

8 } 
	gNoPic_Image
 = {

12 
PaötPicDŸ
(* 
p
,
c
);

13 
cF⁄t
[10][120];

15 
	$DøwNumB‹Pic
(*
pMem
, 
lSñe˘edSlŸ
)

17 *
pf
;

18 
x
,
y
;

19 
c
,
v
;

21 
pf
=
pMem
+(103*3);

23 
y
=0;y<20;y++)

25 
x
=0;x<6;x++)

27 
c
=
cF⁄t
[
lSñe˘edSlŸ
][
x
+
y
*6];

28 
v
=(
c
&0xc0)>>6;

29 
	`PaötPicDŸ
(
pf
,()
v
);pf+=3;

30 
v
=(
c
&0x30)>>4;

31 
	`PaötPicDŸ
(
pf
,()
v
);pf+=3;

32 
v
=(
c
&0x0c)>>2;

33 
	`PaötPicDŸ
(
pf
,()
v
);pf+=3;

34 
v
=
c
&0x03;

35 
	`PaötPicDŸ
(
pf
,()
v
);pf+=3;

37 
pf
+=104*3;

40 
pf
=
pMem
;

41 
x
=0;x<128;x++)

43 *(
pf
+(95*128*3))=0x00;*pf++=0x00;

44 *(
pf
+(95*128*3))=0x00;*pf++=0x00;

45 *(
pf
+(95*128*3))=0xff;*pf++=0xff;

47 
pf
=
pMem
;

48 
y
=0;y<96;y++)

50 *(
pf
+(127*3))=0x00;*pf++=0x00;

51 *(
pf
+(127*3))=0x00;*pf++=0x00;

52 *(
pf
+(127*3))=0xff;*pf++=0xff;

53 
pf
+=127*3;

55 
	}
}

	@frontend/pandora/picorestore.c

29 
	~<°dio.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<sys/°©.h
>

32 
	~<f˙é.h
>

33 
	~<uni°d.h
>

34 
	~<sys/io˘l.h
>

35 
	~<löux/fb.h
>

36 
	~<löux/om≠fb.h
>

37 
	~<löux/kd.h
>

39 
	$maö
()

41 
fb_v¨_s¸ìnöfo
 
fbv¨
;

42 
om≠fb_∂™e_öfo
 
pi
;

43 
om≠fb_mem_öfo
 
mi
;

44 
ªt
, 
fbdev
, 
kbdfd
;

46 
fbdev
 = 
	`›í
("/dev/fb0", 
O_RDWR
);

47 i‡(
fbdev
 == -1) {

48 
	`≥º‹
("open fb0");

49 
íd_fb0
;

52 
ªt
 = 
	`io˘l
(
fbdev
, 
FBIOGET_VSCREENINFO
, &
fbv¨
);

53 i‡(
ªt
 == -1) {

54 
	`≥º‹
("FBIOGET_VSCREENINFO ioctl");

55 
íd_fb0
;

58 i‡(
fbv¨
.
yoff£t
 != 0) {

59 
	`¥ötf
("fixing yoffset.. ");

60 
fbv¨
.
yoff£t
 = 0;

61 
ªt
 = 
	`io˘l
(
fbdev
, 
FBIOPAN_DISPLAY
, &
fbv¨
);

62 i‡(
ªt
 < 0)

63 
	`≥º‹
("ioctl FBIOPAN_DISPLAY");

65 
	`¥ötf
("ok\n");

68 
íd_fb0
:

69 i‡(
fbdev
 >= 0)

70 
	`˛o£
(
fbdev
);

72 
fbdev
 = 
	`›í
("/dev/fb1", 
O_RDWR
);

73 i‡(
fbdev
 == -1) {

74 
	`≥º‹
("open fb1");

75 
íd_fb1
;

78 
ªt
 = 
	`io˘l
(
fbdev
, 
OMAPFB_QUERY_PLANE
, &
pi
);

79 
ªt
 |
	`io˘l
(
fbdev
, 
OMAPFB_QUERY_MEM
, &
mi
);

80 i‡(
ªt
 != 0)

81 
	`≥º‹
("QUERY_*");

83 
pi
.
íabÀd
 = 0;

84 
ªt
 = 
	`io˘l
(
fbdev
, 
OMAPFB_SETUP_PLANE
, &
pi
);

85 i‡(
ªt
 != 0)

86 
	`≥º‹
("SETUP_PLANE");

88 
mi
.
size
 = 0;

89 
ªt
 = 
	`io˘l
(
fbdev
, 
OMAPFB_SETUP_MEM
, &
mi
);

90 i‡(
ªt
 != 0)

91 
	`≥º‹
("SETUP_MEM");

93 
íd_fb1
:

94 i‡(
fbdev
 >= 0)

95 
	`˛o£
(
fbdev
);

97 
kbdfd
 = 
	`›í
("/dev/ây", 
O_RDWR
);

98 i‡(
kbdfd
 == -1) {

99 
	`≥º‹
("open /dev/tty");

103 i‡(
	`io˘l
(
kbdfd
, 
KDSETMODE
, 
KD_TEXT
) == -1)

104 
	`≥º‹
("KDSETMODE KD_TEXT");

106 
	`˛o£
(
kbdfd
);

109 
	}
}

	@frontend/pandora/ui_feat.h

1 #i‚de‡
UI_FEATURES_H


2 
	#UI_FEATURES_H


	)

4 
	#MENU_BIOS_PATH
 "<SD c¨d>/∑nd‹a/≠pd©a/pcsx_ª¨med/bios/"

	)

5 
	#BOOT_MSG
 "BoŸög up... (¥es†SPACE f‹ míu)"

	)

6 
	#MENU_SHOW_VARSCALER
 1

	)

7 
	#MENU_SHOW_VOUTMODE
 0

	)

8 
	#MENU_SHOW_SCALER2
 0

	)

9 
	#MENU_SHOW_NUBS_BTNS
 1

	)

10 
	#MENU_SHOW_VIBRATION
 0

	)

11 
	#MENU_SHOW_DEADZONE
 0

	)

12 
	#MENU_SHOW_MINIMIZE
 1

	)

13 
	#MENU_SHOW_FULLSCREEN
 0

	)

14 
	#MENU_SHOW_VOLUME
 0

	)

	@frontend/pl_gun_ts.c

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<dlf˙.h
>

14 
	~<t¶ib.h
>

15 
	~"∂ugö_lib.h
"

16 
	~"∂_gun_ts.h
"

17 
	~"míu.h
"

18 
	~"../∂ugös/dföput/exã∫Æs.h
"

19 
	~"../∂ugös/dföput/maö.h
"

21 #ifde‡
MAEMO


22 
	#N900_TSMAX_X
 4096

	)

23 
	#N900_TSOFFSET_X
 0

	)

24 
	#N900_TSMAX_Y
 4096

	)

25 
	#N900_TSOFFSET_Y
 0

	)

28 
	ggun_x
, 
	ggun_y
, 
	ggun_ö
;

29 
	gts_mu…ùlõr_x
, 
	gts_mu…ùlõr_y
, 
	gts_offs_x
, 
	gts_offs_y
;

30 (*
±s_ªad
)(
tsdev
 *
dev
, 
ts_ßm∂e
 *
ßm∂e
, 
ƒ
);

31 (*
±s_fd
)(
tsdev
 *
dev
);

33 
	#limô
(
v
, 
mö
, 
max
) \

34 i‡(
v
 < 
mö
) v = min; \

35 i‡(
v
 > 
max
Ëv = 
	)
max

37 
	$∂_gun_ts_upd©e_øw
(
tsdev
 *
ts
, *
x
, *
y
, *
p
)

39 
ts_ßm∂e
 
ßm∂e
;

40 
sx
 = 0, 
sy
 = 0, 
•
 = 0, 
upd©ed
 = 0;

42 i‡(
ts
 !
NULL
) {

43 
	`±s_ªad
(
ts
, &
ßm∂e
, 1) > 0) {

44 
sx
 = 
ßm∂e
.
x
;

45 #ifde‡
MAEMO


46 
sy
 = 
N900_TSMAX_Y
 - 
ßm∂e
.
y
;

48 
sy
 = 
ßm∂e
.
y
;

50 
•
 = 
ßm∂e
.
¥essuª
;

51 
upd©ed
 = 1;

54 i‡(
upd©ed
) {

55 
gun_x
 = (
sx
 - 
ts_offs_x
Ë* 
ts_mu…ùlõr_x
 >> 10;

56 
gun_y
 = (
sy
 - 
ts_offs_y
Ë* 
ts_mu…ùlõr_y
 >> 10;

57 
	`limô
(
gun_x
, 0, 1023);

58 
	`limô
(
gun_y
, 0, 1023);

59 i‡(
•
 && !(
g_›ts
 & 
OPT_TSGUN_NOTRIGGER
))

60 
gun_ö
 |
GUNIN_TRIGGER
;

62 
gun_ö
 &~
GUNIN_TRIGGER
;

66 i‡(
upd©ed
) {

67 i‡(
x
Ë*x = 
sx
;

68 i‡(
y
Ë*y = 
sy
;

69 i‡(
p
Ë*∞
•
;

74 
	}
}

77 
	$∂_gun_ts_upd©e
(
tsdev
 *
ts
, *
x
, *
y
, *
ö
)

79 
	`∂_gun_ts_upd©e_øw
(
ts
, 
NULL
, NULL, NULL);

81 *
x
 = 
gun_x
;

82 *
y
 = 
gun_y
;

83 *
ö
 = 
gun_ö
 | 
ö_°©e_gun
;

84 
	}
}

86 
	$∂_£t_gun_ª˘
(
x
, 
y
, 
w
, 
h
)

88 
ts_offs_x
 = 
x
;

89 
ts_offs_y
 = 
y
;

90 
ts_mu…ùlõr_x
 = (1<<20Ë/ 
w
;

91 
ts_mu…ùlõr_y
 = (1<<20Ë/ 
h
;

92 
	}
}

94 
	$∂_gun_ts_gë_fd
(
tsdev
 *
ts
)

96 i‡(
ts
 !
NULL
 && 
±s_fd
 != NULL)

97  
	`±s_fd
(
ts
);

100 
	}
}

102 
tsdev
 *
	$∂_gun_ts_öô
()

104 
tsdev
 *(*
±s_›í
)(c⁄° *
dev_«me
, 
n⁄block
Ë
NULL
;

105 (*
±s_c⁄fig
)(
tsdev
 *Ë
NULL
;

106 (*
±s_˛o£
)(
tsdev
 *Ë
NULL
;

107 c⁄° *
tsdev«me
;

108 
tsdev
 *
ts
;

109 *
…sh
;

111 #ifde‡
MAEMO


112 
tsdev«me
 = "/dev/input/ts";

114 
tsdev«me
 = 
	`gëív
("TSLIB_TSDEVICE");

115 i‡(
tsdev«me
 =
NULL
)

116 
tsdev«me
 = "/dev/input/touchscreen0";

120 
…sh
 = 
	`dl›í
("/u§/lib/libts-1.0.so.0", 
RTLD_NOW
|
RTLD_GLOBAL
);

121 i‡(
…sh
 =
NULL
)

122 
…sh
 = 
	`dl›í
("/u§/lib/libts-0.0.so.0", 
RTLD_NOW
|
RTLD_GLOBAL
);

123 i‡(
…sh
 =
NULL
)

124 
…sh
 = 
	`dl›í
("/lib/libts-0.0.so.0", 
RTLD_NOW
|
RTLD_GLOBAL
);

125 i‡(
…sh
 =
NULL
) {

126 
	`Ârötf
(
°dîr
, "%s\n", 
	`dÀº‹
());

127 
Áû
;

130 
±s_›í
 = 
	`dlsym
(
…sh
, "ts_open");

131 
±s_c⁄fig
 = 
	`dlsym
(
…sh
, "ts_config");

132 
±s_ªad
 = 
	`dlsym
(
…sh
, "ts_read");

133 
±s_fd
 = 
	`dlsym
(
…sh
, "ts_fd");

134 
±s_˛o£
 = 
	`dlsym
(
…sh
, "ts_close");

135 i‡(
±s_›í
 =
NULL
 || 
±s_c⁄fig
 =NULL || 
±s_ªad
 == NULL

136 || 
±s_fd
 =
NULL
 || 
±s_˛o£
 == NULL) {

137 
	`Ârötf
(
°dîr
, "%s\n", 
	`dÀº‹
());

138 
Áû_dlsym
;

141 
ts
 = 
	`±s_›í
(
tsdev«me
, 1);

142 i‡(
ts
 =
NULL
){

143 
	`¥ötf
("FaûedÖts_›í, checkÖîmissi⁄ o¿%s\n", 
tsdev«me
);

144 
Áû_›í
;

146 i‡(
	`±s_c⁄fig
(
ts
) != 0){

147 
	`¥ötf
("FailedÖts_config\n");

148 
Áû_c⁄fig
;

153 #ifde‡
MAEMO


154 
	`∂_£t_gun_ª˘
(
N900_TSOFFSET_X
, 
N900_TSOFFSET_Y
, 
N900_TSMAX_X
, 
N900_TSMAX_Y
);

156 #ifde‡
__ARM_ARCH_7A__


157 
	`∂_£t_gun_ª˘
(0, 0, 800, 480);

159 
	`∂_£t_gun_ª˘
(0, 0, 320, 240);

162 
	`¥ötf
("Touchs¸ì¿c⁄figuªd, devi˚=%s\n", 
tsdev«me
);

163  
ts
;

165 
Áû_c⁄fig
:

166 
	`±s_˛o£
(
ts
);

167 
Áû_›í
:

168 
Áû_dlsym
:

169 
	`dl˛o£
(
…sh
);

170 
…sh
 = 
NULL
;

171 
Áû
:

172 
	`Ârötf
(
°dîr
, "CouldÇot openÅouchscreen\n");

173  
NULL
;

174 
	}
}

	@frontend/pl_gun_ts.h

1 #ifde‡
HAVE_TSLIB


3 
	gtsdev
;

5 
tsdev
 *
∂_gun_ts_öô
();

6 
∂_gun_ts_upd©e
(
tsdev
 *
ts
, *
x
, *
y
, *
ö
);

7 
∂_£t_gun_ª˘
(
x
, 
y
, 
w
, 
h
);

9 
∂_gun_ts_upd©e_øw
(
tsdev
 *
ts
, *
x
, *
y
, *
p
);

10 
∂_gun_ts_gë_fd
(
tsdev
 *
ts
);

14 
	#∂_gun_ts_öô
(Ë
NULL


	)

15 
	#∂_gun_ts_upd©e
(...Ëdÿ{} 0)

	)

16 
	#∂_£t_gun_ª˘
(...Ëdÿ{} 0)

	)

	@frontend/plat.h

1 
∂©_öô
();

2 
∂©_föish
();

3 
∂©_möimize
();

4 *
∂©_¥ï¨e_s¸ìnshŸ
(*
w
, *
h
, *
bµ
);

7 
∂©_gvideo_›í
(
is_∑l
);

8 *
∂©_gvideo_£t_mode
(*
w
, *
h
, *
bµ
);

9 *
∂©_gvideo_Êù
();

10 
∂©_gvideo_˛o£
();

	@frontend/plat_dummy.c

8 
	~"∂©.h
"

10 
	$∂©_video_míu_íãr
(
is_rom_lﬂded
)

12 
	}
}

14 
	$∂©_video_míu_begö
()

16 
	}
}

18 
	$∂©_video_míu_íd
()

20 
	}
}

22 
	$∂©_video_míu_Àave
()

24 
	}
}

26 
	$∂©_gvideo_›í
(
is_∑l
)

28 
	}
}

30 *
	$∂©_gvideo_£t_mode
(*
w
, *
h
, *
bµ
)

33 
	}
}

35 *
	$∂©_gvideo_Êù
()

38 
	}
}

40 
	$∂©_gvideo_˛o£
()

42 
	}
}

44 
	$∂©_öô
()

46 
	}
}

48 
	$∂©_föish
()

50 
	}
}

52 *
	$∂©_¥ï¨e_s¸ìnshŸ
(*
w
, *
h
, *
bµ
)

55 
	}
}

57 
	$∂©_åiggî_vibøã
(
∑d
, 
low
, 
high
)

59 
	}
}

61 
	$∂©_möimize
()

63 
	}
}

	@frontend/plat_omap.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<sys/ty≥s.h
>

11 
	~<sys/°©.h
>

12 
	~<f˙é.h
>

13 
	~<sys/io˘l.h
>

14 
	~<uni°d.h
>

15 
	~<löux/om≠fb.h
>

17 
	~"libpico„/míu.h
"

18 
	~"libpico„/öput.h
"

19 
	~"libpico„/löux/fbdev.h
"

20 
	~"libpico„/löux/xív.h
"

21 
	~"∂ugö_lib.h
"

22 
	~"∂_gun_ts.h
"

23 
	~"∂©.h
"

24 
	~"∂©_om≠.h
"

25 
	~"míu.h
"

27 
vout_fbdev
 *
	gmaö_fb
, *
	gœyî_fb
;

29 
	$om≠_£tup_œyî_
(
fd
, 
íabÀd
, 
x
, 
y
, 
w
, 
h
)

31 
om≠fb_∂™e_öfo
 
pi
 = { 0, };

32 
om≠fb_mem_öfo
 
mi
 = { 0, };

33 
ªt
;

35 
ªt
 = 
	`io˘l
(
fd
, 
OMAPFB_QUERY_PLANE
, &
pi
);

36 i‡(
ªt
 != 0) {

37 
	`≥º‹
("QUERY_PLANE");

41 
ªt
 = 
	`io˘l
(
fd
, 
OMAPFB_QUERY_MEM
, &
mi
);

42 i‡(
ªt
 != 0) {

43 
	`≥º‹
("QUERY_MEM");

48 i‡(
pi
.
íabÀd
) {

49 
pi
.
íabÀd
 = 0;

50 
ªt
 = 
	`io˘l
(
fd
, 
OMAPFB_SETUP_PLANE
, &
pi
);

51 i‡(
ªt
 != 0)

52 
	`≥º‹
("SETUP_PLANE");

56 i‡(
mi
.
size
 < 1024*512*2 * 3) {

57 
mi
.
size
 = 1024*512*2 * 3;

58 
ªt
 = 
	`io˘l
(
fd
, 
OMAPFB_SETUP_MEM
, &
mi
);

59 i‡(
ªt
 != 0) {

60 
	`≥º‹
("SETUP_MEM");

65 
pi
.
pos_x
 = 
x
;

66 
pi
.
pos_y
 = 
y
;

67 
pi
.
out_width
 = 
w
;

68 
pi
.
out_height
 = 
h
;

69 
pi
.
íabÀd
 =Énabled;

71 
ªt
 = 
	`io˘l
(
fd
, 
OMAPFB_SETUP_PLANE
, &
pi
);

72 i‡(
ªt
 != 0) {

73 
	`≥º‹
("SETUP_PLANE");

78 
	}
}

80 
	$om≠_íabÀ_œyî
(
íabÀd
)

82 i‡(
íabÀd
)

83 
	`∂_£t_gun_ª˘
(
g_œyî_x
, 
g_œyî_y
, 
g_œyî_w
, 
g_œyî_h
);

85  
	`om≠_£tup_œyî_
(
	`vout_fbdev_gë_fd
(
œyî_fb
), 
íabÀd
,

86 
g_œyî_x
, 
g_œyî_y
, 
g_œyî_w
, 
g_œyî_h
);

87 
	}
}

89 
	$∂©_om≠_gvideo_›í
()

91 
	`om≠_íabÀ_œyî
(1);

94 
	`vout_fbdev_waô_vsync
(
œyî_fb
);

95 
	}
}

97 *
	$∂©_gvideo_£t_mode
(*
w_ö
, *
h_ö
, *
bµ
)

99 
l
 = 0, 
r
 = 0, 
t
 = 0, 
b
 = 0;

100 
w
 = *
w_ö
, 
h
 = *
h_ö
;

101 *
buf
;

103 i‡(
g_sˇÀr
 =
SCALE_1_1
 || g_sˇÀ∏=
SCALE_2_2
) {

104 i‡(
w
 > 
g_míus¸ìn_w
) {

105 
l
 = 
r
 = (
w
 - 
g_míus¸ìn_w
) / 2;

106 
w
 -
l
 + 
r
;

108 i‡(
h
 > 
g_míus¸ìn_h
) {

109 
t
 = 
b
 = (
h
 - 
g_míus¸ìn_h
) / 2;

110 
h
 -
t
 + 
b
;

114 
buf
 = 
	`vout_fbdev_ªsize
(
œyî_fb
, 
w
, 
h
, *
bµ
,

115 
l
, 
r
, 
t
, 
b
, 3);

117 
	`vout_fbdev_˛ór
(
œyî_fb
);

119 
	`om≠_íabÀ_œyî
(1);

121  
buf
;

122 
	}
}

124 *
	$∂©_gvideo_Êù
()

126  
	`vout_fbdev_Êù
(
œyî_fb
);

127 
	}
}

129 
	$∂©_gvideo_˛o£
()

131 
	`om≠_íabÀ_œyî
(0);

132 
	}
}

134 
	$∂©_video_míu_íãr
(
is_rom_lﬂded
)

136 
g_míus¸ìn_±r
 = 
	`vout_fbdev_ªsize
(
maö_fb
,

137 
g_míus¸ìn_w
, 
g_míus¸ìn_h
, 16, 0, 0, 0, 0, 3);

138 i‡(
g_míus¸ìn_±r
 =
NULL
)

139 
	`Ârötf
(
°dîr
, "warning: vout_fbdev_resize failed\n");

141 
	`xív_upd©e
(
NULL
, NULL, NULL, NULL);

142 
	}
}

144 
	$∂©_video_míu_begö
()

146 
	}
}

148 
	$∂©_video_míu_íd
()

150 
g_míus¸ìn_±r
 = 
	`vout_fbdev_Êù
(
maö_fb
);

151 
	}
}

153 
	$∂©_video_míu_Àave
()

157 
	`vout_fbdev_˛ór
(
maö_fb
);

158 
g_míus¸ìn_±r
 = 
	`vout_fbdev_ªsize
(
maö_fb
,

159 
g_míus¸ìn_w
, 
g_míus¸ìn_h
, 16, 0, 0, 0, 0, 1);

160 i‡(
g_míus¸ìn_±r
 =
NULL
)

161 
	`Ârötf
(
°dîr
, "warning: vout_fbdev_resize failed\n");

162 
	}
}

164 
	$∂©_möimize
()

166 
ªt
;

168 
ªt
 = 
	`vout_fbdev_ßve
(
œyî_fb
);

169 i‡(
ªt
 != 0) {

170 
	`¥ötf
("minimize:Üayer/fb handling failed\n");

174 
	`xív_möimize
();

176 
	`ö_£t_c⁄fig_öt
(0, 
IN_CFG_BLOCKING
, 0);

177 
	`om≠_íabÀ_œyî
(0);

178 
	`vout_fbdev_ª°‹e
(
œyî_fb
);

179 
	}
}

181 *
	$∂©_¥ï¨e_s¸ìnshŸ
(*
w
, *
h
, *
bµ
)

183  
NULL
;

184 
	}
}

186 
	$∂©_om≠_öô
()

188 c⁄° *
maö_fb_«me
, *
œyî_fb_«me
;

189 
fd
, 
ªt
, 
w
, 
h
;

191 
maö_fb_«me
 = 
	`gëív
("FBDEV_MAIN");

192 i‡(
maö_fb_«me
 =
NULL
)

193 
maö_fb_«me
 = "/dev/fb0";

195 
œyî_fb_«me
 = 
	`gëív
("FBDEV_LAYER");

196 i‡(
œyî_fb_«me
 =
NULL
)

197 
œyî_fb_«me
 = "/dev/fb1";

200 
fd
 = 
	`›í
(
œyî_fb_«me
, 
O_RDWR
);

201 i‡(
fd
 == -1) {

202 
	`Ârötf
(
°dîr
, "%s: ", 
œyî_fb_«me
);

203 
	`≥º‹
("open");

204 
	`exô
(1);

207 
g_œyî_x
 = 80, 
g_œyî_y
 = 0;

208 
g_œyî_w
 = 640, 
g_œyî_h
 = 480;

210 
ªt
 = 
	`om≠_£tup_œyî_
(
fd
, 0, 
g_œyî_x
, 
g_œyî_y
, 
g_œyî_w
, 
g_œyî_h
);

211 
	`˛o£
(
fd
);

212 i‡(
ªt
 != 0) {

213 
	`Ârötf
(
°dîr
, "failedÅo set upÜayer,Éxiting.\n");

214 
	`exô
(1);

217 
	`xív_öô
(
NULL
, "PCSX-ReARMed");

219 
w
 = 
h
 = 0;

220 
maö_fb
 = 
	`vout_fbdev_öô
(
maö_fb_«me
, &
w
, &
h
, 16, 2);

221 i‡(
maö_fb
 =
NULL
) {

222 
	`Ârötf
(
°dîr
, "couldn'àöô fb: %s\n", 
maö_fb_«me
);

223 
	`exô
(1);

226 
g_míus¸ìn_w
 = 
w
;

227 
g_míus¸ìn_h
 = 
h
;

228 
g_míus¸ìn_±r
 = 
	`vout_fbdev_Êù
(
maö_fb
);

229 
∂_ª¨med_cbs
.
s¸ìn_w
 = 
w
;

230 
∂_ª¨med_cbs
.
s¸ìn_h
 = 
h
;

232 
w
 = 640;

233 
h
 = 512;

234 
œyî_fb
 = 
	`vout_fbdev_öô
(
œyî_fb_«me
, &
w
, &
h
, 16, 3);

235 i‡(
œyî_fb
 =
NULL
) {

236 
	`Ârötf
(
°dîr
, "couldn'àöô fb: %s\n", 
œyî_fb_«me
);

237 
Áû0
;

242 
Áû0
:

243 
	`vout_fbdev_föish
(
maö_fb
);

244 
	`exô
(1);

245 
	}
}

247 
	$∂©_om≠_föish
()

249 
	`om≠_íabÀ_œyî
(0);

250 
	`vout_fbdev_föish
(
œyî_fb
);

251 
	`vout_fbdev_föish
(
maö_fb
);

252 
	`xív_föish
();

253 
	}
}

	@frontend/plat_omap.h

2 
∂©_om≠_öô
();

3 
∂©_om≠_föish
();

4 
∂©_om≠_gvideo_›í
();

	@frontend/plat_pandora.c

8 
	~<°dio.h
>

9 
	~<löux/öput.h
>

11 
	~"libpico„/öput.h
"

12 
	~"libpico„/löux/ö_evdev.h
"

13 
	~"libpico„/∂©.h
"

14 
	~"∂ugö_lib.h
"

15 
	~"∂©_om≠.h
"

16 
	~"maö.h
"

17 
	~"míu.h
"

19 c⁄° 
ö_deÁu…_böd
 
	gö_evdev_defböds
[] = {

20 { 
KEY_UP
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_UP
 },

21 { 
KEY_DOWN
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_DOWN
 },

22 { 
KEY_LEFT
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_LEFT
 },

23 { 
KEY_RIGHT
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_RIGHT
 },

24 { 
KEY_PAGEUP
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_TRIANGLE
 },

25 { 
KEY_PAGEDOWN
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_CROSS
 },

26 { 
KEY_END
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_CIRCLE
 },

27 { 
KEY_HOME
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_SQUARE
 },

28 { 
KEY_LEFTALT
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_START
 },

29 { 
KEY_LEFTCTRL
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_SELECT
 },

30 { 
KEY_RIGHTSHIFT
,
IN_BINDTYPE_PLAYER12
, 
DKEY_L1
 },

31 { 
KEY_RIGHTCTRL
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_R1
 },

32 { 
KEY_Q
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_L2
 },

33 { 
KEY_P
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_R2
 },

34 { 
KEY_MENU
, 
IN_BINDTYPE_EMU
, 
SACTION_MINIMIZE
 },

35 { 
KEY_SPACE
, 
IN_BINDTYPE_EMU
, 
SACTION_ENTER_MENU
 },

36 { 
KEY_1
, 
IN_BINDTYPE_EMU
, 
SACTION_SAVE_STATE
 },

37 { 
KEY_2
, 
IN_BINDTYPE_EMU
, 
SACTION_LOAD_STATE
 },

38 { 
KEY_3
, 
IN_BINDTYPE_EMU
, 
SACTION_PREV_SSLOT
 },

39 { 
KEY_4
, 
IN_BINDTYPE_EMU
, 
SACTION_NEXT_SSLOT
 },

40 { 
KEY_5
, 
IN_BINDTYPE_EMU
, 
SACTION_TOGGLE_FSKIP
 },

41 { 
KEY_6
, 
IN_BINDTYPE_EMU
, 
SACTION_SCREENSHOT
 },

42 { 
KEY_7
, 
IN_BINDTYPE_EMU
, 
SACTION_TOGGLE_FPS
 },

43 { 
KEY_8
, 
IN_BINDTYPE_EMU
, 
SACTION_SWITCH_DISPMODE
 },

44 { 
KEY_BACKSPACE
,
IN_BINDTYPE_EMU
, 
SACTION_FAST_FORWARD
 },

48 c⁄° 
míu_keym≠
 
	gkey_pbä_m≠
[] =

50 { 
KEY_UP
, 
PBTN_UP
 },

51 { 
KEY_DOWN
, 
PBTN_DOWN
 },

52 { 
KEY_LEFT
, 
PBTN_LEFT
 },

53 { 
KEY_RIGHT
, 
PBTN_RIGHT
 },

55 { 
KEY_END
, 
PBTN_MOK
 },

56 { 
KEY_PAGEDOWN
, 
PBTN_MBACK
 },

57 { 
KEY_HOME
, 
PBTN_MA2
 },

58 { 
KEY_PAGEUP
, 
PBTN_MA3
 },

59 { 
KEY_LEFTCTRL
, 
PBTN_MENU
 },

60 { 
KEY_RIGHTSHIFT
, 
PBTN_L
 },

61 { 
KEY_RIGHTCTRL
, 
PBTN_R
 },

63 { 
KEY_ENTER
, 
PBTN_MOK
 },

64 { 
KEY_ESC
, 
PBTN_MBACK
 },

65 { 
KEY_SEMICOLON
, 
PBTN_MA2
 },

66 { 
KEY_APOSTROPHE
, 
PBTN_MA3
 },

67 { 
KEY_BACKSLASH
, 
PBTN_MENU
 },

68 { 
KEY_LEFTBRACE
, 
PBTN_L
 },

69 { 
KEY_RIGHTBRACE
, 
PBTN_R
 },

72 c⁄° 
ö_pd©a
 
	g∑nd‹a_evdev_pd©a
 = {

73 .
defböds
 = 
ö_evdev_defböds
,

74 .
	gkey_m≠
 = 
key_pbä_m≠
,

75 .
	gkm≠_size
 = (
key_pbä_m≠
) / (key_pbtn_map[0]),

78 
	$∂©_öô
()

80 
	`∂©_om≠_öô
();

81 
	`∂©_èrgë_öô
();

83 
	`ö_evdev_öô
(&
∑nd‹a_evdev_pd©a
);

84 
	`ö_¥obe
();

85 
	`∂©_èrgë_£tup_öput
();

87 
ö_adev
[0] = 
	`ö_«me_to_id
("evdev:nub0");

88 
ö_adev
[1] = 
	`ö_«me_to_id
("evdev:nub1");

89 
ö_adev_is_nublike
[0] = in_adev_is_nublike[1] = 1;

92 
	}
}

94 
	$∂©_föish
()

96 
	`∂©_om≠_föish
();

97 
	`∂©_èrgë_föish
();

98 
	}
}

100 
	$∂©_gvideo_›í
(
is_∑l
)

102 
	`∂©_èrgë_lcdøã_£t
(
is_∑l
);

103 
	`∂©_èrgë_hwfûãr_£t
(
∂©_èrgë
.
hwfûãr
);

104 
	`∂©_èrgë_gamma_£t
(
g_gamma
, 0);

106 
	`∂©_om≠_gvideo_›í
();

107 
	}
}

109 
	$∂©_åiggî_vibøã
(
∑d
, 
low
, 
high
)

111 
	}
}

	@frontend/plat_pollux.c

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<sys/°©.h
>

27 
	~<f˙é.h
>

28 
	~<sys/io˘l.h
>

29 
	~<uni°d.h
>

30 
	~<löux/fb.h
>

31 
	~<sys/mm™.h
>

32 
	~<löux/soundˇrd.h
>

33 
	~<löux/öput.h
>

35 
	~"libpico„/∂©.h
"

36 
	~"libpico„/öput.h
"

37 
	~"libpico„/gp2x/ö_gp2x.h
"

38 
	~"libpico„/gp2x/soc_pﬁlux.h
"

39 
	~"libpico„/löux/ö_evdev.h
"

40 
	~"libpico„/míu.h
"

41 
	~"w¨m/w¨m.h
"

42 
	~"∂ugö_lib.h
"

43 
	~"∂_gun_ts.h
"

44 
	~"blô320.h
"

45 
	~"ö_tsbuâ⁄.h
"

46 
	~"maö.h
"

47 
	~"míu.h
"

48 
	~"∂©.h
"

49 
	~"c•a˚.h
"

50 
	~"../libpcsxc‹e/psxmem_m≠.h
"

53 
	gfbdev
 = -1;

54 *
	gfb_vaddrs
[2];

55 
	gfb_∑ddrs
[2];

56 
	gfb_w‹k_buf
;

57 
	ghave_w¨m
;

58 
	#FB_VRAM_SIZE
 (320*240*2*2*2)

59 
uµîmem_pba£
, 
vøm_pba£
;

	)

61 *
	gpsx_vøm
;

62 
	gpsx_°ï
, 
	gpsx_width
, 
	gpsx_height
, 
	gpsx_bµ
;

63 
	gpsx_off£t_x
, 
	gpsx_off£t_y
, 
	gpsx_§c_width
, 
	gpsx_§c_height
;

64 
	gfb_off£t_x
, 
	gfb_off£t_y
;

66 
ˇ™oo_öô
();

67 
wiz_öô
();

70 c⁄° 
ö_deÁu…_böd
 
	gö_evdev_defböds
[] = {

71 { 
KEY_UP
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_UP
 },

72 { 
KEY_DOWN
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_DOWN
 },

73 { 
KEY_LEFT
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_LEFT
 },

74 { 
KEY_RIGHT
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_RIGHT
 },

75 { 
BTN_TOP
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_TRIANGLE
 },

76 { 
BTN_THUMB
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_CROSS
 },

77 { 
BTN_THUMB2
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_CIRCLE
 },

78 { 
BTN_TRIGGER
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_SQUARE
 },

79 { 
BTN_BASE3
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_START
 },

80 { 
BTN_BASE4
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_SELECT
 },

81 { 
BTN_TOP2
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_L1
 },

82 { 
BTN_PINKIE
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_R1
 },

83 { 
BTN_BASE
, 
IN_BINDTYPE_EMU
, 
SACTION_ENTER_MENU
 },

87 c⁄° 
míu_keym≠
 
	gkey_pbä_m≠
[] =

89 { 
KEY_UP
, 
PBTN_UP
 },

90 { 
KEY_DOWN
, 
PBTN_DOWN
 },

91 { 
KEY_LEFT
, 
PBTN_LEFT
 },

92 { 
KEY_RIGHT
, 
PBTN_RIGHT
 },

94 { 
BTN_THUMB2
, 
PBTN_MOK
 },

95 { 
BTN_THUMB
, 
PBTN_MBACK
 },

96 { 
BTN_TRIGGER
, 
PBTN_MA2
 },

97 { 
BTN_TOP
, 
PBTN_MA3
 },

98 { 
BTN_BASE
, 
PBTN_MENU
 },

99 { 
BTN_TOP2
, 
PBTN_L
 },

100 { 
BTN_PINKIE
, 
PBTN_R
 },

102 { 
KEY_ENTER
, 
PBTN_MOK
 },

103 { 
KEY_ESC
, 
PBTN_MBACK
 },

104 { 
KEY_SEMICOLON
, 
PBTN_MA2
 },

105 { 
KEY_APOSTROPHE
, 
PBTN_MA3
 },

106 { 
KEY_BACKSLASH
, 
PBTN_MENU
 },

107 { 
KEY_LEFTBRACE
, 
PBTN_L
 },

108 { 
KEY_RIGHTBRACE
, 
PBTN_R
 },

111 c⁄° 
ö_pd©a
 
	ggp2x_evdev_pd©a
 = {

112 .
defböds
 = 
ö_evdev_defböds
,

113 .
	gkey_m≠
 = 
key_pbä_m≠
,

114 .
	gkm≠_size
 = (
key_pbä_m≠
) / (key_pbtn_map[0]),

117 *
	$fb_Êù
()

119 
memªgl
[0x406C>>2] = memªgl[0x446C>>2] = 
fb_∑ddrs
[
fb_w‹k_buf
];

120 
memªgl
[0x4058>>2] |= 0x10;

121 
memªgl
[0x4458>>2] |= 0x10;

122 
fb_w‹k_buf
 ^= 1;

123  
fb_vaddrs
[
fb_w‹k_buf
];

124 
	}
}

126 
	$pﬁlux_ch™gemode
(
bµ
, 
is_bgr
)

128 
code
 = 0, 
byãs
 = 2;

129 
r
;

131 
	`¥ötf
("ch™gemode: %dbµ %s\n", 
bµ
, 
is_bgr
 ? "bgr" : "rgb");

133 
memªgl
[0x4004>>2] = 0x00ef013f;

134 
memªgl
[0x4000>>2] |= 1 << 3;

136 
bµ
)

139 
code
 = 0x443a;

140 
byãs
 = 1;

143 
code
 = 
is_bgr
 ? 0xc342 : 0x4432;

144 
byãs
 = 2;

147 
code
 = 
is_bgr
 ? 0xc653 : 0x4653;

148 
byãs
 = 3;

151 
	`¥ötf
("unh™dÀd bµÑeque°: %d\n", 
bµ
);

156 
memªgl
[0x405c>>2] = memªgl[0x445c>>2] = 
byãs
;

157 
memªgl
[0x4060>>2] = memªgl[0x4460>>2] = 320 * 
byãs
;

159 
r
 = 
memªgl
[0x4058>>2];

160 
r
 = (∏& 0xffffË| (
code
 << 16) | 0x10;

161 
memªgl
[0x4058>>2] = 
r
;

163 
r
 = 
memªgl
[0x4458>>2];

164 
r
 = (∏& 0xffffË| (
code
 << 16) | 0x10;

165 
memªgl
[0x4458>>2] = 
r
;

166 
	}
}

168 
	$˝u_˛ock_wøµî
(
mhz
)

171 
	`pﬁlux_˝u_˛ock_£t
(
˝u_˛ock
);

172 
	`SPU›í
();

173 
	`SPU˛o£
();

175 
	`pﬁlux_˝u_˛ock_£t
(
mhz
);

176 
	`SPU˛o£
();

177 
	`SPU›í
();

180 
	}
}

182 
	#TIMER_BASE3
 0x1980

	)

183 
	#TIMER_REG
(
x
Ë
memªgl
[(
TIMER_BASE3
 + xË>> 2]

	)

185 
__©åibuã__
((
unu£d
)Ë
	$timî_gë
()

187 
	`TIMER_REG
(0x08) |= 0x48;

188  
	`TIMER_REG
(0);

189 
	}
}

191 
	$∂©_video_míu_íãr
(
is_rom_lﬂded
)

193 i‡(
∂_vout_buf
 !
NULL
) {

194 i‡(
psx_bµ
 == 16)

196 
	`bgr555_to_rgb565
(
∂_vout_buf
,Öl_vout_buf, 320*240*2);

198 
	`mem£t
(
∂_vout_buf
, 0, 320*240*2);

201 
	`pﬁlux_ch™gemode
(16, 0);

202 
	}
}

204 
	$∂©_video_míu_begö
()

206 
	}
}

208 
	$∂©_video_míu_íd
()

210 
g_míus¸ìn_±r
 = 
	`fb_Êù
();

211 
	}
}

213 
	$∂©_video_míu_Àave
()

215 i‡(
psx_vøm
 =
NULL
) {

216 
	`Ârötf
(
°dîr
, "GPUÖlugin didÇotÖrovide vram\n");

217 
	`exô
(1);

220 i‡(
gp2x_dev_id
 =
GP2X_DEV_CAANOO
)

221 
	`ö_£t_c⁄fig_öt
(
	`ö_«me_to_id
("evdev:pollux-analog"),

222 
IN_CFG_ABS_DEAD_ZONE
, 
™Æog_dódz⁄e
);

224 
	`mem£t
(
g_míus¸ìn_±r
, 0, 320*240 * 
psx_bµ
/8);

225 
g_míus¸ìn_±r
 = 
	`fb_Êù
();

226 
	`mem£t
(
g_míus¸ìn_±r
, 0, 320*240 * 
psx_bµ
/8);

227 
	}
}

229 *
	$∂©_¥ï¨e_s¸ìnshŸ
(*
w
, *
h
, *
bµ
)

231 
	`bgr555_to_rgb565
(
∂_vout_buf
,Öl_vout_buf, 320*240*2);

232 *
w
 = 320;

233 *
h
 = 240;

234 *
bµ
 = 
psx_bµ
;

235  
∂_vout_buf
;

236 
	}
}

238 
	$∂©_möimize
()

240 
	}
}

242 
	$•íd_cy˛es
(
lo›s
)

244 
asm
 volatile (

248 :: "r" (
lo›s
) : "cc", "r0");

249 
	}
}

251 
	#DMA_BASE6
 0x0300

	)

252 
	#DMA_REG
(
x
Ë
memªgl
[(
DMA_BASE6
 + xË>> 2]

	)

255 
	$øw_blô_dma
(
doffs
, c⁄° *
vøm
, 
w
, 
h
,

256 
s°ride
, 
bgr24
)

258 
pixñ_off£t
 = (*)
vøm
 - 
psx_vøm
;

259 
d°
 = 
fb_∑ddrs
[
fb_w‹k_buf
] +

260 (
fb_off£t_y
 * 320 + 
fb_off£t_x
Ë* 
psx_bµ
 / 8;

261 
•sx_löe
 = 
pixñ_off£t
 / 1024 + 
psx_off£t_y
;

262 
•sx_off£t
 = (
pixñ_off£t
 + 
psx_off£t_x
) & 0x3f8;

263 
vøm_byã_pos
, 
vøm_byã_°ï
;

264 
d°_°ride
 = 320 * 
psx_bµ
 / 8;

265 
Àn
 = 
psx_§c_width
 * 
psx_bµ
 / 8;

266 
i
;

270 
d°
 &= ~7;

271 
Àn
 &= ~7;

273 i‡(
	`DMA_REG
(0x0c) & 0x90000) {

274 
	`¥ötf
("alreadyÑunnig DMA?\n");

275 
	`DMA_REG
(0x0c) = 0x100000;

277 i‡((
	`DMA_REG
(0x2c) & 0x0f) < 5) {

278 
	`¥ötf
("DMA queue busy?\n");

279 
	`DMA_REG
(0x24) = 1;

282 
vøm_byã_pos
 = 
vøm_pba£
;

283 
vøm_byã_pos
 +(
•sx_löe
 & 511Ë* 2 * 1024 + 
•sx_off£t
 * 2;

284 
vøm_byã_°ï
 = 
psx_°ï
 * 2 * 1024;

286 
i
 = 
psx_§c_height
; i > 0;

287 
i
--, 
vøm_byã_pos
 +
vøm_byã_°ï
, 
d°
 +
d°_°ride
)

289 (
	`DMA_REG
(0x2c) & 0x0f) < 4)

290 
	`•íd_cy˛es
(10);

293 
	`DMA_REG
(0x20) = 1;

294 
	`DMA_REG
(0x10Ë
vøm_byã_pos
;

295 
	`DMA_REG
(0x14Ë
d°
;

296 
	`DMA_REG
(0x18Ë
Àn
 - 1;

297 
	`DMA_REG
(0x1c) = 0x80000;

299 
	}
}

301 
	#make_Êù_func
(
«me
, 
blôfunc
) \

302 
	`«me
(
doffs
, c⁄° *
vøm_
, 
w
, 
h
, 
s°ride
, 
bgr24
) \

304 c⁄° *
vøm
 = 
vøm_
; \

305 *
d°
 = (*)
g_míus¸ìn_±r
 + \

306 (
fb_off£t_y
 * 320 + 
fb_off£t_x
Ë* 
psx_bµ
 / 8; \

307 
d°_°ride
 = 320 * 
psx_bµ
 / 8; \

308 
Àn
 = 
psx_§c_width
 * 
psx_bµ
 / 8; \

309 
i
; \

311 
vøm
 +
psx_off£t_y
 * 1024 + 
psx_off£t_x
; \

312 
i
 = 
psx_§c_height
; i > 0; i--, 
vøm
 +
psx_°ï
 * 1024, 
d°
 +
d°_°ride
)\

313 
	`blôfunc
(
d°
, 
vøm
, 
Àn
); \

314 }

	)

316 
	$make_Êù_func
(
øw_blô_so·
, 
mem˝y
)

317 
	$make_Êù_func
(
øw_blô_so·_368
, 
blô320_368
)

318 
	$make_Êù_func
(
øw_blô_so·_512
, 
blô320_512
)

319 
	$make_Êù_func
(
øw_blô_so·_640
, 
blô320_640
)

321 *
	$∂©_gvideo_£t_mode
(*
w_
, *
h_
, *
bµ_
)

323 
poff_w
, 
poff_h
, 
w_max
;

324 
w
 = *
w_
, 
h
 = *
h_
, 
bµ
 = *
bµ_
;

326 i‡(!
w
 || !
h
 || !
bµ
)

327  
NULL
;

329 
	`¥ötf
("psx mode: %dx%d@%d\n", 
w
, 
h
, 
bµ
);

330 
psx_width
 = 
w
;

331 
psx_height
 = 
h
;

332 
psx_bµ
 = 
bµ
;

334 
w
 + (
bµ
 !16Ë+ !
so·_sˇlög
) {

336 
∂_∂©_blô
 = 
øw_blô_so·_640
;

337 
w_max
 = 640;

340 
∂_∂©_blô
 = 
øw_blô_so·_512
;

341 
w_max
 = 512;

345 
∂_∂©_blô
 = 
øw_blô_so·_368
;

346 
w_max
 = 368;

349 
∂_∂©_blô
 = 
have_w¨m
 ? 
øw_blô_dma
 : 
øw_blô_so·
;

350 
w_max
 = 320;

354 
psx_°ï
 = 1;

355 i‡(
h
 > 256) {

356 
psx_°ï
 = 2;

357 
h
 /= 2;

360 
poff_w
 = 
poff_h
 = 0;

361 i‡(
w
 > 
w_max
) {

362 
poff_w
 = 
w
 / 2 - 
w_max
 / 2;

363 
w
 = 
w_max
;

365 
fb_off£t_x
 = 0;

366 i‡(
w
 < 320)

367 
fb_off£t_x
 = 320/2 - 
w
 / 2;

368 i‡(
h
 > 240) {

369 
poff_h
 = 
h
 / 2 - 240/2;

370 
h
 = 240;

372 
fb_off£t_y
 = 240/2 - 
h
 / 2;

374 
psx_off£t_x
 = 
poff_w
 * 
psx_bµ
/8 / 2;

375 
psx_off£t_y
 = 
poff_h
;

376 
psx_§c_width
 = 
w
;

377 
psx_§c_height
 = 
h
;

379 i‡(
fb_off£t_x
 || 
fb_off£t_y
) {

381 
	`mem£t
(
g_míus¸ìn_±r
, 0, 320*240 * 
psx_bµ
/8);

382 
g_míus¸ìn_±r
 = 
	`fb_Êù
();

383 
	`mem£t
(
g_míus¸ìn_±r
, 0, 320*240 * 
psx_bµ
/8);

386 
	`pﬁlux_ch™gemode
(
bµ
, 1);

388 
	`∂_£t_gun_ª˘
(
fb_off£t_x
, 
fb_off£t_y
, 
w
 > 320 ? 320 : w, 
h
);

391 *
w_
 = 320;

392 *
h_
 = 
fb_off£t_y
 + 
psx_§c_height
;

394  
g_míus¸ìn_±r
;

395 
	}
}

398 
	$∂©_gvideo_›í
(
is_∑l
)

400 
	}
}

402 *
	$∂©_gvideo_Êù
()

404 
g_míus¸ìn_±r
 = 
	`fb_Êù
();

405  
g_míus¸ìn_±r
;

406 
	}
}

408 
	$∂©_gvideo_˛o£
()

410 
	}
}

412 *
	$∂_emu_mm≠
(
addr
, 
size_t
 
size
, 
is_fixed
,

413 
psxM≠Tag
 
èg
)

415 
pba£
;

416 *
ªtvÆ
;

417 
ªt
;

419 i‡(!
have_w¨m
)

420 
basic_m≠
;

422 
èg
) {

423 
MAP_TAG_RAM
:

424 i‡(
size
 > 0x400000) {

425 
	`Ârötf
(
°dîr
, "unexpectedÑam mapÑequest: %08lx %x\n",

426 
addr
, 
size
);

427 
	`exô
(1);

429 
pba£
 = (
uµîmem_pba£
 + 0xffffff) & ~0xffffff;

430 
pba£
 += 0x400000;

431 
ªtvÆ
 = (*)
addr
;

432 
ªt
 = 
	`w¨m_mm≠_£˘i⁄
(
ªtvÆ
, 
pba£
, 
size
, 
WCB_C_BIT
);

433 i‡(
ªt
 != 0) {

434 
	`Ârötf
(
°dîr
, "ram section map failed\n");

435 
	`exô
(1);

437 
out
;

438 
MAP_TAG_VRAM
:

439 i‡(
size
 > 0x400000) {

440 
	`Ârötf
(
°dîr
, "unexpected vram mapÑequest: %08lx %x\n",

441 
addr
, 
size
);

442 
	`exô
(1);

444 i‡(
addr
 == 0)

445 
addr
 = 0x60000000;

446 
vøm_pba£
 = (
uµîmem_pba£
 + 0xffffff) & ~0xffffff;

447 
ªtvÆ
 = (*)
addr
;

449 
ªt
 = 
	`w¨m_mm≠_£˘i⁄
(
ªtvÆ
, 
vøm_pba£
, 
size
, 
WCB_C_BIT
);

450 i‡(
ªt
 != 0) {

451 
	`Ârötf
(
°dîr
, "vram section map failed\n");

452 
	`exô
(1);

454 
out
;

455 
MAP_TAG_LUTS
:

457 i‡(
size
 > 0x800000) {

458 
	`Ârötf
(
°dîr
, "unexpected LUT mapÑequest: %08lx %x\n",

459 
addr
, 
size
);

460 
	`exô
(1);

462 
pba£
 = (
uµîmem_pba£
 + 0xffffff) & ~0xffffff;

463 
pba£
 += 0x800000;

464 
ªtvÆ
 = (*)
addr
;

465 
ªt
 = 
	`w¨m_mm≠_£˘i⁄
(
ªtvÆ
, 
pba£
, 
size
, 
WCB_C_BIT
);

466 i‡(
ªt
 != 0) {

467 
	`Ârötf
(
°dîr
, "LUT section map failed\n");

468 
	`exô
(1);

470 
out
;

475 
basic_m≠
:

476 
ªtvÆ
 = 
	`∂©_mm≠
(
addr
, 
size
, 0, 
is_fixed
);

478 
out
:

479 i‡(
èg
 =
MAP_TAG_VRAM
)

480 
psx_vøm
 = 
ªtvÆ
;

481  
ªtvÆ
;

482 
	}
}

484 
	$∂_emu_munm≠
(*
±r
, 
size_t
 
size
, 
psxM≠Tag
 
èg
)

486 
èg
) {

487 
MAP_TAG_RAM
:

488 
MAP_TAG_VRAM
:

489 
MAP_TAG_LUTS
:

490 
	`w¨m_munm≠_£˘i⁄
(
±r
, 
size
);

493 
	`∂©_munm≠
(
±r
, 
size
);

496 
	}
}

498 
	$∂©_öô
()

500 c⁄° *
maö_fb_«me
 = "/dev/fb0";

501 
fb_fix_s¸ìnöfo
 
fbfix
;

502 
ªt
;

504 
	`∂©_èrgë_öô
();

506 
fbdev
 = 
	`›í
(
maö_fb_«me
, 
O_RDWR
);

507 i‡(
fbdev
 == -1) {

508 
	`Ârötf
(
°dîr
, "%s: ", 
maö_fb_«me
);

509 
	`≥º‹
("open");

510 
	`exô
(1);

513 
ªt
 = 
	`io˘l
(
fbdev
, 
FBIOGET_FSCREENINFO
, &
fbfix
);

514 i‡(
ªt
 == -1) {

515 
	`≥º‹
("ioctl(fbdev) failed");

516 
	`exô
(1);

518 
uµîmem_pba£
 = 
fbfix
.
smem_°¨t
;

520 
	`¥ötf
("‰amebuf„r: \"%s\" @ %08lx\n", 
fbfix
.
id
, fbfix.
smem_°¨t
);

521 
fb_∑ddrs
[0] = 
fbfix
.
smem_°¨t
;

522 
fb_∑ddrs
[1] = fb_paddrs[0] + 320*240*4;

524 
ªt
 = 
	`w¨m_öô
();

525 
have_w¨m
 = (
ªt
 == 0);

527 i‡(
have_w¨m
) {

529 
fb_vaddrs
[0] = (*)0x7fe00000;

530 
ªt
 = 
	`w¨m_mm≠_£˘i⁄
(
fb_vaddrs
[0], 
fb_∑ddrs
[0],

531 
FB_VRAM_SIZE
, 
WCB_C_BIT
);

532 i‡(
ªt
 != 0) {

533 
	`Ârötf
(
°dîr
, "fb section map failed\n");

534 
fb_vaddrs
[0] = 
NULL
;

537 
	`exô
(1);

540 i‡(
fb_vaddrs
[0] =
NULL
) {

541 
fb_vaddrs
[0] = 
	`mm≠
(0, 
FB_VRAM_SIZE
, 
PROT_READ
|
PROT_WRITE
,

542 
MAP_SHARED
, 
memdev
, 
fb_∑ddrs
[0]);

543 i‡(
fb_vaddrs
[0] =
MAP_FAILED
) {

544 
	`≥º‹
("mmap(fb_vaddrs) failed");

545 
	`exô
(1);

548 
	`mem£t
(
fb_vaddrs
[0], 0, 
FB_VRAM_SIZE
);

549 
	`w¨m_ch™ge_cb_ønge
(
WCB_C_BIT
, 1, 
fb_vaddrs
[0], 
FB_VRAM_SIZE
);

551 
	`¥ötf
(" m≠≥d @%p\n", 
fb_vaddrs
[0]);

553 
fb_vaddrs
[1] = (*)fb_vaddrs[0] + 320*240*4;

555 
	`mem£t
(
fb_vaddrs
[0], 0, 
FB_VRAM_SIZE
);

557 
	`pﬁlux_ch™gemode
(16, 0);

558 
g_míus¸ìn_w
 = 320;

559 
g_míus¸ìn_h
 = 240;

560 
g_míus¸ìn_±r
 = 
	`fb_Êù
();

563 
	`DMA_REG
(0x0c) = 0x20000;

565 
	`ö_tsbuâ⁄_öô
();

566 
	`ö_evdev_öô
(&
gp2x_evdev_pd©a
);

567 i‡(
gp2x_dev_id
 =
GP2X_DEV_CAANOO
)

568 
	`ˇ™oo_öô
();

570 
	`wiz_öô
();

572 
∂_∂©_blô
 = 
have_w¨m
 ? 
øw_blô_dma
 : 
øw_blô_so·
;

574 
psx_§c_width
 = 320;

575 
psx_§c_height
 = 240;

576 
psx_bµ
 = 16;

578 
∂_ª¨med_cbs
.
s¸ìn_w
 = 320;

579 
∂_ª¨med_cbs
.
s¸ìn_h
 = 240;

581 
	`∂©_èrgë_£tup_öput
();

583 
∂©_èrgë
.
˝u_˛ock_£t
 = 
˝u_˛ock_wøµî
;

585 
psxM≠Hook
 = 
∂_emu_mm≠
;

586 
psxUnm≠Hook
 = 
∂_emu_munm≠
;

587 
	}
}

589 
	$∂©_föish
()

591 
	`w¨m_föish
();

592 
	`mem£t
(
fb_vaddrs
[0], 0, 
FB_VRAM_SIZE
);

593 
	`munm≠
(
fb_vaddrs
[0], 
FB_VRAM_SIZE
);

594 
	`˛o£
(
fbdev
);

595 
	`∂©_èrgë_föish
();

596 
	}
}

599 c⁄° * c⁄° 
	gˇ™oo_keys
[
KEY_MAX
 + 1] = {

600 [0 ... 
KEY_MAX
] = 
NULL
,

601 [
KEY_UP
] = "Up",

602 [
KEY_LEFT
] = "Left",

603 [
KEY_RIGHT
] = "Right",

604 [
KEY_DOWN
] = "Down",

605 [
BTN_TRIGGER
] = "A",

606 [
BTN_THUMB
] = "X",

607 [
BTN_THUMB2
] = "B",

608 [
BTN_TOP
] = "Y",

609 [
BTN_TOP2
] = "L",

610 [
BTN_PINKIE
] = "R",

611 [
BTN_BASE
] = "Home",

612 [
BTN_BASE2
] = "Lock",

613 [
BTN_BASE3
] = "I",

614 [
BTN_BASE4
] = "II",

615 [
BTN_BASE5
] = "Push",

618 
	sh≠tic_d©a
 {

619 
	mcou¡
;

621 
	mtime
, 
	m°ªngth
;

622 } 
	ma˘i⁄s
[120];

625 
	#HAPTIC_IOCTL_MAGIC
 'I'

	)

626 
	#HAPTIC_PLAY_PATTERN
 
	`_IOW
(
HAPTIC_IOCTL_MAGIC
, 4, 
h≠tic_d©a
)

	)

627 
	#HAPTIC_INDIVIDUAL_MODE
 
	`_IOW
(
HAPTIC_IOCTL_MAGIC
, 5, )

	)

628 
	#HAPTIC_SET_VIB_LEVEL
 
	`_IOW
(
HAPTIC_IOCTL_MAGIC
, 9, )

	)

630 
	gh≠ticdev
 = -1;

631 
h≠tic_d©a
 
	gh≠tic_£q
[2];

633 
	$h≠tic_ªad
(c⁄° *
‚ame
, 
h≠tic_d©a
 *
d©a
)

635 
i
, 
ªt
, 
v1
, 
v2
;

636 
buf
[128], *
p
;

637 
FILE
 *
f
;

639 
f
 = 
	`f›í
(
‚ame
, "r");

640 i‡(
f
 =
NULL
) {

641 
	`Ârötf
(
°dîr
, "f›í(%s)", 
‚ame
);

642 
	`≥º‹
("");

646 
i
 = 0; i < (
d©a
->
a˘i⁄s
) / (data->actions[0]); ) {

647 
p
 = 
	`fgës
(
buf
, (buf), 
f
);

648 i‡(
p
 =
NULL
)

650 *
p
 != 0 && *p == ' ')

651 
p
++;

652 i‡(*
p
 == 0 || *p == ';' || *p == '#')

655 
ªt
 = 
	`ssˇnf
(
buf
, "%d %d", &
v1
, &
v2
);

656 i‡(
ªt
 != 2) {

657 
	`Ârötf
(
°dîr
, "ˇn'à∑r£: %s", 
buf
);

661 
d©a
->
a˘i⁄s
[
i
].
time
 = 
v1
;

662 
d©a
->
a˘i⁄s
[
i
].
°ªngth
 = 
v2
;

663 
i
++;

665 
	`f˛o£
(
f
);

667 i‡(
i
 == 0) {

668 
	`Ârötf
(
°dîr
, "bad h≠ti¯fûe: %s\n", 
‚ame
);

671 
d©a
->
cou¡
 = 
i
;

674 
	}
}

676 
	$h≠tic_öô
()

678 
ªt
, 
i
;

680 
ªt
 = 
	`h≠tic_ªad
("h≠tic_w.cfg", &
h≠tic_£q
[0]);

681 i‡(
ªt
 != 0)

683 
ªt
 = 
	`h≠tic_ªad
("h≠tic_s.cfg", &
h≠tic_£q
[1]);

684 i‡(
ªt
 != 0)

687 
h≠ticdev
 = 
	`›í
("/dev/iß1200", 
O_RDWR
 | 
O_NONBLOCK
);

688 i‡(
h≠ticdev
 == -1) {

689 
	`≥º‹
("open(/dev/isa1200)");

693 
i
 = 0;

694 
ªt
 = 
	`io˘l
(
h≠ticdev
, 
HAPTIC_INDIVIDUAL_MODE
, &
i
);

695 
i
 = 3;

696 
ªt
 |
	`io˘l
(
h≠ticdev
, 
HAPTIC_SET_VIB_LEVEL
, &
i
);

697 i‡(
ªt
 != 0) {

698 
	`Ârötf
(
°dîr
, "haptic ioctls failed\n");

699 
	`˛o£
(
h≠ticdev
);

700 
h≠ticdev
 = -1;

705 
	}
}

707 
	$∂©_åiggî_vibøã
(
∑d
, 
low
, 
high
)

709 
is_°r⁄g
;

710 
ªt
;

712 i‡(
low
 =0 && 
high
 == 0)

714 
is_°r⁄g
 = (
high
 >= 0xf0);

716 i‡(
h≠ticdev
 == -2)

718 i‡(
h≠ticdev
 < 0) {

719 
ªt
 = 
	`h≠tic_öô
();

720 i‡(
ªt
 < 0) {

721 
h≠ticdev
 = -2;

726 
	`io˘l
(
h≠ticdev
, 
HAPTIC_PLAY_PATTERN
, &
h≠tic_£q
[!!
is_°r⁄g
]);

727 
	}
}

729 
	$ˇ™oo_öô
()

731 
	`ö_¥obe
();

732 
	`ö_£t_c⁄fig
(
	`ö_«me_to_id
("evdev:pﬁlux-™Æog"), 
IN_CFG_KEY_NAMES
,

733 
ˇ™oo_keys
, (caanoo_keys));

734 
	}
}

737 c⁄° 
ö_deÁu…_böd
 
	gö_gp2x_defböds
[] =

740 { 
GP2X_BTN_UP
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_UP
 },

741 { 
GP2X_BTN_DOWN
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_DOWN
 },

742 { 
GP2X_BTN_LEFT
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_LEFT
 },

743 { 
GP2X_BTN_RIGHT
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_RIGHT
 },

744 { 
GP2X_BTN_X
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_CROSS
 },

745 { 
GP2X_BTN_B
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_CIRCLE
 },

746 { 
GP2X_BTN_A
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_SQUARE
 },

747 { 
GP2X_BTN_Y
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_TRIANGLE
 },

748 { 
GP2X_BTN_L
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_L1
 },

749 { 
GP2X_BTN_R
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_R1
 },

750 { 
GP2X_BTN_START
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_START
 },

751 { 
GP2X_BTN_SELECT
, 
IN_BINDTYPE_EMU
, 
SACTION_ENTER_MENU
 },

752 { 
GP2X_BTN_VOL_UP
, 
IN_BINDTYPE_EMU
, 
SACTION_VOLUME_UP
 },

753 { 
GP2X_BTN_VOL_DOWN
, 
IN_BINDTYPE_EMU
, 
SACTION_VOLUME_DOWN
 },

758 vﬁ©ûê*
	ggp2x_memªgs
;

760 
	$wiz_öô
()

762 
	`ö_gp2x_öô
(
ö_gp2x_defböds
);

763 
	`ö_¥obe
();

764 
	}
}

	@frontend/plat_sdl.c

11 
	~<°dio.h
>

12 
	~<SDL.h
>

14 
	~"libpico„/öput.h
"

15 
	~"libpico„/ö_sdl.h
"

16 
	~"libpico„/míu.h
"

17 
	~"libpico„/f⁄ts.h
"

18 
	~"libpico„/∂©_sdl.h
"

19 
	~"libpico„/gl.h
"

20 
	~"c•a˚.h
"

21 
	~"∂ugö_lib.h
"

22 
	~"∂ugö.h
"

23 
	~"maö.h
"

24 
	~"∂©.h
"

25 
	~"ªvisi⁄.h
"

27 c⁄° 
ö_deÁu…_böd
 
	gö_sdl_defböds
[] = {

28 { 
SDLK_UP
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_UP
 },

29 { 
SDLK_DOWN
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_DOWN
 },

30 { 
SDLK_LEFT
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_LEFT
 },

31 { 
SDLK_RIGHT
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_RIGHT
 },

32 { 
SDLK_d
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_TRIANGLE
 },

33 { 
SDLK_z
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_CROSS
 },

34 { 
SDLK_x
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_CIRCLE
 },

35 { 
SDLK_s
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_SQUARE
 },

36 { 
SDLK_v
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_START
 },

37 { 
SDLK_c
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_SELECT
 },

38 { 
SDLK_w
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_L1
 },

39 { 
SDLK_r
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_R1
 },

40 { 
SDLK_e
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_L2
 },

41 { 
SDLK_t
, 
IN_BINDTYPE_PLAYER12
, 
DKEY_R2
 },

42 { 
SDLK_ESCAPE
, 
IN_BINDTYPE_EMU
, 
SACTION_ENTER_MENU
 },

43 { 
SDLK_F1
, 
IN_BINDTYPE_EMU
, 
SACTION_SAVE_STATE
 },

44 { 
SDLK_F2
, 
IN_BINDTYPE_EMU
, 
SACTION_LOAD_STATE
 },

45 { 
SDLK_F3
, 
IN_BINDTYPE_EMU
, 
SACTION_PREV_SSLOT
 },

46 { 
SDLK_F4
, 
IN_BINDTYPE_EMU
, 
SACTION_NEXT_SSLOT
 },

47 { 
SDLK_F5
, 
IN_BINDTYPE_EMU
, 
SACTION_TOGGLE_FSKIP
 },

48 { 
SDLK_F6
, 
IN_BINDTYPE_EMU
, 
SACTION_SCREENSHOT
 },

49 { 
SDLK_F7
, 
IN_BINDTYPE_EMU
, 
SACTION_TOGGLE_FPS
 },

50 { 
SDLK_F8
, 
IN_BINDTYPE_EMU
, 
SACTION_SWITCH_DISPMODE
 },

51 { 
SDLK_F11
, 
IN_BINDTYPE_EMU
, 
SACTION_TOGGLE_FULLSCREEN
 },

52 { 
SDLK_BACKSPACE
, 
IN_BINDTYPE_EMU
, 
SACTION_FAST_FORWARD
 },

56 c⁄° 
míu_keym≠
 
	gö_sdl_key_m≠
[] =

58 { 
SDLK_UP
, 
PBTN_UP
 },

59 { 
SDLK_DOWN
, 
PBTN_DOWN
 },

60 { 
SDLK_LEFT
, 
PBTN_LEFT
 },

61 { 
SDLK_RIGHT
, 
PBTN_RIGHT
 },

62 { 
SDLK_RETURN
, 
PBTN_MOK
 },

63 { 
SDLK_ESCAPE
, 
PBTN_MBACK
 },

64 { 
SDLK_SEMICOLON
, 
PBTN_MA2
 },

65 { 
SDLK_QUOTE
, 
PBTN_MA3
 },

66 { 
SDLK_LEFTBRACKET
, 
PBTN_L
 },

67 { 
SDLK_RIGHTBRACKET
, 
PBTN_R
 },

70 c⁄° 
míu_keym≠
 
	gö_sdl_joy_m≠
[] =

72 { 
SDLK_UP
, 
PBTN_UP
 },

73 { 
SDLK_DOWN
, 
PBTN_DOWN
 },

74 { 
SDLK_LEFT
, 
PBTN_LEFT
 },

75 { 
SDLK_RIGHT
, 
PBTN_RIGHT
 },

77 { 
SDLK_WORLD_0
, 
PBTN_MOK
 },

78 { 
SDLK_WORLD_1
, 
PBTN_MBACK
 },

79 { 
SDLK_WORLD_2
, 
PBTN_MA2
 },

80 { 
SDLK_WORLD_3
, 
PBTN_MA3
 },

83 c⁄° 
ö_pd©a
 
	gö_sdl_∂©f‹m_d©a
 = {

84 .
defböds
 = 
ö_sdl_defböds
,

85 .
	gkey_m≠
 = 
ö_sdl_key_m≠
,

86 .
	gkm≠_size
 = (
ö_sdl_key_m≠
) / (in_sdl_key_map[0]),

87 .
	gjoy_m≠
 = 
ö_sdl_joy_m≠
,

88 .
	gjm≠_size
 = (
ö_sdl_joy_m≠
) / (in_sdl_joy_map[0]),

91 
	gpsx_w
, 
	gpsx_h
;

92 *
	gshadow_fb
, *
	gmíubg_img
;

93 
	gö_míu
;

95 
	$ch™ge_video_mode
(
f‹˚
)

97 
w
, 
h
;

99 i‡(
ö_míu
) {

100 
w
 = 
g_míus¸ìn_w
;

101 
h
 = 
g_míus¸ìn_h
;

104 
w
 = 
psx_w
;

105 
h
 = 
psx_h
;

108  
	`∂©_sdl_ch™ge_video_mode
(
w
, 
h
, 
f‹˚
);

109 
	}
}

111 
	$ªsize_cb
(
w
, 
h
)

114 
∂_ª¨med_cbs
.
s¸ìn_w
 = 
w
;

115 
∂_ª¨med_cbs
.
s¸ìn_h
 = 
h
;

116 
∂_ª¨med_cbs
.
gÀs_di•œy
 = 
gl_es_di•œy
;

117 
∂_ª¨med_cbs
.
gÀs_surÁ˚
 = 
gl_es_surÁ˚
;

118 
	`∂ugö_ˇŒ_ª¨med_cbs
();

119 
	}
}

121 
	$quô_cb
()

123 
	`emu_c‹e_ask_exô
();

124 
	}
}

126 
	$gë_œyî_pos
(*
x
, *
y
, *
w
, *
h
)

129 *
x
 = *
y
 = 0;

130 *
w
 = 
∂_ª¨med_cbs
.
s¸ìn_w
;

131 *
h
 = 
∂_ª¨med_cbs
.
s¸ìn_h
;

132 
	}
}

134 
	$∂©_öô
()

136 
shadow_size
;

137 
ªt
;

139 
∂©_sdl_quô_cb
 = 
quô_cb
;

140 
∂©_sdl_ªsize_cb
 = 
ªsize_cb
;

142 
ªt
 = 
	`∂©_sdl_öô
();

143 i‡(
ªt
 != 0)

144 
	`exô
(1);

146 
ö_míu
 = 1;

147 
	`SDL_WM_SëC≠ti⁄
("PCSX-ReARMed " 
REV
, 
NULL
);

149 
shadow_size
 = 
g_míus¸ìn_w
 * 
g_míus¸ìn_h
 * 2;

150 i‡(
shadow_size
 < 640 * 512 * 2)

151 
shadow_size
 = 640 * 512 * 2;

153 
shadow_fb
 = 
	`mÆloc
(
shadow_size
);

154 
míubg_img
 = 
	`mÆloc
(
shadow_size
);

155 i‡(
shadow_fb
 =
NULL
 || 
míubg_img
 == NULL) {

156 
	`Ârötf
(
°dîr
, "OOM\n");

157 
	`exô
(1);

160 
	`ö_sdl_öô
(&
ö_sdl_∂©f‹m_d©a
, 
∂©_sdl_evít_h™dÀr
);

161 
	`ö_¥obe
();

162 
∂_ª¨med_cbs
.
⁄ly_16bµ
 = 1;

163 
∂_ª¨med_cbs
.
∂_gë_œyî_pos
 = 
gë_œyî_pos
;

165 
	`bgr_to_uyvy_öô
();

166 
	}
}

168 
	$∂©_föish
()

170 
	`‰ì
(
shadow_fb
);

171 
shadow_fb
 = 
NULL
;

172 
	`‰ì
(
míubg_img
);

173 
míubg_img
 = 
NULL
;

174 
	`∂©_sdl_föish
();

175 
	}
}

177 
	$∂©_gvideo_›í
(
is_∑l
)

179 
	}
}

181 
	$uyvy_to_rgb565
(*
d
, c⁄° *
s
, 
pixñs
)

183 *
d°
 = 
d
;

184 c⁄° *
§c
 = 
s
;

185 
v
;

188 ; 
pixñs
 > 0; 
§c
++, 
d°
 += 2,Öixels -= 2) {

189 
v
 = (*
§c
 >> 8) & 0xff;

190 
v
 = (v - 16) * 255 / 219 / 8;

191 
d°
[0] = (
v
 << 11) | (v << 6) | v;

193 
v
 = (*
§c
 >> 24) & 0xff;

194 
v
 = (v - 16) * 255 / 219 / 8;

195 
d°
[1] = (
v
 << 11) | (v << 6) | v;

197 
	}
}

199 
	$ovîœy_blô
(
doffs
, c⁄° *
§c_
, 
w
, 
h
,

200 
s°ride
, 
bgr24
)

202 c⁄° *
§c
 = 
§c_
;

203 *
d°
;

204 
d°ride
 = 
∂©_sdl_ovîœy
->
w
;

206 
	`SDL_LockYUVOvîœy
(
∂©_sdl_ovîœy
);

207 
d°
 = (*)
∂©_sdl_ovîœy
->
pixñs
[0];

209 
d°
 +
doffs
;

210 i‡(
bgr24
) {

211 ; 
h
 > 0; 
d°
 +
d°ride
, 
§c
 +
s°ride
, h--)

212 
	`bgr888_to_uyvy
(
d°
, 
§c
, 
w
);

215 ; 
h
 > 0; 
d°
 +
d°ride
, 
§c
 +
s°ride
, h--)

216 
	`bgr555_to_uyvy
(
d°
, 
§c
, 
w
);

219 
	`SDL_U∆ockYUVOvîœy
(
∂©_sdl_ovîœy
);

220 
	}
}

222 
	$ovîœy_hud_¥öt
(
x
, 
y
, c⁄° *
°r
, 
bµ
)

224 
	`SDL_LockYUVOvîœy
(
∂©_sdl_ovîœy
);

225 
	`basic_ãxt_out_uyvy_nf
(
∂©_sdl_ovîœy
->
pixñs
[0],Öœt_sdl_ovîœy->
w
, 
x
, 
y
, 
°r
);

226 
	`SDL_U∆ockYUVOvîœy
(
∂©_sdl_ovîœy
);

227 
	}
}

229 *
	$∂©_gvideo_£t_mode
(*
w
, *
h
, *
bµ
)

231 
psx_w
 = *
w
;

232 
psx_h
 = *
h
;

233 
	`ch™ge_video_mode
(0);

234 i‡(
∂©_sdl_ovîœy
 !
NULL
) {

235 
∂_∂©_˛ór
 = 
∂©_sdl_ovîœy_˛ór
;

236 
∂_∂©_blô
 = 
ovîœy_blô
;

237 
∂_∂©_hud_¥öt
 = 
ovîœy_hud_¥öt
;

238  
NULL
;

241 
∂_∂©_˛ór
 = 
NULL
;

242 
∂_∂©_blô
 = 
NULL
;

243 
∂_∂©_hud_¥öt
 = 
NULL
;

244 i‡(
∂©_sdl_gl_a˘ive
)

245  
shadow_fb
;

247  
∂©_sdl_s¸ìn
->
pixñs
;

249 
	}
}

251 *
	$∂©_gvideo_Êù
()

253 i‡(
∂©_sdl_ovîœy
 !
NULL
) {

254 
SDL_Re˘
 
d°ª˘
 = { 0, 0, 
∂©_sdl_s¸ìn
->
w
,Öœt_sdl_s¸ìn->
h
 };

255 
	`SDL_Di•œyYUVOvîœy
(
∂©_sdl_ovîœy
, &
d°ª˘
);

256  
NULL
;

258 i‡(
∂©_sdl_gl_a˘ive
) {

259 
	`gl_Êù
(
shadow_fb
, 
psx_w
, 
psx_h
);

260  
shadow_fb
;

264 
	`SDL_Flù
(
∂©_sdl_s¸ìn
);

265  
∂©_sdl_s¸ìn
->
pixñs
;

267 
	}
}

269 
	$∂©_gvideo_˛o£
()

271 
	}
}

273 
	$∂©_video_míu_íãr
(
is_rom_lﬂded
)

275 
f‹˚_mode_ch™ge
 = 0;

277 
ö_míu
 = 1;

280 i‡(
∂©_sdl_ovîœy
 !
NULL
)

281 
	`uyvy_to_rgb565
(
míubg_img
, 
∂©_sdl_ovîœy
->
pixñs
[0], 
psx_w
 * 
psx_h
);

282 i‡(
∂©_sdl_gl_a˘ive
)

283 
	`mem˝y
(
míubg_img
, 
shadow_fb
, 
psx_w
 * 
psx_h
 * 2);

285 
	`mem˝y
(
míubg_img
, 
∂©_sdl_s¸ìn
->
pixñs
, 
psx_w
 * 
psx_h
 * 2);

286 
∂_vout_buf
 = 
míubg_img
;

289 i‡(
∂_ª¨med_cbs
.
gpu_ˇps
 & 
GPU_CAP_OWNS_DISPLAY
)

290 
f‹˚_mode_ch™ge
 = 1;

292 
	`ch™ge_video_mode
(
f‹˚_mode_ch™ge
);

293 
	}
}

295 
	$∂©_video_míu_begö
()

297 i‡(
∂©_sdl_ovîœy
 !
NULL
 || 
∂©_sdl_gl_a˘ive
) {

298 
g_míus¸ìn_±r
 = 
shadow_fb
;

301 
	`SDL_LockSurÁ˚
(
∂©_sdl_s¸ìn
);

302 
g_míus¸ìn_±r
 = 
∂©_sdl_s¸ìn
->
pixñs
;

304 
	}
}

306 
	$∂©_video_míu_íd
()

308 i‡(
∂©_sdl_ovîœy
 !
NULL
) {

309 
SDL_Re˘
 
d°ª˘
 = { 0, 0, 
∂©_sdl_s¸ìn
->
w
,Öœt_sdl_s¸ìn->
h
 };

311 
	`SDL_LockYUVOvîœy
(
∂©_sdl_ovîœy
);

312 
	`rgb565_to_uyvy
(
∂©_sdl_ovîœy
->
pixñs
[0], 
shadow_fb
,

313 
g_míus¸ìn_w
 * 
g_míus¸ìn_h
);

314 
	`SDL_U∆ockYUVOvîœy
(
∂©_sdl_ovîœy
);

316 
	`SDL_Di•œyYUVOvîœy
(
∂©_sdl_ovîœy
, &
d°ª˘
);

318 i‡(
∂©_sdl_gl_a˘ive
) {

319 
	`gl_Êù
(
g_míus¸ìn_±r
, 
g_míus¸ìn_w
, 
g_míus¸ìn_h
);

322 
	`SDL_U∆ockSurÁ˚
(
∂©_sdl_s¸ìn
);

323 
	`SDL_Flù
(
∂©_sdl_s¸ìn
);

325 
g_míus¸ìn_±r
 = 
NULL
;

326 
	}
}

328 
	$∂©_video_míu_Àave
()

330 
ö_míu
 = 0;

331 
	}
}

334 *
	$∂©_¥ï¨e_s¸ìnshŸ
(*
w
, *
h
, *
bµ
)

337 
	}
}

339 
	$∂©_åiggî_vibøã
(
∑d
, 
low
, 
high
)

341 
	}
}

343 
	$∂©_möimize
()

345 
	}
}

	@frontend/plugin.c

8 
	~<°dio.h
>

9 
	~<°rög.h
>

10 
	~<°döt.h
>

12 
	~"∂ugö_lib.h
"

13 
	~"∂ugö.h
"

14 
	~"p£mu_∂ugö_defs.h
"

15 
	~"../libpcsxc‹e/sy°em.h
"

16 
	~"../∂ugös/cdrcimg/cdrcimg.h
"

18 #i‚de‡
_WIN32


19 
	#CALLBACK


	)

21 
	#WIN32_LEAN_AND_MEAN


	)

22 
	~<wödows.h
>

25 
	$dummy_func
() {

27 
	}
}

30 
CALLBACK
 
SPU›í
();

31 
CALLBACK
 
SPUöô
();

32 
CALLBACK
 
SPUshutdown
();

33 
CALLBACK
 
SPU˛o£
();

34 
CALLBACK
 
SPU∂aySam∂e
();

35 
CALLBACK
 
SPUwrôeRegi°î
(, , );

36 
CALLBACK
 
SPUªadRegi°î
();

37 
CALLBACK
 
SPUwrôeDMA
();

38 
CALLBACK
 
SPUªadDMA
();

39 
CALLBACK
 
SPUwrôeDMAMem
(*, , );

40 
CALLBACK
 
SPUªadDMAMem
(*, , );

41 
CALLBACK
 
SPU∂ayADPCMch™√l
(*);

42 
CALLBACK
 
SPUªgi°îCÆlback
((*
cb
)());

43 
CALLBACK
 
	`SPUªgi°îScheduÀCb
((*
cb
)());

44 
CALLBACK
 
	`SPUc⁄figuª
();

45 
CALLBACK
 
	`SPUã°
();

46 
CALLBACK
 
	`SPUabout
();

47 
CALLBACK
 
	`SPU‰ìze
(, *, );

48 
CALLBACK
 
	`SPUasync
(, );

49 
CALLBACK
 
	`SPU∂ayCDDAch™√l
(*, );

52 
	$PADªadP‹t1
(
PadD©aS
 *
∑d
)

54 
∑d
->
c⁄åﬁÀrTy≥
 = 
ö_ty≥1
;

55 
∑d
->
buâ⁄Sètus
 = ~
ö_key°©e
;

56 i‡(
ö_ty≥1
 =
PSE_PAD_TYPE_ANALOGPAD
) {

57 
∑d
->
À·JoyX
 = 
ö_a1
[0];

58 
∑d
->
À·JoyY
 = 
ö_a1
[1];

59 
∑d
->
rightJoyX
 = 
ö_a2
[0];

60 
∑d
->
rightJoyY
 = 
ö_a2
[1];

63 
	}
}

65 
	$PADªadP‹t2
(
PadD©aS
 *
∑d
)

67 
∑d
->
c⁄åﬁÀrTy≥
 = 
ö_ty≥2
;

68 
∑d
->
buâ⁄Sètus
 = ~
ö_key°©e
 >> 16;

70 
	}
}

73 
GPU›í
(*, *, *);

74 
GPUöô
();

75 
GPUshutdown
();

76 
GPU˛o£
();

77 
GPUwrôeSètus
(
uöt32_t
);

78 
GPUwrôeD©a
(
uöt32_t
);

79 
GPUwrôeD©aMem
(
uöt32_t
 *, );

80 
uöt32_t
 
GPUªadSètus
();

81 
uöt32_t
 
GPUªadD©a
();

82 
GPUªadD©aMem
(
uöt32_t
 *, );

83 
GPUdmaChaö
(
uöt32_t
 *,uint32_t);

84 
GPUupd©eLa˚
();

85 
GPU‰ìze
(
uöt32_t
, *);

86 
GPUvBœnk
(, );

87 
GPUª¨medCÆlbacks
(c⁄° 
ª¨med_cbs
 *
cbs
);

90 
	#DUMMY
(
id
, 
«me
) \

91 { 
id
, #«me, 
dummy_func
 }

	)

93 
	#DIRECT
(
id
, 
«me
) \

94 { 
id
, #«me, 
«me
 }

	)

96 
	#DUMMY_GPU
(
«me
Ë
	`DUMMY
(
PLUGIN_GPU
,Çame)

	)

97 
	#DUMMY_CDR
(
«me
Ë
	`DUMMY
(
PLUGIN_CDR
,Çame)

	)

98 
	#DUMMY_PAD
(
«me
Ë
	`DUMMY
(
PLUGIN_PAD
,Çame)

	)

99 
	#DIRECT_SPU
(
«me
Ë
	`DIRECT
(
PLUGIN_SPU
,Çame)

	)

100 
	#DIRECT_GPU
(
«me
Ë
	`DIRECT
(
PLUGIN_GPU
,Çame)

	)

101 
	#DIRECT_PAD
(
«me
Ë
	`DIRECT
(
PLUGIN_PAD
,Çame)

	)

104 
	mid
;

105 c⁄° *
	m«me
;

106 *
	mfunc
;

107 } 
	g∂ugö_funcs
[] = {

109 
DUMMY_CDR
(
CDRöô
),

110 
DUMMY_CDR
(
CDRshutdown
),

111 
DUMMY_CDR
(
CDR›í
),

112 
DUMMY_CDR
(
CDR˛o£
),

113 
DUMMY_CDR
(
CDRã°
),

114 
DUMMY_CDR
(
CDRgëTN
),

115 
DUMMY_CDR
(
CDRgëTD
),

116 
DUMMY_CDR
(
CDRªadTøck
),

117 
DUMMY_CDR
(
CDRgëBuf„r
),

118 
DUMMY_CDR
(
CDRgëBuf„rSub
),

119 
DUMMY_CDR
(
CDR∂ay
),

120 
DUMMY_CDR
(
CDR°›
),

121 
DUMMY_CDR
(
CDRgëSètus
),

122 
DUMMY_CDR
(
CDRgëDriveLëãr
),

123 
DUMMY_CDR
(
CDRc⁄figuª
),

124 
DUMMY_CDR
(
CDRabout
),

125 
DUMMY_CDR
(
CDR£tfûíame
),

126 
DUMMY_CDR
(
CDRªadCDDA
),

127 
DUMMY_CDR
(
CDRgëTE
),

129 
DIRECT_SPU
(
SPUc⁄figuª
),

130 
DIRECT_SPU
(
SPUabout
),

131 
DIRECT_SPU
(
SPUöô
),

132 
DIRECT_SPU
(
SPUshutdown
),

133 
DIRECT_SPU
(
SPUã°
),

134 
DIRECT_SPU
(
SPU›í
),

135 
DIRECT_SPU
(
SPU˛o£
),

137 
DIRECT_SPU
(
SPUwrôeRegi°î
),

138 
DIRECT_SPU
(
SPUªadRegi°î
),

139 
DIRECT_SPU
(
SPUwrôeDMA
),

140 
DIRECT_SPU
(
SPUªadDMA
),

141 
DIRECT_SPU
(
SPUwrôeDMAMem
),

142 
DIRECT_SPU
(
SPUªadDMAMem
),

143 
DIRECT_SPU
(
SPU∂ayADPCMch™√l
),

144 
DIRECT_SPU
(
SPU‰ìze
),

145 
DIRECT_SPU
(
SPUªgi°îCÆlback
),

146 
DIRECT_SPU
(
SPUªgi°îScheduÀCb
),

147 
DIRECT_SPU
(
SPUasync
),

148 
DIRECT_SPU
(
SPU∂ayCDDAch™√l
),

150 
DUMMY_PAD
(
PADöô
),

151 
DUMMY_PAD
(
PADshutdown
),

152 
DUMMY_PAD
(
PAD›í
),

153 
DUMMY_PAD
(
PAD˛o£
),

154 
DUMMY_PAD
(
PAD£tSísôive
),

155 
DIRECT_PAD
(
PADªadP‹t1
),

156 
DIRECT_PAD
(
PADªadP‹t2
),

167 
DIRECT_GPU
(
GPUupd©eLa˚
),

168 
DIRECT_GPU
(
GPUöô
),

169 
DIRECT_GPU
(
GPUshutdown
),

170 
DIRECT_GPU
(
GPU›í
),

171 
DIRECT_GPU
(
GPU˛o£
),

172 
DIRECT_GPU
(
GPUªadSètus
),

173 
DIRECT_GPU
(
GPUªadD©a
),

174 
DIRECT_GPU
(
GPUªadD©aMem
),

175 
DIRECT_GPU
(
GPUwrôeSètus
),

176 
DIRECT_GPU
(
GPUwrôeD©a
),

177 
DIRECT_GPU
(
GPUwrôeD©aMem
),

178 
DIRECT_GPU
(
GPUdmaChaö
),

179 
DIRECT_GPU
(
GPU‰ìze
),

180 
DIRECT_GPU
(
GPUvBœnk
),

181 
DIRECT_GPU
(
GPUª¨medCÆlbacks
),

183 
DUMMY_GPU
(
GPUdi•œyText
),

196 *
	$∂ugö_lök
(
buûtöt_∂ugös_e
 
id
, c⁄° *
sym
)

198 
i
;

200 i‡(
id
 =
PLUGIN_CDRCIMG
)

201  
	`cdrcimg_gë_sym
(
sym
);

203 
i
 = 0; i < 
	`ARRAY_SIZE
(
∂ugö_funcs
); i++) {

204 i‡(
id
 !
∂ugö_funcs
[
i
].id)

207 i‡(
	`°rcmp
(
sym
, 
∂ugö_funcs
[
i
].
«me
) != 0)

210  
∂ugö_funcs
[
i
].
func
;

214  
NULL
;

215 
	}
}

217 
	$∂ugö_ˇŒ_ª¨med_cbs
()

219 *
hGPUDrivî
;

220 (*
ª¨med_£t_cbs
)(c⁄° 
ª¨med_cbs
 *
cbs
);

222 
ª¨med_£t_cbs
 = 
	`SysLﬂdSym
(
hGPUDrivî
, "GPUrearmedCallbacks");

223 i‡(
ª¨med_£t_cbs
 !
NULL
)

224 
	`ª¨med_£t_cbs
(&
∂_ª¨med_cbs
);

225 
	}
}

227 #ifde‡
PCNT


230 
	~"p˙t.h
"

232 
	gpcou¡îs
[
PCNT_CNT
];

233 
	gpcou¡î_°¨ts
[
PCNT_CNT
];

235 
	#pc_hook_func
(
«me
, 
¨gs
, 
∑rgs
, 
˙t
) \

236 (*
«me
Ë
¨gs
; \

237 (*
o_
##
«me
Ë
¨gs
; \

238 
w_
##
«me
 
¨gs
 \

240 
pc_°¨t
 = 
	`p˙t_gë
(); \

241 
o_
##
«me
 
∑rgs
; \

242 
pcou¡îs
[
˙t
] +
	`p˙t_gë
(Ë- 
pc_°¨t
; \

243 }

	)

245 
	#pc_hook_func_ªt
(
ªä
, 
«me
, 
¨gs
, 
∑rgs
, 
˙t
) \

246 
	`ªä
 (*
«me
Ë
¨gs
; \

247 
	`ªä
 (*
o_
##
«me
Ë
¨gs
; \

248 
ªä
 
w_
##
«me
 
¨gs
 \

250 
ªä
 
ªt
; \

251 
pc_°¨t
 = 
	`p˙t_gë
(); \

252 
ªt
 = 
o_
##
«me
 
∑rgs
; \

253 
pcou¡îs
[
˙t
] +
	`p˙t_gë
(Ë- 
pc_°¨t
; \

254  
ªt
; \

255 }

	)

257 
pc_hook_func
 (
GPU_wrôeSètus
, (
uöt32_t
 
a0
), (a0), 
PCNT_GPU
)

258 
pc_hook_func
 (
GPU_wrôeD©a
, (
uöt32_t
 
a0
), (a0), 
PCNT_GPU
)

259 
pc_hook_func
 (
GPU_wrôeD©aMem
, (
uöt32_t
 *
a0
, 
a1
), (a0,á1), 
PCNT_GPU
)

260 
pc_hook_func_ªt
(
uöt32_t
, 
GPU_ªadSètus
, (), (), 
PCNT_GPU
)

261 
pc_hook_func_ªt
(
uöt32_t
, 
GPU_ªadD©a
, (), (), 
PCNT_GPU
)

262 
pc_hook_func
 (
GPU_ªadD©aMem
, (
uöt32_t
 *
a0
, 
a1
), (a0,á1), 
PCNT_GPU
)

263 
pc_hook_func_ªt
(, 
GPU_dmaChaö
, (
uöt32_t
 *
a0
, 
öt32_t
 
a1
), (a0,á1), 
PCNT_GPU
)

264 
pc_hook_func
 (
GPU_upd©eLa˚
, (), (), 
PCNT_GPU
)

266 
pc_hook_func
 (
SPU_wrôeRegi°î
, (
a0
, 
a1
, 
uöt32_t
 
a2
), (a0,á1,á2), 
PCNT_SPU
)

267 
pc_hook_func_ªt
(,
SPU_ªadRegi°î
, (
a0
), (a0), 
PCNT_SPU
)

268 
pc_hook_func
 (
SPU_wrôeDMA
, (
a0
), (a0), 
PCNT_SPU
)

269 
pc_hook_func_ªt
(,
SPU_ªadDMA
, (), (), 
PCNT_SPU
)

270 
pc_hook_func
 (
SPU_wrôeDMAMem
, (*
a0
, 
a1
, 
uöt32_t
 
a2
), (a0,á1,á2), 
PCNT_SPU
)

271 
pc_hook_func
 (
SPU_ªadDMAMem
, (*
a0
, 
a1
, 
uöt32_t
 
a2
), (a0,á1,á2), 
PCNT_SPU
)

272 
pc_hook_func
 (
SPU_∂ayADPCMch™√l
, (*
a0
), (a0), 
PCNT_SPU
)

273 
pc_hook_func
 (
SPU_async
, (
uöt32_t
 
a0
, uöt32_à
a1
), (a0,á1), 
PCNT_SPU
)

274 
pc_hook_func_ªt
(, 
SPU_∂ayCDDAch™√l
, (*
a0
, 
a1
), (a0,á1), 
PCNT_SPU
)

276 
	#hook_ô
(
«me
) { \

277 
o_
##
«me
 =Çame; \

278 
«me
 = 
w_
##name; \

279 }

	)

281 
	$p˙t_hook_∂ugös
()

283 
	`p˙t_öô
();

285 
	`hook_ô
(
GPU_wrôeSètus
);

286 
	`hook_ô
(
GPU_wrôeD©a
);

287 
	`hook_ô
(
GPU_wrôeD©aMem
);

288 
	`hook_ô
(
GPU_ªadSètus
);

289 
	`hook_ô
(
GPU_ªadD©a
);

290 
	`hook_ô
(
GPU_ªadD©aMem
);

291 
	`hook_ô
(
GPU_dmaChaö
);

292 
	`hook_ô
(
GPU_upd©eLa˚
);

293 
	`hook_ô
(
SPU_wrôeRegi°î
);

294 
	`hook_ô
(
SPU_ªadRegi°î
);

295 
	`hook_ô
(
SPU_wrôeDMA
);

296 
	`hook_ô
(
SPU_ªadDMA
);

297 
	`hook_ô
(
SPU_wrôeDMAMem
);

298 
	`hook_ô
(
SPU_ªadDMAMem
);

299 
	`hook_ô
(
SPU_∂ayADPCMch™√l
);

300 
	`hook_ô
(
SPU_async
);

301 
	`hook_ô
(
SPU_∂ayCDDAch™√l
);

302 
	}
}

305 
	$p˙t_gã_°¨t
(
›
)

307 
	`p˙t_°¨t
(
PCNT_GTE
);

308 
	}
}

310 
	$p˙t_gã_íd
(
›
)

312 
	`p˙t_íd
(
PCNT_GTE
);

313 
	}
}

	@frontend/plugin.h

1 
	#ARRAY_SIZE
(
x
Ë((xË/ (x[0]))

	)

3 
	#PLUGIN_DL_BASE
 0xfbad0000

	)

5 
	ebuûtöt_∂ugös_e
 {

6 
	mPLUGIN_GPU
,

7 
	mPLUGIN_SPU
,

8 
	mPLUGIN_CDR
,

9 
	mPLUGIN_PAD
,

10 
	mPLUGIN_CDRCIMG
,

13 *
∂ugö_lök
(
buûtöt_∂ugös_e
 
id
, c⁄° *
sym
);

14 
∂ugö_ˇŒ_ª¨med_cbs
();

	@frontend/plugin_lib.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~<°d¨g.h
>

12 
	~<°döt.h
>

13 
	~<sys/time.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<sys/°©.h
>

16 
	~<f˙é.h
>

17 
	~<uni°d.h
>

18 
	~<±hªad.h
>

20 
	~"libpico„/f⁄ts.h
"

21 
	~"libpico„/öput.h
"

22 
	~"libpico„/∂©.h
"

23 
	~"libpico„/¨m/√⁄_sˇÀ2x.h
"

24 
	~"libpico„/¨m/√⁄_ógÀ2x.h
"

25 
	~"∂ugö_lib.h
"

26 
	~"míu.h
"

27 
	~"maö.h
"

28 
	~"∂©.h
"

29 
	~"p˙t.h
"

30 
	~"∂_gun_ts.h
"

31 
	~"c•a˚.h
"

32 
	~"p£mu_∂ugö_defs.h
"

33 
	~"../libpcsxc‹e/√w_dy«ªc/√w_dy«ªc.h
"

34 
	~"../libpcsxc‹e/psxmem_m≠.h
"

35 
	~"../∂ugös/dföput/exã∫Æs.h
"

37 
	#HUD_HEIGHT
 10

	)

39 
	gö_ty≥1
, 
	gö_ty≥2
;

40 
	gö_a1
[2] = { 127, 127 }, 
	gö_a2
[2] = { 127, 127 };

41 
	gö_adev
[2] = { -1, -1 }, 
	gö_adev_axis
[2][2] = {{ 0, 1 }, { 0, 1 }};

42 
	gö_adev_is_nublike
[2];

43 
	gö_key°©e
, 
	gö_°©e_gun
;

44 
	gö_íabÀ_vibøti⁄
;

45 *
	gtsdev
;

46 *
	g∂_vout_buf
;

47 
	gg_œyî_x
, 
	gg_œyî_y
, 
	gg_œyî_w
, 
	gg_œyî_h
;

48 
	g∂_vout_w
, 
	g∂_vout_h
, 
	g∂_vout_bµ
;

49 
	g∂_vout_sˇÀ_w
, 
	g∂_vout_sˇÀ_h
, 
	g∂_vout_yoff£t
;

50 
	gpsx_w
, 
	gpsx_h
, 
	gpsx_bµ
;

51 
	gvsync_˙t
;

52 
	gis_∑l
, 
	g‰ame_öãrvÆ
, 
	g‰ame_öãrvÆ1024
;

53 
	gvsync_u£c_time
;

56 (*
∂_∂©_˛ór
)();

57 (*
∂_∂©_blô
)(
doffs
, c⁄° *
§c
, 
w
, 
h
,

58 
s°ride
, 
bgr24
);

59 (*
∂_∂©_hud_¥öt
)(
x
, 
y
, c⁄° *
°r
, 
bµ
);

62 
	`__©åibuã__
((
noölöe
)Ë
	$gë_˝u_ticks
()

64 
œ°_utime
;

65 
fd
;

66 
utime
, 
ªt
;

67 
buf
[128];

69 i‡(
fd
 == 0)

70 
fd
 = 
	`›í
("/¥oc/£lf/°©", 
O_RDONLY
);

71 
	`l£ek
(
fd
, 0, 
SEEK_SET
);

72 
buf
[0] = 0;

73 
	`ªad
(
fd
, 
buf
, (buf));

74 
buf
[(buf) - 1] = 0;

76 
	`ssˇnf
(
buf
, "%*d %*†%*¯%*d %*d %*d %*d %*d %*u %*u %*u %*u %*u %lu", &
utime
);

77 
ªt
 = 
utime
 - 
œ°_utime
;

78 i‡(
ªt
 > 200)

79 
ªt
 = 0;

80 
œ°_utime
 = 
utime
;

81  
ªt
;

82 
	}
}

84 
	$hud_¥öt
(*
fb
, 
w
, 
x
, 
y
, c⁄° *
ãxt
)

86 i‡(
∂_∂©_hud_¥öt
)

87 
	`∂_∂©_hud_¥öt
(
x
, 
y
, 
ãxt
, 
∂_vout_bµ
);

88 i‡(
∂_vout_bµ
 == 16)

89 
	`basic_ãxt_out16_nf
(
fb
, 
w
, 
x
, 
y
, 
ãxt
);

90 
	}
}

92 
	$hud_¥ötf
(*
fb
, 
w
, 
x
, 
y
, c⁄° *
ãxto
, ...)

94 
va_li°
 
¨gs
;

95 
buf„r
[256];

97 
	`va_°¨t
(
¨gs
, 
ãxto
);

98 
	`v¢¥ötf
(
buf„r
, (buf„r), 
ãxto
, 
¨gs
);

99 
	`va_íd
(
¨gs
);

101 
	`hud_¥öt
(
fb
, 
w
, 
x
, 
y
, 
buf„r
);

102 
	}
}

104 
	$¥öt_msg
(
h
, 
b‹dî
)

106 
	`hud_¥öt
(
∂_vout_buf
, 
∂_vout_w
, 
b‹dî
 + 2, 
h
 - 
HUD_HEIGHT
, 
hud_msg
);

107 
	}
}

109 
	$¥öt_Âs
(
h
, 
b‹dî
)

111 
	`hud_¥ötf
(
∂_vout_buf
, 
∂_vout_w
, 
b‹dî
 + 2, 
h
 - 
HUD_HEIGHT
,

112 "%2d %4.1f", 
∂_ª¨med_cbs
.
Êùs_≥r_£c
,

113 
∂_ª¨med_cbs
.
v•s_cur
);

114 
	}
}

116 
	$¥öt_˝u_ußge
(
w
, 
h
, 
b‹dî
)

118 
	`hud_¥ötf
(
∂_vout_buf
, 
∂_vout_w
,Öl_vout_w - 
b‹dî
 - 28,

119 
h
 - 
HUD_HEIGHT
, "%3d", 
∂_ª¨med_cbs
.
˝u_ußge
);

120 
	}
}

123 
__©åibuã__
((
noölöe
)Ë
	$døw_a˘ive_ch™s
(
vout_w
, 
vout_h
)

125 
	`•u_gë_debug_öfo
(*
ch™s_out
, *
run_ch™s
,

126 *
fmod_ch™s_out
, *
noi£_ch™s_out
);

127 
live_ch™s
, 
run_ch™s
, 
fmod_ch™s
, 
noi£_ch™s
;

129 c⁄° 
cﬁ‹s
[2] = { 0x1fe3, 0x0700 };

130 *
de°
 = (*)
∂_vout_buf
 +

131 
vout_w
 * (
vout_h
 - 
HUD_HEIGHT
) + vout_w / 2 - 192/2;

132 *
d
, 
p
;

133 
c
, 
x
, 
y
;

135 i‡(
de°
 =
NULL
 || 
∂_vout_bµ
 != 16)

138 
	`•u_gë_debug_öfo
(&
live_ch™s
, &
run_ch™s
, &
fmod_ch™s
, &
noi£_ch™s
);

140 
c
 = 0; c < 24; c++) {

141 
d
 = 
de°
 + 
c
 * 8;

142 
p
 = !(
live_ch™s
 & (1<<
c
)Ë? (
run_ch™s
 & (1<<c) ? 0x01c0 : 0) :

143 (
fmod_ch™s
 & (1<<
c
)) ? 0xf000 :

144 (
noi£_ch™s
 & (1<<
c
)) ? 0x001f :

145 
cﬁ‹s
[
c
 & 1];

146 
y
 = 0; y < 8; y++, 
d
 +
vout_w
)

147 
x
 = 0; x < 8; x++)

148 
d
[
x
] = 
p
;

150 
	}
}

152 
	$¥öt_hud
(
w
, 
h
, 
xb‹dî
)

154 i‡(
h
 < 16)

157 i‡(
w
 < 
∂_vout_w
)

158 
xb‹dî
 +(
∂_vout_w
 - 
w
) / 2;

159 i‡(
h
 > 
∂_vout_h
)

160 
h
 = 
∂_vout_h
;

162 i‡(
g_›ts
 & 
OPT_SHOWSPU
)

163 
	`døw_a˘ive_ch™s
(
w
, 
h
);

165 i‡(
hud_msg
[0] != 0)

166 
	`¥öt_msg
(
h
, 
xb‹dî
);

167 i‡(
g_›ts
 & 
OPT_SHOWFPS
)

168 
	`¥öt_Âs
(
h
, 
xb‹dî
);

170 i‡(
g_›ts
 & 
OPT_SHOWCPU
)

171 
	`¥öt_˝u_ußge
(
w
, 
h
, 
xb‹dî
);

172 
	}
}

175 
	$upd©e_œyî_size
(
w
, 
h
)

177 
mu…
;

178 
imu…
;

180 
g_sˇÀr
) {

181 
SCALE_1_1
:

182 
g_œyî_w
 = 
w
; 
g_œyî_h
 = 
h
;

185 
SCALE_2_2
:

186 
g_œyî_w
 = 
w
; 
g_œyî_h
 = 
h
;

187 i‡(
w
 * 2 <
g_míus¸ìn_w
)

188 
g_œyî_w
 = 
w
 * 2;

189 i‡(
h
 * 2 <
g_míus¸ìn_h
)

190 
g_œyî_h
 = 
h
 * 2;

193 
SCALE_4_3v2
:

194 i‡(
h
 > 
g_míus¸ìn_h
 || (240 < h && h <= 360))

195 
‰a˘i⁄Æ_4_3
;

198 
imu…
 = 
g_míus¸ìn_h
 / 
h
;

199 
g_œyî_w
 = 
w
 * 
imu…
;

200 
g_œyî_h
 = 
h
 * 
imu…
;

201 
mu…
 = ()
g_œyî_w
 / ()
g_œyî_h
;

202 i‡(
mu…
 < 1.25f || mult > 1.666f)

203 
g_œyî_w
 = 4.0f/3.0‡* ()
g_œyî_h
;

204 
	`¥ötf
(" -> %dx%d %.1f\n", 
g_œyî_w
, 
g_œyî_h
, 
mu…
);

207 
‰a˘i⁄Æ_4_3
:

208 
SCALE_4_3
:

209 
mu…
 = 240.0‡/ ()
h
 * 4.0f / 3.0f;

210 i‡(
h
 > 256)

211 
mu…
 *= 2.0f;

212 
g_œyî_w
 = 
mu…
 * ()
g_míus¸ìn_h
;

213 
g_œyî_h
 = 
g_míus¸ìn_h
;

214 
	`¥ötf
(" -> %dx%d %.1f\n", 
g_œyî_w
, 
g_œyî_h
, 
mu…
);

217 
SCALE_FULLSCREEN
:

218 
g_œyî_w
 = 
g_míus¸ìn_w
;

219 
g_œyî_h
 = 
g_míus¸ìn_h
;

226 
g_œyî_x
 = 
g_míus¸ìn_w
 / 2 - 
g_œyî_w
 / 2;

227 
g_œyî_y
 = 
g_míus¸ìn_h
 / 2 - 
g_œyî_h
 / 2;

228 i‡(
g_œyî_x
 < 0) g_layer_x = 0;

229 i‡(
g_œyî_y
 < 0) g_layer_y = 0;

230 i‡(
g_œyî_w
 > 
g_míus¸ìn_w
) g_layer_w = g_menuscreen_w;

231 i‡(
g_œyî_h
 > 
g_míus¸ìn_h
) g_layer_h = g_menuscreen_h;

232 
	}
}

235 
ölöe
 
	$ªsﬁuti⁄_ok
(
w
, 
h
)

237  
w
 <1024 && 
h
 <= 512;

238 
	}
}

240 
	$∂_vout_£t_mode
(
w
, 
h
, 
øw_w
, 
øw_h
, 
bµ
)

242 
vout_w
, 
vout_h
, 
vout_bµ
;

243 
buf_yoff£t
 = 0;

246 
vsync_˙t_ms_¥ev
;

247 i‡(()(
vsync_˙t
 - 
vsync_˙t_ms_¥ev
) < 5*60)

248 
h
 = (h + 7) & ~7;

249 
vsync_˙t_ms_¥ev
 = 
vsync_˙t
;

251 
psx_w
 = 
øw_w
;

252 
psx_h
 = 
øw_h
;

253 
psx_bµ
 = 
bµ
;

254 
vout_w
 = 
w
;

255 
vout_h
 = 
h
;

256 
vout_bµ
 = 
bµ
;

257 i‡(
∂_ª¨med_cbs
.
⁄ly_16bµ
)

258 
vout_bµ
 = 16;

261 i‡(
vout_h
 < 192) {

262 
buf_yoff£t
 = (192 - 
vout_h
) / 2;

263 
vout_h
 = 192;

266 
∂_vout_sˇÀ_w
 = 
∂_vout_sˇÀ_h
 = 1;

267 #ifde‡
__ARM_NEON__


268 i‡(
so·_fûãr
) {

269 i‡(
	`ªsﬁuti⁄_ok
(
w
 * 2, 
h
 * 2Ë&& 
bµ
 == 16) {

270 
∂_vout_sˇÀ_w
 = 2;

271 
∂_vout_sˇÀ_h
 = 2;

275 
hud_msg
[0] = 0;

278 i‡(
sˇ∆öes
 !0 && 
sˇ∆öe_Àvñ
 !100 && 
bµ
 == 16) {

279 i‡(
h
 <= 256)

280 
∂_vout_sˇÀ_h
 = 2;

283 
vout_w
 *
∂_vout_sˇÀ_w
;

284 
vout_h
 *
∂_vout_sˇÀ_h
;

286 
	`upd©e_œyî_size
(
vout_w
, 
vout_h
);

288 
∂_vout_buf
 = 
	`∂©_gvideo_£t_mode
(&
vout_w
, &
vout_h
, &
vout_bµ
);

289 i‡(
∂_vout_buf
 =
NULL
 && 
∂_∂©_blô
 == NULL)

290 
	`Ârötf
(
°dîr
, "failedÅo set mode %dx%d@%d\n",

291 
vout_w
, 
vout_h
, 
vout_bµ
);

293 
∂_vout_w
 = 
vout_w
;

294 
∂_vout_h
 = 
vout_h
;

295 
∂_vout_bµ
 = 
vout_bµ
;

296 
∂_vout_yoff£t
 = 
buf_yoff£t
;

298 i‡(
∂_vout_buf
 !
NULL
)

299 
∂_vout_buf
 = (*)pl_vout_buf

300 + 
∂_vout_yoff£t
 * 
∂_vout_w
 * 
∂_vout_bµ
 / 8;

302 
	`míu_nŸify_mode_ch™ge
(
∂_vout_w
, 
∂_vout_h
, 
∂_vout_bµ
);

303 
	}
}

305 
	$∂_vout_Êù
(c⁄° *
vøm
, 
°ride
, 
bgr24
, 
w
, 
h
)

307 
doffs_ﬁd
, 
˛ór_cou¡î
;

308 *
de°
 = 
∂_vout_buf
;

309 c⁄° *
§c
 = 
vøm
;

310 
d°ride
 = 
∂_vout_w
, 
h1
 = 
h
;

311 
doffs
;

313 
	`p˙t_°¨t
(
PCNT_BLIT
);

315 i‡(
vøm
 =
NULL
) {

317 i‡(
∂_∂©_˛ór
)

318 
	`∂_∂©_˛ór
();

320 
	`mem£t
(
∂_vout_buf
, 0,

321 
d°ride
 * 
∂_vout_h
 * 
∂_vout_bµ
 / 8);

322 
out_hud
;

326 
doffs
 = (
d°ride
 - 
w
 * 
∂_vout_sˇÀ_w
) / 2 & ~1;

328 i‡(
doffs
 > 
doffs_ﬁd
)

329 
˛ór_cou¡î
 = 2;

330 
doffs_ﬁd
 = 
doffs
;

332 i‡(
˛ór_cou¡î
 > 0) {

333 i‡(
∂_∂©_˛ór
)

334 
	`∂_∂©_˛ór
();

336 
	`mem£t
(
∂_vout_buf
, 0,

337 
d°ride
 * 
∂_vout_h
 * 
∂_vout_bµ
 / 8);

338 
˛ór_cou¡î
--;

341 i‡(
∂_∂©_blô
)

343 
	`∂_∂©_blô
(
doffs
, 
§c
, 
w
, 
h
, 
°ride
, 
bgr24
);

344 
out_hud
;

347 i‡(
de°
 =
NULL
)

348 
out
;

350 
de°
 +
doffs
 * 2;

352 i‡(
bgr24
)

354 i‡(
∂_ª¨med_cbs
.
⁄ly_16bµ
) {

355 ; 
h1
-- > 0; 
de°
 +
d°ride
 * 2, 
§c
 +
°ride
)

357 
	`bgr888_to_rgb565
(
de°
, 
§c
, 
w
 * 3);

361 
de°
 -
doffs
 * 2;

362 
de°
 +(
doffs
 / 8) * 24;

364 ; 
h1
-- > 0; 
de°
 +
d°ride
 * 3, 
§c
 +
°ride
)

366 
	`bgr888_to_rgb888
(
de°
, 
§c
, 
w
 * 3);

370 #ifde‡
__ARM_NEON__


371 i‡(
so·_fûãr
 =
SOFT_FILTER_SCALE2X
 && 
∂_vout_sˇÀ_w
 == 2)

373 
	`√⁄_sˇÀ2x_16_16
(
§c
, (*)
de°
, 
w
,

374 
°ride
 * 2, 
d°ride
 * 2, 
h
);

376 i‡(
so·_fûãr
 =
SOFT_FILTER_EAGLE2X
 && 
∂_vout_sˇÀ_w
 == 2)

378 
	`√⁄_ógÀ2x_16_16
(
§c
, (*)
de°
, 
w
,

379 
°ride
 * 2, 
d°ride
 * 2, 
h
);

381 i‡(
sˇ∆öes
 !0 && 
sˇ∆öe_Àvñ
 != 100)

383 
l
 = 
sˇ∆öe_Àvñ
 * 2048 / 100;

384 
°ride_0
 = 
∂_vout_sˇÀ_h
 >2 ? 0 : 
°ride
;

386 
h1
 *
∂_vout_sˇÀ_h
;

387 ; 
h1
 >= 2; h1 -= 2)

389 
	`bgr555_to_rgb565
(
de°
, 
§c
, 
w
 * 2);

390 
de°
 +
d°ride
 * 2, 
§c
 +
°ride_0
;

392 
	`bgr555_to_rgb565_b
(
de°
, 
§c
, 
w
 * 2, 
l
);

393 
de°
 +
d°ride
 * 2, 
§c
 +
°ride
;

399 ; 
h1
-- > 0; 
de°
 +
d°ride
 * 2, 
§c
 +
°ride
)

401 
	`bgr555_to_rgb565
(
de°
, 
§c
, 
w
 * 2);

405 
out_hud
:

406 
	`¥öt_hud
(
w
 * 
∂_vout_sˇÀ_w
, 
h
 * 
∂_vout_sˇÀ_h
, 0);

408 
out
:

409 
	`p˙t_íd
(
PCNT_BLIT
);

412 
∂_vout_buf
 = 
	`∂©_gvideo_Êù
();

413 i‡(
∂_vout_buf
 !
NULL
)

414 
∂_vout_buf
 = (*)pl_vout_buf

415 + 
∂_vout_yoff£t
 * 
∂_vout_w
 * 
∂_vout_bµ
 / 8;

417 
∂_ª¨med_cbs
.
Êù_˙t
++;

418 
	}
}

420 
	$∂_vout_›í
()

422 
timevÆ
 
now
;

425 
∂_vout_buf
 = 
NULL
;

427 
	`∂©_gvideo_›í
(
is_∑l
);

429 
	`gëtimeofday
(&
now
, 0);

430 
vsync_u£c_time
 = 
now
.
tv_u£c
;

431 
vsync_u£c_time
 >
‰ame_öãrvÆ
)

432 
vsync_u£c_time
 -
‰ame_öãrvÆ
;

435 
	}
}

437 
	$∂_vout_˛o£
()

439 
	`∂©_gvideo_˛o£
();

440 
	}
}

442 
	$∂_£t_gpu_ˇps
(
ˇps
)

444 
∂_ª¨med_cbs
.
gpu_ˇps
 = 
ˇps
;

445 
	}
}

447 *
	$∂_¥ï¨e_s¸ìnshŸ
(*
w
, *
h
, *
bµ
)

449 *
ªt
 = 
	`∂©_¥ï¨e_s¸ìnshŸ
(
w
, 
h
, 
bµ
);

450 i‡(
ªt
 !
NULL
)

451  
ªt
;

453 *
w
 = 
∂_vout_w
;

454 *
h
 = 
∂_vout_h
;

455 *
bµ
 = 
∂_vout_bµ
;

457  
∂_vout_buf
;

458 
	}
}

461 
	$di•mode_deÁu…
()

463 
∂_ª¨med_cbs
.
gpu_√⁄
.
íh™˚mít_íabÀ
 = 0;

464 
so·_fûãr
 = 
SOFT_FILTER_NONE
;

465 
	`¢¥ötf
(
hud_msg
, (hud_msg), "default mode");

467 
	}
}

469 #ifde‡
__ARM_NEON__


470 
	$di•mode_doubÀªs
()

472 i‡(!(
∂_ª¨med_cbs
.
gpu_ˇps
 & 
GPU_CAP_SUPPORTS_2X
)

473 || !
	`ªsﬁuti⁄_ok
(
psx_w
 * 2, 
psx_h
 * 2Ë|| 
psx_bµ
 != 16)

476 
	`di•mode_deÁu…
();

477 
∂_ª¨med_cbs
.
gpu_√⁄
.
íh™˚mít_íabÀ
 = 1;

478 
	`¢¥ötf
(
hud_msg
, (hud_msg), "doubleÑesolution");

480 
	}
}

482 
	$di•mode_sˇÀ2x
()

484 i‡(!
	`ªsﬁuti⁄_ok
(
psx_w
 * 2, 
psx_h
 * 2Ë|| 
psx_bµ
 != 16)

487 
	`di•mode_deÁu…
();

488 
so·_fûãr
 = 
SOFT_FILTER_SCALE2X
;

489 
	`¢¥ötf
(
hud_msg
, (hud_msg), "scale2x");

491 
	}
}

493 
	$di•mode_ógÀ2x
()

495 i‡(!
	`ªsﬁuti⁄_ok
(
psx_w
 * 2, 
psx_h
 * 2Ë|| 
psx_bµ
 != 16)

498 
	`di•mode_deÁu…
();

499 
so·_fûãr
 = 
SOFT_FILTER_EAGLE2X
;

500 
	`¢¥ötf
(
hud_msg
, (hud_msg), "eagle2x");

502 
	}
}

505 (*
di•mode_swôchîs
[])() = {

506 
di•mode_deÁu…
,

507 #ifde‡
__ARM_NEON__


508 
di•mode_doubÀªs
,

509 
di•mode_sˇÀ2x
,

510 
di•mode_ógÀ2x
,

512 
	}
};

514 
	gdi•mode_cuºít
;

516 
	$∂_swôch_di•mode
()

518 i‡(
∂_ª¨med_cbs
.
gpu_ˇps
 & 
GPU_CAP_OWNS_DISPLAY
)

522 
di•mode_cuºít
++;

523 i‡(
di•mode_cuºít
 >=

524 (
di•mode_swôchîs
) / (dispmode_switchers[0]))

525 
di•mode_cuºít
 = 0;

526 i‡(
di•mode_swôchîs
[
di•mode_cuºít
]())

529 
	}
}

531 #i‚de‡
MAEMO


534 
	$upd©e_™Æog_nub_adju°
(*
x_
, *
y_
)

536 
	#d
 16

	)

537 c⁄° 
sˇÀ
[] =

538 { 0 - 
d
*2, 0 - d*2, 0 - d*2, 12 - d*2,

539 30 - 
d
*2, 60 - d*2, 75 - d*2, 60 - d*2, 60 - d*2 };

540 
x
 = 
	`abs
(*
x_
);

541 
y
 = 
	`abs
(*
y_
);

542 
sˇÀ_x
 = 
sˇÀ
[
y
 / 16];

543 
sˇÀ_y
 = 
sˇÀ
[
x
 / 16];

545 i‡(
x
) {

546 
x
 +
d
 + (x * 
sˇÀ_x
 >> 8);

547 i‡(*
x_
 < 0)

548 
x
 = -x;

550 i‡(
y
) {

551 
y
 +
d
 + (y * 
sˇÀ_y
 >> 8);

552 i‡(*
y_
 < 0)

553 
y
 = -y;

556 *
x_
 = 
x
;

557 *
y_
 = 
y
;

558 #unde‡
d


559 
	}
}

561 
	$upd©e_™Æogs
()

563 *
nubp
[2] = { 
ö_a1
, 
ö_a2
 };

564 
vÆs
[2];

565 
i
, 
a
, 
v
, 
ªt
;

567 
i
 = 0; i < 2; i++)

569 i‡(
ö_adev
[
i
] < 0)

572 
a
 = 0;á < 2;á++) {

573 
vÆs
[
a
] = 0;

575 
ªt
 = 
	`ö_upd©e_™Æog
(
ö_adev
[
i
], 
ö_adev_axis
[i][
a
], &
v
);

576 i‡(
ªt
 == 0)

577 
vÆs
[
a
] = 128 * 
v
 / 
IN_ABS_RANGE
;

580 i‡(
ö_adev_is_nublike
[
i
])

581 
	`upd©e_™Æog_nub_adju°
(&
vÆs
[0], &vals[1]);

583 
a
 = 0;á < 2;á++) {

584 
v
 = 
vÆs
[
a
] + 127;

585 i‡(
v
 < 0) v = 0;

586 i‡(
v
 > 255) v = 255;

587 
nubp
[
i
][
a
] = 
v
;

592 
	}
}

594 
	$upd©e_öput
()

596 
a˘i⁄s
[
IN_BINDTYPE_COUNT
] = { 0, };

597 
emu_a˘
;

599 
	`ö_upd©e
(
a˘i⁄s
);

600 i‡(
ö_ty≥1
 =
PSE_PAD_TYPE_ANALOGPAD
)

601 
	`upd©e_™Æogs
();

602 
emu_a˘
 = 
a˘i⁄s
[
IN_BINDTYPE_EMU
];

603 
ö_°©e_gun
 = (
emu_a˘
 & 
SACTION_GUN_MASK
Ë>> 
SACTION_GUN_TRIGGER
;

605 
emu_a˘
 &~
SACTION_GUN_MASK
;

606 i‡(
emu_a˘
) {

607 
which
 = 0;

608 ; !(
emu_a˘
 & 1);Ému_a˘ >>1, 
which
++)

610 
emu_a˘
 = 
which
;

612 
	`emu_£t_a˘i⁄
(
emu_a˘
);

614 
ö_key°©e
 = 
a˘i⁄s
[
IN_BINDTYPE_PLAYER12
];

615 
	}
}

617 
upd©e_öput
();

620 
	$∂_upd©e_gun
(*
xn
, *
yn
, *
xªs
, *
yªs
, *
ö
)

622 i‡(
tsdev
)

623 
	`∂_gun_ts_upd©e
(
tsdev
, 
xn
, 
yn
, 
ö
);

625 *
xªs
 = 
psx_w
;

626 *
yªs
 = 
psx_h
;

627 
	}
}

629 
	#MAX_LAG_FRAMES
 3

	)

631 
	#tvdiff
(
tv
, 
tv_ﬁd
) \

632 ((
tv
.
tv_£c
 - 
tv_ﬁd
.tv_£cË* 1000000 +Åv.
tv_u£c
 -Åv_ﬁd.tv_u£c)

	)

635 
	$∂_‰ame_limô
()

637 
timevÆ
 
tv_ﬁd
, 
tv_ex≥˘
;

638 
vsync_˙t_¥ev
, 
drc_a˘ive_vsyncs
;

639 
timevÆ
 
now
;

640 
diff
, 
ußdj
;

642 i‡(
g_emu_ª£âög
)

645 
vsync_˙t
++;

649 
	`upd©e_öput
();

651 
	`p˙t_íd
(
PCNT_ALL
);

652 
	`gëtimeofday
(&
now
, 0);

654 i‡(
now
.
tv_£c
 !
tv_ﬁd
.tv_sec) {

655 
diff
 = 
	`tvdiff
(
now
, 
tv_ﬁd
);

656 
∂_ª¨med_cbs
.
v•s_cur
 = 0.0f;

657 i‡(0 < 
diff
 && diff < 2000000)

658 
∂_ª¨med_cbs
.
v•s_cur
 = 1000000.0‡* (
vsync_˙t
 - 
vsync_˙t_¥ev
Ë/ 
diff
;

659 
vsync_˙t_¥ev
 = 
vsync_˙t
;

661 i‡(
g_›ts
 & 
OPT_SHOWFPS
)

662 
∂_ª¨med_cbs
.
Êùs_≥r_£c
 =Öl_ª¨med_cbs.
Êù_˙t
;

663 
∂_ª¨med_cbs
.
Êù_˙t
 = 0;

664 i‡(
g_›ts
 & 
OPT_SHOWCPU
)

665 
∂_ª¨med_cbs
.
˝u_ußge
 = 
	`gë_˝u_ticks
();

667 i‡(
hud_√w_msg
 > 0) {

668 
hud_√w_msg
--;

669 i‡(
hud_√w_msg
 == 0)

670 
hud_msg
[0] = 0;

672 
tv_ﬁd
 = 
now
;

674 #ifde‡
PCNT


675 
ya_vsync_cou¡
;

676 i‡(++
ya_vsync_cou¡
 =
PCNT_FRAMES
) {

677 
	`p˙t_¥öt
(
∂_ª¨med_cbs
.
v•s_cur
);

678 
ya_vsync_cou¡
 = 0;

683 
tv_ex≥˘
.
tv_u£c
 +
‰ame_öãrvÆ1024
;

684 i‡(
tv_ex≥˘
.
tv_u£c
 >= (1000000 << 10)) {

685 
tv_ex≥˘
.
tv_u£c
 -= (1000000 << 10);

686 
tv_ex≥˘
.
tv_£c
++;

688 
diff
 = (
tv_ex≥˘
.
tv_£c
 - 
now
.tv_£cË* 1000000 + (tv_ex≥˘.
tv_u£c
 >> 10) -Çow.tv_usec;

690 i‡(
diff
 > 
MAX_LAG_FRAMES
 * 
‰ame_öãrvÆ
 || diff < -MAX_LAG_FRAMES * frame_interval) {

692 
tv_ex≥˘
 = 
now
;

693 
diff
 = 0;

695 
ußdj
 = 
vsync_u£c_time
;

696 
ußdj
 < 
tv_ex≥˘
.
tv_u£c
 - 
‰ame_öãrvÆ
)

697 
ußdj
 +
‰ame_öãrvÆ
;

698 
tv_ex≥˘
.
tv_u£c
 = 
ußdj
 << 10;

701 i‡(!(
g_›ts
 & 
OPT_NO_FRAMELIM
Ë&& 
diff
 > 
‰ame_öãrvÆ
) {

704 
	`u¶ìp
(
diff
 - 
‰ame_öãrvÆ
);

707 i‡(
∂_ª¨med_cbs
.
‰ameskù
) {

708 i‡(
diff
 < -
‰ame_öãrvÆ
)

709 
∂_ª¨med_cbs
.
fskù_advi˚
 = 1;

710 i‡(
diff
 >= 0)

711 
∂_ª¨med_cbs
.
fskù_advi˚
 = 0;

715 i‡(
√w_dy«ªc_did_compûe
) {

716 i‡(
drc_a˘ive_vsyncs
 < 32)

717 
∂_ª¨med_cbs
.
fskù_advi˚
 = 0;

718 
drc_a˘ive_vsyncs
++;

721 
drc_a˘ive_vsyncs
 = 0;

722 
√w_dy«ªc_did_compûe
 = 0;

725 
	`p˙t_°¨t
(
PCNT_ALL
);

726 
	}
}

728 
	$∂_timög_¥ï¨e
(
is_∑l_
)

730 
∂_ª¨med_cbs
.
fskù_advi˚
 = 0;

731 
∂_ª¨med_cbs
.
Êùs_≥r_£c
 = 0;

732 
∂_ª¨med_cbs
.
˝u_ußge
 = 0;

734 
is_∑l
 = 
is_∑l_
;

735 
‰ame_öãrvÆ
 = 
is_∑l
 ? 20000 : 16667;

736 
‰ame_öãrvÆ1024
 = 
is_∑l
 ? 20000*1024 : 17066667;

739 
∂_ª¨med_cbs
.
gpu_≥›s
.
fFømeR©eHz
 = 
is_∑l
 ? 50.0f : 59.94f;

740 
∂_ª¨med_cbs
.
gpu_≥›s
.
dwFømeR©eTicks
 =

741 (100000*100 / ()(
∂_ª¨med_cbs
.
gpu_≥›s
.
fFømeR©eHz
*100));

742 
	}
}

744 
	$∂_gë_œyî_pos
(*
x
, *
y
, *
w
, *
h
)

746 *
x
 = 
g_œyî_x
;

747 *
y
 = 
g_œyî_y
;

748 *
w
 = 
g_œyî_w
;

749 *
h
 = 
g_œyî_h
;

750 
	}
}

752 *
∂_mm≠
(
size
);

753 
∂_munm≠
(*
±r
, 
size
);

755 
ª¨med_cbs
 
	g∂_ª¨med_cbs
 = {

756 
∂_gë_œyî_pos
,

757 
∂_vout_›í
,

758 
∂_vout_£t_mode
,

759 
∂_vout_Êù
,

760 
∂_vout_˛o£
,

762 .
mm≠
 = 
∂_mm≠
,

763 .
	gmunm≠
 = 
∂_munm≠
,

764 .
	g∂_£t_gpu_ˇps
 = 
∂_£t_gpu_ˇps
,

768 *
	$w©chdog_thªad
(*
unu£d
)

770 
vsync_˙t_ﬁd
 = 0;

771 
£í_dód
 = 0;

772 
¶ìp_time
 = 5;

774 #i‡!
	`deföed
(
NDEBUG
Ë|| deföed(
DRC_DBG
)

776  
NULL
;

780 
	`¶ìp
(
¶ìp_time
);

782 i‡(
°›
) {

783 
£í_dód
 = 0;

784 
¶ìp_time
 = 5;

787 i‡(
vsync_˙t
 !
vsync_˙t_ﬁd
) {

788 
vsync_˙t_ﬁd
 = 
vsync_˙t
;

789 
£í_dód
 = 0;

790 
¶ìp_time
 = 2;

794 
£í_dód
++;

795 
¶ìp_time
 = 1;

796 i‡(
£í_dód
 > 1)

797 
	`Ârötf
(
°dîr
, "w©chdog: sìn_dód %d\n", 
£í_dód
);

798 i‡(
£í_dód
 > 4) {

799 
	`Ârötf
(
°dîr
, "watchdog:Üockup detected,áborting\n");

802 
	`ab‹t
();

805 
	}
}

807 
	$∂_°¨t_w©chdog
()

809 
±hªad_©å_t
 
©å
;

810 
±hªad_t
 
tid
;

811 
ªt
;

813 
	`±hªad_©å_öô
(&
©å
);

814 
	`±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_DETACHED
);

816 
ªt
 = 
	`±hªad_¸óã
(&
tid
, &
©å
, 
w©chdog_thªad
, 
NULL
);

817 i‡(
ªt
 != 0)

818 
	`Ârötf
(
°dîr
, "couldÇŸ sèπ w©chdog: %d\n", 
ªt
);

819 
	}
}

821 *
	$∂_emu_mm≠
(
addr
, 
size_t
 
size
, 
is_fixed
,

822 
psxM≠Tag
 
èg
)

824  
	`∂©_mm≠
(
addr
, 
size
, 0, 
is_fixed
);

825 
	}
}

827 
	$∂_emu_munm≠
(*
±r
, 
size_t
 
size
, 
psxM≠Tag
 
èg
)

829 
	`∂©_munm≠
(
±r
, 
size
);

830 
	}
}

832 *
	$∂_mm≠
(
size
)

834  
	`psxM≠Hook
(0, 
size
, 0, 
MAP_TAG_VRAM
);

835 
	}
}

837 
	$∂_munm≠
(*
±r
, 
size
)

839 
	`psxUnm≠Hook
(
±r
, 
size
, 
MAP_TAG_VRAM
);

840 
	}
}

842 
	$∂_öô
()

844 
hSyncCou¡
;

845 
‰ame_cou¡î
;

847 
psx_w
 = 
psx_h
 = 
∂_vout_w
 = 
∂_vout_h
 = 256;

848 
psx_bµ
 = 
∂_vout_bµ
 = 16;

850 
tsdev
 = 
	`∂_gun_ts_öô
();

852 
∂_ª¨med_cbs
.
gpu_h˙t
 = &
hSyncCou¡
;

853 
∂_ª¨med_cbs
.
gpu_‰ame_cou¡
 = &
‰ame_cou¡î
;

855 
psxM≠Hook
 = 
∂_emu_mm≠
;

856 
psxUnm≠Hook
 = 
∂_emu_munm≠
;

857 
	}
}

	@frontend/plugin_lib.h

3 
	mDKEY_SELECT
 = 0,

4 
	mDKEY_L3
,

5 
	mDKEY_R3
,

6 
	mDKEY_START
,

7 
	mDKEY_UP
,

8 
	mDKEY_RIGHT
,

9 
	mDKEY_DOWN
,

10 
	mDKEY_LEFT
,

11 
	mDKEY_L2
,

12 
	mDKEY_R2
,

13 
	mDKEY_L1
,

14 
	mDKEY_R1
,

15 
	mDKEY_TRIANGLE
,

16 
	mDKEY_CIRCLE
,

17 
	mDKEY_CROSS
,

18 
	mDKEY_SQUARE
,

20 
ö_ty≥1
, 
ö_ty≥2
;

21 
ö_key°©e
, 
ö_°©e_gun
, 
ö_a1
[2], 
ö_a2
[2];

22 
ö_adev
[2], 
ö_adev_axis
[2][2];

23 
ö_adev_is_nublike
[2];

24 
ö_íabÀ_vibøti⁄
;

26 *
∂_vout_buf
;

28 
g_œyî_x
, 
g_œyî_y
;

29 
g_œyî_w
, 
g_œyî_h
;

31 
∂_°¨t_w©chdog
();

32 *
∂_¥ï¨e_s¸ìnshŸ
(*
w
, *
h
, *
bµ
);

33 
∂_öô
();

34 
∂_swôch_di•mode
();

36 
∂_timög_¥ï¨e
(
is_∑l
);

37 
∂_‰ame_limô
();

39 
	sª¨med_cbs
 {

40 (*
	m∂_gë_œyî_pos
)(*
	mx
, *
	my
, *
	mw
, *
	mh
);

41 (*
	m∂_vout_›í
)();

42 (*
	m∂_vout_£t_mode
)(
	mw
, 
	mh
, 
	møw_w
, 
	møw_h
, 
	mbµ
);

43 (*
	m∂_vout_Êù
)(c⁄° *
	mvøm
, 
	m°ride
, 
	mbgr24
,

44 
	mw
, 
	mh
);

45 (*
	m∂_vout_˛o£
)();

46 *(*
	mmm≠
)(
	msize
);

47 (*
	mmunm≠
)(*
	m±r
, 
	msize
);

49 (*
	m∂_vout_£t_øw_vøm
)(*
	mvøm
);

50 (*
	m∂_£t_gpu_ˇps
)(
	mˇps
);

52 
	mÊùs_≥r_£c
, 
	m˝u_ußge
;

53 
	mv•s_cur
;

55 
	ms¸ìn_w
, 
	ms¸ìn_h
;

56 *
	mgÀs_di•œy
, *
	mgÀs_surÁ˚
;

58 
	m‰ameskù
;

59 
	mfskù_advi˚
;

60 *
	mgpu_‰ame_cou¡
;

61 *
	mgpu_h˙t
;

62 
	mÊù_˙t
;

63 
	m⁄ly_16bµ
;

65 
	mÆlow_öãæa˚
;

66 
	míh™˚mít_íabÀ
;

67 
	míh™˚mít_no_maö
;

68 } 
	mgpu_√⁄
;

70 
	miU£Dôhî
;

71 
	mdwA˘Fixes
;

72 
	mfFømeR©eHz
;

73 
	mdwFømeR©eTicks
;

74 } 
	mgpu_≥›s
;

76 
	mabe_hack
;

77 
	mno_light
, 
	mno_bÀnd
;

78 
	mlöeskù
;

79 } 
	mgpu_u«i
;

81 
	mdwA˘Fixes
;

82 
	mbDøwDôhî
, 
	miFûãrTy≥
, 
	miFømeTexTy≥
;

83 
	miU£Mask
, 
	mbO∑quePass
, 
	mbAdv™˚dBÀnd
, 
	mbU£Fa°Mdec
;

84 
	miVRamSize
, 
	miTexG¨bageCﬁÀ˘i⁄
;

85 } 
	mgpu_≥›sgl
;

87 
	mgpu_ˇps
;

90 
ª¨med_cbs
 
∂_ª¨med_cbs
;

92 
	egpu_∂ugö_ˇps
 {

93 
	mGPU_CAP_OWNS_DISPLAY
 = (1 << 0),

94 
	mGPU_CAP_SUPPORTS_2X
 = (1 << 1),

98 (*
∂_∂©_˛ór
)();

99 (*
∂_∂©_blô
)(
doffs
, c⁄° *
§c
,

100 
w
, 
h
, 
s°ride
, 
bgr24
);

101 (*
∂_∂©_hud_¥öt
)(
x
, 
y
, c⁄° *
°r
, 
bµ
);

103 #i‚de‡
ARRAY_SIZE


104 
	#ARRAY_SIZE
(
x
Ë((xË/ (x[0]))

	)

	@frontend/revision.h

1 
	#REV
 "r22-3-g85f2398"

	)

	@frontend/warm/module/warm_main.c

12 
	~<löux/moduÀ.h
>

13 
	~<löux/kî√l.h
>

14 
	~<löux/¥oc_fs.h
>

15 
	~<löux/dñay.h
>

16 
	~<löux/fs.h
>

17 
	~<löux/£q_fûe.h
>

19 
	~<löux/vîsi⁄.h
>

20 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,11)

21 
	~<löux/uac˚ss.h
>

23 
	~<löux/öô.h
>

24 
	~<löux/moduÀ∑øm.h
>

25 
	~<asm/uac˚ss.h
>

26 
	#__u£r


	)

27 
	#u∆ocked_io˘l
 
io˘l


	)

30 
	#WARM_CODE


	)

31 
	~"../w¨m.h
"

32 
	~"w¨m_›s.h
"

34 #i‚de‡
CONFIG_PROC_FS


35 #îr‹ 
√ed
 
¥oc_fs


38 
	#WARM_VER
 "r3"

	)

39 
	#PFX
 "wARM: "

	)

41 
	#WARM_INFO
(
fmt
, ...) \

42 i‡(
vîbo£
) \

43 
	`¥_öfo
(
PFX
 
fmt
, ##
__VA_ARGS__
)

	)

45 
	#SECTION_SIZE
 0x100000

	)

46 
	#MAX_CACHEOP_RANGE
 16384

	)

49 
	#RAM_PHYS_START
 0

	)

50 
	#RAM_MAX_SIZE
 0x10000000

	)

53 #i‡ 
deföed
(
CONFIG_CPU_ARM926T
)

54 
	#EXPECTED_ID
 0x069260

	)

55 #ñi‡
deföed
(
CONFIG_CPU_ARM920T
)

56 
	#EXPECTED_ID
 0x029200

	)

61 
max_m≠ƒ
;

64 
u32
 
	guµîmem_°¨t
;

65 
u32
 
	guµîmem_íd
;

66 
•ölock_t
 
	glock
;

68 
	gvîbo£
;

70 
u32
 *
	$gë_pgèbÀ
()

72 
u32
 
âb
;

75 
	`asm
 ("mr¯p15, 0, %0, c2, c0, 0" : "Ù"(
âb
));

77  
	`__va
((
âb
) & 0xffffc000);

78 
	}
}

80 
	$do_£t_cb_uµîmem
(
ö_cb
, 
is_£t
)

82 
Êags
;

83 
u32
 *
pgèbÀ
, *
˝t
;

84 
i
, 
j
, 
cou¡
 = 0;

85 
bôs
 = 0;

87 i‡(
uµîmem_íd
 <
uµîmem_°¨t
)

88  -
ENODEV
;

90 i‡(
ö_cb
 & 
WCB_C_BIT
)

91 
bôs
 |= 8;

92 i‡(
ö_cb
 & 
WCB_B_BIT
)

93 
bôs
 |= 4;

95 
	`•ö_lock_úqßve
(&
lock
, 
Êags
);

97 
pgèbÀ
 = 
	`gë_pgèbÀ
();

99 
i
 = 0; i < 4096; i++)

101 i‡((
pgèbÀ
[
i
] & 3) != 1)

105 
˝t
 = 
	`__va
(
pgèbÀ
[
i
] & 0xfffffc00);

107 
j
 = 0; j < 256; j++)

109 
u32
 
addr
, 
íåy
;

111 
íåy
 = 
˝t
[
j
];

112 i‡(!(
íåy
 & 3))

116 
addr
 = 
íåy
 & 0xfffff000;

117 i‡(
uµîmem_°¨t
 <
addr
 &&ádd∏< 
uµîmem_íd
)

119 
	`¥_debug
(
PFX
 "%s C&B bits %08x\n",

120 
is_£t
 ? "£t" : "˛ór", 
íåy
);

122 i‡(
is_£t
)

123 
íåy
 |
bôs
;

125 
íåy
 &~
bôs
;

129 i‡((
íåy
 & 3) == 3)

130 
íåy
 |= 0x030;

132 
íåy
 |= 0xff0;

134 
˝t
[
j
] = 
íåy
;

135 
cou¡
++;

140 
	`w¨m_c›_˛ón_d
();

141 
	`w¨m_døö_wb_övÆ_éb
();

143 
	`•ö_u∆ock_úqª°‹e
(&
lock
, 
Êags
);

145 
	`WARM_INFO
("%c%c bit(s) %s forÖhys %08x-%08x (%dÖages)\n",

146 
bôs
 & 8 ? 'c' : ' ', bits & 4 ? 'b' : ' ',

147 
is_£t
 ? "set" : "cleared",

148 
uµîmem_°¨t
, 
uµîmem_íd
 - 1, 
cou¡
);

151 
	}
}

153 
	$do_£t_cb_vút
(
ö_cb
, 
is_£t
, 
u32
 
addr
, u32 
size
)

155 
cou¡
 = 0, 
bôs
 = 0;

156 
Êags
;

157 
u32
 
desc1
, 
desc2
 = 0;

158 
u32
 *
pgèbÀ
, *
˝t
 = 
NULL
;

159 
u32
 
°¨t
, 
íd
;

160 
u32
 
mask
;

162 i‡(
ö_cb
 & 
WCB_C_BIT
)

163 
bôs
 |= 8;

164 i‡(
ö_cb
 & 
WCB_B_BIT
)

165 
bôs
 |= 4;

167 
mask
 = 
PAGE_SIZE
 - 1;

168 
size
 +
addr
 & 
mask
;

169 
size
 = (sizê+ 
mask
) & ~mask;

171 
addr
 &~(
PAGE_SIZE
 - 1);

172 
°¨t
 = 
addr
;

173 
íd
 = 
addr
 + 
size
;

175 
	`•ö_lock_úqßve
(&
lock
, 
Êags
);

177 
pgèbÀ
 = 
	`gë_pgèbÀ
();

179 
addr
 < 
íd
)

181 
desc1
 = 
pgèbÀ
[
addr
 >> 20];

183 
desc1
 & 3) {

185 
	`•ö_u∆ock_úqª°‹e
(&
lock
, 
Êags
);

186 
	`¥ötk
(
KERN_WARNING
 
PFX
 "addªs†%08xÇŸ m≠≥d.\n", 
addr
);

187  -
EINVAL
;

190 
˝t
 = 
	`__va
(
desc1
 & 0xfffffc00);

191 
desc2
 = 
˝t
[(
addr
 >> 12) & 0xff];

195 i‡(
is_£t
)

196 
desc1
 |
bôs
;

198 
desc1
 &~
bôs
;

199 
pgèbÀ
[
addr
 >> 20] = 
desc1
;

200 
addr
 +
SECTION_SIZE
;

201 
cou¡
++;

204 
˝t
 = 
	`__va
(
desc1
 & 0xfffff000);

205 
desc2
 = 
˝t
[(
addr
 >> 10) & 0x3ff];

209 i‡((
desc2
 & 3) == 0) {

210 
	`•ö_u∆ock_úqª°‹e
(&
lock
, 
Êags
);

211 
	`¥ötk
(
KERN_WARNING
 
PFX
 "address %08xÇot mapped (%08x)\n",

212 
addr
, 
desc2
);

213  -
EINVAL
;

216 i‡(
is_£t
)

217 
desc2
 |
bôs
;

219 
desc2
 &~
bôs
;

224 i‡((
desc2
 & 3) == 2)

225 
desc2
 |= 0xff0;

227 
desc1
 & 3) {

229 
˝t
[(
addr
 >> 12Ë& 0xff] = 
desc2
;

232 
˝t
[(
addr
 >> 10Ë& 0x3ff] = 
desc2
;

236 
addr
 +
PAGE_SIZE
;

237 
cou¡
++;

240 
	`w¨m_c›_˛ón_d
();

241 
	`w¨m_døö_wb_övÆ_éb
();

243 
	`•ö_u∆ock_úqª°‹e
(&
lock
, 
Êags
);

245 
	`WARM_INFO
("%c%c bit(s) %s virt %08x-%08x (%dÖages)\n",

246 
bôs
 & 8 ? 'c' : ' ', bits & 4 ? 'b' : ' ',

247 
is_£t
 ? "£t" : "˛óªd", 
°¨t
, 
íd
 - 1, 
cou¡
);

250 
	}
}

252 
	$do_vút2phys
(*
_addr
)

254 
u32
 
addr
 = *
_addr
;

255 
u32
 
desc1
, 
desc2
;

256 
u32
 *
pgèbÀ
, *
˝t
;

258 
pgèbÀ
 = 
	`gë_pgèbÀ
();

259 
desc1
 = 
pgèbÀ
[
addr
 >> 20];

261 
desc1
 & 3) {

263 
˝t
 = 
	`__va
(
desc1
 & 0xfffffc00);

264 
desc2
 = 
˝t
[(
addr
 >> 12) & 0xff];

267 *
_addr
 = (
desc1
 & 0xfff00000Ë| (
addr
 & 0xfffff);

270 
˝t
 = 
	`__va
(
desc1
 & 0xfffff000);

271 
desc2
 = 
˝t
[(
addr
 >> 10) & 0x3ff];

274  -
EINVAL
;

277 
desc2
 & 3) {

279 *
_addr
 = (
desc2
 & ~0xffffË| (
addr
 & 0xffff);

282 *
_addr
 = (
desc2
 & ~0x0fffË| (
addr
 & 0x0fff);

285 *
_addr
 = (
desc2
 & ~0x03ffË| (
addr
 & 0x03ff);

288  -
EINVAL
;

292 
	}
}

294 
	$do_ˇche_›s_whﬁe
(
›s
)

296 i‡((
›s
 & (
WOP_D_CLEAN
|
WOP_D_INVALIDATE
)) == (WOP_D_CLEAN|WOP_D_INVALIDATE))

297 
	`w¨m_c›_˛ón_övÆ_d
();

299 i‡(
›s
 & 
WOP_D_CLEAN
)

300 
	`w¨m_c›_˛ón_d
();

302 i‡(
›s
 & 
WOP_D_INVALIDATE
) {

303 
	`¥ötk
(
KERN_WARNING
 
PFX
 "invalidate without clean is dangerous!\n");

304 
	`w¨m_c›_övÆ_d
();

307 i‡(
›s
 & 
WOP_I_INVALIDATE
)

308 
	`w¨m_c›_övÆ_i
();

310 
	`w¨m_c›_døö_wb
();

312 
	}
}

314 
	$do_ˇche_›s
(
›s
, 
u32
 
addr
, u32 
size
)

316 i‡(
addr
 & 31) {

317 
size
 +
addr
 & 31;

318 
addr
 &= ~31;

321 
›s
) {

322 
WOP_D_CLEAN
|
WOP_D_INVALIDATE
|
WOP_I_INVALIDATE
:

323 
	`w¨m_c›_r_˛ón_d_övÆ_di
(
addr
, 
size
);

325 
WOP_D_CLEAN
|
WOP_D_INVALIDATE
:

326 
	`w¨m_c›_r_˛ón_d_övÆ_d
(
addr
, 
size
);

328 
WOP_D_CLEAN
|
WOP_I_INVALIDATE
:

329 
	`w¨m_c›_r_˛ón_d_övÆ_i
(
addr
, 
size
);

331 
WOP_D_CLEAN
:

332 
	`w¨m_c›_r_˛ón_d
(
addr
, 
size
);

334 
WOP_D_INVALIDATE
|
WOP_I_INVALIDATE
:

335 
	`w¨m_c›_r_övÆ_di
(
addr
, 
size
);

337 
WOP_D_INVALIDATE
:

338 
	`w¨m_c›_r_övÆ_d
(
addr
, 
size
);

340 
WOP_I_INVALIDATE
:

341 
	`w¨m_c›_r_övÆ_i
(
addr
, 
size
);

348 
	`w¨m_c›_døö_wb
();

350 
	}
}

352 
	$do_m≠_›
(
u32
 
vaddr
, u32 
∑ddr
, u32 
size
, 
cb
, 
is_unm≠
)

354 
cou¡
 = 0, 
ªtvÆ
 = 0;

355 
Êags
;

356 
u32
 
p°¨t
, 
°¨t
, 
íd
;

357 
u32
 
desc1
, 
≠cb_bôs
;

358 
u32
 *
pgèbÀ
;

359 
u32
 
v
, 
mask
;

361 
≠cb_bôs
 = (3 << 10) | (1 << 5);

362 i‡(
cb
 & 
WCB_C_BIT
)

363 
≠cb_bôs
 |= 8;

364 i‡(
cb
 & 
WCB_B_BIT
)

365 
≠cb_bôs
 |= 4;

367 
mask
 = 
SECTION_SIZE
 - 1;

368 
size
 = (sizê+ 
mask
) & ~mask;

370 
p°¨t
 = 
∑ddr
;

371 
°¨t
 = 
vaddr
;

372 
íd
 = 
°¨t
 + 
size
;

375 i‡(
íd
 - 1 < 
°¨t
)

376  -
EINVAL
;

377 i‡(
p°¨t
 + 
size
 - 1 <Östart)

378  -
EINVAL
;

380 
	`•ö_lock_úqßve
(&
lock
, 
Êags
);

382 
pgèbÀ
 = 
	`gë_pgèbÀ
();

384 ; 
vaddr
 < 
íd
; vadd∏+
SECTION_SIZE
, 
∑ddr
 += SECTION_SIZE)

386 
desc1
 = 
pgèbÀ
[
vaddr
 >> 20];

388 i‡(
is_unm≠
) {

389 i‡((
desc1
 & 3) != 2) {

390 
	`•ö_u∆ock_úqª°‹e
(&
lock
, 
Êags
);

391 
	`¥ötk
(
KERN_WARNING
 
PFX
 "vaddr %08x isÇotá section? (%08x)\n",

392 
vaddr
, 
desc1
);

393  -
EINVAL
;

395 
v
 = 0;

397 i‡((
desc1
 & 3) != 0) {

398 
	`¥ötk
(
KERN_WARNING
 
PFX
 "vaddr %08xálready mapped? (%08x)\n",

399 
vaddr
, 
desc1
);

400 
ªtvÆ
 = -
EINVAL
;

403 
v
 = (
∑ddr
 & ~
mask
Ë| 
≠cb_bôs
 | 0x12;

406 
pgèbÀ
[
vaddr
 >> 20] = 
v
;

407 
cou¡
++;

410 i‡(
ªtvÆ
 != 0) {

412 
vaddr
 = 
°¨t
;

414 ; 
vaddr
 < 
íd
 && 
cou¡
 > 0; vadd∏+
SECTION_SIZE
, count--)

415 
pgèbÀ
[
vaddr
 >> 20] = 0;

418 
	`w¨m_c›_˛ón_d
();

419 
	`w¨m_døö_wb_övÆ_éb
();

421 
	`•ö_u∆ock_úqª°‹e
(&
lock
, 
Êags
);

423 i‡(
ªtvÆ
 =0 && !
is_unm≠
) {

424 
	`WARM_INFO
("mapped %08xÅo %08x with %c%c bit(s) (%d section(s))\n",

425 
°¨t
, 
p°¨t
, 
≠cb_bôs
 & 8 ? 'c' : ' ',

426 
≠cb_bôs
 & 4 ? 'b' : ' ', 
cou¡
);

429  
ªtvÆ
;

430 
	}
}

432 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,11)

433 
	$w¨m_io˘l
(
fûe
 *fûe, 
cmd
, 
__¨g
)

435 
	$w¨m_io˘l
(
öode
 *öode, 
fûe
 *file,

436 
cmd
, 
__¨g
)

439 
__u£r
 *
¨g
 = (__u£∏*Ë
__¨g
;

441 
w¨m_ˇche_›
 
wc›
;

442 
w¨m_ch™ge_cb
 
ccb
;

443 
w¨m_m≠_›
 
m›
;

444 
addr
;

445 } 
u
;

446 
ªt
;

448 
cmd
) {

449 
WARMC_CACHE_OP
:

450 i‡(
	`c›y_‰om_u£r
(&
u
.
wc›
, 
¨g
, (u.wcop)))

451  -
EFAULT
;

452 i‡(
u
.
wc›
.
›s
 & ~(
WOP_D_CLEAN
|
WOP_D_INVALIDATE
|
WOP_I_INVALIDATE
))

453  -
EINVAL
;

454 i‡(
u
.
wc›
.
size
 == ()-1 ||

455 (
u
.
wc›
.
size
 > 
MAX_CACHEOP_RANGE
 && !(u.wc›.
›s
 & 
WOP_D_INVALIDATE
)))

456 
ªt
 = 
	`do_ˇche_›s_whﬁe
(
u
.
wc›
.
›s
);

458 
ªt
 = 
	`do_ˇche_›s
(
u
.
wc›
.
›s
, u.wc›.
addr
, u.wc›.
size
);

460 
WARMC_CHANGE_CB
:

461 i‡(
	`c›y_‰om_u£r
(&
u
.
ccb
, 
¨g
, (u.ccb)))

462  -
EFAULT
;

463 i‡(
u
.
ccb
.
cb
 & ~(
WCB_C_BIT
|
WCB_B_BIT
))

464  -
EINVAL
;

465 i‡(
u
.
ccb
.
addr
 =0 && u.ccb.
size
 == 0)

466 
ªt
 = 
	`do_£t_cb_uµîmem
(
u
.
ccb
.
cb
, u.ccb.
is_£t
);

468 
ªt
 = 
	`do_£t_cb_vút
(
u
.
ccb
.
cb
, u.ccb.
is_£t
, u.ccb.
addr
, u.ccb.
size
);

470 
WARMC_VIRT2PHYS
:

471 i‡(
	`c›y_‰om_u£r
(&
u
.
addr
, 
¨g
, (u.addr)))

472  -
EFAULT
;

473 
ªt
 = 
	`do_vút2phys
(&
u
.
addr
);

474 i‡(
	`c›y_to_u£r
(
¨g
, &
u
.
addr
, (u.addr)))

475  -
EFAULT
;

477 
WARMC_MMAP
:

478 i‡(
	`c›y_‰om_u£r
(&
u
.
m›
, 
¨g
, (u.mop)))

479  -
EFAULT
;

480 i‡(
u
.
m›
.
cb
 & ~(
WCB_C_BIT
|
WCB_B_BIT
))

481  -
EINVAL
;

482 
ªt
 = 
	`do_m≠_›
(
u
.
m›
.
vút_addr
, u.m›.
phys_addr
, u.m›.
size
,

483 
u
.
m›
.
cb
, u.m›.
is_unm≠
);

486 
ªt
 = -
ENOTTY
;

490  
ªt
;

491 
	}
}

493 c⁄° *
	$w¨m_im∂emít‹_«me
(
code
)

495 
code
) {

508 
	}
}

510 c⁄° *
	$w¨m_¨ch_«me
(
code
)

512 
code
) {

529 
	}
}

531 
	$w¨m_ˇche_size
(
code
, 
m
)

533 
ba£
 = 512;

534 i‡(
m
)

535 
ba£
 = 768;

536  
ba£
 << 
code
;

537 
	}
}

539 
	$w¨m_ˇche_assoc
(
code
, 
m
)

541 
ba£
 = 2;

542 i‡(
code
 == 0)

543  
m
 ? 0 : 1;

544 i‡(
m
)

545 
ba£
 = 3;

546  
ba£
 << (
code
 - 1);

547 
	}
}

549 
	$w¨m_ˇche_löe
(
code
)

551  8 << 
code
;

552 
	}
}

554 
	$w¨m_£q_show
(
£q_fûe
 *
£q
, *
off£t
)

556 
u32
 
tmp
;

558 
	`£q_¥ötf
(
£q
, "wARM: " 
WARM_VER
 "\n");

561 
	`asm
 ("mr¯p15, 0, %0, c0, c0, 0" : "Ù"(
tmp
));

562 
	`£q_¥ötf
(
£q
, "ID: %08x\n", 
tmp
);

563 i‡(
tmp
 & 0x80000) {

565 } i‡((
tmp
 & 0xf000) == 0) {

567 
	`£q_¥ötf
(
£q
, "Architecture: %d\n",

568 (
tmp
 & 0xf00) == 0x600 ? 3 : 2);

569 
	`£q_¥ötf
(
£q
, "V¨ü¡: %d%d0\n", (
tmp
 & 0xf00) >> 8,

570 (
tmp
 & 0xf0) >> 4);

572 
	`£q_¥ötf
(
£q
, "Im∂emít‹: %¯(%s)\n", 
tmp
 >> 24,

573 
	`w¨m_im∂emít‹_«me
(
tmp
 >> 24));

574 i‡((
tmp
 & 0xf000) == 7) {

575 
	`£q_¥ötf
(
£q
, "Architecture: %s\n",

576 
tmp
 & 0x800000 ? "4T" : "3");

577 
	`£q_¥ötf
(
£q
, "V¨ü¡: 0x%x\n", (
tmp
 & 0x7f0000) >> 16);

579 
	`£q_¥ötf
(
£q
, "Architecture: %s\n",

580 
	`w¨m_¨ch_«me
((
tmp
 & 0x0f0000) >> 16));

581 
	`£q_¥ötf
(
£q
, "V¨ü¡: 0x%x\n", (
tmp
 & 0xf00000) >> 20);

583 
	`£q_¥ötf
(
£q
, "P¨ànumbî: 0x%x\n", (
tmp
 & 0xfff0) >> 4);

585 
	`£q_¥ötf
(
£q
, "Revisi⁄: 0x%x\n", 
tmp
 & 0xf);

588 
	`asm
 ("mr¯p15, 0, %0, c0, c0, 1" : "Ù"(
tmp
));

589 
	`£q_¥ötf
(
£q
, "Cachê˘y≥: 0x%x\n", (
tmp
 & 0x1e000000) >> 25);

590 
	`£q_¥ötf
(
£q
, "Cachêunifõd: %s\n", (
tmp
 & 0x01000000) ? "no" : "yes");

591 
	`£q_¥ötf
(
£q
, "DCache size: %d\n",

592 
	`w¨m_ˇche_size
((
tmp
 >> (6+12)) & 0xf, (tmp >> (2+12)) & 1));

593 
	`£q_¥ötf
(
£q
, "DCacheássociativity: %d\n",

594 
	`w¨m_ˇche_assoc
((
tmp
 >> (3+12)) & 7, (tmp >> (2+12)) & 1));

595 
	`£q_¥ötf
(
£q
, "DCacheÜine size: %d\n",

596 
	`w¨m_ˇche_löe
((
tmp
 >> (0+12)) & 3));

597 
	`£q_¥ötf
(
£q
, "ICache size: %d\n",

598 
	`w¨m_ˇche_size
((
tmp
 >> 6) & 0xf, (tmp >> 2) & 1));

599 
	`£q_¥ötf
(
£q
, "ICacheássociativity: %d\n",

600 
	`w¨m_ˇche_assoc
((
tmp
 >> 3) & 7, (tmp >> 2) & 1));

601 
	`£q_¥ötf
(
£q
, "ICacheÜine size: %d\n",

602 
	`w¨m_ˇche_löe
((
tmp
 >> 0) & 3));

605 
	}
}

607 
	$w¨m_›í
(
öode
 *öode, 
fûe
 *file)

609  
	`sögÀ_›í
(
fûe
, 
w¨m_£q_show
, 
NULL
);

610 
	}
}

612 
	$w¨m_˛o£
(
öode
 *
öo
, 
fûe
 *file)

614  
	`sögÀ_ªÀa£
(
öo
, 
fûe
);

615 
	}
}

617 c⁄° 
fûe_›î©i⁄s
 
	gw¨m_f›s
 = {

618 .
ow√r
 = 
THIS_MODULE
,

619 .
	g›í
 = 
w¨m_›í
,

620 .
	gªad
 = 
£q_ªad
,

621 .
	gŒ£ek
 = 
£q_l£ek
,

622 .
	gu∆ocked_io˘l
 = 
w¨m_io˘l
,

623 .
	gªÀa£
 = 
w¨m_˛o£
,

626 
__öô
 
	$w¨m_moduÀ_öô
()

628 
¥oc_dú_íåy
 *
¥ë
;

629 
u32
 
˝uid
;

631 
	`asm
 ("mr¯p15, 0, %0, c0, c0, 0" : "Ù"(
˝uid
));

632 i‡((
˝uid
 & 0x0ffff0Ë!
EXPECTED_ID
) {

633 
	`¥ötk
(
KERN_ERR
 
PFX
 "module was compiled for different CPU,áborting\n");

637 
¥ë
 = 
	`¸óã_¥oc_íåy
("w¨m", 
S_IWUGO
 | 
S_IRUGO
, 
NULL
);

638 i‡(!
¥ë
) {

639 
	`¥ötk
(
KERN_ERR
 
PFX
 "can't createÖrocÉntry\n");

643 
¥ë
->
ow√r
 = 
THIS_MODULE
;

644 
¥ë
->
¥oc_f›s
 = &
w¨m_f›s
;

646 
	`•ö_lock_öô
(&
lock
);

648 
uµîmem_°¨t
 = 
RAM_PHYS_START
 + (
max_m≠ƒ
 << 
PAGE_SHIFT
);

649 
uµîmem_íd
 = 
RAM_PHYS_START
 + 
RAM_MAX_SIZE
;

651 
	`¥_öfo
(
PFX
 
WARM_VER
 "Üoaded, ");

652 i‡(
uµîmem_íd
 <
uµîmem_°¨t
)

653 
	`¥ötk
("no upper mem");

655 
	`¥ötk
("uµî mem %08x-%08x", 
uµîmem_°¨t
, 
uµîmem_íd
 - 1);

656 
	`¥ötk
("\n");

659 
	`mdñay
(200);

662 
	}
}

664 
__exô
 
	$w¨m_moduÀ_exô
()

666 
	`ªmove_¥oc_íåy
("w¨m", 
NULL
);

668 
	`¥_öfo
(
PFX
 "unloaded.\n");

669 
	}
}

671 
moduÀ_öô
(
w¨m_moduÀ_öô
);

672 
moduÀ_exô
(
w¨m_moduÀ_exô
);

674 
moduÀ_∑øm
(
vîbo£
, , 0644);

676 
MODULE_LICENSE
("GPL");

677 
MODULE_DESCRIPTION
("ARMÖrocessor services");

678 
MODULE_AUTHOR
("Grazvydas Ignotas");

	@frontend/warm/module/warm_ops.h

1 
	~<löux/kî√l.h
>

3 
w¨m_c›_˛ón_övÆ_d
();

4 
w¨m_c›_˛ón_d
();

5 
w¨m_c›_övÆ_d
();

6 
w¨m_c›_övÆ_i
();

7 
w¨m_c›_døö_wb
();

9 
w¨m_c›_r_˛ón_d_övÆ_di
(
u32
 
addr
, u32 
size
);

10 
w¨m_c›_r_˛ón_d_övÆ_d
(
u32
 
addr
, u32 
size
);

11 
w¨m_c›_r_˛ón_d_övÆ_i
(
u32
 
addr
, u32 
size
);

12 
w¨m_c›_r_˛ón_d
(
u32
 
addr
, u32 
size
);

13 
w¨m_c›_r_övÆ_di
(
u32
 
addr
, u32 
size
);

14 
w¨m_c›_r_övÆ_d
(
u32
 
addr
, u32 
size
);

15 
w¨m_c›_r_övÆ_i
(
u32
 
addr
, u32 
size
);

17 
w¨m_døö_wb_övÆ_éb
();

	@frontend/warm/test.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~<sys/time.h
>

12 
	~<time.h
>

13 
	~<uni°d.h
>

14 
	~<sys/io˘l.h
>

15 
	~<sys/mm™.h
>

16 
	~<sys/ty≥s.h
>

17 
	~<sys/°©.h
>

18 
	~<f˙é.h
>

19 
	~<löux/fb.h
>

22 
	~"w¨m.h
"

24 
	#w¨m_öô
(...Ë0

	)

25 
	#w¨m_föish
(...)

	)

26 
	#w¨m_ˇche_›_ønge
(...)

	)

27 
	#w¨m_ch™ge_cb_ønge
(...)

	)

30 
	tu64
;

31 
u64
 
	g°¨t_time
, 
	gíd_time
;

33 
	gbuff
[2 * 1024 * 1024] 
__©åibuã__
((
Æig√d
(32)));

34 *
	gbuff_mid
 = &
buff
[(buff) / 2];

36 
	#REP
 32

	)

38 
u64
 
	$xtime
()

40 
timevÆ
 
tv
;

41 
	`gëtimeofday
(&
tv
, 
NULL
);

42  (
u64
)
tv
.
tv_£c
 * 1000000 +Åv.
tv_u£c
;

43 
	}
}

45 
	$ã°_°¨t
()

47 
°¨t_time
 = 
	`xtime
();

48 
	}
}

50 
	$ã°_íd
()

52 
íd_time
 = 
	`xtime
();

53 
	}
}

55 
	$show_ªsu…
(c⁄° *
«me
, 
byãs
)

57 
£cs
 = (
íd_time
 - 
°¨t_time
) / 1000000.0;

58 
	`¥ötf
("%-16s: %4.1fs, %5.1‡MB/s\n", 
«me
, 
£cs
, 
byãs
 / secs / 1048576);

59 
	}
}

61 
	$do_mem£t
()

63 
	`mem£t
(
buff
, 0, (buff));

64 
	}
}

66 
	$byã_fûl
()

68 *
p
 = (*)
buff
;

69 
i
;

70 
i
 = (
buff
); i > 0; i--)

71 *
p
++ = 0;

72 
	}
}

74 
	$w‹d_fûl
()

76 *
p
 = (*)
buff
;

77 
i
;

78 
i
 = (
buff
Ë/ (*
p
); i > 0; i--)

79 *
p
++ = 0;

80 
	}
}

82 
	$ˇched_byã_fûl
()

84 *
p
 = (*)
buff
;

85 
i
, 
j
, 
v
;

87 
i
 = (
buff
) / 32; i > 0; i--) {

88 
v
 +*
p
;

89 
j
 = 32; j > 0; j--)

90 *
p
++ = 
v
;

92 
	}
}

94 
	$do_mem˝y
()

96 
	`mem˝y
(
buff
, 
buff_mid
, (buff) / 2);

97 
	}
}

99 
	$byã_˝y
()

101 *
d
 = (*)
buff
;

102 *
s
 = (*)
buff_mid
;

103 
i
;

104 
i
 = (
buff
Ë/ (*
d
) / 2; i > 0; i--)

105 *
d
++ = *
s
++;

106 
	}
}

108 
	$w‹d_˝y
()

110 *
d
 = (*)
buff
;

111 *
s
 = (*)
buff_mid
;

112 
i
;

113 
i
 = (
buff
Ë/ (*
d
) / 2; i > 0; i--)

114 *
d
++ = *
s
++;

115 
	}
}

117 
	$w‹d_öc
()

119 *
p
 = (*)
buff
;

120 
i
;

122 
i
 = (
buff
Ë/ (*
p
); i > 0; i--) {

123 (*
p
)++;

124 
p
++;

126 
	}
}

128 
	#TEST_PAGE
 4096

	)

130 
	$∑ge_wrôes_ªf
(*
buf
)

132 *
d
 = 
buf
;

133 
i
, 
j
;

135 
j
 = 0; j < 0x100000 / 
TEST_PAGE
; j++)

136 
i
 = 0; i < 
TEST_PAGE
 / 4; i++)

137 
d
[
j
 * 
TEST_PAGE
 / 4 + 
i
] = 0;

138 
	}
}

140 
	$∑ge_öc_ªf
(*
buf
)

142 *
d
 = 
buf
;

143 
i
, 
j
;

145 
j
 = 0; j < 0x100000 / 
TEST_PAGE
; j++)

146 
i
 = 0; i < 
TEST_PAGE
 / 4; i++)

147 
d
[
j
 * 
TEST_PAGE
 / 4 + 
i
]++;

148 
	}
}

150 
	$∑ge_wrôes
(*
buf
)

152 *
d
 = 
buf
;

153 
i
, 
j
;

155 
i
 = 0; i < 
TEST_PAGE
 / 4; i++)

156 
j
 = 0; j < 0x100000 / 
TEST_PAGE
; j++)

157 
d
[
j
 * 
TEST_PAGE
 / 4 + 
i
] = 0;

158 
	}
}

160 
	$∑ge_öc
(*
buf
)

162 *
d
 = 
buf
;

163 
i
, 
j
;

165 
i
 = 0; i < 
TEST_PAGE
 / 4; i++)

166 
j
 = 0; j < 0x100000 / 
TEST_PAGE
; j++)

167 
d
[
j
 * 
TEST_PAGE
 / 4 + 
i
]++;

168 
	}
}

170 
	#ONE_TEST
(
cou¡
, 
func
) \

171 
	`ã°_°¨t
(); \

172 
i
 = 
cou¡
; i > 0; i--) \

173 
func
; \

174 
	`ã°_íd
()

	)

176 
	$ã°s
()

178 
i
;

180 
	`ONE_TEST
(
REP
, 
	`do_mem£t
());

181 
	`show_ªsu…
("mem£t", (
buff
Ë* 
REP
);

183 
	`ONE_TEST
(
REP
, 
	`byã_fûl
());

184 
	`show_ªsu…
("byã fûl", (
buff
Ë* 
REP
);

186 
	`ONE_TEST
(
REP
, 
	`w‹d_fûl
());

187 
	`show_ªsu…
("w‹d fûl", (
buff
Ë* 
REP
);

189 
	`ONE_TEST
(
REP
, 
	`ˇched_byã_fûl
());

190 
	`show_ªsu…
("c. byã fûl", (
buff
Ë* 
REP
);

192 
	`ONE_TEST
(
REP
 * 2, 
	`do_mem˝y
());

193 
	`show_ªsu…
("mem˝y", (
buff
Ë* 
REP
);

195 
	`ONE_TEST
(
REP
 * 2, 
	`byã_˝y
());

196 
	`show_ªsu…
("byã c›y", (
buff
Ë* 
REP
);

198 
	`ONE_TEST
(
REP
 * 2, 
	`w‹d_˝y
());

199 
	`show_ªsu…
("w‹d c›y", (
buff
Ë* 
REP
);

201 
	`ONE_TEST
(
REP
, 
	`w‹d_öc
());

202 
	`show_ªsu…
("w‹d inc", (
buff
Ë* 
REP
);

204 
	`u¶ìp
(200000);

205 
	}
}

207 
	$∑ge_ã°s
(*
buf
)

209 
i
;

211 
	`ONE_TEST
(
REP
, 
	`∑ge_wrôes
(
buf
));

212 
	`show_ªsu…
("∑ge_wrôes", 0x100000 * 
REP
);

214 
	`ONE_TEST
(
REP
, 
	`∑ge_öc
(
buf
));

215 
	`show_ªsu…
("∑ge_öc", 0x100000 * 
REP
);

216 
	}
}

219 
	~<sys/ty≥s.h
>

220 
	~<sys/°©.h
>

221 
	~<f˙é.h
>

222 
	~<sys/mm™.h
>

224 
	$cohîícy_ã°
()

226 vﬁ©ûê*
buff_m≠≥d
;

227 vﬁ©ûê*
buff_vﬁ
;

228 
buff_phys
, 
m≠≥d_phys
, 
Æign
;

229 
buff_m≠≥d_vÆs
[6];

230 
buff_vÆs
[5];

231 
øndom_offs
;

232 
memdev
;

234 
	`§™d
(
	`time
(
NULL
));

236 
buff_phys
 = 
	`w¨m_vút2phys
(
buff_mid
);

237 
Æign
 = 
buff_phys
 & 0xfff;

239 
memdev
 = 
	`›í
("/dev/mem", 
O_RDONLY
 | 
O_SYNC
);

240 i‡(
memdev
 < 0) {

241 
	`≥º‹
("open /dev/mem");

248 
buff_m≠≥d
 = 
	`mm≠
(
NULL
, 0x1000, 
PROT_READ
,

249 
MAP_SHARED
, 
memdev
, 
buff_phys
 & ~0xfff);

250 i‡(
buff_m≠≥d
 =
MAP_FAILED
) {

251 
	`≥º‹
("mmap buff");

254 
buff_m≠≥d
 +
Æign
;

256 
buff_m≠≥d_vÆs
[5] = 
buff_m≠≥d
[0];

257 
m≠≥d_phys
 = 
	`w¨m_vút2phys
((*)
buff_m≠≥d
);

258 i‡(
buff_phys
 !
m≠≥d_phys
)

259 
	`¥ötf
("w¨nög: mm≠Ñeque°ed %08lx, gŸ %08lx\n", 
buff_phys
, 
m≠≥d_phys
);

261 
øndom_offs
 = 
	`ønd
(Ë% (0x1000 - 
Æign
);

263 
buff_vﬁ
 = (vﬁ©ûê*)
buff_mid
;

264 
buff_vÆs
[0] = 
buff_vﬁ
[
øndom_offs
]; 
buff_m≠≥d_vÆs
[0] = 
buff_m≠≥d
[random_offs];

267 
buff_vﬁ
[
øndom_offs
]++;

268 
buff_vÆs
[1] = 
buff_vﬁ
[
øndom_offs
]; 
buff_m≠≥d_vÆs
[1] = 
buff_m≠≥d
[random_offs];

271 
	`w¨m_ˇche_›_ønge
(
WOP_D_CLEAN
, (*)
buff_vﬁ
 + 
øndom_offs
, 32);

272 
buff_vÆs
[2] = 
buff_vﬁ
[
øndom_offs
]; 
buff_m≠≥d_vÆs
[2] = 
buff_m≠≥d
[random_offs];

275 
buff_vﬁ
[
øndom_offs
]++;

276 
buff_vÆs
[3] = 
buff_vﬁ
[
øndom_offs
]; 
buff_m≠≥d_vÆs
[3] = 
buff_m≠≥d
[random_offs];

279 
	`w¨m_ˇche_›_ønge
(
WOP_D_INVALIDATE
, (*)
buff_vﬁ
 + 
øndom_offs
, 32);

280 
buff_vÆs
[4] = 
buff_vﬁ
[
øndom_offs
]; 
buff_m≠≥d_vÆs
[4] = 
buff_m≠≥d
[random_offs];

282 
	`¥ötf
("buf‡i†@ %∞-> %lx, m≠≥d %p,Ñ™dom off£à%x\n", 
buff_vﬁ
, 
buff_phys
,

283 
buff_m≠≥d
, 
øndom_offs
);

284 
	`¥ötf
("vÆ: %02x, mm≠ed: %02x\n", 
buff_vÆs
[0], 
buff_m≠≥d_vÆs
[0]);

286 
	`¥ötf
("incremented:\n");

287 
	`¥ötf
("vÆ: %02x, mm≠ed: %02x\n", 
buff_vÆs
[1], 
buff_m≠≥d_vÆs
[1]);

289 
	`¥ötf
("cleaned:\n");

290 
	`¥ötf
("vÆ: %02x, mm≠ed: %02x\n", 
buff_vÆs
[2], 
buff_m≠≥d_vÆs
[2]);

292 
	`¥ötf
("incremented:\n");

293 
	`¥ötf
("vÆ: %02x, mm≠ed: %02x\n", 
buff_vÆs
[3], 
buff_m≠≥d_vÆs
[3]);

295 
	`¥ötf
("invalidated:\n");

296 
	`¥ötf
("vÆ: %02x, mm≠ed: %02x\n", 
buff_vÆs
[4], 
buff_m≠≥d_vÆs
[4]);

297 
	}
}

299 
	#cohîícy_ã°
()

	)

302 
	$maö
()

304 
fb_fix_s¸ìnöfo
 
fbfix
;

305 *
mm≠_mem
;

306 *
£˘i⁄_mem
;

307 
fbdev
;

308 
i
, 
ªt
;

310 
ªt
 = 
	`w¨m_öô
();

311 i‡(
ªt
 != 0)

313 
	`¥ötf
("init failed.\n");

317 
	`¥ötf
("buff: %∞- %p\n", 
buff
, buff + (buff) - 1);

320 
	`do_mem£t
();

322 
	`¥ötf
("-- default --\n");

323 
	`ã°s
();

325 
	`¥ötf
("--Çcnb --\n");

326 
	`w¨m_ch™ge_cb_ønge
(
WCB_C_BIT
|
WCB_B_BIT
, 0, 
buff
, (buff));

327 
	`ã°s
();

329 
	`¥ötf
("--Çc b --\n");

330 
	`w¨m_ch™ge_cb_ønge
(
WCB_B_BIT
, 1, 
buff
, (buff));

331 
	`ã°s
();

333 
	`¥ötf
("-- cnb --\n");

334 
	`w¨m_ch™ge_cb_ønge
(
WCB_C_BIT
, 1, 
buff
, (buff));

335 
	`w¨m_ch™ge_cb_ønge
(
WCB_B_BIT
, 0, 
buff
, (buff));

336 
	`ã°s
();

339 
	`w¨m_ch™ge_cb_ønge
(
WCB_C_BIT
|
WCB_B_BIT
, 1, 
buff
, (buff));

342 
	`cohîícy_ã°
();

344 
mm≠_mem
 = 
	`mm≠
((*)0x60000000, 0x100000, 
PROT_READ
 | 
PROT_WRITE
,

345 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
, -1, 0);

348 
fbdev
 = 
	`›í
("/dev/fb0", 
O_RDWR
);

349 i‡(
fbdev
 == -1) {

350 
	`≥º‹
("fb open");

351 
out
;

354 
ªt
 = 
	`io˘l
(
fbdev
, 
FBIOGET_FSCREENINFO
, &
fbfix
);

355 i‡(
ªt
 == -1) {

356 
	`≥º‹
("ioctl(fbdev)");

357 
out
;

360 
£˘i⁄_mem
 = (*)0x70000000;

361 
ªt
 = 
	`w¨m_mm≠_£˘i⁄
(
£˘i⁄_mem
, 
fbfix
.
smem_°¨t
, 0x100000,

362 
WCB_C_BIT
|
WCB_B_BIT
);

363 i‡(
ªt
 != 0) {

364 
	`Ârötf
(
°dîr
, "section map failed\n");

365 
out
;

369 
	`mem£t
(
mm≠_mem
, 0, 0x100000);

370 
	`mem£t
(
£˘i⁄_mem
, 0, 0x100000);

372 
	`ONE_TEST
(
REP
, 
	`∑ge_wrôes_ªf
(
mm≠_mem
));

373 
	`show_ªsu…
("∑ge_wr_ªf_m", 0x100000 * 
REP
);

375 
	`ONE_TEST
(
REP
, 
	`∑ge_öc_ªf
(
mm≠_mem
));

376 
	`show_ªsu…
("∑ge_öc_ªf_m", 0x100000 * 
REP
);

378 
	`ONE_TEST
(
REP
, 
	`∑ge_wrôes_ªf
(
£˘i⁄_mem
));

379 
	`show_ªsu…
("∑ge_wr_ªf_s", 0x100000 * 
REP
);

381 
	`ONE_TEST
(
REP
, 
	`∑ge_öc_ªf
(
£˘i⁄_mem
));

382 
	`show_ªsu…
("∑ge_öc_ªf_s", 0x100000 * 
REP
);

384 
	`¥ötf
("==Öages ==\n");

385 
	`∑ge_ã°s
(
mm≠_mem
);

387 
	`¥ötf
("== section ==\n");

388 
	`¥ötf
("-- default --\n");

389 
	`∑ge_ã°s
(
£˘i⁄_mem
);

391 
	`¥ötf
("--Çcnb --\n");

392 
	`w¨m_ch™ge_cb_ønge
(
WCB_C_BIT
|
WCB_B_BIT
, 0, 
£˘i⁄_mem
, 0x100000);

393 
	`∑ge_ã°s
(
£˘i⁄_mem
);

395 
	`¥ötf
("--Çc b --\n");

396 
	`w¨m_ch™ge_cb_ønge
(
WCB_B_BIT
, 1, 
£˘i⁄_mem
, 0x100000);

397 
	`∑ge_ã°s
(
£˘i⁄_mem
);

399 
	`¥ötf
("-- cnb --\n");

400 
	`w¨m_ch™ge_cb_ønge
(
WCB_C_BIT
, 1, 
£˘i⁄_mem
, 0x100000);

401 
	`w¨m_ch™ge_cb_ønge
(
WCB_B_BIT
, 0, 
£˘i⁄_mem
, 0x100000);

402 
	`∑ge_ã°s
(
£˘i⁄_mem
);

404 
	`w¨m_munm≠_£˘i⁄
(
£˘i⁄_mem
, 0x100000);

406 
out
:

407 
	`w¨m_föish
();

410 
	}
}

	@frontend/warm/warm.c

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

33 
	~<sys/ty≥s.h
>

34 
	~<sys/°©.h
>

35 
	~<uni°d.h
>

36 
	~<f˙é.h
>

37 
	~<sys/io˘l.h
>

38 
	~<sys/ut¢ame.h
>

39 
	~<sys/sysˇŒ.h
>

40 
	~<î∫o.h
>

42 
	#WARM_CODE


	)

43 
	~"w¨m.h
"

45 
	#PFX
 "wARM: "

	)

48 
öô_moduÀ
(*, , const *);

49 
dñëe_moduÀ
(const *, );

51 
	gw¨m_fd
 = -1;

52 
	gkî√l_vîsi⁄
;

53 
	gmoduÀ_ö£πed
;

55 
	$sys_ˇcheÊush
(*
°¨t
, *
íd
)

57 #ifde‡
__ARM_EABI__


59 
num
 = 
__ARM_NR_ˇcheÊush
;

60 
	`__asm__
("movÑ0, %0 ;"

64 "swò 0" : : "r" (
°¨t
), "r" (
íd
), "r" (
num
)

68 
	`__asm__
("movÑ0, %0 ;"

71 "swò %2" : : "r" (
°¨t
), "r" (
íd
), "i" 
__ARM_NR_ˇcheÊush


74 
	}
}

78 
	$m™uÆ_ösmod_26
(c⁄° *
‚ame
, c⁄° *
›ts
)

80 
Àn
, 
ªad_Àn
;

81 
ªt
 = -1;

82 *
buff
;

83 
FILE
 *
f
;

85 
f
 = 
	`f›í
(
‚ame
, "rb");

86 i‡(
f
 =
NULL
)

89 
	`f£ek
(
f
, 0, 
SEEK_END
);

90 
Àn
 = 
	`·ñl
(
f
);

91 
	`f£ek
(
f
, 0, 
SEEK_SET
);

93 
buff
 = 
	`mÆloc
(
Àn
);

94 i‡(
buff
 =
NULL
)

95 
Áû0
;

97 
ªad_Àn
 = 
	`‰ód
(
buff
, 1, 
Àn
, 
f
);

98 i‡(
ªad_Àn
 !
Àn
) {

99 
	`Ârötf
(
°dîr
, 
PFX
 "failedÅoÑead module\n");

100 
Áû1
;

103 
ªt
 = 
	`öô_moduÀ
(
buff
, 
Àn
, 
›ts
);

105 
Áû1
:

106 
	`‰ì
(
buff
);

107 
Áû0
:

108 
	`f˛o£
(
f
);

109  
ªt
;

110 
	}
}

112 
	$m™uÆ_rmmod
(c⁄° *
«me
)

114  
	`dñëe_moduÀ
(
«me
, 
O_NONBLOCK
|
O_EXCL
);

115 
	}
}

117 
	$w¨m_öô
()

119 
ut¢ame
 
unm
;

120 
buff1
[32], 
buff2
[128];

121 
ªt
;

123 
	`mem£t
(&
unm
, 0, (unm));

124 
	`u«me
(&
unm
);

126 i‡(
	`°æí
(
unm
.
ªÀa£
) < 3 || unm.release[1] != '.') {

127 
	`Ârötf
(
°dîr
, 
PFX
 "u√x≥˘ed vîsi⁄ såög: %s\n", 
unm
.
ªÀa£
);

128 
Áû
;

130 
kî√l_vîsi⁄
 = ((
unm
.
ªÀa£
[0] - '0') << 4) | (unm.release[2] - '0');

132 
w¨m_fd
 = 
	`›í
("/¥oc/w¨m", 
O_RDWR
);

133 i‡(
w¨m_fd
 >= 0)

136 
	`¢¥ötf
(
buff1
, (buff1), "w¨m_%s.%s", 
unm
.
ªÀa£
, 
kî√l_vîsi⁄
 >= 0x26 ? "ko" : "o");

137 
	`¢¥ötf
(
buff2
, (buff2), "/sbö/ösmod %†vîbo£=1", 
buff1
);

140 
ªt
 = 
	`sy°em
(
buff2
);

141 i‡(
ªt
 != 0) {

142 
	`Ârötf
(
°dîr
, 
PFX
 "sy°em/ösmod faûed: %d %d\n", 
ªt
, 
î∫o
);

143 i‡(
kî√l_vîsi⁄
 >= 0x26) {

144 
ªt
 = 
	`m™uÆ_ösmod_26
(
buff1
, "verbose=1");

145 i‡(
ªt
 != 0)

146 
	`Ârötf
(
°dîr
, 
PFX
 "m™uÆ insmodálsÿÁûed: %d\n", 
ªt
);

149 i‡(
ªt
 == 0)

150 
moduÀ_ö£πed
 = 1;

152 
w¨m_fd
 = 
	`›í
("/¥oc/w¨m", 
O_RDWR
);

153 i‡(
w¨m_fd
 >= 0)

156 
Áû
:

157 
	`Ârötf
(
°dîr
, 
PFX
 "can't init,áctingás sys_cacheflush wrapper\n");

159 
	}
}

161 
	$w¨m_föish
()

163 
«me
[32], 
cmd
[64];

164 
ªt
;

166 i‡(
w¨m_fd
 < 0)

169 
	`˛o£
(
w¨m_fd
);

170 
w¨m_fd
 = -1;

172 i‡(
moduÀ_ö£πed
) {

173 i‡(
kî√l_vîsi⁄
 < 0x26) {

174 
ut¢ame
 
unm
;

175 
	`mem£t
(&
unm
, 0, (unm));

176 
	`u«me
(&
unm
);

177 
	`¢¥ötf
(
«me
, “ame), "w¨m_%s", 
unm
.
ªÀa£
);

180 
	`°r˝y
(
«me
, "warm");

182 
	`¢¥ötf
(
cmd
, (cmd), "/sbö/rmmod %s", 
«me
);

183 
ªt
 = 
	`sy°em
(
cmd
);

184 i‡(
ªt
 != 0) {

185 
	`Ârötf
(
°dîr
, 
PFX
 "sy°em/rmmod faûed: %d %d\n", 
ªt
, 
î∫o
);

186 
	`m™uÆ_rmmod
(
«me
);

189 
	}
}

191 
	$w¨m_ˇche_›_ønge
(
›
, *
addr
, 
size
)

193 
w¨m_ˇche_›
 
w›
;

194 
ªt
;

196 i‡(
w¨m_fd
 < 0) {

198 
	`sys_ˇcheÊush
(
addr
, (*Ôdd∏+ 
size
);

202 
w›
.
›s
 = 
›
;

203 
w›
.
addr
 = ()addr;

204 
w›
.
size
 = size;

206 
ªt
 = 
	`io˘l
(
w¨m_fd
, 
WARMC_CACHE_OP
, &
w›
);

207 i‡(
ªt
 != 0) {

208 
	`≥º‹
(
PFX
 "WARMC_CACHE_OP failed");

213 
	}
}

215 
	$w¨m_ˇche_›_Æl
(
›
)

217  
	`w¨m_ˇche_›_ønge
(
›
, 
NULL
, ()-1);

218 
	}
}

220 
	$w¨m_ch™ge_cb_ønge
(
cb
, 
is_£t
, *
addr
, 
size
)

222 
w¨m_ch™ge_cb
 
ccb
;

223 
ªt
;

225 i‡(
w¨m_fd
 < 0)

228 
ccb
.
addr
 = ()addr;

229 
ccb
.
size
 = size;

230 
ccb
.
cb
 = cb;

231 
ccb
.
is_£t
 = is_set;

233 
ªt
 = 
	`io˘l
(
w¨m_fd
, 
WARMC_CHANGE_CB
, &
ccb
);

234 i‡(
ªt
 != 0) {

235 
	`≥º‹
(
PFX
 "WARMC_CHANGE_CB failed");

240 
	}
}

242 
	$w¨m_ch™ge_cb_uµî
(
cb
, 
is_£t
)

244  
	`w¨m_ch™ge_cb_ønge
(
cb
, 
is_£t
, 0, 0);

245 
	}
}

247 
	$w¨m_vút2phys
(c⁄° *
±r
)

249 
±rio
;

250 
ªt
;

252 
±rio
 = ()
±r
;

253 
ªt
 = 
	`io˘l
(
w¨m_fd
, 
WARMC_VIRT2PHYS
, &
±rio
);

254 i‡(
ªt
 != 0) {

255 
	`≥º‹
(
PFX
 "WARMC_VIRT2PHYS failed");

259  
±rio
;

260 
	}
}

262 
	$w¨m_do_£˘i⁄
(*
vút_addr
, 
phys_addr
,

263 
size
, 
cb
, 
is_unm≠
)

265 
w¨m_m≠_›
 
m›
;

266 
vaddr
;

267 
ªt
;

269 i‡(
w¨m_fd
 < 0)

272 
vaddr
 = ()
vút_addr
;

273 i‡(
vaddr
 & 0xfffff) {

274 
	`Ârötf
(
°dîr
, 
PFX
 "virt_addr is unaligned\n");

277 i‡(
phys_addr
 & 0xfffff) {

278 
	`Ârötf
(
°dîr
, 
PFX
 "phys_addr is unaligned\n");

282 
m›
.
vút_addr
 = 
vaddr
;

283 
m›
.
phys_addr
 =Öhys_addr;

284 
m›
.
size
 = size;

285 
m›
.
cb
 = cb;

286 
m›
.
is_unm≠
 = is_unmap;

288 
ªt
 = 
	`io˘l
(
w¨m_fd
, 
WARMC_MMAP
, &
m›
);

289 i‡(
ªt
 != 0) {

290 
	`≥º‹
(
PFX
 "WARMC_MMAP failed");

295 
	}
}

297 
	$w¨m_mm≠_£˘i⁄
(*
vút_addr
, 
phys_addr
,

298 
size
, 
cb
)

300  
	`w¨m_do_£˘i⁄
(
vút_addr
, 
phys_addr
, 
size
, 
cb
, 0);

301 
	}
}

303 
	$w¨m_munm≠_£˘i⁄
(*
vút_addr
, 
size
)

305  
	`w¨m_do_£˘i⁄
(
vút_addr
, 0, 
size
, 0, 1);

306 
	}
}

	@frontend/warm/warm.h

29 #i‚de‡
__WARM_H__


30 
	#__WARM_H__
 1

	)

38 
	#WOP_D_CLEAN
 (1 << 0)

	)

39 
	#WOP_D_INVALIDATE
 (1 << 1)

	)

40 
	#WOP_I_INVALIDATE
 (1 << 2)

	)

46 
	#WCB_C_BIT
 (1 << 0)

	)

47 
	#WCB_B_BIT
 (1 << 1)

	)

49 #i‚de‡
__ASSEMBLER__


51 #ifde‡
__˝lu•lus


56 
w¨m_öô
();

58 
w¨m_ˇche_›_ønge
(
›s
, *
vút_addr
, 
size
);

59 
w¨m_ˇche_›_Æl
(
›s
);

61 
w¨m_ch™ge_cb_uµî
(
cb
, 
is_£t
);

62 
w¨m_ch™ge_cb_ønge
(
cb
, 
is_£t
, *
vút_addr
, 
size
);

64 
w¨m_vút2phys
(c⁄° *
±r
);

66 
w¨m_mm≠_£˘i⁄
(*
vút_addr
, 
phys_addr
,

67 
size
, 
cb
);

68 
w¨m_munm≠_£˘i⁄
(*
vút_addr
, 
size
);

70 
w¨m_föish
();

72 #ifde‡
__˝lu•lus


77 #ifde‡
WARM_CODE


79 
	~<löux/io˘l.h
>

81 
	#WARM_IOCTL_BASE
 'A'

	)

83 
	sw¨m_ˇche_›


85 
addr
;

86 
size
;

87 
›s
;

90 
	sw¨m_ch™ge_cb


92 
addr
;

93 
size
;

94 
cb
;

95 
is_£t
;

98 
	sw¨m_m≠_›


100 
vút_addr
;

101 
phys_addr
;

102 
size
;

103 
cb
;

104 
is_unm≠
;

107 
	#WARMC_CACHE_OP
 
	`_IOW
(
WARM_IOCTL_BASE
, 0, 
w¨m_ˇche_›
)

	)

108 
	#WARMC_CHANGE_CB
 
	`_IOW
(
WARM_IOCTL_BASE
, 1, 
w¨m_ch™ge_cb
)

	)

109 
	#WARMC_VIRT2PHYS
 
	`_IOWR
(
WARM_IOCTL_BASE
, 2, )

	)

110 
	#WARMC_MMAP
 
	`_IOW
(
WARM_IOCTL_BASE
, 3, 
w¨m_m≠_›
)

	)

	@include/arm_features.h

1 #i‚de‡
__ARM_FEATURES_H__


2 
	#__ARM_FEATURES_H__


	)

4 #i‡
deföed
(
__ARM_ARCH_8A__
)

6 
	#HAVE_ARMV8


	)

7 
	#HAVE_ARMV7


	)

8 
	#HAVE_ARMV6


	)

9 
	#HAVE_ARMV5


	)

11 #ñi‡
deföed
(
__ARM_ARCH_7__
Ë|| deföed(
__ARM_ARCH_7A__
) \

12 || 
deföed
(
__ARM_ARCH_7R__
Ë|| deföed(
__ARM_ARCH_7M__
) \

13 || 
deföed
(
__ARM_ARCH_7EM__
Ë|| 
	$deföed
(
__ARM_ARCH_7S__
)

15 
	#HAVE_ARMV7


	)

16 
	#HAVE_ARMV6


	)

17 
	#HAVE_ARMV5


	)

19 #ñi‡
	`deföed
(
__ARM_ARCH_6__
Ë|| deföed(
__ARM_ARCH_6J__
) \

20 || 
	`deföed
(
__ARM_ARCH_6K__
Ë|| deföed(
__ARM_ARCH_6Z__
) \

21 || 
	`deföed
(
__ARM_ARCH_6ZK__
Ë|| deföed(
__ARM_ARCH_6T2__
) \

22 || 
	$deföed
(
__ARM_ARCH_6M__
)

24 
	#HAVE_ARMV6


	)

25 
	#HAVE_ARMV5


	)

27 #ñi‡
	`deföed
(
__ARM_ARCH_5__
Ë|| deföed(
__ARM_ARCH_5E__
) \

28 || 
	`deföed
(
__ARM_ARCH_5T__
Ë|| deföed(
__ARM_ARCH_5TE__
Ë|| 
	$deföed
(
__ARM_ARCH_5TEJ__
)

30 
	#HAVE_ARMV5


	)

37 #i‚de‡
__MACH__


38 
	#ESYM
(
«me
Ë
	)
name

40 
	#FUNCTION
(
«me
) \

41 .
globl
 
«me
; \

42 .
ty≥
 
«me
, %
fun˘i⁄
; \

43 
«me


	)

45 
	#EXTRA_UNSAVED_REGS


	)

48 
	#ESYM
(
«me
Ë
_
##
	)
name

50 
	#FUNCTION
(
«me
) \

51 .
globl
 
	`ESYM
(
«me
); \

52 
«me
: \

53 
	`ESYM
(
«me
)

	)

56 
	#EXTRA_UNSAVED_REGS
 
r7
, 
r9
,

	)

	@include/config.h

1 
	#MAXPATHLEN
 256

	)

2 
	#PACKAGE_VERSION
 "1.9"

	)

	@include/pcnt.h

2 
	epcou¡îs
 {

3 
	mPCNT_ALL
,

4 
	mPCNT_GPU
,

5 
	mPCNT_SPU
,

6 
	mPCNT_BLIT
,

7 
	mPCNT_GTE
,

8 
	mPCNT_TEST
,

9 
	mPCNT_CNT


12 #ifde‡
PCNT


14 #i‡
deföed
(
__ARM_ARCH_7A__
Ë|| deföed(
ARM1176
)

15 
	#PCNT_DIV
 1000

	)

17 
	~<sys/time.h
>

18 
	#PCNT_DIV
 1

	)

21 c⁄° *
	gp˙t_«mes
[
PCNT_CNT
] = { "", "gpu", "spu", "blit", "gte", "test" };

23 
	#PCNT_FRAMES
 10

	)

25 
pcou¡îs
[
PCNT_CNT
];

26 
pcou¡î_°¨ts
[
PCNT_CNT
];

28 
	#p˙t_°¨t
(
id
) \

29 
pcou¡î_°¨ts
[
id
] = 
	`p˙t_gë
()

	)

31 
	#p˙t_íd
(
id
) \

32 
pcou¡îs
[
id
] +
	`p˙t_gë
(Ë- 
pcou¡î_°¨ts
[id]

	)

34 
p˙t_hook_∂ugös
();

36 
ölöe
 
	$p˙t_¥öt
(
Âs
)

38 
¥öt_cou¡î
;

39 
tŸÆ
, 
ªm
;

40 
i
;

42 
i
 = 0; i < 
PCNT_CNT
; i++)

43 
pcou¡îs
[
i
] /
PCNT_DIV
 * 
PCNT_FRAMES
;

45 
ªm
 = 
tŸÆ
 = 
pcou¡îs
[
PCNT_ALL
];

46 
i
 = 1; i < 
PCNT_CNT
; i++)

47 
ªm
 -
pcou¡îs
[
i
];

48 i‡(!
tŸÆ
)

49 
tŸÆ
++;

51 i‡(--
¥öt_cou¡î
 < 0) {

52 
	`¥ötf
(" ");

53 
i
 = 1; i < 
PCNT_CNT
; i++)

54 
	`¥ötf
("%5†", 
p˙t_«mes
[
i
]);

55 
	`¥ötf
("%5s\n", "rem");

56 
¥öt_cou¡î
 = 30;

59 
	`¥ötf
("%4.1‡", 
Âs
);

61 
pcou¡îs_Æl
[
PCNT_CNT
+1];

62 
pcou¡î_ßm∂es
;

63 
pcou¡î_ßm∂es
++;

65 
i
 = 1; i < 
PCNT_CNT
; i++) {

66 
pcou¡îs_Æl
[
i
] +
pcou¡îs
[i];

67 
	`¥ötf
("%5.0‡", 
pcou¡îs_Æl
[
i
] / 
pcou¡î_ßm∂es
);

69 
pcou¡îs_Æl
[
i
] +
ªm
;

70 
	`¥ötf
("%5.0f\n", 
pcou¡îs_Æl
[
i
] / 
pcou¡î_ßm∂es
);

72 
i
 = 1; i < 
PCNT_CNT
; i++)

73 
	`¥ötf
("%5u ", 
pcou¡îs
[
i
]);

74 
	`¥ötf
("%5u (", 
ªm
);

75 
i
 = 1; i < 
PCNT_CNT
; i++)

76 
	`¥ötf
("%2u ", 
pcou¡îs
[
i
] * 100 / 
tŸÆ
);

77 
	`¥ötf
("%2uË%u\n", 
ªm
 * 100 / 
tŸÆ
,Åotal);

79 
	`mem£t
(
pcou¡îs
, 0, (pcounters));

80 
	}
}

82 
ölöe
 
	$p˙t_gë
()

84 
vÆ
;

85 #ifde‡
__ARM_ARCH_7A__


86 
__asm__
 volatile("mrcÖ15, 0, %0, c9, c13, 0"

87 : "Ù"(
vÆ
));

88 #ñi‡
	`deföed
(
ARM1176
)

89 
__asm__
 volatile("mrcÖ15, 0, %0, c15, c12, 1"

90 : "Ù"(
vÆ
));

96 
timevÆ
 
tv
;

97 
	`gëtimeofday
(&
tv
, 
NULL
);

98 
vÆ
 = 
tv
.
tv_£c
 * 1000000 +Åv.
tv_u£c
;

100  
vÆ
;

101 
	}
}

103 
ölöe
 
	$p˙t_öô
()

105 #ifde‡
__ARM_ARCH_7A__


106 
v
;

107 
asm
 vﬁ©ûe("mr¯p15, 0, %0, c9, c12, 0" : "Ù"(
v
));

108 
v
 |= 5;

109 
v
 &= ~8;

110 
asm
 vﬁ©ûe("m¸Ö15, 0, %0, c9, c12, 0" :: "r"(
v
));

112 
asm
 volatile("mcrÖ15, 0, %0, c9, c12, 1" :: "r"(1<<31));

113 #ñi‡
	`deföed
(
ARM1176
)

114 
v
;

115 
asm
 vﬁ©ûe("mr¯p15, 0, %0, c15, c12, 0" : "Ù"(
v
));

116 
v
 |= 5;

117 
v
 &= ~8;

118 
asm
 vﬁ©ûe("m¸Ö15, 0, %0, c15, c12, 0" :: "r"(
v
));

120 
	}
}

122 
p˙t_gã_°¨t
(
›
);

123 
p˙t_gã_íd
(
›
);

127 
	#p˙t_°¨t
(
id
)

	)

128 
	#p˙t_íd
(
id
)

	)

129 
	#p˙t_hook_∂ugös
()

	)

130 
	#p˙t_¥öt
(
Âs
)

	)

	@include/psemu_plugin_defs.h

1 #i‚de‡
_PSEMU_PLUGIN_DEFS_H


2 
	#_PSEMU_PLUGIN_DEFS_H


	)

4 #ifde‡
__˝lu•lus


9 
	#_PPDK_HEADER_VERSION
 3

	)

11 
	#PLUGIN_VERSION
 1

	)

14 
	#PSE_LT_CDR
 1

	)

15 
	#PSE_LT_GPU
 2

	)

16 
	#PSE_LT_SPU
 4

	)

17 
	#PSE_LT_PAD
 8

	)

18 
	#PSE_LT_NET
 16

	)

21 
	#PSE_ERR_SUCCESS
 0

22 
	#PSE_ERR_FATAL
 -1

23 

	)

28 
	#PSE_INIT_ERR_SUCCESS
 0

29 
	#PSE_INIT_ERR_NOTCONFIGURED
 -2

30 
	#PSE_INIT_ERR_NOHARDWARE
 -3

31 

	)

37 
	#PSE_GPU_ERR_SUCCESS
 0

	)

41 
	#PSE_GPU_ERR
 -20

	)

45 
	#PSE_GPU_ERR_NOTCONFIGURED
 
PSE_GPU_ERR
 - 1

	)

47 
	#PSE_GPU_ERR_INIT
 
PSE_GPU_ERR
 - 2

	)

51 
	#PSE_GPU_WARN
 20

	)

57 
Êags
;

58 
°©us
;

59 * 
wödow
;

60 
ª£rved
[100];

61 } 
	tgpuQuîyS
;

65 
	#PSE_GPU_FLAGS_FULLSCREEN
 1

66 
	#PSE_GPU_FLAGS_WINDOWED
 2

67 

	)

69 
	#PSE_GPU_STATUS_WINDOWWRONG
 1

70 

	)

79 
	#PSE_CDR_ERR_SUCCESS
 0

	)

82 
	#PSE_CDR_ERR_FAILURE
 -1

	)

85 
	#PSE_CDR_ERR
 -40

	)

87 
	#PSE_CDR_ERR_NOTCONFIGURED
 
PSE_CDR_ERR
 - 0

	)

89 
	#PSE_CDR_ERR_NOREAD
 
PSE_CDR_ERR
 - 1

	)

92 
	#PSE_CDR_WARN
 40

	)

95 
	#PSE_CDR_WARN_LAMECD
 
PSE_CDR_WARN
 + 0

	)

105 
	#PSE_SPU_ERR_SUCCESS
 0

	)

109 
	#PSE_SPU_ERR
 -60

	)

112 
	#PSE_SPU_ERR_NOTCONFIGURED
 
PSE_SPU_ERR
 - 1

	)

114 
	#PSE_SPU_ERR_INIT
 
PSE_SPU_ERR
 - 2

	)

119 
	#PSE_SPU_WARN
 60

	)

150 
	#PSE_PAD_USE_PORT1
 1

	)

152 
	#PSE_PAD_USE_PORT2
 2

	)

157 
	#PSE_PAD_TYPE_MOUSE
 1

	)

159 
	#PSE_PAD_TYPE_NEGCON
 2

	)

161 
	#PSE_PAD_TYPE_GUN
 3

	)

163 
	#PSE_PAD_TYPE_STANDARD
 4

	)

165 
	#PSE_PAD_TYPE_ANALOGJOY
 5

	)

167 
	#PSE_PAD_TYPE_GUNCON
 6

	)

169 
	#PSE_PAD_TYPE_ANALOGPAD
 7

	)

173 
	#PSE_PAD_ERR_SUCCESS
 0

	)

175 
	#PSE_PAD_ERR_FAILURE
 -1

	)

180 
	#PSE_PAD_ERR
 -80

	)

182 
	#PSE_PAD_ERR_NOTCONFIGURED
 
PSE_PAD_ERR
 - 1

	)

184 
	#PSE_PAD_ERR_INIT
 
PSE_PAD_ERR
 - 2

	)

189 
	#PSE_PAD_WARN
 80

	)

195 
c⁄åﬁÀrTy≥
;

198 
buâ⁄Sètus
;

202 
rightJoyX
, 
rightJoyY
, 
À·JoyX
, 
À·JoyY
;

206 
moveX
, 
moveY
;

208 
Vib
[2];

209 
VibF
[2];

211 
ª£rved
[87];

213 } 
	tPadD©aS
;

219 
	#PSE_NET_BLOCKING
 0x00000000

	)

220 
	#PSE_NET_NONBLOCKING
 0x00000001

	)

285 #ifde‡
__˝lu•lus


	@libpcsxcore/cdriso.c

22 
	~"psxcomm⁄.h
"

23 
	~"∂ugös.h
"

24 
	~"cdrom.h
"

25 
	~"cdriso.h
"

26 
	~"µf.h
"

28 #ifde‡
_WIN32


29 
	#WIN32_LEAN_AND_MEAN


	)

30 
	~<¥o˚ss.h
>

31 
	~<wödows.h
>

32 
	#°rˇ£cmp
 
_°ricmp


	)

33 
	#u¶ìp
(
x
Ë
	`SÀï
((xË/ 1000)

	)

35 
	~<±hªad.h
>

36 
	~<sys/time.h
>

37 
	~<uni°d.h
>

39 
	~<î∫o.h
>

40 
	~<zlib.h
>

42 
	gcdrIsoMu…idiskCou¡
;

43 
	gcdrIsoMu…idiskSñe˘
;

45 
FILE
 *
	gcdH™dÀ
 = 
NULL
;

46 
FILE
 *
	gcddaH™dÀ
 = 
NULL
;

47 
FILE
 *
	gsubH™dÀ
 = 
NULL
;

49 
boﬁón
 
	gsubCh™Mixed
 = 
FALSE
;

50 
boﬁón
 
	gsubCh™Raw
 = 
FALSE
;

51 
boﬁón
 
	gsubCh™Missög
 = 
FALSE
;

53 
boﬁón
 
	gmu…ifûe
 = 
FALSE
;

55 
	gcdbuf„r
[
CD_FRAMESIZE_RAW
];

56 
	gsubbuf„r
[
SUB_FRAMESIZE
];

58 
	g¢dbuf„r
[
CD_FRAMESIZE_RAW
 * 10];

60 
	#CDDA_FRAMETIME
 (1000 * ((
¢dbuf„r
Ë/ 
CD_FRAMESIZE_RAW
Ë/ 75)

	)

62 #ifde‡
_WIN32


63 
HANDLE
 
	gthªadid
;

65 
±hªad_t
 
	gthªadid
;

67 
	göôül_off£t
 = 0;

68 
boﬁón
 
	g∂ayög
 = 
FALSE
;

69 
boﬁón
 
	gcddaBigEndün
 = 
FALSE
;

71 
	gcdda_cur_£˘‹
;

72 
	gcdda_fú°_£˘‹
;

73 
	gcdda_fûe_off£t
;

78 
	g¥eg≠Off£t
;

80 
	#cddaCurPos
 
cdda_cur_£˘‹


	)

84 
	mbuff_øw
[16][
CD_FRAMESIZE_RAW
];

85 
	mbuff_com¥es£d
[
CD_FRAMESIZE_RAW
 * 16 + 100];

86 *
	mödex_èbÀ
;

87 
	mödex_Àn
;

88 
	mblock_shi·
;

89 
	mcuºít_block
;

90 
	m£˘‹_ö_blk
;

91 } *
	gcom¥_img
;

93 (*
cdimg_ªad_func
)(
FILE
 *
f
, 
ba£
, *
de°
, 
£˘‹
);

95 * 
CALLBACK
 
	`CDR__gëDriveLëãr
();

96 
CALLBACK
 
	`CDR__c⁄figuª
();

97 
CALLBACK
 
	`CDR__ã°
();

98 
CALLBACK
 
	`CDR__about
();

99 
CALLBACK
 
	`CDR__£tfûíame
(*
fûíame
);

100 
CALLBACK
 
	`CDR__gëSètus
(
CdrSèt
 *
°©
);

102 
	`DecodeRawSubD©a
();

104 
	såacköfo
 {

105 íum {
DATA
=1, 
CDDA
} 
ty≥
;

106 
°¨t
[3];

107 
Àngth
[3];

108 
FILE
 *
h™dÀ
;

109 
°¨t_off£t
;

112 
	#MAXTRACKS
 100

	)

114 
numåacks
 = 0;

115 
åacköfo
 
ti
[
MAXTRACKS
];

118 
	$msf2£c
(*
msf
) {

119  ((
msf
[0] * 60 + msf[1]) * 75) + msf[2];

120 
	}
}

122 
	$£c2msf
(
s
, *
msf
) {

123 
msf
[0] = 
s
 / 75 / 60;

124 
s
 = s - 
msf
[0] * 75 * 60;

125 
msf
[1] = 
s
 / 75;

126 
s
 = s - 
msf
[1] * 75;

127 
msf
[2] = 
s
;

128 
	}
}

131 
	$tok2msf
(*
time
, *
msf
) {

132 *
tokí
;

134 
tokí
 = 
	`°πok
(
time
, ":");

135 i‡(
tokí
) {

136 
msf
[0] = 
	`©oi
(
tokí
);

139 
msf
[0] = 0;

142 
tokí
 = 
	`°πok
(
NULL
, ":");

143 i‡(
tokí
) {

144 
msf
[1] = 
	`©oi
(
tokí
);

147 
msf
[1] = 0;

150 
tokí
 = 
	`°πok
(
NULL
, ":");

151 i‡(
tokí
) {

152 
msf
[2] = 
	`©oi
(
tokí
);

155 
msf
[2] = 0;

157 
	}
}

159 #i‚de‡
_WIN32


160 
	$GëTickCou¡
() {

161 
time_t
 
öôül_time
 = 0;

162 
timevÆ
 
now
;

164 
	`gëtimeofday
(&
now
, 
NULL
);

166 i‡(
öôül_time
 == 0) {

167 
öôül_time
 = 
now
.
tv_£c
;

170  (
now
.
tv_£c
 - 
öôül_time
Ë* 1000L +Çow.
tv_u£c
 / 1000L;

171 
	}
}

175 #ifde‡
_WIN32


176 
	$∂aythªad
(*
∑øm
)

178 *
	$∂aythªad
(*
∑øm
)

181 
o¶ìp
, 
d
, 
t
, 
i
, 
s
;

182 
tmp
;

183 
ªt
 = 0, 
£˘‹_offs
;

185 
t
 = 
	`GëTickCou¡
();

187 
∂ayög
) {

188 
s
 = 0;

189 
i
 = 0; i < (
¢dbuf„r
Ë/ 
CD_FRAMESIZE_RAW
; i++) {

190 
£˘‹_offs
 = 
cdda_cur_£˘‹
 - 
cdda_fú°_£˘‹
;

191 i‡(
£˘‹_offs
 < 0) {

192 
d
 = 
CD_FRAMESIZE_RAW
;

193 
	`mem£t
(
¢dbuf„r
 + 
s
, 0, 
d
);

196 
d
 = 
	`cdimg_ªad_func
(
cddaH™dÀ
, 
cdda_fûe_off£t
,

197 
¢dbuf„r
 + 
s
, 
£˘‹_offs
);

198 i‡(
d
 < 
CD_FRAMESIZE_RAW
)

202 
s
 +
d
;

203 
cdda_cur_£˘‹
++;

206 i‡(
s
 == 0) {

207 
∂ayög
 = 
FALSE
;

208 
öôül_off£t
 = 0;

212 i‡(!
cdr
.
Muãd
 && 
∂ayög
) {

213 i‡(
cddaBigEndün
) {

214 
i
 = 0; i < 
s
 / 2; i++) {

215 
tmp
 = 
¢dbuf„r
[
i
 * 2];

216 
¢dbuf„r
[
i
 * 2] = sndbuffer[i * 2 + 1];

217 
¢dbuf„r
[
i
 * 2 + 1] = 
tmp
;

224 
ªt
 = 
	`SPU_∂ayCDDAch™√l
((*)
¢dbuf„r
, 
s
);

225 i‡(
ªt
 == 0x7761)

226 
	`u¶ìp
(6 * 1000);

227 } 
ªt
 =0x7761 && 
∂ayög
);

230 i‡(
ªt
 != 0x676f) {

232 
now
;

235 
°›
;

236 
°›
 && 
∂ayög
)

237 
	`u¶ìp
(10000);

239 
now
 = 
	`GëTickCou¡
();

240 
o¶ìp
 = 
t
 - 
now
;

241 i‡(
o¶ìp
 <= 0) {

242 
o¶ìp
 = 1;

243 
t
 = 
now
;

245 i‡(
o¶ìp
 > 
CDDA_FRAMETIME
) {

246 
o¶ìp
 = 
CDDA_FRAMETIME
;

247 
t
 = 
now
;

250 
	`u¶ìp
(
o¶ìp
 * 1000);

251 
t
 +
CDDA_FRAMETIME
;

256 #ifde‡
_WIN32


257 
	`_ídthªad
();

259 
	`±hªad_exô
(0);

260  
NULL
;

262 
	}
}

265 
	$°›CDDA
() {

266 i‡(!
∂ayög
) {

270 
∂ayög
 = 
FALSE
;

271 #ifde‡
_WIN32


272 
	`WaôF‹SögÀObje˘
(
thªadid
, 
INFINITE
);

274 
	`±hªad_joö
(
thªadid
, 
NULL
);

276 
	}
}

279 
	$°¨tCDDA
() {

280 i‡(
∂ayög
) {

281 
	`°›CDDA
();

284 
∂ayög
 = 
TRUE
;

286 #ifde‡
_WIN32


287 
thªadid
 = (
HANDLE
)
	`_begöthªad
(
∂aythªad
, 0, 
NULL
);

289 
	`±hªad_¸óã
(&
thªadid
, 
NULL
, 
∂aythªad
, NULL);

291 
	}
}

295 
	$∑r£toc
(c⁄° *
isofûe
) {

296 
to˙ame
[
MAXPATHLEN
];

297 
FILE
 *
fi
;

298 
löebuf
[256], 
tmp
[256], 
«me
[256];

299 *
tokí
;

300 
time
[20], 
time2
[20];

301 
t
, 
£˘‹_offs
, 
£˘‹_size
;

302 
cuºít_zîo_g≠
 = 0;

304 
numåacks
 = 0;

307 
	`°∫˝y
(
to˙ame
, 
isofûe
, (tocname));

308 
to˙ame
[
MAXPATHLEN
 - 1] = '\0';

309 i‡(
	`°æí
(
to˙ame
) >= 4) {

310 
	`°r˝y
(
to˙ame
 + 
	`°æí
(tocname) - 4, ".toc");

316 i‡((
fi
 = 
	`f›í
(
to˙ame
, "r")Ë=
NULL
) {

318 
	`°r˝y
(
to˙ame
 + 
	`°æí
(tocname) - 4, ".cue");

319 i‡((
fi
 = 
	`f›í
(
to˙ame
, "r")Ë=
NULL
) {

321 
	`°r˝y
(
to˙ame
, 
isofûe
);

322 
t
 = 
	`°æí
(
to˙ame
);

323 i‡(
t
 >8 && 
	`°rcmp
(
to˙ame
 +Å - 8, ".toc.bin") == 0) {

324 
to˙ame
[
t
 - 4] = '\0';

325 i‡((
fi
 = 
	`f›í
(
to˙ame
, "r")Ë=
NULL
) {

334 
	`fgës
(
löebuf
, ÷öebuf), 
fi
);

335 
tokí
 = 
	`°πok
(
löebuf
, " ");

336 i‡(
tokí
 && 
	`°∫cmp
—okí, "CD", 2Ë!0 && 
	`°rcmp
(token, "CATALOG") != 0) {

337 
	`f˛o£
(
fi
);

340 
	`f£ek
(
fi
, 0, 
SEEK_SET
);

343 
	`mem£t
(&
ti
, 0, (ti));

344 
cddaBigEndün
 = 
TRUE
;

346 
£˘‹_size
 = 
CD_FRAMESIZE_RAW
;

347 
£˘‹_offs
 = 2 * 75;

350 
	`fgës
(
löebuf
, ÷öebuf), 
fi
Ë!
NULL
) {

352 
	`°∫˝y
(
tmp
, 
löebuf
, (linebuf));

353 
tokí
 = 
	`°πok
(
tmp
, " ");

355 i‡(
tokí
 =
NULL
) ;

357 i‡(!
	`°rcmp
(
tokí
, "TRACK")) {

358 
£˘‹_offs
 +
cuºít_zîo_g≠
;

359 
cuºít_zîo_g≠
 = 0;

362 
tokí
 = 
	`°πok
(
NULL
, " ");

363 
numåacks
++;

365 i‡(!
	`°∫cmp
(
tokí
, "MODE2_RAW", 9)) {

366 
ti
[
numåacks
].
ty≥
 = 
DATA
;

367 
	`£c2msf
(2 * 75, 
ti
[
numåacks
].
°¨t
);

370 
tokí
 = 
	`°πok
(
NULL
, " ");

371 i‡(
tokí
 !
NULL
 && !
	`°∫cmp
(token, "RW", 2)) {

372 
£˘‹_size
 = 
CD_FRAMESIZE_RAW
 + 
SUB_FRAMESIZE
;

373 
subCh™Mixed
 = 
TRUE
;

374 i‡(!
	`°∫cmp
(
tokí
, "RW_RAW", 6))

375 
subCh™Raw
 = 
TRUE
;

378 i‡(!
	`°∫cmp
(
tokí
, "AUDIO", 5)) {

379 
ti
[
numåacks
].
ty≥
 = 
CDDA
;

382 i‡(!
	`°rcmp
(
tokí
, "DATAFILE")) {

383 i‡(
ti
[
numåacks
].
ty≥
 =
CDDA
) {

384 
	`ssˇnf
(
löebuf
, "DATAFILE \"%[^\"]\" #%d %8s", 
«me
, &
t
, 
time2
);

385 
ti
[
numåacks
].
°¨t_off£t
 = 
t
;

386 
t
 =Å / 
£˘‹_size
 + 
£˘‹_offs
;

387 
	`£c2msf
(
t
, (*)&
ti
[
numåacks
].
°¨t
);

388 
	`tok2msf
((*)&
time2
, (*)&
ti
[
numåacks
].
Àngth
);

391 
	`ssˇnf
(
löebuf
, "DATAFILE \"%[^\"]\" %8s", 
«me
, 
time
);

392 
	`tok2msf
((*)&
time
, (*)&
ti
[
numåacks
].
Àngth
);

395 i‡(!
	`°rcmp
(
tokí
, "FILE")) {

396 
	`ssˇnf
(
löebuf
, "FILE \"%[^\"]\" #%d %8†%8s", 
«me
, &
t
, 
time
, 
time2
);

397 
	`tok2msf
((*)&
time
, (*)&
ti
[
numåacks
].
°¨t
);

398 
t
 +
	`msf2£c
(
ti
[
numåacks
].
°¨t
Ë* 
£˘‹_size
;

399 
ti
[
numåacks
].
°¨t_off£t
 = 
t
;

400 
t
 =Å / 
£˘‹_size
 + 
£˘‹_offs
;

401 
	`£c2msf
(
t
, (*)&
ti
[
numåacks
].
°¨t
);

402 
	`tok2msf
((*)&
time2
, (*)&
ti
[
numåacks
].
Àngth
);

404 i‡(!
	`°rcmp
(
tokí
, "ZERO") || !strcmp(token, "SILENCE")) {

406 
tokí
 !
NULL
) {

407 
tokí
 = 
	`°πok
(
NULL
, " ");

408 i‡(
	`°rchr
(
tokí
, ':'Ë!
NULL
)

411 i‡(
tokí
 !
NULL
) {

412 
	`tok2msf
(
tokí
, 
tmp
);

413 
cuºít_zîo_g≠
 = 
	`msf2£c
(
tmp
);

415 i‡(
numåacks
 > 1) {

416 
t
 = 
ti
[
numåacks
 - 1].
°¨t_off£t
;

417 
t
 /
£˘‹_size
;

418 
¥eg≠Off£t
 = 
t
 + 
	`msf2£c
(
ti
[
numåacks
 - 1].
Àngth
);

421 i‡(!
	`°rcmp
(
tokí
, "START")) {

422 
tokí
 = 
	`°πok
(
NULL
, " ");

423 i‡(
tokí
 !
NULL
 && 
	`°rchr
(token, ':')) {

424 
	`tok2msf
(
tokí
, 
tmp
);

425 
t
 = 
	`msf2£c
(
tmp
);

426 
ti
[
numåacks
].
°¨t_off£t
 +(
t
 - 
cuºít_zîo_g≠
Ë* 
£˘‹_size
;

427 
t
 = 
	`msf2£c
(
ti
[
numåacks
].
°¨t
) +Å;

428 
	`£c2msf
(
t
, (*)&
ti
[
numåacks
].
°¨t
);

433 
	`f˛o£
(
fi
);

436 
	}
}

440 
	$∑r£cue
(c⁄° *
isofûe
) {

441 
cuíame
[
MAXPATHLEN
];

442 
fûï©h
[
MAXPATHLEN
];

443 *
öcue_‚ame
;

444 
FILE
 *
fi
;

445 *
tokí
;

446 
time
[20];

447 *
tmp
;

448 
löebuf
[256], 
tmpb
[256], 
dummy
[256];

449 
öcue_max_Àn
;

450 
t
, 
fûe_Àn
, 
mode
, 
£˘‹_offs
;

451 
£˘‹_size
 = 2352;

453 
numåacks
 = 0;

456 
	`°∫˝y
(
cuíame
, 
isofûe
, (cuename));

457 
cuíame
[
MAXPATHLEN
 - 1] = '\0';

458 i‡(
	`°æí
(
cuíame
) >= 4) {

459 
	`°r˝y
(
cuíame
 + 
	`°æí
(cuename) - 4, ".cue");

465 i‡((
fi
 = 
	`f›í
(
cuíame
, "r")Ë=
NULL
) {

472 i‡(
	`fgës
(
löebuf
, ÷öebuf), 
fi
Ë!
NULL
) {

473 i‡(!
	`°∫cmp
(
löebuf
, "CD_ROM_XA", 9)) {

476 
	`f˛o£
(
fi
);

477  
	`∑r£toc
(
isofûe
);

479 
	`f£ek
(
fi
, 0, 
SEEK_SET
);

483 
	`°∫˝y
(
fûï©h
, 
cuíame
, (filepath));

484 
tmp
 = 
	`°ºchr
(
fûï©h
, '/');

485 i‡(
tmp
 =
NULL
)

486 
tmp
 = 
	`°ºchr
(
fûï©h
, '\\');

487 i‡(
tmp
 !
NULL
)

488 
tmp
++;

490 
tmp
 = 
fûï©h
;

491 *
tmp
 = 0;

492 
fûï©h
[(filepath) - 1] = 0;

493 
öcue_‚ame
 = 
tmp
;

494 
öcue_max_Àn
 = (
fûï©h
Ë- (
tmp
 - filepath) - 1;

496 
	`mem£t
(&
ti
, 0, (ti));

498 
fûe_Àn
 = 0;

499 
£˘‹_offs
 = 2 * 75;

501 
	`fgës
(
löebuf
, ÷öebuf), 
fi
Ë!
NULL
) {

502 
	`°∫˝y
(
dummy
, 
löebuf
, (linebuf));

503 
tokí
 = 
	`°πok
(
dummy
, " ");

505 i‡(
tokí
 =
NULL
) {

509 i‡(!
	`°rcmp
(
tokí
, "TRACK")) {

510 
numåacks
++;

512 
£˘‹_size
 = 0;

513 i‡(
	`°r°r
(
löebuf
, "AUDIO"Ë!
NULL
) {

514 
ti
[
numåacks
].
ty≥
 = 
CDDA
;

515 
£˘‹_size
 = 2352;

517 i‡(
	`ssˇnf
(
löebuf
, " TRACK %u MODE%u/%u", &
t
, &
mode
, &
£˘‹_size
) == 3)

518 
ti
[
numåacks
].
ty≥
 = 
DATA
;

520 
	`SysPrötf
(".cue: failedÅoÖarse TRACK\n");

521 
ti
[
numåacks
].
ty≥
 =Çumåack†=1 ? 
DATA
 : 
CDDA
;

523 i‡(
£˘‹_size
 == 0)

524 
£˘‹_size
 = 2352;

526 i‡(!
	`°rcmp
(
tokí
, "INDEX")) {

527 i‡(
	`ssˇnf
(
löebuf
, " INDEX %02d %8s", &
t
, 
time
) != 2)

528 
	`SysPrötf
(".cue: failedÅoÖarse INDEX\n");

529 
	`tok2msf
(
time
, (*)&
ti
[
numåacks
].
°¨t
);

531 
t
 = 
	`msf2£c
(
ti
[
numåacks
].
°¨t
);

532 
ti
[
numåacks
].
°¨t_off£t
 = 
t
 * 
£˘‹_size
;

533 
t
 +
£˘‹_offs
;

534 
	`£c2msf
(
t
, 
ti
[
numåacks
].
°¨t
);

537 
t
 = 
fûe_Àn
 - 
ti
[
numåacks
].
°¨t_off£t
 / 
£˘‹_size
;

538 
	`£c2msf
(
t
, 
ti
[
numåacks
].
Àngth
);

540 i‡(
numåacks
 > 1 && 
ti
[numåacks].
h™dÀ
 =
NULL
) {

543 
t
 = 
	`msf2£c
(
ti
[
numåacks
].
°¨t
) - msf2sec(ti[numtracks - 1].start);

544 
	`£c2msf
(
t
, 
ti
[
numåacks
 - 1].
Àngth
);

546 i‡(
numåacks
 > 1 && 
¥eg≠Off£t
 == -1)

547 
¥eg≠Off£t
 = 
ti
[
numåacks
].
°¨t_off£t
 / 
£˘‹_size
;

549 i‡(!
	`°rcmp
(
tokí
, "PREGAP")) {

550 i‡(
	`ssˇnf
(
löebuf
, " PREGAP %8s", 
time
) == 1) {

551 
	`tok2msf
(
time
, 
dummy
);

552 
£˘‹_offs
 +
	`msf2£c
(
dummy
);

554 
¥eg≠Off£t
 = -1;

556 i‡(!
	`°rcmp
(
tokí
, "FILE")) {

557 
t
 = 
	`ssˇnf
(
löebuf
, " FILE \"%255[^\"]\"", 
tmpb
);

558 i‡(
t
 != 1)

559 
	`ssˇnf
(
löebuf
, " FILE %255s", 
tmpb
);

562 
ti
[
numåacks
 + 1].
h™dÀ
 = 
	`f›í
(
tmpb
, "rb");

563 i‡(
ti
[
numåacks
 + 1].
h™dÀ
 =
NULL
) {

565 
tmp
 = 
	`°ºchr
(
tmpb
, '\\');

566 i‡(
tmp
 =
NULL
)

567 
tmp
 = 
	`°ºchr
(
tmpb
, '/');

568 i‡(
tmp
 !
NULL
)

569 
tmp
++;

571 
tmp
 = 
tmpb
;

572 
	`°∫˝y
(
öcue_‚ame
, 
tmp
, 
öcue_max_Àn
);

573 
ti
[
numåacks
 + 1].
h™dÀ
 = 
	`f›í
(
fûï©h
, "rb");

577 i‡(
numåacks
 + 1 > 1) {

578 
mu…ifûe
 = 1;

579 
£˘‹_offs
 +
fûe_Àn
;

582 
fûe_Àn
 = 0;

583 i‡(
ti
[
numåacks
 + 1].
h™dÀ
 =
NULL
) {

584 
	`SysPrötf
(
	`_
("\ncouldÇŸ o≥n: %s\n"), 
fûï©h
);

587 
	`f£ek
(
ti
[
numåacks
 + 1].
h™dÀ
, 0, 
SEEK_END
);

588 
fûe_Àn
 = 
	`·ñl
(
ti
[
numåacks
 + 1].
h™dÀ
) / 2352;

590 i‡(
numåacks
 =0 && 
	`°æí
(
isofûe
) >= 4 &&

591 
	`°rcmp
(
isofûe
 + 
	`°æí
(isofile) - 4, ".cue") == 0)

594 
	`f˛o£
(
cdH™dÀ
);

595 
cdH™dÀ
 = 
	`f›í
(
fûï©h
, "rb");

600 
	`f˛o£
(
fi
);

603 
	}
}

607 
	$∑r£ccd
(c⁄° *
isofûe
) {

608 
ccd«me
[
MAXPATHLEN
];

609 
FILE
 *
fi
;

610 
löebuf
[256];

611 
t
;

613 
numåacks
 = 0;

616 
	`°∫˝y
(
ccd«me
, 
isofûe
, (ccdname));

617 
ccd«me
[
MAXPATHLEN
 - 1] = '\0';

618 i‡(
	`°æí
(
ccd«me
) >= 4) {

619 
	`°r˝y
(
ccd«me
 + 
	`°æí
(ccdname) - 4, ".ccd");

625 i‡((
fi
 = 
	`f›í
(
ccd«me
, "r")Ë=
NULL
) {

629 
	`mem£t
(&
ti
, 0, (ti));

631 
	`fgës
(
löebuf
, ÷öebuf), 
fi
Ë!
NULL
) {

632 i‡(!
	`°∫cmp
(
löebuf
, "[TRACK", 6)){

633 
numåacks
++;

635 i‡(!
	`°∫cmp
(
löebuf
, "MODE=", 5)) {

636 
	`ssˇnf
(
löebuf
, "MODE=%d", &
t
);

637 
ti
[
numåacks
].
ty≥
 = ((
t
 =0Ë? 
CDDA
 : 
DATA
);

639 i‡(!
	`°∫cmp
(
löebuf
, "INDEX 1=", 8)) {

640 
	`ssˇnf
(
löebuf
, "INDEX 1=%d", &
t
);

641 
	`£c2msf
(
t
 + 2 * 75, 
ti
[
numåacks
].
°¨t
);

642 
ti
[
numåacks
].
°¨t_off£t
 = 
t
 * 2352;

645 i‡(
numåacks
 > 1) {

646 
t
 = 
	`msf2£c
(
ti
[
numåacks
].
°¨t
) - msf2sec(ti[numtracks - 1].start);

647 
	`£c2msf
(
t
, 
ti
[
numåacks
 - 1].
Àngth
);

652 
	`f˛o£
(
fi
);

655 i‡(
numåacks
 >= 1) {

656 
	`f£ek
(
cdH™dÀ
, 0, 
SEEK_END
);

657 
t
 = 
	`·ñl
(
cdH™dÀ
Ë/ 2352 - 
	`msf2£c
(
ti
[
numåacks
].
°¨t
) + 2 * 75;

658 
	`£c2msf
(
t
, 
ti
[
numåacks
].
Àngth
);

662 
	}
}

666 
	$∑r£mds
(c⁄° *
isofûe
) {

667 
md¢ame
[
MAXPATHLEN
];

668 
FILE
 *
fi
;

669 
off£t
, 
exåa_off£t
, 
l
, 
i
;

670 
s
;

672 
numåacks
 = 0;

675 
	`°∫˝y
(
md¢ame
, 
isofûe
, (mdsname));

676 
md¢ame
[
MAXPATHLEN
 - 1] = '\0';

677 i‡(
	`°æí
(
md¢ame
) >= 4) {

678 
	`°r˝y
(
md¢ame
 + 
	`°æí
(mdsname) - 4, ".mds");

684 i‡((
fi
 = 
	`f›í
(
md¢ame
, "rb")Ë=
NULL
) {

688 
	`mem£t
(&
ti
, 0, (ti));

691 
	`‰ód
(&
i
, 1, (), 
fi
);

692 
i
 = 
	`SWAP32
(i);

693 i‡(
i
 != 0x4944454D) {

695 
	`f˛o£
(
fi
);

700 
	`f£ek
(
fi
, 0x50, 
SEEK_SET
);

701 
	`‰ód
(&
off£t
, 1, (), 
fi
);

702 
off£t
 = 
	`SWAP32
(offset);

705 
off£t
 += 14;

706 
	`f£ek
(
fi
, 
off£t
, 
SEEK_SET
);

707 
	`‰ód
(&
s
, 1, (), 
fi
);

708 
s
 = 
	`SWAP16
(s);

709 
numåacks
 = 
s
;

712 
	`f£ek
(
fi
, 4, 
SEEK_CUR
);

713 
	`‰ód
(&
off£t
, 1, (), 
fi
);

714 
off£t
 = 
	`SWAP32
(offset);

718 
	`f£ek
(
fi
, 
off£t
 + 4, 
SEEK_SET
);

719 i‡(
	`fgëc
(
fi
) < 0xA0) {

722 
off£t
 += 0x50;

726 
	`f£ek
(
fi
, 
off£t
 + 1, 
SEEK_SET
);

727 
subCh™Mixed
 = 
subCh™Raw
 = (
	`fgëc
(
fi
Ë? 
TRUE
 : 
FALSE
);

730 
i
 = 1; i <
numåacks
; i++) {

731 
	`f£ek
(
fi
, 
off£t
, 
SEEK_SET
);

734 
ti
[
i
].
ty≥
 = ((
	`fgëc
(
fi
Ë=0xA9Ë? 
CDDA
 : 
DATA
);

735 
	`f£ek
(
fi
, 8, 
SEEK_CUR
);

738 
ti
[
i
].
°¨t
[0] = 
	`fgëc
(
fi
);

739 
ti
[
i
].
°¨t
[1] = 
	`fgëc
(
fi
);

740 
ti
[
i
].
°¨t
[2] = 
	`fgëc
(
fi
);

742 
	`‰ód
(&
exåa_off£t
, 1, (), 
fi
);

743 
exåa_off£t
 = 
	`SWAP32
(extra_offset);

746 
	`f£ek
(
fi
, 
off£t
 + 0x28, 
SEEK_SET
);

747 
	`‰ód
(&
l
, 1, (), 
fi
);

748 
l
 = 
	`SWAP32
(l);

749 
ti
[
i
].
°¨t_off£t
 = 
l
;

752 
	`f£ek
(
fi
, 
exåa_off£t
, 
SEEK_SET
);

753 
	`‰ód
(&
l
, 1, (), 
fi
);

754 
l
 = 
	`SWAP32
(l);

755 i‡(
l
 !0 && 
i
 > 1)

756 
¥eg≠Off£t
 = 
	`msf2£c
(
ti
[
i
].
°¨t
);

759 
	`‰ód
(&
l
, 1, (), 
fi
);

760 
l
 = 
	`SWAP32
(l);

761 
	`£c2msf
(
l
, 
ti
[
i
].
Àngth
);

763 
off£t
 += 0x50;

766 
	`f˛o£
(
fi
);

768 
	}
}

770 
	$h™dÀpbp
(c⁄° *
isofûe
) {

772 
sig
;

773 
d⁄tˇª
[8];

774 
pßr_offs
;

775 } 
pbp_hdr
;

777 
ty≥
;

778 
∑d0
;

779 
åack
;

780 
ödex0
[3];

781 
∑d1
;

782 
ödex1
[3];

783 } 
toc_íåy
;

785 
off£t
;

786 
size
;

787 
d⁄tˇª
[6];

788 } 
ödex_íåy
;

789 
pßr_sig
[11];

790 
t
, 
cd_Àngth
, 
cdimg_ba£
;

791 
off£âab
[8], 
psisoimg_offs
;

792 c⁄° *
ext
 = 
NULL
;

793 
i
, 
ªt
;

795 i‡(
	`°æí
(
isofûe
) >= 4)

796 
ext
 = 
isofûe
 + 
	`°æí
(isofile) - 4;

797 i‡(
ext
 =
NULL
 || (
	`°rcmp
(ext, ".pbp") != 0 && strcmp(ext, ".PBP") != 0))

800 
	`f£ek
(
cdH™dÀ
, 0, 
SEEK_SET
);

802 
numåacks
 = 0;

804 
ªt
 = 
	`‰ód
(&
pbp_hdr
, 1, ’bp_hdr), 
cdH™dÀ
);

805 i‡(
ªt
 !(
pbp_hdr
)) {

806 
	`SysPrötf
("failedÅoÑeadÖbp\n");

807 
Áû_io
;

810 
ªt
 = 
	`f£ek
(
cdH™dÀ
, 
pbp_hdr
.
pßr_offs
, 
SEEK_SET
);

811 i‡(
ªt
 != 0) {

812 
	`SysPrötf
("ÁûedÅÿ£ekÅÿ%x\n", 
pbp_hdr
.
pßr_offs
);

813 
Áû_io
;

816 
psisoimg_offs
 = 
pbp_hdr
.
pßr_offs
;

817 
	`‰ód
(
pßr_sig
, 1, ’ßr_sig), 
cdH™dÀ
);

818 
pßr_sig
[10] = 0;

819 i‡(
	`°rcmp
(
pßr_sig
, "PSTITLEIMG") == 0) {

821 
ªt
 = 
	`f£ek
(
cdH™dÀ
, 
pbp_hdr
.
pßr_offs
 + 0x200, 
SEEK_SET
);

822 i‡(
ªt
 != 0) {

823 
	`SysPrötf
("ÁûedÅÿ£ekÅÿ%x\n", 
pbp_hdr
.
pßr_offs
 + 0x200);

824 
Áû_io
;

827 i‡(
	`‰ód
(&
off£âab
, 1, (off£âab), 
cdH™dÀ
) != (offsettab)) {

828 
	`SysPrötf
("failedÅoÑead offsettab\n");

829 
Áû_io
;

832 
i
 = 0; i < (
off£âab
) / (offsettab[0]); i++) {

833 i‡(
off£âab
[
i
] == 0)

836 
cdrIsoMu…idiskCou¡
 = 
i
;

837 i‡(
cdrIsoMu…idiskCou¡
 == 0) {

838 
	`SysPrötf
("multidiskÉboot has 0 images?\n");

839 
Áû_io
;

842 i‡(
cdrIsoMu…idiskSñe˘
 >
cdrIsoMu…idiskCou¡
)

843 
cdrIsoMu…idiskSñe˘
 = 0;

845 
psisoimg_offs
 +
off£âab
[
cdrIsoMu…idiskSñe˘
];

847 
ªt
 = 
	`f£ek
(
cdH™dÀ
, 
psisoimg_offs
, 
SEEK_SET
);

848 i‡(
ªt
 != 0) {

849 
	`SysPrötf
("ÁûedÅÿ£ekÅÿ%x\n", 
psisoimg_offs
);

850 
Áû_io
;

853 
	`‰ód
(
pßr_sig
, 1, ’ßr_sig), 
cdH™dÀ
);

854 
pßr_sig
[10] = 0;

857 i‡(
	`°rcmp
(
pßr_sig
, "PSISOIMG00") != 0) {

858 
	`SysPrötf
("badÖßr_sig: %s\n", 
pßr_sig
);

859 
Áû_io
;

863 
ªt
 = 
	`f£ek
(
cdH™dÀ
, 
psisoimg_offs
 + 0x800, 
SEEK_SET
);

864 i‡(
ªt
 != 0) {

865 
	`SysPrötf
("ÁûedÅÿ£ekÅÿ%x\n", 
psisoimg_offs
 + 0x800);

866 
Áû_io
;

870 
	`f£ek
(
cdH™dÀ
, (
toc_íåy
), 
SEEK_CUR
);

871 
	`‰ód
(&
toc_íåy
, 1, —oc_íåy), 
cdH™dÀ
);

872 
numåacks
 = 
	`btoi
(
toc_íåy
.
ödex1
[0]);

874 
	`‰ód
(&
toc_íåy
, 1, —oc_íåy), 
cdH™dÀ
);

875 
cd_Àngth
 = 
	`btoi
(
toc_íåy
.
ödex1
[0]) * 60 * 75 +

876 
	`btoi
(
toc_íåy
.
ödex1
[1]) * 75 + btoi(toc_entry.index1[2]);

878 
i
 = 1; i <
numåacks
; i++) {

879 
	`‰ód
(&
toc_íåy
, 1, —oc_íåy), 
cdH™dÀ
);

881 
ti
[
i
].
ty≥
 = (
toc_íåy
.ty≥ =1Ë? 
CDDA
 : 
DATA
;

883 
ti
[
i
].
°¨t_off£t
 = 
	`btoi
(
toc_íåy
.
ödex0
[0]) * 60 * 75 +

884 
	`btoi
(
toc_íåy
.
ödex0
[1]) * 75 + btoi(toc_entry.index0[2]);

885 
ti
[
i
].
°¨t_off£t
 *= 2352;

886 
ti
[
i
].
°¨t
[0] = 
	`btoi
(
toc_íåy
.
ödex1
[0]);

887 
ti
[
i
].
°¨t
[1] = 
	`btoi
(
toc_íåy
.
ödex1
[1]);

888 
ti
[
i
].
°¨t
[2] = 
	`btoi
(
toc_íåy
.
ödex1
[2]);

890 i‡(
i
 > 1) {

891 
t
 = 
	`msf2£c
(
ti
[
i
].
°¨t
) - msf2sec(ti[i - 1].start);

892 
	`£c2msf
(
t
, 
ti
[
i
 - 1].
Àngth
);

895 
t
 = 
cd_Àngth
 - 
ti
[
numåacks
].
°¨t_off£t
 / 2352;

896 
	`£c2msf
(
t
, 
ti
[
numåacks
].
Àngth
);

899 
ªt
 = 
	`f£ek
(
cdH™dÀ
, 
psisoimg_offs
 + 0x4000, 
SEEK_SET
);

900 i‡(
ªt
 != 0) {

901 
	`SysPrötf
("failedÅo seekÅo ISO index\n");

902 
Áû_io
;

905 
com¥_img
 = 
	`ˇŒoc
(1, (*compr_img));

906 i‡(
com¥_img
 =
NULL
)

907 
Áû_io
;

909 
com¥_img
->
block_shi·
 = 4;

910 
com¥_img
->
cuºít_block
 = ()-1;

912 
com¥_img
->
ödex_Àn
 = (0x100000 - 0x4000Ë/ (
ödex_íåy
);

913 
com¥_img
->
ödex_èbÀ
 = 
	`mÆloc
((com¥_img->
ödex_Àn
 + 1) * (compr_img->index_table[0]));

914 i‡(
com¥_img
->
ödex_èbÀ
 =
NULL
)

915 
Áû_io
;

917 
cdimg_ba£
 = 
psisoimg_offs
 + 0x100000;

918 
i
 = 0; i < 
com¥_img
->
ödex_Àn
; i++) {

919 
ªt
 = 
	`‰ód
(&
ödex_íåy
, 1, (ödex_íåy), 
cdH™dÀ
);

920 i‡(
ªt
 !(
ödex_íåy
)) {

921 
	`SysPrötf
("ÁûedÅÿªad index_íåy #%d\n", 
i
);

922 
Áû_ödex
;

925 i‡(
ödex_íåy
.
size
 == 0)

928 
com¥_img
->
ödex_èbÀ
[
i
] = 
cdimg_ba£
 + 
ödex_íåy
.
off£t
;

930 
com¥_img
->
ödex_èbÀ
[
i
] = 
cdimg_ba£
 + 
ödex_íåy
.
off£t
 + index_íåy.
size
;

934 
Áû_ödex
:

935 
	`‰ì
(
com¥_img
->
ödex_èbÀ
);

936 
com¥_img
->
ödex_èbÀ
 = 
NULL
;

937 
Áû_io
:

938 i‡(
com¥_img
 !
NULL
) {

939 
	`‰ì
(
com¥_img
);

940 
com¥_img
 = 
NULL
;

943 
	}
}

945 
	$h™dÀcbö
(c⁄° *
isofûe
) {

948 
magic
[4];

949 
hódî_size
;

950 
tŸÆ_byãs
;

951 
block_size
;

952 
vî
;

953 
Æign
;

954 
rsv_06
[2];

955 } 
ciso_hdr
;

956 c⁄° *
ext
 = 
NULL
;

957 
ödex
 = 0, 
∂aö
;

958 
i
, 
ªt
;

960 i‡(
	`°æí
(
isofûe
) >= 5)

961 
ext
 = 
isofûe
 + 
	`°æí
(isofile) - 5;

962 i‡(
ext
 =
NULL
 || (
	`°rˇ£cmp
(ext + 1, ".cbn") != 0 && strcasecmp(ext, ".cbin") != 0))

965 
	`f£ek
(
cdH™dÀ
, 0, 
SEEK_SET
);

967 
ªt
 = 
	`‰ód
(&
ciso_hdr
, 1, (ciso_hdr), 
cdH™dÀ
);

968 i‡(
ªt
 !(
ciso_hdr
)) {

969 
	`SysPrötf
("failedÅoÑead ciso header\n");

973 i‡(
	`°∫cmp
(
ciso_hdr
.
magic
, "CISO", 4Ë!0 || ciso_hdr.
tŸÆ_byãs
 <0 || ciso_hdr.
block_size
 <= 0) {

974 
	`SysPrötf
("bad ciso header\n");

977 i‡(
ciso_hdr
.
hódî_size
 != 0 && ciso_hdr.header_size != (ciso_hdr)) {

978 
ªt
 = 
	`f£ek
(
cdH™dÀ
, 
ciso_hdr
.
hódî_size
, 
SEEK_SET
);

979 i‡(
ªt
 != 0) {

980 
	`SysPrötf
("ÁûedÅÿ£ekÅÿ%x\n", 
ciso_hdr
.
hódî_size
);

985 
com¥_img
 = 
	`ˇŒoc
(1, (*compr_img));

986 i‡(
com¥_img
 =
NULL
)

987 
Áû_io
;

989 
com¥_img
->
block_shi·
 = 0;

990 
com¥_img
->
cuºít_block
 = ()-1;

992 
com¥_img
->
ödex_Àn
 = 
ciso_hdr
.
tŸÆ_byãs
 / ciso_hdr.
block_size
;

993 
com¥_img
->
ödex_èbÀ
 = 
	`mÆloc
((com¥_img->
ödex_Àn
 + 1) * (compr_img->index_table[0]));

994 i‡(
com¥_img
->
ödex_èbÀ
 =
NULL
)

995 
Áû_io
;

997 
ªt
 = 
	`‰ód
(
com¥_img
->
ödex_èbÀ
, (com¥_img->ödex_èbÀ[0]), com¥_img->
ödex_Àn
, 
cdH™dÀ
);

998 i‡(
ªt
 !
com¥_img
->
ödex_Àn
) {

999 
	`SysPrötf
("failedÅoÑead indexÅable\n");

1000 
Áû_ödex
;

1003 
i
 = 0; i < 
com¥_img
->
ödex_Àn
 + 1; i++) {

1004 
ödex
 = 
com¥_img
->
ödex_èbÀ
[
i
];

1005 
∂aö
 = 
ödex
 & 0x80000000;

1006 
ödex
 &= 0x7fffffff;

1007 
com¥_img
->
ödex_èbÀ
[
i
] = (
ödex
 << 
ciso_hdr
.
Æign
Ë| 
∂aö
;

1009 i‡(()
ödex
 << 
ciso_hdr
.
Æign
 >= 0x80000000ll)

1010 
	`SysPrötf
("warning: ciso imgÅooÜarge,ÉxpectÖroblems\n");

1014 
Áû_ödex
:

1015 
	`‰ì
(
com¥_img
->
ödex_èbÀ
);

1016 
com¥_img
->
ödex_èbÀ
 = 
NULL
;

1017 
Áû_io
:

1018 i‡(
com¥_img
 !
NULL
) {

1019 
	`‰ì
(
com¥_img
);

1020 
com¥_img
 = 
NULL
;

1023 
	}
}

1026 
	$›ísubfûe
(c⁄° *
is⁄ame
) {

1027 
sub«me
[
MAXPATHLEN
];

1030 
	`°∫˝y
(
sub«me
, 
is⁄ame
, (subname));

1031 
sub«me
[
MAXPATHLEN
 - 1] = '\0';

1032 i‡(
	`°æí
(
sub«me
) >= 4) {

1033 
	`°r˝y
(
sub«me
 + 
	`°æí
(subname) - 4, ".sub");

1039 
subH™dÀ
 = 
	`f›í
(
sub«me
, "rb");

1040 i‡(
subH™dÀ
 =
NULL
) {

1045 
	}
}

1047 
	$›ísbifûe
(c⁄° *
is⁄ame
) {

1048 
sböame
[
MAXPATHLEN
];

1049 
s
;

1051 
	`°∫˝y
(
sböame
, 
is⁄ame
, (sbiname));

1052 
sböame
[
MAXPATHLEN
 - 1] = '\0';

1053 i‡(
	`°æí
(
sböame
) >= 4) {

1054 
	`°r˝y
(
sböame
 + 
	`°æí
(sbiname) - 4, ".sbi");

1060 
	`f£ek
(
cdH™dÀ
, 0, 
SEEK_END
);

1061 
s
 = 
	`·ñl
(
cdH™dÀ
) / 2352;

1063  
	`LﬂdSBI
(
sböame
, 
s
);

1064 
	}
}

1066 
	$cdªad_n‹mÆ
(
FILE
 *
f
, 
ba£
, *
de°
, 
£˘‹
)

1068 
	`f£ek
(
f
, 
ba£
 + 
£˘‹
 * 
CD_FRAMESIZE_RAW
, 
SEEK_SET
);

1069  
	`‰ód
(
de°
, 1, 
CD_FRAMESIZE_RAW
, 
f
);

1070 
	}
}

1072 
	$cdªad_sub_mixed
(
FILE
 *
f
, 
ba£
, *
de°
, 
£˘‹
)

1074 
ªt
;

1076 
	`f£ek
(
f
, 
ba£
 + 
£˘‹
 * (
CD_FRAMESIZE_RAW
 + 
SUB_FRAMESIZE
), 
SEEK_SET
);

1077 
ªt
 = 
	`‰ód
(
de°
, 1, 
CD_FRAMESIZE_RAW
, 
f
);

1078 
	`‰ód
(
subbuf„r
, 1, 
SUB_FRAMESIZE
, 
f
);

1080 i‡(
subCh™Raw
Ë
	`DecodeRawSubD©a
();

1082  
ªt
;

1083 
	}
}

1085 
	$uncom¥ess2
(*
out
, *
out_size
, *
ö
, 
ö_size
)

1087 
z_°ªam
 
z
;

1088 
ªt
 = 0;

1090 i‡(
z
.
zÆloc
 =
NULL
) {

1092 
z
.
√xt_ö
 = 
Z_NULL
;

1093 
z
.
avaû_ö
 = 0;

1094 
z
.
zÆloc
 = 
Z_NULL
;

1095 
z
.
z‰ì
 = 
Z_NULL
;

1096 
z
.
›aque
 = 
Z_NULL
;

1097 
ªt
 = 
	`öÊ©eInô2
(&
z
, -15);

1100 
ªt
 = 
	`öÊ©eRe£t
(&
z
);

1101 i‡(
ªt
 !
Z_OK
)

1102  
ªt
;

1104 
z
.
√xt_ö
 = 
ö
;

1105 
z
.
avaû_ö
 = 
ö_size
;

1106 
z
.
√xt_out
 = 
out
;

1107 
z
.
avaû_out
 = *
out_size
;

1109 
ªt
 = 
	`öÊ©e
(&
z
, 
Z_NO_FLUSH
);

1112 *
out_size
 -
z
.
avaû_out
;

1113  
ªt
 == 1 ? 0 :Ñet;

1114 
	}
}

1116 
	$cdªad_com¥es£d
(
FILE
 *
f
, 
ba£
, *
de°
, 
£˘‹
)

1118 
cdbuf„r_size
, 
cdbuf„r_size_ex≥˘
;

1119 
°¨t_byã
, 
size
;

1120 
is_com¥es£d
;

1121 
ªt
, 
block
;

1123 i‡(
ba£
)

1124 
£˘‹
 +
ba£
 / 2352;

1126 
block
 = 
£˘‹
 >> 
com¥_img
->
block_shi·
;

1127 
com¥_img
->
£˘‹_ö_blk
 = 
£˘‹
 & ((1 << com¥_img->
block_shi·
) - 1);

1129 i‡(
block
 =
com¥_img
->
cuºít_block
) {

1131 
föish
;

1134 i‡(
£˘‹
 >
com¥_img
->
ödex_Àn
 * 16) {

1135 
	`SysPrötf
("£˘‹ %d i†∑° imgÉnd\n", 
£˘‹
);

1139 
°¨t_byã
 = 
com¥_img
->
ödex_èbÀ
[
block
] & 0x7fffffff;

1140 i‡(
	`f£ek
(
cdH™dÀ
, 
°¨t_byã
, 
SEEK_SET
) != 0) {

1141 
	`SysPrötf
("seekÉrror for block %dát %x: ",

1142 
block
, 
°¨t_byã
);

1143 
	`≥º‹
(
NULL
);

1147 
is_com¥es£d
 = !(
com¥_img
->
ödex_èbÀ
[
block
] & 0x80000000);

1148 
size
 = (
com¥_img
->
ödex_èbÀ
[
block
 + 1] & 0x7fffffffË- 
°¨t_byã
;

1149 i‡(
size
 > (
com¥_img
->
buff_com¥es£d
)) {

1150 
	`SysPrötf
("block %d i†toÿœrge: %u\n", 
block
, 
size
);

1154 i‡(
	`‰ód
(
is_com¥es£d
 ? 
com¥_img
->
buff_com¥es£d
 : com¥_img->
buff_øw
[0],

1155 1, 
size
, 
cdH™dÀ
) != size) {

1156 
	`SysPrötf
("ªadÉº‹ f‹ block %dáà%x: ", 
block
, 
°¨t_byã
);

1157 
	`≥º‹
(
NULL
);

1161 i‡(
is_com¥es£d
) {

1162 
cdbuf„r_size_ex≥˘
 = (
com¥_img
->
buff_øw
[0]Ë<< com¥_img->
block_shi·
;

1163 
cdbuf„r_size
 = 
cdbuf„r_size_ex≥˘
;

1164 
ªt
 = 
	`uncom¥ess2
(
com¥_img
->
buff_øw
[0], &
cdbuf„r_size
, com¥_img->
buff_com¥es£d
, 
size
);

1165 i‡(
ªt
 != 0) {

1166 
	`SysPrötf
("uncompress failed with %d for block %d, sector %d\n",

1167 
ªt
, 
block
, 
£˘‹
);

1170 i‡(
cdbuf„r_size
 !
cdbuf„r_size_ex≥˘
)

1171 
	`SysPrötf
("cdbuf„r_size: %lu !%lu, se˘‹ %d\n", 
cdbuf„r_size
,

1172 
cdbuf„r_size_ex≥˘
, 
£˘‹
);

1176 
com¥_img
->
cuºít_block
 = 
block
;

1178 
föish
:

1179 i‡(
de°
 !
cdbuf„r
)

1180 
	`mem˝y
(
de°
, 
com¥_img
->
buff_øw
[com¥_img->
£˘‹_ö_blk
],

1181 
CD_FRAMESIZE_RAW
);

1182  
CD_FRAMESIZE_RAW
;

1183 
	}
}

1185 
	$cdªad_2048
(
FILE
 *
f
, 
ba£
, *
de°
, 
£˘‹
)

1187 
ªt
;

1189 
	`f£ek
(
f
, 
ba£
 + 
£˘‹
 * 2048, 
SEEK_SET
);

1190 
ªt
 = 
	`‰ód
((*)
de°
 + 12 * 2, 1, 2048, 
f
);

1193 
	`mem£t
(
cdbuf„r
, 0, 12 * 2);

1194 
	`£c2msf
(
£˘‹
 + 2 * 75, (*)&
cdbuf„r
[12]);

1195 
cdbuf„r
[12 + 3] = 1;

1197  
ªt
;

1198 
	}
}

1200 * 
CALLBACK
 
	$ISOgëBuf„r_com¥
() {

1201  
com¥_img
->
buff_øw
[com¥_img->
£˘‹_ö_blk
] + 12;

1202 
	}
}

1204 * 
CALLBACK
 
	$ISOgëBuf„r
() {

1205  
cdbuf„r
 + 12;

1206 
	}
}

1208 
	$PrötTøcks
() {

1209 
i
;

1211 
i
 = 1; i <
numåacks
; i++) {

1212 
	`SysPrötf
(
	`_
("Track %.2d (%s) - Start %.2d:%.2d:%.2d, Length %.2d:%.2d:%.2d\n"),

1213 
i
, (
ti
[i].
ty≥
 =
DATA
 ? "DATA" : "AUDIO"),

1214 
ti
[
i
].
°¨t
[0],Åi[i].start[1],Åi[i].start[2],

1215 
ti
[
i
].
Àngth
[0],Åi[i].length[1],Åi[i].length[2]);

1217 
	}
}

1221 
CALLBACK
 
	$ISO›í
() {

1222 
boﬁón
 
isMode1ISO
 = 
FALSE
;

1223 
Æt_bö_fûíame
[
MAXPATHLEN
];

1224 c⁄° *
bö_fûíame
;

1226 i‡(
cdH™dÀ
 !
NULL
) {

1230 
cdH™dÀ
 = 
	`f›í
(
	`GëIsoFûe
(), "rb");

1231 i‡(
cdH™dÀ
 =
NULL
) {

1232 
	`SysPrötf
(
	`_
("Could't open '%s' forÑeading: %s\n"),

1233 
	`GëIsoFûe
(), 
	`°ªº‹
(
î∫o
));

1237 
	`SysPrötf
(
	`_
("Lﬂded CD Image: %s"), 
	`GëIsoFûe
());

1239 
cddaBigEndün
 = 
FALSE
;

1240 
subCh™Mixed
 = 
FALSE
;

1241 
subCh™Raw
 = 
FALSE
;

1242 
¥eg≠Off£t
 = 0;

1243 
cdrIsoMu…idiskCou¡
 = 1;

1244 
mu…ifûe
 = 0;

1246 
CDR_gëBuf„r
 = 
ISOgëBuf„r
;

1247 
cdimg_ªad_func
 = 
cdªad_n‹mÆ
;

1249 i‡(
	`∑r£toc
(
	`GëIsoFûe
()) == 0) {

1250 
	`SysPrötf
("[+toc]");

1252 i‡(
	`∑r£ccd
(
	`GëIsoFûe
()) == 0) {

1253 
	`SysPrötf
("[+ccd]");

1255 i‡(
	`∑r£mds
(
	`GëIsoFûe
()) == 0) {

1256 
	`SysPrötf
("[+mds]");

1258 i‡(
	`∑r£cue
(
	`GëIsoFûe
()) == 0) {

1259 
	`SysPrötf
("[+cue]");

1261 i‡(
	`h™dÀpbp
(
	`GëIsoFûe
()) == 0) {

1262 
	`SysPrötf
("[pbp]");

1263 
CDR_gëBuf„r
 = 
ISOgëBuf„r_com¥
;

1264 
cdimg_ªad_func
 = 
cdªad_com¥es£d
;

1266 i‡(
	`h™dÀcbö
(
	`GëIsoFûe
()) == 0) {

1267 
	`SysPrötf
("[cbin]");

1268 
CDR_gëBuf„r
 = 
ISOgëBuf„r_com¥
;

1269 
cdimg_ªad_func
 = 
cdªad_com¥es£d
;

1272 i‡(!
subCh™Mixed
 && 
	`›ísubfûe
(
	`GëIsoFûe
()) == 0) {

1273 
	`SysPrötf
("[+sub]");

1275 i‡(
	`›ísbifûe
(
	`GëIsoFûe
()) == 0) {

1276 
	`SysPrötf
("[+sbi]");

1279 
	`f£ek
(
cdH™dÀ
, 0, 
SEEK_END
);

1282 
bö_fûíame
 = 
	`GëIsoFûe
();

1283 i‡(
	`·ñl
(
cdH™dÀ
) < 2352 * 0x10) {

1284 c⁄° *
exts
[] = { ".bin", ".BIN", ".img", ".IMG" };

1285 
FILE
 *
tmpf
 = 
NULL
;

1286 
size_t
 
i
;

1287 *
p
;

1289 
	`°∫˝y
(
Æt_bö_fûíame
, 
bö_fûíame
, (alt_bin_filename));

1290 
Æt_bö_fûíame
[
MAXPATHLEN
 - 1] = '\0';

1291 i‡(
	`°æí
(
Æt_bö_fûíame
) >= 4) {

1292 
p
 = 
Æt_bö_fûíame
 + 
	`°æí
(alt_bin_filename) - 4;

1293 
i
 = 0; i < (
exts
) / (exts[0]); i++) {

1294 
	`°r˝y
(
p
, 
exts
[
i
]);

1295 
tmpf
 = 
	`f›í
(
Æt_bö_fûíame
, "rb");

1296 i‡(
tmpf
 !
NULL
)

1300 i‡(
tmpf
 !
NULL
) {

1301 
bö_fûíame
 = 
Æt_bö_fûíame
;

1302 
	`f˛o£
(
cdH™dÀ
);

1303 
cdH™dÀ
 = 
tmpf
;

1304 
	`f£ek
(
cdH™dÀ
, 0, 
SEEK_END
);

1309 i‡(
	`·ñl
(
cdH™dÀ
) % 2048 == 0) {

1310 
modeTe°
 = 0;

1311 
	`f£ek
(
cdH™dÀ
, 0, 
SEEK_SET
);

1312 
	`‰ód
(&
modeTe°
, 4, 1, 
cdH™dÀ
);

1313 i‡(
	`SWAP32
(
modeTe°
) != 0xffffff00) {

1314 
	`SysPrötf
("[2048]");

1315 
isMode1ISO
 = 
TRUE
;

1318 
	`f£ek
(
cdH™dÀ
, 0, 
SEEK_SET
);

1320 
	`SysPrötf
(".\n");

1322 
	`PrötTøcks
();

1324 i‡(
subCh™Mixed
)

1325 
cdimg_ªad_func
 = 
cdªad_sub_mixed
;

1326 i‡(
isMode1ISO
)

1327 
cdimg_ªad_func
 = 
cdªad_2048
;

1330 i‡(
numåacks
 > 1 && 
ti
[1].
h™dÀ
 =
NULL
) {

1331 
ti
[1].
h™dÀ
 = 
	`f›í
(
bö_fûíame
, "rb");

1333 
cdda_cur_£˘‹
 = 0;

1334 
cdda_fûe_off£t
 = 0;

1337 
	}
}

1339 
CALLBACK
 
	$ISO˛o£
() {

1340 
i
;

1342 i‡(
cdH™dÀ
 !
NULL
) {

1343 
	`f˛o£
(
cdH™dÀ
);

1344 
cdH™dÀ
 = 
NULL
;

1346 i‡(
subH™dÀ
 !
NULL
) {

1347 
	`f˛o£
(
subH™dÀ
);

1348 
subH™dÀ
 = 
NULL
;

1350 
	`°›CDDA
();

1351 
cddaH™dÀ
 = 
NULL
;

1353 i‡(
com¥_img
 !
NULL
) {

1354 
	`‰ì
(
com¥_img
->
ödex_èbÀ
);

1355 
	`‰ì
(
com¥_img
);

1356 
com¥_img
 = 
NULL
;

1359 
i
 = 1; i <
numåacks
; i++) {

1360 i‡(
ti
[
i
].
h™dÀ
 !
NULL
) {

1361 
	`f˛o£
(
ti
[
i
].
h™dÀ
);

1362 
ti
[
i
].
h™dÀ
 = 
NULL
;

1365 
numåacks
 = 0;

1366 
ti
[1].
ty≥
 = 0;

1367 
	`U∆ﬂdSBI
();

1369 
	`mem£t
(
cdbuf„r
, 0, (cdbuffer));

1370 
CDR_gëBuf„r
 = 
ISOgëBuf„r
;

1373 
	}
}

1375 
CALLBACK
 
	$ISOöô
() {

1376 
	`as£π
(
cdH™dÀ
 =
NULL
);

1377 
	`as£π
(
subH™dÀ
 =
NULL
);

1380 
	}
}

1382 
CALLBACK
 
	$ISOshutdown
() {

1383 
	`ISO˛o£
();

1385 
	}
}

1391 
CALLBACK
 
	$ISOgëTN
(*
buf„r
) {

1392 
buf„r
[0] = 1;

1394 i‡(
numåacks
 > 0) {

1395 
buf„r
[1] = 
numåacks
;

1398 
buf„r
[1] = 1;

1402 
	}
}

1409 
CALLBACK
 
	$ISOgëTD
(
åack
, *
buf„r
) {

1410 i‡(
åack
 == 0) {

1411 
£˘
;

1412 
time
[3];

1413 
£˘
 = 
	`msf2£c
(
ti
[
numåacks
].
°¨t
Ë+ msf2£c—i[numåacks].
Àngth
);

1414 
	`£c2msf
(
£˘
, (*)
time
);

1415 
buf„r
[2] = 
time
[0];

1416 
buf„r
[1] = 
time
[1];

1417 
buf„r
[0] = 
time
[2];

1419 i‡(
numåacks
 > 0 && 
åack
 <=Çumtracks) {

1420 
buf„r
[2] = 
ti
[
åack
].
°¨t
[0];

1421 
buf„r
[1] = 
ti
[
åack
].
°¨t
[1];

1422 
buf„r
[0] = 
ti
[
åack
].
°¨t
[2];

1425 
buf„r
[2] = 0;

1426 
buf„r
[1] = 2;

1427 
buf„r
[0] = 0;

1431 
	}
}

1434 
	$DecodeRawSubD©a
() {

1435 
subQD©a
[12];

1436 
i
;

1438 
	`mem£t
(
subQD©a
, 0, (subQData));

1440 
i
 = 0; i < 8 * 12; i++) {

1441 i‡(
subbuf„r
[
i
] & (1 << 6)) {

1442 
subQD©a
[
i
 >> 3] |= (1 << (7 - (i & 7)));

1446 
	`mem˝y
(&
subbuf„r
[12], 
subQD©a
, 12);

1447 
	}
}

1452 
CALLBACK
 
	$ISOªadTøck
(*
time
) {

1453 
£˘‹
 = 
	`MSF2SECT
(
	`btoi
(
time
[0]), btoi(time[1]), btoi(time[2]));

1454 
ªt
;

1456 i‡(
cdH™dÀ
 =
NULL
) {

1460 i‡(
¥eg≠Off£t
) {

1461 
subCh™Missög
 = 
FALSE
;

1462 i‡(
£˘‹
 >
¥eg≠Off£t
) {

1463 
£˘‹
 -= 2 * 75;

1464 i‡(
£˘‹
 < 
¥eg≠Off£t
)

1465 
subCh™Missög
 = 
TRUE
;

1469 
ªt
 = 
	`cdimg_ªad_func
(
cdH™dÀ
, 0, 
cdbuf„r
, 
£˘‹
);

1470 i‡(
ªt
 < 0)

1473 i‡(
subH™dÀ
 !
NULL
) {

1474 
	`f£ek
(
subH™dÀ
, 
£˘‹
 * 
SUB_FRAMESIZE
, 
SEEK_SET
);

1475 
	`‰ód
(
subbuf„r
, 1, 
SUB_FRAMESIZE
, 
subH™dÀ
);

1477 i‡(
subCh™Raw
Ë
	`DecodeRawSubD©a
();

1481 
	}
}

1486 
CALLBACK
 
	$ISO∂ay
(*
time
) {

1487 
i
;

1489 i‡(
numåacks
 <= 1)

1493 
cdda_cur_£˘‹
 = 
	`msf2£c
((*)
time
);

1494 
i
 = 
numåacks
; i > 1; i--) {

1495 
cdda_fú°_£˘‹
 = 
	`msf2£c
(
ti
[
i
].
°¨t
);

1496 i‡(
cdda_fú°_£˘‹
 <
cdda_cur_£˘‹
 + 2 * 75)

1499 
cdda_fûe_off£t
 = 
ti
[
i
].
°¨t_off£t
;

1502 ; 
i
 > 1; i--)

1503 i‡(
ti
[
i
].
h™dÀ
 !
NULL
)

1506 
cddaH™dÀ
 = 
ti
[
i
].
h™dÀ
;

1508 i‡(
SPU_∂ayCDDAch™√l
 !
NULL
)

1509 
	`°¨tCDDA
();

1512 
	}
}

1515 
CALLBACK
 
	$ISO°›
() {

1516 
	`°›CDDA
();

1518 
	}
}

1521 * 
CALLBACK
 
	$ISOgëBuf„rSub
() {

1522 i‡((
subH™dÀ
 !
NULL
 || 
subCh™Mixed
Ë&& !
subCh™Missög
) {

1523  
subbuf„r
;

1526  
NULL
;

1527 
	}
}

1529 
CALLBACK
 
	$ISOgëSètus
(
CdrSèt
 *
°©
) {

1530 
u32
 
£˘
;

1532 
	`CDR__gëSètus
(
°©
);

1534 i‡(
∂ayög
) {

1535 
°©
->
Ty≥
 = 0x02;

1536 
°©
->
Sètus
 |= 0x80;

1540 
°©
->
Ty≥
 = 
ti
[1].
ty≥
;

1544 
£˘
 = 
cddaCurPos
;

1545 
	`£c2msf
(
£˘
, (*)
°©
->
Time
);

1548 
	}
}

1551 
CALLBACK
 
	$ISOªadCDDA
(
m
, 
s
, 
f
, *
buf„r
) {

1552 
msf
[3] = {
m
, 
s
, 
f
};

1553 
fûe
, 
åack
, 
åack_°¨t
 = 0;

1554 
ªt
;

1556 
cddaCurPos
 = 
	`msf2£c
((*)
msf
);

1559 
åack
 = 
numåacks
; ;Årack--) {

1560 
åack_°¨t
 = 
	`msf2£c
(
ti
[
åack
].
°¨t
);

1561 i‡(
åack_°¨t
 <
cddaCurPos
)

1563 i‡(
åack
 == 1)

1568 i‡(
ti
[
åack
].
ty≥
 !
CDDA
) {

1569 
	`mem£t
(
buf„r
, 0, 
CD_FRAMESIZE_RAW
);

1573 
fûe
 = 1;

1574 i‡(
mu…ifûe
) {

1576 
fûe
 = 
åack
; file > 1; file--)

1577 i‡(
ti
[
fûe
].
h™dÀ
 !
NULL
)

1581 
ªt
 = 
	`cdimg_ªad_func
(
ti
[
fûe
].
h™dÀ
,Åi[
åack
].
°¨t_off£t
,

1582 
buf„r
, 
cddaCurPos
 - 
åack_°¨t
);

1583 i‡(
ªt
 !
CD_FRAMESIZE_RAW
) {

1584 
	`mem£t
(
buf„r
, 0, 
CD_FRAMESIZE_RAW
);

1588 i‡(
cddaBigEndün
) {

1589 
i
;

1590 
tmp
;

1592 
i
 = 0; i < 
CD_FRAMESIZE_RAW
 / 2; i++) {

1593 
tmp
 = 
buf„r
[
i
 * 2];

1594 
buf„r
[
i
 * 2] = buffer[i * 2 + 1];

1595 
buf„r
[
i
 * 2 + 1] = 
tmp
;

1600 
	}
}

1602 
	$cdrIsoInô
() {

1603 
CDR_öô
 = 
ISOöô
;

1604 
CDR_shutdown
 = 
ISOshutdown
;

1605 
CDR_›í
 = 
ISO›í
;

1606 
CDR_˛o£
 = 
ISO˛o£
;

1607 
CDR_gëTN
 = 
ISOgëTN
;

1608 
CDR_gëTD
 = 
ISOgëTD
;

1609 
CDR_ªadTøck
 = 
ISOªadTøck
;

1610 
CDR_gëBuf„r
 = 
ISOgëBuf„r
;

1611 
CDR_∂ay
 = 
ISO∂ay
;

1612 
CDR_°›
 = 
ISO°›
;

1613 
CDR_gëBuf„rSub
 = 
ISOgëBuf„rSub
;

1614 
CDR_gëSètus
 = 
ISOgëSètus
;

1615 
CDR_ªadCDDA
 = 
ISOªadCDDA
;

1617 
CDR_gëDriveLëãr
 = 
CDR__gëDriveLëãr
;

1618 
CDR_c⁄figuª
 = 
CDR__c⁄figuª
;

1619 
CDR_ã°
 = 
CDR__ã°
;

1620 
CDR_about
 = 
CDR__about
;

1621 
CDR_£tfûíame
 = 
CDR__£tfûíame
;

1623 
numåacks
 = 0;

1624 
	}
}

1626 
	$cdrIsoA˘ive
() {

1627  (
cdH™dÀ
 !
NULL
);

1628 
	}
}

	@libpcsxcore/cdriso.h

21 #i‚de‡
CDRISO_H


22 
	#CDRISO_H


	)

24 #ifde‡
__˝lu•lus


28 
cdrIsoInô
();

29 
cdrIsoA˘ive
();

31 
cdrIsoMu…idiskCou¡
;

32 
cdrIsoMu…idiskSñe˘
;

34 #ifde‡
__˝lu•lus


	@libpcsxcore/cdrom.c

24 
	~"cdrom.h
"

25 
	~"µf.h
"

26 
	~"psxdma.h
"

30 
	#CDR_LOG
 
SysPrötf


	)

32 
	#CDR_LOG
(...)

	)

35 
	#CDR_LOG_I
 
SysPrötf


	)

37 
	#CDR_LOG_I
(...)

	)

40 
	#CDR_LOG_IO
 
SysPrötf


	)

42 
	#CDR_LOG_IO
(...)

	)

46 
cdrSåu˘
 
	gcdr
;

47 *
	gpTøns„r
;

50 
	#CdlSync
 0

	)

51 
	#CdlN›
 1

	)

52 
	#CdlSëloc
 2

	)

53 
	#CdlPœy
 3

	)

54 
	#CdlF‹w¨d
 4

	)

55 
	#CdlBackw¨d
 5

	)

56 
	#CdlRódN
 6

	)

57 
	#CdlSèndby
 7

	)

58 
	#CdlSt›
 8

	)

59 
	#CdlPau£
 9

	)

60 
	#CdlInô
 10

	)

61 
	#CdlMuã
 11

	)

62 
	#CdlDemuã
 12

	)

63 
	#CdlSëfûãr
 13

	)

64 
	#CdlSëmode
 14

	)

65 
	#CdlGëmode
 15

	)

66 
	#CdlGëlocL
 16

	)

67 
	#CdlGëlocP
 17

	)

68 
	#CdlRódT
 18

	)

69 
	#CdlGëTN
 19

	)

70 
	#CdlGëTD
 20

	)

71 
	#CdlSìkL
 21

	)

72 
	#CdlSìkP
 22

	)

73 
	#CdlSë˛ock
 23

	)

74 
	#CdlGë˛ock
 24

	)

75 
	#CdlTe°
 25

	)

76 
	#CdlID
 26

	)

77 
	#CdlRódS
 27

	)

78 
	#CdlRe£t
 28

	)

79 
	#CdlGëQ
 29

	)

80 
	#CdlRódToc
 30

	)

82 *
	gCmdName
[0x100]= {

90 "CdlRe£t", 
NULL
, "CDlReadToc", NULL

93 
	gTe°04
[] = { 0 };

94 
	gTe°05
[] = { 0 };

95 
	gTe°20
[] = { 0x98, 0x06, 0x10, 0xC3 };

96 
	gTe°22
[] = { 0x66, 0x6F, 0x72, 0x20, 0x45, 0x75, 0x72, 0x6F };

97 
	gTe°23
[] = { 0x43, 0x58, 0x44, 0x32, 0x39 ,0x34, 0x30, 0x51 };

100 
	#NoI¡r
 0

	)

101 
	#D©aRódy
 1

	)

102 
	#Com∂ëe
 2

	)

103 
	#AcknowÀdge
 3

	)

104 
	#D©aEnd
 4

	)

105 
	#DiskEº‹
 5

	)

108 
	#MODE_SPEED
 (1<<7)

109 
	#MODE_STRSND
 (1<<6)

110 
	#MODE_SIZE_2340
 (1<<5)

111 
	#MODE_SIZE_2328
 (1<<4)

112 
	#MODE_SIZE_2048
 (0<<4)

113 
	#MODE_SF
 (1<<3)

114 
	#MODE_REPORT
 (1<<2)

115 
	#MODE_AUTOPAUSE
 (1<<1)

116 
	#MODE_CDDA
 (1<<0)

117 

	)

119 
	#STATUS_PLAY
 (1<<7)

120 
	#STATUS_SEEK
 (1<<6)

121 
	#STATUS_READ
 (1<<5)

122 
	#STATUS_SHELLOPEN
 (1<<4)

123 
	#STATUS_UNKNOWN3
 (1<<3)

124 
	#STATUS_UNKNOWN2
 (1<<2)

125 
	#STATUS_ROTATING
 (1<<1)

126 
	#STATUS_ERROR
 (1<<0)

127 

	)

129 
	#ERROR_NOTREADY
 (1<<7)

130 
	#ERROR_INVALIDCMD
 (1<<6)

131 
	#ERROR_INVALIDARG
 (1<<5)

132 

	)

136 
	#cdRódTime
 (
PSXCLK
 / 75)

	)

138 
	edrive_°©e
 {

139 
	mDRIVESTATE_STANDBY
 = 0,

140 
	mDRIVESTATE_LID_OPEN
,

141 
	mDRIVESTATE_RESCAN_CD
,

142 
	mDRIVESTATE_PREPARE_CD
,

143 
	mDRIVESTATE_STOPPED
,

147 
	e£eked_°©e
 {

148 
	mSEEK_PENDING
 = 0,

149 
	mSEEK_DONE
 = 1,

152 
CdrSèt
 
	g°©
;

154 
	$msf2£c
(c⁄° 
u8
 *
msf
) {

155  ((
msf
[0] * 60 + msf[1]) * 75) + msf[2];

156 
	}
}

159 
	$fsm2£c
(c⁄° 
u8
 *
msf
) {

160  ((
msf
[2] * 60 + msf[1]) * 75) + msf[0];

161 
	}
}

163 
	$£c2msf
(
s
, 
u8
 *
msf
) {

164 
msf
[0] = 
s
 / 75 / 60;

165 
s
 = s - 
msf
[0] * 75 * 60;

166 
msf
[1] = 
s
 / 75;

167 
s
 = s - 
msf
[1] * 75;

168 
msf
[2] = 
s
;

169 
	}
}

172 
	#CDR_INT
(
eCy˛e
) { \

173 
psxRegs
.
öãºu±
 |(1 << 
PSXINT_CDR
); \

174 
psxRegs
.
ötCy˛e
[
PSXINT_CDR
].
cy˛e
 = 
eCy˛e
; \

175 
psxRegs
.
ötCy˛e
[
PSXINT_CDR
].
sCy˛e
 =ÖsxRegs.
cy˛e
; \

176 
	`√w_dy«_£t_evít
(
PSXINT_CDR
, 
eCy˛e
); \

177 }

	)

180 
	#CDREAD_INT
(
eCy˛e
) { \

181 
psxRegs
.
öãºu±
 |(1 << 
PSXINT_CDREAD
); \

182 
psxRegs
.
ötCy˛e
[
PSXINT_CDREAD
].
cy˛e
 = 
eCy˛e
; \

183 
psxRegs
.
ötCy˛e
[
PSXINT_CDREAD
].
sCy˛e
 =ÖsxRegs.
cy˛e
; \

184 
	`√w_dy«_£t_evít
(
PSXINT_CDREAD
, 
eCy˛e
); \

185 }

	)

188 
	#CDRLID_INT
(
eCy˛e
) { \

189 
psxRegs
.
öãºu±
 |(1 << 
PSXINT_CDRLID
); \

190 
psxRegs
.
ötCy˛e
[
PSXINT_CDRLID
].
cy˛e
 = 
eCy˛e
; \

191 
psxRegs
.
ötCy˛e
[
PSXINT_CDRLID
].
sCy˛e
 =ÖsxRegs.
cy˛e
; \

192 
	`√w_dy«_£t_evít
(
PSXINT_CDRLID
, 
eCy˛e
); \

193 }

	)

196 
	#CDRMISC_INT
(
eCy˛e
) { \

197 
psxRegs
.
öãºu±
 |(1 << 
PSXINT_CDRPLAY
); \

198 
psxRegs
.
ötCy˛e
[
PSXINT_CDRPLAY
].
cy˛e
 = 
eCy˛e
; \

199 
psxRegs
.
ötCy˛e
[
PSXINT_CDRPLAY
].
sCy˛e
 =ÖsxRegs.
cy˛e
; \

200 
	`√w_dy«_£t_evít
(
PSXINT_CDRPLAY
, 
eCy˛e
); \

201 }

	)

203 
	#St›Ródög
() { \

204 i‡(
cdr
.
Ródög
) { \

205 
cdr
.
Ródög
 = 0; \

206 
psxRegs
.
öãºu±
 &~(1 << 
PSXINT_CDREAD
); \

208 
cdr
.
SètP
 &~(
STATUS_READ
|
STATUS_SEEK
);\

209 }

	)

211 
	#St›Cdda
() { \

212 i‡(
cdr
.
Pœy
) { \

213 i‡(!
C⁄fig
.
Cdda
Ë
	`CDR_°›
(); \

214 
cdr
.
SètP
 &~
STATUS_PLAY
; \

215 
cdr
.
Pœy
 = 
FALSE
; \

216 
cdr
.
Fa°F‹w¨d
 = 0; \

217 
cdr
.
Fa°Backw¨d
 = 0; \

220 }

	)

222 
	#SëResu…Size
(
size
) { \

223 
cdr
.
Resu…P
 = 0; \

224 
cdr
.
Resu…C
 = 
size
; \

225 
cdr
.
Resu…Ródy
 = 1; \

226 }

	)

228 
	$£tIrq
()

230 i‡(
cdr
.
Sèt
 & cdr.
Reg2
)

231 
	`psxHu32ªf
(0x1070Ë|
	`SWAP32
((
u32
)0x4);

232 
	}
}

236 
	$cdrLidSìkI¡îru±
()

238 
cdr
.
DriveSèã
) {

240 
DRIVESTATE_STANDBY
:

241 
cdr
.
SètP
 &~
STATUS_SEEK
;

243 i‡(
	`CDR_gëSètus
(&
°©
) == -1)

246 i‡(
°©
.
Sètus
 & 
STATUS_SHELLOPEN
)

248 
	`St›Cdda
();

249 
cdr
.
DriveSèã
 = 
DRIVESTATE_LID_OPEN
;

250 
	`CDRLID_INT
(0x800);

254 
DRIVESTATE_LID_OPEN
:

255 i‡(
	`CDR_gëSètus
(&
°©
) == -1)

256 
°©
.
Sètus
 &~
STATUS_SHELLOPEN
;

259 i‡(!(
cdr
.
SètP
 & 
STATUS_SHELLOPEN
)) {

260 
	`St›Ródög
();

261 
cdr
.
SètP
 |
STATUS_SHELLOPEN
;

267 
	`CDRLID_INT
(
cdRódTime
 * 30);

270 i‡(
cdr
.
SètP
 & 
STATUS_ROTATING
) {

271 
cdr
.
SètP
 &~
STATUS_ROTATING
;

273 i‡(!(
°©
.
Sètus
 & 
STATUS_SHELLOPEN
)) {

275 
	`CheckCdrom
();

280 
cdr
.
DriveSèã
 = 
DRIVESTATE_RESCAN_CD
;

281 
	`CDRLID_INT
(
cdRódTime
 * 105);

286 
	`CDRLID_INT
(
cdRódTime
 * 3);

289 
DRIVESTATE_RESCAN_CD
:

290 
cdr
.
SètP
 |
STATUS_ROTATING
;

291 
cdr
.
DriveSèã
 = 
DRIVESTATE_PREPARE_CD
;

295 
	`CDRLID_INT
(
cdRódTime
 * 150);

298 
DRIVESTATE_PREPARE_CD
:

299 
cdr
.
SètP
 |
STATUS_SEEK
;

301 
cdr
.
DriveSèã
 = 
DRIVESTATE_STANDBY
;

302 
	`CDRLID_INT
(
cdRódTime
 * 26);

305 
	}
}

307 
	$Föd_CurTøck
(c⁄° 
u8
 *
time
)

309 
cuºít
, 
£˘
;

311 
cuºít
 = 
	`msf2£c
(
time
);

313 
cdr
.
CurTøck
 = 1; cdr.CurTøck < cdr.
Resu…TN
[1]; cdr.CurTrack++) {

314 
	`CDR_gëTD
(
cdr
.
CurTøck
 + 1, cdr.
Resu…TD
);

315 
£˘
 = 
	`fsm2£c
(
cdr
.
Resu…TD
);

316 i‡(
£˘
 - 
cuºít
 >= 150)

319 
	}
}

321 
	$gíî©e_subq
(c⁄° 
u8
 *
time
)

323 
°¨t
[3], 
√xt
[3];

324 
this_s
, 
°¨t_s
, 
√xt_s
, 
¥eg≠
;

325 
ªœtive_s
;

327 
	`CDR_gëTD
(
cdr
.
CurTøck
, 
°¨t
);

328 i‡(
cdr
.
CurTøck
 + 1 <cdr.
Resu…TN
[1]) {

329 
¥eg≠
 = 150;

330 
	`CDR_gëTD
(
cdr
.
CurTøck
 + 1, 
√xt
);

334 
¥eg≠
 = 0;

335 
√xt
[0] = 
cdr
.
SëSe˘‹End
[2];

336 
√xt
[1] = 
cdr
.
SëSe˘‹End
[1];

337 
√xt
[2] = 
cdr
.
SëSe˘‹End
[0];

340 
this_s
 = 
	`msf2£c
(
time
);

341 
°¨t_s
 = 
	`fsm2£c
(
°¨t
);

342 
√xt_s
 = 
	`fsm2£c
(
√xt
);

344 
cdr
.
TøckCh™ged
 = 
FALSE
;

346 i‡(
√xt_s
 - 
this_s
 < 
¥eg≠
) {

347 
cdr
.
TøckCh™ged
 = 
TRUE
;

348 
cdr
.
CurTøck
++;

349 
°¨t_s
 = 
√xt_s
;

352 
cdr
.
subq
.
Index
 = 1;

354 
ªœtive_s
 = 
this_s
 - 
°¨t_s
;

355 i‡(
ªœtive_s
 < 0) {

356 
cdr
.
subq
.
Index
 = 0;

357 
ªœtive_s
 = -relative_s;

359 
	`£c2msf
(
ªœtive_s
, 
cdr
.
subq
.
Rñ©ive
);

361 
cdr
.
subq
.
Tøck
 = 
	`ôob
(cdr.
CurTøck
);

362 
cdr
.
subq
.
Rñ©ive
[0] = 
	`ôob
(cdr.subq.Relative[0]);

363 
cdr
.
subq
.
Rñ©ive
[1] = 
	`ôob
(cdr.subq.Relative[1]);

364 
cdr
.
subq
.
Rñ©ive
[2] = 
	`ôob
(cdr.subq.Relative[2]);

365 
cdr
.
subq
.
Absﬁuã
[0] = 
	`ôob
(
time
[0]);

366 
cdr
.
subq
.
Absﬁuã
[1] = 
	`ôob
(
time
[1]);

367 
cdr
.
subq
.
Absﬁuã
[2] = 
	`ôob
(
time
[2]);

368 
	}
}

370 
	$RódTøck
(c⁄° 
u8
 *
time
) {

371 
tmp
[3];

372 
SubQ
 *
subq
;

373 
u16
 
¸c
;

375 
tmp
[0] = 
	`ôob
(
time
[0]);

376 
tmp
[1] = 
	`ôob
(
time
[1]);

377 
tmp
[2] = 
	`ôob
(
time
[2]);

379 i‡(
	`memcmp
(
cdr
.
Pªv
, 
tmp
, 3) == 0)

382 
	`CDR_LOG
("RódTøck *** %02x:%02x:%02x\n", 
tmp
[0],Åmp[1],Åmp[2]);

384 
cdr
.
REº
 = 
	`CDR_ªadTøck
(
tmp
);

385 
	`mem˝y
(
cdr
.
Pªv
, 
tmp
, 3);

387 i‡(
	`CheckSBI
(
time
))

390 
subq
 = (
SubQ
 *)
	`CDR_gëBuf„rSub
();

391 i‡(
subq
 !
NULL
 && 
cdr
.
CurTøck
 == 1) {

392 
¸c
 = 
	`ˇlcCrc
((
u8
 *)
subq
 + 12, 10);

393 i‡(
¸c
 =(((
u16
)
subq
->
CRC
[0] << 8) | subq->CRC[1])) {

394 
cdr
.
subq
.
Tøck
 = subq->
TøckNumbî
;

395 
cdr
.
subq
.
Index
 = subq->
IndexNumbî
;

396 
	`mem˝y
(
cdr
.
subq
.
Rñ©ive
, subq->
TøckRñ©iveAddªss
, 3);

397 
	`mem˝y
(
cdr
.
subq
.
Absﬁuã
, subq->
AbsﬁuãAddªss
, 3);

400 
	`CDR_LOG_I
("subq bad crc @%02x:%02x:%02x\n",

401 
tmp
[0],Åmp[1],Åmp[2]);

405 
	`gíî©e_subq
(
time
);

408 
	`CDR_LOG
(" -> %02x,%02x %02x:%02x:%02x %02x:%02x:%02x\n",

409 
cdr
.
subq
.
Tøck
, cdr.subq.
Index
,

410 
cdr
.
subq
.
Rñ©ive
[0], cdr.subq.Relative[1], cdr.subq.Relative[2],

411 
cdr
.
subq
.
Absﬁuã
[0], cdr.subq.Absolute[1], cdr.subq.Absolute[2]);

412 
	}
}

414 
	$AddIrqQueue
(
úq
, 
ecy˛e
) {

415 i‡(
cdr
.
Irq
 != 0) {

416 i‡(
úq
 =
cdr
.
Irq
 || irq + 0x100 == cdr.Irq) {

417 
cdr
.
IrqRïóãd
 = 1;

418 
	`CDR_INT
(
ecy˛e
);

422 
	`CDR_LOG_I
("cdr: ovîridêcmd %02x -> %02x\n", 
cdr
.
Irq
, 
úq
);

425 
cdr
.
Irq
 = 
úq
;

426 
cdr
.
eCy˛e
 = 
ecy˛e
;

428 
	`CDR_INT
(
ecy˛e
);

429 
	}
}

431 
	$cdrPœyI¡îru±_Aut›au£
()

433 i‡((
cdr
.
Mode
 & 
MODE_AUTOPAUSE
Ë&& cdr.
TøckCh™ged
) {

434 
	`CDR_LOG
( "CDDA STOP\n" );

442 
cdr
.
Sèt
 = 
D©aEnd
;

443 
	`£tIrq
();

445 
	`St›Cdda
();

447 i‡(
cdr
.
Mode
 & 
MODE_REPORT
) {

449 
cdr
.
Resu…
[0] = cdr.
SètP
;

450 
cdr
.
Resu…
[1] = cdr.
subq
.
Tøck
;

451 
cdr
.
Resu…
[2] = cdr.
subq
.
Index
;

453 i‡(
cdr
.
subq
.
Absﬁuã
[2] & 0x10) {

454 
cdr
.
Resu…
[3] = cdr.
subq
.
Rñ©ive
[0];

455 
cdr
.
Resu…
[4] = cdr.
subq
.
Rñ©ive
[1] | 0x80;

456 
cdr
.
Resu…
[5] = cdr.
subq
.
Rñ©ive
[2];

459 
cdr
.
Resu…
[3] = cdr.
subq
.
Absﬁuã
[0];

460 
cdr
.
Resu…
[4] = cdr.
subq
.
Absﬁuã
[1];

461 
cdr
.
Resu…
[5] = cdr.
subq
.
Absﬁuã
[2];

464 
cdr
.
Resu…
[6] = 0;

465 
cdr
.
Resu…
[7] = 0;

468 
cdr
.
Resu…Ródy
 = 1;

469 
cdr
.
Sèt
 = 
D©aRódy
;

471 
	`SëResu…Size
(8);

472 
	`£tIrq
();

474 
	}
}

477 
	$cdrPœyI¡îru±
()

479 i‡(
cdr
.
Sìked
 =
SEEK_PENDING
) {

480 i‡(
cdr
.
Sèt
) {

481 
	`CDR_LOG_I
("cdrom: seek stat hack\n");

482 
	`CDRMISC_INT
(0x1000);

485 
	`SëResu…Size
(1);

486 
cdr
.
SètP
 |
STATUS_ROTATING
;

487 
cdr
.
SètP
 &~
STATUS_SEEK
;

488 
cdr
.
Resu…
[0] = cdr.
SètP
;

489 
cdr
.
Sìked
 = 
SEEK_DONE
;

490 i‡(
cdr
.
Irq
 == 0) {

491 
cdr
.
Sèt
 = 
Com∂ëe
;

492 
	`£tIrq
();

495 i‡(
cdr
.
SëlocPídög
) {

496 
	`mem˝y
(
cdr
.
SëSe˘‹Pœy
, cdr.
SëSe˘‹
, 4);

497 
cdr
.
SëlocPídög
 = 0;

499 
	`Föd_CurTøck
(
cdr
.
SëSe˘‹Pœy
);

500 
	`RódTøck
(
cdr
.
SëSe˘‹Pœy
);

501 
cdr
.
TøckCh™ged
 = 
FALSE
;

504 i‡(!
cdr
.
Pœy
) ;

506 
	`CDR_LOG
( "CDDA - %d:%d:%d\n",

507 
cdr
.
SëSe˘‹Pœy
[0], cdr.SetSectorPlay[1], cdr.SetSectorPlay[2] );

509 i‡(
	`memcmp
(
cdr
.
SëSe˘‹Pœy
, cdr.
SëSe˘‹End
, 3) == 0) {

510 
	`St›Cdda
();

511 
cdr
.
TøckCh™ged
 = 
TRUE
;

514 i‡(!
cdr
.
Irq
 && !cdr.
Sèt
 && (cdr.
Mode
 & (
MODE_AUTOPAUSE
|
MODE_REPORT
)))

515 
	`cdrPœyI¡îru±_Aut›au£
();

517 i‡(!
cdr
.
Pœy
) ;

519 
cdr
.
SëSe˘‹Pœy
[2]++;

520 i‡(
cdr
.
SëSe˘‹Pœy
[2] == 75) {

521 
cdr
.
SëSe˘‹Pœy
[2] = 0;

522 
cdr
.
SëSe˘‹Pœy
[1]++;

523 i‡(
cdr
.
SëSe˘‹Pœy
[1] == 60) {

524 
cdr
.
SëSe˘‹Pœy
[1] = 0;

525 
cdr
.
SëSe˘‹Pœy
[0]++;

529 
	`CDRMISC_INT
(
cdRódTime
);

532 
	`gíî©e_subq
(
cdr
.
SëSe˘‹Pœy
);

533 
	}
}

535 
	$cdrI¡îru±
() {

536 
u16
 
Irq
 = 
cdr
.Irq;

537 
no_busy_îr‹
 = 0;

538 
°¨t_rŸ©ög
 = 0;

539 
îr‹
 = 0;

540 
dñay
;

543 i‡(
cdr
.
Sèt
) {

544 
	`CDR_LOG_I
("cdrom: sèàhack: %02x %x\n", 
cdr
.
Irq
, cdr.
Sèt
);

545 
	`CDR_INT
(0x1000);

549 
cdr
.
Cål
 &= ~0x80;

552 
	`SëResu…Size
(1);

553 
cdr
.
Resu…
[0] = cdr.
SètP
;

554 
cdr
.
Sèt
 = 
AcknowÀdge
;

556 i‡(
cdr
.
IrqRïóãd
) {

557 
cdr
.
IrqRïóãd
 = 0;

558 i‡(
cdr
.
eCy˛e
 > 
psxRegs
.
cy˛e
) {

559 
	`CDR_INT
(
cdr
.
eCy˛e
);

560 
föish
;

564 
cdr
.
Irq
 = 0;

566 
Irq
) {

567 
CdlSync
:

571 
CdlN›
:

572 i‡(
cdr
.
DriveSèã
 !
DRIVESTATE_LID_OPEN
)

573 
cdr
.
SètP
 &~
STATUS_SHELLOPEN
;

574 
no_busy_îr‹
 = 1;

577 
CdlSëloc
:

580 
do_CdlPœy
:

581 
CdlPœy
:

582 
	`St›Cdda
();

583 i‡(
cdr
.
Sìked
 =
SEEK_PENDING
) {

585 
cdr
.
Sìked
 = 
SEEK_DONE
;

587 i‡(
cdr
.
SëlocPídög
) {

588 
	`mem˝y
(
cdr
.
SëSe˘‹Pœy
, cdr.
SëSe˘‹
, 4);

589 
cdr
.
SëlocPídög
 = 0;

595 i‡(
cdr
.
P¨amC
 =0 || cdr.
P¨am
[0] == 0) {

596 
	`CDR_LOG
("PLAY Resume @ %d:%d:%d\n",

597 
cdr
.
SëSe˘‹Pœy
[0], cdr.SetSectorPlay[1], cdr.SetSectorPlay[2]);

601 
åack
 = 
	`btoi
–
cdr
.
P¨am
[0] );

603 i‡(
åack
 <
cdr
.
Resu…TN
[1])

604 
cdr
.
CurTøck
 = 
åack
;

606 
	`CDR_LOG
("PLAYÅøck %d\n", 
cdr
.
CurTøck
);

608 i‡(
	`CDR_gëTD
((
u8
)
cdr
.
CurTøck
, cdr.
Resu…TD
) != -1) {

609 
cdr
.
SëSe˘‹Pœy
[0] = cdr.
Resu…TD
[2];

610 
cdr
.
SëSe˘‹Pœy
[1] = cdr.
Resu…TD
[1];

611 
cdr
.
SëSe˘‹Pœy
[2] = cdr.
Resu…TD
[0];

625 
	`Föd_CurTøck
(
cdr
.
SëSe˘‹Pœy
);

626 
	`RódTøck
(
cdr
.
SëSe˘‹Pœy
);

627 
cdr
.
TøckCh™ged
 = 
FALSE
;

629 i‡(!
C⁄fig
.
Cdda
)

630 
	`CDR_∂ay
(
cdr
.
SëSe˘‹Pœy
);

633 
cdr
.
SètP
 &~
STATUS_SEEK
;

634 
cdr
.
Resu…
[0] = cdr.
SètP
;

636 
cdr
.
SètP
 |
STATUS_PLAY
;

639 
cdr
.
Pœy
 = 
TRUE
;

641 
	`CDRMISC_INT
–
cdRódTime
 );

642 
°¨t_rŸ©ög
 = 1;

645 
CdlF‹w¨d
:

647 
cdr
.
Sèt
 = 
Com∂ëe
;

650 if–
cdr
.
Fa°F‹w¨d
 == 0 ) cdr.FastForward = 2;

651 
cdr
.
Fa°F‹w¨d
++;

653 
cdr
.
Fa°Backw¨d
 = 0;

656 
CdlBackw¨d
:

657 
cdr
.
Sèt
 = 
Com∂ëe
;

660 if–
cdr
.
Fa°Backw¨d
 == 0 ) cdr.FastBackward = 2;

661 
cdr
.
Fa°Backw¨d
++;

663 
cdr
.
Fa°F‹w¨d
 = 0;

666 
CdlSèndby
:

667 i‡(
cdr
.
DriveSèã
 !
DRIVESTATE_STOPPED
) {

668 
îr‹
 = 
ERROR_INVALIDARG
;

669 
£t_îr‹
;

671 
	`AddIrqQueue
(
CdlSèndby
 + 0x100, 
cdRódTime
 * 125 / 2);

672 
°¨t_rŸ©ög
 = 1;

675 
CdlSèndby
 + 0x100:

676 
cdr
.
Sèt
 = 
Com∂ëe
;

679 
CdlSt›
:

680 i‡(
cdr
.
Pœy
) {

682 
	`CDR_gëTD
((
u8
)(
cdr
.
CurTøck
), cdr.
Resu…TD
);

684 
cdr
.
SëSe˘‹Pœy
[0] = cdr.
Resu…TD
[2];

685 
cdr
.
SëSe˘‹Pœy
[1] = cdr.
Resu…TD
[1];

686 
cdr
.
SëSe˘‹Pœy
[2] = cdr.
Resu…TD
[0];

689 
	`St›Cdda
();

690 
	`St›Ródög
();

692 
dñay
 = 0x800;

693 i‡(
cdr
.
DriveSèã
 =
DRIVESTATE_STANDBY
)

694 
dñay
 = 
cdRódTime
 * 30 / 2;

696 
cdr
.
DriveSèã
 = 
DRIVESTATE_STOPPED
;

697 
	`AddIrqQueue
(
CdlSt›
 + 0x100, 
dñay
);

700 
CdlSt›
 + 0x100:

701 
cdr
.
SètP
 &~
STATUS_ROTATING
;

702 
cdr
.
Resu…
[0] = cdr.
SètP
;

703 
cdr
.
Sèt
 = 
Com∂ëe
;

706 
CdlPau£
:

717 
	`AddIrqQueue
(
CdlPau£
 + 0x100, 
cdRódTime
 * 3);

718 
cdr
.
Cål
 |= 0x80;

721 
CdlPau£
 + 0x100:

722 
cdr
.
SètP
 &~
STATUS_READ
;

723 
cdr
.
Resu…
[0] = cdr.
SètP
;

724 
cdr
.
Sèt
 = 
Com∂ëe
;

727 
CdlInô
:

728 
	`AddIrqQueue
(
CdlInô
 + 0x100, 
cdRódTime
 * 6);

729 
no_busy_îr‹
 = 1;

730 
°¨t_rŸ©ög
 = 1;

733 
CdlInô
 + 0x100:

734 
cdr
.
Sèt
 = 
Com∂ëe
;

737 
CdlMuã
:

738 
cdr
.
Muãd
 = 
TRUE
;

741 
CdlDemuã
:

742 
cdr
.
Muãd
 = 
FALSE
;

745 
CdlSëfûãr
:

746 
cdr
.
Fûe
 = cdr.
P¨am
[0];

747 
cdr
.
Ch™√l
 = cdr.
P¨am
[1];

750 
CdlSëmode
:

751 
no_busy_îr‹
 = 1;

754 
CdlGëmode
:

755 
	`SëResu…Size
(6);

756 
cdr
.
Resu…
[1] = cdr.
Mode
;

757 
cdr
.
Resu…
[2] = cdr.
Fûe
;

758 
cdr
.
Resu…
[3] = cdr.
Ch™√l
;

759 
cdr
.
Resu…
[4] = 0;

760 
cdr
.
Resu…
[5] = 0;

761 
no_busy_îr‹
 = 1;

764 
CdlGëlocL
:

765 
	`SëResu…Size
(8);

766 
	`mem˝y
(
cdr
.
Resu…
, cdr.
Tøns„r
, 8);

769 
CdlGëlocP
:

770 
	`SëResu…Size
(8);

771 
	`mem˝y
(&
cdr
.
Resu…
, &cdr.
subq
, 8);

773 i‡(!
cdr
.
Pœy
 && !cdr.
Ródög
)

774 
cdr
.
Resu…
[1] = 0;

777 
CdlRódT
:

779 
	`AddIrqQueue
(
CdlRódT
 + 0x100, 
cdRódTime
 * 290 / 4);

780 
°¨t_rŸ©ög
 = 1;

783 
CdlRódT
 + 0x100:

784 
cdr
.
Sèt
 = 
Com∂ëe
;

787 
CdlGëTN
:

788 
	`SëResu…Size
(3);

789 i‡(
	`CDR_gëTN
(
cdr
.
Resu…TN
) == -1) {

790 
cdr
.
Sèt
 = 
DiskEº‹
;

791 
cdr
.
Resu…
[0] |
STATUS_ERROR
;

793 
cdr
.
Sèt
 = 
AcknowÀdge
;

794 
cdr
.
Resu…
[1] = 
	`ôob
(cdr.
Resu…TN
[0]);

795 
cdr
.
Resu…
[2] = 
	`ôob
(cdr.
Resu…TN
[1]);

799 
CdlGëTD
:

800 
cdr
.
Tøck
 = 
	`btoi
(cdr.
P¨am
[0]);

801 
	`SëResu…Size
(4);

802 i‡(
	`CDR_gëTD
(
cdr
.
Tøck
, cdr.
Resu…TD
) == -1) {

803 
cdr
.
Sèt
 = 
DiskEº‹
;

804 
cdr
.
Resu…
[0] |
STATUS_ERROR
;

806 
cdr
.
Sèt
 = 
AcknowÀdge
;

807 
cdr
.
Resu…
[0] = cdr.
SètP
;

808 
cdr
.
Resu…
[1] = 
	`ôob
(cdr.
Resu…TD
[2]);

809 
cdr
.
Resu…
[2] = 
	`ôob
(cdr.
Resu…TD
[1]);

810 
cdr
.
Resu…
[3] = 
	`ôob
(cdr.
Resu…TD
[0]);

814 
CdlSìkL
:

815 
CdlSìkP
:

816 
	`St›Cdda
();

817 
	`St›Ródög
();

818 
cdr
.
SètP
 |
STATUS_SEEK
;

833 
	`CDRMISC_INT
(
cdr
.
Sìked
 =
SEEK_DONE
 ? 0x800 : 
cdRódTime
 * 4);

834 
cdr
.
Sìked
 = 
SEEK_PENDING
;

835 
°¨t_rŸ©ög
 = 1;

838 
CdlTe°
:

839 
cdr
.
P¨am
[0]) {

841 
	`SëResu…Size
(4);

842 
	`mem˝y
(
cdr
.
Resu…
, 
Te°20
, 4);

845 
	`SëResu…Size
(8);

846 
	`mem˝y
(
cdr
.
Resu…
, 
Te°22
, 4);

849 
	`SëResu…Size
(8);

850 
	`mem˝y
(
cdr
.
Resu…
, 
Te°23
, 4);

853 
no_busy_îr‹
 = 1;

856 
CdlID
:

857 
	`AddIrqQueue
(
CdlID
 + 0x100, 20480);

860 
CdlID
 + 0x100:

861 
	`SëResu…Size
(8);

862 
cdr
.
Resu…
[0] = cdr.
SètP
;

863 
cdr
.
Resu…
[1] = 0;

864 
cdr
.
Resu…
[2] = 0;

865 
cdr
.
Resu…
[3] = 0;

868 i‡(
	`CDR_gëSètus
(&
°©
Ë=-1 || sèt.
Ty≥
 == 0 || stat.Type == 0xff) {

869 
cdr
.
Resu…
[1] = 0xc0;

872 i‡(
°©
.
Ty≥
 == 2)

873 
cdr
.
Resu…
[1] |= 0x10;

874 i‡(
CdromId
[0] == '\0')

875 
cdr
.
Resu…
[1] |= 0x80;

877 
cdr
.
Resu…
[0] |= (cdr.Result[1] >> 4) & 0x08;

879 
	`°∫˝y
((*)&
cdr
.
Resu…
[4], "PCSX", 4);

880 
cdr
.
Sèt
 = 
Com∂ëe
;

883 
CdlRe£t
:

885 
cdr
.
SètP
 |
STATUS_SHELLOPEN
;

886 
cdr
.
DriveSèã
 = 
DRIVESTATE_RESCAN_CD
;

887 
	`CDRLID_INT
(20480);

888 
no_busy_îr‹
 = 1;

889 
°¨t_rŸ©ög
 = 1;

892 
CdlGëQ
:

894 
	`CDR_LOG_I
("got CdlGetQ\n");

897 
CdlRódToc
:

898 
	`AddIrqQueue
(
CdlRódToc
 + 0x100, 
cdRódTime
 * 180 / 4);

899 
no_busy_îr‹
 = 1;

900 
°¨t_rŸ©ög
 = 1;

903 
CdlRódToc
 + 0x100:

904 
cdr
.
Sèt
 = 
Com∂ëe
;

905 
no_busy_îr‹
 = 1;

908 
CdlRódN
:

909 
CdlRódS
:

910 i‡(
cdr
.
SëlocPídög
) {

911 
	`mem˝y
(
cdr
.
SëSe˘‹Pœy
, cdr.
SëSe˘‹
, 4);

912 
cdr
.
SëlocPídög
 = 0;

914 
	`Föd_CurTøck
(
cdr
.
SëSe˘‹Pœy
);

916 i‡((
cdr
.
Mode
 & 
MODE_CDDA
Ë&& cdr.
CurTøck
 > 1)

918 
do_CdlPœy
;

920 
cdr
.
Ródög
 = 1;

921 
cdr
.
Fú°Se˘‹
 = 1;

925 
	`RódTøck
(
cdr
.
SëSe˘‹Pœy
);

931 
u8
 *
buf
 = 
	`CDR_gëBuf„r
();

932 i‡(
buf
 !
NULL
)

933 
	`mem˝y
(
cdr
.
Tøns„r
, 
buf
, 8);

942 i‡(
cdr
.
Sìked
 !
SEEK_DONE
) {

943 
cdr
.
SètP
 |
STATUS_SEEK
;

944 
cdr
.
SètP
 &~
STATUS_READ
;

950 
	`CDREAD_INT
((
cdr
.
Mode
 & 0x80Ë? (
cdRódTime
 / 2) : cdReadTime * 1);

952 
cdr
.
SètP
 |
STATUS_READ
;

953 
cdr
.
SètP
 &~
STATUS_SEEK
;

955 
	`CDREAD_INT
((
cdr
.
Mode
 & 0x80Ë? (
cdRódTime
 / 2) : cdReadTime * 1);

958 
cdr
.
Resu…
[0] = cdr.
SètP
;

959 
°¨t_rŸ©ög
 = 1;

963 
	`CDR_LOG_I
("InvÆid comm™d: %02x\n", 
Irq
);

964 
îr‹
 = 
ERROR_INVALIDCMD
;

967 
£t_îr‹
:

968 
	`SëResu…Size
(2);

969 
cdr
.
Resu…
[0] = cdr.
SètP
 | 
STATUS_ERROR
;

970 
cdr
.
Resu…
[1] = 
îr‹
;

971 
cdr
.
Sèt
 = 
DiskEº‹
;

975 i‡(
cdr
.
DriveSèã
 =
DRIVESTATE_STOPPED
 && 
°¨t_rŸ©ög
) {

976 
cdr
.
DriveSèã
 = 
DRIVESTATE_STANDBY
;

977 
cdr
.
SètP
 |
STATUS_ROTATING
;

980 i‡(!
no_busy_îr‹
) {

981 
cdr
.
DriveSèã
) {

982 
DRIVESTATE_LID_OPEN
:

983 
DRIVESTATE_RESCAN_CD
:

984 
DRIVESTATE_PREPARE_CD
:

985 
	`SëResu…Size
(2);

986 
cdr
.
Resu…
[0] = cdr.
SètP
 | 
STATUS_ERROR
;

987 
cdr
.
Resu…
[1] = 
ERROR_NOTREADY
;

988 
cdr
.
Sèt
 = 
DiskEº‹
;

993 
föish
:

994 
	`£tIrq
();

995 
cdr
.
P¨amC
 = 0;

997 #ifde‡
CDR_LOG_CMD_IRQ


999 
i
;

1000 
	`SysPrötf
("CDR IRQ %d cmd %02x stat %02x: ",

1001 !!(
cdr
.
Sèt
 & cdr.
Reg2
), 
Irq
, cdr.Stat);

1002 
i
 = 0; i < 
cdr
.
Resu…C
; i++)

1003 
	`SysPrötf
("%02x ", 
cdr
.
Resu…
[
i
]);

1004 
	`SysPrötf
("\n");

1007 
	}
}

1009 #ifde‡
__ARM_ARCH_7A__


1010 
	#sßt32_to_16
(
v
) \

1011 
	`asm
("sßà%0,#16,%1" : "Ù" (
v
Ë: "r" (v))

	)

1013 
	#sßt32_to_16
(
v
) do { \

1014 i‡(
v
 < -32768) v = -32768; \

1015 i‡(
v
 > 32767) v = 32767; \

1016 } 0)

	)

1019 
	$cdrAâíu©e
(
s16
 *
buf
, 
ßm∂es
, 
°îeo
)

1021 
i
, 
l
, 
r
;

1022 
Œ
 = 
cdr
.
Aâíu©‹Le·ToLe·
;

1023 
Ã
 = 
cdr
.
Aâíu©‹Le·ToRight
;

1024 
æ
 = 
cdr
.
Aâíu©‹RightToLe·
;

1025 
º
 = 
cdr
.
Aâíu©‹RightToRight
;

1027 i‡(
Ã
 =0 && 
æ
 =0 && 0x78 <
Œ
 &&Ü»<0x88 && 0x78 <
º
 &&Ñr <= 0x88)

1030 i‡(!
°îeo
 && 
Œ
 =0x40 && 
Ã
 =0x40 && 
æ
 =0x40 && 
º
 == 0x40)

1033 i‡(
°îeo
) {

1034 
i
 = 0; i < 
ßm∂es
; i++) {

1035 
l
 = 
buf
[
i
 * 2];

1036 
r
 = 
buf
[
i
 * 2 + 1];

1037 
l
 = (»* 
Œ
 + 
r
 * 
æ
) >> 7;

1038 
r
 = (∏* 
º
 + 
l
 * 
Ã
) >> 7;

1039 
	`sßt32_to_16
(
l
);

1040 
	`sßt32_to_16
(
r
);

1041 
buf
[
i
 * 2] = 
l
;

1042 
buf
[
i
 * 2 + 1] = 
r
;

1046 
i
 = 0; i < 
ßm∂es
; i++) {

1047 
l
 = 
buf
[
i
];

1048 
l
 =Ü * (
Œ
 + 
æ
) >> 7;

1050 
	`sßt32_to_16
(
l
);

1052 
buf
[
i
] = 
l
;

1055 
	}
}

1057 
	$cdrRódI¡îru±
() {

1058 
u8
 *
buf
;

1060 i‡(!
cdr
.
Ródög
)

1063 i‡(
cdr
.
Irq
 || cdr.
Sèt
) {

1064 
	`CDR_LOG_I
("cdrom:Ñód sèàhack %02x %x\n", 
cdr
.
Irq
, cdr.
Sèt
);

1065 
	`CDREAD_INT
(0x1000);

1069 
cdr
.
OCUP
 = 1;

1070 
	`SëResu…Size
(1);

1071 
cdr
.
SètP
 |
STATUS_READ
|
STATUS_ROTATING
;

1072 
cdr
.
SètP
 &~
STATUS_SEEK
;

1073 
cdr
.
Resu…
[0] = cdr.
SètP
;

1074 
cdr
.
Sìked
 = 
SEEK_DONE
;

1076 
	`RódTøck
(
cdr
.
SëSe˘‹Pœy
);

1078 
buf
 = 
	`CDR_gëBuf„r
();

1079 i‡(
buf
 =
NULL
)

1080 
cdr
.
REº
 = -1;

1082 i‡(
cdr
.
REº
 == -1) {

1083 
	`CDR_LOG_I
("cdrReadInterrupt() Log:Érr\n");

1084 
	`mem£t
(
cdr
.
Tøns„r
, 0, 
DATA_SIZE
);

1085 
cdr
.
Sèt
 = 
DiskEº‹
;

1086 
cdr
.
Resu…
[0] |
STATUS_ERROR
;

1087 
	`CDREAD_INT
((
cdr
.
Mode
 & 0x80Ë? (
cdRódTime
 / 2) : cdReadTime);

1091 
	`mem˝y
(
cdr
.
Tøns„r
, 
buf
, 
DATA_SIZE
);

1092 
	`CheckPPFCache
(
cdr
.
Tøns„r
, cdr.
Pªv
[0], cdr.Prev[1], cdr.Prev[2]);

1095 
	`CDR_LOG
("cdrRódI¡îru±(ËLog: cdr.Tøns„∏%x:%x:%x\n", 
cdr
.
Tøns„r
[0], cdr.Transfer[1], cdr.Transfer[2]);

1097 i‡((!
cdr
.
Muãd
Ë&& (cdr.
Mode
 & 
MODE_STRSND
Ë&& (!
C⁄fig
.
Xa
Ë&& (cdr.
Fú°Se˘‹
 != -1)) {

1099 if–
cdr
.
Fú°Se˘‹
 =1 && (cdr.
Mode
 & 
MODE_SF
)==0 ) {

1100 
cdr
.
Fûe
 = cdr.
Tøns„r
[4 + 0];

1101 
cdr
.
Ch™√l
 = cdr.
Tøns„r
[4 + 1];

1104 if((
cdr
.
Tøns„r
[4 + 2] & 0x4) &&

1105 (
cdr
.
Tøns„r
[4 + 1] =cdr.
Ch™√l
) &&

1106 (
cdr
.
Tøns„r
[4 + 0] =cdr.
Fûe
)) {

1107 
ªt
 = 
	`xa_decode_£˘‹
(&
cdr
.
Xa
, cdr.
Tøns„r
+4, cdr.
Fú°Se˘‹
);

1108 i‡(!
ªt
) {

1109 
	`cdrAâíu©e
(
cdr
.
Xa
.
pcm
, cdr.Xa.
nßm∂es
, cdr.Xa.
°îeo
);

1110 
	`SPU_∂ayADPCMch™√l
(&
cdr
.
Xa
);

1111 
cdr
.
Fú°Se˘‹
 = 0;

1113 
cdr
.
Fú°Se˘‹
 = -1;

1117 
cdr
.
SëSe˘‹Pœy
[2]++;

1118 i‡(
cdr
.
SëSe˘‹Pœy
[2] == 75) {

1119 
cdr
.
SëSe˘‹Pœy
[2] = 0;

1120 
cdr
.
SëSe˘‹Pœy
[1]++;

1121 i‡(
cdr
.
SëSe˘‹Pœy
[1] == 60) {

1122 
cdr
.
SëSe˘‹Pœy
[1] = 0;

1123 
cdr
.
SëSe˘‹Pœy
[0]++;

1127 
cdr
.
Róded
 = 0;

1129 
	`CDREAD_INT
((
cdr
.
Mode
 & 
MODE_SPEED
Ë? (
cdRódTime
 / 2) : cdReadTime);

1137 i‡(!(
cdr
.
Mode
 & 
MODE_STRSND
Ë|| !(cdr.
Tøns„r
[4+2] & 0x4)) {

1138 
cdr
.
Sèt
 = 
D©aRódy
;

1139 
	`£tIrq
();

1143 
	`RódTøck
(
cdr
.
SëSe˘‹Pœy
);

1144 
	}
}

1157 
	$cdrRód0
() {

1158 i‡(
cdr
.
Resu…Ródy
)

1159 
cdr
.
Cål
 |= 0x20;

1161 
cdr
.
Cål
 &= ~0x20;

1163 i‡(
cdr
.
OCUP
)

1164 
cdr
.
Cål
 |= 0x40;

1169 
cdr
.
Cål
 |= 0x18;

1171 
	`CDR_LOG_IO
("cd∏r0: %02x\n", 
cdr
.
Cål
);

1173  
	`psxHu8
(0x1800Ë
cdr
.
Cål
;

1174 
	}
}

1176 
	$cdrWrôe0
(
π
) {

1177 
	`CDR_LOG_IO
("cd∏w0: %02x\n", 
π
);

1179 
cdr
.
Cål
 = (
π
 & 3) | (cdr.Ctrl & ~3);

1180 
	}
}

1182 
	$cdrRód1
() {

1183 i‡((
cdr
.
Resu…P
 & 0xfË< cdr.
Resu…C
)

1184 
	`psxHu8
(0x1801Ë
cdr
.
Resu…
[cdr.
Resu…P
 & 0xf];

1186 
	`psxHu8
(0x1801) = 0;

1187 
cdr
.
Resu…P
++;

1188 i‡(
cdr
.
Resu…P
 =cdr.
Resu…C
)

1189 
cdr
.
Resu…Ródy
 = 0;

1191 
	`CDR_LOG_IO
("cd∏r1: %02x\n", 
	`psxHu8
(0x1801));

1193  
	`psxHu8
(0x1801);

1194 
	}
}

1196 
	$cdrWrôe1
(
π
) {

1197 
u8
 
£t_loc
[3];

1198 
i
;

1200 
	`CDR_LOG_IO
("cd∏w1: %02x\n", 
π
);

1202 
cdr
.
Cål
 & 3) {

1206 
cdr
.
Aâíu©‹RightToRightT
 = 
π
;

1212 
cdr
.
Cmd
 = 
π
;

1213 
cdr
.
OCUP
 = 0;

1215 #ifde‡
CDR_LOG_CMD_IRQ


1216 
	`SysPrötf
("CD1 wrôe: %x (%s)", 
π
, 
CmdName
[rt]);

1217 i‡(
cdr
.
P¨amC
) {

1218 
	`SysPrötf
(" P¨am[%d] = {", 
cdr
.
P¨amC
);

1219 
i
 = 0; i < 
cdr
.
P¨amC
; i++)

1220 
	`SysPrötf
(" %x,", 
cdr
.
P¨am
[
i
]);

1221 
	`SysPrötf
("}\n");

1223 
	`SysPrötf
("\n");

1227 
cdr
.
Resu…Ródy
 = 0;

1228 
cdr
.
Cål
 |= 0x80;

1230 
	`AddIrqQueue
(
cdr
.
Cmd
, 0x800);

1232 
cdr
.
Cmd
) {

1233 
CdlSëloc
:

1234 
i
 = 0; i < 3; i++)

1235 
£t_loc
[
i
] = 
	`btoi
(
cdr
.
P¨am
[i]);

1237 
i
 = 
	`msf2£c
(
cdr
.
SëSe˘‹Pœy
);

1238 
i
 = 
	`abs
(ò- 
	`msf2£c
(
£t_loc
));

1239 i‡(
i
 > 16)

1240 
cdr
.
Sìked
 = 
SEEK_PENDING
;

1242 
	`mem˝y
(
cdr
.
SëSe˘‹
, 
£t_loc
, 3);

1243 
cdr
.
SëSe˘‹
[3] = 0;

1244 
cdr
.
SëlocPídög
 = 1;

1247 
CdlRódN
:

1248 
CdlRódS
:

1249 
CdlPau£
:

1250 
	`St›Cdda
();

1251 
	`St›Ródög
();

1254 
CdlRe£t
:

1255 
CdlInô
:

1256 
cdr
.
Sìked
 = 
SEEK_DONE
;

1257 
	`St›Cdda
();

1258 
	`St›Ródög
();

1261 
CdlSëmode
:

1262 
	`CDR_LOG
("cdrWrôe1(ËLog: Sëmodê%x\n", 
cdr
.
P¨am
[0]);

1264 
cdr
.
Mode
 = cdr.
P¨am
[0];

1268 if–
cdr
.
Pœy
 && (cdr.
Mode
 & 
MODE_CDDA
) == 0 )

1269 
	`St›Cdda
();

1272 
	}
}

1274 
	$cdrRód2
() {

1275 
ªt
;

1277 i‡(
cdr
.
Róded
 == 0) {

1278 
ªt
 = 0;

1280 
ªt
 = *
pTøns„r
++;

1283 
	`CDR_LOG_IO
("cd∏r2: %02x\n", 
ªt
);

1284  
ªt
;

1285 
	}
}

1287 
	$cdrWrôe2
(
π
) {

1288 
	`CDR_LOG_IO
("cd∏w2: %02x\n", 
π
);

1290 
cdr
.
Cål
 & 3) {

1292 i‡(
cdr
.
P¨amC
 < 8)

1293 
cdr
.
P¨am
[cdr.
P¨amC
++] = 
π
;

1296 
cdr
.
Reg2
 = 
π
;

1297 
	`£tIrq
();

1300 
cdr
.
Aâíu©‹Le·ToLe·T
 = 
π
;

1303 
cdr
.
Aâíu©‹RightToLe·T
 = 
π
;

1306 
	}
}

1308 
	$cdrRód3
() {

1309 i‡(
cdr
.
Cål
 & 0x1)

1310 
	`psxHu8
(0x1803Ë
cdr
.
Sèt
 | 0xE0;

1312 
	`psxHu8
(0x1803Ë
cdr
.
Reg2
 | 0xE0;

1314 
	`CDR_LOG_IO
("cd∏r3: %02x\n", 
	`psxHu8
(0x1803));

1315  
	`psxHu8
(0x1803);

1316 
	}
}

1318 
	$cdrWrôe3
(
π
) {

1319 
	`CDR_LOG_IO
("cd∏w3: %02x\n", 
π
);

1321 
cdr
.
Cål
 & 3) {

1325 
cdr
.
Sèt
 &~
π
;

1327 i‡(
π
 & 0x40)

1328 
cdr
.
P¨amC
 = 0;

1331 
cdr
.
Aâíu©‹Le·ToRightT
 = 
π
;

1334 i‡(
π
 & 0x20) {

1335 
	`mem˝y
(&
cdr
.
Aâíu©‹Le·ToLe·
, &cdr.
Aâíu©‹Le·ToLe·T
, 4);

1336 
	`CDR_LOG_I
("CD-XA Volume: %02x %02x | %02x %02x\n",

1337 
cdr
.
Aâíu©‹Le·ToLe·
, cdr.
Aâíu©‹Le·ToRight
,

1338 
cdr
.
Aâíu©‹RightToLe·
, cdr.
Aâíu©‹RightToRight
);

1343 i‡((
π
 & 0x80Ë&& 
cdr
.
Róded
 == 0) {

1344 
cdr
.
Róded
 = 1;

1345 
pTøns„r
 = 
cdr
.
Tøns„r
;

1347 
cdr
.
Mode
 & 0x30) {

1348 
MODE_SIZE_2328
:

1350 
pTøns„r
 += 12;

1353 
MODE_SIZE_2340
:

1354 
pTøns„r
 += 0;

1361 
	}
}

1363 
	$psxDma3
(
u32
 
madr
, u32 
b¸
, u32 
ch¸
) {

1364 
u32
 
cdsize
;

1365 
size
;

1366 
u8
 *
±r
;

1368 
	`CDR_LOG
("psxDma3(ËLog: *** DMA 3 *** %xádd∏%x sizê%x\n", 
ch¸
, 
madr
, 
b¸
);

1370 
ch¸
) {

1373 i‡(
cdr
.
Róded
 == 0) {

1374 
	`CDR_LOG
("psxDma3() Log: *** DMA 3 *** NOT READY\n");

1378 
cdsize
 = (
b¸
 & 0xffff) * 4;

1382 if–
cdsize
 == 0 )

1384 
cdr
.
Mode
 & (
MODE_SIZE_2340
|
MODE_SIZE_2328
)) {

1385 
MODE_SIZE_2340
: 
cdsize
 = 2340; ;

1386 
MODE_SIZE_2328
: 
cdsize
 = 2328; ;

1388 
MODE_SIZE_2048
: 
cdsize
 = 2048; ;

1393 
±r
 = (
u8
 *)
	`PSXM
(
madr
);

1394 i‡(
±r
 =
NULL
) {

1395 
	`CDR_LOG
("psxDma3() Log: *** DMA 3 *** NULL Pointer!\n");

1405 
size
 = 
CD_FRAMESIZE_RAW
 - (
pTøns„r
 - 
cdr
.
Tøns„r
);

1406 i‡(
size
 > 
cdsize
)

1407 
size
 = 
cdsize
;

1408 i‡(
size
 > 0)

1410 
	`mem˝y
(
±r
, 
pTøns„r
, 
size
);

1413 
psxCpu
->
	`CÀ¨
(
madr
, 
cdsize
 / 4);

1414 
pTøns„r
 +
cdsize
;

1416 if–
ch¸
 == 0x11400100 ) {

1417 
HW_DMA3_MADR
 = 
	`SWAPu32
(
madr
 + 
cdsize
);

1418 
	`CDRDMA_INT
–(
cdsize
/4) / 4 );

1420 if–
ch¸
 == 0x11000000 ) {

1423 
psxRegs
.
cy˛e
 +(
cdsize
/4) * 24/2;

1424 
	`CDRDMA_INT
(16);

1429 
	`CDR_LOG
("psxDma3(ËLog: Unknow¿cddm®%x\n", 
ch¸
);

1433 
HW_DMA3_CHCR
 &
	`SWAP32
(~0x01000000);

1434 
	`DMA_INTERRUPT
(3);

1435 
	}
}

1437 
	$cdrDmaI¡îru±
()

1439 i‡(
HW_DMA3_CHCR
 & 
	`SWAP32
(0x01000000))

1441 
HW_DMA3_CHCR
 &
	`SWAP32
(~0x01000000);

1442 
	`DMA_INTERRUPT
(3);

1444 
	}
}

1446 
	$gëCdInfo
()

1448 
u8
 
tmp
;

1450 
	`CDR_gëTN
(
cdr
.
Resu…TN
);

1451 
	`CDR_gëTD
(0, 
cdr
.
SëSe˘‹End
);

1452 
tmp
 = 
cdr
.
SëSe˘‹End
[0];

1453 
cdr
.
SëSe˘‹End
[0] = cdr.SetSectorEnd[2];

1454 
cdr
.
SëSe˘‹End
[2] = 
tmp
;

1455 
	}
}

1457 
	$cdrRe£t
() {

1458 
	`mem£t
(&
cdr
, 0, (cdr));

1459 
cdr
.
CurTøck
 = 1;

1460 
cdr
.
Fûe
 = 1;

1461 
cdr
.
Ch™√l
 = 1;

1462 
cdr
.
Reg2
 = 0x1f;

1463 
cdr
.
Sèt
 = 
NoI¡r
;

1464 
cdr
.
DriveSèã
 = 
DRIVESTATE_STANDBY
;

1465 
cdr
.
SètP
 = 
STATUS_ROTATING
;

1466 
pTøns„r
 = 
cdr
.
Tøns„r
;

1469 
cdr
.
Aâíu©‹Le·ToLe·
 = 0x80;

1470 
cdr
.
Aâíu©‹Le·ToRight
 = 0x00;

1471 
cdr
.
Aâíu©‹RightToLe·
 = 0x00;

1472 
cdr
.
Aâíu©‹RightToRight
 = 0x80;

1474 
	`gëCdInfo
();

1475 
	}
}

1477 
	$cdrFªeze
(*
f
, 
Mode
) {

1478 
u32
 
tmp
;

1479 
u8
 
tmµ
[3];

1481 i‡(
Mode
 =0 && !
C⁄fig
.
Cdda
)

1482 
	`CDR_°›
();

1484 
cdr
.
‰ìze_vî
 = 0x63647202;

1485 
	`gz‰ìze
(&
cdr
, (cdr));

1487 i‡(
Mode
 == 1) {

1488 
cdr
.
P¨amP
 = cdr.
P¨amC
;

1489 
tmp
 = 
pTøns„r
 - 
cdr
.
Tøns„r
;

1492 
	`gz‰ìze
(&
tmp
, (tmp));

1494 i‡(
Mode
 == 0) {

1495 
	`gëCdInfo
();

1497 
pTøns„r
 = 
cdr
.
Tøns„r
 + 
tmp
;

1500 
	`mem˝y
(
tmµ
, 
cdr
.
Pªv
, 3);

1501 
cdr
.
Pªv
[0]++;

1502 
	`RódTøck
(
tmµ
);

1504 i‡(
cdr
.
Pœy
) {

1505 i‡(
cdr
.
‰ìze_vî
 < 0x63647202)

1506 
	`mem˝y
(
cdr
.
SëSe˘‹Pœy
, cdr.
SëSe˘‹
, 3);

1508 
	`Föd_CurTøck
(
cdr
.
SëSe˘‹Pœy
);

1509 i‡(!
C⁄fig
.
Cdda
)

1510 
	`CDR_∂ay
(
cdr
.
SëSe˘‹Pœy
);

1513 i‡((
cdr
.
‰ìze_vî
 & 0xffffff00) != 0x63647200) {

1515 i‡(
cdr
.
Reg2
 == 0) {

1516 
	`SysPrötf
("cdrom: fixing up old savestate\n");

1517 
cdr
.
Reg2
 = 7;

1520 i‡((
cdr
.
Aâíu©‹Le·ToLe·
 | cdr.
Aâíu©‹Le·ToRight


1521 | 
cdr
.
Aâíu©‹RightToLe·
 | cdr.
Aâíu©‹RightToRight
) == 0)

1523 
cdr
.
Aâíu©‹Le·ToLe·
 = cdr.
Aâíu©‹RightToRight
 = 0x80;

1529 
	}
}

1531 
	$LidI¡îru±
() {

1532 
	`gëCdInfo
();

1533 
	`St›Cdda
();

1534 
	`cdrLidSìkI¡îru±
();

1535 
	}
}

	@libpcsxcore/cdrom.h

20 #i‚de‡
__CDROM_H__


21 
	#__CDROM_H__


	)

23 #ifde‡
__˝lu•lus


27 
	~"psxcomm⁄.h
"

28 
	~"decode_xa.h
"

29 
	~"r3000a.h
"

30 
	~"∂ugös.h
"

31 
	~"psxmem.h
"

32 
	~"psxhw.h
"

34 
	#btoi
(
b
Ë((bË/ 16 * 10 + (bË% 16Ë

	)

35 
	#ôob
(
i
Ë((iË/ 10 * 16 + (iË% 10Ë

	)

37 
	#MSF2SECT
(
m
, 
s
, 
f
Ë(((mË* 60 + (sË- 2Ë* 75 + (f))

	)

39 
	#CD_FRAMESIZE_RAW
 2352

	)

40 
	#DATA_SIZE
 (
CD_FRAMESIZE_RAW
 - 12)

	)

42 
	#SUB_FRAMESIZE
 96

	)

45 
OCUP
;

46 
Reg1Mode
;

47 
Reg2
;

48 
CmdPro˚ss
;

49 
Cål
;

50 
Sèt
;

52 
SètP
;

54 
Tøns„r
[
DATA_SIZE
];

56 
Tøck
;

57 
Index
;

58 
Rñ©ive
[3];

59 
Absﬁuã
[3];

60 } 
subq
;

61 
TøckCh™ged
;

62 
∑d1
[3];

63 
‰ìze_vî
;

65 
Pªv
[4];

66 
P¨am
[8];

67 
Resu…
[16];

69 
P¨amC
;

70 
P¨amP
;

71 
Resu…C
;

72 
Resu…P
;

73 
Resu…Ródy
;

74 
Cmd
;

75 
Róded
;

76 
SëlocPídög
;

77 
u32
 
Ródög
;

79 
Resu…TN
[6];

80 
Resu…TD
[4];

81 
SëSe˘‹Pœy
[4];

82 
SëSe˘‹End
[4];

83 
SëSe˘‹
[4];

84 
Tøck
;

85 
boﬁón
 
Pœy
, 
Muãd
;

86 
CurTøck
;

87 
Mode
, 
Fûe
, 
Ch™√l
;

88 
Re£t
;

89 
REº
;

90 
Fú°Se˘‹
;

92 
xa_decode_t
 
Xa
;

94 
Inô
;

96 
u16
 
Irq
;

97 
u8
 
IrqRïóãd
;

98 
u32
 
eCy˛e
;

100 
u8
 
Sìked
;

102 
u8
 
DriveSèã
;

103 
u8
 
Fa°F‹w¨d
;

104 
u8
 
Fa°Backw¨d
;

105 
u8
 
∑d
;

107 
u8
 
Aâíu©‹Le·ToLe·
, 
Aâíu©‹Le·ToRight
;

108 
u8
 
Aâíu©‹RightToRight
, 
Aâíu©‹RightToLe·
;

109 
u8
 
Aâíu©‹Le·ToLe·T
, 
Aâíu©‹Le·ToRightT
;

110 
u8
 
Aâíu©‹RightToRightT
, 
Aâíu©‹RightToLe·T
;

111 } 
	tcdrSåu˘
;

113 
cdrSåu˘
 
cdr
;

115 
cdrRe£t
();

116 
cdrAâíu©e
(
s16
 *
buf
, 
ßm∂es
, 
°îeo
);

118 
cdrI¡îru±
();

119 
cdrRódI¡îru±
();

120 
cdrRï∂ayI¡îru±
();

121 
cdrLidSìkI¡îru±
();

122 
cdrPœyI¡îru±
();

123 
cdrDmaI¡îru±
();

124 
LidI¡îru±
();

125 
cdrRód0
();

126 
cdrRód1
();

127 
cdrRód2
();

128 
cdrRód3
();

129 
cdrWrôe0
(
π
);

130 
cdrWrôe1
(
π
);

131 
cdrWrôe2
(
π
);

132 
cdrWrôe3
(
π
);

133 
cdrFªeze
(*
f
, 
Mode
);

135 #ifde‡
__˝lu•lus


	@libpcsxcore/cheat.c

19 
	~"psxcomm⁄.h
"

20 
	~"r3000a.h
"

21 
	~"psxmem.h
"

23 
	~"chót.h
"

25 
Chót
 *
	gChóts
 = 
NULL
;

26 
	gNumChóts
 = 0;

27 
	gNumChótsAŒoˇãd
 = 0;

29 
ChótCode
 *
	gChótCodes
 = 
NULL
;

30 
	gNumCodes
 = 0;

31 
	gNumCodesAŒoˇãd
 = 0;

33 
s8
 *
	g¥evM
 = 
NULL
;

34 
u32
 *
	gSórchResu…s
 = 
NULL
;

35 
	gNumSórchResu…s
 = 0;

36 
	gNumSórchResu…sAŒoˇãd
 = 0;

38 
	#ALLOC_INCREMENT
 100

	)

40 
	$CÀ¨AŒChóts
() {

41 
i
;

43 i‡(
Chóts
 !
NULL
) {

44 
i
 = 0; i < 
NumChóts
; i++) {

45 
	`‰ì
(
Chóts
[
i
].
Des¸
);

47 
	`‰ì
(
Chóts
);

50 
Chóts
 = 
NULL
;

51 
NumChóts
 = 0;

52 
NumChótsAŒoˇãd
 = 0;

54 i‡(
ChótCodes
 !
NULL
) {

55 
	`‰ì
(
ChótCodes
);

58 
ChótCodes
 = 
NULL
;

59 
NumCodes
 = 0;

60 
NumCodesAŒoˇãd
 = 0;

61 
	}
}

64 
	$LﬂdChóts
(c⁄° *
fûíame
) {

65 
FILE
 *
Â
;

66 
buf
[256];

67 
cou¡
 = 0;

68 
t1
, 
t2
;

70 
Â
 = 
	`f›í
(
fûíame
, "r");

71 i‡(
Â
 =
NULL
) {

75 
	`CÀ¨AŒChóts
();

77 
	`fgës
(
buf
, 255, 
Â
Ë!
NULL
) {

78 
buf
[255] = '\0';

79 
	`åim
(
buf
);

82 i‡(
buf
[0] == '#' || buf[0] == ';' || buf[0] == '/' || buf[0] == '\"' || buf[0] == '\0')

85 i‡(
buf
[0] ='[' && buf[
	`°æí
(buf) - 1] == ']') {

86 i‡(
NumChóts
 > 0)

87 
Chóts
[
NumChóts
 - 1].
n
 = 
cou¡
;

89 i‡(
NumChóts
 >
NumChótsAŒoˇãd
) {

90 
NumChótsAŒoˇãd
 +
ALLOC_INCREMENT
;

92 i‡(
Chóts
 =
NULL
) {

93 
	`as£π
(
NumChóts
 == 0);

94 
	`as£π
(
NumChótsAŒoˇãd
 =
ALLOC_INCREMENT
);

95 
Chóts
 = (
Chót
 *)
	`mÆloc
((ChótË* 
NumChótsAŒoˇãd
);

97 
Chóts
 = (
Chót
 *)
	`ªÆloc
(Chóts, (ChótË* 
NumChótsAŒoˇãd
);

101 
buf
[
	`°æí
(buf) - 1] = '\0';

102 
cou¡
 = 0;

104 i‡(
buf
[1] == '*') {

105 
Chóts
[
NumChóts
].
Des¸
 = 
	`°rdup
(
buf
 + 2);

106 
Chóts
[
NumChóts
].
E«bÀd
 = 1;

108 
Chóts
[
NumChóts
].
Des¸
 = 
	`°rdup
(
buf
 + 1);

109 
Chóts
[
NumChóts
].
E«bÀd
 = 0;

111 
Chóts
[
NumChóts
].
WasE«bÀd
 = 0;

113 
Chóts
[
NumChóts
].
Fú°
 = 
NumCodes
;

115 
NumChóts
++;

119 i‡(
NumChóts
 <= 0)

122 i‡(
NumCodes
 >
NumCodesAŒoˇãd
) {

123 
NumCodesAŒoˇãd
 +
ALLOC_INCREMENT
;

125 i‡(
ChótCodes
 =
NULL
) {

126 
	`as£π
(
NumCodes
 == 0);

127 
	`as£π
(
NumCodesAŒoˇãd
 =
ALLOC_INCREMENT
);

128 
ChótCodes
 = (
ChótCode
 *)
	`mÆloc
((ChótCodeË* 
NumCodesAŒoˇãd
);

130 
ChótCodes
 = (
ChótCode
 *)
	`ªÆloc
(ChótCodes, (ChótCodeË* 
NumCodesAŒoˇãd
);

134 
	`ssˇnf
(
buf
, "%x %x", &
t1
, &
t2
);

136 
ChótCodes
[
NumCodes
].
Addr
 = 
t1
;

137 
ChótCodes
[
NumCodes
].
VÆ
 = 
t2
;

139 
NumCodes
++;

140 
cou¡
++;

143 i‡(
NumChóts
 > 0)

144 
Chóts
[
NumChóts
 - 1].
n
 = 
cou¡
;

146 
	`f˛o£
(
Â
);

148 
	`SysPrötf
(
	`_
("Chót†lﬂded from: %s\n"), 
fûíame
);

149 
	}
}

152 
	$SaveChóts
(c⁄° *
fûíame
) {

153 
FILE
 *
Â
;

154 
i
, 
j
;

156 
Â
 = 
	`f›í
(
fûíame
, "w");

157 i‡(
Â
 =
NULL
) {

161 
i
 = 0; i < 
NumChóts
; i++) {

163 i‡(
Chóts
[
i
].
E«bÀd
)

164 
	`Ârötf
(
Â
, "[*%s]\n", 
Chóts
[
i
].
Des¸
);

166 
	`Ârötf
(
Â
, "[%s]\n", 
Chóts
[
i
].
Des¸
);

169 
j
 = 0; j < 
Chóts
[
i
].
n
; j++) {

170 
	`Ârötf
(
Â
, "%.8X %.4X\n",

171 
ChótCodes
[
Chóts
[
i
].
Fú°
 + 
j
].
Addr
,

172 
ChótCodes
[
Chóts
[
i
].
Fú°
 + 
j
].
VÆ
);

175 
	`Ârötf
(
Â
, "\n");

178 
	`f˛o£
(
Â
);

180 
	`SysPrötf
(
	`_
("Chót†ßvedÅo: %s\n"), 
fûíame
);

181 
	}
}

184 
	$AµlyChóts
() {

185 
i
, 
j
, 
k
, 
ídödex
;

186 
was_íabÀd
;

188 
i
 = 0; i < 
NumChóts
; i++) {

189 
was_íabÀd
 = 
Chóts
[
i
].
WasE«bÀd
;

190 i‡(!
Chóts
[
i
].
E«bÀd
) {

191 i‡(!
Chóts
[
i
].
WasE«bÀd
)

194 
Chóts
[
i
].
WasE«bÀd
 = Chóts[i].
E«bÀd
;

197 
ídödex
 = 
Chóts
[
i
].
Fú°
 + Chóts[i].
n
;

199 
j
 = 
Chóts
[
i
].
Fú°
; j < 
ídödex
; j++) {

200 
u8
 
ty≥
 = (
uöt8_t
)(
ChótCodes
[
j
].
Addr
 >> 24);

201 
u32
 
addr
 = (
ChótCodes
[
j
].
Addr
 & 0x001FFFFF);

202 
u16
 
vÆ
 = 
ChótCodes
[
j
].
VÆ
;

203 
u32
 
èddr
;

205 i‡(!
was_íabÀd
) {

206 
ty≥
) {

207 
CHEAT_CONST16
:

208 
ChótCodes
[
j
].
OldVÆ
 = 
	`psxMu16
(
addr
);

210 
CHEAT_CONST8
:

211 
ChótCodes
[
j
].
OldVÆ
 = 
	`psxMu8
(
addr
);

215 i‡(!
Chóts
[
i
].
E«bÀd
) {

216 
vÆ
 = 
ChótCodes
[
j
].
OldVÆ
;

217 i‡(
ty≥
 !
CHEAT_CONST16
 &&Åy≥ !
CHEAT_CONST8
)

221 
ty≥
) {

222 
CHEAT_CONST8
:

223 
	`psxMu8ªf
(
addr
Ë(
u8
)
vÆ
;

226 
CHEAT_CONST16
:

227 
	`psxMu16ªf
(
addr
Ë
	`SWAPu16
(
vÆ
);

230 
CHEAT_INC16
:

231 
	`psxMu16ªf
(
addr
Ë
	`SWAPu16
(
	`psxMu16
◊ddrË+ 
vÆ
);

234 
CHEAT_DEC16
:

235 
	`psxMu16ªf
(
addr
Ë
	`SWAPu16
(
	`psxMu16
◊ddrË- 
vÆ
);

238 
CHEAT_INC8
:

239 
	`psxMu8ªf
(
addr
Ë+(
u8
)
vÆ
;

242 
CHEAT_DEC8
:

243 
	`psxMu8ªf
(
addr
Ë-(
u8
)
vÆ
;

246 
CHEAT_SLIDE
:

247 
j
++;

248 i‡(
j
 >
ídödex
)

251 
ty≥
 = (
uöt8_t
)(
ChótCodes
[
j
].
Addr
 >> 24);

252 
èddr
 = (
ChótCodes
[
j
].
Addr
 & 0x001FFFFF);

253 
vÆ
 = 
ChótCodes
[
j
].
VÆ
;

255 i‡(
ty≥
 =
CHEAT_CONST8
) {

256 
k
 = 0; k < ((
addr
 >> 8) & 0xFF); k++) {

257 
	`psxMu8ªf
(
èddr
Ë(
u8
)
vÆ
;

258 
èddr
 +(
s8
)(
addr
 & 0xFF);

259 
vÆ
 +(
s8
)(
ChótCodes
[
j
 - 1].
VÆ
 & 0xFF);

262 i‡(
ty≥
 =
CHEAT_CONST16
) {

263 
k
 = 0; k < ((
addr
 >> 8) & 0xFF); k++) {

264 
	`psxMu16ªf
(
èddr
Ë
	`SWAPu16
(
vÆ
);

265 
èddr
 +(
s8
)(
addr
 & 0xFF);

266 
vÆ
 +(
s8
)(
ChótCodes
[
j
 - 1].
VÆ
 & 0xFF);

271 
CHEAT_MEMCPY
:

272 
j
++;

273 i‡(
j
 >
ídödex
)

276 
èddr
 = (
ChótCodes
[
j
].
Addr
 & 0x001FFFFF);

277 
k
 = 0; k < 
vÆ
; k++) {

278 
	`psxMu8ªf
(
èddr
 + 
k
Ë
	`PSXMu8
(
addr
 + k);

282 
CHEAT_EQU8
:

283 i‡(
	`PSXMu8
(
addr
Ë!(
u8
)
vÆ
)

284 
j
++;

287 
CHEAT_NOTEQU8
:

288 i‡(
	`PSXMu8
(
addr
Ë=(
u8
)
vÆ
)

289 
j
++;

292 
CHEAT_LESSTHAN8
:

293 i‡(
	`PSXMu8
(
addr
Ë>(
u8
)
vÆ
)

294 
j
++;

297 
CHEAT_GREATERTHAN8
:

298 i‡(
	`PSXMu8
(
addr
Ë<(
u8
)
vÆ
)

299 
j
++;

302 
CHEAT_EQU16
:

303 i‡(
	`PSXMu16
(
addr
Ë!
vÆ
)

304 
j
++;

307 
CHEAT_NOTEQU16
:

308 i‡(
	`PSXMu16
(
addr
Ë=
vÆ
)

309 
j
++;

312 
CHEAT_LESSTHAN16
:

313 i‡(
	`PSXMu16
(
addr
Ë>
vÆ
)

314 
j
++;

317 
CHEAT_GREATERTHAN16
:

318 i‡(
	`PSXMu16
(
addr
Ë<
vÆ
)

319 
j
++;

324 
	}
}

326 
	$AddChót
(c⁄° *
des¸
, *
code
) {

327 
c
 = 1;

328 *
p1
, *
p2
;

330 i‡(
NumChóts
 >
NumChótsAŒoˇãd
) {

331 
NumChótsAŒoˇãd
 +
ALLOC_INCREMENT
;

333 i‡(
Chóts
 =
NULL
) {

334 
	`as£π
(
NumChóts
 == 0);

335 
	`as£π
(
NumChótsAŒoˇãd
 =
ALLOC_INCREMENT
);

336 
Chóts
 = (
Chót
 *)
	`mÆloc
((ChótË* 
NumChótsAŒoˇãd
);

339 
Chóts
 = (
Chót
 *)
	`ªÆloc
(Chóts, (ChótË* 
NumChótsAŒoˇãd
);

343 
Chóts
[
NumChóts
].
Des¸
 = 
	`°rdup
(
des¸
[0] ? des¸ : 
	`_
("(Untitled)"));

344 
Chóts
[
NumChóts
].
E«bÀd
 = 0;

345 
Chóts
[
NumChóts
].
WasE«bÀd
 = 0;

346 
Chóts
[
NumChóts
].
Fú°
 = 
NumCodes
;

347 
Chóts
[
NumChóts
].
n
 = 0;

349 
p1
 = 
code
;

350 
p2
 = 
code
;

352 
c
) {

353 
t1
, 
t2
;

355 *
p2
 != '\n' && *p2 != '\0')

356 
p2
++;

358 i‡(*
p2
 == '\0')

359 
c
 = 0;

361 *
p2
 = '\0';

362 
p2
++;

364 
t1
 = 0;

365 
t2
 = 0;

366 
	`ssˇnf
(
p1
, "%x %x", &
t1
, &
t2
);

368 i‡(
t1
 > 0x10000000) {

369 i‡(
NumCodes
 >
NumCodesAŒoˇãd
) {

370 
NumCodesAŒoˇãd
 +
ALLOC_INCREMENT
;

372 i‡(
ChótCodes
 =
NULL
) {

373 
	`as£π
(
NumCodes
 == 0);

374 
	`as£π
(
NumCodesAŒoˇãd
 =
ALLOC_INCREMENT
);

375 
ChótCodes
 = (
ChótCode
 *)
	`mÆloc
((ChótCodeË* 
NumCodesAŒoˇãd
);

378 
ChótCodes
 = (
ChótCode
 *)
	`ªÆloc
(ChótCodes, (ChótCodeË* 
NumCodesAŒoˇãd
);

382 
ChótCodes
[
NumCodes
].
Addr
 = 
t1
;

383 
ChótCodes
[
NumCodes
].
VÆ
 = 
t2
;

384 
NumCodes
++;

385 
Chóts
[
NumChóts
].
n
++;

388 
p1
 = 
p2
;

391 i‡(
Chóts
[
NumChóts
].
n
 == 0) {

395 
NumChóts
++;

397 
	}
}

399 
	$RemoveChót
(
ödex
) {

400 
	`as£π
(
ödex
 >0 && index < 
NumChóts
);

402 
	`‰ì
(
Chóts
[
ödex
].
Des¸
);

404 
ödex
 < 
NumChóts
 - 1) {

405 
Chóts
[
ödex
] = Cheats[index + 1];

406 
ödex
++;

409 
NumChóts
--;

410 
	}
}

412 
	$EdôChót
(
ödex
, c⁄° *
des¸
, *
code
) {

413 
c
 = 1;

414 
¥ev
 = 
NumCodes
;

415 *
p1
, *
p2
;

417 
	`as£π
(
ödex
 >0 && index < 
NumChóts
);

419 
p1
 = 
code
;

420 
p2
 = 
code
;

422 
c
) {

423 
t1
, 
t2
;

425 *
p2
 != '\n' && *p2 != '\0')

426 
p2
++;

428 i‡(*
p2
 == '\0')

429 
c
 = 0;

431 *
p2
 = '\0';

432 
p2
++;

434 
t1
 = 0;

435 
t2
 = 0;

436 
	`ssˇnf
(
p1
, "%x %x", &
t1
, &
t2
);

438 i‡(
t1
 > 0x10000000) {

439 i‡(
NumCodes
 >
NumCodesAŒoˇãd
) {

440 
NumCodesAŒoˇãd
 +
ALLOC_INCREMENT
;

442 i‡(
ChótCodes
 =
NULL
) {

443 
	`as£π
(
NumCodes
 == 0);

444 
	`as£π
(
NumCodesAŒoˇãd
 =
ALLOC_INCREMENT
);

445 
ChótCodes
 = (
ChótCode
 *)
	`mÆloc
((ChótCodeË* 
NumCodesAŒoˇãd
);

448 
ChótCodes
 = (
ChótCode
 *)
	`ªÆloc
(ChótCodes, (ChótCodeË* 
NumCodesAŒoˇãd
);

452 
ChótCodes
[
NumCodes
].
Addr
 = 
t1
;

453 
ChótCodes
[
NumCodes
].
VÆ
 = 
t2
;

454 
NumCodes
++;

457 
p1
 = 
p2
;

460 i‡(
NumCodes
 =
¥ev
) {

464 
	`‰ì
(
Chóts
[
ödex
].
Des¸
);

465 
Chóts
[
ödex
].
Des¸
 = 
	`°rdup
(
des¸
[0] ? des¸ : 
	`_
("(Untitled)"));

466 
Chóts
[
ödex
].
Fú°
 = 
¥ev
;

467 
Chóts
[
ödex
].
n
 = 
NumCodes
 - 
¥ev
;

470 
	}
}

472 
	$FªeChótSórchResu…s
() {

473 i‡(
SórchResu…s
 !
NULL
) {

474 
	`‰ì
(
SórchResu…s
);

476 
SórchResu…s
 = 
NULL
;

478 
NumSórchResu…s
 = 0;

479 
NumSórchResu…sAŒoˇãd
 = 0;

480 
	}
}

482 
	$FªeChótSórchMem
() {

483 i‡(
¥evM
 !
NULL
) {

484 
	`‰ì
(
¥evM
);

486 
¥evM
 = 
NULL
;

487 
	}
}

489 
	$ChótSórchBackupMem‹y
() {

490 i‡(
¥evM
 !
NULL
) {

491 
	`mem˝y
(
¥evM
, 
psxM
, 0x200000);

493 
	}
}

495 
	$ChótSórchInôBackupMem‹y
() {

496 i‡(
¥evM
 =
NULL
) {

497 
¥evM
 = (
s8
 *)
	`mÆloc
(0x200000);

498 
	`ChótSórchBackupMem‹y
();

500 
	}
}

502 
	$ChótSórchAddResu…
(
u32
 
addr
) {

503 i‡(
NumSórchResu…s
 >
NumSórchResu…sAŒoˇãd
) {

504 
NumSórchResu…sAŒoˇãd
 +
ALLOC_INCREMENT
;

506 i‡(
SórchResu…s
 =
NULL
) {

507 
SórchResu…s
 = (
u32
 *)
	`mÆloc
((u32Ë* 
NumSórchResu…sAŒoˇãd
);

510 
SórchResu…s
 = (
u32
 *)
	`ªÆloc
(SórchResu…s, (u32Ë* 
NumSórchResu…sAŒoˇãd
);

514 
SórchResu…s
[
NumSórchResu…s
++] = 
addr
;

515 
	}
}

517 
	$ChótSórchEquÆ8
(
u8
 
vÆ
) {

518 
u32
 
i
, 
j
;

520 
	`ChótSórchInôBackupMem‹y
();

522 i‡(
SórchResu…s
 =
NULL
) {

524 
i
 = 0; i < 0x200000; i++) {

525 i‡(
	`PSXMu8
(
i
Ë=
vÆ
) {

526 
	`ChótSórchAddResu…
(
i
);

532 
j
 = 0;

534 
i
 = 0; i < 
NumSórchResu…s
; i++) {

535 i‡(
	`PSXMu8
(
SórchResu…s
[
i
]Ë=
vÆ
) {

536 
SórchResu…s
[
j
++] = SórchResu…s[
i
];

540 
NumSórchResu…s
 = 
j
;

542 
	}
}

544 
	$ChótSórchEquÆ16
(
u16
 
vÆ
) {

545 
u32
 
i
, 
j
;

547 
	`ChótSórchInôBackupMem‹y
();

549 i‡(
SórchResu…s
 =
NULL
) {

551 
i
 = 0; i < 0x200000; i += 2) {

552 i‡(
	`PSXMu16
(
i
Ë=
vÆ
) {

553 
	`ChótSórchAddResu…
(
i
);

559 
j
 = 0;

561 
i
 = 0; i < 
NumSórchResu…s
; i++) {

562 i‡(
	`PSXMu16
(
SórchResu…s
[
i
]Ë=
vÆ
) {

563 
SórchResu…s
[
j
++] = SórchResu…s[
i
];

567 
NumSórchResu…s
 = 
j
;

569 
	}
}

571 
	$ChótSórchEquÆ32
(
u32
 
vÆ
) {

572 
u32
 
i
, 
j
;

574 
	`ChótSórchInôBackupMem‹y
();

576 i‡(
SórchResu…s
 =
NULL
) {

578 
i
 = 0; i < 0x200000; i += 4) {

579 i‡(
	`PSXMu32
(
i
Ë=
vÆ
) {

580 
	`ChótSórchAddResu…
(
i
);

586 
j
 = 0;

588 
i
 = 0; i < 
NumSórchResu…s
; i++) {

589 i‡(
	`PSXMu32
(
SórchResu…s
[
i
]Ë=
vÆ
) {

590 
SórchResu…s
[
j
++] = SórchResu…s[
i
];

594 
NumSórchResu…s
 = 
j
;

596 
	}
}

598 
	$ChótSórchNŸEquÆ8
(
u8
 
vÆ
) {

599 
u32
 
i
, 
j
;

601 
	`ChótSórchInôBackupMem‹y
();

603 i‡(
SórchResu…s
 =
NULL
) {

605 
i
 = 0; i < 0x200000; i++) {

606 i‡(
	`PSXMu8
(
i
Ë!
vÆ
) {

607 
	`ChótSórchAddResu…
(
i
);

613 
j
 = 0;

615 
i
 = 0; i < 
NumSórchResu…s
; i++) {

616 i‡(
	`PSXMu8
(
SórchResu…s
[
i
]Ë!
vÆ
) {

617 
SórchResu…s
[
j
++] = SórchResu…s[
i
];

621 
NumSórchResu…s
 = 
j
;

623 
	}
}

625 
	$ChótSórchNŸEquÆ16
(
u16
 
vÆ
) {

626 
u32
 
i
, 
j
;

628 
	`ChótSórchInôBackupMem‹y
();

630 i‡(
SórchResu…s
 =
NULL
) {

632 
i
 = 0; i < 0x200000; i += 2) {

633 i‡(
	`PSXMu16
(
i
Ë!
vÆ
) {

634 
	`ChótSórchAddResu…
(
i
);

640 
j
 = 0;

642 
i
 = 0; i < 
NumSórchResu…s
; i++) {

643 i‡(
	`PSXMu16
(
SórchResu…s
[
i
]Ë!
vÆ
) {

644 
SórchResu…s
[
j
++] = SórchResu…s[
i
];

648 
NumSórchResu…s
 = 
j
;

650 
	}
}

652 
	$ChótSórchNŸEquÆ32
(
u32
 
vÆ
) {

653 
u32
 
i
, 
j
;

655 
	`ChótSórchInôBackupMem‹y
();

657 i‡(
SórchResu…s
 =
NULL
) {

659 
i
 = 0; i < 0x200000; i += 4) {

660 i‡(
	`PSXMu32
(
i
Ë!
vÆ
) {

661 
	`ChótSórchAddResu…
(
i
);

667 
j
 = 0;

669 
i
 = 0; i < 
NumSórchResu…s
; i++) {

670 i‡(
	`PSXMu32
(
SórchResu…s
[
i
]Ë!
vÆ
) {

671 
SórchResu…s
[
j
++] = SórchResu…s[
i
];

675 
NumSórchResu…s
 = 
j
;

677 
	}
}

679 
	$ChótSórchR™ge8
(
u8
 
mö
, u8 
max
) {

680 
u32
 
i
, 
j
;

682 
	`ChótSórchInôBackupMem‹y
();

684 i‡(
SórchResu…s
 =
NULL
) {

686 
i
 = 0; i < 0x200000; i++) {

687 i‡(
	`PSXMu8
(
i
Ë>
mö
 && PSXMu8(iË<
max
) {

688 
	`ChótSórchAddResu…
(
i
);

694 
j
 = 0;

696 
i
 = 0; i < 
NumSórchResu…s
; i++) {

697 i‡(
	`PSXMu8
(
SórchResu…s
[
i
]Ë>
mö
 && PSXMu8(SórchResu…s[i]Ë<
max
) {

698 
SórchResu…s
[
j
++] = SórchResu…s[
i
];

702 
NumSórchResu…s
 = 
j
;

704 
	}
}

706 
	$ChótSórchR™ge16
(
u16
 
mö
, u16 
max
) {

707 
u32
 
i
, 
j
;

709 
	`ChótSórchInôBackupMem‹y
();

711 i‡(
SórchResu…s
 =
NULL
) {

713 
i
 = 0; i < 0x200000; i += 2) {

714 i‡(
	`PSXMu16
(
i
Ë>
mö
 && PSXMu16(iË<
max
) {

715 
	`ChótSórchAddResu…
(
i
);

721 
j
 = 0;

723 
i
 = 0; i < 
NumSórchResu…s
; i++) {

724 i‡(
	`PSXMu16
(
SórchResu…s
[
i
]Ë>
mö
 && PSXMu16(SórchResu…s[i]Ë<
max
) {

725 
SórchResu…s
[
j
++] = SórchResu…s[
i
];

729 
NumSórchResu…s
 = 
j
;

731 
	}
}

733 
	$ChótSórchR™ge32
(
u32
 
mö
, u32 
max
) {

734 
u32
 
i
, 
j
;

736 
	`ChótSórchInôBackupMem‹y
();

738 i‡(
SórchResu…s
 =
NULL
) {

740 
i
 = 0; i < 0x200000; i += 4) {

741 i‡(
	`PSXMu32
(
i
Ë>
mö
 && PSXMu32(iË<
max
) {

742 
	`ChótSórchAddResu…
(
i
);

748 
j
 = 0;

750 
i
 = 0; i < 
NumSórchResu…s
; i++) {

751 i‡(
	`PSXMu32
(
SórchResu…s
[
i
]Ë>
mö
 && PSXMu32(SórchResu…s[i]Ë<
max
) {

752 
SórchResu…s
[
j
++] = SórchResu…s[
i
];

756 
NumSórchResu…s
 = 
j
;

758 
	}
}

760 
	$ChótSórchIn¸ó£dBy8
(
u8
 
vÆ
) {

761 
u32
 
i
, 
j
;

763 
	`as£π
(
¥evM
 !
NULL
);

765 
j
 = 0;

767 
i
 = 0; i < 
NumSórchResu…s
; i++) {

768 i‡(
	`PSXMu8
(
SórchResu…s
[
i
]Ë- 
	`PªvMu8
(SórchResu…s[i]Ë=
vÆ
) {

769 
SórchResu…s
[
j
++] = SórchResu…s[
i
];

773 
NumSórchResu…s
 = 
j
;

774 
	}
}

776 
	$ChótSórchIn¸ó£dBy16
(
u16
 
vÆ
) {

777 
u32
 
i
, 
j
;

779 
	`as£π
(
¥evM
 !
NULL
);

781 
j
 = 0;

783 
i
 = 0; i < 
NumSórchResu…s
; i++) {

784 i‡(
	`PSXMu16
(
SórchResu…s
[
i
]Ë- 
	`PªvMu16
(SórchResu…s[i]Ë=
vÆ
) {

785 
SórchResu…s
[
j
++] = SórchResu…s[
i
];

789 
NumSórchResu…s
 = 
j
;

790 
	}
}

792 
	$ChótSórchIn¸ó£dBy32
(
u32
 
vÆ
) {

793 
u32
 
i
, 
j
;

795 
	`as£π
(
¥evM
 !
NULL
);

797 
j
 = 0;

799 
i
 = 0; i < 
NumSórchResu…s
; i++) {

800 i‡(
	`PSXMu32
(
SórchResu…s
[
i
]Ë- 
	`PªvMu32
(SórchResu…s[i]Ë=
vÆ
) {

801 
SórchResu…s
[
j
++] = SórchResu…s[
i
];

805 
NumSórchResu…s
 = 
j
;

806 
	}
}

808 
	$ChótSórchDe¸ó£dBy8
(
u8
 
vÆ
) {

809 
u32
 
i
, 
j
;

811 
	`as£π
(
¥evM
 !
NULL
);

813 
j
 = 0;

815 
i
 = 0; i < 
NumSórchResu…s
; i++) {

816 i‡(
	`PªvMu8
(
SórchResu…s
[
i
]Ë- 
	`PSXMu8
(SórchResu…s[i]Ë=
vÆ
) {

817 
SórchResu…s
[
j
++] = SórchResu…s[
i
];

821 
NumSórchResu…s
 = 
j
;

822 
	}
}

824 
	$ChótSórchDe¸ó£dBy16
(
u16
 
vÆ
) {

825 
u32
 
i
, 
j
;

827 
	`as£π
(
¥evM
 !
NULL
);

829 
j
 = 0;

831 
i
 = 0; i < 
NumSórchResu…s
; i++) {

832 i‡(
	`PªvMu16
(
SórchResu…s
[
i
]Ë- 
	`PSXMu16
(SórchResu…s[i]Ë=
vÆ
) {

833 
SórchResu…s
[
j
++] = SórchResu…s[
i
];

837 
NumSórchResu…s
 = 
j
;

838 
	}
}

840 
	$ChótSórchDe¸ó£dBy32
(
u32
 
vÆ
) {

841 
u32
 
i
, 
j
;

843 
	`as£π
(
¥evM
 !
NULL
);

845 
j
 = 0;

847 
i
 = 0; i < 
NumSórchResu…s
; i++) {

848 i‡(
	`PªvMu32
(
SórchResu…s
[
i
]Ë- 
	`PSXMu32
(SórchResu…s[i]Ë=
vÆ
) {

849 
SórchResu…s
[
j
++] = SórchResu…s[
i
];

853 
NumSórchResu…s
 = 
j
;

854 
	}
}

856 
	$ChótSórchIn¸ó£d8
() {

857 
u32
 
i
, 
j
;

859 
	`as£π
(
¥evM
 !
NULL
);

861 
j
 = 0;

863 
i
 = 0; i < 
NumSórchResu…s
; i++) {

864 i‡(
	`PªvMu8
(
SórchResu…s
[
i
]Ë< 
	`PSXMu8
(SearchResults[i])) {

865 
SórchResu…s
[
j
++] = SórchResu…s[
i
];

869 
NumSórchResu…s
 = 
j
;

870 
	}
}

872 
	$ChótSórchIn¸ó£d16
() {

873 
u32
 
i
, 
j
;

875 
	`as£π
(
¥evM
 !
NULL
);

877 
j
 = 0;

879 
i
 = 0; i < 
NumSórchResu…s
; i++) {

880 i‡(
	`PªvMu16
(
SórchResu…s
[
i
]Ë< 
	`PSXMu16
(SearchResults[i])) {

881 
SórchResu…s
[
j
++] = SórchResu…s[
i
];

885 
NumSórchResu…s
 = 
j
;

886 
	}
}

888 
	$ChótSórchIn¸ó£d32
() {

889 
u32
 
i
, 
j
;

891 
	`as£π
(
¥evM
 !
NULL
);

893 
j
 = 0;

895 
i
 = 0; i < 
NumSórchResu…s
; i++) {

896 i‡(
	`PªvMu32
(
SórchResu…s
[
i
]Ë< 
	`PSXMu32
(SearchResults[i])) {

897 
SórchResu…s
[
j
++] = SórchResu…s[
i
];

901 
NumSórchResu…s
 = 
j
;

902 
	}
}

904 
	$ChótSórchDe¸ó£d8
() {

905 
u32
 
i
, 
j
;

907 
	`as£π
(
¥evM
 !
NULL
);

909 
j
 = 0;

911 
i
 = 0; i < 
NumSórchResu…s
; i++) {

912 i‡(
	`PªvMu8
(
SórchResu…s
[
i
]Ë> 
	`PSXMu8
(SearchResults[i])) {

913 
SórchResu…s
[
j
++] = SórchResu…s[
i
];

917 
NumSórchResu…s
 = 
j
;

918 
	}
}

920 
	$ChótSórchDe¸ó£d16
() {

921 
u32
 
i
, 
j
;

923 
	`as£π
(
¥evM
 !
NULL
);

925 
j
 = 0;

927 
i
 = 0; i < 
NumSórchResu…s
; i++) {

928 i‡(
	`PªvMu16
(
SórchResu…s
[
i
]Ë> 
	`PSXMu16
(SearchResults[i])) {

929 
SórchResu…s
[
j
++] = SórchResu…s[
i
];

933 
NumSórchResu…s
 = 
j
;

934 
	}
}

936 
	$ChótSórchDe¸ó£d32
() {

937 
u32
 
i
, 
j
;

939 
	`as£π
(
¥evM
 !
NULL
);

941 
j
 = 0;

943 
i
 = 0; i < 
NumSórchResu…s
; i++) {

944 i‡(
	`PªvMu32
(
SórchResu…s
[
i
]Ë> 
	`PSXMu32
(SearchResults[i])) {

945 
SórchResu…s
[
j
++] = SórchResu…s[
i
];

949 
NumSórchResu…s
 = 
j
;

950 
	}
}

952 
	$ChótSórchDif„ª¡8
() {

953 
u32
 
i
, 
j
;

955 
	`as£π
(
¥evM
 !
NULL
);

957 
j
 = 0;

959 
i
 = 0; i < 
NumSórchResu…s
; i++) {

960 i‡(
	`PªvMu8
(
SórchResu…s
[
i
]Ë!
	`PSXMu8
(SearchResults[i])) {

961 
SórchResu…s
[
j
++] = SórchResu…s[
i
];

965 
NumSórchResu…s
 = 
j
;

966 
	}
}

968 
	$ChótSórchDif„ª¡16
() {

969 
u32
 
i
, 
j
;

971 
	`as£π
(
¥evM
 !
NULL
);

973 
j
 = 0;

975 
i
 = 0; i < 
NumSórchResu…s
; i++) {

976 i‡(
	`PªvMu16
(
SórchResu…s
[
i
]Ë!
	`PSXMu16
(SearchResults[i])) {

977 
SórchResu…s
[
j
++] = SórchResu…s[
i
];

981 
NumSórchResu…s
 = 
j
;

982 
	}
}

984 
	$ChótSórchDif„ª¡32
() {

985 
u32
 
i
, 
j
;

987 
	`as£π
(
¥evM
 !
NULL
);

989 
j
 = 0;

991 
i
 = 0; i < 
NumSórchResu…s
; i++) {

992 i‡(
	`PªvMu32
(
SórchResu…s
[
i
]Ë!
	`PSXMu32
(SearchResults[i])) {

993 
SórchResu…s
[
j
++] = SórchResu…s[
i
];

997 
NumSórchResu…s
 = 
j
;

998 
	}
}

1000 
	$ChótSórchNoCh™ge8
() {

1001 
u32
 
i
, 
j
;

1003 
	`as£π
(
¥evM
 !
NULL
);

1005 
j
 = 0;

1007 
i
 = 0; i < 
NumSórchResu…s
; i++) {

1008 i‡(
	`PªvMu8
(
SórchResu…s
[
i
]Ë=
	`PSXMu8
(SearchResults[i])) {

1009 
SórchResu…s
[
j
++] = SórchResu…s[
i
];

1013 
NumSórchResu…s
 = 
j
;

1014 
	}
}

1016 
	$ChótSórchNoCh™ge16
() {

1017 
u32
 
i
, 
j
;

1019 
	`as£π
(
¥evM
 !
NULL
);

1021 
j
 = 0;

1023 
i
 = 0; i < 
NumSórchResu…s
; i++) {

1024 i‡(
	`PªvMu16
(
SórchResu…s
[
i
]Ë=
	`PSXMu16
(SearchResults[i])) {

1025 
SórchResu…s
[
j
++] = SórchResu…s[
i
];

1029 
NumSórchResu…s
 = 
j
;

1030 
	}
}

1032 
	$ChótSórchNoCh™ge32
() {

1033 
u32
 
i
, 
j
;

1035 
	`as£π
(
¥evM
 !
NULL
);

1037 
j
 = 0;

1039 
i
 = 0; i < 
NumSórchResu…s
; i++) {

1040 i‡(
	`PªvMu32
(
SórchResu…s
[
i
]Ë=
	`PSXMu32
(SearchResults[i])) {

1041 
SórchResu…s
[
j
++] = SórchResu…s[
i
];

1045 
NumSórchResu…s
 = 
j
;

1046 
	}
}

	@libpcsxcore/cheat.h

19 #i‚de‡
CHEAT_H


20 
	#CHEAT_H


	)

22 #ifde‡
__˝lu•lus


27 
uöt32_t
 
Addr
;

28 
uöt16_t
 
VÆ
;

29 
uöt16_t
 
OldVÆ
;

30 } 
	tChótCode
;

33 *
Des¸
;

34 
Fú°
;

35 
n
;

36 
E«bÀd
;

37 
WasE«bÀd
;

38 } 
	tChót
;

40 
CÀ¨AŒChóts
();

42 
LﬂdChóts
(c⁄° *
fûíame
);

43 
SaveChóts
(c⁄° *
fûíame
);

45 
AµlyChóts
();

47 
AddChót
(c⁄° *
des¸
, *
code
);

48 
RemoveChót
(
ödex
);

49 
EdôChót
(
ödex
, c⁄° *
des¸
, *
code
);

51 
FªeChótSórchResu…s
();

52 
FªeChótSórchMem
();

53 
ChótSórchBackupMem‹y
();

55 
ChótSórchEquÆ8
(
u8
 
vÆ
);

56 
ChótSórchEquÆ16
(
u16
 
vÆ
);

57 
ChótSórchEquÆ32
(
u32
 
vÆ
);

58 
ChótSórchNŸEquÆ8
(
u8
 
vÆ
);

59 
ChótSórchNŸEquÆ16
(
u16
 
vÆ
);

60 
ChótSórchNŸEquÆ32
(
u32
 
vÆ
);

61 
ChótSórchR™ge8
(
u8
 
mö
, u8 
max
);

62 
ChótSórchR™ge16
(
u16
 
mö
, u16 
max
);

63 
ChótSórchR™ge32
(
u32
 
mö
, u32 
max
);

64 
ChótSórchIn¸ó£dBy8
(
u8
 
vÆ
);

65 
ChótSórchIn¸ó£dBy16
(
u16
 
vÆ
);

66 
ChótSórchIn¸ó£dBy32
(
u32
 
vÆ
);

67 
ChótSórchDe¸ó£dBy8
(
u8
 
vÆ
);

68 
ChótSórchDe¸ó£dBy16
(
u16
 
vÆ
);

69 
ChótSórchDe¸ó£dBy32
(
u32
 
vÆ
);

70 
ChótSórchIn¸ó£d8
();

71 
ChótSórchIn¸ó£d16
();

72 
ChótSórchIn¸ó£d32
();

73 
ChótSórchDe¸ó£d8
();

74 
ChótSórchDe¸ó£d16
();

75 
ChótSórchDe¸ó£d32
();

76 
ChótSórchDif„ª¡8
();

77 
ChótSórchDif„ª¡16
();

78 
ChótSórchDif„ª¡32
();

79 
ChótSórchNoCh™ge8
();

80 
ChótSórchNoCh™ge16
();

81 
ChótSórchNoCh™ge32
();

83 
Chót
 *
Chóts
;

84 
ChótCode
 *
ChótCodes
;

85 
NumChóts
;

86 
NumCodes
;

88 
s8
 *
¥evM
;

89 
u32
 *
SórchResu…s
;

90 
NumSórchResu…s
;

92 
NumChótsAŒoˇãd
;

93 
NumCodesAŒoˇãd
;

95 
	#PREVM
(
mem
Ë(&
¥evM
[mem])

	)

96 
	#PªvMu8
(
mem
Ë(*(
u8
 *)
	`PREVM
(mem))

	)

97 
	#PªvMu16
(
mem
Ë(
	`SWAP16
(*(
u16
 *)
	`PREVM
(mem)))

	)

98 
	#PªvMu32
(
mem
Ë(
	`SWAP32
(*(
u32
 *)
	`PREVM
(mem)))

	)

101 
	#CHEAT_CONST8
 0x30

	)

102 
	#CHEAT_CONST16
 0x80

	)

103 
	#CHEAT_INC16
 0x10

	)

104 
	#CHEAT_DEC16
 0x11

	)

105 
	#CHEAT_INC8
 0x20

	)

106 
	#CHEAT_DEC8
 0x21

	)

107 
	#CHEAT_SLIDE
 0x50

	)

108 
	#CHEAT_MEMCPY
 0xC2

	)

110 
	#CHEAT_EQU8
 0xE0

	)

111 
	#CHEAT_NOTEQU8
 0xE1

	)

112 
	#CHEAT_LESSTHAN8
 0xE2

	)

113 
	#CHEAT_GREATERTHAN8
 0xE3

	)

114 
	#CHEAT_EQU16
 0xD0

	)

115 
	#CHEAT_NOTEQU16
 0xD1

	)

116 
	#CHEAT_LESSTHAN16
 0xD2

	)

117 
	#CHEAT_GREATERTHAN16
 0xD3

	)

119 #ifde‡
__˝lu•lus


	@libpcsxcore/coff.h

20 #i‚de‡
__COFF_H__


21 
	#__COFF_H__


	)

25 
	sexã∫Æ_fûehdr
 {

26 
	mf_magic
;

27 
	mf_ns˙s
;

28 
	mf_timd©
;

29 
	mf_sym±r
;

30 
	mf_nsyms
;

31 
	mf_›thdr
;

32 
	mf_Êags
;

35 
	#FILHDR
 
exã∫Æ_fûehdr


	)

36 
	#FILHSZ
 (
FILHDR
)

	)

	@libpcsxcore/debug.c

18 
	~"psxcomm⁄.h
"

19 
	~"r3000a.h
"

20 
	~"debug.h
"

21 
	~"sockë.h
"

228 
	gdebuggî_a˘ive
 = 0, 
	g∑u£d
 = 0, 
	gåa˚
 = 0, 
	gª£t
 = 0, 
	gª£âög
 = 0;

229 
	gm≠pög_e
 = 0, 
	gm≠pög_r8
 = 0, 
	gm≠pög_r16
 = 0, 
	gm≠pög_r32
 = 0, 
	gm≠pög_w8
 = 0, 
	gm≠pög_w16
 = 0, 
	gm≠pög_w32
 = 0;

230 
	gbªakmp_e
 = 0, 
	gbªakmp_r8
 = 0, 
	gbªakmp_r16
 = 0, 
	gbªakmp_r32
 = 0, 
	gbªakmp_w8
 = 0, 
	gbªakmp_w16
 = 0, 
	gbªakmp_w32
 = 0;

232 
Pro˚ssComm™ds
();

234 
u8
 *
	gMem‹yM≠
 = 
NULL
;

237 
	mMAP_EXEC
 = 1,

238 
	mMAP_R8
 = 2,

239 
	mMAP_R16
 = 4,

240 
	mMAP_R32
 = 8,

241 
	mMAP_W8
 = 16,

242 
	mMAP_W16
 = 32,

243 
	mMAP_W32
 = 64,

244 
	mMAP_EXEC_JAL
 = 128,

247 *
	gbªakpoöt_ty≥_«mes
[] = {

251 
	sbªakpoöt_s
 {

252 
bªakpoöt_s
 *
	m√xt
, *
	m¥ev
;

253 
	mnumbî
, 
	mty≥
;

254 
u32
 
	maddªss
;

255 } 
	tbªakpoöt_t
;

257 
bªakpoöt_t
 *
	gfú°
 = 
NULL
;

259 
	$add_bªakpoöt
(
ty≥
, 
u32
 
addªss
) {

260 
bªakpoöt_t
 *
bp
 = (bªakpoöt_à*)
	`mÆloc
((breakpoint_t));

262 
bp
->
ty≥
 =Åype;

263 
bp
->
addªss
 =áddress;

265 i‡(
fú°
) {

266 
bp
->
numbî
 = 
fú°
->
¥ev
->number + 1;

267 
bp
->
√xt
 = 
fú°
;

268 
bp
->
¥ev
 = 
fú°
->prev;

269 
fú°
->
¥ev
 = 
bp
;

270 
bp
->
¥ev
->
√xt
 = bp;

272 
fú°
 = 
bp
;

273 
bp
->
numbî
 = 1;

274 
bp
->
√xt
 = bp;

275 
bp
->
¥ev
 = bp;

278  
bp
->
numbî
;

279 
	}
}

281 
	$dñëe_bªakpoöt
(
bªakpoöt_t
 * 
bp
) {

282 i‡(
bp
 =
fú°
) {

283 i‡(
bp
->
√xt
 == bp) {

284 
fú°
 = 
NULL
;

286 
fú°
 = 
bp
->
√xt
;

290 
bp
->
√xt
->
¥ev
 = bp->prev;

291 
bp
->
¥ev
->
√xt
 = bp->next;

293 
	`‰ì
(
bp
);

294 
	}
}

296 
bªakpoöt_t
 *
	$√xt_bªakpoöt
(
bªakpoöt_t
 *
bp
) {

297  
bp
->
√xt
 !
fú°
 ? bp->next : 0;

298 
	}
}

300 
bªakpoöt_t
 *
	$föd_bªakpoöt
(
numbî
) {

301 
bªakpoöt_t
 *
p
;

303 
p
 = 
fú°
;Ö;Ö = 
	`√xt_bªakpoöt
(p)) {

304 i‡(
p
->
numbî
 ==Çumber)

305  
p
;

309 
	}
}

311 
	$SèπDebuggî
() {

312 i‡(
debuggî_a˘ive
)

315 
Mem‹yM≠
 = (
u8
 *)
	`mÆloc
(0x200000);

316 i‡(
Mem‹yM≠
 =
NULL
) {

317 
	`SysMesßge
(
	`_
("Errorállocating memory"));

321 i‡(
	`SèπSîvî
() == -1) {

322 
	`SysPrötf
(
	`_
("UnableÅo start debug server.\n"));

326 
	`SysPrötf
(
	`_
("Debugger started.\n"));

327 
debuggî_a˘ive
 = 1;

328 
	}
}

330 
	$St›Debuggî
() {

331 i‡(
debuggî_a˘ive
) {

332 
	`St›Sîvî
();

333 
	`SysPrötf
(
	`_
("Debugger stopped.\n"));

336 i‡(
Mem‹yM≠
 !
NULL
) {

337 
	`‰ì
(
Mem‹yM≠
);

338 
Mem‹yM≠
 = 
NULL
;

341 
fú°
 !
NULL
Ë
	`dñëe_bªakpoöt
(first);

343 
debuggî_a˘ive
 = 0;

344 
	}
}

346 
	$Pau£Debuggî
() {

347 
åa˚
 = 0;

348 
∑u£d
 = 1;

349 
	}
}

351 
	$ResumeDebuggî
() {

352 
åa˚
 = 0;

353 
∑u£d
 = 0;

354 
	}
}

356 
	$DebugVSync
() {

357 i‡(!
debuggî_a˘ive
 || 
ª£âög
)

360 i‡(
ª£t
) {

361 
ª£âög
 = 1;

362 
	`CheckCdrom
();

363 
	`SysRe£t
();

364 i‡(
ª£t
 == 2)

365 
	`LﬂdCdrom
();

366 
ª£t
 = 
ª£âög
 = 0;

370 
	`GëClõ¡
();

371 
	`Pro˚ssComm™ds
();

372 
	}
}

374 
	$M¨kM≠
(
u32
 
addªss
, 
mask
) {

375 i‡((
addªss
 & 0xff000000) != 0x80000000) ;

376 
Mem‹yM≠
[
addªss
 & 0x001fffff] |
mask
;

377 
	}
}

379 
	$IsM≠M¨ked
(
u32
 
addªss
, 
mask
) {

380  (
Mem‹yM≠
[
addªss
 & 0x001fffff] & 
mask
) != 0;

381 
	}
}

383 
	$Pro˚ssDebug
() {

384 i‡(!
debuggî_a˘ive
 || 
ª£t
 || 
ª£âög
)

386 i‡(
åa˚
) {

387 i‡(!(--
åa˚
)) {

388 
∑u£d
 = 1;

391 i‡(!
∑u£d
) {

392 
	`DebugCheckBP
(
psxRegs
.
pc
, 
E
);

394 i‡(
m≠pög_e
) {

395 
	`M¨kM≠
(
psxRegs
.
pc
, 
MAP_EXEC
);

396 i‡((
psxRegs
.
code
 >> 26) == 3) {

397 
	`M¨kM≠
(
_JumpT¨gë_
, 
MAP_EXEC_JAL
);

399 i‡(((
psxRegs
.
code
 >> 26) == 0) && ((psxRegs.code & 0x3F) == 9)) {

400 
	`M¨kM≠
(
_Rd_
, 
MAP_EXEC_JAL
);

403 
∑u£d
) {

404 
	`GëClõ¡
();

405 
	`Pro˚ssComm™ds
();

406 
	`GPU_upd©eLa˚
();

407 
	`SysUpd©e
();

409 
	}
}

411 
	$Pro˚ssComm™ds
() {

412 
code
, 
i
, 
dumpög
;

413 
FILE
 *
sfûe
;

414 
cmd
[257], *
¨gumíts
, *
p
, 
ª∂y
[10240], *
ßve
, *
dump
;

415 
u32
 
ªg
, 
vÆue
, 
size
, 
addªss
;

416 
bªakpoöt_t
 *
bp
;

418 i‡(!
	`HasClõ¡
())

420 i‡(
	`RódSockë
(
cmd
, 256) > 0) {

421 
¨gumíts
 = 
NULL
;

422 i‡(
	`°æí
(
cmd
) <= 2) {

423 
code
 = 0;

424 } i‡(
	`°æí
(
cmd
) == 3) {

425 
code
 = 
	`°πﬁ
(
cmd
, 0, 16);

426 } i‡(!(
	`isxdigô
(
cmd
[0]) && isxdigit(cmd[1]) && isxdigit(cmd[2]) && (cmd[3] == 0x20))) {

427 
code
 = 0;

428 } i‡(
	`ssˇnf
(
cmd
, "%3X ", &
code
) != 1) {

429 
code
 = 0;

431 
¨gumíts
 = 
cmd
 + 4;

433 
code
 = 
	`°πﬁ
(
cmd
, &
¨gumíts
, 16);

434 
¨gumíts
 && *arguments && *arguments == 0x20)

435 
¨gumíts
++;

437 i‡(*
¨gumíts
 == '\0')

438 
¨gumíts
 = 
NULL
;

440 
dumpög
 = 0;

441 
ßve
 = 
NULL
;

443 
code
) {

445 
	`•rötf
(
ª∂y
, "200 %s\r\n", 
¨gumíts
 =
NULL
 ? "OK" :árguments);

448 
	`•rötf
(
ª∂y
, "201 %s\r\n", 
PACKAGE_VERSION
);

451 
	`•rötf
(
ª∂y
, "202 1.0\r\n");

454 
	`•rötf
(
ª∂y
, "203 %i\r\n", 
∑u£d
 ? 1 : 
åa˚
 ? 2 : 0);

457 
	`•rötf
(
ª∂y
, "210 PC=%08X\r\n", 
psxRegs
.
pc
);

460 i‡(
¨gumíts
) {

461 i‡(
	`ssˇnf
(
¨gumíts
, "%02X", &
code
) != 1) {

462 
	`•rötf
(
ª∂y
, "511 MÆf‹med 111 comm™d '%s'\r\n", 
cmd
);

466 i‡(!
¨gumíts
) {

467 
ª∂y
[0] = 0;

468 
i
 = 0; i < 32; i++) {

469 
	`•rötf
(
ª∂y
, "%s211 %02X=%08X\r\n",Ñïly, 
i
, 
psxRegs
.
GPR
.
r
[i]);

472 i‡((
code
 >= 0) && (code < 32)) {

473 
	`•rötf
(
ª∂y
, "211 %02X=%08X\r\n", 
code
, 
psxRegs
.
GPR
.
r
[code]);

475 
	`•rötf
(
ª∂y
, "511 InvÆid GPRÑegi°î: %X\r\n", 
code
);

480 
	`•rötf
(
ª∂y
, "212 LO=%08X HI=%08X\r\n", 
psxRegs
.
GPR
.
n
.
lo
,ÖsxRegs.GPR.n.
hi
);

483 i‡(
¨gumíts
) {

484 i‡(
	`ssˇnf
(
¨gumíts
, "%02X", &
code
) != 1) {

485 
	`•rötf
(
ª∂y
, "511 MÆf‹med 113 comm™d '%s'\r\n", 
cmd
);

489 i‡(!
¨gumíts
) {

490 
ª∂y
[0] = 0;

491 
i
 = 0; i < 32; i++) {

492 
	`•rötf
(
ª∂y
, "%s213 %02X=%08X\r\n",Ñïly, 
i
, 
psxRegs
.
CP0
.
r
[i]);

495 i‡((
code
 >= 0) && (code < 32)) {

496 
	`•rötf
(
ª∂y
, "213 %02X=%08X\r\n", 
code
, 
psxRegs
.
CP0
.
r
[code]);

498 
	`•rötf
(
ª∂y
, "511 InvÆid COP0Ñegi°î: %X\r\n", 
code
);

503 i‡(
¨gumíts
) {

504 i‡(
	`ssˇnf
(
¨gumíts
, "%02X", &
code
) != 1) {

505 
	`•rötf
(
ª∂y
, "511 MÆf‹med 114 comm™d '%s'\r\n", 
cmd
);

509 i‡(!
¨gumíts
) {

510 
ª∂y
[0] = 0;

511 
i
 = 0; i < 32; i++) {

512 
	`•rötf
(
ª∂y
, "%s214 %02X=%08X\r\n",Ñïly, 
i
, 
psxRegs
.
CP2C
.
r
[i]);

515 i‡((
code
 >= 0) && (code < 32)) {

516 
	`•rötf
(
ª∂y
, "214 %02X=%08X\r\n", 
code
, 
psxRegs
.
CP2C
.
r
[code]);

518 
	`•rötf
(
ª∂y
, "511 InvÆid COP2CÑegi°î: %X\r\n", 
code
);

523 i‡(
¨gumíts
) {

524 i‡(
	`ssˇnf
(
¨gumíts
, "%02X", &
code
) != 1) {

525 
	`•rötf
(
ª∂y
, "511 MÆf‹med 111 comm™d '%s'\r\n", 
cmd
);

529 i‡(!
¨gumíts
) {

530 
ª∂y
[0] = 0;

531 
i
 = 0; i < 32; i++) {

532 
	`•rötf
(
ª∂y
, "%s215 %02X=%08X\r\n",Ñïly, 
i
, 
psxRegs
.
CP2D
.
r
[i]);

535 i‡((
code
 >= 0) && (code < 32)) {

536 
	`•rötf
(
ª∂y
, "215 %02X=%08X\r\n", 
code
, 
psxRegs
.
CP2D
.
r
[code]);

538 
	`•rötf
(
ª∂y
, "511 InvÆid COP2DÑegi°î: %X\r\n", 
code
);

543 i‡(
¨gumíts
) {

544 i‡(
	`ssˇnf
(
¨gumíts
, "%08X", &
code
) != 1) {

545 
	`•rötf
(
ª∂y
, "511 MÆf‹med 119 comm™d '%s'\r\n", 
cmd
);

549 i‡(!
¨gumíts
)

550 
code
 = 
psxRegs
.
pc
;

552 
	`•rötf
(
ª∂y
, "219 %s\r\n", 
	`disR3000AF
(
	`psxMemRód32
(
code
), code));

555 i‡(!
¨gumíts
 || 
	`ssˇnf
◊rgumíts, "%02X=%08X", &
ªg
, &
vÆue
) != 2) {

556 
	`•rötf
(
ª∂y
, "500 MÆf‹med 121 comm™d '%s'\r\n", 
¨gumíts
);

560 i‡(
ªg
 < 32) {

561 
psxRegs
.
GPR
.
r
[
ªg
] = 
vÆue
;

562 
	`•rötf
(
ª∂y
, "221 %02X=%08X\r\n", 
ªg
, 
vÆue
);

564 
	`•rötf
(
ª∂y
, "512 InvÆid GPRÑegi°î: %02X\r\n", 
ªg
);

568 i‡(!
¨gumíts
 || 
	`°∫cmp
(arguments, "HI=", 3) == 0) {

569 
ªg
 = 33;

570 } i‡(
¨gumíts
 && 
	`°∫cmp
(arguments, "LO=", 3) == 0) {

571 
ªg
 = 32;

573 
¨gumíts
[2] = 0;

574 
	`•rötf
(
ª∂y
, "512 InvÆid LO/HIÑegi°î: '%s'\r\n", 
¨gumíts
);

578 i‡(
	`ssˇnf
(
¨gumíts
 + 3, "%08X", &
vÆue
) != 1) {

579 
	`•rötf
(
ª∂y
, "500 MÆf‹med 122 comm™d '%s'\r\n", 
¨gumíts
);

581 
psxRegs
.
GPR
.
r
[
ªg
] = 
vÆue
;

582 
	`•rötf
(
ª∂y
, "222 LO=%08X HI=%08X\r\n", 
psxRegs
.
GPR
.
n
.
lo
,ÖsxRegs.GPR.n.
hi
);

586 i‡(!
¨gumíts
 || 
	`ssˇnf
◊rgumíts, "%02X=%08X", &
ªg
, &
vÆue
) != 2) {

587 
	`•rötf
(
ª∂y
, "500 MÆf‹med 123 comm™d '%s'\r\n", 
¨gumíts
);

591 i‡(
ªg
 < 32) {

592 
psxRegs
.
CP0
.
r
[
ªg
] = 
vÆue
;

593 
	`•rötf
(
ª∂y
, "223 %02X=%08X\r\n", 
ªg
, 
vÆue
);

595 
	`•rötf
(
ª∂y
, "512 InvÆid COP0Ñegi°î: %02X\r\n", 
ªg
);

599 i‡(!
¨gumíts
 || 
	`ssˇnf
◊rgumíts, "%02X=%08X", &
ªg
, &
vÆue
) != 2) {

600 
	`•rötf
(
ª∂y
, "500 MÆf‹med 124 comm™d '%s'\r\n", 
¨gumíts
);

604 i‡(
ªg
 < 32) {

605 
psxRegs
.
CP2C
.
r
[
ªg
] = 
vÆue
;

606 
	`•rötf
(
ª∂y
, "224 %02X=%08X\r\n", 
ªg
, 
vÆue
);

608 
	`•rötf
(
ª∂y
, "512 InvÆid COP2CÑegi°î: %02X\r\n", 
ªg
);

612 i‡(!
¨gumíts
 || 
	`ssˇnf
◊rgumíts, "%02X=%08X", &
ªg
, &
vÆue
) != 2) {

613 
	`•rötf
(
ª∂y
, "500 MÆf‹med 121 comm™d '%s'\r\n", 
¨gumíts
);

617 i‡(
ªg
 < 32) {

618 
psxRegs
.
CP2D
.
r
[
ªg
] = 
vÆue
;

619 
	`•rötf
(
ª∂y
, "225 %02X=%08X\r\n", 
ªg
, 
vÆue
);

621 
	`•rötf
(
ª∂y
, "512 InvÆid COP2DÑegi°î: %02X\r\n", 
ªg
);

625 i‡(!
¨gumíts
 || 
	`ssˇnf
◊rgumíts, "%08X@%08X", &
size
, &
addªss
) != 2) {

626 
	`•rötf
(
ª∂y
, "500 MÆf‹med 130 comm™d '%s'\r\n", 
¨gumíts
);

630 i‡((
addªss
 >0x80000000Ë&& (◊ddªs†+ 
size
) <= 0x80200000)) {

631 
	`•rötf
(
ª∂y
, "230 %08X@%08X\r\n", 
size
, 
addªss
);

632 
dump
 = (*Ë
	`PSXM
(
addªss
);

633 
dumpög
 = 1;

635 
	`•rötf
(
ª∂y
, "513 InvÆidáddªs†‹Ñ™ge: '%s'\r\n", 
¨gumíts
);

639 i‡(!
¨gumíts
 || 
	`ssˇnf
◊rgumíts, "%08X@%08X", &
size
, &
addªss
) != 2) {

640 
	`•rötf
(
ª∂y
, "500 MÆf‹med 140 comm™d '%s'\r\n", 
¨gumíts
);

644 i‡((
addªss
 >0x80000000Ë&& (◊ddªs†+ 
size
) <= 0x80200000)) {

645 
	`•rötf
(
ª∂y
, "240 %08X@%08X\r\n", 
size
, 
addªss
);

646 
	`RawRódSockë
((*)
	`PSXM
(
addªss
), 
size
);

648 
	`•rötf
(
ª∂y
, "514 InvÆidáddªs†‹Ñ™ge: '%s'\r\n", 
¨gumíts
);

652 
code
 = 1;

653 i‡(
¨gumíts
) {

654 i‡(
	`ssˇnf
(
¨gumíts
, "%02X", &
code
) != 1) {

655 
	`•rötf
(
ª∂y
, "500 MÆf‹med 150 comm™d '%s'\r\n", 
cmd
);

659 i‡(
code
) {

660 
m≠pög_e
 = 1;

661 
i
 = 0; i < 0x00200000; i++) {

662 
Mem‹yM≠
[
i
] &~
MAP_EXEC
;

663 
Mem‹yM≠
[
i
] &~
MAP_EXEC_JAL
;

666 
m≠pög_e
 = 0;

668 
	`•rötf
(
ª∂y
, "250 M≠pög o‡exe¯Êow %s\r\n", 
code
 ? "started" : "stopped");

671 
code
 = 1;

672 i‡(
¨gumíts
) {

673 i‡(
	`ssˇnf
(
¨gumíts
, "%02X", &
code
) != 1) {

674 
	`•rötf
(
ª∂y
, "500 MÆf‹med 151 comm™d '%s'\r\n", 
cmd
);

678 i‡(
code
) {

679 
m≠pög_r8
 = 1;

680 
i
 = 0; i < 0x00200000; i++) {

681 
Mem‹yM≠
[
i
] &~
MAP_R8
;

684 
m≠pög_r8
 = 0;

686 
	`•rötf
(
ª∂y
, "251 M≠pög o‡ªad8 flow %s\r\n", 
code
 ? "started" : "stopped");

689 
code
 = 1;

690 i‡(
¨gumíts
) {

691 i‡(
	`ssˇnf
(
¨gumíts
, "%02X", &
code
) != 1) {

692 
	`•rötf
(
ª∂y
, "500 MÆf‹med 152 comm™d '%s'\r\n", 
cmd
);

696 i‡(
code
) {

697 
m≠pög_r16
 = 1;

698 
i
 = 0; i < 0x00200000; i++) {

699 
Mem‹yM≠
[
i
] &~
MAP_R16
;

702 
m≠pög_r16
 = 0;

704 
	`•rötf
(
ª∂y
, "252 M≠pög o‡ªad16 flow %s\r\n", 
code
 ? "started" : "stopped");

707 
code
 = 1;

708 i‡(
¨gumíts
) {

709 i‡(
	`ssˇnf
(
¨gumíts
, "%02X", &
code
) != 1) {

710 
	`•rötf
(
ª∂y
, "500 MÆf‹med 153 comm™d '%s'\r\n", 
cmd
);

714 i‡(
code
) {

715 
m≠pög_r32
 = 1;

716 
i
 = 0; i < 0x00200000; i++) {

717 
Mem‹yM≠
[
i
] &~
MAP_R32
;

720 
m≠pög_r32
 = 0;

722 
	`•rötf
(
ª∂y
, "253 M≠pög o‡ªad32 flow %s\r\n", 
code
 ? "started" : "stopped");

725 
code
 = 1;

726 i‡(
¨gumíts
) {

727 i‡(
	`ssˇnf
(
¨gumíts
, "%02X", &
code
) != 1) {

728 
	`•rötf
(
ª∂y
, "500 MÆf‹med 154 comm™d '%s'\r\n", 
cmd
);

732 i‡(
code
) {

733 
m≠pög_w8
 = 1;

734 
i
 = 0; i < 0x00200000; i++) {

735 
Mem‹yM≠
[
i
] &~
MAP_W8
;

738 
m≠pög_w8
 = 0;

740 
	`•rötf
(
ª∂y
, "254 M≠pög o‡wrôe8 flow %s\r\n", 
code
 ? "started" : "stopped");

743 
code
 = 1;

744 i‡(
¨gumíts
) {

745 i‡(
	`ssˇnf
(
¨gumíts
, "%02X", &
code
) != 1) {

746 
	`•rötf
(
ª∂y
, "500 MÆf‹med 155 comm™d '%s'\r\n", 
cmd
);

750 i‡(
code
) {

751 
m≠pög_w16
 = 1;

752 
i
 = 0; i < 0x00200000; i++) {

753 
Mem‹yM≠
[
i
] &~
MAP_W16
;

756 
m≠pög_w16
 = 0;

758 
	`•rötf
(
ª∂y
, "255 M≠pög o‡wrôe16 flow %s\r\n", 
code
 ? "started" : "stopped");

761 
code
 = 1;

762 i‡(
¨gumíts
) {

763 i‡(
	`ssˇnf
(
¨gumíts
, "%02X", &
code
) != 1) {

764 
	`•rötf
(
ª∂y
, "500 MÆf‹med 156 comm™d '%s'\r\n", 
cmd
);

768 i‡(
code
) {

769 
m≠pög_w32
 = 1;

770 
i
 = 0; i < 0x00200000; i++) {

771 
Mem‹yM≠
[
i
] &~
MAP_W32
;

774 
m≠pög_w32
 = 0;

776 
	`•rötf
(
ª∂y
, "256 M≠pög o‡wrôe32 flow %s\r\n", 
code
 ? "started" : "stopped");

779 
code
 = 1;

780 i‡(
¨gumíts
) {

781 i‡(
	`ssˇnf
(
¨gumíts
, "%02X", &
code
) != 1) {

782 
	`•rötf
(
ª∂y
, "500 MÆf‹med 160 comm™d '%s'\r\n", 
cmd
);

786 i‡(
code
) {

787 
bªakmp_e
 = 1;

789 
bªakmp_e
 = 0;

791 
	`•rötf
(
ª∂y
, "260 Bªak o¿m≠ o‡exe¯Êow %s\r\n", 
code
 ? "started" : "stopped");

794 
code
 = 1;

795 i‡(
¨gumíts
) {

796 i‡(
	`ssˇnf
(
¨gumíts
, "%02X", &
code
) != 1) {

797 
	`•rötf
(
ª∂y
, "500 MÆf‹med 161 comm™d '%s'\r\n", 
cmd
);

801 i‡(
code
) {

802 
bªakmp_r8
 = 1;

804 
bªakmp_r8
 = 0;

806 
	`•rötf
(
ª∂y
, "261 Bªak o¿m≠ o‡ªad8 flow %s\r\n", 
code
 ? "started" : "stopped");

809 
code
 = 1;

810 i‡(
¨gumíts
) {

811 i‡(
	`ssˇnf
(
¨gumíts
, "%02X", &
code
) != 1) {

812 
	`•rötf
(
ª∂y
, "500 MÆf‹med 162 comm™d '%s'\r\n", 
cmd
);

816 i‡(
code
) {

817 
bªakmp_r16
 = 1;

819 
bªakmp_r16
 = 0;

821 
	`•rötf
(
ª∂y
, "262 Bªak o¿m≠ o‡ªad16 flow %s\r\n", 
code
 ? "started" : "stopped");

824 
code
 = 1;

825 i‡(
¨gumíts
) {

826 i‡(
	`ssˇnf
(
¨gumíts
, "%02X", &
code
) != 1) {

827 
	`•rötf
(
ª∂y
, "500 MÆf‹med 163 comm™d '%s'\r\n", 
cmd
);

831 i‡(
code
) {

832 
bªakmp_r32
 = 1;

834 
bªakmp_r32
 = 0;

836 
	`•rötf
(
ª∂y
, "263 Bªak o¿m≠ o‡ªad32 flow %s\r\n", 
code
 ? "started" : "stopped");

839 
code
 = 1;

840 i‡(
¨gumíts
) {

841 i‡(
	`ssˇnf
(
¨gumíts
, "%02X", &
code
) != 1) {

842 
	`•rötf
(
ª∂y
, "500 MÆf‹med 164 comm™d '%s'\r\n", 
cmd
);

846 i‡(
code
) {

847 
bªakmp_w8
 = 1;

849 
bªakmp_w8
 = 0;

851 
	`•rötf
(
ª∂y
, "264 Bªak o¿m≠ o‡wrôe8 flow %s\r\n", 
code
 ? "started" : "stopped");

854 
code
 = 1;

855 i‡(
¨gumíts
) {

856 i‡(
	`ssˇnf
(
¨gumíts
, "%02X", &
code
) != 1) {

857 
	`•rötf
(
ª∂y
, "500 MÆf‹med 165 comm™d '%s'\r\n", 
cmd
);

861 i‡(
code
) {

862 
bªakmp_w16
 = 1;

864 
bªakmp_w16
 = 0;

866 
	`•rötf
(
ª∂y
, "265 Bªak o¿m≠ o‡wrôe16 flow %s\r\n", 
code
 ? "started" : "stopped");

869 
code
 = 1;

870 i‡(
¨gumíts
) {

871 i‡(
	`ssˇnf
(
¨gumíts
, "%02X", &
code
) != 1) {

872 
	`•rötf
(
ª∂y
, "500 MÆf‹med 166 comm™d '%s'\r\n", 
cmd
);

876 i‡(
code
) {

877 
bªakmp_w32
 = 1;

879 
bªakmp_w32
 = 0;

881 
	`•rötf
(
ª∂y
, "266 Bªak o¿m≠ o‡wrôe32 flow %s\r\n", 
code
 ? "started" : "stopped");

884 
sfûe
 = 
	`f›í
("flow.idc", "wb");

885 
	`Ârötf
(
sfûe
, "#include <idc.idc>\r\n\r\n");

886 
	`Ârötf
(
sfûe
, "static main(void) {\r\n");

887 
i
 = 0; i < 0x00200000; i++) {

888 i‡(
	`IsM≠M¨ked
(
i
, 
MAP_EXEC_JAL
)) {

889 
	`Ârötf
(
sfûe
, "\tMakeFun˘i⁄(0X8%07X,BADADDR);\r\n", 
i
);

892 
	`Ârötf
(
sfûe
, "}\r\n");

893 
	`f˛o£
(
sfûe
);

894 
sfûe
 = 
	`f›í
("markcode.idc", "wb");

895 
	`Ârötf
(
sfûe
, "#include <idc.idc>\r\n\r\n");

896 
	`Ârötf
(
sfûe
, "static main(void) {\r\n");

897 
i
 = 0; i < 0x00200000; i++) {

898 i‡(
	`IsM≠M¨ked
(
i
, 
MAP_EXEC
)) {

899 
	`Ârötf
(
sfûe
, "\tMakeCode(0X8%07X);\r\n", 
i
);

902 
	`Ârötf
(
sfûe
, "}\r\n");

903 
	`f˛o£
(
sfûe
);

904 
	`•rötf
(
ª∂y
, "270 flow.idcánd markcode.idc dumped\r\n");

907 
p
 = 
¨gumíts
;

908 i‡(
¨gumíts
) {

909 
code
 = 
	`°πﬁ
(
¨gumíts
, &
p
, 16);

911 i‡(
p
 =
¨gumíts
) {

912 i‡(
fú°
) {

913 
ª∂y
[0] = 0;

914 
bp
 = 
fú°
; bp; b∞
	`√xt_bªakpoöt
(bp)) {

915 
	`•rötf
(
ª∂y
, "%s400 %X@%08X-%s\r\n",Ñïly, 
bp
->
numbî
, bp->
addªss
, 
bªakpoöt_ty≥_«mes
[bp->
ty≥
]);

918 
	`•rötf
(
ª∂y
, "530 No breakpoint\r\n");

921 i‡((
bp
 = 
	`föd_bªakpoöt
(
code
))) {

922 
	`•rötf
(
ª∂y
, "400 %X@%08X-%s\r\n", 
bp
->
numbî
, bp->
addªss
, 
bªakpoöt_ty≥_«mes
[bp->
ty≥
]);

924 
	`•rötf
(
ª∂y
, "530 InvÆid bªakpoöànumbî: %X\r\n", 
code
);

929 
p
 = 
¨gumíts
;

930 i‡(
¨gumíts
) {

931 
code
 = 
	`°πﬁ
(
¨gumíts
, &
p
, 16);

933 i‡(
p
 =
¨gumíts
) {

934 
fú°
 !
NULL
Ë
	`dñëe_bªakpoöt
(first);

935 
	`•rötf
(
ª∂y
, "401 All breakpoints deleted.\r\n");

937 i‡((
bp
 = 
	`föd_bªakpoöt
(
code
))) {

938 
	`dñëe_bªakpoöt
(
bp
);

939 
	`•rötf
(
ª∂y
, "401 Bªakpoöà%X dñëed.\r\n", 
code
);

941 
	`•rötf
(
ª∂y
, "530 InvÆid bªakpoöànumbî: %X\r\n", 
code
);

946 i‡(!
¨gumíts
 || 
	`ssˇnf
◊rgumíts, "%08X", &
addªss
) != 1) {

947 
	`•rötf
(
ª∂y
, "500 MÆf‹med 310 comm™d '%s'\r\n", 
¨gumíts
);

954 
code
 = 
	`add_bªakpoöt
(
E
, 
addªss
);

955 
	`•rötf
(
ª∂y
, "410 %X\r\n", 
code
);

958 i‡(!
¨gumíts
 || 
	`ssˇnf
◊rgumíts, "%08X", &
addªss
) != 1) {

959 
	`•rötf
(
ª∂y
, "500 MÆf‹med 320 comm™d '%s'\r\n", 
¨gumíts
);

962 i‡((
addªss
 < 0x80000000) || (address >= 0x80200000)) {

963 
	`•rötf
(
ª∂y
, "532 InvÆidáddªs†%08X\r\n", 
addªss
);

966 
code
 = 
	`add_bªakpoöt
(
R1
, 
addªss
);

967 
	`•rötf
(
ª∂y
, "420 %X\r\n", 
code
);

970 i‡(!
¨gumíts
 || 
	`ssˇnf
◊rgumíts, "%08X", &
addªss
) != 1) {

971 
	`•rötf
(
ª∂y
, "500 MÆf‹med 321 comm™d '%s'\r\n", 
¨gumíts
);

974 i‡((
addªss
 & 1) || (address < 0x80000000) || (address >= 0x80200000)) {

975 
	`•rötf
(
ª∂y
, "532 InvÆidáddªs†%08X\r\n", 
addªss
);

978 
code
 = 
	`add_bªakpoöt
(
R2
, 
addªss
);

979 
	`•rötf
(
ª∂y
, "421 %X\r\n", 
code
);

982 i‡(!
¨gumíts
 || 
	`ssˇnf
◊rgumíts, "%08X", &
addªss
) != 1) {

983 
	`•rötf
(
ª∂y
, "500 MÆf‹med 322 comm™d '%s'\r\n", 
¨gumíts
);

986 i‡((
addªss
 & 3) || (address < 0x80000000) || (address >= 0x80200000)) {

987 
	`•rötf
(
ª∂y
, "532 InvÆidáddªs†%08X\r\n", 
addªss
);

990 
code
 = 
	`add_bªakpoöt
(
R4
, 
addªss
);

991 
	`•rötf
(
ª∂y
, "422 %X\r\n", 
code
);

994 i‡(!
¨gumíts
 || 
	`ssˇnf
◊rgumíts, "%08X", &
addªss
) != 1) {

995 
	`•rötf
(
ª∂y
, "500 MÆf‹med 330 comm™d '%s'\r\n", 
¨gumíts
);

998 i‡((
addªss
 < 0x80000000) || (address >= 0x80200000)) {

999 
	`•rötf
(
ª∂y
, "533 InvÆidáddªs†%08X\r\n", 
addªss
);

1002 
code
 = 
	`add_bªakpoöt
(
W1
, 
addªss
);

1003 
	`•rötf
(
ª∂y
, "430 %X\r\n", 
code
);

1006 i‡(!
¨gumíts
 || 
	`ssˇnf
◊rgumíts, "%08X", &
addªss
) != 1) {

1007 
	`•rötf
(
ª∂y
, "500 MÆf‹med 331 comm™d '%s'\r\n", 
¨gumíts
);

1010 i‡((
addªss
 & 1) || (address < 0x80000000) || (address >= 0x80200000)) {

1011 
	`•rötf
(
ª∂y
, "533 InvÆidáddªs†%08X\r\n", 
addªss
);

1014 
code
 = 
	`add_bªakpoöt
(
W2
, 
addªss
);

1015 
	`•rötf
(
ª∂y
, "431 %X\r\n", 
code
);

1018 i‡(!
¨gumíts
 || 
	`ssˇnf
◊rgumíts, "%08X", &
addªss
) != 1) {

1019 
	`•rötf
(
ª∂y
, "500 MÆf‹med 332 comm™d '%s'\r\n", 
¨gumíts
);

1022 i‡((
addªss
 & 3) || (address < 0x80000000) || (address >= 0x80200000)) {

1023 
	`•rötf
(
ª∂y
, "533 InvÆidáddªs†%08X\r\n", 
addªss
);

1026 
code
 = 
	`add_bªakpoöt
(
W4
, 
addªss
);

1027 
	`•rötf
(
ª∂y
, "432 %X\r\n", 
code
);

1030 
∑u£d
 = 1;

1031 
	`•rötf
(
ª∂y
, "490 Paused\r\n");

1034 
∑u£d
 = 0;

1035 
	`•rötf
(
ª∂y
, "491 Resumed\r\n");

1038 
p
 = 
¨gumíts
;

1039 i‡(
¨gumíts
) {

1040 
åa˚
 = 
	`°πﬁ
(
¨gumíts
, &
p
, 10);

1042 i‡(
p
 =
¨gumíts
) {

1043 
åa˚
 = 1;

1045 
∑u£d
 = 0;

1046 
	`•rötf
(
ª∂y
, "495 Tracing\r\n");

1049 
∑u£d
 = 0;

1050 
åa˚
 = 0;

1051 
ª£t
 = 2;

1052 
	`•rötf
(
ª∂y
, "498 SoftÑesetting\r\n");

1055 
∑u£d
 = 0;

1056 
åa˚
 = 0;

1057 
ª£t
 = 1;

1058 
	`•rötf
(
ª∂y
, "499 Resetting\r\n");

1061 
	`•rötf
(
ª∂y
, "500 Unknow¿comm™d '%s'\r\n", 
cmd
);

1064 
	`WrôeSockë
(
ª∂y
, 
	`°æí
(reply));

1066 i‡(
dumpög
) {

1067 
	`WrôeSockë
(
dump
, 
size
);

1070 i‡(
ßve
) {

1071 
	`‰ì
(
ßve
);

1074 
	}
}

1076 
	$DebugCheckBP
(
u32
 
addªss
, 
bªakpoöt_ty≥s
 
ty≥
) {

1077 
bªakpoöt_t
 *
bp
;

1078 
ª∂y
[512];

1080 i‡(!
debuggî_a˘ive
 || 
ª£t
)

1082 
bp
 = 
fú°
; bp; b∞
	`√xt_bªakpoöt
(bp)) {

1083 i‡((
bp
->
ty≥
 =ty≥Ë&& (bp->
addªss
 ==áddress)) {

1084 
	`•rötf
(
ª∂y
, "030 %X@%08X\r\n", 
bp
->
numbî
, 
psxRegs
.
pc
);

1085 
	`WrôeSockë
(
ª∂y
, 
	`°æí
(reply));

1086 
∑u£d
 = 1;

1090 i‡(
bªakmp_e
 && 
ty≥
 =
E
) {

1091 i‡(!
	`IsM≠M¨ked
(
addªss
, 
MAP_EXEC
)) {

1092 
	`•rötf
(
ª∂y
, "010 %08X@%08X\r\n", 
addªss
, 
psxRegs
.
pc
);

1093 
	`WrôeSockë
(
ª∂y
, 
	`°æí
(reply));

1094 
∑u£d
 = 1;

1097 i‡(
bªakmp_r8
 && 
ty≥
 =
R1
) {

1098 i‡(!
	`IsM≠M¨ked
(
addªss
, 
MAP_R8
)) {

1099 
	`•rötf
(
ª∂y
, "011 %08X@%08X\r\n", 
addªss
, 
psxRegs
.
pc
);

1100 
	`WrôeSockë
(
ª∂y
, 
	`°æí
(reply));

1101 
∑u£d
 = 1;

1104 i‡(
bªakmp_r16
 && 
ty≥
 =
R2
) {

1105 i‡(!
	`IsM≠M¨ked
(
addªss
, 
MAP_R16
)) {

1106 
	`•rötf
(
ª∂y
, "012 %08X@%08X\r\n", 
addªss
, 
psxRegs
.
pc
);

1107 
	`WrôeSockë
(
ª∂y
, 
	`°æí
(reply));

1108 
∑u£d
 = 1;

1111 i‡(
bªakmp_r32
 && 
ty≥
 =
R4
) {

1112 i‡(!
	`IsM≠M¨ked
(
addªss
, 
MAP_R32
)) {

1113 
	`•rötf
(
ª∂y
, "013 %08X@%08X\r\n", 
addªss
, 
psxRegs
.
pc
);

1114 
	`WrôeSockë
(
ª∂y
, 
	`°æí
(reply));

1115 
∑u£d
 = 1;

1118 i‡(
bªakmp_w8
 && 
ty≥
 =
W1
) {

1119 i‡(!
	`IsM≠M¨ked
(
addªss
, 
MAP_W8
)) {

1120 
	`•rötf
(
ª∂y
, "014 %08X@%08X\r\n", 
addªss
, 
psxRegs
.
pc
);

1121 
	`WrôeSockë
(
ª∂y
, 
	`°æí
(reply));

1122 
∑u£d
 = 1;

1125 i‡(
bªakmp_w16
 && 
ty≥
 =
W2
) {

1126 i‡(!
	`IsM≠M¨ked
(
addªss
, 
MAP_W16
)) {

1127 
	`•rötf
(
ª∂y
, "015 %08X@%08X\r\n", 
addªss
, 
psxRegs
.
pc
);

1128 
	`WrôeSockë
(
ª∂y
, 
	`°æí
(reply));

1129 
∑u£d
 = 1;

1132 i‡(
bªakmp_w32
 && 
ty≥
 =
W4
) {

1133 i‡(!
	`IsM≠M¨ked
(
addªss
, 
MAP_W32
)) {

1134 
	`•rötf
(
ª∂y
, "016 %08X@%08X\r\n", 
addªss
, 
psxRegs
.
pc
);

1135 
	`WrôeSockë
(
ª∂y
, 
	`°æí
(reply));

1136 
∑u£d
 = 1;

1139 i‡(
m≠pög_r8
 && 
ty≥
 =
R1
Ë
	`M¨kM≠
(
addªss
, 
MAP_R8
);

1140 i‡(
m≠pög_r16
 && 
ty≥
 =
R2
Ë
	`M¨kM≠
(
addªss
, 
MAP_R16
);

1141 i‡(
m≠pög_r32
 && 
ty≥
 =
R4
Ë
	`M¨kM≠
(
addªss
, 
MAP_R32
);

1142 i‡(
m≠pög_w8
 && 
ty≥
 =
W1
Ë
	`M¨kM≠
(
addªss
, 
MAP_W8
);

1143 i‡(
m≠pög_w16
 && 
ty≥
 =
W2
Ë
	`M¨kM≠
(
addªss
, 
MAP_W16
);

1144 i‡(
m≠pög_w32
 && 
ty≥
 =
W4
Ë
	`M¨kM≠
(
addªss
, 
MAP_W32
);

1145 
	}
}

	@libpcsxcore/debug.h

20 #i‚de‡
__DEBUG_H__


21 
	#__DEBUG_H__


	)

23 #ifde‡
__˝lu•lus


27 
	ebªakpoöt_ty≥s
 {

28 
E
, 
R1
, 
R2
, 
R4
, 
W1
, 
W2
, 
W4


31 
SèπDebuggî
();

32 
St›Debuggî
();

34 
DebugVSync
();

35 
Pro˚ssDebug
();

37 
DebugCheckBP
(
u32
 
addªss
, 
bªakpoöt_ty≥s
 
ty≥
);

39 
Pau£Debuggî
();

40 
ResumeDebuggî
();

42 *
disRNameCP0
[];

44 * 
disR3000AF
(
u32
 
code
, u32 
pc
);

64 #i‡
deföed
 (
PSXCPU_LOG
Ë|| deföed(
PSXDMA_LOG
Ë|| deföed(
CDR_LOG
Ë|| deföed(
PSXHW_LOG
) || \

65 
deföed
(
PSXBIOS_LOG
Ë|| deföed(
PSXMEM_LOG
Ë|| deföed(
GTE_LOG
Ë|| deföed(
PAD_LOG
)

66 
	#EMU_LOG
 
__Log


	)

69 #ifde‡
__˝lu•lus


	@libpcsxcore/decode_xa.c

24 
	~"decode_xa.h
"

26 
	#FIXED


	)

28 
	#NOT
(
_X_
Ë(!(_X_))

	)

29 
	#XACLAMP
(
_X_
,
_MI_
,
_MA_
Ë{if(_X_<_MI_)_X_=_MI_;if(_X_>_MA_)_X_=_MA_;}

	)

31 
	#SH
 4

	)

32 
	#SHC
 10

	)

38 #i‚de‡
FIXED


39 
	gK0
[4] = {

46 
	gK1
[4] = {

53 
	gK0
[4] = {

54 0.0 * (1<<
SHC
),

55 0.9375 * (1<<
SHC
),

56 1.796875 * (1<<
SHC
),

57 1.53125 * (1<<
SHC
)

60 
	gK1
[4] = {

61 0.0 * (1<<
SHC
),

62 0.0 * (1<<
SHC
),

63 -0.8125 * (1<<
SHC
),

64 -0.859375 * (1<<
SHC
)

68 
	#BLKSIZ
 28

	)

71 
	$ADPCM_InôDecode
(
ADPCM_Decode_t
 *
de˝
) {

72 
de˝
->
y0
 = 0;

73 
de˝
->
y1
 = 0;

74 
	}
}

77 #i‚de‡
FIXED


78 
	#IK0
(
fid
Ë(()((-
K0
[fid]Ë* (1<<
SHC
)))

	)

79 
	#IK1
(
fid
Ë(()((-
K1
[fid]Ë* (1<<
SHC
)))

	)

81 
	#IK0
(
fid
Ë(-
K0
[fid])

	)

82 
	#IK1
(
fid
Ë(-
K1
[fid])

	)

85 
__ölöe
 
	$ADPCM_DecodeBlock16
–
ADPCM_Decode_t
 *
de˝
, 
u8
 
fûãr_ønge
, c⁄° *
vblockp
, *
de°p
, 
öc
 ) {

86 
i
;

87 
ønge
, 
fûãrid
;

88 
s32
 
fy0
, 
fy1
;

89 c⁄° 
u16
 *
blockp
;

91 
blockp
 = (c⁄° *)
vblockp
;

92 
fûãrid
 = (
fûãr_ønge
 >> 4) & 0x0f;

93 
ønge
 = (
fûãr_ønge
 >> 0) & 0x0f;

95 
fy0
 = 
de˝
->
y0
;

96 
fy1
 = 
de˝
->
y1
;

98 
i
 = 
BLKSIZ
/4; i; --i) {

99 
s32
 
y
;

100 
s32
 
x0
, 
x1
, 
x2
, 
x3
;

102 
y
 = *
blockp
++;

103 
x3
 = ()–
y
 & 0xf000Ë>> 
ønge
; x3 <<
SH
;

104 
x2
 = ()((
y
 << 4Ë& 0xf000Ë>> 
ønge
; x2 <<
SH
;

105 
x1
 = ()((
y
 << 8Ë& 0xf000Ë>> 
ønge
; x1 <<
SH
;

106 
x0
 = ()((
y
 << 12Ë& 0xf000Ë>> 
ønge
; x0 <<
SH
;

108 
x0
 -(
	`IK0
(
fûãrid
Ë* 
fy0
 + (
	`IK1
(fûãridË* 
fy1
)Ë>> 
SHC
; fy1 = fy0; fy0 = x0;

109 
x1
 -(
	`IK0
(
fûãrid
Ë* 
fy0
 + (
	`IK1
(fûãridË* 
fy1
)Ë>> 
SHC
; fy1 = fy0; fy0 = x1;

110 
x2
 -(
	`IK0
(
fûãrid
Ë* 
fy0
 + (
	`IK1
(fûãridË* 
fy1
)Ë>> 
SHC
; fy1 = fy0; fy0 = x2;

111 
x3
 -(
	`IK0
(
fûãrid
Ë* 
fy0
 + (
	`IK1
(fûãridË* 
fy1
)Ë>> 
SHC
; fy1 = fy0; fy0 = x3;

113 
	`XACLAMP
–
x0
, -32768<<
SH
, 32767<<SH ); *
de°p
 = x0 >> SH; de°∞+
öc
;

114 
	`XACLAMP
–
x1
, -32768<<
SH
, 32767<<SH ); *
de°p
 = x1 >> SH; de°∞+
öc
;

115 
	`XACLAMP
–
x2
, -32768<<
SH
, 32767<<SH ); *
de°p
 = x2 >> SH; de°∞+
öc
;

116 
	`XACLAMP
–
x3
, -32768<<
SH
, 32767<<SH ); *
de°p
 = x3 >> SH; de°∞+
öc
;

118 
de˝
->
y0
 = 
fy0
;

119 
de˝
->
y1
 = 
fy1
;

120 
	}
}

122 
	ghódèbÀ
[4] = {0,2,8,10};

125 
	$xa_decode_d©a
–
xa_decode_t
 *
xdp
, *
§˝
 ) {

126 c⁄° 
u8
 *
sound_group•
;

127 c⁄° 
u8
 *
sound_d©≠
, *
sound_d©≠2
;

128 
i
, 
j
, 
k
, 
nbôs
;

129 
u16
 
d©a
[4096], *
d©≠
;

130 *
de°p
;

132 
de°p
 = 
xdp
->
pcm
;

133 
nbôs
 = 
xdp
->nbits == 4 ? 4 : 2;

135 i‡(
xdp
->
°îeo
) {

136 i‡((
xdp
->
nbôs
 =8Ë&& (xdp->
‰eq
 == 37800)) {

137 
j
=0; j < 18; j++) {

138 
sound_group•
 = 
§˝
 + 
j
 * 128;

139 
sound_d©≠
 = 
sound_group•
 + 16;

141 
i
=0; i < 
nbôs
; i++) {

142 
d©≠
 = 
d©a
;

143 
sound_d©≠2
 = 
sound_d©≠
 + 
i
;

145 
k
=0; k < 14; k++, 
sound_d©≠2
 += 8) {

146 *(
d©≠
++Ë(
u16
)
sound_d©≠2
[0] |

147 (
u16
)(
sound_d©≠2
[4] << 8);

150 
	`ADPCM_DecodeBlock16
–&
xdp
->
À·
, 
sound_group•
[
hódèbÀ
[
i
]+0], 
d©a
,

151 
de°p
+0, 2 );

153 
d©≠
 = 
d©a
;

154 
sound_d©≠2
 = 
sound_d©≠
 + 
i
;

155 
k
=0; k < 14; k++, 
sound_d©≠2
 += 8) {

156 *(
d©≠
++Ë(
u16
)
sound_d©≠2
[0] |

157 (
u16
)(
sound_d©≠2
[4] << 8);

159 
	`ADPCM_DecodeBlock16
–&
xdp
->
right
, 
sound_group•
[
hódèbÀ
[
i
]+1], 
d©a
,

160 
de°p
+1, 2 );

162 
de°p
 += 28*2;

166 
j
=0; j < 18; j++) {

167 
sound_group•
 = 
§˝
 + 
j
 * 128;

168 
sound_d©≠
 = 
sound_group•
 + 16;

170 
i
=0; i < 
nbôs
; i++) {

171 
d©≠
 = 
d©a
;

172 
sound_d©≠2
 = 
sound_d©≠
 + 
i
;

174 
k
=0; k < 7; k++, 
sound_d©≠2
 += 16) {

175 *(
d©≠
++Ë(
u16
)(
sound_d©≠2
[ 0] & 0x0f) |

176 ((
u16
)(
sound_d©≠2
[ 4] & 0x0f) << 4) |

177 ((
u16
)(
sound_d©≠2
[ 8] & 0x0f) << 8) |

178 ((
u16
)(
sound_d©≠2
[12] & 0x0f) << 12);

180 
	`ADPCM_DecodeBlock16
–&
xdp
->
À·
, 
sound_group•
[
hódèbÀ
[
i
]+0], 
d©a
,

181 
de°p
+0, 2 );

183 
d©≠
 = 
d©a
;

184 
sound_d©≠2
 = 
sound_d©≠
 + 
i
;

185 
k
=0; k < 7; k++, 
sound_d©≠2
 += 16) {

186 *(
d©≠
++Ë(
u16
)(
sound_d©≠2
[ 0] >> 4) |

187 ((
u16
)(
sound_d©≠2
[ 4] >> 4) << 4) |

188 ((
u16
)(
sound_d©≠2
[ 8] >> 4) << 8) |

189 ((
u16
)(
sound_d©≠2
[12] >> 4) << 12);

191 
	`ADPCM_DecodeBlock16
–&
xdp
->
right
, 
sound_group•
[
hódèbÀ
[
i
]+1], 
d©a
,

192 
de°p
+1, 2 );

194 
de°p
 += 28*2;

199 i‡((
xdp
->
nbôs
 =8Ë&& (xdp->
‰eq
 == 37800)) {

200 
j
=0; j < 18; j++) {

201 
sound_group•
 = 
§˝
 + 
j
 * 128;

202 
sound_d©≠
 = 
sound_group•
 + 16;

204 
i
=0; i < 
nbôs
; i++) {

205 
d©≠
 = 
d©a
;

206 
sound_d©≠2
 = 
sound_d©≠
 + 
i
;

207 
k
=0; k < 14; k++, 
sound_d©≠2
 += 8) {

208 *(
d©≠
++Ë(
u16
)
sound_d©≠2
[0] |

209 (
u16
)(
sound_d©≠2
[4] << 8);

211 
	`ADPCM_DecodeBlock16
–&
xdp
->
À·
, 
sound_group•
[
hódèbÀ
[
i
]+0], 
d©a
,

212 
de°p
, 1 );

214 
de°p
 += 28;

216 
d©≠
 = 
d©a
;

217 
sound_d©≠2
 = 
sound_d©≠
 + 
i
;

218 
k
=0; k < 14; k++, 
sound_d©≠2
 += 8) {

219 *(
d©≠
++Ë(
u16
)
sound_d©≠2
[0] |

220 (
u16
)(
sound_d©≠2
[4] << 8);

222 
	`ADPCM_DecodeBlock16
–&
xdp
->
À·
, 
sound_group•
[
hódèbÀ
[
i
]+1], 
d©a
,

223 
de°p
, 1 );

225 
de°p
 += 28;

229 
j
=0; j < 18; j++) {

230 
sound_group•
 = 
§˝
 + 
j
 * 128;

231 
sound_d©≠
 = 
sound_group•
 + 16;

233 
i
=0; i < 
nbôs
; i++) {

234 
d©≠
 = 
d©a
;

235 
sound_d©≠2
 = 
sound_d©≠
 + 
i
;

236 
k
=0; k < 7; k++, 
sound_d©≠2
 += 16) {

237 *(
d©≠
++Ë(
u16
)(
sound_d©≠2
[ 0] & 0x0f) |

238 ((
u16
)(
sound_d©≠2
[ 4] & 0x0f) << 4) |

239 ((
u16
)(
sound_d©≠2
[ 8] & 0x0f) << 8) |

240 ((
u16
)(
sound_d©≠2
[12] & 0x0f) << 12);

242 
	`ADPCM_DecodeBlock16
–&
xdp
->
À·
, 
sound_group•
[
hódèbÀ
[
i
]+0], 
d©a
,

243 
de°p
, 1 );

245 
de°p
 += 28;

247 
d©≠
 = 
d©a
;

248 
sound_d©≠2
 = 
sound_d©≠
 + 
i
;

249 
k
=0; k < 7; k++, 
sound_d©≠2
 += 16) {

250 *(
d©≠
++Ë(
u16
)(
sound_d©≠2
[ 0] >> 4) |

251 ((
u16
)(
sound_d©≠2
[ 4] >> 4) << 4) |

252 ((
u16
)(
sound_d©≠2
[ 8] >> 4) << 8) |

253 ((
u16
)(
sound_d©≠2
[12] >> 4) << 12);

255 
	`ADPCM_DecodeBlock16
–&
xdp
->
À·
, 
sound_group•
[
hódèbÀ
[
i
]+1], 
d©a
,

256 
de°p
, 1 );

258 
de°p
 += 28;

263 
	}
}

269 
u8
 
	mfûíum
;

270 
u8
 
	mch™num
;

271 
u8
 
	msubmode
;

272 
u8
 
	mcodög
;

274 
u8
 
	mfûíum2
;

275 
u8
 
	mch™num2
;

276 
u8
 
	msubmode2
;

277 
u8
 
	mcodög2
;

278 } 
	txa_subhódî_t
;

280 
	#SUB_SUB_EOF
 (1<<7)

281 
	#SUB_SUB_RT
 (1<<6)

282 
	#SUB_SUB_FORM
 (1<<5)

283 
	#SUB_SUB_TRIGGER
 (1<<4)

284 
	#SUB_SUB_DATA
 (1<<3)

285 
	#SUB_SUB_AUDIO
 (1<<2)

286 
	#SUB_SUB_VIDEO
 (1<<1)

287 
	#SUB_SUB_EOR
 (1<<0)

288 

	)

289 
	#AUDIO_CODING_GET_STEREO
(
_X_
Ë–(_X_Ë& 3)

	)

290 
	#AUDIO_CODING_GET_FREQ
(
_X_
Ë(((_X_Ë>> 2Ë& 3)

	)

291 
	#AUDIO_CODING_GET_BPS
(
_X_
Ë(((_X_Ë>> 4Ë& 3)

	)

292 
	#AUDIO_CODING_GET_EMPHASIS
(
_X_
Ë(((_X_Ë>> 6Ë& 1)

	)

294 
	#SUB_UNKNOWN
 0

	)

295 
	#SUB_VIDEO
 1

	)

296 
	#SUB_AUDIO
 2

	)

299 
	$∑r£_xa_audio_£˘‹
–
xa_decode_t
 *
xdp
,

300 
xa_subhódî_t
 *
subhódp
,

301 *
£˘‹p
,

302 
is_fú°_£˘‹
 ) {

303 i‡–
is_fú°_£˘‹
 ) {

304  
	`AUDIO_CODING_GET_FREQ
(
subhódp
->
codög
) ) {

305 0: 
xdp
->
‰eq
 = 37800; ;

306 1: 
xdp
->
‰eq
 = 18900; ;

307 : 
xdp
->
‰eq
 = 0; ;

309  
	`AUDIO_CODING_GET_BPS
(
subhódp
->
codög
) ) {

310 0: 
xdp
->
nbôs
 = 4; ;

311 1: 
xdp
->
nbôs
 = 8; ;

312 : 
xdp
->
nbôs
 = 0; ;

314  
	`AUDIO_CODING_GET_STEREO
(
subhódp
->
codög
) ) {

315 0: 
xdp
->
°îeo
 = 0; ;

316 1: 
xdp
->
°îeo
 = 1; ;

317 : 
xdp
->
°îeo
 = 0; ;

320 i‡–
xdp
->
‰eq
 == 0 )

323 
	`ADPCM_InôDecode
–&
xdp
->
À·
 );

324 
	`ADPCM_InôDecode
–&
xdp
->
right
 );

326 
xdp
->
nßm∂es
 = 18 * 28 * 8;

327 i‡(
xdp
->
°îeo
 =1Ëxdp->
nßm∂es
 /= 2;

329 
	`xa_decode_d©a
–
xdp
, 
£˘‹p
 );

332 
	}
}

343 
s32
 
	$xa_decode_£˘‹
–
xa_decode_t
 *
xdp
,

344 *
£˘‹p
, 
is_fú°_£˘‹
 ) {

345 i‡(
	`∑r£_xa_audio_£˘‹
(
xdp
, (
xa_subhódî_t
 *)
£˘‹p
, se˘‹∞+ (xa_subhódî_t), 
is_fú°_£˘‹
))

349 
	}
}

	@libpcsxcore/decode_xa.h

20 #i‚de‡
__DECODE_XA_H__


21 
	#__DECODE_XA_H__


	)

23 #ifde‡
__˝lu•lus


27 
	~"psxcomm⁄.h
"

30 
s32
 
y0
, 
y1
;

31 } 
	tADPCM_Decode_t
;

34 
‰eq
;

35 
nbôs
;

36 
°îeo
;

37 
nßm∂es
;

38 
ADPCM_Decode_t
 
À·
, 
right
;

39 
pcm
[16384];

40 } 
	txa_decode_t
;

42 
s32
 
xa_decode_£˘‹
–
xa_decode_t
 *
xdp
,

43 *
£˘‹p
,

44 
is_fú°_£˘‹
 );

46 #ifde‡
__˝lu•lus


	@libpcsxcore/disr3000a.c

24 
	~"psxcomm⁄.h
"

26 
	go°r
[256];

29 *
	gdisRNameGPR
[] = {

35 *
	gdisRNameCP0
[] = {

44 * (*
	tTdisR3000AF
)(
	tu32
 
	tcode
, u32 
	tpc
);

47 
	#MakeDisFg
(
‚
, 
b
Ë* 
	`‚
(
u32
 
code
, u32 
pc
Ë{ b;  
o°r
; }

	)

48 
	#MakeDisF
(
‚
, 
b
) \

49 * 
	`‚
(
u32
 
code
, u32 
pc
) { \

50 
	`•rötf
 (
o°r
, "%8.8x %8.8x:", 
pc
, 
code
); \

51 
b
;  
o°r
; \

52 }

	)

55 
	~"r3000a.h
"

57 #unde‡
_Fun˘_


58 #unde‡
_Rd_


59 #unde‡
_Rt_


60 #unde‡
_Rs_


61 #unde‡
_Sa_


62 #unde‡
_Im_


63 #unde‡
_T¨gë_


65 
	#_Fun˘_
 ((
code
 ) & 0x3F)

66 
	#_Rd_
 ((
code
 >> 11) & 0x1F)

67 
	#_Rt_
 ((
code
 >> 16) & 0x1F)

68 
	#_Rs_
 ((
code
 >> 21) & 0x1F)

69 
	#_Sa_
 ((
code
 >> 6) & 0x1F)

70 
	#_Im_
 ( 
code
 & 0xFFFF)

71 

	)

72 
	#_T¨gë_
 ((
pc
 & 0xf0000000Ë+ ((
code
 & 0x03ffffffË* 4))

	)

73 
	#_Bønch_
 (
pc
 + 4 + (()
_Im_
 * 4))

	)

74 
	#_OfB_
 
_Im_
, 
_nRs_


	)

76 
	#dName
(
i
Ë
	`•rötf
(
o°r
, "%†%-7s,", o°r, i)

	)

77 
	#dGPR
(
i
Ë
	`•rötf
(
o°r
, "%†%8.8x (%s),", o°r, 
psxRegs
.
GPR
.
r
[i], 
disRNameGPR
[i])

	)

78 
	#dCP0
(
i
Ë
	`•rötf
(
o°r
, "%†%8.8x (%s),", o°r, 
psxRegs
.
CP0
.
r
[i], 
disRNameCP0
[i])

	)

79 
	#dHI
(Ë
	`•rötf
(
o°r
, "%†%8.8x (%s),", o°r, 
psxRegs
.
GPR
.
n
.
hi
, "hi")

	)

80 
	#dLO
(Ë
	`•rötf
(
o°r
, "%†%8.8x (%s),", o°r, 
psxRegs
.
GPR
.
n
.
lo
, "lo")

	)

81 
	#dImm
(Ë
	`•rötf
(
o°r
, "%†%4.4x (%d),", o°r, 
_Im_
, _Im_)

	)

82 
	#dT¨gë
(Ë
	`•rötf
(
o°r
, "%†%8.8x,", o°r, 
_T¨gë_
)

	)

83 
	#dSa
(Ë
	`•rötf
(
o°r
, "%†%2.2x (%d),", o°r, 
_Sa_
, _Sa_)

	)

84 
	#dOfB
(Ë
	`•rötf
(
o°r
, "%†%4.4x (%8.8x (%s)),", o°r, 
_Im_
, 
psxRegs
.
GPR
.
r
[
_Rs_
], 
disRNameGPR
[_Rs_])

	)

85 
	#dOff£t
(Ë
	`•rötf
(
o°r
, "%†%8.8x,", o°r, 
_Bønch_
)

	)

86 
	#dCode
(Ë
	`•rötf
(
o°r
, "%†%8.8x,", o°r, (
code
 >> 6Ë& 0xffffff)

	)

92 
MakeDisF
(
disADDI
, 
dName
("ADDI"); 
dGPR
(
_Rt_
); dGPR(
_Rs_
); 
dImm
();)

93 
MakeDisF
(
disADDIU
, 
dName
("ADDIU"); 
dGPR
(
_Rt_
); dGPR(
_Rs_
); 
dImm
();)

94 
MakeDisF
(
disANDI
, 
dName
("ANDI"); 
dGPR
(
_Rt_
); dGPR(
_Rs_
); 
dImm
();)

95 
MakeDisF
(
disORI
, 
dName
("ORI"); 
dGPR
(
_Rt_
); dGPR(
_Rs_
); 
dImm
();)

96 
MakeDisF
(
disSLTI
, 
dName
("SLTI"); 
dGPR
(
_Rt_
); dGPR(
_Rs_
); 
dImm
();)

97 
MakeDisF
(
disSLTIU
, 
dName
("SLTIU"); 
dGPR
(
_Rt_
); dGPR(
_Rs_
); 
dImm
();)

98 
MakeDisF
(
disXORI
, 
dName
("XORI"); 
dGPR
(
_Rt_
); dGPR(
_Rs_
); 
dImm
();)

104 
MakeDisF
(
disADD
, 
dName
("ADD"); 
dGPR
(
_Rd_
); dGPR(
_Rs_
); dGPR(
_Rt_
);)

105 
MakeDisF
(
disADDU
, 
dName
("ADDU"); 
dGPR
(
_Rd_
); dGPR(
_Rs_
); dGPR(
_Rt_
);)

106 
MakeDisF
(
disAND
, 
dName
("AND"); 
dGPR
(
_Rd_
); dGPR(
_Rs_
); dGPR(
_Rt_
);)

107 
MakeDisF
(
disNOR
, 
dName
("NOR"); 
dGPR
(
_Rd_
); dGPR(
_Rs_
); dGPR(
_Rt_
);)

108 
MakeDisF
(
disOR
, 
dName
("OR"); 
dGPR
(
_Rd_
); dGPR(
_Rs_
); dGPR(
_Rt_
);)

109 
MakeDisF
(
disSLT
, 
dName
("SLT"); 
dGPR
(
_Rd_
); dGPR(
_Rs_
); dGPR(
_Rt_
);)

110 
MakeDisF
(
disSLTU
, 
dName
("SLTU"); 
dGPR
(
_Rd_
); dGPR(
_Rs_
); dGPR(
_Rt_
);)

111 
MakeDisF
(
disSUB
, 
dName
("SUB"); 
dGPR
(
_Rd_
); dGPR(
_Rs_
); dGPR(
_Rt_
);)

112 
MakeDisF
(
disSUBU
, 
dName
("SUBU"); 
dGPR
(
_Rd_
); dGPR(
_Rs_
); dGPR(
_Rt_
);)

113 
MakeDisF
(
disXOR
, 
dName
("XOR"); 
dGPR
(
_Rd_
); dGPR(
_Rs_
); dGPR(
_Rt_
);)

119 
MakeDisF
(
disDIV
, 
dName
("DIV"); 
dGPR
(
_Rs_
); dGPR(
_Rt_
);)

120 
MakeDisF
(
disDIVU
, 
dName
("DIVU"); 
dGPR
(
_Rs_
); dGPR(
_Rt_
);)

121 
MakeDisF
(
disMULT
, 
dName
("MULT"); 
dGPR
(
_Rs_
); dGPR(
_Rt_
);)

122 
MakeDisF
(
disMULTU
, 
dName
("MULTU"); 
dGPR
(
_Rs_
); dGPR(
_Rt_
);)

128 
MakeDisF
(
disBGEZ
, 
dName
("BGEZ"); 
dGPR
(
_Rs_
); 
dOff£t
();)

129 
MakeDisF
(
disBGEZAL
, 
dName
("BGEZAL"); 
dGPR
(
_Rs_
); 
dOff£t
();)

130 
MakeDisF
(
disBGTZ
, 
dName
("BGTZ"); 
dGPR
(
_Rs_
); 
dOff£t
();)

131 
MakeDisF
(
disBLEZ
, 
dName
("BLEZ"); 
dGPR
(
_Rs_
); 
dOff£t
();)

132 
MakeDisF
(
disBLTZ
, 
dName
("BLTZ"); 
dGPR
(
_Rs_
); 
dOff£t
();)

133 
MakeDisF
(
disBLTZAL
, 
dName
("BLTZAL"); 
dGPR
(
_Rs_
); 
dOff£t
();)

139 
MakeDisF
(
disSLL
, i‡(
code
Ë{ 
dName
("SLL"); 
dGPR
(
_Rd_
); dGPR(
_Rt_
); 
dSa
(); } { dName("NOP"); })

140 
MakeDisF
(
disSRA
, 
dName
("SRA"); 
dGPR
(
_Rd_
); dGPR(
_Rt_
); 
dSa
();)

141 
MakeDisF
(
disSRL
, 
dName
("SRL"); 
dGPR
(
_Rd_
); dGPR(
_Rt_
); 
dSa
();)

147 
MakeDisF
(
disSLLV
, 
dName
("SLLV"); 
dGPR
(
_Rd_
); dGPR(
_Rt_
); dGPR(
_Rs_
);)

148 
MakeDisF
(
disSRAV
, 
dName
("SRAV"); 
dGPR
(
_Rd_
); dGPR(
_Rt_
); dGPR(
_Rs_
);)

149 
MakeDisF
(
disSRLV
, 
dName
("SRLV"); 
dGPR
(
_Rd_
); dGPR(
_Rt_
); dGPR(
_Rs_
);)

155 
MakeDisF
(
disLUI
, 
dName
("LUI"); 
dGPR
(
_Rt_
); 
dImm
();)

161 
MakeDisF
(
disMFHI
, 
dName
("MFHI"); 
dGPR
(
_Rd_
); 
dHI
();)

162 
MakeDisF
(
disMFLO
, 
dName
("MFLO"); 
dGPR
(
_Rd_
); 
dLO
();)

168 
MakeDisF
(
disMTHI
, 
dName
("MTHI"); 
dHI
(); 
dGPR
(
_Rs_
);)

169 
MakeDisF
(
disMTLO
, 
dName
("MTLO"); 
dLO
(); 
dGPR
(
_Rs_
);)

175 
MakeDisF
(
disBREAK
, 
dName
("BREAK"))

176 
MakeDisF
(
disRFE
, 
dName
("RFE"))

177 
MakeDisF
(
disSYSCALL
, 
dName
("SYSCALL"))

178 
MakeDisF
(
disHLE
, 
dName
("HLE"))

181 
MakeDisF
(
disRTPS
, 
dName
("RTPS"))

182 
MakeDisF
(
disOP
 , 
dName
("OP"))

183 
MakeDisF
(
disNCLIP
, 
dName
("NCLIP"))

184 
MakeDisF
(
disDPCS
, 
dName
("DPCS"))

185 
MakeDisF
(
disINTPL
, 
dName
("INTPL"))

186 
MakeDisF
(
disMVMVA
, 
dName
("MVMVA"))

187 
MakeDisF
(
disNCDS
 , 
dName
("NCDS"))

188 
MakeDisF
(
disCDP
 , 
dName
("CDP"))

189 
MakeDisF
(
disNCDT
 , 
dName
("NCDT"))

190 
MakeDisF
(
disNCCS
 , 
dName
("NCCS"))

191 
MakeDisF
(
disCC
 , 
dName
("CC"))

192 
MakeDisF
(
disNCS
 , 
dName
("NCS"))

193 
MakeDisF
(
disNCT
 , 
dName
("NCT"))

194 
MakeDisF
(
disSQR
 , 
dName
("SQR"))

195 
MakeDisF
(
disDCPL
 , 
dName
("DCPL"))

196 
MakeDisF
(
disDPCT
 , 
dName
("DPCT"))

197 
MakeDisF
(
disAVSZ3
, 
dName
("AVSZ3"))

198 
MakeDisF
(
disAVSZ4
, 
dName
("AVSZ4"))

199 
MakeDisF
(
disRTPT
 , 
dName
("RTPT"))

200 
MakeDisF
(
disGPF
 , 
dName
("GPF"))

201 
MakeDisF
(
disGPL
 , 
dName
("GPL"))

202 
MakeDisF
(
disNCCT
 , 
dName
("NCCT"))

204 
MakeDisF
(
disMFC2
, 
dName
("MFC2"); 
dGPR
(
_Rt_
);)

205 
MakeDisF
(
disCFC2
, 
dName
("CFC2"); 
dGPR
(
_Rt_
);)

206 
MakeDisF
(
disMTC2
, 
dName
("MTC2"); 
dGPR
(
_Rt_
);)

207 
MakeDisF
(
disCTC2
, 
dName
("CTC2"); 
dGPR
(
_Rt_
);)

213 
MakeDisF
(
disBEQ
, 
dName
("BEQ"); 
dGPR
(
_Rs_
); dGPR(
_Rt_
); 
dOff£t
();)

214 
MakeDisF
(
disBNE
, 
dName
("BNE"); 
dGPR
(
_Rs_
); dGPR(
_Rt_
); 
dOff£t
();)

220 
MakeDisF
(
disJ
, 
dName
("J"); 
dT¨gë
();)

221 
MakeDisF
(
disJAL
, 
dName
("JAL"); 
dT¨gë
(); 
dGPR
(31);)

227 
MakeDisF
(
disJR
, 
dName
("JR"); 
dGPR
(
_Rs_
);)

228 
MakeDisF
(
disJALR
, 
dName
("JALR"); 
dGPR
(
_Rs_
); 
	$dGPR
(
_Rd_
))

234 
	`MakeDisF
(
disLB
, 
	`dName
("LB"); 
	`dGPR
(
_Rt_
); 
	`dOfB
();)

235 
	`MakeDisF
(
disLBU
, 
	`dName
("LBU"); 
	`dGPR
(
_Rt_
); 
	`dOfB
();)

236 
	`MakeDisF
(
disLH
, 
	`dName
("LH"); 
	`dGPR
(
_Rt_
); 
	`dOfB
();)

237 
	`MakeDisF
(
disLHU
, 
	`dName
("LHU"); 
	`dGPR
(
_Rt_
); 
	`dOfB
();)

238 
	`MakeDisF
(
disLW
, 
	`dName
("LW"); 
	`dGPR
(
_Rt_
); 
	`dOfB
();)

239 
	`MakeDisF
(
disLWL
, 
	`dName
("LWL"); 
	`dGPR
(
_Rt_
); 
	`dOfB
();)

240 
	`MakeDisF
(
disLWR
, 
	`dName
("LWR"); 
	`dGPR
(
_Rt_
); 
	`dOfB
();)

241 
	`MakeDisF
(
disLWC2
, 
	`dName
("LWC2"); 
	`dGPR
(
_Rt_
); 
	`dOfB
();)

242 
	`MakeDisF
(
disSB
, 
	`dName
("SB"); 
	`dGPR
(
_Rt_
); 
	`dOfB
();)

243 
	`MakeDisF
(
disSH
, 
	`dName
("SH"); 
	`dGPR
(
_Rt_
); 
	`dOfB
();)

244 
	`MakeDisF
(
disSW
, 
	`dName
("SW"); 
	`dGPR
(
_Rt_
); 
	`dOfB
();)

245 
	`MakeDisF
(
disSWL
, 
	`dName
("SWL"); 
	`dGPR
(
_Rt_
); 
	`dOfB
();)

246 
	`MakeDisF
(
disSWR
, 
	`dName
("SWR"); 
	`dGPR
(
_Rt_
); 
	`dOfB
();)

247 
	`MakeDisF
(
disSWC2
, 
	`dName
("SWC2"); 
	`dGPR
(
_Rt_
); 
	`dOfB
();)

253 
	`MakeDisF
(
disMFC0
, 
	`dName
("MFC0"); 
	`dGPR
(
_Rt_
); 
	`dCP0
(
_Rd_
);)

254 
	`MakeDisF
(
disMTC0
, 
	`dName
("MTC0"); 
	`dCP0
(
_Rd_
); 
	`dGPR
(
_Rt_
);)

255 
	`MakeDisF
(
disCFC0
, 
	`dName
("CFC0"); 
	`dGPR
(
_Rt_
); 
	`dCP0
(
_Rd_
);)

256 
	`MakeDisF
(
disCTC0
, 
	`dName
("CTC0"); 
	`dCP0
(
_Rd_
); 
	`dGPR
(
_Rt_
);)

262 
	`MakeDisF
(
disNULL
, 
	`dName
("*** Bad OP ***");)

265 
TdisR3000AF
 
disR3000A_SPECIAL
[] = {

266 
disSLL
 , 
disNULL
 , 
disSRL
 , 
disSRA
 , 
disSLLV
 , disNULL , 
disSRLV
 , 
disSRAV
 ,

267 
disJR
 , 
disJALR
 , 
disNULL
, disNULL, 
disSYSCALL
, 
disBREAK
 , disNULL , disNULL ,

268 
disMFHI
, 
disMTHI
 , 
disMFLO
, 
disMTLO
, 
disNULL
 , disNULL , disNULL , disNULL ,

269 
disMULT
, 
disMULTU
, 
disDIV
 , 
disDIVU
, 
disNULL
 , disNULL , disNULL , disNULL ,

270 
disADD
 , 
disADDU
 , 
disSUB
 , 
disSUBU
, 
disAND
 , 
disOR
 , 
disXOR
 , 
disNOR
 ,

271 
disNULL
, disNULL , 
disSLT
 , 
disSLTU
, disNULL , disNULL , disNULL , disNULL ,

272 
disNULL
, disNULL , disNULL, disNULL, disNULL , disNULL , disNULL , disNULL ,

273 
disNULL
, disNULL , disNULL, disNULL, disNULL , disNULL , disNULL , 
	}
disNULL};

275 
MakeDisF
(
disSPECIAL
, 
disR3000A_SPECIAL
[
_Fun˘_
](
code
, 
pc
))

277 
TdisR3000AF
 
	gdisR3000A_BCOND
[] = {

278 
disBLTZ
 , 
disBGEZ
 , 
disNULL
, disNULL, disNULL, disNULL, disNULL, disNULL,

279 
disNULL
 , disNULL , disNULL, disNULL, disNULL, disNULL, disNULL, disNULL,

280 
disBLTZAL
, 
disBGEZAL
, 
disNULL
, disNULL, disNULL, disNULL, disNULL, disNULL,

281 
disNULL
 , disNULL , disNULL, disNULL, disNULL, disNULL, disNULL, disNULL};

283 
MakeDisF
(
disBCOND
, 
disR3000A_BCOND
[
_Rt_
](
code
, 
pc
))

285 
TdisR3000AF
 
	gdisR3000A_COP0
[] = {

286 
disMFC0
, 
disNULL
, 
disCFC0
, disNULL, 
disMTC0
, disNULL, 
disCTC0
, disNULL,

287 
disNULL
, disNULL, disNULL, disNULL, disNULL, disNULL, disNULL, disNULL,

288 
disRFE
 , 
disNULL
, disNULL, disNULL, disNULL, disNULL, disNULL, disNULL,

289 
disNULL
, disNULL, disNULL, disNULL, disNULL, disNULL, disNULL, disNULL};

291 
MakeDisF
(
disCOP0
, 
disR3000A_COP0
[
_Rs_
](
code
, 
pc
))

293 
TdisR3000AF
 
	gdisR3000A_BASIC
[] = {

294 
disMFC2
, 
disNULL
, 
disCFC2
, disNULL, 
disMTC2
, disNULL, 
disCTC2
, disNULL,

295 
disNULL
, disNULL, disNULL, disNULL, disNULL, disNULL, disNULL, disNULL,

296 
disNULL
, disNULL, disNULL, disNULL, disNULL, disNULL, disNULL, disNULL,

297 
disNULL
, disNULL, disNULL, disNULL, disNULL, disNULL, disNULL, disNULL};

299 
MakeDisF
(
disBASIC
, 
disR3000A_BASIC
[
_Rs_
](
code
, 
pc
))

301 
TdisR3000AF
 
	gdisR3000A_COP2
[] = {

302 
disBASIC
, 
disRTPS
 , 
disNULL
 , disNULL , disNULL, disNULL , 
disNCLIP
, disNULL,

303 
disNULL
 , disNULL , disNULL , disNULL , 
disOP
 , disNULL , disNULL , disNULL,

304 
disDPCS
 , 
disINTPL
, 
disMVMVA
, 
disNCDS
 , 
disCDP
 , 
disNULL
 , 
disNCDT
 , disNULL,

305 
disNULL
 , disNULL , disNULL , 
disNCCS
 , 
disCC
 , disNULL , 
disNCS
 , disNULL,

306 
disNCT
 , 
disNULL
 , disNULL , disNULL , disNULL, disNULL , disNULL , disNULL,

307 
disSQR
 , 
disDCPL
 , 
disDPCT
 , 
disNULL
 , disNULL, 
disAVSZ3
, 
disAVSZ4
, disNULL,

308 
disRTPT
 , 
disNULL
 , disNULL , disNULL , disNULL, disNULL , disNULL , disNULL,

309 
disNULL
 , disNULL , disNULL , disNULL , disNULL, 
disGPF
 , 
disGPL
 , 
disNCCT
 };

311 
MakeDisF
(
disCOP2
, 
disR3000A_COP2
[
_Fun˘_
](
code
, 
pc
))

313 
TdisR3000AF
 
	gdisR3000A
[] = {

314 
disSPECIAL
 , 
disBCOND
 , 
disJ
 , 
disJAL
 , 
disBEQ
 , 
disBNE
 , 
disBLEZ
 , 
disBGTZ
 ,

315 
disADDI
 , 
disADDIU
 , 
disSLTI
 , 
disSLTIU
, 
disANDI
, 
disORI
 , 
disXORI
 , 
disLUI
 ,

316 
disCOP0
 , 
disNULL
 , 
disCOP2
 , disNULL , disNULL, disNULL, disNULL , disNULL ,

317 
disNULL
 , disNULL , disNULL , disNULL , disNULL, disNULL, disNULL , disNULL ,

318 
disLB
 , 
disLH
 , 
disLWL
 , 
disLW
 , 
disLBU
 , 
disLHU
 , 
disLWR
 , 
disNULL
 ,

319 
disSB
 , 
disSH
 , 
disSWL
 , 
disSW
 , 
disNULL
, disNULL, 
disSWR
 , disNULL ,

320 
disNULL
 , disNULL , 
disLWC2
 , disNULL , disNULL, disNULL, disNULL , disNULL ,

321 
disNULL
 , disNULL , 
disSWC2
 , 
disHLE
 , disNULL, disNULL, disNULL , disNULL };

323 
MakeDisFg
(
disR3000AF
, 
disR3000A
[
code
 >> 26](code, 
pc
))

	@libpcsxcore/gpu.h

8 
	#PSXGPU_LCF
 (1<<31)

	)

9 
	#PSXGPU_nBUSY
 (1<<26)

	)

10 
	#PSXGPU_ILACE
 (1<<22)

	)

11 
	#PSXGPU_DHEIGHT
 (1<<19)

	)

14 
	#PSXGPU_ILACE_BITS
 (
PSXGPU_ILACE
 | 
PSXGPU_DHEIGHT
)

	)

16 
	#HW_GPU_STATUS
 
	`psxHu32ªf
(0x1814)

	)

19 
	#PSXGPU_TIMING_BITS
 (
PSXGPU_LCF
 | 
PSXGPU_nBUSY
)

	)

21 
	#gpuSyncPlugöSR
() { \

22 
HW_GPU_STATUS
 &
PSXGPU_TIMING_BITS
; \

23 
HW_GPU_STATUS
 |
	`GPU_ªadSètus
(Ë& ~
PSXGPU_TIMING_BITS
; \

24 }

	)

	@libpcsxcore/gte.c

26 
	~"gã.h
"

27 
	~"psxmem.h
"

29 
	#VX
(
n
Ë“ < 3 ? 
ªgs
->
CP2D
.
p
[¿<< 1].
sw
.
l
 :Ñegs->CP2D.p[9].sw.l)

	)

30 
	#VY
(
n
Ë“ < 3 ? 
ªgs
->
CP2D
.
p
[¿<< 1].
sw
.
h
 :Ñegs->CP2D.p[10].sw.
l
)

	)

31 
	#VZ
(
n
Ë“ < 3 ? 
ªgs
->
CP2D
.
p
[“ << 1Ë+ 1].
sw
.
l
 :Ñegs->CP2D.p[11].sw.l)

	)

32 
	#MX11
(
n
Ë“ < 3 ? 
ªgs
->
CP2C
.
p
[“ << 3)].
sw
.
l
 : 0)

	)

33 
	#MX12
(
n
Ë“ < 3 ? 
ªgs
->
CP2C
.
p
[“ << 3)].
sw
.
h
 : 0)

	)

34 
	#MX13
(
n
Ë“ < 3 ? 
ªgs
->
CP2C
.
p
[“ << 3Ë+ 1].
sw
.
l
 : 0)

	)

35 
	#MX21
(
n
Ë“ < 3 ? 
ªgs
->
CP2C
.
p
[“ << 3Ë+ 1].
sw
.
h
 : 0)

	)

36 
	#MX22
(
n
Ë“ < 3 ? 
ªgs
->
CP2C
.
p
[“ << 3Ë+ 2].
sw
.
l
 : 0)

	)

37 
	#MX23
(
n
Ë“ < 3 ? 
ªgs
->
CP2C
.
p
[“ << 3Ë+ 2].
sw
.
h
 : 0)

	)

38 
	#MX31
(
n
Ë“ < 3 ? 
ªgs
->
CP2C
.
p
[“ << 3Ë+ 3].
sw
.
l
 : 0)

	)

39 
	#MX32
(
n
Ë“ < 3 ? 
ªgs
->
CP2C
.
p
[“ << 3Ë+ 3].
sw
.
h
 : 0)

	)

40 
	#MX33
(
n
Ë“ < 3 ? 
ªgs
->
CP2C
.
p
[“ << 3Ë+ 4].
sw
.
l
 : 0)

	)

41 
	#CV1
(
n
Ë“ < 3 ? (
s32
)
ªgs
->
CP2C
.
r
[“ << 3Ë+ 5] : 0)

	)

42 
	#CV2
(
n
Ë“ < 3 ? (
s32
)
ªgs
->
CP2C
.
r
[“ << 3Ë+ 6] : 0)

	)

43 
	#CV3
(
n
Ë“ < 3 ? (
s32
)
ªgs
->
CP2C
.
r
[“ << 3Ë+ 7] : 0)

	)

45 
	#fSX
(
n
Ë((
ªgs
->
CP2D
.
p
)[(“Ë+ 12)].
sw
.
l
)

	)

46 
	#fSY
(
n
Ë((
ªgs
->
CP2D
.
p
)[(“Ë+ 12)].
sw
.
h
)

	)

47 
	#fSZ
(
n
Ë((
ªgs
->
CP2D
.
p
)[(“Ë+ 17)].
w
.
l
Ë

	)

49 
	#gãVXY0
 (
ªgs
->
CP2D
.
r
[0])

	)

50 
	#gãVX0
 (
ªgs
->
CP2D
.
p
[0].
sw
.
l
)

	)

51 
	#gãVY0
 (
ªgs
->
CP2D
.
p
[0].
sw
.
h
)

	)

52 
	#gãVZ0
 (
ªgs
->
CP2D
.
p
[1].
sw
.
l
)

	)

53 
	#gãVXY1
 (
ªgs
->
CP2D
.
r
[2])

	)

54 
	#gãVX1
 (
ªgs
->
CP2D
.
p
[2].
sw
.
l
)

	)

55 
	#gãVY1
 (
ªgs
->
CP2D
.
p
[2].
sw
.
h
)

	)

56 
	#gãVZ1
 (
ªgs
->
CP2D
.
p
[3].
sw
.
l
)

	)

57 
	#gãVXY2
 (
ªgs
->
CP2D
.
r
[4])

	)

58 
	#gãVX2
 (
ªgs
->
CP2D
.
p
[4].
sw
.
l
)

	)

59 
	#gãVY2
 (
ªgs
->
CP2D
.
p
[4].
sw
.
h
)

	)

60 
	#gãVZ2
 (
ªgs
->
CP2D
.
p
[5].
sw
.
l
)

	)

61 
	#gãRGB
 (
ªgs
->
CP2D
.
r
[6])

	)

62 
	#gãR
 (
ªgs
->
CP2D
.
p
[6].
b
.
l
)

	)

63 
	#gãG
 (
ªgs
->
CP2D
.
p
[6].
b
.
h
)

	)

64 
	#gãB
 (
ªgs
->
CP2D
.
p
[6].
b
.
h2
)

	)

65 
	#gãCODE
 (
ªgs
->
CP2D
.
p
[6].
b
.
h3
)

	)

66 
	#gãOTZ
 (
ªgs
->
CP2D
.
p
[7].
w
.
l
)

	)

67 
	#gãIR0
 (
ªgs
->
CP2D
.
p
[8].
sw
.
l
)

	)

68 
	#gãIR1
 (
ªgs
->
CP2D
.
p
[9].
sw
.
l
)

	)

69 
	#gãIR2
 (
ªgs
->
CP2D
.
p
[10].
sw
.
l
)

	)

70 
	#gãIR3
 (
ªgs
->
CP2D
.
p
[11].
sw
.
l
)

	)

71 
	#gãSXY0
 (
ªgs
->
CP2D
.
r
[12])

	)

72 
	#gãSX0
 (
ªgs
->
CP2D
.
p
[12].
sw
.
l
)

	)

73 
	#gãSY0
 (
ªgs
->
CP2D
.
p
[12].
sw
.
h
)

	)

74 
	#gãSXY1
 (
ªgs
->
CP2D
.
r
[13])

	)

75 
	#gãSX1
 (
ªgs
->
CP2D
.
p
[13].
sw
.
l
)

	)

76 
	#gãSY1
 (
ªgs
->
CP2D
.
p
[13].
sw
.
h
)

	)

77 
	#gãSXY2
 (
ªgs
->
CP2D
.
r
[14])

	)

78 
	#gãSX2
 (
ªgs
->
CP2D
.
p
[14].
sw
.
l
)

	)

79 
	#gãSY2
 (
ªgs
->
CP2D
.
p
[14].
sw
.
h
)

	)

80 
	#gãSXYP
 (
ªgs
->
CP2D
.
r
[15])

	)

81 
	#gãSXP
 (
ªgs
->
CP2D
.
p
[15].
sw
.
l
)

	)

82 
	#gãSYP
 (
ªgs
->
CP2D
.
p
[15].
sw
.
h
)

	)

83 
	#gãSZ0
 (
ªgs
->
CP2D
.
p
[16].
w
.
l
)

	)

84 
	#gãSZ1
 (
ªgs
->
CP2D
.
p
[17].
w
.
l
)

	)

85 
	#gãSZ2
 (
ªgs
->
CP2D
.
p
[18].
w
.
l
)

	)

86 
	#gãSZ3
 (
ªgs
->
CP2D
.
p
[19].
w
.
l
)

	)

87 
	#gãRGB0
 (
ªgs
->
CP2D
.
r
[20])

	)

88 
	#gãR0
 (
ªgs
->
CP2D
.
p
[20].
b
.
l
)

	)

89 
	#gãG0
 (
ªgs
->
CP2D
.
p
[20].
b
.
h
)

	)

90 
	#gãB0
 (
ªgs
->
CP2D
.
p
[20].
b
.
h2
)

	)

91 
	#gãCODE0
 (
ªgs
->
CP2D
.
p
[20].
b
.
h3
)

	)

92 
	#gãRGB1
 (
ªgs
->
CP2D
.
r
[21])

	)

93 
	#gãR1
 (
ªgs
->
CP2D
.
p
[21].
b
.
l
)

	)

94 
	#gãG1
 (
ªgs
->
CP2D
.
p
[21].
b
.
h
)

	)

95 
	#gãB1
 (
ªgs
->
CP2D
.
p
[21].
b
.
h2
)

	)

96 
	#gãCODE1
 (
ªgs
->
CP2D
.
p
[21].
b
.
h3
)

	)

97 
	#gãRGB2
 (
ªgs
->
CP2D
.
r
[22])

	)

98 
	#gãR2
 (
ªgs
->
CP2D
.
p
[22].
b
.
l
)

	)

99 
	#gãG2
 (
ªgs
->
CP2D
.
p
[22].
b
.
h
)

	)

100 
	#gãB2
 (
ªgs
->
CP2D
.
p
[22].
b
.
h2
)

	)

101 
	#gãCODE2
 (
ªgs
->
CP2D
.
p
[22].
b
.
h3
)

	)

102 
	#gãRES1
 (
ªgs
->
CP2D
.
r
[23])

	)

103 
	#gãMAC0
 (((
s32
 *)
ªgs
->
CP2D
.
r
)[24])

	)

104 
	#gãMAC1
 (((
s32
 *)
ªgs
->
CP2D
.
r
)[25])

	)

105 
	#gãMAC2
 (((
s32
 *)
ªgs
->
CP2D
.
r
)[26])

	)

106 
	#gãMAC3
 (((
s32
 *)
ªgs
->
CP2D
.
r
)[27])

	)

107 
	#gãIRGB
 (
ªgs
->
CP2D
.
r
[28])

	)

108 
	#gãORGB
 (
ªgs
->
CP2D
.
r
[29])

	)

109 
	#gãLZCS
 (
ªgs
->
CP2D
.
r
[30])

	)

110 
	#gãLZCR
 (
ªgs
->
CP2D
.
r
[31])

	)

112 
	#gãR11R12
 (((
s32
 *)
ªgs
->
CP2C
.
r
)[0])

	)

113 
	#gãR22R23
 (((
s32
 *)
ªgs
->
CP2C
.
r
)[2])

	)

114 
	#gãR11
 (
ªgs
->
CP2C
.
p
[0].
sw
.
l
)

	)

115 
	#gãR12
 (
ªgs
->
CP2C
.
p
[0].
sw
.
h
)

	)

116 
	#gãR13
 (
ªgs
->
CP2C
.
p
[1].
sw
.
l
)

	)

117 
	#gãR21
 (
ªgs
->
CP2C
.
p
[1].
sw
.
h
)

	)

118 
	#gãR22
 (
ªgs
->
CP2C
.
p
[2].
sw
.
l
)

	)

119 
	#gãR23
 (
ªgs
->
CP2C
.
p
[2].
sw
.
h
)

	)

120 
	#gãR31
 (
ªgs
->
CP2C
.
p
[3].
sw
.
l
)

	)

121 
	#gãR32
 (
ªgs
->
CP2C
.
p
[3].
sw
.
h
)

	)

122 
	#gãR33
 (
ªgs
->
CP2C
.
p
[4].
sw
.
l
)

	)

123 
	#gãTRX
 (((
s32
 *)
ªgs
->
CP2C
.
r
)[5])

	)

124 
	#gãTRY
 (((
s32
 *)
ªgs
->
CP2C
.
r
)[6])

	)

125 
	#gãTRZ
 (((
s32
 *)
ªgs
->
CP2C
.
r
)[7])

	)

126 
	#gãL11
 (
ªgs
->
CP2C
.
p
[8].
sw
.
l
)

	)

127 
	#gãL12
 (
ªgs
->
CP2C
.
p
[8].
sw
.
h
)

	)

128 
	#gãL13
 (
ªgs
->
CP2C
.
p
[9].
sw
.
l
)

	)

129 
	#gãL21
 (
ªgs
->
CP2C
.
p
[9].
sw
.
h
)

	)

130 
	#gãL22
 (
ªgs
->
CP2C
.
p
[10].
sw
.
l
)

	)

131 
	#gãL23
 (
ªgs
->
CP2C
.
p
[10].
sw
.
h
)

	)

132 
	#gãL31
 (
ªgs
->
CP2C
.
p
[11].
sw
.
l
)

	)

133 
	#gãL32
 (
ªgs
->
CP2C
.
p
[11].
sw
.
h
)

	)

134 
	#gãL33
 (
ªgs
->
CP2C
.
p
[12].
sw
.
l
)

	)

135 
	#gãRBK
 (((
s32
 *)
ªgs
->
CP2C
.
r
)[13])

	)

136 
	#gãGBK
 (((
s32
 *)
ªgs
->
CP2C
.
r
)[14])

	)

137 
	#gãBBK
 (((
s32
 *)
ªgs
->
CP2C
.
r
)[15])

	)

138 
	#gãLR1
 (
ªgs
->
CP2C
.
p
[16].
sw
.
l
)

	)

139 
	#gãLR2
 (
ªgs
->
CP2C
.
p
[16].
sw
.
h
)

	)

140 
	#gãLR3
 (
ªgs
->
CP2C
.
p
[17].
sw
.
l
)

	)

141 
	#gãLG1
 (
ªgs
->
CP2C
.
p
[17].
sw
.
h
)

	)

142 
	#gãLG2
 (
ªgs
->
CP2C
.
p
[18].
sw
.
l
)

	)

143 
	#gãLG3
 (
ªgs
->
CP2C
.
p
[18].
sw
.
h
)

	)

144 
	#gãLB1
 (
ªgs
->
CP2C
.
p
[19].
sw
.
l
)

	)

145 
	#gãLB2
 (
ªgs
->
CP2C
.
p
[19].
sw
.
h
)

	)

146 
	#gãLB3
 (
ªgs
->
CP2C
.
p
[20].
sw
.
l
)

	)

147 
	#gãRFC
 (((
s32
 *)
ªgs
->
CP2C
.
r
)[21])

	)

148 
	#gãGFC
 (((
s32
 *)
ªgs
->
CP2C
.
r
)[22])

	)

149 
	#gãBFC
 (((
s32
 *)
ªgs
->
CP2C
.
r
)[23])

	)

150 
	#gãOFX
 (((
s32
 *)
ªgs
->
CP2C
.
r
)[24])

	)

151 
	#gãOFY
 (((
s32
 *)
ªgs
->
CP2C
.
r
)[25])

	)

152 
	#gãH
 (
ªgs
->
CP2C
.
p
[26].
sw
.
l
)

	)

153 
	#gãDQA
 (
ªgs
->
CP2C
.
p
[27].
sw
.
l
)

	)

154 
	#gãDQB
 (((
s32
 *)
ªgs
->
CP2C
.
r
)[28])

	)

155 
	#gãZSF3
 (
ªgs
->
CP2C
.
p
[29].
sw
.
l
)

	)

156 
	#gãZSF4
 (
ªgs
->
CP2C
.
p
[30].
sw
.
l
)

	)

157 
	#gãFLAG
 (
ªgs
->
CP2C
.
r
[31])

	)

159 
	#GTE_OP
(
›
Ë((› >> 20Ë& 31)

	)

160 
	#GTE_SF
(
›
Ë((› >> 19Ë& 1)

	)

161 
	#GTE_MX
(
›
Ë((› >> 17Ë& 3)

	)

162 
	#GTE_V
(
›
Ë((› >> 15Ë& 3)

	)

163 
	#GTE_CV
(
›
Ë((› >> 13Ë& 3)

	)

164 
	#GTE_CD
(
›
Ë((› >> 11Ë& 3Ë

	)

165 
	#GTE_LM
(
›
Ë((› >> 10Ë& 1)

	)

166 
	#GTE_CT
(
›
Ë((› >> 6Ë& 15Ë

	)

167 
	#GTE_FUNCT
(
›
Ë(› & 63)

	)

169 
	#gã›
 (
psxRegs
.
code
 & 0x1ffffff)

	)

171 #i‚de‡
FLAGLESS


173 
ölöe
 
s32
 
	$BOUNDS_
(
psxCP2Regs
 *
ªgs
, 
s64
 
n_vÆue
, s64 
n_max
, 
n_maxÊag
, s64 
n_mö
, 
n_möÊag
) {

174 i‡(
n_vÆue
 > 
n_max
) {

175 
gãFLAG
 |
n_maxÊag
;

176 } i‡(
n_vÆue
 < 
n_mö
) {

177 
gãFLAG
 |
n_möÊag
;

179  
n_vÆue
;

180 
	}
}

182 
ölöe
 
s32
 
	$LIM_
(
psxCP2Regs
 *
ªgs
, 
s32
 
vÆue
, s32 
max
, s32 
mö
, 
u32
 
Êag
) {

183 
s32
 
ªt
 = 
vÆue
;

184 i‡(
vÆue
 > 
max
) {

185 
gãFLAG
 |
Êag
;

186 
ªt
 = 
max
;

187 } i‡(
vÆue
 < 
mö
) {

188 
gãFLAG
 |
Êag
;

189 
ªt
 = 
mö
;

191  
ªt
;

192 
	}
}

194 
ölöe
 
u32
 
	$limE_
(
psxCP2Regs
 *
ªgs
, 
u32
 
ªsu…
) {

195 i‡(
ªsu…
 > 0x1ffff) {

196 
gãFLAG
 |= (1 << 31) | (1 << 17);

199  
ªsu…
;

200 
	}
}

204 
	#BOUNDS_
(
ªgs
, 
a
, ...Ë◊)

	)

206 
ölöe
 
s32
 
	$LIM_
(
psxCP2Regs
 *
ªgs
, 
s32
 
vÆue
, s32 
max
, s32 
mö
, 
u32
 
Êag_unu£d
) {

207 
s32
 
ªt
 = 
vÆue
;

208 i‡(
vÆue
 > 
max
)

209 
ªt
 = 
max
;

210 i‡(
vÆue
 < 
mö
)

211 
ªt
 = 
mö
;

212  
ªt
;

213 
	}
}

215 
ölöe
 
u32
 
	$limE_
(
psxCP2Regs
 *
ªgs
, 
u32
 
ªsu…
) {

216 i‡(
ªsu…
 > 0x1ffff)

218  
ªsu…
;

219 
	}
}

223 
	#BOUNDS
(
n_vÆue
,
n_max
,
n_maxÊag
,
n_mö
,
n_möÊag
) \

224 
	`BOUNDS_
(
ªgs
,
n_vÆue
,
n_max
,
n_maxÊag
,
n_mö
,
n_möÊag
)

	)

225 
	#LIM
(
vÆue
,
max
,
mö
,
Êag
) \

226 
	`LIM_
(
ªgs
,
vÆue
,
max
,
mö
,
Êag
)

	)

227 
	#limE
(
ªsu…
) \

228 
	`limE_
(
ªgs
,
ªsu…
)

	)

230 
	#A1
(
a
Ë
	`BOUNDS
(◊), 0x7fffffff, (1 << 30), -(
s64
)0x80000000, (1 << 31Ë| (1 << 27))

	)

231 
	#A2
(
a
Ë
	`BOUNDS
(◊), 0x7fffffff, (1 << 29), -(
s64
)0x80000000, (1 << 31Ë| (1 << 26))

	)

232 
	#A3
(
a
Ë
	`BOUNDS
(◊), 0x7fffffff, (1 << 28), -(
s64
)0x80000000, (1 << 31Ë| (1 << 25))

	)

233 
	#limB1
(
a
, 
l
Ë
	`LIM
(◊), 0x7fff, -0x8000 * !l, (1 << 31Ë| (1 << 24))

	)

234 
	#limB2
(
a
, 
l
Ë
	`LIM
(◊), 0x7fff, -0x8000 * !l, (1 << 31Ë| (1 << 23))

	)

235 
	#limB3
(
a
, 
l
Ë
	`LIM
(◊), 0x7fff, -0x8000 * !l, (1 << 22))

	)

236 
	#limC1
(
a
Ë
	`LIM
(◊), 0x00ff, 0x0000, (1 << 21))

	)

237 
	#limC2
(
a
Ë
	`LIM
(◊), 0x00ff, 0x0000, (1 << 20))

	)

238 
	#limC3
(
a
Ë
	`LIM
(◊), 0x00ff, 0x0000, (1 << 19))

	)

239 
	#limD
(
a
Ë
	`LIM
(◊), 0xffff, 0x0000, (1 << 31Ë| (1 << 18))

	)

241 
	#F
(
a
Ë
	`BOUNDS
(◊), 0x7fffffff, (1 << 31Ë| (1 << 16), -(
s64
)0x80000000, (1 << 31Ë| (1 << 15))

	)

242 
	#limG1
(
a
Ë
	`LIM
(◊), 0x3ff, -0x400, (1 << 31Ë| (1 << 14))

	)

243 
	#limG2
(
a
Ë
	`LIM
(◊), 0x3ff, -0x400, (1 << 31Ë| (1 << 13))

	)

244 
	#limH
(
a
Ë
	`LIM
(◊), 0x1000, 0x0000, (1 << 12))

	)

246 #i‚de‡
__¨m__


247 
	#A1U
 
A1


	)

248 
	#A2U
 
A2


	)

249 
	#A3U
 
A3


	)

252 
	#A1U
(
x
Ë(x)

	)

253 
	#A2U
(
x
Ë(x)

	)

254 
	#A3U
(
x
Ë(x)

	)

257 
	~"gã_dividî.h
"

259 #i‚de‡
FLAGLESS


261 
ölöe
 
u32
 
	$MFC2
(
ªg
) {

262 
psxCP2Regs
 *
ªgs
 = &
psxRegs
.
CP2
;

263 
ªg
) {

271 
psxRegs
.
CP2D
.
r
[
ªg
] = (
s32
ÌsxRegs.CP2D.
p
[ªg].
sw
.
l
;

279 
psxRegs
.
CP2D
.
r
[
ªg
] = (
u32
ÌsxRegs.CP2D.
p
[ªg].
w
.
l
;

283 
psxRegs
.
CP2D
.
r
[
ªg
] = 
gãSXY2
;

288 
psxRegs
.
CP2D
.
r
[
ªg
] = 
	`LIM
(
gãIR1
 >> 7, 0x1f, 0, 0) |

289 (
	`LIM
(
gãIR2
 >> 7, 0x1f, 0, 0) << 5) |

290 (
	`LIM
(
gãIR3
 >> 7, 0x1f, 0, 0) << 10);

293  
psxRegs
.
CP2D
.
r
[
ªg
];

294 
	}
}

296 
ölöe
 
	$MTC2
(
u32
 
vÆue
, 
ªg
) {

297 
psxCP2Regs
 *
ªgs
 = &
psxRegs
.
CP2
;

298 
ªg
) {

300 
gãSXY0
 = 
gãSXY1
;

301 
gãSXY1
 = 
gãSXY2
;

302 
gãSXY2
 = 
vÆue
;

303 
gãSXYP
 = 
vÆue
;

307 
gãIRGB
 = 
vÆue
;

308 
gãIR1
 = (
vÆue
 & 0x1f) << 7;

309 
gãIR2
 = (
vÆue
 & 0x3e0) << 2;

310 
gãIR3
 = (
vÆue
 & 0x7c00) >> 3;

315 
a
;

316 
gãLZCS
 = 
vÆue
;

318 
a
 = 
gãLZCS
;

319 i‡(
a
 > 0) {

320 
i
;

321 
i
 = 31; (
a
 & (1 << i)) == 0 && i >= 0; i--);

322 
gãLZCR
 = 31 - 
i
;

323 } i‡(
a
 < 0) {

324 
i
;

325 
a
 ^= 0xffffffff;

326 
i
 = 31; (
a
 & (1 << i)) == 0 && i >= 0; i--);

327 
gãLZCR
 = 31 - 
i
;

329 
gãLZCR
 = 32;

338 
psxRegs
.
CP2D
.
r
[
ªg
] = 
vÆue
;

340 
	}
}

342 
ölöe
 
	$CTC2
(
u32
 
vÆue
, 
ªg
) {

343 
ªg
) {

351 
vÆue
 = (
s32
)(
s16
)value;

355 
vÆue
 = value & 0x7ffff000;

356 i‡(
vÆue
 & 0x7f87e000) value |= 0x80000000;

360 
psxRegs
.
CP2C
.
r
[
ªg
] = 
vÆue
;

361 
	}
}

363 
	$gãMFC2
() {

364 i‡(!
_Rt_
) ;

365 
psxRegs
.
GPR
.
r
[
_Rt_
] = 
	`MFC2
(
_Rd_
);

366 
	}
}

368 
	$gãCFC2
() {

369 i‡(!
_Rt_
) ;

370 
psxRegs
.
GPR
.
r
[
_Rt_
] =ÖsxRegs.
CP2C
.r[
_Rd_
];

371 
	}
}

373 
	$gãMTC2
() {

374 
	`MTC2
(
psxRegs
.
GPR
.
r
[
_Rt_
], 
_Rd_
);

375 
	}
}

377 
	$gãCTC2
() {

378 
	`CTC2
(
psxRegs
.
GPR
.
r
[
_Rt_
], 
_Rd_
);

379 
	}
}

381 
	#_oB_
 (
psxRegs
.
GPR
.
r
[
_Rs_
] + 
_Imm_
)

	)

383 
	$gãLWC2
() {

384 
	`MTC2
(
	`psxMemRód32
(
_oB_
), 
_Rt_
);

385 
	}
}

387 
	$gãSWC2
() {

388 
	`psxMemWrôe32
(
_oB_
, 
	`MFC2
(
_Rt_
));

389 
	}
}

394 
	#DIVIDE
 
DIVIDE_


	)

395 
u32
 
	$DIVIDE_
(
s16
 
n
, 
u16
 
d
) {

396 i‡(
n
 >0 &&Ç < 
d
 * 2) {

397 
s32
 
n_
 = 
n
;

398  ((
n_
 << 16Ë+ 
d
 / 2) / d;

402 
	}
}

405 
	$gãRTPS
(
psxCP2Regs
 *
ªgs
) {

406 
quŸõ¡
;

408 #ifde‡
GTE_LOG


409 
	`GTE_LOG
("GTE RTPS\n");

411 
gãFLAG
 = 0;

413 
gãMAC1
 = 
	`A1
((((
s64
)
gãTRX
 << 12Ë+ (
gãR11
 * 
gãVX0
Ë+ (
gãR12
 * 
gãVY0
Ë+ (
gãR13
 * 
gãVZ0
)) >> 12);

414 
gãMAC2
 = 
	`A2
((((
s64
)
gãTRY
 << 12Ë+ (
gãR21
 * 
gãVX0
Ë+ (
gãR22
 * 
gãVY0
Ë+ (
gãR23
 * 
gãVZ0
)) >> 12);

415 
gãMAC3
 = 
	`A3
((((
s64
)
gãTRZ
 << 12Ë+ (
gãR31
 * 
gãVX0
Ë+ (
gãR32
 * 
gãVY0
Ë+ (
gãR33
 * 
gãVZ0
)) >> 12);

416 
gãIR1
 = 
	`limB1
(
gãMAC1
, 0);

417 
gãIR2
 = 
	`limB2
(
gãMAC2
, 0);

418 
gãIR3
 = 
	`limB3
(
gãMAC3
, 0);

419 
gãSZ0
 = 
gãSZ1
;

420 
gãSZ1
 = 
gãSZ2
;

421 
gãSZ2
 = 
gãSZ3
;

422 
gãSZ3
 = 
	`limD
(
gãMAC3
);

423 
quŸõ¡
 = 
	`limE
(
	`DIVIDE
(
gãH
, 
gãSZ3
));

424 
gãSXY0
 = 
gãSXY1
;

425 
gãSXY1
 = 
gãSXY2
;

426 
gãSX2
 = 
	`limG1
(
	`F
((
s64
)
gãOFX
 + ((s64)
gãIR1
 * 
quŸõ¡
)) >> 16);

427 
gãSY2
 = 
	`limG2
(
	`F
((
s64
)
gãOFY
 + ((s64)
gãIR2
 * 
quŸõ¡
)) >> 16);

429 
gãMAC0
 = 
	`F
((
s64
)
gãDQB
 + ((s64)
gãDQA
 * 
quŸõ¡
));

430 
gãIR0
 = 
	`limH
(
gãMAC0
 >> 12);

431 
	}
}

433 
	$gãRTPT
(
psxCP2Regs
 *
ªgs
) {

434 
quŸõ¡
;

435 
v
;

436 
s32
 
vx
, 
vy
, 
vz
;

438 #ifde‡
GTE_LOG


439 
	`GTE_LOG
("GTE RTPT\n");

441 
gãFLAG
 = 0;

443 
gãSZ0
 = 
gãSZ3
;

444 
v
 = 0; v < 3; v++) {

445 
vx
 = 
	`VX
(
v
);

446 
vy
 = 
	`VY
(
v
);

447 
vz
 = 
	`VZ
(
v
);

448 
gãMAC1
 = 
	`A1
((((
s64
)
gãTRX
 << 12Ë+ (
gãR11
 * 
vx
Ë+ (
gãR12
 * 
vy
Ë+ (
gãR13
 * 
vz
)) >> 12);

449 
gãMAC2
 = 
	`A2
((((
s64
)
gãTRY
 << 12Ë+ (
gãR21
 * 
vx
Ë+ (
gãR22
 * 
vy
Ë+ (
gãR23
 * 
vz
)) >> 12);

450 
gãMAC3
 = 
	`A3
((((
s64
)
gãTRZ
 << 12Ë+ (
gãR31
 * 
vx
Ë+ (
gãR32
 * 
vy
Ë+ (
gãR33
 * 
vz
)) >> 12);

451 
gãIR1
 = 
	`limB1
(
gãMAC1
, 0);

452 
gãIR2
 = 
	`limB2
(
gãMAC2
, 0);

453 
gãIR3
 = 
	`limB3
(
gãMAC3
, 0);

454 
	`fSZ
(
v
Ë
	`limD
(
gãMAC3
);

455 
quŸõ¡
 = 
	`limE
(
	`DIVIDE
(
gãH
, 
	`fSZ
(
v
)));

456 
	`fSX
(
v
Ë
	`limG1
(
	`F
((
s64
)
gãOFX
 + ((s64)
gãIR1
 * 
quŸõ¡
)) >> 16);

457 
	`fSY
(
v
Ë
	`limG2
(
	`F
((
s64
)
gãOFY
 + ((s64)
gãIR2
 * 
quŸõ¡
)) >> 16);

459 
gãMAC0
 = 
	`F
((
s64
)
gãDQB
 + ((s64)
gãDQA
 * 
quŸõ¡
));

460 
gãIR0
 = 
	`limH
(
gãMAC0
 >> 12);

461 
	}
}

463 
	$gãMVMVA
(
psxCP2Regs
 *
ªgs
) {

464 
shi·
 = 12 * 
	`GTE_SF
(
gã›
);

465 
mx
 = 
	`GTE_MX
(
gã›
);

466 
v
 = 
	`GTE_V
(
gã›
);

467 
cv
 = 
	`GTE_CV
(
gã›
);

468 
lm
 = 
	`GTE_LM
(
gã›
);

469 
s32
 
vx
 = 
	`VX
(
v
);

470 
s32
 
vy
 = 
	`VY
(
v
);

471 
s32
 
vz
 = 
	`VZ
(
v
);

473 #ifde‡
GTE_LOG


474 
	`GTE_LOG
("GTE MVMVA\n");

476 
gãFLAG
 = 0;

478 
gãMAC1
 = 
	`A1
((((
s64
)
	`CV1
(
cv
Ë<< 12Ë+ (
	`MX11
(
mx
Ë* 
vx
Ë+ (
	`MX12
(mxË* 
vy
Ë+ (
	`MX13
(mxË* 
vz
)Ë>> 
shi·
);

479 
gãMAC2
 = 
	`A2
((((
s64
)
	`CV2
(
cv
Ë<< 12Ë+ (
	`MX21
(
mx
Ë* 
vx
Ë+ (
	`MX22
(mxË* 
vy
Ë+ (
	`MX23
(mxË* 
vz
)Ë>> 
shi·
);

480 
gãMAC3
 = 
	`A3
((((
s64
)
	`CV3
(
cv
Ë<< 12Ë+ (
	`MX31
(
mx
Ë* 
vx
Ë+ (
	`MX32
(mxË* 
vy
Ë+ (
	`MX33
(mxË* 
vz
)Ë>> 
shi·
);

482 
gãIR1
 = 
	`limB1
(
gãMAC1
, 
lm
);

483 
gãIR2
 = 
	`limB2
(
gãMAC2
, 
lm
);

484 
gãIR3
 = 
	`limB3
(
gãMAC3
, 
lm
);

485 
	}
}

487 
	$gãNCLIP
(
psxCP2Regs
 *
ªgs
) {

488 #ifde‡
GTE_LOG


489 
	`GTE_LOG
("GTE NCLIP\n");

491 
gãFLAG
 = 0;

493 
gãMAC0
 = 
	`F
((
s64
)
gãSX0
 * (
gãSY1
 - 
gãSY2
) +

494 
gãSX1
 * (
gãSY2
 - 
gãSY0
) +

495 
gãSX2
 * (
gãSY0
 - 
gãSY1
));

496 
	}
}

498 
	$gãAVSZ3
(
psxCP2Regs
 *
ªgs
) {

499 #ifde‡
GTE_LOG


500 
	`GTE_LOG
("GTE AVSZ3\n");

502 
gãFLAG
 = 0;

504 
gãMAC0
 = 
	`F
((
s64
)
gãZSF3
 * (
gãSZ1
 + 
gãSZ2
 + 
gãSZ3
));

505 
gãOTZ
 = 
	`limD
(
gãMAC0
 >> 12);

506 
	}
}

508 
	$gãAVSZ4
(
psxCP2Regs
 *
ªgs
) {

509 #ifde‡
GTE_LOG


510 
	`GTE_LOG
("GTE AVSZ4\n");

512 
gãFLAG
 = 0;

514 
gãMAC0
 = 
	`F
((
s64
)
gãZSF4
 * (
gãSZ0
 + 
gãSZ1
 + 
gãSZ2
 + 
gãSZ3
));

515 
gãOTZ
 = 
	`limD
(
gãMAC0
 >> 12);

516 
	}
}

518 
	$gãSQR
(
psxCP2Regs
 *
ªgs
) {

519 
shi·
 = 12 * 
	`GTE_SF
(
gã›
);

520 
lm
 = 
	`GTE_LM
(
gã›
);

522 #ifde‡
GTE_LOG


523 
	`GTE_LOG
("GTE SQR\n");

525 
gãFLAG
 = 0;

527 
gãMAC1
 = (
gãIR1
 * gãIR1Ë>> 
shi·
;

528 
gãMAC2
 = (
gãIR2
 * gãIR2Ë>> 
shi·
;

529 
gãMAC3
 = (
gãIR3
 * gãIR3Ë>> 
shi·
;

530 
gãIR1
 = 
	`limB1
(
gãMAC1
, 
lm
);

531 
gãIR2
 = 
	`limB2
(
gãMAC2
, 
lm
);

532 
gãIR3
 = 
	`limB3
(
gãMAC3
, 
lm
);

533 
	}
}

535 
	$gãNCCS
(
psxCP2Regs
 *
ªgs
) {

536 #ifde‡
GTE_LOG


537 
	`GTE_LOG
("GTE NCCS\n");

539 
gãFLAG
 = 0;

541 
gãMAC1
 = ((
s64
)(
gãL11
 * 
gãVX0
Ë+ (
gãL12
 * 
gãVY0
Ë+ (
gãL13
 * 
gãVZ0
)) >> 12;

542 
gãMAC2
 = ((
s64
)(
gãL21
 * 
gãVX0
Ë+ (
gãL22
 * 
gãVY0
Ë+ (
gãL23
 * 
gãVZ0
)) >> 12;

543 
gãMAC3
 = ((
s64
)(
gãL31
 * 
gãVX0
Ë+ (
gãL32
 * 
gãVY0
Ë+ (
gãL33
 * 
gãVZ0
)) >> 12;

544 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

545 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

546 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

547 
gãMAC1
 = 
	`A1
((((
s64
)
gãRBK
 << 12Ë+ (
gãLR1
 * 
gãIR1
Ë+ (
gãLR2
 * 
gãIR2
Ë+ (
gãLR3
 * 
gãIR3
)) >> 12);

548 
gãMAC2
 = 
	`A2
((((
s64
)
gãGBK
 << 12Ë+ (
gãLG1
 * 
gãIR1
Ë+ (
gãLG2
 * 
gãIR2
Ë+ (
gãLG3
 * 
gãIR3
)) >> 12);

549 
gãMAC3
 = 
	`A3
((((
s64
)
gãBBK
 << 12Ë+ (
gãLB1
 * 
gãIR1
Ë+ (
gãLB2
 * 
gãIR2
Ë+ (
gãLB3
 * 
gãIR3
)) >> 12);

550 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

551 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

552 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

553 
gãMAC1
 = ((
s32
)
gãR
 * 
gãIR1
) >> 8;

554 
gãMAC2
 = ((
s32
)
gãG
 * 
gãIR2
) >> 8;

555 
gãMAC3
 = ((
s32
)
gãB
 * 
gãIR3
) >> 8;

556 
gãIR1
 = 
gãMAC1
;

557 
gãIR2
 = 
gãMAC2
;

558 
gãIR3
 = 
gãMAC3
;

560 
gãRGB0
 = 
gãRGB1
;

561 
gãRGB1
 = 
gãRGB2
;

562 
gãCODE2
 = 
gãCODE
;

563 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

564 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

565 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

566 
	}
}

568 
	$gãNCCT
(
psxCP2Regs
 *
ªgs
) {

569 
v
;

570 
s32
 
vx
, 
vy
, 
vz
;

572 #ifde‡
GTE_LOG


573 
	`GTE_LOG
("GTE NCCT\n");

575 
gãFLAG
 = 0;

577 
v
 = 0; v < 3; v++) {

578 
vx
 = 
	`VX
(
v
);

579 
vy
 = 
	`VY
(
v
);

580 
vz
 = 
	`VZ
(
v
);

581 
gãMAC1
 = ((
s64
)(
gãL11
 * 
vx
Ë+ (
gãL12
 * 
vy
Ë+ (
gãL13
 * 
vz
)) >> 12;

582 
gãMAC2
 = ((
s64
)(
gãL21
 * 
vx
Ë+ (
gãL22
 * 
vy
Ë+ (
gãL23
 * 
vz
)) >> 12;

583 
gãMAC3
 = ((
s64
)(
gãL31
 * 
vx
Ë+ (
gãL32
 * 
vy
Ë+ (
gãL33
 * 
vz
)) >> 12;

584 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

585 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

586 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

587 
gãMAC1
 = 
	`A1
((((
s64
)
gãRBK
 << 12Ë+ (
gãLR1
 * 
gãIR1
Ë+ (
gãLR2
 * 
gãIR2
Ë+ (
gãLR3
 * 
gãIR3
)) >> 12);

588 
gãMAC2
 = 
	`A2
((((
s64
)
gãGBK
 << 12Ë+ (
gãLG1
 * 
gãIR1
Ë+ (
gãLG2
 * 
gãIR2
Ë+ (
gãLG3
 * 
gãIR3
)) >> 12);

589 
gãMAC3
 = 
	`A3
((((
s64
)
gãBBK
 << 12Ë+ (
gãLB1
 * 
gãIR1
Ë+ (
gãLB2
 * 
gãIR2
Ë+ (
gãLB3
 * 
gãIR3
)) >> 12);

590 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

591 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

592 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

593 
gãMAC1
 = ((
s32
)
gãR
 * 
gãIR1
) >> 8;

594 
gãMAC2
 = ((
s32
)
gãG
 * 
gãIR2
) >> 8;

595 
gãMAC3
 = ((
s32
)
gãB
 * 
gãIR3
) >> 8;

597 
gãRGB0
 = 
gãRGB1
;

598 
gãRGB1
 = 
gãRGB2
;

599 
gãCODE2
 = 
gãCODE
;

600 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

601 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

602 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

604 
gãIR1
 = 
gãMAC1
;

605 
gãIR2
 = 
gãMAC2
;

606 
gãIR3
 = 
gãMAC3
;

607 
	}
}

609 
	$gãNCDS
(
psxCP2Regs
 *
ªgs
) {

610 #ifde‡
GTE_LOG


611 
	`GTE_LOG
("GTE NCDS\n");

613 
gãFLAG
 = 0;

615 
gãMAC1
 = ((
s64
)(
gãL11
 * 
gãVX0
Ë+ (
gãL12
 * 
gãVY0
Ë+ (
gãL13
 * 
gãVZ0
)) >> 12;

616 
gãMAC2
 = ((
s64
)(
gãL21
 * 
gãVX0
Ë+ (
gãL22
 * 
gãVY0
Ë+ (
gãL23
 * 
gãVZ0
)) >> 12;

617 
gãMAC3
 = ((
s64
)(
gãL31
 * 
gãVX0
Ë+ (
gãL32
 * 
gãVY0
Ë+ (
gãL33
 * 
gãVZ0
)) >> 12;

618 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

619 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

620 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

621 
gãMAC1
 = 
	`A1
((((
s64
)
gãRBK
 << 12Ë+ (
gãLR1
 * 
gãIR1
Ë+ (
gãLR2
 * 
gãIR2
Ë+ (
gãLR3
 * 
gãIR3
)) >> 12);

622 
gãMAC2
 = 
	`A2
((((
s64
)
gãGBK
 << 12Ë+ (
gãLG1
 * 
gãIR1
Ë+ (
gãLG2
 * 
gãIR2
Ë+ (
gãLG3
 * 
gãIR3
)) >> 12);

623 
gãMAC3
 = 
	`A3
((((
s64
)
gãBBK
 << 12Ë+ (
gãLB1
 * 
gãIR1
Ë+ (
gãLB2
 * 
gãIR2
Ë+ (
gãLB3
 * 
gãIR3
)) >> 12);

624 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

625 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

626 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

627 
gãMAC1
 = (((
gãR
 << 4Ë* 
gãIR1
Ë+ (
gãIR0
 * 
	`limB1
(
	`A1U
((
s64
)
gãRFC
 - ((gteR * gteIR1) >> 8)), 0))) >> 12;

628 
gãMAC2
 = (((
gãG
 << 4Ë* 
gãIR2
Ë+ (
gãIR0
 * 
	`limB2
(
	`A2U
((
s64
)
gãGFC
 - ((gteG * gteIR2) >> 8)), 0))) >> 12;

629 
gãMAC3
 = (((
gãB
 << 4Ë* 
gãIR3
Ë+ (
gãIR0
 * 
	`limB3
(
	`A3U
((
s64
)
gãBFC
 - ((gteB * gteIR3) >> 8)), 0))) >> 12;

630 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

631 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

632 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

634 
gãRGB0
 = 
gãRGB1
;

635 
gãRGB1
 = 
gãRGB2
;

636 
gãCODE2
 = 
gãCODE
;

637 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

638 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

639 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

640 
	}
}

642 
	$gãNCDT
(
psxCP2Regs
 *
ªgs
) {

643 
v
;

644 
s32
 
vx
, 
vy
, 
vz
;

646 #ifde‡
GTE_LOG


647 
	`GTE_LOG
("GTE NCDT\n");

649 
gãFLAG
 = 0;

651 
v
 = 0; v < 3; v++) {

652 
vx
 = 
	`VX
(
v
);

653 
vy
 = 
	`VY
(
v
);

654 
vz
 = 
	`VZ
(
v
);

655 
gãMAC1
 = ((
s64
)(
gãL11
 * 
vx
Ë+ (
gãL12
 * 
vy
Ë+ (
gãL13
 * 
vz
)) >> 12;

656 
gãMAC2
 = ((
s64
)(
gãL21
 * 
vx
Ë+ (
gãL22
 * 
vy
Ë+ (
gãL23
 * 
vz
)) >> 12;

657 
gãMAC3
 = ((
s64
)(
gãL31
 * 
vx
Ë+ (
gãL32
 * 
vy
Ë+ (
gãL33
 * 
vz
)) >> 12;

658 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

659 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

660 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

661 
gãMAC1
 = 
	`A1
((((
s64
)
gãRBK
 << 12Ë+ (
gãLR1
 * 
gãIR1
Ë+ (
gãLR2
 * 
gãIR2
Ë+ (
gãLR3
 * 
gãIR3
)) >> 12);

662 
gãMAC2
 = 
	`A2
((((
s64
)
gãGBK
 << 12Ë+ (
gãLG1
 * 
gãIR1
Ë+ (
gãLG2
 * 
gãIR2
Ë+ (
gãLG3
 * 
gãIR3
)) >> 12);

663 
gãMAC3
 = 
	`A3
((((
s64
)
gãBBK
 << 12Ë+ (
gãLB1
 * 
gãIR1
Ë+ (
gãLB2
 * 
gãIR2
Ë+ (
gãLB3
 * 
gãIR3
)) >> 12);

664 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

665 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

666 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

667 
gãMAC1
 = (((
gãR
 << 4Ë* 
gãIR1
Ë+ (
gãIR0
 * 
	`limB1
(
	`A1U
((
s64
)
gãRFC
 - ((gteR * gteIR1) >> 8)), 0))) >> 12;

668 
gãMAC2
 = (((
gãG
 << 4Ë* 
gãIR2
Ë+ (
gãIR0
 * 
	`limB2
(
	`A2U
((
s64
)
gãGFC
 - ((gteG * gteIR2) >> 8)), 0))) >> 12;

669 
gãMAC3
 = (((
gãB
 << 4Ë* 
gãIR3
Ë+ (
gãIR0
 * 
	`limB3
(
	`A3U
((
s64
)
gãBFC
 - ((gteB * gteIR3) >> 8)), 0))) >> 12;

671 
gãRGB0
 = 
gãRGB1
;

672 
gãRGB1
 = 
gãRGB2
;

673 
gãCODE2
 = 
gãCODE
;

674 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

675 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

676 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

678 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

679 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

680 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

681 
	}
}

683 
	$gãOP
(
psxCP2Regs
 *
ªgs
) {

684 
shi·
 = 12 * 
	`GTE_SF
(
gã›
);

685 
lm
 = 
	`GTE_LM
(
gã›
);

687 #ifde‡
GTE_LOG


688 
	`GTE_LOG
("GTE OP\n");

690 
gãFLAG
 = 0;

692 
gãMAC1
 = ((
gãR22
 * 
gãIR3
Ë- (
gãR33
 * 
gãIR2
)Ë>> 
shi·
;

693 
gãMAC2
 = ((
gãR33
 * 
gãIR1
Ë- (
gãR11
 * 
gãIR3
)Ë>> 
shi·
;

694 
gãMAC3
 = ((
gãR11
 * 
gãIR2
Ë- (
gãR22
 * 
gãIR1
)Ë>> 
shi·
;

695 
gãIR1
 = 
	`limB1
(
gãMAC1
, 
lm
);

696 
gãIR2
 = 
	`limB2
(
gãMAC2
, 
lm
);

697 
gãIR3
 = 
	`limB3
(
gãMAC3
, 
lm
);

698 
	}
}

700 
	$gãDCPL
(
psxCP2Regs
 *
ªgs
) {

701 
lm
 = 
	`GTE_LM
(
gã›
);

703 
s32
 
RIR1
 = ((s32)
gãR
 * 
gãIR1
) >> 8;

704 
s32
 
GIR2
 = ((s32)
gãG
 * 
gãIR2
) >> 8;

705 
s32
 
BIR3
 = ((s32)
gãB
 * 
gãIR3
) >> 8;

707 #ifde‡
GTE_LOG


708 
	`GTE_LOG
("GTE DCPL\n");

710 
gãFLAG
 = 0;

712 
gãMAC1
 = 
RIR1
 + ((
gãIR0
 * 
	`limB1
(
	`A1U
((
s64
)
gãRFC
 - RIR1), 0)) >> 12);

713 
gãMAC2
 = 
GIR2
 + ((
gãIR0
 * 
	`limB1
(
	`A2U
((
s64
)
gãGFC
 - GIR2), 0)) >> 12);

714 
gãMAC3
 = 
BIR3
 + ((
gãIR0
 * 
	`limB1
(
	`A3U
((
s64
)
gãBFC
 - BIR3), 0)) >> 12);

716 
gãIR1
 = 
	`limB1
(
gãMAC1
, 
lm
);

717 
gãIR2
 = 
	`limB2
(
gãMAC2
, 
lm
);

718 
gãIR3
 = 
	`limB3
(
gãMAC3
, 
lm
);

720 
gãRGB0
 = 
gãRGB1
;

721 
gãRGB1
 = 
gãRGB2
;

722 
gãCODE2
 = 
gãCODE
;

723 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

724 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

725 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

726 
	}
}

728 
	$gãGPF
(
psxCP2Regs
 *
ªgs
) {

729 
shi·
 = 12 * 
	`GTE_SF
(
gã›
);

731 #ifde‡
GTE_LOG


732 
	`GTE_LOG
("GTE GPF\n");

734 
gãFLAG
 = 0;

736 
gãMAC1
 = (
gãIR0
 * 
gãIR1
Ë>> 
shi·
;

737 
gãMAC2
 = (
gãIR0
 * 
gãIR2
Ë>> 
shi·
;

738 
gãMAC3
 = (
gãIR0
 * 
gãIR3
Ë>> 
shi·
;

739 
gãIR1
 = 
	`limB1
(
gãMAC1
, 0);

740 
gãIR2
 = 
	`limB2
(
gãMAC2
, 0);

741 
gãIR3
 = 
	`limB3
(
gãMAC3
, 0);

743 
gãRGB0
 = 
gãRGB1
;

744 
gãRGB1
 = 
gãRGB2
;

745 
gãCODE2
 = 
gãCODE
;

746 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

747 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

748 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

749 
	}
}

751 
	$gãGPL
(
psxCP2Regs
 *
ªgs
) {

752 
shi·
 = 12 * 
	`GTE_SF
(
gã›
);

754 #ifde‡
GTE_LOG


755 
	`GTE_LOG
("GTE GPL\n");

757 
gãFLAG
 = 0;

759 
gãMAC1
 = 
	`A1
((((
s64
)gãMAC1 << 
shi·
Ë+ (
gãIR0
 * 
gãIR1
)) >> shift);

760 
gãMAC2
 = 
	`A2
((((
s64
)gãMAC2 << 
shi·
Ë+ (
gãIR0
 * 
gãIR2
)) >> shift);

761 
gãMAC3
 = 
	`A3
((((
s64
)gãMAC3 << 
shi·
Ë+ (
gãIR0
 * 
gãIR3
)) >> shift);

762 
gãIR1
 = 
	`limB1
(
gãMAC1
, 0);

763 
gãIR2
 = 
	`limB2
(
gãMAC2
, 0);

764 
gãIR3
 = 
	`limB3
(
gãMAC3
, 0);

766 
gãRGB0
 = 
gãRGB1
;

767 
gãRGB1
 = 
gãRGB2
;

768 
gãCODE2
 = 
gãCODE
;

769 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

770 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

771 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

772 
	}
}

774 
	$gãDPCS
(
psxCP2Regs
 *
ªgs
) {

775 
shi·
 = 12 * 
	`GTE_SF
(
gã›
);

777 #ifde‡
GTE_LOG


778 
	`GTE_LOG
("GTE DPCS\n");

780 
gãFLAG
 = 0;

782 
gãMAC1
 = ((
gãR
 << 16Ë+ (
gãIR0
 * 
	`limB1
(
	`A1U
(((
s64
)
gãRFC
 - (gãR << 4)Ë<< (12 - 
shi·
)), 0))) >> 12;

783 
gãMAC2
 = ((
gãG
 << 16Ë+ (
gãIR0
 * 
	`limB2
(
	`A2U
(((
s64
)
gãGFC
 - (gãG << 4)Ë<< (12 - 
shi·
)), 0))) >> 12;

784 
gãMAC3
 = ((
gãB
 << 16Ë+ (
gãIR0
 * 
	`limB3
(
	`A3U
(((
s64
)
gãBFC
 - (gãB << 4)Ë<< (12 - 
shi·
)), 0))) >> 12;

786 
gãIR1
 = 
	`limB1
(
gãMAC1
, 0);

787 
gãIR2
 = 
	`limB2
(
gãMAC2
, 0);

788 
gãIR3
 = 
	`limB3
(
gãMAC3
, 0);

789 
gãRGB0
 = 
gãRGB1
;

790 
gãRGB1
 = 
gãRGB2
;

791 
gãCODE2
 = 
gãCODE
;

792 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

793 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

794 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

795 
	}
}

797 
	$gãDPCT
(
psxCP2Regs
 *
ªgs
) {

798 
v
;

800 #ifde‡
GTE_LOG


801 
	`GTE_LOG
("GTE DPCT\n");

803 
gãFLAG
 = 0;

805 
v
 = 0; v < 3; v++) {

806 
gãMAC1
 = ((
gãR0
 << 16Ë+ (
gãIR0
 * 
	`limB1
(
	`A1U
((
s64
)
gãRFC
 - (gteR0 << 4)), 0))) >> 12;

807 
gãMAC2
 = ((
gãG0
 << 16Ë+ (
gãIR0
 * 
	`limB1
(
	`A2U
((
s64
)
gãGFC
 - (gteG0 << 4)), 0))) >> 12;

808 
gãMAC3
 = ((
gãB0
 << 16Ë+ (
gãIR0
 * 
	`limB1
(
	`A3U
((
s64
)
gãBFC
 - (gteB0 << 4)), 0))) >> 12;

810 
gãRGB0
 = 
gãRGB1
;

811 
gãRGB1
 = 
gãRGB2
;

812 
gãCODE2
 = 
gãCODE
;

813 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

814 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

815 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

817 
gãIR1
 = 
	`limB1
(
gãMAC1
, 0);

818 
gãIR2
 = 
	`limB2
(
gãMAC2
, 0);

819 
gãIR3
 = 
	`limB3
(
gãMAC3
, 0);

820 
	}
}

822 
	$gãNCS
(
psxCP2Regs
 *
ªgs
) {

823 #ifde‡
GTE_LOG


824 
	`GTE_LOG
("GTE NCS\n");

826 
gãFLAG
 = 0;

828 
gãMAC1
 = ((
s64
)(
gãL11
 * 
gãVX0
Ë+ (
gãL12
 * 
gãVY0
Ë+ (
gãL13
 * 
gãVZ0
)) >> 12;

829 
gãMAC2
 = ((
s64
)(
gãL21
 * 
gãVX0
Ë+ (
gãL22
 * 
gãVY0
Ë+ (
gãL23
 * 
gãVZ0
)) >> 12;

830 
gãMAC3
 = ((
s64
)(
gãL31
 * 
gãVX0
Ë+ (
gãL32
 * 
gãVY0
Ë+ (
gãL33
 * 
gãVZ0
)) >> 12;

831 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

832 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

833 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

834 
gãMAC1
 = 
	`A1
((((
s64
)
gãRBK
 << 12Ë+ (
gãLR1
 * 
gãIR1
Ë+ (
gãLR2
 * 
gãIR2
Ë+ (
gãLR3
 * 
gãIR3
)) >> 12);

835 
gãMAC2
 = 
	`A2
((((
s64
)
gãGBK
 << 12Ë+ (
gãLG1
 * 
gãIR1
Ë+ (
gãLG2
 * 
gãIR2
Ë+ (
gãLG3
 * 
gãIR3
)) >> 12);

836 
gãMAC3
 = 
	`A3
((((
s64
)
gãBBK
 << 12Ë+ (
gãLB1
 * 
gãIR1
Ë+ (
gãLB2
 * 
gãIR2
Ë+ (
gãLB3
 * 
gãIR3
)) >> 12);

837 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

838 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

839 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

841 
gãRGB0
 = 
gãRGB1
;

842 
gãRGB1
 = 
gãRGB2
;

843 
gãCODE2
 = 
gãCODE
;

844 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

845 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

846 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

847 
	}
}

849 
	$gãNCT
(
psxCP2Regs
 *
ªgs
) {

850 
v
;

851 
s32
 
vx
, 
vy
, 
vz
;

853 #ifde‡
GTE_LOG


854 
	`GTE_LOG
("GTE NCT\n");

856 
gãFLAG
 = 0;

858 
v
 = 0; v < 3; v++) {

859 
vx
 = 
	`VX
(
v
);

860 
vy
 = 
	`VY
(
v
);

861 
vz
 = 
	`VZ
(
v
);

862 
gãMAC1
 = ((
s64
)(
gãL11
 * 
vx
Ë+ (
gãL12
 * 
vy
Ë+ (
gãL13
 * 
vz
)) >> 12;

863 
gãMAC2
 = ((
s64
)(
gãL21
 * 
vx
Ë+ (
gãL22
 * 
vy
Ë+ (
gãL23
 * 
vz
)) >> 12;

864 
gãMAC3
 = ((
s64
)(
gãL31
 * 
vx
Ë+ (
gãL32
 * 
vy
Ë+ (
gãL33
 * 
vz
)) >> 12;

865 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

866 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

867 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

868 
gãMAC1
 = 
	`A1
((((
s64
)
gãRBK
 << 12Ë+ (
gãLR1
 * 
gãIR1
Ë+ (
gãLR2
 * 
gãIR2
Ë+ (
gãLR3
 * 
gãIR3
)) >> 12);

869 
gãMAC2
 = 
	`A2
((((
s64
)
gãGBK
 << 12Ë+ (
gãLG1
 * 
gãIR1
Ë+ (
gãLG2
 * 
gãIR2
Ë+ (
gãLG3
 * 
gãIR3
)) >> 12);

870 
gãMAC3
 = 
	`A3
((((
s64
)
gãBBK
 << 12Ë+ (
gãLB1
 * 
gãIR1
Ë+ (
gãLB2
 * 
gãIR2
Ë+ (
gãLB3
 * 
gãIR3
)) >> 12);

871 
gãRGB0
 = 
gãRGB1
;

872 
gãRGB1
 = 
gãRGB2
;

873 
gãCODE2
 = 
gãCODE
;

874 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

875 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

876 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

878 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

879 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

880 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

881 
	}
}

883 
	$gãCC
(
psxCP2Regs
 *
ªgs
) {

884 #ifde‡
GTE_LOG


885 
	`GTE_LOG
("GTE CC\n");

887 
gãFLAG
 = 0;

889 
gãMAC1
 = 
	`A1
((((
s64
)
gãRBK
 << 12Ë+ (
gãLR1
 * 
gãIR1
Ë+ (
gãLR2
 * 
gãIR2
Ë+ (
gãLR3
 * 
gãIR3
)) >> 12);

890 
gãMAC2
 = 
	`A2
((((
s64
)
gãGBK
 << 12Ë+ (
gãLG1
 * 
gãIR1
Ë+ (
gãLG2
 * 
gãIR2
Ë+ (
gãLG3
 * 
gãIR3
)) >> 12);

891 
gãMAC3
 = 
	`A3
((((
s64
)
gãBBK
 << 12Ë+ (
gãLB1
 * 
gãIR1
Ë+ (
gãLB2
 * 
gãIR2
Ë+ (
gãLB3
 * 
gãIR3
)) >> 12);

892 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

893 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

894 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

895 
gãMAC1
 = ((
s32
)
gãR
 * 
gãIR1
) >> 8;

896 
gãMAC2
 = ((
s32
)
gãG
 * 
gãIR2
) >> 8;

897 
gãMAC3
 = ((
s32
)
gãB
 * 
gãIR3
) >> 8;

898 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

899 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

900 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

902 
gãRGB0
 = 
gãRGB1
;

903 
gãRGB1
 = 
gãRGB2
;

904 
gãCODE2
 = 
gãCODE
;

905 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

906 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

907 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

908 
	}
}

910 
	$gãINTPL
(
psxCP2Regs
 *
ªgs
) {

911 
shi·
 = 12 * 
	`GTE_SF
(
gã›
);

912 
lm
 = 
	`GTE_LM
(
gã›
);

914 #ifde‡
GTE_LOG


915 
	`GTE_LOG
("GTE INTPL\n");

917 
gãFLAG
 = 0;

919 
gãMAC1
 = ((
gãIR1
 << 12Ë+ (
gãIR0
 * 
	`limB1
(
	`A1U
((
s64
)
gãRFC
 - gãIR1), 0))Ë>> 
shi·
;

920 
gãMAC2
 = ((
gãIR2
 << 12Ë+ (
gãIR0
 * 
	`limB2
(
	`A2U
((
s64
)
gãGFC
 - gãIR2), 0))Ë>> 
shi·
;

921 
gãMAC3
 = ((
gãIR3
 << 12Ë+ (
gãIR0
 * 
	`limB3
(
	`A3U
((
s64
)
gãBFC
 - gãIR3), 0))Ë>> 
shi·
;

922 
gãIR1
 = 
	`limB1
(
gãMAC1
, 
lm
);

923 
gãIR2
 = 
	`limB2
(
gãMAC2
, 
lm
);

924 
gãIR3
 = 
	`limB3
(
gãMAC3
, 
lm
);

925 
gãRGB0
 = 
gãRGB1
;

926 
gãRGB1
 = 
gãRGB2
;

927 
gãCODE2
 = 
gãCODE
;

928 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

929 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

930 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

931 
	}
}

933 
	$gãCDP
(
psxCP2Regs
 *
ªgs
) {

934 #ifde‡
GTE_LOG


935 
	`GTE_LOG
("GTE CDP\n");

937 
gãFLAG
 = 0;

939 
gãMAC1
 = 
	`A1
((((
s64
)
gãRBK
 << 12Ë+ (
gãLR1
 * 
gãIR1
Ë+ (
gãLR2
 * 
gãIR2
Ë+ (
gãLR3
 * 
gãIR3
)) >> 12);

940 
gãMAC2
 = 
	`A2
((((
s64
)
gãGBK
 << 12Ë+ (
gãLG1
 * 
gãIR1
Ë+ (
gãLG2
 * 
gãIR2
Ë+ (
gãLG3
 * 
gãIR3
)) >> 12);

941 
gãMAC3
 = 
	`A3
((((
s64
)
gãBBK
 << 12Ë+ (
gãLB1
 * 
gãIR1
Ë+ (
gãLB2
 * 
gãIR2
Ë+ (
gãLB3
 * 
gãIR3
)) >> 12);

942 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

943 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

944 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

945 
gãMAC1
 = (((
gãR
 << 4Ë* 
gãIR1
Ë+ (
gãIR0
 * 
	`limB1
(
	`A1U
((
s64
)
gãRFC
 - ((gteR * gteIR1) >> 8)), 0))) >> 12;

946 
gãMAC2
 = (((
gãG
 << 4Ë* 
gãIR2
Ë+ (
gãIR0
 * 
	`limB2
(
	`A2U
((
s64
)
gãGFC
 - ((gteG * gteIR2) >> 8)), 0))) >> 12;

947 
gãMAC3
 = (((
gãB
 << 4Ë* 
gãIR3
Ë+ (
gãIR0
 * 
	`limB3
(
	`A3U
((
s64
)
gãBFC
 - ((gteB * gteIR3) >> 8)), 0))) >> 12;

948 
gãIR1
 = 
	`limB1
(
gãMAC1
, 1);

949 
gãIR2
 = 
	`limB2
(
gãMAC2
, 1);

950 
gãIR3
 = 
	`limB3
(
gãMAC3
, 1);

952 
gãRGB0
 = 
gãRGB1
;

953 
gãRGB1
 = 
gãRGB2
;

954 
gãCODE2
 = 
gãCODE
;

955 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

956 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

957 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

958 
	}
}

962 #i‚de‡
FLAGLESS


964 
	$gãSQR_∑π_noshi·
(
psxCP2Regs
 *
ªgs
) {

965 
gãFLAG
 = 0;

967 
gãMAC1
 = 
gãIR1
 * gteIR1;

968 
gãMAC2
 = 
gãIR2
 * gteIR2;

969 
gãMAC3
 = 
gãIR3
 * gteIR3;

970 
	}
}

972 
	$gãSQR_∑π_shi·
(
psxCP2Regs
 *
ªgs
) {

973 
gãFLAG
 = 0;

975 
gãMAC1
 = (
gãIR1
 * gteIR1) >> 12;

976 
gãMAC2
 = (
gãIR2
 * gteIR2) >> 12;

977 
gãMAC3
 = (
gãIR3
 * gteIR3) >> 12;

978 
	}
}

980 
	$gãOP_∑π_noshi·
(
psxCP2Regs
 *
ªgs
) {

981 
gãFLAG
 = 0;

983 
gãMAC1
 = (
gãR22
 * 
gãIR3
Ë- (
gãR33
 * 
gãIR2
);

984 
gãMAC2
 = (
gãR33
 * 
gãIR1
Ë- (
gãR11
 * 
gãIR3
);

985 
gãMAC3
 = (
gãR11
 * 
gãIR2
Ë- (
gãR22
 * 
gãIR1
);

986 
	}
}

988 
	$gãOP_∑π_shi·
(
psxCP2Regs
 *
ªgs
) {

989 
gãFLAG
 = 0;

991 
gãMAC1
 = ((
gãR22
 * 
gãIR3
Ë- (
gãR33
 * 
gãIR2
)) >> 12;

992 
gãMAC2
 = ((
gãR33
 * 
gãIR1
Ë- (
gãR11
 * 
gãIR3
)) >> 12;

993 
gãMAC3
 = ((
gãR11
 * 
gãIR2
Ë- (
gãR22
 * 
gãIR1
)) >> 12;

994 
	}
}

996 
	$gãDCPL_∑π
(
psxCP2Regs
 *
ªgs
) {

997 
s32
 
RIR1
 = ((s32)
gãR
 * 
gãIR1
) >> 8;

998 
s32
 
GIR2
 = ((s32)
gãG
 * 
gãIR2
) >> 8;

999 
s32
 
BIR3
 = ((s32)
gãB
 * 
gãIR3
) >> 8;

1001 
gãFLAG
 = 0;

1003 
gãMAC1
 = 
RIR1
 + ((
gãIR0
 * 
	`limB1
(
	`A1U
((
s64
)
gãRFC
 - RIR1), 0)) >> 12);

1004 
gãMAC2
 = 
GIR2
 + ((
gãIR0
 * 
	`limB1
(
	`A2U
((
s64
)
gãGFC
 - GIR2), 0)) >> 12);

1005 
gãMAC3
 = 
BIR3
 + ((
gãIR0
 * 
	`limB1
(
	`A3U
((
s64
)
gãBFC
 - BIR3), 0)) >> 12);

1006 
	}
}

1008 
	$gãGPF_∑π_noshi·
(
psxCP2Regs
 *
ªgs
) {

1009 
gãFLAG
 = 0;

1011 
gãMAC1
 = 
gãIR0
 * 
gãIR1
;

1012 
gãMAC2
 = 
gãIR0
 * 
gãIR2
;

1013 
gãMAC3
 = 
gãIR0
 * 
gãIR3
;

1014 
	}
}

1016 
	$gãGPF_∑π_shi·
(
psxCP2Regs
 *
ªgs
) {

1017 
gãFLAG
 = 0;

1019 
gãMAC1
 = (
gãIR0
 * 
gãIR1
) >> 12;

1020 
gãMAC2
 = (
gãIR0
 * 
gãIR2
) >> 12;

1021 
gãMAC3
 = (
gãIR0
 * 
gãIR3
) >> 12;

1022 
	}
}

1026 
	$gãGPL_∑π_noshi·
(
psxCP2Regs
 *
ªgs
) {

1027 
gãFLAG
 = 0;

1029 
gãMAC1
 = 
	`A1
((
s64
)gãMAC1 + (
gãIR0
 * 
gãIR1
));

1030 
gãMAC2
 = 
	`A2
((
s64
)gãMAC2 + (
gãIR0
 * 
gãIR2
));

1031 
gãMAC3
 = 
	`A3
((
s64
)gãMAC3 + (
gãIR0
 * 
gãIR3
));

1032 
	}
}

1034 
	$gãGPL_∑π_shi·
(
psxCP2Regs
 *
ªgs
) {

1035 
gãFLAG
 = 0;

1037 
gãMAC1
 = 
	`A1
((
s64
)gãMAC1 + ((
gãIR0
 * 
gãIR1
) >> 12));

1038 
gãMAC2
 = 
	`A2
((
s64
)gãMAC2 + ((
gãIR0
 * 
gãIR2
) >> 12));

1039 
gãMAC3
 = 
	`A3
((
s64
)gãMAC3 + ((
gãIR0
 * 
gãIR3
) >> 12));

1040 
	}
}

1042 
	$gãDPCS_∑π_noshi·
(
psxCP2Regs
 *
ªgs
) {

1043 
shi·
 = 0;

1045 
gãFLAG
 = 0;

1047 
gãMAC1
 = ((
gãR
 << 16Ë+ (
gãIR0
 * 
	`limB1
(
	`A1U
((
s64
)
gãRFC
 - (gãR << 4)Ë<< (12 - 
shi·
), 0))) >> 12;

1048 
gãMAC2
 = ((
gãG
 << 16Ë+ (
gãIR0
 * 
	`limB2
(
	`A2U
((
s64
)
gãGFC
 - (gãG << 4)Ë<< (12 - 
shi·
), 0))) >> 12;

1049 
gãMAC3
 = ((
gãB
 << 16Ë+ (
gãIR0
 * 
	`limB3
(
	`A3U
((
s64
)
gãBFC
 - (gãB << 4)Ë<< (12 - 
shi·
), 0))) >> 12;

1050 
	}
}

1052 
	$gãDPCS_∑π_shi·
(
psxCP2Regs
 *
ªgs
) {

1053 
shi·
 = 12;

1055 
gãFLAG
 = 0;

1057 
gãMAC1
 = ((
gãR
 << 16Ë+ (
gãIR0
 * 
	`limB1
(
	`A1U
((
s64
)
gãRFC
 - (gãR << 4)Ë<< (12 - 
shi·
), 0))) >> 12;

1058 
gãMAC2
 = ((
gãG
 << 16Ë+ (
gãIR0
 * 
	`limB2
(
	`A2U
((
s64
)
gãGFC
 - (gãG << 4)Ë<< (12 - 
shi·
), 0))) >> 12;

1059 
gãMAC3
 = ((
gãB
 << 16Ë+ (
gãIR0
 * 
	`limB3
(
	`A3U
((
s64
)
gãBFC
 - (gãB << 4)Ë<< (12 - 
shi·
), 0))) >> 12;

1060 
	}
}

1062 
	$gãINTPL_∑π_noshi·
(
psxCP2Regs
 *
ªgs
) {

1063 
gãFLAG
 = 0;

1065 
gãMAC1
 = ((
gãIR1
 << 12Ë+ (
gãIR0
 * 
	`limB1
(
	`A1U
((
s64
)
gãRFC
 - gteIR1), 0)));

1066 
gãMAC2
 = ((
gãIR2
 << 12Ë+ (
gãIR0
 * 
	`limB2
(
	`A2U
((
s64
)
gãGFC
 - gteIR2), 0)));

1067 
gãMAC3
 = ((
gãIR3
 << 12Ë+ (
gãIR0
 * 
	`limB3
(
	`A3U
((
s64
)
gãBFC
 - gteIR3), 0)));

1068 
	}
}

1070 
	$gãINTPL_∑π_shi·
(
psxCP2Regs
 *
ªgs
) {

1071 
gãFLAG
 = 0;

1073 
gãMAC1
 = ((
gãIR1
 << 12Ë+ (
gãIR0
 * 
	`limB1
(
	`A1U
((
s64
)
gãRFC
 - gteIR1), 0))) >> 12;

1074 
gãMAC2
 = ((
gãIR2
 << 12Ë+ (
gãIR0
 * 
	`limB2
(
	`A2U
((
s64
)
gãGFC
 - gteIR2), 0))) >> 12;

1075 
gãMAC3
 = ((
gãIR3
 << 12Ë+ (
gãIR0
 * 
	`limB3
(
	`A3U
((
s64
)
gãBFC
 - gteIR3), 0))) >> 12;

1076 
	}
}

1078 
	$gãMACtoRGB
(
psxCP2Regs
 *
ªgs
) {

1079 
gãRGB0
 = 
gãRGB1
;

1080 
gãRGB1
 = 
gãRGB2
;

1081 
gãCODE2
 = 
gãCODE
;

1082 
gãR2
 = 
	`limC1
(
gãMAC1
 >> 4);

1083 
gãG2
 = 
	`limC2
(
gãMAC2
 >> 4);

1084 
gãB2
 = 
	`limC3
(
gãMAC3
 >> 4);

1085 
	}
}

	@libpcsxcore/gte.h

22 #ifde‡
FLAGLESS


24 
	#gãRTPS
 
gãRTPS_nf


	)

25 
	#gãOP
 
gãOP_nf


	)

26 
	#gãNCLIP
 
gãNCLIP_nf


	)

27 
	#gãDPCS
 
gãDPCS_nf


	)

28 
	#gãINTPL
 
gãINTPL_nf


	)

29 
	#gãMVMVA
 
gãMVMVA_nf


	)

30 
	#gãNCDS
 
gãNCDS_nf


	)

31 
	#gãNCDT
 
gãNCDT_nf


	)

32 
	#gãCDP
 
gãCDP_nf


	)

33 
	#gãNCCS
 
gãNCCS_nf


	)

34 
	#gãCC
 
gãCC_nf


	)

35 
	#gãNCS
 
gãNCS_nf


	)

36 
	#gãNCT
 
gãNCT_nf


	)

37 
	#gãSQR
 
gãSQR_nf


	)

38 
	#gãDCPL
 
gãDCPL_nf


	)

39 
	#gãDPCT
 
gãDPCT_nf


	)

40 
	#gãAVSZ3
 
gãAVSZ3_nf


	)

41 
	#gãAVSZ4
 
gãAVSZ4_nf


	)

42 
	#gãRTPT
 
gãRTPT_nf


	)

43 
	#gãGPF
 
gãGPF_nf


	)

44 
	#gãGPL
 
gãGPL_nf


	)

45 
	#gãNCCT
 
gãNCCT_nf


	)

47 
	#gãGPL_∑π_noshi·
 
gãGPL_∑π_noshi·_nf


	)

48 
	#gãGPL_∑π_shi·
 
gãGPL_∑π_shi·_nf


	)

49 
	#gãDPCS_∑π_noshi·
 
gãDPCS_∑π_noshi·_nf


	)

50 
	#gãDPCS_∑π_shi·
 
gãDPCS_∑π_shi·_nf


	)

51 
	#gãINTPL_∑π_noshi·
 
gãINTPL_∑π_noshi·_nf


	)

52 
	#gãINTPL_∑π_shi·
 
gãINTPL_∑π_shi·_nf


	)

53 
	#gãMACtoRGB
 
gãMACtoRGB_nf


	)

55 #unde‡
__GTE_H__


58 #i‚de‡
__GTE_H__


59 
	#__GTE_H__


	)

61 #ifde‡
__˝lu•lus


65 
	~"psxcomm⁄.h
"

66 
	~"r3000a.h
"

68 
psxCP2Regs
;

70 
gãMFC2
();

71 
gãCFC2
();

72 
gãMTC2
();

73 
gãCTC2
();

74 
gãLWC2
();

75 
gãSWC2
();

77 
gãRTPS
(
psxCP2Regs
 *
ªgs
);

78 
gãOP
(
psxCP2Regs
 *
ªgs
);

79 
gãNCLIP
(
psxCP2Regs
 *
ªgs
);

80 
gãDPCS
(
psxCP2Regs
 *
ªgs
);

81 
gãINTPL
(
psxCP2Regs
 *
ªgs
);

82 
gãMVMVA
(
psxCP2Regs
 *
ªgs
);

83 
gãNCDS
(
psxCP2Regs
 *
ªgs
);

84 
gãNCDT
(
psxCP2Regs
 *
ªgs
);

85 
gãCDP
(
psxCP2Regs
 *
ªgs
);

86 
gãNCCS
(
psxCP2Regs
 *
ªgs
);

87 
gãCC
(
psxCP2Regs
 *
ªgs
);

88 
gãNCS
(
psxCP2Regs
 *
ªgs
);

89 
gãNCT
(
psxCP2Regs
 *
ªgs
);

90 
gãSQR
(
psxCP2Regs
 *
ªgs
);

91 
gãDCPL
(
psxCP2Regs
 *
ªgs
);

92 
gãDPCT
(
psxCP2Regs
 *
ªgs
);

93 
gãAVSZ3
(
psxCP2Regs
 *
ªgs
);

94 
gãAVSZ4
(
psxCP2Regs
 *
ªgs
);

95 
gãRTPT
(
psxCP2Regs
 *
ªgs
);

96 
gãGPF
(
psxCP2Regs
 *
ªgs
);

97 
gãGPL
(
psxCP2Regs
 *
ªgs
);

98 
gãNCCT
(
psxCP2Regs
 *
ªgs
);

100 
gãSQR_∑π_noshi·
(
psxCP2Regs
 *
ªgs
);

101 
gãSQR_∑π_shi·
(
psxCP2Regs
 *
ªgs
);

102 
gãOP_∑π_noshi·
(
psxCP2Regs
 *
ªgs
);

103 
gãOP_∑π_shi·
(
psxCP2Regs
 *
ªgs
);

104 
gãDCPL_∑π
(
psxCP2Regs
 *
ªgs
);

105 
gãGPF_∑π_noshi·
(
psxCP2Regs
 *
ªgs
);

106 
gãGPF_∑π_shi·
(
psxCP2Regs
 *
ªgs
);

108 
gãGPL_∑π_noshi·
(
psxCP2Regs
 *
ªgs
);

109 
gãGPL_∑π_shi·
(
psxCP2Regs
 *
ªgs
);

110 
gãDPCS_∑π_noshi·
(
psxCP2Regs
 *
ªgs
);

111 
gãDPCS_∑π_shi·
(
psxCP2Regs
 *
ªgs
);

112 
gãINTPL_∑π_noshi·
(
psxCP2Regs
 *
ªgs
);

113 
gãINTPL_∑π_shi·
(
psxCP2Regs
 *
ªgs
);

114 
gãMACtoRGB
(
psxCP2Regs
 *
ªgs
);

116 #ifde‡
__˝lu•lus


	@libpcsxcore/gte_arm.h

1 
gãRTPS_nf_¨m
(*
˝2_ªgs
, 
›code
);

2 
gãRTPT_nf_¨m
(*
˝2_ªgs
, 
›code
);

3 
gãNCLIP_¨m
(*
˝2_ªgs
, 
›code
);

6 
gãMVMVA_∑π_¨m
(*
˝2_ªgs
, 
is_shi·12
);

7 
gãMVMVA_∑π_nf_¨m
(*
˝2_ªgs
, 
is_shi·12
);

8 
gãMVMVA_∑π_cv3sh12_¨m
(*
˝2_ªgs
);

10 
gãMACtoIR_lm0
(*
˝2_ªgs
);

11 
gãMACtoIR_lm1
(*
˝2_ªgs
);

12 
gãMACtoIR_lm0_nf
(*
˝2_ªgs
);

13 
gãMACtoIR_lm1_nf
(*
˝2_ªgs
);

	@libpcsxcore/gte_divider.c

5 
	~"psxcomm⁄.h
"

7 c⁄° 
u16
 
	göôül_guess
[32768] = {

4107 
u32
 
	$DIVIDE
(
s16
 
n
, 
u16
 
d
) {

4108 i‡(
n
 >0 &&Ç < 
d
 * 2) {

4109 
u32
 
off£t
 = 
d
;

4110 
shi·
 = 0;

4111 
u64
 
ªcùroˇl
;

4112 
u32
 
r
, 
s
;

4114 
off£t
 <= 0x8000) {

4115 
off£t
 <<= 1;

4116 
shi·
++;

4121 
r
 = 
öôül_guess
[
off£t
 & 0x7fff] | 0x10000;

4123 
s
 = (
u64
)
off£t
 * 
r
 >> 16;

4124 
r
 = (
u64
Ï * (0x20000 - 
s
) >> 16;

4126 
s
 = (
u64
)
off£t
 * 
r
 >> 16;

4127 
r
 = (
u64
Ï * (0x20000 - 
s
) >> 16;

4129 
ªcùroˇl
 = (
u64
)(
r
Ë<< 
shi·
;

4131  (
u32
)(((
ªcùroˇl
 * 
n
) + 0x8000) >> 16);

4135 
	}
}

	@libpcsxcore/gte_divider.h

1 
u32
 
DIVIDE
(
s16
 
n
, 
u16
 
d
);

	@libpcsxcore/gte_neon.h

1 
gãRTPS_√⁄
(*
˝2_ªgs
, 
›code
);

2 
gãRTPT_√⁄
(*
˝2_ªgs
, 
›code
);

5 
gãMVMVA_∑π_√⁄
(*
˝2_ªgs
, 
›code
);

8 
gãMACtoIR_Êags_√⁄
(*
˝2_ªgs
, 
lm
);

	@libpcsxcore/gte_nf.c

1 
	#FLAGLESS


	)

2 
	~"gã.c
"

	@libpcsxcore/mdec.c

21 
	~"mdec.h
"

35 
	#MDEC_BIAS
 2

	)

37 
	#DSIZE
 8

	)

38 
	#DSIZE2
 (
DSIZE
 * DSIZE)

	)

40 
	#SCALE
(
x
, 
n
Ë((xË>> (n))

	)

41 
	#SCALER
(
x
, 
n
Ë(((xË+ ((1 << (n)Ë>> 1)Ë>> (n))

	)

43 
	#AAN_CONST_BITS
 12

	)

44 
	#AAN_PRESCALE_BITS
 16

	)

46 
	#AAN_CONST_SIZE
 24

	)

47 
	#AAN_CONST_SCALE
 (
AAN_CONST_SIZE
 - 
AAN_CONST_BITS
)

	)

49 
	#AAN_PRESCALE_SIZE
 20

	)

50 
	#AAN_PRESCALE_SCALE
 (
AAN_PRESCALE_SIZE
-
AAN_PRESCALE_BITS
)

	)

51 
	#AAN_EXTRA
 12

	)

53 
	#FIX_1_082392200
 
	`SCALER
(18159528, 
AAN_CONST_SCALE
)

54 
	#FIX_1_414213562
 
	`SCALER
(23726566, 
AAN_CONST_SCALE
)

55 
	#FIX_1_847759065
 
	`SCALER
(31000253, 
AAN_CONST_SCALE
)

56 
	#FIX_2_613125930
 
	`SCALER
(43840978, 
AAN_CONST_SCALE
)

57 

	)

58 
	#MULS
(
v¨
, c⁄°Ë(
	`SCALE
((v¨Ë* (c⁄°), 
AAN_CONST_BITS
))

	)

60 
	#RLE_RUN
(
a
Ë(◊Ë>> 10)

	)

61 
	#RLE_VAL
(
a
Ë((()◊Ë<< ((Ë* 8 - 10)Ë>> ((Ë* 8 - 10))

	)

64 
	$¥ötm©rixu8
(
u8
 *
m
) {

65 
i
;

66 
i
 = 0; i < 
DSIZE2
; i++) {

67 
	`¥ötf
("%3d ",
m
[
i
]);

68 if((
i
+1Ë% 8 =0Ë
	`¥ötf
("\n");

70 
	}
}

73 
ölöe
 
	$fûlcﬁ
(*
blk
, 
vÆ
) {

74 
blk
[0 * 
DSIZE
] = blk[1 * DSIZE] = blk[2 * DSIZE] = blk[3 * DSIZE]

75 
blk
[4 * 
DSIZE
] = blk[5 * DSIZE] = blk[6 * DSIZE] = blk[7 * DSIZE] = 
vÆ
;

76 
	}
}

78 
ölöe
 
	$fûÃow
(*
blk
, 
vÆ
) {

79 
blk
[0] = blk[1] = blk[2] = blk[3]

80 
blk
[4] = blk[5] = blk[6] = blk[7] = 
vÆ
;

81 
	}
}

83 
	$id˘
(*
block
,
u£d_cﬁ
) {

84 
tmp0
, 
tmp1
, 
tmp2
, 
tmp3
, 
tmp4
, 
tmp5
, 
tmp6
, 
tmp7
;

85 
z5
, 
z10
, 
z11
, 
z12
, 
z13
;

86 *
±r
;

87 
i
;

90 i‡(
u£d_cﬁ
 == -1) {

91 
v
 = 
block
[0];

92 
i
 = 0; i < 
DSIZE2
; i++Ë
block
[i] = 
v
;

97 
±r
 = 
block
;

98 
i
 = 0; i < 
DSIZE
; i++, 
±r
++) {

99 i‡((
u£d_cﬁ
 & (1 << 
i
)) == 0) {

101 i‡(
±r
[
DSIZE
 * 0]) {

102 
	`fûlcﬁ
(
±r
,Ötr[0]);

103 
u£d_cﬁ
 |(1 << 
i
);

110 
z10
 = 
±r
[
DSIZE
 * 0] +Ötr[DSIZE * 4];

111 
z11
 = 
±r
[
DSIZE
 * 0] -Ötr[DSIZE * 4];

112 
z13
 = 
±r
[
DSIZE
 * 2] +Ötr[DSIZE * 6];

113 
z12
 = 
	`MULS
(
±r
[
DSIZE
 * 2] -Öå[DSIZE * 6], 
FIX_1_414213562
Ë- 
z13
;

116 
tmp0
 = 
z10
 + 
z13
;

117 
tmp3
 = 
z10
 - 
z13
;

118 
tmp1
 = 
z11
 + 
z12
;

119 
tmp2
 = 
z11
 - 
z12
;

121 
z13
 = 
±r
[
DSIZE
 * 3] +Ötr[DSIZE * 5];

122 
z10
 = 
±r
[
DSIZE
 * 3] -Ötr[DSIZE * 5];

123 
z11
 = 
±r
[
DSIZE
 * 1] +Ötr[DSIZE * 7];

124 
z12
 = 
±r
[
DSIZE
 * 1] -Ötr[DSIZE * 7];

126 
tmp7
 = 
z11
 + 
z13
;

128 
z5
 = (
z12
 - 
z10
Ë* (
FIX_1_847759065
);

129 
tmp6
 = 
	`SCALE
(
z10
*(
FIX_2_613125930
Ë+ 
z5
, 
AAN_CONST_BITS
Ë- 
tmp7
;

130 
tmp5
 = 
	`MULS
(
z11
 - 
z13
, 
FIX_1_414213562
Ë- 
tmp6
;

131 
tmp4
 = 
	`SCALE
(
z12
*(
FIX_1_082392200
Ë- 
z5
, 
AAN_CONST_BITS
Ë+ 
tmp5
;

153 
±r
[
DSIZE
 * 0] = (
tmp0
 + 
tmp7
);

154 
±r
[
DSIZE
 * 7] = (
tmp0
 - 
tmp7
);

155 
±r
[
DSIZE
 * 1] = (
tmp1
 + 
tmp6
);

156 
±r
[
DSIZE
 * 6] = (
tmp1
 - 
tmp6
);

157 
±r
[
DSIZE
 * 2] = (
tmp2
 + 
tmp5
);

158 
±r
[
DSIZE
 * 5] = (
tmp2
 - 
tmp5
);

159 
±r
[
DSIZE
 * 4] = (
tmp3
 + 
tmp4
);

160 
±r
[
DSIZE
 * 3] = (
tmp3
 - 
tmp4
);

163 
±r
 = 
block
;

164 i‡(
u£d_cﬁ
 == 1) {

165 
i
 = 0; i < 
DSIZE
; i++)

166 
	`fûÃow
(
block
 + 
DSIZE
 * 
i
, block[DSIZE * i]);

168 
i
 = 0; i < 
DSIZE
; i++, 
±r
 += DSIZE) {

169 
z10
 = 
±r
[0] +Ötr[4];

170 
z11
 = 
±r
[0] -Ötr[4];

171 
z13
 = 
±r
[2] +Ötr[6];

172 
z12
 = 
	`MULS
(
±r
[2] -Öå[6], 
FIX_1_414213562
Ë- 
z13
;

174 
tmp0
 = 
z10
 + 
z13
;

175 
tmp3
 = 
z10
 - 
z13
;

176 
tmp1
 = 
z11
 + 
z12
;

177 
tmp2
 = 
z11
 - 
z12
;

179 
z13
 = 
±r
[3] +Ötr[5];

180 
z10
 = 
±r
[3] -Ötr[5];

181 
z11
 = 
±r
[1] +Ötr[7];

182 
z12
 = 
±r
[1] -Ötr[7];

184 
tmp7
 = 
z11
 + 
z13
;

185 
z5
 = (
z12
 - 
z10
Ë* 
FIX_1_847759065
;

186 
tmp6
 = 
	`SCALE
(
z10
 * 
FIX_2_613125930
 + 
z5
, 
AAN_CONST_BITS
Ë- 
tmp7
;

187 
tmp5
 = 
	`MULS
(
z11
 - 
z13
, 
FIX_1_414213562
Ë- 
tmp6
;

188 
tmp4
 = 
	`SCALE
(
z12
 * 
FIX_1_082392200
 - 
z5
, 
AAN_CONST_BITS
Ë+ 
tmp5
;

190 
±r
[0] = 
tmp0
 + 
tmp7
;

192 
±r
[7] = 
tmp0
 - 
tmp7
;

193 
±r
[1] = 
tmp1
 + 
tmp6
;

194 
±r
[6] = 
tmp1
 - 
tmp6
;

195 
±r
[2] = 
tmp2
 + 
tmp5
;

196 
±r
[5] = 
tmp2
 - 
tmp5
;

197 
±r
[4] = 
tmp3
 + 
tmp4
;

198 
±r
[3] = 
tmp3
 - 
tmp4
;

201 
	}
}

204 
	#MDEC0_STP
 0x02000000

	)

205 
	#MDEC0_RGB24
 0x08000000

	)

206 
	#MDEC0_SIZE_MASK
 0x0000FFFF

	)

209 
	#MDEC1_BUSY
 0x20000000

	)

210 
	#MDEC1_DREQ
 0x18000000

	)

211 
	#MDEC1_FIFO
 0xc0000000

	)

212 
	#MDEC1_RGB24
 0x02000000

	)

213 
	#MDEC1_STP
 0x00800000

	)

214 
	#MDEC1_RESET
 0x80000000

	)

216 
	s_≥ndög_dma1
 {

217 
u32
 
	madr
;

218 
u32
 
	mb¸
;

219 
u32
 
	mch¸
;

223 
u32
 
	mªg0
;

224 
u32
 
	mªg1
;

225 
u16
 * 
	mæ
;

226 
u16
 * 
	mæ_íd
;

227 
u8
 * 
	mblock_buf„r_pos
;

228 
u8
 
	mblock_buf„r
[16*16*3];

229 
_≥ndög_dma1
 
	m≥ndög_dma1
;

230 } 
	gmdec
;

232 
	giq_y
[
DSIZE2
], 
	giq_uv
[DSIZE2];

234 
	gzsˇn
[
DSIZE2
] = {

245 
	gØnsˇÀs
[
DSIZE2
] = {

256 
	$iqèb_öô
(*
iqèb
, *
iq_y
) {

257 
i
;

259 
i
 = 0; i < 
DSIZE2
; i++) {

260 
iqèb
[
i
] = (
iq_y
[i] * 
	`SCALER
(
ØnsˇÀs
[
zsˇn
[i]], 
AAN_PRESCALE_SCALE
));

262 
	}
}

264 
	#MDEC_END_OF_DATA
 0x„00

	)

266 *
	$æ2blk
(*
blk
, *
mdec_æ
) {

267 
i
, 
k
, 
q_sˇÀ
, 
æ
, 
u£d_cﬁ
;

268 *
iqèb
;

270 
	`mem£t
(
blk
, 0, 6 * 
DSIZE2
 * ());

271 
iqèb
 = 
iq_uv
;

272 
i
 = 0; i < 6; i++) {

274 i‡(
i
 =2Ë
iqèb
 = 
iq_y
;

276 
æ
 = 
	`SWAP16
(*
mdec_æ
); mdec_rl++;

277 
q_sˇÀ
 = 
	`RLE_RUN
(
æ
);

278 
blk
[0] = 
	`SCALER
(
iqèb
[0] * 
	`RLE_VAL
(
æ
), 
AAN_EXTRA
 - 3);

279 
k
 = 0, 
u£d_cﬁ
 = 0;;) {

280 
æ
 = 
	`SWAP16
(*
mdec_æ
); mdec_rl++;

281 i‡(
æ
 =
MDEC_END_OF_DATA
) ;

282 
k
 +
	`RLE_RUN
(
æ
) + 1;

284 i‡(
k
 > 63) {

290 
blk
[
zsˇn
[
k
]] = 
	`SCALER
(
	`RLE_VAL
(
æ
Ë* 
iqèb
[k] * 
q_sˇÀ
, 
AAN_EXTRA
);

292 
u£d_cﬁ
 |(
zsˇn
[
k
] > 7) ? 1 << (zscan[k] & 7) : 0;

295 i‡(
k
 =0Ë
u£d_cﬁ
 = -1;

301 
	`id˘
(
blk
, 
u£d_cﬁ
);

302 
blk
 +
DSIZE2
;

304  
mdec_æ
;

305 
	}
}

312 
	#MULR
(
a
Ë((1434 * (a)))

	)

313 
	#MULB
(
a
Ë((1807 * (a)))

	)

314 
	#MULG2
(
a
, 
b
Ë((-351 * (aË- 728 * (b)))

	)

315 
	#MULY
(
a
Ë(◊Ë<< 10)

	)

317 
	#MAKERGB15
(
r
, 
g
, 
b
, 
a
Ë(
	`SWAP16
◊ | ((bË<< 10Ë| ((gË<< 5Ë| (r)))

	)

318 
	#SCALE8
(
c
Ë
	`SCALER
(c, 20)

	)

319 
	#SCALE5
(
c
Ë
	`SCALER
(c, 23)

	)

321 
	#CLAMP5
(
c
Ë–((cË< -16Ë? 0 : (((cË> (31 - 16)Ë? 31 : ((cË+ 16)Ë)

	)

322 
	#CLAMP8
(
c
Ë–((cË< -128Ë? 0 : (((cË> (255 - 128)Ë? 255 : ((cË+ 128)Ë)

	)

324 
	#CLAMP_SCALE8
(
a
Ë(
	`CLAMP8
(
	`SCALE8
◊)))

	)

325 
	#CLAMP_SCALE5
(
a
Ë(
	`CLAMP5
(
	`SCALE5
◊)))

	)

327 
ölöe
 
	$puéöebw15
(
u16
 *
image
, *
Yblk
) {

328 
i
;

329 
A
 = (
mdec
.
ªg0
 & 
MDEC0_STP
) ? 0x8000 : 0;

331 
i
 = 0; i < 8; i++, 
Yblk
++) {

332 
Y
 = *
Yblk
;

334 
image
[
i
] = 
	`SWAP16
((
	`CLAMP5
(
Y
 >> 3Ë* 0x421Ë| 
A
);

336 
	}
}

338 
ölöe
 
	$putquadrgb15
(
u16
 *
image
, *
Yblk
, 
Cr
, 
Cb
) {

339 
Y
, 
R
, 
G
, 
B
;

340 
A
 = (
mdec
.
ªg0
 & 
MDEC0_STP
) ? 0x8000 : 0;

341 
R
 = 
	`MULR
(
Cr
);

342 
G
 = 
	`MULG2
(
Cb
, 
Cr
);

343 
B
 = 
	`MULB
(
Cb
);

346 
Y
 = 
	`MULY
(
Yblk
[0]);

347 
image
[0] = 
	`MAKERGB15
(
	`CLAMP_SCALE5
(
Y
 + 
R
), CLAMP_SCALE5(Y + 
G
), CLAMP_SCALE5(Y + 
B
), 
A
);

348 
Y
 = 
	`MULY
(
Yblk
[1]);

349 
image
[1] = 
	`MAKERGB15
(
	`CLAMP_SCALE5
(
Y
 + 
R
), CLAMP_SCALE5(Y + 
G
), CLAMP_SCALE5(Y + 
B
), 
A
);

350 
Y
 = 
	`MULY
(
Yblk
[8]);

351 
image
[16] = 
	`MAKERGB15
(
	`CLAMP_SCALE5
(
Y
 + 
R
), CLAMP_SCALE5(Y + 
G
), CLAMP_SCALE5(Y + 
B
), 
A
);

352 
Y
 = 
	`MULY
(
Yblk
[9]);

353 
image
[17] = 
	`MAKERGB15
(
	`CLAMP_SCALE5
(
Y
 + 
R
), CLAMP_SCALE5(Y + 
G
), CLAMP_SCALE5(Y + 
B
), 
A
);

354 
	}
}

356 
ölöe
 
	$yuv2rgb15
(*
blk
, *
image
) {

357 
x
, 
y
;

358 *
Yblk
 = 
blk
 + 
DSIZE2
 * 2;

359 *
Crblk
 = 
blk
;

360 *
Cbblk
 = 
blk
 + 
DSIZE2
;

362 i‡(!
C⁄fig
.
Mdec
) {

363 
y
 = 0; y < 16; y +2, 
Crblk
 +4, 
Cbblk
 +4, 
Yblk
 +8, 
image
 += 24) {

364 i‡(
y
 =8Ë
Yblk
 +
DSIZE2
;

365 
x
 = 0; x < 4; x++, 
image
 +2, 
Crblk
++, 
Cbblk
++, 
Yblk
 += 2) {

366 
	`putquadrgb15
(
image
, 
Yblk
, *
Crblk
, *
Cbblk
);

367 
	`putquadrgb15
(
image
 + 8, 
Yblk
 + 
DSIZE2
, *(
Crblk
 + 4), *(
Cbblk
 + 4));

371 
y
 = 0; y < 16; y++, 
Yblk
 +8, 
image
 += 16) {

372 i‡(
y
 =8Ë
Yblk
 +
DSIZE2
;

373 
	`puéöebw15
(
image
, 
Yblk
);

374 
	`puéöebw15
(
image
 + 8, 
Yblk
 + 
DSIZE2
);

377 
	}
}

379 
ölöe
 
	$puéöebw24
(
u8
 * 
image
, *
Yblk
) {

380 
i
;

381 
Y
;

382 
i
 = 0; i < 8 * 3; i +3, 
Yblk
++) {

383 
Y
 = 
	`CLAMP8
(*
Yblk
);

384 
image
[
i
 + 0] = 
Y
;

385 
image
[
i
 + 1] = 
Y
;

386 
image
[
i
 + 2] = 
Y
;

388 
	}
}

390 
ölöe
 
	$putquadrgb24
(
u8
 * 
image
, *
Yblk
, 
Cr
, 
Cb
) {

391 
Y
, 
R
, 
G
, 
B
;

393 
R
 = 
	`MULR
(
Cr
);

394 
G
 = 
	`MULG2
(
Cb
,
Cr
);

395 
B
 = 
	`MULB
(
Cb
);

397 
Y
 = 
	`MULY
(
Yblk
[0]);

398 
image
[0 * 3 + 0] = 
	`CLAMP_SCALE8
(
Y
 + 
R
);

399 
image
[0 * 3 + 1] = 
	`CLAMP_SCALE8
(
Y
 + 
G
);

400 
image
[0 * 3 + 2] = 
	`CLAMP_SCALE8
(
Y
 + 
B
);

401 
Y
 = 
	`MULY
(
Yblk
[1]);

402 
image
[1 * 3 + 0] = 
	`CLAMP_SCALE8
(
Y
 + 
R
);

403 
image
[1 * 3 + 1] = 
	`CLAMP_SCALE8
(
Y
 + 
G
);

404 
image
[1 * 3 + 2] = 
	`CLAMP_SCALE8
(
Y
 + 
B
);

405 
Y
 = 
	`MULY
(
Yblk
[8]);

406 
image
[16 * 3 + 0] = 
	`CLAMP_SCALE8
(
Y
 + 
R
);

407 
image
[16 * 3 + 1] = 
	`CLAMP_SCALE8
(
Y
 + 
G
);

408 
image
[16 * 3 + 2] = 
	`CLAMP_SCALE8
(
Y
 + 
B
);

409 
Y
 = 
	`MULY
(
Yblk
[9]);

410 
image
[17 * 3 + 0] = 
	`CLAMP_SCALE8
(
Y
 + 
R
);

411 
image
[17 * 3 + 1] = 
	`CLAMP_SCALE8
(
Y
 + 
G
);

412 
image
[17 * 3 + 2] = 
	`CLAMP_SCALE8
(
Y
 + 
B
);

413 
	}
}

415 
	$yuv2rgb24
(*
blk
, 
u8
 *
image
) {

416 
x
, 
y
;

417 *
Yblk
 = 
blk
 + 
DSIZE2
 * 2;

418 *
Crblk
 = 
blk
;

419 *
Cbblk
 = 
blk
 + 
DSIZE2
;

421 i‡(!
C⁄fig
.
Mdec
) {

422 
y
 = 0; y < 16; y +2, 
Crblk
 +4, 
Cbblk
 +4, 
Yblk
 +8, 
image
 += 8 * 3 * 3) {

423 i‡(
y
 =8Ë
Yblk
 +
DSIZE2
;

424 
x
 = 0; x < 4; x++, 
image
 +6, 
Crblk
++, 
Cbblk
++, 
Yblk
 += 2) {

425 
	`putquadrgb24
(
image
, 
Yblk
, *
Crblk
, *
Cbblk
);

426 
	`putquadrgb24
(
image
 + 8 * 3, 
Yblk
 + 
DSIZE2
, *(
Crblk
 + 4), *(
Cbblk
 + 4));

430 
y
 = 0; y < 16; y++, 
Yblk
 +8, 
image
 += 16 * 3) {

431 i‡(
y
 =8Ë
Yblk
 +
DSIZE2
;

432 
	`puéöebw24
(
image
, 
Yblk
);

433 
	`puéöebw24
(
image
 + 8 * 3, 
Yblk
 + 
DSIZE2
);

436 
	}
}

438 
	$mdecInô
() {

439 
	`mem£t
(&
mdec
, 0, (mdec));

440 
	`mem£t
(
iq_y
, 0, (iq_y));

441 
	`mem£t
(
iq_uv
, 0, (iq_uv));

442 
mdec
.
æ
 = (
u16
 *)&
psxM
[0x100000];

443 
	}
}

446 
	$mdecWrôe0
(
u32
 
d©a
) {

447 
mdec
.
ªg0
 = 
d©a
;

448 
	}
}

450 
u32
 
	$mdecRód0
() {

451  
mdec
.
ªg0
;

452 
	}
}

455 
	$mdecWrôe1
(
u32
 
d©a
) {

456 i‡(
d©a
 & 
MDEC1_RESET
) {

457 
mdec
.
ªg0
 = 0;

458 
mdec
.
ªg1
 = 0;

459 
mdec
.
≥ndög_dma1
.
adr
 = 0;

460 
mdec
.
block_buf„r_pos
 = 0;

462 
	}
}

464 
u32
 
	$mdecRód1
() {

465 
u32
 
v
 = 
mdec
.
ªg1
;

466  
v
;

467 
	}
}

469 
	$psxDma0
(
u32
 
adr
, u32 
b¸
, u32 
ch¸
) {

470 
cmd
 = 
mdec
.
ªg0
;

471 
size
;

473 i‡(
ch¸
 != 0x01000201) {

478 
mdec
.
ªg1
 |
MDEC1_STP
;

480 
size
 = (
b¸
 >> 16) * (bcr & 0xffff);

482 
cmd
 >> 28) {

484 
mdec
.
æ
 = (
u16
 *Ë
	`PSXM
(
adr
);

486 
mdec
.
ªg1
 |
MDEC1_BUSY
;

488 
mdec
.
æ_íd
 = mdec.
æ
 + (
size
 * 2);

491 if(
mdec
.
æ_íd
 <mdec.
æ
) {

492 
	`MDECINDMA_INT
–
size
 / 4 );

497 if(
mdec
.
≥ndög_dma1
.
adr
){

498 
	`psxDma1
(
mdec
.
≥ndög_dma1
.
adr
, mdec.≥ndög_dma1.
b¸
, mdec.≥ndög_dma1.
ch¸
);

500 
mdec
.
≥ndög_dma1
.
adr
 = 0;

506 
u8
 *
p
 = (u8 *)
	`PSXM
(
adr
);

510 
	`iqèb_öô
(
iq_y
, 
p
);

511 
	`iqèb_öô
(
iq_uv
, 
p
 + 64);

514 
	`MDECINDMA_INT
–
size
 / 4 );

520 
	`MDECINDMA_INT
–
size
 / 4 );

528 
HW_DMA0_CHCR
 &
	`SWAP32
(~0x01000000);

529 
	`DMA_INTERRUPT
(0);

530 
	}
}

532 
	$mdec0I¡îru±
()

534 i‡(
HW_DMA0_CHCR
 & 
	`SWAP32
(0x01000000))

536 
HW_DMA0_CHCR
 &
	`SWAP32
(~0x01000000);

537 
	`DMA_INTERRUPT
(0);

539 
	}
}

541 
	#SIZE_OF_24B_BLOCK
 (16*16*3)

	)

542 
	#SIZE_OF_16B_BLOCK
 (16*16*2)

	)

544 
	$psxDma1
(
u32
 
adr
, u32 
b¸
, u32 
ch¸
) {

545 
blk
[
DSIZE2
 * 6];

546 
u8
 * 
image
;

547 
size
;

548 
u32
 
w‹ds
;

550 i‡(
ch¸
 != 0x01000200) ;

552 
w‹ds
 = (
b¸
 >> 16) * (bcr & 0xffff);

554 
size
 = 
w‹ds
 * 4;

556 i‡(!(
mdec
.
ªg1
 & 
MDEC1_BUSY
)) {

558 
mdec
.
≥ndög_dma1
.
adr
 =ádr;

559 
mdec
.
≥ndög_dma1
.
b¸
 = bcr;

560 
mdec
.
≥ndög_dma1
.
ch¸
 = chcr;

564 
image
 = (
u8
 *)
	`PSXM
(
adr
);

566 i‡(
mdec
.
ªg0
 & 
MDEC0_RGB24
) {

572 if(
mdec
.
block_buf„r_pos
 != 0) {

573 
n
 = 
mdec
.
block_buf„r
 - mdec.
block_buf„r_pos
 + 
SIZE_OF_16B_BLOCK
;

575 
	`mem˝y
(
image
, 
mdec
.
block_buf„r_pos
, 
n
);

576 
image
 +
n
;

577 
size
 -
n
;

578 
mdec
.
block_buf„r_pos
 = 0;

581 
size
 >
SIZE_OF_16B_BLOCK
) {

582 
mdec
.
æ
 = 
	`æ2blk
(
blk
, mdec.rl);

583 
	`yuv2rgb15
(
blk
, (
u16
 *)
image
);

584 
image
 +
SIZE_OF_16B_BLOCK
;

585 
size
 -
SIZE_OF_16B_BLOCK
;

588 if(
size
 != 0) {

589 
mdec
.
æ
 = 
	`æ2blk
(
blk
, mdec.rl);

590 
	`yuv2rgb15
(
blk
, (
u16
 *)
mdec
.
block_buf„r
);

591 
	`mem˝y
(
image
, 
mdec
.
block_buf„r
, 
size
);

592 
mdec
.
block_buf„r_pos
 = mdec.
block_buf„r
 + 
size
;

601 if(
mdec
.
block_buf„r_pos
 != 0) {

602 
n
 = 
mdec
.
block_buf„r
 - mdec.
block_buf„r_pos
 + 
SIZE_OF_24B_BLOCK
;

604 
	`mem˝y
(
image
, 
mdec
.
block_buf„r_pos
, 
n
);

605 
image
 +
n
;

606 
size
 -
n
;

607 
mdec
.
block_buf„r_pos
 = 0;

610 
size
 >
SIZE_OF_24B_BLOCK
) {

611 
mdec
.
æ
 = 
	`æ2blk
(
blk
, mdec.rl);

612 
	`yuv2rgb24
(
blk
, 
image
);

613 
image
 +
SIZE_OF_24B_BLOCK
;

614 
size
 -
SIZE_OF_24B_BLOCK
;

617 if(
size
 != 0) {

618 
mdec
.
æ
 = 
	`æ2blk
(
blk
, mdec.rl);

619 
	`yuv2rgb24
(
blk
, 
mdec
.
block_buf„r
);

620 
	`mem˝y
(
image
, 
mdec
.
block_buf„r
, 
size
);

621 
mdec
.
block_buf„r_pos
 = mdec.
block_buf„r
 + 
size
;

626 
	`MDECOUTDMA_INT
(
w‹ds
 * 
MDEC_BIAS
);

628 
	}
}

630 
	$mdec1I¡îru±
() {

656 i‡(
mdec
.
æ
 >mdec.
æ_íd
 || 
	`SWAP16
(*(mdec.æ)Ë=
MDEC_END_OF_DATA
) {

657 
mdec
.
ªg1
 &~(
MDEC1_STP
|
MDEC1_BUSY
);

658 i‡(
HW_DMA0_CHCR
 & 
	`SWAP32
(0x01000000))

660 
HW_DMA0_CHCR
 &
	`SWAP32
(~0x01000000);

661 
	`DMA_INTERRUPT
(0);

665 i‡(
HW_DMA1_CHCR
 & 
	`SWAP32
(0x01000000))

667 
HW_DMA1_CHCR
 &
	`SWAP32
(~0x01000000);

668 
	`DMA_INTERRUPT
(1);

670 
	}
}

672 
	$mdecFªeze
(*
f
, 
Mode
) {

673 
u8
 *
ba£
 = (u8 *)&
psxM
[0x100000];

674 
u32
 
v
;

676 
	`gz‰ìze
(&
mdec
.
ªg0
, (mdec.reg0));

677 
	`gz‰ìze
(&
mdec
.
ªg1
, (mdec.reg1));

680 
v
 = (
u8
 *)
mdec
.
æ
 - 
ba£
;

681 
	`gz‰ìze
(&
v
, (v));

682 
mdec
.
æ
 = (
u16
 *)(
ba£
 + (
v
 & 0xffffe));

683 
v
 = (
u8
 *)
mdec
.
æ_íd
 - 
ba£
;

684 
	`gz‰ìze
(&
v
, (v));

685 
mdec
.
æ_íd
 = (
u16
 *)(
ba£
 + (
v
 & 0xffffe));

687 
v
 = 0;

688 i‡(
mdec
.
block_buf„r_pos
)

689 
v
 = 
mdec
.
block_buf„r_pos
 - 
ba£
;

690 
	`gz‰ìze
(&
v
, (v));

691 
mdec
.
block_buf„r_pos
 = 0;

692 i‡(
v
)

693 
mdec
.
block_buf„r_pos
 = 
ba£
 + (
v
 & 0xfffff);

695 
	`gz‰ìze
(&
mdec
.
block_buf„r
, (mdec.block_buffer));

696 
	`gz‰ìze
(&
mdec
.
≥ndög_dma1
, (mdec.pending_dma1));

697 
	`gz‰ìze
(
iq_y
, (iq_y));

698 
	`gz‰ìze
(
iq_uv
, (iq_uv));

701 
	}
}

	@libpcsxcore/mdec.h

20 #i‚de‡
__MDEC_H__


21 
	#__MDEC_H__


	)

23 #ifde‡
__˝lu•lus


27 
	~"psxcomm⁄.h
"

28 
	~"r3000a.h
"

29 
	~"psxhw.h
"

30 
	~"psxdma.h
"

32 
mdecInô
();

33 
mdecWrôe0
(
u32
 
d©a
);

34 
mdecWrôe1
(
u32
 
d©a
);

35 
u32
 
mdecRód0
();

36 
u32
 
mdecRód1
();

37 
psxDma0
(
u32
 
madr
, u32 
b¸
, u32 
ch¸
);

38 
psxDma1
(
u32
 
madr
, u32 
b¸
, u32 
ch¸
);

39 
mdec0I¡îru±
();

40 
mdec1I¡îru±
();

41 
mdecFªeze
(*
f
, 
Mode
);

43 #ifde‡
__˝lu•lus


	@libpcsxcore/memmap.h

1 #i‚de‡
_MEMMAP_H


2 
	#_MEMMAP_H


	)

4 #ifde‡
_WIN32


6 #i‚de‡
_WIN32_WINNT


7 
	#_WIN32_WINNT
 0x0501

9 

	)

11 #i‚de‡
_MSC_VER


12 
	~<_mögw.h
>

15 
	~<sys/ty≥s.h
>

17 #ifde‡
__˝lu•lus


21 
	#PROT_NONE
 0

	)

22 
	#PROT_READ
 1

	)

23 
	#PROT_WRITE
 2

	)

24 
	#PROT_EXEC
 4

	)

26 
	#MAP_FILE
 0

	)

27 
	#MAP_SHARED
 1

	)

28 
	#MAP_PRIVATE
 2

	)

29 
	#MAP_TYPE
 0xf

	)

30 
	#MAP_FIXED
 0x10

	)

31 
	#MAP_ANONYMOUS
 0x20

	)

32 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

34 
	#MAP_FAILED
 ((*)-1)

	)

37 
	#MS_ASYNC
 1

	)

38 
	#MS_SYNC
 2

	)

39 
	#MS_INVALIDATE
 4

	)

41 * 
mm≠
(*
addr
, 
size_t
 
Àn
, 
¥Ÿ
, 
Êags
, 
fûdes
, 
off_t
 
off
);

42 
munm≠
(*
addr
, 
size_t
 
Àn
);

43 
m¥Ÿe˘
(*
addr
, 
size_t
 
Àn
, 
¥Ÿ
);

44 
msync
(*
addr
, 
size_t
 
Àn
, 
Êags
);

45 
mlock
(c⁄° *
addr
, 
size_t
 
Àn
);

46 
mu∆ock
(c⁄° *
addr
, 
size_t
 
Àn
);

48 #ifde‡
__˝lu•lus


53 
	~<sys/mm™.h
>

	@libpcsxcore/memmap_win32.c

1 
	~<wödows.h
>

2 
	~<î∫o.h
>

3 
	~<io.h
>

5 
	~"memm≠.h
"

7 #i‚de‡
FILE_MAP_EXECUTE


8 
	#FILE_MAP_EXECUTE
 0x0020

	)

11 
	$__m≠_mm™_îr‹
(c⁄° 
DWORD
 
îr
, c⁄° 
de„º
)

13 i‡(
îr
 == 0)

16  
îr
;

17 
	}
}

19 
DWORD
 
	$__m≠_mm≠_¥Ÿ_∑ge
(c⁄° 
¥Ÿ
)

21 
DWORD
 
¥Ÿe˘
 = 0;

23 i‡(
¥Ÿ
 =
PROT_NONE
)

26 i‡((
¥Ÿ
 & 
PROT_EXEC
) != 0)

27 
¥Ÿe˘
 = ((
¥Ÿ
 & 
PROT_WRITE
) != 0) ?

28 
PAGE_EXECUTE_READWRITE
 : 
PAGE_EXECUTE_READ
;

30 
¥Ÿe˘
 = ((
¥Ÿ
 & 
PROT_WRITE
) != 0) ?

31 
PAGE_READWRITE
 : 
PAGE_READONLY
;

33  
¥Ÿe˘
;

34 
	}
}

36 
DWORD
 
	$__m≠_mm≠_¥Ÿ_fûe
(c⁄° 
¥Ÿ
)

38 
DWORD
 
desúedAc˚ss
 = 0;

40 i‡(
¥Ÿ
 =
PROT_NONE
)

43 i‡((
¥Ÿ
 & 
PROT_READ
) != 0)

44 
desúedAc˚ss
 |
FILE_MAP_READ
;

45 i‡((
¥Ÿ
 & 
PROT_WRITE
) != 0)

46 
desúedAc˚ss
 |
FILE_MAP_WRITE
;

47 i‡((
¥Ÿ
 & 
PROT_EXEC
) != 0)

48 
desúedAc˚ss
 |
FILE_MAP_EXECUTE
;

50  
desúedAc˚ss
;

51 
	}
}

53 * 
	$mm≠
(*
addr
, 
size_t
 
Àn
, 
¥Ÿ
, 
Êags
, 
fûdes
, 
off_t
 
off
)

55 
HANDLE
 
fm
, 
h
;

57 * 
m≠
 = 
MAP_FAILED
;

59 #ifde‡
_MSC_VER


60 #¥agm®
	`w¨nög
(
push
)

61 #¥agm®
	`w¨nög
(
dißbÀ
: 4293)

64 c⁄° 
DWORD
 
dwFûeOff£tLow
 = ((
off_t
) <= (DWORD)) ?

65 (
DWORD
)
off
 : (DWORD)(off & 0xFFFFFFFFL);

66 c⁄° 
DWORD
 
dwFûeOff£tHigh
 = ((
off_t
) <= (DWORD)) ?

67 (
DWORD
)0 : (DWORD)((
off
 >> 32) & 0xFFFFFFFFL);

68 c⁄° 
DWORD
 
¥Ÿe˘
 = 
	`__m≠_mm≠_¥Ÿ_∑ge
(
¥Ÿ
);

69 c⁄° 
DWORD
 
desúedAc˚ss
 = 
	`__m≠_mm≠_¥Ÿ_fûe
(
¥Ÿ
);

71 c⁄° 
off_t
 
maxSize
 = 
off
 + (off_t)
Àn
;

73 c⁄° 
DWORD
 
dwMaxSizeLow
 = ((
off_t
) <= (DWORD)) ?

74 (
DWORD
)
maxSize
 : (DWORD)(maxSize & 0xFFFFFFFFL);

75 c⁄° 
DWORD
 
dwMaxSizeHigh
 = ((
off_t
) <= (DWORD)) ?

76 (
DWORD
)0 : (DWORD)((
maxSize
 >> 32) & 0xFFFFFFFFL);

78 #ifde‡
_MSC_VER


79 #¥agm®
	`w¨nög
(
p›
)

82 
î∫o
 = 0;

84 i‡(
Àn
 == 0

86 || (
Êags
 & 
MAP_FIXED
) != 0

88 || 
¥Ÿ
 =
PROT_EXEC
)

90 
î∫o
 = 
EINVAL
;

91  
MAP_FAILED
;

94 
h
 = ((
Êags
 & 
MAP_ANONYMOUS
) == 0) ?

95 (
HANDLE
)
	`_gë_osfh™dÀ
(
fûdes
Ë: 
INVALID_HANDLE_VALUE
;

97 i‡((
Êags
 & 
MAP_ANONYMOUS
Ë=0 && 
h
 =
INVALID_HANDLE_VALUE
)

99 
î∫o
 = 
EBADF
;

100  
MAP_FAILED
;

103 
fm
 = 
	`Cª©eFûeM≠pög
(
h
, 
NULL
, 
¥Ÿe˘
, 
dwMaxSizeHigh
, 
dwMaxSizeLow
, NULL);

105 i‡(!
fm
)

106 
îr‹
;

108 
m≠
 = 
	`M≠VõwOfFûe
(
fm
, 
desúedAc˚ss
, 
dwFûeOff£tHigh
, 
dwFûeOff£tLow
, 
Àn
);

110 
	`Clo£H™dÀ
(
fm
);

112 i‡(!
m≠
)

113 
îr‹
;

115  
m≠
;

116 
îr‹
:

117 
î∫o
 = 
	`__m≠_mm™_îr‹
(
	`GëLa°Eº‹
(), 
EPERM
);

118  
MAP_FAILED
;

119 
	}
}

121 
	$munm≠
(*
addr
, 
size_t
 
Àn
)

123 i‡(
	`Unm≠VõwOfFûe
(
addr
))

126 
î∫o
 = 
	`__m≠_mm™_îr‹
(
	`GëLa°Eº‹
(), 
EPERM
);

129 
	}
}

131 
	$m¥Ÿe˘
(*
addr
, 
size_t
 
Àn
, 
¥Ÿ
)

133 
DWORD
 
√wPrŸe˘
 = 
	`__m≠_mm≠_¥Ÿ_∑ge
(
¥Ÿ
);

134 
DWORD
 
ﬁdPrŸe˘
 = 0;

136 i‡(
	`VútuÆPrŸe˘
(
addr
, 
Àn
, 
√wPrŸe˘
, &
ﬁdPrŸe˘
))

139 
î∫o
 = 
	`__m≠_mm™_îr‹
(
	`GëLa°Eº‹
(), 
EPERM
);

142 
	}
}

144 
	$msync
(*
addr
, 
size_t
 
Àn
, 
Êags
)

146 i‡(
	`FlushVõwOfFûe
(
addr
, 
Àn
))

149 
î∫o
 = 
	`__m≠_mm™_îr‹
(
	`GëLa°Eº‹
(), 
EPERM
);

152 
	}
}

154 
	$mlock
(c⁄° *
addr
, 
size_t
 
Àn
)

156 i‡(
	`VútuÆLock
((
LPVOID
)
addr
, 
Àn
))

159 
î∫o
 = 
	`__m≠_mm™_îr‹
(
	`GëLa°Eº‹
(), 
EPERM
);

162 
	}
}

164 
	$mu∆ock
(c⁄° *
addr
, 
size_t
 
Àn
)

166 i‡(
	`VútuÆU∆ock
((
LPVOID
)
addr
, 
Àn
))

169 
î∫o
 = 
	`__m≠_mm™_îr‹
(
	`GëLa°Eº‹
(), 
EPERM
);

172 
	}
}

	@libpcsxcore/misc.c

24 
	~"misc.h
"

25 
	~"cdrom.h
"

26 
	~"mdec.h
"

27 
	~"gpu.h
"

28 
	~"µf.h
"

29 
	~<zlib.h
>

31 
	gCdromId
[10] = "";

32 
	gCdromLabñ
[33] = "";

35 
	#PSX_EXE
 1

	)

36 
	#CPE_EXE
 2

	)

37 
	#COFF_EXE
 3

	)

38 
	#INVALID_EXE
 4

	)

40 
	#ISODCL
(
‰om
, 
to
Ë—ÿ- from + 1)

	)

42 
	siso_dúe˘‹y_ªc‹d
 {

43 
	mÀngth
 [
ISODCL
 (1, 1)];

44 
	mext_©å_Àngth
 [
ISODCL
 (2, 2)];

45 
	mexã¡
 [
ISODCL
 (3, 10)];

46 
	msize
 [
ISODCL
 (11, 18)];

47 
	md©e
 [
ISODCL
 (19, 25)];

48 
	mÊags
 [
ISODCL
 (26, 26)];

49 
	mfûe_unô_size
 [
ISODCL
 (27, 27)];

50 
	möãæóve
 [
ISODCL
 (28, 28)];

51 
	mvﬁume_£quí˚_numbî
 [
ISODCL
 (29, 32)];

52 
	m«me_Àn
 [
ISODCL
 (33, 33)];

53 
	m«me
 [1];

56 
	$mmssdd
–*
b
, *
p
 )

58 
m
, 
s
, 
d
;

59 #i‡
	`deföed
(
__¨m__
)

60 *
u
 = (*)
b
;

61 
block
 = (
u
[3] << 24) | (u[2] << 16) | (u[1] << 8) | u[0];

62 #ñi‡
	`deföed
(
__BIGENDIAN__
)

63 
block
 = (
b
[0] & 0xff) | ((b[1] & 0xff) << 8) | ((b[2] & 0xff) << 16) | (b[3] << 24);

65 
block
 = *((*)
b
);

68 
block
 += 150;

69 
m
 = 
block
 / 4500;

70 
block
 = block - 
m
 * 4500;

71 
s
 = 
block
 / 75;

72 
d
 = 
block
 - 
s
 * 75;

74 
m
 = ((m / 10) << 4) | m % 10;

75 
s
 = ((s / 10) << 4) | s % 10;

76 
d
 = ((d / 10) << 4) | d % 10;

78 
p
[0] = 
m
;

79 
p
[1] = 
s
;

80 
p
[2] = 
d
;

81 
	}
}

83 
	#öcTime
() \

84 
time
[0] = 
	`btoi
(time[0]);Åime[1] = btoi(time[1]);Åime[2] = btoi(time[2]); \

85 
time
[2]++; \

86 if(
time
[2] == 75) { \

87 
time
[2] = 0; \

88 
time
[1]++; \

89 i‡(
time
[1] == 60) { \

90 
time
[1] = 0; \

91 
time
[0]++; \

94 
time
[0] = 
	`ôob
—ime[0]);Åime[1] = itob—ime[1]);Åime[2] = itob—ime[2]);

	)

96 
	#READTRACK
() \

97 i‡(
	`CDR_ªadTøck
(
time
) == -1)  -1; \

98 
buf
 = (*)
	`CDR_gëBuf„r
(); \

99 i‡(
buf
 =
NULL
)  -1; \

100 
	`CheckPPFCache
((
u8
 *)
buf
, 
time
[0],Åime[1],Åime[2]);

	)

102 
	#READDIR
(
_dú
) \

103 
	`READTRACK
(); \

104 
	`mem˝y
(
_dú
, 
buf
 + 12, 2048); \

106 
	`öcTime
(); \

107 
	`READTRACK
(); \

108 
	`mem˝y
(
_dú
 + 2048, 
buf
 + 12, 2048);

	)

110 
	$GëCdromFûe
(
u8
 *
mdú
, u8 *
time
, *
fûíame
) {

111 
iso_dúe˘‹y_ªc‹d
 *
dú
;

112 
ªtvÆ
 = -1;

113 
u8
 
ddú
[4096];

114 
u8
 *
buf
;

115 
i
;

118 i‡(!
	`°æí
(
fûíame
))  -1;

120 
i
 = 0;

121 
i
 < 4096) {

122 
dú
 = (
iso_dúe˘‹y_ªc‹d
*Ë&
mdú
[
i
];

123 i‡(
dú
->
Àngth
[0] == 0) {

126 
i
 +(
u8
)
dú
->
Àngth
[0];

128 i‡(
dú
->
Êags
[0] & 0x2) {

129 i‡(!
	`°∫icmp
((*)&
dú
->
«me
[0], 
fûíame
, dú->
«me_Àn
[0])) {

130 i‡(
fûíame
[
dú
->
«me_Àn
[0]] != '\\') ;

132 
fûíame
 +
dú
->
«me_Àn
[0] + 1;

134 
	`mmssdd
(
dú
->
exã¡
, (*)
time
);

135 
	`READDIR
(
ddú
);

136 
i
 = 0;

137 
mdú
 = 
ddú
;

140 i‡(!
	`°∫icmp
((*)&
dú
->
«me
[0], 
fûíame
, 
	`°æí
(filename))) {

141 
	`mmssdd
(
dú
->
exã¡
, (*)
time
);

142 
ªtvÆ
 = 0;

147  
ªtvÆ
;

148 
	}
}

150 c⁄° 
	ggpu_˘l_def
[] = {

155 c⁄° 
	ggpu_d©a_def
[] = {

161 
	$Áke_bios_gpu_£tup
()

163 
i
;

165 
i
 = 0; i < (
gpu_˘l_def
) / (gpu_ctl_def[0]); i++)

166 
	`GPU_wrôeSètus
(
gpu_˘l_def
[
i
]);

168 
i
 = 0; i < (
gpu_d©a_def
) / (gpu_data_def[0]); i++)

169 
	`GPU_wrôeD©a
(
gpu_d©a_def
[
i
]);

170 
	}
}

172 
	$LﬂdCdrom
() {

173 
EXE_HEADER
 
tmpHód
;

174 
iso_dúe˘‹y_ªc‹d
 *
dú
;

175 
u8
 
time
[4], *
buf
;

176 
u8
 
mdú
[4096];

177 
exíame
[256];

181 
	`Áke_bios_gpu_£tup
();

183 i‡(!
C⁄fig
.
HLE
) {

185 
psxRegs
.
pc
 =ÖsxRegs.
GPR
.
n
.
ø
;

189 
time
[0] = 
	`ôob
(0);Åime[1] = itob(2);Åime[2] = itob(0x10);

191 
	`READTRACK
();

194 
dú
 = (
iso_dúe˘‹y_ªc‹d
*Ë&
buf
[12+156];

196 
	`mmssdd
(
dú
->
exã¡
, (*)
time
);

198 
	`READDIR
(
mdú
);

201 i‡(
	`GëCdromFûe
(
mdú
, 
time
, "SYSTEM.CNF;1") == -1) {

203 i‡(
	`GëCdromFûe
(
mdú
, 
time
, "PSX.EXE;1") == -1)  -1;

205 
	`READTRACK
();

209 
	`READTRACK
();

211 
	`ssˇnf
((*)
buf
 + 12, "BOOT = cdrom:\\%255s", 
exíame
);

212 i‡(
	`GëCdromFûe
(
mdú
, 
time
, 
exíame
) == -1) {

213 
	`ssˇnf
((*)
buf
 + 12, "BOOT = cdrom:%255s", 
exíame
);

214 i‡(
	`GëCdromFûe
(
mdú
, 
time
, 
exíame
) == -1) {

215 *
±r
 = 
	`°r°r
((*)
buf
 + 12, "cdrom:");

216 i‡(
±r
 !
NULL
) {

217 
±r
 += 6;

218 *
±r
 == '\\' || *ptr == '/')Ötr++;

219 
	`°∫˝y
(
exíame
, 
±r
, 255);

220 
exíame
[255] = '\0';

221 
±r
 = 
exíame
;

222 *
±r
 != '\0' && *ptr != '\r' && *ptr != '\n')Ötr++;

223 *
±r
 = '\0';

224 i‡(
	`GëCdromFûe
(
mdú
, 
time
, 
exíame
) == -1)

232 
	`READTRACK
();

235 
	`mem˝y
(&
tmpHód
, 
buf
 + 12, (
EXE_HEADER
));

237 
psxRegs
.
pc
 = 
	`SWAP32
(
tmpHód
.
pc0
);

238 
psxRegs
.
GPR
.
n
.
gp
 = 
	`SWAP32
(
tmpHód
.
gp0
);

239 
psxRegs
.
GPR
.
n
.
•
 = 
	`SWAP32
(
tmpHód
.
s_addr
);

240 i‡(
psxRegs
.
GPR
.
n
.
•
 == 0)ÖsxRegs.GPR.n.sp = 0x801fff00;

242 
tmpHód
.
t_size
 = 
	`SWAP32
(tmpHead.t_size);

243 
tmpHód
.
t_addr
 = 
	`SWAP32
(tmpHead.t_addr);

245 
psxCpu
->
	`CÀ¨
(
tmpHód
.
t_addr
,ÅmpHód.
t_size
 / 4);

248 
tmpHód
.
t_size
 & ~2047) {

249 *
±r
 = (*)
	`PSXM
(
tmpHód
.
t_addr
);

251 
	`öcTime
();

252 
	`READTRACK
();

254 i‡(
±r
 !
NULL
Ë
	`mem˝y
’å, 
buf
+12, 2048);

256 
tmpHód
.
t_size
 -= 2048;

257 
tmpHód
.
t_addr
 += 2048;

261 
	}
}

263 
	$LﬂdCdromFûe
(c⁄° *
fûíame
, 
EXE_HEADER
 *
hód
) {

264 
iso_dúe˘‹y_ªc‹d
 *
dú
;

265 
u8
 
time
[4],*
buf
;

266 
u8
 
mdú
[4096];

267 
exíame
[256];

268 
u32
 
size
, 
addr
;

269 *
mem
;

271 
	`ssˇnf
(
fûíame
, "cdrom:\\%255s", 
exíame
);

273 
time
[0] = 
	`ôob
(0);Åime[1] = itob(2);Åime[2] = itob(0x10);

275 
	`READTRACK
();

278 
dú
 = (
iso_dúe˘‹y_ªc‹d
 *)&
buf
[12 + 156];

280 
	`mmssdd
(
dú
->
exã¡
, (*)
time
);

282 
	`READDIR
(
mdú
);

284 i‡(
	`GëCdromFûe
(
mdú
, 
time
, 
exíame
) == -1)  -1;

286 
	`READTRACK
();

288 
	`mem˝y
(
hód
, 
buf
 + 12, (
EXE_HEADER
));

289 
size
 = 
hód
->
t_size
;

290 
addr
 = 
hód
->
t_addr
;

292 
psxCpu
->
	`CÀ¨
(
addr
, 
size
 / 4);

294 
size
 & ~2047) {

295 
	`öcTime
();

296 
	`READTRACK
();

298 
mem
 = 
	`PSXM
(
addr
);

299 i‡(
mem
)

300 
	`mem˝y
(
mem
, 
buf
 + 12, 2048);

302 
size
 -= 2048;

303 
addr
 += 2048;

307 
	}
}

309 
	$CheckCdrom
() {

310 
iso_dúe˘‹y_ªc‹d
 *
dú
;

311 
time
[4];

312 *
buf
;

313 
mdú
[4096];

314 
exíame
[256];

315 
i
, 
Àn
, 
c
;

317 
	`FªePPFCache
();

319 
time
[0] = 
	`ôob
(0);

320 
time
[1] = 
	`ôob
(2);

321 
time
[2] = 
	`ôob
(0x10);

323 
	`READTRACK
();

325 
	`mem£t
(
CdromLabñ
, 0, (CdromLabel));

326 
	`mem£t
(
CdromId
, 0, (CdromId));

327 
	`mem£t
(
exíame
, 0, (exename));

329 
	`°∫˝y
(
CdromLabñ
, 
buf
 + 52, 32);

332 
dú
 = (
iso_dúe˘‹y_ªc‹d
 *)&
buf
[12 + 156];

334 
	`mmssdd
(
dú
->
exã¡
, (*)
time
);

336 
	`READDIR
(
mdú
);

338 i‡(
	`GëCdromFûe
(
mdú
, 
time
, "SYSTEM.CNF;1") != -1) {

339 
	`READTRACK
();

341 
	`ssˇnf
(
buf
 + 12, "BOOT = cdrom:\\%255s", 
exíame
);

342 i‡(
	`GëCdromFûe
(
mdú
, 
time
, 
exíame
) == -1) {

343 
	`ssˇnf
(
buf
 + 12, "BOOT = cdrom:%255s", 
exíame
);

344 i‡(
	`GëCdromFûe
(
mdú
, 
time
, 
exíame
) == -1) {

345 *
±r
 = 
	`°r°r
(
buf
 + 12, "cdrom:");

346 i‡(
±r
 !
NULL
) {

347 
±r
 += 6;

348 *
±r
 == '\\' || *ptr == '/')Ötr++;

349 
	`°∫˝y
(
exíame
, 
±r
, 255);

350 
exíame
[255] = '\0';

351 
±r
 = 
exíame
;

352 *
±r
 != '\0' && *ptr != '\r' && *ptr != '\n')Ötr++;

353 *
±r
 = '\0';

354 i‡(
	`GëCdromFûe
(
mdú
, 
time
, 
exíame
) == -1)

360 } i‡(
	`GëCdromFûe
(
mdú
, 
time
, "PSX.EXE;1") != -1) {

361 
	`°r˝y
(
exíame
, "PSX.EXE;1");

362 
	`°r˝y
(
CdromId
, "SLUS99999");

366 i‡(
CdromId
[0] == '\0') {

367 
Àn
 = 
	`°æí
(
exíame
);

368 
c
 = 0;

369 
i
 = 0; i < 
Àn
; ++i) {

370 i‡(
exíame
[
i
] =';' || 
c
 >(
CdromId
) - 1)

372 i‡(
	`iß um
(
exíame
[
i
]))

373 
CdromId
[
c
++] = 
exíame
[
i
];

377 i‡(
CdromId
[0] == '\0')

378 
	`°r˝y
(
CdromId
, "SLUS99999");

380 i‡(
C⁄fig
.
PsxAuto
) {

381 i‡(
CdromId
[2] == 'e' || CdromId[2] == 'E')

382 
C⁄fig
.
PsxTy≥
 = 
PSX_TYPE_PAL
;

383 
C⁄fig
.
PsxTy≥
 = 
PSX_TYPE_NTSC
;

386 i‡(
CdromLabñ
[0] == ' ') {

387 
	`°∫˝y
(
CdromLabñ
, 
CdromId
, 9);

389 
	`SysPrötf
(
	`_
("CD-ROM Labñ: %.32s\n"), 
CdromLabñ
);

390 
	`SysPrötf
(
	`_
("CD-ROM ID: %.9s\n"), 
CdromId
);

391 
	`SysPrötf
(
	`_
("CD-ROM EXE Name: %.255s\n"), 
exíame
);

393 
	`BuûdPPFCache
();

396 
	}
}

398 
	$PSXGëFûeTy≥
(
FILE
 *
f
) {

399 
cuºít
;

400 
u8
 
mybuf
[2048];

401 
EXE_HEADER
 *
exe_hdr
;

402 
FILHDR
 *
coff_hdr
;

404 
cuºít
 = 
	`·ñl
(
f
);

405 
	`f£ek
(
f
, 0L, 
SEEK_SET
);

406 
	`‰ód
(
mybuf
, 2048, 1, 
f
);

407 
	`f£ek
(
f
, 
cuºít
, 
SEEK_SET
);

409 
exe_hdr
 = (
EXE_HEADER
 *)
mybuf
;

410 i‡(
	`memcmp
(
exe_hdr
->
id
, "PS-X EXE", 8) == 0)

411  
PSX_EXE
;

413 i‡(
mybuf
[0] == 'C' && mybuf[1] == 'P' && mybuf[2] == 'E')

414  
CPE_EXE
;

416 
coff_hdr
 = (
FILHDR
 *)
mybuf
;

417 i‡(
	`SWAPu16
(
coff_hdr
->
f_magic
) == 0x0162)

418  
COFF_EXE
;

420  
INVALID_EXE
;

421 
	}
}

425 
size_t
 
	$‰ód_to_øm
(*
±r
, 
size_t
 
size
, size_à
nmemb
, 
FILE
 *
°ªam
)

427 *
tmp
;

428 
size_t
 
ªt
 = 0;

430 
tmp
 = 
	`mÆloc
(
size
 * 
nmemb
);

431 i‡(
tmp
) {

432 
ªt
 = 
	`‰ód
(
tmp
, 
size
, 
nmemb
, 
°ªam
);

433 
	`mem˝y
(
±r
, 
tmp
, 
size
 * 
nmemb
);

434 
	`‰ì
(
tmp
);

436  
ªt
;

437 
	}
}

439 
	$Lﬂd
(c⁄° *
ExeP©h
) {

440 
FILE
 *
tmpFûe
;

441 
EXE_HEADER
 
tmpHód
;

442 
ty≥
;

443 
ªtvÆ
 = 0;

444 
u8
 
›code
;

445 
u32
 
£˘i⁄_addªss
, 
£˘i⁄_size
;

446 *
mem
;

448 
	`°∫˝y
(
CdromId
, "SLUS99999", 9);

449 
	`°∫˝y
(
CdromLabñ
, "SLUS_999.99", 11);

451 
tmpFûe
 = 
	`f›í
(
ExeP©h
, "rb");

452 i‡(
tmpFûe
 =
NULL
) {

453 
	`SysPrötf
(
	`_
("Eº‹ o≥nög fûe: %s.\n"), 
ExeP©h
);

454 
ªtvÆ
 = -1;

456 
ty≥
 = 
	`PSXGëFûeTy≥
(
tmpFûe
);

457 
ty≥
) {

458 
PSX_EXE
:

459 
	`‰ód
(&
tmpHód
,(
EXE_HEADER
),1,
tmpFûe
);

460 
£˘i⁄_addªss
 = 
	`SWAP32
(
tmpHód
.
t_addr
);

461 
£˘i⁄_size
 = 
	`SWAP32
(
tmpHód
.
t_size
);

462 
mem
 = 
	`PSXM
(
£˘i⁄_addªss
);

463 i‡(
mem
 !
NULL
) {

464 
	`f£ek
(
tmpFûe
, 0x800, 
SEEK_SET
);

465 
	`‰ód_to_øm
(
mem
, 
£˘i⁄_size
, 1, 
tmpFûe
);

466 
psxCpu
->
	`CÀ¨
(
£˘i⁄_addªss
, 
£˘i⁄_size
 / 4);

468 
	`f˛o£
(
tmpFûe
);

469 
psxRegs
.
pc
 = 
	`SWAP32
(
tmpHód
.
pc0
);

470 
psxRegs
.
GPR
.
n
.
gp
 = 
	`SWAP32
(
tmpHód
.
gp0
);

471 
psxRegs
.
GPR
.
n
.
•
 = 
	`SWAP32
(
tmpHód
.
s_addr
);

472 i‡(
psxRegs
.
GPR
.
n
.
•
 == 0)

473 
psxRegs
.
GPR
.
n
.
•
 = 0x801fff00;

474 
ªtvÆ
 = 0;

476 
CPE_EXE
:

477 
	`f£ek
(
tmpFûe
, 6, 
SEEK_SET
);

479 
	`‰ód
(&
›code
, 1, 1, 
tmpFûe
);

480 
›code
) {

482 
	`‰ód
(&
£˘i⁄_addªss
, 4, 1, 
tmpFûe
);

483 
	`‰ód
(&
£˘i⁄_size
, 4, 1, 
tmpFûe
);

484 
£˘i⁄_addªss
 = 
	`SWAPu32
(section_address);

485 
£˘i⁄_size
 = 
	`SWAPu32
(section_size);

486 #ifde‡
EMU_LOG


487 
	`EMU_LOG
("Lﬂdög %08X byã†‰om %08XÅÿ%08X\n", 
£˘i⁄_size
, 
	`·ñl
(
tmpFûe
), 
£˘i⁄_addªss
);

489 
mem
 = 
	`PSXM
(
£˘i⁄_addªss
);

490 i‡(
mem
 !
NULL
) {

491 
	`‰ód_to_øm
(
mem
, 
£˘i⁄_size
, 1, 
tmpFûe
);

492 
psxCpu
->
	`CÀ¨
(
£˘i⁄_addªss
, 
£˘i⁄_size
 / 4);

496 
	`f£ek
(
tmpFûe
, 2, 
SEEK_CUR
);

497 
	`‰ód
(&
psxRegs
.
pc
, 4, 1, 
tmpFûe
);

498 
psxRegs
.
pc
 = 
	`SWAPu32
(psxRegs.pc);

503 
	`SysPrötf
(
	`_
("Unknow¿CPE opcodê%02xáàposôi⁄ %08x.\n"), 
›code
, 
	`·ñl
(
tmpFûe
) - 1);

504 
ªtvÆ
 = -1;

507 } 
›code
 !0 && 
ªtvÆ
 == 0);

509 
COFF_EXE
:

510 
	`SysPrötf
(
	`_
("COFF filesÇot supported.\n"));

511 
ªtvÆ
 = -1;

513 
INVALID_EXE
:

514 
	`SysPrötf
(
	`_
("This file doesÇotáppearÅo beá valid PSX EXE file.\n"));

515 
	`SysPrötf
(
	`_
("(did you forget -cdfile ?)\n"));

516 
ªtvÆ
 = -1;

521 i‡(
ªtvÆ
 != 0) {

522 
CdromId
[0] = '\0';

523 
CdromLabñ
[0] = '\0';

526  
ªtvÆ
;

527 
	}
}

531 *
	$zlib_›í
(c⁄° *
«me
, c⁄° *
mode
)

533  
	`gz›í
(
«me
, 
mode
);

534 
	}
}

536 
	$zlib_ªad
(*
fûe
, *
buf
, 
u32
 
Àn
)

538  
	`gzªad
(
fûe
, 
buf
, 
Àn
);

539 
	}
}

541 
	$zlib_wrôe
(*
fûe
, c⁄° *
buf
, 
u32
 
Àn
)

543  
	`gzwrôe
(
fûe
, 
buf
, 
Àn
);

544 
	}
}

546 
	$zlib_£ek
(*
fûe
, 
offs
, 
whí˚
)

548  
	`gz£ek
(
fûe
, 
offs
, 
whí˚
);

549 
	}
}

551 
	$zlib_˛o£
(*
fûe
)

553 
	`gz˛o£
(
fûe
);

554 
	}
}

556 
PcsxSaveFuncs
 
	gSaveFuncs
 = {

557 
zlib_›í
, 
zlib_ªad
, 
zlib_wrôe
, 
zlib_£ek
, 
zlib_˛o£


560 c⁄° 
	gPcsxHódî
[32] = "STv4 PCSX v" 
PACKAGE_VERSION
;

564 c⁄° 
u32
 
	gSaveVîsi⁄
 = 0x8b410006;

566 
	$SaveSèã
(c⁄° *
fûe
) {

567 *
f
;

568 
GPUFªeze_t
 *
gpufP
;

569 
SPUFªeze_t
 *
•ufP
;

570 
Size
;

571 *
pMem
;

573 
f
 = 
SaveFuncs
.
	`›í
(
fûe
, "wb");

574 i‡(
f
 =
NULL
)  -1;

576 
	`√w_dy«_bef‹e_ßve
();

578 
SaveFuncs
.
	`wrôe
(
f
, (*)
PcsxHódî
, 32);

579 
SaveFuncs
.
	`wrôe
(
f
, (*)&
SaveVîsi⁄
, (
u32
));

580 
SaveFuncs
.
	`wrôe
(
f
, (*)&
C⁄fig
.
HLE
, (
boﬁón
));

582 
pMem
 = (*)
	`mÆloc
(128 * 96 * 3);

583 i‡(
pMem
 =
NULL
)  -1;

584 
	`GPU_gëS¸ìnPic
(
pMem
);

585 
SaveFuncs
.
	`wrôe
(
f
, 
pMem
, 128 * 96 * 3);

586 
	`‰ì
(
pMem
);

588 i‡(
C⁄fig
.
HLE
)

589 
	`psxBiosFªeze
(1);

591 
SaveFuncs
.
	`wrôe
(
f
, 
psxM
, 0x00200000);

592 
SaveFuncs
.
	`wrôe
(
f
, 
psxR
, 0x00080000);

593 
SaveFuncs
.
	`wrôe
(
f
, 
psxH
, 0x00010000);

594 
SaveFuncs
.
	`wrôe
(
f
, (*)&
psxRegs
, (psxRegs));

597 
gpufP
 = (
GPUFªeze_t
 *)
	`mÆloc
((GPUFreeze_t));

598 
gpufP
->
ulFªezeVîsi⁄
 = 1;

599 
	`GPU_‰ìze
(1, 
gpufP
);

600 
SaveFuncs
.
	`wrôe
(
f
, 
gpufP
, (
GPUFªeze_t
));

601 
	`‰ì
(
gpufP
);

604 
•ufP
 = (
SPUFªeze_t
 *Ë
	`mÆloc
(16);

605 
	`SPU_‰ìze
(2, 
•ufP
, 
psxRegs
.
cy˛e
);

606 
Size
 = 
•ufP
->Size; 
SaveFuncs
.
	`wrôe
(
f
, &Size, 4);

607 
	`‰ì
(
•ufP
);

608 
•ufP
 = (
SPUFªeze_t
 *Ë
	`mÆloc
(
Size
);

609 
	`SPU_‰ìze
(1, 
•ufP
, 
psxRegs
.
cy˛e
);

610 
SaveFuncs
.
	`wrôe
(
f
, 
•ufP
, 
Size
);

611 
	`‰ì
(
•ufP
);

613 
	`sioFªeze
(
f
, 1);

614 
	`cdrFªeze
(
f
, 1);

615 
	`psxHwFªeze
(
f
, 1);

616 
	`psxR˙tFªeze
(
f
, 1);

617 
	`mdecFªeze
(
f
, 1);

618 
	`√w_dy«_‰ìze
(
f
, 1);

620 
SaveFuncs
.
	`˛o£
(
f
);

622 
	`√w_dy«_a·î_ßve
();

625 
	}
}

627 
	$LﬂdSèã
(c⁄° *
fûe
) {

628 *
f
;

629 
GPUFªeze_t
 *
gpufP
;

630 
SPUFªeze_t
 *
•ufP
;

631 
Size
;

632 
hódî
[32];

633 
u32
 
vîsi⁄
;

634 
boﬁón
 
hÀ
;

636 
f
 = 
SaveFuncs
.
	`›í
(
fûe
, "rb");

637 i‡(
f
 =
NULL
)  -1;

639 
SaveFuncs
.
	`ªad
(
f
, 
hódî
, (header));

640 
SaveFuncs
.
	`ªad
(
f
, &
vîsi⁄
, (
u32
));

641 
SaveFuncs
.
	`ªad
(
f
, &
hÀ
, (
boﬁón
));

643 i‡(
	`°∫cmp
("STv4 PCSX", 
hódî
, 9Ë!0 || 
vîsi⁄
 !
SaveVîsi⁄
) {

644 
SaveFuncs
.
	`˛o£
(
f
);

647 
C⁄fig
.
HLE
 = 
hÀ
;

649 i‡(
C⁄fig
.
HLE
)

650 
	`psxBiosInô
();

652 
psxCpu
->
	`Re£t
();

653 
SaveFuncs
.
	`£ek
(
f
, 128 * 96 * 3, 
SEEK_CUR
);

655 
SaveFuncs
.
	`ªad
(
f
, 
psxM
, 0x00200000);

656 
SaveFuncs
.
	`ªad
(
f
, 
psxR
, 0x00080000);

657 
SaveFuncs
.
	`ªad
(
f
, 
psxH
, 0x00010000);

658 
SaveFuncs
.
	`ªad
(
f
, (*)&
psxRegs
, (psxRegs));

660 i‡(
C⁄fig
.
HLE
)

661 
	`psxBiosFªeze
(0);

664 
gpufP
 = (
GPUFªeze_t
 *)
	`mÆloc
((GPUFreeze_t));

665 
SaveFuncs
.
	`ªad
(
f
, 
gpufP
, (
GPUFªeze_t
));

666 
	`GPU_‰ìze
(0, 
gpufP
);

667 
	`‰ì
(
gpufP
);

668 i‡(
HW_GPU_STATUS
 == 0)

669 
HW_GPU_STATUS
 = 
	`GPU_ªadSètus
();

672 
SaveFuncs
.
	`ªad
(
f
, &
Size
, 4);

673 
•ufP
 = (
SPUFªeze_t
 *)
	`mÆloc
(
Size
);

674 
SaveFuncs
.
	`ªad
(
f
, 
•ufP
, 
Size
);

675 
	`SPU_‰ìze
(0, 
•ufP
, 
psxRegs
.
cy˛e
);

676 
	`‰ì
(
•ufP
);

678 
	`sioFªeze
(
f
, 0);

679 
	`cdrFªeze
(
f
, 0);

680 
	`psxHwFªeze
(
f
, 0);

681 
	`psxR˙tFªeze
(
f
, 0);

682 
	`mdecFªeze
(
f
, 0);

683 
	`√w_dy«_‰ìze
(
f
, 0);

685 
SaveFuncs
.
	`˛o£
(
f
);

688 
	}
}

690 
	$CheckSèã
(c⁄° *
fûe
) {

691 *
f
;

692 
hódî
[32];

693 
u32
 
vîsi⁄
;

694 
boﬁón
 
hÀ
;

696 
f
 = 
SaveFuncs
.
	`›í
(
fûe
, "rb");

697 i‡(
f
 =
NULL
)  -1;

699 
SaveFuncs
.
	`ªad
(
f
, 
hódî
, (header));

700 
SaveFuncs
.
	`ªad
(
f
, &
vîsi⁄
, (
u32
));

701 
SaveFuncs
.
	`ªad
(
f
, &
hÀ
, (
boﬁón
));

703 
SaveFuncs
.
	`˛o£
(
f
);

705 i‡(
	`°∫cmp
("STv4 PCSX", 
hódî
, 9Ë!0 || 
vîsi⁄
 !
SaveVîsi⁄
)

709 
	}
}

713 
	$SídPcsxInfo
() {

714 i‡(
NET_ªcvD©a
 =
NULL
 || 
NET_£ndD©a
 == NULL)

717 
	`NET_£ndD©a
(&
C⁄fig
.
Xa
, (C⁄fig.Xa), 
PSE_NET_BLOCKING
);

718 
	`NET_£ndD©a
(&
C⁄fig
.
Sio
, (C⁄fig.Sio), 
PSE_NET_BLOCKING
);

719 
	`NET_£ndD©a
(&
C⁄fig
.
SpuIrq
, (C⁄fig.SpuIrq), 
PSE_NET_BLOCKING
);

720 
	`NET_£ndD©a
(&
C⁄fig
.
RC¡Fix
, (C⁄fig.RC¡Fix), 
PSE_NET_BLOCKING
);

721 
	`NET_£ndD©a
(&
C⁄fig
.
PsxTy≥
, (C⁄fig.PsxTy≥), 
PSE_NET_BLOCKING
);

722 
	`NET_£ndD©a
(&
C⁄fig
.
Cpu
, (C⁄fig.Cpu), 
PSE_NET_BLOCKING
);

725 
	}
}

727 
	$RecvPcsxInfo
() {

728 
tmp
;

730 i‡(
NET_ªcvD©a
 =
NULL
 || 
NET_£ndD©a
 == NULL)

733 
	`NET_ªcvD©a
(&
C⁄fig
.
Xa
, (C⁄fig.Xa), 
PSE_NET_BLOCKING
);

734 
	`NET_ªcvD©a
(&
C⁄fig
.
Sio
, (C⁄fig.Sio), 
PSE_NET_BLOCKING
);

735 
	`NET_ªcvD©a
(&
C⁄fig
.
SpuIrq
, (C⁄fig.SpuIrq), 
PSE_NET_BLOCKING
);

736 
	`NET_ªcvD©a
(&
C⁄fig
.
RC¡Fix
, (C⁄fig.RC¡Fix), 
PSE_NET_BLOCKING
);

737 
	`NET_ªcvD©a
(&
C⁄fig
.
PsxTy≥
, (C⁄fig.PsxTy≥), 
PSE_NET_BLOCKING
);

739 
	`SysUpd©e
();

741 
tmp
 = 
C⁄fig
.
Cpu
;

742 
	`NET_ªcvD©a
(&
C⁄fig
.
Cpu
, (C⁄fig.Cpu), 
PSE_NET_BLOCKING
);

743 i‡(
tmp
 !
C⁄fig
.
Cpu
) {

744 
psxCpu
->
	`Shutdown
();

745 #ifde‡
PSXREC


746 i‡(
C⁄fig
.
Cpu
 =
CPU_INTERPRETER
Ë
psxCpu
 = &
psxI¡
;

747 
psxCpu
 = &
psxRec
;

749 
psxCpu
 = &
psxI¡
;

751 i‡(
psxCpu
->
	`Inô
() == -1) {

752 
	`SysClo£
();  -1;

754 
psxCpu
->
	`Re£t
();

758 
	}
}

761 
	$åim
(*
°r
) {

762 
pos
 = 0;

763 *
de°
 = 
°r
;

766 
°r
[
pos
] <= ' ' && str[pos] > 0)

767 
pos
++;

769 
°r
[
pos
]) {

770 *(
de°
++Ë
°r
[
pos
];

771 
pos
++;

774 *(
de°
--) = '\0';

777 
de°
 >
°r
 && *dest <= ' ' && *dest > 0)

778 *(
de°
--) = '\0';

779 
	}
}

782 
	g¸˘ab
[256] = {

814 
u16
 
	$ˇlcCrc
(
u8
 *
d
, 
Àn
) {

815 
u16
 
¸c
 = 0;

816 
i
;

818 
i
 = 0; i < 
Àn
; i++) {

819 
¸c
 = 
¸˘ab
[(¸¯>> 8Ë^ 
d
[
i
]] ^ (crc << 8);

822  ~
¸c
;

823 
	}
}

	@libpcsxcore/misc.h

20 #i‚de‡
__MISC_H__


21 
	#__MISC_H__


	)

23 #ifde‡
__˝lu•lus


27 
	~"psxcomm⁄.h
"

28 
	~"coff.h
"

29 
	~"∂ugös.h
"

30 
	~"r3000a.h
"

31 
	~"psxmem.h
"

33 #unde‡
s_addr


36 
id
[8];

37 
u32
 
ãxt
;

38 
u32
 
d©a
;

39 
u32
 
pc0
;

40 
u32
 
gp0
;

41 
u32
 
t_addr
;

42 
u32
 
t_size
;

43 
u32
 
d_addr
;

44 
u32
 
d_size
;

45 
u32
 
b_addr
;

46 
u32
 
b_size
;

47 
u32
 
s_addr
;

48 
u32
 
s_size
;

49 
u32
 
SavedSP
;

50 
u32
 
SavedFP
;

51 
u32
 
SavedGP
;

52 
u32
 
SavedRA
;

53 
u32
 
SavedS0
;

54 } 
	tEXE_HEADER
;

56 
CdromId
[10];

57 
CdromLabñ
[33];

59 
LﬂdCdrom
();

60 
LﬂdCdromFûe
(c⁄° *
fûíame
, 
EXE_HEADER
 *
hód
);

61 
CheckCdrom
();

62 
Lﬂd
(c⁄° *
ExeP©h
);

64 
SaveSèã
(c⁄° *
fûe
);

65 
LﬂdSèã
(c⁄° *
fûe
);

66 
CheckSèã
(c⁄° *
fûe
);

68 
SídPcsxInfo
();

69 
RecvPcsxInfo
();

71 
åim
(*
°r
);

72 
u16
 
ˇlcCrc
(
u8
 *
d
, 
Àn
);

74 #ifde‡
__˝lu•lus


	@libpcsxcore/new_dynarec/assem_arm.c

22 #ifde‡
PCSX


23 
	~"../gã.h
"

24 
	#FLAGLESS


	)

25 
	~"../gã.h
"

26 #unde‡
FLAGLESS


27 
	~"../gã_¨m.h
"

28 
	~"../gã_√⁄.h
"

29 
	~"p˙t.h
"

31 
	~"¨m_„©uªs.h
"

33 #i‡!
BASE_ADDR_FIXED


34 
	gå™¶©i⁄_ˇche
[1 << 
TARGET_SIZE_2
] 
__©åibuã__
((
Æig√d
(4096)));

37 #i‚de‡
__MACH__


38 
	#CALLER_SAVE_REGS
 0x100f

	)

40 
	#CALLER_SAVE_REGS
 0x120f

	)

43 
cy˛e_cou¡
;

44 
œ°_cou¡
;

45 
pˇddr
;

46 
≥ndög_ex˚±i⁄
;

47 
bønch_èrgë
;

48 
uöt64_t
 
ªadmem_dw‹d
;

49 #ifde‡
MUPEN64


50 
¥ecomp_ö°r
 
Áke_pc
;

52 *
dy«ªc_loˇl
;

53 
u_öt
 
mem‹y_m≠
[1048576];

54 
u_öt
 
möi_ht
[32][2];

55 
u_öt
 
roundög_modes
[4];

57 
ödúe˘_jump_ödexed
();

58 
ödúe˘_jump
();

59 
do_öãºu±
();

60 
jump_vaddr_r0
();

61 
jump_vaddr_r1
();

62 
jump_vaddr_r2
();

63 
jump_vaddr_r3
();

64 
jump_vaddr_r4
();

65 
jump_vaddr_r5
();

66 
jump_vaddr_r6
();

67 
jump_vaddr_r7
();

68 
jump_vaddr_r8
();

69 
jump_vaddr_r9
();

70 
jump_vaddr_r10
();

71 
jump_vaddr_r12
();

73 c⁄° 
u_öt
 
	gjump_vaddr_ªg
[16] = {

74 ()
jump_vaddr_r0
,

75 ()
jump_vaddr_r1
,

76 ()
jump_vaddr_r2
,

77 ()
jump_vaddr_r3
,

78 ()
jump_vaddr_r4
,

79 ()
jump_vaddr_r5
,

80 ()
jump_vaddr_r6
,

81 ()
jump_vaddr_r7
,

82 ()
jump_vaddr_r8
,

83 ()
jump_vaddr_r9
,

84 ()
jump_vaddr_r10
,

86 ()
jump_vaddr_r12
,

91 
övÆid©e_addr_r0
();

92 
övÆid©e_addr_r1
();

93 
övÆid©e_addr_r2
();

94 
övÆid©e_addr_r3
();

95 
övÆid©e_addr_r4
();

96 
övÆid©e_addr_r5
();

97 
övÆid©e_addr_r6
();

98 
övÆid©e_addr_r7
();

99 
övÆid©e_addr_r8
();

100 
övÆid©e_addr_r9
();

101 
övÆid©e_addr_r10
();

102 
övÆid©e_addr_r12
();

104 c⁄° 
u_öt
 
	gövÆid©e_addr_ªg
[16] = {

105 ()
övÆid©e_addr_r0
,

106 ()
övÆid©e_addr_r1
,

107 ()
övÆid©e_addr_r2
,

108 ()
övÆid©e_addr_r3
,

109 ()
övÆid©e_addr_r4
,

110 ()
övÆid©e_addr_r5
,

111 ()
övÆid©e_addr_r6
,

112 ()
övÆid©e_addr_r7
,

113 ()
övÆid©e_addr_r8
,

114 ()
övÆid©e_addr_r9
,

115 ()
övÆid©e_addr_r10
,

117 ()
övÆid©e_addr_r12
,

122 
	~"Âu.h
"

124 
	g√eds_˛ór_ˇche
[1<<(
TARGET_SIZE_2
-17)];

128 
	$£t_jump_èrgë
(
addr
,
u_öt
 
èrgë
)

130 
u_ch¨
 *
±r
=(u_ch¨ *)
addr
;

131 
u_öt
 *
±r2
=(u_öà*)
±r
;

132 if(
±r
[3]==0xe2) {

133 
	`as£π
((
èrgë
-(
u_öt
)
±r2
-8)<1024);

134 
	`as£π
((
addr
&3)==0);

135 
	`as£π
((
èrgë
&3)==0);

136 *
±r2
=(*±r2&0xFFFFF000)|((
èrgë
-(
u_öt
)ptr2-8)>>2)|0xF00;

139 if(
±r
[3]==0x72) {

141 if((
èrgë
-(
u_öt
)
±r2
-8)<1024) {

142 
	`as£π
((
addr
&3)==0);

143 
	`as£π
((
èrgë
&3)==0);

144 *
±r2
=(*±r2&0xFFFFF000)|((
èrgë
-(
u_öt
)ptr2-8)>>2)|0xF00;

146 if((
èrgë
-(
u_öt
)
±r2
-8)<4096&&!((target-(u_int)ptr2-8)&15)) {

147 
	`as£π
((
addr
&3)==0);

148 
	`as£π
((
èrgë
&3)==0);

149 *
±r2
=(*±r2&0xFFFFF000)|((
èrgë
-(
u_öt
)ptr2-8)>>4)|0xE00;

151 *
±r2
=(0x7A000000)|(((
èrgë
-(
u_öt
)ptr2-8)<<6)>>8);

154 
	`as£π
((
±r
[3]&0x0e)==0xa);

155 *
±r2
=(*±r2&0xFF000000)|(((
èrgë
-(
u_öt
)ptr2-8)<<6)>>8);

157 
	}
}

162 
	$£t_jump_èrgë_fûl¶Ÿ
(
addr
,
u_öt
 
èrgë
,
c›y
)

164 
u_ch¨
 *
±r
=(u_ch¨ *)
addr
;

165 
u_öt
 *
±r2
=(u_öà*)
±r
;

166 
	`as£π
(!
c›y
||
±r2
[-1]==0xe28dd000);

167 if(
±r
[3]==0xe2) {

168 
	`as£π
(!
c›y
);

169 
	`as£π
((
èrgë
-(
u_öt
)
±r2
-8)<4096);

170 *
±r2
=(*±r2&0xFFFFF000)|(
èrgë
-(
u_öt
)ptr2-8);

173 
	`as£π
((
±r
[3]&0x0e)==0xa);

174 
u_öt
 
èrgë_ö¢
=*(u_öà*)
èrgë
;

175 if((
èrgë_ö¢
&0x0e100000)==0) {

176 
c›y
=0;

178 if((
èrgë_ö¢
&0x0c100000)==0x04100000) {

179 
c›y
=0;

181 if(
èrgë_ö¢
&0x08000000) {

182 
c›y
=0;

184 if(
c›y
) {

185 
±r2
[-1]=
èrgë_ö¢
;

186 
èrgë
+=4;

188 *
±r2
=(*±r2&0xFF000000)|(((
èrgë
-(
u_öt
)ptr2-8)<<6)>>8);

190 
	}
}

193 
	$add_lôîÆ
(
addr
,
vÆ
)

195 
	`as£π
(
lôîÆcou¡
<(
lôîÆs
)/(literals[0]));

196 
lôîÆs
[
lôîÆcou¡
][0]=
addr
;

197 
lôîÆs
[
lôîÆcou¡
][1]=
vÆ
;

198 
lôîÆcou¡
++;

199 
	}
}

201 *
	$kûl_poöãr
(*
°ub
)

203 *
±r
=(*)(
°ub
+4);

204 
	`as£π
((*
±r
&0x0ff00000)==0x05900000);

205 
u_öt
 
off£t
=*
±r
&0xfff;

206 **
l_±r
=(*)
±r
+
off£t
+8;

207 *
i_±r
=*
l_±r
;

208 
	`£t_jump_èrgë
(()
i_±r
,()
°ub
);

209  
i_±r
;

210 
	}
}

216 
	$gë_poöãr
(*
°ub
)

219 *
±r
=(*)(
°ub
+4);

220 
	`as£π
((*
±r
&0x0fff0000)==0x059f0000);

221 
u_öt
 
off£t
=*
±r
&0xfff;

222 **
l_±r
=(*)
±r
+
off£t
+8;

223 *
i_±r
=*
l_±r
;

224 
	`as£π
((*
i_±r
&0x0f000000)==0x0a000000);

225  ()
i_±r
+((*i_ptr<<8)>>6)+8;

226 
	}
}

230 
u_öt
 
	$gë_˛ón_addr
(
addr
)

232 *
±r
=(*)
addr
;

233 #i‚de‡
HAVE_ARMV7


234 
±r
+=4;

236 
±r
+=6;

238 if((*
±r
&0xFF000000)!=0xeb000000)Ötr++;

239 
	`as£π
((*
±r
&0xFF000000)==0xeb000000);

240 
±r
++;

241 if((*
±r
&0xFF000000)==0xea000000) {

242  ()
±r
+((*ptr<<8)>>6)+8;

244  (
u_öt
)
±r
;

245 
	}
}

247 
	$vîify_dúty
(
addr
)

249 
u_öt
 *
±r
=(u_öà*)
addr
;

250 #i‚de‡
HAVE_ARMV7


252 
	`as£π
((*
±r
&0xFFFF0000)==0xe59f0000);

253 
u_öt
 
off£t
=*
±r
&0xfff;

254 
u_öt
 *
l_±r
=(*)
±r
+
off£t
+8;

255 
u_öt
 
sour˚
=
l_±r
[0];

256 
u_öt
 
c›y
=
l_±r
[1];

257 
u_öt
 
Àn
=
l_±r
[2];

258 
±r
+=4;

261 
	`as£π
((*
±r
&0xFFF00000)==0xe3000000);

262 
u_öt
 
sour˚
=(
±r
[0]&0xFFF)+((ptr[0]>>4)&0xF000)+((ptr[2]<<16)&0xFFF0000)+((ptr[2]<<12)&0xF0000000);

263 
u_öt
 
c›y
=(
±r
[1]&0xFFF)+((ptr[1]>>4)&0xF000)+((ptr[3]<<16)&0xFFF0000)+((ptr[3]<<12)&0xF0000000);

264 
u_öt
 
Àn
=(
±r
[4]&0xFFF)+((ptr[4]>>4)&0xF000);

265 
±r
+=6;

267 if((*
±r
&0xFF000000)!=0xeb000000)Ötr++;

268 
	`as£π
((*
±r
&0xFF000000)==0xeb000000);

269 #i‚de‡
DISABLE_TLB


270 
u_öt
 
vîifõr
=()
±r
+((signed )(*ptr<<8)>>6)+8;

271 if(
vîifõr
==(
u_öt
)
vîify_code_vm
||vîifõr==(u_öt)
vîify_code_ds
) {

272 
∑ge
=
sour˚
>>12;

273 
m≠_vÆue
=
mem‹y_m≠
[
∑ge
];

274 if(
m≠_vÆue
>=0x80000000)  0;

275 
∑ge
<((
sour˚
+
Àn
-1)>>12)) {

276 if((
mem‹y_m≠
[++
∑ge
]<<2)!=(
m≠_vÆue
<<2))  0;

278 
sour˚
 = sour˚+(
m≠_vÆue
<<2);

282  !
	`memcmp
((*)
sour˚
,(*)
c›y
,
Àn
);

283 
	}
}

287 
	$is˛ón
(
addr
)

289 #i‚de‡
HAVE_ARMV7


290 *
±r
=((
u_öt
 *)
addr
)+4;

292 *
±r
=((
u_öt
 *)
addr
)+6;

294 if((*
±r
&0xFF000000)!=0xeb000000)Ötr++;

295 if((*
±r
&0xFF000000)!=0xeb000000)  1;

296 if(()
±r
+((*±r<<8)>>6)+8==()
vîify_code
)  0;

297 if(()
±r
+((*±r<<8)>>6)+8==()
vîify_code_vm
)  0;

298 if(()
±r
+((*±r<<8)>>6)+8==()
vîify_code_ds
)  0;

300 
	}
}

303 
	$gë_bounds
(
addr
,
u_öt
 *
°¨t
,u_öà*
íd
)

305 
u_öt
 *
±r
=(u_öà*)
addr
;

306 #i‚de‡
HAVE_ARMV7


308 
	`as£π
((*
±r
&0xFFFF0000)==0xe59f0000);

309 
u_öt
 
off£t
=*
±r
&0xfff;

310 
u_öt
 *
l_±r
=(*)
±r
+
off£t
+8;

311 
u_öt
 
sour˚
=
l_±r
[0];

313 
u_öt
 
Àn
=
l_±r
[2];

314 
±r
+=4;

317 
	`as£π
((*
±r
&0xFFF00000)==0xe3000000);

318 
u_öt
 
sour˚
=(
±r
[0]&0xFFF)+((ptr[0]>>4)&0xF000)+((ptr[2]<<16)&0xFFF0000)+((ptr[2]<<12)&0xF0000000);

320 
u_öt
 
Àn
=(
±r
[4]&0xFFF)+((ptr[4]>>4)&0xF000);

321 
±r
+=6;

323 if((*
±r
&0xFF000000)!=0xeb000000)Ötr++;

324 
	`as£π
((*
±r
&0xFF000000)==0xeb000000);

325 #i‚de‡
DISABLE_TLB


326 
u_öt
 
vîifõr
=()
±r
+((signed )(*ptr<<8)>>6)+8;

327 if(
vîifõr
==(
u_öt
)
vîify_code_vm
||vîifõr==(u_öt)
vîify_code_ds
) {

328 if(
mem‹y_m≠
[
sour˚
>>12]>=0x80000000) source = 0;

329 
sour˚
 = sour˚+(
mem‹y_m≠
[source>>12]<<2);

332 *
°¨t
=
sour˚
;

333 *
íd
=
sour˚
+
Àn
;

334 
	}
}

340 
	$Æloc_ªg
(
ªg°©
 *
cur
,
i
,sig√d 
ªg
)

342 
r
,
hr
;

343 
¥e„ºed_ªg
 = (
ªg
&7);

344 if(
ªg
==
CCREG
Ë
¥e„ºed_ªg
=
HOST_CCREG
;

345 if(
ªg
==
PTEMP
||ªg==
FTEMP
Ë
¥e„ºed_ªg
=12;

348 if((
cur
->
u
>>
ªg
)&1) ;

351 
hr
=0;hr<
HOST_REGS
;hr++)

353 if(
cur
->
ªgm≠
[
hr
]==
ªg
) ;

357 
¥e„ºed_ªg
 = 
	`lo›_ªg
(
i
,
ªg
,preferred_reg);

360 if(
cur
->
ªgm≠
[
¥e„ºed_ªg
]==-1) {

361 
cur
->
ªgm≠
[
¥e„ºed_ªg
]=
ªg
;

362 
cur
->
dúty
&=~(1<<
¥e„ºed_ªg
);

363 
cur
->
isc⁄°
&=~(1<<
¥e„ºed_ªg
);

366 
r
=
cur
->
ªgm≠
[
¥e„ºed_ªg
];

367 if(
r
<64&&((
cur
->
u
>>r)&1)) {

368 
cur
->
ªgm≠
[
¥e„ºed_ªg
]=
ªg
;

369 
cur
->
dúty
&=~(1<<
¥e„ºed_ªg
);

370 
cur
->
isc⁄°
&=~(1<<
¥e„ºed_ªg
);

373 if(
r
>=64&&((
cur
->
uu
>>(r&63))&1)) {

374 
cur
->
ªgm≠
[
¥e„ºed_ªg
]=
ªg
;

375 
cur
->
dúty
&=~(1<<
¥e„ºed_ªg
);

376 
cur
->
isc⁄°
&=~(1<<
¥e„ºed_ªg
);

386 
hr
=0;hr<
HOST_REGS
;hr++)

388 
r
=
cur
->
ªgm≠
[
hr
];

389 if(
r
>=0) {

390 if(
r
<64) {

391 if((
cur
->
u
>>
r
)&1Ë{cur->
ªgm≠
[
hr
]=-1;;}

395 if((
cur
->
uu
>>(
r
&63))&1Ë{cur->
ªgm≠
[
hr
]=-1;;}

401 if(
i
>0) {

402 
hr
=0;hr<
HOST_REGS
;hr++) {

403 if(
hr
!=
EXCLUDE_REG
&&
cur
->
ªgm≠
[hr]==-1) {

404 if(
ªgs
[
i
-1].
ªgm≠
[
hr
]!=
rs1
[i-1]&&ªgs[i-1].ªgm≠[hr]!=
rs2
[i-1]&&ªgs[i-1].ªgm≠[hr]!=
π1
[i-1]&&ªgs[i-1].ªgm≠[hr]!=
π2
[i-1]) {

405 
cur
->
ªgm≠
[
hr
]=
ªg
;

406 
cur
->
dúty
&=~(1<<
hr
);

407 
cur
->
isc⁄°
&=~(1<<
hr
);

414 
hr
=0;hr<
HOST_REGS
;hr++) {

415 if(
hr
!=
EXCLUDE_REG
&&
cur
->
ªgm≠
[hr]==-1) {

416 
cur
->
ªgm≠
[
hr
]=
ªg
;

417 
cur
->
dúty
&=~(1<<
hr
);

418 
cur
->
isc⁄°
&=~(1<<
hr
);

425 
u_ch¨
 
h¢
[
MAXREG
+1];

426 
	`mem£t
(
h¢
,10,(hsn));

427 
j
;

428 
	`l¢
(
h¢
,
i
,&
¥e„ºed_ªg
);

431 if(
i
>0) {

434 if(
bt
[
i
]&&
h¢
[
CCREG
]>2) hsn[CCREG]=2;

435 if(
i
>1&&
h¢
[
CCREG
]>2&&(
ôy≥
[i-2]==
RJUMP
||ôy≥[i-2]==
UJUMP
||ôy≥[i-2]==
CJUMP
||ôy≥[i-2]==
SJUMP
||ôy≥[i-2]==
FJUMP
)) hsn[CCREG]=2;

436 
j
=10;j>=3;j--)

439 if(
h¢
[
r
=
cur
->
ªgm≠
[
¥e„ºed_ªg
]&63]==
j
) {

440 
hr
=0;hr<
HOST_REGS
;hr++) {

442 if((
cur
->
ªgm≠
[
hr
]&63)==
r
) {

443 
cur
->
ªgm≠
[
hr
]=-1;

444 
cur
->
dúty
&=~(1<<
hr
);

445 
cur
->
isc⁄°
&=~(1<<
hr
);

448 
cur
->
ªgm≠
[
¥e„ºed_ªg
]=
ªg
;

451 
r
=1;r<=
MAXREG
;r++)

453 if(
h¢
[
r
]==
j
&&r!=
rs1
[
i
-1]&&r!=
rs2
[i-1]&&r!=
π1
[i-1]&&r!=
π2
[i-1]) {

454 
hr
=0;hr<
HOST_REGS
;hr++) {

455 if(
hr
!=
HOST_CCREG
||
j
<
h¢
[
CCREG
]) {

456 if(
cur
->
ªgm≠
[
hr
]==
r
+64) {

457 
cur
->
ªgm≠
[
hr
]=
ªg
;

458 
cur
->
dúty
&=~(1<<
hr
);

459 
cur
->
isc⁄°
&=~(1<<
hr
);

464 
hr
=0;hr<
HOST_REGS
;hr++) {

465 if(
hr
!=
HOST_CCREG
||
j
<
h¢
[
CCREG
]) {

466 if(
cur
->
ªgm≠
[
hr
]==
r
) {

467 
cur
->
ªgm≠
[
hr
]=
ªg
;

468 
cur
->
dúty
&=~(1<<
hr
);

469 
cur
->
isc⁄°
&=~(1<<
hr
);

478 
j
=10;j>=0;j--)

480 
r
=1;r<=
MAXREG
;r++)

482 if(
h¢
[
r
]==
j
) {

483 
hr
=0;hr<
HOST_REGS
;hr++) {

484 if(
cur
->
ªgm≠
[
hr
]==
r
+64) {

485 
cur
->
ªgm≠
[
hr
]=
ªg
;

486 
cur
->
dúty
&=~(1<<
hr
);

487 
cur
->
isc⁄°
&=~(1<<
hr
);

491 
hr
=0;hr<
HOST_REGS
;hr++) {

492 if(
cur
->
ªgm≠
[
hr
]==
r
) {

493 
cur
->
ªgm≠
[
hr
]=
ªg
;

494 
cur
->
dúty
&=~(1<<
hr
);

495 
cur
->
isc⁄°
&=~(1<<
hr
);

502 
	`SysPrötf
("Thi†shouldn'àh≠≥¿◊Œoc_ªg)");
	`exô
(1);

503 
	}
}

505 
	$Æloc_ªg64
(
ªg°©
 *
cur
,
i
,sig√d 
ªg
)

507 
¥e„ºed_ªg
 = 8+(
ªg
&1);

508 
r
,
hr
;

511 
	`Æloc_ªg
(
cur
,
i
,
ªg
);

514 if((
cur
->
uu
>>
ªg
)&1) ;

517 
hr
=0;hr<
HOST_REGS
;hr++)

519 if(
cur
->
ªgm≠
[
hr
]==
ªg
+64) ;

523 
¥e„ºed_ªg
 = 
	`lo›_ªg
(
i
,
ªg
,preferred_reg);

526 if(
cur
->
ªgm≠
[
¥e„ºed_ªg
]==-1) {

527 
cur
->
ªgm≠
[
¥e„ºed_ªg
]=
ªg
|64;

528 
cur
->
dúty
&=~(1<<
¥e„ºed_ªg
);

529 
cur
->
isc⁄°
&=~(1<<
¥e„ºed_ªg
);

532 
r
=
cur
->
ªgm≠
[
¥e„ºed_ªg
];

533 if(
r
<64&&((
cur
->
u
>>r)&1)) {

534 
cur
->
ªgm≠
[
¥e„ºed_ªg
]=
ªg
|64;

535 
cur
->
dúty
&=~(1<<
¥e„ºed_ªg
);

536 
cur
->
isc⁄°
&=~(1<<
¥e„ºed_ªg
);

539 if(
r
>=64&&((
cur
->
uu
>>(r&63))&1)) {

540 
cur
->
ªgm≠
[
¥e„ºed_ªg
]=
ªg
|64;

541 
cur
->
dúty
&=~(1<<
¥e„ºed_ªg
);

542 
cur
->
isc⁄°
&=~(1<<
¥e„ºed_ªg
);

552 
hr
=
HOST_REGS
-1;hr>=0;hr--)

554 
r
=
cur
->
ªgm≠
[
hr
];

555 if(
r
>=0) {

556 if(
r
<64) {

557 if((
cur
->
u
>>
r
)&1Ë{cur->
ªgm≠
[
hr
]=-1;;}

561 if((
cur
->
uu
>>(
r
&63))&1Ë{cur->
ªgm≠
[
hr
]=-1;;}

567 if(
i
>0) {

568 
hr
=0;hr<
HOST_REGS
;hr++) {

569 if(
hr
!=
EXCLUDE_REG
&&
cur
->
ªgm≠
[hr]==-1) {

570 if(
ªgs
[
i
-1].
ªgm≠
[
hr
]!=
rs1
[i-1]&&ªgs[i-1].ªgm≠[hr]!=
rs2
[i-1]&&ªgs[i-1].ªgm≠[hr]!=
π1
[i-1]&&ªgs[i-1].ªgm≠[hr]!=
π2
[i-1]) {

571 
cur
->
ªgm≠
[
hr
]=
ªg
|64;

572 
cur
->
dúty
&=~(1<<
hr
);

573 
cur
->
isc⁄°
&=~(1<<
hr
);

580 
hr
=0;hr<
HOST_REGS
;hr++) {

581 if(
hr
!=
EXCLUDE_REG
&&
cur
->
ªgm≠
[hr]==-1) {

582 
cur
->
ªgm≠
[
hr
]=
ªg
|64;

583 
cur
->
dúty
&=~(1<<
hr
);

584 
cur
->
isc⁄°
&=~(1<<
hr
);

591 
u_ch¨
 
h¢
[
MAXREG
+1];

592 
	`mem£t
(
h¢
,10,(hsn));

593 
j
;

594 
	`l¢
(
h¢
,
i
,&
¥e„ºed_ªg
);

597 if(
i
>0) {

600 if(
bt
[
i
]&&
h¢
[
CCREG
]>2) hsn[CCREG]=2;

601 if(
i
>1&&
h¢
[
CCREG
]>2&&(
ôy≥
[i-2]==
RJUMP
||ôy≥[i-2]==
UJUMP
||ôy≥[i-2]==
CJUMP
||ôy≥[i-2]==
SJUMP
||ôy≥[i-2]==
FJUMP
)) hsn[CCREG]=2;

602 
j
=10;j>=3;j--)

605 if(
h¢
[
r
=
cur
->
ªgm≠
[
¥e„ºed_ªg
]&63]==
j
) {

606 
hr
=0;hr<
HOST_REGS
;hr++) {

608 if((
cur
->
ªgm≠
[
hr
]&63)==
r
) {

609 
cur
->
ªgm≠
[
hr
]=-1;

610 
cur
->
dúty
&=~(1<<
hr
);

611 
cur
->
isc⁄°
&=~(1<<
hr
);

614 
cur
->
ªgm≠
[
¥e„ºed_ªg
]=
ªg
|64;

617 
r
=1;r<=
MAXREG
;r++)

619 if(
h¢
[
r
]==
j
&&r!=
rs1
[
i
-1]&&r!=
rs2
[i-1]&&r!=
π1
[i-1]&&r!=
π2
[i-1]) {

620 
hr
=0;hr<
HOST_REGS
;hr++) {

621 if(
hr
!=
HOST_CCREG
||
j
<
h¢
[
CCREG
]) {

622 if(
cur
->
ªgm≠
[
hr
]==
r
+64) {

623 
cur
->
ªgm≠
[
hr
]=
ªg
|64;

624 
cur
->
dúty
&=~(1<<
hr
);

625 
cur
->
isc⁄°
&=~(1<<
hr
);

630 
hr
=0;hr<
HOST_REGS
;hr++) {

631 if(
hr
!=
HOST_CCREG
||
j
<
h¢
[
CCREG
]) {

632 if(
cur
->
ªgm≠
[
hr
]==
r
) {

633 
cur
->
ªgm≠
[
hr
]=
ªg
|64;

634 
cur
->
dúty
&=~(1<<
hr
);

635 
cur
->
isc⁄°
&=~(1<<
hr
);

644 
j
=10;j>=0;j--)

646 
r
=1;r<=
MAXREG
;r++)

648 if(
h¢
[
r
]==
j
) {

649 
hr
=0;hr<
HOST_REGS
;hr++) {

650 if(
cur
->
ªgm≠
[
hr
]==
r
+64) {

651 
cur
->
ªgm≠
[
hr
]=
ªg
|64;

652 
cur
->
dúty
&=~(1<<
hr
);

653 
cur
->
isc⁄°
&=~(1<<
hr
);

657 
hr
=0;hr<
HOST_REGS
;hr++) {

658 if(
cur
->
ªgm≠
[
hr
]==
r
) {

659 
cur
->
ªgm≠
[
hr
]=
ªg
|64;

660 
cur
->
dúty
&=~(1<<
hr
);

661 
cur
->
isc⁄°
&=~(1<<
hr
);

668 
	`SysPrötf
("Thi†shouldn'àh≠≥n");
	`exô
(1);

669 
	}
}

674 
	$Æloc_ªg_ãmp
(
ªg°©
 *
cur
,
i
,sig√d 
ªg
)

676 
r
,
hr
;

677 
¥e„ºed_ªg
 = -1;

680 
hr
=0;hr<
HOST_REGS
;hr++)

682 if(
hr
!=
EXCLUDE_REG
&&
cur
->
ªgm≠
[hr]==
ªg
) ;

686 
hr
=
HOST_REGS
-1;hr>=0;hr--) {

687 if(
hr
!=
EXCLUDE_REG
&&
cur
->
ªgm≠
[hr]==-1) {

688 
cur
->
ªgm≠
[
hr
]=
ªg
;

689 
cur
->
dúty
&=~(1<<
hr
);

690 
cur
->
isc⁄°
&=~(1<<
hr
);

696 
hr
=
HOST_REGS
-1;hr>=0;hr--)

698 
r
=
cur
->
ªgm≠
[
hr
];

699 if(
r
>=0) {

700 if(
r
<64) {

701 if((
cur
->
u
>>
r
)&1) {

702 if(
i
==0||((
u¬ìded_ªg
[i-1]>>
r
)&1)) {

703 
cur
->
ªgm≠
[
hr
]=
ªg
;

704 
cur
->
dúty
&=~(1<<
hr
);

705 
cur
->
isc⁄°
&=~(1<<
hr
);

712 if((
cur
->
uu
>>(
r
&63))&1) {

713 if(
i
==0||((
u¬ìded_ªg_uµî
[i-1]>>(
r
&63))&1)) {

714 
cur
->
ªgm≠
[
hr
]=
ªg
;

715 
cur
->
dúty
&=~(1<<
hr
);

716 
cur
->
isc⁄°
&=~(1<<
hr
);

728 
u_ch¨
 
h¢
[
MAXREG
+1];

729 
	`mem£t
(
h¢
,10,(hsn));

730 
j
;

731 
	`l¢
(
h¢
,
i
,&
¥e„ºed_ªg
);

733 if(
i
>0) {

736 if(
bt
[
i
]&&
h¢
[
CCREG
]>2) hsn[CCREG]=2;

737 if(
i
>1&&
h¢
[
CCREG
]>2&&(
ôy≥
[i-2]==
RJUMP
||ôy≥[i-2]==
UJUMP
||ôy≥[i-2]==
CJUMP
||ôy≥[i-2]==
SJUMP
||ôy≥[i-2]==
FJUMP
)) hsn[CCREG]=2;

738 
j
=10;j>=3;j--)

740 
r
=1;r<=
MAXREG
;r++)

742 if(
h¢
[
r
]==
j
&&r!=
rs1
[
i
-1]&&r!=
rs2
[i-1]&&r!=
π1
[i-1]&&r!=
π2
[i-1]) {

743 
hr
=0;hr<
HOST_REGS
;hr++) {

744 if(
hr
!=
HOST_CCREG
||
h¢
[
CCREG
]>2) {

745 if(
cur
->
ªgm≠
[
hr
]==
r
+64) {

746 
cur
->
ªgm≠
[
hr
]=
ªg
;

747 
cur
->
dúty
&=~(1<<
hr
);

748 
cur
->
isc⁄°
&=~(1<<
hr
);

753 
hr
=0;hr<
HOST_REGS
;hr++) {

754 if(
hr
!=
HOST_CCREG
||
h¢
[
CCREG
]>2) {

755 if(
cur
->
ªgm≠
[
hr
]==
r
) {

756 
cur
->
ªgm≠
[
hr
]=
ªg
;

757 
cur
->
dúty
&=~(1<<
hr
);

758 
cur
->
isc⁄°
&=~(1<<
hr
);

767 
j
=10;j>=0;j--)

769 
r
=1;r<=
MAXREG
;r++)

771 if(
h¢
[
r
]==
j
) {

772 
hr
=0;hr<
HOST_REGS
;hr++) {

773 if(
cur
->
ªgm≠
[
hr
]==
r
+64) {

774 
cur
->
ªgm≠
[
hr
]=
ªg
;

775 
cur
->
dúty
&=~(1<<
hr
);

776 
cur
->
isc⁄°
&=~(1<<
hr
);

780 
hr
=0;hr<
HOST_REGS
;hr++) {

781 if(
cur
->
ªgm≠
[
hr
]==
r
) {

782 
cur
->
ªgm≠
[
hr
]=
ªg
;

783 
cur
->
dúty
&=~(1<<
hr
);

784 
cur
->
isc⁄°
&=~(1<<
hr
);

791 
	`SysPrötf
("Thi†shouldn'àh≠≥n");
	`exô
(1);

792 
	}
}

794 
	$Æloc_¨m_ªg
(
ªg°©
 *
cur
,
i
,sig√d 
ªg
,
hr
)

796 
n
;

797 
dúty
=0;

800 
n
=0;n<
HOST_REGS
;n++)

802 if(
n
!=
EXCLUDE_REG
&&
cur
->
ªgm≠
[n]==
ªg
) {

803 
dúty
=(
cur
->dúty>>
n
)&1;

804 
cur
->
ªgm≠
[
n
]=-1;

808 
cur
->
ªgm≠
[
hr
]=
ªg
;

809 
cur
->
dúty
&=~(1<<
hr
);

810 
cur
->
dúty
|=dúty<<
hr
;

811 
cur
->
isc⁄°
&=~(1<<
hr
);

812 
	}
}

815 
	$Æloc_cc
(
ªg°©
 *
cur
,
i
)

817 
	`Æloc_¨m_ªg
(
cur
,
i
,
CCREG
,
HOST_CCREG
);

818 
	}
}

825 
	gªg«me
[16][4] = {

843 
	$ouçut_byã
(
u_ch¨
 
byã
)

845 *(
out
++)=
byã
;

846 
	}
}

847 
	$ouçut_modrm
(
u_ch¨
 
mod
,u_ch¨ 
rm
,u_ch¨ 
ext
)

849 
	`as£π
(
mod
<4);

850 
	`as£π
(
rm
<8);

851 
	`as£π
(
ext
<8);

852 
u_ch¨
 
byã
=(
mod
<<6)|(
ext
<<3)|
rm
;

853 *(
out
++)=
byã
;

854 
	}
}

855 
	$ouçut_sib
(
u_ch¨
 
sˇÀ
,u_ch¨ 
ödex
,u_ch¨ 
ba£
)

857 
	`as£π
(
sˇÀ
<4);

858 
	`as£π
(
ödex
<8);

859 
	`as£π
(
ba£
<8);

860 
u_ch¨
 
byã
=(
sˇÀ
<<6)|(
ödex
<<3)|
ba£
;

861 *(
out
++)=
byã
;

862 
	}
}

863 
	$ouçut_w32
(
u_öt
 
w‹d
)

865 *((
u_öt
 *)
out
)=
w‹d
;

866 
out
+=4;

867 
	}
}

868 
u_öt
 
	$rd_∫_rm
(
u_öt
 
rd
, u_öà
∫
, u_öà
rm
)

870 
	`as£π
(
rd
<16);

871 
	`as£π
(
∫
<16);

872 
	`as£π
(
rm
<16);

873 ((
∫
<<16)|(
rd
<<12)|
rm
);

874 
	}
}

875 
u_öt
 
	$rd_∫_imm_shi·
(
u_öt
 
rd
, u_öà
∫
, u_öà
imm
, u_öà
shi·
)

877 
	`as£π
(
rd
<16);

878 
	`as£π
(
∫
<16);

879 
	`as£π
(
imm
<256);

880 
	`as£π
((
shi·
&1)==0);

881 ((
∫
<<16)|(
rd
<<12)|(((32-
shi·
)&30)<<7)|
imm
);

882 
	}
}

883 
u_öt
 
	$gíimm
(
u_öt
 
imm
,u_öà*
ícoded
)

885 *
ícoded
=0;

886 if(
imm
==0)  1;

887 
i
=32;

888 
i
>0)

890 if(
imm
<256) {

891 *
ícoded
=((
i
&30)<<7)|
imm
;

894 
imm
=(imm>>2)|(imm<<30);
i
-=2;

897 
	}
}

898 
	$gíimm_checked
(
u_öt
 
imm
,u_öà*
ícoded
)

900 
u_öt
 
ªt
=
	`gíimm
(
imm
,
ícoded
);

901 
	`as£π
(
ªt
);

902 
	}
}

903 
u_öt
 
	$gíjmp
(
u_öt
 
addr
)

905 
off£t
=
addr
-()
out
-8;

906 if(
off£t
<-33554432||offset>=33554432) {

907 i‡(
addr
>2) {

908 
	`SysPrötf
("gíjmp: ouào‡ønge: %08x\n", 
off£t
);

909 
	`exô
(1);

913  ((
u_öt
)
off£t
>>2)&0xffffff;

914 
	}
}

916 
	$emô_mov
(
rs
,
π
)

918 
	`as£m_debug
("mov %s,%s\n",
ªg«me
[
π
],ªg«me[
rs
]);

919 
	`ouçut_w32
(0xe1a00000|
	`rd_∫_rm
(
π
,0,
rs
));

920 
	}
}

922 
	$emô_movs
(
rs
,
π
)

924 
	`as£m_debug
("mov†%s,%s\n",
ªg«me
[
π
],ªg«me[
rs
]);

925 
	`ouçut_w32
(0xe1b00000|
	`rd_∫_rm
(
π
,0,
rs
));

926 
	}
}

928 
	$emô_add
(
rs1
,
rs2
,
π
)

930 
	`as£m_debug
("add %s,%s,%s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
]);

931 
	`ouçut_w32
(0xe0800000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
));

932 
	}
}

934 
	$emô_adds
(
rs1
,
rs2
,
π
)

936 
	`as£m_debug
("add†%s,%s,%s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
]);

937 
	`ouçut_w32
(0xe0900000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
));

938 
	}
}

940 
	$emô_adcs
(
rs1
,
rs2
,
π
)

942 
	`as£m_debug
("adc†%s,%s,%s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
]);

943 
	`ouçut_w32
(0xe0b00000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
));

944 
	}
}

946 
	$emô_sbc
(
rs1
,
rs2
,
π
)

948 
	`as£m_debug
("sb¯%s,%s,%s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
]);

949 
	`ouçut_w32
(0xe0c00000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
));

950 
	}
}

952 
	$emô_sbcs
(
rs1
,
rs2
,
π
)

954 
	`as£m_debug
("sbc†%s,%s,%s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
]);

955 
	`ouçut_w32
(0xe0d00000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
));

956 
	}
}

958 
	$emô_√g
(
rs
, 
π
)

960 
	`as£m_debug
("rsb %s,%s,#0\n",
ªg«me
[
π
],ªg«me[
rs
]);

961 
	`ouçut_w32
(0xe2600000|
	`rd_∫_rm
(
π
,
rs
,0));

962 
	}
}

964 
	$emô_√gs
(
rs
, 
π
)

966 
	`as£m_debug
("rsb†%s,%s,#0\n",
ªg«me
[
π
],ªg«me[
rs
]);

967 
	`ouçut_w32
(0xe2700000|
	`rd_∫_rm
(
π
,
rs
,0));

968 
	}
}

970 
	$emô_sub
(
rs1
,
rs2
,
π
)

972 
	`as£m_debug
("sub %s,%s,%s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
]);

973 
	`ouçut_w32
(0xe0400000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
));

974 
	}
}

976 
	$emô_subs
(
rs1
,
rs2
,
π
)

978 
	`as£m_debug
("sub†%s,%s,%s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
]);

979 
	`ouçut_w32
(0xe0500000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
));

980 
	}
}

982 
	$emô_zî‹eg
(
π
)

984 
	`as£m_debug
("mov %s,#0\n",
ªg«me
[
π
]);

985 
	`ouçut_w32
(0xe3a00000|
	`rd_∫_rm
(
π
,0,0));

986 
	}
}

988 
	$emô_lﬂdÕ
(
u_öt
 
imm
,u_öà
π
)

990 
	`add_lôîÆ
(()
out
,
imm
);

991 
	`as£m_debug
("ld∏%s,pc+? [=%x]\n",
ªg«me
[
π
],
imm
);

992 
	`ouçut_w32
(0xe5900000|
	`rd_∫_rm
(
π
,15,0));

993 
	}
}

994 
	$emô_movw
(
u_öt
 
imm
,u_öà
π
)

996 
	`as£π
(
imm
<65536);

997 
	`as£m_debug
("movw %s,#%d (0x%x)\n",
ªg«me
[
π
],
imm
,imm);

998 
	`ouçut_w32
(0xe3000000|
	`rd_∫_rm
(
π
,0,0)|(
imm
&0xfff)|((imm<<4)&0xf0000));

999 
	}
}

1000 
	$emô_movt
(
u_öt
 
imm
,u_öà
π
)

1002 
	`as£m_debug
("movà%s,#%d (0x%x)\n",
ªg«me
[
π
],
imm
&0xffff0000,imm&0xffff0000);

1003 
	`ouçut_w32
(0xe3400000|
	`rd_∫_rm
(
π
,0,0)|((
imm
>>16)&0xfff)|((imm>>12)&0xf0000));

1004 
	}
}

1005 
	$emô_movimm
(
u_öt
 
imm
,u_öà
π
)

1007 
u_öt
 
¨mvÆ
;

1008 if(
	`gíimm
(
imm
,&
¨mvÆ
)) {

1009 
	`as£m_debug
("mov %s,#%d\n",
ªg«me
[
π
],
imm
);

1010 
	`ouçut_w32
(0xe3a00000|
	`rd_∫_rm
(
π
,0,0)|
¨mvÆ
);

1011 }if(
	`gíimm
(~
imm
,&
¨mvÆ
)) {

1012 
	`as£m_debug
("mv¿%s,#%d\n",
ªg«me
[
π
],
imm
);

1013 
	`ouçut_w32
(0xe3e00000|
	`rd_∫_rm
(
π
,0,0)|
¨mvÆ
);

1014 }if(
imm
<65536) {

1015 #i‚de‡
HAVE_ARMV7


1016 
	`as£m_debug
("mov %s,#%d\n",
ªg«me
[
π
],
imm
&0xFF00);

1017 
	`ouçut_w32
(0xe3a00000|
	`rd_∫_imm_shi·
(
π
,0,
imm
>>8,8));

1018 
	`as£m_debug
("add %s,%s,#%d\n",
ªg«me
[
π
],ªg«me[π],
imm
&0xFF);

1019 
	`ouçut_w32
(0xe2800000|
	`rd_∫_imm_shi·
(
π
,π,
imm
&0xff,0));

1021 
	`emô_movw
(
imm
,
π
);

1024 #i‚de‡
HAVE_ARMV7


1025 
	`emô_lﬂdÕ
(
imm
,
π
);

1027 
	`emô_movw
(
imm
&0x0000FFFF,
π
);

1028 
	`emô_movt
(
imm
&0xFFFF0000,
π
);

1031 
	}
}

1032 
	$emô_p¸ñaddr
(
u_öt
 
π
)

1034 
	`as£m_debug
("add %s,pc,#?\n",
ªg«me
[
π
]);

1035 
	`ouçut_w32
(0xe2800000|
	`rd_∫_rm
(
π
,15,0));

1036 
	}
}

1038 
	$emô_lﬂdªg
(
r
, 
hr
)

1040 #ifde‡
FORCE32


1041 if(
r
&64) {

1042 
	`SysPrötf
("64bitÜoad in 32bit mode!\n");

1043 
	`as£π
(0);

1047 if((
r
&63)==0)

1048 
	`emô_zî‹eg
(
hr
);

1050 
addr
=(()
ªg
)+((
r
&63)<<
REG_SHIFT
)+((r&64)>>4);

1051 if((
r
&63)==
HIREG
Ë
addr
=()&
hi
+((r&64)>>4);

1052 if((
r
&63)==
LOREG
Ë
addr
=()&
lo
+((r&64)>>4);

1053 if(
r
==
CCREG
Ë
addr
=()&
cy˛e_cou¡
;

1054 if(
r
==
CSREG
Ë
addr
=()&
Sètus
;

1055 if(
r
==
FSREG
Ë
addr
=()&
FCR31
;

1056 if(
r
==
INVCP
Ë
addr
=()&
övc_±r
;

1057 
u_öt
 
off£t
 = 
addr
-(u_öt)&
dy«ªc_loˇl
;

1058 
	`as£π
(
off£t
<4096);

1059 
	`as£m_debug
("ld∏%s,Â+%d\n",
ªg«me
[
hr
],
off£t
);

1060 
	`ouçut_w32
(0xe5900000|
	`rd_∫_rm
(
hr
,
FP
,0)|
off£t
);

1062 
	}
}

1063 
	$emô_°‹îeg
(
r
, 
hr
)

1065 #ifde‡
FORCE32


1066 if(
r
&64) {

1067 
	`SysPrötf
("64bit store in 32bit mode!\n");

1068 
	`as£π
(0);

1072 
addr
=(()
ªg
)+((
r
&63)<<
REG_SHIFT
)+((r&64)>>4);

1073 if((
r
&63)==
HIREG
Ë
addr
=()&
hi
+((r&64)>>4);

1074 if((
r
&63)==
LOREG
Ë
addr
=()&
lo
+((r&64)>>4);

1075 if(
r
==
CCREG
Ë
addr
=()&
cy˛e_cou¡
;

1076 if(
r
==
FSREG
Ë
addr
=()&
FCR31
;

1077 
u_öt
 
off£t
 = 
addr
-(u_öt)&
dy«ªc_loˇl
;

1078 
	`as£π
(
off£t
<4096);

1079 
	`as£m_debug
("°∏%s,Â+%d\n",
ªg«me
[
hr
],
off£t
);

1080 
	`ouçut_w32
(0xe5800000|
	`rd_∫_rm
(
hr
,
FP
,0)|
off£t
);

1081 
	}
}

1083 
	$emô_ã°
(
rs
, 
π
)

1085 
	`as£m_debug
("t° %s,%s\n",
ªg«me
[
rs
],ªg«me[
π
]);

1086 
	`ouçut_w32
(0xe1100000|
	`rd_∫_rm
(0,
rs
,
π
));

1087 
	}
}

1089 
	$emô_ã°imm
(
rs
,
imm
)

1091 
u_öt
 
¨mvÆ
;

1092 
	`as£m_debug
("t° %s,#%d\n",
ªg«me
[
rs
],
imm
);

1093 
	`gíimm_checked
(
imm
,&
¨mvÆ
);

1094 
	`ouçut_w32
(0xe3100000|
	`rd_∫_rm
(0,
rs
,0)|
¨mvÆ
);

1095 
	}
}

1097 
	$emô_ã°eqimm
(
rs
,
imm
)

1099 
u_öt
 
¨mvÆ
;

1100 
	`as£m_debug
("t°eq %s,$%d\n",
ªg«me
[
rs
],
imm
);

1101 
	`gíimm_checked
(
imm
,&
¨mvÆ
);

1102 
	`ouçut_w32
(0x03100000|
	`rd_∫_rm
(0,
rs
,0)|
¨mvÆ
);

1103 
	}
}

1105 
	$emô_nŸ
(
rs
,
π
)

1107 
	`as£m_debug
("mv¿%s,%s\n",
ªg«me
[
π
],ªg«me[
rs
]);

1108 
	`ouçut_w32
(0xe1e00000|
	`rd_∫_rm
(
π
,0,
rs
));

1109 
	}
}

1111 
	$emô_mvnmi
(
rs
,
π
)

1113 
	`as£m_debug
("mvnmò%s,%s\n",
ªg«me
[
π
],ªg«me[
rs
]);

1114 
	`ouçut_w32
(0x41e00000|
	`rd_∫_rm
(
π
,0,
rs
));

1115 
	}
}

1117 
	$emô_™d
(
u_öt
 
rs1
,u_öà
rs2
,u_öà
π
)

1119 
	`as£m_debug
("™d %s,%s,%s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
]);

1120 
	`ouçut_w32
(0xe0000000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
));

1121 
	}
}

1123 
	$emô_‹
(
u_öt
 
rs1
,u_öà
rs2
,u_öà
π
)

1125 
	`as£m_debug
("‹∏%s,%s,%s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
]);

1126 
	`ouçut_w32
(0xe1800000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
));

1127 
	}
}

1128 
	$emô_‹_™d_£t_Êags
(
rs1
,
rs2
,
π
)

1130 
	`as£m_debug
("‹r†%s,%s,%s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
]);

1131 
	`ouçut_w32
(0xe1900000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
));

1132 
	}
}

1134 
	$emô_‹rshl_imm
(
u_öt
 
rs
,u_öà
imm
,u_öà
π
)

1136 
	`as£π
(
rs
<16);

1137 
	`as£π
(
π
<16);

1138 
	`as£π
(
imm
<32);

1139 
	`as£m_debug
("‹∏%s,%s,%s,l¶ #%d\n",
ªg«me
[
π
],ªg«me[π],ªg«me[
rs
],
imm
);

1140 
	`ouçut_w32
(0xe1800000|
	`rd_∫_rm
(
π
,π,
rs
)|(
imm
<<7));

1141 
	}
}

1143 
	$emô_‹rshr_imm
(
u_öt
 
rs
,u_öà
imm
,u_öà
π
)

1145 
	`as£π
(
rs
<16);

1146 
	`as£π
(
π
<16);

1147 
	`as£π
(
imm
<32);

1148 
	`as£m_debug
("‹∏%s,%s,%s,l§ #%d\n",
ªg«me
[
π
],ªg«me[π],ªg«me[
rs
],
imm
);

1149 
	`ouçut_w32
(0xe1800020|
	`rd_∫_rm
(
π
,π,
rs
)|(
imm
<<7));

1150 
	}
}

1152 
	$emô_x‹
(
u_öt
 
rs1
,u_öà
rs2
,u_öà
π
)

1154 
	`as£m_debug
("e‹ %s,%s,%s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
]);

1155 
	`ouçut_w32
(0xe0200000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
));

1156 
	}
}

1158 
	$emô_addimm
(
u_öt
 
rs
,
imm
,u_öà
π
)

1160 
	`as£π
(
rs
<16);

1161 
	`as£π
(
π
<16);

1162 if(
imm
!=0) {

1163 
u_öt
 
¨mvÆ
;

1164 if(
	`gíimm
(
imm
,&
¨mvÆ
)) {

1165 
	`as£m_debug
("add %s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
);

1166 
	`ouçut_w32
(0xe2800000|
	`rd_∫_rm
(
π
,
rs
,0)|
¨mvÆ
);

1167 }if(
	`gíimm
(-
imm
,&
¨mvÆ
)) {

1168 
	`as£m_debug
("sub %s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],-
imm
);

1169 
	`ouçut_w32
(0xe2400000|
	`rd_∫_rm
(
π
,
rs
,0)|
¨mvÆ
);

1170 }if(
imm
<0) {

1171 
	`as£π
(
imm
>-65536);

1172 
	`as£m_debug
("sub %s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],(-
imm
)&0xFF00);

1173 
	`as£m_debug
("sub %s,%s,#%d\n",
ªg«me
[
π
],ªg«me[π],(-
imm
)&0xFF);

1174 
	`ouçut_w32
(0xe2400000|
	`rd_∫_imm_shi·
(
π
,
rs
,(-
imm
)>>8,8));

1175 
	`ouçut_w32
(0xe2400000|
	`rd_∫_imm_shi·
(
π
,π,(-
imm
)&0xff,0));

1177 
	`as£π
(
imm
<65536);

1178 
	`as£m_debug
("add %s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
&0xFF00);

1179 
	`as£m_debug
("add %s,%s,#%d\n",
ªg«me
[
π
],ªg«me[π],
imm
&0xFF);

1180 
	`ouçut_w32
(0xe2800000|
	`rd_∫_imm_shi·
(
π
,
rs
,
imm
>>8,8));

1181 
	`ouçut_w32
(0xe2800000|
	`rd_∫_imm_shi·
(
π
,π,
imm
&0xff,0));

1184 if(
rs
!=
π
Ë
	`emô_mov
(rs,rt);

1185 
	}
}

1187 
	$emô_addimm_™d_£t_Êags
(
imm
,
π
)

1189 
	`as£π
(
imm
>-65536&&imm<65536);

1190 
u_öt
 
¨mvÆ
;

1191 if(
	`gíimm
(
imm
,&
¨mvÆ
)) {

1192 
	`as£m_debug
("add†%s,%s,#%d\n",
ªg«me
[
π
],ªg«me[π],
imm
);

1193 
	`ouçut_w32
(0xe2900000|
	`rd_∫_rm
(
π
,π,0)|
¨mvÆ
);

1194 }if(
	`gíimm
(-
imm
,&
¨mvÆ
)) {

1195 
	`as£m_debug
("sub†%s,%s,#%d\n",
ªg«me
[
π
],ªg«me[π],
imm
);

1196 
	`ouçut_w32
(0xe2500000|
	`rd_∫_rm
(
π
,π,0)|
¨mvÆ
);

1197 }if(
imm
<0) {

1198 
	`as£m_debug
("sub %s,%s,#%d\n",
ªg«me
[
π
],ªg«me[π],(-
imm
)&0xFF00);

1199 
	`as£m_debug
("sub†%s,%s,#%d\n",
ªg«me
[
π
],ªg«me[π],(-
imm
)&0xFF);

1200 
	`ouçut_w32
(0xe2400000|
	`rd_∫_imm_shi·
(
π
,π,(-
imm
)>>8,8));

1201 
	`ouçut_w32
(0xe2500000|
	`rd_∫_imm_shi·
(
π
,π,(-
imm
)&0xff,0));

1203 
	`as£m_debug
("add %s,%s,#%d\n",
ªg«me
[
π
],ªg«me[π],
imm
&0xFF00);

1204 
	`as£m_debug
("add†%s,%s,#%d\n",
ªg«me
[
π
],ªg«me[π],
imm
&0xFF);

1205 
	`ouçut_w32
(0xe2800000|
	`rd_∫_imm_shi·
(
π
,π,
imm
>>8,8));

1206 
	`ouçut_w32
(0xe2900000|
	`rd_∫_imm_shi·
(
π
,π,
imm
&0xff,0));

1208 
	}
}

1209 
	$emô_addimm_no_Êags
(
u_öt
 
imm
,u_öà
π
)

1211 
	`emô_addimm
(
π
,
imm
,rt);

1212 
	}
}

1214 
	$emô_addn›
(
u_öt
 
r
)

1216 
	`as£π
(
r
<16);

1217 
	`as£m_debug
("add %s,%s,#0 (n›)\n",
ªg«me
[
r
],regname[r]);

1218 
	`ouçut_w32
(0xe2800000|
	`rd_∫_rm
(
r
,r,0));

1219 
	}
}

1221 
	$emô_adcimm
(
u_öt
 
rs
,
imm
,u_öà
π
)

1223 
u_öt
 
¨mvÆ
;

1224 
	`gíimm_checked
(
imm
,&
¨mvÆ
);

1225 
	`as£m_debug
("ad¯%s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
);

1226 
	`ouçut_w32
(0xe2a00000|
	`rd_∫_rm
(
π
,
rs
,0)|
¨mvÆ
);

1227 
	}
}

1235 
	$emô_sbbimm
(
imm
,
u_öt
 
π
)

1237 
	`as£m_debug
("sbb $%d,%%%s\n",
imm
,
ªg«me
[
π
]);

1238 
	`as£π
(
π
<8);

1239 if(
imm
<128&&imm>=-128) {

1240 
	`ouçut_byã
(0x83);

1241 
	`ouçut_modrm
(3,
π
,3);

1242 
	`ouçut_byã
(
imm
);

1246 
	`ouçut_byã
(0x81);

1247 
	`ouçut_modrm
(3,
π
,3);

1248 
	`ouçut_w32
(
imm
);

1250 
	}
}

1251 
	$emô_rscimm
(
rs
,
imm
,
u_öt
 
π
)

1253 
	`as£π
(0);

1254 
u_öt
 
¨mvÆ
;

1255 
	`gíimm_checked
(
imm
,&
¨mvÆ
);

1256 
	`as£m_debug
("rs¯%s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
);

1257 
	`ouçut_w32
(0xe2e00000|
	`rd_∫_rm
(
π
,
rs
,0)|
¨mvÆ
);

1258 
	}
}

1260 
	$emô_addimm64_32
(
rsh
,
r¶
,
imm
,
πh
,
πl
)

1264 
	`emô_movimm
(
imm
,
HOST_TEMPREG
);

1265 
	`emô_adds
(
HOST_TEMPREG
,
r¶
,
πl
);

1266 
	`emô_adcimm
(
rsh
,0,
πh
);

1267 
	}
}

1269 
	$emô_sbb
(
rs1
,
rs2
)

1271 
	`as£m_debug
("sbb %%%s,%%%s\n",
ªg«me
[
rs2
],ªg«me[
rs1
]);

1272 
	`ouçut_byã
(0x19);

1273 
	`ouçut_modrm
(3,
rs1
,
rs2
);

1274 
	}
}

1276 
	$emô_™dimm
(
rs
,
imm
,
π
)

1278 
u_öt
 
¨mvÆ
;

1279 if(
imm
==0) {

1280 
	`emô_zî‹eg
(
π
);

1281 }if(
	`gíimm
(
imm
,&
¨mvÆ
)) {

1282 
	`as£m_debug
("™d %s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
);

1283 
	`ouçut_w32
(0xe2000000|
	`rd_∫_rm
(
π
,
rs
,0)|
¨mvÆ
);

1284 }if(
	`gíimm
(~
imm
,&
¨mvÆ
)) {

1285 
	`as£m_debug
("bi¯%s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
);

1286 
	`ouçut_w32
(0xe3c00000|
	`rd_∫_rm
(
π
,
rs
,0)|
¨mvÆ
);

1287 }if(
imm
==65535) {

1288 #i‚de‡
HAVE_ARMV6


1289 
	`as£m_debug
("bi¯%s,%s,#FF000000\n",
ªg«me
[
π
],ªg«me[
rs
]);

1290 
	`ouçut_w32
(0xe3c00000|
	`rd_∫_rm
(
π
,
rs
,0)|0x4FF);

1291 
	`as£m_debug
("bi¯%s,%s,#00FF0000\n",
ªg«me
[
π
],regname[rt]);

1292 
	`ouçut_w32
(0xe3c00000|
	`rd_∫_rm
(
π
,rt,0)|0x8FF);

1294 
	`as£m_debug
("uxth %s,%s\n",
ªg«me
[
π
],ªg«me[
rs
]);

1295 
	`ouçut_w32
(0xe6ff0070|
	`rd_∫_rm
(
π
,0,
rs
));

1298 
	`as£π
(
imm
>0&&imm<65535);

1299 #i‚de‡
HAVE_ARMV7


1300 
	`as£m_debug
("movÑ14,#%d\n",
imm
&0xFF00);

1301 
	`ouçut_w32
(0xe3a00000|
	`rd_∫_imm_shi·
(
HOST_TEMPREG
,0,
imm
>>8,8));

1302 
	`as£m_debug
("addÑ14,r14,#%d\n",
imm
&0xFF);

1303 
	`ouçut_w32
(0xe2800000|
	`rd_∫_imm_shi·
(
HOST_TEMPREG
,HOST_TEMPREG,
imm
&0xff,0));

1305 
	`emô_movw
(
imm
,
HOST_TEMPREG
);

1307 
	`as£m_debug
("™d %s,%s,r14\n",
ªg«me
[
π
],ªg«me[
rs
]);

1308 
	`ouçut_w32
(0xe0000000|
	`rd_∫_rm
(
π
,
rs
,
HOST_TEMPREG
));

1310 
	}
}

1312 
	$emô_‹imm
(
rs
,
imm
,
π
)

1314 
u_öt
 
¨mvÆ
;

1315 if(
imm
==0) {

1316 if(
rs
!=
π
Ë
	`emô_mov
(rs,rt);

1317 }if(
	`gíimm
(
imm
,&
¨mvÆ
)) {

1318 
	`as£m_debug
("‹∏%s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
);

1319 
	`ouçut_w32
(0xe3800000|
	`rd_∫_rm
(
π
,
rs
,0)|
¨mvÆ
);

1321 
	`as£π
(
imm
>0&&imm<65536);

1322 
	`as£m_debug
("‹∏%s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
&0xFF00);

1323 
	`as£m_debug
("‹∏%s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
&0xFF);

1324 
	`ouçut_w32
(0xe3800000|
	`rd_∫_imm_shi·
(
π
,
rs
,
imm
>>8,8));

1325 
	`ouçut_w32
(0xe3800000|
	`rd_∫_imm_shi·
(
π
,π,
imm
&0xff,0));

1327 
	}
}

1329 
	$emô_x‹imm
(
rs
,
imm
,
π
)

1331 
u_öt
 
¨mvÆ
;

1332 if(
imm
==0) {

1333 if(
rs
!=
π
Ë
	`emô_mov
(rs,rt);

1334 }if(
	`gíimm
(
imm
,&
¨mvÆ
)) {

1335 
	`as£m_debug
("e‹ %s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
);

1336 
	`ouçut_w32
(0xe2200000|
	`rd_∫_rm
(
π
,
rs
,0)|
¨mvÆ
);

1338 
	`as£π
(
imm
>0&&imm<65536);

1339 
	`as£m_debug
("e‹ %s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
&0xFF00);

1340 
	`as£m_debug
("e‹ %s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
&0xFF);

1341 
	`ouçut_w32
(0xe2200000|
	`rd_∫_imm_shi·
(
π
,
rs
,
imm
>>8,8));

1342 
	`ouçut_w32
(0xe2200000|
	`rd_∫_imm_shi·
(
π
,π,
imm
&0xff,0));

1344 
	}
}

1346 
	$emô_shlimm
(
rs
,
u_öt
 
imm
,
π
)

1348 
	`as£π
(
imm
>0);

1349 
	`as£π
(
imm
<32);

1351 
	`as£m_debug
("l¶ %s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
);

1352 
	`ouçut_w32
(0xe1a00000|
	`rd_∫_rm
(
π
,0,
rs
)|(
imm
<<7));

1353 
	}
}

1355 
	$emô_l¶s_imm
(
rs
,
imm
,
π
)

1357 
	`as£π
(
imm
>0);

1358 
	`as£π
(
imm
<32);

1359 
	`as£m_debug
("l¶†%s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
);

1360 
	`ouçut_w32
(0xe1b00000|
	`rd_∫_rm
(
π
,0,
rs
)|(
imm
<<7));

1361 
	}
}

1363 
	$emô_l¶∂s_imm
(
rs
,
imm
,
π
)

1365 
	`as£π
(
imm
>0);

1366 
	`as£π
(
imm
<32);

1367 
	`as£m_debug
("l¶∂†%s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
);

1368 
	`ouçut_w32
(0x51b00000|
	`rd_∫_rm
(
π
,0,
rs
)|(
imm
<<7));

1369 
	}
}

1371 
	$emô_shrimm
(
rs
,
u_öt
 
imm
,
π
)

1373 
	`as£π
(
imm
>0);

1374 
	`as£π
(
imm
<32);

1375 
	`as£m_debug
("l§ %s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
);

1376 
	`ouçut_w32
(0xe1a00000|
	`rd_∫_rm
(
π
,0,
rs
)|0x20|(
imm
<<7));

1377 
	}
}

1379 
	$emô_ßrimm
(
rs
,
u_öt
 
imm
,
π
)

1381 
	`as£π
(
imm
>0);

1382 
	`as£π
(
imm
<32);

1383 
	`as£m_debug
("a§ %s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
);

1384 
	`ouçut_w32
(0xe1a00000|
	`rd_∫_rm
(
π
,0,
rs
)|0x40|(
imm
<<7));

1385 
	}
}

1387 
	$emô_r‹imm
(
rs
,
u_öt
 
imm
,
π
)

1389 
	`as£π
(
imm
>0);

1390 
	`as£π
(
imm
<32);

1391 
	`as£m_debug
("r‹ %s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
);

1392 
	`ouçut_w32
(0xe1a00000|
	`rd_∫_rm
(
π
,0,
rs
)|0x60|(
imm
<<7));

1393 
	}
}

1395 
	$emô_shldimm
(
rs
,
rs2
,
u_öt
 
imm
,
π
)

1397 
	`as£m_debug
("shld %%%s,%%%s,%d\n",
ªg«me
[
π
],ªg«me[
rs2
],
imm
);

1398 
	`as£π
(
imm
>0);

1399 
	`as£π
(
imm
<32);

1401 
	`as£m_debug
("l¶ %s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
);

1402 
	`ouçut_w32
(0xe1a00000|
	`rd_∫_rm
(
π
,0,
rs
)|(
imm
<<7));

1403 
	`as£m_debug
("‹∏%s,%s,%s,l§ #%d\n",
ªg«me
[
π
],ªg«me[π],ªg«me[
rs2
],32-
imm
);

1404 
	`ouçut_w32
(0xe1800020|
	`rd_∫_rm
(
π
,π,
rs2
)|((32-
imm
)<<7));

1405 
	}
}

1407 
	$emô_shrdimm
(
rs
,
rs2
,
u_öt
 
imm
,
π
)

1409 
	`as£m_debug
("shrd %%%s,%%%s,%d\n",
ªg«me
[
π
],ªg«me[
rs2
],
imm
);

1410 
	`as£π
(
imm
>0);

1411 
	`as£π
(
imm
<32);

1413 
	`as£m_debug
("l§ %s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
);

1414 
	`ouçut_w32
(0xe1a00020|
	`rd_∫_rm
(
π
,0,
rs
)|(
imm
<<7));

1415 
	`as£m_debug
("‹∏%s,%s,%s,l¶ #%d\n",
ªg«me
[
π
],ªg«me[π],ªg«me[
rs2
],32-
imm
);

1416 
	`ouçut_w32
(0xe1800000|
	`rd_∫_rm
(
π
,π,
rs2
)|((32-
imm
)<<7));

1417 
	}
}

1419 
	$emô_sig√xãnd16
(
rs
,
π
)

1421 #i‚de‡
HAVE_ARMV6


1422 
	`emô_shlimm
(
rs
,16,
π
);

1423 
	`emô_ßrimm
(
π
,16,rt);

1425 
	`as£m_debug
("sxth %s,%s\n",
ªg«me
[
π
],ªg«me[
rs
]);

1426 
	`ouçut_w32
(0xe6bf0070|
	`rd_∫_rm
(
π
,0,
rs
));

1428 
	}
}

1430 
	$emô_sig√xãnd8
(
rs
,
π
)

1432 #i‚de‡
HAVE_ARMV6


1433 
	`emô_shlimm
(
rs
,24,
π
);

1434 
	`emô_ßrimm
(
π
,24,rt);

1436 
	`as£m_debug
("sxtb %s,%s\n",
ªg«me
[
π
],ªg«me[
rs
]);

1437 
	`ouçut_w32
(0xe6af0070|
	`rd_∫_rm
(
π
,0,
rs
));

1439 
	}
}

1441 
	$emô_shl
(
u_öt
 
rs
,u_öà
shi·
,u_öà
π
)

1443 
	`as£π
(
rs
<16);

1444 
	`as£π
(
π
<16);

1445 
	`as£π
(
shi·
<16);

1447 
	`as£m_debug
("l¶ %s,%s,%s\n",
ªg«me
[
π
],ªg«me[
rs
],ªg«me[
shi·
]);

1448 
	`ouçut_w32
(0xe1a00000|
	`rd_∫_rm
(
π
,0,
rs
)|0x10|(
shi·
<<8));

1449 
	}
}

1450 
	$emô_shr
(
u_öt
 
rs
,u_öà
shi·
,u_öà
π
)

1452 
	`as£π
(
rs
<16);

1453 
	`as£π
(
π
<16);

1454 
	`as£π
(
shi·
<16);

1455 
	`as£m_debug
("l§ %s,%s,%s\n",
ªg«me
[
π
],ªg«me[
rs
],ªg«me[
shi·
]);

1456 
	`ouçut_w32
(0xe1a00000|
	`rd_∫_rm
(
π
,0,
rs
)|0x30|(
shi·
<<8));

1457 
	}
}

1458 
	$emô_ßr
(
u_öt
 
rs
,u_öà
shi·
,u_öà
π
)

1460 
	`as£π
(
rs
<16);

1461 
	`as£π
(
π
<16);

1462 
	`as£π
(
shi·
<16);

1463 
	`as£m_debug
("a§ %s,%s,%s\n",
ªg«me
[
π
],ªg«me[
rs
],ªg«me[
shi·
]);

1464 
	`ouçut_w32
(0xe1a00000|
	`rd_∫_rm
(
π
,0,
rs
)|0x50|(
shi·
<<8));

1465 
	}
}

1466 
	$emô_shl˛
(
r
)

1468 
	`as£m_debug
("sh»%%%s,%%˛\n",
ªg«me
[
r
]);

1469 
	`as£π
(0);

1470 
	}
}

1471 
	$emô_shr˛
(
r
)

1473 
	`as£m_debug
("sh∏%%%s,%%˛\n",
ªg«me
[
r
]);

1474 
	`as£π
(0);

1475 
	}
}

1476 
	$emô_ßr˛
(
r
)

1478 
	`as£m_debug
("ß∏%%%s,%%˛\n",
ªg«me
[
r
]);

1479 
	`as£π
(0);

1480 
	}
}

1482 
	$emô_shld˛
(
r1
,
r2
)

1484 
	`as£m_debug
("shld %%%s,%%%s,%%˛\n",
ªg«me
[
r1
],ªg«me[
r2
]);

1485 
	`as£π
(0);

1486 
	}
}

1487 
	$emô_shrd˛
(
r1
,
r2
)

1489 
	`as£m_debug
("shrd %%%s,%%%s,%%˛\n",
ªg«me
[
r1
],ªg«me[
r2
]);

1490 
	`as£π
(0);

1491 
	}
}

1492 
	$emô_‹rshl
(
u_öt
 
rs
,u_öà
shi·
,u_öà
π
)

1494 
	`as£π
(
rs
<16);

1495 
	`as£π
(
π
<16);

1496 
	`as£π
(
shi·
<16);

1497 
	`as£m_debug
("‹∏%s,%s,%s,l¶ %s\n",
ªg«me
[
π
],ªg«me[π],ªg«me[
rs
],ªg«me[
shi·
]);

1498 
	`ouçut_w32
(0xe1800000|
	`rd_∫_rm
(
π
,π,
rs
)|0x10|(
shi·
<<8));

1499 
	}
}

1500 
	$emô_‹rshr
(
u_öt
 
rs
,u_öà
shi·
,u_öà
π
)

1502 
	`as£π
(
rs
<16);

1503 
	`as£π
(
π
<16);

1504 
	`as£π
(
shi·
<16);

1505 
	`as£m_debug
("‹∏%s,%s,%s,l§ %s\n",
ªg«me
[
π
],ªg«me[π],ªg«me[
rs
],ªg«me[
shi·
]);

1506 
	`ouçut_w32
(0xe1800000|
	`rd_∫_rm
(
π
,π,
rs
)|0x30|(
shi·
<<8));

1507 
	}
}

1509 
	$emô_cmpimm
(
rs
,
imm
)

1511 
u_öt
 
¨mvÆ
;

1512 if(
	`gíimm
(
imm
,&
¨mvÆ
)) {

1513 
	`as£m_debug
("cm∞%s,#%d\n",
ªg«me
[
rs
],
imm
);

1514 
	`ouçut_w32
(0xe3500000|
	`rd_∫_rm
(0,
rs
,0)|
¨mvÆ
);

1515 }if(
	`gíimm
(-
imm
,&
¨mvÆ
)) {

1516 
	`as£m_debug
("cm¿%s,#%d\n",
ªg«me
[
rs
],
imm
);

1517 
	`ouçut_w32
(0xe3700000|
	`rd_∫_rm
(0,
rs
,0)|
¨mvÆ
);

1518 }if(
imm
>0) {

1519 
	`as£π
(
imm
<65536);

1520 
	`emô_movimm
(
imm
,
HOST_TEMPREG
);

1521 
	`as£m_debug
("cm∞%s,r14\n",
ªg«me
[
rs
]);

1522 
	`ouçut_w32
(0xe1500000|
	`rd_∫_rm
(0,
rs
,
HOST_TEMPREG
));

1524 
	`as£π
(
imm
>-65536);

1525 
	`emô_movimm
(-
imm
,
HOST_TEMPREG
);

1526 
	`as£m_debug
("cm¿%s,r14\n",
ªg«me
[
rs
]);

1527 
	`ouçut_w32
(0xe1700000|
	`rd_∫_rm
(0,
rs
,
HOST_TEMPREG
));

1529 
	}
}

1531 
	$emô_cmov√
(
u_öt
 *
addr
,
π
)

1533 
	`as£m_debug
("cmov√ %x,%%%s",()
addr
,
ªg«me
[
π
]);

1534 
	`as£π
(0);

1535 
	}
}

1536 
	$emô_cmovl
(
u_öt
 *
addr
,
π
)

1538 
	`as£m_debug
("cmov»%x,%%%s",()
addr
,
ªg«me
[
π
]);

1539 
	`as£π
(0);

1540 
	}
}

1541 
	$emô_cmovs
(
u_öt
 *
addr
,
π
)

1543 
	`as£m_debug
("cmov†%x,%%%s",()
addr
,
ªg«me
[
π
]);

1544 
	`as£π
(0);

1545 
	}
}

1546 
	$emô_cmov√_imm
(
imm
,
π
)

1548 
	`as£m_debug
("mov√ %s,#%d\n",
ªg«me
[
π
],
imm
);

1549 
u_öt
 
¨mvÆ
;

1550 
	`gíimm_checked
(
imm
,&
¨mvÆ
);

1551 
	`ouçut_w32
(0x13a00000|
	`rd_∫_rm
(
π
,0,0)|
¨mvÆ
);

1552 
	}
}

1553 
	$emô_cmovl_imm
(
imm
,
π
)

1555 
	`as£m_debug
("mov… %s,#%d\n",
ªg«me
[
π
],
imm
);

1556 
u_öt
 
¨mvÆ
;

1557 
	`gíimm_checked
(
imm
,&
¨mvÆ
);

1558 
	`ouçut_w32
(0xb3a00000|
	`rd_∫_rm
(
π
,0,0)|
¨mvÆ
);

1559 
	}
}

1560 
	$emô_cmovb_imm
(
imm
,
π
)

1562 
	`as£m_debug
("movc¯%s,#%d\n",
ªg«me
[
π
],
imm
);

1563 
u_öt
 
¨mvÆ
;

1564 
	`gíimm_checked
(
imm
,&
¨mvÆ
);

1565 
	`ouçut_w32
(0x33a00000|
	`rd_∫_rm
(
π
,0,0)|
¨mvÆ
);

1566 
	}
}

1567 
	$emô_cmovs_imm
(
imm
,
π
)

1569 
	`as£m_debug
("movmò%s,#%d\n",
ªg«me
[
π
],
imm
);

1570 
u_öt
 
¨mvÆ
;

1571 
	`gíimm_checked
(
imm
,&
¨mvÆ
);

1572 
	`ouçut_w32
(0x43a00000|
	`rd_∫_rm
(
π
,0,0)|
¨mvÆ
);

1573 
	}
}

1574 
	$emô_cmove_ªg
(
rs
,
π
)

1576 
	`as£m_debug
("moveq %s,%s\n",
ªg«me
[
π
],ªg«me[
rs
]);

1577 
	`ouçut_w32
(0x01a00000|
	`rd_∫_rm
(
π
,0,
rs
));

1578 
	}
}

1579 
	$emô_cmov√_ªg
(
rs
,
π
)

1581 
	`as£m_debug
("mov√ %s,%s\n",
ªg«me
[
π
],ªg«me[
rs
]);

1582 
	`ouçut_w32
(0x11a00000|
	`rd_∫_rm
(
π
,0,
rs
));

1583 
	}
}

1584 
	$emô_cmovl_ªg
(
rs
,
π
)

1586 
	`as£m_debug
("mov… %s,%s\n",
ªg«me
[
π
],ªg«me[
rs
]);

1587 
	`ouçut_w32
(0xb1a00000|
	`rd_∫_rm
(
π
,0,
rs
));

1588 
	}
}

1589 
	$emô_cmovs_ªg
(
rs
,
π
)

1591 
	`as£m_debug
("movmò%s,%s\n",
ªg«me
[
π
],ªg«me[
rs
]);

1592 
	`ouçut_w32
(0x41a00000|
	`rd_∫_rm
(
π
,0,
rs
));

1593 
	}
}

1595 
	$emô_¶ti32
(
rs
,
imm
,
π
)

1597 if(
rs
!=
π
Ë
	`emô_zî‹eg
(rt);

1598 
	`emô_cmpimm
(
rs
,
imm
);

1599 if(
rs
==
π
Ë
	`emô_movimm
(0,rt);

1600 
	`emô_cmovl_imm
(1,
π
);

1601 
	}
}

1602 
	$emô_¶tiu32
(
rs
,
imm
,
π
)

1604 if(
rs
!=
π
Ë
	`emô_zî‹eg
(rt);

1605 
	`emô_cmpimm
(
rs
,
imm
);

1606 if(
rs
==
π
Ë
	`emô_movimm
(0,rt);

1607 
	`emô_cmovb_imm
(1,
π
);

1608 
	}
}

1609 
	$emô_¶ti64_32
(
rsh
,
r¶
,
imm
,
π
)

1611 
	`as£π
(
rsh
!=
π
);

1612 
	`emô_¶ti32
(
r¶
,
imm
,
π
);

1613 if(
imm
>=0)

1615 
	`emô_ã°
(
rsh
,rsh);

1616 
	`emô_cmov√_imm
(0,
π
);

1617 
	`emô_cmovs_imm
(1,
π
);

1621 
	`emô_cmpimm
(
rsh
,-1);

1622 
	`emô_cmov√_imm
(0,
π
);

1623 
	`emô_cmovl_imm
(1,
π
);

1625 
	}
}

1626 
	$emô_¶tiu64_32
(
rsh
,
r¶
,
imm
,
π
)

1628 
	`as£π
(
rsh
!=
π
);

1629 
	`emô_¶tiu32
(
r¶
,
imm
,
π
);

1630 if(
imm
>=0)

1632 
	`emô_ã°
(
rsh
,rsh);

1633 
	`emô_cmov√_imm
(0,
π
);

1637 
	`emô_cmpimm
(
rsh
,-1);

1638 
	`emô_cmov√_imm
(1,
π
);

1640 
	}
}

1642 
	$emô_cmp
(
rs
,
π
)

1644 
	`as£m_debug
("cm∞%s,%s\n",
ªg«me
[
rs
],ªg«me[
π
]);

1645 
	`ouçut_w32
(0xe1500000|
	`rd_∫_rm
(0,
rs
,
π
));

1646 
	}
}

1647 
	$emô_£t_gz32
(
rs
, 
π
)

1650 
	`emô_cmpimm
(
rs
,1);

1651 
	`emô_movimm
(1,
π
);

1652 
	`emô_cmovl_imm
(0,
π
);

1653 
	}
}

1654 
	$emô_£t_nz32
(
rs
, 
π
)

1657 if(
rs
!=
π
Ë
	`emô_movs
(rs,rt);

1658 
	`emô_ã°
(
rs
,rs);

1659 
	`emô_cmov√_imm
(1,
π
);

1660 
	}
}

1661 
	$emô_£t_gz64_32
(
rsh
, 
r¶
, 
π
)

1664 
	`emô_£t_gz32
(
r¶
,
π
);

1665 
	`emô_ã°
(
rsh
,rsh);

1666 
	`emô_cmov√_imm
(1,
π
);

1667 
	`emô_cmovs_imm
(0,
π
);

1668 
	}
}

1669 
	$emô_£t_nz64_32
(
rsh
, 
r¶
, 
π
)

1672 
	`emô_‹_™d_£t_Êags
(
rsh
,
r¶
,
π
);

1673 
	`emô_cmov√_imm
(1,
π
);

1674 
	}
}

1675 
	$emô_£t_if_Àss32
(
rs1
, 
rs2
, 
π
)

1678 if(
rs1
!=
π
&&
rs2
!ÙtË
	`emô_zî‹eg
(rt);

1679 
	`emô_cmp
(
rs1
,
rs2
);

1680 if(
rs1
==
π
||
rs2
=ÙtË
	`emô_movimm
(0,rt);

1681 
	`emô_cmovl_imm
(1,
π
);

1682 
	}
}

1683 
	$emô_£t_if_ˇºy32
(
rs1
, 
rs2
, 
π
)

1686 if(
rs1
!=
π
&&
rs2
!ÙtË
	`emô_zî‹eg
(rt);

1687 
	`emô_cmp
(
rs1
,
rs2
);

1688 if(
rs1
==
π
||
rs2
=ÙtË
	`emô_movimm
(0,rt);

1689 
	`emô_cmovb_imm
(1,
π
);

1690 
	}
}

1691 
	$emô_£t_if_Àss64_32
(
u1
, 
l1
, 
u2
, 
l2
, 
π
)

1694 
	`as£π
(
u1
!=
π
);

1695 
	`as£π
(
u2
!=
π
);

1696 
	`emô_cmp
(
l1
,
l2
);

1697 
	`emô_movimm
(0,
π
);

1698 
	`emô_sbcs
(
u1
,
u2
,
HOST_TEMPREG
);

1699 
	`emô_cmovl_imm
(1,
π
);

1700 
	}
}

1701 
	$emô_£t_if_ˇºy64_32
(
u1
, 
l1
, 
u2
, 
l2
, 
π
)

1704 
	`as£π
(
u1
!=
π
);

1705 
	`as£π
(
u2
!=
π
);

1706 
	`emô_cmp
(
l1
,
l2
);

1707 
	`emô_movimm
(0,
π
);

1708 
	`emô_sbcs
(
u1
,
u2
,
HOST_TEMPREG
);

1709 
	`emô_cmovb_imm
(1,
π
);

1710 
	}
}

1712 
	$emô_ˇŒ
(
a
)

1714 
	`as£m_debug
("b»%x (%x+%x)\n",
a
,()
out
,a-()out-8);

1715 
u_öt
 
off£t
=
	`gíjmp
(
a
);

1716 
	`ouçut_w32
(0xeb000000|
off£t
);

1717 
	}
}

1718 
	$emô_jmp
(
a
)

1720 
	`as£m_debug
("b %x (%x+%x)\n",
a
,()
out
,a-()out-8);

1721 
u_öt
 
off£t
=
	`gíjmp
(
a
);

1722 
	`ouçut_w32
(0xó000000|
off£t
);

1723 
	}
}

1724 
	$emô_j√
(
a
)

1726 
	`as£m_debug
("b√ %x\n",
a
);

1727 
u_öt
 
off£t
=
	`gíjmp
(
a
);

1728 
	`ouçut_w32
(0x1a000000|
off£t
);

1729 
	}
}

1730 
	$emô_jeq
(
a
)

1732 
	`as£m_debug
("beq %x\n",
a
);

1733 
u_öt
 
off£t
=
	`gíjmp
(
a
);

1734 
	`ouçut_w32
(0x0a000000|
off£t
);

1735 
	}
}

1736 
	$emô_js
(
a
)

1738 
	`as£m_debug
("bmò%x\n",
a
);

1739 
u_öt
 
off£t
=
	`gíjmp
(
a
);

1740 
	`ouçut_w32
(0x4a000000|
off£t
);

1741 
	}
}

1742 
	$emô_jns
(
a
)

1744 
	`as£m_debug
("b∂ %x\n",
a
);

1745 
u_öt
 
off£t
=
	`gíjmp
(
a
);

1746 
	`ouçut_w32
(0x5a000000|
off£t
);

1747 
	}
}

1748 
	$emô_jl
(
a
)

1750 
	`as£m_debug
("b… %x\n",
a
);

1751 
u_öt
 
off£t
=
	`gíjmp
(
a
);

1752 
	`ouçut_w32
(0xba000000|
off£t
);

1753 
	}
}

1754 
	$emô_jge
(
a
)

1756 
	`as£m_debug
("bgê%x\n",
a
);

1757 
u_öt
 
off£t
=
	`gíjmp
(
a
);

1758 
	`ouçut_w32
(0xØ000000|
off£t
);

1759 
	}
}

1760 
	$emô_jno
(
a
)

1762 
	`as£m_debug
("bv¯%x\n",
a
);

1763 
u_öt
 
off£t
=
	`gíjmp
(
a
);

1764 
	`ouçut_w32
(0x7a000000|
off£t
);

1765 
	}
}

1766 
	$emô_jc
(
a
)

1768 
	`as£m_debug
("bc†%x\n",
a
);

1769 
u_öt
 
off£t
=
	`gíjmp
(
a
);

1770 
	`ouçut_w32
(0x2a000000|
off£t
);

1771 
	}
}

1772 
	$emô_jcc
(
a
)

1774 
	`as£m_debug
("bc¯%x\n",
a
);

1775 
u_öt
 
off£t
=
	`gíjmp
(
a
);

1776 
	`ouçut_w32
(0x3a000000|
off£t
);

1777 
	}
}

1779 
	$emô_pushimm
(
imm
)

1781 
	`as£m_debug
("push $%x\n",
imm
);

1782 
	`as£π
(0);

1783 
	}
}

1784 
	$emô_pusha
()

1786 
	`as£m_debug
("pusha\n");

1787 
	`as£π
(0);

1788 
	}
}

1789 
	$emô_p›a
()

1791 
	`as£m_debug
("popa\n");

1792 
	`as£π
(0);

1793 
	}
}

1794 
	$emô_pushªg
(
u_öt
 
r
)

1796 
	`as£m_debug
("push %%%s\n",
ªg«me
[
r
]);

1797 
	`as£π
(0);

1798 
	}
}

1799 
	$emô_p›ªg
(
u_öt
 
r
)

1801 
	`as£m_debug
("p› %%%s\n",
ªg«me
[
r
]);

1802 
	`as£π
(0);

1803 
	}
}

1804 
	$emô_ˇŒªg
(
u_öt
 
r
)

1806 
	`as£π
(
r
<15);

1807 
	`as£m_debug
("blx %s\n",
ªg«me
[
r
]);

1808 
	`ouçut_w32
(0xe12fff30|
r
);

1809 
	}
}

1810 
	$emô_jm¥eg
(
u_öt
 
r
)

1812 
	`as£m_debug
("movÖc,%s\n",
ªg«me
[
r
]);

1813 
	`ouçut_w32
(0xe1a00000|
	`rd_∫_rm
(15,0,
r
));

1814 
	}
}

1816 
	$emô_ªadw‹d_ödexed
(
off£t
, 
rs
, 
π
)

1818 
	`as£π
(
off£t
>-4096&&offset<4096);

1819 
	`as£m_debug
("ld∏%s,%s+%d\n",
ªg«me
[
π
],ªg«me[
rs
],
off£t
);

1820 if(
off£t
>=0) {

1821 
	`ouçut_w32
(0xe5900000|
	`rd_∫_rm
(
π
,
rs
,0)|
off£t
);

1823 
	`ouçut_w32
(0xe5100000|
	`rd_∫_rm
(
π
,
rs
,0)|(-
off£t
));

1825 
	}
}

1826 
	$emô_ªadw‹d_duÆödexedx4
(
rs1
, 
rs2
, 
π
)

1828 
	`as£m_debug
("ld∏%s,%s,%†l¶ #2\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
]);

1829 
	`ouçut_w32
(0xe7900000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
)|0x100);

1830 
	}
}

1831 
	$emô_ldrcc_duÆödexed
(
rs1
, 
rs2
, 
π
)

1833 
	`as£m_debug
("ldrc¯%s,%s,%s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
]);

1834 
	`ouçut_w32
(0x37900000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
));

1835 
	}
}

1836 
	$emô_ldrccb_duÆödexed
(
rs1
, 
rs2
, 
π
)

1838 
	`as£m_debug
("ldrccb %s,%s,%s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
]);

1839 
	`ouçut_w32
(0x37d00000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
));

1840 
	}
}

1841 
	$emô_ldrccsb_duÆödexed
(
rs1
, 
rs2
, 
π
)

1843 
	`as£m_debug
("ldrccsb %s,%s,%s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
]);

1844 
	`ouçut_w32
(0x319000d0|
	`rd_∫_rm
(
π
,
rs1
,
rs2
));

1845 
	}
}

1846 
	$emô_ldrcch_duÆödexed
(
rs1
, 
rs2
, 
π
)

1848 
	`as£m_debug
("ldrcch %s,%s,%s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
]);

1849 
	`ouçut_w32
(0x319000b0|
	`rd_∫_rm
(
π
,
rs1
,
rs2
));

1850 
	}
}

1851 
	$emô_ldrccsh_duÆödexed
(
rs1
, 
rs2
, 
π
)

1853 
	`as£m_debug
("ldrccsh %s,%s,%s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
]);

1854 
	`ouçut_w32
(0x319000f0|
	`rd_∫_rm
(
π
,
rs1
,
rs2
));

1855 
	}
}

1856 
	$emô_ªadw‹d_ödexed_éb
(
addr
, 
rs
, 
m≠
, 
π
)

1858 if(
m≠
<0Ë
	`emô_ªadw‹d_ödexed
(
addr
, 
rs
, 
π
);

1860 
	`as£π
(
addr
==0);

1861 
	`emô_ªadw‹d_duÆödexedx4
(
rs
, 
m≠
, 
π
);

1863 
	}
}

1864 
	$emô_ªaddw‹d_ödexed_éb
(
addr
, 
rs
, 
m≠
, 
rh
, 
æ
)

1866 if(
m≠
<0) {

1867 if(
rh
>=0Ë
	`emô_ªadw‹d_ödexed
(
addr
, 
rs
,Ñh);

1868 
	`emô_ªadw‹d_ödexed
(
addr
+4, 
rs
, 
æ
);

1870 
	`as£π
(
rh
!=
rs
);

1871 if(
rh
>=0Ë
	`emô_ªadw‹d_ödexed_éb
(
addr
, 
rs
, 
m≠
,Ñh);

1872 
	`emô_addimm
(
m≠
,1,map);

1873 
	`emô_ªadw‹d_ödexed_éb
(
addr
, 
rs
, 
m≠
, 
æ
);

1875 
	}
}

1876 
	$emô_movsbl_ödexed
(
off£t
, 
rs
, 
π
)

1878 
	`as£π
(
off£t
>-256&&offset<256);

1879 
	`as£m_debug
("ldrsb %s,%s+%d\n",
ªg«me
[
π
],ªg«me[
rs
],
off£t
);

1880 if(
off£t
>=0) {

1881 
	`ouçut_w32
(0xe1d000d0|
	`rd_∫_rm
(
π
,
rs
,0)|((
off£t
<<4)&0xf00)|(offset&0xf));

1883 
	`ouçut_w32
(0xe15000d0|
	`rd_∫_rm
(
π
,
rs
,0)|(((-
off£t
)<<4)&0xf00)|((-offset)&0xf));

1885 
	}
}

1886 
	$emô_movsbl_ödexed_éb
(
addr
, 
rs
, 
m≠
, 
π
)

1888 if(
m≠
<0Ë
	`emô_movsbl_ödexed
(
addr
, 
rs
, 
π
);

1890 if(
addr
==0) {

1891 
	`emô_shlimm
(
m≠
,2,map);

1892 
	`as£m_debug
("ldrsb %s,%s+%s\n",
ªg«me
[
π
],ªg«me[
rs
],ªg«me[
m≠
]);

1893 
	`ouçut_w32
(0xe19000d0|
	`rd_∫_rm
(
π
,
rs
,
m≠
));

1895 
	`as£π
(
addr
>-256&&addr<256);

1896 
	`as£m_debug
("add %s,%s,%s,l¶ #2\n",
ªg«me
[
π
],ªg«me[
rs
],ªg«me[
m≠
]);

1897 
	`ouçut_w32
(0xe0800000|
	`rd_∫_rm
(
π
,
rs
,
m≠
)|(2<<7));

1898 
	`emô_movsbl_ödexed
(
addr
, 
π
,Ñt);

1901 
	}
}

1902 
	$emô_movswl_ödexed
(
off£t
, 
rs
, 
π
)

1904 
	`as£π
(
off£t
>-256&&offset<256);

1905 
	`as£m_debug
("ldrsh %s,%s+%d\n",
ªg«me
[
π
],ªg«me[
rs
],
off£t
);

1906 if(
off£t
>=0) {

1907 
	`ouçut_w32
(0xe1d000f0|
	`rd_∫_rm
(
π
,
rs
,0)|((
off£t
<<4)&0xf00)|(offset&0xf));

1909 
	`ouçut_w32
(0xe15000f0|
	`rd_∫_rm
(
π
,
rs
,0)|(((-
off£t
)<<4)&0xf00)|((-offset)&0xf));

1911 
	}
}

1912 
	$emô_movzbl_ödexed
(
off£t
, 
rs
, 
π
)

1914 
	`as£π
(
off£t
>-4096&&offset<4096);

1915 
	`as£m_debug
("ldrb %s,%s+%d\n",
ªg«me
[
π
],ªg«me[
rs
],
off£t
);

1916 if(
off£t
>=0) {

1917 
	`ouçut_w32
(0xe5d00000|
	`rd_∫_rm
(
π
,
rs
,0)|
off£t
);

1919 
	`ouçut_w32
(0xe5500000|
	`rd_∫_rm
(
π
,
rs
,0)|(-
off£t
));

1921 
	}
}

1922 
	$emô_movzbl_duÆödexedx4
(
rs1
, 
rs2
, 
π
)

1924 
	`as£m_debug
("ldrb %s,%s,%†l¶ #2\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
]);

1925 
	`ouçut_w32
(0xe7d00000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
)|0x100);

1926 
	}
}

1927 
	$emô_movzbl_ödexed_éb
(
addr
, 
rs
, 
m≠
, 
π
)

1929 if(
m≠
<0Ë
	`emô_movzbl_ödexed
(
addr
, 
rs
, 
π
);

1931 if(
addr
==0) {

1932 
	`emô_movzbl_duÆödexedx4
(
rs
, 
m≠
, 
π
);

1934 
	`emô_addimm
(
rs
,
addr
,
π
);

1935 
	`emô_movzbl_duÆödexedx4
(
π
, 
m≠
,Ñt);

1938 
	}
}

1939 
	$emô_movzwl_ödexed
(
off£t
, 
rs
, 
π
)

1941 
	`as£π
(
off£t
>-256&&offset<256);

1942 
	`as£m_debug
("ldrh %s,%s+%d\n",
ªg«me
[
π
],ªg«me[
rs
],
off£t
);

1943 if(
off£t
>=0) {

1944 
	`ouçut_w32
(0xe1d000b0|
	`rd_∫_rm
(
π
,
rs
,0)|((
off£t
<<4)&0xf00)|(offset&0xf));

1946 
	`ouçut_w32
(0xe15000b0|
	`rd_∫_rm
(
π
,
rs
,0)|(((-
off£t
)<<4)&0xf00)|((-offset)&0xf));

1948 
	}
}

1949 
	$emô_ldrd
(
off£t
, 
rs
, 
π
)

1951 
	`as£π
(
off£t
>-256&&offset<256);

1952 
	`as£m_debug
("ldrd %s,%s+%d\n",
ªg«me
[
π
],ªg«me[
rs
],
off£t
);

1953 if(
off£t
>=0) {

1954 
	`ouçut_w32
(0xe1c000d0|
	`rd_∫_rm
(
π
,
rs
,0)|((
off£t
<<4)&0xf00)|(offset&0xf));

1956 
	`ouçut_w32
(0xe14000d0|
	`rd_∫_rm
(
π
,
rs
,0)|(((-
off£t
)<<4)&0xf00)|((-offset)&0xf));

1958 
	}
}

1959 
	$emô_ªadw‹d
(
addr
, 
π
)

1961 
u_öt
 
off£t
 = 
addr
-(u_öt)&
dy«ªc_loˇl
;

1962 
	`as£π
(
off£t
<4096);

1963 
	`as£m_debug
("ld∏%s,Â+%d\n",
ªg«me
[
π
],
off£t
);

1964 
	`ouçut_w32
(0xe5900000|
	`rd_∫_rm
(
π
,
FP
,0)|
off£t
);

1965 
	}
}

1966 
	$emô_movsbl
(
addr
, 
π
)

1968 
u_öt
 
off£t
 = 
addr
-(u_öt)&
dy«ªc_loˇl
;

1969 
	`as£π
(
off£t
<256);

1970 
	`as£m_debug
("ldrsb %s,Â+%d\n",
ªg«me
[
π
],
off£t
);

1971 
	`ouçut_w32
(0xe1d000d0|
	`rd_∫_rm
(
π
,
FP
,0)|((
off£t
<<4)&0xf00)|(offset&0xf));

1972 
	}
}

1973 
	$emô_movswl
(
addr
, 
π
)

1975 
u_öt
 
off£t
 = 
addr
-(u_öt)&
dy«ªc_loˇl
;

1976 
	`as£π
(
off£t
<256);

1977 
	`as£m_debug
("ldrsh %s,Â+%d\n",
ªg«me
[
π
],
off£t
);

1978 
	`ouçut_w32
(0xe1d000f0|
	`rd_∫_rm
(
π
,
FP
,0)|((
off£t
<<4)&0xf00)|(offset&0xf));

1979 
	}
}

1980 
	$emô_movzbl
(
addr
, 
π
)

1982 
u_öt
 
off£t
 = 
addr
-(u_öt)&
dy«ªc_loˇl
;

1983 
	`as£π
(
off£t
<4096);

1984 
	`as£m_debug
("ldrb %s,Â+%d\n",
ªg«me
[
π
],
off£t
);

1985 
	`ouçut_w32
(0xe5d00000|
	`rd_∫_rm
(
π
,
FP
,0)|
off£t
);

1986 
	}
}

1987 
	$emô_movzwl
(
addr
, 
π
)

1989 
u_öt
 
off£t
 = 
addr
-(u_öt)&
dy«ªc_loˇl
;

1990 
	`as£π
(
off£t
<256);

1991 
	`as£m_debug
("ldrh %s,Â+%d\n",
ªg«me
[
π
],
off£t
);

1992 
	`ouçut_w32
(0xe1d000b0|
	`rd_∫_rm
(
π
,
FP
,0)|((
off£t
<<4)&0xf00)|(offset&0xf));

1993 
	}
}

1994 
	$emô_movzwl_ªg
(
rs
, 
π
)

1996 
	`as£m_debug
("movzw»%%%s,%%%s\n",
ªg«me
[
rs
]+1,ªg«me[
π
]);

1997 
	`as£π
(0);

1998 
	}
}

2000 
	$emô_xchg
(
rs
, 
π
)

2002 
	`as£m_debug
("xchg %%%s,%%%s\n",
ªg«me
[
rs
],ªg«me[
π
]);

2003 
	`as£π
(0);

2004 
	}
}

2005 
	$emô_wrôew‹d_ödexed
(
π
, 
off£t
, 
rs
)

2007 
	`as£π
(
off£t
>-4096&&offset<4096);

2008 
	`as£m_debug
("°∏%s,%s+%d\n",
ªg«me
[
π
],ªg«me[
rs
],
off£t
);

2009 if(
off£t
>=0) {

2010 
	`ouçut_w32
(0xe5800000|
	`rd_∫_rm
(
π
,
rs
,0)|
off£t
);

2012 
	`ouçut_w32
(0xe5000000|
	`rd_∫_rm
(
π
,
rs
,0)|(-
off£t
));

2014 
	}
}

2015 
	$emô_wrôew‹d_duÆödexedx4
(
π
, 
rs1
, 
rs2
)

2017 
	`as£m_debug
("°∏%s,%s,%†l¶ #2\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
]);

2018 
	`ouçut_w32
(0xe7800000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
)|0x100);

2019 
	}
}

2020 
	$emô_wrôew‹d_ödexed_éb
(
π
, 
addr
, 
rs
, 
m≠
, 
ãmp
)

2022 if(
m≠
<0Ë
	`emô_wrôew‹d_ödexed
(
π
, 
addr
, 
rs
);

2024 
	`as£π
(
addr
==0);

2025 
	`emô_wrôew‹d_duÆödexedx4
(
π
, 
rs
, 
m≠
);

2027 
	}
}

2028 
	$emô_wrôedw‹d_ödexed_éb
(
rh
, 
æ
, 
addr
, 
rs
, 
m≠
, 
ãmp
)

2030 if(
m≠
<0) {

2031 if(
rh
>=0Ë
	`emô_wrôew‹d_ödexed
‘h, 
addr
, 
rs
);

2032 
	`emô_wrôew‹d_ödexed
(
æ
, 
addr
+4, 
rs
);

2034 
	`as£π
(
rh
>=0);

2035 if(
ãmp
!=
rs
Ë
	`emô_addimm
(
m≠
,1,temp);

2036 
	`emô_wrôew‹d_ödexed_éb
(
rh
, 
addr
, 
rs
, 
m≠
, 
ãmp
);

2037 if(
ãmp
!=
rs
Ë
	`emô_wrôew‹d_ödexed_éb
(
æ
, 
addr
,Ñs,Åemp,Åemp);

2039 
	`emô_addimm
(
rs
,4,rs);

2040 
	`emô_wrôew‹d_ödexed_éb
(
æ
, 
addr
, 
rs
, 
m≠
, 
ãmp
);

2043 
	}
}

2044 
	$emô_wrôehw‹d_ödexed
(
π
, 
off£t
, 
rs
)

2046 
	`as£π
(
off£t
>-256&&offset<256);

2047 
	`as£m_debug
("°rh %s,%s+%d\n",
ªg«me
[
π
],ªg«me[
rs
],
off£t
);

2048 if(
off£t
>=0) {

2049 
	`ouçut_w32
(0xe1c000b0|
	`rd_∫_rm
(
π
,
rs
,0)|((
off£t
<<4)&0xf00)|(offset&0xf));

2051 
	`ouçut_w32
(0xe14000b0|
	`rd_∫_rm
(
π
,
rs
,0)|(((-
off£t
)<<4)&0xf00)|((-offset)&0xf));

2053 
	}
}

2054 
	$emô_wrôebyã_ödexed
(
π
, 
off£t
, 
rs
)

2056 
	`as£π
(
off£t
>-4096&&offset<4096);

2057 
	`as£m_debug
("°rb %s,%s+%d\n",
ªg«me
[
π
],ªg«me[
rs
],
off£t
);

2058 if(
off£t
>=0) {

2059 
	`ouçut_w32
(0xe5c00000|
	`rd_∫_rm
(
π
,
rs
,0)|
off£t
);

2061 
	`ouçut_w32
(0xe5400000|
	`rd_∫_rm
(
π
,
rs
,0)|(-
off£t
));

2063 
	}
}

2064 
	$emô_wrôebyã_duÆödexedx4
(
π
, 
rs1
, 
rs2
)

2066 
	`as£m_debug
("°rb %s,%s,%†l¶ #2\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
]);

2067 
	`ouçut_w32
(0xe7c00000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
)|0x100);

2068 
	}
}

2069 
	$emô_wrôebyã_ödexed_éb
(
π
, 
addr
, 
rs
, 
m≠
, 
ãmp
)

2071 if(
m≠
<0Ë
	`emô_wrôebyã_ödexed
(
π
, 
addr
, 
rs
);

2073 if(
addr
==0) {

2074 
	`emô_wrôebyã_duÆödexedx4
(
π
, 
rs
, 
m≠
);

2076 
	`emô_addimm
(
rs
,
addr
,
ãmp
);

2077 
	`emô_wrôebyã_duÆödexedx4
(
π
, 
ãmp
, 
m≠
);

2080 
	}
}

2081 
	$emô_°rcc_duÆödexed
(
rs1
, 
rs2
, 
π
)

2083 
	`as£m_debug
("°rc¯%s,%s,%s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
]);

2084 
	`ouçut_w32
(0x37800000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
));

2085 
	}
}

2086 
	$emô_°rccb_duÆödexed
(
rs1
, 
rs2
, 
π
)

2088 
	`as£m_debug
("°rccb %s,%s,%s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
]);

2089 
	`ouçut_w32
(0x37c00000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
));

2090 
	}
}

2091 
	$emô_°rcch_duÆödexed
(
rs1
, 
rs2
, 
π
)

2093 
	`as£m_debug
("°rcch %s,%s,%s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
]);

2094 
	`ouçut_w32
(0x318000b0|
	`rd_∫_rm
(
π
,
rs1
,
rs2
));

2095 
	}
}

2096 
	$emô_wrôew‹d
(
π
, 
addr
)

2098 
u_öt
 
off£t
 = 
addr
-(u_öt)&
dy«ªc_loˇl
;

2099 
	`as£π
(
off£t
<4096);

2100 
	`as£m_debug
("°∏%s,Â+%d\n",
ªg«me
[
π
],
off£t
);

2101 
	`ouçut_w32
(0xe5800000|
	`rd_∫_rm
(
π
,
FP
,0)|
off£t
);

2102 
	}
}

2103 
	$emô_wrôehw‹d
(
π
, 
addr
)

2105 
u_öt
 
off£t
 = 
addr
-(u_öt)&
dy«ªc_loˇl
;

2106 
	`as£π
(
off£t
<256);

2107 
	`as£m_debug
("°rh %s,Â+%d\n",
ªg«me
[
π
],
off£t
);

2108 
	`ouçut_w32
(0xe1c000b0|
	`rd_∫_rm
(
π
,
FP
,0)|((
off£t
<<4)&0xf00)|(offset&0xf));

2109 
	}
}

2110 
	$emô_wrôebyã
(
π
, 
addr
)

2112 
u_öt
 
off£t
 = 
addr
-(u_öt)&
dy«ªc_loˇl
;

2113 
	`as£π
(
off£t
<4096);

2114 
	`as£m_debug
("°rb %s,Â+%d\n",
ªg«me
[
π
],
off£t
);

2115 
	`ouçut_w32
(0xe5c00000|
	`rd_∫_rm
(
π
,
FP
,0)|
off£t
);

2116 
	}
}

2117 
	$emô_wrôew‹d_imm
(
imm
, 
addr
)

2119 
	`as£m_debug
("mov»$%x,%x\n",
imm
,
addr
);

2120 
	`as£π
(0);

2121 
	}
}

2122 
	$emô_wrôebyã_imm
(
imm
, 
addr
)

2124 
	`as£m_debug
("movb $%x,%x\n",
imm
,
addr
);

2125 
	`as£π
(0);

2126 
	}
}

2128 
	$emô_mul
(
rs
)

2130 
	`as£m_debug
("mu»%%%s\n",
ªg«me
[
rs
]);

2131 
	`as£π
(0);

2132 
	}
}

2133 
	$emô_imul
(
rs
)

2135 
	`as£m_debug
("imu»%%%s\n",
ªg«me
[
rs
]);

2136 
	`as£π
(0);

2137 
	}
}

2138 
	$emô_umuŒ
(
u_öt
 
rs1
, u_öà
rs2
, u_öà
hi
, u_öà
lo
)

2140 
	`as£m_debug
("umuŒ %s, %s, %s, %s\n",
ªg«me
[
lo
],ªg«me[
hi
],ªg«me[
rs1
],ªg«me[
rs2
]);

2141 
	`as£π
(
rs1
<16);

2142 
	`as£π
(
rs2
<16);

2143 
	`as£π
(
hi
<16);

2144 
	`as£π
(
lo
<16);

2145 
	`ouçut_w32
(0xe0800090|(
hi
<<16)|(
lo
<<12)|(
rs2
<<8)|
rs1
);

2146 
	}
}

2147 
	$emô_smuŒ
(
u_öt
 
rs1
, u_öà
rs2
, u_öà
hi
, u_öà
lo
)

2149 
	`as£m_debug
("smuŒ %s, %s, %s, %s\n",
ªg«me
[
lo
],ªg«me[
hi
],ªg«me[
rs1
],ªg«me[
rs2
]);

2150 
	`as£π
(
rs1
<16);

2151 
	`as£π
(
rs2
<16);

2152 
	`as£π
(
hi
<16);

2153 
	`as£π
(
lo
<16);

2154 
	`ouçut_w32
(0xe0c00090|(
hi
<<16)|(
lo
<<12)|(
rs2
<<8)|
rs1
);

2155 
	}
}

2157 
	$emô_div
(
rs
)

2159 
	`as£m_debug
("div %%%s\n",
ªg«me
[
rs
]);

2160 
	`as£π
(0);

2161 
	}
}

2162 
	$emô_idiv
(
rs
)

2164 
	`as£m_debug
("idiv %%%s\n",
ªg«me
[
rs
]);

2165 
	`as£π
(0);

2166 
	}
}

2167 
	$emô_cdq
()

2169 
	`as£m_debug
("cdq\n");

2170 
	`as£π
(0);

2171 
	}
}

2173 
	$emô_˛z
(
rs
,
π
)

2175 
	`as£m_debug
("˛z %s,%s\n",
ªg«me
[
π
],ªg«me[
rs
]);

2176 
	`ouçut_w32
(0xe16f0f10|
	`rd_∫_rm
(
π
,0,
rs
));

2177 
	}
}

2179 
	$emô_subcs
(
rs1
,
rs2
,
π
)

2181 
	`as£m_debug
("subc†%s,%s,%s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
]);

2182 
	`ouçut_w32
(0x20400000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
));

2183 
	}
}

2185 
	$emô_shrcc_imm
(
rs
,
u_öt
 
imm
,
π
)

2187 
	`as£π
(
imm
>0);

2188 
	`as£π
(
imm
<32);

2189 
	`as£m_debug
("l§c¯%s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
);

2190 
	`ouçut_w32
(0x31a00000|
	`rd_∫_rm
(
π
,0,
rs
)|0x20|(
imm
<<7));

2191 
	}
}

2193 
	$emô_sh∫e_imm
(
rs
,
u_öt
 
imm
,
π
)

2195 
	`as£π
(
imm
>0);

2196 
	`as£π
(
imm
<32);

2197 
	`as£m_debug
("l§√ %s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
);

2198 
	`ouçut_w32
(0x11a00000|
	`rd_∫_rm
(
π
,0,
rs
)|0x20|(
imm
<<7));

2199 
	}
}

2201 
	$emô_√gmi
(
rs
, 
π
)

2203 
	`as£m_debug
("rsbmò%s,%s,#0\n",
ªg«me
[
π
],ªg«me[
rs
]);

2204 
	`ouçut_w32
(0x42600000|
	`rd_∫_rm
(
π
,
rs
,0));

2205 
	}
}

2207 
	$emô_√gsmi
(
rs
, 
π
)

2209 
	`as£m_debug
("rsbsmò%s,%s,#0\n",
ªg«me
[
π
],ªg«me[
rs
]);

2210 
	`ouçut_w32
(0x42700000|
	`rd_∫_rm
(
π
,
rs
,0));

2211 
	}
}

2213 
	$emô_‹ªq
(
u_öt
 
rs1
,u_öà
rs2
,u_öà
π
)

2215 
	`as£m_debug
("‹ªq %s,%s,%s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
]);

2216 
	`ouçut_w32
(0x01800000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
));

2217 
	}
}

2219 
	$emô_‹∫e
(
u_öt
 
rs1
,u_öà
rs2
,u_öà
π
)

2221 
	`as£m_debug
("‹∫ê%s,%s,%s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
]);

2222 
	`ouçut_w32
(0x11800000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
));

2223 
	}
}

2225 
	$emô_bic_l¶
(
u_öt
 
rs1
,u_öà
rs2
,u_öà
shi·
,u_öà
π
)

2227 
	`as£m_debug
("bi¯%s,%s,%†l¶ %s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
],ªg«me[
shi·
]);

2228 
	`ouçut_w32
(0xe1C00000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
)|0x10|(
shi·
<<8));

2229 
	}
}

2231 
	$emô_bi˚q_l¶
(
u_öt
 
rs1
,u_öà
rs2
,u_öà
shi·
,u_öà
π
)

2233 
	`as£m_debug
("bi˚q %s,%s,%†l¶ %s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
],ªg«me[
shi·
]);

2234 
	`ouçut_w32
(0x01C00000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
)|0x10|(
shi·
<<8));

2235 
	}
}

2237 
	$emô_bi˙e_l¶
(
u_öt
 
rs1
,u_öà
rs2
,u_öà
shi·
,u_öà
π
)

2239 
	`as£m_debug
("bi˙ê%s,%s,%†l¶ %s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
],ªg«me[
shi·
]);

2240 
	`ouçut_w32
(0x11C00000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
)|0x10|(
shi·
<<8));

2241 
	}
}

2243 
	$emô_bic_l§
(
u_öt
 
rs1
,u_öà
rs2
,u_öà
shi·
,u_öà
π
)

2245 
	`as£m_debug
("bi¯%s,%s,%†l§ %s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
],ªg«me[
shi·
]);

2246 
	`ouçut_w32
(0xe1C00000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
)|0x30|(
shi·
<<8));

2247 
	}
}

2249 
	$emô_bi˚q_l§
(
u_öt
 
rs1
,u_öà
rs2
,u_öà
shi·
,u_öà
π
)

2251 
	`as£m_debug
("bi˚q %s,%s,%†l§ %s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
],ªg«me[
shi·
]);

2252 
	`ouçut_w32
(0x01C00000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
)|0x30|(
shi·
<<8));

2253 
	}
}

2255 
	$emô_bi˙e_l§
(
u_öt
 
rs1
,u_öà
rs2
,u_öà
shi·
,u_öà
π
)

2257 
	`as£m_debug
("bi˙ê%s,%s,%†l§ %s\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
],ªg«me[
shi·
]);

2258 
	`ouçut_w32
(0x11C00000|
	`rd_∫_rm
(
π
,
rs1
,
rs2
)|0x30|(
shi·
<<8));

2259 
	}
}

2261 
	$emô_ãq
(
rs
, 
π
)

2263 
	`as£m_debug
("ãq %s,%s\n",
ªg«me
[
rs
],ªg«me[
π
]);

2264 
	`ouçut_w32
(0xe1300000|
	`rd_∫_rm
(0,
rs
,
π
));

2265 
	}
}

2267 
	$emô_rsbimm
(
rs
, 
imm
, 
π
)

2269 
u_öt
 
¨mvÆ
;

2270 
	`gíimm_checked
(
imm
,&
¨mvÆ
);

2271 
	`as£m_debug
("rsb %s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
);

2272 
	`ouçut_w32
(0xe2600000|
	`rd_∫_rm
(
π
,
rs
,0)|
¨mvÆ
);

2273 
	}
}

2276 
	$emô_mov2imm_com∑˘
(
imm1
,
u_öt
 
π1
,
imm2
,u_öà
π2
)

2278 
	`emô_movimm
(
imm1
,
π1
);

2279 
u_öt
 
¨mvÆ
;

2280 if(
	`gíimm
(
imm2
-
imm1
,&
¨mvÆ
)) {

2281 
	`as£m_debug
("add %s,%s,#%d\n",
ªg«me
[
π2
],ªg«me[
π1
],
imm2
-
imm1
);

2282 
	`ouçut_w32
(0xe2800000|
	`rd_∫_rm
(
π2
,
π1
,0)|
¨mvÆ
);

2283 }if(
	`gíimm
(
imm1
-
imm2
,&
¨mvÆ
)) {

2284 
	`as£m_debug
("sub %s,%s,#%d\n",
ªg«me
[
π2
],ªg«me[
π1
],
imm1
-
imm2
);

2285 
	`ouçut_w32
(0xe2400000|
	`rd_∫_rm
(
π2
,
π1
,0)|
¨mvÆ
);

2287 
	`emô_movimm
(
imm2
,
π2
);

2288 
	}
}

2292 
	$emô_cmov2imm_e_√_com∑˘
(
imm1
,
imm2
,
u_öt
 
π
)

2294 
u_öt
 
¨mvÆ
;

2295 if(
	`gíimm
(
imm2
-
imm1
,&
¨mvÆ
)) {

2296 
	`emô_movimm
(
imm1
,
π
);

2297 
	`as£m_debug
("add√ %s,%s,#%d\n",
ªg«me
[
π
],ªg«me[π],
imm2
-
imm1
);

2298 
	`ouçut_w32
(0x12800000|
	`rd_∫_rm
(
π
,π,0)|
¨mvÆ
);

2299 }if(
	`gíimm
(
imm1
-
imm2
,&
¨mvÆ
)) {

2300 
	`emô_movimm
(
imm1
,
π
);

2301 
	`as£m_debug
("sub√ %s,%s,#%d\n",
ªg«me
[
π
],ªg«me[π],
imm1
-
imm2
);

2302 
	`ouçut_w32
(0x12400000|
	`rd_∫_rm
(
π
,π,0)|
¨mvÆ
);

2305 #i‚de‡
HAVE_ARMV7


2306 
	`emô_movimm
(
imm1
,
π
);

2307 
	`add_lôîÆ
(()
out
,
imm2
);

2308 
	`as£m_debug
("ld∫ê%s,pc+? [=%x]\n",
ªg«me
[
π
],
imm2
);

2309 
	`ouçut_w32
(0x15900000|
	`rd_∫_rm
(
π
,15,0));

2311 
	`emô_movw
(
imm1
&0x0000FFFF,
π
);

2312 if((
imm1
&0xFFFF)!=(
imm2
&0xFFFF)) {

2313 
	`as£m_debug
("movw√ %s,#%d (0x%x)\n",
ªg«me
[
π
],
imm2
&0xFFFF,imm2&0xFFFF);

2314 
	`ouçut_w32
(0x13000000|
	`rd_∫_rm
(
π
,0,0)|(
imm2
&0xfff)|((imm2<<4)&0xf0000));

2316 
	`emô_movt
(
imm1
&0xFFFF0000,
π
);

2317 if((
imm1
&0xFFFF0000)!=(
imm2
&0xFFFF0000)) {

2318 
	`as£m_debug
("moväê%s,#%d (0x%x)\n",
ªg«me
[
π
],
imm2
&0xffff0000,imm2&0xffff0000);

2319 
	`ouçut_w32
(0x13400000|
	`rd_∫_rm
(
π
,0,0)|((
imm2
>>16)&0xfff)|((imm2>>12)&0xf0000));

2323 
	}
}

2326 
	$emô_cmpmem_ödexed§12_imm
(
addr
,
r
,
imm
)

2328 
	`as£π
(0);

2329 
	}
}

2332 
	$emô_cmpmem_ödexed§12_ªg
(
ba£
,
r
,
imm
)

2334 
	`as£π
(
imm
<128&&imm>=0);

2335 
	`as£π
(
r
>=0&&r<16);

2336 
	`as£m_debug
("ldrbÜr,%s,%†l§ #12\n",
ªg«me
[
ba£
],ªg«me[
r
]);

2337 
	`ouçut_w32
(0xe7d00000|
	`rd_∫_rm
(
HOST_TEMPREG
,
ba£
,
r
)|0x620);

2338 
	`emô_cmpimm
(
HOST_TEMPREG
,
imm
);

2339 
	}
}

2342 
	$emô_add§12
(
rs1
,
rs2
,
π
)

2344 
	`as£m_debug
("add %s,%s,%†l§ #12\n",
ªg«me
[
π
],ªg«me[
rs1
],ªg«me[
rs2
]);

2345 
	`ouçut_w32
(0xe0800620|
	`rd_∫_rm
(
π
,
rs1
,
rs2
));

2346 
	}
}

2348 
	$emô_ˇŒ√
(
a
)

2350 
	`as£m_debug
("b ê%x\n",
a
);

2351 
u_öt
 
off£t
=
	`gíjmp
(
a
);

2352 
	`ouçut_w32
(0x1b000000|
off£t
);

2353 
	}
}

2356 
	$emô_¥e„tch
(*
addr
)

2358 
	`as£m_debug
("¥e„tch %x\n",()
addr
);

2359 
	`ouçut_byã
(0x0F);

2360 
	`ouçut_byã
(0x18);

2361 
	`ouçut_modrm
(0,5,1);

2362 
	`ouçut_w32
(()
addr
);

2363 
	}
}

2364 
	$emô_¥e„tchªg
(
r
)

2366 
	`as£m_debug
("∂d %s\n",
ªg«me
[
r
]);

2367 
	`ouçut_w32
(0xf5d0f000|
	`rd_∫_rm
(0,
r
,0));

2368 
	}
}

2371 
	$emô_ldªq_ödexed
(
rs
, 
u_öt
 
off£t
, 
π
)

2373 
	`as£π
(
off£t
<4096);

2374 
	`as£m_debug
("ldªq %s,[%s, #%d]\n",
ªg«me
[
π
],ªg«me[
rs
],
off£t
);

2375 
	`ouçut_w32
(0x05900000|
	`rd_∫_rm
(
π
,
rs
,0)|
off£t
);

2376 
	}
}

2378 
	$emô_Êds
(
r
,
§
)

2380 
	`as£m_debug
("Êd†s%d,[%s]\n",
§
,
ªg«me
[
r
]);

2381 
	`ouçut_w32
(0xed900a00|((
§
&14)<<11)|((§&1)<<22)|(
r
<<16));

2382 
	}
}

2384 
	$emô_vldr
(
r
,
vr
)

2386 
	`as£m_debug
("vld∏d%d,[%s]\n",
vr
,
ªg«me
[
r
]);

2387 
	`ouçut_w32
(0xed900b00|(
vr
<<12)|(
r
<<16));

2388 
	}
}

2390 
	$emô_f°s
(
§
,
r
)

2392 
	`as£m_debug
("f°†s%d,[%s]\n",
§
,
ªg«me
[
r
]);

2393 
	`ouçut_w32
(0xed800a00|((
§
&14)<<11)|((§&1)<<22)|(
r
<<16));

2394 
	}
}

2396 
	$emô_v°r
(
vr
,
r
)

2398 
	`as£m_debug
("v°∏d%d,[%s]\n",
vr
,
ªg«me
[
r
]);

2399 
	`ouçut_w32
(0xed800b00|(
vr
<<12)|(
r
<<16));

2400 
	}
}

2402 
	$emô_·osizs
(
s
,
d
)

2404 
	`as£m_debug
("·osiz†s%d,s%d\n",
d
,
s
);

2405 
	`ouçut_w32
(0xìbd0ac0|((
d
&14)<<11)|((d&1)<<22)|((
s
&14)>>1)|((s&1)<<5));

2406 
	}
}

2408 
	$emô_·osizd
(
s
,
d
)

2410 
	`as£m_debug
("·osizd s%d,d%d\n",
d
,
s
);

2411 
	`ouçut_w32
(0xìbd0bc0|((
d
&14)<<11)|((d&1)<<22)|(
s
&7));

2412 
	}
}

2414 
	$emô_fsôos
(
s
,
d
)

2416 
	`as£m_debug
("fsôo†s%d,s%d\n",
d
,
s
);

2417 
	`ouçut_w32
(0xìb80ac0|((
d
&14)<<11)|((d&1)<<22)|((
s
&14)>>1)|((s&1)<<5));

2418 
	}
}

2420 
	$emô_fsôod
(
s
,
d
)

2422 
	`as£m_debug
("fsôod d%d,s%d\n",
d
,
s
);

2423 
	`ouçut_w32
(0xìb80bc0|((
d
&7)<<12)|((
s
&14)>>1)|((s&1)<<5));

2424 
	}
}

2426 
	$emô_fcvtds
(
s
,
d
)

2428 
	`as£m_debug
("fcvtd†d%d,s%d\n",
d
,
s
);

2429 
	`ouçut_w32
(0xìb70ac0|((
d
&7)<<12)|((
s
&14)>>1)|((s&1)<<5));

2430 
	}
}

2432 
	$emô_fcvtsd
(
s
,
d
)

2434 
	`as£m_debug
("fcvtsd s%d,d%d\n",
d
,
s
);

2435 
	`ouçut_w32
(0xìb70bc0|((
d
&14)<<11)|((d&1)<<22)|(
s
&7));

2436 
	}
}

2438 
	$emô_fsqπs
(
s
,
d
)

2440 
	`as£m_debug
("fsqπ†d%d,s%d\n",
d
,
s
);

2441 
	`ouçut_w32
(0xìb10ac0|((
d
&14)<<11)|((d&1)<<22)|((
s
&14)>>1)|((s&1)<<5));

2442 
	}
}

2444 
	$emô_fsqπd
(
s
,
d
)

2446 
	`as£m_debug
("fsqπd s%d,d%d\n",
d
,
s
);

2447 
	`ouçut_w32
(0xìb10bc0|((
d
&7)<<12)|(
s
&7));

2448 
	}
}

2450 
	$emô_Ábss
(
s
,
d
)

2452 
	`as£m_debug
("Ábs†d%d,s%d\n",
d
,
s
);

2453 
	`ouçut_w32
(0xìb00ac0|((
d
&14)<<11)|((d&1)<<22)|((
s
&14)>>1)|((s&1)<<5));

2454 
	}
}

2456 
	$emô_Ábsd
(
s
,
d
)

2458 
	`as£m_debug
("Ábsd s%d,d%d\n",
d
,
s
);

2459 
	`ouçut_w32
(0xìb00bc0|((
d
&7)<<12)|(
s
&7));

2460 
	}
}

2462 
	$emô_‚egs
(
s
,
d
)

2464 
	`as£m_debug
("‚eg†d%d,s%d\n",
d
,
s
);

2465 
	`ouçut_w32
(0xìb10a40|((
d
&14)<<11)|((d&1)<<22)|((
s
&14)>>1)|((s&1)<<5));

2466 
	}
}

2468 
	$emô_‚egd
(
s
,
d
)

2470 
	`as£m_debug
("‚egd s%d,d%d\n",
d
,
s
);

2471 
	`ouçut_w32
(0xìb10b40|((
d
&7)<<12)|(
s
&7));

2472 
	}
}

2474 
	$emô_Ádds
(
s1
,
s2
,
d
)

2476 
	`as£m_debug
("Ádd†s%d,s%d,s%d\n",
d
,
s1
,
s2
);

2477 
	`ouçut_w32
(0xì300a00|((
d
&14)<<11)|((d&1)<<22)|((
s1
&14)<<15)|((s1&1)<<7)|((
s2
&14)>>1)|((s2&1)<<5));

2478 
	}
}

2480 
	$emô_Áddd
(
s1
,
s2
,
d
)

2482 
	`as£m_debug
("Áddd d%d,d%d,d%d\n",
d
,
s1
,
s2
);

2483 
	`ouçut_w32
(0xì300b00|((
d
&7)<<12)|((
s1
&7)<<16)|(
s2
&7));

2484 
	}
}

2486 
	$emô_fsubs
(
s1
,
s2
,
d
)

2488 
	`as£m_debug
("fsub†s%d,s%d,s%d\n",
d
,
s1
,
s2
);

2489 
	`ouçut_w32
(0xì300a40|((
d
&14)<<11)|((d&1)<<22)|((
s1
&14)<<15)|((s1&1)<<7)|((
s2
&14)>>1)|((s2&1)<<5));

2490 
	}
}

2492 
	$emô_fsubd
(
s1
,
s2
,
d
)

2494 
	`as£m_debug
("fsubd d%d,d%d,d%d\n",
d
,
s1
,
s2
);

2495 
	`ouçut_w32
(0xì300b40|((
d
&7)<<12)|((
s1
&7)<<16)|(
s2
&7));

2496 
	}
}

2498 
	$emô_fmuls
(
s1
,
s2
,
d
)

2500 
	`as£m_debug
("fmul†s%d,s%d,s%d\n",
d
,
s1
,
s2
);

2501 
	`ouçut_w32
(0xì200a00|((
d
&14)<<11)|((d&1)<<22)|((
s1
&14)<<15)|((s1&1)<<7)|((
s2
&14)>>1)|((s2&1)<<5));

2502 
	}
}

2504 
	$emô_fmuld
(
s1
,
s2
,
d
)

2506 
	`as£m_debug
("fmuld d%d,d%d,d%d\n",
d
,
s1
,
s2
);

2507 
	`ouçut_w32
(0xì200b00|((
d
&7)<<12)|((
s1
&7)<<16)|(
s2
&7));

2508 
	}
}

2510 
	$emô_fdivs
(
s1
,
s2
,
d
)

2512 
	`as£m_debug
("fdiv†s%d,s%d,s%d\n",
d
,
s1
,
s2
);

2513 
	`ouçut_w32
(0xì800a00|((
d
&14)<<11)|((d&1)<<22)|((
s1
&14)<<15)|((s1&1)<<7)|((
s2
&14)>>1)|((s2&1)<<5));

2514 
	}
}

2516 
	$emô_fdivd
(
s1
,
s2
,
d
)

2518 
	`as£m_debug
("fdivd d%d,d%d,d%d\n",
d
,
s1
,
s2
);

2519 
	`ouçut_w32
(0xì800b00|((
d
&7)<<12)|((
s1
&7)<<16)|(
s2
&7));

2520 
	}
}

2522 
	$emô_fcmps
(
x
,
y
)

2524 
	`as£m_debug
("fcmps s14, s15\n");

2525 
	`ouçut_w32
(0xeeb47a67);

2526 
	}
}

2528 
	$emô_fcmpd
(
x
,
y
)

2530 
	`as£m_debug
("fcmpd d6, d7\n");

2531 
	`ouçut_w32
(0xeeb46b47);

2532 
	}
}

2534 
	$emô_fm°©
()

2536 
	`as£m_debug
("fmstat\n");

2537 
	`ouçut_w32
(0xeef1fa10);

2538 
	}
}

2540 
	$emô_bi˙e_imm
(
rs
,
imm
,
π
)

2542 
u_öt
 
¨mvÆ
;

2543 
	`gíimm_checked
(
imm
,&
¨mvÆ
);

2544 
	`as£m_debug
("bi˙ê%s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
);

2545 
	`ouçut_w32
(0x13c00000|
	`rd_∫_rm
(
π
,
rs
,0)|
¨mvÆ
);

2546 
	}
}

2548 
	$emô_biccs_imm
(
rs
,
imm
,
π
)

2550 
u_öt
 
¨mvÆ
;

2551 
	`gíimm_checked
(
imm
,&
¨mvÆ
);

2552 
	`as£m_debug
("bicc†%s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
);

2553 
	`ouçut_w32
(0x23c00000|
	`rd_∫_rm
(
π
,
rs
,0)|
¨mvÆ
);

2554 
	}
}

2556 
	$emô_bicvc_imm
(
rs
,
imm
,
π
)

2558 
u_öt
 
¨mvÆ
;

2559 
	`gíimm_checked
(
imm
,&
¨mvÆ
);

2560 
	`as£m_debug
("bicv¯%s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
);

2561 
	`ouçut_w32
(0x73c00000|
	`rd_∫_rm
(
π
,
rs
,0)|
¨mvÆ
);

2562 
	}
}

2564 
	$emô_bichi_imm
(
rs
,
imm
,
π
)

2566 
u_öt
 
¨mvÆ
;

2567 
	`gíimm_checked
(
imm
,&
¨mvÆ
);

2568 
	`as£m_debug
("bichò%s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
);

2569 
	`ouçut_w32
(0x83c00000|
	`rd_∫_rm
(
π
,
rs
,0)|
¨mvÆ
);

2570 
	}
}

2572 
	$emô_‹rvs_imm
(
rs
,
imm
,
π
)

2574 
u_öt
 
¨mvÆ
;

2575 
	`gíimm_checked
(
imm
,&
¨mvÆ
);

2576 
	`as£m_debug
("‹rv†%s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
);

2577 
	`ouçut_w32
(0x63800000|
	`rd_∫_rm
(
π
,
rs
,0)|
¨mvÆ
);

2578 
	}
}

2580 
	$emô_‹∫e_imm
(
rs
,
imm
,
π
)

2582 
u_öt
 
¨mvÆ
;

2583 
	`gíimm_checked
(
imm
,&
¨mvÆ
);

2584 
	`as£m_debug
("‹∫ê%s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
);

2585 
	`ouçut_w32
(0x13800000|
	`rd_∫_rm
(
π
,
rs
,0)|
¨mvÆ
);

2586 
	}
}

2588 
	$emô_™d√_imm
(
rs
,
imm
,
π
)

2590 
u_öt
 
¨mvÆ
;

2591 
	`gíimm_checked
(
imm
,&
¨mvÆ
);

2592 
	`as£m_debug
("™d√ %s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
);

2593 
	`ouçut_w32
(0x12000000|
	`rd_∫_rm
(
π
,
rs
,0)|
¨mvÆ
);

2594 
	}
}

2596 
	$emô_add∂_imm
(
rs
,
imm
,
π
)

2598 
u_öt
 
¨mvÆ
;

2599 
	`gíimm_checked
(
imm
,&
¨mvÆ
);

2600 
	`as£m_debug
("add∂ %s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
imm
);

2601 
	`ouçut_w32
(0x52800000|
	`rd_∫_rm
(
π
,
rs
,0)|
¨mvÆ
);

2602 
	}
}

2604 
	$emô_jno_u∆ikñy
(
a
)

2607 
	`as£m_debug
("addv¯pc,pc,#? (%x)\n", 
a
);

2608 
	`ouçut_w32
(0x72800000|
	`rd_∫_rm
(15,15,0));

2609 
	}
}

2611 
	$ßve_ªgs_Æl
(
u_öt
 
ªgli°
)

2613 
i
;

2614 if(!
ªgli°
) ;

2615 
	`as£m_debug
("stmia fp,{");

2616 
i
=0;i<16;i++)

2617 if(
ªgli°
&(1<<
i
))

2618 
	`as£m_debug
("r%d,",
i
);

2619 
	`as£m_debug
("}\n");

2620 
	`ouçut_w32
(0xe88b0000|
ªgli°
);

2621 
	}
}

2622 
	$ª°‹e_ªgs_Æl
(
u_öt
 
ªgli°
)

2624 
i
;

2625 if(!
ªgli°
) ;

2626 
	`as£m_debug
("ldmia fp,{");

2627 
i
=0;i<16;i++)

2628 if(
ªgli°
&(1<<
i
))

2629 
	`as£m_debug
("r%d,",
i
);

2630 
	`as£m_debug
("}\n");

2631 
	`ouçut_w32
(0xe89b0000|
ªgli°
);

2632 
	}
}

2634 
	$ßve_ªgs
(
u_öt
 
ªgli°
)

2636 
ªgli°
&=
CALLER_SAVE_REGS
;

2637 
	`ßve_ªgs_Æl
(
ªgli°
);

2638 
	}
}

2640 
	$ª°‹e_ªgs
(
u_öt
 
ªgli°
)

2642 
ªgli°
&=
CALLER_SAVE_REGS
;

2643 
	`ª°‹e_ªgs_Æl
(
ªgli°
);

2644 
	}
}

2647 
	$wb_c⁄°s
(sig√d 
i_ªgm≠
[],
uöt64_t
 
i_is32
,
u_öt
 
i_dúty
,
i
)

2649 
hr
;

2650 
hr
=0;hr<
HOST_REGS
;hr++) {

2651 if(
hr
!=
EXCLUDE_REG
&&
i_ªgm≠
[hr]>=0&&((
i_dúty
>>hr)&1)) {

2652 if(((
ªgs
[
i
].
isc⁄°
>>
hr
)&1)&&
i_ªgm≠
[hr]>0) {

2653 if(
i_ªgm≠
[
hr
]<64 || !((
i_is32
>>(i_regmap[hr]&63))&1) ) {

2654 
vÆue
=
c⁄°m≠
[
i
][
hr
];

2655 if(
vÆue
==0) {

2656 
	`emô_zî‹eg
(
HOST_TEMPREG
);

2659 
	`emô_movimm
(
vÆue
,
HOST_TEMPREG
);

2661 
	`emô_°‹îeg
(
i_ªgm≠
[
hr
],
HOST_TEMPREG
);

2662 #i‚de‡
FORCE32


2663 if((
i_is32
>>
i_ªgm≠
[
hr
])&1) {

2664 if(
vÆue
!=-1&&vÆue!=0Ë
	`emô_ßrimm
(
HOST_TEMPREG
,31,HOST_TEMPREG);

2665 
	`emô_°‹îeg
(
i_ªgm≠
[
hr
]|64,
HOST_TEMPREG
);

2672 
	}
}

2676 
	$lôîÆ_poﬁ
(
n
)

2678 if(!
lôîÆcou¡
) ;

2679 if(
n
) {

2680 if(()
out
-
lôîÆs
[0][0]<4096-
n
) ;

2682 
u_öt
 *
±r
;

2683 
i
;

2684 
i
=0;i<
lôîÆcou¡
;i++)

2686 
u_öt
 
l_addr
=(u_öt)
out
;

2687 
j
;

2688 
j
=0;j<
i
;j++) {

2689 if(
lôîÆs
[
j
][1]=ˆôîÆs[
i
][1]) {

2691 
l_addr
=
lôîÆs
[
j
][0];

2695 
±r
=(
u_öt
 *)
lôîÆs
[
i
][0];

2696 
u_öt
 
off£t
=
l_addr
-(u_öt)
±r
-8;

2697 
	`as£π
(
off£t
<4096);

2698 
	`as£π
(!(
off£t
&3));

2699 *
±r
|=
off£t
;

2700 if(
l_addr
==(
u_öt
)
out
) {

2701 
lôîÆs
[
i
][0]=
l_addr
;

2702 
	`ouçut_w32
(
lôîÆs
[
i
][1]);

2705 
lôîÆcou¡
=0;

2706 
	}
}

2708 
	$lôîÆ_poﬁ_jumpovî
(
n
)

2710 if(!
lôîÆcou¡
) ;

2711 if(
n
) {

2712 if(()
out
-
lôîÆs
[0][0]<4096-
n
) ;

2714 
jaddr
=()
out
;

2715 
	`emô_jmp
(0);

2716 
	`lôîÆ_poﬁ
(0);

2717 
	`£t_jump_èrgë
(
jaddr
,()
out
);

2718 
	}
}

2720 
	$emô_extjump2
(
u_öt
 
addr
, 
èrgë
, 
lökî
)

2722 
u_ch¨
 *
±r
=(u_ch¨ *)
addr
;

2723 
	`as£π
((
±r
[3]&0x0e)==0xa);

2724 
	`emô_lﬂdÕ
(
èrgë
,0);

2725 
	`emô_lﬂdÕ
(
addr
,1);

2726 
	`as£π
(
addr
>=
BASE_ADDR
&&addr<(BASE_ADDR+(1<<
TARGET_SIZE_2
)));

2729 #ifde‡
DEBUG_CYCLE_COUNT


2730 
	`emô_ªadw‹d
(()&
œ°_cou¡
,
ECX
);

2731 
	`emô_add
(
HOST_CCREG
,
ECX
,HOST_CCREG);

2732 
	`emô_ªadw‹d
(()&
√xt_öãru±
,
ECX
);

2733 
	`emô_wrôew‹d
(
HOST_CCREG
,()&
Cou¡
);

2734 
	`emô_sub
(
HOST_CCREG
,
ECX
,HOST_CCREG);

2735 
	`emô_wrôew‹d
(
ECX
,()&
œ°_cou¡
);

2738 
	`emô_jmp
(
lökî
);

2739 
	}
}

2741 
	$emô_extjump
(
addr
, 
èrgë
)

2743 
	`emô_extjump2
(
addr
, 
èrgë
, ()
dy«_lökî
);

2744 
	}
}

2745 
	$emô_extjump_ds
(
addr
, 
èrgë
)

2747 
	`emô_extjump2
(
addr
, 
èrgë
, ()
dy«_lökî_ds
);

2748 
	}
}

2751 
	$emô_movimm_‰om
(
u_öt
 
rs_vÆ
,
rs
,u_öà
π_vÆ
,
π
)

2753 
u_öt
 
¨mvÆ
;

2754 
diff
;

2755 if(
	`gíimm
(
π_vÆ
,&
¨mvÆ
)) {

2756 
	`as£m_debug
("mov %s,#%d\n",
ªg«me
[
π
],
π_vÆ
);

2757 
	`ouçut_w32
(0xe3a00000|
	`rd_∫_rm
(
π
,0,0)|
¨mvÆ
);

2760 if(
	`gíimm
(~
π_vÆ
,&
¨mvÆ
)) {

2761 
	`as£m_debug
("mv¿%s,#%d\n",
ªg«me
[
π
],
π_vÆ
);

2762 
	`ouçut_w32
(0xe3e00000|
	`rd_∫_rm
(
π
,0,0)|
¨mvÆ
);

2765 
diff
=
π_vÆ
-
rs_vÆ
;

2766 if(
	`gíimm
(
diff
,&
¨mvÆ
)) {

2767 
	`as£m_debug
("add %s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],
diff
);

2768 
	`ouçut_w32
(0xe2800000|
	`rd_∫_rm
(
π
,
rs
,0)|
¨mvÆ
);

2770 }if(
	`gíimm
(-
diff
,&
¨mvÆ
)) {

2771 
	`as£m_debug
("sub %s,%s,#%d\n",
ªg«me
[
π
],ªg«me[
rs
],-
diff
);

2772 
	`ouçut_w32
(0xe2400000|
	`rd_∫_rm
(
π
,
rs
,0)|
¨mvÆ
);

2775 
	`emô_movimm
(
π_vÆ
,
π
);

2776 
	}
}

2779 
	$is_simû¨_vÆue
(
u_öt
 
v1
,u_öà
v2
)

2781 
u_öt
 
xs
;

2782 
diff
;

2783 if(
v1
==
v2
)  1;

2784 
diff
=
v2
-
v1
;

2785 
xs
=
diff
;xs!=0&&(xs&3)==0;xs>>=2)

2787 if(
xs
<0x100)  1;

2788 
xs
=-
diff
;xs!=0&&(xs&3)==0;xs>>=2)

2790 if(
xs
<0x100)  1;

2792 
	}
}

2795 
	$∑ss_¨gs
(
a0
, 
a1
)

2797 if(
a0
==1&&
a1
==0) {

2799 
	`emô_mov
(
a0
,2);Émô_mov(
a1
,1);Émit_mov(2,0);

2801 if(
a0
!=0&&
a1
==0) {

2802 
	`emô_mov
(
a1
,1);

2803 i‡(
a0
>=0Ë
	`emô_mov
(a0,0);

2806 if(
a0
>=0&&a0!=0Ë
	`emô_mov
(a0,0);

2807 if(
a1
>=0&&a1!=1Ë
	`emô_mov
(a1,1);

2809 
	}
}

2811 
	$mov_lﬂdty≥_adj
(
ty≥
,
rs
,
π
)

2813 
ty≥
) {

2814 
LOADB_STUB
: 
	`emô_sig√xãnd8
(
rs
,
π
); ;

2815 
LOADBU_STUB
: 
	`emô_™dimm
(
rs
,0xff,
π
); ;

2816 
LOADH_STUB
: 
	`emô_sig√xãnd16
(
rs
,
π
); ;

2817 
LOADHU_STUB
: 
	`emô_™dimm
(
rs
,0xffff,
π
); ;

2818 
LOADW_STUB
: if(
rs
!=
π
Ë
	`emô_mov
(rs,rt); ;

2819 : 
	`as£π
(0);

2821 
	}
}

2823 #ifde‡
PCSX


2824 
	~"pcsxmem.h
"

2825 
	~"pcsxmem_ölöe.c
"

2828 
	$do_ªad°ub
(
n
)

2830 
	`as£m_debug
("do_ªad°ub %x\n",
°¨t
+
°ubs
[
n
][3]*4);

2831 
	`lôîÆ_poﬁ
(256);

2832 
	`£t_jump_èrgë
(
°ubs
[
n
][1],()
out
);

2833 
ty≥
=
°ubs
[
n
][0];

2834 
i
=
°ubs
[
n
][3];

2835 
rs
=
°ubs
[
n
][4];

2836 
ªg°©
 *
i_ªgs
=(ªg°© *)
°ubs
[
n
][5];

2837 
u_öt
 
ªgli°
=
°ubs
[
n
][7];

2838 sig√d *
i_ªgm≠
=
i_ªgs
->
ªgm≠
;

2839 
addr
=
	`gë_ªg
(
i_ªgm≠
,
AGEN1
+(
i
&1));

2840 
πh
,
π
;

2841 
ds
;

2842 if(
ôy≥
[
i
]==
C1LS
||ôy≥[i]==
C2LS
||ôy≥[i]==
LOADLR
) {

2843 
πh
=
	`gë_ªg
(
i_ªgm≠
,
FTEMP
|64);

2844 
π
=
	`gë_ªg
(
i_ªgm≠
,
FTEMP
);

2846 
πh
=
	`gë_ªg
(
i_ªgm≠
,
π1
[
i
]|64);

2847 
π
=
	`gë_ªg
(
i_ªgm≠
,
π1
[
i
]);

2849 
	`as£π
(
rs
>=0);

2850 #ifde‡
PCSX


2851 
r
,
ãmp
=-1,
ãmp2
=
HOST_TEMPREG
,
ªgs_ßved
=0,
ª°‹e_jump
=0;

2852 
ªgli°
|=(1<<
rs
);

2853 
r
=0;r<=12;r++) {

2854 if(((1<<
r
)&0x13ff)&&((1<<r)&
ªgli°
)==0) {

2855 
ãmp
=
r
; ;

2858 if(
π
>=0&&
π1
[
i
]!=0)

2859 
ªgli°
&=~(1<<
π
);

2860 if(
ãmp
==-1) {

2861 
	`ßve_ªgs
(
ªgli°
);

2862 
ªgs_ßved
=1;

2863 
ãmp
=(
rs
==0)?2:0;

2865 if((
ªgs_ßved
||(
ªgli°
&2)==0)&&
ãmp
!=1&&
rs
!=1)

2866 
ãmp2
=1;

2867 
	`emô_ªadw‹d
(()&
mem_πab
,
ãmp
);

2868 
	`emô_shrimm
(
rs
,12,
ãmp2
);

2869 
	`emô_ªadw‹d_duÆödexedx4
(
ãmp
,
ãmp2
,temp2);

2870 
	`emô_l¶s_imm
(
ãmp2
,1,temp2);

2871 if(
ôy≥
[
i
]==
C1LS
||ôy≥[i]==
C2LS
||(
π
>=0&&
π1
[i]!=0)) {

2872 
ty≥
) {

2873 
LOADB_STUB
: 
	`emô_ldrccsb_duÆödexed
(
ãmp2
,
rs
,
π
); ;

2874 
LOADBU_STUB
: 
	`emô_ldrccb_duÆödexed
(
ãmp2
,
rs
,
π
); ;

2875 
LOADH_STUB
: 
	`emô_ldrccsh_duÆödexed
(
ãmp2
,
rs
,
π
); ;

2876 
LOADHU_STUB
: 
	`emô_ldrcch_duÆödexed
(
ãmp2
,
rs
,
π
); ;

2877 
LOADW_STUB
: 
	`emô_ldrcc_duÆödexed
(
ãmp2
,
rs
,
π
); ;

2880 if(
ªgs_ßved
) {

2881 
ª°‹e_jump
=()
out
;

2882 
	`emô_jcc
(0);

2885 
	`emô_jcc
(
°ubs
[
n
][2]);

2887 if(!
ªgs_ßved
)

2888 
	`ßve_ªgs
(
ªgli°
);

2889 
h™dÀr
=0;

2890 if(
ty≥
==
LOADB_STUB
||ty≥==
LOADBU_STUB
)

2891 
h™dÀr
=()
jump_h™dÀr_ªad8
;

2892 if(
ty≥
==
LOADH_STUB
||ty≥==
LOADHU_STUB
)

2893 
h™dÀr
=()
jump_h™dÀr_ªad16
;

2894 if(
ty≥
==
LOADW_STUB
)

2895 
h™dÀr
=()
jump_h™dÀr_ªad32
;

2896 
	`as£π
(
h™dÀr
!=0);

2897 
	`∑ss_¨gs
(
rs
,
ãmp2
);

2898 
cc
=
	`gë_ªg
(
i_ªgm≠
,
CCREG
);

2899 if(
cc
<0)

2900 
	`emô_lﬂdªg
(
CCREG
,2);

2901 
	`emô_addimm
(
cc
<0?2:cc,
	`CLOCK_ADJUST
(()
°ubs
[
n
][6]+1),2);

2902 
	`emô_ˇŒ
(
h™dÀr
);

2903 if(
ôy≥
[
i
]==
C1LS
||ôy≥[i]==
C2LS
||(
π
>=0&&
π1
[i]!=0)) {

2904 
	`mov_lﬂdty≥_adj
(
ty≥
,0,
π
);

2906 if(
ª°‹e_jump
)

2907 
	`£t_jump_èrgë
(
ª°‹e_jump
,()
out
);

2908 
	`ª°‹e_ªgs
(
ªgli°
);

2909 
	`emô_jmp
(
°ubs
[
n
][2]);

2911 if(
addr
<0Ëaddr=
π
;

2912 if(
addr
<0&&
ôy≥
[
i
]!=
C1LS
&&ôy≥[i]!=
C2LS
&&ôy≥[i]!=
LOADLR
Ëaddr=
	`gë_ªg
(
i_ªgm≠
,-1);

2913 
	`as£π
(
addr
>=0);

2914 
·abÀ
=0;

2915 if(
ty≥
==
LOADB_STUB
||ty≥==
LOADBU_STUB
)

2916 
·abÀ
=()
ªadmemb
;

2917 if(
ty≥
==
LOADH_STUB
||ty≥==
LOADHU_STUB
)

2918 
·abÀ
=()
ªadmemh
;

2919 if(
ty≥
==
LOADW_STUB
)

2920 
·abÀ
=()
ªadmem
;

2921 #i‚de‡
FORCE32


2922 if(
ty≥
==
LOADD_STUB
)

2923 
·abÀ
=()
ªadmemd
;

2925 
	`as£π
(
·abÀ
!=0);

2926 
	`emô_wrôew‹d
(
rs
,()&
addªss
);

2928 
	`ßve_ªgs
(
ªgli°
);

2929 #i‚de‡
PCSX


2930 
ds
=
i_ªgs
!=&
ªgs
[
i
];

2931 
ªÆ_rs
=(
ôy≥
[
i
]==
LOADLR
)?-1:
	`gë_ªg
(
i_ªgm≠
,
rs1
[i]);

2932 
u_öt
 
cmask
=
ds
?-1:(0x100f|~
i_ªgs
->
wasc⁄°
);

2933 if(!
ds
Ë
	`lﬂd_Æl_c⁄°s
(
ªgs
[
i
].
ªgm≠_íåy
,ªgs[i].
was32
,ªgs[i].
wasdúty
&~(1<<
addr
)&(
ªÆ_rs
<0?-1:~(1<<real_rs))&0x100f,i);

2934 
	`wb_dútys
(
i_ªgs
->
ªgm≠_íåy
,i_ªgs->
was32
,i_ªgs->
wasdúty
&
cmask
&~(1<<
addr
)&(
ªÆ_rs
<0?-1:~(1<<real_rs)));

2935 if(!
ds
Ë
	`wb_c⁄°s
(
ªgs
[
i
].
ªgm≠_íåy
,ªgs[i].
was32
,ªgs[i].
wasdúty
&~(1<<
addr
)&(
ªÆ_rs
<0?-1:~(1<<real_rs))&~0x100f,i);

2937 
	`emô_shrimm
(
rs
,16,1);

2938 
cc
=
	`gë_ªg
(
i_ªgm≠
,
CCREG
);

2939 if(
cc
<0) {

2940 
	`emô_lﬂdªg
(
CCREG
,2);

2942 
	`emô_movimm
(
·abÀ
,0);

2943 
	`emô_addimm
(
cc
<0?2:cc,2*
°ubs
[
n
][6]+2,2);

2944 #i‚de‡
PCSX


2945 
	`emô_movimm
(
°¨t
+
°ubs
[
n
][3]*4+(((
ªgs
[
i
].
was32
>>
rs1
[i])&1)<<1)+
ds
,3);

2951 
	`emô_ˇŒ
(()&
ödúe˘_jump_ödexed
);

2954 #i‚de‡
PCSX


2957 
	`emô_ªadw‹d
(()&
Cou¡
,
HOST_TEMPREG
);

2958 
	`emô_ªadw‹d
(()&
√xt_öãru±
,2);

2959 
	`emô_addimm
(
HOST_TEMPREG
,-2*
°ubs
[
n
][6]-2,HOST_TEMPREG);

2960 
	`emô_wrôew‹d
(2,()&
œ°_cou¡
);

2961 
	`emô_sub
(
HOST_TEMPREG
,2,
cc
<0?HOST_TEMPREG:cc);

2962 if(
cc
<0) {

2963 
	`emô_°‹îeg
(
CCREG
,
HOST_TEMPREG
);

2967 
	`ª°‹e_ªgs
(
ªgli°
);

2971 if(
ôy≥
[
i
]==
C1LS
||ôy≥[i]==
C2LS
||(
π
>=0&&
π1
[i]!=0)) {

2972 
	`as£π
(
π
>=0);

2973 if(
ty≥
==
LOADB_STUB
)

2974 
	`emô_movsbl
(()&
ªadmem_dw‹d
,
π
);

2975 if(
ty≥
==
LOADBU_STUB
)

2976 
	`emô_movzbl
(()&
ªadmem_dw‹d
,
π
);

2977 if(
ty≥
==
LOADH_STUB
)

2978 
	`emô_movswl
(()&
ªadmem_dw‹d
,
π
);

2979 if(
ty≥
==
LOADHU_STUB
)

2980 
	`emô_movzwl
(()&
ªadmem_dw‹d
,
π
);

2981 if(
ty≥
==
LOADW_STUB
)

2982 
	`emô_ªadw‹d
(()&
ªadmem_dw‹d
,
π
);

2983 if(
ty≥
==
LOADD_STUB
) {

2984 
	`emô_ªadw‹d
(()&
ªadmem_dw‹d
,
π
);

2985 if(
πh
>=0Ë
	`emô_ªadw‹d
((()&
ªadmem_dw‹d
)+4,rth);

2988 
	`emô_jmp
(
°ubs
[
n
][2]);

2990 
	}
}

2992 #ifde‡
PCSX


2994 
u_öt
 
	$gë_dúe˘_memh™dÀr
(*
èbÀ
,
u_öt
 
addr
,
ty≥
,u_öà*
addr_ho°
)

2996 
u_öt
 
l1
,
l2
=0;

2997 
l1
=((
u_öt
 *)
èbÀ
)[
addr
>>12];

2998 if((
l1
&(1<<31))==0) {

2999 
u_öt
 
v
=
l1
<<1;

3000 *
addr_ho°
=
v
+
addr
;

3004 
l1
<<=1;

3005 if(
ty≥
==
LOADB_STUB
||ty≥==
LOADBU_STUB
||ty≥==
STOREB_STUB
)

3006 
l2
=((
u_öt
 *)
l1
)[0x1000/4 + 0x1000/2 + (
addr
&0xfff)];

3007 if(
ty≥
==
LOADH_STUB
||ty≥==
LOADHU_STUB
||ty≥==
STOREH_STUB
)

3008 
l2
=((
u_öt
 *)
l1
)[0x1000/4 + (
addr
&0xfff)/2];

3010 
l2
=((
u_öt
 *)
l1
)[(
addr
&0xfff)/4];

3011 if((
l2
&(1<<31))==0) {

3012 
u_öt
 
v
=
l2
<<1;

3013 *
addr_ho°
=
v
+(
addr
&0xfff);

3016  
l2
<<1;

3018 
	}
}

3021 
	$ölöe_ªad°ub
(
ty≥
, 
i
, 
u_öt
 
addr
, sig√d 
ªgm≠
[], 
èrgë
, 
adj
, u_öà
ªgli°
)

3023 
rs
=
	`gë_ªg
(
ªgm≠
,
èrgë
);

3024 
πh
=
	`gë_ªg
(
ªgm≠
,
èrgë
|64);

3025 
π
=
	`gë_ªg
(
ªgm≠
,
èrgë
);

3026 if(
rs
<0Ërs=
	`gë_ªg
(
ªgm≠
,-1);

3027 
	`as£π
(
rs
>=0);

3028 #ifde‡
PCSX


3029 
u_öt
 
h™dÀr
,
ho°_addr
=0,
is_dy«mic
,
Ár_ˇŒ
=0;

3030 
cc
=
	`gë_ªg
(
ªgm≠
,
CCREG
);

3031 if(
	`pcsx_dúe˘_ªad
(
ty≥
,
addr
,
	`CLOCK_ADJUST
(
adj
+1),
cc
,
èrgë
?
rs
:-1,
π
))

3033 
h™dÀr
=
	`gë_dúe˘_memh™dÀr
(
mem_πab
,
addr
,
ty≥
,&
ho°_addr
);

3034 i‡(
h™dÀr
==0) {

3035 if(
π
<0||
π1
[
i
]==0)

3037 if(
addr
!=
ho°_addr
)

3038 
	`emô_movimm_‰om
(
addr
,
rs
,
ho°_addr
,rs);

3039 
ty≥
) {

3040 
LOADB_STUB
: 
	`emô_movsbl_ödexed
(0,
rs
,
π
); ;

3041 
LOADBU_STUB
: 
	`emô_movzbl_ödexed
(0,
rs
,
π
); ;

3042 
LOADH_STUB
: 
	`emô_movswl_ödexed
(0,
rs
,
π
); ;

3043 
LOADHU_STUB
: 
	`emô_movzwl_ödexed
(0,
rs
,
π
); ;

3044 
LOADW_STUB
: 
	`emô_ªadw‹d_ödexed
(0,
rs
,
π
); ;

3045 : 
	`as£π
(0);

3049 
is_dy«mic
=
	`pcsxmem_is_h™dÀr_dy«mic
(
addr
);

3050 if(
is_dy«mic
) {

3051 if(
ty≥
==
LOADB_STUB
||ty≥==
LOADBU_STUB
)

3052 
h™dÀr
=()
jump_h™dÀr_ªad8
;

3053 if(
ty≥
==
LOADH_STUB
||ty≥==
LOADHU_STUB
)

3054 
h™dÀr
=()
jump_h™dÀr_ªad16
;

3055 if(
ty≥
==
LOADW_STUB
)

3056 
h™dÀr
=()
jump_h™dÀr_ªad32
;

3060 if(
π
>=0&&
π1
[
i
]!=0)

3061 
ªgli°
&=~(1<<
π
);

3062 
	`ßve_ªgs
(
ªgli°
);

3063 if(
èrgë
==0)

3064 
	`emô_movimm
(
addr
,0);

3065 if(
rs
!=0)

3066 
	`emô_mov
(
rs
,0);

3067 
off£t
=()
h™dÀr
-()
out
-8;

3068 if(
off£t
<-33554432||offset>=33554432) {

3070 
	`emô_movimm
(
h™dÀr
,12);

3071 
Ár_ˇŒ
=1;

3073 if(
cc
<0)

3074 
	`emô_lﬂdªg
(
CCREG
,2);

3075 if(
is_dy«mic
) {

3076 
	`emô_movimm
(((
u_öt
 *)
mem_πab
)[
addr
>>12]<<1,1);

3077 
	`emô_addimm
(
cc
<0?2:cc,
	`CLOCK_ADJUST
(
adj
+1),2);

3080 
	`emô_ªadw‹d
(()&
œ°_cou¡
,3);

3081 
	`emô_addimm
(
cc
<0?2:cc,
	`CLOCK_ADJUST
(
adj
+1),2);

3082 
	`emô_add
(2,3,2);

3083 
	`emô_wrôew‹d
(2,()&
Cou¡
);

3086 if(
Ár_ˇŒ
)

3087 
	`emô_ˇŒªg
(12);

3089 
	`emô_ˇŒ
(
h™dÀr
);

3091 if(
π
>=0&&
π1
[
i
]!=0) {

3092 
ty≥
) {

3093 
LOADB_STUB
: 
	`emô_sig√xãnd8
(0,
π
); ;

3094 
LOADBU_STUB
: 
	`emô_™dimm
(0,0xff,
π
); ;

3095 
LOADH_STUB
: 
	`emô_sig√xãnd16
(0,
π
); ;

3096 
LOADHU_STUB
: 
	`emô_™dimm
(0,0xffff,
π
); ;

3097 
LOADW_STUB
: if(
π
!=0Ë
	`emô_mov
(0,rt); ;

3098 : 
	`as£π
(0);

3101 
	`ª°‹e_ªgs
(
ªgli°
);

3103 
·abÀ
=0;

3104 if(
ty≥
==
LOADB_STUB
||ty≥==
LOADBU_STUB
)

3105 
·abÀ
=()
ªadmemb
;

3106 if(
ty≥
==
LOADH_STUB
||ty≥==
LOADHU_STUB
)

3107 
·abÀ
=()
ªadmemh
;

3108 if(
ty≥
==
LOADW_STUB
)

3109 
·abÀ
=()
ªadmem
;

3110 #i‚de‡
FORCE32


3111 if(
ty≥
==
LOADD_STUB
)

3112 
·abÀ
=()
ªadmemd
;

3114 
	`as£π
(
·abÀ
!=0);

3115 if(
èrgë
==0)

3116 
	`emô_movimm
(
addr
,
rs
);

3117 
	`emô_wrôew‹d
(
rs
,()&
addªss
);

3119 
	`ßve_ªgs
(
ªgli°
);

3120 #i‚de‡
PCSX


3121 if((sig√d )
addr
>=(signed )0xC0000000) {

3126 
ds
=
ªgm≠
!=
ªgs
[
i
].regmap;

3127 if(!
ds
Ë
	`lﬂd_Æl_c⁄°s
(
ªgs
[
i
].
ªgm≠_íåy
,ªgs[i].
was32
,ªgs[i].
wasdúty
,i);

3128 if(!
ds
Ë
	`wb_dútys
(
ªgs
[
i
].
ªgm≠_íåy
,ªgs[i].
was32
,ªgs[i].
wasdúty
);

3129 
	`wb_dútys
(
bønch_ªgs
[
i
-1].
ªgm≠_íåy
,bønch_ªgs[i-1].
was32
,bønch_ªgs[i-1].
wasdúty
);

3133 
cc
=
	`gë_ªg
(
ªgm≠
,
CCREG
);

3134 if(
cc
<0) {

3135 
	`emô_lﬂdªg
(
CCREG
,2);

3138 
	`emô_movimm
(((
u_öt
 *)
·abÀ
)[
addr
>>16],0);

3140 
	`emô_addimm
(
cc
<0?2:cc,
	`CLOCK_ADJUST
(
adj
+1),2);

3141 #i‚de‡
PCSX


3142 if((sig√d )
addr
>=(signed )0xC0000000) {

3144 
ds
=
ªgm≠
!=
ªgs
[
i
].regmap;

3145 
	`emô_movimm
(
°¨t
+
i
*4+(((
ªgs
[i].
was32
>>
rs1
[i])&1)<<1)+
ds
,3);

3151 
	`emô_ˇŒ
(()&
ödúe˘_jump
);

3152 #i‚de‡
PCSX


3155 
	`emô_ªadw‹d
(()&
Cou¡
,
HOST_TEMPREG
);

3156 
	`emô_ªadw‹d
(()&
√xt_öãru±
,2);

3157 
	`emô_addimm
(
HOST_TEMPREG
,-
	`CLOCK_ADJUST
(
adj
+1),HOST_TEMPREG);

3158 
	`emô_wrôew‹d
(2,()&
œ°_cou¡
);

3159 
	`emô_sub
(
HOST_TEMPREG
,2,
cc
<0?HOST_TEMPREG:cc);

3160 if(
cc
<0) {

3161 
	`emô_°‹îeg
(
CCREG
,
HOST_TEMPREG
);

3165 
	`ª°‹e_ªgs
(
ªgli°
);

3166 if(
π
>=0) {

3167 if(
ty≥
==
LOADB_STUB
)

3168 
	`emô_movsbl
(()&
ªadmem_dw‹d
,
π
);

3169 if(
ty≥
==
LOADBU_STUB
)

3170 
	`emô_movzbl
(()&
ªadmem_dw‹d
,
π
);

3171 if(
ty≥
==
LOADH_STUB
)

3172 
	`emô_movswl
(()&
ªadmem_dw‹d
,
π
);

3173 if(
ty≥
==
LOADHU_STUB
)

3174 
	`emô_movzwl
(()&
ªadmem_dw‹d
,
π
);

3175 if(
ty≥
==
LOADW_STUB
)

3176 
	`emô_ªadw‹d
(()&
ªadmem_dw‹d
,
π
);

3177 if(
ty≥
==
LOADD_STUB
) {

3178 
	`emô_ªadw‹d
(()&
ªadmem_dw‹d
,
π
);

3179 if(
πh
>=0Ë
	`emô_ªadw‹d
((()&
ªadmem_dw‹d
)+4,rth);

3183 
	}
}

3185 
	$do_wrôe°ub
(
n
)

3187 
	`as£m_debug
("do_wrôe°ub %x\n",
°¨t
+
°ubs
[
n
][3]*4);

3188 
	`lôîÆ_poﬁ
(256);

3189 
	`£t_jump_èrgë
(
°ubs
[
n
][1],()
out
);

3190 
ty≥
=
°ubs
[
n
][0];

3191 
i
=
°ubs
[
n
][3];

3192 
rs
=
°ubs
[
n
][4];

3193 
ªg°©
 *
i_ªgs
=(ªg°© *)
°ubs
[
n
][5];

3194 
u_öt
 
ªgli°
=
°ubs
[
n
][7];

3195 sig√d *
i_ªgm≠
=
i_ªgs
->
ªgm≠
;

3196 
addr
=
	`gë_ªg
(
i_ªgm≠
,
AGEN1
+(
i
&1));

3197 
πh
,
π
,
r
;

3198 
ds
;

3199 if(
ôy≥
[
i
]==
C1LS
||ôy≥[i]==
C2LS
) {

3200 
πh
=
	`gë_ªg
(
i_ªgm≠
,
FTEMP
|64);

3201 
π
=
	`gë_ªg
(
i_ªgm≠
,
r
=
FTEMP
);

3203 
πh
=
	`gë_ªg
(
i_ªgm≠
,
rs2
[
i
]|64);

3204 
π
=
	`gë_ªg
(
i_ªgm≠
,
r
=
rs2
[
i
]);

3206 
	`as£π
(
rs
>=0);

3207 
	`as£π
(
π
>=0);

3208 #ifde‡
PCSX


3209 
πmp
,
ãmp
=-1,
ãmp2
=
HOST_TEMPREG
,
ªgs_ßved
=0,
ª°‹e_jump
=0,
ø
;

3210 
ªgli°2
=
ªgli°
|(1<<
rs
)|(1<<
π
);

3211 
πmp
=0;rtmp<=12;rtmp++) {

3212 if(((1<<
πmp
)&0x13ff)&&((1<<πmp)&
ªgli°2
)==0) {

3213 
ãmp
=
πmp
; ;

3216 if(
ãmp
==-1) {

3217 
	`ßve_ªgs
(
ªgli°
);

3218 
ªgs_ßved
=1;

3219 
πmp
=0;rtmp<=3;rtmp++)

3220 if(
πmp
!=
rs
&&πmp!=
π
)

3221 {
ãmp
=
πmp
;;}

3223 if((
ªgs_ßved
||(
ªgli°2
&8)==0)&&
ãmp
!=3&&
rs
!=3&&
π
!=3)

3224 
ãmp2
=3;

3225 
	`emô_ªadw‹d
(()&
mem_wèb
,
ãmp
);

3226 
	`emô_shrimm
(
rs
,12,
ãmp2
);

3227 
	`emô_ªadw‹d_duÆödexedx4
(
ãmp
,
ãmp2
,temp2);

3228 
	`emô_l¶s_imm
(
ãmp2
,1,temp2);

3229 
ty≥
) {

3230 
STOREB_STUB
: 
	`emô_°rccb_duÆödexed
(
ãmp2
,
rs
,
π
); ;

3231 
STOREH_STUB
: 
	`emô_°rcch_duÆödexed
(
ãmp2
,
rs
,
π
); ;

3232 
STOREW_STUB
: 
	`emô_°rcc_duÆödexed
(
ãmp2
,
rs
,
π
); ;

3233 : 
	`as£π
(0);

3235 if(
ªgs_ßved
) {

3236 
ª°‹e_jump
=()
out
;

3237 
	`emô_jcc
(0);

3240 
	`emô_jcc
(
°ubs
[
n
][2]);

3242 if(!
ªgs_ßved
)

3243 
	`ßve_ªgs
(
ªgli°
);

3244 
h™dÀr
=0;

3245 
ty≥
) {

3246 
STOREB_STUB
: 
h™dÀr
=()
jump_h™dÀr_wrôe8
; ;

3247 
STOREH_STUB
: 
h™dÀr
=()
jump_h™dÀr_wrôe16
; ;

3248 
STOREW_STUB
: 
h™dÀr
=()
jump_h™dÀr_wrôe32
; ;

3250 
	`as£π
(
h™dÀr
!=0);

3251 
	`∑ss_¨gs
(
rs
,
π
);

3252 if(
ãmp2
!=3)

3253 
	`emô_mov
(
ãmp2
,3);

3254 
cc
=
	`gë_ªg
(
i_ªgm≠
,
CCREG
);

3255 if(
cc
<0)

3256 
	`emô_lﬂdªg
(
CCREG
,2);

3257 
	`emô_addimm
(
cc
<0?2:cc,
	`CLOCK_ADJUST
(()
°ubs
[
n
][6]+1),2);

3259 
	`emô_ˇŒ
(
h™dÀr
);

3260 
	`emô_addimm
(0,-
	`CLOCK_ADJUST
(()
°ubs
[
n
][6]+1),
cc
<0?2:cc);

3261 if(
cc
<0)

3262 
	`emô_°‹îeg
(
CCREG
,2);

3263 if(
ª°‹e_jump
)

3264 
	`£t_jump_èrgë
(
ª°‹e_jump
,()
out
);

3265 
	`ª°‹e_ªgs
(
ªgli°
);

3266 
ø
=
°ubs
[
n
][2];

3267 
	`emô_jmp
(
ø
);

3269 if(
addr
<0Ëaddr=
	`gë_ªg
(
i_ªgm≠
,-1);

3270 
	`as£π
(
addr
>=0);

3271 
·abÀ
=0;

3272 if(
ty≥
==
STOREB_STUB
)

3273 
·abÀ
=()
wrôememb
;

3274 if(
ty≥
==
STOREH_STUB
)

3275 
·abÀ
=()
wrôememh
;

3276 if(
ty≥
==
STOREW_STUB
)

3277 
·abÀ
=()
wrôemem
;

3278 #i‚de‡
FORCE32


3279 if(
ty≥
==
STORED_STUB
)

3280 
·abÀ
=()
wrôememd
;

3282 
	`as£π
(
·abÀ
!=0);

3283 
	`emô_wrôew‹d
(
rs
,()&
addªss
);

3286 if(
ty≥
==
STOREB_STUB
)

3287 
	`emô_wrôebyã
(
π
,()&
byã
);

3288 if(
ty≥
==
STOREH_STUB
)

3289 
	`emô_wrôehw‹d
(
π
,()&
hw‹d
);

3290 if(
ty≥
==
STOREW_STUB
)

3291 
	`emô_wrôew‹d
(
π
,()&
w‹d
);

3292 if(
ty≥
==
STORED_STUB
) {

3293 #i‚de‡
FORCE32


3294 
	`emô_wrôew‹d
(
π
,()&
dw‹d
);

3295 
	`emô_wrôew‹d
(
r
?
πh
:
π
,()&
dw‹d
+4);

3297 
	`SysPrötf
("STORED_STUB\n");

3301 
	`ßve_ªgs
(
ªgli°
);

3302 #i‚de‡
PCSX


3303 
ds
=
i_ªgs
!=&
ªgs
[
i
];

3304 
ªÆ_rs
=
	`gë_ªg
(
i_ªgm≠
,
rs1
[
i
]);

3305 
u_öt
 
cmask
=
ds
?-1:(0x100f|~
i_ªgs
->
wasc⁄°
);

3306 if(!
ds
Ë
	`lﬂd_Æl_c⁄°s
(
ªgs
[
i
].
ªgm≠_íåy
,ªgs[i].
was32
,ªgs[i].
wasdúty
&~(1<<
addr
)&(
ªÆ_rs
<0?-1:~(1<<real_rs))&0x100f,i);

3307 
	`wb_dútys
(
i_ªgs
->
ªgm≠_íåy
,i_ªgs->
was32
,i_ªgs->
wasdúty
&
cmask
&~(1<<
addr
)&(
ªÆ_rs
<0?-1:~(1<<real_rs)));

3308 if(!
ds
Ë
	`wb_c⁄°s
(
ªgs
[
i
].
ªgm≠_íåy
,ªgs[i].
was32
,ªgs[i].
wasdúty
&~(1<<
addr
)&(
ªÆ_rs
<0?-1:~(1<<real_rs))&~0x100f,i);

3310 
	`emô_shrimm
(
rs
,16,1);

3311 
cc
=
	`gë_ªg
(
i_ªgm≠
,
CCREG
);

3312 if(
cc
<0) {

3313 
	`emô_lﬂdªg
(
CCREG
,2);

3315 
	`emô_movimm
(
·abÀ
,0);

3316 
	`emô_addimm
(
cc
<0?2:cc,2*
°ubs
[
n
][6]+2,2);

3317 #i‚de‡
PCSX


3318 
	`emô_movimm
(
°¨t
+
°ubs
[
n
][3]*4+(((
ªgs
[
i
].
was32
>>
rs1
[i])&1)<<1)+
ds
,3);

3324 
	`emô_ˇŒ
(()&
ödúe˘_jump_ödexed
);

3326 
	`emô_ªadw‹d
(()&
Cou¡
,
HOST_TEMPREG
);

3327 
	`emô_ªadw‹d
(()&
√xt_öãru±
,2);

3328 
	`emô_addimm
(
HOST_TEMPREG
,-2*
°ubs
[
n
][6]-2,HOST_TEMPREG);

3329 
	`emô_wrôew‹d
(2,()&
œ°_cou¡
);

3330 
	`emô_sub
(
HOST_TEMPREG
,2,
cc
<0?HOST_TEMPREG:cc);

3331 if(
cc
<0) {

3332 
	`emô_°‹îeg
(
CCREG
,
HOST_TEMPREG
);

3335 
	`ª°‹e_ªgs
(
ªgli°
);

3339 
	`emô_jmp
(
°ubs
[
n
][2]);

3341 
	}
}

3343 
	$ölöe_wrôe°ub
(
ty≥
, 
i
, 
u_öt
 
addr
, sig√d 
ªgm≠
[], 
èrgë
, 
adj
, u_öà
ªgli°
)

3345 
rs
=
	`gë_ªg
(
ªgm≠
,-1);

3346 
πh
=
	`gë_ªg
(
ªgm≠
,
èrgë
|64);

3347 
π
=
	`gë_ªg
(
ªgm≠
,
èrgë
);

3348 
	`as£π
(
rs
>=0);

3349 
	`as£π
(
π
>=0);

3350 #ifde‡
PCSX


3351 
u_öt
 
h™dÀr
,
ho°_addr
=0;

3352 
h™dÀr
=
	`gë_dúe˘_memh™dÀr
(
mem_wèb
,
addr
,
ty≥
,&
ho°_addr
);

3353 i‡(
h™dÀr
==0) {

3354 if(
addr
!=
ho°_addr
)

3355 
	`emô_movimm_‰om
(
addr
,
rs
,
ho°_addr
,rs);

3356 
ty≥
) {

3357 
STOREB_STUB
: 
	`emô_wrôebyã_ödexed
(
π
,0,
rs
); ;

3358 
STOREH_STUB
: 
	`emô_wrôehw‹d_ödexed
(
π
,0,
rs
); ;

3359 
STOREW_STUB
: 
	`emô_wrôew‹d_ödexed
(
π
,0,
rs
); ;

3360 : 
	`as£π
(0);

3366 
	`ßve_ªgs
(
ªgli°
);

3367 
	`∑ss_¨gs
(
rs
,
π
);

3368 
cc
=
	`gë_ªg
(
ªgm≠
,
CCREG
);

3369 if(
cc
<0)

3370 
	`emô_lﬂdªg
(
CCREG
,2);

3371 
	`emô_addimm
(
cc
<0?2:cc,
	`CLOCK_ADJUST
(
adj
+1),2);

3372 
	`emô_movimm
(
h™dÀr
,3);

3374 
	`emô_ˇŒ
(()
jump_h™dÀr_wrôe_h
);

3375 
	`emô_addimm
(0,-
	`CLOCK_ADJUST
(
adj
+1),
cc
<0?2:cc);

3376 if(
cc
<0)

3377 
	`emô_°‹îeg
(
CCREG
,2);

3378 
	`ª°‹e_ªgs
(
ªgli°
);

3380 
·abÀ
=0;

3381 if(
ty≥
==
STOREB_STUB
)

3382 
·abÀ
=()
wrôememb
;

3383 if(
ty≥
==
STOREH_STUB
)

3384 
·abÀ
=()
wrôememh
;

3385 if(
ty≥
==
STOREW_STUB
)

3386 
·abÀ
=()
wrôemem
;

3387 #i‚de‡
FORCE32


3388 if(
ty≥
==
STORED_STUB
)

3389 
·abÀ
=()
wrôememd
;

3391 
	`as£π
(
·abÀ
!=0);

3392 
	`emô_wrôew‹d
(
rs
,()&
addªss
);

3395 if(
ty≥
==
STOREB_STUB
)

3396 
	`emô_wrôebyã
(
π
,()&
byã
);

3397 if(
ty≥
==
STOREH_STUB
)

3398 
	`emô_wrôehw‹d
(
π
,()&
hw‹d
);

3399 if(
ty≥
==
STOREW_STUB
)

3400 
	`emô_wrôew‹d
(
π
,()&
w‹d
);

3401 if(
ty≥
==
STORED_STUB
) {

3402 #i‚de‡
FORCE32


3403 
	`emô_wrôew‹d
(
π
,()&
dw‹d
);

3404 
	`emô_wrôew‹d
(
èrgë
?
πh
:
π
,()&
dw‹d
+4);

3406 
	`SysPrötf
("STORED_STUB\n");

3410 
	`ßve_ªgs
(
ªgli°
);

3411 #i‚de‡
PCSX


3413 if((sig√d )
addr
>=(signed )0xC0000000) {

3418 
ds
=
ªgm≠
!=
ªgs
[
i
].regmap;

3419 if(!
ds
Ë
	`lﬂd_Æl_c⁄°s
(
ªgs
[
i
].
ªgm≠_íåy
,ªgs[i].
was32
,ªgs[i].
wasdúty
,i);

3420 if(!
ds
Ë
	`wb_dútys
(
ªgs
[
i
].
ªgm≠_íåy
,ªgs[i].
was32
,ªgs[i].
wasdúty
);

3421 
	`wb_dútys
(
bønch_ªgs
[
i
-1].
ªgm≠_íåy
,bønch_ªgs[i-1].
was32
,bønch_ªgs[i-1].
wasdúty
);

3425 
cc
=
	`gë_ªg
(
ªgm≠
,
CCREG
);

3426 if(
cc
<0) {

3427 
	`emô_lﬂdªg
(
CCREG
,2);

3430 
	`emô_movimm
(((
u_öt
 *)
·abÀ
)[
addr
>>16],0);

3432 
	`emô_addimm
(
cc
<0?2:cc,
	`CLOCK_ADJUST
(
adj
+1),2);

3433 #i‚de‡
PCSX


3434 if((sig√d )
addr
>=(signed )0xC0000000) {

3436 
ds
=
ªgm≠
!=
ªgs
[
i
].regmap;

3437 
	`emô_movimm
(
°¨t
+
i
*4+(((
ªgs
[i].
was32
>>
rs1
[i])&1)<<1)+
ds
,3);

3443 
	`emô_ˇŒ
(()&
ödúe˘_jump
);

3444 
	`emô_ªadw‹d
(()&
Cou¡
,
HOST_TEMPREG
);

3445 
	`emô_ªadw‹d
(()&
√xt_öãru±
,2);

3446 
	`emô_addimm
(
HOST_TEMPREG
,-
	`CLOCK_ADJUST
(
adj
+1),HOST_TEMPREG);

3447 
	`emô_wrôew‹d
(2,()&
œ°_cou¡
);

3448 
	`emô_sub
(
HOST_TEMPREG
,2,
cc
<0?HOST_TEMPREG:cc);

3449 if(
cc
<0) {

3450 
	`emô_°‹îeg
(
CCREG
,
HOST_TEMPREG
);

3453 
	`ª°‹e_ªgs
(
ªgli°
);

3455 
	}
}

3457 
	$do_u«lig√dwrôe°ub
(
n
)

3459 
	`as£m_debug
("do_u«lig√dwrôe°ub %x\n",
°¨t
+
°ubs
[
n
][3]*4);

3460 
	`lôîÆ_poﬁ
(256);

3461 
	`£t_jump_èrgë
(
°ubs
[
n
][1],()
out
);

3463 
i
=
°ubs
[
n
][3];

3464 
ªg°©
 *
i_ªgs
=(ªg°© *)
°ubs
[
n
][4];

3465 
addr
=
°ubs
[
n
][5];

3466 
u_öt
 
ªgli°
=
°ubs
[
n
][7];

3467 sig√d *
i_ªgm≠
=
i_ªgs
->
ªgm≠
;

3468 
ãmp2
=
	`gë_ªg
(
i_ªgm≠
,
FTEMP
);

3469 
π
;

3470 
ds
, 
ªÆ_rs
;

3471 
π
=
	`gë_ªg
(
i_ªgm≠
,
rs2
[
i
]);

3472 
	`as£π
(
π
>=0);

3473 
	`as£π
(
addr
>=0);

3474 
	`as£π
(
›code
[
i
]==0x2a||opcode[i]==0x2e);

3475 
ªgli°
|=(1<<
addr
);

3476 
ªgli°
&=~(1<<
ãmp2
);

3480 
	`ßve_ªgs
(
ªgli°
);

3481 
	`∑ss_¨gs
(
addr
,
π
);

3482 
cc
=
	`gë_ªg
(
i_ªgm≠
,
CCREG
);

3483 if(
cc
<0)

3484 
	`emô_lﬂdªg
(
CCREG
,2);

3485 
	`emô_addimm
(
cc
<0?2:cc,
	`CLOCK_ADJUST
(()
°ubs
[
n
][6]+1),2);

3486 
	`emô_ˇŒ
(()(
›code
[
i
]==0x2a?
jump_h™dÀ_swl
:
jump_h™dÀ_swr
));

3487 
	`emô_addimm
(0,-
	`CLOCK_ADJUST
(()
°ubs
[
n
][6]+1),
cc
<0?2:cc);

3488 if(
cc
<0)

3489 
	`emô_°‹îeg
(
CCREG
,2);

3490 
	`ª°‹e_ªgs
(
ªgli°
);

3491 
	`emô_jmp
(
°ubs
[
n
][2]);

3493 
	`emô_™dimm
(
addr
,0xfffffffc,
ãmp2
);

3494 
	`emô_wrôew‹d
(
ãmp2
,()&
addªss
);

3496 
	`ßve_ªgs
(
ªgli°
);

3497 #i‚de‡
PCSX


3498 
ds
=
i_ªgs
!=&
ªgs
[
i
];

3499 
ªÆ_rs
=
	`gë_ªg
(
i_ªgm≠
,
rs1
[
i
]);

3500 
u_öt
 
cmask
=
ds
?-1:(0x100f|~
i_ªgs
->
wasc⁄°
);

3501 if(!
ds
Ë
	`lﬂd_Æl_c⁄°s
(
ªgs
[
i
].
ªgm≠_íåy
,ªgs[i].
was32
,ªgs[i].
wasdúty
&~(1<<
addr
)&(
ªÆ_rs
<0?-1:~(1<<real_rs))&0x100f,i);

3502 
	`wb_dútys
(
i_ªgs
->
ªgm≠_íåy
,i_ªgs->
was32
,i_ªgs->
wasdúty
&
cmask
&~(1<<
addr
)&(
ªÆ_rs
<0?-1:~(1<<real_rs)));

3503 if(!
ds
Ë
	`wb_c⁄°s
(
ªgs
[
i
].
ªgm≠_íåy
,ªgs[i].
was32
,ªgs[i].
wasdúty
&~(1<<
addr
)&(
ªÆ_rs
<0?-1:~(1<<real_rs))&~0x100f,i);

3505 
	`emô_shrimm
(
addr
,16,1);

3506 
cc
=
	`gë_ªg
(
i_ªgm≠
,
CCREG
);

3507 if(
cc
<0) {

3508 
	`emô_lﬂdªg
(
CCREG
,2);

3510 
	`emô_movimm
((
u_öt
)
ªadmem
,0);

3511 
	`emô_addimm
(
cc
<0?2:cc,2*
°ubs
[
n
][6]+2,2);

3512 #i‚de‡
PCSX


3514 
	`emô_movimm
(
°¨t
+
°ubs
[
n
][3]*4+(((
ªgs
[
i
].
was32
>>
rs1
[i])&1)<<1)+
ds
,3);

3516 
	`emô_ˇŒ
(()&
ödúe˘_jump_ödexed
);

3517 
	`ª°‹e_ªgs
(
ªgli°
);

3519 
	`emô_ªadw‹d
(()&
ªadmem_dw‹d
,
ãmp2
);

3520 
ãmp
=
addr
;

3521 
	`emô_shlimm
(
addr
,3,
ãmp
);

3522 
	`emô_™dimm
(
ãmp
,24,temp);

3523 #ifde‡
BIG_ENDIAN_MIPS


3524 i‡(
›code
[
i
]==0x2e)

3526 i‡(
›code
[
i
]==0x2a)

3528 
	`emô_x‹imm
(
ãmp
,24,temp);

3529 
	`emô_movimm
(-1,
HOST_TEMPREG
);

3530 i‡(
›code
[
i
]==0x2a) {

3531 
	`emô_bic_l§
(
ãmp2
,
HOST_TEMPREG
,
ãmp
,temp2);

3532 
	`emô_‹rshr
(
π
,
ãmp
,
ãmp2
);

3534 
	`emô_bic_l¶
(
ãmp2
,
HOST_TEMPREG
,
ãmp
,temp2);

3535 
	`emô_‹rshl
(
π
,
ãmp
,
ãmp2
);

3537 
	`emô_ªadw‹d
(()&
addªss
,
addr
);

3538 
	`emô_wrôew‹d
(
ãmp2
,()&
w‹d
);

3540 
	`emô_shrimm
(
addr
,16,1);

3541 
	`emô_movimm
((
u_öt
)
wrôemem
,0);

3543 
	`emô_mov
(15,14);

3544 
	`emô_ªadw‹d_duÆödexedx4
(0,1,15);

3545 
	`emô_ªadw‹d
(()&
Cou¡
,
HOST_TEMPREG
);

3546 
	`emô_ªadw‹d
(()&
√xt_öãru±
,2);

3547 
	`emô_addimm
(
HOST_TEMPREG
,-2*
°ubs
[
n
][6]-2,HOST_TEMPREG);

3548 
	`emô_wrôew‹d
(2,()&
œ°_cou¡
);

3549 
	`emô_sub
(
HOST_TEMPREG
,2,
cc
<0?HOST_TEMPREG:cc);

3550 if(
cc
<0) {

3551 
	`emô_°‹îeg
(
CCREG
,
HOST_TEMPREG
);

3553 
	`ª°‹e_ªgs
(
ªgli°
);

3554 
	`emô_jmp
(
°ubs
[
n
][2]);

3556 
	}
}

3558 
	$¥öåegs
(
edi
,
esi
,
ebp
,
e•
,
b
,
d
,
c
,
a
)

3560 
	`¥ötf
("ªgs: %x %x %x %x %x %x %x (%x)\n",
a
,
b
,
c
,
d
,
ebp
,
esi
,
edi
,(&edi)[-1]);

3561 
	}
}

3563 
	$do_öv°ub
(
n
)

3565 
	`lôîÆ_poﬁ
(20);

3566 
u_öt
 
ªgli°
=
°ubs
[
n
][3];

3567 
	`£t_jump_èrgë
(
°ubs
[
n
][1],()
out
);

3568 
	`ßve_ªgs
(
ªgli°
);

3569 if(
°ubs
[
n
][4]!=0Ë
	`emô_mov
(stubs[n][4],0);

3570 
	`emô_ˇŒ
(()&
övÆid©e_addr
);

3571 
	`ª°‹e_ªgs
(
ªgli°
);

3572 
	`emô_jmp
(
°ubs
[
n
][2]);

3573 
	}
}

3575 
	$do_dúty_°ub
(
i
)

3577 
	`as£m_debug
("do_dúty_°ub %x\n",
°¨t
+
i
*4);

3578 
u_öt
 
addr
=()
°¨t
<()0xC0000000?(u_öt)
sour˚
:(u_int)start;

3579 #ifde‡
PCSX


3580 
addr
=(
u_öt
)
sour˚
;

3583 #i‚de‡
HAVE_ARMV7


3584 
	`emô_lﬂdÕ
(
addr
,1);

3585 
	`emô_lﬂdÕ
(()
c›y
,2);

3586 
	`emô_lﬂdÕ
(
¶í
*4,3);

3588 
	`emô_movw
(
addr
&0x0000FFFF,1);

3589 
	`emô_movw
(((
u_öt
)
c›y
)&0x0000FFFF,2);

3590 
	`emô_movt
(
addr
&0xFFFF0000,1);

3591 
	`emô_movt
(((
u_öt
)
c›y
)&0xFFFF0000,2);

3592 
	`emô_movw
(
¶í
*4,3);

3594 
	`emô_movimm
(
°¨t
+
i
*4,0);

3595 
	`emô_ˇŒ
(()
°¨t
<()0xC0000000?()&
vîify_code
:()&
vîify_code_vm
);

3596 
íåy
=()
out
;

3597 
	`lﬂd_ªgs_íåy
(
i
);

3598 if(
íåy
==()
out
Ëíåy=
ö°r_addr
[
i
];

3599 
	`emô_jmp
(
ö°r_addr
[
i
]);

3600  
íåy
;

3601 
	}
}

3603 
	$do_dúty_°ub_ds
()

3606 #i‚de‡
HAVE_ARMV7


3607 
	`emô_lﬂdÕ
(()
°¨t
<()0xC0000000?()
sour˚
:()start,1);

3608 
	`emô_lﬂdÕ
(()
c›y
,2);

3609 
	`emô_lﬂdÕ
(
¶í
*4,3);

3611 
	`emô_movw
((()
°¨t
<()0xC0000000?(
u_öt
)
sour˚
:(u_int)start)&0x0000FFFF,1);

3612 
	`emô_movw
(((
u_öt
)
c›y
)&0x0000FFFF,2);

3613 
	`emô_movt
((()
°¨t
<()0xC0000000?(
u_öt
)
sour˚
:(u_int)start)&0xFFFF0000,1);

3614 
	`emô_movt
(((
u_öt
)
c›y
)&0xFFFF0000,2);

3615 
	`emô_movw
(
¶í
*4,3);

3617 
	`emô_movimm
(
°¨t
+1,0);

3618 
	`emô_ˇŒ
(()&
vîify_code_ds
);

3619 
	}
}

3621 
	$do_c›1°ub
(
n
)

3623 
	`lôîÆ_poﬁ
(256);

3624 
	`as£m_debug
("do_c›1°ub %x\n",
°¨t
+
°ubs
[
n
][3]*4);

3625 
	`£t_jump_èrgë
(
°ubs
[
n
][1],()
out
);

3626 
i
=
°ubs
[
n
][3];

3628 
ªg°©
 *
i_ªgs
=(ªg°© *)
°ubs
[
n
][5];

3629 
ds
=
°ubs
[
n
][6];

3630 if(!
ds
) {

3631 
	`lﬂd_Æl_c⁄°s
(
ªgs
[
i
].
ªgm≠_íåy
,ªgs[i].
was32
,ªgs[i].
wasdúty
,i);

3635 
	`wb_dútys
(
i_ªgs
->
ªgm≠_íåy
,i_ªgs->
was32
,i_ªgs->
wasdúty
);

3636 if(
ªgs
[
i
].
ªgm≠_íåy
[
HOST_CCREG
]!=
CCREG
Ë
	`emô_lﬂdªg
(CCREG,HOST_CCREG);

3637 
	`emô_movimm
(
°¨t
+(
i
-
ds
)*4,
EAX
);

3638 
	`emô_addimm
(
HOST_CCREG
,
	`CLOCK_ADJUST
(
cˇdj
[
i
]),HOST_CCREG);

3639 
	`emô_jmp
(
ds
?()
Â_ex˚±i⁄_ds
:()
Â_ex˚±i⁄
);

3640 
	}
}

3642 #i‚de‡
DISABLE_TLB


3646 
	$do_éb_r
(
s
,
¨
,
m≠
,
x
,
a
,
shi·
,
c
,
u_öt
 
addr
)

3648 if(
c
) {

3649 if((sig√d )
addr
>=(signed )0xC0000000) {

3651 
	`emô_ªadw‹d_duÆödexedx4
(
FP
,
m≠
,map);

3657 
	`as£π
(
s
!=
m≠
);

3658 
	`emô_movimm
((()
mem‹y_m≠
-()&
dy«ªc_loˇl
)>>2,
m≠
);

3659 
	`emô_add§12
(
m≠
,
s
,map);

3662 if(
shi·
>=0Ë
	`emô_shlimm
(
s
,3,shift);

3663 if(~
a
Ë
	`emô_™dimm
(
s
,a,
¨
);

3664 
	`emô_ªadw‹d_duÆödexedx4
(
FP
,
m≠
,map);

3666  
m≠
;

3667 
	}
}

3668 
	$do_éb_r_bønch
(
m≠
, 
c
, 
u_öt
 
addr
, *
jaddr
)

3670 if(!
c
||(sig√d )
addr
>=(signed )0xC0000000) {

3671 
	`emô_ã°
(
m≠
,map);

3672 *
jaddr
=()
out
;

3673 
	`emô_js
(0);

3675  
m≠
;

3676 
	}
}

3678 
	$gí_éb_addr_r
(
¨
, 
m≠
) {

3679 if(
m≠
>=0) {

3680 
	`as£m_debug
("add %s,%s,%†l¶ #2\n",
ªg«me
[
¨
],ªg«me[¨],ªg«me[
m≠
]);

3681 
	`ouçut_w32
(0xe0800100|
	`rd_∫_rm
(
¨
,¨,
m≠
));

3683 
	}
}

3685 
	$do_éb_w
(
s
,
¨
,
m≠
,
x
,
c
,
u_öt
 
addr
)

3687 if(
c
) {

3688 if(
addr
<0x80800000||addr>=0xC0000000) {

3690 
	`emô_ªadw‹d_duÆödexedx4
(
FP
,
m≠
,map);

3696 
	`as£π
(
s
!=
m≠
);

3697 
	`emô_movimm
((()
mem‹y_m≠
-()&
dy«ªc_loˇl
)>>2,
m≠
);

3698 
	`emô_add§12
(
m≠
,
s
,map);

3701 
	`emô_ªadw‹d_duÆödexedx4
(
FP
,
m≠
,map);

3703  
m≠
;

3704 
	}
}

3705 
	$do_éb_w_bønch
(
m≠
, 
c
, 
u_öt
 
addr
, *
jaddr
)

3707 if(!
c
||
addr
<0x80800000||addr>=0xC0000000) {

3708 
	`emô_ã°imm
(
m≠
,0x40000000);

3709 *
jaddr
=()
out
;

3710 
	`emô_j√
(0);

3712 
	}
}

3714 
	$gí_éb_addr_w
(
¨
, 
m≠
) {

3715 if(
m≠
>=0) {

3716 
	`as£m_debug
("add %s,%s,%†l¶ #2\n",
ªg«me
[
¨
],ªg«me[¨],ªg«me[
m≠
]);

3717 
	`ouçut_w32
(0xe0800100|
	`rd_∫_rm
(
¨
,¨,
m≠
));

3719 
	}
}

3722 
	$gíî©e_m≠_c⁄°
(
u_öt
 
addr
,
ªg
) {

3724 
	`emô_movimm
((
addr
>>12)+(((
u_öt
)
mem‹y_m≠
-(u_öt)&
dy«ªc_loˇl
)>>2),
ªg
);

3725 
	}
}

3729 
	$do_éb_r
(
a
, ...Ë{  0; 
	}
}

3730 
	$do_éb_r_bønch
(
a
, ...Ë{  0; 
	}
}

3731 
	$gí_éb_addr_r
(
a
, ...Ë{  0; 
	}
}

3732 
	$do_éb_w
(
a
, ...Ë{  0; 
	}
}

3733 
	$do_éb_w_bønch
(
a
, ...Ë{  0; 
	}
}

3734 
	$gí_éb_addr_w
(
a
, ...Ë{  0; 
	}
}

3740 
	$shi·_as£mbÀ_¨m
(
i
,
ªg°©
 *
i_ªgs
)

3742 if(
π1
[
i
]) {

3743 if(
›code2
[
i
]<=0x07)

3745 sig√d 
s
,
t
,
shi·
;

3746 
t
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

3747 
s
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

3748 
shi·
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]);

3749 if(
t
>=0){

3750 if(
rs1
[
i
]==0)

3752 
	`emô_zî‹eg
(
t
);

3754 if(
rs2
[
i
]==0)

3756 
	`as£π
(
s
>=0);

3757 if(
s
!=
t
Ë
	`emô_mov
(s,t);

3761 
	`emô_™dimm
(
shi·
,31,
HOST_TEMPREG
);

3762 if(
›code2
[
i
]==4)

3764 
	`emô_shl
(
s
,
HOST_TEMPREG
,
t
);

3766 if(
›code2
[
i
]==6)

3768 
	`emô_shr
(
s
,
HOST_TEMPREG
,
t
);

3770 if(
›code2
[
i
]==7)

3772 
	`emô_ßr
(
s
,
HOST_TEMPREG
,
t
);

3777 sig√d 
sh
,
¶
,
th
,
é
,
shi·
;

3778 
th
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]|64);

3779 
é
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

3780 
sh
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]|64);

3781 
¶
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

3782 
shi·
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]);

3783 if(
é
>=0){

3784 if(
rs1
[
i
]==0)

3786 
	`emô_zî‹eg
(
é
);

3787 if(
th
>=0Ë
	`emô_zî‹eg
(th);

3789 if(
rs2
[
i
]==0)

3791 
	`as£π
(
¶
>=0);

3792 if(
¶
!=
é
Ë
	`emô_mov
(sl,tl);

3793 if(
th
>=0&&
sh
!ÒhË
	`emô_mov
(sh,th);

3798 
	`as£π
(
shi·
!=
é
);

3799 
ãmp
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,-1);

3800 
ªÆ_th
=
th
;

3801 if(
th
<0&&
›code2
[
i
]!=0x14Ë{th=
ãmp
;}

3802 
	`as£π
(
¶
>=0);

3803 
	`as£π
(
sh
>=0);

3804 
	`emô_™dimm
(
shi·
,31,
HOST_TEMPREG
);

3805 if(
›code2
[
i
]==0x14)

3807 if(
th
>=0Ë
	`emô_shl
(
sh
,
HOST_TEMPREG
,th);

3808 
	`emô_rsbimm
(
HOST_TEMPREG
,32,HOST_TEMPREG);

3809 
	`emô_‹rshr
(
¶
,
HOST_TEMPREG
,
th
);

3810 
	`emô_™dimm
(
shi·
,31,
HOST_TEMPREG
);

3811 
	`emô_ã°imm
(
shi·
,32);

3812 
	`emô_shl
(
¶
,
HOST_TEMPREG
,
é
);

3813 if(
th
>=0Ë
	`emô_cmov√_ªg
(
é
,th);

3814 
	`emô_cmov√_imm
(0,
é
);

3816 if(
›code2
[
i
]==0x16)

3818 
	`as£π
(
th
>=0);

3819 
	`emô_shr
(
¶
,
HOST_TEMPREG
,
é
);

3820 
	`emô_rsbimm
(
HOST_TEMPREG
,32,HOST_TEMPREG);

3821 
	`emô_‹rshl
(
sh
,
HOST_TEMPREG
,
é
);

3822 
	`emô_™dimm
(
shi·
,31,
HOST_TEMPREG
);

3823 
	`emô_ã°imm
(
shi·
,32);

3824 
	`emô_shr
(
sh
,
HOST_TEMPREG
,
th
);

3825 
	`emô_cmov√_ªg
(
th
,
é
);

3826 if(
ªÆ_th
>=0Ë
	`emô_cmov√_imm
(0,
th
);

3828 if(
›code2
[
i
]==0x17)

3830 
	`as£π
(
th
>=0);

3831 
	`emô_shr
(
¶
,
HOST_TEMPREG
,
é
);

3832 
	`emô_rsbimm
(
HOST_TEMPREG
,32,HOST_TEMPREG);

3833 if(
ªÆ_th
>=0) {

3834 
	`as£π
(
ãmp
>=0);

3835 
	`emô_ßrimm
(
th
,31,
ãmp
);

3837 
	`emô_‹rshl
(
sh
,
HOST_TEMPREG
,
é
);

3838 
	`emô_™dimm
(
shi·
,31,
HOST_TEMPREG
);

3839 
	`emô_ã°imm
(
shi·
,32);

3840 
	`emô_ßr
(
sh
,
HOST_TEMPREG
,
th
);

3841 
	`emô_cmov√_ªg
(
th
,
é
);

3842 if(
ªÆ_th
>=0Ë
	`emô_cmov√_ªg
(
ãmp
,
th
);

3848 
	}
}

3850 #ifde‡
PCSX


3851 
	$•ecuœã_mov
(
rs
,
π
)

3853 if(
π
!=0) {

3854 
smrv_°r⁄g_√xt
|=1<<
π
;

3855 
smrv
[
π
]=smrv[
rs
];

3857 
	}
}

3859 
	$•ecuœã_mov_wók
(
rs
,
π
)

3861 if(
π
!=0) {

3862 
smrv_wók_√xt
|=1<<
π
;

3863 
smrv
[
π
]=smrv[
rs
];

3865 
	}
}

3867 
	$•ecuœã_ªgi°î_vÆues
(
i
)

3869 if(
i
==0) {

3870 
	`mem˝y
(
smrv
,
psxRegs
.
GPR
.
r
,(smrv));

3872 
smrv_°r⁄g_√xt
=(1<<28)|(1<<29)|(1<<30);

3873 
smrv_wók_√xt
=~
smrv_°r⁄g_√xt
;

3876 
smrv_°r⁄g
=
smrv_°r⁄g_√xt
;

3877 
smrv_wók
=
smrv_wók_√xt
;

3878 
ôy≥
[
i
]) {

3879 
ALU
:

3880 i‡((
smrv_°r⁄g
>>
rs1
[
i
])&1Ë
	`•ecuœã_mov
‘s1[i],
π1
[i]);

3881 if((
smrv_°r⁄g
>>
rs2
[
i
])&1Ë
	`•ecuœã_mov
‘s2[i],
π1
[i]);

3882 if((
smrv_wók
>>
rs1
[
i
])&1Ë
	`•ecuœã_mov_wók
‘s1[i],
π1
[i]);

3883 if((
smrv_wók
>>
rs2
[
i
])&1Ë
	`•ecuœã_mov_wók
‘s2[i],
π1
[i]);

3885 
smrv_°r⁄g_√xt
&=~(1<<
π1
[
i
]);

3886 
smrv_wók_√xt
&=~(1<<
π1
[
i
]);

3889 
SHIFTIMM
:

3890 
smrv_°r⁄g_√xt
&=~(1<<
π1
[
i
]);

3891 
smrv_wók_√xt
&=~(1<<
π1
[
i
]);

3893 
IMM16
:

3894 if(
π1
[
i
]&&
	`is_c⁄°
(&
ªgs
[i],rt1[i])) {

3895 
vÆue
,
hr
=
	`gë_ªg
(
ªgs
[
i
].
ªgm≠
,
π1
[i]);

3896 if(
hr
>=0) {

3897 if(
	`gë_föÆ_vÆue
(
hr
,
i
,&
vÆue
))

3898 
smrv
[
π1
[
i
]]=
vÆue
;

3899 
smrv
[
π1
[
i
]]=
c⁄°m≠
[i][
hr
];

3900 
smrv_°r⁄g_√xt
|=1<<
π1
[
i
];

3904 i‡((
smrv_°r⁄g
>>
rs1
[
i
])&1Ë
	`•ecuœã_mov
‘s1[i],
π1
[i]);

3905 if((
smrv_wók
>>
rs1
[
i
])&1Ë
	`•ecuœã_mov_wók
‘s1[i],
π1
[i]);

3908 
LOAD
:

3909 if(
°¨t
<0x2000&&(
π1
[
i
]==26||(
smrv
[rt1[i]]>>24)==0xa0)) {

3911 
smrv
[
π1
[
i
]]=0xa0000000;

3912 
smrv_°r⁄g_√xt
|=1<<
π1
[
i
];

3916 
SHIFT
:

3917 
LOADLR
:

3918 
MOV
:

3919 
smrv_°r⁄g_√xt
&=~(1<<
π1
[
i
]);

3920 
smrv_wók_√xt
&=~(1<<
π1
[
i
]);

3922 
COP0
:

3923 
COP2
:

3924 if(
›code2
[
i
]==0||opcode2[i]==2) {

3925 
smrv_°r⁄g_√xt
&=~(1<<
π1
[
i
]);

3926 
smrv_wók_√xt
&=~(1<<
π1
[
i
]);

3929 
C2LS
:

3930 i‡(
›code
[
i
]==0x32) {

3931 
smrv_°r⁄g_√xt
&=~(1<<
π1
[
i
]);

3932 
smrv_wók_√xt
&=~(1<<
π1
[
i
]);

3937 
r
=4;

3938 
	`¥ötf
("x %08x %08x %d %d c %08x %08x\n",
smrv
[
r
],
°¨t
+
i
*4,

3939 ((
smrv_°r⁄g
>>
r
)&1),(
smrv_wók
>>r)&1,
ªgs
[
i
].
isc⁄°
,ªgs[i].
wasc⁄°
);

3941 
	}
}

3944 
	mMTYPE_8000
 = 0,

3945 
	mMTYPE_8020
,

3946 
	mMTYPE_0000
,

3947 
	mMTYPE_A000
,

3948 
	mMTYPE_1F80
,

3951 
	$gë_±r_mem_ty≥
(
u_öt
 
a
)

3953 if(
a
 < 0x00200000) {

3954 if(
a
<0x1000&&((
°¨t
>>20)==0xbfc||(start>>24)==0xa0))

3957  
MTYPE_8000
;

3958  
MTYPE_0000
;

3960 if(0x1f800000 <
a
 &&á < 0x1f801000)

3961  
MTYPE_1F80
;

3962 if(0x80200000 <
a
 &&á < 0x80800000)

3963  
MTYPE_8020
;

3964 if(0xa0000000 <
a
 &&á < 0xa0200000)

3965  
MTYPE_A000
;

3966  
MTYPE_8000
;

3967 
	}
}

3970 
	$emô_Á°∑th_cmp_jump
(
i
,
addr
,*
addr_ªg_ovîride
)

3972 
jaddr
,
ty≥
=0;

3974 #ifde‡
PCSX


3975 
mr
=
rs1
[
i
];

3976 if(((
smrv_°r⁄g
|
smrv_wók
)>>
mr
)&1) {

3977 
ty≥
=
	`gë_±r_mem_ty≥
(
smrv
[
mr
]);

3982 
ty≥
=
	`gë_±r_mem_ty≥
(
°¨t
);

3986 if(
ty≥
==
MTYPE_8020
) {

3987 
	`emô_™dimm
(
addr
,~0x00e00000,
HOST_TEMPREG
);

3988 
addr
=*
addr_ªg_ovîride
=
HOST_TEMPREG
;

3989 
ty≥
=0;

3991 if(
ty≥
==
MTYPE_0000
) {

3992 
	`emô_‹imm
(
addr
,0x80000000,
HOST_TEMPREG
);

3993 
addr
=*
addr_ªg_ovîride
=
HOST_TEMPREG
;

3994 
ty≥
=0;

3996 if(
ty≥
==
MTYPE_A000
) {

3997 
	`emô_™dimm
(
addr
,~0x20000000,
HOST_TEMPREG
);

3998 
addr
=*
addr_ªg_ovîride
=
HOST_TEMPREG
;

3999 
ty≥
=0;

4001 if(
ty≥
==
MTYPE_1F80
) {

4002 i‡(
psxH
 == (*)0x1f800000) {

4003 
	`emô_addimm
(
addr
,-0x1f800000,
HOST_TEMPREG
);

4004 
	`emô_cmpimm
(
HOST_TEMPREG
,0x1000);

4005 
jaddr
=()
out
;

4006 
	`emô_jc
(0);

4010 
ty≥
=0;

4015 if(
ty≥
==0)

4017 
	`emô_cmpimm
(
addr
,
RAM_SIZE
);

4018 
jaddr
=()
out
;

4019 #ifde‡
CORTEX_A8_BRANCH_PREDICTION_HACK


4021 if(
rs1
[
i
]>=28)

4022 
	`emô_jno_u∆ikñy
(0);

4025 
	`emô_jno
(0);

4026 if(
øm_off£t
!=0) {

4027 
	`emô_addimm
(
addr
,
øm_off£t
,
HOST_TEMPREG
);

4028 
addr
=*
addr_ªg_ovîride
=
HOST_TEMPREG
;

4032  
jaddr
;

4033 
	}
}

4035 
	#shi·_as£mbÀ
 
shi·_as£mbÀ_¨m


	)

4037 
	$lﬂdÃ_as£mbÀ_¨m
(
i
,
ªg°©
 *
i_ªgs
)

4039 
s
,
th
,
é
,
ãmp
,
ãmp2
,
addr
,
m≠
=-1;

4040 
off£t
;

4041 
jaddr
=0;

4042 
memèrgë
=0,
c
=0;

4043 
Á°lﬂd_ªg_ovîride
=0;

4044 
u_öt
 
hr
,
ªgli°
=0;

4045 
th
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]|64);

4046 
é
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

4047 
s
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

4048 
ãmp
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,-1);

4049 
ãmp2
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
FTEMP
);

4050 
addr
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
AGEN1
+(
i
&1));

4051 
	`as£π
(
addr
<0);

4052 
off£t
=
imm
[
i
];

4053 
hr
=0;hr<
HOST_REGS
;hr++) {

4054 if(
i_ªgs
->
ªgm≠
[
hr
]>=0Ë
ªgli°
|=1<<hr;

4056 
ªgli°
|=1<<
ãmp
;

4057 if(
off£t
||
s
<0||
c
Ë
addr
=
ãmp2
;

4058 
addr
=
s
;

4059 if(
s
>=0) {

4060 
c
=(
i_ªgs
->
wasc⁄°
>>
s
)&1;

4061 if(
c
) {

4062 
memèrgë
=((sig√d )(
c⁄°m≠
[
i
][
s
]+
off£t
))<(sig√d )0x80000000+
RAM_SIZE
;

4063 if(
usög_éb
&&((sig√d )(
c⁄°m≠
[
i
][
s
]+
off£t
))>=(sig√d )0xC0000000Ë
memèrgë
=1;

4066 if(!
usög_éb
) {

4067 if(!
c
) {

4068 #ifde‡
RAM_OFFSET


4069 
m≠
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
ROREG
);

4070 if(
m≠
<0Ë
	`emô_lﬂdªg
(
ROREG
,m≠=
HOST_TEMPREG
);

4072 
	`emô_shlimm
(
addr
,3,
ãmp
);

4073 i‡(
›code
[
i
]==0x22||opcode[i]==0x26) {

4074 
	`emô_™dimm
(
addr
,0xFFFFFFFC,
ãmp2
);

4076 
	`emô_™dimm
(
addr
,0xFFFFFFF8,
ãmp2
);

4078 
jaddr
=
	`emô_Á°∑th_cmp_jump
(
i
,
ãmp2
,&
Á°lﬂd_ªg_ovîride
);

4081 if(
øm_off£t
&&
memèrgë
) {

4082 
	`emô_addimm
(
ãmp2
,
øm_off£t
,
HOST_TEMPREG
);

4083 
Á°lﬂd_ªg_ovîride
=
HOST_TEMPREG
;

4085 i‡(
›code
[
i
]==0x22||opcode[i]==0x26) {

4086 
	`emô_movimm
(((
c⁄°m≠
[
i
][
s
]+
off£t
)<<3)&24,
ãmp
);

4088 
	`emô_movimm
(((
c⁄°m≠
[
i
][
s
]+
off£t
)<<3)&56,
ãmp
);

4092 
a
;

4093 if(
c
) {

4094 
a
=-1;

4095 }i‡(
›code
[
i
]==0x22||opcode[i]==0x26) {

4096 
a
=0xFFFFFFFC;

4098 
a
=0xFFFFFFF8;

4100 
m≠
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
TLREG
);

4101 
	`as£π
(
m≠
>=0);

4102 
ªgli°
&=~(1<<
m≠
);

4103 
m≠
=
	`do_éb_r
(
addr
,
ãmp2
,m≠,0,
a
,
c
?-1:
ãmp
,c,
c⁄°m≠
[
i
][
s
]+
off£t
);

4104 if(
c
) {

4105 i‡(
›code
[
i
]==0x22||opcode[i]==0x26) {

4106 
	`emô_movimm
(((
c⁄°m≠
[
i
][
s
]+
off£t
)<<3)&24,
ãmp
);

4108 
	`emô_movimm
(((
c⁄°m≠
[
i
][
s
]+
off£t
)<<3)&56,
ãmp
);

4111 
	`do_éb_r_bønch
(
m≠
,
c
,
c⁄°m≠
[
i
][
s
]+
off£t
,&
jaddr
);

4113 i‡(
›code
[
i
]==0x22||opcode[i]==0x26) {

4114 if(!
c
||
memèrgë
) {

4115 
a
=
ãmp2
;

4116 if(
Á°lﬂd_ªg_ovîride
Ë
a
=fastload_reg_override;

4118 
	`emô_ªadw‹d_ödexed_éb
(0,
a
,
m≠
,
ãmp2
);

4119 if(
jaddr
Ë
	`add_°ub
(
LOADW_STUB
,jaddr,()
out
,
i
,
ãmp2
,()
i_ªgs
,
cˇdj
[i],
ªgli°
);

4122 
	`ölöe_ªad°ub
(
LOADW_STUB
,
i
,(
c⁄°m≠
[i][
s
]+
off£t
)&0xFFFFFFFC,
i_ªgs
->
ªgm≠
,
FTEMP
,
cˇdj
[i],
ªgli°
);

4123 if(
π1
[
i
]) {

4124 
	`as£π
(
é
>=0);

4125 
	`emô_™dimm
(
ãmp
,24,temp);

4126 #ifde‡
BIG_ENDIAN_MIPS


4127 i‡(
›code
[
i
]==0x26)

4129 i‡(
›code
[
i
]==0x22)

4131 
	`emô_x‹imm
(
ãmp
,24,temp);

4132 
	`emô_movimm
(-1,
HOST_TEMPREG
);

4133 i‡(
›code
[
i
]==0x26) {

4134 
	`emô_shr
(
ãmp2
,
ãmp
,temp2);

4135 
	`emô_bic_l§
(
é
,
HOST_TEMPREG
,
ãmp
,tl);

4137 
	`emô_shl
(
ãmp2
,
ãmp
,temp2);

4138 
	`emô_bic_l¶
(
é
,
HOST_TEMPREG
,
ãmp
,tl);

4140 
	`emô_‹
(
ãmp2
,
é
,tl);

4144 i‡(
›code
[
i
]==0x1A||opcode[i]==0x1B) {

4146 
ãmp2h
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
FTEMP
|64);

4147 if(!
c
||
memèrgë
) {

4150 
	`emô_ªaddw‹d_ödexed_éb
(0,
ãmp2
,
m≠
,
ãmp2h
,temp2);

4151 if(
jaddr
Ë
	`add_°ub
(
LOADD_STUB
,jaddr,()
out
,
i
,
ãmp2
,()
i_ªgs
,
cˇdj
[i],
ªgli°
);

4154 
	`ölöe_ªad°ub
(
LOADD_STUB
,
i
,(
c⁄°m≠
[i][
s
]+
off£t
)&0xFFFFFFF8,
i_ªgs
->
ªgm≠
,
FTEMP
,
cˇdj
[i],
ªgli°
);

4155 if(
π1
[
i
]) {

4156 
	`as£π
(
th
>=0);

4157 
	`as£π
(
é
>=0);

4158 
	`emô_ã°imm
(
ãmp
,32);

4159 
	`emô_™dimm
(
ãmp
,24,temp);

4160 i‡(
›code
[
i
]==0x1A) {

4161 
	`emô_rsbimm
(
ãmp
,32,
HOST_TEMPREG
);

4162 
	`emô_shl
(
ãmp2h
,
ãmp
,temp2h);

4163 
	`emô_‹rshr
(
ãmp2
,
HOST_TEMPREG
,
ãmp2h
);

4164 
	`emô_movimm
(-1,
HOST_TEMPREG
);

4165 
	`emô_shl
(
ãmp2
,
ãmp
,temp2);

4166 
	`emô_cmove_ªg
(
ãmp2h
,
th
);

4167 
	`emô_bi˚q_l¶
(
é
,
HOST_TEMPREG
,
ãmp
,tl);

4168 
	`emô_bi˙e_l¶
(
th
,
HOST_TEMPREG
,
ãmp
,th);

4169 
	`emô_‹ªq
(
ãmp2
,
é
,tl);

4170 
	`emô_‹∫e
(
ãmp2
,
th
,th);

4172 i‡(
›code
[
i
]==0x1B) {

4173 
	`emô_x‹imm
(
ãmp
,24,temp);

4174 
	`emô_rsbimm
(
ãmp
,32,
HOST_TEMPREG
);

4175 
	`emô_shr
(
ãmp2
,
ãmp
,temp2);

4176 
	`emô_‹rshl
(
ãmp2h
,
HOST_TEMPREG
,
ãmp2
);

4177 
	`emô_movimm
(-1,
HOST_TEMPREG
);

4178 
	`emô_shr
(
ãmp2h
,
ãmp
,temp2h);

4179 
	`emô_cmov√_ªg
(
ãmp2
,
é
);

4180 
	`emô_bi˙e_l§
(
th
,
HOST_TEMPREG
,
ãmp
,th);

4181 
	`emô_bi˚q_l§
(
é
,
HOST_TEMPREG
,
ãmp
,tl);

4182 
	`emô_‹∫e
(
ãmp2h
,
th
,th);

4183 
	`emô_‹ªq
(
ãmp2h
,
é
,tl);

4187 
	}
}

4188 
	#lﬂdÃ_as£mbÀ
 
lﬂdÃ_as£mbÀ_¨m


	)

4190 
	$c›0_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

4192 if(
›code2
[
i
]==0)

4194 sig√d 
t
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

4195 
c›r
=(
sour˚
[
i
]>>11)&0x1f;

4197 if(
t
>=0&&
π1
[
i
]!=0) {

4198 #ifde‡
MUPEN64


4199 
	`emô_addimm
(
FP
,()&
Áke_pc
-()&
dy«ªc_loˇl
,0);

4200 
	`emô_movimm
((
sour˚
[
i
]>>11)&0x1f,1);

4201 
	`emô_wrôew‹d
(0,()&
PC
);

4202 
	`emô_wrôebyã
(1,()&(
Áke_pc
.
f
.
r
.
ƒd
));

4203 if(
c›r
==9) {

4204 
	`emô_ªadw‹d
(()&
œ°_cou¡
,
ECX
);

4205 
	`emô_lﬂdªg
(
CCREG
,
HOST_CCREG
);

4206 
	`emô_add
(
HOST_CCREG
,
ECX
,HOST_CCREG);

4207 
	`emô_addimm
(
HOST_CCREG
,
	`CLOCK_ADJUST
(
cˇdj
[
i
]),HOST_CCREG);

4208 
	`emô_wrôew‹d
(
HOST_CCREG
,()&
Cou¡
);

4210 
	`emô_ˇŒ
(()
MFC0
);

4211 
	`emô_ªadw‹d
(()&
ªadmem_dw‹d
,
t
);

4213 
	`emô_ªadw‹d
(()&
ªg_c›0
+
c›r
*4,
t
);

4217 if(
›code2
[
i
]==4)

4219 sig√d 
s
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

4220 
c›r
=(
sour˚
[
i
]>>11)&0x1f;

4221 
	`as£π
(
s
>=0);

4222 #ifde‡
MUPEN64


4223 
	`emô_wrôew‹d
(
s
,()&
ªadmem_dw‹d
);

4224 
	`wb_ªgi°î
(
rs1
[
i
],
i_ªgs
->
ªgm≠
,i_ªgs->
dúty
,i_ªgs->
is32
);

4225 
	`emô_addimm
(
FP
,()&
Áke_pc
-()&
dy«ªc_loˇl
,0);

4226 
	`emô_movimm
((
sour˚
[
i
]>>11)&0x1f,1);

4227 
	`emô_wrôew‹d
(0,()&
PC
);

4228 
	`emô_wrôebyã
(1,()&(
Áke_pc
.
f
.
r
.
ƒd
));

4230 
	`wb_ªgi°î
(
rs1
[
i
],
i_ªgs
->
ªgm≠
,i_ªgs->
dúty
,i_ªgs->
is32
);

4232 if(
c›r
==9||copr==11||copr==12||copr==13) {

4233 
	`emô_ªadw‹d
(()&
œ°_cou¡
,
HOST_TEMPREG
);

4234 
	`emô_lﬂdªg
(
CCREG
,
HOST_CCREG
);

4235 
	`emô_add
(
HOST_CCREG
,
HOST_TEMPREG
,HOST_CCREG);

4236 
	`emô_addimm
(
HOST_CCREG
,
	`CLOCK_ADJUST
(
cˇdj
[
i
]),HOST_CCREG);

4237 
	`emô_wrôew‹d
(
HOST_CCREG
,()&
Cou¡
);

4243 if(
c›r
==12||copr==13) {

4244 #ifde‡
PCSX


4245 i‡(
is_dñay¶Ÿ
) {

4248 
	`as£m_debug
("MTC0 DS %d\n", 
c›r
);

4249 
	`emô_wrôew‹d
(
HOST_CCREG
,()&
œ°_cou¡
);

4250 
	`emô_movimm
(0,
HOST_CCREG
);

4251 
	`emô_°‹îeg
(
CCREG
,
HOST_CCREG
);

4252 
	`emô_lﬂdªg
(
rs1
[
i
],1);

4253 
	`emô_movimm
(
c›r
,0);

4254 
	`emô_ˇŒ
(()
pcsx_mtc0_ds
);

4255 
	`emô_lﬂdªg
(
rs1
[
i
],
s
);

4259 
	`emô_movimm
(
°¨t
+
i
*4+4,
HOST_TEMPREG
);

4260 
	`emô_wrôew‹d
(
HOST_TEMPREG
,()&
pˇddr
);

4261 
	`emô_movimm
(0,
HOST_TEMPREG
);

4262 
	`emô_wrôew‹d
(
HOST_TEMPREG
,()&
≥ndög_ex˚±i⁄
);

4266 #ifde‡
PCSX


4267 if(
s
==
HOST_CCREG
)

4268 
	`emô_lﬂdªg
(
rs1
[
i
],1);

4269 if(
s
!=1)

4270 
	`emô_mov
(
s
,1);

4271 
	`emô_movimm
(
c›r
,0);

4272 
	`emô_ˇŒ
(()
pcsx_mtc0
);

4274 
	`emô_ˇŒ
(()
MTC0
);

4276 if(
c›r
==9||copr==11||copr==12||copr==13) {

4277 
	`emô_ªadw‹d
(()&
Cou¡
,
HOST_CCREG
);

4278 
	`emô_ªadw‹d
(()&
√xt_öãru±
,
HOST_TEMPREG
);

4279 
	`emô_addimm
(
HOST_CCREG
,-
	`CLOCK_ADJUST
(
cˇdj
[
i
]),HOST_CCREG);

4280 
	`emô_sub
(
HOST_CCREG
,
HOST_TEMPREG
,HOST_CCREG);

4281 
	`emô_wrôew‹d
(
HOST_TEMPREG
,()&
œ°_cou¡
);

4282 
	`emô_°‹îeg
(
CCREG
,
HOST_CCREG
);

4284 if(
c›r
==12||copr==13) {

4285 
	`as£π
(!
is_dñay¶Ÿ
);

4286 
	`emô_ªadw‹d
(()&
≥ndög_ex˚±i⁄
,14);

4287 
	`emô_ã°
(14,14);

4288 
	`emô_j√
(()&
do_öãºu±
);

4290 
	`emô_lﬂdªg
(
rs1
[
i
],
s
);

4291 if(
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]|64)>=0)

4292 
	`emô_lﬂdªg
(
rs1
[
i
]|64,
	`gë_ªg
(
i_ªgs
->
ªgm≠
,rs1[i]|64));

4293 
c›1_ußbÀ
=0;

4297 
	`as£π
(
›code2
[
i
]==0x10);

4298 #i‚de‡
DISABLE_TLB


4299 if((
sour˚
[
i
]&0x3f)==0x01)

4300 
	`emô_ˇŒ
(()
TLBR
);

4301 if((
sour˚
[
i
]&0x3f)==0x02)

4302 
	`emô_ˇŒ
(()
TLBWI_√w
);

4303 if((
sour˚
[
i
]&0x3f)==0x06) {

4306 
	`emô_ªadw‹d
(()&
œ°_cou¡
,
ECX
);

4307 if(
i_ªgs
->
ªgm≠
[
HOST_CCREG
]!=
CCREG
Ë
	`emô_lﬂdªg
(CCREG,HOST_CCREG);

4308 
	`emô_add
(
HOST_CCREG
,
ECX
,HOST_CCREG);

4309 
	`emô_addimm
(
HOST_CCREG
,
	`CLOCK_ADJUST
(
cˇdj
[
i
]),HOST_CCREG);

4310 
	`emô_wrôew‹d
(
HOST_CCREG
,()&
Cou¡
);

4311 
	`emô_ˇŒ
(()
TLBWR_√w
);

4313 if((
sour˚
[
i
]&0x3f)==0x08)

4314 
	`emô_ˇŒ
(()
TLBP
);

4316 #ifde‡
PCSX


4317 if((
sour˚
[
i
]&0x3f)==0x10)

4319 
	`emô_ªadw‹d
(()&
Sètus
,0);

4320 
	`emô_™dimm
(0,0x3c,1);

4321 
	`emô_™dimm
(0,~0xf,0);

4322 
	`emô_‹rshr_imm
(1,2,0);

4323 
	`emô_wrôew‹d
(0,()&
Sètus
);

4326 if((
sour˚
[
i
]&0x3f)==0x18)

4328 
cou¡
=
cˇdj
[
i
];

4329 if(
i_ªgs
->
ªgm≠
[
HOST_CCREG
]!=
CCREG
Ë
	`emô_lﬂdªg
(CCREG,HOST_CCREG);

4330 
	`emô_addimm
(
HOST_CCREG
,
	`CLOCK_ADJUST
(
cou¡
),HOST_CCREG);

4331 
	`emô_jmp
(()
jump_îë
);

4335 
	}
}

4337 
	$c›2_gë_dªg
(
u_öt
 
c›r
,sig√d 
é
,sig√d 
ãmp
)

4339 
c›r
) {

4347 
	`emô_ªadw‹d
(()&
ªg_c›2d
[
c›r
],
é
);

4348 
	`emô_sig√xãnd16
(
é
,tl);

4349 
	`emô_wrôew‹d
(
é
,()&
ªg_c›2d
[
c›r
]);

4356 
	`emô_ªadw‹d
(()&
ªg_c›2d
[
c›r
],
é
);

4357 
	`emô_™dimm
(
é
,0xffff,tl);

4358 
	`emô_wrôew‹d
(
é
,()&
ªg_c›2d
[
c›r
]);

4361 
	`emô_ªadw‹d
(()&
ªg_c›2d
[14],
é
);

4362 
	`emô_wrôew‹d
(
é
,()&
ªg_c›2d
[
c›r
]);

4366 
	`emô_ªadw‹d
(()&
ªg_c›2d
[9],
ãmp
);

4367 
	`emô_ã°imm
(
ãmp
,0x8000);

4368 
	`emô_™dimm
(
ãmp
,0xf80,temp);

4369 
	`emô_™d√_imm
(
ãmp
,0,temp);

4370 
	`emô_shrimm
(
ãmp
,7,
é
);

4371 
	`emô_ªadw‹d
(()&
ªg_c›2d
[10],
ãmp
);

4372 
	`emô_ã°imm
(
ãmp
,0x8000);

4373 
	`emô_™dimm
(
ãmp
,0xf80,temp);

4374 
	`emô_™d√_imm
(
ãmp
,0,temp);

4375 
	`emô_‹rshr_imm
(
ãmp
,2,
é
);

4376 
	`emô_ªadw‹d
(()&
ªg_c›2d
[11],
ãmp
);

4377 
	`emô_ã°imm
(
ãmp
,0x8000);

4378 
	`emô_™dimm
(
ãmp
,0xf80,temp);

4379 
	`emô_™d√_imm
(
ãmp
,0,temp);

4380 
	`emô_‹rshl_imm
(
ãmp
,3,
é
);

4381 
	`emô_wrôew‹d
(
é
,()&
ªg_c›2d
[
c›r
]);

4384 
	`emô_ªadw‹d
(()&
ªg_c›2d
[
c›r
],
é
);

4387 
	}
}

4389 
	$c›2_put_dªg
(
u_öt
 
c›r
,sig√d 
¶
,sig√d 
ãmp
)

4391 
c›r
) {

4393 
	`emô_ªadw‹d
(()&
ªg_c›2d
[13],
ãmp
);

4394 
	`emô_wrôew‹d
(
¶
,()&
ªg_c›2d
[
c›r
]);

4395 
	`emô_wrôew‹d
(
ãmp
,()&
ªg_c›2d
[12]);

4396 
	`emô_ªadw‹d
(()&
ªg_c›2d
[14],
ãmp
);

4397 
	`emô_wrôew‹d
(
¶
,()&
ªg_c›2d
[14]);

4398 
	`emô_wrôew‹d
(
ãmp
,()&
ªg_c›2d
[13]);

4401 
	`emô_™dimm
(
¶
,0x001f,
ãmp
);

4402 
	`emô_shlimm
(
ãmp
,7,temp);

4403 
	`emô_wrôew‹d
(
ãmp
,()&
ªg_c›2d
[9]);

4404 
	`emô_™dimm
(
¶
,0x03e0,
ãmp
);

4405 
	`emô_shlimm
(
ãmp
,2,temp);

4406 
	`emô_wrôew‹d
(
ãmp
,()&
ªg_c›2d
[10]);

4407 
	`emô_™dimm
(
¶
,0x7c00,
ãmp
);

4408 
	`emô_shrimm
(
ãmp
,3,temp);

4409 
	`emô_wrôew‹d
(
ãmp
,()&
ªg_c›2d
[11]);

4410 
	`emô_wrôew‹d
(
¶
,()&
ªg_c›2d
[28]);

4413 
	`emô_movs
(
¶
,
ãmp
);

4414 
	`emô_mvnmi
(
ãmp
,temp);

4415 #ifde‡
HAVE_ARMV5


4416 
	`emô_˛z
(
ãmp
,temp);

4418 
	`emô_movs
(
ãmp
,
HOST_TEMPREG
);

4419 
	`emô_movimm
(0,
ãmp
);

4420 
	`emô_jeq
(()
out
+4*4);

4421 
	`emô_add∂_imm
(
ãmp
,1,temp);

4422 
	`emô_l¶∂s_imm
(
HOST_TEMPREG
,1,HOST_TEMPREG);

4423 
	`emô_jns
(()
out
-2*4);

4425 
	`emô_wrôew‹d
(
¶
,()&
ªg_c›2d
[30]);

4426 
	`emô_wrôew‹d
(
ãmp
,()&
ªg_c›2d
[31]);

4431 
	`emô_wrôew‹d
(
¶
,()&
ªg_c›2d
[
c›r
]);

4434 
	}
}

4436 
	$c›2_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

4438 
u_öt
 
c›r
=(
sour˚
[
i
]>>11)&0x1f;

4439 sig√d 
ãmp
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,-1);

4440 i‡(
›code2
[
i
]==0) {

4441 sig√d 
é
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

4442 if(
é
>=0&&
π1
[
i
]!=0)

4443 
	`c›2_gë_dªg
(
c›r
,
é
,
ãmp
);

4445 i‡(
›code2
[
i
]==4) {

4446 sig√d 
¶
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

4447 
	`c›2_put_dªg
(
c›r
,
¶
,
ãmp
);

4449 i‡(
›code2
[
i
]==2)

4451 sig√d 
é
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

4452 if(
é
>=0&&
π1
[
i
]!=0)

4453 
	`emô_ªadw‹d
(()&
ªg_c›2c
[
c›r
],
é
);

4455 i‡(
›code2
[
i
]==6)

4457 sig√d 
¶
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

4458 
c›r
) {

4466 
	`emô_sig√xãnd16
(
¶
,
ãmp
);

4471 
	`emô_shrimm
(
¶
,12,
ãmp
);

4472 
	`emô_shlimm
(
ãmp
,12,temp);

4473 
	`emô_ã°imm
(
ãmp
,0x7f000000);

4474 
	`emô_ã°eqimm
(
ãmp
,0x00870000);

4475 
	`emô_ã°eqimm
(
ãmp
,0x0000e000);

4476 
	`emô_‹∫e_imm
(
ãmp
,0x80000000,temp);

4479 
ãmp
=
¶
;

4482 
	`emô_wrôew‹d
(
ãmp
,()&
ªg_c›2c
[
c›r
]);

4483 
	`as£π
(
¶
>=0);

4485 
	}
}

4487 
	$c2›_¥ﬁogue
(
u_öt
 
›
,u_öà
ªgli°
)

4489 
	`ßve_ªgs_Æl
(
ªgli°
);

4490 #ifde‡
PCNT


4491 
	`emô_movimm
(
›
,0);

4492 
	`emô_ˇŒ
(()
p˙t_gã_°¨t
);

4494 
	`emô_addimm
(
FP
,()&
psxRegs
.
CP2D
.
r
[0]-()&
dy«ªc_loˇl
,0);

4495 
	}
}

4497 
	$c2›_ïûogue
(
u_öt
 
›
,u_öà
ªgli°
)

4499 #ifde‡
PCNT


4500 
	`emô_movimm
(
›
,0);

4501 
	`emô_ˇŒ
(()
p˙t_gã_íd
);

4503 
	`ª°‹e_ªgs_Æl
(
ªgli°
);

4504 
	}
}

4506 
	$c2›_ˇŒ_MACtoIR
(
lm
,
√ed_Êags
)

4508 if(
√ed_Êags
)

4509 
	`emô_ˇŒ
(()(
lm
?
gãMACtoIR_lm1
:
gãMACtoIR_lm0
));

4511 
	`emô_ˇŒ
(()(
lm
?
gãMACtoIR_lm1_nf
:
gãMACtoIR_lm0_nf
));

4512 
	}
}

4514 
	$c2›_ˇŒ_rgb_func
(*
func
,
lm
,
√ed_ú
,
√ed_Êags
)

4516 
	`emô_ˇŒ
(()
func
);

4518 
	`emô_addimm
(
FP
,()&
psxRegs
.
CP2D
.
r
[0]-()&
dy«ªc_loˇl
,0);

4519 if(
√ed_Êags
||
√ed_ú
)

4520 
	`c2›_ˇŒ_MACtoIR
(
lm
,
√ed_Êags
);

4521 
	`emô_ˇŒ
(()(
√ed_Êags
?
gãMACtoRGB
:
gãMACtoRGB_nf
));

4522 
	}
}

4524 
	$c2›_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

4526 sig√d 
ãmp
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,-1);

4527 
u_öt
 
c2›
=
sour˚
[
i
]&0x3f;

4528 
u_öt
 
hr
,
ªgli°_fuŒ
=0,
ªgli°
;

4529 
√ed_Êags
,
√ed_ú
;

4530 
hr
=0;hr<
HOST_REGS
;hr++) {

4531 if(
i_ªgs
->
ªgm≠
[
hr
]>=0Ë
ªgli°_fuŒ
|=1<<hr;

4533 
ªgli°
=
ªgli°_fuŒ
&
CALLER_SAVE_REGS
;

4535 i‡(
gã_h™dÀrs
[
c2›
]!=
NULL
) {

4536 
√ed_Êags
=!(
gã_u¬ìded
[
i
+1]>>63);

4537 
√ed_ú
=(
gã_u¬ìded
[
i
+1]&0xe00)!=0xe00;

4538 
	`as£m_debug
("gte op %08x, unneeded %016llx,Çeed_flags %d,Çeed_ir %d\n",

4539 
sour˚
[
i
],
gã_u¬ìded
[i+1],
√ed_Êags
,
√ed_ú
);

4540 if(
√w_dy«ªc_hacks
&
NDHACK_GTE_NO_FLAGS
)

4541 
√ed_Êags
=0;

4542 
shi·
 = (
sour˚
[
i
] >> 19) & 1;

4543 
lm
 = (
sour˚
[
i
] >> 10) & 1;

4544 
c2›
) {

4545 #i‚de‡
DRC_DBG


4546 
GTE_MVMVA
: {

4547 #ifde‡
HAVE_ARMV5


4548 
v
 = (
sour˚
[
i
] >> 15) & 3;

4549 
cv
 = (
sour˚
[
i
] >> 13) & 3;

4550 
mx
 = (
sour˚
[
i
] >> 17) & 3;

4551 
ªgli°
=
ªgli°_fuŒ
&(
CALLER_SAVE_REGS
|0xf0);

4552 
	`c2›_¥ﬁogue
(
c2›
,
ªgli°
);

4554 if(
v
<3)

4555 
	`emô_ldrd
(
v
*8,0,4);

4557 
	`emô_movzwl_ödexed
(9*4,0,4);

4558 
	`emô_movzwl_ödexed
(10*4,0,6);

4559 
	`emô_movzwl_ödexed
(11*4,0,5);

4560 
	`emô_‹rshl_imm
(6,16,4);

4562 if(
mx
<3)

4563 
	`emô_addimm
(0,32*4+
mx
*8*4,6);

4565 
	`emô_ªadw‹d
(()&
zîomem_±r
,6);

4566 if(
cv
<3)

4567 
	`emô_addimm
(0,32*4+(
cv
*8+5)*4,7);

4569 
	`emô_ªadw‹d
(()&
zîomem_±r
,7);

4570 #ifde‡
__ARM_NEON__


4571 
	`emô_movimm
(
sour˚
[
i
],1);

4572 
	`emô_ˇŒ
(()
gãMVMVA_∑π_√⁄
);

4573 if(
√ed_Êags
) {

4574 
	`emô_movimm
(
lm
,1);

4575 
	`emô_ˇŒ
(()
gãMACtoIR_Êags_√⁄
);

4578 if(
cv
==3&&
shi·
)

4579 
	`emô_ˇŒ
(()
gãMVMVA_∑π_cv3sh12_¨m
);

4581 
	`emô_movimm
(
shi·
,1);

4582 
	`emô_ˇŒ
(()(
√ed_Êags
?
gãMVMVA_∑π_¨m
:
gãMVMVA_∑π_nf_¨m
));

4584 if(
√ed_Êags
||
√ed_ú
)

4585 
	`c2›_ˇŒ_MACtoIR
(
lm
,
√ed_Êags
);

4588 
	`c2›_¥ﬁogue
(
c2›
,
ªgli°
);

4589 
	`emô_movimm
(
sour˚
[
i
],1);

4590 
	`emô_wrôew‹d
(1,()&
psxRegs
.
code
);

4591 
	`emô_ˇŒ
(()(
√ed_Êags
?
gã_h™dÀrs
[
c2›
]:
gã_h™dÀrs_nf
[c2op]));

4595 
GTE_OP
:

4596 
	`c2›_¥ﬁogue
(
c2›
,
ªgli°
);

4597 
	`emô_ˇŒ
(()(
shi·
?
gãOP_∑π_shi·
:
gãOP_∑π_noshi·
));

4598 if(
√ed_Êags
||
√ed_ú
) {

4599 
	`emô_addimm
(
FP
,()&
psxRegs
.
CP2D
.
r
[0]-()&
dy«ªc_loˇl
,0);

4600 
	`c2›_ˇŒ_MACtoIR
(
lm
,
√ed_Êags
);

4603 
GTE_DPCS
:

4604 
	`c2›_¥ﬁogue
(
c2›
,
ªgli°
);

4605 
	`c2›_ˇŒ_rgb_func
(
shi·
?
gãDPCS_∑π_shi·
:
gãDPCS_∑π_noshi·
,
lm
,
√ed_ú
,
√ed_Êags
);

4607 
GTE_INTPL
:

4608 
	`c2›_¥ﬁogue
(
c2›
,
ªgli°
);

4609 
	`c2›_ˇŒ_rgb_func
(
shi·
?
gãINTPL_∑π_shi·
:
gãINTPL_∑π_noshi·
,
lm
,
√ed_ú
,
√ed_Êags
);

4611 
GTE_SQR
:

4612 
	`c2›_¥ﬁogue
(
c2›
,
ªgli°
);

4613 
	`emô_ˇŒ
(()(
shi·
?
gãSQR_∑π_shi·
:
gãSQR_∑π_noshi·
));

4614 if(
√ed_Êags
||
√ed_ú
) {

4615 
	`emô_addimm
(
FP
,()&
psxRegs
.
CP2D
.
r
[0]-()&
dy«ªc_loˇl
,0);

4616 
	`c2›_ˇŒ_MACtoIR
(
lm
,
√ed_Êags
);

4619 
GTE_DCPL
:

4620 
	`c2›_¥ﬁogue
(
c2›
,
ªgli°
);

4621 
	`c2›_ˇŒ_rgb_func
(
gãDCPL_∑π
,
lm
,
√ed_ú
,
√ed_Êags
);

4623 
GTE_GPF
:

4624 
	`c2›_¥ﬁogue
(
c2›
,
ªgli°
);

4625 
	`c2›_ˇŒ_rgb_func
(
shi·
?
gãGPF_∑π_shi·
:
gãGPF_∑π_noshi·
,
lm
,
√ed_ú
,
√ed_Êags
);

4627 
GTE_GPL
:

4628 
	`c2›_¥ﬁogue
(
c2›
,
ªgli°
);

4629 
	`c2›_ˇŒ_rgb_func
(
shi·
?
gãGPL_∑π_shi·
:
gãGPL_∑π_noshi·
,
lm
,
√ed_ú
,
√ed_Êags
);

4633 
	`c2›_¥ﬁogue
(
c2›
,
ªgli°
);

4634 #ifde‡
DRC_DBG


4635 
	`emô_movimm
(
sour˚
[
i
],1);

4636 
	`emô_wrôew‹d
(1,()&
psxRegs
.
code
);

4638 
	`emô_ˇŒ
(()(
√ed_Êags
?
gã_h™dÀrs
[
c2›
]:
gã_h™dÀrs_nf
[c2op]));

4641 
	`c2›_ïûogue
(
c2›
,
ªgli°
);

4643 
	}
}

4645 
	$c›1_unußbÀ
(
i
,
ªg°©
 *
i_ªgs
)

4648 if(!
c›1_ußbÀ
) {

4649 
jaddr
=()
out
;

4650 
	`emô_jmp
(0);

4651 
	`add_°ub
(
FP_STUB
,
jaddr
,()
out
,
i
,0,()
i_ªgs
,
is_dñay¶Ÿ
,0);

4652 
c›1_ußbÀ
=1;

4654 
	}
}

4656 
	$c›1_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

4658 #i‚de‡
DISABLE_COP1


4660 if(!
c›1_ußbÀ
) {

4661 sig√d 
rs
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
CSREG
);

4662 
	`as£π
(
rs
>=0);

4663 
	`emô_ã°imm
(
rs
,0x20000000);

4664 
jaddr
=()
out
;

4665 
	`emô_jeq
(0);

4666 
	`add_°ub
(
FP_STUB
,
jaddr
,()
out
,
i
,
rs
,()
i_ªgs
,
is_dñay¶Ÿ
,0);

4667 
c›1_ußbÀ
=1;

4669 i‡(
›code2
[
i
]==0) {

4670 sig√d 
é
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

4671 if(
é
>=0) {

4672 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>11)&0x1f],
é
);

4673 
	`emô_ªadw‹d_ödexed
(0,
é
,tl);

4676 i‡(
›code2
[
i
]==1) {

4677 sig√d 
é
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

4678 sig√d 
th
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]|64);

4679 if(
é
>=0) {

4680 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>11)&0x1f],
é
);

4681 if(
th
>=0Ë
	`emô_ªadw‹d_ödexed
(4,
é
,th);

4682 
	`emô_ªadw‹d_ödexed
(0,
é
,tl);

4685 i‡(
›code2
[
i
]==4) {

4686 sig√d 
¶
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

4687 sig√d 
ãmp
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,-1);

4688 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>11)&0x1f],
ãmp
);

4689 
	`emô_wrôew‹d_ödexed
(
¶
,0,
ãmp
);

4691 i‡(
›code2
[
i
]==5) {

4692 sig√d 
¶
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

4693 sig√d 
sh
=
rs1
[
i
]>0?
	`gë_ªg
(
i_ªgs
->
ªgm≠
,rs1[i]|64):
¶
;

4694 sig√d 
ãmp
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,-1);

4695 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>11)&0x1f],
ãmp
);

4696 
	`emô_wrôew‹d_ödexed
(
sh
,4,
ãmp
);

4697 
	`emô_wrôew‹d_ödexed
(
¶
,0,
ãmp
);

4699 i‡(
›code2
[
i
]==2)

4701 sig√d 
é
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

4702 if(
é
>=0) {

4703 
u_öt
 
c›r
=(
sour˚
[
i
]>>11)&0x1f;

4704 if(
c›r
==0Ë
	`emô_ªadw‹d
(()&
FCR0
,
é
);

4705 if(
c›r
==31Ë
	`emô_ªadw‹d
(()&
FCR31
,
é
);

4708 i‡(
›code2
[
i
]==6)

4710 sig√d 
¶
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

4711 
u_öt
 
c›r
=(
sour˚
[
i
]>>11)&0x1f;

4712 
	`as£π
(
¶
>=0);

4713 if(
c›r
==31)

4715 
	`emô_wrôew‹d
(
¶
,()&
FCR31
);

4724 
	`c›1_unußbÀ
(
i
, 
i_ªgs
);

4726 
	}
}

4728 
	$fc⁄v_as£mbÀ_¨m
(
i
,
ªg°©
 *
i_ªgs
)

4730 #i‚de‡
DISABLE_COP1


4731 sig√d 
ãmp
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,-1);

4732 
	`as£π
(
ãmp
>=0);

4734 if(!
c›1_ußbÀ
) {

4735 sig√d 
rs
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
CSREG
);

4736 
	`as£π
(
rs
>=0);

4737 
	`emô_ã°imm
(
rs
,0x20000000);

4738 
jaddr
=()
out
;

4739 
	`emô_jeq
(0);

4740 
	`add_°ub
(
FP_STUB
,
jaddr
,()
out
,
i
,
rs
,()
i_ªgs
,
is_dñay¶Ÿ
,0);

4741 
c›1_ußbÀ
=1;

4744 #if(
	`deföed
(
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
))

4745 if(
›code2
[
i
]==0x10&&(
sour˚
[i]&0x3f)==0x0d) {

4746 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>11)&0x1f],
ãmp
);

4747 
	`emô_Êds
(
ãmp
,15);

4748 
	`emô_·osizs
(15,15);

4749 if(((
sour˚
[
i
]>>11)&0x1f)!=((source[i]>>6)&0x1f))

4750 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>6)&0x1f],
ãmp
);

4751 
	`emô_f°s
(15,
ãmp
);

4754 if(
›code2
[
i
]==0x11&&(
sour˚
[i]&0x3f)==0x0d) {

4755 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>11)&0x1f],
ãmp
);

4756 
	`emô_vldr
(
ãmp
,7);

4757 
	`emô_·osizd
(7,13);

4758 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>6)&0x1f],
ãmp
);

4759 
	`emô_f°s
(13,
ãmp
);

4763 if(
›code2
[
i
]==0x14&&(
sour˚
[i]&0x3f)==0x20) {

4764 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>11)&0x1f],
ãmp
);

4765 
	`emô_Êds
(
ãmp
,13);

4766 if(((
sour˚
[
i
]>>11)&0x1f)!=((source[i]>>6)&0x1f))

4767 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>6)&0x1f],
ãmp
);

4768 
	`emô_fsôos
(13,15);

4769 
	`emô_f°s
(15,
ãmp
);

4772 if(
›code2
[
i
]==0x14&&(
sour˚
[i]&0x3f)==0x21) {

4773 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>11)&0x1f],
ãmp
);

4774 
	`emô_Êds
(
ãmp
,13);

4775 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>6)&0x1f],
ãmp
);

4776 
	`emô_fsôod
(13,7);

4777 
	`emô_v°r
(7,
ãmp
);

4781 if(
›code2
[
i
]==0x10&&(
sour˚
[i]&0x3f)==0x21) {

4782 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>11)&0x1f],
ãmp
);

4783 
	`emô_Êds
(
ãmp
,13);

4784 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>6)&0x1f],
ãmp
);

4785 
	`emô_fcvtds
(13,7);

4786 
	`emô_v°r
(7,
ãmp
);

4789 if(
›code2
[
i
]==0x11&&(
sour˚
[i]&0x3f)==0x20) {

4790 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>11)&0x1f],
ãmp
);

4791 
	`emô_vldr
(
ãmp
,7);

4792 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>6)&0x1f],
ãmp
);

4793 
	`emô_fcvtsd
(7,13);

4794 
	`emô_f°s
(13,
ãmp
);

4801 
u_öt
 
hr
,
ªgli°
=0;

4802 
hr
=0;hr<
HOST_REGS
;hr++) {

4803 if(
i_ªgs
->
ªgm≠
[
hr
]>=0Ë
ªgli°
|=1<<hr;

4805 
	`ßve_ªgs
(
ªgli°
);

4807 if(
›code2
[
i
]==0x14&&(
sour˚
[i]&0x3f)==0x20) {

4808 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

4809 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

4810 
	`emô_ˇŒ
(()
cvt_s_w
);

4812 if(
›code2
[
i
]==0x14&&(
sour˚
[i]&0x3f)==0x21) {

4813 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

4814 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

4815 
	`emô_ˇŒ
(()
cvt_d_w
);

4817 if(
›code2
[
i
]==0x15&&(
sour˚
[i]&0x3f)==0x20) {

4818 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

4819 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

4820 
	`emô_ˇŒ
(()
cvt_s_l
);

4822 if(
›code2
[
i
]==0x15&&(
sour˚
[i]&0x3f)==0x21) {

4823 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

4824 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

4825 
	`emô_ˇŒ
(()
cvt_d_l
);

4828 if(
›code2
[
i
]==0x10&&(
sour˚
[i]&0x3f)==0x21) {

4829 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

4830 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

4831 
	`emô_ˇŒ
(()
cvt_d_s
);

4833 if(
›code2
[
i
]==0x10&&(
sour˚
[i]&0x3f)==0x24) {

4834 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

4835 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

4836 
	`emô_ˇŒ
(()
cvt_w_s
);

4838 if(
›code2
[
i
]==0x10&&(
sour˚
[i]&0x3f)==0x25) {

4839 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

4840 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

4841 
	`emô_ˇŒ
(()
cvt_l_s
);

4844 if(
›code2
[
i
]==0x11&&(
sour˚
[i]&0x3f)==0x20) {

4845 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

4846 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

4847 
	`emô_ˇŒ
(()
cvt_s_d
);

4849 if(
›code2
[
i
]==0x11&&(
sour˚
[i]&0x3f)==0x24) {

4850 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

4851 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

4852 
	`emô_ˇŒ
(()
cvt_w_d
);

4854 if(
›code2
[
i
]==0x11&&(
sour˚
[i]&0x3f)==0x25) {

4855 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

4856 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

4857 
	`emô_ˇŒ
(()
cvt_l_d
);

4860 if(
›code2
[
i
]==0x10&&(
sour˚
[i]&0x3f)==0x08) {

4861 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

4862 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

4863 
	`emô_ˇŒ
(()
round_l_s
);

4865 if(
›code2
[
i
]==0x10&&(
sour˚
[i]&0x3f)==0x09) {

4866 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

4867 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

4868 
	`emô_ˇŒ
(()
åunc_l_s
);

4870 if(
›code2
[
i
]==0x10&&(
sour˚
[i]&0x3f)==0x0a) {

4871 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

4872 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

4873 
	`emô_ˇŒ
(()
˚û_l_s
);

4875 if(
›code2
[
i
]==0x10&&(
sour˚
[i]&0x3f)==0x0b) {

4876 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

4877 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

4878 
	`emô_ˇŒ
(()
Êo‹_l_s
);

4880 if(
›code2
[
i
]==0x10&&(
sour˚
[i]&0x3f)==0x0c) {

4881 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

4882 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

4883 
	`emô_ˇŒ
(()
round_w_s
);

4885 if(
›code2
[
i
]==0x10&&(
sour˚
[i]&0x3f)==0x0d) {

4886 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

4887 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

4888 
	`emô_ˇŒ
(()
åunc_w_s
);

4890 if(
›code2
[
i
]==0x10&&(
sour˚
[i]&0x3f)==0x0e) {

4891 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

4892 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

4893 
	`emô_ˇŒ
(()
˚û_w_s
);

4895 if(
›code2
[
i
]==0x10&&(
sour˚
[i]&0x3f)==0x0f) {

4896 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

4897 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

4898 
	`emô_ˇŒ
(()
Êo‹_w_s
);

4901 if(
›code2
[
i
]==0x11&&(
sour˚
[i]&0x3f)==0x08) {

4902 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

4903 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

4904 
	`emô_ˇŒ
(()
round_l_d
);

4906 if(
›code2
[
i
]==0x11&&(
sour˚
[i]&0x3f)==0x09) {

4907 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

4908 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

4909 
	`emô_ˇŒ
(()
åunc_l_d
);

4911 if(
›code2
[
i
]==0x11&&(
sour˚
[i]&0x3f)==0x0a) {

4912 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

4913 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

4914 
	`emô_ˇŒ
(()
˚û_l_d
);

4916 if(
›code2
[
i
]==0x11&&(
sour˚
[i]&0x3f)==0x0b) {

4917 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

4918 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

4919 
	`emô_ˇŒ
(()
Êo‹_l_d
);

4921 if(
›code2
[
i
]==0x11&&(
sour˚
[i]&0x3f)==0x0c) {

4922 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

4923 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

4924 
	`emô_ˇŒ
(()
round_w_d
);

4926 if(
›code2
[
i
]==0x11&&(
sour˚
[i]&0x3f)==0x0d) {

4927 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

4928 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

4929 
	`emô_ˇŒ
(()
åunc_w_d
);

4931 if(
›code2
[
i
]==0x11&&(
sour˚
[i]&0x3f)==0x0e) {

4932 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

4933 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

4934 
	`emô_ˇŒ
(()
˚û_w_d
);

4936 if(
›code2
[
i
]==0x11&&(
sour˚
[i]&0x3f)==0x0f) {

4937 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

4938 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

4939 
	`emô_ˇŒ
(()
Êo‹_w_d
);

4942 
	`ª°‹e_ªgs
(
ªgli°
);

4944 
	`c›1_unußbÀ
(
i
, 
i_ªgs
);

4946 
	}
}

4947 
	#fc⁄v_as£mbÀ
 
fc⁄v_as£mbÀ_¨m


	)

4949 
	$fcomp_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

4951 #i‚de‡
DISABLE_COP1


4952 sig√d 
fs
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
FSREG
);

4953 sig√d 
ãmp
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,-1);

4954 
	`as£π
(
ãmp
>=0);

4956 if(!
c›1_ußbÀ
) {

4957 sig√d 
cs
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
CSREG
);

4958 
	`as£π
(
cs
>=0);

4959 
	`emô_ã°imm
(
cs
,0x20000000);

4960 
jaddr
=()
out
;

4961 
	`emô_jeq
(0);

4962 
	`add_°ub
(
FP_STUB
,
jaddr
,()
out
,
i
,
cs
,()
i_ªgs
,
is_dñay¶Ÿ
,0);

4963 
c›1_ußbÀ
=1;

4966 if((
sour˚
[
i
]&0x3f)==0x30) {

4967 
	`emô_™dimm
(
fs
,~0x800000,fs);

4971 if((
sour˚
[
i
]&0x3e)==0x38) {

4973 
	`emô_™dimm
(
fs
,~0x800000,fs);

4977 #if(
	`deföed
(
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
))

4978 if(
›code2
[
i
]==0x10) {

4979 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>11)&0x1f],
ãmp
);

4980 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>16)&0x1f],
HOST_TEMPREG
);

4981 
	`emô_‹imm
(
fs
,0x800000,fs);

4982 
	`emô_Êds
(
ãmp
,14);

4983 
	`emô_Êds
(
HOST_TEMPREG
,15);

4984 
	`emô_fcmps
(14,15);

4985 
	`emô_fm°©
();

4986 if((
sour˚
[
i
]&0x3f)==0x31Ë
	`emô_bicvc_imm
(
fs
,0x800000,fs);

4987 if((
sour˚
[
i
]&0x3f)==0x32Ë
	`emô_bi˙e_imm
(
fs
,0x800000,fs);

4988 if((
sour˚
[
i
]&0x3f)==0x33Ë{
	`emô_bi˙e_imm
(
fs
,0x800000,fs);
	`emô_‹rvs_imm
(fs,0x800000,fs);}

4989 if((
sour˚
[
i
]&0x3f)==0x34Ë
	`emô_biccs_imm
(
fs
,0x800000,fs);

4990 if((
sour˚
[
i
]&0x3f)==0x35Ë{
	`emô_biccs_imm
(
fs
,0x800000,fs);
	`emô_‹rvs_imm
(fs,0x800000,fs);}

4991 if((
sour˚
[
i
]&0x3f)==0x36Ë
	`emô_bichi_imm
(
fs
,0x800000,fs);

4992 if((
sour˚
[
i
]&0x3f)==0x37Ë{
	`emô_bichi_imm
(
fs
,0x800000,fs);
	`emô_‹rvs_imm
(fs,0x800000,fs);}

4993 if((
sour˚
[
i
]&0x3f)==0x3aË
	`emô_bi˙e_imm
(
fs
,0x800000,fs);

4994 if((
sour˚
[
i
]&0x3f)==0x3bË
	`emô_bi˙e_imm
(
fs
,0x800000,fs);

4995 if((
sour˚
[
i
]&0x3f)==0x3cË
	`emô_biccs_imm
(
fs
,0x800000,fs);

4996 if((
sour˚
[
i
]&0x3f)==0x3dË
	`emô_biccs_imm
(
fs
,0x800000,fs);

4997 if((
sour˚
[
i
]&0x3f)==0x3eË
	`emô_bichi_imm
(
fs
,0x800000,fs);

4998 if((
sour˚
[
i
]&0x3f)==0x3fË
	`emô_bichi_imm
(
fs
,0x800000,fs);

5001 if(
›code2
[
i
]==0x11) {

5002 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>11)&0x1f],
ãmp
);

5003 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>16)&0x1f],
HOST_TEMPREG
);

5004 
	`emô_‹imm
(
fs
,0x800000,fs);

5005 
	`emô_vldr
(
ãmp
,6);

5006 
	`emô_vldr
(
HOST_TEMPREG
,7);

5007 
	`emô_fcmpd
(6,7);

5008 
	`emô_fm°©
();

5009 if((
sour˚
[
i
]&0x3f)==0x31Ë
	`emô_bicvc_imm
(
fs
,0x800000,fs);

5010 if((
sour˚
[
i
]&0x3f)==0x32Ë
	`emô_bi˙e_imm
(
fs
,0x800000,fs);

5011 if((
sour˚
[
i
]&0x3f)==0x33Ë{
	`emô_bi˙e_imm
(
fs
,0x800000,fs);
	`emô_‹rvs_imm
(fs,0x800000,fs);}

5012 if((
sour˚
[
i
]&0x3f)==0x34Ë
	`emô_biccs_imm
(
fs
,0x800000,fs);

5013 if((
sour˚
[
i
]&0x3f)==0x35Ë{
	`emô_biccs_imm
(
fs
,0x800000,fs);
	`emô_‹rvs_imm
(fs,0x800000,fs);}

5014 if((
sour˚
[
i
]&0x3f)==0x36Ë
	`emô_bichi_imm
(
fs
,0x800000,fs);

5015 if((
sour˚
[
i
]&0x3f)==0x37Ë{
	`emô_bichi_imm
(
fs
,0x800000,fs);
	`emô_‹rvs_imm
(fs,0x800000,fs);}

5016 if((
sour˚
[
i
]&0x3f)==0x3aË
	`emô_bi˙e_imm
(
fs
,0x800000,fs);

5017 if((
sour˚
[
i
]&0x3f)==0x3bË
	`emô_bi˙e_imm
(
fs
,0x800000,fs);

5018 if((
sour˚
[
i
]&0x3f)==0x3cË
	`emô_biccs_imm
(
fs
,0x800000,fs);

5019 if((
sour˚
[
i
]&0x3f)==0x3dË
	`emô_biccs_imm
(
fs
,0x800000,fs);

5020 if((
sour˚
[
i
]&0x3f)==0x3eË
	`emô_bichi_imm
(
fs
,0x800000,fs);

5021 if((
sour˚
[
i
]&0x3f)==0x3fË
	`emô_bichi_imm
(
fs
,0x800000,fs);

5028 
u_öt
 
hr
,
ªgli°
=0;

5029 
hr
=0;hr<
HOST_REGS
;hr++) {

5030 if(
i_ªgs
->
ªgm≠
[
hr
]>=0Ë
ªgli°
|=1<<hr;

5032 
ªgli°
&=~(1<<
fs
);

5033 
	`ßve_ªgs
(
ªgli°
);

5034 if(
›code2
[
i
]==0x10) {

5035 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

5036 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>16)&0x1f],
ARG2_REG
);

5037 if((
sour˚
[
i
]&0x3f)==0x30Ë
	`emô_ˇŒ
(()
c_f_s
);

5038 if((
sour˚
[
i
]&0x3f)==0x31Ë
	`emô_ˇŒ
(()
c_un_s
);

5039 if((
sour˚
[
i
]&0x3f)==0x32Ë
	`emô_ˇŒ
(()
c_eq_s
);

5040 if((
sour˚
[
i
]&0x3f)==0x33Ë
	`emô_ˇŒ
(()
c_ueq_s
);

5041 if((
sour˚
[
i
]&0x3f)==0x34Ë
	`emô_ˇŒ
(()
c_ﬁt_s
);

5042 if((
sour˚
[
i
]&0x3f)==0x35Ë
	`emô_ˇŒ
(()
c_u…_s
);

5043 if((
sour˚
[
i
]&0x3f)==0x36Ë
	`emô_ˇŒ
(()
c_ﬁe_s
);

5044 if((
sour˚
[
i
]&0x3f)==0x37Ë
	`emô_ˇŒ
(()
c_uÀ_s
);

5045 if((
sour˚
[
i
]&0x3f)==0x38Ë
	`emô_ˇŒ
(()
c_sf_s
);

5046 if((
sour˚
[
i
]&0x3f)==0x39Ë
	`emô_ˇŒ
(()
c_ngÀ_s
);

5047 if((
sour˚
[
i
]&0x3f)==0x3aË
	`emô_ˇŒ
(()
c_£q_s
);

5048 if((
sour˚
[
i
]&0x3f)==0x3bË
	`emô_ˇŒ
(()
c_ngl_s
);

5049 if((
sour˚
[
i
]&0x3f)==0x3cË
	`emô_ˇŒ
(()
c_…_s
);

5050 if((
sour˚
[
i
]&0x3f)==0x3dË
	`emô_ˇŒ
(()
c_nge_s
);

5051 if((
sour˚
[
i
]&0x3f)==0x3eË
	`emô_ˇŒ
(()
c_À_s
);

5052 if((
sour˚
[
i
]&0x3f)==0x3fË
	`emô_ˇŒ
(()
c_ngt_s
);

5054 if(
›code2
[
i
]==0x11) {

5055 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

5056 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>16)&0x1f],
ARG2_REG
);

5057 if((
sour˚
[
i
]&0x3f)==0x30Ë
	`emô_ˇŒ
(()
c_f_d
);

5058 if((
sour˚
[
i
]&0x3f)==0x31Ë
	`emô_ˇŒ
(()
c_un_d
);

5059 if((
sour˚
[
i
]&0x3f)==0x32Ë
	`emô_ˇŒ
(()
c_eq_d
);

5060 if((
sour˚
[
i
]&0x3f)==0x33Ë
	`emô_ˇŒ
(()
c_ueq_d
);

5061 if((
sour˚
[
i
]&0x3f)==0x34Ë
	`emô_ˇŒ
(()
c_ﬁt_d
);

5062 if((
sour˚
[
i
]&0x3f)==0x35Ë
	`emô_ˇŒ
(()
c_u…_d
);

5063 if((
sour˚
[
i
]&0x3f)==0x36Ë
	`emô_ˇŒ
(()
c_ﬁe_d
);

5064 if((
sour˚
[
i
]&0x3f)==0x37Ë
	`emô_ˇŒ
(()
c_uÀ_d
);

5065 if((
sour˚
[
i
]&0x3f)==0x38Ë
	`emô_ˇŒ
(()
c_sf_d
);

5066 if((
sour˚
[
i
]&0x3f)==0x39Ë
	`emô_ˇŒ
(()
c_ngÀ_d
);

5067 if((
sour˚
[
i
]&0x3f)==0x3aË
	`emô_ˇŒ
(()
c_£q_d
);

5068 if((
sour˚
[
i
]&0x3f)==0x3bË
	`emô_ˇŒ
(()
c_ngl_d
);

5069 if((
sour˚
[
i
]&0x3f)==0x3cË
	`emô_ˇŒ
(()
c_…_d
);

5070 if((
sour˚
[
i
]&0x3f)==0x3dË
	`emô_ˇŒ
(()
c_nge_d
);

5071 if((
sour˚
[
i
]&0x3f)==0x3eË
	`emô_ˇŒ
(()
c_À_d
);

5072 if((
sour˚
[
i
]&0x3f)==0x3fË
	`emô_ˇŒ
(()
c_ngt_d
);

5074 
	`ª°‹e_ªgs
(
ªgli°
);

5075 
	`emô_lﬂdªg
(
FSREG
,
fs
);

5077 
	`c›1_unußbÀ
(
i
, 
i_ªgs
);

5079 
	}
}

5081 
	$Êﬂt_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

5083 #i‚de‡
DISABLE_COP1


5084 sig√d 
ãmp
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,-1);

5085 
	`as£π
(
ãmp
>=0);

5087 if(!
c›1_ußbÀ
) {

5088 sig√d 
cs
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
CSREG
);

5089 
	`as£π
(
cs
>=0);

5090 
	`emô_ã°imm
(
cs
,0x20000000);

5091 
jaddr
=()
out
;

5092 
	`emô_jeq
(0);

5093 
	`add_°ub
(
FP_STUB
,
jaddr
,()
out
,
i
,
cs
,()
i_ªgs
,
is_dñay¶Ÿ
,0);

5094 
c›1_ußbÀ
=1;

5097 #if(
	`deföed
(
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
))

5098 if((
sour˚
[
i
]&0x3f)==6)

5100 if(((
sour˚
[
i
]>>11)&0x1f)!=((source[i]>>6)&0x1f)) {

5101 if(
›code2
[
i
]==0x10) {

5102 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>11)&0x1f],
ãmp
);

5103 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>6)&0x1f],
HOST_TEMPREG
);

5104 
	`emô_ªadw‹d_ödexed
(0,
ãmp
,temp);

5105 
	`emô_wrôew‹d_ödexed
(
ãmp
,0,
HOST_TEMPREG
);

5107 if(
›code2
[
i
]==0x11) {

5108 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>11)&0x1f],
ãmp
);

5109 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>6)&0x1f],
HOST_TEMPREG
);

5110 
	`emô_vldr
(
ãmp
,7);

5111 
	`emô_v°r
(7,
HOST_TEMPREG
);

5117 if((
sour˚
[
i
]&0x3f)>3)

5119 if(
›code2
[
i
]==0x10) {

5120 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>11)&0x1f],
ãmp
);

5121 
	`emô_Êds
(
ãmp
,15);

5122 if(((
sour˚
[
i
]>>11)&0x1f)!=((source[i]>>6)&0x1f)) {

5123 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>6)&0x1f],
ãmp
);

5125 if((
sour˚
[
i
]&0x3f)==4)

5126 
	`emô_fsqπs
(15,15);

5127 if((
sour˚
[
i
]&0x3f)==5)

5128 
	`emô_Ábss
(15,15);

5129 if((
sour˚
[
i
]&0x3f)==7)

5130 
	`emô_‚egs
(15,15);

5131 
	`emô_f°s
(15,
ãmp
);

5133 if(
›code2
[
i
]==0x11) {

5134 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>11)&0x1f],
ãmp
);

5135 
	`emô_vldr
(
ãmp
,7);

5136 if(((
sour˚
[
i
]>>11)&0x1f)!=((source[i]>>6)&0x1f)) {

5137 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>6)&0x1f],
ãmp
);

5139 if((
sour˚
[
i
]&0x3f)==4)

5140 
	`emô_fsqπd
(7,7);

5141 if((
sour˚
[
i
]&0x3f)==5)

5142 
	`emô_Ábsd
(7,7);

5143 if((
sour˚
[
i
]&0x3f)==7)

5144 
	`emô_‚egd
(7,7);

5145 
	`emô_v°r
(7,
ãmp
);

5149 if((
sour˚
[
i
]&0x3f)<4)

5151 if(
›code2
[
i
]==0x10) {

5152 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>11)&0x1f],
ãmp
);

5154 if(
›code2
[
i
]==0x11) {

5155 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>11)&0x1f],
ãmp
);

5157 if(((
sour˚
[
i
]>>11)&0x1f)!=((source[i]>>16)&0x1f)) {

5158 if(
›code2
[
i
]==0x10) {

5159 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>16)&0x1f],
HOST_TEMPREG
);

5160 
	`emô_Êds
(
ãmp
,15);

5161 
	`emô_Êds
(
HOST_TEMPREG
,13);

5162 if(((
sour˚
[
i
]>>11)&0x1f)!=((source[i]>>6)&0x1f)) {

5163 if(((
sour˚
[
i
]>>16)&0x1f)!=((source[i]>>6)&0x1f)) {

5164 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>6)&0x1f],
ãmp
);

5167 if((
sour˚
[
i
]&0x3f)==0Ë
	`emô_Ádds
(15,13,15);

5168 if((
sour˚
[
i
]&0x3f)==1Ë
	`emô_fsubs
(15,13,15);

5169 if((
sour˚
[
i
]&0x3f)==2Ë
	`emô_fmuls
(15,13,15);

5170 if((
sour˚
[
i
]&0x3f)==3Ë
	`emô_fdivs
(15,13,15);

5171 if(((
sour˚
[
i
]>>16)&0x1f)==((source[i]>>6)&0x1f)) {

5172 
	`emô_f°s
(15,
HOST_TEMPREG
);

5174 
	`emô_f°s
(15,
ãmp
);

5177 if(
›code2
[
i
]==0x11) {

5178 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>16)&0x1f],
HOST_TEMPREG
);

5179 
	`emô_vldr
(
ãmp
,7);

5180 
	`emô_vldr
(
HOST_TEMPREG
,6);

5181 if(((
sour˚
[
i
]>>11)&0x1f)!=((source[i]>>6)&0x1f)) {

5182 if(((
sour˚
[
i
]>>16)&0x1f)!=((source[i]>>6)&0x1f)) {

5183 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>6)&0x1f],
ãmp
);

5186 if((
sour˚
[
i
]&0x3f)==0Ë
	`emô_Áddd
(7,6,7);

5187 if((
sour˚
[
i
]&0x3f)==1Ë
	`emô_fsubd
(7,6,7);

5188 if((
sour˚
[
i
]&0x3f)==2Ë
	`emô_fmuld
(7,6,7);

5189 if((
sour˚
[
i
]&0x3f)==3Ë
	`emô_fdivd
(7,6,7);

5190 if(((
sour˚
[
i
]>>16)&0x1f)==((source[i]>>6)&0x1f)) {

5191 
	`emô_v°r
(7,
HOST_TEMPREG
);

5193 
	`emô_v°r
(7,
ãmp
);

5198 if(
›code2
[
i
]==0x10) {

5199 
	`emô_Êds
(
ãmp
,15);

5200 if(((
sour˚
[
i
]>>11)&0x1f)!=((source[i]>>6)&0x1f)) {

5201 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>6)&0x1f],
ãmp
);

5203 if((
sour˚
[
i
]&0x3f)==0Ë
	`emô_Ádds
(15,15,15);

5204 if((
sour˚
[
i
]&0x3f)==1Ë
	`emô_fsubs
(15,15,15);

5205 if((
sour˚
[
i
]&0x3f)==2Ë
	`emô_fmuls
(15,15,15);

5206 if((
sour˚
[
i
]&0x3f)==3Ë
	`emô_fdivs
(15,15,15);

5207 
	`emô_f°s
(15,
ãmp
);

5209 if(
›code2
[
i
]==0x11) {

5210 
	`emô_vldr
(
ãmp
,7);

5211 if(((
sour˚
[
i
]>>11)&0x1f)!=((source[i]>>6)&0x1f)) {

5212 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>6)&0x1f],
ãmp
);

5214 if((
sour˚
[
i
]&0x3f)==0Ë
	`emô_Áddd
(7,7,7);

5215 if((
sour˚
[
i
]&0x3f)==1Ë
	`emô_fsubd
(7,7,7);

5216 if((
sour˚
[
i
]&0x3f)==2Ë
	`emô_fmuld
(7,7,7);

5217 if((
sour˚
[
i
]&0x3f)==3Ë
	`emô_fdivd
(7,7,7);

5218 
	`emô_v°r
(7,
ãmp
);

5225 
u_öt
 
hr
,
ªgli°
=0;

5226 
hr
=0;hr<
HOST_REGS
;hr++) {

5227 if(
i_ªgs
->
ªgm≠
[
hr
]>=0Ë
ªgli°
|=1<<hr;

5229 if(
›code2
[
i
]==0x10) {

5230 
	`ßve_ªgs
(
ªgli°
);

5231 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

5232 if((
sour˚
[
i
]&0x3f)<4) {

5233 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>16)&0x1f],
ARG2_REG
);

5234 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>> 6)&0x1f],
ARG3_REG
);

5236 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

5238 
sour˚
[
i
]&0x3f)

5240 0x00: 
	`emô_ˇŒ
(()
add_s
);;

5241 0x01: 
	`emô_ˇŒ
(()
sub_s
);;

5242 0x02: 
	`emô_ˇŒ
(()
mul_s
);;

5243 0x03: 
	`emô_ˇŒ
(()
div_s
);;

5244 0x04: 
	`emô_ˇŒ
(()
sqπ_s
);;

5245 0x05: 
	`emô_ˇŒ
(()
abs_s
);;

5246 0x06: 
	`emô_ˇŒ
(()
mov_s
);;

5247 0x07: 
	`emô_ˇŒ
(()
√g_s
);;

5249 
	`ª°‹e_ªgs
(
ªgli°
);

5251 if(
›code2
[
i
]==0x11) {

5252 
	`ßve_ªgs
(
ªgli°
);

5253 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>11)&0x1f],
ARG1_REG
);

5254 if((
sour˚
[
i
]&0x3f)<4) {

5255 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>16)&0x1f],
ARG2_REG
);

5256 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>> 6)&0x1f],
ARG3_REG
);

5258 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>> 6)&0x1f],
ARG2_REG
);

5260 
sour˚
[
i
]&0x3f)

5262 0x00: 
	`emô_ˇŒ
(()
add_d
);;

5263 0x01: 
	`emô_ˇŒ
(()
sub_d
);;

5264 0x02: 
	`emô_ˇŒ
(()
mul_d
);;

5265 0x03: 
	`emô_ˇŒ
(()
div_d
);;

5266 0x04: 
	`emô_ˇŒ
(()
sqπ_d
);;

5267 0x05: 
	`emô_ˇŒ
(()
abs_d
);;

5268 0x06: 
	`emô_ˇŒ
(()
mov_d
);;

5269 0x07: 
	`emô_ˇŒ
(()
√g_d
);;

5271 
	`ª°‹e_ªgs
(
ªgli°
);

5274 
	`c›1_unußbÀ
(
i
, 
i_ªgs
);

5276 
	}
}

5278 
	$mu…div_as£mbÀ_¨m
(
i
,
ªg°©
 *
i_ªgs
)

5288 if(
rs1
[
i
]&&
rs2
[i])

5290 if((
›code2
[
i
]&4)==0)

5292 if(
›code2
[
i
]==0x18)

5294 sig√d 
m1
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

5295 sig√d 
m2
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]);

5296 sig√d 
hi
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
HIREG
);

5297 sig√d 
lo
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
LOREG
);

5298 
	`as£π
(
m1
>=0);

5299 
	`as£π
(
m2
>=0);

5300 
	`as£π
(
hi
>=0);

5301 
	`as£π
(
lo
>=0);

5302 
	`emô_smuŒ
(
m1
,
m2
,
hi
,
lo
);

5304 if(
›code2
[
i
]==0x19)

5306 sig√d 
m1
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

5307 sig√d 
m2
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]);

5308 sig√d 
hi
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
HIREG
);

5309 sig√d 
lo
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
LOREG
);

5310 
	`as£π
(
m1
>=0);

5311 
	`as£π
(
m2
>=0);

5312 
	`as£π
(
hi
>=0);

5313 
	`as£π
(
lo
>=0);

5314 
	`emô_umuŒ
(
m1
,
m2
,
hi
,
lo
);

5316 if(
›code2
[
i
]==0x1A)

5318 sig√d 
d1
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

5319 sig√d 
d2
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]);

5320 
	`as£π
(
d1
>=0);

5321 
	`as£π
(
d2
>=0);

5322 sig√d 
quŸõ¡
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
LOREG
);

5323 sig√d 
ªmaödî
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
HIREG
);

5324 
	`as£π
(
quŸõ¡
>=0);

5325 
	`as£π
(
ªmaödî
>=0);

5326 
	`emô_movs
(
d1
,
ªmaödî
);

5327 
	`emô_movimm
(0xffffffff,
quŸõ¡
);

5328 
	`emô_√gmi
(
quŸõ¡
,quotient);

5329 
	`emô_√gmi
(
ªmaödî
,remainder);

5330 
	`emô_movs
(
d2
,
HOST_TEMPREG
);

5331 
	`emô_jeq
(()
out
+52);

5332 
	`emô_√gsmi
(
HOST_TEMPREG
,HOST_TEMPREG);

5333 #ifde‡
HAVE_ARMV5


5334 
	`emô_˛z
(
HOST_TEMPREG
,
quŸõ¡
);

5335 
	`emô_shl
(
HOST_TEMPREG
,
quŸõ¡
,HOST_TEMPREG);

5337 
	`emô_movimm
(0,
quŸõ¡
);

5338 
	`emô_add∂_imm
(
quŸõ¡
,1,quotient);

5339 
	`emô_l¶∂s_imm
(
HOST_TEMPREG
,1,HOST_TEMPREG);

5340 
	`emô_jns
(()
out
-2*4);

5342 
	`emô_‹imm
(
quŸõ¡
,1<<31,quotient);

5343 
	`emô_shr
(
quŸõ¡
,quotient,quotient);

5344 
	`emô_cmp
(
ªmaödî
,
HOST_TEMPREG
);

5345 
	`emô_subcs
(
ªmaödî
,
HOST_TEMPREG
,remainder);

5346 
	`emô_adcs
(
quŸõ¡
,quotient,quotient);

5347 
	`emô_shrimm
(
HOST_TEMPREG
,1,HOST_TEMPREG);

5348 
	`emô_jcc
(()
out
-16);

5349 
	`emô_ãq
(
d1
,
d2
);

5350 
	`emô_√gmi
(
quŸõ¡
,quotient);

5351 
	`emô_ã°
(
d1
,d1);

5352 
	`emô_√gmi
(
ªmaödî
,remainder);

5354 if(
›code2
[
i
]==0x1B)

5356 sig√d 
d1
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

5357 sig√d 
d2
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]);

5358 
	`as£π
(
d1
>=0);

5359 
	`as£π
(
d2
>=0);

5360 sig√d 
quŸõ¡
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
LOREG
);

5361 sig√d 
ªmaödî
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
HIREG
);

5362 
	`as£π
(
quŸõ¡
>=0);

5363 
	`as£π
(
ªmaödî
>=0);

5364 
	`emô_mov
(
d1
,
ªmaödî
);

5365 
	`emô_movimm
(0xffffffff,
quŸõ¡
);

5366 
	`emô_ã°
(
d2
,d2);

5367 
	`emô_jeq
(()
out
+40);

5368 #ifde‡
HAVE_ARMV5


5369 
	`emô_˛z
(
d2
,
HOST_TEMPREG
);

5370 
	`emô_movimm
(1<<31,
quŸõ¡
);

5371 
	`emô_shl
(
d2
,
HOST_TEMPREG
,d2);

5373 
	`emô_movimm
(0,
HOST_TEMPREG
);

5374 
	`emô_add∂_imm
(
HOST_TEMPREG
,1,HOST_TEMPREG);

5375 
	`emô_l¶∂s_imm
(
d2
,1,d2);

5376 
	`emô_jns
(()
out
-2*4);

5377 
	`emô_movimm
(1<<31,
quŸõ¡
);

5379 
	`emô_shr
(
quŸõ¡
,
HOST_TEMPREG
,quotient);

5380 
	`emô_cmp
(
ªmaödî
,
d2
);

5381 
	`emô_subcs
(
ªmaödî
,
d2
,remainder);

5382 
	`emô_adcs
(
quŸõ¡
,quotient,quotient);

5383 
	`emô_shrcc_imm
(
d2
,1,d2);

5384 
	`emô_jcc
(()
out
-16);

5388 #i‚de‡
FORCE32


5390 if(
›code2
[
i
]==0x1C)

5392 
	`as£π
(
›code2
[
i
]!=0x1C);

5393 sig√d 
m1h
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]|64);

5394 sig√d 
m1l
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

5395 sig√d 
m2h
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]|64);

5396 sig√d 
m2l
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]);

5397 
	`as£π
(
m1h
>=0);

5398 
	`as£π
(
m2h
>=0);

5399 
	`as£π
(
m1l
>=0);

5400 
	`as£π
(
m2l
>=0);

5401 
	`emô_pushªg
(
m2h
);

5402 
	`emô_pushªg
(
m2l
);

5403 
	`emô_pushªg
(
m1h
);

5404 
	`emô_pushªg
(
m1l
);

5405 
	`emô_ˇŒ
(()&
mu…64
);

5406 
	`emô_p›ªg
(
m1l
);

5407 
	`emô_p›ªg
(
m1h
);

5408 
	`emô_p›ªg
(
m2l
);

5409 
	`emô_p›ªg
(
m2h
);

5410 sig√d 
hih
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
HIREG
|64);

5411 sig√d 
hû
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
HIREG
);

5412 if(
hih
>=0Ë
	`emô_lﬂdªg
(
HIREG
|64,hih);

5413 if(
hû
>=0Ë
	`emô_lﬂdªg
(
HIREG
,hil);

5414 sig√d 
loh
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
LOREG
|64);

5415 sig√d 
lﬁ
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
LOREG
);

5416 if(
loh
>=0Ë
	`emô_lﬂdªg
(
LOREG
|64,loh);

5417 if(
lﬁ
>=0Ë
	`emô_lﬂdªg
(
LOREG
,lol);

5419 if(
›code2
[
i
]==0x1D)

5421 sig√d 
m1h
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]|64);

5422 sig√d 
m1l
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

5423 sig√d 
m2h
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]|64);

5424 sig√d 
m2l
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]);

5425 
	`as£π
(
m1h
>=0);

5426 
	`as£π
(
m2h
>=0);

5427 
	`as£π
(
m1l
>=0);

5428 
	`as£π
(
m2l
>=0);

5429 
	`ßve_ªgs
(
CALLER_SAVE_REGS
);

5430 if(
m1l
!=0Ë
	`emô_mov
(m1l,0);

5431 if(
m1h
==0Ë
	`emô_ªadw‹d
(()&
dy«ªc_loˇl
,1);

5432 if(
m1h
>1Ë
	`emô_mov
(m1h,1);

5433 if(
m2l
<2Ë
	`emô_ªadw‹d
(()&
dy«ªc_loˇl
+m2l*4,2);

5434 if(
m2l
>2Ë
	`emô_mov
(m2l,2);

5435 if(
m2h
<3Ë
	`emô_ªadw‹d
(()&
dy«ªc_loˇl
+m2h*4,3);

5436 if(
m2h
>3Ë
	`emô_mov
(m2h,3);

5437 
	`emô_ˇŒ
(()&
mu…u64
);

5438 
	`ª°‹e_ªgs
(
CALLER_SAVE_REGS
);

5439 sig√d 
hih
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
HIREG
|64);

5440 sig√d 
hû
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
HIREG
);

5441 sig√d 
loh
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
LOREG
|64);

5442 sig√d 
lﬁ
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
LOREG
);

5499 if(
›code2
[
i
]==0x1E)

5501 sig√d 
d1h
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]|64);

5502 sig√d 
d1l
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

5503 sig√d 
d2h
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]|64);

5504 sig√d 
d2l
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]);

5505 
	`as£π
(
d1h
>=0);

5506 
	`as£π
(
d2h
>=0);

5507 
	`as£π
(
d1l
>=0);

5508 
	`as£π
(
d2l
>=0);

5509 
	`ßve_ªgs
(
CALLER_SAVE_REGS
);

5510 if(
d1l
!=0Ë
	`emô_mov
(d1l,0);

5511 if(
d1h
==0Ë
	`emô_ªadw‹d
(()&
dy«ªc_loˇl
,1);

5512 if(
d1h
>1Ë
	`emô_mov
(d1h,1);

5513 if(
d2l
<2Ë
	`emô_ªadw‹d
(()&
dy«ªc_loˇl
+d2l*4,2);

5514 if(
d2l
>2Ë
	`emô_mov
(d2l,2);

5515 if(
d2h
<3Ë
	`emô_ªadw‹d
(()&
dy«ªc_loˇl
+d2h*4,3);

5516 if(
d2h
>3Ë
	`emô_mov
(d2h,3);

5517 
	`emô_ˇŒ
(()&
div64
);

5518 
	`ª°‹e_ªgs
(
CALLER_SAVE_REGS
);

5519 sig√d 
hih
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
HIREG
|64);

5520 sig√d 
hû
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
HIREG
);

5521 sig√d 
loh
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
LOREG
|64);

5522 sig√d 
lﬁ
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
LOREG
);

5523 if(
hih
>=0Ë
	`emô_lﬂdªg
(
HIREG
|64,hih);

5524 if(
hû
>=0Ë
	`emô_lﬂdªg
(
HIREG
,hil);

5525 if(
loh
>=0Ë
	`emô_lﬂdªg
(
LOREG
|64,loh);

5526 if(
lﬁ
>=0Ë
	`emô_lﬂdªg
(
LOREG
,lol);

5528 if(
›code2
[
i
]==0x1F)

5534 sig√d 
d1h
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]|64);

5535 sig√d 
d1l
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

5536 sig√d 
d2h
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]|64);

5537 sig√d 
d2l
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]);

5538 
	`as£π
(
d1h
>=0);

5539 
	`as£π
(
d2h
>=0);

5540 
	`as£π
(
d1l
>=0);

5541 
	`as£π
(
d2l
>=0);

5542 
	`ßve_ªgs
(
CALLER_SAVE_REGS
);

5543 if(
d1l
!=0Ë
	`emô_mov
(d1l,0);

5544 if(
d1h
==0Ë
	`emô_ªadw‹d
(()&
dy«ªc_loˇl
,1);

5545 if(
d1h
>1Ë
	`emô_mov
(d1h,1);

5546 if(
d2l
<2Ë
	`emô_ªadw‹d
(()&
dy«ªc_loˇl
+d2l*4,2);

5547 if(
d2l
>2Ë
	`emô_mov
(d2l,2);

5548 if(
d2h
<3Ë
	`emô_ªadw‹d
(()&
dy«ªc_loˇl
+d2h*4,3);

5549 if(
d2h
>3Ë
	`emô_mov
(d2h,3);

5550 
	`emô_ˇŒ
(()&
divu64
);

5551 
	`ª°‹e_ªgs
(
CALLER_SAVE_REGS
);

5552 sig√d 
hih
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
HIREG
|64);

5553 sig√d 
hû
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
HIREG
);

5554 sig√d 
loh
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
LOREG
|64);

5555 sig√d 
lﬁ
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
LOREG
);

5556 if(
hih
>=0Ë
	`emô_lﬂdªg
(
HIREG
|64,hih);

5557 if(
hû
>=0Ë
	`emô_lﬂdªg
(
HIREG
,hil);

5558 if(
loh
>=0Ë
	`emô_lﬂdªg
(
LOREG
|64,loh);

5559 if(
lﬁ
>=0Ë
	`emô_lﬂdªg
(
LOREG
,lol);

5563 
	`as£π
(0);

5571 sig√d 
hr
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
HIREG
);

5572 sig√d 
Ã
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
LOREG
);

5573 if(
hr
>=0Ë
	`emô_zî‹eg
(hr);

5574 if(
Ã
>=0Ë
	`emô_zî‹eg
(lr);

5576 
	}
}

5577 
	#mu…div_as£mbÀ
 
mu…div_as£mbÀ_¨m


	)

5579 
	$do_¥ñﬂd_rhash
(
r
) {

5582 
	}
}

5584 
	$do_¥ñﬂd_rhtbl
(
ht
) {

5585 
	`emô_addimm
(
FP
,()&
möi_ht
-()&
dy«ªc_loˇl
,
ht
);

5586 
	}
}

5588 
	$do_rhash
(
rs
,
rh
) {

5589 
	`emô_™dimm
(
rs
,0xf8,
rh
);

5590 
	}
}

5592 
	$do_möiht_lﬂd
(
ht
,
rh
) {

5593 
	`as£m_debug
("ld∏%s,[%s,%s]!\n",
ªg«me
[
rh
],ªg«me[
ht
],regname[rh]);

5594 
	`ouçut_w32
(0xe7b00000|
	`rd_∫_rm
(
rh
,
ht
,rh));

5595 
	}
}

5597 
	$do_möiht_jump
(
rs
,
rh
,
ht
) {

5598 
	`emô_cmp
(
rh
,
rs
);

5599 
	`emô_ldªq_ödexed
(
ht
,4,15);

5600 #ifde‡
CORTEX_A8_BRANCH_PREDICTION_HACK


5601 
	`emô_mov
(
rs
,7);

5602 
	`emô_jmp
(
jump_vaddr_ªg
[7]);

5604 
	`emô_jmp
(
jump_vaddr_ªg
[
rs
]);

5606 
	}
}

5608 
	$do_möiht_ö£π
(
u_öt
 
ªtu∫_addªss
,
π
,
ãmp
) {

5609 #i‚de‡
HAVE_ARMV7


5610 
	`emô_movimm
(
ªtu∫_addªss
,
π
);

5611 
	`add_to_lökî
(()
out
,
ªtu∫_addªss
,1);

5612 
	`emô_p¸ñaddr
(
ãmp
);

5613 
	`emô_wrôew‹d
(
π
,()&
möi_ht
[(
ªtu∫_addªss
&0xFF)>>3][0]);

5614 
	`emô_wrôew‹d
(
ãmp
,()&
möi_ht
[(
ªtu∫_addªss
&0xFF)>>3][1]);

5616 
	`emô_movw
(
ªtu∫_addªss
&0x0000FFFF,
π
);

5617 
	`add_to_lökî
(()
out
,
ªtu∫_addªss
,1);

5618 
	`emô_p¸ñaddr
(
ãmp
);

5619 
	`emô_wrôew‹d
(
ãmp
,()&
möi_ht
[(
ªtu∫_addªss
&0xFF)>>3][1]);

5620 
	`emô_movt
(
ªtu∫_addªss
&0xFFFF0000,
π
);

5621 
	`emô_wrôew‹d
(
π
,()&
möi_ht
[(
ªtu∫_addªss
&0xFF)>>3][0]);

5623 
	}
}

5629 
	$wb_sx
(sig√d 
¥e
[],sig√d 
íåy
[],
uöt64_t
 
dúty
,uöt64_à
is32_¥e
,uöt64_à
is32
,uöt64_à
u
,uöt64_à
uu
)

5631 #i‚de‡
FORCE32


5632 if(
is32_¥e
==
is32
) ;

5633 
hr
,
ªg
;

5634 
hr
=0;hr<
HOST_REGS
;hr++) {

5635 if(
hr
!=
EXCLUDE_REG
) {

5637 if((
ªg
=
¥e
[
hr
])>=0) {

5638 if((
dúty
>>
hr
)&1) {

5639 if–((
is32_¥e
&~
is32
&~
uu
)>>
ªg
)&1 ) {

5640 
	`emô_ßrimm
(
hr
,31,
HOST_TEMPREG
);

5641 
	`emô_°‹îeg
(
ªg
|64,
HOST_TEMPREG
);

5649 
	}
}

5651 
	$wb_vÆid
(sig√d 
¥e
[],sig√d 
íåy
[],
u_öt
 
dúty_¥e
,u_öà
dúty
,
uöt64_t
 
is32_¥e
,uöt64_à
u
,uöt64_à
uu
)

5654 
hr
,
ªg
,
√w_hr
;

5655 
hr
=0;hr<
HOST_REGS
;hr++) {

5656 if(
hr
!=
EXCLUDE_REG
) {

5657 
ªg
=
¥e
[
hr
];

5658 if(((~
u
)>>(
ªg
&63))&1) {

5659 if(
ªg
>0) {

5660 if(((
dúty_¥e
&~
dúty
)>>
hr
)&1) {

5661 if(
ªg
>0&&reg<34) {

5662 
	`emô_°‹îeg
(
ªg
,
hr
);

5663 if–((
is32_¥e
&~
uu
)>>
ªg
)&1 ) {

5664 
	`emô_ßrimm
(
hr
,31,
HOST_TEMPREG
);

5665 
	`emô_°‹îeg
(
ªg
|64,
HOST_TEMPREG
);

5668 if(
ªg
>=64) {

5669 
	`emô_°‹îeg
(
ªg
,
hr
);

5676 
	}
}

5737 
	$do_˛ór_ˇche
()

5739 
i
,
j
;

5740 
i
=0;i<(1<<(
TARGET_SIZE_2
-17));i++)

5742 
u_öt
 
bôm≠
=
√eds_˛ór_ˇche
[
i
];

5743 if(
bôm≠
) {

5744 
u_öt
 
°¨t
,
íd
;

5745 
j
=0;j<32;j++)

5747 if(
bôm≠
&(1<<
j
)) {

5748 
°¨t
=(
u_öt
)
BASE_ADDR
+
i
*131072+
j
*4096;

5749 
íd
=
°¨t
+4095;

5750 
j
++;

5751 
j
<32) {

5752 if(
bôm≠
&(1<<
j
)) {

5753 
íd
+=4096;

5754 
j
++;

5756 
	`__˛ór_ˇche
((*)
°¨t
,(*)
íd
);

5762 
√eds_˛ór_ˇche
[
i
]=0;

5765 
	}
}

5768 
	$¨ch_öô
() {

5769 #i‚de‡
DISABLE_COP1


5770 
roundög_modes
[0]=0x0<<22;

5771 
roundög_modes
[1]=0x3<<22;

5772 
roundög_modes
[2]=0x1<<22;

5773 
roundög_modes
[3]=0x2<<22;

5775 
	}
}

	@libpcsxcore/new_dynarec/assem_arm.h

1 
	#HOST_REGS
 13

	)

2 
	#HOST_CCREG
 10

	)

3 
	#HOST_BTREG
 8

	)

4 
	#EXCLUDE_REG
 11

	)

6 
	#HOST_IMM8
 1

	)

7 
	#HAVE_CMOV_IMM
 1

	)

8 
	#CORTEX_A8_BRANCH_PREDICTION_HACK
 1

	)

9 
	#USE_MINI_HT
 1

	)

11 
	#HAVE_CONDITIONAL_CALL
 1

	)

12 
	#DISABLE_TLB
 1

	)

14 
	#FORCE32
 1

	)

15 
	#DISABLE_COP1
 1

	)

16 
	#PCSX
 1

	)

17 
	#RAM_SIZE
 0x200000

	)

19 #i‚de‡
__ARM_ARCH_7A__


24 #i‚de‡
BASE_ADDR_FIXED


25 
	#BASE_ADDR_FIXED
 0

	)

28 #ifde‡
FORCE32


29 
	#REG_SHIFT
 2

	)

31 
	#REG_SHIFT
 3

	)

38 
	#ARG1_REG
 0

	)

39 
	#ARG2_REG
 1

	)

40 
	#ARG3_REG
 2

	)

41 
	#ARG4_REG
 3

	)

51 
	#FP
 11

	)

52 
	#LR
 14

	)

53 
	#HOST_TEMPREG
 14

	)

58 *
övc_±r
;

60 
	#TARGET_SIZE_2
 24

61 

	)

63 #i‡
BASE_ADDR_FIXED


65 
	#BASE_ADDR
 0x1000000

	)

67 
å™¶©i⁄_ˇche
[1 << 
TARGET_SIZE_2
];

68 
	#BASE_ADDR
 (
u_öt
)
å™¶©i⁄_ˇche


	)

	@libpcsxcore/new_dynarec/emu_if.c

8 
	~<°dio.h
>

10 
	~"emu_if.h
"

11 
	~"pcsxmem.h
"

12 
	~"../psxhÀ.h
"

13 
	~"../r3000a.h
"

14 
	~"../cdrom.h
"

15 
	~"../psxdma.h
"

16 
	~"../mdec.h
"

17 
	~"../gã_¨m.h
"

18 
	~"../gã_√⁄.h
"

19 
	#FLAGLESS


	)

20 
	~"../gã.h
"

22 
	#ARRAY_SIZE
(
x
Ë((xË/ (x[0]))

	)

25 
	#ev¥ötf
(...)

	)

27 
	gövÆid_code
[0x100000];

28 
u32
 
	gs¸©ch_buf
[8*8*2] 
__©åibuã__
((
Æig√d
(64)));

29 
u32
 
	gevít_cy˛es
[
PSXINT_COUNT
];

31 
	$scheduÀ_time¶i˚
()

33 
u32
 
i
, 
c
 = 
psxRegs
.
cy˛e
;

34 
u32
 
úqs
 = 
psxRegs
.
öãºu±
;

35 
s32
 
mö
, 
dif
;

37 
mö
 = 
PSXCLK
;

38 
i
 = 0; 
úqs
 != 0; i++, irqs >>= 1) {

39 i‡(!(
úqs
 & 1))

41 
dif
 = 
evít_cy˛es
[
i
] - 
c
;

43 i‡(0 < 
dif
 && di‡< 
mö
)

44 
mö
 = 
dif
;

46 
√xt_öãru±
 = 
c
 + 
mö
;

47 
	}
}

49 (
	gúq_func
)();

51 
úq_func
 * c⁄° 
	gúq_funcs
[] = {

52 [
PSXINT_SIO
] = 
sioI¡îru±
,

53 [
PSXINT_CDR
] = 
cdrI¡îru±
,

54 [
PSXINT_CDREAD
] = 
cdrRódI¡îru±
,

55 [
PSXINT_GPUDMA
] = 
gpuI¡îru±
,

56 [
PSXINT_MDECOUTDMA
] = 
mdec1I¡îru±
,

57 [
PSXINT_SPUDMA
] = 
•uI¡îru±
,

58 [
PSXINT_MDECINDMA
] = 
mdec0I¡îru±
,

59 [
PSXINT_GPUOTCDMA
] = 
gpuŸcI¡îru±
,

60 [
PSXINT_CDRDMA
] = 
cdrDmaI¡îru±
,

61 [
PSXINT_CDRLID
] = 
cdrLidSìkI¡îru±
,

62 [
PSXINT_CDRPLAY
] = 
cdrPœyI¡îru±
,

63 [
PSXINT_SPU_UPDATE
] = 
•uUpd©e
,

64 [
PSXINT_RCNT
] = 
psxR˙tUpd©e
,

68 
	$úq_ã°
()

70 
u32
 
úqs
 = 
psxRegs
.
öãºu±
;

71 
u32
 
cy˛e
 = 
psxRegs
.cycle;

72 
u32
 
úq
, 
úq_bôs
;

75 
psxRegs
.
öãºu±
 = 0;

77 
úq
 = 0, 
úq_bôs
 = 
úqs
; irq_bits != 0; irq++, irq_bits >>= 1) {

78 i‡(!(
úq_bôs
 & 1))

80 i‡((
s32
)(
cy˛e
 - 
evít_cy˛es
[
úq
]) >= 0) {

81 
úqs
 &~(1 << 
úq
);

82 
úq_funcs
[
úq
]();

85 
psxRegs
.
öãºu±
 |
úqs
;

87 i‡((
	`psxHu32
(0x1070Ë&ÖsxHu32(0x1074)Ë&& (
Sètus
 & 0x401) == 0x401) {

88 
	`psxEx˚±i⁄
(0x400, 0);

89 
≥ndög_ex˚±i⁄
 = 1;

91 
	}
}

93 
	$gí_öãru±
()

95 
	`ev¥ötf
(" +gê%08x, %u->%u\n", 
psxRegs
.
pc
,ÖsxRegs.
cy˛e
, 
√xt_öãru±
);

97 
	`úq_ã°
();

101 
	`scheduÀ_time¶i˚
();

103 
	`ev¥ötf
(" -gê%08x, %u->%u (%d)\n", 
psxRegs
.
pc
,ÖsxRegs.
cy˛e
,

104 
√xt_öãru±
,Çext_öãru± - 
psxRegs
.
cy˛e
);

105 
	}
}

108 
MTC0
(
ªg
, 
u32
 
vÆ
);

110 
	$pcsx_mtc0
(
u32
 
ªg
, u32 
vÆ
)

112 
	`ev¥ötf
("MTC0 %d #%x @%08x %u\n", 
ªg
, 
vÆ
, 
psxRegs
.
pc
,ÖsxRegs.
cy˛e
);

113 
	`MTC0
(
ªg
, 
vÆ
);

114 
	`gí_öãru±
();

115 i‡(
Cau£
 & 
Sètus
 & 0x0300)

116 
≥ndög_ex˚±i⁄
 = 1;

117 
	}
}

119 
	$pcsx_mtc0_ds
(
u32
 
ªg
, u32 
vÆ
)

121 
	`ev¥ötf
("MTC0 %d #%x @%08x %u\n", 
ªg
, 
vÆ
, 
psxRegs
.
pc
,ÖsxRegs.
cy˛e
);

122 
	`MTC0
(
ªg
, 
vÆ
);

123 
	}
}

125 
	$√w_dy«_bef‹e_ßve
()

127 
psxRegs
.
öãºu±
 &~(1 << 
PSXINT_RCNT
);

130 
	}
}

132 
	$√w_dy«_a·î_ßve
()

134 
psxRegs
.
öãºu±
 |1 << 
PSXINT_RCNT
;

135 
	}
}

137 
	$√w_dy«_ª°‹e
()

139 
i
;

140 
i
 = 0; i < 
PSXINT_COUNT
; i++)

141 
evít_cy˛es
[
i
] = 
psxRegs
.
ötCy˛e
[i].
sCy˛e
 +ÖsxRegs.ötCy˛e[i].
cy˛e
;

143 
evít_cy˛es
[
PSXINT_RCNT
] = 
psxNextsCou¡î
 + 
psxNextCou¡î
;

144 
psxRegs
.
öãºu±
 |1 << 
PSXINT_RCNT
;

145 
psxRegs
.
öãºu±
 &(1 << 
PSXINT_COUNT
) - 1;

147 
	`√w_dy«_pcsx_mem_lﬂd_°©e
();

148 
	}
}

150 
	$√w_dy«_‰ìze
(*
f
, 
mode
)

152 c⁄° 
hódî_ßve
[8] = "ariblks";

153 
uöt32_t
 
addrs
[1024 * 4];

154 
öt32_t
 
size
 = 0;

155 
byãs
;

156 
hódî
[8];

158 i‡(
mode
 != 0) {

159 
size
 = 
	`√w_dy«ªc_ßve_blocks
(
addrs
, (addrs));

160 i‡(
size
 == 0)

163 
SaveFuncs
.
	`wrôe
(
f
, 
hódî_ßve
, (header_save));

164 
SaveFuncs
.
	`wrôe
(
f
, &
size
, (size));

165 
SaveFuncs
.
	`wrôe
(
f
, 
addrs
, 
size
);

168 
	`√w_dy«_ª°‹e
();

170 
byãs
 = 
SaveFuncs
.
	`ªad
(
f
, 
hódî
, (header));

171 i‡(
byãs
 !(
hódî
Ë|| 
	`°rcmp
(hódî, 
hódî_ßve
)) {

172 i‡(
byãs
 > 0)

173 
SaveFuncs
.
	`£ek
(
f
, -
byãs
, 
SEEK_CUR
);

176 
SaveFuncs
.
	`ªad
(
f
, &
size
, (size));

177 i‡(
size
 <= 0)

179 i‡(
size
 > (
addrs
)) {

180 
byãs
 = 
size
 - (
addrs
);

181 
SaveFuncs
.
	`£ek
(
f
, 
byãs
, 
SEEK_CUR
);

182 
size
 = (
addrs
);

184 
byãs
 = 
SaveFuncs
.
	`ªad
(
f
, 
addrs
, 
size
);

185 i‡(
byãs
 !
size
)

188 
	`√w_dy«ªc_lﬂd_blocks
(
addrs
, 
size
);

192 
	}
}

195 *
	ggã_h™dÀrs
[64];

197 *
	ggã_h™dÀrs_nf
[64] = {

198 
NULL
 , 
gãRTPS_nf
 , NULL , NULL , NULL , NULL , 
gãNCLIP_nf
, NULL ,

199 
NULL
 , NULL , NULL , NULL , 
gãOP_nf
 , NULL , NULL , NULL ,

200 
gãDPCS_nf
, 
gãINTPL_nf
, 
gãMVMVA_nf
, 
gãNCDS_nf
, 
gãCDP_nf
, 
NULL
 , 
gãNCDT_nf
 , NULL ,

201 
NULL
 , NULL , NULL , 
gãNCCS_nf
, 
gãCC_nf
 , NULL , 
gãNCS_nf
 , NULL ,

202 
gãNCT_nf
 , 
NULL
 , NULL , NULL , NULL , NULL , NULL , NULL ,

203 
gãSQR_nf
 , 
gãDCPL_nf
 , 
gãDPCT_nf
 , 
NULL
 , NULL , 
gãAVSZ3_nf
, 
gãAVSZ4_nf
, NULL ,

204 
gãRTPT_nf
, 
NULL
 , NULL , NULL , NULL , NULL , NULL , NULL ,

205 
NULL
 , NULL , NULL , NULL , NULL , 
gãGPF_nf
 , 
gãGPL_nf
 , 
gãNCCT_nf
,

208 c⁄° *
	ggã_ªg«mes
[64] = {

209 
NULL
 , "RTPS" , NULL , NULL , NULL , NULL , "NCLIP", NULL ,

210 
NULL
 , NULL , NULL , NULL , "OP" , NULL , NULL , NULL ,

211 "DPCS", "INTPL", "MVMVA", "NCDS", "CDP", 
NULL
 , "NCDT" , NULL ,

212 
NULL
 , NULL , NULL , "NCCS", "CC" , NULL , "NCS" , NULL ,

213 "NCT" , 
NULL
 , NULL , NULL , NULL , NULL , NULL , NULL ,

214 "SQR" , "DCPL" , "DPCT" , 
NULL
 , NULL , "AVSZ3", "AVSZ4", NULL ,

215 "RTPT", 
NULL
 , NULL , NULL , NULL , NULL , NULL , NULL ,

216 
NULL
 , NULL , NULL , NULL , NULL , "GPF" , "GPL" , "NCCT",

220 c⁄° 
	ggã_cy˛ëab
[64] = {

228 
	#GCBIT
(
x
) \

229 (1Œ << (32+
x
))

	)

230 
	#GDBIT
(
x
) \

231 (1Œ << (
x
))

	)

232 
	#GCBITS3
(
b0
,
b1
,
b2
) \

233 (
	`GCBIT
(
b0
Ë| GCBIT(
b1
Ë| GCBIT(
b2
))

	)

234 
	#GDBITS2
(
b0
,
b1
) \

235 (
	`GDBIT
(
b0
Ë| GDBIT(
b1
))

	)

236 
	#GDBITS3
(
b0
,
b1
,
b2
) \

237 (
	`GDBITS2
(
b0
,
b1
Ë| 
	`GDBIT
(
b2
))

	)

238 
	#GDBITS4
(
b0
,
b1
,
b2
,
b3
) \

239 (
	`GDBITS3
(
b0
,
b1
,
b2
Ë| 
	`GDBIT
(
b3
))

	)

240 
	#GDBITS5
(
b0
,
b1
,
b2
,
b3
,
b4
) \

241 (
	`GDBITS4
(
b0
,
b1
,
b2
,
b3
Ë| 
	`GDBIT
(
b4
))

	)

242 
	#GDBITS6
(
b0
,
b1
,
b2
,
b3
,
b4
,
b5
) \

243 (
	`GDBITS5
(
b0
,
b1
,
b2
,
b3
,
b4
Ë| 
	`GDBIT
(
b5
))

	)

244 
	#GDBITS7
(
b0
,
b1
,
b2
,
b3
,
b4
,
b5
,
b6
) \

245 (
	`GDBITS6
(
b0
,
b1
,
b2
,
b3
,
b4
,
b5
Ë| 
	`GDBIT
(
b6
))

	)

246 
	#GDBITS8
(
b0
,
b1
,
b2
,
b3
,
b4
,
b5
,
b6
,
b7
) \

247 (
	`GDBITS7
(
b0
,
b1
,
b2
,
b3
,
b4
,
b5
,
b6
Ë| 
	`GDBIT
(
b7
))

	)

248 
	#GDBITS9
(
b0
,
b1
,
b2
,
b3
,
b4
,
b5
,
b6
,
b7
,
b8
) \

249 (
	`GDBITS8
(
b0
,
b1
,
b2
,
b3
,
b4
,
b5
,
b6
,
b7
Ë| 
	`GDBIT
(
b8
))

	)

250 
	#GDBITS10
(
b0
,
b1
,
b2
,
b3
,
b4
,
b5
,
b6
,
b7
,
b8
,
b9
) \

251 (
	`GDBITS9
(
b0
,
b1
,
b2
,
b3
,
b4
,
b5
,
b6
,
b7
,
b8
Ë| 
	`GDBIT
(
b9
))

	)

253 c⁄° 
uöt64_t
 
	ggã_ªg_ªads
[64] = {

254 [
GTE_RTPS
] = 0x1f0000ff00000000Œ | 
GDBITS7
(0,1,13,14,17,18,19),

255 [
GTE_NCLIP
] = 
GDBITS3
(12,13,14),

256 [
GTE_OP
] = 
GCBITS3
(0,2,4Ë| 
GDBITS3
(9,10,11),

257 [
GTE_DPCS
] = 
GCBITS3
(21,22,23Ë| 
GDBITS4
(6,8,21,22),

258 [
GTE_INTPL
] = 
GCBITS3
(21,22,23Ë| 
GDBITS7
(6,8,9,10,11,21,22),

259 [
GTE_MVMVA
] = 0x00ffffff00000000Œ | 
GDBITS9
(0,1,2,3,4,5,9,10,11),

260 [
GTE_NCDS
] = 0x00ffff0000000000Œ | 
GDBITS6
(0,1,6,8,21,22),

261 [
GTE_CDP
] = 0x00f„00000000000Œ | 
GDBITS7
(6,8,9,10,11,21,22),

262 [
GTE_NCDT
] = 0x00ffff0000000000Œ | 
GDBITS8
(0,1,2,3,4,5,6,8),

263 [
GTE_NCCS
] = 0x001fff0000000000Œ | 
GDBITS5
(0,1,6,21,22),

264 [
GTE_CC
] = 0x001„00000000000Œ | 
GDBITS6
(6,9,10,11,21,22),

265 [
GTE_NCS
] = 0x001fff0000000000Œ | 
GDBITS5
(0,1,6,21,22),

266 [
GTE_NCT
] = 0x001fff0000000000Œ | 
GDBITS7
(0,1,2,3,4,5,6),

267 [
GTE_SQR
] = 
GDBITS3
(9,10,11),

268 [
GTE_DCPL
] = 
GCBITS3
(21,22,23Ë| 
GDBITS7
(6,8,9,10,11,21,22),

269 [
GTE_DPCT
] = 
GCBITS3
(21,22,23Ë| 
GDBITS4
(8,20,21,22),

270 [
GTE_AVSZ3
] = 
GCBIT
(29Ë| 
GDBITS3
(17,18,19),

271 [
GTE_AVSZ4
] = 
GCBIT
(30Ë| 
GDBITS4
(16,17,18,19),

272 [
GTE_RTPT
] = 0x1f0000ff00000000Œ | 
GDBITS7
(0,1,2,3,4,5,19),

273 [
GTE_GPF
] = 
GDBITS7
(6,8,9,10,11,21,22),

274 [
GTE_GPL
] = 
GDBITS10
(6,8,9,10,11,21,22,25,26,27),

275 [
GTE_NCCT
] = 0x001fff0000000000Œ | 
GDBITS7
(0,1,2,3,4,5,6),

279 c⁄° 
uöt64_t
 
	ggã_ªg_wrôes
[64] = {

280 [
GTE_RTPS
] = 0x0f0f7f00ll,

281 [
GTE_NCLIP
] = 
GDBIT
(24),

282 [
GTE_OP
] = 
GDBITS6
(9,10,11,25,26,27),

283 [
GTE_DPCS
] = 
GDBITS9
(9,10,11,20,21,22,25,26,27),

284 [
GTE_INTPL
] = 
GDBITS9
(9,10,11,20,21,22,25,26,27),

285 [
GTE_MVMVA
] = 
GDBITS6
(9,10,11,25,26,27),

286 [
GTE_NCDS
] = 
GDBITS9
(9,10,11,20,21,22,25,26,27),

287 [
GTE_CDP
] = 
GDBITS9
(9,10,11,20,21,22,25,26,27),

288 [
GTE_NCDT
] = 
GDBITS9
(9,10,11,20,21,22,25,26,27),

289 [
GTE_NCCS
] = 
GDBITS9
(9,10,11,20,21,22,25,26,27),

290 [
GTE_CC
] = 
GDBITS9
(9,10,11,20,21,22,25,26,27),

291 [
GTE_NCS
] = 
GDBITS9
(9,10,11,20,21,22,25,26,27),

292 [
GTE_NCT
] = 
GDBITS9
(9,10,11,20,21,22,25,26,27),

293 [
GTE_SQR
] = 
GDBITS6
(9,10,11,25,26,27),

294 [
GTE_DCPL
] = 
GDBITS9
(9,10,11,20,21,22,25,26,27),

295 [
GTE_DPCT
] = 
GDBITS9
(9,10,11,20,21,22,25,26,27),

296 [
GTE_AVSZ3
] = 
GDBITS2
(7,24),

297 [
GTE_AVSZ4
] = 
GDBITS2
(7,24),

298 [
GTE_RTPT
] = 0x0f0f7f00ll,

299 [
GTE_GPF
] = 
GDBITS9
(9,10,11,20,21,22,25,26,27),

300 [
GTE_GPL
] = 
GDBITS9
(9,10,11,20,21,22,25,26,27),

301 [
GTE_NCCT
] = 
GDBITS9
(9,10,11,20,21,22,25,26,27),

304 
	$¨i64_öô
()

306 (*
psxCP2
[64])();

307 
	`psxNULL
();

308 *
out
;

309 
size_t
 
i
;

311 
	`√w_dy«ªc_öô
();

312 
	`√w_dy«_pcsx_mem_öô
();

314 
i
 = 0; i < 
	`ARRAY_SIZE
(
gã_h™dÀrs
); i++)

315 i‡(
psxCP2
[
i
] !
psxNULL
)

316 
gã_h™dÀrs
[
i
] = 
psxCP2
[i];

318 #i‡
	`deföed
(
__¨m__
Ë&& !deföed(
DRC_DBG
)

319 
gã_h™dÀrs
[0x06] = 
gãNCLIP_¨m
;

320 #ifde‡
HAVE_ARMV5


321 
gã_h™dÀrs_nf
[0x01] = 
gãRTPS_nf_¨m
;

322 
gã_h™dÀrs_nf
[0x30] = 
gãRTPT_nf_¨m
;

324 #ifde‡
__ARM_NEON__


327 
gã_h™dÀrs
[0x01] = 
gã_h™dÀrs_nf
[0x01] = 
gãRTPS_√⁄
;

328 
gã_h™dÀrs
[0x30] = 
gã_h™dÀrs_nf
[0x30] = 
gãRTPT_√⁄
;

331 #ifde‡
DRC_DBG


332 
	`mem˝y
(
gã_h™dÀrs_nf
, 
gã_h™dÀrs
, (gte_handlers_nf));

334 
psxH_±r
 = 
psxH
;

335 
zîomem_±r
 = 
zîo_mem
;

336 
s¸©ch_buf_±r
 = 
s¸©ch_buf
;

338 
	`SysPrötf
("Mapped (RAM/scrp/ROM/LUTs/TC):\n");

339 
	`SysPrötf
("%08x/%08x/%08x/%08x/%08x\n",

340 
psxM
, 
psxH
, 
psxR
, 
mem_πab
, 
out
);

343 
	}
}

345 
	$¨i64_ª£t
()

347 
	`¥ötf
("ari64_reset\n");

348 
	`√w_dy«_pcsx_mem_ª£t
();

349 
	`övÆid©e_Æl_∑ges
();

350 
	`√w_dy«_ª°‹e
();

351 
≥ndög_ex˚±i⁄
 = 1;

352 
	}
}

356 
	$¨i64_execuã_u¡û
()

358 
	`scheduÀ_time¶i˚
();

360 
	`ev¥ötf
("¨i64_execuã %08x, %u->%u (%d)\n", 
psxRegs
.
pc
,

361 
psxRegs
.
cy˛e
, 
√xt_öãru±
,Çext_interupt -ÖsxRegs.cycle);

363 
	`√w_dy«_°¨t
();

365 
	`ev¥ötf
("¨i64_execuãÉnd %08x, %u->%u (%d)\n", 
psxRegs
.
pc
,

366 
psxRegs
.
cy˛e
, 
√xt_öãru±
,Çext_interupt -ÖsxRegs.cycle);

367 
	}
}

369 
	$¨i64_execuã
()

371 !
°›
) {

372 
	`¨i64_execuã_u¡û
();

373 
	`ev¥ötf
("dr¯À· @%08x\n", 
psxRegs
.
pc
);

375 
	}
}

377 
	$¨i64_˛ór
(
u32
 
addr
, u32 
size
)

379 
u32
 
°¨t
, 
íd
, 
maö_øm
;

381 
size
 *= 4;

383 
	`ev¥ötf
("¨i64_˛ó∏%08x %04x\n", 
addr
, 
size
);

386 
maö_øm
 = (
addr
 & 0xffe00000) == 0x80000000;

388 
°¨t
 = 
addr
 >> 12;

389 
íd
 = (
addr
 + 
size
) >> 12;

391 ; 
°¨t
 <
íd
; start++)

392 i‡(!
maö_øm
 || !
övÆid_code
[
°¨t
])

393 
	`övÆid©e_block
(
°¨t
);

394 
	}
}

396 
	$¨i64_shutdown
()

398 
	`√w_dy«ªc_˛ónup
();

399 
	`√w_dy«_pcsx_mem_shutdown
();

400 
	}
}

402 
ötExecuã
();

403 
ötExecuãT
();

404 
ötExecuãBlock
();

405 
ötExecuãBlockT
();

406 #i‚de‡
DRC_DBG


407 
	#ötExecuãT
 
ötExecuã


	)

408 
	#ötExecuãBlockT
 
ötExecuãBlock


	)

411 
R3000A˝u
 
	gpsxRec
 = {

412 
¨i64_öô
,

413 
¨i64_ª£t
,

414 #i‚de‡
DRC_DISABLE


415 
¨i64_execuã
,

416 
¨i64_execuã_u¡û
,

418 
ötExecuãT
,

419 
ötExecuãBlockT
,

421 
¨i64_˛ór
,

422 
¨i64_shutdown


426 #i‚de‡
DRC_DBG


427 
	$do_ö¢_åa˚
(Ë{
	}
}

428 
	$do_ö¢_cmp
(Ë{
	}
}

431 #ifde‡
DRC_DISABLE


432 
	gaddªss
;

433 
	g≥ndög_ex˚±i⁄
, 
	g°›
;

434 
	g√xt_öãru±
;

435 
	g√w_dy«ªc_did_compûe
;

436 
	gcy˛e_mu…ùlõr
;

437 
	g√w_dy«ªc_hacks
;

438 *
	gpsxH_±r
;

439 *
	gzîomem_±r
;

440 
u8
 
	gzîo_mem
[0x1000];

441 *
	gout
;

442 *
	gmem_πab
;

443 *
	gs¸©ch_buf_±r
;

444 
	$√w_dy«ªc_öô
(Ë{ ()
¨i64_execuã
; 
	}
}

445 
	$√w_dy«_°¨t
(Ë{
	}
}

446 
	$√w_dy«ªc_˛ónup
(Ë{
	}
}

447 
	$√w_dy«ªc_˛ór_fuŒ
(Ë{
	}
}

448 
	$övÆid©e_Æl_∑ges
(Ë{
	}
}

449 
	$övÆid©e_block
(
block
Ë{
	}
}

450 
	$√w_dy«_pcsx_mem_öô
(Ë{
	}
}

451 
	$√w_dy«_pcsx_mem_ª£t
(Ë{
	}
}

452 
	$√w_dy«_pcsx_mem_lﬂd_°©e
(Ë{
	}
}

453 
	$√w_dy«_pcsx_mem_shutdown
(Ë{
	}
}

454 
	$√w_dy«ªc_ßve_blocks
(*
ßve
, 
size
Ë{  0; 
	}
}

455 
	$√w_dy«ªc_lﬂd_blocks
(c⁄° *
ßve
, 
size
Ë{
	}
}

458 #ifde‡
DRC_DBG


460 
	~<°ddef.h
>

461 
FILE
 *
	gf
;

462 
u32
 
œ°_io_addr
;

464 
	$dump_mem
(c⁄° *
‚ame
, *
mem
, 
size_t
 
size
)

466 
FILE
 *
f1
 = 
	`f›í
(
‚ame
, "wb");

467 i‡(
f1
 =
NULL
)

468 
f1
 = 
	`f›í
(
	`°ºchr
(
‚ame
, '/') + 1, "wb");

469 
	`fwrôe
(
mem
, 1, 
size
, 
f1
);

470 
	`f˛o£
(
f1
);

471 
	}
}

473 
u32
 
	$memcheck_ªad
(
u32
 
a
)

475 i‡((
a
 >> 16) == 0x1f80)

477  *(
u32
 *)(
psxH
 + (
a
 & 0xfffc));

479 i‡((
a
 >> 16) == 0x1f00)

481  *(
u32
 *)(
psxP
 + (
a
 & 0xfffc));

485  *(
u32
 *)(
psxM
 + (
a
 & 0x1ffffc));

486 
	}
}

488 
	$do_ö¢_åa˚
()

490 
psxRegi°îs
 
ﬁdªgs
;

491 
u32
 
ﬁd_io_addr
 = (u32)-1;

492 
u32
 
ﬁd_io_d©a
 = 0xbad0c0de;

493 
u32
 
evít_cy˛es_o
[
PSXINT_COUNT
];

494 
u32
 *
ÆÃegs_p
 = (*)&
psxRegs
;

495 
u32
 *
ÆÃegs_o
 = (*)&
ﬁdªgs
;

496 
u32
 
io_d©a
;

497 
i
;

498 
u8
 
byã
;

501 i‡(
f
 =
NULL
)

502 
f
 = 
	`f›í
("tracelog", "wb");

505 
ﬁdªgs
.
code
 = 
psxRegs
.code;

506 
i
 = 0; i < 
	`off£tof
(
psxRegi°îs
, 
ötCy˛e
) / 4; i++) {

507 i‡(
ÆÃegs_p
[
i
] !
ÆÃegs_o
[i]) {

508 
	`fwrôe
(&
i
, 1, 1, 
f
);

509 
	`fwrôe
(&
ÆÃegs_p
[
i
], 1, 4, 
f
);

510 
ÆÃegs_o
[
i
] = 
ÆÃegs_p
[i];

514 
i
 = 0; i < 
PSXINT_COUNT
; i++) {

515 i‡(
evít_cy˛es
[
i
] !
evít_cy˛es_o
[i]) {

516 
byã
 = 0xfc;

517 
	`fwrôe
(&
byã
, 1, 1, 
f
);

518 
	`fwrôe
(&
i
, 1, 1, 
f
);

519 
	`fwrôe
(&
evít_cy˛es
[
i
], 1, 4, 
f
);

520 
evít_cy˛es_o
[
i
] = 
evít_cy˛es
[i];

524 i‡(
ﬁd_io_addr
 !
œ°_io_addr
) {

525 
byã
 = 0xfd;

526 
	`fwrôe
(&
byã
, 1, 1, 
f
);

527 
	`fwrôe
(&
œ°_io_addr
, 1, 4, 
f
);

528 
ﬁd_io_addr
 = 
œ°_io_addr
;

530 
io_d©a
 = 
	`memcheck_ªad
(
œ°_io_addr
);

531 i‡(
ﬁd_io_d©a
 !
io_d©a
) {

532 
byã
 = 0xfe;

533 
	`fwrôe
(&
byã
, 1, 1, 
f
);

534 
	`fwrôe
(&
io_d©a
, 1, 4, 
f
);

535 
ﬁd_io_d©a
 = 
io_d©a
;

537 
byã
 = 0xff;

538 
	`fwrôe
(&
byã
, 1, 1, 
f
);

541 i‡(
psxRegs
.
cy˛e
 == 190230) {

542 
	`dump_mem
("/m¡/¡z/dev/≤d/tmp/psxøm_i.dump", 
psxM
, 0x200000);

543 
	`dump_mem
("/m¡/¡z/dev/≤d/tmp/psxªgs_i.dump", 
psxH
, 0x10000);

544 
	`¥ötf
("dumped\n");

545 
	`exô
(1);

548 
	}
}

550 c⁄° *
	gªg«mes
[
off£tof
(
psxRegi°îs
, 
ötCy˛e
) / 4] = {

575 
	mªg
;

576 
u32
 
	mvÆ
, 
	mvÆ_ex≥˘
;

577 
u32
 
	mpc
, 
	mcy˛e
;

578 } 
	gmiss_log
[64];

579 
	gmiss_log_i
;

580 
	#miss_log_Àn
 ((
miss_log
)/(miss_log[0]))

	)

581 
	#miss_log_mask
 (
miss_log_Àn
-1)

	)

583 
	$miss_log_add
(
ªg
, 
u32
 
vÆ
, u32 
vÆ_ex≥˘
, u32 
pc
, u32 
cy˛e
)

585 
miss_log
[
miss_log_i
].
ªg
 =Ñeg;

586 
miss_log
[
miss_log_i
].
vÆ
 = val;

587 
miss_log
[
miss_log_i
].
vÆ_ex≥˘
 = val_expect;

588 
miss_log
[
miss_log_i
].
pc
 =Öc;

589 
miss_log
[
miss_log_i
].
cy˛e
 = cycle;

590 
miss_log_i
 = (miss_log_ò+ 1Ë& 
miss_log_mask
;

591 
	}
}

593 
	$bªakme
(Ë{
	}
}

595 
	$do_ö¢_cmp
()

597 
psxRegi°îs
 
ºegs
;

598 
u32
 
mem_addr
, 
mem_vÆ
;

599 
u32
 *
ÆÃegs_p
 = (*)&
psxRegs
;

600 
u32
 *
ÆÃegs_e
 = (*)&
ºegs
;

601 
u32
 
µc
, 
Áûcou¡
;

602 
i
, 
ªt
, 
bad
 = 0, 
which_evít
 = -1;

603 
u32
 
ev_cy˛es
 = 0;

604 
u8
 
code
;

606 i‡(
f
 =
NULL
)

607 
f
 = 
	`f›í
("tracelog", "rb");

610 i‡((
ªt
 = 
	`‰ód
(&
code
, 1, 1, 
f
)) <= 0)

612 i‡(
ªt
 <= 0)

614 i‡(
code
 == 0xff)

616 
code
) {

618 
which_evít
 = 0;

619 
	`‰ód
(&
which_evít
, 1, 1, 
f
);

620 
	`‰ód
(&
ev_cy˛es
, 1, 4, 
f
);

623 
	`‰ód
(&
mem_addr
, 1, 4, 
f
);

626 
	`‰ód
(&
mem_vÆ
, 1, 4, 
f
);

629 
	`‰ód
(&
ÆÃegs_e
[
code
], 1, 4, 
f
);

632 i‡(
ªt
 <= 0) {

633 
	`¥ötf
("EOF?\n");

634 
íd
;

637 
psxRegs
.
code
 = 
ºegs
.code;

638 
psxRegs
.
cy˛e
 = 
ºegs
.cycle;

639 
psxRegs
.
CP0
.
r
[9] = 
ºegs
.CP0.r[9];

643 i‡(
	`memcmp
(&
psxRegs
, &
ºegs
, 
	`off£tof
(
psxRegi°îs
, 
ötCy˛e
)) == 0 &&

644 
mem_vÆ
 =
	`memcheck_ªad
(
mem_addr
)

646 
Áûcou¡
 = 0;

647 
ok
;

650 
i
 = 0; i < 
	`off£tof
(
psxRegi°îs
, 
ötCy˛e
) / 4; i++) {

651 i‡(
ÆÃegs_p
[
i
] !
ÆÃegs_e
[i]) {

652 
	`miss_log_add
(
i
, 
ÆÃegs_p
[i], 
ÆÃegs_e
[i], 
psxRegs
.
pc
,ÖsxRegs.
cy˛e
);

653 
bad
++;

657 i‡(
mem_vÆ
 !
	`memcheck_ªad
(
mem_addr
)) {

658 
	`¥ötf
("bad mem @%08x: %08x %08x\n", 
mem_addr
, 
	`memcheck_ªad
(mem_addr), 
mem_vÆ
);

659 
íd
;

662 i‡(
which_evít
 >0 && 
evít_cy˛es
[which_evít] !
ev_cy˛es
) {

663 
	`¥ötf
("badÉv_cy˛e†#%d: %08x %08x\n", 
which_evít
, 
evít_cy˛es
[which_evít], 
ev_cy˛es
);

664 
íd
;

667 i‡(
psxRegs
.
pc
 =
ºegs
.p¯&& 
bad
 < 6 && 
Áûcou¡
 < 32) {

668 
œ°_mcy˛e
;

669 i‡(
œ°_mcy˛e
 !
psxRegs
.
cy˛e
 >> 20) {

670 
	`¥ötf
("%u\n", 
psxRegs
.
cy˛e
);

671 
œ°_mcy˛e
 = 
psxRegs
.
cy˛e
 >> 20;

673 
Áûcou¡
++;

674 
ok
;

677 
íd
:

678 
i
 = 0; i < 
miss_log_Àn
; i++, 
miss_log_i
 = (miss_log_ò+ 1Ë& 
miss_log_mask
)

679 
	`¥ötf
("bad %5s: %08x %08x,Öc=%08x, cycle %u\n",

680 
ªg«mes
[
miss_log
[
miss_log_i
].
ªg
], miss_log[miss_log_i].
vÆ
,

681 
miss_log
[
miss_log_i
].
vÆ_ex≥˘
, miss_log[miss_log_i].
pc
, miss_log[miss_log_i].
cy˛e
);

682 
	`¥ötf
("-- %d\n", 
bad
);

683 
i
 = 0; i < 8; i++)

684 
	`¥ötf
("r%d=%08xÑ%2d=%08xÑ%2d=%08xÑ%2d=%08x\n", 
i
, 
ÆÃegs_p
[i],

685 
i
+8, 
ÆÃegs_p
[i+8], i+16,állregs_p[i+16], i+24,állregs_p[i+24]);

686 
	`¥ötf
("PC: %08x/%08x, cy˛ê%u\n", 
psxRegs
.
pc
, 
µc
,ÖsxRegs.
cy˛e
);

687 
	`dump_mem
("/m¡/¡z/dev/≤d/tmp/psxøm.dump", 
psxM
, 0x200000);

688 
	`dump_mem
("/m¡/¡z/dev/≤d/tmp/psxªgs.dump", 
psxH
, 0x10000);

689 
	`exô
(1);

690 
ok
:

691 
psxRegs
.
cy˛e
 = 
ºegs
.cycle + 2;

692 
µc
 = 
psxRegs
.
pc
;

693 
	}
}

	@libpcsxcore/new_dynarec/emu_if.h

1 
	~"√w_dy«ªc.h
"

2 
	~"../r3000a.h
"

4 
övÆid_code
[0x100000];

7 
	#EAX
 0

	)

8 
	#ECX
 1

	)

11 
ªg
[];

14 
hi
, 
lo
;

17 
ªg_c›0
[];

18 
	#Sètus
 
psxRegs
.
CP0
.
n
.
Sètus


	)

19 
	#Cau£
 
psxRegs
.
CP0
.
n
.
Cau£


	)

20 
	#EPC
 
psxRegs
.
CP0
.
n
.
EPC


	)

21 
	#BadVAddr
 
psxRegs
.
CP0
.
n
.
BadVAddr


	)

22 
	#C⁄ãxt
 
psxRegs
.
CP0
.
n
.
C⁄ãxt


	)

23 
	#E¡ryHi
 
psxRegs
.
CP0
.
n
.
E¡ryHi


	)

24 
	#Cou¡
 
psxRegs
.
cy˛e


25 

	)

27 
	egã_›codes
 {

28 
	mGTE_RTPS
 = 0x01,

29 
	mGTE_NCLIP
 = 0x06,

30 
	mGTE_OP
 = 0x0c,

31 
	mGTE_DPCS
 = 0x10,

32 
	mGTE_INTPL
 = 0x11,

33 
	mGTE_MVMVA
 = 0x12,

34 
	mGTE_NCDS
 = 0x13,

35 
	mGTE_CDP
 = 0x14,

36 
	mGTE_NCDT
 = 0x16,

37 
	mGTE_NCCS
 = 0x1b,

38 
	mGTE_CC
 = 0x1c,

39 
	mGTE_NCS
 = 0x1e,

40 
	mGTE_NCT
 = 0x20,

41 
	mGTE_SQR
 = 0x28,

42 
	mGTE_DCPL
 = 0x29,

43 
	mGTE_DPCT
 = 0x2a,

44 
	mGTE_AVSZ3
 = 0x2d,

45 
	mGTE_AVSZ4
 = 0x2e,

46 
	mGTE_RTPT
 = 0x30,

47 
	mGTE_GPF
 = 0x3d,

48 
	mGTE_GPL
 = 0x3e,

49 
	mGTE_NCCT
 = 0x3f,

52 
ªg_c›2d
[], 
ªg_c›2c
[];

53 *
gã_h™dÀrs
[64];

54 *
gã_h™dÀrs_nf
[64];

55 c⁄° *
gã_ªg«mes
[64];

56 c⁄° 
gã_cy˛ëab
[64];

57 c⁄° 
uöt64_t
 
gã_ªg_ªads
[64];

58 c⁄° 
uöt64_t
 
gã_ªg_wrôes
[64];

61 
FCR0
, 
FCR31
;

64 *
mem_πab
;

65 *
mem_wèb
;

67 
jump_h™dÀr_ªad8
(
u32
 
addr
, u32 *
èbÀ
, u32 
cy˛es
);

68 
jump_h™dÀr_ªad16
(
u32
 
addr
, u32 *
èbÀ
, u32 
cy˛es
);

69 
jump_h™dÀr_ªad32
(
u32
 
addr
, u32 *
èbÀ
, u32 
cy˛es
);

70 
jump_h™dÀr_wrôe8
(
u32
 
addr
, u32 
d©a
, u32 
cy˛es
, u32 *
èbÀ
);

71 
jump_h™dÀr_wrôe16
(
u32
 
addr
, u32 
d©a
, u32 
cy˛es
, u32 *
èbÀ
);

72 
jump_h™dÀr_wrôe32
(
u32
 
addr
, u32 
d©a
, u32 
cy˛es
, u32 *
èbÀ
);

73 
jump_h™dÀr_wrôe_h
(
u32
 
addr
, u32 
d©a
, u32 
cy˛es
, *
h™dÀr
);

74 
jump_h™dÀ_swl
(
u32
 
addr
, u32 
d©a
, u32 
cy˛es
);

75 
jump_h™dÀ_swr
(
u32
 
addr
, u32 
d©a
, u32 
cy˛es
);

76 
r˙t0_ªad_cou¡_m0
(
u32
 
addr
, u32, u32 
cy˛es
);

77 
r˙t0_ªad_cou¡_m1
(
u32
 
addr
, u32, u32 
cy˛es
);

78 
r˙t1_ªad_cou¡_m0
(
u32
 
addr
, u32, u32 
cy˛es
);

79 
r˙t1_ªad_cou¡_m1
(
u32
 
addr
, u32, u32 
cy˛es
);

80 
r˙t2_ªad_cou¡_m0
(
u32
 
addr
, u32, u32 
cy˛es
);

81 
r˙t2_ªad_cou¡_m1
(
u32
 
addr
, u32, u32 
cy˛es
);

83 
addªss
;

84 *
psxH_±r
;

85 *
zîomem_±r
;

86 *
s¸©ch_buf_±r
;

89 
u32
 
öv_code_°¨t
, 
öv_code_íd
;

92 
√xt_öãru±
;

93 
≥ndög_ex˚±i⁄
;

96 
pcsx_mtc0
(
u32
 
ªg
, u32 
vÆ
);

97 
pcsx_mtc0_ds
(
u32
 
ªg
, u32 
vÆ
);

100 (*
psxHLEt
[])();

102 
SysPrötf
(c⁄° *
fmt
, ...);

104 #ifde‡
RAM_FIXED


105 
	#rdøm
 ((
u_öt
)0x80000000)

	)

107 
	#rdøm
 ((
u_öt
)
psxM
)

	)

	@libpcsxcore/new_dynarec/fpu.c

21 
	~<m©h.h
>

23 
FCR0
, 
FCR31
;

25 
	$cvt_s_w
(*
sour˚
,*
de°
)

27 *
de°
 = *
sour˚
;

28 
	}
}

29 
	$cvt_d_w
(*
sour˚
,*
de°
)

31 *
de°
 = *
sour˚
;

32 
	}
}

33 
	$cvt_s_l
(*
sour˚
,*
de°
)

35 *
de°
 = *
sour˚
;

36 
	}
}

37 
	$cvt_d_l
(*
sour˚
,*
de°
)

39 *
de°
 = *
sour˚
;

40 
	}
}

41 
	$cvt_d_s
(*
sour˚
,*
de°
)

43 *
de°
 = *
sour˚
;

44 
	}
}

45 
	$cvt_s_d
(*
sour˚
,*
de°
)

47 *
de°
 = *
sour˚
;

48 
	}
}

50 
	$round_l_s
(*
sour˚
,*
de°
)

52 *
de°
 = 
	`roundf
(*
sour˚
);

53 
	}
}

54 
	$round_w_s
(*
sour˚
,*
de°
)

56 *
de°
 = 
	`roundf
(*
sour˚
);

57 
	}
}

58 
	$åunc_l_s
(*
sour˚
,*
de°
)

60 *
de°
 = 
	`åuncf
(*
sour˚
);

61 
	}
}

62 
	$åunc_w_s
(*
sour˚
,*
de°
)

64 *
de°
 = 
	`åuncf
(*
sour˚
);

65 
	}
}

66 
	$˚û_l_s
(*
sour˚
,*
de°
)

68 *
de°
 = 
	`˚ûf
(*
sour˚
);

69 
	}
}

70 
	$˚û_w_s
(*
sour˚
,*
de°
)

72 *
de°
 = 
	`˚ûf
(*
sour˚
);

73 
	}
}

74 
	$Êo‹_l_s
(*
sour˚
,*
de°
)

76 *
de°
 = 
	`Êo‹f
(*
sour˚
);

77 
	}
}

78 
	$Êo‹_w_s
(*
sour˚
,*
de°
)

80 *
de°
 = 
	`Êo‹f
(*
sour˚
);

81 
	}
}

83 
	$round_l_d
(*
sour˚
,*
de°
)

85 *
de°
 = 
	`round
(*
sour˚
);

86 
	}
}

87 
	$round_w_d
(*
sour˚
,*
de°
)

89 *
de°
 = 
	`round
(*
sour˚
);

90 
	}
}

91 
	$åunc_l_d
(*
sour˚
,*
de°
)

93 *
de°
 = 
	`åunc
(*
sour˚
);

94 
	}
}

95 
	$åunc_w_d
(*
sour˚
,*
de°
)

97 *
de°
 = 
	`åunc
(*
sour˚
);

98 
	}
}

99 
	$˚û_l_d
(*
sour˚
,*
de°
)

101 *
de°
 = 
	`˚û
(*
sour˚
);

102 
	}
}

103 
	$˚û_w_d
(*
sour˚
,*
de°
)

105 *
de°
 = 
	`˚û
(*
sour˚
);

106 
	}
}

107 
	$Êo‹_l_d
(*
sour˚
,*
de°
)

109 *
de°
 = 
	`Êo‹
(*
sour˚
);

110 
	}
}

111 
	$Êo‹_w_d
(*
sour˚
,*
de°
)

113 *
de°
 = 
	`Êo‹
(*
sour˚
);

114 
	}
}

116 
	$cvt_w_s
(*
sour˚
,*
de°
)

118 
FCR31
&3)

120 0: 
	`round_w_s
(
sour˚
,
de°
);;

121 1: 
	`åunc_w_s
(
sour˚
,
de°
);;

122 2: 
	`˚û_w_s
(
sour˚
,
de°
);;

123 3: 
	`Êo‹_w_s
(
sour˚
,
de°
);;

125 
	}
}

126 
	$cvt_w_d
(*
sour˚
,*
de°
)

128 
FCR31
&3)

130 0: 
	`round_w_d
(
sour˚
,
de°
);;

131 1: 
	`åunc_w_d
(
sour˚
,
de°
);;

132 2: 
	`˚û_w_d
(
sour˚
,
de°
);;

133 3: 
	`Êo‹_w_d
(
sour˚
,
de°
);;

135 
	}
}

136 
	$cvt_l_s
(*
sour˚
,*
de°
)

138 
FCR31
&3)

140 0: 
	`round_l_s
(
sour˚
,
de°
);;

141 1: 
	`åunc_l_s
(
sour˚
,
de°
);;

142 2: 
	`˚û_l_s
(
sour˚
,
de°
);;

143 3: 
	`Êo‹_l_s
(
sour˚
,
de°
);;

145 
	}
}

146 
	$cvt_l_d
(*
sour˚
,*
de°
)

148 
FCR31
&3)

150 0: 
	`round_l_d
(
sour˚
,
de°
);;

151 1: 
	`åunc_l_d
(
sour˚
,
de°
);;

152 2: 
	`˚û_l_d
(
sour˚
,
de°
);;

153 3: 
	`Êo‹_l_d
(
sour˚
,
de°
);;

155 
	}
}

157 
	$c_f_s
()

159 
FCR31
 &= ~0x800000;

160 
	}
}

161 
	$c_un_s
(*
sour˚
,*
èrgë
)

163 
FCR31
=(
	`i¢™
(*
sour˚
Ë|| i¢™(*
èrgë
)) ? FCR31|0x800000 : FCR31&~0x800000;

164 
	}
}

166 
	$c_eq_s
(*
sour˚
,*
èrgë
)

168 i‡(
	`i¢™
(*
sour˚
Ë|| i¢™(*
èrgë
)Ë{
FCR31
&=~0x800000;;}

169 
FCR31
 = *
sour˚
==*
èrgë
 ? FCR31|0x800000 : FCR31&~0x800000;

170 
	}
}

171 
	$c_ueq_s
(*
sour˚
,*
èrgë
)

173 i‡(
	`i¢™
(*
sour˚
Ë|| i¢™(*
èrgë
)Ë{
FCR31
|=0x800000;;}

174 
FCR31
 = *
sour˚
==*
èrgë
 ? FCR31|0x800000 : FCR31&~0x800000;

175 
	}
}

177 
	$c_ﬁt_s
(*
sour˚
,*
èrgë
)

179 i‡(
	`i¢™
(*
sour˚
Ë|| i¢™(*
èrgë
)Ë{
FCR31
&=~0x800000;;}

180 
FCR31
 = *
sour˚
<*
èrgë
 ? FCR31|0x800000 : FCR31&~0x800000;

181 
	}
}

182 
	$c_u…_s
(*
sour˚
,*
èrgë
)

184 i‡(
	`i¢™
(*
sour˚
Ë|| i¢™(*
èrgë
)Ë{
FCR31
|=0x800000;;}

185 
FCR31
 = *
sour˚
<*
èrgë
 ? FCR31|0x800000 : FCR31&~0x800000;

186 
	}
}

188 
	$c_ﬁe_s
(*
sour˚
,*
èrgë
)

190 i‡(
	`i¢™
(*
sour˚
Ë|| i¢™(*
èrgë
)Ë{
FCR31
&=~0x800000;;}

191 
FCR31
 = *
sour˚
<=*
èrgë
 ? FCR31|0x800000 : FCR31&~0x800000;

192 
	}
}

193 
	$c_uÀ_s
(*
sour˚
,*
èrgë
)

195 i‡(
	`i¢™
(*
sour˚
Ë|| i¢™(*
èrgë
)Ë{
FCR31
|=0x800000;;}

196 
FCR31
 = *
sour˚
<=*
èrgë
 ? FCR31|0x800000 : FCR31&~0x800000;

197 
	}
}

199 
	$c_sf_s
(*
sour˚
,*
èrgë
)

202 
FCR31
&=~0x800000;

203 
	}
}

204 
	$c_ngÀ_s
(*
sour˚
,*
èrgë
)

207 
FCR31
&=~0x800000;

208 
	}
}

210 
	$c_£q_s
(*
sour˚
,*
èrgë
)

213 
FCR31
 = *
sour˚
==*
èrgë
 ? FCR31|0x800000 : FCR31&~0x800000;

214 
	}
}

215 
	$c_ngl_s
(*
sour˚
,*
èrgë
)

218 
FCR31
 = *
sour˚
==*
èrgë
 ? FCR31|0x800000 : FCR31&~0x800000;

219 
	}
}

221 
	$c_…_s
(*
sour˚
,*
èrgë
)

224 
FCR31
 = *
sour˚
<*
èrgë
 ? FCR31|0x800000 : FCR31&~0x800000;

225 
	}
}

226 
	$c_nge_s
(*
sour˚
,*
èrgë
)

229 
FCR31
 = *
sour˚
<*
èrgë
 ? FCR31|0x800000 : FCR31&~0x800000;

230 
	}
}

232 
	$c_À_s
(*
sour˚
,*
èrgë
)

235 
FCR31
 = *
sour˚
<=*
èrgë
 ? FCR31|0x800000 : FCR31&~0x800000;

236 
	}
}

237 
	$c_ngt_s
(*
sour˚
,*
èrgë
)

240 
FCR31
 = *
sour˚
<=*
èrgë
 ? FCR31|0x800000 : FCR31&~0x800000;

241 
	}
}

243 
	$c_f_d
()

245 
FCR31
 &= ~0x800000;

246 
	}
}

247 
	$c_un_d
(*
sour˚
,*
èrgë
)

249 
FCR31
=(
	`i¢™
(*
sour˚
Ë|| i¢™(*
èrgë
)) ? FCR31|0x800000 : FCR31&~0x800000;

250 
	}
}

252 
	$c_eq_d
(*
sour˚
,*
èrgë
)

254 i‡(
	`i¢™
(*
sour˚
Ë|| i¢™(*
èrgë
)Ë{
FCR31
&=~0x800000;;}

255 
FCR31
 = *
sour˚
==*
èrgë
 ? FCR31|0x800000 : FCR31&~0x800000;

256 
	}
}

257 
	$c_ueq_d
(*
sour˚
,*
èrgë
)

259 i‡(
	`i¢™
(*
sour˚
Ë|| i¢™(*
èrgë
)Ë{
FCR31
|=0x800000;;}

260 
FCR31
 = *
sour˚
==*
èrgë
 ? FCR31|0x800000 : FCR31&~0x800000;

261 
	}
}

263 
	$c_ﬁt_d
(*
sour˚
,*
èrgë
)

265 i‡(
	`i¢™
(*
sour˚
Ë|| i¢™(*
èrgë
)Ë{
FCR31
&=~0x800000;;}

266 
FCR31
 = *
sour˚
<*
èrgë
 ? FCR31|0x800000 : FCR31&~0x800000;

267 
	}
}

268 
	$c_u…_d
(*
sour˚
,*
èrgë
)

270 i‡(
	`i¢™
(*
sour˚
Ë|| i¢™(*
èrgë
)Ë{
FCR31
|=0x800000;;}

271 
FCR31
 = *
sour˚
<*
èrgë
 ? FCR31|0x800000 : FCR31&~0x800000;

272 
	}
}

274 
	$c_ﬁe_d
(*
sour˚
,*
èrgë
)

276 i‡(
	`i¢™
(*
sour˚
Ë|| i¢™(*
èrgë
)Ë{
FCR31
&=~0x800000;;}

277 
FCR31
 = *
sour˚
<=*
èrgë
 ? FCR31|0x800000 : FCR31&~0x800000;

278 
	}
}

279 
	$c_uÀ_d
(*
sour˚
,*
èrgë
)

281 i‡(
	`i¢™
(*
sour˚
Ë|| i¢™(*
èrgë
)Ë{
FCR31
|=0x800000;;}

282 
FCR31
 = *
sour˚
<=*
èrgë
 ? FCR31|0x800000 : FCR31&~0x800000;

283 
	}
}

285 
	$c_sf_d
(*
sour˚
,*
èrgë
)

288 
FCR31
&=~0x800000;

289 
	}
}

290 
	$c_ngÀ_d
(*
sour˚
,*
èrgë
)

293 
FCR31
&=~0x800000;

294 
	}
}

296 
	$c_£q_d
(*
sour˚
,*
èrgë
)

299 
FCR31
 = *
sour˚
==*
èrgë
 ? FCR31|0x800000 : FCR31&~0x800000;

300 
	}
}

301 
	$c_ngl_d
(*
sour˚
,*
èrgë
)

304 
FCR31
 = *
sour˚
==*
èrgë
 ? FCR31|0x800000 : FCR31&~0x800000;

305 
	}
}

307 
	$c_…_d
(*
sour˚
,*
èrgë
)

310 
FCR31
 = *
sour˚
<*
èrgë
 ? FCR31|0x800000 : FCR31&~0x800000;

311 
	}
}

312 
	$c_nge_d
(*
sour˚
,*
èrgë
)

315 
FCR31
 = *
sour˚
<*
èrgë
 ? FCR31|0x800000 : FCR31&~0x800000;

316 
	}
}

318 
	$c_À_d
(*
sour˚
,*
èrgë
)

321 
FCR31
 = *
sour˚
<=*
èrgë
 ? FCR31|0x800000 : FCR31&~0x800000;

322 
	}
}

323 
	$c_ngt_d
(*
sour˚
,*
èrgë
)

326 
FCR31
 = *
sour˚
<=*
èrgë
 ? FCR31|0x800000 : FCR31&~0x800000;

327 
	}
}

330 
	$add_s
(*
sour˚1
,*
sour˚2
,*
èrgë
)

332 *
èrgë
=(*
sour˚1
)+(*
sour˚2
);

333 
	}
}

334 
	$sub_s
(*
sour˚1
,*
sour˚2
,*
èrgë
)

336 *
èrgë
=(*
sour˚1
)-(*
sour˚2
);

337 
	}
}

338 
	$mul_s
(*
sour˚1
,*
sour˚2
,*
èrgë
)

340 *
èrgë
=(*
sour˚1
)*(*
sour˚2
);

341 
	}
}

342 
	$div_s
(*
sour˚1
,*
sour˚2
,*
èrgë
)

344 *
èrgë
=(*
sour˚1
)/(*
sour˚2
);

345 
	}
}

346 
	$sqπ_s
(*
sour˚
,*
èrgë
)

348 *
èrgë
=
	`sqπf
(*
sour˚
);

349 
	}
}

350 
	$abs_s
(*
sour˚
,*
èrgë
)

352 *
èrgë
=
	`Ábsf
(*
sour˚
);

353 
	}
}

354 
	$mov_s
(*
sour˚
,*
èrgë
)

356 *
èrgë
=*
sour˚
;

357 
	}
}

358 
	$√g_s
(*
sour˚
,*
èrgë
)

360 *
èrgë
=-(*
sour˚
);

361 
	}
}

362 
	$add_d
(*
sour˚1
,*
sour˚2
,*
èrgë
)

364 *
èrgë
=(*
sour˚1
)+(*
sour˚2
);

365 
	}
}

366 
	$sub_d
(*
sour˚1
,*
sour˚2
,*
èrgë
)

368 *
èrgë
=(*
sour˚1
)-(*
sour˚2
);

369 
	}
}

370 
	$mul_d
(*
sour˚1
,*
sour˚2
,*
èrgë
)

372 *
èrgë
=(*
sour˚1
)*(*
sour˚2
);

373 
	}
}

374 
	$div_d
(*
sour˚1
,*
sour˚2
,*
èrgë
)

376 *
èrgë
=(*
sour˚1
)/(*
sour˚2
);

377 
	}
}

378 
	$sqπ_d
(*
sour˚
,*
èrgë
)

380 *
èrgë
=
	`sqπ
(*
sour˚
);

381 
	}
}

382 
	$abs_d
(*
sour˚
,*
èrgë
)

384 *
èrgë
=
	`Ábs
(*
sour˚
);

385 
	}
}

386 
	$mov_d
(*
sour˚
,*
èrgë
)

388 *
èrgë
=*
sour˚
;

389 
	}
}

390 
	$√g_d
(*
sour˚
,*
èrgë
)

392 *
èrgë
=-(*
sour˚
);

393 
	}
}

	@libpcsxcore/new_dynarec/fpu.h

1 
cvt_s_w
(*
sour˚
,*
de°
);

2 
cvt_d_w
(*
sour˚
,*
de°
);

3 
cvt_s_l
(*
sour˚
,*
de°
);

4 
cvt_d_l
(*
sour˚
,*
de°
);

5 
cvt_w_s
(*
sour˚
,*
de°
);

6 
cvt_w_d
(*
sour˚
,*
de°
);

7 
cvt_l_s
(*
sour˚
,*
de°
);

8 
cvt_l_d
(*
sour˚
,*
de°
);

9 
cvt_d_s
(*
sour˚
,*
de°
);

10 
cvt_s_d
(*
sour˚
,*
de°
);

11 
round_l_s
(*
sour˚
,*
de°
);

12 
round_w_s
(*
sour˚
,*
de°
);

13 
åunc_l_s
(*
sour˚
,*
de°
);

14 
åunc_w_s
(*
sour˚
,*
de°
);

15 
˚û_l_s
(*
sour˚
,*
de°
);

16 
˚û_w_s
(*
sour˚
,*
de°
);

17 
Êo‹_l_s
(*
sour˚
,*
de°
);

18 
Êo‹_w_s
(*
sour˚
,*
de°
);

19 
round_l_d
(*
sour˚
,*
de°
);

20 
round_w_d
(*
sour˚
,*
de°
);

21 
åunc_l_d
(*
sour˚
,*
de°
);

22 
åunc_w_d
(*
sour˚
,*
de°
);

23 
˚û_l_d
(*
sour˚
,*
de°
);

24 
˚û_w_d
(*
sour˚
,*
de°
);

25 
Êo‹_l_d
(*
sour˚
,*
de°
);

26 
Êo‹_w_d
(*
sour˚
,*
de°
);

27 
c_f_s
();

28 
c_un_s
(*
sour˚
,*
èrgë
);

29 
c_eq_s
(*
sour˚
,*
èrgë
);

30 
c_ueq_s
(*
sour˚
,*
èrgë
);

31 
c_ﬁt_s
(*
sour˚
,*
èrgë
);

32 
c_u…_s
(*
sour˚
,*
èrgë
);

33 
c_ﬁe_s
(*
sour˚
,*
èrgë
);

34 
c_uÀ_s
(*
sour˚
,*
èrgë
);

35 
c_sf_s
(*
sour˚
,*
èrgë
);

36 
c_ngÀ_s
(*
sour˚
,*
èrgë
);

37 
c_£q_s
(*
sour˚
,*
èrgë
);

38 
c_ngl_s
(*
sour˚
,*
èrgë
);

39 
c_…_s
(*
sour˚
,*
èrgë
);

40 
c_nge_s
(*
sour˚
,*
èrgë
);

41 
c_À_s
(*
sour˚
,*
èrgë
);

42 
c_ngt_s
(*
sour˚
,*
èrgë
);

43 
c_f_d
();

44 
c_un_d
(*
sour˚
,*
èrgë
);

45 
c_eq_d
(*
sour˚
,*
èrgë
);

46 
c_ueq_d
(*
sour˚
,*
èrgë
);

47 
c_ﬁt_d
(*
sour˚
,*
èrgë
);

48 
c_u…_d
(*
sour˚
,*
èrgë
);

49 
c_ﬁe_d
(*
sour˚
,*
èrgë
);

50 
c_uÀ_d
(*
sour˚
,*
èrgë
);

51 
c_sf_d
(*
sour˚
,*
èrgë
);

52 
c_ngÀ_d
(*
sour˚
,*
èrgë
);

53 
c_£q_d
(*
sour˚
,*
èrgë
);

54 
c_ngl_d
(*
sour˚
,*
èrgë
);

55 
c_…_d
(*
sour˚
,*
èrgë
);

56 
c_nge_d
(*
sour˚
,*
èrgë
);

57 
c_À_d
(*
sour˚
,*
èrgë
);

58 
c_ngt_d
(*
sour˚
,*
èrgë
);

59 
add_s
(*
sour˚1
,*
sour˚2
,*
èrgë
);

60 
sub_s
(*
sour˚1
,*
sour˚2
,*
èrgë
);

61 
mul_s
(*
sour˚1
,*
sour˚2
,*
èrgë
);

62 
div_s
(*
sour˚1
,*
sour˚2
,*
èrgë
);

63 
sqπ_s
(*
sour˚
,*
èrgë
);

64 
abs_s
(*
sour˚
,*
èrgë
);

65 
mov_s
(*
sour˚
,*
èrgë
);

66 
√g_s
(*
sour˚
,*
èrgë
);

67 
add_d
(*
sour˚1
,*
sour˚2
,*
èrgë
);

68 
sub_d
(*
sour˚1
,*
sour˚2
,*
èrgë
);

69 
mul_d
(*
sour˚1
,*
sour˚2
,*
èrgë
);

70 
div_d
(*
sour˚1
,*
sour˚2
,*
èrgë
);

71 
sqπ_d
(*
sour˚
,*
èrgë
);

72 
abs_d
(*
sour˚
,*
èrgë
);

73 
mov_d
(*
sour˚
,*
èrgë
);

74 
√g_d
(*
sour˚
,*
èrgë
);

	@libpcsxcore/new_dynarec/linkage_offsets.h

2 
	#LO_√xt_öãru±
 64

	)

3 
	#LO_cy˛e_cou¡
 (
LO_√xt_öãru±
 + 4)

	)

4 
	#LO_œ°_cou¡
 (
LO_cy˛e_cou¡
 + 4)

	)

5 
	#LO_≥ndög_ex˚±i⁄
 (
LO_œ°_cou¡
 + 4)

	)

6 
	#LO_°›
 (
LO_≥ndög_ex˚±i⁄
 + 4)

	)

7 
	#LO_övc_±r
 (
LO_°›
 + 4)

	)

8 
	#LO_addªss
 (
LO_övc_±r
 + 4)

	)

9 
	#LO_psxRegs
 (
LO_addªss
 + 4)

	)

10 
	#LO_ªg
 (
LO_psxRegs
)

	)

11 
	#LO_lo
 (
LO_ªg
 + 128)

	)

12 
	#LO_hi
 (
LO_lo
 + 4)

	)

13 
	#LO_ªg_c›0
 (
LO_hi
 + 4)

	)

14 
	#LO_ªg_c›2d
 (
LO_ªg_c›0
 + 128)

	)

15 
	#LO_ªg_c›2c
 (
LO_ªg_c›2d
 + 128)

	)

16 
	#LO_PC
 (
LO_ªg_c›2c
 + 128)

	)

17 
	#LO_pˇddr
 (
LO_PC
)

	)

18 
	#LO_code
 (
LO_PC
 + 4)

	)

19 
	#LO_cy˛e
 (
LO_code
 + 4)

	)

20 
	#LO_öãºu±
 (
LO_cy˛e
 + 4)

	)

21 
	#LO_ötCy˛e
 (
LO_öãºu±
 + 4)

	)

22 
	#LO_psxRegs_íd
 (
LO_ötCy˛e
 + 256)

	)

23 
	#LO_r˙ts
 (
LO_psxRegs_íd
)

	)

24 
	#LO_r˙ts_íd
 (
LO_r˙ts
 + 7*4*4)

	)

25 
	#LO_mem_πab
 (
LO_r˙ts_íd
)

	)

26 
	#LO_mem_wèb
 (
LO_mem_πab
 + 4)

	)

27 
	#LO_psxH_±r
 (
LO_mem_wèb
 + 4)

	)

28 
	#LO_zîomem_±r
 (
LO_psxH_±r
 + 4)

	)

29 
	#LO_öv_code_°¨t
 (
LO_zîomem_±r
 + 4)

	)

30 
	#LO_öv_code_íd
 (
LO_öv_code_°¨t
 + 4)

	)

31 
	#LO_bønch_èrgë
 (
LO_öv_code_íd
 + 4)

	)

32 
	#LO_s¸©ch_buf_±r
 (
LO_bønch_èrgë
 + 4)

	)

33 
	#LO_Æign0
 (
LO_s¸©ch_buf_±r
 + 4)

	)

34 
	#LO_möi_ht
 (
LO_Æign0
 + 12)

	)

35 
	#LO_ª°‹e_ˇndid©e
 (
LO_möi_ht
 + 256)

	)

36 
	#LO_dy«ªc_loˇl_size
 (
LO_ª°‹e_ˇndid©e
 + 512)

	)

38 
	#LO_FCR0
 (
LO_Æign0
)

	)

39 
	#LO_FCR31
 (
LO_Æign0
)

	)

41 
	#LO_c›2_to_s¸©ch_buf
 (
LO_s¸©ch_buf_±r
 - 
LO_ªg_c›2d
)

	)

	@libpcsxcore/new_dynarec/new_dynarec.c

21 
	~<°dlib.h
>

22 
	~<°döt.h
>

23 
	~<as£π.h
>

24 
	~<î∫o.h
>

25 
	~<sys/mm™.h
>

27 
	~"emu_if.h
"

32 
	#as£m_debug
(...)

	)

33 
	#öv_debug
(...)

	)

35 #ifde‡
__i386__


36 
	~"as£m_x86.h
"

38 #ifde‡
__x86_64__


39 
	~"as£m_x64.h
"

41 #ifde‡
__¨m__


42 
	~"as£m_¨m.h
"

45 #ifde‡
__BLACKBERRY_QNX__


46 #unde‡
__˛ór_ˇche


47 
	#__˛ór_ˇche
(
°¨t
,
íd
Ë
	`msync
(°¨t, (
size_t
)((*Înd - (*)°¨t), 
MS_SYNC
 | 
MS_CACHE_ONLY
 | 
MS_INVALIDATE_ICACHE
);

	)

48 #ñi‡
deföed
(
__MACH__
)

49 
	~<libkîn/OSCacheC⁄åﬁ.h
>

50 
	#__˛ór_ˇche
 
mach_˛ór_ˇche


	)

51 
	$__˛ór_ˇche
(*
°¨t
, *
íd
) {

52 
size_t
 
Àn
 = (*)
íd
 - (*)
°¨t
;

53 
	`sys_dˇche_Êush
(
°¨t
, 
Àn
);

54 
	`sys_iˇche_övÆid©e
(
°¨t
, 
Àn
);

55 
	}
}

58 
	#MAXBLOCK
 4096

	)

59 
	#MAX_OUTPUT_BLOCK_SIZE
 262144

	)

61 
	sªg°©


63 sig√d 
	mªgm≠_íåy
[
HOST_REGS
];

64 sig√d 
	mªgm≠
[
HOST_REGS
];

65 
uöt64_t
 
	mwas32
;

66 
uöt64_t
 
	mis32
;

67 
uöt64_t
 
	mwasdúty
;

68 
uöt64_t
 
	mdúty
;

69 
uöt64_t
 
	mu
;

70 
uöt64_t
 
	muu
;

71 
u_öt
 
	mwasc⁄°
;

72 
u_öt
 
	misc⁄°
;

73 
u_öt
 
	mlﬂdedc⁄°
;

74 
u_öt
 
	mwaswrôãn
;

78 
	sŒ_íåy


80 
u_öt
 
	mvaddr
;

81 
u_öt
 
	mªg_sv_Êags
;

82 *
	maddr
;

83 
Œ_íåy
 *
	m√xt
;

86 
u_öt
 
	g°¨t
;

87 
u_öt
 *
	gsour˚
;

88 
	gö¢
[
MAXBLOCK
][10];

89 
u_ch¨
 
	gôy≥
[
MAXBLOCK
];

90 
u_ch¨
 
	g›code
[
MAXBLOCK
];

91 
u_ch¨
 
	g›code2
[
MAXBLOCK
];

92 
u_ch¨
 
	gbt
[
MAXBLOCK
];

93 
u_ch¨
 
	grs1
[
MAXBLOCK
];

94 
u_ch¨
 
	grs2
[
MAXBLOCK
];

95 
u_ch¨
 
	gπ1
[
MAXBLOCK
];

96 
u_ch¨
 
	gπ2
[
MAXBLOCK
];

97 
u_ch¨
 
	gus1
[
MAXBLOCK
];

98 
u_ch¨
 
	gus2
[
MAXBLOCK
];

99 
u_ch¨
 
	gdï1
[
MAXBLOCK
];

100 
u_ch¨
 
	gdï2
[
MAXBLOCK
];

101 
u_ch¨
 
	g…1
[
MAXBLOCK
];

102 
uöt64_t
 
	ggã_rs
[
MAXBLOCK
];

103 
uöt64_t
 
	ggã_π
[
MAXBLOCK
];

104 
uöt64_t
 
	ggã_u¬ìded
[
MAXBLOCK
];

105 
u_öt
 
	gsmrv
[32];

106 
u_öt
 
	gsmrv_°r⁄g
;

107 
u_öt
 
	gsmrv_wók
;

108 
u_öt
 
	gsmrv_°r⁄g_√xt
;

109 
u_öt
 
	gsmrv_wók_√xt
;

110 
	gimm
[
MAXBLOCK
];

111 
u_öt
 
	gba
[
MAXBLOCK
];

112 
	glikñy
[
MAXBLOCK
];

113 
	gis_ds
[
MAXBLOCK
];

114 
	gooo
[
MAXBLOCK
];

115 
uöt64_t
 
	gu¬ìded_ªg
[
MAXBLOCK
];

116 
uöt64_t
 
	gu¬ìded_ªg_uµî
[
MAXBLOCK
];

117 
uöt64_t
 
	gbønch_u¬ìded_ªg
[
MAXBLOCK
];

118 
uöt64_t
 
	gbønch_u¬ìded_ªg_uµî
[
MAXBLOCK
];

119 
uöt64_t
 
	gp32
[
MAXBLOCK
];

120 
uöt64_t
 
	g¥32
[
MAXBLOCK
];

121 sig√d 
	gªgm≠_¥e
[
MAXBLOCK
][
HOST_REGS
];

122 
uöt64_t
 
	gcuºít_c⁄°m≠
[
HOST_REGS
];

123 
uöt64_t
 
	gc⁄°m≠
[
MAXBLOCK
][
HOST_REGS
];

124 
ªg°©
 
	gªgs
[
MAXBLOCK
];

125 
ªg°©
 
	gbønch_ªgs
[
MAXBLOCK
];

126 sig√d 
	gmöimum_‰ì_ªgs
[
MAXBLOCK
];

127 
u_öt
 
	g√eded_ªg
[
MAXBLOCK
];

128 
uöt64_t
 
	gªquúes_32bô
[
MAXBLOCK
];

129 
u_öt
 
	gw⁄t_dúty
[
MAXBLOCK
];

130 
u_öt
 
	gwûl_dúty
[
MAXBLOCK
];

131 
	gcˇdj
[
MAXBLOCK
];

132 
	g¶í
;

133 
u_öt
 
	gö°r_addr
[
MAXBLOCK
];

134 
u_öt
 
	glök_addr
[
MAXBLOCK
][3];

135 
	glökcou¡
;

136 
u_öt
 
	g°ubs
[
MAXBLOCK
*3][8];

137 
	g°ubcou¡
;

138 
u_öt
 
	glôîÆs
[1024][2];

139 
	glôîÆcou¡
;

140 
	gis_dñay¶Ÿ
;

141 
	gc›1_ußbÀ
;

142 
u_ch¨
 *
	gout
;

143 
Œ_íåy
 *
	gjump_ö
[4096] 
__©åibuã__
((
Æig√d
(16)));

144 
Œ_íåy
 *
	gjump_out
[4096];

145 
Œ_íåy
 *
	gjump_dúty
[4096];

146 
u_öt
 
	ghash_èbÀ
[65536][4] 
__©åibuã__
((
Æig√d
(16)));

147 
	gshadow
[1048576] 
__©åibuã__
((
Æig√d
(16)));

148 *
	gc›y
;

149 
	gexpúï
;

150 #i‚de‡
PCSX


151 
u_öt
 
	gusög_éb
;

153 c⁄° 
u_öt
 
	gusög_éb
=0;

155 
	g√w_dy«ªc_did_compûe
;

156 
	g√w_dy«ªc_hacks
;

157 
u_öt
 
	g°›_a·î_jÆ
;

158 #i‚de‡
RAM_FIXED


159 
u_öt
 
	gøm_off£t
;

161 c⁄° 
u_öt
 
	gøm_off£t
=0;

163 
u_ch¨
 
ª°‹e_ˇndid©e
[512];

164 
cy˛e_cou¡
;

168 
	#HIREG
 32

169 
	#LOREG
 33

170 
	#FSREG
 34

171 
	#CSREG
 35

172 
	#CCREG
 36

173 
	#INVCP
 37

174 
	#MMREG
 38

175 
	#ROREG
 39

176 
	#TEMPREG
 40

	)

177 
	#FTEMP
 40

178 
	#PTEMP
 41

179 
	#TLREG
 42

180 
	#RHASH
 43

181 
	#RHTBL
 44

182 
	#RTEMP
 45

183 
	#MAXREG
 45

	)

184 
	#AGEN1
 46

185 
	#AGEN2
 47

186 
	#MGEN1
 48

187 
	#MGEN2
 49

188 
	#BTREG
 50

189 

	)

191 
	#NOP
 0

192 
	#LOAD
 1

193 
	#STORE
 2

194 
	#LOADLR
 3

195 
	#STORELR
 4

196 
	#MOV
 5

197 
	#ALU
 6

198 
	#MULTDIV
 7

199 
	#SHIFT
 8

200 
	#SHIFTIMM
 9

201 
	#IMM16
 10

202 
	#RJUMP
 11

203 
	#UJUMP
 12

204 
	#CJUMP
 13

205 
	#SJUMP
 14

206 
	#COP0
 15

207 
	#COP1
 16

208 
	#C1LS
 17

209 
	#FJUMP
 18

210 
	#FLOAT
 19

211 
	#FCONV
 20

212 
	#FCOMP
 21

213 
	#SYSCALL
 22

214 
	#OTHER
 23

215 
	#SPAN
 24

216 
	#NI
 25

217 
	#HLECALL
 26

218 
	#COP2
 27

219 
	#C2LS
 28

220 
	#C2OP
 29

221 
	#INTCALL
 30

222 

	)

224 
	#CC_STUB
 1

	)

225 
	#FP_STUB
 2

	)

226 
	#LOADB_STUB
 3

	)

227 
	#LOADH_STUB
 4

	)

228 
	#LOADW_STUB
 5

	)

229 
	#LOADD_STUB
 6

	)

230 
	#LOADBU_STUB
 7

	)

231 
	#LOADHU_STUB
 8

	)

232 
	#STOREB_STUB
 9

	)

233 
	#STOREH_STUB
 10

	)

234 
	#STOREW_STUB
 11

	)

235 
	#STORED_STUB
 12

	)

236 
	#STORELR_STUB
 13

	)

237 
	#INVCODE_STUB
 14

	)

240 
	#TAKEN
 1

	)

241 
	#NOTTAKEN
 2

	)

242 
	#NULLDS
 3

	)

245 
√w_ªcompûe_block
(
addr
);

246 *
gë_addr_ht
(
u_öt
 
vaddr
);

247 
övÆid©e_block
(
u_öt
 
block
);

248 
övÆid©e_addr
(
u_öt
 
addr
);

249 
ªmove_hash
(
vaddr
);

250 
jump_vaddr
();

251 
dy«_lökî
();

252 
dy«_lökî_ds
();

253 
vîify_code
();

254 
vîify_code_vm
();

255 
vîify_code_ds
();

256 
cc_öãºu±
();

257 
Â_ex˚±i⁄
();

258 
Â_ex˚±i⁄_ds
();

259 
jump_sysˇŒ
();

260 
jump_sysˇŒ_hÀ
();

261 
jump_îë
();

262 
jump_hÀˇŒ
();

263 
jump_ötˇŒ
();

264 
√w_dy«_Àave
();

267 
TLBWI_√w
();

268 
TLBWR_√w
();

269 
ªad_nomem_√w
();

270 
ªad_nomemb_√w
();

271 
ªad_nomemh_√w
();

272 
ªad_nomemd_√w
();

273 
wrôe_nomem_√w
();

274 
wrôe_nomemb_√w
();

275 
wrôe_nomemh_√w
();

276 
wrôe_nomemd_√w
();

277 
wrôe_rdøm_√w
();

278 
wrôe_rdømb_√w
();

279 
wrôe_rdømh_√w
();

280 
wrôe_rdømd_√w
();

281 
u_öt
 
mem‹y_m≠
[1048576];

284 
wb_ªgi°î
(sig√d 
r
,sig√d 
ªgm≠
[],
uöt64_t
 
dúty
,uöt64_à
is32
);

285 
wb_dútys
(sig√d 
i_ªgm≠
[],
uöt64_t
 
i_is32
,uöt64_à
i_dúty
);

286 
wb_√eded_dútys
(sig√d 
i_ªgm≠
[],
uöt64_t
 
i_is32
,uöt64_à
i_dúty
,
addr
);

287 
lﬂd_Æl_ªgs
(sig√d 
i_ªgm≠
[]);

288 
lﬂd_√eded_ªgs
(sig√d 
i_ªgm≠
[],sig√d 
√xt_ªgm≠
[]);

289 
lﬂd_ªgs_íåy
(
t
);

290 
lﬂd_Æl_c⁄°s
(sig√d 
ªgm≠
[],
is32
,
u_öt
 
dúty
,
i
);

292 
	gåa˚debug
=0;

296 
	#NO_CYCLE_PENALTY_THR
 12

	)

298 
	gcy˛e_mu…ùlõr
;

300 
	$CLOCK_ADJUST
(
x
)

302 
s
=(
x
>>31)|1;

303  (
x
 * 
cy˛e_mu…ùlõr
 + 
s
 * 50) / 100;

304 
	}
}

306 
	$éb_hacks
()

308 #i‚de‡
DISABLE_TLB


310 i‡(
	`°∫cmp
((*Ë
ROM_HEADER
->
nom
, "GOLDENEYE",9) == 0)

312 
u_öt
 
addr
;

313 
n
;

314 
ROM_HEADER
->
Cou¡ry_code
&0xFF)

317 
addr
=0x34b30;

320 
addr
=0x34b70;

323 
addr
=0x329f0;

327 
addr
=0;

330 
u_öt
 
rom_addr
=(u_öt)
rom
;

331 #ifde‡
ROM_COPY


334 if((*)
rom
>(*)0xffffffff) {

335 
	`munm≠
(
ROM_COPY
, 67108864);

336 if(
	`mm≠
(
ROM_COPY
, 12582912,

337 
PROT_READ
 | 
PROT_WRITE
,

338 
MAP_FIXED
 | 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
,

339 -1, 0Ë<0Ë{
	`¥ötf
("mmap() failed\n");}

340 
	`mem˝y
(
ROM_COPY
,
rom
,12582912);

341 
rom_addr
=(
u_öt
)
ROM_COPY
;

344 if(
addr
) {

345 
n
=0x7F000;n<0x80000;n++) {

346 
mem‹y_m≠
[
n
]=(((
u_öt
)(
rom_addr
+
addr
-0x7F000000))>>2)|0x40000000;

351 
	}
}

353 
u_öt
 
	$gë_∑ge
(
u_öt
 
vaddr
)

355 #i‚de‡
PCSX


356 
u_öt
 
∑ge
=(
vaddr
^0x80000000)>>12;

358 
u_öt
 
∑ge
=
vaddr
&~0xe0000000;

359 i‡(
∑ge
 < 0x1000000)

360 
∑ge
 &= ~0x0e00000;

361 
∑ge
>>=12;

363 #i‚de‡
DISABLE_TLB


364 if(
∑ge
>262143&&
éb_LUT_r
[
vaddr
>>12])Öage=(tlb_LUT_r[vaddr>>12]^0x80000000)>>12;

366 if(
∑ge
>2048)Öage=2048+(page&2047);

367  
∑ge
;

368 
	}
}

370 #i‚de‡
PCSX


371 
u_öt
 
	$gë_v∑ge
(
u_öt
 
vaddr
)

373 
u_öt
 
v∑ge
=(
vaddr
^0x80000000)>>12;

374 #i‚de‡
DISABLE_TLB


375 if(
v∑ge
>262143&&
éb_LUT_r
[
vaddr
>>12]) vpage&=2047;

377 if(
v∑ge
>2048) vpage=2048+(vpage&2047);

378  
v∑ge
;

379 
	}
}

382 
u_öt
 
	$gë_v∑ge
(
u_öt
 
vaddr
)

384  
	`gë_∑ge
(
vaddr
);

385 
	}
}

390 *
	$gë_addr
(
u_öt
 
vaddr
)

392 
u_öt
 
∑ge
=
	`gë_∑ge
(
vaddr
);

393 
u_öt
 
v∑ge
=
	`gë_v∑ge
(
vaddr
);

394 
Œ_íåy
 *
hód
;

396 
hód
=
jump_ö
[
∑ge
];

397 
hód
!=
NULL
) {

398 if(
hód
->
vaddr
==vaddr) {

400 *
ht_bö
=
hash_èbÀ
[((
vaddr
>>16)^vaddr)&0xFFFF];

401 
ht_bö
[3]=ht_bin[1];

402 
ht_bö
[2]=ht_bin[0];

403 
ht_bö
[1]=()
hód
->
addr
;

404 
ht_bö
[0]=
vaddr
;

405  
hód
->
addr
;

407 
hód
=hód->
√xt
;

409 
hód
=
jump_dúty
[
v∑ge
];

410 
hód
!=
NULL
) {

411 if(
hód
->
vaddr
==vaddr) {

414 if((((
u_öt
)
hód
->
addr
-(u_öt)
out
)<<(32-
TARGET_SIZE_2
))>0x60000000+(
MAX_OUTPUT_BLOCK_SIZE
<<(32-TARGET_SIZE_2)))

415 if(
	`vîify_dúty
(
hód
->
addr
)) {

417 
övÆid_code
[
vaddr
>>12]=0;

418 
öv_code_°¨t
=
öv_code_íd
=~0;

419 #i‚de‡
DISABLE_TLB


420 
mem‹y_m≠
[
vaddr
>>12]|=0x40000000;

422 if(
v∑ge
<2048) {

423 #i‚de‡
DISABLE_TLB


424 if(
éb_LUT_r
[
vaddr
>>12]) {

425 
övÆid_code
[
éb_LUT_r
[
vaddr
>>12]>>12]=0;

426 
mem‹y_m≠
[
éb_LUT_r
[
vaddr
>>12]>>12]|=0x40000000;

429 
ª°‹e_ˇndid©e
[
v∑ge
>>3]|=1<<(vpage&7);

431 
ª°‹e_ˇndid©e
[
∑ge
>>3]|=1<<(page&7);

432 *
ht_bö
=
hash_èbÀ
[((
vaddr
>>16)^vaddr)&0xFFFF];

433 if(
ht_bö
[0]==
vaddr
) {

434 
ht_bö
[1]=()
hód
->
addr
;

438 
ht_bö
[3]=ht_bin[1];

439 
ht_bö
[2]=ht_bin[0];

440 
ht_bö
[1]=()
hód
->
addr
;

441 
ht_bö
[0]=
vaddr
;

443  
hód
->
addr
;

446 
hód
=hód->
√xt
;

449 
r
=
	`√w_ªcompûe_block
(
vaddr
);

450 if(
r
==0Ë 
	`gë_addr
(
vaddr
);

452 
Sètus
|=2;

453 
Cau£
=(
vaddr
<<31)|0x8;

454 
EPC
=(
vaddr
&1)?vaddr-5:vaddr;

455 
BadVAddr
=(
vaddr
&~1);

456 
C⁄ãxt
=(C⁄ãxt&0xFF80000F)|((
BadVAddr
>>9)&0x007FFFF0);

457 
E¡ryHi
=
BadVAddr
&0xFFFFE000;

458  
	`gë_addr_ht
(0x80000000);

459 
	}
}

461 *
	$gë_addr_ht
(
u_öt
 
vaddr
)

464 *
ht_bö
=
hash_èbÀ
[((
vaddr
>>16)^vaddr)&0xFFFF];

465 if(
ht_bö
[0]==
vaddr
)  (*)ht_bin[1];

466 if(
ht_bö
[2]==
vaddr
)  (*)ht_bin[3];

467  
	`gë_addr
(
vaddr
);

468 
	}
}

470 
	$˛ór_Æl_ªgs
(sig√d 
ªgm≠
[])

472 
hr
;

473 
hr
=0;hr<
HOST_REGS
;hr++Ë
ªgm≠
[hr]=-1;

474 
	}
}

476 sig√d 
	$gë_ªg
(sig√d 
ªgm≠
[],
r
)

478 
hr
;

479 
hr
=0;hr<
HOST_REGS
;hr++Ëif(hr!=
EXCLUDE_REG
&&
ªgm≠
[hr]==
r
)  hr;

481 
	}
}

484 sig√d 
	$gë_ªg2
(sig√d 
ªgm≠1
[],sig√d 
ªgm≠2
[],
r
)

486 
hr
;

487 
hr
=0;hr<
HOST_REGS
;hr++Ëif(hr!=
EXCLUDE_REG
&&
ªgm≠1
[hr]==
r
&&
ªgm≠2
[hr]==r)  hr;

489 
	}
}

491 
	$cou¡_‰ì_ªgs
(sig√d 
ªgm≠
[])

493 
cou¡
=0;

494 
hr
;

495 
hr
=0;hr<
HOST_REGS
;hr++)

497 if(
hr
!=
EXCLUDE_REG
) {

498 if(
ªgm≠
[
hr
]<0Ë
cou¡
++;

501  
cou¡
;

502 
	}
}

504 
	$dúty_ªg
(
ªg°©
 *
cur
,sig√d 
ªg
)

506 
hr
;

507 if(!
ªg
) ;

508 
hr
=0;hr<
HOST_REGS
;hr++) {

509 if((
cur
->
ªgm≠
[
hr
]&63)==
ªg
) {

510 
cur
->
dúty
|=1<<
hr
;

513 
	}
}

520 
	$Êush_dúty_uµîs
(
ªg°©
 *
cur
)

522 
hr
,
ªg
;

523 
hr
=0;hr<
HOST_REGS
;hr++) {

524 if((
cur
->
dúty
>>
hr
)&1) {

525 
ªg
=
cur
->
ªgm≠
[
hr
];

526 if(
ªg
>=64)

527 if((
cur
->
is32
>>(
ªg
&63))&1Ëcur->
ªgm≠
[
hr
]=-1;

530 
	}
}

532 
	$£t_c⁄°
(
ªg°©
 *
cur
,sig√d 
ªg
,
uöt64_t
 
vÆue
)

534 
hr
;

535 if(!
ªg
) ;

536 
hr
=0;hr<
HOST_REGS
;hr++) {

537 if(
cur
->
ªgm≠
[
hr
]==
ªg
) {

538 
cur
->
isc⁄°
|=1<<
hr
;

539 
cuºít_c⁄°m≠
[
hr
]=
vÆue
;

541 if((
cur
->
ªgm≠
[
hr
]^64)==
ªg
) {

542 
cur
->
isc⁄°
|=1<<
hr
;

543 
cuºít_c⁄°m≠
[
hr
]=
vÆue
>>32;

546 
	}
}

548 
	$˛ór_c⁄°
(
ªg°©
 *
cur
,sig√d 
ªg
)

550 
hr
;

551 if(!
ªg
) ;

552 
hr
=0;hr<
HOST_REGS
;hr++) {

553 if((
cur
->
ªgm≠
[
hr
]&63)==
ªg
) {

554 
cur
->
isc⁄°
&=~(1<<
hr
);

557 
	}
}

559 
	$is_c⁄°
(
ªg°©
 *
cur
,sig√d 
ªg
)

561 
hr
;

562 if(
ªg
<0)  0;

563 if(!
ªg
)  1;

564 
hr
=0;hr<
HOST_REGS
;hr++) {

565 if((
cur
->
ªgm≠
[
hr
]&63)==
ªg
) {

566  (
cur
->
isc⁄°
>>
hr
)&1;

570 
	}
}

571 
uöt64_t
 
	$gë_c⁄°
(
ªg°©
 *
cur
,sig√d 
ªg
)

573 
hr
;

574 if(!
ªg
)  0;

575 
hr
=0;hr<
HOST_REGS
;hr++) {

576 if(
cur
->
ªgm≠
[
hr
]==
ªg
) {

577  
cuºít_c⁄°m≠
[
hr
];

580 
	`SysPrötf
("Unknow¿c⁄°™àöÑ%d\n",
ªg
);

581 
	`exô
(1);

582 
	}
}

587 
	$l¢
(
u_ch¨
 
h¢
[], 
i
, *
¥e„ºed_ªg
)

589 
j
;

590 
b
=-1;

591 
j
=0;j<9;j++)

593 if(
i
+
j
>=
¶í
) {

594 
j
=
¶í
-
i
-1;

597 if(
ôy≥
[
i
+
j
]==
UJUMP
||ôy≥[i+j]==
RJUMP
||(
sour˚
[i+j]>>16)==0x1000)

600 
j
++;

604 ;
j
>=0;j--)

606 if(
rs1
[
i
+
j
]Ë
h¢
[rs1[i+j]]=j;

607 if(
rs2
[
i
+
j
]Ë
h¢
[rs2[i+j]]=j;

608 if(
π1
[
i
+
j
]Ë
h¢
[rt1[i+j]]=j;

609 if(
π2
[
i
+
j
]Ë
h¢
[rt2[i+j]]=j;

610 if(
ôy≥
[
i
+
j
]==
STORE
 || ity≥[i+j]==
STORELR
) {

612 
h¢
[
rs1
[
i
+
j
]]=j;

613 
h¢
[
rs2
[
i
+
j
]]=j;

616 #i‡
	`deföed
(
HOST_IMM8
)

617 if(
ôy≥
[
i
+
j
]==
STORE
 || ity≥[i+j]==
STORELR
 || (
›code
[i+j]&0x3b)==0x39 || (opcode[i+j]&0x3b)==0x3a) {

618 
h¢
[
INVCP
]=
j
;

621 if(
i
+
j
>=0&&(
ôy≥
[i+j]==
UJUMP
||ôy≥[i+j]==
CJUMP
||ôy≥[i+j]==
SJUMP
||ôy≥[i+j]==
FJUMP
))

623 
h¢
[
CCREG
]=
j
;

624 
b
=
j
;

627 if(
b
>=0)

629 if(
ba
[
i
+
b
]>=
°¨t
 && ba[i+b]<(°¨t+
¶í
*4))

632 
t
=(
ba
[
i
+
b
]-
°¨t
)>>2;

633 
j
=7-
b
;if(
t
+j>=
¶í
) j=slen-t-1;

634 ;
j
>=0;j--)

636 if(
rs1
[
t
+
j
]Ëif(
h¢
[rs1[t+j]]>j+
b
+2) hsn[rs1[t+j]]=j+b+2;

637 if(
rs2
[
t
+
j
]Ëif(
h¢
[rs2[t+j]]>j+
b
+2) hsn[rs2[t+j]]=j+b+2;

645 if(
i
>0&&(
ôy≥
[i-1]==
RJUMP
||ôy≥[i-1]==
UJUMP
||ôy≥[i-1]==
CJUMP
||ôy≥[i-1]==
SJUMP
||ôy≥[i-1]==
FJUMP
)) {

646 if(
rs1
[
i
-1]Ëif(
h¢
[rs1[i-1]]>1) hsn[rs1[i-1]]=1;

647 if(
rs2
[
i
-1]Ëif(
h¢
[rs2[i-1]]>1) hsn[rs2[i-1]]=1;

648 
h¢
[
CCREG
]=1;

650 
h¢
[
RHASH
]=1;

651 
h¢
[
RHTBL
]=1;

654 if(
ôy≥
[
i
]==
C1LS
||ôy≥[i]==
C2LS
) {

655 
h¢
[
FTEMP
]=0;

658 if(
ôy≥
[
i
]==
LOADLR
) {

659 
h¢
[
FTEMP
]=0;

662 if(
›code
[
i
]==0x2a||opcode[i]==0x2e||opcode[i]==0x2c||opcode[i]==0x2d) {

663 
h¢
[
FTEMP
]=0;

666 if(
ôy≥
[
i
]==
LOAD
 || ity≥[i]==
LOADLR
 || ity≥[i]==
STORE
 || ity≥[i]==
STORELR
 || ity≥[i]==
C1LS
 || ity≥[i]==
C2LS
) {

667 
h¢
[
TLREG
]=0;

670 if(
ôy≥
[
i
]==
UJUMP
||ôy≥[i]==
RJUMP
)

672 
h¢
[
RHASH
]=0;

673 
h¢
[
RHTBL
]=0;

675 
	}
}

678 
	$√eded_agaö
(
r
, 
i
)

680 
j
;

681 
b
=-1;

682 
∫
=10;

684 if(
i
>0&&(
ôy≥
[i-1]==
UJUMP
||ôy≥[i-1]==
RJUMP
||(
sour˚
[i-1]>>16)==0x1000))

686 if(
ba
[
i
-1]<
°¨t
 || ba[i-1]>°¨t+
¶í
*4-4)

689 
j
=0;j<9;j++)

691 if(
i
+
j
>=
¶í
) {

692 
j
=
¶í
-
i
-1;

695 if(
ôy≥
[
i
+
j
]==
UJUMP
||ôy≥[i+j]==
RJUMP
||(
sour˚
[i+j]>>16)==0x1000)

698 
j
++;

701 if(
ôy≥
[
i
+
j
]==
SYSCALL
||ôy≥[i+j]==
HLECALL
||ôy≥[i+j]==
INTCALL
||((
sour˚
[i+j]&0xfc00003f)==0x0d))

706 ;
j
>=1;j--)

708 if(
rs1
[
i
+
j
]==
r
Ë
∫
=j;

709 if(
rs2
[
i
+
j
]==
r
Ë
∫
=j;

710 if((
u¬ìded_ªg
[
i
+
j
]>>
r
)&1Ë
∫
=10;

711 if(
i
+
j
>=0&&(
ôy≥
[i+j]==
UJUMP
||ôy≥[i+j]==
CJUMP
||ôy≥[i+j]==
SJUMP
||ôy≥[i+j]==
FJUMP
))

713 
b
=
j
;

735 if(
∫
<10)  1;

737 
	}
}

741 
	$lo›_ªg
(
i
, 
r
, 
hr
)

743 
j
,
k
;

744 
j
=0;j<9;j++)

746 if(
i
+
j
>=
¶í
) {

747 
j
=
¶í
-
i
-1;

750 if(
ôy≥
[
i
+
j
]==
UJUMP
||ôy≥[i+j]==
RJUMP
||(
sour˚
[i+j]>>16)==0x1000)

753 
j
++;

757 
k
=0;

758 if(
i
>0){

759 if(
ôy≥
[
i
-1]==
UJUMP
||ôy≥[i-1]==
CJUMP
||ôy≥[i-1]==
SJUMP
||ôy≥[i-1]==
FJUMP
)

760 
k
--;

762 ;
k
<
j
;k++)

764 if(
r
<64&&((
u¬ìded_ªg
[
i
+
k
]>>r)&1)Ë 
hr
;

765 if(
r
>64&&((
u¬ìded_ªg_uµî
[
i
+
k
]>>r)&1)Ë 
hr
;

766 if(
i
+
k
>=0&&(
ôy≥
[i+k]==
UJUMP
||ôy≥[i+k]==
CJUMP
||ôy≥[i+k]==
SJUMP
||ôy≥[i+k]==
FJUMP
))

768 if(
ba
[
i
+
k
]>=
°¨t
 && ba[i+k]<(start+i*4))

770 
t
=(
ba
[
i
+
k
]-
°¨t
)>>2;

771 
ªg
=
	`gë_ªg
(
ªgs
[
t
].
ªgm≠_íåy
,
r
);

772 if(
ªg
>=0) Ñeg;

778  
hr
;

779 
	}
}

783 
	$Æloc_Æl
(
ªg°©
 *
cur
,
i
)

785 
hr
;

787 
hr
=0;hr<
HOST_REGS
;hr++) {

788 if(
hr
!=
EXCLUDE_REG
) {

789 if(((
cur
->
ªgm≠
[
hr
]&63)!=
rs1
[
i
])&&((cur->ªgm≠[hr]&63)!=
rs2
[i])&&

790 ((
cur
->
ªgm≠
[
hr
]&63)!=
π1
[
i
])&&((cur->ªgm≠[hr]&63)!=
π2
[i]))

792 
cur
->
ªgm≠
[
hr
]=-1;

793 
cur
->
dúty
&=~(1<<
hr
);

796 if((
cur
->
ªgm≠
[
hr
]&63)==0)

798 
cur
->
ªgm≠
[
hr
]=-1;

799 
cur
->
dúty
&=~(1<<
hr
);

803 
	}
}

805 #i‚de‡
FORCE32


806 
	$div64
(
öt64_t
 
dividíd
,öt64_à
divis‹
)

808 
lo
=
dividíd
/
divis‹
;

809 
hi
=
dividíd
%
divis‹
;

812 
	}
}

813 
	$divu64
(
uöt64_t
 
dividíd
,uöt64_à
divis‹
)

815 
lo
=
dividíd
/
divis‹
;

816 
hi
=
dividíd
%
divis‹
;

819 
	}
}

821 
	$mu…64
(
uöt64_t
 
m1
,uöt64_à
m2
)

823 
›1
, 
›2
, 
›3
, 
›4
;

824 
ªsu…1
, 
ªsu…2
, 
ªsu…3
, 
ªsu…4
;

825 
ãmp1
, 
ãmp2
, 
ãmp3
, 
ãmp4
;

826 
sign
 = 0;

828 i‡(
m1
 < 0)

830 
›2
 = -
m1
;

831 
sign
 = 1 - sign;

833 
›2
 = 
m1
;

834 i‡(
m2
 < 0)

836 
›4
 = -
m2
;

837 
sign
 = 1 - sign;

839 
›4
 = 
m2
;

841 
›1
 = 
›2
 & 0xFFFFFFFF;

842 
›2
 = (op2 >> 32) & 0xFFFFFFFF;

843 
›3
 = 
›4
 & 0xFFFFFFFF;

844 
›4
 = (op4 >> 32) & 0xFFFFFFFF;

846 
ãmp1
 = 
›1
 * 
›3
;

847 
ãmp2
 = (
ãmp1
 >> 32Ë+ 
›1
 * 
›4
;

848 
ãmp3
 = 
›2
 * 
›3
;

849 
ãmp4
 = (
ãmp3
 >> 32Ë+ 
›2
 * 
›4
;

851 
ªsu…1
 = 
ãmp1
 & 0xFFFFFFFF;

852 
ªsu…2
 = 
ãmp2
 + (
ãmp3
 & 0xFFFFFFFF);

853 
ªsu…3
 = (
ªsu…2
 >> 32Ë+ 
ãmp4
;

854 
ªsu…4
 = (
ªsu…3
 >> 32);

856 
lo
 = 
ªsu…1
 | (
ªsu…2
 << 32);

857 
hi
 = (
ªsu…3
 & 0xFFFFFFFFË| (
ªsu…4
 << 32);

858 i‡(
sign
)

860 
hi
 = ~hi;

861 i‡(!
lo
Ë
hi
++;

862 
lo
 = ~lo + 1;

864 
	}
}

866 
	$mu…u64
(
uöt64_t
 
m1
,uöt64_à
m2
)

868 
›1
, 
›2
, 
›3
, 
›4
;

869 
ªsu…1
, 
ªsu…2
, 
ªsu…3
, 
ªsu…4
;

870 
ãmp1
, 
ãmp2
, 
ãmp3
, 
ãmp4
;

872 
›1
 = 
m1
 & 0xFFFFFFFF;

873 
›2
 = (
m1
 >> 32) & 0xFFFFFFFF;

874 
›3
 = 
m2
 & 0xFFFFFFFF;

875 
›4
 = (
m2
 >> 32) & 0xFFFFFFFF;

877 
ãmp1
 = 
›1
 * 
›3
;

878 
ãmp2
 = (
ãmp1
 >> 32Ë+ 
›1
 * 
›4
;

879 
ãmp3
 = 
›2
 * 
›3
;

880 
ãmp4
 = (
ãmp3
 >> 32Ë+ 
›2
 * 
›4
;

882 
ªsu…1
 = 
ãmp1
 & 0xFFFFFFFF;

883 
ªsu…2
 = 
ãmp2
 + (
ãmp3
 & 0xFFFFFFFF);

884 
ªsu…3
 = (
ªsu…2
 >> 32Ë+ 
ãmp4
;

885 
ªsu…4
 = (
ªsu…3
 >> 32);

887 
lo
 = 
ªsu…1
 | (
ªsu…2
 << 32);

888 
hi
 = (
ªsu…3
 & 0xFFFFFFFFË| (
ªsu…4
 << 32);

892 
	}
}

894 
uöt64_t
 
	$ldl_mîge
(
uöt64_t
 
‹igöÆ
,uöt64_à
lﬂded
,
u_öt
 
bôs
)

896 if(
bôs
) {

897 
‹igöÆ
<<=64-
bôs
;

898 
‹igöÆ
>>=64-
bôs
;

899 
lﬂded
<<=
bôs
;

900 
‹igöÆ
|=
lﬂded
;

902 
‹igöÆ
=
lﬂded
;

903  
‹igöÆ
;

904 
	}
}

905 
uöt64_t
 
	$ldr_mîge
(
uöt64_t
 
‹igöÆ
,uöt64_à
lﬂded
,
u_öt
 
bôs
)

907 if(
bôs
^56) {

908 
‹igöÆ
>>=64-(
bôs
^56);

909 
‹igöÆ
<<=64-(
bôs
^56);

910 
lﬂded
>>=
bôs
^56;

911 
‹igöÆ
|=
lﬂded
;

913 
‹igöÆ
=
lﬂded
;

914  
‹igöÆ
;

915 
	}
}

918 #ifde‡
__i386__


919 
	~"as£m_x86.c
"

921 #ifde‡
__x86_64__


922 
	~"as£m_x64.c
"

924 #ifde‡
__¨m__


925 
	~"as£m_¨m.c
"

929 
	$Œ_add
(
Œ_íåy
 **
hód
,
vaddr
,*
addr
)

931 
Œ_íåy
 *
√w_íåy
;

932 
√w_íåy
=
	`mÆloc
((
Œ_íåy
));

933 
	`as£π
(
√w_íåy
!=
NULL
);

934 
√w_íåy
->
vaddr
=vaddr;

935 
√w_íåy
->
ªg_sv_Êags
=0;

936 
√w_íåy
->
addr
=addr;

937 
√w_íåy
->
√xt
=*
hód
;

938 *
hód
=
√w_íåy
;

939 
	}
}

941 
	$Œ_add_Êags
(
Œ_íåy
 **
hód
,
vaddr
,
u_öt
 
ªg_sv_Êags
,*
addr
)

943 
	`Œ_add
(
hód
,
vaddr
,
addr
);

944 (*
hód
)->
ªg_sv_Êags
=reg_sv_flags;

945 
	}
}

949 *
	$check_addr
(
u_öt
 
vaddr
)

951 
u_öt
 *
ht_bö
=
hash_èbÀ
[((
vaddr
>>16)^vaddr)&0xFFFF];

952 if(
ht_bö
[0]==
vaddr
) {

953 if(((
ht_bö
[1]-
MAX_OUTPUT_BLOCK_SIZE
-(
u_öt
)
out
)<<(32-
TARGET_SIZE_2
))>0x60000000+(MAX_OUTPUT_BLOCK_SIZE<<(32-TARGET_SIZE_2)))

954 if(
	`is˛ón
(
ht_bö
[1]))  (*)ht_bin[1];

956 if(
ht_bö
[2]==
vaddr
) {

957 if(((
ht_bö
[3]-
MAX_OUTPUT_BLOCK_SIZE
-(
u_öt
)
out
)<<(32-
TARGET_SIZE_2
))>0x60000000+(MAX_OUTPUT_BLOCK_SIZE<<(32-TARGET_SIZE_2)))

958 if(
	`is˛ón
(
ht_bö
[3]))  (*)ht_bin[3];

960 
u_öt
 
∑ge
=
	`gë_∑ge
(
vaddr
);

961 
Œ_íåy
 *
hód
;

962 
hód
=
jump_ö
[
∑ge
];

963 
hód
!=
NULL
) {

964 if(
hód
->
vaddr
==vaddr) {

965 if((((
u_öt
)
hód
->
addr
-(u_öt)
out
)<<(32-
TARGET_SIZE_2
))>0x60000000+(
MAX_OUTPUT_BLOCK_SIZE
<<(32-TARGET_SIZE_2))) {

967 if(
ht_bö
[0]==
vaddr
) {

968 
ht_bö
[1]=()
hód
->
addr
;

969  
hód
->
addr
;

971 if(
ht_bö
[2]==
vaddr
) {

972 
ht_bö
[3]=()
hód
->
addr
;

973  
hód
->
addr
;

978 if(
ht_bö
[0]==-1) {

979 
ht_bö
[1]=()
hód
->
addr
;

980 
ht_bö
[0]=
vaddr
;

981 }if(
ht_bö
[2]==-1) {

982 
ht_bö
[3]=()
hód
->
addr
;

983 
ht_bö
[2]=
vaddr
;

985  
hód
->
addr
;

988 
hód
=hód->
√xt
;

991 
	}
}

993 
	$ªmove_hash
(
vaddr
)

996 *
ht_bö
=
hash_èbÀ
[(((
vaddr
)>>16)^vaddr)&0xFFFF];

997 if(
ht_bö
[2]==
vaddr
) {

998 
ht_bö
[2]=ht_bin[3]=-1;

1000 if(
ht_bö
[0]==
vaddr
) {

1001 
ht_bö
[0]=ht_bin[2];

1002 
ht_bö
[1]=ht_bin[3];

1003 
ht_bö
[2]=ht_bin[3]=-1;

1005 
	}
}

1007 
	$Œ_ªmove_m©chög_addrs
(
Œ_íåy
 **
hód
,
addr
,
shi·
)

1009 
Œ_íåy
 *
√xt
;

1010 *
hód
) {

1011 if(((
u_öt
)((*
hód
)->
addr
)>>
shi·
)==(addr>>shift) ||

1012 ((
u_öt
)((*
hód
)->
addr
-
MAX_OUTPUT_BLOCK_SIZE
)>>
shi·
)==(addr>>shift))

1014 
	`öv_debug
("EXP: Removêpoöã∏tÿ%x (%x)\n",()(*
hód
)->
addr
,(*hód)->
vaddr
);

1015 
	`ªmove_hash
((*
hód
)->
vaddr
);

1016 
√xt
=(*
hód
)->next;

1017 
	`‰ì
(*
hód
);

1018 *
hód
=
√xt
;

1022 
hód
=&((*hód)->
√xt
);

1025 
	}
}

1028 
	$Œ_˛ór
(
Œ_íåy
 **
hód
)

1030 
Œ_íåy
 *
cur
;

1031 
Œ_íåy
 *
√xt
;

1032 if(
cur
=*
hód
) {

1033 *
hód
=0;

1034 
cur
) {

1035 
√xt
=
cur
->next;

1036 
	`‰ì
(
cur
);

1037 
cur
=
√xt
;

1040 
	}
}

1043 
	$Œ_kûl_poöãrs
(
Œ_íåy
 *
hód
,
addr
,
shi·
)

1045 
hód
) {

1046 
±r
=
	`gë_poöãr
(
hód
->
addr
);

1047 
	`öv_debug
("EXP: Looku∞poöã∏tÿ%xáà%x (%x)\n",()
±r
,()
hód
->
addr
,hód->
vaddr
);

1048 if(((
±r
>>
shi·
)==(
addr
>>shift)) ||

1049 (((
±r
-
MAX_OUTPUT_BLOCK_SIZE
)>>
shi·
)==(
addr
>>shift)))

1051 
	`öv_debug
("EXP: Kû»poöã∏© %x (%x)\n",()
hód
->
addr
,hód->
vaddr
);

1052 
u_öt
 
ho°_addr
=(u_öt)
	`kûl_poöãr
(
hód
->
addr
);

1053 #ifde‡
__¨m__


1054 
√eds_˛ór_ˇche
[(
ho°_addr
-(
u_öt
)
BASE_ADDR
)>>17]|=1<<(((host_addr-(u_int)BASE_ADDR)>>12)&31);

1057 
hód
=hód->
√xt
;

1059 
	}
}

1062 
	$övÆid©e_∑ge
(
u_öt
 
∑ge
)

1064 
Œ_íåy
 *
hód
;

1065 
Œ_íåy
 *
√xt
;

1066 
hód
=
jump_ö
[
∑ge
];

1067 
jump_ö
[
∑ge
]=0;

1068 
hód
!=
NULL
) {

1069 
	`öv_debug
("INVALIDATE: %x\n",
hód
->
vaddr
);

1070 
	`ªmove_hash
(
hód
->
vaddr
);

1071 
√xt
=
hód
->next;

1072 
	`‰ì
(
hód
);

1073 
hód
=
√xt
;

1075 
hód
=
jump_out
[
∑ge
];

1076 
jump_out
[
∑ge
]=0;

1077 
hód
!=
NULL
) {

1078 
	`öv_debug
("INVALIDATE: kû»poöã∏tÿ%x (%x)\n",
hód
->
vaddr
,()hód->
addr
);

1079 
u_öt
 
ho°_addr
=(u_öt)
	`kûl_poöãr
(
hód
->
addr
);

1080 #ifde‡
__¨m__


1081 
√eds_˛ór_ˇche
[(
ho°_addr
-(
u_öt
)
BASE_ADDR
)>>17]|=1<<(((host_addr-(u_int)BASE_ADDR)>>12)&31);

1083 
√xt
=
hód
->next;

1084 
	`‰ì
(
hód
);

1085 
hód
=
√xt
;

1087 
	}
}

1089 
	$övÆid©e_block_ønge
(
u_öt
 
block
, u_öà
fú°
, u_öà
œ°
)

1091 
u_öt
 
∑ge
=
	`gë_∑ge
(
block
<<12);

1093 
	`övÆid©e_∑ge
(
∑ge
);

1094 
	`as£π
(
fú°
+5>
∑ge
);

1095 
	`as£π
(
œ°
<
∑ge
+5);

1097 
fú°
<
∑ge
) {

1098 
	`övÆid©e_∑ge
(
fú°
);

1099 
fú°
++;

1101 
fú°
=
∑ge
+1;fú°<
œ°
;first++) {

1102 
	`övÆid©e_∑ge
(
fú°
);

1104 #ifde‡
__¨m__


1105 
	`do_˛ór_ˇche
();

1109 
övÆid_code
[
block
]=1;

1110 #i‚de‡
DISABLE_TLB


1112 if(
éb_LUT_w
[
block
]) {

1113 
	`as£π
(
éb_LUT_r
[
block
]==
éb_LUT_w
[block]);

1115 
mem‹y_m≠
[
block
]=((
éb_LUT_w
[block]&0xFFFFF000)-(block<<12)+()
rdøm
-0x80000000)>>2;

1116 
u_öt
 
ªÆ_block
=
éb_LUT_w
[
block
]>>12;

1117 
övÆid_code
[
ªÆ_block
]=1;

1118 if(
ªÆ_block
>=0x80000&&ªÆ_block<0x80800Ë
mem‹y_m≠
[ªÆ_block]=((
u_öt
)
rdøm
-0x80000000)>>2;

1120 if(
block
>=0x80000&&block<0x80800Ë
mem‹y_m≠
[block]=((
u_öt
)
rdøm
-0x80000000)>>2;

1123 #ifde‡
USE_MINI_HT


1124 
	`mem£t
(
möi_ht
,-1,(mini_ht));

1126 
	}
}

1128 
	$övÆid©e_block
(
u_öt
 
block
)

1130 
u_öt
 
∑ge
=
	`gë_∑ge
(
block
<<12);

1131 
u_öt
 
v∑ge
=
	`gë_v∑ge
(
block
<<12);

1132 
	`öv_debug
("INVALIDATE: %x (%d)\n",
block
<<12,
∑ge
);

1134 
u_öt
 
fú°
,
œ°
;

1135 
fú°
=
œ°
=
∑ge
;

1136 
Œ_íåy
 *
hód
;

1137 
hód
=
jump_dúty
[
v∑ge
];

1139 
hód
!=
NULL
) {

1140 
u_öt
 
°¨t
,
íd
;

1141 if(
v∑ge
>2047||(
hód
->
vaddr
>>12)==
block
) {

1142 
	`gë_bounds
(()
hód
->
addr
,&
°¨t
,&
íd
);

1144 if(
∑ge
<2048&&
°¨t
>=(
u_öt
)
rdøm
&&
íd
<(u_ötÏdøm+
RAM_SIZE
) {

1145 if(((
°¨t
-(
u_öt
)
rdøm
)>>12)<=
∑ge
&&((
íd
-1-(u_int)rdram)>>12)>=page) {

1146 if((((
°¨t
-(
u_öt
)
rdøm
)>>12)&2047)<
fú°
) first=((start-(u_int)rdram)>>12)&2047;

1147 if((((
íd
-1-(
u_öt
)
rdøm
)>>12)&2047)>
œ°
)Üast=((end-1-(u_int)rdram)>>12)&2047;

1150 #i‚de‡
DISABLE_TLB


1151 if(
∑ge
<2048&&(sig√d )
°¨t
>=(sig√d )0xC0000000&&(sig√d )
íd
>=(signed )0xC0000000) {

1152 if(((
°¨t
+
mem‹y_m≠
[°¨t>>12]-(
u_öt
)
rdøm
)>>12)<=
∑ge
&&((
íd
-1+memory_map[(end-1)>>12]-(u_int)rdram)>>12)>=page) {

1153 if((((
°¨t
+
mem‹y_m≠
[°¨t>>12]-(
u_öt
)
rdøm
)>>12)&2047)<
fú°
) first=((start+memory_map[start>>12]-(u_int)rdram)>>12)&2047;

1154 if((((
íd
-1+
mem‹y_m≠
[”nd-1)>>12]-(
u_öt
)
rdøm
)>>12)&2047)>
œ°
)Üast=((end-1+memory_map[(end-1)>>12]-(u_int)rdram)>>12)&2047;

1159 
hód
=hód->
√xt
;

1161 
	`övÆid©e_block_ønge
(
block
,
fú°
,
œ°
);

1162 
	}
}

1164 
	$övÆid©e_addr
(
u_öt
 
addr
)

1166 #ifde‡
PCSX


1170 
u_öt
 
∑ge
=
	`gë_v∑ge
(
addr
);

1171 if(
∑ge
<2048) {

1172 
Œ_íåy
 *
hód
;

1173 
u_öt
 
addr_mö
=~0, 
addr_max
=0;

1174 
u_öt
 
mask
=
RAM_SIZE
-1;

1175 
u_öt
 
addr_maö
=0x80000000|(
addr
&
mask
);

1176 
pg1
;

1177 
öv_code_°¨t
=
addr_maö
&~0xfff;

1178 
öv_code_íd
=
addr_maö
|0xfff;

1179 
pg1
=
∑ge
;

1180 i‡(
pg1
>0) {

1182 
pg1
--;

1183 
öv_code_°¨t
-=0x1000;

1185 ;
pg1
<=
∑ge
;pg1++) {

1186 
hód
=
jump_dúty
[
pg1
];hód!=
NULL
;hód=hód->
√xt
) {

1187 
u_öt
 
°¨t
,
íd
;

1188 
	`gë_bounds
(()
hód
->
addr
,&
°¨t
,&
íd
);

1189 if(
øm_off£t
) {

1190 
°¨t
-=
øm_off£t
;

1191 
íd
-=
øm_off£t
;

1193 if(
°¨t
<=
addr_maö
&&addr_maö<
íd
) {

1194 if(
°¨t
<
addr_mö
)áddr_min=start;

1195 if(
íd
>
addr_max
)áddr_max=end;

1197 if(
addr_maö
<
°¨t
) {

1198 if(
°¨t
<
öv_code_íd
)

1199 
öv_code_íd
=
°¨t
-1;

1202 if(
íd
>
öv_code_°¨t
)

1203 
öv_code_°¨t
=
íd
;

1207 i‡(
addr_mö
!=~0) {

1208 
	`öv_debug
("INV ADDR: %08x hô %08x-%08x\n", 
addr
, 
addr_mö
, 
addr_max
);

1209 
öv_code_°¨t
=
öv_code_íd
=~0;

1210 
	`övÆid©e_block_ønge
(
addr
>>12,(
addr_mö
&
mask
)>>12,(
addr_max
&mask)>>12);

1214 
öv_code_°¨t
=(
addr
&~
mask
)|(inv_code_start&mask);

1215 
öv_code_íd
=(
addr
&~
mask
)|(inv_code_end&mask);

1216 
	`öv_debug
("INV ADDR: %08x miss, inv %08x-%08x, sk %d\n", 
addr
, 
öv_code_°¨t
, 
öv_code_íd
, 0);

1221 
	`övÆid©e_block
(
addr
>>12);

1222 
	}
}

1226 
	$övÆid©e_Æl_∑ges
()

1228 
u_öt
 
∑ge
,
n
;

1229 
∑ge
=0;page<4096;page++)

1230 
	`övÆid©e_∑ge
(
∑ge
);

1231 
∑ge
=0;page<1048576;page++)

1232 if(!
övÆid_code
[
∑ge
]) {

1233 
ª°‹e_ˇndid©e
[(
∑ge
&2047)>>3]|=1<<(page&7);

1234 
ª°‹e_ˇndid©e
[((
∑ge
&2047)>>3)+256]|=1<<(page&7);

1236 #ifde‡
__¨m__


1237 
	`__˛ór_ˇche
((*)
BASE_ADDR
,(*)BASE_ADDR+(1<<
TARGET_SIZE_2
));

1239 #ifde‡
USE_MINI_HT


1240 
	`mem£t
(
möi_ht
,-1,(mini_ht));

1242 #i‚de‡
DISABLE_TLB


1244 
∑ge
=0;page<0x100000;page++) {

1245 if(
éb_LUT_r
[
∑ge
]) {

1246 
mem‹y_m≠
[
∑ge
]=((
éb_LUT_r
[∑ge]&0xFFFFF000)-’age<<12)+()
rdøm
-0x80000000)>>2;

1247 if(!
éb_LUT_w
[
∑ge
]||!
övÆid_code
[page])

1248 
mem‹y_m≠
[
∑ge
]|=0x40000000;

1250 
mem‹y_m≠
[
∑ge
]=-1;

1251 if(
∑ge
==0x80000)Öage=0xC0000;

1253 
	`éb_hacks
();

1255 
	}
}

1258 
	$add_lök
(
u_öt
 
vaddr
,*
§c
)

1260 
u_öt
 
∑ge
=
	`gë_∑ge
(
vaddr
);

1261 
	`öv_debug
("add_lök: %x -> %x (%d)\n",()
§c
,
vaddr
,
∑ge
);

1262 *
±r
=(*)(
§c
+4);

1263 
	`as£π
((*
±r
&0x0fff0000)==0x059f0000);

1264 
	`Œ_add
(
jump_out
+
∑ge
,
vaddr
,
§c
);

1267 
	}
}

1273 
	$˛ón_blocks
(
u_öt
 
∑ge
)

1275 
Œ_íåy
 *
hód
;

1276 
	`öv_debug
("INV: cÀ™_block†∑ge=%d\n",
∑ge
);

1277 
hód
=
jump_dúty
[
∑ge
];

1278 
hód
!=
NULL
) {

1279 if(!
övÆid_code
[
hód
->
vaddr
>>12]) {

1281 if((((
u_öt
)
hód
->
addr
-(u_öt)
out
)<<(32-
TARGET_SIZE_2
))>0x60000000+(
MAX_OUTPUT_BLOCK_SIZE
<<(32-TARGET_SIZE_2))) {

1282 
u_öt
 
°¨t
,
íd
;

1283 if(
	`vîify_dúty
(()
hód
->
addr
)) {

1285 
u_öt
 
i
;

1286 
u_öt
 
öv
=0;

1287 
	`gë_bounds
(()
hód
->
addr
,&
°¨t
,&
íd
);

1288 if(
°¨t
-(
u_öt
)
rdøm
<
RAM_SIZE
) {

1289 
i
=(
°¨t
-(
u_öt
)
rdøm
+0x80000000)>>12;i<=(
íd
-1-(u_int)rdram+0x80000000)>>12;i++) {

1290 
öv
|=
övÆid_code
[
i
];

1293 #i‚de‡
DISABLE_TLB


1294 if((sig√d )
hód
->
vaddr
>=(signed )0xC0000000) {

1295 
u_öt
 
addr
 = (
hód
->
vaddr
+(
mem‹y_m≠
[head->vaddr>>12]<<2));

1297 if(
addr
<
°¨t
||addr>=
íd
Ë
öv
=1;

1300 if((sig√d )
hód
->
vaddr
>=(sig√d )0x80000000+
RAM_SIZE
) {

1301 
öv
=1;

1303 if(!
öv
) {

1304 * 
˛ón_addr
=(*)
	`gë_˛ón_addr
(()
hód
->
addr
);

1305 if((((
u_öt
)
˛ón_addr
-(u_öt)
out
)<<(32-
TARGET_SIZE_2
))>0x60000000+(
MAX_OUTPUT_BLOCK_SIZE
<<(32-TARGET_SIZE_2))) {

1306 
u_öt
 
µage
=
∑ge
;

1307 #i‚de‡
DISABLE_TLB


1308 if(
∑ge
<2048&&
éb_LUT_r
[
hód
->
vaddr
>>12]Ë
µage
=(tlb_LUT_r[head->vaddr>>12]^0x80000000)>>12;

1310 
	`öv_debug
("INV: Re°‹ed %x (%x/%x)\n",
hód
->
vaddr
, ()hód->
addr
, ()
˛ón_addr
);

1313 
	`Œ_add_Êags
(
jump_ö
+
µage
,
hód
->
vaddr
,hód->
ªg_sv_Êags
,
˛ón_addr
);

1314 *
ht_bö
=
hash_èbÀ
[((
hód
->
vaddr
>>16)^head->vaddr)&0xFFFF];

1315 if(
ht_bö
[0]==
hód
->
vaddr
) {

1316 
ht_bö
[1]=()
˛ón_addr
;

1318 if(
ht_bö
[2]==
hód
->
vaddr
) {

1319 
ht_bö
[3]=()
˛ón_addr
;

1326 
hód
=hód->
√xt
;

1328 
	}
}

1331 
	$mov_Æloc
(
ªg°©
 *
cuºít
,
i
)

1334 if((~
cuºít
->
is32
>>
rs1
[
i
])&1) {

1336 
	`Æloc_ªg64
(
cuºít
,
i
,
π1
[i]);

1337 
cuºít
->
is32
&=~(1LL<<
π1
[
i
]);

1340 
	`Æloc_ªg
(
cuºít
,
i
,
π1
[i]);

1341 
cuºít
->
is32
|=(1LL<<
π1
[
i
]);

1343 
	`˛ór_c⁄°
(
cuºít
,
rs1
[
i
]);

1344 
	`˛ór_c⁄°
(
cuºít
,
π1
[
i
]);

1345 
	`dúty_ªg
(
cuºít
,
π1
[
i
]);

1346 
	}
}

1348 
	$shi·imm_Æloc
(
ªg°©
 *
cuºít
,
i
)

1350 if(
›code2
[
i
]<=0x3)

1352 if(
π1
[
i
]) {

1353 if(
rs1
[
i
]&&
	`√eded_agaö
‘s1[i],i)Ë
	`Æloc_ªg
(
cuºít
,i,rs1[i]);

1354 
…1
[
i
]=
rs1
[i];

1355 
	`Æloc_ªg
(
cuºít
,
i
,
π1
[i]);

1356 
cuºít
->
is32
|=1LL<<
π1
[
i
];

1357 
	`dúty_ªg
(
cuºít
,
π1
[
i
]);

1358 if(
	`is_c⁄°
(
cuºít
,
rs1
[
i
])) {

1359 
v
=
	`gë_c⁄°
(
cuºít
,
rs1
[
i
]);

1360 if(
›code2
[
i
]==0x00Ë
	`£t_c⁄°
(
cuºít
,
π1
[i],
v
<<
imm
[i]);

1361 if(
›code2
[
i
]==0x02Ë
	`£t_c⁄°
(
cuºít
,
π1
[i],(
u_öt
)
v
>>
imm
[i]);

1362 if(
›code2
[
i
]==0x03Ë
	`£t_c⁄°
(
cuºít
,
π1
[i],
v
>>
imm
[i]);

1364 
	`˛ór_c⁄°
(
cuºít
,
π1
[
i
]);

1369 
	`˛ór_c⁄°
(
cuºít
,
rs1
[
i
]);

1370 
	`˛ór_c⁄°
(
cuºít
,
π1
[
i
]);

1373 if(
›code2
[
i
]>=0x38&&opcode2[i]<=0x3b)

1375 if(
π1
[
i
]) {

1376 if(
rs1
[
i
]Ë
	`Æloc_ªg64
(
cuºít
,i,rs1[i]);

1377 
	`Æloc_ªg64
(
cuºít
,
i
,
π1
[i]);

1378 
cuºít
->
is32
&=~(1LL<<
π1
[
i
]);

1379 
	`dúty_ªg
(
cuºít
,
π1
[
i
]);

1382 if(
›code2
[
i
]==0x3c)

1384 if(
π1
[
i
]) {

1385 if(
rs1
[
i
]Ë
	`Æloc_ªg
(
cuºít
,i,rs1[i]);

1386 
	`Æloc_ªg64
(
cuºít
,
i
,
π1
[i]);

1387 
cuºít
->
is32
&=~(1LL<<
π1
[
i
]);

1388 
	`dúty_ªg
(
cuºít
,
π1
[
i
]);

1391 if(
›code2
[
i
]==0x3e)

1393 if(
π1
[
i
]) {

1394 
	`Æloc_ªg64
(
cuºít
,
i
,
rs1
[i]);

1395 if(
imm
[
i
]==32) {

1396 
	`Æloc_ªg64
(
cuºít
,
i
,
π1
[i]);

1397 
cuºít
->
is32
&=~(1LL<<
π1
[
i
]);

1399 
	`Æloc_ªg
(
cuºít
,
i
,
π1
[i]);

1400 
cuºít
->
is32
|=1LL<<
π1
[
i
];

1402 
	`dúty_ªg
(
cuºít
,
π1
[
i
]);

1405 if(
›code2
[
i
]==0x3f)

1407 if(
π1
[
i
]) {

1408 
	`Æloc_ªg64
(
cuºít
,
i
,
rs1
[i]);

1409 
	`Æloc_ªg
(
cuºít
,
i
,
π1
[i]);

1410 
cuºít
->
is32
|=1LL<<
π1
[
i
];

1411 
	`dúty_ªg
(
cuºít
,
π1
[
i
]);

1414 
	}
}

1416 
	$shi·_Æloc
(
ªg°©
 *
cuºít
,
i
)

1418 if(
π1
[
i
]) {

1419 if(
›code2
[
i
]<=0x07)

1421 if(
rs1
[
i
]Ë
	`Æloc_ªg
(
cuºít
,i,rs1[i]);

1422 if(
rs2
[
i
]Ë
	`Æloc_ªg
(
cuºít
,i,rs2[i]);

1423 
	`Æloc_ªg
(
cuºít
,
i
,
π1
[i]);

1424 if(
π1
[
i
]==
rs2
[i]) {

1425 
	`Æloc_ªg_ãmp
(
cuºít
,
i
,-1);

1426 
möimum_‰ì_ªgs
[
i
]=1;

1428 
cuºít
->
is32
|=1LL<<
π1
[
i
];

1430 if(
rs1
[
i
]Ë
	`Æloc_ªg64
(
cuºít
,i,rs1[i]);

1431 if(
rs2
[
i
]Ë
	`Æloc_ªg
(
cuºít
,i,rs2[i]);

1432 
	`Æloc_ªg64
(
cuºít
,
i
,
π1
[i]);

1433 
cuºít
->
is32
&=~(1LL<<
π1
[
i
]);

1434 if(
›code2
[
i
]==0x16||opcode2[i]==0x17)

1436 
	`Æloc_ªg_ãmp
(
cuºít
,
i
,-1);

1437 
möimum_‰ì_ªgs
[
i
]=1;

1440 
	`˛ór_c⁄°
(
cuºít
,
rs1
[
i
]);

1441 
	`˛ór_c⁄°
(
cuºít
,
rs2
[
i
]);

1442 
	`˛ór_c⁄°
(
cuºít
,
π1
[
i
]);

1443 
	`dúty_ªg
(
cuºít
,
π1
[
i
]);

1445 
	}
}

1447 
	$Æu_Æloc
(
ªg°©
 *
cuºít
,
i
)

1449 if(
›code2
[
i
]>=0x20&&opcode2[i]<=0x23) {

1450 if(
π1
[
i
]) {

1451 if(
rs1
[
i
]&&
rs2
[i]) {

1452 
	`Æloc_ªg
(
cuºít
,
i
,
rs1
[i]);

1453 
	`Æloc_ªg
(
cuºít
,
i
,
rs2
[i]);

1456 if(
rs1
[
i
]&&
	`√eded_agaö
‘s1[i],i)Ë
	`Æloc_ªg
(
cuºít
,i,rs1[i]);

1457 if(
rs2
[
i
]&&
	`√eded_agaö
‘s2[i],i)Ë
	`Æloc_ªg
(
cuºít
,i,rs2[i]);

1459 
	`Æloc_ªg
(
cuºít
,
i
,
π1
[i]);

1461 
cuºít
->
is32
|=1LL<<
π1
[
i
];

1463 if(
›code2
[
i
]==0x2a||opcode2[i]==0x2b) {

1464 if(
π1
[
i
]) {

1465 if(!((
cuºít
->
is32
>>
rs1
[
i
])&(cuºít->is32>>
rs2
[i])&1))

1467 
	`Æloc_ªg64
(
cuºít
,
i
,
rs1
[i]);

1468 
	`Æloc_ªg64
(
cuºít
,
i
,
rs2
[i]);

1469 
	`Æloc_ªg
(
cuºít
,
i
,
π1
[i]);

1471 
	`Æloc_ªg
(
cuºít
,
i
,
rs1
[i]);

1472 
	`Æloc_ªg
(
cuºít
,
i
,
rs2
[i]);

1473 
	`Æloc_ªg
(
cuºít
,
i
,
π1
[i]);

1476 
cuºít
->
is32
|=1LL<<
π1
[
i
];

1478 if(
›code2
[
i
]>=0x24&&opcode2[i]<=0x27) {

1479 if(
π1
[
i
]) {

1480 if(
rs1
[
i
]&&
rs2
[i]) {

1481 
	`Æloc_ªg
(
cuºít
,
i
,
rs1
[i]);

1482 
	`Æloc_ªg
(
cuºít
,
i
,
rs2
[i]);

1486 if(
rs1
[
i
]&&
	`√eded_agaö
‘s1[i],i)Ë
	`Æloc_ªg
(
cuºít
,i,rs1[i]);

1487 if(
rs2
[
i
]&&
	`√eded_agaö
‘s2[i],i)Ë
	`Æloc_ªg
(
cuºít
,i,rs2[i]);

1489 
	`Æloc_ªg
(
cuºít
,
i
,
π1
[i]);

1490 if(!((
cuºít
->
is32
>>
rs1
[
i
])&(cuºít->is32>>
rs2
[i])&1))

1492 if(!((
cuºít
->
uu
>>
π1
[
i
])&1)) {

1493 
	`Æloc_ªg64
(
cuºít
,
i
,
π1
[i]);

1495 if(
	`gë_ªg
(
cuºít
->
ªgm≠
,
π1
[
i
]|64)>=0) {

1496 if(
rs1
[
i
]&&
rs2
[i]) {

1497 
	`Æloc_ªg64
(
cuºít
,
i
,
rs1
[i]);

1498 
	`Æloc_ªg64
(
cuºít
,
i
,
rs2
[i]);

1503 #ifde‡
NATIVE_64BIT


1504 if(
rs1
[
i
]&&
	`√eded_agaö
‘s1[i],i)Ë
	`Æloc_ªg64
(
cuºít
,i,rs1[i]);

1505 if(
rs2
[
i
]&&
	`√eded_agaö
‘s2[i],i)Ë
	`Æloc_ªg64
(
cuºít
,i,rs2[i]);

1509 
cuºít
->
is32
&=~(1LL<<
π1
[
i
]);

1511 
cuºít
->
is32
|=1LL<<
π1
[
i
];

1515 if(
›code2
[
i
]>=0x2c&&opcode2[i]<=0x2f) {

1516 if(
π1
[
i
]) {

1517 if(
rs1
[
i
]&&
rs2
[i]) {

1518 if(!((
cuºít
->
uu
>>
π1
[
i
])&1)||
	`gë_ªg
(cuºít->
ªgm≠
,rt1[i]|64)>=0) {

1519 
	`Æloc_ªg64
(
cuºít
,
i
,
rs1
[i]);

1520 
	`Æloc_ªg64
(
cuºít
,
i
,
rs2
[i]);

1521 
	`Æloc_ªg64
(
cuºít
,
i
,
π1
[i]);

1523 
	`Æloc_ªg
(
cuºít
,
i
,
rs1
[i]);

1524 
	`Æloc_ªg
(
cuºít
,
i
,
rs2
[i]);

1525 
	`Æloc_ªg
(
cuºít
,
i
,
π1
[i]);

1529 
	`Æloc_ªg
(
cuºít
,
i
,
π1
[i]);

1530 if(!((
cuºít
->
uu
>>
π1
[
i
])&1)||
	`gë_ªg
(cuºít->
ªgm≠
,rt1[i]|64)>=0) {

1533 if(
rs1
[
i
]&&!((
cuºít
->
is32
>>rs1[i])&1)) {

1534 if(
	`gë_ªg
(
cuºít
->
ªgm≠
,
rs1
[
i
])>=0Ë
	`Æloc_ªg64
(current,i,rs1[i]);

1535 
	`Æloc_ªg64
(
cuºít
,
i
,
π1
[i]);

1536 } if(
rs2
[
i
]&&!((
cuºít
->
is32
>>rs2[i])&1)) {

1537 if(
	`gë_ªg
(
cuºít
->
ªgm≠
,
rs2
[
i
])>=0Ë
	`Æloc_ªg64
(current,i,rs2[i]);

1538 
	`Æloc_ªg64
(
cuºít
,
i
,
π1
[i]);

1540 if(
›code2
[
i
]>=0x2e&&
rs2
[i]) {

1543 if(
	`gë_ªg
(
cuºít
->
ªgm≠
,
rs2
[
i
])>=0Ë
	`Æloc_ªg64
(current,i,rs2[i]);

1544 
	`Æloc_ªg64
(
cuºít
,
i
,
π1
[i]);

1548 if(
rs1
[
i
]&&
rs2
[i]) {

1549 
cuºít
->
is32
&=~(1LL<<
π1
[
i
]);

1550 } if(
rs1
[
i
]) {

1551 
cuºít
->
is32
&=~(1LL<<
π1
[
i
]);

1552 if((
cuºít
->
is32
>>
rs1
[
i
])&1)

1553 
cuºít
->
is32
|=1LL<<
π1
[
i
];

1554 } if(
rs2
[
i
]) {

1555 
cuºít
->
is32
&=~(1LL<<
π1
[
i
]);

1556 if((
cuºít
->
is32
>>
rs2
[
i
])&1)

1557 
cuºít
->
is32
|=1LL<<
π1
[
i
];

1559 
cuºít
->
is32
|=1LL<<
π1
[
i
];

1563 
	`˛ór_c⁄°
(
cuºít
,
rs1
[
i
]);

1564 
	`˛ór_c⁄°
(
cuºít
,
rs2
[
i
]);

1565 
	`˛ór_c⁄°
(
cuºít
,
π1
[
i
]);

1566 
	`dúty_ªg
(
cuºít
,
π1
[
i
]);

1567 
	}
}

1569 
	$imm16_Æloc
(
ªg°©
 *
cuºít
,
i
)

1571 if(
rs1
[
i
]&&
	`√eded_agaö
‘s1[i],i)Ë
	`Æloc_ªg
(
cuºít
,i,rs1[i]);

1572 
…1
[
i
]=
rs1
[i];

1573 if(
π1
[
i
]Ë
	`Æloc_ªg
(
cuºít
,i,rt1[i]);

1574 if(
›code
[
i
]==0x18||opcode[i]==0x19) {

1575 
cuºít
->
is32
&=~(1LL<<
π1
[
i
]);

1576 if(!((
cuºít
->
uu
>>
π1
[
i
])&1)||
	`gë_ªg
(cuºít->
ªgm≠
,rt1[i]|64)>=0) {

1578 
	`Æloc_ªg64
(
cuºít
,
i
,
π1
[i]);

1579 
	`Æloc_ªg64
(
cuºít
,
i
,
rs1
[i]);

1581 
	`˛ór_c⁄°
(
cuºít
,
rs1
[
i
]);

1582 
	`˛ór_c⁄°
(
cuºít
,
π1
[
i
]);

1584 if(
›code
[
i
]==0x0a||opcode[i]==0x0b) {

1585 if((~
cuºít
->
is32
>>
rs1
[
i
])&1Ë
	`Æloc_ªg64
(current,i,rs1[i]);

1586 
cuºít
->
is32
|=1LL<<
π1
[
i
];

1587 
	`˛ór_c⁄°
(
cuºít
,
rs1
[
i
]);

1588 
	`˛ór_c⁄°
(
cuºít
,
π1
[
i
]);

1590 if(
›code
[
i
]>=0x0c&&opcode[i]<=0x0e) {

1591 if(((~
cuºít
->
is32
>>
rs1
[
i
])&1)&&
›code
[i]>0x0c) {

1592 if(
rs1
[
i
]!=
π1
[i]) {

1593 if(
	`√eded_agaö
(
rs1
[
i
],i)Ë
	`Æloc_ªg64
(
cuºít
,i,rs1[i]);

1594 
	`Æloc_ªg64
(
cuºít
,
i
,
π1
[i]);

1595 
cuºít
->
is32
&=~(1LL<<
π1
[
i
]);

1598 
cuºít
->
is32
|=1LL<<
π1
[
i
];

1599 if(
	`is_c⁄°
(
cuºít
,
rs1
[
i
])) {

1600 
v
=
	`gë_c⁄°
(
cuºít
,
rs1
[
i
]);

1601 if(
›code
[
i
]==0x0cË
	`£t_c⁄°
(
cuºít
,
π1
[i],
v
&
imm
[i]);

1602 if(
›code
[
i
]==0x0dË
	`£t_c⁄°
(
cuºít
,
π1
[i],
v
|
imm
[i]);

1603 if(
›code
[
i
]==0x0eË
	`£t_c⁄°
(
cuºít
,
π1
[i],
v
^
imm
[i]);

1605 
	`˛ór_c⁄°
(
cuºít
,
π1
[
i
]);

1607 if(
›code
[
i
]==0x08||opcode[i]==0x09) {

1608 if(
	`is_c⁄°
(
cuºít
,
rs1
[
i
])) {

1609 
v
=
	`gë_c⁄°
(
cuºít
,
rs1
[
i
]);

1610 
	`£t_c⁄°
(
cuºít
,
π1
[
i
],
v
+
imm
[i]);

1612 
	`˛ór_c⁄°
(
cuºít
,
π1
[
i
]);

1613 
cuºít
->
is32
|=1LL<<
π1
[
i
];

1616 
	`£t_c⁄°
(
cuºít
,
π1
[
i
],(()(()
imm
[i]))<<16);

1617 
cuºít
->
is32
|=1LL<<
π1
[
i
];

1619 
	`dúty_ªg
(
cuºít
,
π1
[
i
]);

1620 
	}
}

1622 
	$lﬂd_Æloc
(
ªg°©
 *
cuºít
,
i
)

1624 
	`˛ór_c⁄°
(
cuºít
,
π1
[
i
]);

1626 if(!
rs1
[
i
]Ë
cuºít
->
u
&=~1LL;

1627 if(
	`√eded_agaö
(
rs1
[
i
],i)Ë
	`Æloc_ªg
(
cuºít
,i,rs1[i]);

1628 if(
π1
[
i
]&&!((
cuºít
->
u
>>rt1[i])&1)) {

1629 
	`Æloc_ªg
(
cuºít
,
i
,
π1
[i]);

1630 
	`as£π
(
	`gë_ªg
(
cuºít
->
ªgm≠
,
π1
[
i
])>=0);

1631 if(
›code
[
i
]==0x27||opcode[i]==0x37)

1633 
cuºít
->
is32
&=~(1LL<<
π1
[
i
]);

1634 
	`Æloc_ªg64
(
cuºít
,
i
,
π1
[i]);

1636 if(
›code
[
i
]==0x1A||opcode[i]==0x1B)

1638 
cuºít
->
is32
&=~(1LL<<
π1
[
i
]);

1639 
	`Æloc_ªg64
(
cuºít
,
i
,
π1
[i]);

1640 
	`Æloc_Æl
(
cuºít
,
i
);

1641 
	`Æloc_ªg64
(
cuºít
,
i
,
FTEMP
);

1642 
möimum_‰ì_ªgs
[
i
]=
HOST_REGS
;

1644 
cuºít
->
is32
|=1LL<<
π1
[
i
];

1645 
	`dúty_ªg
(
cuºít
,
π1
[
i
]);

1647 if(
usög_éb
Ë
	`Æloc_ªg
(
cuºít
,
i
,
TLREG
);

1649 if(
›code
[
i
]==0x22||opcode[i]==0x26)

1651 
	`Æloc_ªg
(
cuºít
,
i
,
FTEMP
);

1652 
	`Æloc_ªg_ãmp
(
cuºít
,
i
,-1);

1653 
möimum_‰ì_ªgs
[
i
]=1;

1660 if(
›code
[
i
]==0x22||opcode[i]==0x26)

1662 
	`Æloc_ªg
(
cuºít
,
i
,
FTEMP
);

1665 if(
usög_éb
Ë
	`Æloc_ªg
(
cuºít
,
i
,
TLREG
);

1666 
	`Æloc_ªg_ãmp
(
cuºít
,
i
,-1);

1667 
möimum_‰ì_ªgs
[
i
]=1;

1668 if(
›code
[
i
]==0x1A||opcode[i]==0x1B)

1670 
	`Æloc_Æl
(
cuºít
,
i
);

1671 
	`Æloc_ªg64
(
cuºít
,
i
,
FTEMP
);

1672 
möimum_‰ì_ªgs
[
i
]=
HOST_REGS
;

1675 
	}
}

1677 
	$°‹e_Æloc
(
ªg°©
 *
cuºít
,
i
)

1679 
	`˛ór_c⁄°
(
cuºít
,
rs2
[
i
]);

1680 if(!(
rs2
[
i
])Ë
cuºít
->
u
&=~1LL;

1681 if(
	`√eded_agaö
(
rs1
[
i
],i)Ë
	`Æloc_ªg
(
cuºít
,i,rs1[i]);

1682 
	`Æloc_ªg
(
cuºít
,
i
,
rs2
[i]);

1683 if(
›code
[
i
]==0x2c||opcode[i]==0x2d||opcode[i]==0x3f) {

1684 
	`Æloc_ªg64
(
cuºít
,
i
,
rs2
[i]);

1685 if(
rs2
[
i
]Ë
	`Æloc_ªg
(
cuºít
,i,
FTEMP
);

1688 if(
usög_éb
Ë
	`Æloc_ªg
(
cuºít
,
i
,
TLREG
);

1689 #i‡
	`deföed
(
HOST_IMM8
)

1691 
	`Æloc_ªg
(
cuºít
,
i
,
INVCP
);

1693 if(
›code
[
i
]==0x2a||opcode[i]==0x2e||opcode[i]==0x2c||opcode[i]==0x2d) {

1694 
	`Æloc_ªg
(
cuºít
,
i
,
FTEMP
);

1697 
	`Æloc_ªg_ãmp
(
cuºít
,
i
,-1);

1698 
möimum_‰ì_ªgs
[
i
]=1;

1699 
	}
}

1701 
	$c1ls_Æloc
(
ªg°©
 *
cuºít
,
i
)

1704 
	`˛ór_c⁄°
(
cuºít
,
π1
[
i
]);

1705 if(
	`√eded_agaö
(
rs1
[
i
],i)Ë
	`Æloc_ªg
(
cuºít
,i,rs1[i]);

1706 
	`Æloc_ªg
(
cuºít
,
i
,
CSREG
);

1707 
	`Æloc_ªg
(
cuºít
,
i
,
FTEMP
);

1708 if(
›code
[
i
]==0x35||opcode[i]==0x3d) {

1709 
	`Æloc_ªg64
(
cuºít
,
i
,
FTEMP
);

1712 if(
usög_éb
Ë
	`Æloc_ªg
(
cuºít
,
i
,
TLREG
);

1713 #i‡
	`deföed
(
HOST_IMM8
)

1715 if((
›code
[
i
]&0x3b)==0x39)

1716 
	`Æloc_ªg
(
cuºít
,
i
,
INVCP
);

1719 
	`Æloc_ªg_ãmp
(
cuºít
,
i
,-1);

1720 
	}
}

1722 
	$c2ls_Æloc
(
ªg°©
 *
cuºít
,
i
)

1724 
	`˛ór_c⁄°
(
cuºít
,
π1
[
i
]);

1725 if(
	`√eded_agaö
(
rs1
[
i
],i)Ë
	`Æloc_ªg
(
cuºít
,i,rs1[i]);

1726 
	`Æloc_ªg
(
cuºít
,
i
,
FTEMP
);

1728 if(
usög_éb
Ë
	`Æloc_ªg
(
cuºít
,
i
,
TLREG
);

1729 #i‡
	`deföed
(
HOST_IMM8
)

1731 if((
›code
[
i
]&0x3b)==0x3a)

1732 
	`Æloc_ªg
(
cuºít
,
i
,
INVCP
);

1735 
	`Æloc_ªg_ãmp
(
cuºít
,
i
,-1);

1736 
möimum_‰ì_ªgs
[
i
]=1;

1737 
	}
}

1739 #i‚de‡
mu…div_Æloc


1740 
	$mu…div_Æloc
(
ªg°©
 *
cuºít
,
i
)

1750 
	`˛ór_c⁄°
(
cuºít
,
rs1
[
i
]);

1751 
	`˛ór_c⁄°
(
cuºít
,
rs2
[
i
]);

1752 if(
rs1
[
i
]&&
rs2
[i])

1754 if((
›code2
[
i
]&4)==0)

1756 
cuºít
->
u
&=~(1LL<<
HIREG
);

1757 
cuºít
->
u
&=~(1LL<<
LOREG
);

1758 
	`Æloc_ªg
(
cuºít
,
i
,
HIREG
);

1759 
	`Æloc_ªg
(
cuºít
,
i
,
LOREG
);

1760 
	`Æloc_ªg
(
cuºít
,
i
,
rs1
[i]);

1761 
	`Æloc_ªg
(
cuºít
,
i
,
rs2
[i]);

1762 
cuºít
->
is32
|=1LL<<
HIREG
;

1763 
cuºít
->
is32
|=1LL<<
LOREG
;

1764 
	`dúty_ªg
(
cuºít
,
HIREG
);

1765 
	`dúty_ªg
(
cuºít
,
LOREG
);

1769 
cuºít
->
u
&=~(1LL<<
HIREG
);

1770 
cuºít
->
u
&=~(1LL<<
LOREG
);

1771 
cuºít
->
uu
&=~(1LL<<
HIREG
);

1772 
cuºít
->
uu
&=~(1LL<<
LOREG
);

1773 
	`Æloc_ªg64
(
cuºít
,
i
,
HIREG
);

1775 
	`Æloc_ªg64
(
cuºít
,
i
,
rs1
[i]);

1776 
	`Æloc_ªg64
(
cuºít
,
i
,
rs2
[i]);

1777 
	`Æloc_Æl
(
cuºít
,
i
);

1778 
cuºít
->
is32
&=~(1LL<<
HIREG
);

1779 
cuºít
->
is32
&=~(1LL<<
LOREG
);

1780 
	`dúty_ªg
(
cuºít
,
HIREG
);

1781 
	`dúty_ªg
(
cuºít
,
LOREG
);

1782 
möimum_‰ì_ªgs
[
i
]=
HOST_REGS
;

1790 
	`Æloc_ªg
(
cuºít
,
i
,
HIREG
);

1791 
	`Æloc_ªg
(
cuºít
,
i
,
LOREG
);

1792 
cuºít
->
is32
|=1LL<<
HIREG
;

1793 
cuºít
->
is32
|=1LL<<
LOREG
;

1794 
	`dúty_ªg
(
cuºít
,
HIREG
);

1795 
	`dúty_ªg
(
cuºít
,
LOREG
);

1797 
	}
}

1800 
	$c›0_Æloc
(
ªg°©
 *
cuºít
,
i
)

1802 if(
›code2
[
i
]==0)

1804 if(
π1
[
i
]) {

1805 
	`˛ór_c⁄°
(
cuºít
,
π1
[
i
]);

1806 
	`Æloc_Æl
(
cuºít
,
i
);

1807 
	`Æloc_ªg
(
cuºít
,
i
,
π1
[i]);

1808 
cuºít
->
is32
|=1LL<<
π1
[
i
];

1809 
	`dúty_ªg
(
cuºít
,
π1
[
i
]);

1812 if(
›code2
[
i
]==4)

1814 if(
rs1
[
i
]){

1815 
	`˛ór_c⁄°
(
cuºít
,
rs1
[
i
]);

1816 
	`Æloc_ªg
(
cuºít
,
i
,
rs1
[i]);

1817 
	`Æloc_Æl
(
cuºít
,
i
);

1820 
	`Æloc_Æl
(
cuºít
,
i
);

1821 
cuºít
->
u
&=~1LL;

1822 
	`Æloc_ªg
(
cuºít
,
i
,0);

1828 
	`as£π
(
›code2
[
i
]==0x10);

1829 
	`Æloc_Æl
(
cuºít
,
i
);

1831 
möimum_‰ì_ªgs
[
i
]=
HOST_REGS
;

1832 
	}
}

1834 
	$c›1_Æloc
(
ªg°©
 *
cuºít
,
i
)

1836 
	`Æloc_ªg
(
cuºít
,
i
,
CSREG
);

1837 if(
›code2
[
i
]<3)

1839 if(
π1
[
i
]){

1840 
	`˛ór_c⁄°
(
cuºít
,
π1
[
i
]);

1841 if(
›code2
[
i
]==1) {

1842 
	`Æloc_ªg64
(
cuºít
,
i
,
π1
[i]);

1843 
cuºít
->
is32
&=~(1LL<<
π1
[
i
]);

1845 
	`Æloc_ªg
(
cuºít
,
i
,
π1
[i]);

1846 
cuºít
->
is32
|=1LL<<
π1
[
i
];

1848 
	`dúty_ªg
(
cuºít
,
π1
[
i
]);

1850 
	`Æloc_ªg_ãmp
(
cuºít
,
i
,-1);

1852 if(
›code2
[
i
]>3)

1854 if(
rs1
[
i
]){

1855 
	`˛ór_c⁄°
(
cuºít
,
rs1
[
i
]);

1856 if(
›code2
[
i
]==5)

1857 
	`Æloc_ªg64
(
cuºít
,
i
,
rs1
[i]);

1859 
	`Æloc_ªg
(
cuºít
,
i
,
rs1
[i]);

1860 
	`Æloc_ªg_ãmp
(
cuºít
,
i
,-1);

1863 
cuºít
->
u
&=~1LL;

1864 
	`Æloc_ªg
(
cuºít
,
i
,0);

1865 
	`Æloc_ªg_ãmp
(
cuºít
,
i
,-1);

1868 
möimum_‰ì_ªgs
[
i
]=1;

1869 
	}
}

1870 
	$fc⁄v_Æloc
(
ªg°©
 *
cuºít
,
i
)

1872 
	`Æloc_ªg
(
cuºít
,
i
,
CSREG
);

1873 
	`Æloc_ªg_ãmp
(
cuºít
,
i
,-1);

1874 
möimum_‰ì_ªgs
[
i
]=1;

1875 
	}
}

1876 
	$Êﬂt_Æloc
(
ªg°©
 *
cuºít
,
i
)

1878 
	`Æloc_ªg
(
cuºít
,
i
,
CSREG
);

1879 
	`Æloc_ªg_ãmp
(
cuºít
,
i
,-1);

1880 
möimum_‰ì_ªgs
[
i
]=1;

1881 
	}
}

1882 
	$c2›_Æloc
(
ªg°©
 *
cuºít
,
i
)

1884 
	`Æloc_ªg_ãmp
(
cuºít
,
i
,-1);

1885 
	}
}

1886 
	$fcomp_Æloc
(
ªg°©
 *
cuºít
,
i
)

1888 
	`Æloc_ªg
(
cuºít
,
i
,
CSREG
);

1889 
	`Æloc_ªg
(
cuºít
,
i
,
FSREG
);

1890 
	`dúty_ªg
(
cuºít
,
FSREG
);

1891 
	`Æloc_ªg_ãmp
(
cuºít
,
i
,-1);

1892 
möimum_‰ì_ªgs
[
i
]=1;

1893 
	}
}

1895 
	$sysˇŒ_Æloc
(
ªg°©
 *
cuºít
,
i
)

1897 
	`Æloc_cc
(
cuºít
,
i
);

1898 
	`dúty_ªg
(
cuºít
,
CCREG
);

1899 
	`Æloc_Æl
(
cuºít
,
i
);

1900 
möimum_‰ì_ªgs
[
i
]=
HOST_REGS
;

1901 
cuºít
->
isc⁄°
=0;

1902 
	}
}

1904 
	$dñay¶Ÿ_Æloc
(
ªg°©
 *
cuºít
,
i
)

1906 
ôy≥
[
i
]) {

1907 
UJUMP
:

1908 
CJUMP
:

1909 
SJUMP
:

1910 
RJUMP
:

1911 
FJUMP
:

1912 
SYSCALL
:

1913 
HLECALL
:

1914 
SPAN
:

1915 
	`as£m_debug
("jump inÅhe delay slot.Åhis shouldn't happen.\n");

1916 
	`SysPrötf
("Disabled speculativeÖrecompilation\n");

1917 
°›_a·î_jÆ
=1;

1919 
IMM16
:

1920 
	`imm16_Æloc
(
cuºít
,
i
);

1922 
LOAD
:

1923 
LOADLR
:

1924 
	`lﬂd_Æloc
(
cuºít
,
i
);

1926 
STORE
:

1927 
STORELR
:

1928 
	`°‹e_Æloc
(
cuºít
,
i
);

1930 
ALU
:

1931 
	`Æu_Æloc
(
cuºít
,
i
);

1933 
SHIFT
:

1934 
	`shi·_Æloc
(
cuºít
,
i
);

1936 
MULTDIV
:

1937 
	`mu…div_Æloc
(
cuºít
,
i
);

1939 
SHIFTIMM
:

1940 
	`shi·imm_Æloc
(
cuºít
,
i
);

1942 
MOV
:

1943 
	`mov_Æloc
(
cuºít
,
i
);

1945 
COP0
:

1946 
	`c›0_Æloc
(
cuºít
,
i
);

1948 
COP1
:

1949 
COP2
:

1950 
	`c›1_Æloc
(
cuºít
,
i
);

1952 
C1LS
:

1953 
	`c1ls_Æloc
(
cuºít
,
i
);

1955 
C2LS
:

1956 
	`c2ls_Æloc
(
cuºít
,
i
);

1958 
FCONV
:

1959 
	`fc⁄v_Æloc
(
cuºít
,
i
);

1961 
FLOAT
:

1962 
	`Êﬂt_Æloc
(
cuºít
,
i
);

1964 
FCOMP
:

1965 
	`fcomp_Æloc
(
cuºít
,
i
);

1967 
C2OP
:

1968 
	`c2›_Æloc
(
cuºít
,
i
);

1971 
	}
}

1974 
	$∑ge•™_Æloc
(
ªg°©
 *
cuºít
,
i
)

1976 
cuºít
->
isc⁄°
=0;

1977 
cuºít
->
wasc⁄°
=0;

1978 
ªgs
[
i
].
wasc⁄°
=0;

1979 
möimum_‰ì_ªgs
[
i
]=
HOST_REGS
;

1980 
	`Æloc_Æl
(
cuºít
,
i
);

1981 
	`Æloc_cc
(
cuºít
,
i
);

1982 
	`dúty_ªg
(
cuºít
,
CCREG
);

1983 if(
›code
[
i
]==3)

1985 
	`Æloc_ªg
(
cuºít
,
i
,31);

1986 
	`dúty_ªg
(
cuºít
,31);

1988 if(
›code
[
i
]==0&&(
›code2
[i]&0x3E)==8)

1990 
	`Æloc_ªg
(
cuºít
,
i
,
rs1
[i]);

1991 i‡(
π1
[
i
]!=0) {

1992 
	`Æloc_ªg
(
cuºít
,
i
,
π1
[i]);

1993 
	`dúty_ªg
(
cuºít
,
π1
[
i
]);

1996 if((
›code
[
i
]&0x2E)==4)

1998 if(
rs1
[
i
]Ë
	`Æloc_ªg
(
cuºít
,i,rs1[i]);

1999 if(
rs2
[
i
]Ë
	`Æloc_ªg
(
cuºít
,i,rs2[i]);

2000 if(!((
cuºít
->
is32
>>
rs1
[
i
])&(cuºít->is32>>
rs2
[i])&1))

2002 if(
rs1
[
i
]Ë
	`Æloc_ªg64
(
cuºít
,i,rs1[i]);

2003 if(
rs2
[
i
]Ë
	`Æloc_ªg64
(
cuºít
,i,rs2[i]);

2007 if((
›code
[
i
]&0x2E)==6)

2009 if(
rs1
[
i
]Ë
	`Æloc_ªg
(
cuºít
,i,rs1[i]);

2010 if(!((
cuºít
->
is32
>>
rs1
[
i
])&1))

2012 if(
rs1
[
i
]Ë
	`Æloc_ªg64
(
cuºít
,i,rs1[i]);

2016 if(
›code
[
i
]==0x11)

2018 
	`Æloc_ªg
(
cuºít
,
i
,
FSREG
);

2019 
	`Æloc_ªg
(
cuºít
,
i
,
CSREG
);

2022 
	}
}

2024 
	$add_°ub
(
ty≥
,
addr
,
ªèddr
,
a
,
b
,
c
,
d
,
e
)

2026 
°ubs
[
°ubcou¡
][0]=
ty≥
;

2027 
°ubs
[
°ubcou¡
][1]=
addr
;

2028 
°ubs
[
°ubcou¡
][2]=
ªèddr
;

2029 
°ubs
[
°ubcou¡
][3]=
a
;

2030 
°ubs
[
°ubcou¡
][4]=
b
;

2031 
°ubs
[
°ubcou¡
][5]=
c
;

2032 
°ubs
[
°ubcou¡
][6]=
d
;

2033 
°ubs
[
°ubcou¡
][7]=
e
;

2034 
°ubcou¡
++;

2035 
	}
}

2038 
	$wb_ªgi°î
(sig√d 
r
,sig√d 
ªgm≠
[],
uöt64_t
 
dúty
,uöt64_à
is32
)

2040 
hr
;

2041 
hr
=0;hr<
HOST_REGS
;hr++) {

2042 if(
hr
!=
EXCLUDE_REG
) {

2043 if((
ªgm≠
[
hr
]&63)==
r
) {

2044 if((
dúty
>>
hr
)&1) {

2045 if(
ªgm≠
[
hr
]<64) {

2046 
	`emô_°‹îeg
(
r
,
hr
);

2047 #i‚de‡
FORCE32


2048 if((
is32
>>
ªgm≠
[
hr
])&1) {

2049 
	`emô_ßrimm
(
hr
,31,hr);

2050 
	`emô_°‹îeg
(
r
|64,
hr
);

2054 
	`emô_°‹îeg
(
r
|64,
hr
);

2060 
	}
}

2062 
	$mchecksum
()

2065 
i
;

2066 
sum
=0;

2067 
i
=0;i<2097152;i++) {

2068 
ãmp
=
sum
;

2069 
sum
<<=1;

2070 
sum
|=(~
ãmp
)>>31;

2071 
sum
^=((
u_öt
 *)
rdøm
)[
i
];

2073  
sum
;

2074 
	}
}

2075 
	$rchecksum
()

2077 
i
;

2078 
sum
=0;

2079 
i
=0;i<64;i++)

2080 
sum
^=((
u_öt
 *)
ªg
)[
i
];

2081  
sum
;

2082 
	}
}

2083 
	$æi°
()

2085 
i
;

2086 
	`¥ötf
("TRACE: ");

2087 
i
=0;i<32;i++)

2088 
	`¥ötf
("r%d:%8x%8x ",
i
,((*)(
ªg
+i))[1],((*)(reg+i))[0]);

2089 
	`¥ötf
("\n");

2090 #i‚de‡
DISABLE_COP1


2091 
	`¥ötf
("TRACE: ");

2092 
i
=0;i<32;i++)

2093 
	`¥ötf
("f%d:%8x%8x ",
i
,((*)
ªg_c›1_sim∂e
[i])[1],*((*)reg_cop1_simple[i]));

2094 
	`¥ötf
("\n");

2096 
	}
}

2098 
	$íabÀåa˚
()

2100 
åa˚debug
=1;

2101 
	}
}

2103 
	$memdebug
(
i
)

2110 if((sig√d )
Cou¡
>=-2084597794&&(signed )Count<0) {

2112 
	`¥ötf
("TRACE: cou¡=%dÇext=%d (checksum %x)\n",
Cou¡
,
√xt_öãru±
,
	`mchecksum
());

2115 
	`æi°
();

2116 #ifde‡
__i386__


2117 
	`¥ötf
("TRACE: %x\n",(&
i
)[-1]);

2119 #ifde‡
__¨m__


2120 
j
;

2121 
	`¥ötf
("TRACE: %x \n",(&
j
)[10]);

2122 
	`¥ötf
("TRACE: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\n",(&
j
)[1],(&j)[2],(&j)[3],(&j)[4],(&j)[5],(&j)[6],(&j)[7],(&j)[8],(&j)[9],(&j)[10],(&j)[11],(&j)[12],(&j)[13],(&j)[14],(&j)[15],(&j)[16],(&j)[17],(&j)[18],(&j)[19],(&j)[20]);

2127 
	}
}

2129 
	$éb_debug
(
u_öt
 
ˇu£
, u_öà
addr
, u_öà
üddr
)

2131 
	`¥ötf
("TLB Ex˚±i⁄: in°ru˘i⁄=%xáddr=%x cau£=%x\n",
üddr
, 
addr
, 
ˇu£
);

2132 
	}
}

2134 
	$Æu_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

2136 if(
›code2
[
i
]>=0x20&&opcode2[i]<=0x23) {

2137 if(
π1
[
i
]) {

2138 sig√d 
s1
,
s2
,
t
;

2139 
t
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

2140 if(
t
>=0) {

2141 
s1
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

2142 
s2
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]);

2143 if(
rs1
[
i
]&&
rs2
[i]) {

2144 
	`as£π
(
s1
>=0);

2145 
	`as£π
(
s2
>=0);

2146 if(
›code2
[
i
]&2Ë
	`emô_sub
(
s1
,
s2
,
t
);

2147 
	`emô_add
(
s1
,
s2
,
t
);

2149 if(
rs1
[
i
]) {

2150 if(
s1
>=0Ë
	`emô_mov
(s1,
t
);

2151 
	`emô_lﬂdªg
(
rs1
[
i
],
t
);

2153 if(
rs2
[
i
]) {

2154 if(
s2
>=0) {

2155 if(
›code2
[
i
]&2Ë
	`emô_√g
(
s2
,
t
);

2156 
	`emô_mov
(
s2
,
t
);

2159 
	`emô_lﬂdªg
(
rs2
[
i
],
t
);

2160 if(
›code2
[
i
]&2Ë
	`emô_√g
(
t
,t);

2163 
	`emô_zî‹eg
(
t
);

2167 if(
›code2
[
i
]>=0x2c&&opcode2[i]<=0x2f) {

2168 if(
π1
[
i
]) {

2169 sig√d 
s1l
,
s2l
,
s1h
,
s2h
,
é
,
th
;

2170 
é
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

2171 
th
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]|64);

2172 if(
é
>=0) {

2173 
s1l
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

2174 
s2l
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]);

2175 
s1h
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]|64);

2176 
s2h
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]|64);

2177 if(
rs1
[
i
]&&
rs2
[i]) {

2178 
	`as£π
(
s1l
>=0);

2179 
	`as£π
(
s2l
>=0);

2180 if(
›code2
[
i
]&2Ë
	`emô_subs
(
s1l
,
s2l
,
é
);

2181 
	`emô_adds
(
s1l
,
s2l
,
é
);

2182 if(
th
>=0) {

2183 #ifde‡
INVERTED_CARRY


2184 if(
›code2
[
i
]&2Ë{if(
s1h
!=
th
Ë
	`emô_mov
(s1h,th);
	`emô_sbb
—h,
s2h
);}

2186 if(
›code2
[
i
]&2Ë
	`emô_sbc
(
s1h
,
s2h
,
th
);

2188 
	`emô_add
(
s1h
,
s2h
,
th
);

2191 if(
rs1
[
i
]) {

2192 if(
s1l
>=0Ë
	`emô_mov
(s1l,
é
);

2193 
	`emô_lﬂdªg
(
rs1
[
i
],
é
);

2194 if(
th
>=0) {

2195 if(
s1h
>=0Ë
	`emô_mov
(s1h,
th
);

2196 
	`emô_lﬂdªg
(
rs1
[
i
]|64,
th
);

2199 if(
rs2
[
i
]) {

2200 if(
s2l
>=0) {

2201 if(
›code2
[
i
]&2Ë
	`emô_√gs
(
s2l
,
é
);

2202 
	`emô_mov
(
s2l
,
é
);

2205 
	`emô_lﬂdªg
(
rs2
[
i
],
é
);

2206 if(
›code2
[
i
]&2Ë
	`emô_√gs
(
é
,tl);

2208 if(
th
>=0) {

2209 #ifde‡
INVERTED_CARRY


2210 if(
s2h
>=0Ë
	`emô_mov
(s2h,
th
);

2211 
	`emô_lﬂdªg
(
rs2
[
i
]|64,
th
);

2212 if(
›code2
[
i
]&2) {

2213 
	`emô_adcimm
(-1,
th
);

2214 
	`emô_nŸ
(
th
,th);

2217 if(
›code2
[
i
]&2) {

2218 if(
s2h
>=0Ë
	`emô_rscimm
(s2h,0,
th
);

2220 
	`emô_lﬂdªg
(
rs2
[
i
]|64,
th
);

2221 
	`emô_rscimm
(
th
,0,th);

2224 if(
s2h
>=0Ë
	`emô_mov
(s2h,
th
);

2225 
	`emô_lﬂdªg
(
rs2
[
i
]|64,
th
);

2231 
	`emô_zî‹eg
(
é
);

2232 if(
th
>=0Ë
	`emô_zî‹eg
(th);

2237 if(
›code2
[
i
]==0x2a||opcode2[i]==0x2b) {

2238 if(
π1
[
i
]) {

2239 sig√d 
s1l
,
s1h
,
s2l
,
s2h
,
t
;

2240 if(!((
i_ªgs
->
was32
>>
rs1
[
i
])&(i_ªgs->was32>>
rs2
[i])&1))

2242 
t
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

2244 if(
t
>=0) {

2245 
s1l
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

2246 
s1h
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]|64);

2247 
s2l
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]);

2248 
s2h
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]|64);

2249 if(
rs2
[
i
]==0)

2251 
	`as£π
(
s1h
>=0);

2252 if(
›code2
[
i
]==0x2a)

2253 
	`emô_shrimm
(
s1h
,31,
t
);

2255 
	`emô_zî‹eg
(
t
);

2257 if(
rs1
[
i
]==0)

2259 
	`as£π
(
s2h
>=0);

2260 if(
›code2
[
i
]==0x2a)

2261 
	`emô_£t_gz64_32
(
s2h
,
s2l
,
t
);

2263 
	`emô_£t_nz64_32
(
s2h
,
s2l
,
t
);

2266 
	`as£π
(
s1l
>=0);as£π(
s1h
>=0);

2267 
	`as£π
(
s2l
>=0);as£π(
s2h
>=0);

2268 if(
›code2
[
i
]==0x2a)

2269 
	`emô_£t_if_Àss64_32
(
s1h
,
s1l
,
s2h
,
s2l
,
t
);

2271 
	`emô_£t_if_ˇºy64_32
(
s1h
,
s1l
,
s2h
,
s2l
,
t
);

2275 
t
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

2277 if(
t
>=0) {

2278 
s1l
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

2279 
s2l
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]);

2280 if(
rs2
[
i
]==0)

2282 
	`as£π
(
s1l
>=0);

2283 if(
›code2
[
i
]==0x2a)

2284 
	`emô_shrimm
(
s1l
,31,
t
);

2286 
	`emô_zî‹eg
(
t
);

2288 if(
rs1
[
i
]==0)

2290 
	`as£π
(
s2l
>=0);

2291 if(
›code2
[
i
]==0x2a)

2292 
	`emô_£t_gz32
(
s2l
,
t
);

2294 
	`emô_£t_nz32
(
s2l
,
t
);

2297 
	`as£π
(
s1l
>=0);as£π(
s2l
>=0);

2298 if(
›code2
[
i
]==0x2a)

2299 
	`emô_£t_if_Àss32
(
s1l
,
s2l
,
t
);

2301 
	`emô_£t_if_ˇºy32
(
s1l
,
s2l
,
t
);

2307 if(
›code2
[
i
]>=0x24&&opcode2[i]<=0x27) {

2308 if(
π1
[
i
]) {

2309 sig√d 
s1l
,
s1h
,
s2l
,
s2h
,
th
,
é
;

2310 
é
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

2311 
th
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]|64);

2312 if(!((
i_ªgs
->
was32
>>
rs1
[
i
])&(i_ªgs->was32>>
rs2
[i])&1)&&
th
>=0)

2314 
	`as£π
(
é
>=0);

2315 if(
é
>=0) {

2316 
s1l
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

2317 
s1h
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]|64);

2318 
s2l
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]);

2319 
s2h
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]|64);

2320 if(
rs1
[
i
]&&
rs2
[i]) {

2321 
	`as£π
(
s1l
>=0);as£π(
s1h
>=0);

2322 
	`as£π
(
s2l
>=0);as£π(
s2h
>=0);

2323 if(
›code2
[
i
]==0x24) {

2324 
	`emô_™d
(
s1l
,
s2l
,
é
);

2325 
	`emô_™d
(
s1h
,
s2h
,
th
);

2327 if(
›code2
[
i
]==0x25) {

2328 
	`emô_‹
(
s1l
,
s2l
,
é
);

2329 
	`emô_‹
(
s1h
,
s2h
,
th
);

2331 if(
›code2
[
i
]==0x26) {

2332 
	`emô_x‹
(
s1l
,
s2l
,
é
);

2333 
	`emô_x‹
(
s1h
,
s2h
,
th
);

2335 if(
›code2
[
i
]==0x27) {

2336 
	`emô_‹
(
s1l
,
s2l
,
é
);

2337 
	`emô_‹
(
s1h
,
s2h
,
th
);

2338 
	`emô_nŸ
(
é
,tl);

2339 
	`emô_nŸ
(
th
,th);

2344 if(
›code2
[
i
]==0x24) {

2345 
	`emô_zî‹eg
(
é
);

2346 
	`emô_zî‹eg
(
th
);

2348 if(
›code2
[
i
]==0x25||opcode2[i]==0x26) {

2349 if(
rs1
[
i
]){

2350 if(
s1l
>=0Ë
	`emô_mov
(s1l,
é
);

2351 
	`emô_lﬂdªg
(
rs1
[
i
],
é
);

2352 if(
s1h
>=0Ë
	`emô_mov
(s1h,
th
);

2353 
	`emô_lﬂdªg
(
rs1
[
i
]|64,
th
);

2356 if(
rs2
[
i
]){

2357 if(
s2l
>=0Ë
	`emô_mov
(s2l,
é
);

2358 
	`emô_lﬂdªg
(
rs2
[
i
],
é
);

2359 if(
s2h
>=0Ë
	`emô_mov
(s2h,
th
);

2360 
	`emô_lﬂdªg
(
rs2
[
i
]|64,
th
);

2363 
	`emô_zî‹eg
(
é
);

2364 
	`emô_zî‹eg
(
th
);

2367 if(
›code2
[
i
]==0x27) {

2368 if(
rs1
[
i
]){

2369 if(
s1l
>=0Ë
	`emô_nŸ
(s1l,
é
);

2371 
	`emô_lﬂdªg
(
rs1
[
i
],
é
);

2372 
	`emô_nŸ
(
é
,tl);

2374 if(
s1h
>=0Ë
	`emô_nŸ
(s1h,
th
);

2376 
	`emô_lﬂdªg
(
rs1
[
i
]|64,
th
);

2377 
	`emô_nŸ
(
th
,th);

2381 if(
rs2
[
i
]){

2382 if(
s2l
>=0Ë
	`emô_nŸ
(s2l,
é
);

2384 
	`emô_lﬂdªg
(
rs2
[
i
],
é
);

2385 
	`emô_nŸ
(
é
,tl);

2387 if(
s2h
>=0Ë
	`emô_nŸ
(s2h,
th
);

2389 
	`emô_lﬂdªg
(
rs2
[
i
]|64,
th
);

2390 
	`emô_nŸ
(
th
,th);

2394 
	`emô_movimm
(-1,
é
);

2395 
	`emô_movimm
(-1,
th
);

2404 if(
é
>=0) {

2405 
s1l
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

2406 
s2l
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]);

2407 if(
rs1
[
i
]&&
rs2
[i]) {

2408 
	`as£π
(
s1l
>=0);

2409 
	`as£π
(
s2l
>=0);

2410 if(
›code2
[
i
]==0x24) {

2411 
	`emô_™d
(
s1l
,
s2l
,
é
);

2413 if(
›code2
[
i
]==0x25) {

2414 
	`emô_‹
(
s1l
,
s2l
,
é
);

2416 if(
›code2
[
i
]==0x26) {

2417 
	`emô_x‹
(
s1l
,
s2l
,
é
);

2419 if(
›code2
[
i
]==0x27) {

2420 
	`emô_‹
(
s1l
,
s2l
,
é
);

2421 
	`emô_nŸ
(
é
,tl);

2426 if(
›code2
[
i
]==0x24) {

2427 
	`emô_zî‹eg
(
é
);

2429 if(
›code2
[
i
]==0x25||opcode2[i]==0x26) {

2430 if(
rs1
[
i
]){

2431 if(
s1l
>=0Ë
	`emô_mov
(s1l,
é
);

2432 
	`emô_lﬂdªg
(
rs1
[
i
],
é
);

2435 if(
rs2
[
i
]){

2436 if(
s2l
>=0Ë
	`emô_mov
(s2l,
é
);

2437 
	`emô_lﬂdªg
(
rs2
[
i
],
é
);

2439 
	`emô_zî‹eg
(
é
);

2441 if(
›code2
[
i
]==0x27) {

2442 if(
rs1
[
i
]){

2443 if(
s1l
>=0Ë
	`emô_nŸ
(s1l,
é
);

2445 
	`emô_lﬂdªg
(
rs1
[
i
],
é
);

2446 
	`emô_nŸ
(
é
,tl);

2450 if(
rs2
[
i
]){

2451 if(
s2l
>=0Ë
	`emô_nŸ
(s2l,
é
);

2453 
	`emô_lﬂdªg
(
rs2
[
i
],
é
);

2454 
	`emô_nŸ
(
é
,tl);

2457 
	`emô_movimm
(-1,
é
);

2464 
	}
}

2466 
	$imm16_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

2468 i‡(
›code
[
i
]==0x0f) {

2469 if(
π1
[
i
]) {

2470 sig√d 
t
;

2471 
t
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

2473 if(
t
>=0) {

2474 if(!((
i_ªgs
->
isc⁄°
>>
t
)&1))

2475 
	`emô_movimm
(
imm
[
i
]<<16,
t
);

2479 if(
›code
[
i
]==0x08||opcode[i]==0x09) {

2480 if(
π1
[
i
]) {

2481 sig√d 
s
,
t
;

2482 
t
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

2483 
s
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

2484 if(
rs1
[
i
]) {

2487 if(
t
>=0) {

2488 if(!((
i_ªgs
->
isc⁄°
>>
t
)&1)) {

2489 if(
s
<0) {

2490 if(
i_ªgs
->
ªgm≠_íåy
[
t
]!=
rs1
[
i
]Ë
	`emô_lﬂdªg
(rs1[i],t);

2491 
	`emô_addimm
(
t
,
imm
[
i
],t);

2493 if(!((
i_ªgs
->
wasc⁄°
>>
s
)&1))

2494 
	`emô_addimm
(
s
,
imm
[
i
],
t
);

2496 
	`emô_movimm
(
c⁄°m≠
[
i
][
s
]+
imm
[i],
t
);

2501 if(
t
>=0) {

2502 if(!((
i_ªgs
->
isc⁄°
>>
t
)&1))

2503 
	`emô_movimm
(
imm
[
i
],
t
);

2508 if(
›code
[
i
]==0x18||opcode[i]==0x19) {

2509 if(
π1
[
i
]) {

2510 sig√d 
sh
,
¶
,
th
,
é
;

2511 
th
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]|64);

2512 
é
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

2513 
sh
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]|64);

2514 
¶
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

2515 if(
é
>=0) {

2516 if(
rs1
[
i
]) {

2517 
	`as£π
(
sh
>=0);

2518 
	`as£π
(
¶
>=0);

2519 if(
th
>=0) {

2520 
	`emô_addimm64_32
(
sh
,
¶
,
imm
[
i
],
th
,
é
);

2523 
	`emô_addimm
(
¶
,
imm
[
i
],
é
);

2526 
	`emô_movimm
(
imm
[
i
],
é
);

2527 if(
th
>=0Ë
	`emô_movimm
(((sig√d )
imm
[
i
])>>31,th);

2532 if(
›code
[
i
]==0x0a||opcode[i]==0x0b) {

2533 if(
π1
[
i
]) {

2535 sig√d 
sh
,
¶
,
t
;

2536 
t
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

2537 
sh
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]|64);

2538 
¶
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

2540 if(
t
>=0) {

2541 if(
rs1
[
i
]>0) {

2542 if(
sh
<0Ë
	`as£π
((
i_ªgs
->
was32
>>
rs1
[
i
])&1);

2543 if(
sh
<0||((
i_ªgs
->
was32
>>
rs1
[
i
])&1)) {

2544 if(
›code
[
i
]==0x0a) {

2545 if(
¶
<0) {

2546 if(
i_ªgs
->
ªgm≠_íåy
[
t
]!=
rs1
[
i
]Ë
	`emô_lﬂdªg
(rs1[i],t);

2547 
	`emô_¶ti32
(
t
,
imm
[
i
],t);

2549 
	`emô_¶ti32
(
¶
,
imm
[
i
],
t
);

2553 if(
¶
<0) {

2554 if(
i_ªgs
->
ªgm≠_íåy
[
t
]!=
rs1
[
i
]Ë
	`emô_lﬂdªg
(rs1[i],t);

2555 
	`emô_¶tiu32
(
t
,
imm
[
i
],t);

2557 
	`emô_¶tiu32
(
¶
,
imm
[
i
],
t
);

2561 
	`as£π
(
¶
>=0);

2562 if(
›code
[
i
]==0x0a)

2563 
	`emô_¶ti64_32
(
sh
,
¶
,
imm
[
i
],
t
);

2565 
	`emô_¶tiu64_32
(
sh
,
¶
,
imm
[
i
],
t
);

2570 if(
›code
[
i
]==0x0a)

2571 if(0<
imm
[
i
]Ë
	`emô_movimm
(1,
t
);

2572 
	`emô_zî‹eg
(
t
);

2575 if(
imm
[
i
]Ë
	`emô_movimm
(1,
t
);

2576 
	`emô_zî‹eg
(
t
);

2582 if(
›code
[
i
]>=0x0c&&opcode[i]<=0x0e) {

2583 if(
π1
[
i
]) {

2584 sig√d 
sh
,
¶
,
th
,
é
;

2585 
th
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]|64);

2586 
é
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

2587 
sh
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]|64);

2588 
¶
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

2589 if(
é
>=0 && !((
i_ªgs
->
isc⁄°
>>tl)&1)) {

2590 if(
›code
[
i
]==0x0c)

2592 if(
rs1
[
i
]) {

2593 if(
¶
<0) {

2594 if(
i_ªgs
->
ªgm≠_íåy
[
é
]!=
rs1
[
i
]Ë
	`emô_lﬂdªg
(rs1[i],tl);

2595 
	`emô_™dimm
(
é
,
imm
[
i
],tl);

2597 if(!((
i_ªgs
->
wasc⁄°
>>
¶
)&1))

2598 
	`emô_™dimm
(
¶
,
imm
[
i
],
é
);

2600 
	`emô_movimm
(
c⁄°m≠
[
i
][
¶
]&
imm
[i],
é
);

2604 
	`emô_zî‹eg
(
é
);

2605 if(
th
>=0Ë
	`emô_zî‹eg
(th);

2609 if(
rs1
[
i
]) {

2610 if(
¶
<0) {

2611 if(
i_ªgs
->
ªgm≠_íåy
[
é
]!=
rs1
[
i
]Ë
	`emô_lﬂdªg
(rs1[i],tl);

2613 if(
th
>=0) {

2614 if(
sh
<0) {

2615 
	`emô_lﬂdªg
(
rs1
[
i
]|64,
th
);

2617 
	`emô_mov
(
sh
,
th
);

2620 if(
›code
[
i
]==0x0d)

2621 if(
¶
<0) {

2622 
	`emô_‹imm
(
é
,
imm
[
i
],tl);

2624 if(!((
i_ªgs
->
wasc⁄°
>>
¶
)&1))

2625 
	`emô_‹imm
(
¶
,
imm
[
i
],
é
);

2627 
	`emô_movimm
(
c⁄°m≠
[
i
][
¶
]|
imm
[i],
é
);

2629 if(
›code
[
i
]==0x0e)

2630 if(
¶
<0) {

2631 
	`emô_x‹imm
(
é
,
imm
[
i
],tl);

2633 if(!((
i_ªgs
->
wasc⁄°
>>
¶
)&1))

2634 
	`emô_x‹imm
(
¶
,
imm
[
i
],
é
);

2636 
	`emô_movimm
(
c⁄°m≠
[
i
][
¶
]^
imm
[i],
é
);

2640 
	`emô_movimm
(
imm
[
i
],
é
);

2641 if(
th
>=0Ë
	`emô_zî‹eg
(th);

2647 
	}
}

2649 
	$shi·imm_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

2651 if(
›code2
[
i
]<=0x3)

2653 if(
π1
[
i
]) {

2654 sig√d 
s
,
t
;

2655 
t
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

2656 
s
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

2658 if(
t
>=0&&!((
i_ªgs
->
isc⁄°
>>t)&1)){

2659 if(
rs1
[
i
]==0)

2661 
	`emô_zî‹eg
(
t
);

2665 if(
s
<0&&
i_ªgs
->
ªgm≠_íåy
[
t
]!=
rs1
[
i
]Ë
	`emô_lﬂdªg
(rs1[i],t);

2666 if(
imm
[
i
]) {

2667 if(
›code2
[
i
]==0)

2669 
	`emô_shlimm
(
s
<0?
t
:s,
imm
[
i
],t);

2671 if(
›code2
[
i
]==2)

2673 
	`emô_shrimm
(
s
<0?
t
:s,
imm
[
i
],t);

2675 if(
›code2
[
i
]==3)

2677 
	`emô_ßrimm
(
s
<0?
t
:s,
imm
[
i
],t);

2681 if(
s
>=0 && s!=
t
Ë
	`emô_mov
(s,t);

2688 if(
›code2
[
i
]>=0x38&&opcode2[i]<=0x3b)

2690 if(
π1
[
i
]) {

2691 sig√d 
sh
,
¶
,
th
,
é
;

2692 
th
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]|64);

2693 
é
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

2694 
sh
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]|64);

2695 
¶
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

2696 if(
é
>=0) {

2697 if(
rs1
[
i
]==0)

2699 
	`emô_zî‹eg
(
é
);

2700 if(
th
>=0Ë
	`emô_zî‹eg
(th);

2704 
	`as£π
(
¶
>=0);

2705 
	`as£π
(
sh
>=0);

2706 if(
imm
[
i
]) {

2707 if(
›code2
[
i
]==0x38)

2709 if(
th
>=0Ë
	`emô_shldimm
(
sh
,
¶
,
imm
[
i
],th);

2710 
	`emô_shlimm
(
¶
,
imm
[
i
],
é
);

2712 if(
›code2
[
i
]==0x3a)

2714 
	`emô_shrdimm
(
¶
,
sh
,
imm
[
i
],
é
);

2715 if(
th
>=0Ë
	`emô_shrimm
(
sh
,
imm
[
i
],th);

2717 if(
›code2
[
i
]==0x3b)

2719 
	`emô_shrdimm
(
¶
,
sh
,
imm
[
i
],
é
);

2720 if(
th
>=0Ë
	`emô_ßrimm
(
sh
,
imm
[
i
],th);

2724 if(
¶
!=
é
Ë
	`emô_mov
(sl,tl);

2725 if(
th
>=0&&
sh
!ÒhË
	`emô_mov
(sh,th);

2731 if(
›code2
[
i
]==0x3c)

2733 if(
π1
[
i
]) {

2734 sig√d 
¶
,
é
,
th
;

2735 
é
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

2736 
th
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]|64);

2737 
¶
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

2738 if(
th
>=0||
é
>=0){

2739 
	`as£π
(
é
>=0);

2740 
	`as£π
(
th
>=0);

2741 
	`as£π
(
¶
>=0);

2742 
	`emô_mov
(
¶
,
th
);

2743 
	`emô_zî‹eg
(
é
);

2744 if(
imm
[
i
]>32)

2746 
	`emô_shlimm
(
th
,
imm
[
i
]&31,th);

2751 if(
›code2
[
i
]==0x3e)

2753 if(
π1
[
i
]) {

2754 sig√d 
sh
,
é
,
th
;

2755 
é
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

2756 
th
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]|64);

2757 
sh
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]|64);

2758 if(
é
>=0){

2759 
	`as£π
(
sh
>=0);

2760 
	`emô_mov
(
sh
,
é
);

2761 if(
th
>=0Ë
	`emô_zî‹eg
(th);

2762 if(
imm
[
i
]>32)

2764 
	`emô_shrimm
(
é
,
imm
[
i
]&31,tl);

2769 if(
›code2
[
i
]==0x3f)

2771 if(
π1
[
i
]) {

2772 sig√d 
sh
,
é
;

2773 
é
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

2774 
sh
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]|64);

2775 if(
é
>=0){

2776 
	`as£π
(
sh
>=0);

2777 
	`emô_mov
(
sh
,
é
);

2778 if(
imm
[
i
]>32)

2780 
	`emô_ßrimm
(
é
,
imm
[
i
]&31,tl);

2785 
	}
}

2787 #i‚de‡
shi·_as£mbÀ


2788 
	$shi·_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

2790 
	`¥ötf
("Need shift_assemble forÅhisárchitecture.\n");

2791 
	`exô
(1);

2792 
	}
}

2795 
	$lﬂd_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

2797 
s
,
th
,
é
,
addr
,
m≠
=-1;

2798 
off£t
;

2799 
jaddr
=0;

2800 
memèrgë
=0,
c
=0;

2801 
Á°lﬂd_ªg_ovîride
=0;

2802 
u_öt
 
hr
,
ªgli°
=0;

2803 
th
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]|64);

2804 
é
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

2805 
s
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

2806 
off£t
=
imm
[
i
];

2807 
hr
=0;hr<
HOST_REGS
;hr++) {

2808 if(
i_ªgs
->
ªgm≠
[
hr
]>=0Ë
ªgli°
|=1<<hr;

2810 if(
i_ªgs
->
ªgm≠
[
HOST_CCREG
]==
CCREG
Ë
ªgli°
&=~(1<<HOST_CCREG);

2811 if(
s
>=0) {

2812 
c
=(
i_ªgs
->
wasc⁄°
>>
s
)&1;

2813 i‡(
c
) {

2814 
memèrgë
=((sig√d )(
c⁄°m≠
[
i
][
s
]+
off£t
))<(sig√d )0x80000000+
RAM_SIZE
;

2815 if(
usög_éb
&&((sig√d )(
c⁄°m≠
[
i
][
s
]+
off£t
))>=(sig√d )0xC0000000Ë
memèrgë
=1;

2821 #ifde‡
PCSX


2822 if(
é
<0&&(!
c
||(((
u_öt
)
c⁄°m≠
[
i
][
s
]+
off£t
)>>16)==0x1f80)

2823 ||
π1
[
i
]==0) {

2826 
	`as£m_debug
("(forcedÑead)\n");

2827 
é
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,-1);

2828 
	`as£π
(
é
>=0);

2831 if(
off£t
||
s
<0||
c
Ë
addr
=
é
;

2832 
addr
=
s
;

2834 if(
é
>=0) {

2837 
	`as£π
(
é
>=0);

2838 
ªgli°
&=~(1<<
é
);

2839 if(
th
>=0Ë
ªgli°
&=~(1<<th);

2840 if(!
usög_éb
) {

2841 if(!
c
) {

2842 #ifde‡
RAM_OFFSET


2843 
m≠
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
ROREG
);

2844 if(
m≠
<0Ë
	`emô_lﬂdªg
(
ROREG
,m≠=
HOST_TEMPREG
);

2847 #ifde‡
R29_HACK


2849 if(
rs1
[
i
]!=29||
°¨t
<0x80001000||°¨t>=0x80000000+
RAM_SIZE
)

2852 
jaddr
=
	`emô_Á°∑th_cmp_jump
(
i
,
addr
,&
Á°lﬂd_ªg_ovîride
);

2855 if(
øm_off£t
&&
memèrgë
) {

2856 
	`emô_addimm
(
addr
,
øm_off£t
,
HOST_TEMPREG
);

2857 
Á°lﬂd_ªg_ovîride
=
HOST_TEMPREG
;

2860 
x
=0;

2861 i‡(
›code
[
i
]==0x20||›code[i]==0x24Ë
x
=3;

2862 i‡(
›code
[
i
]==0x21||›code[i]==0x25Ë
x
=2;

2863 
m≠
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
TLREG
);

2864 
	`as£π
(
m≠
>=0);

2865 
ªgli°
&=~(1<<
m≠
);

2866 
m≠
=
	`do_éb_r
(
addr
,
é
,m≠,
x
,-1,-1,
c
,
c⁄°m≠
[
i
][
s
]+
off£t
);

2867 
	`do_éb_r_bønch
(
m≠
,
c
,
c⁄°m≠
[
i
][
s
]+
off£t
,&
jaddr
);

2869 
dummy
=(
π1
[
i
]==0)||(
é
!=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,rt1[i]));

2870 i‡(
›code
[
i
]==0x20) {

2871 if(!
c
||
memèrgë
) {

2872 if(!
dummy
) {

2873 #ifde‡
HOST_IMM_ADDR32


2874 if(
c
)

2875 
	`emô_movsbl_éb
((
c⁄°m≠
[
i
][
s
]+
off£t
)^3,
m≠
,
é
);

2882 
x
=0,
a
=
é
;

2883 #ifde‡
BIG_ENDIAN_MIPS


2884 if(!
c
Ë
	`emô_x‹imm
(
addr
,3,
é
);

2885 
x
=((
c⁄°m≠
[
i
][
s
]+
off£t
)^3)-(constmap[i][s]+offset);

2887 if(!
c
Ë
a
=
addr
;

2889 if(
Á°lﬂd_ªg_ovîride
Ë
a
=fastload_reg_override;

2891 
	`emô_movsbl_ödexed_éb
(
x
,
a
,
m≠
,
é
);

2894 if(
jaddr
)

2895 
	`add_°ub
(
LOADB_STUB
,
jaddr
,()
out
,
i
,
addr
,()
i_ªgs
,
cˇdj
[i],
ªgli°
);

2898 
	`ölöe_ªad°ub
(
LOADB_STUB
,
i
,
c⁄°m≠
[i][
s
]+
off£t
,
i_ªgs
->
ªgm≠
,
π1
[i],
cˇdj
[i],
ªgli°
);

2900 i‡(
›code
[
i
]==0x21) {

2901 if(!
c
||
memèrgë
) {

2902 if(!
dummy
) {

2903 #ifde‡
HOST_IMM_ADDR32


2904 if(
c
)

2905 
	`emô_movswl_éb
((
c⁄°m≠
[
i
][
s
]+
off£t
)^2,
m≠
,
é
);

2909 
x
=0,
a
=
é
;

2910 #ifde‡
BIG_ENDIAN_MIPS


2911 if(!
c
Ë
	`emô_x‹imm
(
addr
,2,
é
);

2912 
x
=((
c⁄°m≠
[
i
][
s
]+
off£t
)^2)-(constmap[i][s]+offset);

2914 if(!
c
Ë
a
=
addr
;

2916 if(
Á°lﬂd_ªg_ovîride
Ë
a
=fastload_reg_override;

2920 if(
m≠
>=0) {

2921 
	`gí_éb_addr_r
(
a
,
m≠
);

2922 
	`emô_movswl_ödexed
(
x
,
a
,
é
);

2925 
	`emô_movswl_ödexed
(
x
,
a
,
é
);

2927 
	`emô_movswl_ödexed
(()
rdøm
-0x80000000+
x
,
a
,
é
);

2932 if(
jaddr
)

2933 
	`add_°ub
(
LOADH_STUB
,
jaddr
,()
out
,
i
,
addr
,()
i_ªgs
,
cˇdj
[i],
ªgli°
);

2936 
	`ölöe_ªad°ub
(
LOADH_STUB
,
i
,
c⁄°m≠
[i][
s
]+
off£t
,
i_ªgs
->
ªgm≠
,
π1
[i],
cˇdj
[i],
ªgli°
);

2938 i‡(
›code
[
i
]==0x23) {

2939 if(!
c
||
memèrgë
) {

2940 if(!
dummy
) {

2941 
a
=
addr
;

2942 if(
Á°lﬂd_ªg_ovîride
Ë
a
=fastload_reg_override;

2944 #ifde‡
HOST_IMM_ADDR32


2945 if(
c
)

2946 
	`emô_ªadw‹d_éb
(
c⁄°m≠
[
i
][
s
]+
off£t
,
m≠
,
é
);

2949 
	`emô_ªadw‹d_ödexed_éb
(0,
a
,
m≠
,
é
);

2951 if(
jaddr
)

2952 
	`add_°ub
(
LOADW_STUB
,
jaddr
,()
out
,
i
,
addr
,()
i_ªgs
,
cˇdj
[i],
ªgli°
);

2955 
	`ölöe_ªad°ub
(
LOADW_STUB
,
i
,
c⁄°m≠
[i][
s
]+
off£t
,
i_ªgs
->
ªgm≠
,
π1
[i],
cˇdj
[i],
ªgli°
);

2957 i‡(
›code
[
i
]==0x24) {

2958 if(!
c
||
memèrgë
) {

2959 if(!
dummy
) {

2960 #ifde‡
HOST_IMM_ADDR32


2961 if(
c
)

2962 
	`emô_movzbl_éb
((
c⁄°m≠
[
i
][
s
]+
off£t
)^3,
m≠
,
é
);

2969 
x
=0,
a
=
é
;

2970 #ifde‡
BIG_ENDIAN_MIPS


2971 if(!
c
Ë
	`emô_x‹imm
(
addr
,3,
é
);

2972 
x
=((
c⁄°m≠
[
i
][
s
]+
off£t
)^3)-(constmap[i][s]+offset);

2974 if(!
c
Ë
a
=
addr
;

2976 if(
Á°lﬂd_ªg_ovîride
Ë
a
=fastload_reg_override;

2978 
	`emô_movzbl_ödexed_éb
(
x
,
a
,
m≠
,
é
);

2981 if(
jaddr
)

2982 
	`add_°ub
(
LOADBU_STUB
,
jaddr
,()
out
,
i
,
addr
,()
i_ªgs
,
cˇdj
[i],
ªgli°
);

2985 
	`ölöe_ªad°ub
(
LOADBU_STUB
,
i
,
c⁄°m≠
[i][
s
]+
off£t
,
i_ªgs
->
ªgm≠
,
π1
[i],
cˇdj
[i],
ªgli°
);

2987 i‡(
›code
[
i
]==0x25) {

2988 if(!
c
||
memèrgë
) {

2989 if(!
dummy
) {

2990 #ifde‡
HOST_IMM_ADDR32


2991 if(
c
)

2992 
	`emô_movzwl_éb
((
c⁄°m≠
[
i
][
s
]+
off£t
)^2,
m≠
,
é
);

2996 
x
=0,
a
=
é
;

2997 #ifde‡
BIG_ENDIAN_MIPS


2998 if(!
c
Ë
	`emô_x‹imm
(
addr
,2,
é
);

2999 
x
=((
c⁄°m≠
[
i
][
s
]+
off£t
)^2)-(constmap[i][s]+offset);

3001 if(!
c
Ë
a
=
addr
;

3003 if(
Á°lﬂd_ªg_ovîride
Ë
a
=fastload_reg_override;

3007 if(
m≠
>=0) {

3008 
	`gí_éb_addr_r
(
a
,
m≠
);

3009 
	`emô_movzwl_ödexed
(
x
,
a
,
é
);

3012 
	`emô_movzwl_ödexed
(
x
,
a
,
é
);

3014 
	`emô_movzwl_ödexed
(()
rdøm
-0x80000000+
x
,
a
,
é
);

3019 if(
jaddr
)

3020 
	`add_°ub
(
LOADHU_STUB
,
jaddr
,()
out
,
i
,
addr
,()
i_ªgs
,
cˇdj
[i],
ªgli°
);

3023 
	`ölöe_ªad°ub
(
LOADHU_STUB
,
i
,
c⁄°m≠
[i][
s
]+
off£t
,
i_ªgs
->
ªgm≠
,
π1
[i],
cˇdj
[i],
ªgli°
);

3025 i‡(
›code
[
i
]==0x27) {

3026 
	`as£π
(
th
>=0);

3027 if(!
c
||
memèrgë
) {

3028 if(!
dummy
) {

3029 
a
=
addr
;

3030 if(
Á°lﬂd_ªg_ovîride
Ë
a
=fastload_reg_override;

3032 #ifde‡
HOST_IMM_ADDR32


3033 if(
c
)

3034 
	`emô_ªadw‹d_éb
(
c⁄°m≠
[
i
][
s
]+
off£t
,
m≠
,
é
);

3037 
	`emô_ªadw‹d_ödexed_éb
(0,
a
,
m≠
,
é
);

3039 if(
jaddr
)

3040 
	`add_°ub
(
LOADW_STUB
,
jaddr
,()
out
,
i
,
addr
,()
i_ªgs
,
cˇdj
[i],
ªgli°
);

3043 
	`ölöe_ªad°ub
(
LOADW_STUB
,
i
,
c⁄°m≠
[i][
s
]+
off£t
,
i_ªgs
->
ªgm≠
,
π1
[i],
cˇdj
[i],
ªgli°
);

3045 
	`emô_zî‹eg
(
th
);

3047 i‡(
›code
[
i
]==0x37) {

3048 if(!
c
||
memèrgë
) {

3049 if(!
dummy
) {

3050 
a
=
addr
;

3051 if(
Á°lﬂd_ªg_ovîride
Ë
a
=fastload_reg_override;

3055 #ifde‡
HOST_IMM_ADDR32


3056 if(
c
)

3057 
	`emô_ªaddw‹d_éb
(
c⁄°m≠
[
i
][
s
]+
off£t
,
m≠
,
th
,
é
);

3060 
	`emô_ªaddw‹d_ödexed_éb
(0,
a
,
m≠
,
th
,
é
);

3062 if(
jaddr
)

3063 
	`add_°ub
(
LOADD_STUB
,
jaddr
,()
out
,
i
,
addr
,()
i_ªgs
,
cˇdj
[i],
ªgli°
);

3066 
	`ölöe_ªad°ub
(
LOADD_STUB
,
i
,
c⁄°m≠
[i][
s
]+
off£t
,
i_ªgs
->
ªgm≠
,
π1
[i],
cˇdj
[i],
ªgli°
);

3098 
	}
}

3100 #i‚de‡
lﬂdÃ_as£mbÀ


3101 
	$lﬂdÃ_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

3103 
	`¥ötf
("NeedÜoadlr_assemble forÅhisárchitecture.\n");

3104 
	`exô
(1);

3105 
	}
}

3108 
	$°‹e_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

3110 
s
,
th
,
é
,
m≠
=-1;

3111 
addr
,
ãmp
;

3112 
off£t
;

3113 
jaddr
=0,
jaddr2
,
ty≥
;

3114 
memèrgë
=0,
c
=0;

3115 
agr
=
AGEN1
+(
i
&1);

3116 
Á°°‹e_ªg_ovîride
=0;

3117 
u_öt
 
hr
,
ªgli°
=0;

3118 
th
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]|64);

3119 
é
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]);

3120 
s
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

3121 
ãmp
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
agr
);

3122 if(
ãmp
<0Ëãmp=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,-1);

3123 
off£t
=
imm
[
i
];

3124 if(
s
>=0) {

3125 
c
=(
i_ªgs
->
wasc⁄°
>>
s
)&1;

3126 if(
c
) {

3127 
memèrgë
=((sig√d )(
c⁄°m≠
[
i
][
s
]+
off£t
))<(sig√d )0x80000000+
RAM_SIZE
;

3128 if(
usög_éb
&&((sig√d )(
c⁄°m≠
[
i
][
s
]+
off£t
))>=(sig√d )0xC0000000Ë
memèrgë
=1;

3131 
	`as£π
(
é
>=0);

3132 
	`as£π
(
ãmp
>=0);

3133 
hr
=0;hr<
HOST_REGS
;hr++) {

3134 if(
i_ªgs
->
ªgm≠
[
hr
]>=0Ë
ªgli°
|=1<<hr;

3136 if(
i_ªgs
->
ªgm≠
[
HOST_CCREG
]==
CCREG
Ë
ªgli°
&=~(1<<HOST_CCREG);

3137 if(
off£t
||
s
<0||
c
Ë
addr
=
ãmp
;

3138 
addr
=
s
;

3139 if(!
usög_éb
) {

3140 if(!
c
) {

3141 #i‚de‡
PCSX


3142 #ifde‡
R29_HACK


3144 if(
rs1
[
i
]!=29||
°¨t
<0x80001000||°¨t>=0x80000000+
RAM_SIZE
)

3146 
	`emô_cmpimm
(
addr
,
RAM_SIZE
);

3147 #ifde‡
DESTRUCTIVE_SHIFT


3148 if(
s
==
addr
Ë
	`emô_mov
(s,
ãmp
);

3150 #ifde‡
R29_HACK


3151 
memèrgë
=1;

3152 if(
rs1
[
i
]!=29||
°¨t
<0x80001000||°¨t>=0x80000000+
RAM_SIZE
)

3155 
jaddr
=()
out
;

3156 #ifde‡
CORTEX_A8_BRANCH_PREDICTION_HACK


3158 if(
rs1
[
i
]>=28)

3159 
	`emô_jno_u∆ikñy
(0);

3162 
	`emô_jno
(0);

3165 
jaddr
=
	`emô_Á°∑th_cmp_jump
(
i
,
addr
,&
Á°°‹e_ªg_ovîride
);

3168 if(
øm_off£t
&&
memèrgë
) {

3169 
	`emô_addimm
(
addr
,
øm_off£t
,
HOST_TEMPREG
);

3170 
Á°°‹e_ªg_ovîride
=
HOST_TEMPREG
;

3173 
x
=0;

3174 i‡(
›code
[
i
]==0x28Ë
x
=3;

3175 i‡(
›code
[
i
]==0x29Ë
x
=2;

3176 
m≠
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
TLREG
);

3177 
	`as£π
(
m≠
>=0);

3178 
ªgli°
&=~(1<<
m≠
);

3179 
m≠
=
	`do_éb_w
(
addr
,
ãmp
,m≠,
x
,
c
,
c⁄°m≠
[
i
][
s
]+
off£t
);

3180 
	`do_éb_w_bønch
(
m≠
,
c
,
c⁄°m≠
[
i
][
s
]+
off£t
,&
jaddr
);

3183 i‡(
›code
[
i
]==0x28) {

3184 if(!
c
||
memèrgë
) {

3185 
x
=0,
a
=
ãmp
;

3186 #ifde‡
BIG_ENDIAN_MIPS


3187 if(!
c
Ë
	`emô_x‹imm
(
addr
,3,
ãmp
);

3188 
x
=((
c⁄°m≠
[
i
][
s
]+
off£t
)^3)-(constmap[i][s]+offset);

3190 if(!
c
Ë
a
=
addr
;

3192 if(
Á°°‹e_ªg_ovîride
Ë
a
=faststore_reg_override;

3195 
	`emô_wrôebyã_ödexed_éb
(
é
,
x
,
a
,
m≠
,a);

3197 
ty≥
=
STOREB_STUB
;

3199 i‡(
›code
[
i
]==0x29) {

3200 if(!
c
||
memèrgë
) {

3201 
x
=0,
a
=
ãmp
;

3202 #ifde‡
BIG_ENDIAN_MIPS


3203 if(!
c
Ë
	`emô_x‹imm
(
addr
,2,
ãmp
);

3204 
x
=((
c⁄°m≠
[
i
][
s
]+
off£t
)^2)-(constmap[i][s]+offset);

3206 if(!
c
Ë
a
=
addr
;

3208 if(
Á°°‹e_ªg_ovîride
Ë
a
=faststore_reg_override;

3212 if(
m≠
>=0) {

3213 
	`gí_éb_addr_w
(
a
,
m≠
);

3214 
	`emô_wrôehw‹d_ödexed
(
é
,
x
,
a
);

3217 
	`emô_wrôehw‹d_ödexed
(
é
,
x
,
a
);

3219 
ty≥
=
STOREH_STUB
;

3221 i‡(
›code
[
i
]==0x2B) {

3222 if(!
c
||
memèrgë
) {

3223 
a
=
addr
;

3224 if(
Á°°‹e_ªg_ovîride
Ë
a
=faststore_reg_override;

3226 
	`emô_wrôew‹d_ödexed_éb
(
é
,0,
a
,
m≠
,
ãmp
);

3228 
ty≥
=
STOREW_STUB
;

3230 i‡(
›code
[
i
]==0x3F) {

3231 if(!
c
||
memèrgë
) {

3232 
a
=
addr
;

3233 if(
Á°°‹e_ªg_ovîride
Ë
a
=faststore_reg_override;

3234 if(
rs2
[
i
]) {

3235 
	`as£π
(
th
>=0);

3238 
	`emô_wrôedw‹d_ödexed_éb
(
th
,
é
,0,
a
,
m≠
,
ãmp
);

3243 
	`emô_wrôedw‹d_ödexed_éb
(
é
,é,0,
a
,
m≠
,
ãmp
);

3246 
ty≥
=
STORED_STUB
;

3248 #ifde‡
PCSX


3249 if(
jaddr
) {

3251 
ªgli°
|=1<<
addr
;

3252 
	`add_°ub
(
ty≥
,
jaddr
,()
out
,
i
,
addr
,()
i_ªgs
,
cˇdj
[i],
ªgli°
);

3253 
jaddr
=0;

3256 if(!
usög_éb
&&!(
i_ªgs
->
waswrôãn
&(1<<
rs1
[
i
]))&&!(
√w_dy«ªc_hacks
&
NDHACK_NO_SMC_CHECK
)) {

3257 if(!
c
||
memèrgë
) {

3258 #ifde‡
DESTRUCTIVE_SHIFT


3261 
addr
=
ãmp
;

3263 #i‡
	`deföed
(
HOST_IMM8
)

3264 
ú
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
INVCP
);

3265 
	`as£π
(
ú
>=0);

3266 
	`emô_cmpmem_ödexed§12_ªg
(
ú
,
addr
,1);

3268 
	`emô_cmpmem_ödexed§12_imm
(()
övÆid_code
,
addr
,1);

3270 #i‡
	`deföed
(
HAVE_CONDITIONAL_CALL
Ë&& !deföed(
DESTRUCTIVE_SHIFT
)

3271 
	`emô_ˇŒ√
(
övÆid©e_addr_ªg
[
addr
]);

3273 
jaddr2
=()
out
;

3274 
	`emô_j√
(0);

3275 
	`add_°ub
(
INVCODE_STUB
,
jaddr2
,()
out
,
ªgli°
|(1<<
HOST_CCREG
),
addr
,0,0,0);

3279 
u_öt
 
addr_vÆ
=
c⁄°m≠
[
i
][
s
]+
off£t
;

3280 if(
jaddr
) {

3281 
	`add_°ub
(
ty≥
,
jaddr
,()
out
,
i
,
addr
,()
i_ªgs
,
cˇdj
[i],
ªgli°
);

3282 } if(
c
&&!
memèrgë
) {

3283 
	`ölöe_wrôe°ub
(
ty≥
,
i
,
addr_vÆ
,
i_ªgs
->
ªgm≠
,
rs2
[i],
cˇdj
[i],
ªgli°
);

3287 if(
c
&&
°¨t
+
i
*4<
addr_vÆ
&&addr_vÆ<°¨t+
¶í
*4) {

3288 
	`SysPrötf
("wrôêtÿ%08x hô†block %08x,Öc=%08x\n",
addr_vÆ
,
°¨t
,°¨t+
i
*4);

3289 
	`as£π
(
i_ªgs
->
ªgm≠
==
ªgs
[
i
].regmap);

3290 if(
i_ªgs
->
ªgm≠
==
ªgs
[
i
].regmap) {

3291 
	`lﬂd_Æl_c⁄°s
(
ªgs
[
i
].
ªgm≠_íåy
,ªgs[i].
was32
,ªgs[i].
wasdúty
,i);

3292 
	`wb_dútys
(
ªgs
[
i
].
ªgm≠_íåy
,ªgs[i].
was32
,ªgs[i].
wasdúty
);

3293 
	`emô_movimm
(
°¨t
+
i
*4+4,0);

3294 
	`emô_wrôew‹d
(0,()&
pˇddr
);

3295 
	`emô_jmp
(()
do_öãºu±
);

3335 
	}
}

3337 
	$°‹ñr_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

3339 
s
,
th
,
é
;

3340 
ãmp
;

3341 
ãmp2
;

3342 
off£t
;

3343 
jaddr
=0,
jaddr2
;

3344 
ˇ£1
,
ˇ£2
,
ˇ£3
;

3345 
d⁄e0
,
d⁄e1
,
d⁄e2
;

3346 
memèrgë
=0,
c
=0;

3347 
agr
=
AGEN1
+(
i
&1);

3348 
u_öt
 
hr
,
ªgli°
=0;

3349 
th
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]|64);

3350 
é
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]);

3351 
s
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

3352 
ãmp
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
agr
);

3353 if(
ãmp
<0Ëãmp=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,-1);

3354 
off£t
=
imm
[
i
];

3355 if(
s
>=0) {

3356 
c
=(
i_ªgs
->
isc⁄°
>>
s
)&1;

3357 if(
c
) {

3358 
memèrgë
=((sig√d )(
c⁄°m≠
[
i
][
s
]+
off£t
))<(sig√d )0x80000000+
RAM_SIZE
;

3359 if(
usög_éb
&&((sig√d )(
c⁄°m≠
[
i
][
s
]+
off£t
))>=(sig√d )0xC0000000Ë
memèrgë
=1;

3362 
	`as£π
(
é
>=0);

3363 
hr
=0;hr<
HOST_REGS
;hr++) {

3364 if(
i_ªgs
->
ªgm≠
[
hr
]>=0Ë
ªgli°
|=1<<hr;

3366 
	`as£π
(
ãmp
>=0);

3367 if(!
usög_éb
) {

3368 if(!
c
) {

3369 
	`emô_cmpimm
(
s
<0||
off£t
?
ãmp
:s,
RAM_SIZE
);

3370 if(!
off£t
&&
s
!=
ãmp
Ë
	`emô_mov
(s,temp);

3371 
jaddr
=()
out
;

3372 
	`emô_jno
(0);

3376 if(!
memèrgë
||!
rs1
[
i
]) {

3377 
jaddr
=()
out
;

3378 
	`emô_jmp
(0);

3381 #ifde‡
RAM_OFFSET


3382 
m≠
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
ROREG
);

3383 if(
m≠
<0Ë
	`emô_lﬂdªg
(
ROREG
,m≠=
HOST_TEMPREG
);

3384 
	`gí_éb_addr_w
(
ãmp
,
m≠
);

3386 if((
u_öt
)
rdøm
!=0x80000000)

3387 
	`emô_addimm_no_Êags
((
u_öt
)
rdøm
-(u_öt)0x80000000,
ãmp
);

3390 
m≠
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
TLREG
);

3391 
	`as£π
(
m≠
>=0);

3392 
ªgli°
&=~(1<<
m≠
);

3393 
m≠
=
	`do_éb_w
(
c
||
s
<0||
off£t
?
ãmp
:s,ãmp,m≠,0,c,
c⁄°m≠
[
i
][s]+offset);

3394 if(!
c
&&!
off£t
&&
s
>=0Ë
	`emô_mov
(s,
ãmp
);

3395 
	`do_éb_w_bønch
(
m≠
,
c
,
c⁄°m≠
[
i
][
s
]+
off£t
,&
jaddr
);

3396 if(!
jaddr
&&!
memèrgë
) {

3397 
jaddr
=()
out
;

3398 
	`emô_jmp
(0);

3400 
	`gí_éb_addr_w
(
ãmp
,
m≠
);

3403 i‡(
›code
[
i
]==0x2C||opcode[i]==0x2D) {

3404 
ãmp2
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
FTEMP
);

3405 if(!
rs2
[
i
]Ë
ãmp2
=
th
=
é
;

3408 #i‚de‡
BIG_ENDIAN_MIPS


3409 
	`emô_x‹imm
(
ãmp
,3,temp);

3411 
	`emô_ã°imm
(
ãmp
,2);

3412 
ˇ£2
=()
out
;

3413 
	`emô_j√
(0);

3414 
	`emô_ã°imm
(
ãmp
,1);

3415 
ˇ£1
=()
out
;

3416 
	`emô_j√
(0);

3418 i‡(
›code
[
i
]==0x2A) {

3419 
	`emô_wrôew‹d_ödexed
(
é
,0,
ãmp
);

3421 i‡(
›code
[
i
]==0x2E) {

3422 
	`emô_wrôebyã_ödexed
(
é
,3,
ãmp
);

3424 i‡(
›code
[
i
]==0x2C) {

3425 
	`emô_wrôew‹d_ödexed
(
th
,0,
ãmp
);

3426 if(
rs2
[
i
]Ë
	`emô_mov
(
é
,
ãmp2
);

3428 i‡(
›code
[
i
]==0x2D) {

3429 
	`emô_wrôebyã_ödexed
(
é
,3,
ãmp
);

3430 if(
rs2
[
i
]Ë
	`emô_shldimm
(
th
,
é
,24,
ãmp2
);

3432 
d⁄e0
=()
out
;

3433 
	`emô_jmp
(0);

3435 
	`£t_jump_èrgë
(
ˇ£1
,()
out
);

3436 i‡(
›code
[
i
]==0x2A) {

3438 if(
rs2
[
i
]Ë
	`emô_r‹imm
(
é
,8,tl);

3439 
	`emô_wrôehw‹d_ödexed
(
é
,-1,
ãmp
);

3440 if(
rs2
[
i
]Ë
	`emô_r‹imm
(
é
,16,tl);

3441 
	`emô_wrôebyã_ödexed
(
é
,1,
ãmp
);

3442 if(
rs2
[
i
]Ë
	`emô_r‹imm
(
é
,8,tl);

3444 i‡(
›code
[
i
]==0x2E) {

3446 
	`emô_wrôehw‹d_ödexed
(
é
,1,
ãmp
);

3448 i‡(
›code
[
i
]==0x2C) {

3449 if(
rs2
[
i
]Ë
	`emô_shrdimm
(
é
,
th
,8,
ãmp2
);

3451 if(
rs2
[
i
]Ë
	`emô_r‹imm
(
th
,8,th);

3452 
	`emô_wrôehw‹d_ödexed
(
th
,-1,
ãmp
);

3453 if(
rs2
[
i
]Ë
	`emô_r‹imm
(
th
,16,th);

3454 
	`emô_wrôebyã_ödexed
(
th
,1,
ãmp
);

3455 if(
rs2
[
i
]Ë
	`emô_r‹imm
(
th
,8,th);

3457 i‡(
›code
[
i
]==0x2D) {

3458 if(
rs2
[
i
]Ë
	`emô_shldimm
(
th
,
é
,16,
ãmp2
);

3460 
	`emô_wrôehw‹d_ödexed
(
é
,1,
ãmp
);

3462 
d⁄e1
=()
out
;

3463 
	`emô_jmp
(0);

3465 
	`£t_jump_èrgë
(
ˇ£2
,()
out
);

3466 
	`emô_ã°imm
(
ãmp
,1);

3467 
ˇ£3
=()
out
;

3468 
	`emô_j√
(0);

3469 i‡(
›code
[
i
]==0x2A) {

3471 if(
rs2
[
i
]Ë
	`emô_r‹imm
(
é
,16,tl);

3472 
	`emô_wrôehw‹d_ödexed
(
é
,-2,
ãmp
);

3473 if(
rs2
[
i
]Ë
	`emô_r‹imm
(
é
,16,tl);

3475 i‡(
›code
[
i
]==0x2E) {

3477 
	`emô_wrôebyã_ödexed
(
é
,-1,
ãmp
);

3478 if(
rs2
[
i
]Ë
	`emô_r‹imm
(
é
,8,tl);

3479 
	`emô_wrôehw‹d_ödexed
(
é
,0,
ãmp
);

3480 if(
rs2
[
i
]Ë
	`emô_r‹imm
(
é
,24,tl);

3482 i‡(
›code
[
i
]==0x2C) {

3483 if(
rs2
[
i
]Ë
	`emô_shrdimm
(
é
,
th
,16,
ãmp2
);

3485 if(
rs2
[
i
]Ë
	`emô_r‹imm
(
th
,16,th);

3486 
	`emô_wrôehw‹d_ödexed
(
th
,-2,
ãmp
);

3487 if(
rs2
[
i
]Ë
	`emô_r‹imm
(
th
,16,th);

3489 i‡(
›code
[
i
]==0x2D) {

3490 if(
rs2
[
i
]Ë
	`emô_shldimm
(
th
,
é
,8,
ãmp2
);

3492 
	`emô_wrôebyã_ödexed
(
é
,-1,
ãmp
);

3493 if(
rs2
[
i
]Ë
	`emô_r‹imm
(
é
,8,tl);

3494 
	`emô_wrôehw‹d_ödexed
(
é
,0,
ãmp
);

3495 if(
rs2
[
i
]Ë
	`emô_r‹imm
(
é
,24,tl);

3497 
d⁄e2
=()
out
;

3498 
	`emô_jmp
(0);

3500 
	`£t_jump_èrgë
(
ˇ£3
,()
out
);

3501 i‡(
›code
[
i
]==0x2A) {

3503 if(
rs2
[
i
]Ë
	`emô_r‹imm
(
é
,24,tl);

3504 
	`emô_wrôebyã_ödexed
(
é
,-3,
ãmp
);

3505 if(
rs2
[
i
]Ë
	`emô_r‹imm
(
é
,8,tl);

3507 i‡(
›code
[
i
]==0x2E) {

3509 
	`emô_wrôew‹d_ödexed
(
é
,-3,
ãmp
);

3511 i‡(
›code
[
i
]==0x2C) {

3512 if(
rs2
[
i
]Ë
	`emô_shrdimm
(
é
,
th
,24,
ãmp2
);

3514 if(
rs2
[
i
]Ë
	`emô_r‹imm
(
th
,24,th);

3515 
	`emô_wrôebyã_ödexed
(
th
,-3,
ãmp
);

3516 if(
rs2
[
i
]Ë
	`emô_r‹imm
(
th
,8,th);

3518 i‡(
›code
[
i
]==0x2D) {

3519 if(
rs2
[
i
]Ë
	`emô_mov
(
th
,
ãmp2
);

3521 
	`emô_wrôew‹d_ödexed
(
é
,-3,
ãmp
);

3523 
	`£t_jump_èrgë
(
d⁄e0
,()
out
);

3524 
	`£t_jump_èrgë
(
d⁄e1
,()
out
);

3525 
	`£t_jump_èrgë
(
d⁄e2
,()
out
);

3526 i‡(
›code
[
i
]==0x2C) {

3527 
	`emô_ã°imm
(
ãmp
,4);

3528 
d⁄e0
=()
out
;

3529 
	`emô_j√
(0);

3530 
	`emô_™dimm
(
ãmp
,~3,temp);

3531 
	`emô_wrôew‹d_ödexed
(
ãmp2
,4,
ãmp
);

3532 
	`£t_jump_èrgë
(
d⁄e0
,()
out
);

3534 i‡(
›code
[
i
]==0x2D) {

3535 
	`emô_ã°imm
(
ãmp
,4);

3536 
d⁄e0
=()
out
;

3537 
	`emô_jeq
(0);

3538 
	`emô_™dimm
(
ãmp
,~3,temp);

3539 
	`emô_wrôew‹d_ödexed
(
ãmp2
,-4,
ãmp
);

3540 
	`£t_jump_èrgë
(
d⁄e0
,()
out
);

3542 if(!
c
||!
memèrgë
)

3543 
	`add_°ub
(
STORELR_STUB
,
jaddr
,()
out
,
i
,()
i_ªgs
,
ãmp
,
cˇdj
[i],
ªgli°
);

3544 if(!
usög_éb
&&!(
i_ªgs
->
waswrôãn
&(1<<
rs1
[
i
]))&&!(
√w_dy«ªc_hacks
&
NDHACK_NO_SMC_CHECK
)) {

3545 #ifde‡
RAM_OFFSET


3546 
m≠
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
ROREG
);

3547 if(
m≠
<0Ëm≠=
HOST_TEMPREG
;

3548 
	`gí_‹ig_addr_w
(
ãmp
,
m≠
);

3550 
	`emô_addimm_no_Êags
((
u_öt
)0x80000000-(u_öt)
rdøm
,
ãmp
);

3552 #i‡
	`deföed
(
HOST_IMM8
)

3553 
ú
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
INVCP
);

3554 
	`as£π
(
ú
>=0);

3555 
	`emô_cmpmem_ödexed§12_ªg
(
ú
,
ãmp
,1);

3557 
	`emô_cmpmem_ödexed§12_imm
(()
övÆid_code
,
ãmp
,1);

3559 #i‡
	`deföed
(
HAVE_CONDITIONAL_CALL
Ë&& !deföed(
DESTRUCTIVE_SHIFT
)

3560 
	`emô_ˇŒ√
(
övÆid©e_addr_ªg
[
ãmp
]);

3562 
jaddr2
=()
out
;

3563 
	`emô_j√
(0);

3564 
	`add_°ub
(
INVCODE_STUB
,
jaddr2
,()
out
,
ªgli°
|(1<<
HOST_CCREG
),
ãmp
,0,0,0);

3580 
	}
}

3582 
	$c1ls_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

3584 #i‚de‡
DISABLE_COP1


3585 
s
,
th
,
é
;

3586 
ãmp
,
¨
;

3587 
m≠
=-1;

3588 
off£t
;

3589 
c
=0;

3590 
jaddr
,
jaddr2
=0,
jaddr3
,
ty≥
;

3591 
agr
=
AGEN1
+(
i
&1);

3592 
u_öt
 
hr
,
ªgli°
=0;

3593 
th
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
FTEMP
|64);

3594 
é
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
FTEMP
);

3595 
s
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

3596 
ãmp
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
agr
);

3597 if(
ãmp
<0Ëãmp=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,-1);

3598 
off£t
=
imm
[
i
];

3599 
	`as£π
(
é
>=0);

3600 
	`as£π
(
rs1
[
i
]>0);

3601 
	`as£π
(
ãmp
>=0);

3602 
hr
=0;hr<
HOST_REGS
;hr++) {

3603 if(
i_ªgs
->
ªgm≠
[
hr
]>=0Ë
ªgli°
|=1<<hr;

3605 if(
i_ªgs
->
ªgm≠
[
HOST_CCREG
]==
CCREG
Ë
ªgli°
&=~(1<<HOST_CCREG);

3606 i‡(
›code
[
i
]==0x31||opcode[i]==0x35)

3609 
ªgli°
|=1<<
ãmp
;

3611 i‡(
›code
[
i
]==0x39||opcode[i]==0x3D)

3612 
¨
=
ãmp
;

3614 
¨
=
é
;

3617 if(
s
>=0Ë
c
=(
i_ªgs
->
wasc⁄°
>>s)&1;

3619 if(!
c›1_ußbÀ
) {

3620 sig√d 
rs
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
CSREG
);

3621 
	`as£π
(
rs
>=0);

3622 
	`emô_ã°imm
(
rs
,0x20000000);

3623 
jaddr
=()
out
;

3624 
	`emô_jeq
(0);

3625 
	`add_°ub
(
FP_STUB
,
jaddr
,()
out
,
i
,
rs
,()
i_ªgs
,
is_dñay¶Ÿ
,0);

3626 
c›1_ußbÀ
=1;

3628 i‡(
›code
[
i
]==0x39) {

3629 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>16)&0x1f],
é
);

3631 i‡(
›code
[
i
]==0x3D) {

3632 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>16)&0x1f],
é
);

3635 if(!
usög_éb
) {

3636 if(!
c
)

3637 
	`emô_cmpimm
(
off£t
||
c
||
s
<0?
¨
:s,
RAM_SIZE
);

3641 
m≠
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
TLREG
);

3642 
	`as£π
(
m≠
>=0);

3643 
ªgli°
&=~(1<<
m≠
);

3644 i‡(
›code
[
i
]==0x31||opcode[i]==0x35) {

3645 
m≠
=
	`do_éb_r
(
off£t
||
c
||
s
<0?
¨
:s,¨,m≠,0,-1,-1,c,
c⁄°m≠
[
i
][s]+offset);

3647 i‡(
›code
[
i
]==0x39||opcode[i]==0x3D) {

3648 
m≠
=
	`do_éb_w
(
off£t
||
c
||
s
<0?
¨
:s,¨,m≠,0,c,
c⁄°m≠
[
i
][s]+offset);

3651 i‡(
›code
[
i
]==0x39) {

3652 
	`emô_ªadw‹d_ödexed
(0,
é
,tl);

3654 i‡(
›code
[
i
]==0x3D) {

3655 
	`emô_ªadw‹d_ödexed
(4,
é
,
th
);

3656 
	`emô_ªadw‹d_ödexed
(0,
é
,tl);

3658 i‡(
›code
[
i
]==0x31) {

3659 
	`emô_ªadw‹d
(()&
ªg_c›1_sim∂e
[(
sour˚
[
i
]>>16)&0x1f],
ãmp
);

3661 i‡(
›code
[
i
]==0x35) {

3662 
	`emô_ªadw‹d
(()&
ªg_c›1_doubÀ
[(
sour˚
[
i
]>>16)&0x1f],
ãmp
);

3664 if(!
usög_éb
) {

3665 if(!
c
) {

3666 
jaddr2
=()
out
;

3667 
	`emô_jno
(0);

3669 if(((sig√d )(
c⁄°m≠
[
i
][
s
]+
off£t
))>=(sig√d )0x80000000+
RAM_SIZE
) {

3670 
jaddr2
=()
out
;

3671 
	`emô_jmp
(0);

3673 #ifde‡
DESTRUCTIVE_SHIFT


3674 i‡(
›code
[
i
]==0x39||opcode[i]==0x3D) {

3675 if(!
off£t
&&!
c
&&
s
>=0Ë
	`emô_mov
(s,
¨
);

3679 i‡(
›code
[
i
]==0x31||opcode[i]==0x35) {

3680 
	`do_éb_r_bønch
(
m≠
,
c
,
c⁄°m≠
[
i
][
s
]+
off£t
,&
jaddr2
);

3682 i‡(
›code
[
i
]==0x39||opcode[i]==0x3D) {

3683 
	`do_éb_w_bønch
(
m≠
,
c
,
c⁄°m≠
[
i
][
s
]+
off£t
,&
jaddr2
);

3686 i‡(
›code
[
i
]==0x31) {

3690 #ifde‡
HOST_IMM_ADDR32


3691 if(
c
Ë
	`emô_ªadw‹d_éb
(
c⁄°m≠
[
i
][
s
]+
off£t
,
m≠
,
é
);

3694 
	`emô_ªadw‹d_ödexed_éb
(0,
off£t
||
c
||
s
<0?
é
:s,
m≠
,tl);

3695 
ty≥
=
LOADW_STUB
;

3697 i‡(
›code
[
i
]==0x35) {

3698 
	`as£π
(
th
>=0);

3703 #ifde‡
HOST_IMM_ADDR32


3704 if(
c
Ë
	`emô_ªaddw‹d_éb
(
c⁄°m≠
[
i
][
s
]+
off£t
,
m≠
,
th
,
é
);

3707 
	`emô_ªaddw‹d_ödexed_éb
(0,
off£t
||
c
||
s
<0?
é
:s,
m≠
,
th
,tl);

3708 
ty≥
=
LOADD_STUB
;

3710 i‡(
›code
[
i
]==0x39) {

3712 
	`emô_wrôew‹d_ödexed_éb
(
é
,0,
off£t
||
c
||
s
<0?
ãmp
:s,
m≠
,temp);

3713 
ty≥
=
STOREW_STUB
;

3715 i‡(
›code
[
i
]==0x3D) {

3716 
	`as£π
(
th
>=0);

3719 
	`emô_wrôedw‹d_ödexed_éb
(
th
,
é
,0,
off£t
||
c
||
s
<0?
ãmp
:s,
m≠
,temp);

3720 
ty≥
=
STORED_STUB
;

3722 if(!
usög_éb
&&!(
i_ªgs
->
waswrôãn
&(1<<
rs1
[
i
]))&&!(
√w_dy«ªc_hacks
&
NDHACK_NO_SMC_CHECK
)) {

3723 i‡(
›code
[
i
]==0x39||opcode[i]==0x3D) {

3724 #i‚de‡
DESTRUCTIVE_SHIFT


3725 
ãmp
=
off£t
||
c
||
s
<0?
¨
:s;

3727 #i‡
	`deföed
(
HOST_IMM8
)

3728 
ú
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
INVCP
);

3729 
	`as£π
(
ú
>=0);

3730 
	`emô_cmpmem_ödexed§12_ªg
(
ú
,
ãmp
,1);

3732 
	`emô_cmpmem_ödexed§12_imm
(()
övÆid_code
,
ãmp
,1);

3734 #i‡
	`deföed
(
HAVE_CONDITIONAL_CALL
Ë&& !deföed(
DESTRUCTIVE_SHIFT
)

3735 
	`emô_ˇŒ√
(
övÆid©e_addr_ªg
[
ãmp
]);

3737 
jaddr3
=()
out
;

3738 
	`emô_j√
(0);

3739 
	`add_°ub
(
INVCODE_STUB
,
jaddr3
,()
out
,
ªgli°
|(1<<
HOST_CCREG
),
ãmp
,0,0,0);

3743 if(
jaddr2
Ë
	`add_°ub
(
ty≥
,jaddr2,()
out
,
i
,
off£t
||
c
||
s
<0?
¨
:s,()
i_ªgs
,
cˇdj
[i],
ªgli°
);

3744 i‡(
›code
[
i
]==0x31) {

3745 
	`emô_wrôew‹d_ödexed
(
é
,0,
ãmp
);

3747 i‡(
›code
[
i
]==0x35) {

3748 
	`emô_wrôew‹d_ödexed
(
th
,4,
ãmp
);

3749 
	`emô_wrôew‹d_ödexed
(
é
,0,
ãmp
);

3765 
	`c›1_unußbÀ
(
i
, 
i_ªgs
);

3767 
	}
}

3769 
	$c2ls_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

3771 
s
,
é
;

3772 
¨
;

3773 
off£t
;

3774 
memèrgë
=0,
c
=0;

3775 
jaddr2
=0,
jaddr3
,
ty≥
;

3776 
agr
=
AGEN1
+(
i
&1);

3777 
Á°io_ªg_ovîride
=0;

3778 
u_öt
 
hr
,
ªgli°
=0;

3779 
u_öt
 
c›r
=(
sour˚
[
i
]>>16)&0x1f;

3780 
s
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

3781 
é
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
FTEMP
);

3782 
off£t
=
imm
[
i
];

3783 
	`as£π
(
rs1
[
i
]>0);

3784 
	`as£π
(
é
>=0);

3785 
	`as£π
(!
usög_éb
);

3787 
hr
=0;hr<
HOST_REGS
;hr++) {

3788 if(
i_ªgs
->
ªgm≠
[
hr
]>=0Ë
ªgli°
|=1<<hr;

3790 if(
i_ªgs
->
ªgm≠
[
HOST_CCREG
]==
CCREG
)

3791 
ªgli°
&=~(1<<
HOST_CCREG
);

3794 i‡(
›code
[
i
]==0x3a) {

3795 
¨
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
agr
);

3796 if(
¨
<0Ë¨=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,-1);

3797 
ªgli°
|=1<<
¨
;

3799 
¨
=
é
;

3801 if(
s
>=0Ë
c
=(
i_ªgs
->
wasc⁄°
>>s)&1;

3802 
memèrgë
=
c
&&(((sig√d )(
c⁄°m≠
[
i
][
s
]+
off£t
))<(sig√d )0x80000000+
RAM_SIZE
);

3803 i‡(!
off£t
&&!
c
&&
s
>=0Ë
¨
=s;

3804 
	`as£π
(
¨
>=0);

3806 i‡(
›code
[
i
]==0x3a) {

3807 
	`c›2_gë_dªg
(
c›r
,
é
,
HOST_TEMPREG
);

3808 
ty≥
=
STOREW_STUB
;

3811 
ty≥
=
LOADW_STUB
;

3813 if(
c
&&!
memèrgë
) {

3814 
jaddr2
=()
out
;

3815 
	`emô_jmp
(0);

3818 if(!
c
) {

3819 
jaddr2
=
	`emô_Á°∑th_cmp_jump
(
i
,
¨
,&
Á°io_ªg_ovîride
);

3821 if(
øm_off£t
&&
memèrgë
) {

3822 
	`emô_addimm
(
¨
,
øm_off£t
,
HOST_TEMPREG
);

3823 
Á°io_ªg_ovîride
=
HOST_TEMPREG
;

3825 i‡(
›code
[
i
]==0x32) {

3826 #ifde‡
HOST_IMM_ADDR32


3827 if(
c
Ë
	`emô_ªadw‹d_éb
(
c⁄°m≠
[
i
][
s
]+
off£t
,-1,
é
);

3830 
a
=
¨
;

3831 if(
Á°io_ªg_ovîride
Ë
a
=fastio_reg_override;

3832 
	`emô_ªadw‹d_ödexed
(0,
a
,
é
);

3834 i‡(
›code
[
i
]==0x3a) {

3835 #ifde‡
DESTRUCTIVE_SHIFT


3836 if(!
off£t
&&!
c
&&
s
>=0Ë
	`emô_mov
(s,
¨
);

3838 
a
=
¨
;

3839 if(
Á°io_ªg_ovîride
Ë
a
=fastio_reg_override;

3840 
	`emô_wrôew‹d_ödexed
(
é
,0,
a
);

3843 if(
jaddr2
)

3844 
	`add_°ub
(
ty≥
,
jaddr2
,()
out
,
i
,
¨
,()
i_ªgs
,
cˇdj
[i],
ªgli°
);

3845 if(
›code
[
i
]==0x3a)

3846 if(!(
i_ªgs
->
waswrôãn
&(1<<
rs1
[
i
]))&&!(
√w_dy«ªc_hacks
&
NDHACK_NO_SMC_CHECK
)) {

3847 #i‡
	`deföed
(
HOST_IMM8
)

3848 
ú
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
INVCP
);

3849 
	`as£π
(
ú
>=0);

3850 
	`emô_cmpmem_ödexed§12_ªg
(
ú
,
¨
,1);

3852 
	`emô_cmpmem_ödexed§12_imm
(()
övÆid_code
,
¨
,1);

3854 #i‡
	`deföed
(
HAVE_CONDITIONAL_CALL
Ë&& !deföed(
DESTRUCTIVE_SHIFT
)

3855 
	`emô_ˇŒ√
(
övÆid©e_addr_ªg
[
¨
]);

3857 
jaddr3
=()
out
;

3858 
	`emô_j√
(0);

3859 
	`add_°ub
(
INVCODE_STUB
,
jaddr3
,()
out
,
ªgli°
|(1<<
HOST_CCREG
),
¨
,0,0,0);

3862 i‡(
›code
[
i
]==0x32) {

3863 
	`c›2_put_dªg
(
c›r
,
é
,
HOST_TEMPREG
);

3865 
	}
}

3867 #i‚de‡
mu…div_as£mbÀ


3868 
	$mu…div_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

3870 
	`¥ötf
("Need multdiv_assemble forÅhisárchitecture.\n");

3871 
	`exô
(1);

3872 
	}
}

3875 
	$mov_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

3879 if(
π1
[
i
]) {

3880 sig√d 
sh
,
¶
,
th
,
é
;

3881 
th
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]|64);

3882 
é
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

3884 if(
é
>=0) {

3885 
sh
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]|64);

3886 
¶
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

3887 if(
¶
>=0Ë
	`emô_mov
(¶,
é
);

3888 
	`emô_lﬂdªg
(
rs1
[
i
],
é
);

3889 if(
th
>=0) {

3890 if(
sh
>=0Ë
	`emô_mov
(sh,
th
);

3891 
	`emô_lﬂdªg
(
rs1
[
i
]|64,
th
);

3895 
	}
}

3897 #i‚de‡
fc⁄v_as£mbÀ


3898 
	$fc⁄v_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

3900 
	`¥ötf
("Need fconv_assemble forÅhisárchitecture.\n");

3901 
	`exô
(1);

3902 
	}
}

3906 
	$Êﬂt_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

3908 
	`¥ötf
("Need float_assemble forÅhisárchitecture.\n");

3909 
	`exô
(1);

3910 
	}
}

3913 
	$sysˇŒ_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

3915 sig√d 
c¸eg
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
CCREG
);

3916 
	`as£π
(
c¸eg
==
HOST_CCREG
);

3917 
	`as£π
(!
is_dñay¶Ÿ
);

3918 
	`emô_movimm
(
°¨t
+
i
*4,
EAX
);

3919 
	`emô_addimm
(
HOST_CCREG
,
	`CLOCK_ADJUST
(
cˇdj
[
i
]),HOST_CCREG);

3920 
	`emô_jmp
(()
jump_sysˇŒ_hÀ
);

3921 
	}
}

3923 
	$hÀˇŒ_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

3925 sig√d 
c¸eg
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
CCREG
);

3926 
	`as£π
(
c¸eg
==
HOST_CCREG
);

3927 
	`as£π
(!
is_dñay¶Ÿ
);

3928 
	`emô_movimm
(
°¨t
+
i
*4+4,0);

3929 
	`emô_movimm
(()
psxHLEt
[
sour˚
[
i
]&7],1);

3930 
	`emô_addimm
(
HOST_CCREG
,
	`CLOCK_ADJUST
(
cˇdj
[
i
]),HOST_CCREG);

3931 
	`emô_jmp
(()
jump_hÀˇŒ
);

3932 
	}
}

3934 
	$ötˇŒ_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

3936 sig√d 
c¸eg
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
CCREG
);

3937 
	`as£π
(
c¸eg
==
HOST_CCREG
);

3938 
	`as£π
(!
is_dñay¶Ÿ
);

3939 
	`emô_movimm
(
°¨t
+
i
*4,0);

3940 
	`emô_addimm
(
HOST_CCREG
,
	`CLOCK_ADJUST
(
cˇdj
[
i
]),HOST_CCREG);

3941 
	`emô_jmp
(()
jump_ötˇŒ
);

3942 
	}
}

3944 
	$ds_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

3946 
	`•ecuœã_ªgi°î_vÆues
(
i
);

3947 
is_dñay¶Ÿ
=1;

3948 
ôy≥
[
i
]) {

3949 
ALU
:

3950 
	`Æu_as£mbÀ
(
i
,
i_ªgs
);;

3951 
IMM16
:

3952 
	`imm16_as£mbÀ
(
i
,
i_ªgs
);;

3953 
SHIFT
:

3954 
	`shi·_as£mbÀ
(
i
,
i_ªgs
);;

3955 
SHIFTIMM
:

3956 
	`shi·imm_as£mbÀ
(
i
,
i_ªgs
);;

3957 
LOAD
:

3958 
	`lﬂd_as£mbÀ
(
i
,
i_ªgs
);;

3959 
LOADLR
:

3960 
	`lﬂdÃ_as£mbÀ
(
i
,
i_ªgs
);;

3961 
STORE
:

3962 
	`°‹e_as£mbÀ
(
i
,
i_ªgs
);;

3963 
STORELR
:

3964 
	`°‹ñr_as£mbÀ
(
i
,
i_ªgs
);;

3965 
COP0
:

3966 
	`c›0_as£mbÀ
(
i
,
i_ªgs
);;

3967 
COP1
:

3968 
	`c›1_as£mbÀ
(
i
,
i_ªgs
);;

3969 
C1LS
:

3970 
	`c1ls_as£mbÀ
(
i
,
i_ªgs
);;

3971 
COP2
:

3972 
	`c›2_as£mbÀ
(
i
,
i_ªgs
);;

3973 
C2LS
:

3974 
	`c2ls_as£mbÀ
(
i
,
i_ªgs
);;

3975 
C2OP
:

3976 
	`c2›_as£mbÀ
(
i
,
i_ªgs
);;

3977 
FCONV
:

3978 
	`fc⁄v_as£mbÀ
(
i
,
i_ªgs
);;

3979 
FLOAT
:

3980 
	`Êﬂt_as£mbÀ
(
i
,
i_ªgs
);;

3981 
FCOMP
:

3982 
	`fcomp_as£mbÀ
(
i
,
i_ªgs
);;

3983 
MULTDIV
:

3984 
	`mu…div_as£mbÀ
(
i
,
i_ªgs
);;

3985 
MOV
:

3986 
	`mov_as£mbÀ
(
i
,
i_ªgs
);;

3987 
SYSCALL
:

3988 
HLECALL
:

3989 
INTCALL
:

3990 
SPAN
:

3991 
UJUMP
:

3992 
RJUMP
:

3993 
CJUMP
:

3994 
SJUMP
:

3995 
FJUMP
:

3996 
	`SysPrötf
("Jump inÅhe delay slot. This isÖrobablyá bug.\n");

3998 
is_dñay¶Ÿ
=0;

3999 
	}
}

4002 
	$öã∫Æ_bønch
(
uöt64_t
 
i_is32
,
addr
)

4004 if(
addr
&1)  0;

4005 if(
addr
>=
°¨t
 &&áddr<°¨t+
¶í
*4-4)

4007 
t
=(
addr
-
°¨t
)>>2;

4017 #i‚de‡
FORCE32


4018 if(
ªquúes_32bô
[
t
]&~
i_is32
)  0;

4024 
	}
}

4026 #i‚de‡
wb_övÆid©e


4027 
	$wb_övÆid©e
(sig√d 
¥e
[],sig√d 
íåy
[],
uöt64_t
 
dúty
,uöt64_à
is32
,

4028 
uöt64_t
 
u
,uöt64_à
uu
)

4030 
hr
;

4031 
hr
=0;hr<
HOST_REGS
;hr++) {

4032 if(
hr
!=
EXCLUDE_REG
) {

4033 if(
¥e
[
hr
]!=
íåy
[hr]) {

4034 if(
¥e
[
hr
]>=0) {

4035 if((
dúty
>>
hr
)&1) {

4036 if(
	`gë_ªg
(
íåy
,
¥e
[
hr
])<0) {

4037 if(
¥e
[
hr
]<64) {

4038 if(!((
u
>>
¥e
[
hr
])&1)) {

4039 
	`emô_°‹îeg
(
¥e
[
hr
],hr);

4040 if–((
is32
>>
¥e
[
hr
])&1Ë&& !((
uu
>>pre[hr])&1) ) {

4041 
	`emô_ßrimm
(
hr
,31,hr);

4042 
	`emô_°‹îeg
(
¥e
[
hr
]|64,hr);

4046 if(!((
uu
>>(
¥e
[
hr
]&63))&1Ë&& !((
is32
>>(pre[hr]&63))&1)) {

4047 
	`emô_°‹îeg
(
¥e
[
hr
],hr);

4057 
hr
=0;hr<
HOST_REGS
;hr++) {

4058 if(
hr
!=
EXCLUDE_REG
) {

4059 if(
¥e
[
hr
]!=
íåy
[hr]) {

4060 if(
¥e
[
hr
]>=0&&’ª[hr]&63)<
TEMPREG
) {

4061 
ƒ
;

4062 if((
ƒ
=
	`gë_ªg
(
íåy
,
¥e
[
hr
]))>=0) {

4063 
	`emô_mov
(
hr
,
ƒ
);

4069 
	}
}

4075 
	$lﬂd_ªgs
(sig√d 
íåy
[],sig√d 
ªgm≠
[],
is32
,
rs1
,
rs2
)

4077 
hr
;

4079 
hr
=0;hr<
HOST_REGS
;hr++) {

4080 if(
hr
!=
EXCLUDE_REG
&&
ªgm≠
[hr]>=0) {

4081 if(
íåy
[
hr
]!=
ªgm≠
[hr]) {

4082 if(
ªgm≠
[
hr
]==
rs1
||ªgm≠[hr]==
rs2
)

4084 if(
ªgm≠
[
hr
]==0) {

4085 
	`emô_zî‹eg
(
hr
);

4089 
	`emô_lﬂdªg
(
ªgm≠
[
hr
],hr);

4096 
hr
=0;hr<
HOST_REGS
;hr++) {

4097 if(
hr
!=
EXCLUDE_REG
&&
ªgm≠
[hr]>=0) {

4098 if(
íåy
[
hr
]!=
ªgm≠
[hr]) {

4099 if(
ªgm≠
[
hr
]-64==
rs1
||ªgm≠[hr]-64==
rs2
)

4101 
	`as£π
(
ªgm≠
[
hr
]!=64);

4102 if((
is32
>>(
ªgm≠
[
hr
]&63))&1) {

4103 
Ã
=
	`gë_ªg
(
ªgm≠
,ªgm≠[
hr
]-64);

4104 if(
Ã
>=0)

4105 
	`emô_ßrimm
(
Ã
,31,
hr
);

4107 
	`emô_lﬂdªg
(
ªgm≠
[
hr
],hr);

4111 
	`emô_lﬂdªg
(
ªgm≠
[
hr
],hr);

4117 
	}
}

4121 
	$lo›_¥ñﬂd
(sig√d 
¥e
[],sig√d 
íåy
[])

4123 
hr
;

4124 
hr
=0;hr<
HOST_REGS
;hr++) {

4125 if(
hr
!=
EXCLUDE_REG
) {

4126 if(
¥e
[
hr
]!=
íåy
[hr]) {

4127 if(
íåy
[
hr
]>=0) {

4128 if(
	`gë_ªg
(
¥e
,
íåy
[
hr
])<0) {

4129 
	`as£m_debug
("loopÖreload:\n");

4131 if(
íåy
[
hr
]==0) {

4132 
	`emô_zî‹eg
(
hr
);

4134 if(
íåy
[
hr
]<
TEMPREG
)

4136 
	`emô_lﬂdªg
(
íåy
[
hr
],hr);

4138 if(
íåy
[
hr
]-64<
TEMPREG
)

4140 
	`emô_lﬂdªg
(
íåy
[
hr
],hr);

4147 
	}
}

4151 
	$addªss_gíî©i⁄
(
i
,
ªg°©
 *
i_ªgs
,sig√d 
íåy
[])

4153 if(
ôy≥
[
i
]==
LOAD
||ôy≥[i]==
LOADLR
||ôy≥[i]==
STORE
||ôy≥[i]==
STORELR
||ôy≥[i]==
C1LS
||ôy≥[i]==
C2LS
) {

4154 
ø
=-1;

4155 
agr
=
AGEN1
+(
i
&1);

4156 
mgr
=
MGEN1
+(
i
&1);

4157 if(
ôy≥
[
i
]==
LOAD
) {

4158 
ø
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

4159 if(
ø
<0Ëø=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,-1);

4160 
	`as£π
(
ø
>=0);

4162 if(
ôy≥
[
i
]==
LOADLR
) {

4163 
ø
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
FTEMP
);

4165 if(
ôy≥
[
i
]==
STORE
||ôy≥[i]==
STORELR
) {

4166 
ø
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
agr
);

4167 if(
ø
<0Ëø=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,-1);

4169 if(
ôy≥
[
i
]==
C1LS
||ôy≥[i]==
C2LS
) {

4170 i‡((
›code
[
i
]&0x3b)==0x31||(opcode[i]&0x3b)==0x32)

4171 
ø
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
FTEMP
);

4173 
ø
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
agr
);

4174 if(
ø
<0Ëø=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,-1);

4177 
rs
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

4178 
rm
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
TLREG
);

4179 if(
ø
>=0) {

4180 
off£t
=
imm
[
i
];

4181 
c
=(
i_ªgs
->
wasc⁄°
>>
rs
)&1;

4182 if(
rs1
[
i
]==0) {

4189 if(!
íåy
||íåy[
ø
]!=
agr
) {

4190 i‡(
›code
[
i
]==0x22||opcode[i]==0x26) {

4191 
	`emô_movimm
(
off£t
&0xFFFFFFFC,
ø
);

4192 }i‡(
›code
[
i
]==0x1a||opcode[i]==0x1b) {

4193 
	`emô_movimm
(
off£t
&0xFFFFFFF8,
ø
);

4195 
	`emô_movimm
(
off£t
,
ø
);

4199 if(
rs
<0) {

4200 if(!
íåy
||íåy[
ø
]!=
rs1
[
i
])

4201 
	`emô_lﬂdªg
(
rs1
[
i
],
ø
);

4205 if(
c
) {

4206 #i‚de‡
DISABLE_TLB


4207 if(
rm
>=0) {

4208 if(!
íåy
||íåy[
rm
]!=
mgr
) {

4209 if(
ôy≥
[
i
]==
STORE
||ôy≥[i]==
STORELR
||(
›code
[i]&0x3b)==0x39||(opcode[i]&0x3b)==0x3a) {

4212 if(()(
c⁄°m≠
[
i
][
rs
]+
off£t
)>=0xC0000000 ||

4213 ()(
c⁄°m≠
[
i
][
rs
]+
off£t
)<0x80000000+
RAM_SIZE
 )

4214 
	`gíî©e_m≠_c⁄°
(
c⁄°m≠
[
i
][
rs
]+
off£t
,
rm
);

4216 if((sig√d )(
c⁄°m≠
[
i
][
rs
]+
off£t
)>=(signed )0xC0000000)

4217 
	`gíî©e_m≠_c⁄°
(
c⁄°m≠
[
i
][
rs
]+
off£t
,
rm
);

4222 if(
rs1
[
i
]!=
π1
[i]||
ôy≥
[i]!=
LOAD
) {

4223 if(!
íåy
||íåy[
ø
]!=
agr
) {

4224 i‡(
›code
[
i
]==0x22||opcode[i]==0x26) {

4225 
	`emô_movimm
((
c⁄°m≠
[
i
][
rs
]+
off£t
)&0xFFFFFFFC,
ø
);

4226 }i‡(
›code
[
i
]==0x1a||opcode[i]==0x1b) {

4227 
	`emô_movimm
((
c⁄°m≠
[
i
][
rs
]+
off£t
)&0xFFFFFFF8,
ø
);

4229 #ifde‡
HOST_IMM_ADDR32


4230 if((
ôy≥
[
i
]!=
LOAD
&&(
›code
[i]&0x3b)!=0x31&&(opcode[i]&0x3b)!=0x32) ||

4231 (
usög_éb
&&((sig√d )
c⁄°m≠
[
i
][
rs
]+
off£t
)>=(signed )0xC0000000))

4233 
	`emô_movimm
(
c⁄°m≠
[
i
][
rs
]+
off£t
,
ø
);

4234 
ªgs
[
i
].
lﬂdedc⁄°
|=1<<
ø
;

4239 if(
off£t
&&!
c
&&
rs1
[
i
]) {

4240 if(
rs
>=0) {

4241 
	`emô_addimm
(
rs
,
off£t
,
ø
);

4243 
	`emô_addimm
(
ø
,
off£t
,ra);

4249 if(
ôy≥
[
i
+1]==
LOAD
||ôy≥[i+1]==
LOADLR
||ôy≥[i+1]==
STORE
||ôy≥[i+1]==
STORELR
||ôy≥[i+1]==
C1LS
||ôy≥[i+1]==
C2LS
) {

4250 
agr
,
ø
;

4251 #i‡!
	`deföed
(
HOST_IMM_ADDR32
Ë&& !deföed(
DISABLE_TLB
)

4253 
agr
=
MGEN1
+((
i
+1)&1);

4254 
ø
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
agr
);

4255 if(
ø
>=0) {

4256 
rs
=
	`gë_ªg
(
ªgs
[
i
+1].
ªgm≠
,
rs1
[i+1]);

4257 
off£t
=
imm
[
i
+1];

4258 
c
=(
ªgs
[
i
+1].
wasc⁄°
>>
rs
)&1;

4259 if(
c
) {

4260 if(
ôy≥
[
i
+1]==
STORE
||ôy≥[i+1]==
STORELR


4261 ||(
›code
[
i
+1]&0x3b)==0x39||(opcode[i+1]&0x3b)==0x3a) {

4264 if(()(
c⁄°m≠
[
i
+1][
rs
]+
off£t
)>=0xC0000000 ||

4265 ()(
c⁄°m≠
[
i
+1][
rs
]+
off£t
)<0x80000000+
RAM_SIZE
 )

4266 
	`gíî©e_m≠_c⁄°
(
c⁄°m≠
[
i
+1][
rs
]+
off£t
,
ø
);

4268 if((sig√d )(
c⁄°m≠
[
i
+1][
rs
]+
off£t
)>=(signed )0xC0000000)

4269 
	`gíî©e_m≠_c⁄°
(
c⁄°m≠
[
i
+1][
rs
]+
off£t
,
ø
);

4278 
agr
=
AGEN1
+((
i
+1)&1);

4279 
ø
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
agr
);

4280 if(
ø
>=0) {

4281 
rs
=
	`gë_ªg
(
ªgs
[
i
+1].
ªgm≠
,
rs1
[i+1]);

4282 
off£t
=
imm
[
i
+1];

4283 
c
=(
ªgs
[
i
+1].
wasc⁄°
>>
rs
)&1;

4284 if(
c
&&(
rs1
[
i
+1]!=
π1
[i+1]||
ôy≥
[i+1]!=
LOAD
)) {

4285 i‡(
›code
[
i
+1]==0x22||opcode[i+1]==0x26) {

4286 
	`emô_movimm
((
c⁄°m≠
[
i
+1][
rs
]+
off£t
)&0xFFFFFFFC,
ø
);

4287 }i‡(
›code
[
i
+1]==0x1a||opcode[i+1]==0x1b) {

4288 
	`emô_movimm
((
c⁄°m≠
[
i
+1][
rs
]+
off£t
)&0xFFFFFFF8,
ø
);

4290 #ifde‡
HOST_IMM_ADDR32


4291 if((
ôy≥
[
i
+1]!=
LOAD
&&(
›code
[i+1]&0x3b)!=0x31&&(opcode[i+1]&0x3b)!=0x32) ||

4292 (
usög_éb
&&((sig√d )
c⁄°m≠
[
i
+1][
rs
]+
off£t
)>=(signed )0xC0000000))

4294 
	`emô_movimm
(
c⁄°m≠
[
i
+1][
rs
]+
off£t
,
ø
);

4295 
ªgs
[
i
+1].
lﬂdedc⁄°
|=1<<
ø
;

4298 if(
rs1
[
i
+1]==0) {

4300 i‡(
›code
[
i
+1]==0x22||opcode[i+1]==0x26) {

4301 
	`emô_movimm
(
off£t
&0xFFFFFFFC,
ø
);

4302 }i‡(
›code
[
i
+1]==0x1a||opcode[i+1]==0x1b) {

4303 
	`emô_movimm
(
off£t
&0xFFFFFFF8,
ø
);

4305 
	`emô_movimm
(
off£t
,
ø
);

4310 
	}
}

4312 
	$gë_föÆ_vÆue
(
hr
, 
i
, *
vÆue
)

4314 
ªg
=
ªgs
[
i
].
ªgm≠
[
hr
];

4315 
i
<
¶í
-1) {

4316 if(
ªgs
[
i
+1].
ªgm≠
[
hr
]!=
ªg
) ;

4317 if(!((
ªgs
[
i
+1].
isc⁄°
>>
hr
)&1)) ;

4318 if(
bt
[
i
+1]) ;

4319 
i
++;

4321 if(
i
<
¶í
-1) {

4322 if(
ôy≥
[
i
]==
UJUMP
||ôy≥[i]==
RJUMP
||ôy≥[i]==
CJUMP
||ôy≥[i]==
SJUMP
) {

4323 *
vÆue
=
c⁄°m≠
[
i
][
hr
];

4326 if(!
bt
[
i
+1]) {

4327 if(
ôy≥
[
i
+1]==
UJUMP
||ôy≥[i+1]==
RJUMP
||ôy≥[i+1]==
CJUMP
||ôy≥[i+1]==
SJUMP
) {

4329 if(
ôy≥
[
i
+2]==
LOAD
&&
rs1
[i+2]==
ªg
&&
π1
[i+2]=Ùeg&&((
ªgs
[i+1].
wasc⁄°
>>
hr
)&1))

4331 #ifde‡
HOST_IMM_ADDR32


4332 if(!
usög_éb
||((sig√d )
c⁄°m≠
[
i
][
hr
]+
imm
[i+2])<(signed )0xC0000000)  0;

4335 *
vÆue
=
c⁄°m≠
[
i
][
hr
]+
imm
[i+2];

4339 if(
ôy≥
[
i
+1]==
LOAD
&&
rs1
[i+1]==
ªg
&&
π1
[i+1]==reg)

4341 #ifde‡
HOST_IMM_ADDR32


4342 if(!
usög_éb
||((sig√d )
c⁄°m≠
[
i
][
hr
]+
imm
[i+1])<(signed )0xC0000000)  0;

4345 *
vÆue
=
c⁄°m≠
[
i
][
hr
]+
imm
[i+1];

4351 *
vÆue
=
c⁄°m≠
[
i
][
hr
];

4353 if(
i
==
¶í
-1)  1;

4354 if(
ªg
<64) {

4355  !((
u¬ìded_ªg
[
i
+1]>>
ªg
)&1);

4357  !((
u¬ìded_ªg_uµî
[
i
+1]>>
ªg
)&1);

4359 
	}
}

4362 
	$lﬂd_c⁄°s
(sig√d 
¥e
[],sig√d 
ªgm≠
[],
is32
,
i
)

4364 
hr
,
hr2
;

4366 if(
i
==0||
bt
[i])

4367 
ªgs
[
i
].
lﬂdedc⁄°
=0;

4369 
hr
=0;hr<
HOST_REGS
;hr++) {

4370 if(
hr
!=
EXCLUDE_REG
&&
ªgm≠
[hr]>=0&&((
ªgs
[
i
-1].
isc⁄°
>>hr)&1)&&
¥e
[hr]==regmap[hr]

4371 &&
ªgm≠
[
hr
]==
ªgs
[
i
-1].ªgm≠[hr]&&(‘egs[i-1].
lﬂdedc⁄°
>>hr)&1))

4373 
ªgs
[
i
].
lﬂdedc⁄°
|=1<<
hr
;

4378 
hr
=0;hr<
HOST_REGS
;hr++) {

4379 if(
hr
!=
EXCLUDE_REG
&&
ªgm≠
[hr]>=0) {

4381 if(!((
ªgs
[
i
].
lﬂdedc⁄°
>>
hr
)&1)) {

4382 if(((
ªgs
[
i
].
isc⁄°
>>
hr
)&1)&&
ªgm≠
[hr]<64&&regmap[hr]>0) {

4383 
vÆue
,
simû¨
=0;

4384 if(
	`gë_föÆ_vÆue
(
hr
,
i
,&
vÆue
)) {

4386 
hr2
=0;hr2<
HOST_REGS
;hr2++) {

4387 if(
hr2
!=
EXCLUDE_REG
&&((
ªgs
[
i
].
lﬂdedc⁄°
>>hr2)&1)) {

4388 if(
	`is_simû¨_vÆue
(
vÆue
,
c⁄°m≠
[
i
][
hr2
])) {

4389 
simû¨
=1;

4394 if(
simû¨
) {

4395 
vÆue2
;

4396 if(
	`gë_föÆ_vÆue
(
hr2
,
i
,&
vÆue2
))

4397 
	`emô_movimm_‰om
(
vÆue2
,
hr2
,
vÆue
,
hr
);

4399 
	`emô_movimm
(
vÆue
,
hr
);

4401 if(
vÆue
==0) {

4402 
	`emô_zî‹eg
(
hr
);

4405 
	`emô_movimm
(
vÆue
,
hr
);

4408 
ªgs
[
i
].
lﬂdedc⁄°
|=1<<
hr
;

4414 
hr
=0;hr<
HOST_REGS
;hr++) {

4415 if(
hr
!=
EXCLUDE_REG
&&
ªgm≠
[hr]>=0) {

4417 if(
i
==0||!((
ªgs
[i-1].
isc⁄°
>>
hr
)&1)||
¥e
[hr]!=
ªgm≠
[hr]||
bt
[i]) {

4418 if(((
ªgs
[
i
].
isc⁄°
>>
hr
)&1)&&
ªgm≠
[hr]>64) {

4419 if((
is32
>>(
ªgm≠
[
hr
]&63))&1) {

4420 
Ã
=
	`gë_ªg
(
ªgm≠
,ªgm≠[
hr
]-64);

4421 
	`as£π
(
Ã
>=0);

4422 
	`emô_ßrimm
(
Ã
,31,
hr
);

4426 
vÆue
;

4427 if(
	`gë_föÆ_vÆue
(
hr
,
i
,&
vÆue
)) {

4428 if(
vÆue
==0) {

4429 
	`emô_zî‹eg
(
hr
);

4432 
	`emô_movimm
(
vÆue
,
hr
);

4440 
	}
}

4441 
	$lﬂd_Æl_c⁄°s
(sig√d 
ªgm≠
[],
is32
,
u_öt
 
dúty
,
i
)

4443 
hr
;

4445 
hr
=0;hr<
HOST_REGS
;hr++) {

4446 if(
hr
!=
EXCLUDE_REG
&&
ªgm≠
[hr]>=0&&((
dúty
>>hr)&1)) {

4447 if(((
ªgs
[
i
].
isc⁄°
>>
hr
)&1)&&
ªgm≠
[hr]<64&&regmap[hr]>0) {

4448 
vÆue
=
c⁄°m≠
[
i
][
hr
];

4449 if(
vÆue
==0) {

4450 
	`emô_zî‹eg
(
hr
);

4453 
	`emô_movimm
(
vÆue
,
hr
);

4459 
hr
=0;hr<
HOST_REGS
;hr++) {

4460 if(
hr
!=
EXCLUDE_REG
&&
ªgm≠
[hr]>=0&&((
dúty
>>hr)&1)) {

4461 if(((
ªgs
[
i
].
isc⁄°
>>
hr
)&1)&&
ªgm≠
[hr]>64) {

4462 if((
is32
>>(
ªgm≠
[
hr
]&63))&1) {

4463 
Ã
=
	`gë_ªg
(
ªgm≠
,ªgm≠[
hr
]-64);

4464 
	`as£π
(
Ã
>=0);

4465 
	`emô_ßrimm
(
Ã
,31,
hr
);

4469 
vÆue
=
c⁄°m≠
[
i
][
hr
];

4470 if(
vÆue
==0) {

4471 
	`emô_zî‹eg
(
hr
);

4474 
	`emô_movimm
(
vÆue
,
hr
);

4480 
	}
}

4483 
	$wb_dútys
(sig√d 
i_ªgm≠
[],
uöt64_t
 
i_is32
,uöt64_à
i_dúty
)

4485 
hr
;

4486 
hr
=0;hr<
HOST_REGS
;hr++) {

4487 if(
hr
!=
EXCLUDE_REG
) {

4488 if(
i_ªgm≠
[
hr
]>0) {

4489 if(
i_ªgm≠
[
hr
]!=
CCREG
) {

4490 if((
i_dúty
>>
hr
)&1) {

4491 if(
i_ªgm≠
[
hr
]<64) {

4492 
	`emô_°‹îeg
(
i_ªgm≠
[
hr
],hr);

4493 #i‚de‡
FORCE32


4494 if–((
i_is32
>>
i_ªgm≠
[
hr
])&1) ) {

4495 #ifde‡
DESTRUCTIVE_WRITEBACK


4496 
	`emô_ßrimm
(
hr
,31,hr);

4497 
	`emô_°‹îeg
(
i_ªgm≠
[
hr
]|64,hr);

4499 
	`emô_ßrimm
(
hr
,31,
HOST_TEMPREG
);

4500 
	`emô_°‹îeg
(
i_ªgm≠
[
hr
]|64,
HOST_TEMPREG
);

4505 if–!((
i_is32
>>(
i_ªgm≠
[
hr
]&63))&1) ) {

4506 
	`emô_°‹îeg
(
i_ªgm≠
[
hr
],hr);

4514 
	}
}

4517 
	$wb_√eded_dútys
(sig√d 
i_ªgm≠
[],
uöt64_t
 
i_is32
,uöt64_à
i_dúty
,
addr
)

4519 
hr
;

4520 
t
=(
addr
-
°¨t
)>>2;

4521 
hr
=0;hr<
HOST_REGS
;hr++) {

4522 if(
hr
!=
EXCLUDE_REG
) {

4523 if(
i_ªgm≠
[
hr
]>0) {

4524 if(
i_ªgm≠
[
hr
]!=
CCREG
) {

4525 if(
i_ªgm≠
[
hr
]==
ªgs
[
t
].
ªgm≠_íåy
[hr] && (‘egs[t].
dúty
>>hr)&1Ë&& !(((
i_is32
&~ªgs[t].
was32
&~
u¬ìded_ªg_uµî
[t])>>(i_regmap[hr]&63))&1)) {

4526 if((
i_dúty
>>
hr
)&1) {

4527 if(
i_ªgm≠
[
hr
]<64) {

4528 
	`emô_°‹îeg
(
i_ªgm≠
[
hr
],hr);

4529 #i‚de‡
FORCE32


4530 if–((
i_is32
>>
i_ªgm≠
[
hr
])&1) ) {

4531 #ifde‡
DESTRUCTIVE_WRITEBACK


4532 
	`emô_ßrimm
(
hr
,31,hr);

4533 
	`emô_°‹îeg
(
i_ªgm≠
[
hr
]|64,hr);

4535 
	`emô_ßrimm
(
hr
,31,
HOST_TEMPREG
);

4536 
	`emô_°‹îeg
(
i_ªgm≠
[
hr
]|64,
HOST_TEMPREG
);

4541 if–!((
i_is32
>>(
i_ªgm≠
[
hr
]&63))&1) ) {

4542 
	`emô_°‹îeg
(
i_ªgm≠
[
hr
],hr);

4551 
	}
}

4554 
	$lﬂd_Æl_ªgs
(sig√d 
i_ªgm≠
[])

4556 
hr
;

4557 
hr
=0;hr<
HOST_REGS
;hr++) {

4558 if(
hr
!=
EXCLUDE_REG
) {

4559 if(
i_ªgm≠
[
hr
]==0) {

4560 
	`emô_zî‹eg
(
hr
);

4563 if(
i_ªgm≠
[
hr
]>0 && (i_ªgm≠[hr]&63)<
TEMPREG
 && i_ªgm≠[hr]!=
CCREG
)

4565 
	`emô_lﬂdªg
(
i_ªgm≠
[
hr
],hr);

4569 
	}
}

4572 
	$lﬂd_√eded_ªgs
(sig√d 
i_ªgm≠
[],sig√d 
√xt_ªgm≠
[])

4574 
hr
;

4575 
hr
=0;hr<
HOST_REGS
;hr++) {

4576 if(
hr
!=
EXCLUDE_REG
) {

4577 if(
	`gë_ªg
(
√xt_ªgm≠
,
i_ªgm≠
[
hr
])>=0) {

4578 if(
i_ªgm≠
[
hr
]==0) {

4579 
	`emô_zî‹eg
(
hr
);

4582 if(
i_ªgm≠
[
hr
]>0 && (i_ªgm≠[hr]&63)<
TEMPREG
 && i_ªgm≠[hr]!=
CCREG
)

4584 
	`emô_lﬂdªg
(
i_ªgm≠
[
hr
],hr);

4589 
	}
}

4592 
	$lﬂd_ªgs_íåy
(
t
)

4594 
hr
;

4595 if(
is_ds
[
t
]Ë
	`emô_addimm
(
HOST_CCREG
,
	`CLOCK_ADJUST
(1),HOST_CCREG);

4596 if(
cˇdj
[
t
]Ë
	`emô_addimm
(
HOST_CCREG
,-
	`CLOCK_ADJUST
(ccadj[t]),HOST_CCREG);

4597 if(
ªgs
[
t
].
ªgm≠_íåy
[
HOST_CCREG
]!=
CCREG
) {

4598 
	`emô_°‹îeg
(
CCREG
,
HOST_CCREG
);

4601 
hr
=0;hr<
HOST_REGS
;hr++) {

4602 if(
ªgs
[
t
].
ªgm≠_íåy
[
hr
]>=0&&ªgs[t].ªgm≠_íåy[hr]<
TEMPREG
) {

4603 if(
ªgs
[
t
].
ªgm≠_íåy
[
hr
]==0) {

4604 
	`emô_zî‹eg
(
hr
);

4606 if(
ªgs
[
t
].
ªgm≠_íåy
[
hr
]!=
CCREG
)

4608 
	`emô_lﬂdªg
(
ªgs
[
t
].
ªgm≠_íåy
[
hr
],hr);

4613 
hr
=0;hr<
HOST_REGS
;hr++) {

4614 if(
ªgs
[
t
].
ªgm≠_íåy
[
hr
]>=64&&ªgs[t].ªgm≠_íåy[hr]<
TEMPREG
+64) {

4615 
	`as£π
(
ªgs
[
t
].
ªgm≠_íåy
[
hr
]!=64);

4616 if((
ªgs
[
t
].
was32
>>‘egs[t].
ªgm≠_íåy
[
hr
]&63))&1) {

4617 
Ã
=
	`gë_ªg
(
ªgs
[
t
].
ªgm≠_íåy
,ªgs[t].ªgm≠_íåy[
hr
]-64);

4618 if(
Ã
<0) {

4619 
	`emô_lﬂdªg
(
ªgs
[
t
].
ªgm≠_íåy
[
hr
],hr);

4623 
	`emô_ßrimm
(
Ã
,31,
hr
);

4628 
	`emô_lﬂdªg
(
ªgs
[
t
].
ªgm≠_íåy
[
hr
],hr);

4632 
	}
}

4635 
	$°‹e_ªgs_bt
(sig√d 
i_ªgm≠
[],
uöt64_t
 
i_is32
,uöt64_à
i_dúty
,
addr
)

4637 if(
	`öã∫Æ_bønch
(
i_is32
,
addr
))

4639 
t
=(
addr
-
°¨t
)>>2;

4640 
hr
;

4641 
hr
=0;hr<
HOST_REGS
;hr++) {

4642 if(
hr
!=
EXCLUDE_REG
) {

4643 if(
i_ªgm≠
[
hr
]>0 && i_ªgm≠[hr]!=
CCREG
) {

4644 if(
i_ªgm≠
[
hr
]!=
ªgs
[
t
].
ªgm≠_íåy
[hr] || !(‘egs[t].
dúty
>>hr)&1Ë|| (((
i_is32
&~ªgs[t].
was32
&~
u¬ìded_ªg_uµî
[t])>>(i_regmap[hr]&63))&1)) {

4645 if((
i_dúty
>>
hr
)&1) {

4646 if(
i_ªgm≠
[
hr
]<64) {

4647 if(!((
u¬ìded_ªg
[
t
]>>
i_ªgm≠
[
hr
])&1)) {

4648 
	`emô_°‹îeg
(
i_ªgm≠
[
hr
],hr);

4649 if–((
i_is32
>>
i_ªgm≠
[
hr
])&1Ë&& !((
u¬ìded_ªg_uµî
[
t
]>>i_regmap[hr])&1) ) {

4650 #ifde‡
DESTRUCTIVE_WRITEBACK


4651 
	`emô_ßrimm
(
hr
,31,hr);

4652 
	`emô_°‹îeg
(
i_ªgm≠
[
hr
]|64,hr);

4654 
	`emô_ßrimm
(
hr
,31,
HOST_TEMPREG
);

4655 
	`emô_°‹îeg
(
i_ªgm≠
[
hr
]|64,
HOST_TEMPREG
);

4660 if–!((
i_is32
>>(
i_ªgm≠
[
hr
]&63))&1Ë&& !((
u¬ìded_ªg_uµî
[
t
]>>(i_regmap[hr]&63))&1) ) {

4661 
	`emô_°‹îeg
(
i_ªgm≠
[
hr
],hr);

4673 
	`wb_dútys
(
i_ªgm≠
,
i_is32
,
i_dúty
);

4675 
	}
}

4678 
	$lﬂd_ªgs_bt
(sig√d 
i_ªgm≠
[],
uöt64_t
 
i_is32
,uöt64_à
i_dúty
,
addr
)

4681 if(
	`öã∫Æ_bønch
(
i_is32
,
addr
))

4683 
t
=(
addr
-
°¨t
)>>2;

4684 
hr
;

4686 if(
i_ªgm≠
[
HOST_CCREG
]!=
CCREG
) {

4687 
	`as£π
(
i_ªgm≠
[
HOST_CCREG
]==-1);

4689 if(
ªgs
[
t
].
ªgm≠_íåy
[
HOST_CCREG
]!=
CCREG
) {

4690 
	`emô_°‹îeg
(
CCREG
,
HOST_CCREG
);

4693 
hr
=0;hr<
HOST_REGS
;hr++) {

4694 if(
hr
!=
EXCLUDE_REG
&&
ªgs
[
t
].
ªgm≠_íåy
[hr]>=0&&ªgs[t].ªgm≠_íåy[hr]<
TEMPREG
) {

4695 #ifde‡
DESTRUCTIVE_WRITEBACK


4696 if(
i_ªgm≠
[
hr
]!=
ªgs
[
t
].
ªgm≠_íåy
[hr] || ( !(‘egs[t].
dúty
>>hr)&1Ë&& ((
i_dúty
>>hr)&1Ë&& (((
i_is32
&~
u¬ìded_ªg_uµî
[t])>>i_ªgm≠[hr])&1ËË|| (((i_is32&~ªgs[t].
was32
&~unneeded_reg_upper[t])>>(i_regmap[hr]&63))&1)) {

4698 if(
i_ªgm≠
[
hr
]!=
ªgs
[
t
].
ªgm≠_íåy
[hr] ) {

4700 if(
ªgs
[
t
].
ªgm≠_íåy
[
hr
]==0) {

4701 
	`emô_zî‹eg
(
hr
);

4703 if(
ªgs
[
t
].
ªgm≠_íåy
[
hr
]!=
CCREG
)

4705 
	`emô_lﬂdªg
(
ªgs
[
t
].
ªgm≠_íåy
[
hr
],hr);

4711 
hr
=0;hr<
HOST_REGS
;hr++) {

4712 if(
hr
!=
EXCLUDE_REG
&&
ªgs
[
t
].
ªgm≠_íåy
[hr]>=64&&ªgs[t].ªgm≠_íåy[hr]<
TEMPREG
+64) {

4713 if(
i_ªgm≠
[
hr
]!=
ªgs
[
t
].
ªgm≠_íåy
[hr]) {

4714 
	`as£π
(
ªgs
[
t
].
ªgm≠_íåy
[
hr
]!=64);

4715 if((
i_is32
>>(
ªgs
[
t
].
ªgm≠_íåy
[
hr
]&63))&1) {

4716 
Ã
=
	`gë_ªg
(
ªgs
[
t
].
ªgm≠_íåy
,ªgs[t].ªgm≠_íåy[
hr
]-64);

4717 if(
Ã
<0) {

4718 
	`emô_lﬂdªg
(
ªgs
[
t
].
ªgm≠_íåy
[
hr
],hr);

4722 
	`emô_ßrimm
(
Ã
,31,
hr
);

4727 
	`emô_lﬂdªg
(
ªgs
[
t
].
ªgm≠_íåy
[
hr
],hr);

4730 if((
i_is32
>>(
ªgs
[
t
].
ªgm≠_íåy
[
hr
]&63))&1) {

4731 
Ã
=
	`gë_ªg
(
ªgs
[
t
].
ªgm≠_íåy
,ªgs[t].ªgm≠_íåy[
hr
]-64);

4732 
	`as£π
(
Ã
>=0);

4733 
	`emô_ßrimm
(
Ã
,31,
hr
);

4738 
	}
}

4740 
	$m©ch_bt
(sig√d 
i_ªgm≠
[],
uöt64_t
 
i_is32
,uöt64_à
i_dúty
,
addr
)

4742 if(
addr
>=
°¨t
 &&áddr<°¨t+
¶í
*4-4)

4744 
t
=(
addr
-
°¨t
)>>2;

4745 
hr
;

4746 if(
ªgs
[
t
].
ªgm≠_íåy
[
HOST_CCREG
]!=
CCREG
)  0;

4747 
hr
=0;hr<
HOST_REGS
;hr++)

4749 if(
hr
!=
EXCLUDE_REG
)

4751 if(
i_ªgm≠
[
hr
]!=
ªgs
[
t
].
ªgm≠_íåy
[hr])

4753 if(
ªgs
[
t
].
ªgm≠_íåy
[
hr
]>=0&&‘egs[t].ªgm≠_íåy[hr]|64)<
TEMPREG
+64)

4758 if((
i_dúty
>>
hr
)&1)

4760 if(
i_ªgm≠
[
hr
]<
TEMPREG
)

4762 if(!((
u¬ìded_ªg
[
t
]>>
i_ªgm≠
[
hr
])&1))

4765 if(
i_ªgm≠
[
hr
]>=64&&i_ªgm≠[hr]<
TEMPREG
+64)

4767 if(!((
u¬ìded_ªg_uµî
[
t
]>>(
i_ªgm≠
[
hr
]&63))&1))

4773 if(
i_ªgm≠
[
hr
]>=0)

4775 if(!((
ªgs
[
t
].
dúty
>>
hr
)&1))

4777 if((
i_dúty
>>
hr
)&1)

4779 if(!((
u¬ìded_ªg
[
t
]>>
i_ªgm≠
[
hr
])&1))

4786 if((((
ªgs
[
t
].
was32
^
i_is32
)&~
u¬ìded_ªg_uµî
[t])>>(
i_ªgm≠
[
hr
]&63))&1)

4795 #i‚de‡
FORCE32


4796 if(
ªquúes_32bô
[
t
]&~
i_is32
)  0;

4801 if(
is_ds
[
t
])  0;

4805 
hr
;

4806 
hr
=0;hr<
HOST_REGS
;hr++)

4808 if(
hr
!=
EXCLUDE_REG
)

4810 if(
i_ªgm≠
[
hr
]>=0)

4812 if(
hr
!=
HOST_CCREG
||
i_ªgm≠
[hr]!=
CCREG
)

4814 if((
i_dúty
>>
hr
)&1)

4824 
	}
}

4827 
	$ds_as£mbÀ_íåy
(
i
)

4829 
t
=(
ba
[
i
]-
°¨t
)>>2;

4830 if(!
ö°r_addr
[
t
]Ëö°r_addr[t]=(
u_öt
)
out
;

4831 
	`as£m_debug
("As£mbÀ dñay slŸáà%x\n",
ba
[
i
]);

4832 
	`as£m_debug
("<->\n");

4833 if(
ªgs
[
t
].
ªgm≠_íåy
[
HOST_CCREG
]==
CCREG
&&ªgs[t].
ªgm≠
[HOST_CCREG]!=CCREG)

4834 
	`wb_ªgi°î
(
CCREG
,
ªgs
[
t
].
ªgm≠_íåy
,ªgs[t].
wasdúty
,ªgs[t].
was32
);

4835 
	`lﬂd_ªgs
(
ªgs
[
t
].
ªgm≠_íåy
,ªgs[t].
ªgm≠
,ªgs[t].
was32
,
rs1
[t],
rs2
[t]);

4836 
	`addªss_gíî©i⁄
(
t
,&
ªgs
[t],ªgs[t].
ªgm≠_íåy
);

4837 if(
ôy≥
[
t
]==
STORE
||ôy≥[t]==
STORELR
||(
›code
[t]&0x3b)==0x39||(opcode[t]&0x3b)==0x3a)

4838 
	`lﬂd_ªgs
(
ªgs
[
t
].
ªgm≠_íåy
,ªgs[t].
ªgm≠
,ªgs[t].
was32
,
INVCP
,INVCP);

4839 
c›1_ußbÀ
=0;

4840 
is_dñay¶Ÿ
=0;

4841 
ôy≥
[
t
]) {

4842 
ALU
:

4843 
	`Æu_as£mbÀ
(
t
,&
ªgs
[t]);;

4844 
IMM16
:

4845 
	`imm16_as£mbÀ
(
t
,&
ªgs
[t]);;

4846 
SHIFT
:

4847 
	`shi·_as£mbÀ
(
t
,&
ªgs
[t]);;

4848 
SHIFTIMM
:

4849 
	`shi·imm_as£mbÀ
(
t
,&
ªgs
[t]);;

4850 
LOAD
:

4851 
	`lﬂd_as£mbÀ
(
t
,&
ªgs
[t]);;

4852 
LOADLR
:

4853 
	`lﬂdÃ_as£mbÀ
(
t
,&
ªgs
[t]);;

4854 
STORE
:

4855 
	`°‹e_as£mbÀ
(
t
,&
ªgs
[t]);;

4856 
STORELR
:

4857 
	`°‹ñr_as£mbÀ
(
t
,&
ªgs
[t]);;

4858 
COP0
:

4859 
	`c›0_as£mbÀ
(
t
,&
ªgs
[t]);;

4860 
COP1
:

4861 
	`c›1_as£mbÀ
(
t
,&
ªgs
[t]);;

4862 
C1LS
:

4863 
	`c1ls_as£mbÀ
(
t
,&
ªgs
[t]);;

4864 
COP2
:

4865 
	`c›2_as£mbÀ
(
t
,&
ªgs
[t]);;

4866 
C2LS
:

4867 
	`c2ls_as£mbÀ
(
t
,&
ªgs
[t]);;

4868 
C2OP
:

4869 
	`c2›_as£mbÀ
(
t
,&
ªgs
[t]);;

4870 
FCONV
:

4871 
	`fc⁄v_as£mbÀ
(
t
,&
ªgs
[t]);;

4872 
FLOAT
:

4873 
	`Êﬂt_as£mbÀ
(
t
,&
ªgs
[t]);;

4874 
FCOMP
:

4875 
	`fcomp_as£mbÀ
(
t
,&
ªgs
[t]);;

4876 
MULTDIV
:

4877 
	`mu…div_as£mbÀ
(
t
,&
ªgs
[t]);;

4878 
MOV
:

4879 
	`mov_as£mbÀ
(
t
,&
ªgs
[t]);;

4880 
SYSCALL
:

4881 
HLECALL
:

4882 
INTCALL
:

4883 
SPAN
:

4884 
UJUMP
:

4885 
RJUMP
:

4886 
CJUMP
:

4887 
SJUMP
:

4888 
FJUMP
:

4889 
	`SysPrötf
("Jump inÅhe delay slot. This isÖrobablyá bug.\n");

4891 
	`°‹e_ªgs_bt
(
ªgs
[
t
].
ªgm≠
,ªgs[t].
is32
,ªgs[t].
dúty
,
ba
[
i
]+4);

4892 
	`lﬂd_ªgs_bt
(
ªgs
[
t
].
ªgm≠
,ªgs[t].
is32
,ªgs[t].
dúty
,
ba
[
i
]+4);

4893 if(
	`öã∫Æ_bønch
(
ªgs
[
t
].
is32
,
ba
[
i
]+4))

4894 
	`as£m_debug
("branch: internal\n");

4896 
	`as£m_debug
("branch:Éxternal\n");

4897 
	`as£π
(
	`öã∫Æ_bønch
(
ªgs
[
t
].
is32
,
ba
[
i
]+4));

4898 
	`add_to_lökî
(()
out
,
ba
[
i
]+4,
	`öã∫Æ_bønch
(
ªgs
[
t
].
is32
,ba[i]+4));

4899 
	`emô_jmp
(0);

4900 
	}
}

4902 
	$do_cc
(
i
,sig√d 
i_ªgm≠
[],*
adj
,
addr
,
èkí
,
övît
)

4904 
cou¡
;

4905 
jaddr
;

4906 
idÀ
=0;

4907 
t
=0;

4908 if(
ôy≥
[
i
]==
RJUMP
)

4910 *
adj
=0;

4913 if(
	`öã∫Æ_bønch
(
bønch_ªgs
[
i
].
is32
,
ba
[i]))

4915 
t
=(
ba
[
i
]-
°¨t
)>>2;

4916 if(
is_ds
[
t
]Ë*
adj
=-1;

4917 *
adj
=
cˇdj
[
t
];

4921 *
adj
=0;

4923 
cou¡
=
cˇdj
[
i
];

4924 if(
èkí
==
TAKEN
 && 
i
==(
ba
[i]-
°¨t
)>>2 && 
sour˚
[i+1]==0) {

4926 if(
cou¡
&1Ë
	`emô_addimm_™d_£t_Êags
(2*(cou¡+2),
HOST_CCREG
);

4927 
idÀ
=()
out
;

4929 
	`emô_™dimm
(
HOST_CCREG
,3,HOST_CCREG);

4930 
jaddr
=()
out
;

4931 
	`emô_jmp
(0);

4933 if(*
adj
==0||
övît
) {

4934 
cy˛es
=
	`CLOCK_ADJUST
(
cou¡
+2);

4936 i‡(
t
&&*
adj
) {

4937 
ªl
=
t
-
i
;

4938 if(-
NO_CYCLE_PENALTY_THR
<
ªl
&&rel<0)

4939 
cy˛es
=
	`CLOCK_ADJUST
(*
adj
)+
cou¡
+2-*adj;

4941 
	`emô_addimm_™d_£t_Êags
(
cy˛es
,
HOST_CCREG
);

4942 
jaddr
=()
out
;

4943 
	`emô_jns
(0);

4947 
	`emô_cmpimm
(
HOST_CCREG
,-
	`CLOCK_ADJUST
(
cou¡
+2));

4948 
jaddr
=()
out
;

4949 
	`emô_jns
(0);

4951 
	`add_°ub
(
CC_STUB
,
jaddr
,
idÀ
?idÀ:()
out
,(*
adj
==0||
övît
||idÀ)?0:(
cou¡
+2),
i
,
addr
,
èkí
,0);

4952 
	}
}

4954 
	$do_cc°ub
(
n
)

4956 
	`lôîÆ_poﬁ
(256);

4957 
	`as£m_debug
("do_cc°ub %x\n",
°¨t
+
°ubs
[
n
][4]*4);

4958 
	`£t_jump_èrgë
(
°ubs
[
n
][1],()
out
);

4959 
i
=
°ubs
[
n
][4];

4960 if(
°ubs
[
n
][6]==
NULLDS
) {

4962 
	`wb_dútys
(
ªgs
[
i
].
ªgm≠
,ªgs[i].
is32
,ªgs[i].
dúty
);

4964 if(
°ubs
[
n
][6]!=
TAKEN
) {

4965 
	`wb_dútys
(
bønch_ªgs
[
i
].
ªgm≠
,bønch_ªgs[i].
is32
,bønch_ªgs[i].
dúty
);

4968 if(
	`öã∫Æ_bønch
(
bønch_ªgs
[
i
].
is32
,
ba
[i]))

4969 
	`wb_√eded_dútys
(
bønch_ªgs
[
i
].
ªgm≠
,bønch_ªgs[i].
is32
,bønch_ªgs[i].
dúty
,
ba
[i]);

4971 if(
°ubs
[
n
][5]!=-1)

4974 
	`emô_movimm
(
°ubs
[
n
][5],
EAX
);

4975 
	`emô_wrôew‹d
(
EAX
,()&
pˇddr
);

4980 if(
ôy≥
[
i
]==
CJUMP
||ôy≥[i]==
SJUMP
||ôy≥[i]==
FJUMP
)

4982 
s1l
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
rs1
[i]);

4983 
s1h
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
rs1
[i]|64);

4984 
s2l
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
rs2
[i]);

4985 
s2h
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
rs2
[i]|64);

4986 if(
rs1
[
i
]==0)

4988 
s1l
=
s2l
;
s1h
=
s2h
;

4989 
s2l
=
s2h
=-1;

4991 if(
rs2
[
i
]==0)

4993 
s2l
=
s2h
=-1;

4995 if((
bønch_ªgs
[
i
].
is32
>>
rs1
[i])&(bønch_ªgs[i].is32>>
rs2
[i])&1) {

4996 
s1h
=
s2h
=-1;

4998 
	`as£π
(
s1l
>=0);

4999 #ifde‡
DESTRUCTIVE_WRITEBACK


5000 if(
rs1
[
i
]) {

5001 if((
bønch_ªgs
[
i
].
dúty
>>
s1l
)&(bønch_ªgs[i].
is32
>>
rs1
[i])&1)

5002 
	`emô_lﬂdªg
(
rs1
[
i
],
s1l
);

5005 if((
bønch_ªgs
[
i
].
dúty
>>
s1l
)&(bønch_ªgs[i].
is32
>>
rs2
[i])&1)

5006 
	`emô_lﬂdªg
(
rs2
[
i
],
s1l
);

5008 if(
s2l
>=0)

5009 if((
bønch_ªgs
[
i
].
dúty
>>
s2l
)&(bønch_ªgs[i].
is32
>>
rs2
[i])&1)

5010 
	`emô_lﬂdªg
(
rs2
[
i
],
s2l
);

5012 
hr
=0;

5013 
addr
=-1,
Æt
=-1,
¡addr
=-1;

5014 
hr
<
HOST_REGS
)

5016 if(
hr
!=
EXCLUDE_REG
 && hr!=
HOST_CCREG
 &&

5017 (
bønch_ªgs
[
i
].
ªgm≠
[
hr
]&63)!=
rs1
[i] &&

5018 (
bønch_ªgs
[
i
].
ªgm≠
[
hr
]&63)!=
rs2
[i] )

5020 
addr
=
hr
++;;

5022 
hr
++;

5024 
hr
<
HOST_REGS
)

5026 if(
hr
!=
EXCLUDE_REG
 && hr!=
HOST_CCREG
 &&

5027 (
bønch_ªgs
[
i
].
ªgm≠
[
hr
]&63)!=
rs1
[i] &&

5028 (
bønch_ªgs
[
i
].
ªgm≠
[
hr
]&63)!=
rs2
[i] )

5030 
Æt
=
hr
++;;

5032 
hr
++;

5034 if((
›code
[
i
]&0x2E)==6)

5036 
hr
<
HOST_REGS
)

5038 if(
hr
!=
EXCLUDE_REG
 && hr!=
HOST_CCREG
 &&

5039 (
bønch_ªgs
[
i
].
ªgm≠
[
hr
]&63)!=
rs1
[i] &&

5040 (
bønch_ªgs
[
i
].
ªgm≠
[
hr
]&63)!=
rs2
[i] )

5042 
¡addr
=
hr
;;

5044 
hr
++;

5046 
	`as£π
(
hr
<
HOST_REGS
);

5048 if((
›code
[
i
]&0x2f)==4)

5050 #ifde‡
HAVE_CMOV_IMM


5051 if(
s1h
<0) {

5052 if(
s2l
>=0Ë
	`emô_cmp
(
s1l
,s2l);

5053 
	`emô_ã°
(
s1l
,s1l);

5054 
	`emô_cmov2imm_e_√_com∑˘
(
ba
[
i
],
°¨t
+i*4+8,
addr
);

5059 
	`emô_mov2imm_com∑˘
(
ba
[
i
],
addr
,
°¨t
+i*4+8,
Æt
);

5060 if(
s1h
>=0) {

5061 if(
s2h
>=0Ë
	`emô_cmp
(
s1h
,s2h);

5062 
	`emô_ã°
(
s1h
,s1h);

5063 
	`emô_cmov√_ªg
(
Æt
,
addr
);

5065 if(
s2l
>=0Ë
	`emô_cmp
(
s1l
,s2l);

5066 
	`emô_ã°
(
s1l
,s1l);

5067 
	`emô_cmov√_ªg
(
Æt
,
addr
);

5070 if((
›code
[
i
]&0x2f)==5)

5072 #ifde‡
HAVE_CMOV_IMM


5073 if(
s1h
<0) {

5074 if(
s2l
>=0Ë
	`emô_cmp
(
s1l
,s2l);

5075 
	`emô_ã°
(
s1l
,s1l);

5076 
	`emô_cmov2imm_e_√_com∑˘
(
°¨t
+
i
*4+8,
ba
[i],
addr
);

5081 
	`emô_mov2imm_com∑˘
(
°¨t
+
i
*4+8,
addr
,
ba
[i],
Æt
);

5082 if(
s1h
>=0) {

5083 if(
s2h
>=0Ë
	`emô_cmp
(
s1h
,s2h);

5084 
	`emô_ã°
(
s1h
,s1h);

5085 
	`emô_cmov√_ªg
(
Æt
,
addr
);

5087 if(
s2l
>=0Ë
	`emô_cmp
(
s1l
,s2l);

5088 
	`emô_ã°
(
s1l
,s1l);

5089 
	`emô_cmov√_ªg
(
Æt
,
addr
);

5092 if((
›code
[
i
]&0x2f)==6)

5096 
	`emô_mov2imm_com∑˘
(
ba
[
i
],
Æt
,
°¨t
+i*4+8,
addr
);

5097 
	`emô_cmpimm
(
s1l
,1);

5098 if(
s1h
>=0Ë
	`emô_mov
(
addr
,
¡addr
);

5099 
	`emô_cmovl_ªg
(
Æt
,
addr
);

5100 if(
s1h
>=0) {

5101 
	`emô_ã°
(
s1h
,s1h);

5102 
	`emô_cmov√_ªg
(
¡addr
,
addr
);

5103 
	`emô_cmovs_ªg
(
Æt
,
addr
);

5106 if((
›code
[
i
]&0x2f)==7)

5110 
	`emô_mov2imm_com∑˘
(
ba
[
i
],
addr
,
°¨t
+i*4+8,
¡addr
);

5111 
	`emô_cmpimm
(
s1l
,1);

5112 if(
s1h
>=0Ë
	`emô_mov
(
addr
,
Æt
);

5113 
	`emô_cmovl_ªg
(
¡addr
,
addr
);

5114 if(
s1h
>=0) {

5115 
	`emô_ã°
(
s1h
,s1h);

5116 
	`emô_cmov√_ªg
(
Æt
,
addr
);

5117 
	`emô_cmovs_ªg
(
¡addr
,
addr
);

5120 if((
›code
[
i
]==1)&&(
›code2
[i]&0x2D)==0)

5124 
	`emô_mov2imm_com∑˘
(
ba
[
i
],
Æt
,
°¨t
+i*4+8,
addr
);

5125 if(
s1h
>=0Ë
	`emô_ã°
(s1h,s1h);

5126 
	`emô_ã°
(
s1l
,s1l);

5127 
	`emô_cmovs_ªg
(
Æt
,
addr
);

5129 if((
›code
[
i
]==1)&&(
›code2
[i]&0x2D)==1)

5133 
	`emô_mov2imm_com∑˘
(
ba
[
i
],
addr
,
°¨t
+i*4+8,
Æt
);

5134 if(
s1h
>=0Ë
	`emô_ã°
(s1h,s1h);

5135 
	`emô_ã°
(
s1l
,s1l);

5136 
	`emô_cmovs_ªg
(
Æt
,
addr
);

5138 if(
›code
[
i
]==0x11 && 
›code2
[i]==0x08 ) {

5139 if(
sour˚
[
i
]&0x10000)

5143 
	`emô_mov2imm_com∑˘
(
ba
[
i
],
Æt
,
°¨t
+i*4+8,
addr
);

5144 
	`emô_ã°imm
(
s1l
,0x800000);

5145 
	`emô_cmov√_ªg
(
Æt
,
addr
);

5151 
	`emô_mov2imm_com∑˘
(
ba
[
i
],
addr
,
°¨t
+i*4+8,
Æt
);

5152 
	`emô_ã°imm
(
s1l
,0x800000);

5153 
	`emô_cmov√_ªg
(
Æt
,
addr
);

5156 
	`emô_wrôew‹d
(
addr
,()&
pˇddr
);

5159 if(
ôy≥
[
i
]==
RJUMP
)

5161 
r
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
rs1
[i]);

5162 if(
rs1
[
i
]==
π1
[i+1]||rs1[i]==
π2
[i+1]) {

5163 
r
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
RTEMP
);

5165 
	`emô_wrôew‹d
(
r
,()&
pˇddr
);

5167 {
	`SysPrötf
("Unknow¿bønchÅy≥ i¿do_cc°ub\n");
	`exô
(1);}

5170 
	`as£π
(
bønch_ªgs
[
i
].
ªgm≠
[
HOST_CCREG
]==
CCREG
||branch_regs[i].regmap[HOST_CCREG]==-1);

5171 if(
°ubs
[
n
][3]Ë
	`emô_addimm
(
HOST_CCREG
,
	`CLOCK_ADJUST
(()stubs[n][3]),HOST_CCREG);

5172 
	`emô_ˇŒ
(()
cc_öãºu±
);

5173 if(
°ubs
[
n
][3]Ë
	`emô_addimm
(
HOST_CCREG
,-
	`CLOCK_ADJUST
(()stubs[n][3]),HOST_CCREG);

5174 if(
°ubs
[
n
][6]==
TAKEN
) {

5175 if(
	`öã∫Æ_bønch
(
bønch_ªgs
[
i
].
is32
,
ba
[i]))

5176 
	`lﬂd_√eded_ªgs
(
bønch_ªgs
[
i
].
ªgm≠
,
ªgs
[(
ba
[i]-
°¨t
)>>2].
ªgm≠_íåy
);

5177 if(
ôy≥
[
i
]==
RJUMP
) {

5178 if(
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
RTEMP
)>=0)

5179 
	`emô_ªadw‹d
(()&
pˇddr
,
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
RTEMP
));

5181 
	`emô_lﬂdªg
(
rs1
[
i
],
	`gë_ªg
(
bønch_ªgs
[i].
ªgm≠
,rs1[i]));

5183 }if(
°ubs
[
n
][6]==
NOTTAKEN
) {

5184 if(
i
<
¶í
-2Ë
	`lﬂd_√eded_ªgs
(
bønch_ªgs
[i].
ªgm≠
,
ªgm≠_¥e
[i+2]);

5185 
	`lﬂd_Æl_ªgs
(
bønch_ªgs
[
i
].
ªgm≠
);

5186 }if(
°ubs
[
n
][6]==
NULLDS
) {

5188 if(
i
<
¶í
-2Ë
	`lﬂd_√eded_ªgs
(
ªgs
[i].
ªgm≠
,
ªgm≠_¥e
[i+2]);

5189 
	`lﬂd_Æl_ªgs
(
ªgs
[
i
].
ªgm≠
);

5191 
	`lﬂd_Æl_ªgs
(
bønch_ªgs
[
i
].
ªgm≠
);

5193 
	`emô_jmp
(
°ubs
[
n
][2]);

5222 
	}
}

5224 
	$add_to_lökî
(
addr
,
èrgë
,
ext
)

5226 
lök_addr
[
lökcou¡
][0]=
addr
;

5227 
lök_addr
[
lökcou¡
][1]=
èrgë
;

5228 
lök_addr
[
lökcou¡
][2]=
ext
;

5229 
lökcou¡
++;

5230 
	}
}

5232 
	$ujump_as£mbÀ_wrôe_ø
(
i
)

5234 
π
;

5235 
ªtu∫_addªss
;

5236 
π
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,31);

5237 
	`as£m_debug
("bønch(%d):Éax=%dÉcx=%dÉdx=%dÉbx=%dÉbp=%dÉsi=%dÉdi=%d\n",
i
,
bønch_ªgs
[i].
ªgm≠
[0],branch_regs[i].regmap[1],branch_regs[i].regmap[2],branch_regs[i].regmap[3],branch_regs[i].regmap[5],branch_regs[i].regmap[6],branch_regs[i].regmap[7]);

5239 
ªtu∫_addªss
=
°¨t
+
i
*4+8;

5240 if(
π
>=0) {

5241 #ifde‡
USE_MINI_HT


5242 if(
	`öã∫Æ_bønch
(
bønch_ªgs
[
i
].
is32
,
ªtu∫_addªss
)&&
π1
[i+1]!=31) {

5243 
ãmp
=-1;

5244 #ifde‡
HOST_TEMPREG


5245 
ãmp
=
HOST_TEMPREG
;

5247 if(
ãmp
>=0Ë
	`do_möiht_ö£π
(
ªtu∫_addªss
,
π
,temp);

5248 
	`emô_movimm
(
ªtu∫_addªss
,
π
);

5253 #ifde‡
REG_PREFETCH


5254 if(
ãmp
>=0)

5256 if(
i_ªgm≠
[
ãmp
]!=
PTEMP
Ë
	`emô_movimm
(()
hash_èbÀ
[((
ªtu∫_addªss
>>16)^return_address)&0xFFFF],temp);

5259 
	`emô_movimm
(
ªtu∫_addªss
,
π
);

5260 #ifde‡
IMM_PREFETCH


5261 
	`emô_¥e„tch
(
hash_èbÀ
[((
ªtu∫_addªss
>>16)^return_address)&0xFFFF]);

5265 
	}
}

5267 
	$ujump_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

5269 sig√d *
i_ªgm≠
=
i_ªgs
->
ªgm≠
;

5270 
ø_d⁄e
=0;

5271 if(
i
==(
ba
[i]-
°¨t
)>>2Ë
	`as£m_debug
("idleÜoop\n");

5272 
	`addªss_gíî©i⁄
(
i
+1,
i_ªgs
,
ªgs
[i].
ªgm≠_íåy
);

5273 #ifde‡
REG_PREFETCH


5274 
ãmp
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
PTEMP
);

5275 if(
π1
[
i
]==31&&
ãmp
>=0)

5277 
ªtu∫_addªss
=
°¨t
+
i
*4+8;

5278 if(
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,31)>0)

5279 if(
i_ªgm≠
[
ãmp
]==
PTEMP
Ë
	`emô_movimm
(()
hash_èbÀ
[((
ªtu∫_addªss
>>16)^return_address)&0xFFFF],temp);

5282 if(
π1
[
i
]==31&&‘t1[i]==
rs1
[i+1]||π1[i]==
rs2
[i+1])) {

5283 
	`ujump_as£mbÀ_wrôe_ø
(
i
);

5284 
ø_d⁄e
=1;

5286 
	`ds_as£mbÀ
(
i
+1,
i_ªgs
);

5287 
uöt64_t
 
bc_u¬ìded
=
bønch_ªgs
[
i
].
u
;

5288 
uöt64_t
 
bc_u¬ìded_uµî
=
bønch_ªgs
[
i
].
uu
;

5289 
bc_u¬ìded
|=1|(1LL<<
π1
[
i
]);

5290 
bc_u¬ìded_uµî
|=1|(1LL<<
π1
[
i
]);

5291 
	`wb_övÆid©e
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
dúty
,ªgs[i].
is32
,

5292 
bc_u¬ìded
,
bc_u¬ìded_uµî
);

5293 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
was32
,
CCREG
,CCREG);

5294 if(!
ø_d⁄e
&&
π1
[
i
]==31)

5295 
	`ujump_as£mbÀ_wrôe_ø
(
i
);

5296 
cc
,
adj
;

5297 
cc
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
CCREG
);

5298 
	`as£π
(
cc
==
HOST_CCREG
);

5299 
	`°‹e_ªgs_bt
(
bønch_ªgs
[
i
].
ªgm≠
,bønch_ªgs[i].
is32
,bønch_ªgs[i].
dúty
,
ba
[i]);

5300 #ifde‡
REG_PREFETCH


5301 if(
π1
[
i
]==31&&
ãmp
>=0Ë
	`emô_¥e„tchªg
(temp);

5303 
	`do_cc
(
i
,
bønch_ªgs
[i].
ªgm≠
,&
adj
,
ba
[i],
TAKEN
,0);

5304 if(
adj
Ë
	`emô_addimm
(
cc
,
	`CLOCK_ADJUST
(
cˇdj
[
i
]+2-adj),cc);

5305 
	`lﬂd_ªgs_bt
(
bønch_ªgs
[
i
].
ªgm≠
,bønch_ªgs[i].
is32
,bønch_ªgs[i].
dúty
,
ba
[i]);

5306 if(
	`öã∫Æ_bønch
(
bønch_ªgs
[
i
].
is32
,
ba
[i]))

5307 
	`as£m_debug
("branch: internal\n");

5309 
	`as£m_debug
("branch:Éxternal\n");

5310 if(
	`öã∫Æ_bønch
(
bønch_ªgs
[
i
].
is32
,
ba
[i])&&
is_ds
[(ba[i]-
°¨t
)>>2]) {

5311 
	`ds_as£mbÀ_íåy
(
i
);

5314 
	`add_to_lökî
(()
out
,
ba
[
i
],
	`öã∫Æ_bønch
(
bønch_ªgs
[i].
is32
,ba[i]));

5315 
	`emô_jmp
(0);

5317 
	}
}

5319 
	$rjump_as£mbÀ_wrôe_ø
(
i
)

5321 
π
,
ªtu∫_addªss
;

5322 
	`as£π
(
π1
[
i
+1]!=rt1[i]);

5323 
	`as£π
(
π2
[
i
+1]!=
π1
[i]);

5324 
π
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
π1
[i]);

5325 
	`as£m_debug
("bønch(%d):Éax=%dÉcx=%dÉdx=%dÉbx=%dÉbp=%dÉsi=%dÉdi=%d\n",
i
,
bønch_ªgs
[i].
ªgm≠
[0],branch_regs[i].regmap[1],branch_regs[i].regmap[2],branch_regs[i].regmap[3],branch_regs[i].regmap[5],branch_regs[i].regmap[6],branch_regs[i].regmap[7]);

5326 
	`as£π
(
π
>=0);

5327 
ªtu∫_addªss
=
°¨t
+
i
*4+8;

5328 #ifde‡
REG_PREFETCH


5329 if(
ãmp
>=0)

5331 if(
i_ªgm≠
[
ãmp
]!=
PTEMP
Ë
	`emô_movimm
(()
hash_èbÀ
[((
ªtu∫_addªss
>>16)^return_address)&0xFFFF],temp);

5334 
	`emô_movimm
(
ªtu∫_addªss
,
π
);

5335 #ifde‡
IMM_PREFETCH


5336 
	`emô_¥e„tch
(
hash_èbÀ
[((
ªtu∫_addªss
>>16)^return_address)&0xFFFF]);

5338 
	}
}

5340 
	$rjump_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

5342 sig√d *
i_ªgm≠
=
i_ªgs
->
ªgm≠
;

5343 
ãmp
;

5344 
rs
,
cc
,
adj
;

5345 
ø_d⁄e
=0;

5346 
rs
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
rs1
[i]);

5347 
	`as£π
(
rs
>=0);

5348 if(
rs1
[
i
]==
π1
[i+1]||rs1[i]==
π2
[i+1]) {

5350 
ãmp
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
RTEMP
);

5351 
	`as£π
(
ãmp
>=0);

5352 
	`as£π
(
ªgs
[
i
].
ªgm≠
[
ãmp
]==
RTEMP
);

5353 
	`emô_mov
(
rs
,
ãmp
);

5354 
rs
=
ãmp
;

5356 
	`addªss_gíî©i⁄
(
i
+1,
i_ªgs
,
ªgs
[i].
ªgm≠_íåy
);

5357 #ifde‡
REG_PREFETCH


5358 if(
π1
[
i
]==31)

5360 if((
ãmp
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
PTEMP
))>=0) {

5361 
ªtu∫_addªss
=
°¨t
+
i
*4+8;

5362 if(
i_ªgm≠
[
ãmp
]==
PTEMP
Ë
	`emô_movimm
(()
hash_èbÀ
[((
ªtu∫_addªss
>>16)^return_address)&0xFFFF],temp);

5366 #ifde‡
USE_MINI_HT


5367 if(
rs1
[
i
]==31) {

5368 
rh
=
	`gë_ªg
(
ªgs
[
i
].
ªgm≠
,
RHASH
);

5369 if(
rh
>=0Ë
	`do_¥ñﬂd_rhash
(rh);

5372 if(
π1
[
i
]!=0&&‘t1[i]==
rs1
[i+1]||π1[i]==
rs2
[i+1])) {

5373 
	`rjump_as£mbÀ_wrôe_ø
(
i
);

5374 
ø_d⁄e
=1;

5376 
	`ds_as£mbÀ
(
i
+1,
i_ªgs
);

5377 
uöt64_t
 
bc_u¬ìded
=
bønch_ªgs
[
i
].
u
;

5378 
uöt64_t
 
bc_u¬ìded_uµî
=
bønch_ªgs
[
i
].
uu
;

5379 
bc_u¬ìded
|=1|(1LL<<
π1
[
i
]);

5380 
bc_u¬ìded_uµî
|=1|(1LL<<
π1
[
i
]);

5381 
bc_u¬ìded
&=~(1LL<<
rs1
[
i
]);

5382 
	`wb_övÆid©e
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
dúty
,ªgs[i].
is32
,

5383 
bc_u¬ìded
,
bc_u¬ìded_uµî
);

5384 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
was32
,
rs1
[i],
CCREG
);

5385 if(!
ø_d⁄e
&&
π1
[
i
]!=0)

5386 
	`rjump_as£mbÀ_wrôe_ø
(
i
);

5387 
cc
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
CCREG
);

5388 
	`as£π
(
cc
==
HOST_CCREG
);

5389 #ifde‡
USE_MINI_HT


5390 
rh
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
RHASH
);

5391 
ht
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
RHTBL
);

5392 if(
rs1
[
i
]==31) {

5393 if(
ªgs
[
i
].
ªgm≠
[
rh
]!=
RHASH
Ë
	`do_¥ñﬂd_rhash
(rh);

5394 
	`do_¥ñﬂd_rhtbl
(
ht
);

5395 
	`do_rhash
(
rs
,
rh
);

5398 
	`°‹e_ªgs_bt
(
bønch_ªgs
[
i
].
ªgm≠
,bønch_ªgs[i].
is32
,bønch_ªgs[i].
dúty
,-1);

5399 #ifde‡
DESTRUCTIVE_WRITEBACK


5400 if((
bønch_ªgs
[
i
].
dúty
>>
rs
)&(bønch_ªgs[i].
is32
>>
rs1
[i])&1) {

5401 if(
rs1
[
i
]!=
π1
[i+1]&&rs1[i]!=
π2
[i+1]) {

5402 
	`emô_lﬂdªg
(
rs1
[
i
],
rs
);

5406 #ifde‡
REG_PREFETCH


5407 if(
π1
[
i
]==31&&
ãmp
>=0Ë
	`emô_¥e„tchªg
(temp);

5409 #ifde‡
USE_MINI_HT


5410 if(
rs1
[
i
]==31) {

5411 
	`do_möiht_lﬂd
(
ht
,
rh
);

5417 
	`emô_addimm_™d_£t_Êags
(
	`CLOCK_ADJUST
(
cˇdj
[
i
]+2),
HOST_CCREG
);

5418 
	`add_°ub
(
CC_STUB
,()
out
,
jump_vaddr_ªg
[
rs
],0,
i
,-1,
TAKEN
,0);

5419 #ifde‡
PCSX


5420 if(
ôy≥
[
i
+1]==
COP0
&&(
sour˚
[i+1]&0x3f)==0x10)

5422 
	`emô_jmp
(0);

5425 
	`emô_jns
(0);

5427 #ifde‡
USE_MINI_HT


5428 if(
rs1
[
i
]==31) {

5429 
	`do_möiht_jump
(
rs
,
rh
,
ht
);

5436 
	`emô_jmp
(
jump_vaddr_ªg
[
rs
]);

5469 #ifde‡
CORTEX_A8_BRANCH_PREDICTION_HACK


5470 if(
π1
[
i
]!=31&&i<
¶í
-2&&(((
u_öt
)
out
)&7)Ë
	`emô_mov
(13,13);

5472 
	}
}

5474 
	$cjump_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

5476 sig√d *
i_ªgm≠
=
i_ªgs
->
ªgm≠
;

5477 
cc
;

5478 
m©ch
;

5479 
m©ch
=
	`m©ch_bt
(
bønch_ªgs
[
i
].
ªgm≠
,bønch_ªgs[i].
is32
,bønch_ªgs[i].
dúty
,
ba
[i]);

5480 
	`as£m_debug
("m©ch=%d\n",
m©ch
);

5481 
s1h
,
s1l
,
s2h
,
s2l
;

5482 
¥ev_c›1_ußbÀ
=
c›1_ußbÀ
;

5483 
unc⁄dôi⁄Æ
=0,
n›
=0;

5484 
⁄ly32
=0;

5485 
övît
=0;

5486 
öã∫Æ
=
	`öã∫Æ_bønch
(
bønch_ªgs
[
i
].
is32
,
ba
[i]);

5487 if(
i
==(
ba
[i]-
°¨t
)>>2Ë
	`as£m_debug
("idleÜoop\n");

5488 if(!
m©ch
Ë
övît
=1;

5489 #ifde‡
CORTEX_A8_BRANCH_PREDICTION_HACK


5490 if(
i
>(
ba
[i]-
°¨t
)>>2Ë
övît
=1;

5493 if(
ooo
[
i
]) {

5494 
s1l
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
rs1
[i]);

5495 
s1h
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
rs1
[i]|64);

5496 
s2l
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
rs2
[i]);

5497 
s2h
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
rs2
[i]|64);

5500 
s1l
=
	`gë_ªg
(
i_ªgm≠
,
rs1
[
i
]);

5501 
s1h
=
	`gë_ªg
(
i_ªgm≠
,
rs1
[
i
]|64);

5502 
s2l
=
	`gë_ªg
(
i_ªgm≠
,
rs2
[
i
]);

5503 
s2h
=
	`gë_ªg
(
i_ªgm≠
,
rs2
[
i
]|64);

5505 if(
rs1
[
i
]==0&&
rs2
[i]==0)

5507 if(
›code
[
i
]&1Ë
n›
=1;

5508 
unc⁄dôi⁄Æ
=1;

5514 if(
rs1
[
i
]==0)

5516 
s1l
=
s2l
;
s1h
=
s2h
;

5517 
s2l
=
s2h
=-1;

5518 
⁄ly32
=(
ªgs
[
i
].
was32
>>
rs2
[i])&1;

5520 if(
rs2
[
i
]==0)

5522 
s2l
=
s2h
=-1;

5523 
⁄ly32
=(
ªgs
[
i
].
was32
>>
rs1
[i])&1;

5526 
⁄ly32
=(
ªgs
[
i
].
was32
>>
rs1
[i])&‘egs[i].was32>>
rs2
[i])&1;

5529 if(
ooo
[
i
]) {

5532 
	`addªss_gíî©i⁄
(
i
+1,
i_ªgs
,
ªgs
[i].
ªgm≠_íåy
);

5533 
	`ds_as£mbÀ
(
i
+1,
i_ªgs
);

5534 
adj
;

5535 
uöt64_t
 
bc_u¬ìded
=
bønch_ªgs
[
i
].
u
;

5536 
uöt64_t
 
bc_u¬ìded_uµî
=
bønch_ªgs
[
i
].
uu
;

5537 
bc_u¬ìded
&=~((1LL<<
rs1
[
i
])|(1LL<<
rs2
[i]));

5538 
bc_u¬ìded_uµî
&=~((1LL<<
us1
[
i
])|(1LL<<
us2
[i]));

5539 
bc_u¬ìded
|=1;

5540 
bc_u¬ìded_uµî
|=1;

5541 
	`wb_övÆid©e
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
dúty
,ªgs[i].
is32
,

5542 
bc_u¬ìded
,
bc_u¬ìded_uµî
);

5543 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
was32
,
rs1
[i],
rs2
[i]);

5544 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
was32
,
CCREG
,CCREG);

5545 
cc
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
CCREG
);

5546 
	`as£π
(
cc
==
HOST_CCREG
);

5547 if(
unc⁄dôi⁄Æ
)

5548 
	`°‹e_ªgs_bt
(
bønch_ªgs
[
i
].
ªgm≠
,bønch_ªgs[i].
is32
,bønch_ªgs[i].
dúty
,
ba
[i]);

5551 if(
unc⁄dôi⁄Æ
) {

5552 
	`do_cc
(
i
,
bønch_ªgs
[i].
ªgm≠
,&
adj
,
ba
[i],
TAKEN
,0);

5553 if(
i
!=(
ba
[i]-
°¨t
)>>2 || 
sour˚
[i+1]!=0) {

5554 if(
adj
Ë
	`emô_addimm
(
cc
,
	`CLOCK_ADJUST
(
cˇdj
[
i
]+2-adj),cc);

5555 
	`lﬂd_ªgs_bt
(
bønch_ªgs
[
i
].
ªgm≠
,bønch_ªgs[i].
is32
,bønch_ªgs[i].
dúty
,
ba
[i]);

5556 if(
öã∫Æ
)

5557 
	`as£m_debug
("branch: internal\n");

5559 
	`as£m_debug
("branch:Éxternal\n");

5560 if(
öã∫Æ
&&
is_ds
[(
ba
[
i
]-
°¨t
)>>2]) {

5561 
	`ds_as£mbÀ_íåy
(
i
);

5564 
	`add_to_lökî
(()
out
,
ba
[
i
],
öã∫Æ
);

5565 
	`emô_jmp
(0);

5567 #ifde‡
CORTEX_A8_BRANCH_PREDICTION_HACK


5568 if(((
u_öt
)
out
)&7Ë
	`emô_addn›
(0);

5572 if(
n›
) {

5573 
	`emô_addimm_™d_£t_Êags
(
	`CLOCK_ADJUST
(
cˇdj
[
i
]+2),
cc
);

5574 
jaddr
=()
out
;

5575 
	`emô_jns
(0);

5576 
	`add_°ub
(
CC_STUB
,
jaddr
,()
out
,0,
i
,
°¨t
+i*4+8,
NOTTAKEN
,0);

5579 
èkí
=0,
nŸèkí
=0,
nŸèkí1
=0;

5580 
	`do_cc
(
i
,
bønch_ªgs
[i].
ªgm≠
,&
adj
,-1,0,
övît
);

5581 if(
adj
&&!
övît
Ë
	`emô_addimm
(
cc
,
	`CLOCK_ADJUST
(
cˇdj
[
i
]+2-adj),cc);

5582 if(!
⁄ly32
)

5584 
	`as£π
(
s1h
>=0);

5585 if(
›code
[
i
]==4)

5587 if(
s2h
>=0Ë
	`emô_cmp
(
s1h
,s2h);

5588 
	`emô_ã°
(
s1h
,s1h);

5589 
nŸèkí1
=()
out
;

5590 
	`emô_j√
(1);

5592 if(
›code
[
i
]==5)

5594 if(
s2h
>=0Ë
	`emô_cmp
(
s1h
,s2h);

5595 
	`emô_ã°
(
s1h
,s1h);

5596 if(
övît
Ë
èkí
=()
out
;

5597 
	`add_to_lökî
(()
out
,
ba
[
i
],
öã∫Æ
);

5598 
	`emô_j√
(0);

5600 if(
›code
[
i
]==6)

5602 
	`emô_ã°
(
s1h
,s1h);

5603 if(
övît
Ë
èkí
=()
out
;

5604 
	`add_to_lökî
(()
out
,
ba
[
i
],
öã∫Æ
);

5605 
	`emô_js
(0);

5606 
nŸèkí1
=()
out
;

5607 
	`emô_j√
(1);

5609 if(
›code
[
i
]==7)

5611 
	`emô_ã°
(
s1h
,s1h);

5612 
nŸèkí1
=()
out
;

5613 
	`emô_js
(1);

5614 if(
övît
Ë
èkí
=()
out
;

5615 
	`add_to_lökî
(()
out
,
ba
[
i
],
öã∫Æ
);

5616 
	`emô_j√
(0);

5621 
	`as£π
(
s1l
>=0);

5622 if(
›code
[
i
]==4)

5624 if(
s2l
>=0Ë
	`emô_cmp
(
s1l
,s2l);

5625 
	`emô_ã°
(
s1l
,s1l);

5626 if(
övît
){

5627 
nŸèkí
=()
out
;

5628 
	`emô_j√
(1);

5630 
	`add_to_lökî
(()
out
,
ba
[
i
],
öã∫Æ
);

5631 
	`emô_jeq
(0);

5634 if(
›code
[
i
]==5)

5636 if(
s2l
>=0Ë
	`emô_cmp
(
s1l
,s2l);

5637 
	`emô_ã°
(
s1l
,s1l);

5638 if(
övît
){

5639 
nŸèkí
=()
out
;

5640 
	`emô_jeq
(1);

5642 
	`add_to_lökî
(()
out
,
ba
[
i
],
öã∫Æ
);

5643 
	`emô_j√
(0);

5646 if(
›code
[
i
]==6)

5648 
	`emô_cmpimm
(
s1l
,1);

5649 if(
övît
){

5650 
nŸèkí
=()
out
;

5651 
	`emô_jge
(1);

5653 
	`add_to_lökî
(()
out
,
ba
[
i
],
öã∫Æ
);

5654 
	`emô_jl
(0);

5657 if(
›code
[
i
]==7)

5659 
	`emô_cmpimm
(
s1l
,1);

5660 if(
övît
){

5661 
nŸèkí
=()
out
;

5662 
	`emô_jl
(1);

5664 
	`add_to_lökî
(()
out
,
ba
[
i
],
öã∫Æ
);

5665 
	`emô_jge
(0);

5668 if(
övît
) {

5669 if(
èkí
Ë
	`£t_jump_èrgë
—akí,()
out
);

5670 #ifde‡
CORTEX_A8_BRANCH_PREDICTION_HACK


5671 if(
m©ch
&&(!
öã∫Æ
||!
is_ds
[(
ba
[
i
]-
°¨t
)>>2])) {

5672 if(
adj
) {

5673 
	`emô_addimm
(
cc
,-
	`CLOCK_ADJUST
(
adj
),cc);

5674 
	`add_to_lökî
(()
out
,
ba
[
i
],
öã∫Æ
);

5676 
	`emô_addn›
(13);

5677 
	`add_to_lökî
(()
out
,
ba
[
i
],
öã∫Æ
*2);

5679 
	`emô_jmp
(0);

5683 if(
adj
Ë
	`emô_addimm
(
cc
,-
	`CLOCK_ADJUST
(adj),cc);

5684 
	`°‹e_ªgs_bt
(
bønch_ªgs
[
i
].
ªgm≠
,bønch_ªgs[i].
is32
,bønch_ªgs[i].
dúty
,
ba
[i]);

5685 
	`lﬂd_ªgs_bt
(
bønch_ªgs
[
i
].
ªgm≠
,bønch_ªgs[i].
is32
,bønch_ªgs[i].
dúty
,
ba
[i]);

5686 if(
öã∫Æ
)

5687 
	`as£m_debug
("branch: internal\n");

5689 
	`as£m_debug
("branch:Éxternal\n");

5690 if(
öã∫Æ
&&
is_ds
[(
ba
[
i
]-
°¨t
)>>2]) {

5691 
	`ds_as£mbÀ_íåy
(
i
);

5694 
	`add_to_lökî
(()
out
,
ba
[
i
],
öã∫Æ
);

5695 
	`emô_jmp
(0);

5698 
	`£t_jump_èrgë
(
nŸèkí
,()
out
);

5701 if(
nŸèkí1
Ë
	`£t_jump_èrgë
“Ÿèkí1,()
out
);

5702 if(
adj
) {

5703 if(!
övît
Ë
	`emô_addimm
(
cc
,
	`CLOCK_ADJUST
(
adj
),cc);

5713 
èkí
=0,
nŸèkí
=0,
nŸèkí1
=0;

5714 if(!
unc⁄dôi⁄Æ
&&!
n›
) {

5715 if(!
⁄ly32
)

5717 
	`as£π
(
s1h
>=0);

5718 if((
›code
[
i
]&0x2f)==4)

5720 if(
s2h
>=0Ë
	`emô_cmp
(
s1h
,s2h);

5721 
	`emô_ã°
(
s1h
,s1h);

5722 
nŸèkí1
=()
out
;

5723 
	`emô_j√
(2);

5725 if((
›code
[
i
]&0x2f)==5)

5727 if(
s2h
>=0Ë
	`emô_cmp
(
s1h
,s2h);

5728 
	`emô_ã°
(
s1h
,s1h);

5729 
èkí
=()
out
;

5730 
	`emô_j√
(1);

5732 if((
›code
[
i
]&0x2f)==6)

5734 
	`emô_ã°
(
s1h
,s1h);

5735 
èkí
=()
out
;

5736 
	`emô_js
(1);

5737 
nŸèkí1
=()
out
;

5738 
	`emô_j√
(2);

5740 if((
›code
[
i
]&0x2f)==7)

5742 
	`emô_ã°
(
s1h
,s1h);

5743 
nŸèkí1
=()
out
;

5744 
	`emô_js
(2);

5745 
èkí
=()
out
;

5746 
	`emô_j√
(1);

5751 
	`as£π
(
s1l
>=0);

5752 if((
›code
[
i
]&0x2f)==4)

5754 if(
s2l
>=0Ë
	`emô_cmp
(
s1l
,s2l);

5755 
	`emô_ã°
(
s1l
,s1l);

5756 
nŸèkí
=()
out
;

5757 
	`emô_j√
(2);

5759 if((
›code
[
i
]&0x2f)==5)

5761 if(
s2l
>=0Ë
	`emô_cmp
(
s1l
,s2l);

5762 
	`emô_ã°
(
s1l
,s1l);

5763 
nŸèkí
=()
out
;

5764 
	`emô_jeq
(2);

5766 if((
›code
[
i
]&0x2f)==6)

5768 
	`emô_cmpimm
(
s1l
,1);

5769 
nŸèkí
=()
out
;

5770 
	`emô_jge
(2);

5772 if((
›code
[
i
]&0x2f)==7)

5774 
	`emô_cmpimm
(
s1l
,1);

5775 
nŸèkí
=()
out
;

5776 
	`emô_jl
(2);

5779 
adj
;

5780 
uöt64_t
 
ds_u¬ìded
=
bønch_ªgs
[
i
].
u
;

5781 
uöt64_t
 
ds_u¬ìded_uµî
=
bønch_ªgs
[
i
].
uu
;

5782 
ds_u¬ìded
&=~((1LL<<
rs1
[
i
+1])|(1LL<<
rs2
[i+1]));

5783 
ds_u¬ìded_uµî
&=~((1LL<<
us1
[
i
+1])|(1LL<<
us2
[i+1]));

5784 if((~
ds_u¬ìded_uµî
>>
π1
[
i
+1])&1Ëds_u¬ìded_uµî&=~((1LL<<
dï1
[i+1])|(1LL<<
dï2
[i+1]));

5785 
ds_u¬ìded
|=1;

5786 
ds_u¬ìded_uµî
|=1;

5788 if(!
n›
) {

5789 if(
èkí
Ë
	`£t_jump_èrgë
—akí,()
out
);

5790 
	`as£m_debug
("1:\n");

5791 
	`wb_övÆid©e
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
dúty
,ªgs[i].
is32
,

5792 
ds_u¬ìded
,
ds_u¬ìded_uµî
);

5794 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
was32
,
rs1
[i+1],
rs2
[i+1]);

5795 
	`addªss_gíî©i⁄
(
i
+1,&
bønch_ªgs
[i],0);

5796 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
was32
,
CCREG
,
INVCP
);

5797 
	`ds_as£mbÀ
(
i
+1,&
bønch_ªgs
[i]);

5798 
cc
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
CCREG
);

5799 if(
cc
==-1) {

5800 
	`emô_lﬂdªg
(
CCREG
,
cc
=
HOST_CCREG
);

5803 
	`as£π
(
cc
==
HOST_CCREG
);

5804 
	`°‹e_ªgs_bt
(
bønch_ªgs
[
i
].
ªgm≠
,bønch_ªgs[i].
is32
,bønch_ªgs[i].
dúty
,
ba
[i]);

5805 
	`do_cc
(
i
,
i_ªgm≠
,&
adj
,
ba
[i],
TAKEN
,0);

5806 
	`as£m_debug
("cycle count (adj)\n");

5807 if(
adj
Ë
	`emô_addimm
(
cc
,
	`CLOCK_ADJUST
(
cˇdj
[
i
]+2-adj),cc);

5808 
	`lﬂd_ªgs_bt
(
bønch_ªgs
[
i
].
ªgm≠
,bønch_ªgs[i].
is32
,bønch_ªgs[i].
dúty
,
ba
[i]);

5809 if(
öã∫Æ
)

5810 
	`as£m_debug
("branch: internal\n");

5812 
	`as£m_debug
("branch:Éxternal\n");

5813 if(
öã∫Æ
&&
is_ds
[(
ba
[
i
]-
°¨t
)>>2]) {

5814 
	`ds_as£mbÀ_íåy
(
i
);

5817 
	`add_to_lökî
(()
out
,
ba
[
i
],
öã∫Æ
);

5818 
	`emô_jmp
(0);

5822 
c›1_ußbÀ
=
¥ev_c›1_ußbÀ
;

5823 if(!
unc⁄dôi⁄Æ
) {

5824 if(
nŸèkí1
Ë
	`£t_jump_èrgë
“Ÿèkí1,()
out
);

5825 
	`£t_jump_èrgë
(
nŸèkí
,()
out
);

5826 
	`as£m_debug
("2:\n");

5827 if(!
likñy
[
i
]) {

5828 
	`wb_övÆid©e
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
dúty
,ªgs[i].
is32
,

5829 
ds_u¬ìded
,
ds_u¬ìded_uµî
);

5830 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
was32
,
rs1
[i+1],
rs2
[i+1]);

5831 
	`addªss_gíî©i⁄
(
i
+1,&
bønch_ªgs
[i],0);

5832 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
was32
,
CCREG
,CCREG);

5833 
	`ds_as£mbÀ
(
i
+1,&
bønch_ªgs
[i]);

5835 
cc
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
CCREG
);

5836 if(
cc
==-1&&!
likñy
[
i
]) {

5838 
	`emô_lﬂdªg
(
CCREG
,
HOST_CCREG
);

5839 
	`emô_addimm_™d_£t_Êags
(
	`CLOCK_ADJUST
(
cˇdj
[
i
]+2),
HOST_CCREG
);

5840 
jaddr
=()
out
;

5841 
	`emô_jns
(0);

5842 
	`add_°ub
(
CC_STUB
,
jaddr
,()
out
,0,
i
,
°¨t
+i*4+8,
NOTTAKEN
,0);

5843 
	`emô_°‹îeg
(
CCREG
,
HOST_CCREG
);

5846 
cc
=
	`gë_ªg
(
i_ªgm≠
,
CCREG
);

5847 
	`as£π
(
cc
==
HOST_CCREG
);

5848 
	`emô_addimm_™d_£t_Êags
(
	`CLOCK_ADJUST
(
cˇdj
[
i
]+2),
cc
);

5849 
jaddr
=()
out
;

5850 
	`emô_jns
(0);

5851 
	`add_°ub
(
CC_STUB
,
jaddr
,()
out
,0,
i
,
°¨t
+i*4+8,
likñy
[i]?
NULLDS
:
NOTTAKEN
,0);

5855 
	}
}

5857 
	$sjump_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

5859 sig√d *
i_ªgm≠
=
i_ªgs
->
ªgm≠
;

5860 
cc
;

5861 
m©ch
;

5862 
m©ch
=
	`m©ch_bt
(
bønch_ªgs
[
i
].
ªgm≠
,bønch_ªgs[i].
is32
,bønch_ªgs[i].
dúty
,
ba
[i]);

5863 
	`as£m_debug
("sm©ch=%d\n",
m©ch
);

5864 
s1h
,
s1l
;

5865 
¥ev_c›1_ußbÀ
=
c›1_ußbÀ
;

5866 
unc⁄dôi⁄Æ
=0,
√vîèkí
=0;

5867 
⁄ly32
=0;

5868 
övît
=0;

5869 
öã∫Æ
=
	`öã∫Æ_bønch
(
bønch_ªgs
[
i
].
is32
,
ba
[i]);

5870 if(
i
==(
ba
[i]-
°¨t
)>>2Ë
	`as£m_debug
("idleÜoop\n");

5871 if(!
m©ch
Ë
övît
=1;

5872 #ifde‡
CORTEX_A8_BRANCH_PREDICTION_HACK


5873 if(
i
>(
ba
[i]-
°¨t
)>>2Ë
övît
=1;

5879 if(
ooo
[
i
]) {

5880 
s1l
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
rs1
[i]);

5881 
s1h
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
rs1
[i]|64);

5884 
s1l
=
	`gë_ªg
(
i_ªgm≠
,
rs1
[
i
]);

5885 
s1h
=
	`gë_ªg
(
i_ªgm≠
,
rs1
[
i
]|64);

5887 if(
rs1
[
i
]==0)

5889 if(
›code2
[
i
]&1Ë
unc⁄dôi⁄Æ
=1;

5890 
√vîèkí
=1;

5898 
⁄ly32
=(
ªgs
[
i
].
was32
>>
rs1
[i])&1;

5901 if(
ooo
[
i
]) {

5904 
	`addªss_gíî©i⁄
(
i
+1,
i_ªgs
,
ªgs
[i].
ªgm≠_íåy
);

5905 
	`ds_as£mbÀ
(
i
+1,
i_ªgs
);

5906 
adj
;

5907 
uöt64_t
 
bc_u¬ìded
=
bønch_ªgs
[
i
].
u
;

5908 
uöt64_t
 
bc_u¬ìded_uµî
=
bønch_ªgs
[
i
].
uu
;

5909 
bc_u¬ìded
&=~((1LL<<
rs1
[
i
])|(1LL<<
rs2
[i]));

5910 
bc_u¬ìded_uµî
&=~((1LL<<
us1
[
i
])|(1LL<<
us2
[i]));

5911 
bc_u¬ìded
|=1;

5912 
bc_u¬ìded_uµî
|=1;

5913 
	`wb_övÆid©e
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
dúty
,ªgs[i].
is32
,

5914 
bc_u¬ìded
,
bc_u¬ìded_uµî
);

5915 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
was32
,
rs1
[i],rs1[i]);

5916 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
was32
,
CCREG
,CCREG);

5917 if(
π1
[
i
]==31) {

5918 
π
,
ªtu∫_addªss
;

5919 
π
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,31);

5920 
	`as£m_debug
("bønch(%d):Éax=%dÉcx=%dÉdx=%dÉbx=%dÉbp=%dÉsi=%dÉdi=%d\n",
i
,
bønch_ªgs
[i].
ªgm≠
[0],branch_regs[i].regmap[1],branch_regs[i].regmap[2],branch_regs[i].regmap[3],branch_regs[i].regmap[5],branch_regs[i].regmap[6],branch_regs[i].regmap[7]);

5921 if(
π
>=0) {

5923 
ªtu∫_addªss
=
°¨t
+
i
*4+8;

5924 
	`emô_movimm
(
ªtu∫_addªss
,
π
);

5925 #ifde‡
IMM_PREFETCH


5926 if(!
√vîèkí
Ë
	`emô_¥e„tch
(
hash_èbÀ
[((
ªtu∫_addªss
>>16)^return_address)&0xFFFF]);

5930 
cc
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
CCREG
);

5931 
	`as£π
(
cc
==
HOST_CCREG
);

5932 if(
unc⁄dôi⁄Æ
)

5933 
	`°‹e_ªgs_bt
(
bønch_ªgs
[
i
].
ªgm≠
,bønch_ªgs[i].
is32
,bønch_ªgs[i].
dúty
,
ba
[i]);

5935 
	`as£m_debug
("cycle count (adj)\n");

5936 if(
unc⁄dôi⁄Æ
) {

5937 
	`do_cc
(
i
,
bønch_ªgs
[i].
ªgm≠
,&
adj
,
ba
[i],
TAKEN
,0);

5938 if(
i
!=(
ba
[i]-
°¨t
)>>2 || 
sour˚
[i+1]!=0) {

5939 if(
adj
Ë
	`emô_addimm
(
cc
,
	`CLOCK_ADJUST
(
cˇdj
[
i
]+2-adj),cc);

5940 
	`lﬂd_ªgs_bt
(
bønch_ªgs
[
i
].
ªgm≠
,bønch_ªgs[i].
is32
,bønch_ªgs[i].
dúty
,
ba
[i]);

5941 if(
öã∫Æ
)

5942 
	`as£m_debug
("branch: internal\n");

5944 
	`as£m_debug
("branch:Éxternal\n");

5945 if(
öã∫Æ
&&
is_ds
[(
ba
[
i
]-
°¨t
)>>2]) {

5946 
	`ds_as£mbÀ_íåy
(
i
);

5949 
	`add_to_lökî
(()
out
,
ba
[
i
],
öã∫Æ
);

5950 
	`emô_jmp
(0);

5952 #ifde‡
CORTEX_A8_BRANCH_PREDICTION_HACK


5953 if(((
u_öt
)
out
)&7Ë
	`emô_addn›
(0);

5957 if(
√vîèkí
) {

5958 
	`emô_addimm_™d_£t_Êags
(
	`CLOCK_ADJUST
(
cˇdj
[
i
]+2),
cc
);

5959 
jaddr
=()
out
;

5960 
	`emô_jns
(0);

5961 
	`add_°ub
(
CC_STUB
,
jaddr
,()
out
,0,
i
,
°¨t
+i*4+8,
NOTTAKEN
,0);

5964 
nŸèkí
=0;

5965 
	`do_cc
(
i
,
bønch_ªgs
[i].
ªgm≠
,&
adj
,-1,0,
övît
);

5966 if(
adj
&&!
övît
Ë
	`emô_addimm
(
cc
,
	`CLOCK_ADJUST
(
cˇdj
[
i
]+2-adj),cc);

5967 if(!
⁄ly32
)

5969 
	`as£π
(
s1h
>=0);

5970 if((
›code2
[
i
]&0xf)==0)

5972 
	`emô_ã°
(
s1h
,s1h);

5973 if(
övît
){

5974 
nŸèkí
=()
out
;

5975 
	`emô_jns
(1);

5977 
	`add_to_lökî
(()
out
,
ba
[
i
],
öã∫Æ
);

5978 
	`emô_js
(0);

5981 if((
›code2
[
i
]&0xf)==1)

5983 
	`emô_ã°
(
s1h
,s1h);

5984 if(
övît
){

5985 
nŸèkí
=()
out
;

5986 
	`emô_js
(1);

5988 
	`add_to_lökî
(()
out
,
ba
[
i
],
öã∫Æ
);

5989 
	`emô_jns
(0);

5995 
	`as£π
(
s1l
>=0);

5996 if((
›code2
[
i
]&0xf)==0)

5998 
	`emô_ã°
(
s1l
,s1l);

5999 if(
övît
){

6000 
nŸèkí
=()
out
;

6001 
	`emô_jns
(1);

6003 
	`add_to_lökî
(()
out
,
ba
[
i
],
öã∫Æ
);

6004 
	`emô_js
(0);

6007 if((
›code2
[
i
]&0xf)==1)

6009 
	`emô_ã°
(
s1l
,s1l);

6010 if(
övît
){

6011 
nŸèkí
=()
out
;

6012 
	`emô_js
(1);

6014 
	`add_to_lökî
(()
out
,
ba
[
i
],
öã∫Æ
);

6015 
	`emô_jns
(0);

6020 if(
övît
) {

6021 #ifde‡
CORTEX_A8_BRANCH_PREDICTION_HACK


6022 if(
m©ch
&&(!
öã∫Æ
||!
is_ds
[(
ba
[
i
]-
°¨t
)>>2])) {

6023 if(
adj
) {

6024 
	`emô_addimm
(
cc
,-
	`CLOCK_ADJUST
(
adj
),cc);

6025 
	`add_to_lökî
(()
out
,
ba
[
i
],
öã∫Æ
);

6027 
	`emô_addn›
(13);

6028 
	`add_to_lökî
(()
out
,
ba
[
i
],
öã∫Æ
*2);

6030 
	`emô_jmp
(0);

6034 if(
adj
Ë
	`emô_addimm
(
cc
,-
	`CLOCK_ADJUST
(adj),cc);

6035 
	`°‹e_ªgs_bt
(
bønch_ªgs
[
i
].
ªgm≠
,bønch_ªgs[i].
is32
,bønch_ªgs[i].
dúty
,
ba
[i]);

6036 
	`lﬂd_ªgs_bt
(
bønch_ªgs
[
i
].
ªgm≠
,bønch_ªgs[i].
is32
,bønch_ªgs[i].
dúty
,
ba
[i]);

6037 if(
öã∫Æ
)

6038 
	`as£m_debug
("branch: internal\n");

6040 
	`as£m_debug
("branch:Éxternal\n");

6041 if(
öã∫Æ
&&
is_ds
[(
ba
[
i
]-
°¨t
)>>2]) {

6042 
	`ds_as£mbÀ_íåy
(
i
);

6045 
	`add_to_lökî
(()
out
,
ba
[
i
],
öã∫Æ
);

6046 
	`emô_jmp
(0);

6049 
	`£t_jump_èrgë
(
nŸèkí
,()
out
);

6052 if(
adj
) {

6053 if(!
övît
Ë
	`emô_addimm
(
cc
,
	`CLOCK_ADJUST
(
adj
),cc);

6061 
nŸèkí
=0;

6062 if(
π1
[
i
]==31) {

6063 
π
,
ªtu∫_addªss
;

6064 
π
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,31);

6065 if(
π
>=0) {

6067 
ªtu∫_addªss
=
°¨t
+
i
*4+8;

6068 
	`emô_movimm
(
ªtu∫_addªss
,
π
);

6069 #ifde‡
IMM_PREFETCH


6070 
	`emô_¥e„tch
(
hash_èbÀ
[((
ªtu∫_addªss
>>16)^return_address)&0xFFFF]);

6074 if(!
unc⁄dôi⁄Æ
) {

6076 if(!
⁄ly32
)

6078 
	`as£π
(
s1h
>=0);

6079 if((
›code2
[
i
]&0x0d)==0)

6081 
	`emô_ã°
(
s1h
,s1h);

6082 
nŸèkí
=()
out
;

6083 
	`emô_jns
(1);

6085 if((
›code2
[
i
]&0x0d)==1)

6087 
	`emô_ã°
(
s1h
,s1h);

6088 
nŸèkí
=()
out
;

6089 
	`emô_js
(1);

6094 
	`as£π
(
s1l
>=0);

6095 if((
›code2
[
i
]&0x0d)==0)

6097 
	`emô_ã°
(
s1l
,s1l);

6098 
nŸèkí
=()
out
;

6099 
	`emô_jns
(1);

6101 if((
›code2
[
i
]&0x0d)==1)

6103 
	`emô_ã°
(
s1l
,s1l);

6104 
nŸèkí
=()
out
;

6105 
	`emô_js
(1);

6109 
adj
;

6110 
uöt64_t
 
ds_u¬ìded
=
bønch_ªgs
[
i
].
u
;

6111 
uöt64_t
 
ds_u¬ìded_uµî
=
bønch_ªgs
[
i
].
uu
;

6112 
ds_u¬ìded
&=~((1LL<<
rs1
[
i
+1])|(1LL<<
rs2
[i+1]));

6113 
ds_u¬ìded_uµî
&=~((1LL<<
us1
[
i
+1])|(1LL<<
us2
[i+1]));

6114 if((~
ds_u¬ìded_uµî
>>
π1
[
i
+1])&1Ëds_u¬ìded_uµî&=~((1LL<<
dï1
[i+1])|(1LL<<
dï2
[i+1]));

6115 
ds_u¬ìded
|=1;

6116 
ds_u¬ìded_uµî
|=1;

6118 if(!
√vîèkí
) {

6120 
	`wb_övÆid©e
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
dúty
,ªgs[i].
is32
,

6121 
ds_u¬ìded
,
ds_u¬ìded_uµî
);

6123 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
was32
,
rs1
[i+1],
rs2
[i+1]);

6124 
	`addªss_gíî©i⁄
(
i
+1,&
bønch_ªgs
[i],0);

6125 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
was32
,
CCREG
,
INVCP
);

6126 
	`ds_as£mbÀ
(
i
+1,&
bønch_ªgs
[i]);

6127 
cc
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
CCREG
);

6128 if(
cc
==-1) {

6129 
	`emô_lﬂdªg
(
CCREG
,
cc
=
HOST_CCREG
);

6132 
	`as£π
(
cc
==
HOST_CCREG
);

6133 
	`°‹e_ªgs_bt
(
bønch_ªgs
[
i
].
ªgm≠
,bønch_ªgs[i].
is32
,bønch_ªgs[i].
dúty
,
ba
[i]);

6134 
	`do_cc
(
i
,
i_ªgm≠
,&
adj
,
ba
[i],
TAKEN
,0);

6135 
	`as£m_debug
("cycle count (adj)\n");

6136 if(
adj
Ë
	`emô_addimm
(
cc
,
	`CLOCK_ADJUST
(
cˇdj
[
i
]+2-adj),cc);

6137 
	`lﬂd_ªgs_bt
(
bønch_ªgs
[
i
].
ªgm≠
,bønch_ªgs[i].
is32
,bønch_ªgs[i].
dúty
,
ba
[i]);

6138 if(
öã∫Æ
)

6139 
	`as£m_debug
("branch: internal\n");

6141 
	`as£m_debug
("branch:Éxternal\n");

6142 if(
öã∫Æ
&&
is_ds
[(
ba
[
i
]-
°¨t
)>>2]) {

6143 
	`ds_as£mbÀ_íåy
(
i
);

6146 
	`add_to_lökî
(()
out
,
ba
[
i
],
öã∫Æ
);

6147 
	`emô_jmp
(0);

6151 
c›1_ußbÀ
=
¥ev_c›1_ußbÀ
;

6152 if(!
unc⁄dôi⁄Æ
) {

6153 
	`£t_jump_èrgë
(
nŸèkí
,()
out
);

6154 
	`as£m_debug
("1:\n");

6155 if(!
likñy
[
i
]) {

6156 
	`wb_övÆid©e
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
dúty
,ªgs[i].
is32
,

6157 
ds_u¬ìded
,
ds_u¬ìded_uµî
);

6158 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
was32
,
rs1
[i+1],
rs2
[i+1]);

6159 
	`addªss_gíî©i⁄
(
i
+1,&
bønch_ªgs
[i],0);

6160 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
was32
,
CCREG
,CCREG);

6161 
	`ds_as£mbÀ
(
i
+1,&
bønch_ªgs
[i]);

6163 
cc
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
CCREG
);

6164 if(
cc
==-1&&!
likñy
[
i
]) {

6166 
	`emô_lﬂdªg
(
CCREG
,
HOST_CCREG
);

6167 
	`emô_addimm_™d_£t_Êags
(
	`CLOCK_ADJUST
(
cˇdj
[
i
]+2),
HOST_CCREG
);

6168 
jaddr
=()
out
;

6169 
	`emô_jns
(0);

6170 
	`add_°ub
(
CC_STUB
,
jaddr
,()
out
,0,
i
,
°¨t
+i*4+8,
NOTTAKEN
,0);

6171 
	`emô_°‹îeg
(
CCREG
,
HOST_CCREG
);

6174 
cc
=
	`gë_ªg
(
i_ªgm≠
,
CCREG
);

6175 
	`as£π
(
cc
==
HOST_CCREG
);

6176 
	`emô_addimm_™d_£t_Êags
(
	`CLOCK_ADJUST
(
cˇdj
[
i
]+2),
cc
);

6177 
jaddr
=()
out
;

6178 
	`emô_jns
(0);

6179 
	`add_°ub
(
CC_STUB
,
jaddr
,()
out
,0,
i
,
°¨t
+i*4+8,
likñy
[i]?
NULLDS
:
NOTTAKEN
,0);

6183 
	}
}

6185 
	$fjump_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

6187 sig√d *
i_ªgm≠
=
i_ªgs
->
ªgm≠
;

6188 
cc
;

6189 
m©ch
;

6190 
m©ch
=
	`m©ch_bt
(
bønch_ªgs
[
i
].
ªgm≠
,bønch_ªgs[i].
is32
,bønch_ªgs[i].
dúty
,
ba
[i]);

6191 
	`as£m_debug
("fm©ch=%d\n",
m©ch
);

6192 
fs
,
cs
;

6193 
óddr
;

6194 
övît
=0;

6195 
öã∫Æ
=
	`öã∫Æ_bønch
(
bønch_ªgs
[
i
].
is32
,
ba
[i]);

6196 if(
i
==(
ba
[i]-
°¨t
)>>2Ë
	`as£m_debug
("idleÜoop\n");

6197 if(!
m©ch
Ë
övît
=1;

6198 #ifde‡
CORTEX_A8_BRANCH_PREDICTION_HACK


6199 if(
i
>(
ba
[i]-
°¨t
)>>2Ë
övît
=1;

6202 if(
ooo
[
i
]) {

6203 
fs
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
FSREG
);

6204 
	`addªss_gíî©i⁄
(
i
+1,
i_ªgs
,
ªgs
[i].
ªgm≠_íåy
);

6207 
fs
=
	`gë_ªg
(
i_ªgm≠
,
FSREG
);

6211 if(!
c›1_ußbÀ
) {

6212 
cs
=
	`gë_ªg
(
i_ªgm≠
,
CSREG
);

6213 
	`as£π
(
cs
>=0);

6214 
	`emô_ã°imm
(
cs
,0x20000000);

6215 
óddr
=()
out
;

6216 
	`emô_jeq
(0);

6217 
	`add_°ub
(
FP_STUB
,
óddr
,()
out
,
i
,
cs
,()
i_ªgs
,0,0);

6218 
c›1_ußbÀ
=1;

6221 if(
ooo
[
i
]) {

6224 
	`ds_as£mbÀ
(
i
+1,
i_ªgs
);

6225 
adj
;

6226 
uöt64_t
 
bc_u¬ìded
=
bønch_ªgs
[
i
].
u
;

6227 
uöt64_t
 
bc_u¬ìded_uµî
=
bønch_ªgs
[
i
].
uu
;

6228 
bc_u¬ìded
&=~((1LL<<
rs1
[
i
])|(1LL<<
rs2
[i]));

6229 
bc_u¬ìded_uµî
&=~((1LL<<
us1
[
i
])|(1LL<<
us2
[i]));

6230 
bc_u¬ìded
|=1;

6231 
bc_u¬ìded_uµî
|=1;

6232 
	`wb_övÆid©e
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
dúty
,ªgs[i].
is32
,

6233 
bc_u¬ìded
,
bc_u¬ìded_uµî
);

6234 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
was32
,
rs1
[i],rs1[i]);

6235 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
was32
,
CCREG
,CCREG);

6236 
cc
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
CCREG
);

6237 
	`as£π
(
cc
==
HOST_CCREG
);

6238 
	`do_cc
(
i
,
bønch_ªgs
[i].
ªgm≠
,&
adj
,-1,0,
övît
);

6239 
	`as£m_debug
("cycle count (adj)\n");

6241 
nŸèkí
=0;

6242 if(
adj
&&!
övît
Ë
	`emô_addimm
(
cc
,
	`CLOCK_ADJUST
(
cˇdj
[
i
]+2-adj),cc);

6244 
	`as£π
(
fs
>=0);

6245 
	`emô_ã°imm
(
fs
,0x800000);

6246 if(
sour˚
[
i
]&0x10000)

6248 if(
övît
){

6249 
nŸèkí
=()
out
;

6250 
	`emô_jeq
(1);

6252 
	`add_to_lökî
(()
out
,
ba
[
i
],
öã∫Æ
);

6253 
	`emô_j√
(0);

6257 if(
övît
){

6258 
nŸèkí
=()
out
;

6259 
	`emô_j√
(1);

6261 
	`add_to_lökî
(()
out
,
ba
[
i
],
öã∫Æ
);

6262 
	`emô_jeq
(0);

6268 if(
övît
) {

6269 if(
adj
Ë
	`emô_addimm
(
cc
,-
	`CLOCK_ADJUST
(adj),cc);

6270 #ifde‡
CORTEX_A8_BRANCH_PREDICTION_HACK


6271 if(
m©ch
Ë
	`emô_addn›
(13);

6273 
	`°‹e_ªgs_bt
(
bønch_ªgs
[
i
].
ªgm≠
,bønch_ªgs[i].
is32
,bønch_ªgs[i].
dúty
,
ba
[i]);

6274 
	`lﬂd_ªgs_bt
(
bønch_ªgs
[
i
].
ªgm≠
,bønch_ªgs[i].
is32
,bønch_ªgs[i].
dúty
,
ba
[i]);

6275 if(
öã∫Æ
)

6276 
	`as£m_debug
("branch: internal\n");

6278 
	`as£m_debug
("branch:Éxternal\n");

6279 if(
öã∫Æ
&&
is_ds
[(
ba
[
i
]-
°¨t
)>>2]) {

6280 
	`ds_as£mbÀ_íåy
(
i
);

6283 
	`add_to_lökî
(()
out
,
ba
[
i
],
öã∫Æ
);

6284 
	`emô_jmp
(0);

6286 
	`£t_jump_èrgë
(
nŸèkí
,()
out
);

6289 if(
adj
) {

6290 if(!
övît
Ë
	`emô_addimm
(
cc
,
	`CLOCK_ADJUST
(
adj
),cc);

6298 
nŸèkí
=0;

6302 
	`as£π
(
fs
>=0);

6303 
	`emô_ã°imm
(
fs
,0x800000);

6304 if(
sour˚
[
i
]&0x10000)

6306 
nŸèkí
=()
out
;

6307 
	`emô_jeq
(1);

6311 
nŸèkí
=()
out
;

6312 
	`emô_j√
(1);

6316 
adj
;

6317 
uöt64_t
 
ds_u¬ìded
=
bønch_ªgs
[
i
].
u
;

6318 
uöt64_t
 
ds_u¬ìded_uµî
=
bønch_ªgs
[
i
].
uu
;

6319 
ds_u¬ìded
&=~((1LL<<
rs1
[
i
+1])|(1LL<<
rs2
[i+1]));

6320 
ds_u¬ìded_uµî
&=~((1LL<<
us1
[
i
+1])|(1LL<<
us2
[i+1]));

6321 if((~
ds_u¬ìded_uµî
>>
π1
[
i
+1])&1Ëds_u¬ìded_uµî&=~((1LL<<
dï1
[i+1])|(1LL<<
dï2
[i+1]));

6322 
ds_u¬ìded
|=1;

6323 
ds_u¬ìded_uµî
|=1;

6326 
	`wb_övÆid©e
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
dúty
,ªgs[i].
is32
,

6327 
ds_u¬ìded
,
ds_u¬ìded_uµî
);

6329 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
was32
,
rs1
[i+1],
rs2
[i+1]);

6330 
	`addªss_gíî©i⁄
(
i
+1,&
bønch_ªgs
[i],0);

6331 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
was32
,
CCREG
,
INVCP
);

6332 
	`ds_as£mbÀ
(
i
+1,&
bønch_ªgs
[i]);

6333 
cc
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
CCREG
);

6334 if(
cc
==-1) {

6335 
	`emô_lﬂdªg
(
CCREG
,
cc
=
HOST_CCREG
);

6338 
	`as£π
(
cc
==
HOST_CCREG
);

6339 
	`°‹e_ªgs_bt
(
bønch_ªgs
[
i
].
ªgm≠
,bønch_ªgs[i].
is32
,bønch_ªgs[i].
dúty
,
ba
[i]);

6340 
	`do_cc
(
i
,
i_ªgm≠
,&
adj
,
ba
[i],
TAKEN
,0);

6341 
	`as£m_debug
("cycle count (adj)\n");

6342 if(
adj
Ë
	`emô_addimm
(
cc
,
	`CLOCK_ADJUST
(
cˇdj
[
i
]+2-adj),cc);

6343 
	`lﬂd_ªgs_bt
(
bønch_ªgs
[
i
].
ªgm≠
,bønch_ªgs[i].
is32
,bønch_ªgs[i].
dúty
,
ba
[i]);

6344 if(
öã∫Æ
)

6345 
	`as£m_debug
("branch: internal\n");

6347 
	`as£m_debug
("branch:Éxternal\n");

6348 if(
öã∫Æ
&&
is_ds
[(
ba
[
i
]-
°¨t
)>>2]) {

6349 
	`ds_as£mbÀ_íåy
(
i
);

6352 
	`add_to_lökî
(()
out
,
ba
[
i
],
öã∫Æ
);

6353 
	`emô_jmp
(0);

6358 
	`£t_jump_èrgë
(
nŸèkí
,()
out
);

6359 
	`as£m_debug
("1:\n");

6360 if(!
likñy
[
i
]) {

6361 
	`wb_övÆid©e
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
dúty
,ªgs[i].
is32
,

6362 
ds_u¬ìded
,
ds_u¬ìded_uµî
);

6363 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
was32
,
rs1
[i+1],
rs2
[i+1]);

6364 
	`addªss_gíî©i⁄
(
i
+1,&
bønch_ªgs
[i],0);

6365 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠
,
bønch_ªgs
[i].ªgm≠,ªgs[i].
was32
,
CCREG
,CCREG);

6366 
	`ds_as£mbÀ
(
i
+1,&
bønch_ªgs
[i]);

6368 
cc
=
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
CCREG
);

6369 if(
cc
==-1&&!
likñy
[
i
]) {

6371 
	`emô_lﬂdªg
(
CCREG
,
HOST_CCREG
);

6372 
	`emô_addimm_™d_£t_Êags
(
	`CLOCK_ADJUST
(
cˇdj
[
i
]+2),
HOST_CCREG
);

6373 
jaddr
=()
out
;

6374 
	`emô_jns
(0);

6375 
	`add_°ub
(
CC_STUB
,
jaddr
,()
out
,0,
i
,
°¨t
+i*4+8,
NOTTAKEN
,0);

6376 
	`emô_°‹îeg
(
CCREG
,
HOST_CCREG
);

6379 
cc
=
	`gë_ªg
(
i_ªgm≠
,
CCREG
);

6380 
	`as£π
(
cc
==
HOST_CCREG
);

6381 
	`emô_addimm_™d_£t_Êags
(
	`CLOCK_ADJUST
(
cˇdj
[
i
]+2),
cc
);

6382 
jaddr
=()
out
;

6383 
	`emô_jns
(0);

6384 
	`add_°ub
(
CC_STUB
,
jaddr
,()
out
,0,
i
,
°¨t
+i*4+8,
likñy
[i]?
NULLDS
:
NOTTAKEN
,0);

6388 
	}
}

6390 
	$∑ge•™_as£mbÀ
(
i
,
ªg°©
 *
i_ªgs
)

6392 
s1l
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]);

6393 
s1h
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs1
[
i
]|64);

6394 
s2l
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]);

6395 
s2h
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
rs2
[
i
]|64);

6396 *
¡_bønch
=
NULL
;

6397 
èkí
=0;

6398 
nŸèkí
=0;

6399 
unc⁄dôi⁄Æ
=0;

6400 if(
rs1
[
i
]==0)

6402 
s1l
=
s2l
;
s1h
=
s2h
;

6403 
s2l
=
s2h
=-1;

6405 if(
rs2
[
i
]==0)

6407 
s2l
=
s2h
=-1;

6409 if((
i_ªgs
->
is32
>>
rs1
[
i
])&(i_ªgs->is32>>
rs2
[i])&1) {

6410 
s1h
=
s2h
=-1;

6412 
hr
=0;

6413 
addr
,
Æt
,
¡addr
;

6414 if(
i_ªgs
->
ªgm≠
[
HOST_BTREG
]<0Ë{
addr
=HOST_BTREG;}

6416 
hr
<
HOST_REGS
)

6418 if(
hr
!=
EXCLUDE_REG
 && hr!=
HOST_CCREG
 &&

6419 (
i_ªgs
->
ªgm≠
[
hr
]&63)!=
rs1
[
i
] &&

6420 (
i_ªgs
->
ªgm≠
[
hr
]&63)!=
rs2
[
i
] )

6422 
addr
=
hr
++;;

6424 
hr
++;

6427 
hr
<
HOST_REGS
)

6429 if(
hr
!=
EXCLUDE_REG
 && hr!=
HOST_CCREG
 && hr!=
HOST_BTREG
 &&

6430 (
i_ªgs
->
ªgm≠
[
hr
]&63)!=
rs1
[
i
] &&

6431 (
i_ªgs
->
ªgm≠
[
hr
]&63)!=
rs2
[
i
] )

6433 
Æt
=
hr
++;;

6435 
hr
++;

6437 if((
›code
[
i
]&0x2E)==6)

6439 
hr
<
HOST_REGS
)

6441 if(
hr
!=
EXCLUDE_REG
 && hr!=
HOST_CCREG
 && hr!=
HOST_BTREG
 &&

6442 (
i_ªgs
->
ªgm≠
[
hr
]&63)!=
rs1
[
i
] &&

6443 (
i_ªgs
->
ªgm≠
[
hr
]&63)!=
rs2
[
i
] )

6445 
¡addr
=
hr
;;

6447 
hr
++;

6450 
	`as£π
(
hr
<
HOST_REGS
);

6451 if((
›code
[
i
]&0x2e)==4||opcode[i]==0x11) {

6452 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠_íåy
,ªgs[i].
ªgm≠
,ªgs[i].
was32
,
CCREG
,CCREG);

6454 
	`emô_addimm
(
HOST_CCREG
,
	`CLOCK_ADJUST
(
cˇdj
[
i
]+2),HOST_CCREG);

6455 if(
›code
[
i
]==2)

6457 
unc⁄dôi⁄Æ
=1;

6459 if(
›code
[
i
]==3)

6462 
π
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,31);

6463 
	`emô_movimm
(
°¨t
+
i
*4+8,
π
);

6464 
unc⁄dôi⁄Æ
=1;

6466 if(
›code
[
i
]==0&&(
›code2
[i]&0x3E)==8)

6468 
	`emô_mov
(
s1l
,
addr
);

6469 if(
›code2
[
i
]==9)

6471 
π
=
	`gë_ªg
(
i_ªgs
->
ªgm≠
,
π1
[
i
]);

6472 
	`emô_movimm
(
°¨t
+
i
*4+8,
π
);

6475 if((
›code
[
i
]&0x3f)==4)

6477 if(
rs1
[
i
]==
rs2
[i])

6479 
unc⁄dôi⁄Æ
=1;

6482 #ifde‡
HAVE_CMOV_IMM


6483 if(
s1h
<0) {

6484 if(
s2l
>=0Ë
	`emô_cmp
(
s1l
,s2l);

6485 
	`emô_ã°
(
s1l
,s1l);

6486 
	`emô_cmov2imm_e_√_com∑˘
(
ba
[
i
],
°¨t
+i*4+8,
addr
);

6491 
	`as£π
(
s1l
>=0);

6492 
	`emô_mov2imm_com∑˘
(
ba
[
i
],
addr
,
°¨t
+i*4+8,
Æt
);

6493 if(
s1h
>=0) {

6494 if(
s2h
>=0Ë
	`emô_cmp
(
s1h
,s2h);

6495 
	`emô_ã°
(
s1h
,s1h);

6496 
	`emô_cmov√_ªg
(
Æt
,
addr
);

6498 if(
s2l
>=0Ë
	`emô_cmp
(
s1l
,s2l);

6499 
	`emô_ã°
(
s1l
,s1l);

6500 
	`emô_cmov√_ªg
(
Æt
,
addr
);

6503 if((
›code
[
i
]&0x3f)==5)

6505 #ifde‡
HAVE_CMOV_IMM


6506 if(
s1h
<0) {

6507 if(
s2l
>=0Ë
	`emô_cmp
(
s1l
,s2l);

6508 
	`emô_ã°
(
s1l
,s1l);

6509 
	`emô_cmov2imm_e_√_com∑˘
(
°¨t
+
i
*4+8,
ba
[i],
addr
);

6514 
	`as£π
(
s1l
>=0);

6515 
	`emô_mov2imm_com∑˘
(
°¨t
+
i
*4+8,
addr
,
ba
[i],
Æt
);

6516 if(
s1h
>=0) {

6517 if(
s2h
>=0Ë
	`emô_cmp
(
s1h
,s2h);

6518 
	`emô_ã°
(
s1h
,s1h);

6519 
	`emô_cmov√_ªg
(
Æt
,
addr
);

6521 if(
s2l
>=0Ë
	`emô_cmp
(
s1l
,s2l);

6522 
	`emô_ã°
(
s1l
,s1l);

6523 
	`emô_cmov√_ªg
(
Æt
,
addr
);

6526 if((
›code
[
i
]&0x3f)==0x14)

6528 if(
s1h
>=0) {

6529 if(
s2h
>=0Ë
	`emô_cmp
(
s1h
,s2h);

6530 
	`emô_ã°
(
s1h
,s1h);

6531 
nŸèkí
=()
out
;

6532 
	`emô_j√
(0);

6534 if(
s2l
>=0Ë
	`emô_cmp
(
s1l
,s2l);

6535 
	`emô_ã°
(
s1l
,s1l);

6536 if(
nŸèkí
Ë
	`£t_jump_èrgë
“Ÿèkí,()
out
);

6537 
nŸèkí
=()
out
;

6538 
	`emô_j√
(0);

6540 if((
›code
[
i
]&0x3f)==0x15)

6542 if(
s1h
>=0) {

6543 if(
s2h
>=0Ë
	`emô_cmp
(
s1h
,s2h);

6544 
	`emô_ã°
(
s1h
,s1h);

6545 
èkí
=()
out
;

6546 
	`emô_j√
(0);

6548 if(
s2l
>=0Ë
	`emô_cmp
(
s1l
,s2l);

6549 
	`emô_ã°
(
s1l
,s1l);

6550 
nŸèkí
=()
out
;

6551 
	`emô_jeq
(0);

6552 if(
èkí
Ë
	`£t_jump_èrgë
—akí,()
out
);

6554 if((
›code
[
i
]&0x3f)==6)

6556 
	`emô_mov2imm_com∑˘
(
ba
[
i
],
Æt
,
°¨t
+i*4+8,
addr
);

6557 
	`emô_cmpimm
(
s1l
,1);

6558 if(
s1h
>=0Ë
	`emô_mov
(
addr
,
¡addr
);

6559 
	`emô_cmovl_ªg
(
Æt
,
addr
);

6560 if(
s1h
>=0) {

6561 
	`emô_ã°
(
s1h
,s1h);

6562 
	`emô_cmov√_ªg
(
¡addr
,
addr
);

6563 
	`emô_cmovs_ªg
(
Æt
,
addr
);

6566 if((
›code
[
i
]&0x3f)==7)

6568 
	`emô_mov2imm_com∑˘
(
ba
[
i
],
addr
,
°¨t
+i*4+8,
¡addr
);

6569 
	`emô_cmpimm
(
s1l
,1);

6570 if(
s1h
>=0Ë
	`emô_mov
(
addr
,
Æt
);

6571 
	`emô_cmovl_ªg
(
¡addr
,
addr
);

6572 if(
s1h
>=0) {

6573 
	`emô_ã°
(
s1h
,s1h);

6574 
	`emô_cmov√_ªg
(
Æt
,
addr
);

6575 
	`emô_cmovs_ªg
(
¡addr
,
addr
);

6578 if((
›code
[
i
]&0x3f)==0x16)

6580 
	`as£π
((
›code
[
i
]&0x3f)!=0x16);

6582 if((
›code
[
i
]&0x3f)==0x17)

6584 
	`as£π
((
›code
[
i
]&0x3f)!=0x17);

6586 
	`as£π
(
›code
[
i
]!=1);

6589 if(
›code
[
i
]==0x11 && 
›code2
[i]==0x08 ) {

6590 if((
sour˚
[
i
]&0x30000)==0)

6592 
	`emô_mov2imm_com∑˘
(
ba
[
i
],
addr
,
°¨t
+i*4+8,
Æt
);

6593 
	`emô_ã°imm
(
s1l
,0x800000);

6594 
	`emô_cmov√_ªg
(
Æt
,
addr
);

6596 if((
sour˚
[
i
]&0x30000)==0x10000)

6598 
	`emô_mov2imm_com∑˘
(
ba
[
i
],
Æt
,
°¨t
+i*4+8,
addr
);

6599 
	`emô_ã°imm
(
s1l
,0x800000);

6600 
	`emô_cmov√_ªg
(
Æt
,
addr
);

6602 if((
sour˚
[
i
]&0x30000)==0x20000)

6604 
	`emô_ã°imm
(
s1l
,0x800000);

6605 
nŸèkí
=()
out
;

6606 
	`emô_j√
(0);

6608 if((
sour˚
[
i
]&0x30000)==0x30000)

6610 
	`emô_ã°imm
(
s1l
,0x800000);

6611 
nŸèkí
=()
out
;

6612 
	`emô_jeq
(0);

6616 
	`as£π
(
i_ªgs
->
ªgm≠
[
HOST_CCREG
]==
CCREG
);

6617 
	`wb_dútys
(
ªgs
[
i
].
ªgm≠
,ªgs[i].
is32
,ªgs[i].
dúty
);

6618 if(
likñy
[
i
]||
unc⁄dôi⁄Æ
)

6620 
	`emô_movimm
(
ba
[
i
],
HOST_BTREG
);

6622 if(
addr
!=
HOST_BTREG
)

6624 
	`emô_mov
(
addr
,
HOST_BTREG
);

6626 *
bønch_addr
=
out
;

6627 
	`emô_jmp
(0);

6628 
èrgë_addr
=
°¨t
+
i
*4+5;

6629 *
°ub
=
out
;

6630 *
compûed_èrgë_addr
=
	`check_addr
(
èrgë_addr
);

6631 
	`emô_extjump_ds
(()
bønch_addr
,
èrgë_addr
);

6632 if(
compûed_èrgë_addr
) {

6633 
	`£t_jump_èrgë
(()
bønch_addr
,()
compûed_èrgë_addr
);

6634 
	`add_lök
(
èrgë_addr
,
°ub
);

6636 
	`£t_jump_èrgë
(()
bønch_addr
,()
°ub
);

6637 if(
likñy
[
i
]) {

6639 
	`£t_jump_èrgë
(()
nŸèkí
,()
out
);

6640 
	`wb_dútys
(
ªgs
[
i
].
ªgm≠
,ªgs[i].
is32
,ªgs[i].
dúty
);

6641 *
bønch_addr
=
out
;

6642 
	`emô_jmp
(0);

6643 
èrgë_addr
=
°¨t
+
i
*4+8;

6644 *
°ub
=
out
;

6645 *
compûed_èrgë_addr
=
	`check_addr
(
èrgë_addr
);

6646 
	`emô_extjump_ds
(()
bønch_addr
,
èrgë_addr
);

6647 if(
compûed_èrgë_addr
) {

6648 
	`£t_jump_èrgë
(()
bønch_addr
,()
compûed_èrgë_addr
);

6649 
	`add_lök
(
èrgë_addr
,
°ub
);

6651 
	`£t_jump_èrgë
(()
bønch_addr
,()
°ub
);

6653 
	}
}

6656 
	$∑ge•™_ds
()

6658 
	`as£m_debug
("initial delay slot:\n");

6659 
u_öt
 
vaddr
=
°¨t
+1;

6660 
u_öt
 
∑ge
=
	`gë_∑ge
(
vaddr
);

6661 
u_öt
 
v∑ge
=
	`gë_v∑ge
(
vaddr
);

6662 
	`Œ_add
(
jump_dúty
+
v∑ge
,
vaddr
,(*)
out
);

6663 
	`do_dúty_°ub_ds
();

6664 
	`Œ_add
(
jump_ö
+
∑ge
,
vaddr
,(*)
out
);

6665 
	`as£π
(
ªgs
[0].
ªgm≠_íåy
[
HOST_CCREG
]==
CCREG
);

6666 if(
ªgs
[0].
ªgm≠
[
HOST_CCREG
]!=
CCREG
)

6667 
	`wb_ªgi°î
(
CCREG
,
ªgs
[0].
ªgm≠_íåy
,ªgs[0].
wasdúty
,ªgs[0].
was32
);

6668 if(
ªgs
[0].
ªgm≠
[
HOST_BTREG
]!=
BTREG
)

6669 
	`emô_wrôew‹d
(
HOST_BTREG
,()&
bønch_èrgë
);

6670 
	`lﬂd_ªgs
(
ªgs
[0].
ªgm≠_íåy
,ªgs[0].
ªgm≠
,ªgs[0].
was32
,
rs1
[0],
rs2
[0]);

6671 
	`addªss_gíî©i⁄
(0,&
ªgs
[0],ªgs[0].
ªgm≠_íåy
);

6672 if(
ôy≥
[0]==
STORE
||ôy≥[0]==
STORELR
||(
›code
[0]&0x3b)==0x39||(opcode[0]&0x3b)==0x3a)

6673 
	`lﬂd_ªgs
(
ªgs
[0].
ªgm≠_íåy
,ªgs[0].
ªgm≠
,ªgs[0].
was32
,
INVCP
,INVCP);

6674 
c›1_ußbÀ
=0;

6675 
is_dñay¶Ÿ
=0;

6676 
ôy≥
[0]) {

6677 
ALU
:

6678 
	`Æu_as£mbÀ
(0,&
ªgs
[0]);;

6679 
IMM16
:

6680 
	`imm16_as£mbÀ
(0,&
ªgs
[0]);;

6681 
SHIFT
:

6682 
	`shi·_as£mbÀ
(0,&
ªgs
[0]);;

6683 
SHIFTIMM
:

6684 
	`shi·imm_as£mbÀ
(0,&
ªgs
[0]);;

6685 
LOAD
:

6686 
	`lﬂd_as£mbÀ
(0,&
ªgs
[0]);;

6687 
LOADLR
:

6688 
	`lﬂdÃ_as£mbÀ
(0,&
ªgs
[0]);;

6689 
STORE
:

6690 
	`°‹e_as£mbÀ
(0,&
ªgs
[0]);;

6691 
STORELR
:

6692 
	`°‹ñr_as£mbÀ
(0,&
ªgs
[0]);;

6693 
COP0
:

6694 
	`c›0_as£mbÀ
(0,&
ªgs
[0]);;

6695 
COP1
:

6696 
	`c›1_as£mbÀ
(0,&
ªgs
[0]);;

6697 
C1LS
:

6698 
	`c1ls_as£mbÀ
(0,&
ªgs
[0]);;

6699 
COP2
:

6700 
	`c›2_as£mbÀ
(0,&
ªgs
[0]);;

6701 
C2LS
:

6702 
	`c2ls_as£mbÀ
(0,&
ªgs
[0]);;

6703 
C2OP
:

6704 
	`c2›_as£mbÀ
(0,&
ªgs
[0]);;

6705 
FCONV
:

6706 
	`fc⁄v_as£mbÀ
(0,&
ªgs
[0]);;

6707 
FLOAT
:

6708 
	`Êﬂt_as£mbÀ
(0,&
ªgs
[0]);;

6709 
FCOMP
:

6710 
	`fcomp_as£mbÀ
(0,&
ªgs
[0]);;

6711 
MULTDIV
:

6712 
	`mu…div_as£mbÀ
(0,&
ªgs
[0]);;

6713 
MOV
:

6714 
	`mov_as£mbÀ
(0,&
ªgs
[0]);;

6715 
SYSCALL
:

6716 
HLECALL
:

6717 
INTCALL
:

6718 
SPAN
:

6719 
UJUMP
:

6720 
RJUMP
:

6721 
CJUMP
:

6722 
SJUMP
:

6723 
FJUMP
:

6724 
	`SysPrötf
("Jump inÅhe delay slot. This isÖrobablyá bug.\n");

6726 
bèddr
=
	`gë_ªg
(
ªgs
[0].
ªgm≠
,
BTREG
);

6727 if(
bèddr
<0) {

6728 
bèddr
=
	`gë_ªg
(
ªgs
[0].
ªgm≠
,-1);

6729 
	`emô_ªadw‹d
(()&
bønch_èrgë
,
bèddr
);

6731 
	`as£π
(
bèddr
!=
HOST_CCREG
);

6732 if(
ªgs
[0].
ªgm≠
[
HOST_CCREG
]!=
CCREG
Ë
	`emô_lﬂdªg
(CCREG,HOST_CCREG);

6733 #ifde‡
HOST_IMM8


6734 
	`emô_movimm
(
°¨t
+4,
HOST_TEMPREG
);

6735 
	`emô_cmp
(
bèddr
,
HOST_TEMPREG
);

6737 
	`emô_cmpimm
(
bèddr
,
°¨t
+4);

6739 
bønch
=()
out
;

6740 
	`emô_jeq
(0);

6741 
	`°‹e_ªgs_bt
(
ªgs
[0].
ªgm≠
,ªgs[0].
is32
,ªgs[0].
dúty
,-1);

6742 
	`emô_jmp
(
jump_vaddr_ªg
[
bèddr
]);

6743 
	`£t_jump_èrgë
(
bønch
,()
out
);

6744 
	`°‹e_ªgs_bt
(
ªgs
[0].
ªgm≠
,ªgs[0].
is32
,ªgs[0].
dúty
,
°¨t
+4);

6745 
	`lﬂd_ªgs_bt
(
ªgs
[0].
ªgm≠
,ªgs[0].
is32
,ªgs[0].
dúty
,
°¨t
+4);

6746 
	}
}

6749 
	$u¬ìded_ªgi°îs
(
i°¨t
,
õnd
,
r
)

6751 
i
;

6752 
uöt64_t
 
u
,
uu
,
gã_u
,
b
,
bu
,
gã_bu
;

6753 
uöt64_t
 
ãmp_u
,
ãmp_uu
,
ãmp_gã_u
=0;

6754 
uöt64_t
 
tdï
;

6755 
uöt64_t
 
gã_u_unknown
=0;

6756 if(
√w_dy«ªc_hacks
&
NDHACK_GTE_UNNEEDED
)

6757 
gã_u_unknown
=~0ll;

6758 if(
õnd
==
¶í
-1) {

6759 
u
=1;
uu
=1;

6760 
gã_u
=
gã_u_unknown
;

6762 
u
=
u¬ìded_ªg
[
õnd
+1];

6763 
uu
=
u¬ìded_ªg_uµî
[
õnd
+1];

6764 
u
=1;
uu
=1;

6765 
gã_u
=
gã_u¬ìded
[
õnd
+1];

6768 
i
=
õnd
;i>=
i°¨t
;i--)

6771 if(
ôy≥
[
i
]==
RJUMP
||ôy≥[i]==
UJUMP
||ôy≥[i]==
CJUMP
||ôy≥[i]==
SJUMP
||ôy≥[i]==
FJUMP
)

6774 if(
π1
[
i
]==31 && i<
¶í
-2Ë
bt
[i+2]=1;

6776 if(
ba
[
i
]<
°¨t
 || ba[i]>=(°¨t+
¶í
*4))

6779 
u
=1;

6780 
uu
=1;

6781 
gã_u
=
gã_u_unknown
;

6803 
bønch_u¬ìded_ªg
[
i
]=
u
;

6804 
bønch_u¬ìded_ªg_uµî
[
i
]=
uu
;

6806 
tdï
=(~
uu
>>
π1
[
i
+1])&1;

6807 
u
|=(1LL<<
π1
[
i
+1])|(1LL<<
π2
[i+1]);

6808 
uu
|=(1LL<<
π1
[
i
+1])|(1LL<<
π2
[i+1]);

6809 
u
&=~((1LL<<
rs1
[
i
+1])|(1LL<<
rs2
[i+1]));

6810 
uu
&=~((1LL<<
us1
[
i
+1])|(1LL<<
us2
[i+1]));

6811 
uu
&=~((
tdï
<<
dï1
[
i
+1])|—dï<<
dï2
[i+1]));

6812 
u
|=1;
uu
|=1;

6813 
gã_u
|=
gã_π
[
i
+1];

6814 
gã_u
&=~
gã_rs
[
i
+1];

6817 if(
likñy
[
i
]) {

6818 if(
i
<
¶í
-1) {

6819 
u
&=
u¬ìded_ªg
[
i
+2];

6820 
uu
&=
u¬ìded_ªg_uµî
[
i
+2];

6821 
gã_u
&=
gã_u¬ìded
[
i
+2];

6825 
u
=1;

6826 
uu
=1;

6827 
gã_u
=
gã_u_unknown
;

6834 
bt
[(
ba
[
i
]-
°¨t
)>>2]=1;

6835 if(
ba
[
i
]<=
°¨t
+i*4) {

6837 if(
ôy≥
[
i
]==
RJUMP
||ôy≥[i]==
UJUMP
||(
sour˚
[i]>>16)==0x1000)

6840 
ãmp_u
=1;
ãmp_uu
=1;

6841 
ãmp_gã_u
=0;

6844 
ãmp_u
=
u¬ìded_ªg
[
i
+2];

6845 
ãmp_uu
=
u¬ìded_ªg_uµî
[
i
+2];

6846 
ãmp_gã_u
&=
gã_u¬ìded
[
i
+2];

6849 
tdï
=(~
ãmp_uu
>>
π1
[
i
+1])&1;

6850 
ãmp_u
|=(1LL<<
π1
[
i
+1])|(1LL<<
π2
[i+1]);

6851 
ãmp_uu
|=(1LL<<
π1
[
i
+1])|(1LL<<
π2
[i+1]);

6852 
ãmp_u
&=~((1LL<<
rs1
[
i
+1])|(1LL<<
rs2
[i+1]));

6853 
ãmp_uu
&=~((1LL<<
us1
[
i
+1])|(1LL<<
us2
[i+1]));

6854 
ãmp_uu
&=~((
tdï
<<
dï1
[
i
+1])|—dï<<
dï2
[i+1]));

6855 
ãmp_u
|=1;
ãmp_uu
|=1;

6856 
ãmp_gã_u
|=
gã_π
[
i
+1];

6857 
ãmp_gã_u
&=~
gã_rs
[
i
+1];

6860 if(
likñy
[
i
]) {

6861 if(
i
<
¶í
-1) {

6862 
ãmp_u
&=
u¬ìded_ªg
[
i
+2];

6863 
ãmp_uu
&=
u¬ìded_ªg_uµî
[
i
+2];

6864 
ãmp_gã_u
&=
gã_u¬ìded
[
i
+2];

6868 
ãmp_u
=1;

6869 
ãmp_uu
=1;

6870 
ãmp_gã_u
=
gã_u_unknown
;

6873 
tdï
=(~
ãmp_uu
>>
π1
[
i
])&1;

6874 
ãmp_u
|=(1LL<<
π1
[
i
])|(1LL<<
π2
[i]);

6875 
ãmp_uu
|=(1LL<<
π1
[
i
])|(1LL<<
π2
[i]);

6876 
ãmp_u
&=~((1LL<<
rs1
[
i
])|(1LL<<
rs2
[i]));

6877 
ãmp_uu
&=~((1LL<<
us1
[
i
])|(1LL<<
us2
[i]));

6878 
ãmp_uu
&=~((
tdï
<<
dï1
[
i
])|—dï<<
dï2
[i]));

6879 
ãmp_u
|=1;
ãmp_uu
|=1;

6880 
ãmp_gã_u
|=
gã_π
[
i
];

6881 
ãmp_gã_u
&=~
gã_rs
[
i
];

6882 
u¬ìded_ªg
[
i
]=
ãmp_u
;

6883 
u¬ìded_ªg_uµî
[
i
]=
ãmp_uu
;

6884 
gã_u¬ìded
[
i
]=
ãmp_gã_u
;

6887 if(
r
<2) {

6888 
	`u¬ìded_ªgi°îs
((
ba
[
i
]-
°¨t
)>>2,i-1,
r
+1);

6890 
u¬ìded_ªg
[(
ba
[
i
]-
°¨t
)>>2]=1;

6891 
u¬ìded_ªg_uµî
[(
ba
[
i
]-
°¨t
)>>2]=1;

6892 
gã_u¬ìded
[(
ba
[
i
]-
°¨t
)>>2]=
gã_u_unknown
;

6895 if(
ôy≥
[
i
]==
RJUMP
||ôy≥[i]==
UJUMP
||(
sour˚
[i]>>16)==0x1000)

6898 
u
=
u¬ìded_ªg
[(
ba
[
i
]-
°¨t
)>>2];

6899 
uu
=
u¬ìded_ªg_uµî
[(
ba
[
i
]-
°¨t
)>>2];

6900 
gã_u
=
gã_u¬ìded
[(
ba
[
i
]-
°¨t
)>>2];

6901 
bønch_u¬ìded_ªg
[
i
]=
u
;

6902 
bønch_u¬ìded_ªg_uµî
[
i
]=
uu
;

6908 
tdï
=(~
uu
>>
π1
[
i
+1])&1;

6909 
u
|=(1LL<<
π1
[
i
+1])|(1LL<<
π2
[i+1]);

6910 
uu
|=(1LL<<
π1
[
i
+1])|(1LL<<
π2
[i+1]);

6911 
u
&=~((1LL<<
rs1
[
i
+1])|(1LL<<
rs2
[i+1]));

6912 
uu
&=~((1LL<<
us1
[
i
+1])|(1LL<<
us2
[i+1]));

6913 
uu
&=~((
tdï
<<
dï1
[
i
+1])|—dï<<
dï2
[i+1]));

6914 
u
|=1;
uu
|=1;

6915 
gã_u
|=
gã_π
[
i
+1];

6916 
gã_u
&=~
gã_rs
[
i
+1];

6919 
b
=
u¬ìded_ªg
[(
ba
[
i
]-
°¨t
)>>2];

6920 
bu
=
u¬ìded_ªg_uµî
[(
ba
[
i
]-
°¨t
)>>2];

6921 
gã_bu
=
gã_u¬ìded
[(
ba
[
i
]-
°¨t
)>>2];

6922 
bønch_u¬ìded_ªg
[
i
]=
b
;

6923 
bønch_u¬ìded_ªg_uµî
[
i
]=
bu
;

6929 
tdï
=(~
uu
>>
π1
[
i
+1])&1;

6930 
b
|=(1LL<<
π1
[
i
+1])|(1LL<<
π2
[i+1]);

6931 
bu
|=(1LL<<
π1
[
i
+1])|(1LL<<
π2
[i+1]);

6932 
b
&=~((1LL<<
rs1
[
i
+1])|(1LL<<
rs2
[i+1]));

6933 
bu
&=~((1LL<<
us1
[
i
+1])|(1LL<<
us2
[i+1]));

6934 
bu
&=~((
tdï
<<
dï1
[
i
+1])|—dï<<
dï2
[i+1]));

6935 
b
|=1;
bu
|=1;

6936 
gã_bu
|=
gã_π
[
i
+1];

6937 
gã_bu
&=~
gã_rs
[
i
+1];

6940 if(
likñy
[
i
]) {

6941 
u
=
b
;

6942 
uu
=
bu
;

6943 
gã_u
=
gã_bu
;

6944 if(
i
<
¶í
-1) {

6945 
u
&=
u¬ìded_ªg
[
i
+2];

6946 
uu
&=
u¬ìded_ªg_uµî
[
i
+2];

6947 
gã_u
&=
gã_u¬ìded
[
i
+2];

6952 
u
&=
b
;

6953 
uu
&=
bu
;

6954 
gã_u
&=
gã_bu
;

6958 if(
i
<
¶í
-1) {

6959 
bønch_u¬ìded_ªg
[
i
]&=
u¬ìded_ªg
[i+2];

6960 
bønch_u¬ìded_ªg_uµî
[
i
]&=
u¬ìded_ªg_uµî
[i+2];

6964 
bønch_u¬ìded_ªg
[
i
]=1;

6965 
bønch_u¬ìded_ªg_uµî
[
i
]=1;

6971 if(
ôy≥
[
i
]==
SYSCALL
||ôy≥[i]==
HLECALL
||ôy≥[i]==
INTCALL
)

6974 
u
=1;

6975 
uu
=1;

6977 if(
ôy≥
[
i
]==
COP0
 && (
sour˚
[i]&0x3f)==0x18)

6980 
u
=1;

6981 
uu
=1;

6984 
tdï
=(~
uu
>>
π1
[
i
])&1;

6986 
u
|=1LL<<
π1
[
i
];

6987 
u
|=1LL<<
π2
[
i
];

6988 
uu
|=1LL<<
π1
[
i
];

6989 
uu
|=1LL<<
π2
[
i
];

6990 
gã_u
|=
gã_π
[
i
];

6992 
u
&=~(1LL<<
rs1
[
i
]);

6993 
u
&=~(1LL<<
rs2
[
i
]);

6994 
uu
&=~(1LL<<
us1
[
i
]);

6995 
uu
&=~(1LL<<
us2
[
i
]);

6996 
gã_u
&=~
gã_rs
[
i
];

6997 if(
gã_rs
[
i
]&&
π1
[i]&&(
u¬ìded_ªg
[i+1]&(1ll<<rt1[i])))

6998 
gã_u
|=
gã_rs
[
i
]&
gã_u¬ìded
[i+1];

7000 
uu
&=~(
tdï
<<
dï1
[
i
]);

7001 
uu
&=~(
tdï
<<
dï2
[
i
]);

7003 
u
|=1;
uu
|=1;

7005 
u¬ìded_ªg
[
i
]=
u
;

7006 
u¬ìded_ªg_uµî
[
i
]=
uu
;

7007 
gã_u¬ìded
[
i
]=
gã_u
;

7029 #ifde‡
FORCE32


7030 
i
=
õnd
;i>=
i°¨t
;i--)

7032 
u¬ìded_ªg_uµî
[
i
]=
bønch_u¬ìded_ªg_uµî
[i]=-1LL;

7035 
	}
}

7040 
	$¥ovisi⁄Æ_32bô
()

7042 
i
,
j
;

7043 
uöt64_t
 
is32
=1;

7044 
uöt64_t
 
œ°bønch
=1;

7046 
i
=0;i<
¶í
;i++)

7048 if(
i
>0) {

7049 if(
ôy≥
[
i
-1]==
CJUMP
||ôy≥[i-1]==
SJUMP
||ôy≥[i-1]==
FJUMP
) {

7050 if(
i
>1Ë
is32
=
œ°bønch
;

7051 
is32
=1;

7054 if(
i
>1)

7056 if(
ôy≥
[
i
-2]==
CJUMP
||ôy≥[i-2]==
SJUMP
||ôy≥[i-2]==
FJUMP
) {

7057 if(
likñy
[
i
-2]) {

7058 if(
i
>2Ë
is32
=
œ°bønch
;

7059 
is32
=1;

7062 if((
›code
[
i
-2]&0x2f)==0x05)

7064 if(
rs1
[
i
-2]==0||
rs2
[i-2]==0)

7066 if(
rs1
[
i
-2]) {

7067 
is32
|=1LL<<
rs1
[
i
-2];

7069 if(
rs2
[
i
-2]) {

7070 
is32
|=1LL<<
rs2
[
i
-2];

7077 if(
bt
[
i
])

7079 
uöt64_t
 
ãmp_is32
=
is32
;

7080 
j
=
i
-1;j>=0;j--)

7082 if(
ba
[
j
]==
°¨t
+
i
*4)

7084 
ãmp_is32
&=
p32
[
j
];

7086 
j
=
i
;j<
¶í
;j++)

7088 if(
ba
[
j
]==
°¨t
+
i
*4)

7089 
ãmp_is32
=1;

7091 
is32
=
ãmp_is32
;

7093 
ty≥
=
ôy≥
[
i
];

7094 
›
=
›code
[
i
];

7095 
›2
=
›code2
[
i
];

7096 
π
=
π1
[
i
];

7097 
s1
=
rs1
[
i
];

7098 
s2
=
rs2
[
i
];

7099 if(
ty≥
==
UJUMP
||ty≥==
RJUMP
||ty≥==
CJUMP
||ty≥==
SJUMP
||ty≥==
FJUMP
) {

7101 
ty≥
=
ôy≥
[
i
+1];

7102 
›
=
›code
[
i
+1];

7103 
›2
=
›code2
[
i
+1];

7104 
π
=
π1
[
i
+1];

7105 
s1
=
rs1
[
i
+1];

7106 
s2
=
rs2
[
i
+1];

7107 
œ°bønch
=
is32
;

7109 
ty≥
) {

7110 
LOAD
:

7111 if(
›code
[
i
]==0x27||opcode[i]==0x37||

7112 
›code
[
i
]==0x1A||opcode[i]==0x1B)

7113 
is32
&=~(1LL<<
π
);

7115 
is32
|=1LL<<
π
;

7117 
STORE
:

7118 
STORELR
:

7120 
LOADLR
:

7121 if(
›
==0x1a||›==0x1bË
is32
&=~(1LL<<
π
);

7122 if(
›
==0x22Ë
is32
|=1LL<<
π
;

7124 
IMM16
:

7125 i‡(
›
==0x08||op==0x09||

7126 
›
==0x0a||op==0x0b||

7127 
›
==0x0c||

7128 
›
==0x0f)

7130 
is32
|=1LL<<
π
;

7132 if(
›
==0x18||op==0x19) {

7133 
is32
&=~(1LL<<
π
);

7137 if(
›
==0x0d||op==0x0e) {

7138 
uöt64_t
 
§
=((
is32
>>
s1
)&1LL);

7139 
is32
&=~(1LL<<
π
);

7140 
is32
|=
§
<<
π
;

7143 
UJUMP
:

7145 
RJUMP
:

7147 
CJUMP
:

7149 
SJUMP
:

7151 
FJUMP
:

7153 
ALU
:

7154 if(
›2
>=0x20&&op2<=0x23) {

7155 
is32
|=1LL<<
π
;

7157 if(
›2
==0x2a||op2==0x2b) {

7158 
is32
|=1LL<<
π
;

7160 if(
›2
>=0x24&&op2<=0x27) {

7161 
uöt64_t
 
§
=((
is32
>>
s1
)&(is32>>
s2
)&1LL);

7162 
is32
&=~(1LL<<
π
);

7163 
is32
|=
§
<<
π
;

7165 if(
›2
>=0x2c&&op2<=0x2d) {

7166 if(
s1
==0&&
s2
==0) {

7167 
is32
|=1LL<<
π
;

7169 if(
s2
==0) {

7170 
uöt64_t
 
§
=((
is32
>>
s1
)&1LL);

7171 
is32
&=~(1LL<<
π
);

7172 
is32
|=
§
<<
π
;

7174 if(
s1
==0) {

7175 
uöt64_t
 
§
=((
is32
>>
s2
)&1LL);

7176 
is32
&=~(1LL<<
π
);

7177 
is32
|=
§
<<
π
;

7180 
is32
&=~(1LL<<
π
);

7183 if(
›2
>=0x2e&&op2<=0x2f) {

7184 if(
s1
==0&&
s2
==0) {

7185 
is32
|=1LL<<
π
;

7187 if(
s2
==0) {

7188 
uöt64_t
 
§
=((
is32
>>
s1
)&1LL);

7189 
is32
&=~(1LL<<
π
);

7190 
is32
|=
§
<<
π
;

7193 
is32
&=~(1LL<<
π
);

7197 
MULTDIV
:

7198 i‡(
›2
>=0x1c&&op2<=0x1f) {

7199 
is32
&=~((1LL<<
HIREG
)|(1LL<<
LOREG
));

7202 
is32
|=(1LL<<
HIREG
)|(1LL<<
LOREG
);

7205 
MOV
:

7207 
uöt64_t
 
§
=((
is32
>>
s1
)&1LL);

7208 
is32
&=~(1LL<<
π
);

7209 
is32
|=
§
<<
π
;

7212 
SHIFT
:

7213 if(
›2
>=0x14&&›2<=0x17Ë
is32
&=~(1LL<<
π
);

7214 
is32
|=1LL<<
π
;

7216 
SHIFTIMM
:

7217 
is32
|=1LL<<
π
;

7219 if(
›2
>=0x38&&›2<0x3fË
is32
&=~(1LL<<
π
);

7221 
COP0
:

7222 if(
›2
==0Ë
is32
|=1LL<<
π
;

7224 
COP1
:

7225 
COP2
:

7226 if(
›2
==0Ë
is32
|=1LL<<
π
;

7227 if(
›2
==1Ë
is32
&=~(1LL<<
π
);

7228 if(
›2
==2Ë
is32
|=1LL<<
π
;

7230 
C1LS
:

7231 
C2LS
:

7233 
FLOAT
:

7234 
FCONV
:

7236 
FCOMP
:

7238 
C2OP
:

7239 
SYSCALL
:

7240 
HLECALL
:

7245 
is32
|=1;

7246 
p32
[
i
]=
is32
;

7248 if(
i
>0)

7250 if(
ôy≥
[
i
-1]==
UJUMP
||ôy≥[i-1]==
RJUMP
||(
sour˚
[i-1]>>16)==0x1000)

7252 if(
π1
[
i
-1]==31)

7255 
is32
=1;

7257 if(
i
+1<
¶í
)

7260 
is32
=0x3FFFFFFFFLL;

7265 
	}
}

7271 
	$¥ovisi⁄Æ_r32
()

7273 
u_öt
 
r32
=0;

7274 
i
;

7276 
i
=
¶í
-1;i>=0;i--)

7278 
hr
;

7279 if(
ôy≥
[
i
]==
RJUMP
||ôy≥[i]==
UJUMP
||ôy≥[i]==
CJUMP
||ôy≥[i]==
SJUMP
||ôy≥[i]==
FJUMP
)

7281 if(
ba
[
i
]<
°¨t
 || ba[i]>=(°¨t+
¶í
*4))

7284 
r32
=0;

7291 
r32
=0;

7292 
t
=(
ba
[
i
]-
°¨t
)>>2;

7293 if(
ba
[
i
]>
°¨t
+i*4) {

7297 if(!(
¥32
[
t
]&~
ªgs
[
i
].
was32
))

7298 
r32
|=
¥32
[
t
]&(~(1LL<<
π1
[
i
+1]))&(~(1LL<<
π2
[i+1]));

7301 if(!(
ªgs
[
t
].
was32
&~
u¬ìded_ªg_uµî
[t]&~ªgs[
i
].was32))

7302 
r32
|=
ªgs
[
t
].
was32
&~
u¬ìded_ªg_uµî
[t]&(~(1LL<<
π1
[
i
+1]))&(~(1LL<<
π2
[i+1]));

7306 if(
ôy≥
[
i
]!=
RJUMP
&&ôy≥[i]!=
UJUMP
&&(
sour˚
[i]>>16)!=0x1000)

7308 if(
i
<
¶í
-2) {

7310 
r32
|=
¥32
[
i
+2];

7311 
r32
&=
ªgs
[
i
].
was32
;

7318 if(!
likñy
[
i
]) {

7321 
r32
&=~(1LL<<
π1
[
i
+1]);

7322 
r32
&=~(1LL<<
π2
[
i
+1]);

7325 if(
us1
[
i
+1]>0)

7327 if((
ªgs
[
i
].
was32
>>
us1
[i+1])&1Ë
r32
|=1LL<<us1[i+1];

7329 if(
us2
[
i
+1]>0)

7331 if((
ªgs
[
i
].
was32
>>
us2
[i+1])&1Ë
r32
|=1LL<<us2[i+1];

7333 if(
dï1
[
i
+1]&&!((
u¬ìded_ªg_uµî
[i]>>dep1[i+1])&1))

7335 if((
ªgs
[
i
].
was32
>>
dï1
[i+1])&1Ë
r32
|=1LL<<dep1[i+1];

7337 if(
dï2
[
i
+1]&&!((
u¬ìded_ªg_uµî
[i]>>dep2[i+1])&1))

7339 if((
ªgs
[
i
].
was32
>>
dï2
[i+1])&1Ë
r32
|=1LL<<dep2[i+1];

7342 if(
ôy≥
[
i
]==
SYSCALL
||ôy≥[i]==
HLECALL
||ôy≥[i]==
INTCALL
)

7345 
r32
=0;

7347 if(
ôy≥
[
i
]==
COP0
 && (
sour˚
[i]&0x3f)==0x18)

7350 
r32
=0;

7353 
r32
&=~(1LL<<
π1
[
i
]);

7354 
r32
&=~(1LL<<
π2
[
i
]);

7355 if(
us1
[
i
]>0)

7357 if((
ªgs
[
i
].
was32
>>
us1
[i])&1Ë
r32
|=1LL<<us1[i];

7359 if(
us2
[
i
]>0)

7361 if((
ªgs
[
i
].
was32
>>
us2
[i])&1Ë
r32
|=1LL<<us2[i];

7363 if(
dï1
[
i
]&&!((
u¬ìded_ªg_uµî
[i]>>dep1[i])&1))

7365 if((
ªgs
[
i
].
was32
>>
dï1
[i])&1Ë
r32
|=1LL<<dep1[i];

7367 if(
dï2
[
i
]&&!((
u¬ìded_ªg_uµî
[i]>>dep2[i])&1))

7369 if((
ªgs
[
i
].
was32
>>
dï2
[i])&1Ë
r32
|=1LL<<dep2[i];

7372 
¥32
[
i
]=
r32
;

7376 
hr
=0;hr<
HOST_REGS
;hr++)

7378 if(
ªgs
[
i
].
ªgm≠_íåy
[
hr
]>0&&regs[i].regmap_entry[hr]<64) {

7379 if((
ªgs
[
i
].
was32
>>ªgs[i].
ªgm≠_íåy
[
hr
])&‘egs[i].
wasdúty
>>hr)&1) {

7380 if(!((
u¬ìded_ªg_uµî
[
i
]>>
ªgs
[i].
ªgm≠_íåy
[
hr
])&1))

7381 
¥32
[
i
]|=1LL<<
ªgs
[i].
ªgm≠_íåy
[
hr
];

7387 
	}
}

7391 
	$˛ón_ªgi°îs
(
i°¨t
,
õnd
,
wr
)

7393 
i
;

7394 
r
;

7395 
u_öt
 
wûl_dúty_i
,
wûl_dúty_√xt
,
ãmp_wûl_dúty
;

7396 
u_öt
 
w⁄t_dúty_i
,
w⁄t_dúty_√xt
,
ãmp_w⁄t_dúty
;

7397 if(
õnd
==
¶í
-1) {

7398 
wûl_dúty_i
=
wûl_dúty_√xt
=0;

7399 
w⁄t_dúty_i
=
w⁄t_dúty_√xt
=0;

7401 
wûl_dúty_i
=
wûl_dúty_√xt
=
wûl_dúty
[
õnd
+1];

7402 
w⁄t_dúty_i
=
w⁄t_dúty_√xt
=
w⁄t_dúty
[
õnd
+1];

7404 
i
=
õnd
;i>=
i°¨t
;i--)

7406 if(
ôy≥
[
i
]==
RJUMP
||ôy≥[i]==
UJUMP
||ôy≥[i]==
CJUMP
||ôy≥[i]==
SJUMP
||ôy≥[i]==
FJUMP
)

7408 if(
ba
[
i
]<
°¨t
 || ba[i]>=(°¨t+
¶í
*4))

7411 if(
ôy≥
[
i
]==
RJUMP
||ôy≥[i]==
UJUMP
||(
sour˚
[i]>>16)==0x1000)

7414 
wûl_dúty_i
=0;

7415 
w⁄t_dúty_i
=0;

7417 
r
=0;r<
HOST_REGS
;r++) {

7418 if(
r
!=
EXCLUDE_REG
) {

7419 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i]Ë
wûl_dúty_i
|=1<<r;

7420 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i]Ë
wûl_dúty_i
|=1<<r;

7421 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i+1]Ë
wûl_dúty_i
|=1<<r;

7422 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i+1]Ë
wûl_dúty_i
|=1<<r;

7423 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)>33Ë
wûl_dúty_i
&=~(1<<r);

7424 if(
bønch_ªgs
[
i
].
ªgm≠
[
r
]<=0Ë
wûl_dúty_i
&=~(1<<r);

7425 if(
bønch_ªgs
[
i
].
ªgm≠
[
r
]==
CCREG
Ë
wûl_dúty_i
|=1<<r;

7426 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i]Ë
wûl_dúty_i
|=1<<r;

7427 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i]Ë
wûl_dúty_i
|=1<<r;

7428 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i+1]Ë
wûl_dúty_i
|=1<<r;

7429 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i+1]Ë
wûl_dúty_i
|=1<<r;

7430 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)>33Ë
wûl_dúty_i
&=~(1<<r);

7431 if(
ªgs
[
i
].
ªgm≠
[
r
]<=0Ë
wûl_dúty_i
&=~(1<<r);

7432 if(
ªgs
[
i
].
ªgm≠
[
r
]==
CCREG
Ë
wûl_dúty_i
|=1<<r;

7439 
wûl_dúty_i
=0;

7440 
w⁄t_dúty_i
=
w⁄t_dúty_√xt
;

7442 
r
=0;r<
HOST_REGS
;r++) {

7443 if(
r
!=
EXCLUDE_REG
) {

7444 if(!
likñy
[
i
]) {

7446 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i]Ë
wûl_dúty_i
|=1<<r;

7447 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i]Ë
wûl_dúty_i
|=1<<r;

7448 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i+1]Ë
wûl_dúty_i
|=1<<r;

7449 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i+1]Ë
wûl_dúty_i
|=1<<r;

7450 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)>33Ë
wûl_dúty_i
&=~(1<<r);

7451 if(
bønch_ªgs
[
i
].
ªgm≠
[
r
]==0Ë
wûl_dúty_i
&=~(1<<r);

7452 if(
bønch_ªgs
[
i
].
ªgm≠
[
r
]==
CCREG
Ë
wûl_dúty_i
|=1<<r;

7455 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i+1]Ë
wûl_dúty_i
|=1<<r;

7456 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i+1]Ë
wûl_dúty_i
|=1<<r;

7457 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)>33Ë
wûl_dúty_i
&=~(1<<r);

7458 if(
ªgs
[
i
].
ªgm≠
[
r
]<=0Ë
wûl_dúty_i
&=~(1<<r);

7459 if(
ªgs
[
i
].
ªgm≠
[
r
]==
CCREG
Ë
wûl_dúty_i
|=1<<r;

7465 
r
=0;r<
HOST_REGS
;r++) {

7466 if(
r
!=
EXCLUDE_REG
) {

7467 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i]Ë
w⁄t_dúty_i
|=1<<r;

7468 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i]Ë
w⁄t_dúty_i
|=1<<r;

7469 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i+1]Ë
w⁄t_dúty_i
|=1<<r;

7470 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i+1]Ë
w⁄t_dúty_i
|=1<<r;

7471 if(
ªgs
[
i
].
ªgm≠
[
r
]==
CCREG
Ë
w⁄t_dúty_i
|=1<<r;

7472 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i]Ë
w⁄t_dúty_i
|=1<<r;

7473 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i]Ë
w⁄t_dúty_i
|=1<<r;

7474 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i+1]Ë
w⁄t_dúty_i
|=1<<r;

7475 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i+1]Ë
w⁄t_dúty_i
|=1<<r;

7476 if(
bønch_ªgs
[
i
].
ªgm≠
[
r
]==
CCREG
Ë
w⁄t_dúty_i
|=1<<r;

7479 if(
wr
) {

7480 #i‚de‡
DESTRUCTIVE_WRITEBACK


7481 
bønch_ªgs
[
i
].
dúty
&=
w⁄t_dúty_i
;

7483 
bønch_ªgs
[
i
].
dúty
|=
wûl_dúty_i
;

7489 if(
ba
[
i
]<=
°¨t
+i*4) {

7491 if(
ôy≥
[
i
]==
RJUMP
||ôy≥[i]==
UJUMP
||(
sour˚
[i]>>16)==0x1000)

7494 
ãmp_wûl_dúty
=0;

7495 
ãmp_w⁄t_dúty
=0;

7497 
r
=0;r<
HOST_REGS
;r++) {

7498 if(
r
!=
EXCLUDE_REG
) {

7499 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i]Ë
ãmp_wûl_dúty
|=1<<r;

7500 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i]Ë
ãmp_wûl_dúty
|=1<<r;

7501 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i+1]Ë
ãmp_wûl_dúty
|=1<<r;

7502 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i+1]Ë
ãmp_wûl_dúty
|=1<<r;

7503 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)>33Ë
ãmp_wûl_dúty
&=~(1<<r);

7504 if(
bønch_ªgs
[
i
].
ªgm≠
[
r
]<=0Ë
ãmp_wûl_dúty
&=~(1<<r);

7505 if(
bønch_ªgs
[
i
].
ªgm≠
[
r
]==
CCREG
Ë
ãmp_wûl_dúty
|=1<<r;

7506 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i]Ë
ãmp_wûl_dúty
|=1<<r;

7507 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i]Ë
ãmp_wûl_dúty
|=1<<r;

7508 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i+1]Ë
ãmp_wûl_dúty
|=1<<r;

7509 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i+1]Ë
ãmp_wûl_dúty
|=1<<r;

7510 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)>33Ë
ãmp_wûl_dúty
&=~(1<<r);

7511 if(
ªgs
[
i
].
ªgm≠
[
r
]<=0Ë
ãmp_wûl_dúty
&=~(1<<r);

7512 if(
ªgs
[
i
].
ªgm≠
[
r
]==
CCREG
Ë
ãmp_wûl_dúty
|=1<<r;

7517 
ãmp_wûl_dúty
=
wûl_dúty_√xt
;

7518 
ãmp_w⁄t_dúty
=
w⁄t_dúty_√xt
;

7520 
r
=0;r<
HOST_REGS
;r++) {

7521 if(
r
!=
EXCLUDE_REG
) {

7522 if(!
likñy
[
i
]) {

7524 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i]Ë
ãmp_wûl_dúty
|=1<<r;

7525 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i]Ë
ãmp_wûl_dúty
|=1<<r;

7526 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i+1]Ë
ãmp_wûl_dúty
|=1<<r;

7527 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i+1]Ë
ãmp_wûl_dúty
|=1<<r;

7528 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)>33Ë
ãmp_wûl_dúty
&=~(1<<r);

7529 if(
bønch_ªgs
[
i
].
ªgm≠
[
r
]==0Ë
ãmp_wûl_dúty
&=~(1<<r);

7530 if(
bønch_ªgs
[
i
].
ªgm≠
[
r
]==
CCREG
Ë
ãmp_wûl_dúty
|=1<<r;

7533 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i+1]Ë
ãmp_wûl_dúty
|=1<<r;

7534 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i+1]Ë
ãmp_wûl_dúty
|=1<<r;

7535 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)>33Ë
ãmp_wûl_dúty
&=~(1<<r);

7536 if(
ªgs
[
i
].
ªgm≠
[
r
]<=0Ë
ãmp_wûl_dúty
&=~(1<<r);

7537 if(
ªgs
[
i
].
ªgm≠
[
r
]==
CCREG
Ë
ãmp_wûl_dúty
|=1<<r;

7543 
r
=0;r<
HOST_REGS
;r++) {

7544 if(
r
!=
EXCLUDE_REG
) {

7545 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i]Ë
ãmp_w⁄t_dúty
|=1<<r;

7546 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i]Ë
ãmp_w⁄t_dúty
|=1<<r;

7547 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i+1]Ë
ãmp_w⁄t_dúty
|=1<<r;

7548 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i+1]Ë
ãmp_w⁄t_dúty
|=1<<r;

7549 if(
ªgs
[
i
].
ªgm≠
[
r
]==
CCREG
Ë
ãmp_w⁄t_dúty
|=1<<r;

7550 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i]Ë
ãmp_w⁄t_dúty
|=1<<r;

7551 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i]Ë
ãmp_w⁄t_dúty
|=1<<r;

7552 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i+1]Ë
ãmp_w⁄t_dúty
|=1<<r;

7553 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i+1]Ë
ãmp_w⁄t_dúty
|=1<<r;

7554 if(
bønch_ªgs
[
i
].
ªgm≠
[
r
]==
CCREG
Ë
ãmp_w⁄t_dúty
|=1<<r;

7558 if(
i
<
õnd
) {

7559 
r
=0;r<
HOST_REGS
;r++) {

7560 if(
r
!=
EXCLUDE_REG
) {

7561 if(
ªgs
[
i
].
ªgm≠
[
r
]!=
ªgm≠_¥e
[i][r]) {

7562 
ãmp_wûl_dúty
&=~(1<<
r
);

7563 
ãmp_w⁄t_dúty
&=~(1<<
r
);

7564 if((
ªgm≠_¥e
[
i
][
r
]&63)>0 && (regmap_pre[i][r]&63)<34) {

7565 
ãmp_wûl_dúty
|=((
u¬ìded_ªg
[
i
]>>(
ªgm≠_¥e
[i][
r
]&63))&1)<<r;

7566 
ãmp_w⁄t_dúty
|=((
u¬ìded_ªg
[
i
]>>(
ªgm≠_¥e
[i][
r
]&63))&1)<<r;

7568 
ãmp_wûl_dúty
|=1<<
r
;

7569 
ãmp_w⁄t_dúty
|=1<<
r
;

7575 if(
wr
) {

7576 
wûl_dúty
[
i
]=
ãmp_wûl_dúty
;

7577 
w⁄t_dúty
[
i
]=
ãmp_w⁄t_dúty
;

7578 
	`˛ón_ªgi°îs
((
ba
[
i
]-
°¨t
)>>2,i-1,0);

7582 
wûl_dúty
[(
ba
[
i
]-
°¨t
)>>2]=0;

7583 
w⁄t_dúty
[(
ba
[
i
]-
°¨t
)>>2]=-1;

7588 if(
ôy≥
[
i
]==
RJUMP
||ôy≥[i]==
UJUMP
||(
sour˚
[i]>>16)==0x1000)

7591 
wûl_dúty_i
=0;

7592 
w⁄t_dúty_i
=0;

7594 
r
=0;r<
HOST_REGS
;r++) {

7595 if(
r
!=
EXCLUDE_REG
) {

7596 if(
bønch_ªgs
[
i
].
ªgm≠
[
r
]==
ªgs
[(
ba
[i]-
°¨t
)>>2].
ªgm≠_íåy
[r]) {

7597 
wûl_dúty_i
|=
wûl_dúty
[(
ba
[
i
]-
°¨t
)>>2]&(1<<
r
);

7598 
w⁄t_dúty_i
|=
w⁄t_dúty
[(
ba
[
i
]-
°¨t
)>>2]&(1<<
r
);

7600 if(
bønch_ªgs
[
i
].
ªgm≠
[
r
]>=0) {

7601 
wûl_dúty_i
|=((
u¬ìded_ªg
[(
ba
[
i
]-
°¨t
)>>2]>>(
bønch_ªgs
[i].
ªgm≠
[
r
]&63))&1)<<r;

7602 
w⁄t_dúty_i
|=((
u¬ìded_ªg
[(
ba
[
i
]-
°¨t
)>>2]>>(
bønch_ªgs
[i].
ªgm≠
[
r
]&63))&1)<<r;

7608 
r
=0;r<
HOST_REGS
;r++) {

7609 if(
r
!=
EXCLUDE_REG
) {

7610 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i]Ë
wûl_dúty_i
|=1<<r;

7611 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i]Ë
wûl_dúty_i
|=1<<r;

7612 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i+1]Ë
wûl_dúty_i
|=1<<r;

7613 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i+1]Ë
wûl_dúty_i
|=1<<r;

7614 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)>33Ë
wûl_dúty_i
&=~(1<<r);

7615 if(
bønch_ªgs
[
i
].
ªgm≠
[
r
]<=0Ë
wûl_dúty_i
&=~(1<<r);

7616 if(
bønch_ªgs
[
i
].
ªgm≠
[
r
]==
CCREG
Ë
wûl_dúty_i
|=1<<r;

7617 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i]Ë
wûl_dúty_i
|=1<<r;

7618 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i]Ë
wûl_dúty_i
|=1<<r;

7619 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i+1]Ë
wûl_dúty_i
|=1<<r;

7620 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i+1]Ë
wûl_dúty_i
|=1<<r;

7621 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)>33Ë
wûl_dúty_i
&=~(1<<r);

7622 if(
ªgs
[
i
].
ªgm≠
[
r
]<=0Ë
wûl_dúty_i
&=~(1<<r);

7623 if(
ªgs
[
i
].
ªgm≠
[
r
]==
CCREG
Ë
wûl_dúty_i
|=1<<r;

7628 
wûl_dúty_i
=
wûl_dúty_√xt
;

7629 
w⁄t_dúty_i
=
w⁄t_dúty_√xt
;

7631 
r
=0;r<
HOST_REGS
;r++) {

7632 if(
r
!=
EXCLUDE_REG
) {

7633 sig√d 
èrgë_ªg
=
bønch_ªgs
[
i
].
ªgm≠
[
r
];

7634 if(
èrgë_ªg
==
ªgs
[(
ba
[
i
]-
°¨t
)>>2].
ªgm≠_íåy
[
r
]) {

7635 
wûl_dúty_i
&=
wûl_dúty
[(
ba
[
i
]-
°¨t
)>>2]&(1<<
r
);

7636 
w⁄t_dúty_i
|=
w⁄t_dúty
[(
ba
[
i
]-
°¨t
)>>2]&(1<<
r
);

7638 if(
èrgë_ªg
>=0) {

7639 
wûl_dúty_i
&=((
u¬ìded_ªg
[(
ba
[
i
]-
°¨t
)>>2]>>(
èrgë_ªg
&63))&1)<<
r
;

7640 
w⁄t_dúty_i
|=((
u¬ìded_ªg
[(
ba
[
i
]-
°¨t
)>>2]>>(
èrgë_ªg
&63))&1)<<
r
;

7655 
r
=0;r<
HOST_REGS
;r++) {

7656 if(
r
!=
EXCLUDE_REG
) {

7657 if(!
likñy
[
i
]) {

7659 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i]Ë
wûl_dúty_i
|=1<<r;

7660 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i]Ë
wûl_dúty_i
|=1<<r;

7661 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i+1]Ë
wûl_dúty_i
|=1<<r;

7662 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i+1]Ë
wûl_dúty_i
|=1<<r;

7663 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)>33Ë
wûl_dúty_i
&=~(1<<r);

7664 if(
bønch_ªgs
[
i
].
ªgm≠
[
r
]<=0Ë
wûl_dúty_i
&=~(1<<r);

7665 if(
bønch_ªgs
[
i
].
ªgm≠
[
r
]==
CCREG
Ë
wûl_dúty_i
|=1<<r;

7668 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i+1]Ë
wûl_dúty_i
|=1<<r;

7669 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i+1]Ë
wûl_dúty_i
|=1<<r;

7670 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)>33Ë
wûl_dúty_i
&=~(1<<r);

7671 if(
ªgs
[
i
].
ªgm≠
[
r
]<=0Ë
wûl_dúty_i
&=~(1<<r);

7672 if(
ªgs
[
i
].
ªgm≠
[
r
]==
CCREG
Ë
wûl_dúty_i
|=1<<r;

7678 
r
=0;r<
HOST_REGS
;r++) {

7679 if(
r
!=
EXCLUDE_REG
) {

7680 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i]Ë
w⁄t_dúty_i
|=1<<r;

7681 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i]Ë
w⁄t_dúty_i
|=1<<r;

7682 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i+1]Ë
w⁄t_dúty_i
|=1<<r;

7683 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i+1]Ë
w⁄t_dúty_i
|=1<<r;

7684 if(
ªgs
[
i
].
ªgm≠
[
r
]==
CCREG
Ë
w⁄t_dúty_i
|=1<<r;

7685 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i]Ë
w⁄t_dúty_i
|=1<<r;

7686 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i]Ë
w⁄t_dúty_i
|=1<<r;

7687 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i+1]Ë
w⁄t_dúty_i
|=1<<r;

7688 if((
bønch_ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i+1]Ë
w⁄t_dúty_i
|=1<<r;

7689 if(
bønch_ªgs
[
i
].
ªgm≠
[
r
]==
CCREG
Ë
w⁄t_dúty_i
|=1<<r;

7692 if(
wr
) {

7693 #i‚de‡
DESTRUCTIVE_WRITEBACK


7694 
bønch_ªgs
[
i
].
dúty
&=
w⁄t_dúty_i
;

7696 
bønch_ªgs
[
i
].
dúty
|=
wûl_dúty_i
;

7701 if(
ôy≥
[
i
]==
SYSCALL
||ôy≥[i]==
HLECALL
||ôy≥[i]==
INTCALL
)

7704 
wûl_dúty_i
=0;

7705 
w⁄t_dúty_i
=0;

7707 if(
ôy≥
[
i
]==
COP0
 && (
sour˚
[i]&0x3f)==0x18)

7710 
wûl_dúty_i
=0;

7711 
w⁄t_dúty_i
=0;

7713 
wûl_dúty_√xt
=
wûl_dúty_i
;

7714 
w⁄t_dúty_√xt
=
w⁄t_dúty_i
;

7715 
r
=0;r<
HOST_REGS
;r++) {

7716 if(
r
!=
EXCLUDE_REG
) {

7717 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i]Ë
wûl_dúty_i
|=1<<r;

7718 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i]Ë
wûl_dúty_i
|=1<<r;

7719 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)>33Ë
wûl_dúty_i
&=~(1<<r);

7720 if(
ªgs
[
i
].
ªgm≠
[
r
]<=0Ë
wûl_dúty_i
&=~(1<<r);

7721 if(
ªgs
[
i
].
ªgm≠
[
r
]==
CCREG
Ë
wûl_dúty_i
|=1<<r;

7722 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i]Ë
w⁄t_dúty_i
|=1<<r;

7723 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i]Ë
w⁄t_dúty_i
|=1<<r;

7724 if(
ªgs
[
i
].
ªgm≠
[
r
]==
CCREG
Ë
w⁄t_dúty_i
|=1<<r;

7725 if(
i
>
i°¨t
) {

7726 if(
ôy≥
[
i
]!=
RJUMP
&&ôy≥[i]!=
UJUMP
&&ôy≥[i]!=
CJUMP
&&ôy≥[i]!=
SJUMP
&&ôy≥[i]!=
FJUMP
)

7730 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π1
[i-1]Ë
w⁄t_dúty_i
|=1<<r;

7731 if((
ªgs
[
i
].
ªgm≠
[
r
]&63)==
π2
[i-1]Ë
w⁄t_dúty_i
|=1<<r;

7737 
wûl_dúty
[
i
]=
wûl_dúty_i
;

7738 
w⁄t_dúty
[
i
]=
w⁄t_dúty_i
;

7740 if(
wr
) {

7750 
ªgs
[
i
].
dúty
|=
wûl_dúty_i
;

7751 #i‚de‡
DESTRUCTIVE_WRITEBACK


7752 
ªgs
[
i
].
dúty
&=
w⁄t_dúty_i
;

7753 if(
ôy≥
[
i
]==
RJUMP
||ôy≥[i]==
UJUMP
||ôy≥[i]==
CJUMP
||ôy≥[i]==
SJUMP
||ôy≥[i]==
FJUMP
)

7755 if(
i
<
õnd
-1&&
ôy≥
[i]!=
RJUMP
&&ôy≥[i]!=
UJUMP
&&(
sour˚
[i]>>16)!=0x1000) {

7756 
r
=0;r<
HOST_REGS
;r++) {

7757 if(
r
!=
EXCLUDE_REG
) {

7758 if(
ªgs
[
i
].
ªgm≠
[
r
]==
ªgm≠_¥e
[i+2][r]) {

7759 
ªgs
[
i
+2].
wasdúty
&=
w⁄t_dúty_i
|~(1<<
r
);

7767 if(
i
<
õnd
) {

7768 
r
=0;r<
HOST_REGS
;r++) {

7769 if(
r
!=
EXCLUDE_REG
) {

7770 if(
ªgs
[
i
].
ªgm≠
[
r
]==
ªgm≠_¥e
[i+1][r]) {

7771 
ªgs
[
i
+1].
wasdúty
&=
w⁄t_dúty_i
|~(1<<
r
);

7781 
ãmp_wûl_dúty
=
wûl_dúty_i
;

7782 
ãmp_w⁄t_dúty
=
w⁄t_dúty_i
;

7783 
r
=0;r<
HOST_REGS
;r++) {

7784 if(
r
!=
EXCLUDE_REG
) {

7785 
ƒ
;

7786 if(
ªgs
[
i
].
ªgm≠
[
r
]==
ªgm≠_¥e
[i][r]) {

7787 if(
wr
) {

7788 #i‚de‡
DESTRUCTIVE_WRITEBACK


7789 
ªgs
[
i
].
wasdúty
&=
w⁄t_dúty_i
|~(1<<
r
);

7791 
ªgs
[
i
].
wasdúty
|=
wûl_dúty_i
&(1<<
r
);

7794 if(
ªgm≠_¥e
[
i
][
r
]>=0&&(
ƒ
=
	`gë_ªg
(
ªgs
[i].
ªgm≠
,regmap_pre[i][r]))>=0) {

7796 
wûl_dúty_i
&=~(1<<
r
);

7797 
w⁄t_dúty_i
&=~(1<<
r
);

7798 
wûl_dúty_i
|=((
ãmp_wûl_dúty
>>
ƒ
)&1)<<
r
;

7799 
w⁄t_dúty_i
|=((
ãmp_w⁄t_dúty
>>
ƒ
)&1)<<
r
;

7800 if(
wr
) {

7801 #i‚de‡
DESTRUCTIVE_WRITEBACK


7802 
ªgs
[
i
].
wasdúty
&=
w⁄t_dúty_i
|~(1<<
r
);

7804 
ªgs
[
i
].
wasdúty
|=
wûl_dúty_i
&(1<<
r
);

7808 
wûl_dúty_i
&=~(1<<
r
);

7809 
w⁄t_dúty_i
&=~(1<<
r
);

7810 if((
ªgm≠_¥e
[
i
][
r
]&63)>0 && (regmap_pre[i][r]&63)<34) {

7811 
wûl_dúty_i
|=((
u¬ìded_ªg
[
i
]>>(
ªgm≠_¥e
[i][
r
]&63))&1)<<r;

7812 
w⁄t_dúty_i
|=((
u¬ìded_ªg
[
i
]>>(
ªgm≠_¥e
[i][
r
]&63))&1)<<r;

7814 
w⁄t_dúty_i
|=1<<
r
;

7821 
	}
}

7823 #ifde‡
DISASM


7825 
	$dißs£mbÀ_ö°
(
i
)

7827 i‡(
bt
[
i
]Ë
	`¥ötf
("*"); printf(" ");

7828 
ôy≥
[
i
]) {

7829 
UJUMP
:

7830 
	`¥ötf
 (" %x: %†%8x\n",
°¨t
+
i
*4,
ö¢
[i],
ba
[i]);;

7831 
CJUMP
:

7832 
	`¥ötf
 (" %x: %†r%d,r%d,%8x\n",
°¨t
+
i
*4,
ö¢
[i],
rs1
[i],
rs2
[i],i?°¨t+i*4+4+((sig√d )(()
sour˚
[i]<<16)>>14):*
ba
);;

7833 
SJUMP
:

7834 
	`¥ötf
 (" %x: %†r%d,%8x\n",
°¨t
+
i
*4,
ö¢
[i],
rs1
[i],°¨t+i*4+4+((sig√d )(()
sour˚
[i]<<16)>>14));;

7835 
FJUMP
:

7836 
	`¥ötf
 (" %x: %†%8x\n",
°¨t
+
i
*4,
ö¢
[i],
ba
[i]);;

7837 
RJUMP
:

7838 i‡(
›code
[
i
]==0x9&&
π1
[i]!=31)

7839 
	`¥ötf
 (" %x: %†r%d,r%d\n",
°¨t
+
i
*4,
ö¢
[i],
π1
[i],
rs1
[i]);

7841 
	`¥ötf
 (" %x: %†r%d\n",
°¨t
+
i
*4,
ö¢
[i],
rs1
[i]);

7843 
SPAN
:

7844 
	`¥ötf
 (" %x: %†’age•™Ër%d,r%d,%8x\n",
°¨t
+
i
*4,
ö¢
[i],
rs1
[i],
rs2
[i],
ba
[i]);;

7845 
IMM16
:

7846 if(
›code
[
i
]==0xf)

7847 
	`¥ötf
 (" %x: %†r%d,%4x0000\n",
°¨t
+
i
*4,
ö¢
[i],
π1
[i],
imm
[i]&0xffff);

7849 
	`¥ötf
 (" %x: %†r%d,r%d,%d\n",
°¨t
+
i
*4,
ö¢
[i],
π1
[i],
rs1
[i],
imm
[i]);

7851 
LOAD
:

7852 
LOADLR
:

7853 
	`¥ötf
 (" %x: %†r%d,r%d+%x\n",
°¨t
+
i
*4,
ö¢
[i],
π1
[i],
rs1
[i],
imm
[i]);

7855 
STORE
:

7856 
STORELR
:

7857 
	`¥ötf
 (" %x: %†r%d,r%d+%x\n",
°¨t
+
i
*4,
ö¢
[i],
rs2
[i],
rs1
[i],
imm
[i]);

7859 
ALU
:

7860 
SHIFT
:

7861 
	`¥ötf
 (" %x: %†r%d,r%d,r%d\n",
°¨t
+
i
*4,
ö¢
[i],
π1
[i],
rs1
[i],
rs2
[i]);

7863 
MULTDIV
:

7864 
	`¥ötf
 (" %x: %†r%d,r%d\n",
°¨t
+
i
*4,
ö¢
[i],
rs1
[i],
rs2
[i]);

7866 
SHIFTIMM
:

7867 
	`¥ötf
 (" %x: %†r%d,r%d,%d\n",
°¨t
+
i
*4,
ö¢
[i],
π1
[i],
rs1
[i],
imm
[i]);

7869 
MOV
:

7870 if((
›code2
[
i
]&0x1d)==0x10)

7871 
	`¥ötf
 (" %x: %†r%d\n",
°¨t
+
i
*4,
ö¢
[i],
π1
[i]);

7872 if((
›code2
[
i
]&0x1d)==0x11)

7873 
	`¥ötf
 (" %x: %†r%d\n",
°¨t
+
i
*4,
ö¢
[i],
rs1
[i]);

7875 
	`¥ötf
 (" %x: %s\n",
°¨t
+
i
*4,
ö¢
[i]);

7877 
COP0
:

7878 if(
›code2
[
i
]==0)

7879 
	`¥ötf
 (" %x: %†r%d,˝r0[%d]\n",
°¨t
+
i
*4,
ö¢
[i],
π1
[i],(
sour˚
[i]>>11)&0x1f);

7880 if(
›code2
[
i
]==4)

7881 
	`¥ötf
 (" %x: %†r%d,˝r0[%d]\n",
°¨t
+
i
*4,
ö¢
[i],
rs1
[i],(
sour˚
[i]>>11)&0x1f);

7882 
	`¥ötf
 (" %x: %s\n",
°¨t
+
i
*4,
ö¢
[i]);

7884 
COP1
:

7885 if(
›code2
[
i
]<3)

7886 
	`¥ötf
 (" %x: %†r%d,˝r1[%d]\n",
°¨t
+
i
*4,
ö¢
[i],
π1
[i],(
sour˚
[i]>>11)&0x1f);

7887 if(
›code2
[
i
]>3)

7888 
	`¥ötf
 (" %x: %†r%d,˝r1[%d]\n",
°¨t
+
i
*4,
ö¢
[i],
rs1
[i],(
sour˚
[i]>>11)&0x1f);

7889 
	`¥ötf
 (" %x: %s\n",
°¨t
+
i
*4,
ö¢
[i]);

7891 
COP2
:

7892 if(
›code2
[
i
]<3)

7893 
	`¥ötf
 (" %x: %†r%d,˝r2[%d]\n",
°¨t
+
i
*4,
ö¢
[i],
π1
[i],(
sour˚
[i]>>11)&0x1f);

7894 if(
›code2
[
i
]>3)

7895 
	`¥ötf
 (" %x: %†r%d,˝r2[%d]\n",
°¨t
+
i
*4,
ö¢
[i],
rs1
[i],(
sour˚
[i]>>11)&0x1f);

7896 
	`¥ötf
 (" %x: %s\n",
°¨t
+
i
*4,
ö¢
[i]);

7898 
C1LS
:

7899 
	`¥ötf
 (" %x: %†˝r1[%d],r%d+%x\n",
°¨t
+
i
*4,
ö¢
[i],(
sour˚
[i]>>16)&0x1f,
rs1
[i],
imm
[i]);

7901 
C2LS
:

7902 
	`¥ötf
 (" %x: %†˝r2[%d],r%d+%x\n",
°¨t
+
i
*4,
ö¢
[i],(
sour˚
[i]>>16)&0x1f,
rs1
[i],
imm
[i]);

7904 
INTCALL
:

7905 
	`¥ötf
 (" %x: %†(INTCALL)\n",
°¨t
+
i
*4,
ö¢
[i]);

7909 
	`¥ötf
 (" %x: %s\n",
°¨t
+
i
*4,
ö¢
[i]);

7911 
	}
}

7913 
	$dißs£mbÀ_ö°
(
i
Ë{
	}
}

7916 
	#DRC_TEST_VAL
 0x74657374

	)

7918 
	$√w_dy«ªc_ã°
()

7920 (*
ã°func
)(Ë(*)
out
;

7921 
ªt
;

7922 
	`emô_movimm
(
DRC_TEST_VAL
,0);

7923 
	`emô_jm¥eg
(14);

7924 
	`lôîÆ_poﬁ
(0);

7925 #ifde‡
__¨m__


7926 
	`__˛ór_ˇche
((*)
ã°func
, 
out
);

7928 
	`SysPrötf
("testing if we canÑunÑecompiled code..\n");

7929 
ªt
 = 
	`ã°func
();

7930 i‡(
ªt
 =
DRC_TEST_VAL
)

7931 
	`SysPrötf
("testÖassed.\n");

7933 
	`SysPrötf
("ã° faûed: %08x\n", 
ªt
);

7934 
out
=(
u_ch¨
 *)
BASE_ADDR
;

7935  
ªt
 =
DRC_TEST_VAL
;

7936 
	}
}

7940 
	$√w_dy«ªc_˛ór_fuŒ
()

7942 
n
;

7943 
out
=(
u_ch¨
 *)
BASE_ADDR
;

7944 
	`mem£t
(
övÆid_code
,1,(invalid_code));

7945 
	`mem£t
(
hash_èbÀ
,0xff,(hash_table));

7946 
	`mem£t
(
möi_ht
,-1,(mini_ht));

7947 
	`mem£t
(
ª°‹e_ˇndid©e
,0,(restore_candidate));

7948 
	`mem£t
(
shadow
,0,(shadow));

7949 
c›y
=
shadow
;

7950 
expúï
=16384;

7951 
≥ndög_ex˚±i⁄
=0;

7952 
lôîÆcou¡
=0;

7953 
°›_a·î_jÆ
=0;

7954 
öv_code_°¨t
=
öv_code_íd
=~0;

7956 #i‚de‡
DISABLE_TLB


7957 
usög_éb
=0;

7958 
n
=0;n<524288;n++)

7959 
mem‹y_m≠
[
n
]=-1;

7960 
n
=524288;n<526336;n++)

7961 
mem‹y_m≠
[
n
]=((
u_öt
)
rdøm
-0x80000000)>>2;

7962 
n
=526336;n<1048576;n++)

7963 
mem‹y_m≠
[
n
]=-1;

7965 
n
=0;n<4096;n++Ë
	`Œ_˛ór
(
jump_ö
+n);

7966 
n
=0;n<4096;n++Ë
	`Œ_˛ór
(
jump_out
+n);

7967 
n
=0;n<4096;n++Ë
	`Œ_˛ór
(
jump_dúty
+n);

7968 
	}
}

7970 
	$√w_dy«ªc_öô
()

7972 
	`SysPrötf
("InitÇew dynarec\n");

7973 
out
=(
u_ch¨
 *)
BASE_ADDR
;

7974 #i‡
BASE_ADDR_FIXED


7975 i‡(
	`mm≠
 (
out
, 1<<
TARGET_SIZE_2
,

7976 
PROT_READ
 | 
PROT_WRITE
 | 
PROT_EXEC
,

7977 
MAP_FIXED
 | 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
,

7979 
	`SysPrötf
("mm≠(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
));

7983 i‡(
	`m¥Ÿe˘
(
out
, 1<<
TARGET_SIZE_2
, 
PROT_READ
 | 
PROT_WRITE
 | 
PROT_EXEC
) != 0)

7984 
	`SysPrötf
("m¥Ÿe˘(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
));

7986 #ifde‡
MUPEN64


7987 
rdw‹d
=&
ªadmem_dw‹d
;

7988 
Áke_pc
.
f
.
r
.
rs
=&
ªadmem_dw‹d
;

7989 
Áke_pc
.
f
.
r
.
π
=&
ªadmem_dw‹d
;

7990 
Áke_pc
.
f
.
r
.
rd
=&
ªadmem_dw‹d
;

7992 
n
;

7993 
cy˛e_mu…ùlõr
=200;

7994 
	`√w_dy«ªc_˛ór_fuŒ
();

7995 #ifde‡
HOST_IMM8


7997 
övc_±r
=
övÆid_code
;

7999 #ifde‡
MUPEN64


8000 
n
=0;n<0x8000;n++) {

8001 
wrôemem
[
n
] = 
wrôe_nomem_√w
;

8002 
wrôememb
[
n
] = 
wrôe_nomemb_√w
;

8003 
wrôememh
[
n
] = 
wrôe_nomemh_√w
;

8004 #i‚de‡
FORCE32


8005 
wrôememd
[
n
] = 
wrôe_nomemd_√w
;

8007 
ªadmem
[
n
] = 
ªad_nomem_√w
;

8008 
ªadmemb
[
n
] = 
ªad_nomemb_√w
;

8009 
ªadmemh
[
n
] = 
ªad_nomemh_√w
;

8010 #i‚de‡
FORCE32


8011 
ªadmemd
[
n
] = 
ªad_nomemd_√w
;

8014 
n
=0x8000;n<0x8080;n++) {

8015 
wrôemem
[
n
] = 
wrôe_rdøm_√w
;

8016 
wrôememb
[
n
] = 
wrôe_rdømb_√w
;

8017 
wrôememh
[
n
] = 
wrôe_rdømh_√w
;

8018 #i‚de‡
FORCE32


8019 
wrôememd
[
n
] = 
wrôe_rdømd_√w
;

8022 
n
=0xC000;n<0x10000;n++) {

8023 
wrôemem
[
n
] = 
wrôe_nomem_√w
;

8024 
wrôememb
[
n
] = 
wrôe_nomemb_√w
;

8025 
wrôememh
[
n
] = 
wrôe_nomemh_√w
;

8026 #i‚de‡
FORCE32


8027 
wrôememd
[
n
] = 
wrôe_nomemd_√w
;

8029 
ªadmem
[
n
] = 
ªad_nomem_√w
;

8030 
ªadmemb
[
n
] = 
ªad_nomemb_√w
;

8031 
ªadmemh
[
n
] = 
ªad_nomemh_√w
;

8032 #i‚de‡
FORCE32


8033 
ªadmemd
[
n
] = 
ªad_nomemd_√w
;

8037 
	`éb_hacks
();

8038 
	`¨ch_öô
();

8039 
	`√w_dy«ªc_ã°
();

8040 #i‚de‡
RAM_FIXED


8041 
øm_off£t
=(
u_öt
)
rdøm
-0x80000000;

8043 i‡(
øm_off£t
!=0)

8044 
	`SysPrötf
("warning: RAM isÇot directly mapped,Öerformance will suffer\n");

8045 
	}
}

8047 
	$√w_dy«ªc_˛ónup
()

8049 
n
;

8050 #i‡
BASE_ADDR_FIXED


8051 i‡(
	`munm≠
 ((*)
BASE_ADDR
, 1<<
TARGET_SIZE_2
Ë< 0Ë{
	`SysPrötf
("munmap() failed\n");}

8053 
n
=0;n<4096;n++Ë
	`Œ_˛ór
(
jump_ö
+n);

8054 
n
=0;n<4096;n++Ë
	`Œ_˛ór
(
jump_out
+n);

8055 
n
=0;n<4096;n++Ë
	`Œ_˛ór
(
jump_dúty
+n);

8056 #ifde‡
ROM_COPY


8057 i‡(
	`munm≠
 (
ROM_COPY
, 67108864Ë< 0Ë{
	`SysPrötf
("munmap() failed\n");}

8059 
	}
}

8061 
u_öt
 *
	$gë_sour˚_°¨t
(
u_öt
 
addr
, u_öà*
limô
)

8063 i‡(
addr
 < 0x00200000 ||

8064 (0xa0000000 <
addr
 &&áddr < 0xa0200000)) {

8066 *
limô
 = (
addr
&0xa0000000)|0x00200000;

8067  (
u_öt
 *)((u_öt)
rdøm
 + (
addr
&0x1fffff));

8069 i‡(!
C⁄fig
.
HLE
 && (

8071 (0xbfc00000 <
addr
 &&áddr < 0xbfc80000))) {

8073 *
limô
 = (
addr
 & 0xfff00000) | 0x80000;

8074  (
u_öt
 *)((u_öt)
psxR
 + (
addr
&0x7ffff));

8076 i‡(
addr
 >0x80000000 &&ádd∏< 0x80000000+
RAM_SIZE
) {

8077 *
limô
 = (
addr
 & 0x80600000) + 0x00200000;

8078  (
u_öt
 *)((u_öt)
rdøm
 + (
addr
&0x1fffff));

8080 
	}
}

8082 
u_öt
 
	$sˇn_f‹_ªt
(
u_öt
 
addr
)

8084 
u_öt
 
limô
 = 0;

8085 
u_öt
 *
mem
;

8087 
mem
 = 
	`gë_sour˚_°¨t
(
addr
, &
limô
);

8088 i‡(
mem
 =
NULL
)

8089  
addr
;

8091 i‡(
limô
 > 
addr
 + 0x1000)

8092 
limô
 = 
addr
 + 0x1000;

8093 ; 
addr
 < 
limô
;ádd∏+4, 
mem
++) {

8094 i‡(*
mem
 == 0x03e00008)

8095  
addr
 + 8;

8097 
	}
}

8099 
	sßve°©e_block
 {

8100 
uöt32_t
 
	maddr
;

8101 
uöt32_t
 
	mªgÊags
;

8104 
	$addr_cmp
(c⁄° *
p1_
, c⁄° *
p2_
)

8106 c⁄° 
ßve°©e_block
 *
p1
 = 
p1_
, *
p2
 = 
p2_
;

8107  
p1
->
addr
 - 
p2
->addr;

8108 
	}
}

8110 
	$√w_dy«ªc_ßve_blocks
(*
ßve
, 
size
)

8112 
ßve°©e_block
 *
blocks
 = 
ßve
;

8113 
maxcou¡
 = 
size
 / (
blocks
[0]);

8114 
ßve°©e_block
 
tmp_blocks
[1024];

8115 
Œ_íåy
 *
hód
;

8116 
p
, 
s
, 
d
, 
o
, 
b˙t
;

8117 
u_öt
 
addr
;

8119 
o
 = 0;

8120 
p
 = 0;Ö < (
jump_ö
) / (jump_in[0]);Ö++) {

8121 
b˙t
 = 0;

8122 
hód
 = 
jump_ö
[
p
]; hód !
NULL
; hód = hód->
√xt
) {

8123 
tmp_blocks
[
b˙t
].
addr
 = 
hód
->
vaddr
;

8124 
tmp_blocks
[
b˙t
].
ªgÊags
 = 
hód
->
ªg_sv_Êags
;

8125 
b˙t
++;

8127 i‡(
b˙t
 < 1)

8129 
	`qs‹t
(
tmp_blocks
, 
b˙t
, —mp_blocks[0]), 
addr_cmp
);

8131 
addr
 = 
tmp_blocks
[0].addr;

8132 
s
 = 
d
 = 0; s < 
b˙t
; s++) {

8133 i‡(
tmp_blocks
[
s
].
addr
 <áddr)

8135 i‡(
d
 =0 || 
tmp_blocks
[d-1].
addr
 !tmp_blocks[
s
].addr)

8136 
tmp_blocks
[
d
++] =Åmp_blocks[
s
];

8137 
addr
 = 
	`sˇn_f‹_ªt
(
tmp_blocks
[
s
].addr);

8140 i‡(
o
 + 
d
 > 
maxcou¡
)

8141 
d
 = 
maxcou¡
 - 
o
;

8142 
	`mem˝y
(&
blocks
[
o
], 
tmp_blocks
, 
d
 * (blocks[0]));

8143 
o
 +
d
;

8146  
o
 * (
blocks
[0]);

8147 
	}
}

8149 
	$√w_dy«ªc_lﬂd_blocks
(c⁄° *
ßve
, 
size
)

8151 c⁄° 
ßve°©e_block
 *
blocks
 = 
ßve
;

8152 
cou¡
 = 
size
 / (
blocks
[0]);

8153 
u_öt
 
ªgs_ßve
[32];

8154 
uöt32_t
 
f
;

8155 
i
, 
b
;

8157 
	`gë_addr
(
psxRegs
.
pc
);

8160 
	`mem˝y
(
ªgs_ßve
, &
psxRegs
.
GPR
, (regs_save));

8161 
i
 = 1; i < 32; i++)

8162 
psxRegs
.
GPR
.
r
[
i
] = 0x80000000;

8164 
b
 = 0; b < 
cou¡
; b++) {

8165 
f
 = 
blocks
[
b
].
ªgÊags
, 
i
 = 0; f; f >>= 1, i++) {

8166 i‡(
f
 & 1)

8167 
psxRegs
.
GPR
.
r
[
i
] = 0x1f800000;

8170 
	`gë_addr
(
blocks
[
b
].
addr
);

8172 
f
 = 
blocks
[
b
].
ªgÊags
, 
i
 = 0; f; f >>= 1, i++) {

8173 i‡(
f
 & 1)

8174 
psxRegs
.
GPR
.
r
[
i
] = 0x80000000;

8178 
	`mem˝y
(&
psxRegs
.
GPR
, 
ªgs_ßve
, (regs_save));

8179 
	}
}

8181 
	$√w_ªcompûe_block
(
addr
)

8183 
u_öt
 
∑gñimô
 = 0;

8184 
u_öt
 
°©e_rÊags
 = 0;

8185 
i
;

8187 
	`as£m_debug
("NOTCOMPILED:ádd∏%x -> %x\n", ()
addr
, ()
out
);

8199 
i
 = 1; i < 32; i++) {

8200 i‡((
psxRegs
.
GPR
.
r
[
i
] & 0xffff0000) == 0x1f800000)

8201 
°©e_rÊags
 |1 << 
i
;

8204 
°¨t
 = (
u_öt
)
addr
&~3;

8206 
√w_dy«ªc_did_compûe
=1;

8207 i‡(
C⁄fig
.
HLE
 && 
°¨t
 == 0x80001000)

8210 
u_öt
 
begönög
=(u_öt)
out
;

8211 
u_öt
 
∑ge
=
	`gë_∑ge
(
°¨t
);

8212 
övÆid_code
[
°¨t
>>12]=0;

8213 
	`emô_movimm
(
°¨t
,0);

8214 
	`emô_wrôew‹d
(0,()&
pˇddr
);

8215 
	`emô_jmp
(()
√w_dy«_Àave
);

8216 
	`lôîÆ_poﬁ
(0);

8217 #ifde‡
__¨m__


8218 
	`__˛ór_ˇche
((*)
begönög
,
out
);

8220 
	`Œ_add_Êags
(
jump_ö
+
∑ge
,
°¨t
,
°©e_rÊags
,(*)
begönög
);

8224 
sour˚
 = 
	`gë_sour˚_°¨t
(
°¨t
, &
∑gñimô
);

8225 i‡(
sour˚
 =
NULL
) {

8226 
	`SysPrötf
("Compûê© bogu†mem‹yáddªss: %08x\n", 
addr
);

8227 
	`exô
(1);

8241 
j
;

8242 
d⁄e
=0;

8243 
ty≥
,
›
,
›2
;

8249 
i
=0;!
d⁄e
;i++) {

8250 
bt
[
i
]=0;
likñy
[i]=0;
ooo
[i]=0;
›2
=0;

8251 
möimum_‰ì_ªgs
[
i
]=0;

8252 
›code
[
i
]=
›
=
sour˚
[i]>>26;

8253 
›
)

8255 0x00: 
	`°r˝y
(
ö¢
[
i
],"•ecül"); 
ty≥
=
NI
;

8256 
›2
=
sour˚
[
i
]&0x3f;

8257 
›2
)

8259 0x00: 
	`°r˝y
(
ö¢
[
i
],"SLL"); 
ty≥
=
SHIFTIMM
; ;

8260 0x02: 
	`°r˝y
(
ö¢
[
i
],"SRL"); 
ty≥
=
SHIFTIMM
; ;

8261 0x03: 
	`°r˝y
(
ö¢
[
i
],"SRA"); 
ty≥
=
SHIFTIMM
; ;

8262 0x04: 
	`°r˝y
(
ö¢
[
i
],"SLLV"); 
ty≥
=
SHIFT
; ;

8263 0x06: 
	`°r˝y
(
ö¢
[
i
],"SRLV"); 
ty≥
=
SHIFT
; ;

8264 0x07: 
	`°r˝y
(
ö¢
[
i
],"SRAV"); 
ty≥
=
SHIFT
; ;

8265 0x08: 
	`°r˝y
(
ö¢
[
i
],"JR"); 
ty≥
=
RJUMP
; ;

8266 0x09: 
	`°r˝y
(
ö¢
[
i
],"JALR"); 
ty≥
=
RJUMP
; ;

8267 0x0C: 
	`°r˝y
(
ö¢
[
i
],"SYSCALL"); 
ty≥
=
SYSCALL
; ;

8268 0x0D: 
	`°r˝y
(
ö¢
[
i
],"BREAK"); 
ty≥
=
OTHER
; ;

8269 0x0F: 
	`°r˝y
(
ö¢
[
i
],"SYNC"); 
ty≥
=
OTHER
; ;

8270 0x10: 
	`°r˝y
(
ö¢
[
i
],"MFHI"); 
ty≥
=
MOV
; ;

8271 0x11: 
	`°r˝y
(
ö¢
[
i
],"MTHI"); 
ty≥
=
MOV
; ;

8272 0x12: 
	`°r˝y
(
ö¢
[
i
],"MFLO"); 
ty≥
=
MOV
; ;

8273 0x13: 
	`°r˝y
(
ö¢
[
i
],"MTLO"); 
ty≥
=
MOV
; ;

8274 0x18: 
	`°r˝y
(
ö¢
[
i
],"MULT"); 
ty≥
=
MULTDIV
; ;

8275 0x19: 
	`°r˝y
(
ö¢
[
i
],"MULTU"); 
ty≥
=
MULTDIV
; ;

8276 0x1A: 
	`°r˝y
(
ö¢
[
i
],"DIV"); 
ty≥
=
MULTDIV
; ;

8277 0x1B: 
	`°r˝y
(
ö¢
[
i
],"DIVU"); 
ty≥
=
MULTDIV
; ;

8278 0x20: 
	`°r˝y
(
ö¢
[
i
],"ADD"); 
ty≥
=
ALU
; ;

8279 0x21: 
	`°r˝y
(
ö¢
[
i
],"ADDU"); 
ty≥
=
ALU
; ;

8280 0x22: 
	`°r˝y
(
ö¢
[
i
],"SUB"); 
ty≥
=
ALU
; ;

8281 0x23: 
	`°r˝y
(
ö¢
[
i
],"SUBU"); 
ty≥
=
ALU
; ;

8282 0x24: 
	`°r˝y
(
ö¢
[
i
],"AND"); 
ty≥
=
ALU
; ;

8283 0x25: 
	`°r˝y
(
ö¢
[
i
],"OR"); 
ty≥
=
ALU
; ;

8284 0x26: 
	`°r˝y
(
ö¢
[
i
],"XOR"); 
ty≥
=
ALU
; ;

8285 0x27: 
	`°r˝y
(
ö¢
[
i
],"NOR"); 
ty≥
=
ALU
; ;

8286 0x2A: 
	`°r˝y
(
ö¢
[
i
],"SLT"); 
ty≥
=
ALU
; ;

8287 0x2B: 
	`°r˝y
(
ö¢
[
i
],"SLTU"); 
ty≥
=
ALU
; ;

8288 0x30: 
	`°r˝y
(
ö¢
[
i
],"TGE"); 
ty≥
=
NI
; ;

8289 0x31: 
	`°r˝y
(
ö¢
[
i
],"TGEU"); 
ty≥
=
NI
; ;

8290 0x32: 
	`°r˝y
(
ö¢
[
i
],"TLT"); 
ty≥
=
NI
; ;

8291 0x33: 
	`°r˝y
(
ö¢
[
i
],"TLTU"); 
ty≥
=
NI
; ;

8292 0x34: 
	`°r˝y
(
ö¢
[
i
],"TEQ"); 
ty≥
=
NI
; ;

8293 0x36: 
	`°r˝y
(
ö¢
[
i
],"TNE"); 
ty≥
=
NI
; ;

8294 #i‚de‡
FORCE32


8295 0x14: 
	`°r˝y
(
ö¢
[
i
],"DSLLV"); 
ty≥
=
SHIFT
; ;

8296 0x16: 
	`°r˝y
(
ö¢
[
i
],"DSRLV"); 
ty≥
=
SHIFT
; ;

8297 0x17: 
	`°r˝y
(
ö¢
[
i
],"DSRAV"); 
ty≥
=
SHIFT
; ;

8298 0x1C: 
	`°r˝y
(
ö¢
[
i
],"DMULT"); 
ty≥
=
MULTDIV
; ;

8299 0x1D: 
	`°r˝y
(
ö¢
[
i
],"DMULTU"); 
ty≥
=
MULTDIV
; ;

8300 0x1E: 
	`°r˝y
(
ö¢
[
i
],"DDIV"); 
ty≥
=
MULTDIV
; ;

8301 0x1F: 
	`°r˝y
(
ö¢
[
i
],"DDIVU"); 
ty≥
=
MULTDIV
; ;

8302 0x2C: 
	`°r˝y
(
ö¢
[
i
],"DADD"); 
ty≥
=
ALU
; ;

8303 0x2D: 
	`°r˝y
(
ö¢
[
i
],"DADDU"); 
ty≥
=
ALU
; ;

8304 0x2E: 
	`°r˝y
(
ö¢
[
i
],"DSUB"); 
ty≥
=
ALU
; ;

8305 0x2F: 
	`°r˝y
(
ö¢
[
i
],"DSUBU"); 
ty≥
=
ALU
; ;

8306 0x38: 
	`°r˝y
(
ö¢
[
i
],"DSLL"); 
ty≥
=
SHIFTIMM
; ;

8307 0x3A: 
	`°r˝y
(
ö¢
[
i
],"DSRL"); 
ty≥
=
SHIFTIMM
; ;

8308 0x3B: 
	`°r˝y
(
ö¢
[
i
],"DSRA"); 
ty≥
=
SHIFTIMM
; ;

8309 0x3C: 
	`°r˝y
(
ö¢
[
i
],"DSLL32"); 
ty≥
=
SHIFTIMM
; ;

8310 0x3E: 
	`°r˝y
(
ö¢
[
i
],"DSRL32"); 
ty≥
=
SHIFTIMM
; ;

8311 0x3F: 
	`°r˝y
(
ö¢
[
i
],"DSRA32"); 
ty≥
=
SHIFTIMM
; ;

8315 0x01: 
	`°r˝y
(
ö¢
[
i
],"ªgimm"); 
ty≥
=
NI
;

8316 
›2
=(
sour˚
[
i
]>>16)&0x1f;

8317 
›2
)

8319 0x00: 
	`°r˝y
(
ö¢
[
i
],"BLTZ"); 
ty≥
=
SJUMP
; ;

8320 0x01: 
	`°r˝y
(
ö¢
[
i
],"BGEZ"); 
ty≥
=
SJUMP
; ;

8321 0x02: 
	`°r˝y
(
ö¢
[
i
],"BLTZL"); 
ty≥
=
SJUMP
; ;

8322 0x03: 
	`°r˝y
(
ö¢
[
i
],"BGEZL"); 
ty≥
=
SJUMP
; ;

8323 0x08: 
	`°r˝y
(
ö¢
[
i
],"TGEI"); 
ty≥
=
NI
; ;

8324 0x09: 
	`°r˝y
(
ö¢
[
i
],"TGEIU"); 
ty≥
=
NI
; ;

8325 0x0A: 
	`°r˝y
(
ö¢
[
i
],"TLTI"); 
ty≥
=
NI
; ;

8326 0x0B: 
	`°r˝y
(
ö¢
[
i
],"TLTIU"); 
ty≥
=
NI
; ;

8327 0x0C: 
	`°r˝y
(
ö¢
[
i
],"TEQI"); 
ty≥
=
NI
; ;

8328 0x0E: 
	`°r˝y
(
ö¢
[
i
],"TNEI"); 
ty≥
=
NI
; ;

8329 0x10: 
	`°r˝y
(
ö¢
[
i
],"BLTZAL"); 
ty≥
=
SJUMP
; ;

8330 0x11: 
	`°r˝y
(
ö¢
[
i
],"BGEZAL"); 
ty≥
=
SJUMP
; ;

8331 0x12: 
	`°r˝y
(
ö¢
[
i
],"BLTZALL"); 
ty≥
=
SJUMP
; ;

8332 0x13: 
	`°r˝y
(
ö¢
[
i
],"BGEZALL"); 
ty≥
=
SJUMP
; ;

8335 0x02: 
	`°r˝y
(
ö¢
[
i
],"J"); 
ty≥
=
UJUMP
; ;

8336 0x03: 
	`°r˝y
(
ö¢
[
i
],"JAL"); 
ty≥
=
UJUMP
; ;

8337 0x04: 
	`°r˝y
(
ö¢
[
i
],"BEQ"); 
ty≥
=
CJUMP
; ;

8338 0x05: 
	`°r˝y
(
ö¢
[
i
],"BNE"); 
ty≥
=
CJUMP
; ;

8339 0x06: 
	`°r˝y
(
ö¢
[
i
],"BLEZ"); 
ty≥
=
CJUMP
; ;

8340 0x07: 
	`°r˝y
(
ö¢
[
i
],"BGTZ"); 
ty≥
=
CJUMP
; ;

8341 0x08: 
	`°r˝y
(
ö¢
[
i
],"ADDI"); 
ty≥
=
IMM16
; ;

8342 0x09: 
	`°r˝y
(
ö¢
[
i
],"ADDIU"); 
ty≥
=
IMM16
; ;

8343 0x0A: 
	`°r˝y
(
ö¢
[
i
],"SLTI"); 
ty≥
=
IMM16
; ;

8344 0x0B: 
	`°r˝y
(
ö¢
[
i
],"SLTIU"); 
ty≥
=
IMM16
; ;

8345 0x0C: 
	`°r˝y
(
ö¢
[
i
],"ANDI"); 
ty≥
=
IMM16
; ;

8346 0x0D: 
	`°r˝y
(
ö¢
[
i
],"ORI"); 
ty≥
=
IMM16
; ;

8347 0x0E: 
	`°r˝y
(
ö¢
[
i
],"XORI"); 
ty≥
=
IMM16
; ;

8348 0x0F: 
	`°r˝y
(
ö¢
[
i
],"LUI"); 
ty≥
=
IMM16
; ;

8349 0x10: 
	`°r˝y
(
ö¢
[
i
],"c›0"); 
ty≥
=
NI
;

8350 
›2
=(
sour˚
[
i
]>>21)&0x1f;

8351 
›2
)

8353 0x00: 
	`°r˝y
(
ö¢
[
i
],"MFC0"); 
ty≥
=
COP0
; ;

8354 0x04: 
	`°r˝y
(
ö¢
[
i
],"MTC0"); 
ty≥
=
COP0
; ;

8355 0x10: 
	`°r˝y
(
ö¢
[
i
],"éb"); 
ty≥
=
NI
;

8356 
sour˚
[
i
]&0x3f)

8358 0x01: 
	`°r˝y
(
ö¢
[
i
],"TLBR"); 
ty≥
=
COP0
; ;

8359 0x02: 
	`°r˝y
(
ö¢
[
i
],"TLBWI"); 
ty≥
=
COP0
; ;

8360 0x06: 
	`°r˝y
(
ö¢
[
i
],"TLBWR"); 
ty≥
=
COP0
; ;

8361 0x08: 
	`°r˝y
(
ö¢
[
i
],"TLBP"); 
ty≥
=
COP0
; ;

8362 #ifde‡
PCSX


8363 0x10: 
	`°r˝y
(
ö¢
[
i
],"RFE"); 
ty≥
=
COP0
; ;

8365 0x18: 
	`°r˝y
(
ö¢
[
i
],"ERET"); 
ty≥
=
COP0
; ;

8370 0x11: 
	`°r˝y
(
ö¢
[
i
],"c›1"); 
ty≥
=
NI
;

8371 
›2
=(
sour˚
[
i
]>>21)&0x1f;

8372 
›2
)

8374 0x00: 
	`°r˝y
(
ö¢
[
i
],"MFC1"); 
ty≥
=
COP1
; ;

8375 0x01: 
	`°r˝y
(
ö¢
[
i
],"DMFC1"); 
ty≥
=
COP1
; ;

8376 0x02: 
	`°r˝y
(
ö¢
[
i
],"CFC1"); 
ty≥
=
COP1
; ;

8377 0x04: 
	`°r˝y
(
ö¢
[
i
],"MTC1"); 
ty≥
=
COP1
; ;

8378 0x05: 
	`°r˝y
(
ö¢
[
i
],"DMTC1"); 
ty≥
=
COP1
; ;

8379 0x06: 
	`°r˝y
(
ö¢
[
i
],"CTC1"); 
ty≥
=
COP1
; ;

8380 0x08: 
	`°r˝y
(
ö¢
[
i
],"BC1"); 
ty≥
=
FJUMP
;

8381 (
sour˚
[
i
]>>16)&0x3)

8383 0x00: 
	`°r˝y
(
ö¢
[
i
],"BC1F"); ;

8384 0x01: 
	`°r˝y
(
ö¢
[
i
],"BC1T"); ;

8385 0x02: 
	`°r˝y
(
ö¢
[
i
],"BC1FL"); ;

8386 0x03: 
	`°r˝y
(
ö¢
[
i
],"BC1TL"); ;

8389 0x10: 
	`°r˝y
(
ö¢
[
i
],"C1.S"); 
ty≥
=
NI
;

8390 
sour˚
[
i
]&0x3f)

8392 0x00: 
	`°r˝y
(
ö¢
[
i
],"ADD.S"); 
ty≥
=
FLOAT
; ;

8393 0x01: 
	`°r˝y
(
ö¢
[
i
],"SUB.S"); 
ty≥
=
FLOAT
; ;

8394 0x02: 
	`°r˝y
(
ö¢
[
i
],"MUL.S"); 
ty≥
=
FLOAT
; ;

8395 0x03: 
	`°r˝y
(
ö¢
[
i
],"DIV.S"); 
ty≥
=
FLOAT
; ;

8396 0x04: 
	`°r˝y
(
ö¢
[
i
],"SQRT.S"); 
ty≥
=
FLOAT
; ;

8397 0x05: 
	`°r˝y
(
ö¢
[
i
],"ABS.S"); 
ty≥
=
FLOAT
; ;

8398 0x06: 
	`°r˝y
(
ö¢
[
i
],"MOV.S"); 
ty≥
=
FLOAT
; ;

8399 0x07: 
	`°r˝y
(
ö¢
[
i
],"NEG.S"); 
ty≥
=
FLOAT
; ;

8400 0x08: 
	`°r˝y
(
ö¢
[
i
],"ROUND.L.S"); 
ty≥
=
FCONV
; ;

8401 0x09: 
	`°r˝y
(
ö¢
[
i
],"TRUNC.L.S"); 
ty≥
=
FCONV
; ;

8402 0x0A: 
	`°r˝y
(
ö¢
[
i
],"CEIL.L.S"); 
ty≥
=
FCONV
; ;

8403 0x0B: 
	`°r˝y
(
ö¢
[
i
],"FLOOR.L.S"); 
ty≥
=
FCONV
; ;

8404 0x0C: 
	`°r˝y
(
ö¢
[
i
],"ROUND.W.S"); 
ty≥
=
FCONV
; ;

8405 0x0D: 
	`°r˝y
(
ö¢
[
i
],"TRUNC.W.S"); 
ty≥
=
FCONV
; ;

8406 0x0E: 
	`°r˝y
(
ö¢
[
i
],"CEIL.W.S"); 
ty≥
=
FCONV
; ;

8407 0x0F: 
	`°r˝y
(
ö¢
[
i
],"FLOOR.W.S"); 
ty≥
=
FCONV
; ;

8408 0x21: 
	`°r˝y
(
ö¢
[
i
],"CVT.D.S"); 
ty≥
=
FCONV
; ;

8409 0x24: 
	`°r˝y
(
ö¢
[
i
],"CVT.W.S"); 
ty≥
=
FCONV
; ;

8410 0x25: 
	`°r˝y
(
ö¢
[
i
],"CVT.L.S"); 
ty≥
=
FCONV
; ;

8411 0x30: 
	`°r˝y
(
ö¢
[
i
],"C.F.S"); 
ty≥
=
FCOMP
; ;

8412 0x31: 
	`°r˝y
(
ö¢
[
i
],"C.UN.S"); 
ty≥
=
FCOMP
; ;

8413 0x32: 
	`°r˝y
(
ö¢
[
i
],"C.EQ.S"); 
ty≥
=
FCOMP
; ;

8414 0x33: 
	`°r˝y
(
ö¢
[
i
],"C.UEQ.S"); 
ty≥
=
FCOMP
; ;

8415 0x34: 
	`°r˝y
(
ö¢
[
i
],"C.OLT.S"); 
ty≥
=
FCOMP
; ;

8416 0x35: 
	`°r˝y
(
ö¢
[
i
],"C.ULT.S"); 
ty≥
=
FCOMP
; ;

8417 0x36: 
	`°r˝y
(
ö¢
[
i
],"C.OLE.S"); 
ty≥
=
FCOMP
; ;

8418 0x37: 
	`°r˝y
(
ö¢
[
i
],"C.ULE.S"); 
ty≥
=
FCOMP
; ;

8419 0x38: 
	`°r˝y
(
ö¢
[
i
],"C.SF.S"); 
ty≥
=
FCOMP
; ;

8420 0x39: 
	`°r˝y
(
ö¢
[
i
],"C.NGLE.S"); 
ty≥
=
FCOMP
; ;

8421 0x3A: 
	`°r˝y
(
ö¢
[
i
],"C.SEQ.S"); 
ty≥
=
FCOMP
; ;

8422 0x3B: 
	`°r˝y
(
ö¢
[
i
],"C.NGL.S"); 
ty≥
=
FCOMP
; ;

8423 0x3C: 
	`°r˝y
(
ö¢
[
i
],"C.LT.S"); 
ty≥
=
FCOMP
; ;

8424 0x3D: 
	`°r˝y
(
ö¢
[
i
],"C.NGE.S"); 
ty≥
=
FCOMP
; ;

8425 0x3E: 
	`°r˝y
(
ö¢
[
i
],"C.LE.S"); 
ty≥
=
FCOMP
; ;

8426 0x3F: 
	`°r˝y
(
ö¢
[
i
],"C.NGT.S"); 
ty≥
=
FCOMP
; ;

8429 0x11: 
	`°r˝y
(
ö¢
[
i
],"C1.D"); 
ty≥
=
NI
;

8430 
sour˚
[
i
]&0x3f)

8432 0x00: 
	`°r˝y
(
ö¢
[
i
],"ADD.D"); 
ty≥
=
FLOAT
; ;

8433 0x01: 
	`°r˝y
(
ö¢
[
i
],"SUB.D"); 
ty≥
=
FLOAT
; ;

8434 0x02: 
	`°r˝y
(
ö¢
[
i
],"MUL.D"); 
ty≥
=
FLOAT
; ;

8435 0x03: 
	`°r˝y
(
ö¢
[
i
],"DIV.D"); 
ty≥
=
FLOAT
; ;

8436 0x04: 
	`°r˝y
(
ö¢
[
i
],"SQRT.D"); 
ty≥
=
FLOAT
; ;

8437 0x05: 
	`°r˝y
(
ö¢
[
i
],"ABS.D"); 
ty≥
=
FLOAT
; ;

8438 0x06: 
	`°r˝y
(
ö¢
[
i
],"MOV.D"); 
ty≥
=
FLOAT
; ;

8439 0x07: 
	`°r˝y
(
ö¢
[
i
],"NEG.D"); 
ty≥
=
FLOAT
; ;

8440 0x08: 
	`°r˝y
(
ö¢
[
i
],"ROUND.L.D"); 
ty≥
=
FCONV
; ;

8441 0x09: 
	`°r˝y
(
ö¢
[
i
],"TRUNC.L.D"); 
ty≥
=
FCONV
; ;

8442 0x0A: 
	`°r˝y
(
ö¢
[
i
],"CEIL.L.D"); 
ty≥
=
FCONV
; ;

8443 0x0B: 
	`°r˝y
(
ö¢
[
i
],"FLOOR.L.D"); 
ty≥
=
FCONV
; ;

8444 0x0C: 
	`°r˝y
(
ö¢
[
i
],"ROUND.W.D"); 
ty≥
=
FCONV
; ;

8445 0x0D: 
	`°r˝y
(
ö¢
[
i
],"TRUNC.W.D"); 
ty≥
=
FCONV
; ;

8446 0x0E: 
	`°r˝y
(
ö¢
[
i
],"CEIL.W.D"); 
ty≥
=
FCONV
; ;

8447 0x0F: 
	`°r˝y
(
ö¢
[
i
],"FLOOR.W.D"); 
ty≥
=
FCONV
; ;

8448 0x20: 
	`°r˝y
(
ö¢
[
i
],"CVT.S.D"); 
ty≥
=
FCONV
; ;

8449 0x24: 
	`°r˝y
(
ö¢
[
i
],"CVT.W.D"); 
ty≥
=
FCONV
; ;

8450 0x25: 
	`°r˝y
(
ö¢
[
i
],"CVT.L.D"); 
ty≥
=
FCONV
; ;

8451 0x30: 
	`°r˝y
(
ö¢
[
i
],"C.F.D"); 
ty≥
=
FCOMP
; ;

8452 0x31: 
	`°r˝y
(
ö¢
[
i
],"C.UN.D"); 
ty≥
=
FCOMP
; ;

8453 0x32: 
	`°r˝y
(
ö¢
[
i
],"C.EQ.D"); 
ty≥
=
FCOMP
; ;

8454 0x33: 
	`°r˝y
(
ö¢
[
i
],"C.UEQ.D"); 
ty≥
=
FCOMP
; ;

8455 0x34: 
	`°r˝y
(
ö¢
[
i
],"C.OLT.D"); 
ty≥
=
FCOMP
; ;

8456 0x35: 
	`°r˝y
(
ö¢
[
i
],"C.ULT.D"); 
ty≥
=
FCOMP
; ;

8457 0x36: 
	`°r˝y
(
ö¢
[
i
],"C.OLE.D"); 
ty≥
=
FCOMP
; ;

8458 0x37: 
	`°r˝y
(
ö¢
[
i
],"C.ULE.D"); 
ty≥
=
FCOMP
; ;

8459 0x38: 
	`°r˝y
(
ö¢
[
i
],"C.SF.D"); 
ty≥
=
FCOMP
; ;

8460 0x39: 
	`°r˝y
(
ö¢
[
i
],"C.NGLE.D"); 
ty≥
=
FCOMP
; ;

8461 0x3A: 
	`°r˝y
(
ö¢
[
i
],"C.SEQ.D"); 
ty≥
=
FCOMP
; ;

8462 0x3B: 
	`°r˝y
(
ö¢
[
i
],"C.NGL.D"); 
ty≥
=
FCOMP
; ;

8463 0x3C: 
	`°r˝y
(
ö¢
[
i
],"C.LT.D"); 
ty≥
=
FCOMP
; ;

8464 0x3D: 
	`°r˝y
(
ö¢
[
i
],"C.NGE.D"); 
ty≥
=
FCOMP
; ;

8465 0x3E: 
	`°r˝y
(
ö¢
[
i
],"C.LE.D"); 
ty≥
=
FCOMP
; ;

8466 0x3F: 
	`°r˝y
(
ö¢
[
i
],"C.NGT.D"); 
ty≥
=
FCOMP
; ;

8469 0x14: 
	`°r˝y
(
ö¢
[
i
],"C1.W"); 
ty≥
=
NI
;

8470 
sour˚
[
i
]&0x3f)

8472 0x20: 
	`°r˝y
(
ö¢
[
i
],"CVT.S.W"); 
ty≥
=
FCONV
; ;

8473 0x21: 
	`°r˝y
(
ö¢
[
i
],"CVT.D.W"); 
ty≥
=
FCONV
; ;

8476 0x15: 
	`°r˝y
(
ö¢
[
i
],"C1.L"); 
ty≥
=
NI
;

8477 
sour˚
[
i
]&0x3f)

8479 0x20: 
	`°r˝y
(
ö¢
[
i
],"CVT.S.L"); 
ty≥
=
FCONV
; ;

8480 0x21: 
	`°r˝y
(
ö¢
[
i
],"CVT.D.L"); 
ty≥
=
FCONV
; ;

8485 #i‚de‡
FORCE32


8486 0x14: 
	`°r˝y
(
ö¢
[
i
],"BEQL"); 
ty≥
=
CJUMP
; ;

8487 0x15: 
	`°r˝y
(
ö¢
[
i
],"BNEL"); 
ty≥
=
CJUMP
; ;

8488 0x16: 
	`°r˝y
(
ö¢
[
i
],"BLEZL"); 
ty≥
=
CJUMP
; ;

8489 0x17: 
	`°r˝y
(
ö¢
[
i
],"BGTZL"); 
ty≥
=
CJUMP
; ;

8490 0x18: 
	`°r˝y
(
ö¢
[
i
],"DADDI"); 
ty≥
=
IMM16
; ;

8491 0x19: 
	`°r˝y
(
ö¢
[
i
],"DADDIU"); 
ty≥
=
IMM16
; ;

8492 0x1A: 
	`°r˝y
(
ö¢
[
i
],"LDL"); 
ty≥
=
LOADLR
; ;

8493 0x1B: 
	`°r˝y
(
ö¢
[
i
],"LDR"); 
ty≥
=
LOADLR
; ;

8495 0x20: 
	`°r˝y
(
ö¢
[
i
],"LB"); 
ty≥
=
LOAD
; ;

8496 0x21: 
	`°r˝y
(
ö¢
[
i
],"LH"); 
ty≥
=
LOAD
; ;

8497 0x22: 
	`°r˝y
(
ö¢
[
i
],"LWL"); 
ty≥
=
LOADLR
; ;

8498 0x23: 
	`°r˝y
(
ö¢
[
i
],"LW"); 
ty≥
=
LOAD
; ;

8499 0x24: 
	`°r˝y
(
ö¢
[
i
],"LBU"); 
ty≥
=
LOAD
; ;

8500 0x25: 
	`°r˝y
(
ö¢
[
i
],"LHU"); 
ty≥
=
LOAD
; ;

8501 0x26: 
	`°r˝y
(
ö¢
[
i
],"LWR"); 
ty≥
=
LOADLR
; ;

8502 #i‚de‡
FORCE32


8503 0x27: 
	`°r˝y
(
ö¢
[
i
],"LWU"); 
ty≥
=
LOAD
; ;

8505 0x28: 
	`°r˝y
(
ö¢
[
i
],"SB"); 
ty≥
=
STORE
; ;

8506 0x29: 
	`°r˝y
(
ö¢
[
i
],"SH"); 
ty≥
=
STORE
; ;

8507 0x2A: 
	`°r˝y
(
ö¢
[
i
],"SWL"); 
ty≥
=
STORELR
; ;

8508 0x2B: 
	`°r˝y
(
ö¢
[
i
],"SW"); 
ty≥
=
STORE
; ;

8509 #i‚de‡
FORCE32


8510 0x2C: 
	`°r˝y
(
ö¢
[
i
],"SDL"); 
ty≥
=
STORELR
; ;

8511 0x2D: 
	`°r˝y
(
ö¢
[
i
],"SDR"); 
ty≥
=
STORELR
; ;

8513 0x2E: 
	`°r˝y
(
ö¢
[
i
],"SWR"); 
ty≥
=
STORELR
; ;

8514 0x2F: 
	`°r˝y
(
ö¢
[
i
],"CACHE"); 
ty≥
=
NOP
; ;

8515 0x30: 
	`°r˝y
(
ö¢
[
i
],"LL"); 
ty≥
=
NI
; ;

8516 0x31: 
	`°r˝y
(
ö¢
[
i
],"LWC1"); 
ty≥
=
C1LS
; ;

8517 #i‚de‡
FORCE32


8518 0x34: 
	`°r˝y
(
ö¢
[
i
],"LLD"); 
ty≥
=
NI
; ;

8519 0x35: 
	`°r˝y
(
ö¢
[
i
],"LDC1"); 
ty≥
=
C1LS
; ;

8520 0x37: 
	`°r˝y
(
ö¢
[
i
],"LD"); 
ty≥
=
LOAD
; ;

8522 0x38: 
	`°r˝y
(
ö¢
[
i
],"SC"); 
ty≥
=
NI
; ;

8523 0x39: 
	`°r˝y
(
ö¢
[
i
],"SWC1"); 
ty≥
=
C1LS
; ;

8524 #i‚de‡
FORCE32


8525 0x3C: 
	`°r˝y
(
ö¢
[
i
],"SCD"); 
ty≥
=
NI
; ;

8526 0x3D: 
	`°r˝y
(
ö¢
[
i
],"SDC1"); 
ty≥
=
C1LS
; ;

8527 0x3F: 
	`°r˝y
(
ö¢
[
i
],"SD"); 
ty≥
=
STORE
; ;

8529 #ifde‡
PCSX


8530 0x12: 
	`°r˝y
(
ö¢
[
i
],"COP2"); 
ty≥
=
NI
;

8531 
›2
=(
sour˚
[
i
]>>21)&0x1f;

8533 i‡(
sour˚
[
i
]&0x3f) {

8534 i‡(
gã_h™dÀrs
[
sour˚
[
i
]&0x3f]!=
NULL
) {

8535 i‡(
gã_ªg«mes
[
sour˚
[
i
]&0x3f]!=
NULL
)

8536 
	`°r˝y
(
ö¢
[
i
],
gã_ªg«mes
[
sour˚
[i]&0x3f]);

8538 
	`¢¥ötf
(
ö¢
[
i
], (ö¢[i]), "COP2 %x", 
sour˚
[i]&0x3f);

8539 
ty≥
=
C2OP
;

8542 
›2
)

8544 0x00: 
	`°r˝y
(
ö¢
[
i
],"MFC2"); 
ty≥
=
COP2
; ;

8545 0x02: 
	`°r˝y
(
ö¢
[
i
],"CFC2"); 
ty≥
=
COP2
; ;

8546 0x04: 
	`°r˝y
(
ö¢
[
i
],"MTC2"); 
ty≥
=
COP2
; ;

8547 0x06: 
	`°r˝y
(
ö¢
[
i
],"CTC2"); 
ty≥
=
COP2
; ;

8550 0x32: 
	`°r˝y
(
ö¢
[
i
],"LWC2"); 
ty≥
=
C2LS
; ;

8551 0x3A: 
	`°r˝y
(
ö¢
[
i
],"SWC2"); 
ty≥
=
C2LS
; ;

8552 0x3B: 
	`°r˝y
(
ö¢
[
i
],"HLECALL"); 
ty≥
=
HLECALL
; ;

8554 : 
	`°r˝y
(
ö¢
[
i
],"???"); 
ty≥
=
NI
;

8555 
	`SysPrötf
("NI %08x @%08x (%08x)\n", 
sour˚
[
i
], 
addr
 + i*4,áddr);

8558 
ôy≥
[
i
]=
ty≥
;

8559 
›code2
[
i
]=
›2
;

8561 
…1
[
i
]=0;

8562 
us1
[
i
]=0;

8563 
us2
[
i
]=0;

8564 
dï1
[
i
]=0;

8565 
dï2
[
i
]=0;

8566 
gã_rs
[
i
]=
gã_π
[i]=0;

8567 
ty≥
) {

8568 
LOAD
:

8569 
rs1
[
i
]=(
sour˚
[i]>>21)&0x1f;

8570 
rs2
[
i
]=0;

8571 
π1
[
i
]=(
sour˚
[i]>>16)&0x1f;

8572 
π2
[
i
]=0;

8573 
imm
[
i
]=()
sour˚
[i];

8575 
STORE
:

8576 
STORELR
:

8577 
rs1
[
i
]=(
sour˚
[i]>>21)&0x1f;

8578 
rs2
[
i
]=(
sour˚
[i]>>16)&0x1f;

8579 
π1
[
i
]=0;

8580 
π2
[
i
]=0;

8581 
imm
[
i
]=()
sour˚
[i];

8582 if(
›
==0x2c||›==0x2d||›==0x3fË
us1
[
i
]=
rs2
[i];

8584 
LOADLR
:

8587 
rs1
[
i
]=(
sour˚
[i]>>21)&0x1f;

8588 
rs2
[
i
]=(
sour˚
[i]>>16)&0x1f;

8589 
π1
[
i
]=(
sour˚
[i]>>16)&0x1f;

8590 
π2
[
i
]=0;

8591 
imm
[
i
]=()
sour˚
[i];

8592 if(
›
==0x1a||›==0x1bË
us1
[
i
]=
rs2
[i];

8593 if(
›
==0x26Ë
dï1
[
i
]=
π1
[i];

8595 
IMM16
:

8596 i‡(
›
==0x0fË
rs1
[
i
]=0;

8597 
rs1
[
i
]=(
sour˚
[i]>>21)&0x1f;

8598 
rs2
[
i
]=0;

8599 
π1
[
i
]=(
sour˚
[i]>>16)&0x1f;

8600 
π2
[
i
]=0;

8601 if(
›
>=0x0c&&op<=0x0e) {

8602 
imm
[
i
]=()
sour˚
[i];

8604 
imm
[
i
]=()
sour˚
[i];

8606 if(
›
==0x18||›==0x19Ë
us1
[
i
]=
rs1
[i];

8607 if(
›
==0x0a||›==0x0bË
us1
[
i
]=
rs1
[i];

8608 if(
›
==0x0d||›==0x0eË
dï1
[
i
]=
rs1
[i];

8610 
UJUMP
:

8611 
rs1
[
i
]=0;

8612 
rs2
[
i
]=0;

8613 
π1
[
i
]=0;

8614 
π2
[
i
]=0;

8616 i‡(
›
&1) {

8617 
π1
[
i
]=31;

8619 
rs2
[
i
]=
CCREG
;

8621 
RJUMP
:

8622 
rs1
[
i
]=(
sour˚
[i]>>21)&0x1f;

8623 
rs2
[
i
]=0;

8624 
π1
[
i
]=0;

8625 
π2
[
i
]=0;

8627 i‡(
›2
&1) {

8628 
π1
[
i
]=(
sour˚
[i]>>11)&0x1f;

8630 
rs2
[
i
]=
CCREG
;

8632 
CJUMP
:

8633 
rs1
[
i
]=(
sour˚
[i]>>21)&0x1f;

8634 
rs2
[
i
]=(
sour˚
[i]>>16)&0x1f;

8635 
π1
[
i
]=0;

8636 
π2
[
i
]=0;

8637 if(
›
&2) {

8638 
rs2
[
i
]=0;

8640 
us1
[
i
]=
rs1
[i];

8641 
us2
[
i
]=
rs2
[i];

8642 
likñy
[
i
]=
›
>>4;

8644 
SJUMP
:

8645 
rs1
[
i
]=(
sour˚
[i]>>21)&0x1f;

8646 
rs2
[
i
]=
CCREG
;

8647 
π1
[
i
]=0;

8648 
π2
[
i
]=0;

8649 
us1
[
i
]=
rs1
[i];

8650 if(
›2
&0x10) {

8651 
π1
[
i
]=31;

8654 
likñy
[
i
]=(
›2
&2)>>1;

8656 
FJUMP
:

8657 
rs1
[
i
]=
FSREG
;

8658 
rs2
[
i
]=
CSREG
;

8659 
π1
[
i
]=0;

8660 
π2
[
i
]=0;

8661 
likñy
[
i
]=((
sour˚
[i])>>17)&1;

8663 
ALU
:

8664 
rs1
[
i
]=(
sour˚
[i]>>21)&0x1f;

8665 
rs2
[
i
]=(
sour˚
[i]>>16)&0x1f;

8666 
π1
[
i
]=(
sour˚
[i]>>11)&0x1f;

8667 
π2
[
i
]=0;

8668 if(
›2
==0x2a||op2==0x2b) {

8669 
us1
[
i
]=
rs1
[i];
us2
[i]=
rs2
[i];

8671 if(
›2
>=0x24&&op2<=0x27) {

8672 
dï1
[
i
]=
rs1
[i];
dï2
[i]=
rs2
[i];

8674 if(
›2
>=0x2c&&op2<=0x2f) {

8675 
dï1
[
i
]=
rs1
[i];
dï2
[i]=
rs2
[i];

8678 
MULTDIV
:

8679 
rs1
[
i
]=(
sour˚
[i]>>21)&0x1f;

8680 
rs2
[
i
]=(
sour˚
[i]>>16)&0x1f;

8681 
π1
[
i
]=
HIREG
;

8682 
π2
[
i
]=
LOREG
;

8683 i‡(
›2
>=0x1c&&op2<=0x1f) {

8684 
us1
[
i
]=
rs1
[i];
us2
[i]=
rs2
[i];

8687 
MOV
:

8688 
rs1
[
i
]=0;

8689 
rs2
[
i
]=0;

8690 
π1
[
i
]=0;

8691 
π2
[
i
]=0;

8692 if(
›2
==0x10Ë
rs1
[
i
]=
HIREG
;

8693 if(
›2
==0x11Ë
π1
[
i
]=
HIREG
;

8694 if(
›2
==0x12Ë
rs1
[
i
]=
LOREG
;

8695 if(
›2
==0x13Ë
π1
[
i
]=
LOREG
;

8696 if((
›2
&0x1d)==0x10Ë
π1
[
i
]=(
sour˚
[i]>>11)&0x1f;

8697 if((
›2
&0x1d)==0x11Ë
rs1
[
i
]=(
sour˚
[i]>>21)&0x1f;

8698 
dï1
[
i
]=
rs1
[i];

8700 
SHIFT
:

8701 
rs1
[
i
]=(
sour˚
[i]>>16)&0x1f;

8702 
rs2
[
i
]=(
sour˚
[i]>>21)&0x1f;

8703 
π1
[
i
]=(
sour˚
[i]>>11)&0x1f;

8704 
π2
[
i
]=0;

8706 if(
›2
>=0x14&&›2<=0x17Ë
us1
[
i
]=
rs1
[i];

8708 
SHIFTIMM
:

8709 
rs1
[
i
]=(
sour˚
[i]>>16)&0x1f;

8710 
rs2
[
i
]=0;

8711 
π1
[
i
]=(
sour˚
[i]>>11)&0x1f;

8712 
π2
[
i
]=0;

8713 
imm
[
i
]=(
sour˚
[i]>>6)&0x1f;

8715 if(
›2
>=0x3cË
imm
[
i
]|=0x20;

8717 if(
›2
>=0x38&&›2!=0x3cË
us1
[
i
]=
rs1
[i];

8719 
COP0
:

8720 
rs1
[
i
]=0;

8721 
rs2
[
i
]=0;

8722 
π1
[
i
]=0;

8723 
π2
[
i
]=0;

8724 if(
›2
==0Ë
π1
[
i
]=(
sour˚
[i]>>16)&0x1F;

8725 if(
›2
==4Ë
rs1
[
i
]=(
sour˚
[i]>>16)&0x1F;

8726 if(
›2
==4&&((
sour˚
[
i
]>>11)&0x1f)==12Ë
π2
[i]=
CSREG
;

8727 if(
›2
==16Ëif((
sour˚
[
i
]&0x3f)==0x18Ë
rs2
[i]=
CCREG
;

8729 
COP1
:

8730 
rs1
[
i
]=0;

8731 
rs2
[
i
]=0;

8732 
π1
[
i
]=0;

8733 
π2
[
i
]=0;

8734 if(
›2
<3Ë
π1
[
i
]=(
sour˚
[i]>>16)&0x1F;

8735 if(
›2
>3Ë
rs1
[
i
]=(
sour˚
[i]>>16)&0x1F;

8736 if(
›2
==5Ë
us1
[
i
]=
rs1
[i];

8737 
rs2
[
i
]=
CSREG
;

8739 
COP2
:

8740 
rs1
[
i
]=0;

8741 
rs2
[
i
]=0;

8742 
π1
[
i
]=0;

8743 
π2
[
i
]=0;

8744 if(
›2
<3Ë
π1
[
i
]=(
sour˚
[i]>>16)&0x1F;

8745 if(
›2
>3Ë
rs1
[
i
]=(
sour˚
[i]>>16)&0x1F;

8746 
rs2
[
i
]=
CSREG
;

8747 
gr
=(
sour˚
[
i
]>>11)&0x1F;

8748 
›2
)

8750 0x00: 
gã_rs
[
i
]=1Œ<<
gr
; ;

8751 0x04: 
gã_π
[
i
]=1Œ<<
gr
; ;

8752 0x02: 
gã_rs
[
i
]=1Œ<<(
gr
+32); ;

8753 0x06: 
gã_π
[
i
]=1Œ<<(
gr
+32); ;

8756 
C1LS
:

8757 
rs1
[
i
]=(
sour˚
[i]>>21)&0x1F;

8758 
rs2
[
i
]=
CSREG
;

8759 
π1
[
i
]=0;

8760 
π2
[
i
]=0;

8761 
imm
[
i
]=()
sour˚
[i];

8763 
C2LS
:

8764 
rs1
[
i
]=(
sour˚
[i]>>21)&0x1F;

8765 
rs2
[
i
]=0;

8766 
π1
[
i
]=0;

8767 
π2
[
i
]=0;

8768 
imm
[
i
]=()
sour˚
[i];

8769 if(
›
==0x32Ë
gã_π
[
i
]=1Œ<<((
sour˚
[i]>>16)&0x1F);

8770 
gã_rs
[
i
]=1Œ<<((
sour˚
[i]>>16)&0x1F);

8772 
C2OP
:

8773 
rs1
[
i
]=0;

8774 
rs2
[
i
]=0;

8775 
π1
[
i
]=0;

8776 
π2
[
i
]=0;

8777 
gã_rs
[
i
]=
gã_ªg_ªads
[
sour˚
[i]&0x3f];

8778 
gã_π
[
i
]=
gã_ªg_wrôes
[
sour˚
[i]&0x3f];

8779 
gã_π
[
i
]|=1ll<<63;

8780 if((
sour˚
[
i
]&0x3f)==
GTE_MVMVA
) {

8781 
v
 = (
sour˚
[
i
] >> 15) & 3;

8782 
gã_rs
[
i
]&=~0xe3fll;

8783 if(
v
==3Ë
gã_rs
[
i
]|=0xe00ll;

8784 
gã_rs
[
i
]|=3Œ<<(
v
*2);

8787 
FLOAT
:

8788 
FCONV
:

8789 
rs1
[
i
]=0;

8790 
rs2
[
i
]=
CSREG
;

8791 
π1
[
i
]=0;

8792 
π2
[
i
]=0;

8794 
FCOMP
:

8795 
rs1
[
i
]=
FSREG
;

8796 
rs2
[
i
]=
CSREG
;

8797 
π1
[
i
]=
FSREG
;

8798 
π2
[
i
]=0;

8800 
SYSCALL
:

8801 
HLECALL
:

8802 
INTCALL
:

8803 
rs1
[
i
]=
CCREG
;

8804 
rs2
[
i
]=0;

8805 
π1
[
i
]=0;

8806 
π2
[
i
]=0;

8809 
rs1
[
i
]=0;

8810 
rs2
[
i
]=0;

8811 
π1
[
i
]=0;

8812 
π2
[
i
]=0;

8815 if(
ty≥
==
UJUMP
)

8816 
ba
[
i
]=((
°¨t
+i*4+4)&0xF0000000)|((()
sour˚
[i]<<6)>>4);

8817 if(
ty≥
==
CJUMP
&&
rs1
[
i
]==
rs2
[i]&&(
›
&1))

8818 
ba
[
i
]=
°¨t
+i*4+8;

8819 if(
ty≥
==
SJUMP
&&
rs1
[
i
]==0&&!(
›2
&1))

8820 
ba
[
i
]=
°¨t
+i*4+8;

8821 if(
ty≥
==
CJUMP
||ty≥==
SJUMP
||ty≥==
FJUMP
)

8822 
ba
[
i
]=
°¨t
+i*4+4+((sig√d )(()
sour˚
[i]<<16)>>14);

8823 
ba
[
i
]=-1;

8824 #ifde‡
PCSX


8825 if(
i
>0&&(
ôy≥
[i-1]==
RJUMP
||ôy≥[i-1]==
UJUMP
||ôy≥[i-1]==
CJUMP
||ôy≥[i-1]==
SJUMP
||ôy≥[i-1]==
FJUMP
)) {

8826 
do_ö_öåp
=0;

8828 if(
ty≥
==
RJUMP
||ty≥==
UJUMP
||ty≥==
CJUMP
||ty≥==
SJUMP
||ty≥==
FJUMP
) {

8830 
	`SysPrötf
("bønch i¿dñay slŸ @%08x (%08x)\n", 
addr
 + 
i
*4,áddr);

8831 
do_ö_öåp
=1;

8834 if((
ty≥
==
LOAD
||ty≥==
LOADLR
||ty≥==
COP0
||ty≥==
COP2
||ty≥==
C2LS
)&&
π1
[
i
]!=0) {

8835 
t
=(
ba
[
i
-1]-
°¨t
)/4;

8836 if(0 <
t
 &&Å < 
i
 &&(
π1
[i]==
rs1
[t]||π1[i]==
rs2
[t])&&
ôy≥
[t]!=
CJUMP
&&ôy≥[t]!=
SJUMP
) {

8838 
	`SysPrötf
("lﬂd dñay @%08x (%08x)\n", 
addr
 + 
i
*4,áddr);

8839 
do_ö_öåp
=1;

8840 
bt
[
t
+1]=1;

8842 if(
i
>=2&&
π1
[i-2]==2&&π1[i]==2&&
rs1
[i]!=2&&
rs2
[i]!=2&&rs1[i-1]!=2&&rs2[i-1]!=2&&

8843 !(
i
>=3&&(
ôy≥
[i-3]==
RJUMP
||ôy≥[i-3]==
UJUMP
||ôy≥[i-3]==
CJUMP
||ôy≥[i-3]==
SJUMP
))) {

8845 
	`SysPrötf
("v0 ovîwrôê@%08x (%08x)\n", 
addr
 + 
i
*4,áddr);

8846 
do_ö_öåp
=1;

8849 if(
do_ö_öåp
) {

8850 
rs1
[
i
-1]=
CCREG
;

8851 
rs2
[
i
-1]=
π1
[i-1]=
π2
[i-1]=0;

8852 
ba
[
i
-1]=-1;

8853 
ôy≥
[
i
-1]=
INTCALL
;

8854 
d⁄e
=2;

8855 
i
--;

8860 if(
i
>0&&(
ôy≥
[i-1]==
UJUMP
||ôy≥[i-1]==
RJUMP
||(
sour˚
[i-1]>>16)==0x1000)) {

8861 if(
π1
[
i
-1]==0) {

8862 
d⁄e
=2;

8865 if(
°›_a·î_jÆ
Ë
d⁄e
=1;

8867 if((
sour˚
[
i
+1]&0xfc00003f)==0x0dË
d⁄e
=1;

8870 if(
	`check_addr
(
°¨t
+
i
*4+4)Ë
d⁄e
=1;

8872 if(
i
>
MAXBLOCK
/2Ë
d⁄e
=1;

8874 if(
ôy≥
[
i
]==
SYSCALL
&&
°›_a·î_jÆ
Ë
d⁄e
=1;

8875 if(
ôy≥
[
i
]==
HLECALL
||ôy≥[i]==
INTCALL
Ë
d⁄e
=2;

8876 if(
d⁄e
==2) {

8878 
j
=
i
-1;j>=0;j--)

8880 if(
ba
[
j
]==
°¨t
+
i
*4Ë
d⁄e
=j=0;

8881 if(
ba
[
j
]==
°¨t
+
i
*4+4Ë
d⁄e
=j=0;

8882 if(
ba
[
j
]==
°¨t
+
i
*4+8Ë
d⁄e
=j=0;

8886 if(
°¨t
+
i
*4==
∑gñimô
-4Ë
d⁄e
=1;

8887 
	`as£π
(
°¨t
+
i
*4<
∑gñimô
);

8888 i‡(
i
==
MAXBLOCK
-1Ë
d⁄e
=1;

8890 if(
ôy≥
[
i
]==
NI
&&
›code
[i]==0x11) {

8891 
d⁄e
=
°›_a·î_jÆ
=1;

8892 
	`SysPrötf
("Disabled speculativeÖrecompilation\n");

8895 
¶í
=
i
;

8896 if(
ôy≥
[
i
-1]==
UJUMP
||ôy≥[i-1]==
CJUMP
||ôy≥[i-1]==
SJUMP
||ôy≥[i-1]==
RJUMP
||ôy≥[i-1]==
FJUMP
) {

8897 if(
°¨t
+
i
*4==
∑gñimô
) {

8898 
ôy≥
[
i
-1]=
SPAN
;

8901 
	`as£π
(
¶í
>0);

8905 
	`u¬ìded_ªgi°îs
(0,
¶í
-1,0);

8909 
ªg°©
 
cuºít
;

8910 
cuºít
.
is32
=1;

8911 
cuºít
.
dúty
=0;

8912 
cuºít
.
u
=
u¬ìded_ªg
[0];

8913 
cuºít
.
uu
=
u¬ìded_ªg_uµî
[0];

8914 
	`˛ór_Æl_ªgs
(
cuºít
.
ªgm≠
);

8915 
	`Æloc_ªg
(&
cuºít
,0,
CCREG
);

8916 
	`dúty_ªg
(&
cuºít
,
CCREG
);

8917 
cuºít
.
isc⁄°
=0;

8918 
cuºít
.
wasc⁄°
=0;

8919 
cuºít
.
waswrôãn
=0;

8920 
ds
=0;

8921 
cc
=0;

8922 
hr
=-1;

8924 #i‚de‡
FORCE32


8925 
	`¥ovisi⁄Æ_32bô
();

8927 if((
u_öt
)
addr
&1) {

8929 
cc
=-1;

8930 
bt
[1]=1;

8931 
ds
=1;

8932 
u¬ìded_ªg
[0]=1;

8933 
u¬ìded_ªg_uµî
[0]=1;

8934 
cuºít
.
ªgm≠
[
HOST_BTREG
]=
BTREG
;

8937 
i
=0;i<
¶í
;i++)

8939 if(
bt
[
i
])

8941 
hr
;

8942 
hr
=0;hr<
HOST_REGS
;hr++)

8945 if(
cuºít
.
ªgm≠
[
hr
]==0) current.regmap[hr]=-1;

8947 
cuºít
.
isc⁄°
=0;

8948 
cuºít
.
waswrôãn
=0;

8950 if(
i
>1)

8952 if((
›code
[
i
-2]&0x2f)==0x05)

8954 if(
rs1
[
i
-2]==0||
rs2
[i-2]==0)

8956 if(
rs1
[
i
-2]) {

8957 
cuºít
.
is32
|=1LL<<
rs1
[
i
-2];

8958 
hr
=
	`gë_ªg
(
cuºít
.
ªgm≠
,
rs1
[
i
-2]|64);

8959 if(
hr
>=0Ë
cuºít
.
ªgm≠
[hr]=-1;

8961 if(
rs2
[
i
-2]) {

8962 
cuºít
.
is32
|=1LL<<
rs2
[
i
-2];

8963 
hr
=
	`gë_ªg
(
cuºít
.
ªgm≠
,
rs2
[
i
-2]|64);

8964 if(
hr
>=0Ë
cuºít
.
ªgm≠
[hr]=-1;

8969 #i‚de‡
FORCE32


8972 if(
bt
[
i
])

8974 
uöt64_t
 
ãmp_is32
=
cuºít
.
is32
;

8975 
j
=
i
-1;j>=0;j--)

8977 if(
ba
[
j
]==
°¨t
+
i
*4)

8978 
ãmp_is32
&=
bønch_ªgs
[
j
].
is32
;

8980 
j
=
i
;j<
¶í
;j++)

8982 if(
ba
[
j
]==
°¨t
+
i
*4)

8984 
ãmp_is32
&=
p32
[
j
];

8986 if(
ãmp_is32
!=
cuºít
.
is32
) {

8988 #i‚de‡
DESTRUCTIVE_WRITEBACK


8989 if(
ds
)

8991 
hr
=0;hr<
HOST_REGS
;hr++)

8993 
r
=
cuºít
.
ªgm≠
[
hr
];

8994 if(
r
>0&&r<64)

8996 if((
cuºít
.
dúty
>>
hr
)&((cuºít.
is32
&~
ãmp_is32
)>>
r
)&1) {

8997 
ãmp_is32
|=1LL<<
r
;

9002 
cuºít
.
is32
=
ãmp_is32
;

9006 
cuºít
.
is32
=-1LL;

9009 
	`mem˝y
(
ªgm≠_¥e
[
i
],
cuºít
.
ªgm≠
,(current.regmap));

9010 
ªgs
[
i
].
wasc⁄°
=
cuºít
.
isc⁄°
;

9011 
ªgs
[
i
].
was32
=
cuºít
.
is32
;

9012 
ªgs
[
i
].
wasdúty
=
cuºít
.
dúty
;

9013 
ªgs
[
i
].
lﬂdedc⁄°
=0;

9014 #i‡
	`deföed
(
DESTRUCTIVE_WRITEBACK
Ë&& !deföed(
FORCE32
)

9017 if(
i
<
¶í
-1&&
bt
[i+1]&&
ôy≥
[i-1]!=
UJUMP
&&ôy≥[i-1]!=
CJUMP
&&ôy≥[i-1]!=
SJUMP
&&ôy≥[i-1]!=
RJUMP
&&ôy≥[i-1]!=
FJUMP
)

9019 
uöt64_t
 
ãmp_is32
=
cuºít
.
is32
;

9020 
j
=
i
-1;j>=0;j--)

9022 if(
ba
[
j
]==
°¨t
+
i
*4+4)

9023 
ãmp_is32
&=
bønch_ªgs
[
j
].
is32
;

9025 
j
=
i
;j<
¶í
;j++)

9027 if(
ba
[
j
]==
°¨t
+
i
*4+4)

9029 
ãmp_is32
&=
p32
[
j
];

9031 if(
ãmp_is32
!=
cuºít
.
is32
) {

9033 
hr
=0;hr<
HOST_REGS
;hr++)

9035 
r
=
cuºít
.
ªgm≠
[
hr
];

9036 if(
r
>0)

9038 if((
cuºít
.
dúty
>>
hr
)&((cuºít.
is32
&~
ãmp_is32
)>>(
r
&63))&1) {

9039 if(
ôy≥
[
i
]!=
UJUMP
&&ôy≥[i]!=
CJUMP
&&ôy≥[i]!=
SJUMP
&&ôy≥[i]!=
RJUMP
&&ôy≥[i]!=
FJUMP
)

9041 if(
rs1
[
i
]!=(
r
&63)&&
rs2
[i]!=(r&63))

9044 
cuºít
.
ªgm≠
[
hr
]=-1;

9045 if(
	`gë_ªg
(
cuºít
.
ªgm≠
,
r
|64)>=0)

9046 
cuºít
.
ªgm≠
[
	`gë_ªg
(cuºít.ªgm≠,
r
|64)]=-1;

9054 if(
i
<
¶í
-2&&
bt
[i+2]&&(
sour˚
[i-1]>>16)!=0x1000&&(
ôy≥
[i]==
CJUMP
||ôy≥[i]==
SJUMP
||ôy≥[i]==
FJUMP
))

9056 
uöt64_t
 
ãmp_is32
=
cuºít
.
is32
;

9057 
j
=
i
-1;j>=0;j--)

9059 if(
ba
[
j
]==
°¨t
+
i
*4+8)

9060 
ãmp_is32
&=
bønch_ªgs
[
j
].
is32
;

9062 
j
=
i
;j<
¶í
;j++)

9064 if(
ba
[
j
]==
°¨t
+
i
*4+8)

9066 
ãmp_is32
&=
p32
[
j
];

9068 if(
ãmp_is32
!=
cuºít
.
is32
) {

9070 
hr
=0;hr<
HOST_REGS
;hr++)

9072 
r
=
cuºít
.
ªgm≠
[
hr
];

9073 if(
r
>0)

9075 if((
cuºít
.
dúty
>>
hr
)&((cuºít.
is32
&~
ãmp_is32
)>>(
r
&63))&1) {

9076 if(
rs1
[
i
]!=(
r
&63)&&
rs2
[i]!=(r&63)&&rs1[i+1]!=(r&63)&&rs2[i+1]!=(r&63))

9079 
cuºít
.
ªgm≠
[
hr
]=-1;

9080 if(
	`gë_ªg
(
cuºít
.
ªgm≠
,
r
|64)>=0)

9081 
cuºít
.
ªgm≠
[
	`gë_ªg
(cuºít.ªgm≠,
r
|64)]=-1;

9089 if(
ôy≥
[
i
]!=
UJUMP
&&ôy≥[i]!=
CJUMP
&&ôy≥[i]!=
SJUMP
&&ôy≥[i]!=
RJUMP
&&ôy≥[i]!=
FJUMP
) {

9090 if(
i
+1<
¶í
) {

9091 
cuºít
.
u
=
u¬ìded_ªg
[
i
+1]&~((1LL<<
rs1
[i])|(1LL<<
rs2
[i]));

9092 
cuºít
.
uu
=
u¬ìded_ªg_uµî
[
i
+1]&~((1LL<<
us1
[i])|(1LL<<
us2
[i]));

9093 if((~
cuºít
.
uu
>>
π1
[
i
])&1Ëcuºít.uu&=~((1LL<<
dï1
[i])|(1LL<<
dï2
[i]));

9094 
cuºít
.
u
|=1;

9095 
cuºít
.
uu
|=1;

9097 
cuºít
.
u
=1;

9098 
cuºít
.
uu
=1;

9101 if(
i
+1<
¶í
) {

9102 
cuºít
.
u
=
bønch_u¬ìded_ªg
[
i
]&~((1LL<<
rs1
[i+1])|(1LL<<
rs2
[i+1]));

9103 
cuºít
.
uu
=
bønch_u¬ìded_ªg_uµî
[
i
]&~((1LL<<
us1
[i+1])|(1LL<<
us2
[i+1]));

9104 if((~
cuºít
.
uu
>>
π1
[
i
+1])&1Ëcuºít.uu&=~((1LL<<
dï1
[i+1])|(1LL<<
dï2
[i+1]));

9105 
cuºít
.
u
&=~((1LL<<
rs1
[
i
])|(1LL<<
rs2
[i]));

9106 
cuºít
.
uu
&=~((1LL<<
us1
[
i
])|(1LL<<
us2
[i]));

9107 
cuºít
.
u
|=1;

9108 
cuºít
.
uu
|=1;

9109 } { 
	`SysPrötf
("o›s, bøncháàíd o‡block wôhÇÿdñay slŸ\n");
	`exô
(1); }

9111 
is_ds
[
i
]=
ds
;

9112 if(
ds
) {

9113 
ds
=0;

9115 if(
i
+1<
¶í
) {

9116 
cuºít
.
u
=
bønch_u¬ìded_ªg
[
i
-1]&
u¬ìded_ªg
[i+1];

9117 
cuºít
.
uu
=
bønch_u¬ìded_ªg_uµî
[
i
-1]&
u¬ìded_ªg_uµî
[i+1];

9119 
cuºít
.
u
=
bønch_u¬ìded_ªg
[
i
-1];

9120 
cuºít
.
uu
=
bønch_u¬ìded_ªg_uµî
[
i
-1];

9122 
cuºít
.
u
&=~((1LL<<
rs1
[
i
])|(1LL<<
rs2
[i]));

9123 
cuºít
.
uu
&=~((1LL<<
us1
[
i
])|(1LL<<
us2
[i]));

9124 if((~
cuºít
.
uu
>>
π1
[
i
])&1Ëcuºít.uu&=~((1LL<<
dï1
[i])|(1LL<<
dï2
[i]));

9125 
cuºít
.
u
|=1;

9126 
cuºít
.
uu
|=1;

9127 
ªg°©
 
ãmp
;

9128 
	`mem˝y
(&
ãmp
,&
cuºít
,(current));

9129 
ãmp
.
wasdúty
Òemp.
dúty
;

9130 
ãmp
.
was32
Òemp.
is32
;

9132 
	`dñay¶Ÿ_Æloc
(&
ãmp
,
i
);

9133 
	`mem˝y
(
ªgs
[
i
].
ªgm≠
,
ãmp
.regmap,(temp.regmap));

9134 
ªgs
[
i
].
wasdúty
=
ãmp
.wasdirty;

9135 
ªgs
[
i
].
was32
=
ãmp
.was32;

9136 
ªgs
[
i
].
dúty
=
ãmp
.dirty;

9137 
ªgs
[
i
].
is32
=
ãmp
.is32;

9138 
ªgs
[
i
].
isc⁄°
=0;

9139 
ªgs
[
i
].
wasc⁄°
=0;

9140 
cuºít
.
isc⁄°
=0;

9142 
hr
=0;hr<
HOST_REGS
;hr++)

9144 
r
=
ãmp
.
ªgm≠
[
hr
];

9145 if(
r
>=0) {

9146 if(
r
!=
ªgm≠_¥e
[
i
][
hr
]) {

9147 
ªgs
[
i
].
ªgm≠_íåy
[
hr
]=-1;

9151 if(
r
<64){

9152 if((
cuºít
.
u
>>
r
)&1) {

9153 
ªgs
[
i
].
ªgm≠_íåy
[
hr
]=-1;

9154 
ªgs
[
i
].
ªgm≠
[
hr
]=-1;

9158 
ªgs
[
i
].
ªgm≠_íåy
[
hr
]=
r
;

9161 if((
cuºít
.
uu
>>(
r
&63))&1) {

9162 
ªgs
[
i
].
ªgm≠_íåy
[
hr
]=-1;

9163 
ªgs
[
i
].
ªgm≠
[
hr
]=-1;

9167 
ªgs
[
i
].
ªgm≠_íåy
[
hr
]=
r
;

9172 if(
i
==0&&
hr
==
HOST_CCREG
)

9173 
ªgs
[
i
].
ªgm≠_íåy
[
hr
]=
CCREG
;

9175 
ªgs
[
i
].
ªgm≠_íåy
[
hr
]=-1;

9180 
ôy≥
[
i
]) {

9181 
UJUMP
:

9185 
	`˛ór_c⁄°
(&
cuºít
,
π1
[
i
]);

9186 
	`Æloc_cc
(&
cuºít
,
i
);

9187 
	`dúty_ªg
(&
cuºít
,
CCREG
);

9188 i‡(
π1
[
i
]==31) {

9189 
	`Æloc_ªg
(&
cuºít
,
i
,31);

9190 
	`dúty_ªg
(&
cuºít
,31);

9193 #ifde‡
REG_PREFETCH


9194 
	`Æloc_ªg
(&
cuºít
,
i
,
PTEMP
);

9198 
ooo
[
i
]=1;

9199 
	`dñay¶Ÿ_Æloc
(&
cuºít
,
i
+1);

9201 
ds
=1;

9204 
RJUMP
:

9208 
	`˛ór_c⁄°
(&
cuºít
,
rs1
[
i
]);

9209 
	`˛ór_c⁄°
(&
cuºít
,
π1
[
i
]);

9210 
	`Æloc_cc
(&
cuºít
,
i
);

9211 
	`dúty_ªg
(&
cuºít
,
CCREG
);

9212 if(
rs1
[
i
]!=
π1
[i+1]&&rs1[i]!=
π2
[i+1]) {

9213 
	`Æloc_ªg
(&
cuºít
,
i
,
rs1
[i]);

9214 i‡(
π1
[
i
]!=0) {

9215 
	`Æloc_ªg
(&
cuºít
,
i
,
π1
[i]);

9216 
	`dúty_ªg
(&
cuºít
,
π1
[
i
]);

9217 
	`as£π
(
rs1
[
i
+1]!=
π1
[i]&&
rs2
[i+1]!=rt1[i]);

9218 
	`as£π
(
π1
[
i
+1]!=rt1[i]);

9219 #ifde‡
REG_PREFETCH


9220 
	`Æloc_ªg
(&
cuºít
,
i
,
PTEMP
);

9223 #ifde‡
USE_MINI_HT


9224 if(
rs1
[
i
]==31) {

9225 
	`Æloc_ªg
(&
cuºít
,
i
,
RHASH
);

9226 #i‚de‡
HOST_IMM_ADDR32


9227 
	`Æloc_ªg
(&
cuºít
,
i
,
RHTBL
);

9231 
	`dñay¶Ÿ_Æloc
(&
cuºít
,
i
+1);

9235 
cuºít
.
isc⁄°
=0;

9236 
cuºít
.
wasc⁄°
=0;

9237 
ªgs
[
i
].
wasc⁄°
=0;

9238 
	`dñay¶Ÿ_Æloc
(&
cuºít
,
i
+1);

9239 
cuºít
.
isc⁄°
=0;

9240 
	`Æloc_ªg
(&
cuºít
,
i
,
RTEMP
);

9243 
ooo
[
i
]=1;

9244 
ds
=1;

9246 
CJUMP
:

9250 
	`˛ór_c⁄°
(&
cuºít
,
rs1
[
i
]);

9251 
	`˛ór_c⁄°
(&
cuºít
,
rs2
[
i
]);

9252 if((
›code
[
i
]&0x3E)==4)

9254 
	`Æloc_cc
(&
cuºít
,
i
);

9255 
	`dúty_ªg
(&
cuºít
,
CCREG
);

9256 if(
rs1
[
i
]Ë
	`Æloc_ªg
(&
cuºít
,i,rs1[i]);

9257 if(
rs2
[
i
]Ë
	`Æloc_ªg
(&
cuºít
,i,rs2[i]);

9258 if(!((
cuºít
.
is32
>>
rs1
[
i
])&(cuºít.is32>>
rs2
[i])&1))

9260 if(
rs1
[
i
]Ë
	`Æloc_ªg64
(&
cuºít
,i,rs1[i]);

9261 if(
rs2
[
i
]Ë
	`Æloc_ªg64
(&
cuºít
,i,rs2[i]);

9263 if((
rs1
[
i
]&&‘s1[i]==
π1
[i+1]||rs1[i]==
π2
[i+1]))||

9264 (
rs2
[
i
]&&‘s2[i]==
π1
[i+1]||rs2[i]==
π2
[i+1]))) {

9267 
cuºít
.
isc⁄°
=0;

9268 
cuºít
.
wasc⁄°
=0;

9269 
ªgs
[
i
].
wasc⁄°
=0;

9270 if(
rs1
[
i
]Ë
	`Æloc_ªg
(&
cuºít
,i,rs1[i]);

9271 if(
rs2
[
i
]Ë
	`Æloc_ªg
(&
cuºít
,i,rs2[i]);

9272 if(!((
cuºít
.
is32
>>
rs1
[
i
])&(cuºít.is32>>
rs2
[i])&1))

9274 if(
rs1
[
i
]Ë
	`Æloc_ªg64
(&
cuºít
,i,rs1[i]);

9275 if(
rs2
[
i
]Ë
	`Æloc_ªg64
(&
cuºít
,i,rs2[i]);

9280 
ooo
[
i
]=1;

9281 
	`dñay¶Ÿ_Æloc
(&
cuºít
,
i
+1);

9285 if((
›code
[
i
]&0x3E)==6)

9287 
	`Æloc_cc
(&
cuºít
,
i
);

9288 
	`dúty_ªg
(&
cuºít
,
CCREG
);

9289 
	`Æloc_ªg
(&
cuºít
,
i
,
rs1
[i]);

9290 if(!(
cuºít
.
is32
>>
rs1
[
i
]&1))

9292 
	`Æloc_ªg64
(&
cuºít
,
i
,
rs1
[i]);

9294 if(
rs1
[
i
]&&‘s1[i]==
π1
[i+1]||rs1[i]==
π2
[i+1])) {

9297 
cuºít
.
isc⁄°
=0;

9298 
cuºít
.
wasc⁄°
=0;

9299 
ªgs
[
i
].
wasc⁄°
=0;

9300 if(
rs1
[
i
]Ë
	`Æloc_ªg
(&
cuºít
,i,rs1[i]);

9301 if(!((
cuºít
.
is32
>>
rs1
[
i
])&1))

9303 if(
rs1
[
i
]Ë
	`Æloc_ªg64
(&
cuºít
,i,rs1[i]);

9308 
ooo
[
i
]=1;

9309 
	`dñay¶Ÿ_Æloc
(&
cuºít
,
i
+1);

9314 if((
›code
[
i
]&0x3E)==0x14)

9316 
cuºít
.
isc⁄°
=0;

9317 
cuºít
.
wasc⁄°
=0;

9318 
ªgs
[
i
].
wasc⁄°
=0;

9319 
	`Æloc_cc
(&
cuºít
,
i
);

9320 
	`dúty_ªg
(&
cuºít
,
CCREG
);

9321 
	`Æloc_ªg
(&
cuºít
,
i
,
rs1
[i]);

9322 
	`Æloc_ªg
(&
cuºít
,
i
,
rs2
[i]);

9323 if(!((
cuºít
.
is32
>>
rs1
[
i
])&(cuºít.is32>>
rs2
[i])&1))

9325 
	`Æloc_ªg64
(&
cuºít
,
i
,
rs1
[i]);

9326 
	`Æloc_ªg64
(&
cuºít
,
i
,
rs2
[i]);

9330 if((
›code
[
i
]&0x3E)==0x16)

9332 
cuºít
.
isc⁄°
=0;

9333 
cuºít
.
wasc⁄°
=0;

9334 
ªgs
[
i
].
wasc⁄°
=0;

9335 
	`Æloc_cc
(&
cuºít
,
i
);

9336 
	`dúty_ªg
(&
cuºít
,
CCREG
);

9337 
	`Æloc_ªg
(&
cuºít
,
i
,
rs1
[i]);

9338 if(!(
cuºít
.
is32
>>
rs1
[
i
]&1))

9340 
	`Æloc_ªg64
(&
cuºít
,
i
,
rs1
[i]);

9343 
ds
=1;

9346 
SJUMP
:

9350 
	`˛ór_c⁄°
(&
cuºít
,
rs1
[
i
]);

9351 
	`˛ór_c⁄°
(&
cuºít
,
π1
[
i
]);

9353 if((
›code2
[
i
]&0x0E)==0x0)

9355 
	`Æloc_cc
(&
cuºít
,
i
);

9356 
	`dúty_ªg
(&
cuºít
,
CCREG
);

9357 
	`Æloc_ªg
(&
cuºít
,
i
,
rs1
[i]);

9358 if(!(
cuºít
.
is32
>>
rs1
[
i
]&1))

9360 
	`Æloc_ªg64
(&
cuºít
,
i
,
rs1
[i]);

9362 i‡(
π1
[
i
]==31) {

9363 
	`Æloc_ªg
(&
cuºít
,
i
,31);

9364 
	`dúty_ªg
(&
cuºít
,31);

9370 if((
rs1
[
i
]&&‘s1[i]==
π1
[i+1]||rs1[i]==
π2
[i+1]))

9371 ||(
π1
[
i
]==31&&(
rs1
[i+1]==31||
rs2
[i+1]==31||π1[i+1]==31||
π2
[i+1]==31))) {

9373 
cuºít
.
isc⁄°
=0;

9374 
cuºít
.
wasc⁄°
=0;

9375 
ªgs
[
i
].
wasc⁄°
=0;

9376 if(
rs1
[
i
]Ë
	`Æloc_ªg
(&
cuºít
,i,rs1[i]);

9377 if(!((
cuºít
.
is32
>>
rs1
[
i
])&1))

9379 if(
rs1
[
i
]Ë
	`Æloc_ªg64
(&
cuºít
,i,rs1[i]);

9384 
ooo
[
i
]=1;

9385 
	`dñay¶Ÿ_Æloc
(&
cuºít
,
i
+1);

9390 if((
›code2
[
i
]&0x1E)==0x2)

9392 
cuºít
.
isc⁄°
=0;

9393 
cuºít
.
wasc⁄°
=0;

9394 
ªgs
[
i
].
wasc⁄°
=0;

9395 
	`Æloc_cc
(&
cuºít
,
i
);

9396 
	`dúty_ªg
(&
cuºít
,
CCREG
);

9397 
	`Æloc_ªg
(&
cuºít
,
i
,
rs1
[i]);

9398 if(!(
cuºít
.
is32
>>
rs1
[
i
]&1))

9400 
	`Æloc_ªg64
(&
cuºít
,
i
,
rs1
[i]);

9403 
ds
=1;

9406 
FJUMP
:

9407 
cuºít
.
isc⁄°
=0;

9408 
cuºít
.
wasc⁄°
=0;

9409 
ªgs
[
i
].
wasc⁄°
=0;

9410 if(
likñy
[
i
]==0)

9417 
	`Æloc_cc
(&
cuºít
,
i
);

9418 
	`dúty_ªg
(&
cuºít
,
CCREG
);

9419 
	`Æloc_ªg
(&
cuºít
,
i
,
FSREG
);

9420 
	`Æloc_ªg
(&
cuºít
,
i
,
CSREG
);

9421 if(
ôy≥
[
i
+1]==
FCOMP
) {

9424 
	`Æloc_cc
(&
cuºít
,
i
);

9425 
	`dúty_ªg
(&
cuºít
,
CCREG
);

9426 
	`Æloc_ªg
(&
cuºít
,
i
,
CSREG
);

9427 
	`Æloc_ªg
(&
cuºít
,
i
,
FSREG
);

9430 
ooo
[
i
]=1;

9431 
	`dñay¶Ÿ_Æloc
(&
cuºít
,
i
+1);

9432 
	`Æloc_ªg
(&
cuºít
,
i
+1,
CSREG
);

9437 if(
likñy
[
i
])

9439 
	`Æloc_cc
(&
cuºít
,
i
);

9440 
	`dúty_ªg
(&
cuºít
,
CCREG
);

9441 
	`Æloc_ªg
(&
cuºít
,
i
,
CSREG
);

9442 
	`Æloc_ªg
(&
cuºít
,
i
,
FSREG
);

9444 
ds
=1;

9445 
cuºít
.
isc⁄°
=0;

9447 
IMM16
:

9448 
	`imm16_Æloc
(&
cuºít
,
i
);

9450 
LOAD
:

9451 
LOADLR
:

9452 
	`lﬂd_Æloc
(&
cuºít
,
i
);

9454 
STORE
:

9455 
STORELR
:

9456 
	`°‹e_Æloc
(&
cuºít
,
i
);

9458 
ALU
:

9459 
	`Æu_Æloc
(&
cuºít
,
i
);

9461 
SHIFT
:

9462 
	`shi·_Æloc
(&
cuºít
,
i
);

9464 
MULTDIV
:

9465 
	`mu…div_Æloc
(&
cuºít
,
i
);

9467 
SHIFTIMM
:

9468 
	`shi·imm_Æloc
(&
cuºít
,
i
);

9470 
MOV
:

9471 
	`mov_Æloc
(&
cuºít
,
i
);

9473 
COP0
:

9474 
	`c›0_Æloc
(&
cuºít
,
i
);

9476 
COP1
:

9477 
COP2
:

9478 
	`c›1_Æloc
(&
cuºít
,
i
);

9480 
C1LS
:

9481 
	`c1ls_Æloc
(&
cuºít
,
i
);

9483 
C2LS
:

9484 
	`c2ls_Æloc
(&
cuºít
,
i
);

9486 
C2OP
:

9487 
	`c2›_Æloc
(&
cuºít
,
i
);

9489 
FCONV
:

9490 
	`fc⁄v_Æloc
(&
cuºít
,
i
);

9492 
FLOAT
:

9493 
	`Êﬂt_Æloc
(&
cuºít
,
i
);

9495 
FCOMP
:

9496 
	`fcomp_Æloc
(&
cuºít
,
i
);

9498 
SYSCALL
:

9499 
HLECALL
:

9500 
INTCALL
:

9501 
	`sysˇŒ_Æloc
(&
cuºít
,
i
);

9503 
SPAN
:

9504 
	`∑ge•™_Æloc
(&
cuºít
,
i
);

9509 
cuºít
.
uu
|=cuºít.
is32
&((1LL<<
π1
[
i
])|(1LL<<
π2
[i]));

9510 if(
ôy≥
[
i
]!=
UJUMP
&&ôy≥[i]!=
CJUMP
&&ôy≥[i]!=
SJUMP
&&ôy≥[i]!=
RJUMP
&&ôy≥[i]!=
FJUMP
) {

9511 
cuºít
.
uu
&=~((1LL<<
us1
[
i
])|(1LL<<
us2
[i]));

9512 if((~
cuºít
.
uu
>>
π1
[
i
])&1Ëcuºít.uu&=~((1LL<<
dï1
[i])|(1LL<<
dï2
[i]));

9513 
cuºít
.
uu
|=1;

9515 
cuºít
.
uu
|=cuºít.
is32
&((1LL<<
π1
[
i
+1])|(1LL<<
π2
[i+1]));

9516 
cuºít
.
uu
&=~((1LL<<
us1
[
i
+1])|(1LL<<
us2
[i+1]));

9517 if((~
cuºít
.
uu
>>
π1
[
i
+1])&1Ëcuºít.uu&=~((1LL<<
dï1
[i+1])|(1LL<<
dï2
[i+1]));

9518 
cuºít
.
uu
&=~((1LL<<
us1
[
i
])|(1LL<<
us2
[i]));

9519 
cuºít
.
uu
|=1;

9523 
hr
=0;hr<
HOST_REGS
;hr++)

9525 
r
,
‹
,
î
;

9526 
r
=
cuºít
.
ªgm≠
[
hr
];

9527 if(
r
>=0) {

9528 if(
r
!=
ªgm≠_¥e
[
i
][
hr
]) {

9530 
‹
=
	`gë_ªg
(
ªgm≠_¥e
[
i
],
r
);

9531 if(
‹
<0||(
r
&63)>=
TEMPREG
){

9532 
ªgs
[
i
].
ªgm≠_íåy
[
hr
]=-1;

9537 
ªgs
[
i
].
ªgm≠_íåy
[
hr
]=
r
;

9539 if((
ªgs
[
i
].
wasdúty
>>
‹
)&1Ë
	`dúty_ªg
(&
cuºít
,
r
&63);

9545 if(
r
==0){

9546 
ªgs
[
i
].
ªgm≠_íåy
[
hr
]=0;

9549 if(
r
<64){

9550 if((
cuºít
.
u
>>
r
)&1) {

9551 
ªgs
[
i
].
ªgm≠_íåy
[
hr
]=-1;

9553 
cuºít
.
ªgm≠
[
hr
]=-1;

9555 
ªgs
[
i
].
ªgm≠_íåy
[
hr
]=
r
;

9558 if((
cuºít
.
uu
>>(
r
&63))&1) {

9559 
ªgs
[
i
].
ªgm≠_íåy
[
hr
]=-1;

9561 
cuºít
.
ªgm≠
[
hr
]=-1;

9563 
ªgs
[
i
].
ªgm≠_íåy
[
hr
]=
r
;

9568 if(
ªgm≠_¥e
[
i
][
hr
]==
CCREG
)

9569 
ªgs
[
i
].
ªgm≠_íåy
[
hr
]=
CCREG
;

9571 
ªgs
[
i
].
ªgm≠_íåy
[
hr
]=-1;

9574 
	`mem˝y
(
ªgs
[
i
].
ªgm≠
,
cuºít
.regmap,(current.regmap));

9577 if(
i
>0&&(
ôy≥
[i-1]==
STORE
||ôy≥[i-1]==
STORELR
||(ôy≥[i-1]==
C2LS
&&
›code
[i-1]==0x3a))&&(
u_öt
)
imm
[i-1]<0x800)

9578 
cuºít
.
waswrôãn
|=1<<
rs1
[
i
-1];

9579 
cuºít
.
waswrôãn
&=~(1<<
π1
[
i
]);

9580 
cuºít
.
waswrôãn
&=~(1<<
π2
[
i
]);

9581 if((
ôy≥
[
i
]==
STORE
||ôy≥[i]==
STORELR
||(ôy≥[i]==
C2LS
&&
›code
[i]==0x3a))&&(
u_öt
)
imm
[i]>=0x800)

9582 
cuºít
.
waswrôãn
&=~(1<<
rs1
[
i
]);

9585 if(
i
>0)

9587 
cuºít
.
was32
=cuºít.
is32
;

9588 
cuºít
.
wasdúty
=cuºít.
dúty
;

9589 
ôy≥
[
i
-1]) {

9590 
UJUMP
:

9591 
	`mem˝y
(&
bønch_ªgs
[
i
-1],&
cuºít
,(current));

9592 
bønch_ªgs
[
i
-1].
isc⁄°
=0;

9593 
bønch_ªgs
[
i
-1].
wasc⁄°
=0;

9594 
bønch_ªgs
[
i
-1].
u
=
bønch_u¬ìded_ªg
[i-1]&~((1LL<<
rs1
[i-1])|(1LL<<
rs2
[i-1]));

9595 
bønch_ªgs
[
i
-1].
uu
=
bønch_u¬ìded_ªg_uµî
[i-1]&~((1LL<<
us1
[i-1])|(1LL<<
us2
[i-1]));

9596 
	`Æloc_cc
(&
bønch_ªgs
[
i
-1],i-1);

9597 
	`dúty_ªg
(&
bønch_ªgs
[
i
-1],
CCREG
);

9598 if(
π1
[
i
-1]==31) {

9599 
	`Æloc_ªg
(&
bønch_ªgs
[
i
-1],i-1,31);

9600 
	`dúty_ªg
(&
bønch_ªgs
[
i
-1],31);

9601 
bønch_ªgs
[
i
-1].
is32
|=1LL<<31;

9603 
	`mem˝y
(&
bønch_ªgs
[
i
-1].
ªgm≠_íåy
,&bønch_ªgs[i-1].
ªgm≠
,(
cuºít
.regmap));

9604 
	`mem˝y
(
c⁄°m≠
[
i
],c⁄°m≠[i-1],(
cuºít_c⁄°m≠
));

9606 
RJUMP
:

9607 
	`mem˝y
(&
bønch_ªgs
[
i
-1],&
cuºít
,(current));

9608 
bønch_ªgs
[
i
-1].
isc⁄°
=0;

9609 
bønch_ªgs
[
i
-1].
wasc⁄°
=0;

9610 
bønch_ªgs
[
i
-1].
u
=
bønch_u¬ìded_ªg
[i-1]&~((1LL<<
rs1
[i-1])|(1LL<<
rs2
[i-1]));

9611 
bønch_ªgs
[
i
-1].
uu
=
bønch_u¬ìded_ªg_uµî
[i-1]&~((1LL<<
us1
[i-1])|(1LL<<
us2
[i-1]));

9612 
	`Æloc_cc
(&
bønch_ªgs
[
i
-1],i-1);

9613 
	`dúty_ªg
(&
bønch_ªgs
[
i
-1],
CCREG
);

9614 
	`Æloc_ªg
(&
bønch_ªgs
[
i
-1],i-1,
rs1
[i-1]);

9615 if(
π1
[
i
-1]!=0) {

9616 
	`Æloc_ªg
(&
bønch_ªgs
[
i
-1],i-1,
π1
[i-1]);

9617 
	`dúty_ªg
(&
bønch_ªgs
[
i
-1],
π1
[i-1]);

9618 
bønch_ªgs
[
i
-1].
is32
|=1LL<<
π1
[i-1];

9620 #ifde‡
USE_MINI_HT


9621 if(
rs1
[
i
-1]==31) {

9622 
	`Æloc_ªg
(&
bønch_ªgs
[
i
-1],i-1,
RHASH
);

9623 #i‚de‡
HOST_IMM_ADDR32


9624 
	`Æloc_ªg
(&
bønch_ªgs
[
i
-1],i-1,
RHTBL
);

9628 
	`mem˝y
(&
bønch_ªgs
[
i
-1].
ªgm≠_íåy
,&bønch_ªgs[i-1].
ªgm≠
,(
cuºít
.regmap));

9629 
	`mem˝y
(
c⁄°m≠
[
i
],c⁄°m≠[i-1],(
cuºít_c⁄°m≠
));

9631 
CJUMP
:

9632 if((
›code
[
i
-1]&0x3E)==4)

9634 
	`Æloc_cc
(&
cuºít
,
i
-1);

9635 
	`dúty_ªg
(&
cuºít
,
CCREG
);

9636 if((
rs1
[
i
-1]&&‘s1[i-1]==
π1
[i]||rs1[i-1]==
π2
[i]))||

9637 (
rs2
[
i
-1]&&‘s2[i-1]==
π1
[i]||rs2[i-1]==
π2
[i]))) {

9640 
cuºít
.
u
=
bønch_u¬ìded_ªg
[
i
-1]&~((1LL<<
rs1
[i])|(1LL<<
rs2
[i]));

9641 
cuºít
.
uu
=
bønch_u¬ìded_ªg_uµî
[
i
-1]&~((1LL<<
us1
[i])|(1LL<<
us2
[i]));

9642 if((~
cuºít
.
uu
>>
π1
[
i
])&1Ëcuºít.uu&=~((1LL<<
dï1
[i])|(1LL<<
dï2
[i]));

9643 
cuºít
.
u
|=1;

9644 
cuºít
.
uu
|=1;

9645 
	`dñay¶Ÿ_Æloc
(&
cuºít
,
i
);

9646 
cuºít
.
isc⁄°
=0;

9650 
cuºít
.
u
=
bønch_u¬ìded_ªg
[
i
-1]&~((1LL<<
rs1
[i-1])|(1LL<<
rs2
[i-1]));

9651 
cuºít
.
uu
=
bønch_u¬ìded_ªg_uµî
[
i
-1]&~((1LL<<
us1
[i-1])|(1LL<<
us2
[i-1]));

9653 if(
rs1
[
i
-1]Ë
	`Æloc_ªg
(&
cuºít
,i-1,rs1[i-1]);

9654 if(
rs2
[
i
-1]Ë
	`Æloc_ªg
(&
cuºít
,i-1,rs2[i-1]);

9655 if(!((
cuºít
.
is32
>>
rs1
[
i
-1])&(cuºít.is32>>
rs2
[i-1])&1))

9657 if(
rs1
[
i
-1]Ë
	`Æloc_ªg64
(&
cuºít
,i-1,rs1[i-1]);

9658 if(
rs2
[
i
-1]Ë
	`Æloc_ªg64
(&
cuºít
,i-1,rs2[i-1]);

9661 
	`mem˝y
(&
bønch_ªgs
[
i
-1],&
cuºít
,(current));

9662 
bønch_ªgs
[
i
-1].
isc⁄°
=0;

9663 
bønch_ªgs
[
i
-1].
wasc⁄°
=0;

9664 
	`mem˝y
(&
bønch_ªgs
[
i
-1].
ªgm≠_íåy
,&
cuºít
.
ªgm≠
,(current.regmap));

9665 
	`mem˝y
(
c⁄°m≠
[
i
],c⁄°m≠[i-1],(
cuºít_c⁄°m≠
));

9668 if((
›code
[
i
-1]&0x3E)==6)

9670 
	`Æloc_cc
(&
cuºít
,
i
-1);

9671 
	`dúty_ªg
(&
cuºít
,
CCREG
);

9672 if(
rs1
[
i
-1]==
π1
[i]||rs1[i-1]==
π2
[i]) {

9675 
cuºít
.
u
=
bønch_u¬ìded_ªg
[
i
-1]&~((1LL<<
rs1
[i])|(1LL<<
rs2
[i]));

9676 
cuºít
.
uu
=
bønch_u¬ìded_ªg_uµî
[
i
-1]&~((1LL<<
us1
[i])|(1LL<<
us2
[i]));

9677 if((~
cuºít
.
uu
>>
π1
[
i
])&1Ëcuºít.uu&=~((1LL<<
dï1
[i])|(1LL<<
dï2
[i]));

9678 
cuºít
.
u
|=1;

9679 
cuºít
.
uu
|=1;

9680 
	`dñay¶Ÿ_Æloc
(&
cuºít
,
i
);

9681 
cuºít
.
isc⁄°
=0;

9685 
cuºít
.
u
=
bønch_u¬ìded_ªg
[
i
-1]&~(1LL<<
rs1
[i-1]);

9686 
cuºít
.
uu
=
bønch_u¬ìded_ªg_uµî
[
i
-1]&~(1LL<<
us1
[i-1]);

9688 
	`Æloc_ªg
(&
cuºít
,
i
-1,
rs1
[i-1]);

9689 if(!(
cuºít
.
is32
>>
rs1
[
i
-1]&1))

9691 
	`Æloc_ªg64
(&
cuºít
,
i
-1,
rs1
[i-1]);

9694 
	`mem˝y
(&
bønch_ªgs
[
i
-1],&
cuºít
,(current));

9695 
bønch_ªgs
[
i
-1].
isc⁄°
=0;

9696 
bønch_ªgs
[
i
-1].
wasc⁄°
=0;

9697 
	`mem˝y
(&
bønch_ªgs
[
i
-1].
ªgm≠_íåy
,&
cuºít
.
ªgm≠
,(current.regmap));

9698 
	`mem˝y
(
c⁄°m≠
[
i
],c⁄°m≠[i-1],(
cuºít_c⁄°m≠
));

9702 if((
›code
[
i
-1]&0x3E)==0x14)

9704 
	`mem˝y
(&
bønch_ªgs
[
i
-1],&
cuºít
,(current));

9705 
bønch_ªgs
[
i
-1].
u
=(
bønch_u¬ìded_ªg
[i-1]&~((1LL<<
rs1
[i])|(1LL<<
rs2
[i])|(1LL<<
π1
[i])|(1LL<<
π2
[i])))|1;

9706 
bønch_ªgs
[
i
-1].
uu
=(
bønch_u¬ìded_ªg_uµî
[i-1]&~((1LL<<
us1
[i])|(1LL<<
us2
[i])|(1LL<<
π1
[i])|(1LL<<
π2
[i])))|1;

9707 if((~
bønch_ªgs
[
i
-1].
uu
>>
π1
[i])&1Ëbønch_ªgs[i-1].uu&=~((1LL<<
dï1
[i])|(1LL<<
dï2
[i]))|1;

9708 
	`Æloc_cc
(&
bønch_ªgs
[
i
-1],i);

9709 
	`dúty_ªg
(&
bønch_ªgs
[
i
-1],
CCREG
);

9710 
	`dñay¶Ÿ_Æloc
(&
bønch_ªgs
[
i
-1],i);

9711 
bønch_ªgs
[
i
-1].
isc⁄°
=0;

9712 
	`Æloc_ªg
(&
cuºít
,
i
,
CCREG
);

9713 
	`dúty_ªg
(&
cuºít
,
CCREG
);

9714 
	`mem˝y
(&
bønch_ªgs
[
i
-1].
ªgm≠_íåy
,&bønch_ªgs[i-1].
ªgm≠
,(
cuºít
.regmap));

9717 if((
›code
[
i
-1]&0x3E)==0x16)

9719 
	`mem˝y
(&
bønch_ªgs
[
i
-1],&
cuºít
,(current));

9720 
bønch_ªgs
[
i
-1].
u
=(
bønch_u¬ìded_ªg
[i-1]&~((1LL<<
rs1
[i])|(1LL<<
rs2
[i])|(1LL<<
π1
[i])|(1LL<<
π2
[i])))|1;

9721 
bønch_ªgs
[
i
-1].
uu
=(
bønch_u¬ìded_ªg_uµî
[i-1]&~((1LL<<
us1
[i])|(1LL<<
us2
[i])|(1LL<<
π1
[i])|(1LL<<
π2
[i])))|1;

9722 if((~
bønch_ªgs
[
i
-1].
uu
>>
π1
[i])&1Ëbønch_ªgs[i-1].uu&=~((1LL<<
dï1
[i])|(1LL<<
dï2
[i]))|1;

9723 
	`Æloc_cc
(&
bønch_ªgs
[
i
-1],i);

9724 
	`dúty_ªg
(&
bønch_ªgs
[
i
-1],
CCREG
);

9725 
	`dñay¶Ÿ_Æloc
(&
bønch_ªgs
[
i
-1],i);

9726 
bønch_ªgs
[
i
-1].
isc⁄°
=0;

9727 
	`Æloc_ªg
(&
cuºít
,
i
,
CCREG
);

9728 
	`dúty_ªg
(&
cuºít
,
CCREG
);

9729 
	`mem˝y
(&
bønch_ªgs
[
i
-1].
ªgm≠_íåy
,&bønch_ªgs[i-1].
ªgm≠
,(
cuºít
.regmap));

9732 
SJUMP
:

9734 if((
›code2
[
i
-1]&0x0E)==0)

9736 
	`Æloc_cc
(&
cuºít
,
i
-1);

9737 
	`dúty_ªg
(&
cuºít
,
CCREG
);

9738 if(
rs1
[
i
-1]==
π1
[i]||rs1[i-1]==
π2
[i]) {

9741 
cuºít
.
u
=
bønch_u¬ìded_ªg
[
i
-1]&~((1LL<<
rs1
[i])|(1LL<<
rs2
[i]));

9742 
cuºít
.
uu
=
bønch_u¬ìded_ªg_uµî
[
i
-1]&~((1LL<<
us1
[i])|(1LL<<
us2
[i]));

9743 if((~
cuºít
.
uu
>>
π1
[
i
])&1Ëcuºít.uu&=~((1LL<<
dï1
[i])|(1LL<<
dï2
[i]));

9744 
cuºít
.
u
|=1;

9745 
cuºít
.
uu
|=1;

9746 
	`dñay¶Ÿ_Æloc
(&
cuºít
,
i
);

9747 
cuºít
.
isc⁄°
=0;

9751 
cuºít
.
u
=
bønch_u¬ìded_ªg
[
i
-1]&~(1LL<<
rs1
[i-1]);

9752 
cuºít
.
uu
=
bønch_u¬ìded_ªg_uµî
[
i
-1]&~(1LL<<
us1
[i-1]);

9754 
	`Æloc_ªg
(&
cuºít
,
i
-1,
rs1
[i-1]);

9755 if(!(
cuºít
.
is32
>>
rs1
[
i
-1]&1))

9757 
	`Æloc_ªg64
(&
cuºít
,
i
-1,
rs1
[i-1]);

9760 
	`mem˝y
(&
bønch_ªgs
[
i
-1],&
cuºít
,(current));

9761 
bønch_ªgs
[
i
-1].
isc⁄°
=0;

9762 
bønch_ªgs
[
i
-1].
wasc⁄°
=0;

9763 
	`mem˝y
(&
bønch_ªgs
[
i
-1].
ªgm≠_íåy
,&
cuºít
.
ªgm≠
,(current.regmap));

9764 
	`mem˝y
(
c⁄°m≠
[
i
],c⁄°m≠[i-1],(
cuºít_c⁄°m≠
));

9768 if((
›code2
[
i
-1]&0x1E)==2)

9770 
	`mem˝y
(&
bønch_ªgs
[
i
-1],&
cuºít
,(current));

9771 
bønch_ªgs
[
i
-1].
u
=(
bønch_u¬ìded_ªg
[i-1]&~((1LL<<
rs1
[i])|(1LL<<
rs2
[i])|(1LL<<
π1
[i])|(1LL<<
π2
[i])))|1;

9772 
bønch_ªgs
[
i
-1].
uu
=(
bønch_u¬ìded_ªg_uµî
[i-1]&~((1LL<<
us1
[i])|(1LL<<
us2
[i])|(1LL<<
π1
[i])|(1LL<<
π2
[i])))|1;

9773 if((~
bønch_ªgs
[
i
-1].
uu
>>
π1
[i])&1Ëbønch_ªgs[i-1].uu&=~((1LL<<
dï1
[i])|(1LL<<
dï2
[i]))|1;

9774 
	`Æloc_cc
(&
bønch_ªgs
[
i
-1],i);

9775 
	`dúty_ªg
(&
bønch_ªgs
[
i
-1],
CCREG
);

9776 
	`dñay¶Ÿ_Æloc
(&
bønch_ªgs
[
i
-1],i);

9777 
bønch_ªgs
[
i
-1].
isc⁄°
=0;

9778 
	`Æloc_ªg
(&
cuºít
,
i
,
CCREG
);

9779 
	`dúty_ªg
(&
cuºít
,
CCREG
);

9780 
	`mem˝y
(&
bønch_ªgs
[
i
-1].
ªgm≠_íåy
,&bønch_ªgs[i-1].
ªgm≠
,(
cuºít
.regmap));

9783 if(
›code2
[
i
-1]&0x10) {

9784 
	`Æloc_ªg
(&
bønch_ªgs
[
i
-1],i-1,31);

9785 
	`dúty_ªg
(&
bønch_ªgs
[
i
-1],31);

9786 
bønch_ªgs
[
i
-1].
is32
|=1LL<<31;

9789 
FJUMP
:

9790 if(
likñy
[
i
-1]==0)

9792 
	`Æloc_cc
(&
cuºít
,
i
-1);

9793 
	`dúty_ªg
(&
cuºít
,
CCREG
);

9794 if(
ôy≥
[
i
]==
FCOMP
) {

9797 
	`dñay¶Ÿ_Æloc
(&
cuºít
,
i
);

9798 
cuºít
.
isc⁄°
=0;

9802 
cuºít
.
u
=
bønch_u¬ìded_ªg
[
i
-1]&~(1LL<<
rs1
[i-1]);

9803 
cuºít
.
uu
=
bønch_u¬ìded_ªg_uµî
[
i
-1]&~(1LL<<
us1
[i-1]);

9805 
	`Æloc_ªg
(&
cuºít
,
i
-1,
FSREG
);

9807 
	`mem˝y
(&
bønch_ªgs
[
i
-1],&
cuºít
,(current));

9808 
	`mem˝y
(&
bønch_ªgs
[
i
-1].
ªgm≠_íåy
,&
cuºít
.
ªgm≠
,(current.regmap));

9813 
	`mem˝y
(&
bønch_ªgs
[
i
-1],&
cuºít
,(current));

9814 
bønch_ªgs
[
i
-1].
u
=(
bønch_u¬ìded_ªg
[i-1]&~((1LL<<
rs1
[i])|(1LL<<
rs2
[i])|(1LL<<
π1
[i])|(1LL<<
π2
[i])))|1;

9815 
bønch_ªgs
[
i
-1].
uu
=(
bønch_u¬ìded_ªg_uµî
[i-1]&~((1LL<<
us1
[i])|(1LL<<
us2
[i])|(1LL<<
π1
[i])|(1LL<<
π2
[i])))|1;

9816 if((~
bønch_ªgs
[
i
-1].
uu
>>
π1
[i])&1Ëbønch_ªgs[i-1].uu&=~((1LL<<
dï1
[i])|(1LL<<
dï2
[i]))|1;

9817 
	`Æloc_cc
(&
bønch_ªgs
[
i
-1],i);

9818 
	`dúty_ªg
(&
bønch_ªgs
[
i
-1],
CCREG
);

9819 
	`dñay¶Ÿ_Æloc
(&
bønch_ªgs
[
i
-1],i);

9820 
bønch_ªgs
[
i
-1].
isc⁄°
=0;

9821 
	`Æloc_ªg
(&
cuºít
,
i
,
CCREG
);

9822 
	`dúty_ªg
(&
cuºít
,
CCREG
);

9823 
	`mem˝y
(&
bønch_ªgs
[
i
-1].
ªgm≠_íåy
,&bønch_ªgs[i-1].
ªgm≠
,(
cuºít
.regmap));

9828 if(
ôy≥
[
i
-1]==
UJUMP
||ôy≥[i-1]==
RJUMP
||(
sour˚
[i-1]>>16)==0x1000)

9830 if(
π1
[
i
-1]==31)

9833 
cuºít
.
is32
=1;

9834 
cuºít
.
dúty
=0;

9835 
	`˛ór_Æl_ªgs
(
cuºít
.
ªgm≠
);

9836 
	`Æloc_ªg
(&
cuºít
,
i
,
CCREG
);

9837 
	`dúty_ªg
(&
cuºít
,
CCREG
);

9839 if(
i
+1<
¶í
)

9842 
cuºít
.
is32
=0x3FFFFFFFFLL;

9843 
cuºít
.
dúty
=0;

9844 
	`˛ór_Æl_ªgs
(
cuºít
.
ªgm≠
);

9845 
	`Æloc_ªg
(&
cuºít
,
i
,
CCREG
);

9846 
	`dúty_ªg
(&
cuºít
,
CCREG
);

9847 
j
=
i
-1;j>=0;j--)

9849 if(
ba
[
j
]==
°¨t
+
i
*4+4) {

9850 
	`mem˝y
(
cuºít
.
ªgm≠
,
bønch_ªgs
[
j
].regmap,(current.regmap));

9851 
cuºít
.
is32
=
bønch_ªgs
[
j
].is32;

9852 
cuºít
.
dúty
=
bønch_ªgs
[
j
].dirty;

9856 
j
>=0) {

9857 if(
ba
[
j
]==
°¨t
+
i
*4+4) {

9858 
hr
=0;hr<
HOST_REGS
;hr++) {

9859 if(
cuºít
.
ªgm≠
[
hr
]!=
bønch_ªgs
[
j
].regmap[hr]) {

9860 
cuºít
.
ªgm≠
[
hr
]=-1;

9862 
cuºít
.
is32
&=
bønch_ªgs
[
j
].is32;

9863 
cuºít
.
dúty
&=
bønch_ªgs
[
j
].dirty;

9866 
j
--;

9873 
cˇdj
[
i
]=
cc
;

9874 if(
i
>0&&(
ôy≥
[i-1]==
RJUMP
||ôy≥[i-1]==
UJUMP
||ôy≥[i-1]==
CJUMP
||ôy≥[i-1]==
SJUMP
||ôy≥[i-1]==
FJUMP
||ôy≥[i]==
SYSCALL
||ôy≥[i]==
HLECALL
))

9876 
cc
=0;

9878 #i‡
	`deföed
(
PCSX
Ë&& !deföed(
DRC_DBG
)

9879 if(
ôy≥
[
i
]==
C2OP
&&
gã_cy˛ëab
[
sour˚
[i]&0x3f]>2)

9882 
cc
+=
gã_cy˛ëab
[
sour˚
[
i
]&0x3f]/2;

9884 if–
ôy≥
[
i
]==
C1LS
)

9886 
cc
+=2;

9888 if(
i
>1&&
ôy≥
[i]==
STORE
&&ôy≥[i-1]==STORE&&ôy≥[i-2]==STORE&&!
bt
[i])

9890 
cc
+=4;

9892 if(
ôy≥
[
i
]==
C2LS
)

9894 
cc
+=4;

9899 
cc
++;

9902 
	`Êush_dúty_uµîs
(&
cuºít
);

9903 if(!
is_ds
[
i
]) {

9904 
ªgs
[
i
].
is32
=
cuºít
.is32;

9905 
ªgs
[
i
].
dúty
=
cuºít
.dirty;

9906 
ªgs
[
i
].
isc⁄°
=
cuºít
.isconst;

9907 
	`mem˝y
(
c⁄°m≠
[
i
],
cuºít_c⁄°m≠
,(current_constmap));

9909 
hr
=0;hr<
HOST_REGS
;hr++) {

9910 if(
hr
!=
EXCLUDE_REG
&&
ªgs
[
i
].
ªgm≠
[hr]>=0) {

9911 if(
ªgm≠_¥e
[
i
][
hr
]!=
ªgs
[i].
ªgm≠
[hr]) {

9912 
ªgs
[
i
].
wasc⁄°
&=~(1<<
hr
);

9916 if(
cuºít
.
ªgm≠
[
HOST_BTREG
]==
BTREG
) current.regmap[HOST_BTREG]=-1;

9917 
ªgs
[
i
].
waswrôãn
=
cuºít
.waswritten;

9922 
uöt64_t
 
ƒ
=0;

9924 
i
=
¶í
-1;i>=0;i--)

9926 
hr
;

9927 if(
ôy≥
[
i
]==
RJUMP
||ôy≥[i]==
UJUMP
||ôy≥[i]==
CJUMP
||ôy≥[i]==
SJUMP
||ôy≥[i]==
FJUMP
)

9929 if(
ba
[
i
]<
°¨t
 || ba[i]>=(°¨t+
¶í
*4))

9932 
ƒ
=0;

9938 
ƒ
=0;

9939 
t
=(
ba
[
i
]-
°¨t
)>>2;

9940 
hr
=0;hr<
HOST_REGS
;hr++)

9942 if(
ªgs
[
i
].
ªgm≠_íåy
[
hr
]>=0) {

9943 if(
ªgs
[
i
].
ªgm≠_íåy
[
hr
]=Ùegs[
t
].ªgm≠_íåy[hr]Ë
ƒ
|=1<<hr;

9948 if(
ôy≥
[
i
]!=
RJUMP
&&ôy≥[i]!=
UJUMP
&&(
sour˚
[i]>>16)!=0x1000)

9950 if(
i
<
¶í
-2) {

9951 
ƒ
|=
√eded_ªg
[
i
+2];

9952 
hr
=0;hr<
HOST_REGS
;hr++)

9954 if(
ªgm≠_¥e
[
i
+2][
hr
]>=0&&
	`gë_ªg
(
ªgs
[i+2].
ªgm≠_íåy
,ªgm≠_¥e[i+2][hr])<0Ë
ƒ
&=~(1<<hr);

9963 
hr
=0;hr<
HOST_REGS
;hr++)

9965 if(!
likñy
[
i
]) {

9968 if(
π1
[
i
+1]&&π1[i+1]==(
ªgs
[i].
ªgm≠
[
hr
]&63)Ë
ƒ
&=~(1<<hr);

9969 if(
π2
[
i
+1]&&π2[i+1]==(
ªgs
[i].
ªgm≠
[
hr
]&63)Ë
ƒ
&=~(1<<hr);

9971 if(
us1
[
i
+1]==(
ªgm≠_¥e
[i][
hr
]&63)Ë
ƒ
|=1<<hr;

9972 if(
us2
[
i
+1]==(
ªgm≠_¥e
[i][
hr
]&63)Ë
ƒ
|=1<<hr;

9973 if(
rs1
[
i
+1]==
ªgm≠_¥e
[i][
hr
]Ë
ƒ
|=1<<hr;

9974 if(
rs2
[
i
+1]==
ªgm≠_¥e
[i][
hr
]Ë
ƒ
|=1<<hr;

9975 if(
us1
[
i
+1]==(
ªgs
[i].
ªgm≠_íåy
[
hr
]&63)Ë
ƒ
|=1<<hr;

9976 if(
us2
[
i
+1]==(
ªgs
[i].
ªgm≠_íåy
[
hr
]&63)Ë
ƒ
|=1<<hr;

9977 if(
rs1
[
i
+1]==
ªgs
[i].
ªgm≠_íåy
[
hr
]Ë
ƒ
|=1<<hr;

9978 if(
rs2
[
i
+1]==
ªgs
[i].
ªgm≠_íåy
[
hr
]Ë
ƒ
|=1<<hr;

9979 if(
dï1
[
i
+1]&&!((
u¬ìded_ªg_uµî
[i]>>dep1[i+1])&1)) {

9980 if(
dï1
[
i
+1]==(
ªgm≠_¥e
[i][
hr
]&63)Ë
ƒ
|=1<<hr;

9981 if(
dï2
[
i
+1]==(
ªgm≠_¥e
[i][
hr
]&63)Ë
ƒ
|=1<<hr;

9983 if(
dï2
[
i
+1]&&!((
u¬ìded_ªg_uµî
[i]>>dep2[i+1])&1)) {

9984 if(
dï1
[
i
+1]==(
ªgs
[i].
ªgm≠_íåy
[
hr
]&63)Ë
ƒ
|=1<<hr;

9985 if(
dï2
[
i
+1]==(
ªgs
[i].
ªgm≠_íåy
[
hr
]&63)Ë
ƒ
|=1<<hr;

9987 if(
ôy≥
[
i
+1]==
STORE
 || ity≥[i+1]==
STORELR
 || (
›code
[i+1]&0x3b)==0x39 || (opcode[i+1]&0x3b)==0x3a) {

9988 if(
ªgm≠_¥e
[
i
][
hr
]==
INVCP
Ë
ƒ
|=1<<hr;

9989 if(
ªgs
[
i
].
ªgm≠_íåy
[
hr
]==
INVCP
Ë
ƒ
|=1<<hr;

9993 if(
ôy≥
[
i
]==
SYSCALL
||ôy≥[i]==
HLECALL
||ôy≥[i]==
INTCALL
)

9996 
ƒ
=0;

9998 if(
ôy≥
[
i
]==
COP0
 && (
sour˚
[i]&0x3f)==0x18)

10001 
ƒ
=0;

10005 if(
i
<
¶í
-1) {

10006 
hr
=0;hr<
HOST_REGS
;hr++) {

10007 if(
ªgm≠_¥e
[
i
+1][
hr
]>=0&&
	`gë_ªg
(
ªgs
[i+1].
ªgm≠_íåy
,ªgm≠_¥e[i+1][hr])<0Ë
ƒ
&=~(1<<hr);

10008 if(
ªgs
[
i
].
ªgm≠
[
hr
]!=
ªgm≠_¥e
[i+1][hr]Ë
ƒ
&=~(1<<hr);

10009 if(
ªgs
[
i
].
ªgm≠
[
hr
]!=
ªgm≠_¥e
[i][hr]Ë
ƒ
&=~(1<<hr);

10010 if(
ªgs
[
i
].
ªgm≠
[
hr
]<0Ë
ƒ
&=~(1<<hr);

10014 
hr
=0;hr<
HOST_REGS
;hr++)

10017 if(
π1
[
i
]&&π1[i]==(
ªgs
[i].
ªgm≠
[
hr
]&63)Ë
ƒ
&=~(1<<hr);

10018 if(
π2
[
i
]&&π2[i]==(
ªgs
[i].
ªgm≠
[
hr
]&63)Ë
ƒ
&=~(1<<hr);

10019 if(
FTEMP
==(
ªgs
[
i
].
ªgm≠
[
hr
]&63)Ë
ƒ
&=~(1<<hr);

10021 if(
us1
[
i
]==(
ªgm≠_¥e
[i][
hr
]&63)Ë
ƒ
|=1<<hr;

10022 if(
us2
[
i
]==(
ªgm≠_¥e
[i][
hr
]&63)Ë
ƒ
|=1<<hr;

10023 if(
rs1
[
i
]==
ªgm≠_¥e
[i][
hr
]Ë
ƒ
|=1<<hr;

10024 if(
rs2
[
i
]==
ªgm≠_¥e
[i][
hr
]Ë
ƒ
|=1<<hr;

10025 if(
us1
[
i
]==(
ªgs
[i].
ªgm≠_íåy
[
hr
]&63)Ë
ƒ
|=1<<hr;

10026 if(
us2
[
i
]==(
ªgs
[i].
ªgm≠_íåy
[
hr
]&63)Ë
ƒ
|=1<<hr;

10027 if(
rs1
[
i
]==
ªgs
[i].
ªgm≠_íåy
[
hr
]Ë
ƒ
|=1<<hr;

10028 if(
rs2
[
i
]==
ªgs
[i].
ªgm≠_íåy
[
hr
]Ë
ƒ
|=1<<hr;

10029 if(
dï1
[
i
]&&!((
u¬ìded_ªg_uµî
[i]>>dep1[i])&1)) {

10030 if(
dï1
[
i
]==(
ªgm≠_¥e
[i][
hr
]&63)Ë
ƒ
|=1<<hr;

10031 if(
dï1
[
i
]==(
ªgs
[i].
ªgm≠_íåy
[
hr
]&63)Ë
ƒ
|=1<<hr;

10033 if(
dï2
[
i
]&&!((
u¬ìded_ªg_uµî
[i]>>dep2[i])&1)) {

10034 if(
dï2
[
i
]==(
ªgm≠_¥e
[i][
hr
]&63)Ë
ƒ
|=1<<hr;

10035 if(
dï2
[
i
]==(
ªgs
[i].
ªgm≠_íåy
[
hr
]&63)Ë
ƒ
|=1<<hr;

10037 if(
ôy≥
[
i
]==
STORE
 || ity≥[i]==
STORELR
 || (
›code
[i]&0x3b)==0x39 || (opcode[i]&0x3b)==0x3a) {

10038 if(
ªgm≠_¥e
[
i
][
hr
]==
INVCP
Ë
ƒ
|=1<<hr;

10039 if(
ªgs
[
i
].
ªgm≠_íåy
[
hr
]==
INVCP
Ë
ƒ
|=1<<hr;

10045 if(
i
>0&&!
bt
[i]&&((
ªgs
[i].
wasdúty
>>
hr
)&1)) {

10046 if((
ªgm≠_¥e
[
i
][
hr
]>0&&ªgm≠_¥e[i][hr]<64&&!((
u¬ìded_ªg
[i]>>regmap_pre[i][hr])&1)) ||

10047 (
ªgm≠_¥e
[
i
][
hr
]>64&&!((
u¬ìded_ªg_uµî
[i]>>(regmap_pre[i][hr]&63))&1)) ) {

10048 if(
π1
[
i
-1]==(
ªgm≠_¥e
[i][
hr
]&63)Ë
ƒ
|=1<<hr;

10049 if(
π2
[
i
-1]==(
ªgm≠_¥e
[i][
hr
]&63)Ë
ƒ
|=1<<hr;

10051 if((
ªgs
[
i
].
ªgm≠_íåy
[
hr
]>0&&ªgs[i].ªgm≠_íåy[hr]<64&&!((
u¬ìded_ªg
[i]>>regs[i].regmap_entry[hr])&1)) ||

10052 (
ªgs
[
i
].
ªgm≠_íåy
[
hr
]>64&&!((
u¬ìded_ªg_uµî
[i]>>(regs[i].regmap_entry[hr]&63))&1)) ) {

10053 if(
π1
[
i
-1]==(
ªgs
[i].
ªgm≠_íåy
[
hr
]&63)Ë
ƒ
|=1<<hr;

10054 if(
π2
[
i
-1]==(
ªgs
[i].
ªgm≠_íåy
[
hr
]&63)Ë
ƒ
|=1<<hr;

10059 if(
i
==0||
bt
[i]||
ôy≥
[i]==
CJUMP
||ôy≥[i]==
FJUMP
||ôy≥[i]==
SPAN
) {

10060 if(
ªgm≠_¥e
[
i
][
HOST_CCREG
]==
CCREG
Ë
ƒ
|=1<<HOST_CCREG;

10061 if(
ªgs
[
i
].
ªgm≠_íåy
[
HOST_CCREG
]==
CCREG
Ë
ƒ
|=1<<HOST_CCREG;

10064 
√eded_ªg
[
i
]=
ƒ
;

10067 
hr
=0;hr<
HOST_REGS
;hr++)

10069 if(!((
ƒ
>>
hr
)&1)) {

10070 if(
ªgs
[
i
].
ªgm≠_íåy
[
hr
]!=
CCREG
)Ñegs[i].regmap_entry[hr]=-1;

10071 if((
ªgs
[
i
].
ªgm≠
[
hr
]&63)!=
rs1
[i] && (ªgs[i].ªgm≠[hr]&63)!=
rs2
[i] &&

10072 (
ªgs
[
i
].
ªgm≠
[
hr
]&63)!=
π1
[i] && (ªgs[i].ªgm≠[hr]&63)!=
π2
[i] &&

10073 (
ªgs
[
i
].
ªgm≠
[
hr
]&63)!=
PTEMP
 && (ªgs[i].ªgm≠[hr]&63)!=
CCREG
)

10075 if(
ôy≥
[
i
]!=
RJUMP
&&ôy≥[i]!=
UJUMP
&&(
sour˚
[i]>>16)!=0x1000)

10077 if(
likñy
[
i
]) {

10078 
ªgs
[
i
].
ªgm≠
[
hr
]=-1;

10079 
ªgs
[
i
].
isc⁄°
&=~(1<<
hr
);

10080 if(
i
<
¶í
-2) {

10081 
ªgm≠_¥e
[
i
+2][
hr
]=-1;

10082 
ªgs
[
i
+2].
wasc⁄°
&=~(1<<
hr
);

10087 if(
ôy≥
[
i
]==
RJUMP
||ôy≥[i]==
UJUMP
||ôy≥[i]==
CJUMP
||ôy≥[i]==
SJUMP
||ôy≥[i]==
FJUMP
)

10089 
d1
=0,
d2
=0,
m≠
=0,
ãmp
=0;

10090 if(
	`gë_ªg
(
ªgs
[
i
].
ªgm≠
,
π1
[i+1]|64)>=0||gë_ªg(
bønch_ªgs
[i].regmap,rt1[i+1]|64)>=0)

10092 
d1
=
dï1
[
i
+1];

10093 
d2
=
dï2
[
i
+1];

10095 if(
usög_éb
) {

10096 if(
ôy≥
[
i
+1]==
LOAD
 || ity≥[i+1]==
LOADLR
 ||

10097 
ôy≥
[
i
+1]==
STORE
 || ity≥[i+1]==
STORELR
 ||

10098 
ôy≥
[
i
+1]==
C1LS
 || ity≥[i+1]==
C2LS
)

10099 
m≠
=
TLREG
;

10101 if(
ôy≥
[
i
+1]==
STORE
 || ity≥[i+1]==
STORELR
 ||

10102 (
›code
[
i
+1]&0x3b)==0x39 || (opcode[i+1]&0x3b)==0x3a) {

10103 
m≠
=
INVCP
;

10105 if(
ôy≥
[
i
+1]==
LOADLR
 || ity≥[i+1]==
STORELR
 ||

10106 
ôy≥
[
i
+1]==
C1LS
 || ity≥[i+1]==
C2LS
)

10107 
ãmp
=
FTEMP
;

10108 if((
ªgs
[
i
].
ªgm≠
[
hr
]&63)!=
rs1
[i] && (ªgs[i].ªgm≠[hr]&63)!=
rs2
[i] &&

10109 (
ªgs
[
i
].
ªgm≠
[
hr
]&63)!=
π1
[i] && (ªgs[i].ªgm≠[hr]&63)!=
π2
[i] &&

10110 (
ªgs
[
i
].
ªgm≠
[
hr
]&63)!=
π1
[i+1] && (ªgs[i].ªgm≠[hr]&63)!=
π2
[i+1] &&

10111 (
ªgs
[
i
].
ªgm≠
[
hr
]^64)!=
us1
[i+1] && (ªgs[i].ªgm≠[hr]^64)!=
us2
[i+1] &&

10112 (
ªgs
[
i
].
ªgm≠
[
hr
]^64)!=
d1
 && (ªgs[i].ªgm≠[hr]^64)!=
d2
 &&

10113 
ªgs
[
i
].
ªgm≠
[
hr
]!=
rs1
[i+1] &&Ñegs[i].ªgm≠[hr]!=
rs2
[i+1] &&

10114 (
ªgs
[
i
].
ªgm≠
[
hr
]&63)!=
ãmp
 &&Ñegs[i].ªgm≠[hr]!=
PTEMP
 &&

10115 
ªgs
[
i
].
ªgm≠
[
hr
]!=
RHASH
 &&Ñegs[i].ªgm≠[hr]!=
RHTBL
 &&

10116 
ªgs
[
i
].
ªgm≠
[
hr
]!=
RTEMP
 &&Ñegs[i].ªgm≠[hr]!=
CCREG
 &&

10117 
ªgs
[
i
].
ªgm≠
[
hr
]!=
m≠
 )

10119 
ªgs
[
i
].
ªgm≠
[
hr
]=-1;

10120 
ªgs
[
i
].
isc⁄°
&=~(1<<
hr
);

10121 if((
bønch_ªgs
[
i
].
ªgm≠
[
hr
]&63)!=
rs1
[i] && (bønch_ªgs[i].ªgm≠[hr]&63)!=
rs2
[i] &&

10122 (
bønch_ªgs
[
i
].
ªgm≠
[
hr
]&63)!=
π1
[i] && (bønch_ªgs[i].ªgm≠[hr]&63)!=
π2
[i] &&

10123 (
bønch_ªgs
[
i
].
ªgm≠
[
hr
]&63)!=
π1
[i+1] && (bønch_ªgs[i].ªgm≠[hr]&63)!=
π2
[i+1] &&

10124 (
bønch_ªgs
[
i
].
ªgm≠
[
hr
]^64)!=
us1
[i+1] && (bønch_ªgs[i].ªgm≠[hr]^64)!=
us2
[i+1] &&

10125 (
bønch_ªgs
[
i
].
ªgm≠
[
hr
]^64)!=
d1
 && (bønch_ªgs[i].ªgm≠[hr]^64)!=
d2
 &&

10126 
bønch_ªgs
[
i
].
ªgm≠
[
hr
]!=
rs1
[i+1] && bønch_ªgs[i].ªgm≠[hr]!=
rs2
[i+1] &&

10127 (
bønch_ªgs
[
i
].
ªgm≠
[
hr
]&63)!=
ãmp
 && bønch_ªgs[i].ªgm≠[hr]!=
PTEMP
 &&

10128 
bønch_ªgs
[
i
].
ªgm≠
[
hr
]!=
RHASH
 && bønch_ªgs[i].ªgm≠[hr]!=
RHTBL
 &&

10129 
bønch_ªgs
[
i
].
ªgm≠
[
hr
]!=
RTEMP
 && bønch_ªgs[i].ªgm≠[hr]!=
CCREG
 &&

10130 
bønch_ªgs
[
i
].
ªgm≠
[
hr
]!=
m≠
)

10132 
bønch_ªgs
[
i
].
ªgm≠
[
hr
]=-1;

10133 
bønch_ªgs
[
i
].
ªgm≠_íåy
[
hr
]=-1;

10134 if(
ôy≥
[
i
]!=
RJUMP
&&ôy≥[i]!=
UJUMP
&&(
sour˚
[i]>>16)!=0x1000)

10136 if(!
likñy
[
i
]&&i<
¶í
-2) {

10137 
ªgm≠_¥e
[
i
+2][
hr
]=-1;

10138 
ªgs
[
i
+2].
wasc⁄°
&=~(1<<
hr
);

10147 if(
i
>0)

10149 
d1
=0,
d2
=0,
m≠
=-1,
ãmp
=-1;

10150 if(
	`gë_ªg
(
ªgs
[
i
].
ªgm≠
,
π1
[i]|64)>=0)

10152 
d1
=
dï1
[
i
];

10153 
d2
=
dï2
[
i
];

10155 if(
usög_éb
) {

10156 if(
ôy≥
[
i
]==
LOAD
 || ity≥[i]==
LOADLR
 ||

10157 
ôy≥
[
i
]==
STORE
 || ity≥[i]==
STORELR
 ||

10158 
ôy≥
[
i
]==
C1LS
 || ity≥[i]==
C2LS
)

10159 
m≠
=
TLREG
;

10160 } if(
ôy≥
[
i
]==
STORE
 || ity≥[i]==
STORELR
 ||

10161 (
›code
[
i
]&0x3b)==0x39 || (opcode[i]&0x3b)==0x3a) {

10162 
m≠
=
INVCP
;

10164 if(
ôy≥
[
i
]==
LOADLR
 || ity≥[i]==
STORELR
 ||

10165 
ôy≥
[
i
]==
C1LS
 || ity≥[i]==
C2LS
)

10166 
ãmp
=
FTEMP
;

10167 if((
ªgs
[
i
].
ªgm≠
[
hr
]&63)!=
π1
[i] && (ªgs[i].ªgm≠[hr]&63)!=
π2
[i] &&

10168 (
ªgs
[
i
].
ªgm≠
[
hr
]^64)!=
us1
[i] && (ªgs[i].ªgm≠[hr]^64)!=
us2
[i] &&

10169 (
ªgs
[
i
].
ªgm≠
[
hr
]^64)!=
d1
 && (ªgs[i].ªgm≠[hr]^64)!=
d2
 &&

10170 
ªgs
[
i
].
ªgm≠
[
hr
]!=
rs1
[i] &&Ñegs[i].ªgm≠[hr]!=
rs2
[i] &&

10171 (
ªgs
[
i
].
ªgm≠
[
hr
]&63)!=
ãmp
 &&Ñegs[i].ªgm≠[hr]!=
m≠
 &&

10172 (
ôy≥
[
i
]!=
SPAN
||
ªgs
[i].
ªgm≠
[
hr
]!=
CCREG
))

10174 if(
i
<
¶í
-1&&!
is_ds
[i]) {

10175 if(
ªgm≠_¥e
[
i
+1][
hr
]!=-1 || 
ªgs
[i].
ªgm≠
[hr]!=-1)

10176 if(
ªgm≠_¥e
[
i
+1][
hr
]!=
ªgs
[i].
ªgm≠
[hr])

10177 if(
ªgs
[
i
].
ªgm≠
[
hr
]<64||!(‘egs[i].
was32
>>(regs[i].regmap[hr]&63))&1))

10179 
	`SysPrötf
("Áû: %x (%d %d!=%d)\n",
°¨t
+
i
*4,
hr
,
ªgm≠_¥e
[i+1][hr],
ªgs
[i].
ªgm≠
[hr]);

10180 
	`as£π
(
ªgm≠_¥e
[
i
+1][
hr
]==
ªgs
[i].
ªgm≠
[hr]);

10182 
ªgm≠_¥e
[
i
+1][
hr
]=-1;

10183 if(
ªgs
[
i
+1].
ªgm≠_íåy
[
hr
]==
CCREG
)Ñegs[i+1].regmap_entry[hr]=-1;

10184 
ªgs
[
i
+1].
wasc⁄°
&=~(1<<
hr
);

10186 
ªgs
[
i
].
ªgm≠
[
hr
]=-1;

10187 
ªgs
[
i
].
isc⁄°
&=~(1<<
hr
);

10201 sig√d 
f_ªgm≠
[
HOST_REGS
];

10202 
	`˛ór_Æl_ªgs
(
f_ªgm≠
);

10203 
i
=0;i<
¶í
-1;i++)

10205 if(
ôy≥
[
i
]==
UJUMP
||ôy≥[i]==
CJUMP
||ôy≥[i]==
SJUMP
||ôy≥[i]==
FJUMP
)

10207 if(
ba
[
i
]>=
°¨t
 && ba[i]<(start+i*4))

10208 if(
ôy≥
[
i
+1]==
NOP
||ôy≥[i+1]==
MOV
||ôy≥[i+1]==
ALU


10209 ||
ôy≥
[
i
+1]==
SHIFTIMM
||ôy≥[i+1]==
IMM16
||ôy≥[i+1]==
LOAD


10210 ||
ôy≥
[
i
+1]==
STORE
||ôy≥[i+1]==
STORELR
||ôy≥[i+1]==
C1LS


10211 ||
ôy≥
[
i
+1]==
SHIFT
||ôy≥[i+1]==
COP1
||ôy≥[i+1]==
FLOAT


10212 ||
ôy≥
[
i
+1]==
FCOMP
||ôy≥[i+1]==
FCONV


10213 ||
ôy≥
[
i
+1]==
COP2
||ôy≥[i+1]==
C2LS
||ôy≥[i+1]==
C2OP
)

10215 
t
=(
ba
[
i
]-
°¨t
)>>2;

10216 if(
t
>0&&(
ôy≥
[t-1]!=
UJUMP
&&ôy≥[t-1]!=
RJUMP
&&ôy≥[t-1]!=
CJUMP
&&ôy≥[t-1]!=
SJUMP
&&ôy≥[t-1]!=
FJUMP
))

10217 if(
t
<2||(
ôy≥
[t-2]!=
UJUMP
&&ôy≥[t-2]!=
RJUMP
)||
π1
[t-2]!=31)

10218 
hr
=0;hr<
HOST_REGS
;hr++)

10220 if(
ªgs
[
i
].
ªgm≠
[
hr
]>64) {

10221 if(!((
ªgs
[
i
].
dúty
>>
hr
)&1))

10222 
f_ªgm≠
[
hr
]=
ªgs
[
i
].
ªgm≠
[hr];

10223 
f_ªgm≠
[
hr
]=-1;

10225 if(
ªgs
[
i
].
ªgm≠
[
hr
]>=0) {

10226 if(
f_ªgm≠
[
hr
]!=
ªgs
[
i
].
ªgm≠
[hr]) {

10228 
n
;

10229 
n
=0;n<
HOST_REGS
;n++)

10231 if(
f_ªgm≠
[
n
]==
ªgs
[
i
].
ªgm≠
[
hr
]) {f_regmap[n]=-1;}

10234 
f_ªgm≠
[
hr
]=
ªgs
[
i
].
ªgm≠
[hr];

10237 if(
bønch_ªgs
[
i
].
ªgm≠
[
hr
]>64) {

10238 if(!((
bønch_ªgs
[
i
].
dúty
>>
hr
)&1))

10239 
f_ªgm≠
[
hr
]=
bønch_ªgs
[
i
].
ªgm≠
[hr];

10240 
f_ªgm≠
[
hr
]=-1;

10242 if(
bønch_ªgs
[
i
].
ªgm≠
[
hr
]>=0) {

10243 if(
f_ªgm≠
[
hr
]!=
bønch_ªgs
[
i
].
ªgm≠
[hr]) {

10245 
n
;

10246 
n
=0;n<
HOST_REGS
;n++)

10248 if(
f_ªgm≠
[
n
]==
bønch_ªgs
[
i
].
ªgm≠
[
hr
]) {f_regmap[n]=-1;}

10251 
f_ªgm≠
[
hr
]=
bønch_ªgs
[
i
].
ªgm≠
[hr];

10254 if(
ooo
[
i
]) {

10255 if(
	`cou¡_‰ì_ªgs
(
ªgs
[
i
].
ªgm≠
)<=
möimum_‰ì_ªgs
[i+1])

10256 
f_ªgm≠
[
hr
]=
bønch_ªgs
[
i
].
ªgm≠
[hr];

10258 if(
	`cou¡_‰ì_ªgs
(
bønch_ªgs
[
i
].
ªgm≠
)<=
möimum_‰ì_ªgs
[i+1])

10259 
f_ªgm≠
[
hr
]=
bønch_ªgs
[
i
].
ªgm≠
[hr];

10262 #ifde‡
DESTRUCTIVE_WRITEBACK


10263 if(
t
>0Ëif(
	`gë_ªg
(
ªgm≠_¥e
[t],
f_ªgm≠
[
hr
])>=0Ëif((
ªgs
[t].
wasdúty
>>get_reg(regmap_pre[t],f_regmap[hr]))&1) f_regmap[hr]=-1;

10272 if(
f_ªgm≠
[
hr
]>0) {

10273 if(
ªgs
[
t
].
ªgm≠
[
hr
]==
f_ªgm≠
[hr]||‘egs[t].
ªgm≠_íåy
[hr]<0&&
	`gë_ªg
(
ªgm≠_¥e
[t],f_regmap[hr])<0)) {

10274 
r
=
f_ªgm≠
[
hr
];

10275 
j
=
t
;j<=
i
;j++)

10278 if(
r
<34&&((
u¬ìded_ªg
[
j
]>>r)&1)) ;

10279 if(
r
>63&&((
u¬ìded_ªg_uµî
[
j
]>>(r&63))&1)) ;

10280 if(
r
>63) {

10284 if(
	`gë_ªg
(
ªgs
[
j
].
ªgm≠
,
r
&63)<0) ;

10285 if(
	`gë_ªg
(
ªgs
[
j
].
ªgm≠_íåy
,
r
&63)<0) ;

10286 if(
ªgs
[
j
].
is32
&(1LL<<(
r
&63))) ;

10288 if(
ªgs
[
j
].
ªgm≠
[
hr
]==
f_ªgm≠
[hr]&&(f_ªgm≠[hr]&63)<
TEMPREG
) {

10290 
k
;

10291 if(
ªgs
[
i
].
ªgm≠
[
hr
]==-1&&
bønch_ªgs
[i].regmap[hr]==-1) {

10292 if(
	`gë_ªg
(
ªgs
[
i
+2].
ªgm≠
,
f_ªgm≠
[
hr
])>=0) ;

10293 if(
r
>63) {

10294 if(
	`gë_ªg
(
ªgs
[
i
].
ªgm≠
,
r
&63)<0) ;

10295 if(
	`gë_ªg
(
bønch_ªgs
[
i
].
ªgm≠
,
r
&63)<0) ;

10297 
k
=
i
;

10298 
k
>1&&
ªgs
[k-1].
ªgm≠
[
hr
]==-1) {

10299 if(
	`cou¡_‰ì_ªgs
(
ªgs
[
k
-1].
ªgm≠
)<=
möimum_‰ì_ªgs
[k-1]) {

10303 if(
	`gë_ªg
(
ªgs
[
k
-1].
ªgm≠
,
f_ªgm≠
[
hr
])>=0) {

10307 if(
ôy≥
[
k
-2]==
UJUMP
||ôy≥[k-2]==
RJUMP
||ôy≥[k-2]==
CJUMP
||ôy≥[k-2]==
SJUMP
||ôy≥[k-2]==
FJUMP
) {

10312 if(
k
>2&&(
ôy≥
[k-3]==
UJUMP
||ôy≥[k-3]==
RJUMP
)&&
π1
[k-3]==31) {

10315 if(
r
>63) {

10319 if(
	`gë_ªg
(
ªgs
[
k
-1].
ªgm≠
,
r
&63)<0) ;

10320 if(
ªgs
[
k
-1].
is32
&(1LL<<(
r
&63))) ;

10322 
k
--;

10324 if(
i
<
¶í
-1) {

10325 if((
ªgs
[
k
].
is32
&(1LL<<
f_ªgm≠
[
hr
]))!=

10326 (
ªgs
[
i
+2].
was32
&(1LL<<
f_ªgm≠
[
hr
]))) {

10331 if(
ªgs
[
k
-1].
ªgm≠
[
hr
]==
f_ªgm≠
[hr]&&
ªgm≠_¥e
[k][hr]==f_regmap[hr]) {

10333 
k
<
i
) {

10334 
ªgs
[
k
].
ªgm≠_íåy
[
hr
]=
f_ªgm≠
[hr];

10335 
ªgs
[
k
].
ªgm≠
[
hr
]=
f_ªgm≠
[hr];

10336 
ªgm≠_¥e
[
k
+1][
hr
]=
f_ªgm≠
[hr];

10337 
ªgs
[
k
].
wasdúty
&=~(1<<
hr
);

10338 
ªgs
[
k
].
dúty
&=~(1<<
hr
);

10339 
ªgs
[
k
].
wasdúty
|=(1<<
hr
)&ªgs[k-1].
dúty
;

10340 
ªgs
[
k
].
dúty
|=(1<<
hr
)&ªgs[k].
wasdúty
;

10341 
ªgs
[
k
].
wasc⁄°
&=~(1<<
hr
);

10342 
ªgs
[
k
].
isc⁄°
&=~(1<<
hr
);

10343 
k
++;

10350 
	`as£π
(
ªgs
[
i
-1].
ªgm≠
[
hr
]==
f_ªgm≠
[hr]);

10351 if(
ªgs
[
i
-1].
ªgm≠
[
hr
]==
f_ªgm≠
[hr]&&
ªgm≠_¥e
[i][hr]==f_regmap[hr]) {

10353 
ªgs
[
i
].
ªgm≠_íåy
[
hr
]=
f_ªgm≠
[hr];

10354 
ªgs
[
i
].
ªgm≠
[
hr
]=
f_ªgm≠
[hr];

10355 
ªgs
[
i
].
wasdúty
&=~(1<<
hr
);

10356 
ªgs
[
i
].
dúty
&=~(1<<
hr
);

10357 
ªgs
[
i
].
wasdúty
|=(1<<
hr
)&ªgs[i-1].
dúty
;

10358 
ªgs
[
i
].
dúty
|=(1<<
hr
)&regs[i-1].dirty;

10359 
ªgs
[
i
].
wasc⁄°
&=~(1<<
hr
);

10360 
ªgs
[
i
].
isc⁄°
&=~(1<<
hr
);

10361 
bønch_ªgs
[
i
].
ªgm≠_íåy
[
hr
]=
f_ªgm≠
[hr];

10362 
bønch_ªgs
[
i
].
wasdúty
&=~(1<<
hr
);

10363 
bønch_ªgs
[
i
].
wasdúty
|=(1<<
hr
)&
ªgs
[i].
dúty
;

10364 
bønch_ªgs
[
i
].
ªgm≠
[
hr
]=
f_ªgm≠
[hr];

10365 
bønch_ªgs
[
i
].
dúty
&=~(1<<
hr
);

10366 
bønch_ªgs
[
i
].
dúty
|=(1<<
hr
)&
ªgs
[i].dirty;

10367 
bønch_ªgs
[
i
].
wasc⁄°
&=~(1<<
hr
);

10368 
bønch_ªgs
[
i
].
isc⁄°
&=~(1<<
hr
);

10369 if(
ôy≥
[
i
]!=
RJUMP
&&ôy≥[i]!=
UJUMP
&&(
sour˚
[i]>>16)!=0x1000) {

10370 
ªgm≠_¥e
[
i
+2][
hr
]=
f_ªgm≠
[hr];

10371 
ªgs
[
i
+2].
wasdúty
&=~(1<<
hr
);

10372 
ªgs
[
i
+2].
wasdúty
|=(1<<
hr
)&ªgs[i].
dúty
;

10373 
	`as£π
((
bønch_ªgs
[
i
].
is32
&(1LL<<
f_ªgm≠
[
hr
]))==

10374 (
ªgs
[
i
+2].
was32
&(1LL<<
f_ªgm≠
[
hr
])));

10378 
k
=
t
;k<
j
;k++) {

10381 
ªgs
[
k
].
ªgm≠_íåy
[
hr
]=
f_ªgm≠
[hr];

10382 
ªgs
[
k
].
ªgm≠
[
hr
]=
f_ªgm≠
[hr];

10383 
ªgs
[
k
].
dúty
&=~(1<<
hr
);

10384 
ªgs
[
k
].
wasc⁄°
&=~(1<<
hr
);

10385 
ªgs
[
k
].
isc⁄°
&=~(1<<
hr
);

10386 if(
ôy≥
[
k
]==
UJUMP
||ôy≥[k]==
RJUMP
||ôy≥[k]==
CJUMP
||ôy≥[k]==
SJUMP
||ôy≥[k]==
FJUMP
) {

10387 
bønch_ªgs
[
k
].
ªgm≠_íåy
[
hr
]=
f_ªgm≠
[hr];

10388 
bønch_ªgs
[
k
].
ªgm≠
[
hr
]=
f_ªgm≠
[hr];

10389 
bønch_ªgs
[
k
].
dúty
&=~(1<<
hr
);

10390 
bønch_ªgs
[
k
].
wasc⁄°
&=~(1<<
hr
);

10391 
bønch_ªgs
[
k
].
isc⁄°
&=~(1<<
hr
);

10392 if(
ôy≥
[
k
]!=
RJUMP
&&ôy≥[k]!=
UJUMP
&&(
sour˚
[k]>>16)!=0x1000) {

10393 
ªgm≠_¥e
[
k
+2][
hr
]=
f_ªgm≠
[hr];

10394 
ªgs
[
k
+2].
wasdúty
&=~(1<<
hr
);

10395 
	`as£π
((
bønch_ªgs
[
k
].
is32
&(1LL<<
f_ªgm≠
[
hr
]))==

10396 (
ªgs
[
k
+2].
was32
&(1LL<<
f_ªgm≠
[
hr
])));

10401 
ªgm≠_¥e
[
k
+1][
hr
]=
f_ªgm≠
[hr];

10402 
ªgs
[
k
+1].
wasdúty
&=~(1<<
hr
);

10405 if(
ªgs
[
j
].
ªgm≠
[
hr
]==
f_ªgm≠
[hr])

10406 
ªgs
[
j
].
ªgm≠_íåy
[
hr
]=
f_ªgm≠
[hr];

10409 if(
j
==
i
) ;

10410 if(
ªgs
[
j
].
ªgm≠
[
hr
]>=0)

10412 if(
	`gë_ªg
(
ªgs
[
j
].
ªgm≠
,
f_ªgm≠
[
hr
])>=0) {

10416 if((
ªgs
[
j
+1].
is32
&(1LL<<
f_ªgm≠
[
hr
]))!=(regs[j].is32&(1LL<<f_regmap[hr]))) {

10420 if(
ôy≥
[
j
]==
UJUMP
||ôy≥[j]==
RJUMP
||(
sour˚
[j]>>16)==0x1000)

10425 if(
ôy≥
[
j
]==
CJUMP
||ôy≥[j]==
SJUMP
||ôy≥[j]==
FJUMP
)

10427 if(
ooo
[
j
]) {

10428 if(
	`cou¡_‰ì_ªgs
(
ªgs
[
j
].
ªgm≠
)<=
möimum_‰ì_ªgs
[j+1])

10431 if(
	`cou¡_‰ì_ªgs
(
bønch_ªgs
[
j
].
ªgm≠
)<=
möimum_‰ì_ªgs
[j+1])

10434 if(
	`gë_ªg
(
bønch_ªgs
[
j
].
ªgm≠
,
f_ªgm≠
[
hr
])>=0) {

10439 if(
	`cou¡_‰ì_ªgs
(
ªgs
[
j
].
ªgm≠
)<=
möimum_‰ì_ªgs
[j]) {

10443 if(
f_ªgm≠
[
hr
]>=64) {

10444 if(
ªgs
[
j
].
is32
&(1LL<<(
f_ªgm≠
[
hr
]&63))) {

10449 if(
	`gë_ªg
(
ªgs
[
j
].
ªgm≠
,
f_ªgm≠
[
hr
]&63)<0) {

10461 
hr
=0;hr<
HOST_REGS
;hr++)

10463 if(
hr
!=
EXCLUDE_REG
) {

10464 if(
ªgs
[
i
].
ªgm≠
[
hr
]>64) {

10465 if(!((
ªgs
[
i
].
dúty
>>
hr
)&1))

10466 
f_ªgm≠
[
hr
]=
ªgs
[
i
].
ªgm≠
[hr];

10468 if(
ªgs
[
i
].
ªgm≠
[
hr
]>=0) {

10469 if(
f_ªgm≠
[
hr
]!=
ªgs
[
i
].
ªgm≠
[hr]) {

10471 
n
;

10472 
n
=0;n<
HOST_REGS
;n++)

10474 if(
f_ªgm≠
[
n
]==
ªgs
[
i
].
ªgm≠
[
hr
]) {f_regmap[n]=-1;}

10477 
f_ªgm≠
[
hr
]=
ªgs
[
i
].
ªgm≠
[hr];

10483 if(
bt
[
i
]) {

10484 
j
=
i
;j<
¶í
-1;j++) {

10485 if(
ªgs
[
j
].
ªgm≠
[
HOST_CCREG
]!=-1) ;

10486 if(
	`cou¡_‰ì_ªgs
(
ªgs
[
j
].
ªgm≠
)<=
möimum_‰ì_ªgs
[j]) {

10491 if(
ªgs
[
j
].
ªgm≠
[
HOST_CCREG
]==
CCREG
) {

10492 
k
=
i
;

10494 
k
<
j
) {

10495 
ªgs
[
k
].
ªgm≠_íåy
[
HOST_CCREG
]=
CCREG
;

10496 
ªgs
[
k
].
ªgm≠
[
HOST_CCREG
]=
CCREG
;

10497 
ªgm≠_¥e
[
k
+1][
HOST_CCREG
]=
CCREG
;

10498 
ªgs
[
k
+1].
wasdúty
|=1<<
HOST_CCREG
;

10499 
ªgs
[
k
].
dúty
|=1<<
HOST_CCREG
;

10500 
ªgs
[
k
].
wasc⁄°
&=~(1<<
HOST_CCREG
);

10501 
ªgs
[
k
].
isc⁄°
&=~(1<<
HOST_CCREG
);

10502 
k
++;

10504 
ªgs
[
j
].
ªgm≠_íåy
[
HOST_CCREG
]=
CCREG
;

10507 if(
j
>
i
&&
f_ªgm≠
[
HOST_CCREG
]==
CCREG
)

10510 
k
;

10511 
k
=
i
;

10512 
ªgs
[
k
-1].
ªgm≠
[
HOST_CCREG
]==-1) {

10513 if(
	`cou¡_‰ì_ªgs
(
ªgs
[
k
-1].
ªgm≠
)<=
möimum_‰ì_ªgs
[k-1]) {

10517 
k
--;

10519 if(
ªgs
[
k
-1].
ªgm≠
[
HOST_CCREG
]==
CCREG
) {

10521 
k
<=
i
) {

10522 
ªgs
[
k
].
ªgm≠_íåy
[
HOST_CCREG
]=
CCREG
;

10523 
ªgs
[
k
].
ªgm≠
[
HOST_CCREG
]=
CCREG
;

10524 
ªgm≠_¥e
[
k
+1][
HOST_CCREG
]=
CCREG
;

10525 
ªgs
[
k
+1].
wasdúty
|=1<<
HOST_CCREG
;

10526 
ªgs
[
k
].
dúty
|=1<<
HOST_CCREG
;

10527 
ªgs
[
k
].
wasc⁄°
&=~(1<<
HOST_CCREG
);

10528 
ªgs
[
k
].
isc⁄°
&=~(1<<
HOST_CCREG
);

10529 
k
++;

10537 if(
ôy≥
[
i
]!=
STORE
&&ôy≥[i]!=
STORELR
&&ôy≥[i]!=
C1LS
&&ôy≥[i]!=
SHIFT
&&

10538 
ôy≥
[
i
]!=
NOP
&&ôy≥[i]!=
MOV
&&ôy≥[i]!=
ALU
&&ôy≥[i]!=
SHIFTIMM
&&

10539 
ôy≥
[
i
]!=
IMM16
&&ôy≥[i]!=
LOAD
&&ôy≥[i]!=
COP1
&&ôy≥[i]!=
FLOAT
&&

10540 
ôy≥
[
i
]!=
FCONV
&&ôy≥[i]!=
FCOMP
)

10542 
	`mem˝y
(
f_ªgm≠
,
ªgs
[
i
].
ªgm≠
,(f_regmap));

10548 #i‚de‡
HOST_IMM_ADDR32


10549 #i‚de‡
RAM_OFFSET


10550 if(
usög_éb
)

10553 
óæõ°_avaûabÀ
[
HOST_REGS
];

10554 
lo›_°¨t
[
HOST_REGS
];

10555 
sc‹e
[
HOST_REGS
];

10556 
íd
[
HOST_REGS
];

10557 
ªg
=
usög_éb
?
MMREG
:
ROREG
;

10560 
hr
=0;hr<
HOST_REGS
;hr++) {

10561 
sc‹e
[
hr
]=0;
óæõ°_avaûabÀ
[hr]=0;

10562 
lo›_°¨t
[
hr
]=
MAXBLOCK
;

10564 
i
=0;i<
¶í
-1;i++)

10567 if(
	`cou¡_‰ì_ªgs
(
ªgs
[
i
].
ªgm≠
)<=
möimum_‰ì_ªgs
[i]) {

10568 
hr
=0;hr<
HOST_REGS
;hr++) {

10569 
sc‹e
[
hr
]=0;
óæõ°_avaûabÀ
[hr]=
i
+1;

10570 
lo›_°¨t
[
hr
]=
MAXBLOCK
;

10573 if(
ôy≥
[
i
]==
UJUMP
||ôy≥[i]==
RJUMP
||ôy≥[i]==
CJUMP
||ôy≥[i]==
SJUMP
||ôy≥[i]==
FJUMP
) {

10574 if(!
ooo
[
i
]) {

10575 if(
	`cou¡_‰ì_ªgs
(
bønch_ªgs
[
i
].
ªgm≠
)<=
möimum_‰ì_ªgs
[i+1]) {

10576 
hr
=0;hr<
HOST_REGS
;hr++) {

10577 
sc‹e
[
hr
]=0;
óæõ°_avaûabÀ
[hr]=
i
+1;

10578 
lo›_°¨t
[
hr
]=
MAXBLOCK
;

10582 if(
	`cou¡_‰ì_ªgs
(
ªgs
[
i
].
ªgm≠
)<=
möimum_‰ì_ªgs
[i+1]) {

10583 
hr
=0;hr<
HOST_REGS
;hr++) {

10584 
sc‹e
[
hr
]=0;
óæõ°_avaûabÀ
[hr]=
i
+1;

10585 
lo›_°¨t
[
hr
]=
MAXBLOCK
;

10591 
hr
=0;hr<
HOST_REGS
;hr++) {

10592 if(
ªgs
[
i
].
ªgm≠
[
hr
]>=0) {

10593 
sc‹e
[
hr
]=0;
óæõ°_avaûabÀ
[hr]=
i
+1;

10594 
lo›_°¨t
[
hr
]=
MAXBLOCK
;

10596 if(
ôy≥
[
i
]==
UJUMP
||ôy≥[i]==
RJUMP
||ôy≥[i]==
CJUMP
||ôy≥[i]==
SJUMP
||ôy≥[i]==
FJUMP
) {

10597 if(
bønch_ªgs
[
i
].
ªgm≠
[
hr
]>=0) {

10598 
sc‹e
[
hr
]=0;
óæõ°_avaûabÀ
[hr]=
i
+2;

10599 
lo›_°¨t
[
hr
]=
MAXBLOCK
;

10604 if(
ôy≥
[
i
]==
UJUMP
||ôy≥[i]==
RJUMP
||(
sour˚
[i]>>16)==0x1000)

10606 
hr
=0;hr<
HOST_REGS
;hr++) {

10607 
sc‹e
[
hr
]=0;
óæõ°_avaûabÀ
[hr]=
i
+2;

10608 
lo›_°¨t
[
hr
]=
MAXBLOCK
;

10610 
i
++;

10615 if(
ôy≥
[
i
]==
LOAD
||ôy≥[i]==
LOADLR
||

10616 
ôy≥
[
i
]==
STORE
||ôy≥[i]==
STORELR
||ôy≥[i]==
C1LS
) {

10617 
hr
=0;hr<
HOST_REGS
;hr++) {

10618 if(
hr
!=
EXCLUDE_REG
) {

10619 
íd
[
hr
]=
i
-1;

10620 
j
=
i
;j<
¶í
-1;j++) {

10621 if(
ªgs
[
j
].
ªgm≠
[
hr
]>=0) ;

10622 if(
ôy≥
[
j
]==
UJUMP
||ôy≥[j]==
RJUMP
||ôy≥[j]==
CJUMP
||ôy≥[j]==
SJUMP
||ôy≥[j]==
FJUMP
) {

10623 if(
bønch_ªgs
[
j
].
ªgm≠
[
hr
]>=0) ;

10624 if(
ooo
[
j
]) {

10625 if(
	`cou¡_‰ì_ªgs
(
ªgs
[
j
].
ªgm≠
)<=
möimum_‰ì_ªgs
[j+1]) ;

10627 if(
	`cou¡_‰ì_ªgs
(
bønch_ªgs
[
j
].
ªgm≠
)<=
möimum_‰ì_ªgs
[j+1]) ;

10630 if(
	`cou¡_‰ì_ªgs
(
ªgs
[
j
].
ªgm≠
)<=
möimum_‰ì_ªgs
[j]) ;

10631 if(
ôy≥
[
j
]==
UJUMP
||ôy≥[j]==
RJUMP
||ôy≥[j]==
CJUMP
||ôy≥[j]==
SJUMP
||ôy≥[j]==
FJUMP
) {

10632 
t
=(
ba
[
j
]-
°¨t
)>>2;

10633 if(
t
<
j
&&t>=
óæõ°_avaûabÀ
[
hr
]) {

10634 if(
t
==1||—>1&&
ôy≥
[t-2]!=
UJUMP
&&ôy≥[t-2]!=
RJUMP
)||—>1&&
π1
[t-2]!=31)) {

10636 if(
t
<
lo›_°¨t
[
hr
])Üoop_start[hr]=t;

10638 
sc‹e
[
hr
]++;

10639 
íd
[
hr
]=
j
;

10642 if(
t
<
j
) {

10643 if(
ªgs
[
t
].
ªgm≠
[
hr
]==
ªg
) {

10645 
sc‹e
[
hr
]++;

10646 
íd
[
hr
]=
j
;

10649 if(
ôy≥
[
j
+1]==
LOAD
||ôy≥[j+1]==
LOADLR
||

10650 
ôy≥
[
j
+1]==
STORE
||ôy≥[j+1]==
STORELR
||ôy≥[j+1]==
C1LS
) {

10651 
sc‹e
[
hr
]++;

10652 
íd
[
hr
]=
j
;

10655 if(
ôy≥
[
j
]==
UJUMP
||ôy≥[j]==
RJUMP
||(
sour˚
[j]>>16)==0x1000)

10661 if(
ôy≥
[
j
]==
LOAD
||ôy≥[j]==
LOADLR
||

10662 
ôy≥
[
j
]==
STORE
||ôy≥[j]==
STORELR
||ôy≥[j]==
C1LS
) {

10663 
sc‹e
[
hr
]++;

10664 
íd
[
hr
]=
j
;

10670 
maxsc‹e
=0;

10671 
hr
=0;hr<
HOST_REGS
;hr++) {

10672 if(
hr
!=
EXCLUDE_REG
) {

10673 if(
sc‹e
[
hr
]>sc‹e[
maxsc‹e
]) {

10674 
maxsc‹e
=
hr
;

10679 if(
sc‹e
[
maxsc‹e
]>1)

10681 if(
i
<
lo›_°¨t
[
maxsc‹e
])Üoop_start[maxscore]=i;

10682 
j
=
lo›_°¨t
[
maxsc‹e
];j<
¶í
&&j<=
íd
[maxscore];j++) {

10684 
	`as£π
(
ªgs
[
j
].
ªgm≠
[
maxsc‹e
]<0);

10685 if(
j
>
lo›_°¨t
[
maxsc‹e
]Ë
ªgs
[j].
ªgm≠_íåy
[maxsc‹e]=
ªg
;

10686 
ªgs
[
j
].
ªgm≠
[
maxsc‹e
]=
ªg
;

10687 
ªgs
[
j
].
dúty
&=~(1<<
maxsc‹e
);

10688 
ªgs
[
j
].
wasc⁄°
&=~(1<<
maxsc‹e
);

10689 
ªgs
[
j
].
isc⁄°
&=~(1<<
maxsc‹e
);

10690 if(
ôy≥
[
j
]==
UJUMP
||ôy≥[j]==
RJUMP
||ôy≥[j]==
CJUMP
||ôy≥[j]==
SJUMP
||ôy≥[j]==
FJUMP
) {

10691 
bønch_ªgs
[
j
].
ªgm≠
[
maxsc‹e
]=
ªg
;

10692 
bønch_ªgs
[
j
].
wasdúty
&=~(1<<
maxsc‹e
);

10693 
bønch_ªgs
[
j
].
dúty
&=~(1<<
maxsc‹e
);

10694 
bønch_ªgs
[
j
].
wasc⁄°
&=~(1<<
maxsc‹e
);

10695 
bønch_ªgs
[
j
].
isc⁄°
&=~(1<<
maxsc‹e
);

10696 if(
ôy≥
[
j
]!=
RJUMP
&&ôy≥[j]!=
UJUMP
&&(
sour˚
[j]>>16)!=0x1000) {

10697 
ªgm≠_¥e
[
j
+2][
maxsc‹e
]=
ªg
;

10698 
ªgs
[
j
+2].
wasdúty
&=~(1<<
maxsc‹e
);

10701 
t
=(
ba
[
j
]-
°¨t
)>>2;

10702 if(
t
==
lo›_°¨t
[
maxsc‹e
]) {

10703 if(
t
==1||—>1&&
ôy≥
[t-2]!=
UJUMP
&&ôy≥[t-2]!=
RJUMP
)||—>1&&
π1
[t-2]!=31))

10704 
ªgs
[
t
].
ªgm≠_íåy
[
maxsc‹e
]=
ªg
;

10709 if(
j
<1||(
ôy≥
[j-1]!=
RJUMP
&&ôy≥[j-1]!=
UJUMP
&&ôy≥[j-1]!=
CJUMP
&&ôy≥[j-1]!=
SJUMP
&&ôy≥[j-1]!=
FJUMP
)) {

10710 
ªgm≠_¥e
[
j
+1][
maxsc‹e
]=
ªg
;

10711 
ªgs
[
j
+1].
wasdúty
&=~(1<<
maxsc‹e
);

10715 
i
=
j
-1;

10716 if(
ôy≥
[
j
-1]==
RJUMP
||ôy≥[j-1]==
UJUMP
||ôy≥[j-1]==
CJUMP
||ôy≥[j-1]==
SJUMP
||ôy≥[j-1]==
FJUMP
Ë
i
++;

10717 
hr
=0;hr<
HOST_REGS
;hr++) {

10718 
sc‹e
[
hr
]=0;
óæõ°_avaûabÀ
[hr]=
i
+i;

10719 
lo›_°¨t
[
hr
]=
MAXBLOCK
;

10729 
i
=0;i<
¶í
-1;i++)

10731 if(!
i
||(
ôy≥
[i-1]!=
UJUMP
&&ôy≥[i-1]!=
CJUMP
&&ôy≥[i-1]!=
SJUMP
&&ôy≥[i-1]!=
RJUMP
&&ôy≥[i-1]!=
FJUMP
))

10733 if(!
bt
[
i
+1])

10735 if(
ôy≥
[
i
]==
ALU
||ôy≥[i]==
MOV
||ôy≥[i]==
LOAD
||ôy≥[i]==
SHIFTIMM
||ôy≥[i]==
IMM16


10736 ||((
ôy≥
[
i
]==
COP1
||ôy≥[i]==
COP2
)&&
›code2
[i]<3))

10738 if(
rs1
[
i
+1]) {

10739 if((
hr
=
	`gë_ªg
(
ªgs
[
i
+1].
ªgm≠
,
rs1
[i+1]))>=0)

10741 if(
ªgs
[
i
].
ªgm≠
[
hr
]<0&&ªgs[i+1].
ªgm≠_íåy
[hr]<0)

10743 
ªgs
[
i
].
ªgm≠
[
hr
]=regs[i+1].regmap[hr];

10744 
ªgm≠_¥e
[
i
+1][
hr
]=
ªgs
[i+1].
ªgm≠
[hr];

10745 
ªgs
[
i
+1].
ªgm≠_íåy
[
hr
]Ùegs[i+1].
ªgm≠
[hr];

10746 
ªgs
[
i
].
isc⁄°
&=~(1<<
hr
);

10747 
ªgs
[
i
].
isc⁄°
|Ùegs[i+1].isc⁄°&(1<<
hr
);

10748 
c⁄°m≠
[
i
][
hr
]=constmap[i+1][hr];

10749 
ªgs
[
i
+1].
wasdúty
&=~(1<<
hr
);

10750 
ªgs
[
i
].
dúty
&=~(1<<
hr
);

10754 if(
rs2
[
i
+1]) {

10755 if((
hr
=
	`gë_ªg
(
ªgs
[
i
+1].
ªgm≠
,
rs2
[i+1]))>=0)

10757 if(
ªgs
[
i
].
ªgm≠
[
hr
]<0&&ªgs[i+1].
ªgm≠_íåy
[hr]<0)

10759 
ªgs
[
i
].
ªgm≠
[
hr
]=regs[i+1].regmap[hr];

10760 
ªgm≠_¥e
[
i
+1][
hr
]=
ªgs
[i+1].
ªgm≠
[hr];

10761 
ªgs
[
i
+1].
ªgm≠_íåy
[
hr
]Ùegs[i+1].
ªgm≠
[hr];

10762 
ªgs
[
i
].
isc⁄°
&=~(1<<
hr
);

10763 
ªgs
[
i
].
isc⁄°
|Ùegs[i+1].isc⁄°&(1<<
hr
);

10764 
c⁄°m≠
[
i
][
hr
]=constmap[i+1][hr];

10765 
ªgs
[
i
+1].
wasdúty
&=~(1<<
hr
);

10766 
ªgs
[
i
].
dúty
&=~(1<<
hr
);

10771 if(
ôy≥
[
i
+1]==
LOAD
&&
rs1
[i+1]&&
	`gë_ªg
(
ªgs
[i+1].
ªgm≠
,rs1[i+1])<0) {

10772 if((
hr
=
	`gë_ªg
(
ªgs
[
i
+1].
ªgm≠
,
π1
[i+1]))>=0)

10774 if(
ªgs
[
i
].
ªgm≠
[
hr
]<0&&ªgs[i+1].
ªgm≠_íåy
[hr]<0)

10776 
ªgs
[
i
].
ªgm≠
[
hr
]=
rs1
[i+1];

10777 
ªgm≠_¥e
[
i
+1][
hr
]=
rs1
[i+1];

10778 
ªgs
[
i
+1].
ªgm≠_íåy
[
hr
]=
rs1
[i+1];

10779 
ªgs
[
i
].
isc⁄°
&=~(1<<
hr
);

10780 
ªgs
[
i
].
isc⁄°
|Ùegs[i+1].isc⁄°&(1<<
hr
);

10781 
c⁄°m≠
[
i
][
hr
]=constmap[i+1][hr];

10782 
ªgs
[
i
+1].
wasdúty
&=~(1<<
hr
);

10783 
ªgs
[
i
].
dúty
&=~(1<<
hr
);

10788 if(
…1
[
i
+1]&&
	`gë_ªg
(
ªgs
[i+1].
ªgm≠
,
rs1
[i+1])<0) {

10789 if((
hr
=
	`gë_ªg
(
ªgs
[
i
+1].
ªgm≠
,
π1
[i+1]))>=0)

10791 if(
ªgs
[
i
].
ªgm≠
[
hr
]<0&&ªgs[i+1].
ªgm≠_íåy
[hr]<0)

10793 
ªgs
[
i
].
ªgm≠
[
hr
]=
rs1
[i+1];

10794 
ªgm≠_¥e
[
i
+1][
hr
]=
rs1
[i+1];

10795 
ªgs
[
i
+1].
ªgm≠_íåy
[
hr
]=
rs1
[i+1];

10796 
ªgs
[
i
].
isc⁄°
&=~(1<<
hr
);

10797 
ªgs
[
i
].
isc⁄°
|Ùegs[i+1].isc⁄°&(1<<
hr
);

10798 
c⁄°m≠
[
i
][
hr
]=constmap[i+1][hr];

10799 
ªgs
[
i
+1].
wasdúty
&=~(1<<
hr
);

10800 
ªgs
[
i
].
dúty
&=~(1<<
hr
);

10805 #i‚de‡
HOST_IMM_ADDR32


10806 if(
ôy≥
[
i
+1]==
LOAD
||ôy≥[i+1]==
LOADLR
||ôy≥[i+1]==
STORE
||ôy≥[i+1]==
STORELR
||ôy≥[i+1]==
C1LS
||ôy≥[i+1]==
C2LS
) {

10807 
hr
=
	`gë_ªg
(
ªgs
[
i
+1].
ªgm≠
,
TLREG
);

10808 if(
hr
>=0) {

10809 
§
=
	`gë_ªg
(
ªgs
[
i
+1].
ªgm≠
,
rs1
[i+1]);

10810 if(
§
>=0&&((
ªgs
[
i
+1].
wasc⁄°
>>sr)&1)) {

10811 
ƒ
;

10812 if(
ªgs
[
i
].
ªgm≠
[
hr
]<0&&ªgs[i+1].
ªgm≠_íåy
[hr]<0)

10814 
ªgs
[
i
].
ªgm≠
[
hr
]=
MGEN1
+((i+1)&1);

10815 
ªgm≠_¥e
[
i
+1][
hr
]=
MGEN1
+((i+1)&1);

10816 
ªgs
[
i
+1].
ªgm≠_íåy
[
hr
]=
MGEN1
+((i+1)&1);

10817 
ªgs
[
i
].
isc⁄°
&=~(1<<
hr
);

10818 
ªgs
[
i
].
isc⁄°
|Ùegs[i+1].isc⁄°&(1<<
hr
);

10819 
c⁄°m≠
[
i
][
hr
]=constmap[i+1][hr];

10820 
ªgs
[
i
+1].
wasdúty
&=~(1<<
hr
);

10821 
ªgs
[
i
].
dúty
&=~(1<<
hr
);

10823 if((
ƒ
=
	`gë_ªg2
(
ªgs
[
i
].
ªgm≠
,regs[i+1].regmap,-1))>=0)

10826 
ªgs
[
i
+1].
ªgm≠
[
hr
]=-1;

10827 
ªgm≠_¥e
[
i
+2][
hr
]=-1;

10828 
ªgs
[
i
+1].
ªgm≠
[
ƒ
]=
TLREG
;

10829 
ªgm≠_¥e
[
i
+2][
ƒ
]=
TLREG
;

10830 
ªgs
[
i
].
ªgm≠
[
ƒ
]=
MGEN1
+((i+1)&1);

10831 
ªgm≠_¥e
[
i
+1][
ƒ
]=
MGEN1
+((i+1)&1);

10832 
ªgs
[
i
+1].
ªgm≠_íåy
[
ƒ
]=
MGEN1
+((i+1)&1);

10833 
ªgs
[
i
].
isc⁄°
&=~(1<<
ƒ
);

10834 
ªgs
[
i
+1].
isc⁄°
&=~(1<<
ƒ
);

10835 
ªgs
[
i
].
dúty
&=~(1<<
ƒ
);

10836 
ªgs
[
i
+1].
wasdúty
&=~(1<<
ƒ
);

10837 
ªgs
[
i
+1].
dúty
&=~(1<<
ƒ
);

10838 
ªgs
[
i
+2].
wasdúty
&=~(1<<
ƒ
);

10845 if(
ôy≥
[
i
+1]==
STORE
||ôy≥[i+1]==
STORELR


10846 ||(
›code
[
i
+1]&0x3b)==0x39||(opcode[i+1]&0x3b)==0x3a) {

10847 if(
	`gë_ªg
(
ªgs
[
i
+1].
ªgm≠
,
rs1
[i+1])<0) {

10848 
hr
=
	`gë_ªg2
(
ªgs
[
i
].
ªgm≠
,regs[i+1].regmap,-1);

10849 if(
hr
<0Ëhr=
	`gë_ªg
(
ªgs
[
i
+1].
ªgm≠
,-1);

10850 {
ªgs
[
i
+1].
ªgm≠
[
hr
]=
AGEN1
+((i+1)&1);ªgs[i+1].
isc⁄°
&=~(1<<hr);}

10851 
	`as£π
(
hr
>=0);

10852 if(
ªgs
[
i
].
ªgm≠
[
hr
]<0&&ªgs[i+1].
ªgm≠_íåy
[hr]<0)

10854 
ªgs
[
i
].
ªgm≠
[
hr
]=
rs1
[i+1];

10855 
ªgm≠_¥e
[
i
+1][
hr
]=
rs1
[i+1];

10856 
ªgs
[
i
+1].
ªgm≠_íåy
[
hr
]=
rs1
[i+1];

10857 
ªgs
[
i
].
isc⁄°
&=~(1<<
hr
);

10858 
ªgs
[
i
].
isc⁄°
|Ùegs[i+1].isc⁄°&(1<<
hr
);

10859 
c⁄°m≠
[
i
][
hr
]=constmap[i+1][hr];

10860 
ªgs
[
i
+1].
wasdúty
&=~(1<<
hr
);

10861 
ªgs
[
i
].
dúty
&=~(1<<
hr
);

10865 if(
ôy≥
[
i
+1]==
LOADLR
||(
›code
[i+1]&0x3b)==0x31||(opcode[i+1]&0x3b)==0x32) {

10866 if(
	`gë_ªg
(
ªgs
[
i
+1].
ªgm≠
,
rs1
[i+1])<0) {

10867 
ƒ
;

10868 
hr
=
	`gë_ªg
(
ªgs
[
i
+1].
ªgm≠
,
FTEMP
);

10869 
	`as£π
(
hr
>=0);

10870 if(
ªgs
[
i
].
ªgm≠
[
hr
]<0&&ªgs[i+1].
ªgm≠_íåy
[hr]<0)

10872 
ªgs
[
i
].
ªgm≠
[
hr
]=
rs1
[i+1];

10873 
ªgm≠_¥e
[
i
+1][
hr
]=
rs1
[i+1];

10874 
ªgs
[
i
+1].
ªgm≠_íåy
[
hr
]=
rs1
[i+1];

10875 
ªgs
[
i
].
isc⁄°
&=~(1<<
hr
);

10876 
ªgs
[
i
].
isc⁄°
|Ùegs[i+1].isc⁄°&(1<<
hr
);

10877 
c⁄°m≠
[
i
][
hr
]=constmap[i+1][hr];

10878 
ªgs
[
i
+1].
wasdúty
&=~(1<<
hr
);

10879 
ªgs
[
i
].
dúty
&=~(1<<
hr
);

10881 if((
ƒ
=
	`gë_ªg2
(
ªgs
[
i
].
ªgm≠
,regs[i+1].regmap,-1))>=0)

10884 
ªgs
[
i
+1].
ªgm≠
[
hr
]=-1;

10885 
ªgm≠_¥e
[
i
+2][
hr
]=-1;

10886 
ªgs
[
i
+1].
ªgm≠
[
ƒ
]=
FTEMP
;

10887 
ªgm≠_¥e
[
i
+2][
ƒ
]=
FTEMP
;

10888 
ªgs
[
i
].
ªgm≠
[
ƒ
]=
rs1
[i+1];

10889 
ªgm≠_¥e
[
i
+1][
ƒ
]=
rs1
[i+1];

10890 
ªgs
[
i
+1].
ªgm≠_íåy
[
ƒ
]=
rs1
[i+1];

10891 
ªgs
[
i
].
isc⁄°
&=~(1<<
ƒ
);

10892 
ªgs
[
i
+1].
isc⁄°
&=~(1<<
ƒ
);

10893 
ªgs
[
i
].
dúty
&=~(1<<
ƒ
);

10894 
ªgs
[
i
+1].
wasdúty
&=~(1<<
ƒ
);

10895 
ªgs
[
i
+1].
dúty
&=~(1<<
ƒ
);

10896 
ªgs
[
i
+2].
wasdúty
&=~(1<<
ƒ
);

10900 if(
ôy≥
[
i
+1]==
LOAD
||ôy≥[i+1]==
LOADLR
||ôy≥[i+1]==
STORE
||ôy≥[i+1]==
STORELR
 ) {

10901 if(
ôy≥
[
i
+1]==
LOAD
)

10902 
hr
=
	`gë_ªg
(
ªgs
[
i
+1].
ªgm≠
,
π1
[i+1]);

10903 if(
ôy≥
[
i
+1]==
LOADLR
||(
›code
[i+1]&0x3b)==0x31||(opcode[i+1]&0x3b)==0x32)

10904 
hr
=
	`gë_ªg
(
ªgs
[
i
+1].
ªgm≠
,
FTEMP
);

10905 if(
ôy≥
[
i
+1]==
STORE
||ôy≥[i+1]==
STORELR
||(
›code
[i+1]&0x3b)==0x39||(opcode[i+1]&0x3b)==0x3a) {

10906 
hr
=
	`gë_ªg
(
ªgs
[
i
+1].
ªgm≠
,
AGEN1
+((i+1)&1));

10907 if(
hr
<0Ëhr=
	`gë_ªg
(
ªgs
[
i
+1].
ªgm≠
,-1);

10909 if(
hr
>=0&&
ªgs
[
i
].
ªgm≠
[hr]<0) {

10910 
rs
=
	`gë_ªg
(
ªgs
[
i
+1].
ªgm≠
,
rs1
[i+1]);

10911 if(
rs
>=0&&((
ªgs
[
i
+1].
wasc⁄°
>>rs)&1)) {

10912 
ªgs
[
i
].
ªgm≠
[
hr
]=
AGEN1
+((i+1)&1);

10913 
ªgm≠_¥e
[
i
+1][
hr
]=
AGEN1
+((i+1)&1);

10914 
ªgs
[
i
+1].
ªgm≠_íåy
[
hr
]=
AGEN1
+((i+1)&1);

10915 
ªgs
[
i
].
isc⁄°
&=~(1<<
hr
);

10916 
ªgs
[
i
+1].
wasdúty
&=~(1<<
hr
);

10917 
ªgs
[
i
].
dúty
&=~(1<<
hr
);

10927 
	`˛ón_ªgi°îs
(0,
¶í
-1,1);

10930 #i‚de‡
FORCE32


10931 
	`¥ovisi⁄Æ_r32
();

10933 
u_öt
 
r32
=0;

10935 
i
=
¶í
-1;i>=0;i--)

10937 
hr
;

10938 if(
ôy≥
[
i
]==
RJUMP
||ôy≥[i]==
UJUMP
||ôy≥[i]==
CJUMP
||ôy≥[i]==
SJUMP
||ôy≥[i]==
FJUMP
)

10940 if(
ba
[
i
]<
°¨t
 || ba[i]>=(°¨t+
¶í
*4))

10943 
r32
=0;

10950 
r32
=0;

10951 
t
=(
ba
[
i
]-
°¨t
)>>2;

10952 if(
ba
[
i
]>
°¨t
+i*4) {

10954 if(!(
ªquúes_32bô
[
t
]&~
ªgs
[
i
].
was32
))

10955 
r32
|=
ªquúes_32bô
[
t
]&(~(1LL<<
π1
[
i
+1]))&(~(1LL<<
π2
[i+1]));

10960 if(!(
¥32
[
t
]&~
ªgs
[
i
].
was32
))

10961 
r32
|=
¥32
[
t
]&(~(1LL<<
π1
[
i
+1]))&(~(1LL<<
π2
[i+1]));

10965 if(
ôy≥
[
i
]!=
RJUMP
&&ôy≥[i]!=
UJUMP
&&(
sour˚
[i]>>16)!=0x1000)

10967 if(
i
<
¶í
-2) {

10968 
r32
|=
ªquúes_32bô
[
i
+2];

10969 
r32
&=
ªgs
[
i
].
was32
;

10972 
bt
[
i
+2]=1;

10976 if(!
likñy
[
i
]) {

10979 
r32
&=~(1LL<<
π1
[
i
+1]);

10980 
r32
&=~(1LL<<
π2
[
i
+1]);

10983 if(
us1
[
i
+1]>0)

10985 if((
ªgs
[
i
].
was32
>>
us1
[i+1])&1Ë
r32
|=1LL<<us1[i+1];

10987 if(
us2
[
i
+1]>0)

10989 if((
ªgs
[
i
].
was32
>>
us2
[i+1])&1Ë
r32
|=1LL<<us2[i+1];

10991 if(
dï1
[
i
+1]&&!((
u¬ìded_ªg_uµî
[i]>>dep1[i+1])&1))

10993 if((
ªgs
[
i
].
was32
>>
dï1
[i+1])&1Ë
r32
|=1LL<<dep1[i+1];

10995 if(
dï2
[
i
+1]&&!((
u¬ìded_ªg_uµî
[i]>>dep2[i+1])&1))

10997 if((
ªgs
[
i
].
was32
>>
dï2
[i+1])&1Ë
r32
|=1LL<<dep2[i+1];

11000 if(
ôy≥
[
i
]==
SYSCALL
||ôy≥[i]==
HLECALL
||ôy≥[i]==
INTCALL
)

11003 
r32
=0;

11005 if(
ôy≥
[
i
]==
COP0
 && (
sour˚
[i]&0x3f)==0x18)

11008 
r32
=0;

11011 
r32
&=~(1LL<<
π1
[
i
]);

11012 
r32
&=~(1LL<<
π2
[
i
]);

11013 if(
us1
[
i
]>0)

11015 if((
ªgs
[
i
].
was32
>>
us1
[i])&1Ë
r32
|=1LL<<us1[i];

11017 if(
us2
[
i
]>0)

11019 if((
ªgs
[
i
].
was32
>>
us2
[i])&1Ë
r32
|=1LL<<us2[i];

11021 if(
dï1
[
i
]&&!((
u¬ìded_ªg_uµî
[i]>>dep1[i])&1))

11023 if((
ªgs
[
i
].
was32
>>
dï1
[i])&1Ë
r32
|=1LL<<dep1[i];

11025 if(
dï2
[
i
]&&!((
u¬ìded_ªg_uµî
[i]>>dep2[i])&1))

11027 if((
ªgs
[
i
].
was32
>>
dï2
[i])&1Ë
r32
|=1LL<<dep2[i];

11029 
ªquúes_32bô
[
i
]=
r32
;

11033 
hr
=0;hr<
HOST_REGS
;hr++)

11035 if(
ªgs
[
i
].
ªgm≠_íåy
[
hr
]>0&&regs[i].regmap_entry[hr]<64) {

11036 if((
ªgs
[
i
].
was32
>>ªgs[i].
ªgm≠_íåy
[
hr
])&‘egs[i].
wasdúty
>>hr)&1) {

11037 if(!((
u¬ìded_ªg_uµî
[
i
]>>
ªgs
[i].
ªgm≠_íåy
[
hr
])&1))

11038 
ªquúes_32bô
[
i
]|=1LL<<
ªgs
[i].
ªgm≠_íåy
[
hr
];

11045 
i
=
¶í
-1;i>=0;i--)

11047 if(
ôy≥
[
i
]==
CJUMP
||ôy≥[i]==
SJUMP
||ôy≥[i]==
FJUMP
)

11050 if((
sour˚
[
i
]>>16)!=0x1000&&i<
¶í
-2) {

11053 
bt
[
i
+2]=1;

11059 if(
ôy≥
[
¶í
-1]==
SPAN
) {

11060 
bt
[
¶í
-1]=1;

11063 #ifde‡
DISASM


11065 
i
=0;i<
¶í
;i++)

11067 
	`¥ötf
("U:");

11068 
r
;

11069 
r
=1;r<=
CCREG
;r++) {

11070 if((
u¬ìded_ªg
[
i
]>>
r
)&1) {

11071 if(
r
==
HIREG
Ë
	`¥ötf
(" HI");

11072 if(
r
==
LOREG
Ë
	`¥ötf
(" LO");

11073 
	`¥ötf
("Ñ%d",
r
);

11076 #i‚de‡
FORCE32


11077 
	`¥ötf
(" UU:");

11078 
r
=1;r<=
CCREG
;r++) {

11079 if(((
u¬ìded_ªg_uµî
[
i
]&~
u¬ìded_ªg
[i])>>
r
)&1) {

11080 if(
r
==
HIREG
Ë
	`¥ötf
(" HI");

11081 if(
r
==
LOREG
Ë
	`¥ötf
(" LO");

11082 
	`¥ötf
("Ñ%d",
r
);

11085 
	`¥ötf
(" 32:");

11086 
r
=0;r<=
CCREG
;r++) {

11088 if((
ªgs
[
i
].
was32
>>
r
)&1) {

11089 if(
r
==
CCREG
Ë
	`¥ötf
(" CC");

11090 if(
r
==
HIREG
Ë
	`¥ötf
(" HI");

11091 if(
r
==
LOREG
Ë
	`¥ötf
(" LO");

11092 
	`¥ötf
("Ñ%d",
r
);

11096 
	`¥ötf
("\n");

11097 #i‡
	`deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

11098 
	`¥ötf
("¥e:Éax=%dÉcx=%dÉdx=%dÉbx=%dÉbp=%dÉsi=%dÉdi=%d\n",
ªgm≠_¥e
[
i
][0],regmap_pre[i][1],regmap_pre[i][2],regmap_pre[i][3],regmap_pre[i][5],regmap_pre[i][6],regmap_pre[i][7]);

11100 #ifde‡
__¨m__


11101 
	`¥ötf
("¥e:Ñ0=%dÑ1=%dÑ2=%dÑ3=%dÑ4=%dÑ5=%dÑ6=%dÑ7=%dÑ8=%dÑ9=%dÑ10=%dÑ12=%d\n",
ªgm≠_¥e
[
i
][0],regmap_pre[i][1],regmap_pre[i][2],regmap_pre[i][3],regmap_pre[i][4],regmap_pre[i][5],regmap_pre[i][6],regmap_pre[i][7],regmap_pre[i][8],regmap_pre[i][9],regmap_pre[i][10],regmap_pre[i][12]);

11103 
	`¥ötf
("needs: ");

11104 if(
√eded_ªg
[
i
]&1Ë
	`¥ötf
("eax ");

11105 if((
√eded_ªg
[
i
]>>1)&1Ë
	`¥ötf
("ecx ");

11106 if((
√eded_ªg
[
i
]>>2)&1Ë
	`¥ötf
("edx ");

11107 if((
√eded_ªg
[
i
]>>3)&1Ë
	`¥ötf
("ebx ");

11108 if((
√eded_ªg
[
i
]>>5)&1Ë
	`¥ötf
("ebp ");

11109 if((
√eded_ªg
[
i
]>>6)&1Ë
	`¥ötf
("esi ");

11110 if((
√eded_ªg
[
i
]>>7)&1Ë
	`¥ötf
("edi ");

11111 
	`¥ötf
("r:");

11112 
r
=0;r<=
CCREG
;r++) {

11114 if((
ªquúes_32bô
[
i
]>>
r
)&1) {

11115 if(
r
==
CCREG
Ë
	`¥ötf
(" CC");

11116 if(
r
==
HIREG
Ë
	`¥ötf
(" HI");

11117 if(
r
==
LOREG
Ë
	`¥ötf
(" LO");

11118 
	`¥ötf
("Ñ%d",
r
);

11121 
	`¥ötf
("\n");

11134 #i‡
	`deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

11135 
	`¥ötf
("íåy:Éax=%dÉcx=%dÉdx=%dÉbx=%dÉbp=%dÉsi=%dÉdi=%d\n",
ªgs
[
i
].
ªgm≠_íåy
[0],regs[i].regmap_entry[1],regs[i].regmap_entry[2],regs[i].regmap_entry[3],regs[i].regmap_entry[5],regs[i].regmap_entry[6],regs[i].regmap_entry[7]);

11136 
	`¥ötf
("dirty: ");

11137 if(
ªgs
[
i
].
wasdúty
&1Ë
	`¥ötf
("eax ");

11138 if((
ªgs
[
i
].
wasdúty
>>1)&1Ë
	`¥ötf
("ecx ");

11139 if((
ªgs
[
i
].
wasdúty
>>2)&1Ë
	`¥ötf
("edx ");

11140 if((
ªgs
[
i
].
wasdúty
>>3)&1Ë
	`¥ötf
("ebx ");

11141 if((
ªgs
[
i
].
wasdúty
>>5)&1Ë
	`¥ötf
("ebp ");

11142 if((
ªgs
[
i
].
wasdúty
>>6)&1Ë
	`¥ötf
("esi ");

11143 if((
ªgs
[
i
].
wasdúty
>>7)&1Ë
	`¥ötf
("edi ");

11145 #ifde‡
__¨m__


11146 
	`¥ötf
("íåy:Ñ0=%dÑ1=%dÑ2=%dÑ3=%dÑ4=%dÑ5=%dÑ6=%dÑ7=%dÑ8=%dÑ9=%dÑ10=%dÑ12=%d\n",
ªgs
[
i
].
ªgm≠_íåy
[0],regs[i].regmap_entry[1],regs[i].regmap_entry[2],regs[i].regmap_entry[3],regs[i].regmap_entry[4],regs[i].regmap_entry[5],regs[i].regmap_entry[6],regs[i].regmap_entry[7],regs[i].regmap_entry[8],regs[i].regmap_entry[9],regs[i].regmap_entry[10],regs[i].regmap_entry[12]);

11147 
	`¥ötf
("dirty: ");

11148 if(
ªgs
[
i
].
wasdúty
&1Ë
	`¥ötf
("r0 ");

11149 if((
ªgs
[
i
].
wasdúty
>>1)&1Ë
	`¥ötf
("r1 ");

11150 if((
ªgs
[
i
].
wasdúty
>>2)&1Ë
	`¥ötf
("r2 ");

11151 if((
ªgs
[
i
].
wasdúty
>>3)&1Ë
	`¥ötf
("r3 ");

11152 if((
ªgs
[
i
].
wasdúty
>>4)&1Ë
	`¥ötf
("r4 ");

11153 if((
ªgs
[
i
].
wasdúty
>>5)&1Ë
	`¥ötf
("r5 ");

11154 if((
ªgs
[
i
].
wasdúty
>>6)&1Ë
	`¥ötf
("r6 ");

11155 if((
ªgs
[
i
].
wasdúty
>>7)&1Ë
	`¥ötf
("r7 ");

11156 if((
ªgs
[
i
].
wasdúty
>>8)&1Ë
	`¥ötf
("r8 ");

11157 if((
ªgs
[
i
].
wasdúty
>>9)&1Ë
	`¥ötf
("r9 ");

11158 if((
ªgs
[
i
].
wasdúty
>>10)&1Ë
	`¥ötf
("r10 ");

11159 if((
ªgs
[
i
].
wasdúty
>>12)&1Ë
	`¥ötf
("r12 ");

11161 
	`¥ötf
("\n");

11162 
	`dißs£mbÀ_ö°
(
i
);

11164 #i‡
	`deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

11165 
	`¥ötf
("óx=%dÉcx=%dÉdx=%dÉbx=%dÉbp=%dÉsi=%dÉdi=%d dúty: ",
ªgs
[
i
].
ªgm≠
[0],regs[i].regmap[1],regs[i].regmap[2],regs[i].regmap[3],regs[i].regmap[5],regs[i].regmap[6],regs[i].regmap[7]);

11166 if(
ªgs
[
i
].
dúty
&1Ë
	`¥ötf
("eax ");

11167 if((
ªgs
[
i
].
dúty
>>1)&1Ë
	`¥ötf
("ecx ");

11168 if((
ªgs
[
i
].
dúty
>>2)&1Ë
	`¥ötf
("edx ");

11169 if((
ªgs
[
i
].
dúty
>>3)&1Ë
	`¥ötf
("ebx ");

11170 if((
ªgs
[
i
].
dúty
>>5)&1Ë
	`¥ötf
("ebp ");

11171 if((
ªgs
[
i
].
dúty
>>6)&1Ë
	`¥ötf
("esi ");

11172 if((
ªgs
[
i
].
dúty
>>7)&1Ë
	`¥ötf
("edi ");

11174 #ifde‡
__¨m__


11175 
	`¥ötf
("r0=%dÑ1=%dÑ2=%dÑ3=%dÑ4=%dÑ5=%dÑ6=%dÑ7=%dÑ8=%dÑ9=%dÑ10=%dÑ12=%d dúty: ",
ªgs
[
i
].
ªgm≠
[0],regs[i].regmap[1],regs[i].regmap[2],regs[i].regmap[3],regs[i].regmap[4],regs[i].regmap[5],regs[i].regmap[6],regs[i].regmap[7],regs[i].regmap[8],regs[i].regmap[9],regs[i].regmap[10],regs[i].regmap[12]);

11176 if(
ªgs
[
i
].
dúty
&1Ë
	`¥ötf
("r0 ");

11177 if((
ªgs
[
i
].
dúty
>>1)&1Ë
	`¥ötf
("r1 ");

11178 if((
ªgs
[
i
].
dúty
>>2)&1Ë
	`¥ötf
("r2 ");

11179 if((
ªgs
[
i
].
dúty
>>3)&1Ë
	`¥ötf
("r3 ");

11180 if((
ªgs
[
i
].
dúty
>>4)&1Ë
	`¥ötf
("r4 ");

11181 if((
ªgs
[
i
].
dúty
>>5)&1Ë
	`¥ötf
("r5 ");

11182 if((
ªgs
[
i
].
dúty
>>6)&1Ë
	`¥ötf
("r6 ");

11183 if((
ªgs
[
i
].
dúty
>>7)&1Ë
	`¥ötf
("r7 ");

11184 if((
ªgs
[
i
].
dúty
>>8)&1Ë
	`¥ötf
("r8 ");

11185 if((
ªgs
[
i
].
dúty
>>9)&1Ë
	`¥ötf
("r9 ");

11186 if((
ªgs
[
i
].
dúty
>>10)&1Ë
	`¥ötf
("r10 ");

11187 if((
ªgs
[
i
].
dúty
>>12)&1Ë
	`¥ötf
("r12 ");

11189 
	`¥ötf
("\n");

11190 if(
ªgs
[
i
].
isc⁄°
) {

11191 
	`¥ötf
("constants: ");

11192 #i‡
	`deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

11193 if(
ªgs
[
i
].
isc⁄°
&1Ë
	`¥ötf
("óx=%x ",()
c⁄°m≠
[i][0]);

11194 if((
ªgs
[
i
].
isc⁄°
>>1)&1Ë
	`¥ötf
("ecx=%x ",()
c⁄°m≠
[i][1]);

11195 if((
ªgs
[
i
].
isc⁄°
>>2)&1Ë
	`¥ötf
("edx=%x ",()
c⁄°m≠
[i][2]);

11196 if((
ªgs
[
i
].
isc⁄°
>>3)&1Ë
	`¥ötf
("ebx=%x ",()
c⁄°m≠
[i][3]);

11197 if((
ªgs
[
i
].
isc⁄°
>>5)&1Ë
	`¥ötf
("ebp=%x ",()
c⁄°m≠
[i][5]);

11198 if((
ªgs
[
i
].
isc⁄°
>>6)&1Ë
	`¥ötf
("esi=%x ",()
c⁄°m≠
[i][6]);

11199 if((
ªgs
[
i
].
isc⁄°
>>7)&1Ë
	`¥ötf
("edi=%x ",()
c⁄°m≠
[i][7]);

11201 #ifde‡
__¨m__


11202 if(
ªgs
[
i
].
isc⁄°
&1Ë
	`¥ötf
("r0=%x ",()
c⁄°m≠
[i][0]);

11203 if((
ªgs
[
i
].
isc⁄°
>>1)&1Ë
	`¥ötf
("r1=%x ",()
c⁄°m≠
[i][1]);

11204 if((
ªgs
[
i
].
isc⁄°
>>2)&1Ë
	`¥ötf
("r2=%x ",()
c⁄°m≠
[i][2]);

11205 if((
ªgs
[
i
].
isc⁄°
>>3)&1Ë
	`¥ötf
("r3=%x ",()
c⁄°m≠
[i][3]);

11206 if((
ªgs
[
i
].
isc⁄°
>>4)&1Ë
	`¥ötf
("r4=%x ",()
c⁄°m≠
[i][4]);

11207 if((
ªgs
[
i
].
isc⁄°
>>5)&1Ë
	`¥ötf
("r5=%x ",()
c⁄°m≠
[i][5]);

11208 if((
ªgs
[
i
].
isc⁄°
>>6)&1Ë
	`¥ötf
("r6=%x ",()
c⁄°m≠
[i][6]);

11209 if((
ªgs
[
i
].
isc⁄°
>>7)&1Ë
	`¥ötf
("r7=%x ",()
c⁄°m≠
[i][7]);

11210 if((
ªgs
[
i
].
isc⁄°
>>8)&1Ë
	`¥ötf
("r8=%x ",()
c⁄°m≠
[i][8]);

11211 if((
ªgs
[
i
].
isc⁄°
>>9)&1Ë
	`¥ötf
("r9=%x ",()
c⁄°m≠
[i][9]);

11212 if((
ªgs
[
i
].
isc⁄°
>>10)&1Ë
	`¥ötf
("r10=%x ",()
c⁄°m≠
[i][10]);

11213 if((
ªgs
[
i
].
isc⁄°
>>12)&1Ë
	`¥ötf
("r12=%x ",()
c⁄°m≠
[i][12]);

11215 
	`¥ötf
("\n");

11217 #i‚de‡
FORCE32


11218 
	`¥ötf
(" 32:");

11219 
r
=0;r<=
CCREG
;r++) {

11220 if((
ªgs
[
i
].
is32
>>
r
)&1) {

11221 if(
r
==
CCREG
Ë
	`¥ötf
(" CC");

11222 if(
r
==
HIREG
Ë
	`¥ötf
(" HI");

11223 if(
r
==
LOREG
Ë
	`¥ötf
(" LO");

11224 
	`¥ötf
("Ñ%d",
r
);

11227 
	`¥ötf
("\n");

11240 if(
ôy≥
[
i
]==
RJUMP
||ôy≥[i]==
UJUMP
||ôy≥[i]==
CJUMP
||ôy≥[i]==
SJUMP
||ôy≥[i]==
FJUMP
) {

11241 #i‡
	`deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

11242 
	`¥ötf
("bønch(%d):Éax=%dÉcx=%dÉdx=%dÉbx=%dÉbp=%dÉsi=%dÉdi=%d dúty: ",
i
,
bønch_ªgs
[i].
ªgm≠
[0],branch_regs[i].regmap[1],branch_regs[i].regmap[2],branch_regs[i].regmap[3],branch_regs[i].regmap[5],branch_regs[i].regmap[6],branch_regs[i].regmap[7]);

11243 if(
bønch_ªgs
[
i
].
dúty
&1Ë
	`¥ötf
("eax ");

11244 if((
bønch_ªgs
[
i
].
dúty
>>1)&1Ë
	`¥ötf
("ecx ");

11245 if((
bønch_ªgs
[
i
].
dúty
>>2)&1Ë
	`¥ötf
("edx ");

11246 if((
bønch_ªgs
[
i
].
dúty
>>3)&1Ë
	`¥ötf
("ebx ");

11247 if((
bønch_ªgs
[
i
].
dúty
>>5)&1Ë
	`¥ötf
("ebp ");

11248 if((
bønch_ªgs
[
i
].
dúty
>>6)&1Ë
	`¥ötf
("esi ");

11249 if((
bønch_ªgs
[
i
].
dúty
>>7)&1Ë
	`¥ötf
("edi ");

11251 #ifde‡
__¨m__


11252 
	`¥ötf
("bønch(%d):Ñ0=%dÑ1=%dÑ2=%dÑ3=%dÑ4=%dÑ5=%dÑ6=%dÑ7=%dÑ8=%dÑ9=%dÑ10=%dÑ12=%d dúty: ",
i
,
bønch_ªgs
[i].
ªgm≠
[0],branch_regs[i].regmap[1],branch_regs[i].regmap[2],branch_regs[i].regmap[3],branch_regs[i].regmap[4],branch_regs[i].regmap[5],branch_regs[i].regmap[6],branch_regs[i].regmap[7],branch_regs[i].regmap[8],branch_regs[i].regmap[9],branch_regs[i].regmap[10],branch_regs[i].regmap[12]);

11253 if(
bønch_ªgs
[
i
].
dúty
&1Ë
	`¥ötf
("r0 ");

11254 if((
bønch_ªgs
[
i
].
dúty
>>1)&1Ë
	`¥ötf
("r1 ");

11255 if((
bønch_ªgs
[
i
].
dúty
>>2)&1Ë
	`¥ötf
("r2 ");

11256 if((
bønch_ªgs
[
i
].
dúty
>>3)&1Ë
	`¥ötf
("r3 ");

11257 if((
bønch_ªgs
[
i
].
dúty
>>4)&1Ë
	`¥ötf
("r4 ");

11258 if((
bønch_ªgs
[
i
].
dúty
>>5)&1Ë
	`¥ötf
("r5 ");

11259 if((
bønch_ªgs
[
i
].
dúty
>>6)&1Ë
	`¥ötf
("r6 ");

11260 if((
bønch_ªgs
[
i
].
dúty
>>7)&1Ë
	`¥ötf
("r7 ");

11261 if((
bønch_ªgs
[
i
].
dúty
>>8)&1Ë
	`¥ötf
("r8 ");

11262 if((
bønch_ªgs
[
i
].
dúty
>>9)&1Ë
	`¥ötf
("r9 ");

11263 if((
bønch_ªgs
[
i
].
dúty
>>10)&1Ë
	`¥ötf
("r10 ");

11264 if((
bønch_ªgs
[
i
].
dúty
>>12)&1Ë
	`¥ötf
("r12 ");

11266 #i‚de‡
FORCE32


11267 
	`¥ötf
(" 32:");

11268 
r
=0;r<=
CCREG
;r++) {

11269 if((
bønch_ªgs
[
i
].
is32
>>
r
)&1) {

11270 if(
r
==
CCREG
Ë
	`¥ötf
(" CC");

11271 if(
r
==
HIREG
Ë
	`¥ötf
(" HI");

11272 if(
r
==
LOREG
Ë
	`¥ötf
(" LO");

11273 
	`¥ötf
("Ñ%d",
r
);

11276 
	`¥ötf
("\n");

11283 
lökcou¡
=0;
°ubcou¡
=0;

11284 
ds
=0;
is_dñay¶Ÿ
=0;

11285 
c›1_ußbÀ
=0;

11286 
uöt64_t
 
is32_¥e
=0;

11287 
u_öt
 
dúty_¥e
=0;

11288 
u_öt
 
begönög
=(u_öt)
out
;

11289 if((
u_öt
)
addr
&1) {

11290 
ds
=1;

11291 
	`∑ge•™_ds
();

11293 
u_öt
 
ö°r_addr0_ovîride
=0;

11295 #ifde‡
PCSX


11296 i‡(
°¨t
 == 0x80030000) {

11299 
ö°r_addr0_ovîride
=(
u_öt
)
out
;

11300 
	`emô_movimm
(
°¨t
,0);

11303 
	`emô_ªadw‹d
(()&
addªss
,1);

11304 
	`emô_wrôew‹d
(0,()&
pˇddr
);

11305 
	`emô_wrôew‹d
(0,()&
addªss
);

11306 
	`emô_cmp
(0,1);

11307 
	`emô_j√
(()
√w_dy«_Àave
);

11310 
i
=0;i<
¶í
;i++)

11313 
	`dißs£mbÀ_ö°
(
i
);

11314 if(
ds
) {

11315 
ds
=0;

11316 if(
bt
[
i
]Ë
	`as£m_debug
("OOPS - branch into delay slot\n");

11317 
ö°r_addr
[
i
]=0;

11319 
	`•ecuœã_ªgi°î_vÆues
(
i
);

11320 #i‚de‡
DESTRUCTIVE_WRITEBACK


11321 if(
i
<2||(
ôy≥
[i-2]!=
UJUMP
&&ôy≥[i-2]!=
RJUMP
&&(
sour˚
[i-2]>>16)!=0x1000))

11323 
	`wb_sx
(
ªgm≠_¥e
[
i
],
ªgs
[i].
ªgm≠_íåy
,ªgs[i].
wasdúty
,
is32_¥e
,ªgs[i].
was32
,

11324 
u¬ìded_ªg
[
i
],
u¬ìded_ªg_uµî
[i]);

11325 
	`wb_vÆid
(
ªgm≠_¥e
[
i
],
ªgs
[i].
ªgm≠_íåy
,
dúty_¥e
,ªgs[i].
wasdúty
,
is32_¥e
,

11326 
u¬ìded_ªg
[
i
],
u¬ìded_ªg_uµî
[i]);

11328 if((
ôy≥
[
i
]==
CJUMP
||ôy≥[i]==
SJUMP
||ôy≥[i]==
FJUMP
)&&!
likñy
[i]) {

11329 
is32_¥e
=
bønch_ªgs
[
i
].
is32
;

11330 
dúty_¥e
=
bønch_ªgs
[
i
].
dúty
;

11332 
is32_¥e
=
ªgs
[
i
].
is32
;

11333 
dúty_¥e
=
ªgs
[
i
].
dúty
;

11337 if(
i
<2||(
ôy≥
[i-2]!=
UJUMP
&&ôy≥[i-2]!=
RJUMP
&&(
sour˚
[i-2]>>16)!=0x1000))

11339 
	`wb_övÆid©e
(
ªgm≠_¥e
[
i
],
ªgs
[i].
ªgm≠_íåy
,ªgs[i].
wasdúty
,ªgs[i].
was32
,

11340 
u¬ìded_ªg
[
i
],
u¬ìded_ªg_uµî
[i]);

11341 
	`lo›_¥ñﬂd
(
ªgm≠_¥e
[
i
],
ªgs
[i].
ªgm≠_íåy
);

11344 
ö°r_addr
[
i
]=(
u_öt
)
out
;

11345 
	`as£m_debug
("<->\n");

11347 if(
ªgs
[
i
].
ªgm≠_íåy
[
HOST_CCREG
]==
CCREG
&&ªgs[i].
ªgm≠
[HOST_CCREG]!=CCREG)

11348 
	`wb_ªgi°î
(
CCREG
,
ªgs
[
i
].
ªgm≠_íåy
,ªgs[i].
wasdúty
,ªgs[i].
was32
);

11349 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠_íåy
,ªgs[i].
ªgm≠
,ªgs[i].
was32
,
rs1
[i],
rs2
[i]);

11350 
	`addªss_gíî©i⁄
(
i
,&
ªgs
[i],ªgs[i].
ªgm≠_íåy
);

11351 
	`lﬂd_c⁄°s
(
ªgm≠_¥e
[
i
],
ªgs
[i].
ªgm≠
,ªgs[i].
was32
,i);

11352 if(
ôy≥
[
i
]==
RJUMP
||ôy≥[i]==
UJUMP
||ôy≥[i]==
CJUMP
||ôy≥[i]==
SJUMP
||ôy≥[i]==
FJUMP
)

11355 if(
rs1
[
i
+1]!Ùs1[i]&&rs1[i+1]!=
rs2
[i]&&‘s1[i+1]!=
π1
[i]||rt1[i]==0))

11356 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠_íåy
,ªgs[i].
ªgm≠
,ªgs[i].
was32
,
rs1
[i+1],rs1[i+1]);

11357 if(
rs2
[
i
+1]!=
rs1
[i+1]&&rs2[i+1]!Ùs1[i]&&rs2[i+1]!Ùs2[i]&&‘s2[i+1]!=
π1
[i]||rt1[i]==0))

11358 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠_íåy
,ªgs[i].
ªgm≠
,ªgs[i].
was32
,
rs2
[i+1],rs2[i+1]);

11359 if(
ôy≥
[
i
+1]==
STORE
||ôy≥[i+1]==
STORELR
||(
›code
[i+1]&0x3b)==0x39||(opcode[i+1]&0x3b)==0x3a)

11360 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠_íåy
,ªgs[i].
ªgm≠
,ªgs[i].
was32
,
INVCP
,INVCP);

11362 if(
i
+1<
¶í
)

11365 if(
rs1
[
i
+1]!Ùs1[i]&&rs1[i+1]!=
rs2
[i])

11366 if(
rs1
[
i
+1]!=
π1
[i]&&rs1[i+1]!=
π2
[i])

11367 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠_íåy
,ªgs[i].
ªgm≠
,ªgs[i].
was32
,
rs1
[i+1],rs1[i+1]);

11368 if(
rs2
[
i
+1]!=
rs1
[i+1]&&rs2[i+1]!=rs1[i]&&rs2[i+1]!=rs2[i])

11369 if(
rs2
[
i
+1]!=
π1
[i]&&rs2[i+1]!=
π2
[i])

11370 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠_íåy
,ªgs[i].
ªgm≠
,ªgs[i].
was32
,
rs2
[i+1],rs2[i+1]);

11373 if(
ôy≥
[
i
]==
CJUMP
||ôy≥[i]==
FJUMP
)

11374 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠_íåy
,ªgs[i].
ªgm≠
,ªgs[i].
was32
,
CCREG
,CCREG);

11375 if(
ôy≥
[
i
]==
STORE
||ôy≥[i]==
STORELR
||(
›code
[i]&0x3b)==0x39||(opcode[i]&0x3b)==0x3a)

11376 
	`lﬂd_ªgs
(
ªgs
[
i
].
ªgm≠_íåy
,ªgs[i].
ªgm≠
,ªgs[i].
was32
,
INVCP
,INVCP);

11377 if(
bt
[
i
]Ë
c›1_ußbÀ
=0;

11379 
ôy≥
[
i
]) {

11380 
ALU
:

11381 
	`Æu_as£mbÀ
(
i
,&
ªgs
[i]);;

11382 
IMM16
:

11383 
	`imm16_as£mbÀ
(
i
,&
ªgs
[i]);;

11384 
SHIFT
:

11385 
	`shi·_as£mbÀ
(
i
,&
ªgs
[i]);;

11386 
SHIFTIMM
:

11387 
	`shi·imm_as£mbÀ
(
i
,&
ªgs
[i]);;

11388 
LOAD
:

11389 
	`lﬂd_as£mbÀ
(
i
,&
ªgs
[i]);;

11390 
LOADLR
:

11391 
	`lﬂdÃ_as£mbÀ
(
i
,&
ªgs
[i]);;

11392 
STORE
:

11393 
	`°‹e_as£mbÀ
(
i
,&
ªgs
[i]);;

11394 
STORELR
:

11395 
	`°‹ñr_as£mbÀ
(
i
,&
ªgs
[i]);;

11396 
COP0
:

11397 
	`c›0_as£mbÀ
(
i
,&
ªgs
[i]);;

11398 
COP1
:

11399 
	`c›1_as£mbÀ
(
i
,&
ªgs
[i]);;

11400 
C1LS
:

11401 
	`c1ls_as£mbÀ
(
i
,&
ªgs
[i]);;

11402 
COP2
:

11403 
	`c›2_as£mbÀ
(
i
,&
ªgs
[i]);;

11404 
C2LS
:

11405 
	`c2ls_as£mbÀ
(
i
,&
ªgs
[i]);;

11406 
C2OP
:

11407 
	`c2›_as£mbÀ
(
i
,&
ªgs
[i]);;

11408 
FCONV
:

11409 
	`fc⁄v_as£mbÀ
(
i
,&
ªgs
[i]);;

11410 
FLOAT
:

11411 
	`Êﬂt_as£mbÀ
(
i
,&
ªgs
[i]);;

11412 
FCOMP
:

11413 
	`fcomp_as£mbÀ
(
i
,&
ªgs
[i]);;

11414 
MULTDIV
:

11415 
	`mu…div_as£mbÀ
(
i
,&
ªgs
[i]);;

11416 
MOV
:

11417 
	`mov_as£mbÀ
(
i
,&
ªgs
[i]);;

11418 
SYSCALL
:

11419 
	`sysˇŒ_as£mbÀ
(
i
,&
ªgs
[i]);;

11420 
HLECALL
:

11421 
	`hÀˇŒ_as£mbÀ
(
i
,&
ªgs
[i]);;

11422 
INTCALL
:

11423 
	`ötˇŒ_as£mbÀ
(
i
,&
ªgs
[i]);;

11424 
UJUMP
:

11425 
	`ujump_as£mbÀ
(
i
,&
ªgs
[i]);
ds
=1;;

11426 
RJUMP
:

11427 
	`rjump_as£mbÀ
(
i
,&
ªgs
[i]);
ds
=1;;

11428 
CJUMP
:

11429 
	`cjump_as£mbÀ
(
i
,&
ªgs
[i]);
ds
=1;;

11430 
SJUMP
:

11431 
	`sjump_as£mbÀ
(
i
,&
ªgs
[i]);
ds
=1;;

11432 
FJUMP
:

11433 
	`fjump_as£mbÀ
(
i
,&
ªgs
[i]);
ds
=1;;

11434 
SPAN
:

11435 
	`∑ge•™_as£mbÀ
(
i
,&
ªgs
[i]);;

11437 if(
ôy≥
[
i
]==
UJUMP
||ôy≥[i]==
RJUMP
||(
sour˚
[i]>>16)==0x1000)

11438 
	`lôîÆ_poﬁ
(1024);

11440 
	`lôîÆ_poﬁ_jumpovî
(256);

11446 if(
i
>1) {

11447 if(
ôy≥
[
i
-2]!=
UJUMP
&&ôy≥[i-2]!=
RJUMP
&&(
sour˚
[i-2]>>16)!=0x1000&&ôy≥[i-1]!=
SPAN
) {

11448 
	`as£π
(
ôy≥
[
i
-1]!=
UJUMP
&&ôy≥[i-1]!=
CJUMP
&&ôy≥[i-1]!=
SJUMP
&&ôy≥[i-1]!=
RJUMP
&&ôy≥[i-1]!=
FJUMP
);

11449 
	`as£π
(
i
==
¶í
);

11450 if(
ôy≥
[
i
-2]!=
CJUMP
&&ôy≥[i-2]!=
SJUMP
&&ôy≥[i-2]!=
FJUMP
) {

11451 
	`°‹e_ªgs_bt
(
ªgs
[
i
-1].
ªgm≠
,ªgs[i-1].
is32
,ªgs[i-1].
dúty
,
°¨t
+i*4);

11452 if(
ªgs
[
i
-1].
ªgm≠
[
HOST_CCREG
]!=
CCREG
)

11453 
	`emô_lﬂdªg
(
CCREG
,
HOST_CCREG
);

11454 
	`emô_addimm
(
HOST_CCREG
,
	`CLOCK_ADJUST
(
cˇdj
[
i
-1]+1),HOST_CCREG);

11456 if(!
likñy
[
i
-2])

11458 
	`°‹e_ªgs_bt
(
bønch_ªgs
[
i
-2].
ªgm≠
,bønch_ªgs[i-2].
is32
,bønch_ªgs[i-2].
dúty
,
°¨t
+i*4);

11459 
	`as£π
(
bønch_ªgs
[
i
-2].
ªgm≠
[
HOST_CCREG
]==
CCREG
);

11463 
	`°‹e_ªgs_bt
(
ªgs
[
i
-2].
ªgm≠
,ªgs[i-2].
is32
,ªgs[i-2].
dúty
,
°¨t
+i*4);

11464 
	`as£π
(
ªgs
[
i
-2].
ªgm≠
[
HOST_CCREG
]==
CCREG
);

11466 
	`add_to_lökî
(()
out
,
°¨t
+
i
*4,0);

11467 
	`emô_jmp
(0);

11472 
	`as£π
(
i
>0);

11473 
	`as£π
(
ôy≥
[
i
-1]!=
UJUMP
&&ôy≥[i-1]!=
CJUMP
&&ôy≥[i-1]!=
SJUMP
&&ôy≥[i-1]!=
RJUMP
&&ôy≥[i-1]!=
FJUMP
);

11474 
	`°‹e_ªgs_bt
(
ªgs
[
i
-1].
ªgm≠
,ªgs[i-1].
is32
,ªgs[i-1].
dúty
,
°¨t
+i*4);

11475 if(
ªgs
[
i
-1].
ªgm≠
[
HOST_CCREG
]!=
CCREG
)

11476 
	`emô_lﬂdªg
(
CCREG
,
HOST_CCREG
);

11477 
	`emô_addimm
(
HOST_CCREG
,
	`CLOCK_ADJUST
(
cˇdj
[
i
-1]+1),HOST_CCREG);

11478 
	`add_to_lökî
(()
out
,
°¨t
+
i
*4,0);

11479 
	`emô_jmp
(0);

11484 
i
=0;i<
°ubcou¡
;i++)

11486 
°ubs
[
i
][0])

11488 
LOADB_STUB
:

11489 
LOADH_STUB
:

11490 
LOADW_STUB
:

11491 
LOADD_STUB
:

11492 
LOADBU_STUB
:

11493 
LOADHU_STUB
:

11494 
	`do_ªad°ub
(
i
);;

11495 
STOREB_STUB
:

11496 
STOREH_STUB
:

11497 
STOREW_STUB
:

11498 
STORED_STUB
:

11499 
	`do_wrôe°ub
(
i
);;

11500 
CC_STUB
:

11501 
	`do_cc°ub
(
i
);;

11502 
INVCODE_STUB
:

11503 
	`do_öv°ub
(
i
);;

11504 
FP_STUB
:

11505 
	`do_c›1°ub
(
i
);;

11506 
STORELR_STUB
:

11507 
	`do_u«lig√dwrôe°ub
(
i
);;

11511 i‡(
ö°r_addr0_ovîride
)

11512 
ö°r_addr
[0] = 
ö°r_addr0_ovîride
;

11515 
i
=0;i<
lökcou¡
;i++)

11517 
	`as£m_debug
("%8x -> %8x\n",
lök_addr
[
i
][0],link_addr[i][1]);

11518 
	`lôîÆ_poﬁ
(64);

11519 if(!
lök_addr
[
i
][2])

11521 *
°ub
=
out
;

11522 *
addr
=
	`check_addr
(
lök_addr
[
i
][1]);

11523 
	`emô_extjump
(
lök_addr
[
i
][0],link_addr[i][1]);

11524 if(
addr
) {

11525 
	`£t_jump_èrgë
(
lök_addr
[
i
][0],()
addr
);

11526 
	`add_lök
(
lök_addr
[
i
][1],
°ub
);

11528 
	`£t_jump_èrgë
(
lök_addr
[
i
][0],()
°ub
);

11533 
èrgë
=(
lök_addr
[
i
][1]-
°¨t
)>>2;

11534 
	`as£π
(
èrgë
>=0&&èrgë<
¶í
);

11535 
	`as£π
(
ö°r_addr
[
èrgë
]);

11539 
	`£t_jump_èrgë
(
lök_addr
[
i
][0],
ö°r_addr
[
èrgë
]);

11544 if(
c›y
+
¶í
*4>(*)
shadow
+(shadow)) copy=shadow;

11545 
i
=0;i<
¶í
;i++)

11547 if(
bt
[
i
]||i==0)

11549 if(
ö°r_addr
[
i
])

11551 
u_öt
 
vaddr
=
°¨t
+
i
*4;

11552 
u_öt
 
∑ge
=
	`gë_∑ge
(
vaddr
);

11553 
u_öt
 
v∑ge
=
	`gë_v∑ge
(
vaddr
);

11554 
	`lôîÆ_poﬁ
(256);

11556 
	`as£m_debug
("%8x (%dË<- %8x\n",
ö°r_addr
[
i
],i,
°¨t
+i*4);

11557 
	`as£m_debug
("jump_ö: %x\n",
°¨t
+
i
*4);

11558 
	`Œ_add
(
jump_dúty
+
v∑ge
,
vaddr
,(*)
out
);

11559 
íåy_poöt
=
	`do_dúty_°ub
(
i
);

11560 
	`Œ_add_Êags
(
jump_ö
+
∑ge
,
vaddr
,
°©e_rÊags
,(*)
íåy_poöt
);

11565 *
ht_bö
=
hash_èbÀ
[((
vaddr
>>16)^vaddr)&0xFFFF];

11566 if(
ht_bö
[0]==
vaddr
) {

11567 
ht_bö
[1]=
íåy_poöt
;

11569 if(
ht_bö
[2]==
vaddr
) {

11570 
ht_bö
[3]=
íåy_poöt
;

11577 
	`lôîÆ_poﬁ
(0);

11578 #ifde‡
CORTEX_A8_BRANCH_PREDICTION_HACK


11580 if(((
u_öt
)
out
)&7Ë
	`emô_addn›
(13);

11582 
	`as£π
((
u_öt
)
out
-
begönög
<
MAX_OUTPUT_BLOCK_SIZE
);

11584 
	`mem˝y
(
c›y
,
sour˚
,
¶í
*4);

11585 
c›y
+=
¶í
*4;

11587 #ifde‡
__¨m__


11588 
	`__˛ór_ˇche
((*)
begönög
,
out
);

11593 if((
u_öt
)
out
>(u_öt)
BASE_ADDR
+(1<<
TARGET_SIZE_2
)-
MAX_OUTPUT_BLOCK_SIZE
Ëout=(
u_ch¨
 *)BASE_ADDR;

11596 
i
=
°¨t
>>12;i<=(°¨t+
¶í
*4)>>12;i++) {

11597 
övÆid_code
[
i
]=0;

11598 #i‚de‡
DISABLE_TLB


11599 
mem‹y_m≠
[
i
]|=0x40000000;

11600 if((sig√d )
°¨t
>=(signed )0xC0000000) {

11601 
	`as£π
(
usög_éb
);

11602 
j
=(((
u_öt
)
i
<<12)+(
mem‹y_m≠
[i]<<2)-(u_öt)
rdøm
+(u_int)0x80000000)>>12;

11603 
övÆid_code
[
j
]=0;

11604 
mem‹y_m≠
[
j
]|=0x40000000;

11609 
öv_code_°¨t
=
öv_code_íd
=~0;

11610 #ifde‡
PCSX


11612 if(
	`gë_∑ge
(
°¨t
)<(
RAM_SIZE
>>12))

11613 
i
=
°¨t
>>12;i<=(°¨t+
¶í
*4)>>12;i++)

11614 
övÆid_code
[((
u_öt
)0x00000000>>12)|(
i
&0x1ff)]=

11615 
övÆid_code
[((
u_öt
)0x80000000>>12)|(
i
&0x1ff)]=

11616 
övÆid_code
[((
u_öt
)0xa0000000>>12)|(
i
&0x1ff)]=0;

11621 
íd
=(((()
out
-()
BASE_ADDR
)>>(
TARGET_SIZE_2
-16))+16384)&65535;

11622 
expúï
!=
íd
)

11624 
shi·
=
TARGET_SIZE_2
-3;

11625 
ba£
=()
BASE_ADDR
+((
expúï
>>13)<<
shi·
);

11626 
	`öv_debug
("EXP: Pha£ %d\n",
expúï
);

11627 (
expúï
>>11)&3)

11631 
	`Œ_ªmove_m©chög_addrs
(
jump_ö
+(
expúï
&2047),
ba£
,
shi·
);

11632 
	`Œ_ªmove_m©chög_addrs
(
jump_dúty
+(
expúï
&2047),
ba£
,
shi·
);

11633 
	`Œ_ªmove_m©chög_addrs
(
jump_ö
+2048+(
expúï
&2047),
ba£
,
shi·
);

11634 
	`Œ_ªmove_m©chög_addrs
(
jump_dúty
+2048+(
expúï
&2047),
ba£
,
shi·
);

11638 
	`Œ_kûl_poöãrs
(
jump_out
[
expúï
&2047],
ba£
,
shi·
);

11639 
	`Œ_kûl_poöãrs
(
jump_out
[(
expúï
&2047)+2048],
ba£
,
shi·
);

11643 
i
=0;i<32;i++) {

11644 *
ht_bö
=
hash_èbÀ
[((
expúï
&2047)<<5)+
i
];

11645 if((
ht_bö
[3]>>
shi·
)==(
ba£
>>shift) ||

11646 ((
ht_bö
[3]-
MAX_OUTPUT_BLOCK_SIZE
)>>
shi·
)==(
ba£
>>shift)) {

11647 
	`öv_debug
("EXP: Removêhash %x -> %x\n",
ht_bö
[2],ht_bin[3]);

11648 
ht_bö
[2]=ht_bin[3]=-1;

11650 if((
ht_bö
[1]>>
shi·
)==(
ba£
>>shift) ||

11651 ((
ht_bö
[1]-
MAX_OUTPUT_BLOCK_SIZE
)>>
shi·
)==(
ba£
>>shift)) {

11652 
	`öv_debug
("EXP: Removêhash %x -> %x\n",
ht_bö
[0],ht_bin[1]);

11653 
ht_bö
[0]=ht_bin[2];

11654 
ht_bö
[1]=ht_bin[3];

11655 
ht_bö
[2]=ht_bin[3]=-1;

11661 #ifde‡
__¨m__


11662 if((
expúï
&2047)==0)

11663 
	`do_˛ór_ˇche
();

11665 
	`Œ_ªmove_m©chög_addrs
(
jump_out
+(
expúï
&2047),
ba£
,
shi·
);

11666 
	`Œ_ªmove_m©chög_addrs
(
jump_out
+2048+(
expúï
&2047),
ba£
,
shi·
);

11669 
expúï
=(expirep+1)&65535;

11672 
	}
}

	@libpcsxcore/new_dynarec/new_dynarec.h

1 
	#NEW_DYNAREC
 1

	)

3 
pˇddr
;

4 
≥ndög_ex˚±i⁄
;

5 
°›
;

6 
√w_dy«ªc_did_compûe
;

7 
cy˛e_mu…ùlõr
;

9 
	#NDHACK_NO_SMC_CHECK
 (1<<0)

	)

10 
	#NDHACK_GTE_UNNEEDED
 (1<<1)

	)

11 
	#NDHACK_GTE_NO_FLAGS
 (1<<2)

	)

12 
√w_dy«ªc_hacks
;

14 
√w_dy«ªc_öô
();

15 
√w_dy«ªc_˛ónup
();

16 
√w_dy«ªc_˛ór_fuŒ
();

17 
√w_dy«_°¨t
();

18 
√w_dy«ªc_ßve_blocks
(*
ßve
, 
size
);

19 
√w_dy«ªc_lﬂd_blocks
(c⁄° *
ßve
, 
size
);

21 
övÆid©e_Æl_∑ges
();

22 
övÆid©e_block
(
block
);

	@libpcsxcore/new_dynarec/pcsxmem.c

8 
	~<°dio.h
>

9 
	~"../psxhw.h
"

10 
	~"../cdrom.h
"

11 
	~"../mdec.h
"

12 
	~"../gpu.h
"

13 
	~"../psxmem_m≠.h
"

14 
	~"emu_if.h
"

15 
	~"pcsxmem.h
"

17 #ifde‡
__thumb__


18 #îr‹ 
the
 
dy«ªc
 
is
 
öcom∑tibÀ
 
wôh
 
Thumb
 
fun˘i⁄s
,

19 #îr‹ 
∂ó£
 
add
 -
m¨m
 
to
 
compûe
 
Êags


23 
	#mem¥ötf
(...)

	)

25 
u32
 *
	gmem_ªadèb
;

26 
u32
 *
	gmem_wrôëab
;

27 
u32
 
	gmem_i‹èb
[(1+2+4) * 0x1000 / 4];

28 
u32
 
	gmem_iowèb
[(1+2+4) * 0x1000 / 4];

29 
u32
 
	gmem_ffwèb
[(1+2+4) * 0x1000 / 4];

31 
u32
 
	gmem_unmwèb
[(1+2+4) * 0x1000 / 4];

34 #ifde‡
__˛™g__


35 
__©åibuã__
 ((
noölöe
)Ë
	$m≠_ôem
(
u32
 *
out
, c⁄° *
h
, u32 
Êag
)

37 
	$m≠_ôem
(
u32
 *
out
, c⁄° *
h
, u32 
Êag
)

40 
u32
 
hv
 = (u32)
h
;

41 i‡(
hv
 & 1) {

42 
	`SysPrötf
("FATAL: %∞ha†LSB së\n", 
h
);

43 
	`ab‹t
();

45 *
out
 = (
hv
 >> 1Ë| (
Êag
 << 31);

46 
	}
}

49 
	#m≠_l1_mem
(
èb
, 
i
, 
addr
, 
size
, 
ba£
) \

50 
	`m≠_ôem
(&
èb
[((
addr
)>>12Ë+ 
i
], (
u8
 *)(
ba£
Ë- (
u32
)◊ddrË- ((ò<< 12Ë& ~(
size
 - 1)), 0)

	)

52 
	#IOMEM32
(
a
Ë((◊Ë& 0xfffË/ 4)

	)

53 
	#IOMEM16
(
a
Ë(0x1000/4 + ((◊Ë& 0xfffË/ 2))

	)

54 
	#IOMEM8
(
a
Ë(0x1000/4 + 0x1000/2 + (◊Ë& 0xfff))

	)

56 
u8
 
	gzîo_mem
[0x1000];

58 
u32
 
	$ªad_mem_dummy
()

61 
	}
}

63 
	$wrôe_mem_dummy
(
u32
 
d©a
)

65 
	`mem¥ötf
("unm≠≥d w %08x, %08x @%08x %u\n", 
addªss
, 
d©a
, 
psxRegs
.
pc
,ÖsxRegs.
cy˛e
);

66 
	}
}

69 
u32
 
	$io_ªad_sio16
()

71  
	`sioRód8
() | (sioRead8() << 8);

72 
	}
}

74 
u32
 
	$io_ªad_sio32
()

76  
	`sioRód8
() | (sioRead8() << 8) | (sioRead8() << 16) | (sioRead8() << 24);

77 
	}
}

79 
	$io_wrôe_sio16
(
u32
 
vÆue
)

81 
	`sioWrôe8
(()
vÆue
);

82 
	`sioWrôe8
(()(
vÆue
>>8));

83 
	}
}

85 
	$io_wrôe_sio32
(
u32
 
vÆue
)

87 
	`sioWrôe8
(()
vÆue
);

88 
	`sioWrôe8
(()(
vÆue
 >> 8));

89 
	`sioWrôe8
(()(
vÆue
 >> 16));

90 
	`sioWrôe8
(()(
vÆue
 >> 24));

91 
	}
}

93 #i‚de‡
DRC_DBG


95 
	$m≠_r˙t_rcou¡0
(
u32
 
mode
)

97 i‡(
mode
 & 0x100) {

98 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM32
(0x1100)], 
r˙t0_ªad_cou¡_m1
, 1);

99 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM16
(0x1100)], 
r˙t0_ªad_cou¡_m1
, 1);

102 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM32
(0x1100)], 
r˙t0_ªad_cou¡_m0
, 1);

103 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM16
(0x1100)], 
r˙t0_ªad_cou¡_m0
, 1);

105 
	}
}

107 
	$m≠_r˙t_rcou¡1
(
u32
 
mode
)

109 i‡(
mode
 & 0x100) {

110 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM32
(0x1110)], 
r˙t1_ªad_cou¡_m1
, 1);

111 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM16
(0x1110)], 
r˙t1_ªad_cou¡_m1
, 1);

114 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM32
(0x1110)], 
r˙t1_ªad_cou¡_m0
, 1);

115 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM16
(0x1110)], 
r˙t1_ªad_cou¡_m0
, 1);

117 
	}
}

119 
	$m≠_r˙t_rcou¡2
(
u32
 
mode
)

121 i‡(
mode
 & 0x01) {

122 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM32
(0x1120)], &
psxH
[0x1000], 0);

123 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM16
(0x1120)], &
psxH
[0x1000], 0);

125 i‡(
mode
 & 0x200) {

126 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM32
(0x1120)], 
r˙t2_ªad_cou¡_m1
, 1);

127 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM16
(0x1120)], 
r˙t2_ªad_cou¡_m1
, 1);

130 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM32
(0x1120)], 
r˙t2_ªad_cou¡_m0
, 1);

131 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM16
(0x1120)], 
r˙t2_ªad_cou¡_m0
, 1);

133 
	}
}

136 
	#m≠_r˙t_rcou¡0
(
mode
)

	)

137 
	#m≠_r˙t_rcou¡1
(
mode
)

	)

138 
	#m≠_r˙t_rcou¡2
(
mode
)

	)

141 
	#make_r˙t_funcs
(
i
) \

142 
u32
 
io_r˙t_ªad_cou¡
##
	`i
(Ë{  
	`psxR˙tRcou¡
(
i
); } \

143 
u32
 
io_r˙t_ªad_mode
##
	`i
(Ë{  
	`psxR˙tRmode
(
i
); } \

144 
u32
 
io_r˙t_ªad_èrgë
##
	`i
(Ë{  
	`psxR˙tRèrgë
(
i
); } \

145 
io_r˙t_wrôe_cou¡
##
	`i
(
u32
 
vÆ
Ë{ 
	`psxR˙tWcou¡
(
i
, val & 0xffff); } \

146 
io_r˙t_wrôe_mode
##
	`i
(
u32
 
vÆ
Ë{ 
	`psxR˙tWmode
(
i
, vÆ); 
m≠_r˙t_rcou¡
##i(val); } \

147 
io_r˙t_wrôe_èrgë
##
	`i
(
u32
 
vÆ
Ë{ 
	`psxR˙tWèrgë
(
i
, vÆ & 0xffff); }

	)

149 
	$make_r˙t_funcs
(0)

150 
	$make_r˙t_funcs
(1)

151 
	$make_r˙t_funcs
(2)

153 
	$io_wrôe_úeg16
(
u32
 
vÆue
)

156 i‡(
C⁄fig
.
SpuIrq
Ë
	`psxHu16ªf
(0x1070) |= 0x200;

157 
	`psxHu16ªf
(0x1070Ë&
vÆue
;

158 
	}
}

160 
	$io_wrôe_imask16
(
u32
 
vÆue
)

162 
	`psxHu16ªf
(0x1074Ë
vÆue
;

163 i‡(
	`psxHu16ªf
(0x1070Ë& 
vÆue
)

164 
	`√w_dy«_£t_evít
(
PSXINT_NEWDRC_CHECK
, 1);

165 
	}
}

167 
	$io_wrôe_úeg32
(
u32
 
vÆue
)

170 i‡(
C⁄fig
.
SpuIrq
Ë
	`psxHu32ªf
(0x1070) |= 0x200;

171 
	`psxHu32ªf
(0x1070Ë&
vÆue
;

172 
	}
}

174 
	$io_wrôe_imask32
(
u32
 
vÆue
)

176 
	`psxHu32ªf
(0x1074Ë
vÆue
;

177 i‡(
	`psxHu32ªf
(0x1070Ë& 
vÆue
)

178 
	`√w_dy«_£t_evít
(
PSXINT_NEWDRC_CHECK
, 1);

179 
	}
}

181 
	$io_wrôe_dma_i¸32
(
u32
 
vÆue
)

183 
u32
 
tmp
 = 
vÆue
 & 0x00ff803f;

184 
tmp
 |(
	`SWAPu32
(
HW_DMA_ICR
Ë& ~
vÆue
) & 0x7f000000;

185 i‡((
tmp
 & 
HW_DMA_ICR_GLOBAL_ENABLE
 &&Åmp & 0x7f000000)

186 || 
tmp
 & 
HW_DMA_ICR_BUS_ERROR
) {

187 i‡(!(
	`SWAPu32
(
HW_DMA_ICR
Ë& 
HW_DMA_ICR_IRQ_SENT
))

188 
	`psxHu32ªf
(0x1070Ë|
	`SWAP32
(8);

189 
tmp
 |
HW_DMA_ICR_IRQ_SENT
;

191 
HW_DMA_ICR
 = 
	`SWAPu32
(
tmp
);

192 
	}
}

194 
	#make_dma_func
(
n
) \

195 
io_wrôe_ch¸
##
	`n
(
u32
 
vÆue
) \

197 
HW_DMA
##
n
##
_CHCR
 = 
vÆue
; \

198 i‡(
vÆue
 & 0x01000000 && 
HW_DMA_PCR
 & (8 << (
n
 * 4))) { \

199 
psxDma
##
	`n
(
HW_DMA
##
n
##
_MADR
, HW_DMA##n##
_BCR
, 
vÆue
); \

201 }

	)

203 
	$make_dma_func
(0)

204 
	$make_dma_func
(1)

205 
	$make_dma_func
(2)

206 
	$make_dma_func
(3)

207 
	$make_dma_func
(4)

208 
	$make_dma_func
(6)

210 
	$io_•u_wrôe16
(
u32
 
vÆue
)

213 
	`SPU_wrôeRegi°î
(
addªss
, 
vÆue
, 
psxRegs
.
cy˛e
);

214 
	}
}

216 
	$io_•u_wrôe32
(
u32
 
vÆue
)

218 
SPUwrôeRegi°î
 
wfunc
 = 
SPU_wrôeRegi°î
;

219 
u32
 
a
 = 
addªss
;

221 
	`wfunc
(
a
, 
vÆue
 & 0xffff, 
psxRegs
.
cy˛e
);

222 
	`wfunc
(
a
 + 2, 
vÆue
 >> 16, 
psxRegs
.
cy˛e
);

223 
	}
}

225 
u32
 
	$io_gpu_ªad_°©us
()

227 
u32
 
v
;

230 
	`gpuSyncPlugöSR
();

231 
v
 = 
HW_GPU_STATUS
;

235 i‡(
hSyncCou¡
 < 240 && (
HW_GPU_STATUS
 & 
PSXGPU_ILACE_BITS
) != PSXGPU_ILACE_BITS)

236 
v
 |
PSXGPU_LCF
 & (
psxRegs
.
cy˛e
 << 20);

237  
v
;

238 
	}
}

240 
	$io_gpu_wrôe_°©us
(
u32
 
vÆue
)

242 
	`GPU_wrôeSètus
(
vÆue
);

243 
	`gpuSyncPlugöSR
();

244 
	}
}

246 
	$m≠_øm_wrôe
()

248 
i
;

250 
i
 = 0; i < (0x800000 >> 12); i++) {

251 
	`m≠_l1_mem
(
mem_wrôëab
, 
i
, 0x80000000, 0x200000, 
psxM
);

252 
	`m≠_l1_mem
(
mem_wrôëab
, 
i
, 0x00000000, 0x200000, 
psxM
);

253 
	`m≠_l1_mem
(
mem_wrôëab
, 
i
, 0xa0000000, 0x200000, 
psxM
);

255 
	}
}

257 
	$unm≠_øm_wrôe
()

259 
i
;

261 
i
 = 0; i < (0x800000 >> 12); i++) {

262 
	`m≠_ôem
(&
mem_wrôëab
[0x80000|
i
], 
mem_unmwèb
, 1);

263 
	`m≠_ôem
(&
mem_wrôëab
[0x00000|
i
], 
mem_unmwèb
, 1);

264 
	`m≠_ôem
(&
mem_wrôëab
[0xa0000|
i
], 
mem_unmwèb
, 1);

266 
	}
}

268 
	$wrôe_biu
(
u32
 
vÆue
)

270 
	`mem¥ötf
("wrôe_biu %08x, %08x @%08x %u\n", 
addªss
, 
vÆue
, 
psxRegs
.
pc
,ÖsxRegs.
cy˛e
);

272 i‡(
addªss
 != 0xfffe0130)

275 
vÆue
) {

277 
	`unm≠_øm_wrôe
();

280 
	`m≠_øm_wrôe
();

283 
	`¥ötf
("wrôe_biu: u√x≥˘ed vÆ: %08x\n", 
vÆue
);

286 
	}
}

288 
	$√w_dy«_pcsx_mem_lﬂd_°©e
()

290 
	`m≠_r˙t_rcou¡0
(
r˙ts
[0].
mode
);

291 
	`m≠_r˙t_rcou¡1
(
r˙ts
[1].
mode
);

292 
	`m≠_r˙t_rcou¡2
(
r˙ts
[2].
mode
);

293 
	}
}

295 
	$pcsxmem_is_h™dÀr_dy«mic
(
addr
)

297 i‡((
addr
 & 0xfffff000) != 0x1f801000)

300 
addr
 &= 0xffff;

301  
addr
 == 0x1100 ||áddr == 0x1110 ||áddr == 0x1120;

302 
	}
}

304 
	$√w_dy«_pcsx_mem_öô
()

306 
i
;

309 
mem_ªadèb
 = 
	`psxM≠
(0x08000000, 0x200000 * 4, 0, 
MAP_TAG_LUTS
);

310 i‡(
mem_ªadèb
 =
NULL
) {

311 
	`SysPrötf
("failedÅo map memÅables\n");

312 
	`exô
(1);

314 
mem_wrôëab
 = 
mem_ªadèb
 + 0x100000;

324 
i
 = 0; i < 0x100000; i++) {

326 
	`m≠_l1_mem
(
mem_ªadèb
, 
i
, 0, 0x1000, 
zîo_mem
);

327 
	`m≠_ôem
(&
mem_wrôëab
[
i
], 
mem_unmwèb
, 1);

331 
i
 = 0; i < (0x800000 >> 12); i++) {

332 
	`m≠_l1_mem
(
mem_ªadèb
, 
i
, 0x80000000, 0x200000, 
psxM
);

333 
	`m≠_l1_mem
(
mem_ªadèb
, 
i
, 0x00000000, 0x200000, 
psxM
);

334 
	`m≠_l1_mem
(
mem_ªadèb
, 
i
, 0xa0000000, 0x200000, 
psxM
);

336 
	`m≠_øm_wrôe
();

339 
i
 = 0; i < (0x80000 >> 12); i++) {

340 
	`m≠_l1_mem
(
mem_ªadèb
, 
i
, 0x1fc00000, 0x80000, 
psxR
);

341 
	`m≠_l1_mem
(
mem_ªadèb
, 
i
, 0xbfc00000, 0x80000, 
psxR
);

345 
	`m≠_l1_mem
(
mem_ªadèb
, 0, 0x1f800000, 0x1000, 
psxH
);

346 
	`m≠_l1_mem
(
mem_ªadèb
, 0, 0x9f800000, 0x1000, 
psxH
);

347 
	`m≠_l1_mem
(
mem_wrôëab
, 0, 0x1f800000, 0x1000, 
psxH
);

348 
	`m≠_l1_mem
(
mem_wrôëab
, 0, 0x9f800000, 0x1000, 
psxH
);

351 
	`m≠_ôem
(&
mem_ªadèb
[0x1f801000 >> 12], 
mem_i‹èb
, 1);

352 
	`m≠_ôem
(&
mem_ªadèb
[0x9f801000 >> 12], 
mem_i‹èb
, 1);

353 
	`m≠_ôem
(&
mem_ªadèb
[0xbf801000 >> 12], 
mem_i‹èb
, 1);

354 
	`m≠_ôem
(&
mem_wrôëab
[0x1f801000 >> 12], 
mem_iowèb
, 1);

355 
	`m≠_ôem
(&
mem_wrôëab
[0x9f801000 >> 12], 
mem_iowèb
, 1);

356 
	`m≠_ôem
(&
mem_wrôëab
[0xbf801000 >> 12], 
mem_iowèb
, 1);

360 
i
 = 0; i < (1+2+4) * 0x1000 / 4; i++)

361 
	`m≠_ôem
(&
mem_unmwèb
[
i
], 
wrôe_mem_dummy
, 1);

364 
i
 = 0; i < 0x1000/4; i++) {

365 
	`m≠_ôem
(&
mem_i‹èb
[
i
], &
psxH
[0x1000], 0);

366 
	`m≠_ôem
(&
mem_iowèb
[
i
], &
psxH
[0x1000], 0);

368 ; 
i
 < 0x1000/4 + 0x1000/2; i++) {

369 
	`m≠_ôem
(&
mem_i‹èb
[
i
], &
psxH
[0x1000], 0);

370 
	`m≠_ôem
(&
mem_iowèb
[
i
], &
psxH
[0x1000], 0);

372 ; 
i
 < 0x1000/4 + 0x1000/2 + 0x1000; i++) {

373 
	`m≠_ôem
(&
mem_i‹èb
[
i
], &
psxH
[0x1000], 0);

374 
	`m≠_ôem
(&
mem_iowèb
[
i
], &
psxH
[0x1000], 0);

377 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM32
(0x1040)], 
io_ªad_sio32
, 1);

378 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM32
(0x1100)], 
io_r˙t_ªad_cou¡0
, 1);

379 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM32
(0x1104)], 
io_r˙t_ªad_mode0
, 1);

380 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM32
(0x1108)], 
io_r˙t_ªad_èrgë0
, 1);

381 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM32
(0x1110)], 
io_r˙t_ªad_cou¡1
, 1);

382 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM32
(0x1114)], 
io_r˙t_ªad_mode1
, 1);

383 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM32
(0x1118)], 
io_r˙t_ªad_èrgë1
, 1);

384 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM32
(0x1120)], 
io_r˙t_ªad_cou¡2
, 1);

385 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM32
(0x1124)], 
io_r˙t_ªad_mode2
, 1);

386 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM32
(0x1128)], 
io_r˙t_ªad_èrgë2
, 1);

388 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM32
(0x1814)], 
io_gpu_ªad_°©us
, 1);

389 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM32
(0x1820)], 
mdecRód0
, 1);

390 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM32
(0x1824)], 
mdecRód1
, 1);

392 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM16
(0x1040)], 
io_ªad_sio16
, 1);

393 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM16
(0x1044)], 
sioRódSèt16
, 1);

394 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM16
(0x1048)], 
sioRódMode16
, 1);

395 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM16
(0x104a)], 
sioRódCål16
, 1);

396 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM16
(0x104e)], 
sioRódBaud16
, 1);

397 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM16
(0x1100)], 
io_r˙t_ªad_cou¡0
, 1);

398 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM16
(0x1104)], 
io_r˙t_ªad_mode0
, 1);

399 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM16
(0x1108)], 
io_r˙t_ªad_èrgë0
, 1);

400 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM16
(0x1110)], 
io_r˙t_ªad_cou¡1
, 1);

401 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM16
(0x1114)], 
io_r˙t_ªad_mode1
, 1);

402 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM16
(0x1118)], 
io_r˙t_ªad_èrgë1
, 1);

403 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM16
(0x1120)], 
io_r˙t_ªad_cou¡2
, 1);

404 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM16
(0x1124)], 
io_r˙t_ªad_mode2
, 1);

405 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM16
(0x1128)], 
io_r˙t_ªad_èrgë2
, 1);

407 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM8
(0x1040)], 
sioRód8
, 1);

408 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM8
(0x1800)], 
cdrRód0
, 1);

409 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM8
(0x1801)], 
cdrRód1
, 1);

410 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM8
(0x1802)], 
cdrRód2
, 1);

411 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM8
(0x1803)], 
cdrRód3
, 1);

414 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM32
(0x1040)], 
io_wrôe_sio32
, 1);

415 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM32
(0x1070)], 
io_wrôe_úeg32
, 1);

416 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM32
(0x1074)], 
io_wrôe_imask32
, 1);

417 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM32
(0x1088)], 
io_wrôe_ch¸0
, 1);

418 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM32
(0x1098)], 
io_wrôe_ch¸1
, 1);

419 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM32
(0x10a8)], 
io_wrôe_ch¸2
, 1);

420 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM32
(0x10b8)], 
io_wrôe_ch¸3
, 1);

421 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM32
(0x10c8)], 
io_wrôe_ch¸4
, 1);

422 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM32
(0x10e8)], 
io_wrôe_ch¸6
, 1);

423 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM32
(0x10f4)], 
io_wrôe_dma_i¸32
, 1);

424 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM32
(0x1100)], 
io_r˙t_wrôe_cou¡0
, 1);

425 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM32
(0x1104)], 
io_r˙t_wrôe_mode0
, 1);

426 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM32
(0x1108)], 
io_r˙t_wrôe_èrgë0
, 1);

427 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM32
(0x1110)], 
io_r˙t_wrôe_cou¡1
, 1);

428 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM32
(0x1114)], 
io_r˙t_wrôe_mode1
, 1);

429 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM32
(0x1118)], 
io_r˙t_wrôe_èrgë1
, 1);

430 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM32
(0x1120)], 
io_r˙t_wrôe_cou¡2
, 1);

431 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM32
(0x1124)], 
io_r˙t_wrôe_mode2
, 1);

432 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM32
(0x1128)], 
io_r˙t_wrôe_èrgë2
, 1);

434 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM32
(0x1814)], 
io_gpu_wrôe_°©us
, 1);

435 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM32
(0x1820)], 
mdecWrôe0
, 1);

436 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM32
(0x1824)], 
mdecWrôe1
, 1);

438 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM16
(0x1040)], 
io_wrôe_sio16
, 1);

439 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM16
(0x1044)], 
sioWrôeSèt16
, 1);

440 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM16
(0x1048)], 
sioWrôeMode16
, 1);

441 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM16
(0x104a)], 
sioWrôeCål16
, 1);

442 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM16
(0x104e)], 
sioWrôeBaud16
, 1);

443 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM16
(0x1070)], 
io_wrôe_úeg16
, 1);

444 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM16
(0x1074)], 
io_wrôe_imask16
, 1);

445 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM16
(0x1100)], 
io_r˙t_wrôe_cou¡0
, 1);

446 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM16
(0x1104)], 
io_r˙t_wrôe_mode0
, 1);

447 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM16
(0x1108)], 
io_r˙t_wrôe_èrgë0
, 1);

448 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM16
(0x1110)], 
io_r˙t_wrôe_cou¡1
, 1);

449 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM16
(0x1114)], 
io_r˙t_wrôe_mode1
, 1);

450 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM16
(0x1118)], 
io_r˙t_wrôe_èrgë1
, 1);

451 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM16
(0x1120)], 
io_r˙t_wrôe_cou¡2
, 1);

452 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM16
(0x1124)], 
io_r˙t_wrôe_mode2
, 1);

453 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM16
(0x1128)], 
io_r˙t_wrôe_èrgë2
, 1);

455 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM8
(0x1040)], 
sioWrôe8
, 1);

456 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM8
(0x1800)], 
cdrWrôe0
, 1);

457 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM8
(0x1801)], 
cdrWrôe1
, 1);

458 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM8
(0x1802)], 
cdrWrôe2
, 1);

459 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM8
(0x1803)], 
cdrWrôe3
, 1);

461 
i
 = 0x1c00; i < 0x1e00; i += 2) {

462 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM16
(
i
)], 
io_•u_wrôe16
, 1);

463 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM32
(
i
)], 
io_•u_wrôe32
, 1);

467 
	`m≠_ôem
(&
mem_wrôëab
[0xff„0130 >> 12], 
mem_ffwèb
, 1);

468 
i
 = 0; i < 0x1000/4 + 0x1000/2 + 0x1000; i++)

469 
	`m≠_ôem
(&
mem_ffwèb
[
i
], 
wrôe_biu
, 1);

471 
mem_πab
 = 
mem_ªadèb
;

472 
mem_wèb
 = 
mem_wrôëab
;

474 
	`√w_dy«_pcsx_mem_lﬂd_°©e
();

475 
	}
}

477 
	$√w_dy«_pcsx_mem_ª£t
()

479 
i
;

482 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM32
(0x1810)], 
GPU_ªadD©a
, 1);

484 
i
 = 0x1c00; i < 0x1e00; i += 2)

485 
	`m≠_ôem
(&
mem_i‹èb
[
	`IOMEM16
(
i
)], 
SPU_ªadRegi°î
, 1);

487 
	`m≠_ôem
(&
mem_iowèb
[
	`IOMEM32
(0x1810)], 
GPU_wrôeD©a
, 1);

488 
	}
}

490 
	$√w_dy«_pcsx_mem_shutdown
()

492 
	`psxUnm≠
(
mem_ªadèb
, 0x200000 * 4, 
MAP_TAG_LUTS
);

493 
mem_wrôëab
 = 
mem_ªadèb
 = 
NULL
;

494 
	}
}

	@libpcsxcore/new_dynarec/pcsxmem.h

2 
u8
 
zîo_mem
[0x1000];

4 
√w_dy«_pcsx_mem_öô
();

5 
√w_dy«_pcsx_mem_ª£t
();

6 
√w_dy«_pcsx_mem_lﬂd_°©e
();

7 
√w_dy«_pcsx_mem_shutdown
();

9 
pcsxmem_is_h™dÀr_dy«mic
(
addr
);

	@libpcsxcore/new_dynarec/pcsxmem_inline.c

8 #i‚de‡
DRC_DBG


10 
	$pcsx_dúe˘_ªad
(
ty≥
, 
u_öt
 
addr
, 
cc_adj
, 
cc
, 
rs
, 
π
)

12 i‡((
addr
 & 0xfffff000) == 0x1f801000) {

13 
u_öt
 
t
;

14 
addr
 & 0xffff) {

16 i‡(
π
 < 0Ë
d⁄t_ˇª
;

17 i‡(
cc
 < 0)  0;

18 
	`emô_ªadw‹d
(()&
r˙ts
[2].
mode
, 
HOST_TEMPREG
);

19 
	`emô_ªadw‹d
(()&
r˙ts
[2].
cy˛eSèπ
, 
π
);

20 
	`emô_ã°imm
(
HOST_TEMPREG
, 0x200);

21 
	`emô_ªadw‹d
(()&
œ°_cou¡
, 
HOST_TEMPREG
);

22 
	`emô_sub
(
HOST_TEMPREG
, 
π
, HOST_TEMPREG);

23 
	`emô_add
(
HOST_TEMPREG
, 
cc
, HOST_TEMPREG);

24 i‡(
cc_adj
)

25 
	`emô_addimm
(
HOST_TEMPREG
, 
cc_adj
, 
π
);

26 
	`emô_sh∫e_imm
(
π
, 3,Ñt);

27 
	`mov_lﬂdty≥_adj
(
ty≥
!=
LOADW_STUB
?ty≥:
LOADH_STUB
, 
π
,Ñt);

28 
hô
;

32 i‡(
π
 < 0)  0;

33 
t
 = (
addr
 >> 4) & 3;

34 
	`emô_ªadw‹d
(()&
r˙ts
[
t
].
mode
, 
π
);

35 
	`emô_™dimm
(
π
, ~0x1800, 
HOST_TEMPREG
);

36 
	`emô_wrôew‹d
(
HOST_TEMPREG
, ()&
r˙ts
[
t
].
mode
);

37 
	`mov_lﬂdty≥_adj
(
ty≥
, 
π
,Ñt);

38 
hô
;

42 i‡(
π
 < 0)

43 
d⁄t_ˇª
;

48 
hô
:

49 
	`as£m_debug
("pcsx_dúe˘_ªad %08xÉnd\n", 
addr
);

52 
d⁄t_ˇª
:

53 
	`as£m_debug
("pcsx_dúe˘_ªad %08x dummy\n", 
addr
);

55 
	}
}

59 
	$pcsx_dúe˘_ªad
(
ty≥
, 
u_öt
 
addr
, 
cc_adj
, 
cc
, 
rs
, 
π
)

62 
	}
}

	@libpcsxcore/plugins.c

24 
	~"∂ugös.h
"

25 
	~"cdriso.h
"

27 
	gIsoFûe
[
MAXPATHLEN
] = "";

28 
s64
 
	gcdO≥nCa£Time
 = 0;

30 
GPUupd©eLa˚
 
	gGPU_upd©eLa˚
;

31 
GPUöô
 
	gGPU_öô
;

32 
GPUshutdown
 
	gGPU_shutdown
;

33 
GPUc⁄figuª
 
	gGPU_c⁄figuª
;

34 
GPUã°
 
	gGPU_ã°
;

35 
GPUabout
 
	gGPU_about
;

36 
GPU›í
 
	gGPU_›í
;

37 
GPU˛o£
 
	gGPU_˛o£
;

38 
GPUªadSètus
 
	gGPU_ªadSètus
;

39 
GPUªadD©a
 
	gGPU_ªadD©a
;

40 
GPUªadD©aMem
 
	gGPU_ªadD©aMem
;

41 
GPUwrôeSètus
 
	gGPU_wrôeSètus
;

42 
GPUwrôeD©a
 
	gGPU_wrôeD©a
;

43 
GPUwrôeD©aMem
 
	gGPU_wrôeD©aMem
;

44 
GPUdmaChaö
 
	gGPU_dmaChaö
;

45 
GPUkey¥es£d
 
	gGPU_key¥es£d
;

46 
GPUdi•œyText
 
	gGPU_di•œyText
;

47 
GPUmakeS«pshŸ
 
	gGPU_makeS«pshŸ
;

48 
GPU‰ìze
 
	gGPU_‰ìze
;

49 
GPUgëS¸ìnPic
 
	gGPU_gëS¸ìnPic
;

50 
GPUshowS¸ìnPic
 
	gGPU_showS¸ìnPic
;

51 
GPU˛órDy«ªc
 
	gGPU_˛órDy«ªc
;

52 
GPUvBœnk
 
	gGPU_vBœnk
;

54 
CDRöô
 
	gCDR_öô
;

55 
CDRshutdown
 
	gCDR_shutdown
;

56 
CDR›í
 
	gCDR_›í
;

57 
CDR˛o£
 
	gCDR_˛o£
;

58 
CDRã°
 
	gCDR_ã°
;

59 
CDRgëTN
 
	gCDR_gëTN
;

60 
CDRgëTD
 
	gCDR_gëTD
;

61 
CDRªadTøck
 
	gCDR_ªadTøck
;

62 
CDRgëBuf„r
 
	gCDR_gëBuf„r
;

63 
CDR∂ay
 
	gCDR_∂ay
;

64 
CDR°›
 
	gCDR_°›
;

65 
CDRgëSètus
 
	gCDR_gëSètus
;

66 
CDRgëDriveLëãr
 
	gCDR_gëDriveLëãr
;

67 
CDRgëBuf„rSub
 
	gCDR_gëBuf„rSub
;

68 
CDRc⁄figuª
 
	gCDR_c⁄figuª
;

69 
CDRabout
 
	gCDR_about
;

70 
CDR£tfûíame
 
	gCDR_£tfûíame
;

71 
CDRªadCDDA
 
	gCDR_ªadCDDA
;

72 
CDRgëTE
 
	gCDR_gëTE
;

74 
SPUc⁄figuª
 
	gSPU_c⁄figuª
;

75 
SPUabout
 
	gSPU_about
;

76 
SPUöô
 
	gSPU_öô
;

77 
SPUshutdown
 
	gSPU_shutdown
;

78 
SPUã°
 
	gSPU_ã°
;

79 
SPU›í
 
	gSPU_›í
;

80 
SPU˛o£
 
	gSPU_˛o£
;

81 
SPU∂aySam∂e
 
	gSPU_∂aySam∂e
;

82 
SPUwrôeRegi°î
 
	gSPU_wrôeRegi°î
;

83 
SPUªadRegi°î
 
	gSPU_ªadRegi°î
;

84 
SPUwrôeDMA
 
	gSPU_wrôeDMA
;

85 
SPUªadDMA
 
	gSPU_ªadDMA
;

86 
SPUwrôeDMAMem
 
	gSPU_wrôeDMAMem
;

87 
SPUªadDMAMem
 
	gSPU_ªadDMAMem
;

88 
SPU∂ayADPCMch™√l
 
	gSPU_∂ayADPCMch™√l
;

89 
SPU‰ìze
 
	gSPU_‰ìze
;

90 
SPUªgi°îCÆlback
 
	gSPU_ªgi°îCÆlback
;

91 
SPUªgi°îScheduÀCb
 
	gSPU_ªgi°îScheduÀCb
;

92 
SPUasync
 
	gSPU_async
;

93 
SPU∂ayCDDAch™√l
 
	gSPU_∂ayCDDAch™√l
;

95 
PADc⁄figuª
 
	gPAD1_c⁄figuª
;

96 
PADabout
 
	gPAD1_about
;

97 
PADöô
 
	gPAD1_öô
;

98 
PADshutdown
 
	gPAD1_shutdown
;

99 
PADã°
 
	gPAD1_ã°
;

100 
PAD›í
 
	gPAD1_›í
;

101 
PAD˛o£
 
	gPAD1_˛o£
;

102 
PADquîy
 
	gPAD1_quîy
;

103 
PADªadP‹t1
 
	gPAD1_ªadP‹t1
;

104 
PADkey¥es£d
 
	gPAD1_key¥es£d
;

105 
PAD°¨tPﬁl
 
	gPAD1_°¨tPﬁl
;

106 
PADpﬁl
 
	gPAD1_pﬁl
;

107 
PAD£tSísôive
 
	gPAD1_£tSísôive
;

109 
PADc⁄figuª
 
	gPAD2_c⁄figuª
;

110 
PADabout
 
	gPAD2_about
;

111 
PADöô
 
	gPAD2_öô
;

112 
PADshutdown
 
	gPAD2_shutdown
;

113 
PADã°
 
	gPAD2_ã°
;

114 
PAD›í
 
	gPAD2_›í
;

115 
PAD˛o£
 
	gPAD2_˛o£
;

116 
PADquîy
 
	gPAD2_quîy
;

117 
PADªadP‹t2
 
	gPAD2_ªadP‹t2
;

118 
PADkey¥es£d
 
	gPAD2_key¥es£d
;

119 
PAD°¨tPﬁl
 
	gPAD2_°¨tPﬁl
;

120 
PADpﬁl
 
	gPAD2_pﬁl
;

121 
PAD£tSísôive
 
	gPAD2_£tSísôive
;

123 
NETöô
 
	gNET_öô
;

124 
NETshutdown
 
	gNET_shutdown
;

125 
NET›í
 
	gNET_›í
;

126 
NET˛o£
 
	gNET_˛o£
;

127 
NETã°
 
	gNET_ã°
;

128 
NETc⁄figuª
 
	gNET_c⁄figuª
;

129 
NETabout
 
	gNET_about
;

130 
NET∑u£
 
	gNET_∑u£
;

131 
NETªsume
 
	gNET_ªsume
;

132 
NETquîyPœyî
 
	gNET_quîyPœyî
;

133 
NET£ndD©a
 
	gNET_£ndD©a
;

134 
NETªcvD©a
 
	gNET_ªcvD©a
;

135 
NET£ndPadD©a
 
	gNET_£ndPadD©a
;

136 
NETªcvPadD©a
 
	gNET_ªcvPadD©a
;

137 
NET£tInfo
 
	gNET_£tInfo
;

138 
NETkey¥es£d
 
	gNET_key¥es£d
;

140 #ifde‡
ENABLE_SIO1API


142 
SIO1öô
 
	gSIO1_öô
;

143 
SIO1shutdown
 
	gSIO1_shutdown
;

144 
SIO1›í
 
	gSIO1_›í
;

145 
SIO1˛o£
 
	gSIO1_˛o£
;

146 
SIO1ã°
 
	gSIO1_ã°
;

147 
SIO1c⁄figuª
 
	gSIO1_c⁄figuª
;

148 
SIO1about
 
	gSIO1_about
;

149 
SIO1∑u£
 
	gSIO1_∑u£
;

150 
SIO1ªsume
 
	gSIO1_ªsume
;

151 
SIO1key¥es£d
 
	gSIO1_key¥es£d
;

152 
SIO1wrôeD©a8
 
	gSIO1_wrôeD©a8
;

153 
SIO1wrôeD©a16
 
	gSIO1_wrôeD©a16
;

154 
SIO1wrôeD©a32
 
	gSIO1_wrôeD©a32
;

155 
SIO1wrôeSèt16
 
	gSIO1_wrôeSèt16
;

156 
SIO1wrôeSèt32
 
	gSIO1_wrôeSèt32
;

157 
SIO1wrôeMode16
 
	gSIO1_wrôeMode16
;

158 
SIO1wrôeMode32
 
	gSIO1_wrôeMode32
;

159 
SIO1wrôeCål16
 
	gSIO1_wrôeCål16
;

160 
SIO1wrôeCål32
 
	gSIO1_wrôeCål32
;

161 
SIO1wrôeBaud16
 
	gSIO1_wrôeBaud16
;

162 
SIO1wrôeBaud32
 
	gSIO1_wrôeBaud32
;

163 
SIO1ªadD©a8
 
	gSIO1_ªadD©a8
;

164 
SIO1ªadD©a16
 
	gSIO1_ªadD©a16
;

165 
SIO1ªadD©a32
 
	gSIO1_ªadD©a32
;

166 
SIO1ªadSèt16
 
	gSIO1_ªadSèt16
;

167 
SIO1ªadSèt32
 
	gSIO1_ªadSèt32
;

168 
SIO1ªadMode16
 
	gSIO1_ªadMode16
;

169 
SIO1ªadMode32
 
	gSIO1_ªadMode32
;

170 
SIO1ªadCål16
 
	gSIO1_ªadCål16
;

171 
SIO1ªadCål32
 
	gSIO1_ªadCål32
;

172 
SIO1ªadBaud16
 
	gSIO1_ªadBaud16
;

173 
SIO1ªadBaud32
 
	gSIO1_ªadBaud32
;

174 
SIO1ªgi°îCÆlback
 
	gSIO1_ªgi°îCÆlback
;

178 c⁄° *
	gîr
;

180 
	#CheckEº
(
func
Ë{ \

	)

181 
	gîr
 = 
SysLibEº‹
(); \

182 i‡(
	gîr
 !
NULL
Ë{ 
SysMesßge
(
_
("Eº‹Üﬂdög %s: %s"), 
func
, 
îr
);  -1; } \

185 
	#LﬂdSym
(
de°
, 
§c
, 
«me
, 
checkîr
Ë{ \

	)

186 
	gde°
 = (
§c
)
SysLﬂdSym
(
drv
, 
«me
); \

187 i‡(
	gcheckîr
Ë{ 
CheckEº
(
«me
); } 
SysLibEº‹
(); \

190 *
	ghGPUDrivî
 = 
NULL
;

192 
CALLBACK
 
	$GPU__di•œyText
(*
pText
) {

193 
	`SysPrötf
("%s\n", 
pText
);

194 
	}
}

196 
CALLBACK
 
	$GPU__c⁄figuª
(Ë{  0; 
	}
}

197 
CALLBACK
 
	$GPU__ã°
(Ë{  0; 
	}
}

198 
CALLBACK
 
	$GPU__about
(Ë{
	}
}

199 
CALLBACK
 
	$GPU__makeS«pshŸ
(Ë{
	}
}

200 
CALLBACK
 
	$GPU__key¥es£d
(
key
Ë{
	}
}

201 
CALLBACK
 
	$GPU__gëS¸ìnPic
(*
pMem
Ë{  -1; 
	}
}

202 
CALLBACK
 
	$GPU__showS¸ìnPic
(*
pMem
Ë{  -1; 
	}
}

203 
CALLBACK
 
GPU__˛órDy«ªc
((CALLBACK *
ˇŒback
)()Ë{
	}
}

204 
CALLBACK
 
	$GPU__vBœnk
(
vÆ
Ë{
	}
}

206 
	#LﬂdGpuSym1
(
de°
, 
«me
Ë\

	)

207 
LﬂdSym
(
GPU_
##
de°
, 
GPU
##de°, 
«me
, 
TRUE
);

209 
	#LﬂdGpuSym0
(
de°
, 
«me
Ë\

	)

210 
LﬂdSym
(
GPU_
##
de°
, 
GPU
##de°, 
«me
, 
FALSE
); \

211 i‡(
	gGPU_
##
	gde°
 =
NULL
Ë
GPU_
##
de°
 = (
GPU
##de°Ë
GPU__
##dest;

213 
	#LﬂdGpuSymN
(
de°
, 
«me
Ë\

	)

214 
LﬂdSym
(
GPU_
##
de°
, 
GPU
##de°, 
«me
, 
FALSE
);

216 
	$LﬂdGPU∂ugö
(c⁄° *
GPUdŒ
) {

217 *
drv
;

219 
hGPUDrivî
 = 
	`SysLﬂdLibøry
(
GPUdŒ
);

220 i‡(
hGPUDrivî
 =
NULL
) {

221 
GPU_c⁄figuª
 = 
NULL
;

222 
	`SysMesßge
 (
	`_
("CouldÇŸÜﬂd GPUÖlugö %s!"), 
GPUdŒ
);  -1;

224 
drv
 = 
hGPUDrivî
;

225 
	`LﬂdGpuSym1
(
öô
, "GPUinit");

226 
	`LﬂdGpuSym1
(
shutdown
, "GPUshutdown");

227 
	`LﬂdGpuSym1
(
›í
, "GPUopen");

228 
	`LﬂdGpuSym1
(
˛o£
, "GPUclose");

229 
	`LﬂdGpuSym1
(
ªadD©a
, "GPUreadData");

230 
	`LﬂdGpuSym1
(
ªadD©aMem
, "GPUreadDataMem");

231 
	`LﬂdGpuSym1
(
ªadSètus
, "GPUreadStatus");

232 
	`LﬂdGpuSym1
(
wrôeD©a
, "GPUwriteData");

233 
	`LﬂdGpuSym1
(
wrôeD©aMem
, "GPUwriteDataMem");

234 
	`LﬂdGpuSym1
(
wrôeSètus
, "GPUwriteStatus");

235 
	`LﬂdGpuSym1
(
dmaChaö
, "GPUdmaChain");

236 
	`LﬂdGpuSym1
(
upd©eLa˚
, "GPUupdateLace");

237 
	`LﬂdGpuSym0
(
key¥es£d
, "GPUkeypressed");

238 
	`LﬂdGpuSym0
(
di•œyText
, "GPUdisplayText");

239 
	`LﬂdGpuSym0
(
makeS«pshŸ
, "GPUmakeSnapshot");

240 
	`LﬂdGpuSym1
(
‰ìze
, "GPUfreeze");

241 
	`LﬂdGpuSym0
(
gëS¸ìnPic
, "GPUgetScreenPic");

242 
	`LﬂdGpuSym0
(
showS¸ìnPic
, "GPUshowScreenPic");

243 
	`LﬂdGpuSym0
(
˛órDy«ªc
, "GPUclearDynarec");

244 
	`LﬂdGpuSym0
(
vBœnk
, "GPUvBlank");

245 
	`LﬂdGpuSym0
(
c⁄figuª
, "GPUconfigure");

246 
	`LﬂdGpuSym0
(
ã°
, "GPUtest");

247 
	`LﬂdGpuSym0
(
about
, "GPUabout");

250 
	}
}

252 *
	ghCDRDrivî
 = 
NULL
;

254 
CALLBACK
 
	$CDR__∂ay
(*
£˘‹
Ë{  0; 
	}
}

255 
CALLBACK
 
	$CDR__°›
(Ë{  0; 
	}
}

257 
CALLBACK
 
	$CDR__gëSètus
(
CdrSèt
 *
°©
) {

258 i‡(
cdO≥nCa£Time
 < 0 || cdO≥nCa£Timê> (
s64
)
	`time
(
NULL
))

259 
°©
->
Sètus
 = 0x10;

261 
°©
->
Sètus
 = 0;

264 
	}
}

266 * 
CALLBACK
 
	$CDR__gëDriveLëãr
(Ë{  
NULL
; 
	}
}

267 
CALLBACK
 
	$CDR__c⁄figuª
(Ë{  0; 
	}
}

268 
CALLBACK
 
	$CDR__ã°
(Ë{  0; 
	}
}

269 
CALLBACK
 
	$CDR__about
(Ë{
	}
}

270 
CALLBACK
 
	$CDR__£tfûíame
(*
fûíame
Ë{  0; 
	}
}

272 
	#LﬂdCdrSym1
(
de°
, 
«me
Ë\

	)

273 
LﬂdSym
(
CDR_
##
de°
, 
CDR
##de°, 
«me
, 
TRUE
);

275 
	#LﬂdCdrSym0
(
de°
, 
«me
Ë\

	)

276 
LﬂdSym
(
CDR_
##
de°
, 
CDR
##de°, 
«me
, 
FALSE
); \

277 i‡(
	gCDR_
##
	gde°
 =
NULL
Ë
CDR_
##
de°
 = (
CDR
##de°Ë
CDR__
##dest;

279 
	#LﬂdCdrSymN
(
de°
, 
«me
Ë\

	)

280 
LﬂdSym
(
CDR_
##
de°
, 
CDR
##de°, 
«me
, 
FALSE
);

282 
	$LﬂdCDR∂ugö
(c⁄° *
CDRdŒ
) {

283 *
drv
;

285 i‡(
CDRdŒ
 =
NULL
) {

286 
	`cdrIsoInô
();

290 
hCDRDrivî
 = 
	`SysLﬂdLibøry
(
CDRdŒ
);

291 i‡(
hCDRDrivî
 =
NULL
) {

292 
CDR_c⁄figuª
 = 
NULL
;

293 
	`SysMesßge
 (
	`_
("CouldÇŸÜﬂd CD-ROMÖlugö %s!"), 
CDRdŒ
);  -1;

295 
drv
 = 
hCDRDrivî
;

296 
	`LﬂdCdrSym1
(
öô
, "CDRinit");

297 
	`LﬂdCdrSym1
(
shutdown
, "CDRshutdown");

298 
	`LﬂdCdrSym1
(
›í
, "CDRopen");

299 
	`LﬂdCdrSym1
(
˛o£
, "CDRclose");

300 
	`LﬂdCdrSym1
(
gëTN
, "CDRgetTN");

301 
	`LﬂdCdrSym1
(
gëTD
, "CDRgetTD");

302 
	`LﬂdCdrSym1
(
ªadTøck
, "CDRreadTrack");

303 
	`LﬂdCdrSym1
(
gëBuf„r
, "CDRgetBuffer");

304 
	`LﬂdCdrSym1
(
gëBuf„rSub
, "CDRgetBufferSub");

305 
	`LﬂdCdrSym0
(
∂ay
, "CDRplay");

306 
	`LﬂdCdrSym0
(
°›
, "CDRstop");

307 
	`LﬂdCdrSym0
(
gëSètus
, "CDRgetStatus");

308 
	`LﬂdCdrSym0
(
gëDriveLëãr
, "CDRgetDriveLetter");

309 
	`LﬂdCdrSym0
(
c⁄figuª
, "CDRconfigure");

310 
	`LﬂdCdrSym0
(
ã°
, "CDRtest");

311 
	`LﬂdCdrSym0
(
about
, "CDRabout");

312 
	`LﬂdCdrSym0
(
£tfûíame
, "CDRsetfilename");

313 
	`LﬂdCdrSymN
(
ªadCDDA
, "CDRreadCDDA");

314 
	`LﬂdCdrSymN
(
gëTE
, "CDRgetTE");

317 
	}
}

319 *
	ghSPUDrivî
 = 
NULL
;

321 
CALLBACK
 
	$SPU__c⁄figuª
(Ë{  0; 
	}
}

322 
CALLBACK
 
	$SPU__about
(Ë{
	}
}

323 
CALLBACK
 
	$SPU__ã°
(Ë{  0; 
	}
}

324 
CALLBACK
 
SPU__ªgi°îScheduÀCb
((CALLBACK *
cb
)()Ë{
	}
}

326 
	#LﬂdSpuSym1
(
de°
, 
«me
Ë\

	)

327 
LﬂdSym
(
SPU_
##
de°
, 
SPU
##de°, 
«me
, 
TRUE
);

329 
	#LﬂdSpuSym0
(
de°
, 
«me
Ë\

	)

330 
LﬂdSym
(
SPU_
##
de°
, 
SPU
##de°, 
«me
, 
FALSE
); \

331 i‡(
	gSPU_
##
	gde°
 =
NULL
Ë
SPU_
##
de°
 = (
SPU
##de°Ë
SPU__
##dest;

333 
	#LﬂdSpuSymN
(
de°
, 
«me
Ë\

	)

334 
LﬂdSym
(
SPU_
##
de°
, 
SPU
##de°, 
«me
, 
FALSE
);

336 
	$LﬂdSPU∂ugö
(c⁄° *
SPUdŒ
) {

337 *
drv
;

339 
hSPUDrivî
 = 
	`SysLﬂdLibøry
(
SPUdŒ
);

340 i‡(
hSPUDrivî
 =
NULL
) {

341 
SPU_c⁄figuª
 = 
NULL
;

342 
	`SysMesßge
 (
	`_
("CouldÇŸÜﬂd SPUÖlugö %s!"), 
SPUdŒ
);  -1;

344 
drv
 = 
hSPUDrivî
;

345 
	`LﬂdSpuSym1
(
öô
, "SPUinit");

346 
	`LﬂdSpuSym1
(
shutdown
, "SPUshutdown");

347 
	`LﬂdSpuSym1
(
›í
, "SPUopen");

348 
	`LﬂdSpuSym1
(
˛o£
, "SPUclose");

349 
	`LﬂdSpuSym0
(
c⁄figuª
, "SPUconfigure");

350 
	`LﬂdSpuSym0
(
about
, "SPUabout");

351 
	`LﬂdSpuSym0
(
ã°
, "SPUtest");

352 
	`LﬂdSpuSym1
(
wrôeRegi°î
, "SPUwriteRegister");

353 
	`LﬂdSpuSym1
(
ªadRegi°î
, "SPUreadRegister");

354 
	`LﬂdSpuSym1
(
wrôeDMA
, "SPUwriteDMA");

355 
	`LﬂdSpuSym1
(
ªadDMA
, "SPUreadDMA");

356 
	`LﬂdSpuSym1
(
wrôeDMAMem
, "SPUwriteDMAMem");

357 
	`LﬂdSpuSym1
(
ªadDMAMem
, "SPUreadDMAMem");

358 
	`LﬂdSpuSym1
(
∂ayADPCMch™√l
, "SPUplayADPCMchannel");

359 
	`LﬂdSpuSym1
(
‰ìze
, "SPUfreeze");

360 
	`LﬂdSpuSym1
(
ªgi°îCÆlback
, "SPUregisterCallback");

361 
	`LﬂdSpuSym0
(
ªgi°îScheduÀCb
, "SPUregisterScheduleCb");

362 
	`LﬂdSpuSymN
(
async
, "SPUasync");

363 
	`LﬂdSpuSymN
(
∂ayCDDAch™√l
, "SPUplayCDDAchannel");

366 
	}
}

368 *
	ghPAD1Drivî
 = 
NULL
;

369 *
	ghPAD2Drivî
 = 
NULL
;

371 
	gbuf
[256];

372 
	g°d∑r
[10] = { 0x00, 0x41, 0x5a, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };

373 
	gmou£∑r
[8] = { 0x00, 0x12, 0x5a, 0xff, 0xff, 0xff, 0xff };

374 
	g™Æog∑r
[9] = { 0x00, 0xff, 0x5a, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };

376 
	gbufcou¡
, 
	gbufc
;

378 
PadD©aS
 
	g∑dd1
, 
	g∑dd2
;

380 
	$_PAD°¨tPﬁl
(
PadD©aS
 *
∑d
) {

381 
bufc
 = 0;

383 
∑d
->
c⁄åﬁÀrTy≥
) {

384 
PSE_PAD_TYPE_MOUSE
:

385 
mou£∑r
[3] = 
∑d
->
buâ⁄Sètus
 & 0xff;

386 
mou£∑r
[4] = 
∑d
->
buâ⁄Sètus
 >> 8;

387 
mou£∑r
[5] = 
∑d
->
moveX
;

388 
mou£∑r
[6] = 
∑d
->
moveY
;

390 
	`mem˝y
(
buf
, 
mou£∑r
, 7);

391 
bufcou¡
 = 6;

393 
PSE_PAD_TYPE_NEGCON
:

394 
™Æog∑r
[1] = 0x23;

395 
™Æog∑r
[3] = 
∑d
->
buâ⁄Sètus
 & 0xff;

396 
™Æog∑r
[4] = 
∑d
->
buâ⁄Sètus
 >> 8;

397 
™Æog∑r
[5] = 
∑d
->
rightJoyX
;

398 
™Æog∑r
[6] = 
∑d
->
rightJoyY
;

399 
™Æog∑r
[7] = 
∑d
->
À·JoyX
;

400 
™Æog∑r
[8] = 
∑d
->
À·JoyY
;

402 
	`mem˝y
(
buf
, 
™Æog∑r
, 9);

403 
bufcou¡
 = 8;

405 
PSE_PAD_TYPE_ANALOGPAD
:

406 
™Æog∑r
[1] = 0x73;

407 
™Æog∑r
[3] = 
∑d
->
buâ⁄Sètus
 & 0xff;

408 
™Æog∑r
[4] = 
∑d
->
buâ⁄Sètus
 >> 8;

409 
™Æog∑r
[5] = 
∑d
->
rightJoyX
;

410 
™Æog∑r
[6] = 
∑d
->
rightJoyY
;

411 
™Æog∑r
[7] = 
∑d
->
À·JoyX
;

412 
™Æog∑r
[8] = 
∑d
->
À·JoyY
;

414 
	`mem˝y
(
buf
, 
™Æog∑r
, 9);

415 
bufcou¡
 = 8;

417 
PSE_PAD_TYPE_ANALOGJOY
:

418 
™Æog∑r
[1] = 0x53;

419 
™Æog∑r
[3] = 
∑d
->
buâ⁄Sètus
 & 0xff;

420 
™Æog∑r
[4] = 
∑d
->
buâ⁄Sètus
 >> 8;

421 
™Æog∑r
[5] = 
∑d
->
rightJoyX
;

422 
™Æog∑r
[6] = 
∑d
->
rightJoyY
;

423 
™Æog∑r
[7] = 
∑d
->
À·JoyX
;

424 
™Æog∑r
[8] = 
∑d
->
À·JoyY
;

426 
	`mem˝y
(
buf
, 
™Æog∑r
, 9);

427 
bufcou¡
 = 8;

429 
PSE_PAD_TYPE_STANDARD
:

431 
°d∑r
[3] = 
∑d
->
buâ⁄Sètus
 & 0xff;

432 
°d∑r
[4] = 
∑d
->
buâ⁄Sètus
 >> 8;

434 
	`mem˝y
(
buf
, 
°d∑r
, 5);

435 
bufcou¡
 = 4;

438  
buf
[
bufc
++];

439 
	}
}

441 
	$_PADpﬁl
(
vÆue
) {

442 i‡(
bufc
 > 
bufcou¡
)  0;

443  
buf
[
bufc
++];

444 
	}
}

446 
CALLBACK
 
	$PAD1__°¨tPﬁl
(
∑d
) {

447 
PadD©aS
 
∑dd
;

449 
	`PAD1_ªadP‹t1
(&
∑dd
);

451  
	`_PAD°¨tPﬁl
(&
∑dd
);

452 
	}
}

454 
CALLBACK
 
	$PAD1__pﬁl
(
vÆue
) {

455  
	`_PADpﬁl
(
vÆue
);

456 
	}
}

458 
CALLBACK
 
	$PAD1__c⁄figuª
(Ë{  0; 
	}
}

459 
CALLBACK
 
	$PAD1__about
(Ë{
	}
}

460 
CALLBACK
 
	$PAD1__ã°
(Ë{  0; 
	}
}

461 
CALLBACK
 
	$PAD1__quîy
(Ë{  3; 
	}
}

462 
CALLBACK
 
	$PAD1__key¥es£d
(Ë{  0; 
	}
}

464 
	#LﬂdPad1Sym1
(
de°
, 
«me
Ë\

	)

465 
LﬂdSym
(
PAD1_
##
de°
, 
PAD
##de°, 
«me
, 
TRUE
);

467 
	#LﬂdPad1SymN
(
de°
, 
«me
Ë\

	)

468 
LﬂdSym
(
PAD1_
##
de°
, 
PAD
##de°, 
«me
, 
FALSE
);

470 
	#LﬂdPad1Sym0
(
de°
, 
«me
Ë\

	)

471 
LﬂdSym
(
PAD1_
##
de°
, 
PAD
##de°, 
«me
, 
FALSE
); \

472 i‡(
	gPAD1_
##
	gde°
 =
NULL
Ë
PAD1_
##
de°
 = (
PAD
##de°Ë
PAD1__
##dest;

474 
	$LﬂdPAD1∂ugö
(c⁄° *
PAD1dŒ
) {

475 *
drv
;

477 
hPAD1Drivî
 = 
	`SysLﬂdLibøry
(
PAD1dŒ
);

478 i‡(
hPAD1Drivî
 =
NULL
) {

479 
PAD1_c⁄figuª
 = 
NULL
;

480 
	`SysMesßge
 (
	`_
("CouldÇŸÜﬂd C⁄åﬁÀ∏1Ölugö %s!"), 
PAD1dŒ
);  -1;

482 
drv
 = 
hPAD1Drivî
;

483 
	`LﬂdPad1Sym1
(
öô
, "PADinit");

484 
	`LﬂdPad1Sym1
(
shutdown
, "PADshutdown");

485 
	`LﬂdPad1Sym1
(
›í
, "PADopen");

486 
	`LﬂdPad1Sym1
(
˛o£
, "PADclose");

487 
	`LﬂdPad1Sym0
(
quîy
, "PADquery");

488 
	`LﬂdPad1Sym1
(
ªadP‹t1
, "PADreadPort1");

489 
	`LﬂdPad1Sym0
(
c⁄figuª
, "PADconfigure");

490 
	`LﬂdPad1Sym0
(
ã°
, "PADtest");

491 
	`LﬂdPad1Sym0
(
about
, "PADabout");

492 
	`LﬂdPad1Sym0
(
key¥es£d
, "PADkeypressed");

493 
	`LﬂdPad1Sym0
(
°¨tPﬁl
, "PADstartPoll");

494 
	`LﬂdPad1Sym0
(
pﬁl
, "PADpoll");

495 
	`LﬂdPad1SymN
(
£tSísôive
, "PADsetSensitive");

498 
	}
}

500 
CALLBACK
 
	$PAD2__°¨tPﬁl
(
∑d
) {

501 
PadD©aS
 
∑dd
;

503 
	`PAD2_ªadP‹t2
(&
∑dd
);

505  
	`_PAD°¨tPﬁl
(&
∑dd
);

506 
	}
}

508 
CALLBACK
 
	$PAD2__pﬁl
(
vÆue
) {

509  
	`_PADpﬁl
(
vÆue
);

510 
	}
}

512 
CALLBACK
 
	$PAD2__c⁄figuª
(Ë{  0; 
	}
}

513 
CALLBACK
 
	$PAD2__about
(Ë{
	}
}

514 
CALLBACK
 
	$PAD2__ã°
(Ë{  0; 
	}
}

515 
CALLBACK
 
	$PAD2__quîy
(Ë{  
PSE_PAD_USE_PORT1
 | 
PSE_PAD_USE_PORT2
; 
	}
}

516 
CALLBACK
 
	$PAD2__key¥es£d
(Ë{  0; 
	}
}

518 
	#LﬂdPad2Sym1
(
de°
, 
«me
Ë\

	)

519 
LﬂdSym
(
PAD2_
##
de°
, 
PAD
##de°, 
«me
, 
TRUE
);

521 
	#LﬂdPad2Sym0
(
de°
, 
«me
Ë\

	)

522 
LﬂdSym
(
PAD2_
##
de°
, 
PAD
##de°, 
«me
, 
FALSE
); \

523 i‡(
	gPAD2_
##
	gde°
 =
NULL
Ë
PAD2_
##
de°
 = (
PAD
##de°Ë
PAD2__
##dest;

525 
	#LﬂdPad2SymN
(
de°
, 
«me
Ë\

	)

526 
LﬂdSym
(
PAD2_
##
de°
, 
PAD
##de°, 
«me
, 
FALSE
);

528 
	$LﬂdPAD2∂ugö
(c⁄° *
PAD2dŒ
) {

529 *
drv
;

531 
hPAD2Drivî
 = 
	`SysLﬂdLibøry
(
PAD2dŒ
);

532 i‡(
hPAD2Drivî
 =
NULL
) {

533 
PAD2_c⁄figuª
 = 
NULL
;

534 
	`SysMesßge
 (
	`_
("CouldÇŸÜﬂd C⁄åﬁÀ∏2Ölugö %s!"), 
PAD2dŒ
);  -1;

536 
drv
 = 
hPAD2Drivî
;

537 
	`LﬂdPad2Sym1
(
öô
, "PADinit");

538 
	`LﬂdPad2Sym1
(
shutdown
, "PADshutdown");

539 
	`LﬂdPad2Sym1
(
›í
, "PADopen");

540 
	`LﬂdPad2Sym1
(
˛o£
, "PADclose");

541 
	`LﬂdPad2Sym0
(
quîy
, "PADquery");

542 
	`LﬂdPad2Sym1
(
ªadP‹t2
, "PADreadPort2");

543 
	`LﬂdPad2Sym0
(
c⁄figuª
, "PADconfigure");

544 
	`LﬂdPad2Sym0
(
ã°
, "PADtest");

545 
	`LﬂdPad2Sym0
(
about
, "PADabout");

546 
	`LﬂdPad2Sym0
(
key¥es£d
, "PADkeypressed");

547 
	`LﬂdPad2Sym0
(
°¨tPﬁl
, "PADstartPoll");

548 
	`LﬂdPad2Sym0
(
pﬁl
, "PADpoll");

549 
	`LﬂdPad2SymN
(
£tSísôive
, "PADsetSensitive");

552 
	}
}

554 *
	ghNETDrivî
 = 
NULL
;

556 
CALLBACK
 
	$NET__£tInfo
(
√tInfo
 *
öfo
Ë{
	}
}

557 
CALLBACK
 
	$NET__key¥es£d
(
key
Ë{
	}
}

558 
CALLBACK
 
	$NET__c⁄figuª
(Ë{  0; 
	}
}

559 
CALLBACK
 
	$NET__ã°
(Ë{  0; 
	}
}

560 
CALLBACK
 
	$NET__about
(Ë{
	}
}

562 
	#LﬂdNëSym1
(
de°
, 
«me
Ë\

	)

563 
LﬂdSym
(
NET_
##
de°
, 
NET
##de°, 
«me
, 
TRUE
);

565 
	#LﬂdNëSymN
(
de°
, 
«me
Ë\

	)

566 
LﬂdSym
(
NET_
##
de°
, 
NET
##de°, 
«me
, 
FALSE
);

568 
	#LﬂdNëSym0
(
de°
, 
«me
Ë\

	)

569 
LﬂdSym
(
NET_
##
de°
, 
NET
##de°, 
«me
, 
FALSE
); \

570 i‡(
	gNET_
##
	gde°
 =
NULL
Ë
NET_
##
de°
 = (
NET
##de°Ë
NET__
##dest;

572 
	$LﬂdNET∂ugö
(c⁄° *
NETdŒ
) {

573 *
drv
;

575 
hNETDrivî
 = 
	`SysLﬂdLibøry
(
NETdŒ
);

576 i‡(
hNETDrivî
 =
NULL
) {

577 
	`SysMesßge
 (
	`_
("CouldÇŸÜﬂd NëPœyÖlugö %s!"), 
NETdŒ
);  -1;

579 
drv
 = 
hNETDrivî
;

580 
	`LﬂdNëSym1
(
öô
, "NETinit");

581 
	`LﬂdNëSym1
(
shutdown
, "NETshutdown");

582 
	`LﬂdNëSym1
(
›í
, "NETopen");

583 
	`LﬂdNëSym1
(
˛o£
, "NETclose");

584 
	`LﬂdNëSymN
(
£ndD©a
, "NETsendData");

585 
	`LﬂdNëSymN
(
ªcvD©a
, "NETrecvData");

586 
	`LﬂdNëSym1
(
£ndPadD©a
, "NETsendPadData");

587 
	`LﬂdNëSym1
(
ªcvPadD©a
, "NETrecvPadData");

588 
	`LﬂdNëSym1
(
quîyPœyî
, "NETqueryPlayer");

589 
	`LﬂdNëSym1
(
∑u£
, "NETpause");

590 
	`LﬂdNëSym1
(
ªsume
, "NETresume");

591 
	`LﬂdNëSym0
(
£tInfo
, "NETsetInfo");

592 
	`LﬂdNëSym0
(
key¥es£d
, "NETkeypressed");

593 
	`LﬂdNëSym0
(
c⁄figuª
, "NETconfigure");

594 
	`LﬂdNëSym0
(
ã°
, "NETtest");

595 
	`LﬂdNëSym0
(
about
, "NETabout");

598 
	}
}

600 #ifde‡
ENABLE_SIO1API


602 *
	ghSIO1Drivî
 = 
NULL
;

604 
CALLBACK
 
	$SIO1__öô
(Ë{  0; 
	}
}

605 
CALLBACK
 
	$SIO1__shutdown
(Ë{  0; 
	}
}

606 
CALLBACK
 
	$SIO1__›í
(Ë{  0; 
	}
}

607 
CALLBACK
 
	$SIO1__˛o£
(Ë{  0; 
	}
}

608 
CALLBACK
 
	$SIO1__c⁄figuª
(Ë{  0; 
	}
}

609 
CALLBACK
 
	$SIO1__ã°
(Ë{  0; 
	}
}

610 
CALLBACK
 
	$SIO1__about
(Ë{
	}
}

611 
CALLBACK
 
	$SIO1__∑u£
(Ë{
	}
}

612 
CALLBACK
 
	$SIO1__ªsume
(Ë{
	}
}

613 
CALLBACK
 
	$SIO1__key¥es£d
(
key
Ë{  0; 
	}
}

614 
CALLBACK
 
	$SIO1__wrôeD©a8
(
vÆ
Ë{
	}
}

615 
CALLBACK
 
	$SIO1__wrôeD©a16
(
vÆ
Ë{
	}
}

616 
CALLBACK
 
	$SIO1__wrôeD©a32
(
vÆ
Ë{
	}
}

617 
CALLBACK
 
	$SIO1__wrôeSèt16
(
vÆ
Ë{
	}
}

618 
CALLBACK
 
	$SIO1__wrôeSèt32
(
vÆ
Ë{
	}
}

619 
CALLBACK
 
	$SIO1__wrôeMode16
(
vÆ
Ë{
	}
}

620 
CALLBACK
 
	$SIO1__wrôeMode32
(
vÆ
Ë{
	}
}

621 
CALLBACK
 
	$SIO1__wrôeCål16
(
vÆ
Ë{
	}
}

622 
CALLBACK
 
	$SIO1__wrôeCål32
(
vÆ
Ë{
	}
}

623 
CALLBACK
 
	$SIO1__wrôeBaud16
(
vÆ
Ë{
	}
}

624 
CALLBACK
 
	$SIO1__wrôeBaud32
(
vÆ
Ë{
	}
}

625 
CALLBACK
 
	$SIO1__ªadD©a8
(Ë{  0; 
	}
}

626 
CALLBACK
 
	$SIO1__ªadD©a16
(Ë{  0; 
	}
}

627 
CALLBACK
 
	$SIO1__ªadD©a32
(Ë{  0; 
	}
}

628 
CALLBACK
 
	$SIO1__ªadSèt16
(Ë{  0; 
	}
}

629 
CALLBACK
 
	$SIO1__ªadSèt32
(Ë{  0; 
	}
}

630 
CALLBACK
 
	$SIO1__ªadMode16
(Ë{  0; 
	}
}

631 
CALLBACK
 
	$SIO1__ªadMode32
(Ë{  0; 
	}
}

632 
CALLBACK
 
	$SIO1__ªadCål16
(Ë{  0; 
	}
}

633 
CALLBACK
 
	$SIO1__ªadCål32
(Ë{  0; 
	}
}

634 
CALLBACK
 
	$SIO1__ªadBaud16
(Ë{  0; 
	}
}

635 
CALLBACK
 
	$SIO1__ªadBaud32
(Ë{  0; 
	}
}

636 
CALLBACK
 
SIO1__ªgi°îCÆlback
((CALLBACK *
ˇŒback
)()Ë{
	}
};

638 
CALLBACK
 
	$SIO1úq
() {

639 
	`psxHu32ªf
(0x1070Ë|
	`SWAPu32
(0x100);

640 
	}
}

642 
	#LﬂdSio1Sym1
(
de°
, 
«me
Ë\

	)

643 
LﬂdSym
(
SIO1_
##
de°
, 
SIO1
##de°, 
«me
, 
TRUE
);

645 
	#LﬂdSio1SymN
(
de°
, 
«me
Ë\

	)

646 
LﬂdSym
(
SIO1_
##
de°
, 
SIO1
##de°, 
«me
, 
FALSE
);

648 
	#LﬂdSio1Sym0
(
de°
, 
«me
Ë\

	)

649 
LﬂdSym
(
SIO1_
##
de°
, 
SIO1
##de°, 
«me
, 
FALSE
); \

650 i‡(
	gSIO1_
##
	gde°
 =
NULL
Ë
SIO1_
##
de°
 = (
SIO1
##de°Ë
SIO1__
##dest;

652 
	$LﬂdSIO1∂ugö
(c⁄° *
SIO1dŒ
) {

653 *
drv
;

655 
hSIO1Drivî
 = 
	`SysLﬂdLibøry
(
SIO1dŒ
);

656 i‡(
hSIO1Drivî
 =
NULL
) {

657 
	`SysMesßge
 (
	`_
("CouldÇŸÜﬂd SIO1Ölugö %s!"), 
SIO1dŒ
);  -1;

659 
drv
 = 
hSIO1Drivî
;

661 
	`LﬂdSio1Sym0
(
öô
, "SIO1init");

662 
	`LﬂdSio1Sym0
(
shutdown
, "SIO1shutdown");

663 
	`LﬂdSio1Sym0
(
›í
, "SIO1open");

664 
	`LﬂdSio1Sym0
(
˛o£
, "SIO1close");

665 
	`LﬂdSio1Sym0
(
∑u£
, "SIO1pause");

666 
	`LﬂdSio1Sym0
(
ªsume
, "SIO1resume");

667 
	`LﬂdSio1Sym0
(
key¥es£d
, "SIO1keypressed");

668 
	`LﬂdSio1Sym0
(
c⁄figuª
, "SIO1configure");

669 
	`LﬂdSio1Sym0
(
ã°
, "SIO1test");

670 
	`LﬂdSio1Sym0
(
about
, "SIO1about");

671 
	`LﬂdSio1Sym0
(
wrôeD©a8
, "SIO1writeData8");

672 
	`LﬂdSio1Sym0
(
wrôeD©a16
, "SIO1writeData16");

673 
	`LﬂdSio1Sym0
(
wrôeD©a32
, "SIO1writeData32");

674 
	`LﬂdSio1Sym0
(
wrôeSèt16
, "SIO1writeStat16");

675 
	`LﬂdSio1Sym0
(
wrôeSèt32
, "SIO1writeStat32");

676 
	`LﬂdSio1Sym0
(
wrôeMode16
, "SIO1writeMode16");

677 
	`LﬂdSio1Sym0
(
wrôeMode32
, "SIO1writeMode32");

678 
	`LﬂdSio1Sym0
(
wrôeCål16
, "SIO1writeCtrl16");

679 
	`LﬂdSio1Sym0
(
wrôeCål32
, "SIO1writeCtrl32");

680 
	`LﬂdSio1Sym0
(
wrôeBaud16
, "SIO1writeBaud16");

681 
	`LﬂdSio1Sym0
(
wrôeBaud32
, "SIO1writeBaud32");

682 
	`LﬂdSio1Sym0
(
ªadD©a16
, "SIO1readData16");

683 
	`LﬂdSio1Sym0
(
ªadD©a32
, "SIO1readData32");

684 
	`LﬂdSio1Sym0
(
ªadSèt16
, "SIO1readStat16");

685 
	`LﬂdSio1Sym0
(
ªadSèt32
, "SIO1readStat32");

686 
	`LﬂdSio1Sym0
(
ªadMode16
, "SIO1readMode16");

687 
	`LﬂdSio1Sym0
(
ªadMode32
, "SIO1readMode32");

688 
	`LﬂdSio1Sym0
(
ªadCål16
, "SIO1readCtrl16");

689 
	`LﬂdSio1Sym0
(
ªadCål32
, "SIO1readCtrl32");

690 
	`LﬂdSio1Sym0
(
ªadBaud16
, "SIO1readBaud16");

691 
	`LﬂdSio1Sym0
(
ªadBaud32
, "SIO1readBaud32");

692 
	`LﬂdSio1Sym0
(
ªgi°îCÆlback
, "SIO1registerCallback");

695 
	}
}

699 
CALLBACK
 
	$˛órDy«ªc
() {

700 
psxCpu
->
	`Re£t
();

701 
	}
}

703 
	$LﬂdPlugös
() {

704 
ªt
;

705 
Plugö
[
MAXPATHLEN
];

707 
	`Rñó£Plugös
();

708 
	`SysLibEº‹
();

710 i‡(
	`UsögIso
()) {

711 
	`LﬂdCDR∂ugö
(
NULL
);

713 
	`•rötf
(
Plugö
, "%s/%s", 
C⁄fig
.
PlugösDú
, C⁄fig.
Cdr
);

714 i‡(
	`LﬂdCDR∂ugö
(
Plugö
) == -1)  -1;

717 
	`•rötf
(
Plugö
, "%s/%s", 
C⁄fig
.
PlugösDú
, C⁄fig.
Gpu
);

718 i‡(
	`LﬂdGPU∂ugö
(
Plugö
) == -1)  -1;

720 
	`•rötf
(
Plugö
, "%s/%s", 
C⁄fig
.
PlugösDú
, C⁄fig.
Spu
);

721 i‡(
	`LﬂdSPU∂ugö
(
Plugö
) == -1)  -1;

723 
	`•rötf
(
Plugö
, "%s/%s", 
C⁄fig
.
PlugösDú
, C⁄fig.
Pad1
);

724 i‡(
	`LﬂdPAD1∂ugö
(
Plugö
) == -1)  -1;

726 
	`•rötf
(
Plugö
, "%s/%s", 
C⁄fig
.
PlugösDú
, C⁄fig.
Pad2
);

727 i‡(
	`LﬂdPAD2∂ugö
(
Plugö
) == -1)  -1;

729 i‡(
	`°rcmp
("DißbÀd", 
C⁄fig
.
Në
) == 0 || strcmp("", Config.Net) == 0)

730 
C⁄fig
.
U£Në
 = 
FALSE
;

732 
C⁄fig
.
U£Në
 = 
TRUE
;

733 
	`•rötf
(
Plugö
, "%s/%s", 
C⁄fig
.
PlugösDú
, C⁄fig.
Në
);

734 i‡(
	`LﬂdNET∂ugö
(
Plugö
Ë=-1Ë
C⁄fig
.
U£Në
 = 
FALSE
;

737 #ifde‡
ENABLE_SIO1API


738 
	`•rötf
(
Plugö
, "%s/%s", 
C⁄fig
.
PlugösDú
, C⁄fig.
Sio1
);

739 i‡(
	`LﬂdSIO1∂ugö
(
Plugö
) == -1)  -1;

742 
ªt
 = 
	`CDR_öô
();

743 i‡(
ªt
 < 0Ë{ 
	`SysMesßge
 (
	`_
("Error initializing CD-ROMÖlugin: %d"),Ñet);  -1; }

744 
ªt
 = 
	`GPU_öô
();

745 i‡(
ªt
 < 0Ë{ 
	`SysMesßge
 (
	`_
("Error initializing GPUÖlugin: %d"),Ñet);  -1; }

746 
ªt
 = 
	`SPU_öô
();

747 i‡(
ªt
 < 0Ë{ 
	`SysMesßge
 (
	`_
("Error initializing SPUÖlugin: %d"),Ñet);  -1; }

748 
ªt
 = 
	`PAD1_öô
(1);

749 i‡(
ªt
 < 0Ë{ 
	`SysMesßge
 (
	`_
("Error initializing Controller 1Ölugin: %d"),Ñet);  -1; }

750 
ªt
 = 
	`PAD2_öô
(2);

751 i‡(
ªt
 < 0Ë{ 
	`SysMesßge
 (
	`_
("Error initializing Controller 2Ölugin: %d"),Ñet);  -1; }

753 i‡(
C⁄fig
.
U£Në
) {

754 
ªt
 = 
	`NET_öô
();

755 i‡(
ªt
 < 0Ë{ 
	`SysMesßge
 (
	`_
("Error initializing NetPlayÖlugin: %d"),Ñet);  -1; }

758 #ifde‡
ENABLE_SIO1API


759 
ªt
 = 
	`SIO1_öô
();

760 i‡(
ªt
 < 0Ë{ 
	`SysMesßge
 (
	`_
("Error initializing SIO1Ölugin: %d"),Ñet);  -1; }

763 
	`SysPrötf
(
	`_
("PluginsÜoaded.\n"));

765 
	}
}

767 
	$Rñó£Plugös
() {

768 i‡(
C⁄fig
.
U£Në
) {

769 
ªt
 = 
	`NET_˛o£
();

770 i‡(
ªt
 < 0Ë
C⁄fig
.
U£Në
 = 
FALSE
;

772 
NëO≥√d
 = 
FALSE
;

774 i‡(
hCDRDrivî
 !
NULL
 || 
	`cdrIsoA˘ive
()Ë
	`CDR_shutdown
();

775 i‡(
hGPUDrivî
 !
NULL
Ë
	`GPU_shutdown
();

776 i‡(
hSPUDrivî
 !
NULL
Ë
	`SPU_shutdown
();

777 i‡(
hPAD1Drivî
 !
NULL
Ë
	`PAD1_shutdown
();

778 i‡(
hPAD2Drivî
 !
NULL
Ë
	`PAD2_shutdown
();

780 i‡(
C⁄fig
.
U£Në
 && 
hNETDrivî
 !
NULL
Ë
	`NET_shutdown
();

782 i‡(
hCDRDrivî
 !
NULL
Ë
	`SysClo£Libøry
(hCDRDriver); hCDRDriver = NULL;

783 i‡(
hGPUDrivî
 !
NULL
Ë
	`SysClo£Libøry
(hGPUDriver); hGPUDriver = NULL;

784 i‡(
hSPUDrivî
 !
NULL
Ë
	`SysClo£Libøry
(hSPUDriver); hSPUDriver = NULL;

785 i‡(
hPAD1Drivî
 !
NULL
Ë
	`SysClo£Libøry
(hPAD1Driver); hPAD1Driver = NULL;

786 i‡(
hPAD2Drivî
 !
NULL
Ë
	`SysClo£Libøry
(hPAD2Driver); hPAD2Driver = NULL;

788 i‡(
C⁄fig
.
U£Në
 && 
hNETDrivî
 !
NULL
) {

789 
	`SysClo£Libøry
(
hNETDrivî
); hNETDrivî = 
NULL
;

792 #ifde‡
ENABLE_SIO1API


793 i‡(
hSIO1Drivî
 !
NULL
) {

794 
	`SIO1_shutdown
();

795 
	`SysClo£Libøry
(
hSIO1Drivî
);

796 
hSIO1Drivî
 = 
NULL
;

799 
	}
}

802 
	$RñﬂdCdromPlugö
()

804 i‡(
hCDRDrivî
 !
NULL
 || 
	`cdrIsoA˘ive
()Ë
	`CDR_shutdown
();

805 i‡(
hCDRDrivî
 !
NULL
Ë
	`SysClo£Libøry
(hCDRDriver); hCDRDriver = NULL;

807 i‡(
	`UsögIso
()) {

808 
	`LﬂdCDR∂ugö
(
NULL
);

810 
Plugö
[
MAXPATHLEN
];

811 
	`•rötf
(
Plugö
, "%s/%s", 
C⁄fig
.
PlugösDú
, C⁄fig.
Cdr
);

812 i‡(
	`LﬂdCDR∂ugö
(
Plugö
) == -1)  -1;

815  
	`CDR_öô
();

816 
	}
}

818 
	$SëIsoFûe
(c⁄° *
fûíame
) {

819 i‡(
fûíame
 =
NULL
) {

820 
IsoFûe
[0] = '\0';

823 
	`°∫˝y
(
IsoFûe
, 
fûíame
, 
MAXPATHLEN
);

824 
	}
}

826 c⁄° *
	$GëIsoFûe
() {

827  
IsoFûe
;

828 
	}
}

830 
boﬁón
 
	$UsögIso
() {

831  (
IsoFûe
[0] != '\0');

832 
	}
}

834 
	$SëCdO≥nCa£Time
(
s64
 
time
) {

835 
cdO≥nCa£Time
 = 
time
;

836 
	}
}

	@libpcsxcore/plugins.h

20 #i‚de‡
__PLUGINS_H__


21 
	#__PLUGINS_H__


	)

23 #ifde‡
__˝lu•lus


27 
	~"psxcomm⁄.h
"

31 #i‚de‡
_WIN32


33 * 
	tHWND
;

34 
	#CALLBACK


	)

38 
	#WIN32_LEAN_AND_MEAN


	)

39 
	~<wödows.h
>

43 (
CALLBACK
 *
	tGPU›í
)(*, *, *);

44 (
CALLBACK
 *
	tSPU›í
)();

45 (
CALLBACK
 *
	tPAD›í
)(*);

46 (
CALLBACK
 *
	tNET›í
)(*);

47 (
CALLBACK
 *
	tSIO1›í
)(*);

49 
	~"•u.h
"

51 
	~"p£mu_∂ugö_defs.h
"

52 
	~"decode_xa.h
"

54 
LﬂdPlugös
();

55 
Rñó£Plugös
();

56 
O≥nPlugös
();

57 
Clo£Plugös
();

58 
RñﬂdCdromPlugö
();

60 (
	tCALLBACK
* 
	tPSEgëLibTy≥
)();

61 (
	tCALLBACK
* 
	tPSEgëLibVîsi⁄
)();

62 *(
	tCALLBACK
* 
	tPSEgëLibName
)();

65 (
CALLBACK
* 
	tGPUöô
)();

66 (
CALLBACK
* 
	tGPUshutdown
)();

67 (
CALLBACK
* 
	tGPU˛o£
)();

68 (
CALLBACK
* 
	tGPUwrôeSètus
)(
	tuöt32_t
);

69 (
CALLBACK
* 
	tGPUwrôeD©a
)(
	tuöt32_t
);

70 (
CALLBACK
* 
	tGPUwrôeD©aMem
)(
	tuöt32_t
 *, );

71 
uöt32_t
 (
	tCALLBACK
* 
	tGPUªadSètus
)();

72 
uöt32_t
 (
	tCALLBACK
* 
	tGPUªadD©a
)();

73 (
CALLBACK
* 
	tGPUªadD©aMem
)(
	tuöt32_t
 *, );

74 (
CALLBACK
* 
	tGPUdmaChaö
)(
	tuöt32_t
 *,uint32_t);

75 (
CALLBACK
* 
	tGPUupd©eLa˚
)();

76 (
CALLBACK
* 
	tGPUc⁄figuª
)();

77 (
CALLBACK
* 
	tGPUã°
)();

78 (
CALLBACK
* 
	tGPUabout
)();

79 (
CALLBACK
* 
	tGPUmakeS«pshŸ
)();

80 (
CALLBACK
* 
	tGPUkey¥es£d
)();

81 (
CALLBACK
* 
	tGPUdi•œyText
)(*);

83 
uöt32_t
 
ulFªezeVîsi⁄
;

84 
uöt32_t
 
ulSètus
;

85 
uöt32_t
 
ulC⁄åﬁ
[256];

86 
psxVRam
[1024*512*2];

87 } 
	tGPUFªeze_t
;

88 (
CALLBACK
* 
	tGPU‰ìze
)(
	tuöt32_t
, 
	tGPUFªeze_t
 *);

89 (
CALLBACK
* 
	tGPUgëS¸ìnPic
)(*);

90 (
CALLBACK
* 
	tGPUshowS¸ìnPic
)(*);

91 (
CALLBACK
* 
	tGPU˛órDy«ªc
)((
	tCALLBACK
 *
	tˇŒback
)());

92 (
CALLBACK
* 
	tGPUvBœnk
)(, );

95 
GPUupd©eLa˚
 
GPU_upd©eLa˚
;

96 
GPUöô
 
GPU_öô
;

97 
GPUshutdown
 
GPU_shutdown
;

98 
GPUc⁄figuª
 
GPU_c⁄figuª
;

99 
GPUã°
 
GPU_ã°
;

100 
GPUabout
 
GPU_about
;

101 
GPU›í
 
GPU_›í
;

102 
GPU˛o£
 
GPU_˛o£
;

103 
GPUªadSètus
 
GPU_ªadSètus
;

104 
GPUªadD©a
 
GPU_ªadD©a
;

105 
GPUªadD©aMem
 
GPU_ªadD©aMem
;

106 
GPUwrôeSètus
 
GPU_wrôeSètus
;

107 
GPUwrôeD©a
 
GPU_wrôeD©a
;

108 
GPUwrôeD©aMem
 
GPU_wrôeD©aMem
;

109 
GPUdmaChaö
 
GPU_dmaChaö
;

110 
GPUkey¥es£d
 
GPU_key¥es£d
;

111 
GPUdi•œyText
 
GPU_di•œyText
;

112 
GPUmakeS«pshŸ
 
GPU_makeS«pshŸ
;

113 
GPU‰ìze
 
GPU_‰ìze
;

114 
GPUgëS¸ìnPic
 
GPU_gëS¸ìnPic
;

115 
GPUshowS¸ìnPic
 
GPU_showS¸ìnPic
;

116 
GPU˛órDy«ªc
 
GPU_˛órDy«ªc
;

117 
GPUvBœnk
 
GPU_vBœnk
;

120 (
CALLBACK
* 
	tCDRöô
)();

121 (
CALLBACK
* 
	tCDRshutdown
)();

122 (
CALLBACK
* 
	tCDR›í
)();

123 (
CALLBACK
* 
	tCDR˛o£
)();

124 (
CALLBACK
* 
	tCDRgëTN
)(*);

125 (
CALLBACK
* 
	tCDRgëTD
)(, *);

126 (
CALLBACK
* 
	tCDRªadTøck
)(*);

127 * (
	tCALLBACK
* 
	tCDRgëBuf„r
)();

128 * (
	tCALLBACK
* 
	tCDRgëBuf„rSub
)();

129 (
CALLBACK
* 
	tCDRc⁄figuª
)();

130 (
CALLBACK
* 
	tCDRã°
)();

131 (
CALLBACK
* 
	tCDRabout
)();

132 (
CALLBACK
* 
	tCDR∂ay
)(*);

133 (
CALLBACK
* 
	tCDR°›
)();

134 (
CALLBACK
* 
	tCDR£tfûíame
)(*);

135 
	sCdrSèt
 {

136 
uöt32_t
 
	gTy≥
;

137 
uöt32_t
 
	gSètus
;

138 
	gTime
[3];

140 (
CALLBACK
* 
	tCDRgëSètus
)(
	tCdrSèt
 *);

141 * (
	tCALLBACK
* 
	tCDRgëDriveLëãr
)();

142 
	sSubQ
 {

143 
	gªs0
[12];

144 
	gC⁄åﬁAndADR
;

145 
	gTøckNumbî
;

146 
	gIndexNumbî
;

147 
	gTøckRñ©iveAddªss
[3];

148 
	gFûÀr
;

149 
	gAbsﬁuãAddªss
[3];

150 
	gCRC
[2];

151 
	gªs1
[72];

153 (
CALLBACK
* 
	tCDRªadCDDA
)(, , , *);

154 (
CALLBACK
* 
	tCDRgëTE
)(, *, *, *);

157 
CDRöô
 
CDR_öô
;

158 
CDRshutdown
 
CDR_shutdown
;

159 
CDR›í
 
CDR_›í
;

160 
CDR˛o£
 
CDR_˛o£
;

161 
CDRã°
 
CDR_ã°
;

162 
CDRgëTN
 
CDR_gëTN
;

163 
CDRgëTD
 
CDR_gëTD
;

164 
CDRªadTøck
 
CDR_ªadTøck
;

165 
CDRgëBuf„r
 
CDR_gëBuf„r
;

166 
CDRgëBuf„rSub
 
CDR_gëBuf„rSub
;

167 
CDR∂ay
 
CDR_∂ay
;

168 
CDR°›
 
CDR_°›
;

169 
CDRgëSètus
 
CDR_gëSètus
;

170 
CDRgëDriveLëãr
 
CDR_gëDriveLëãr
;

171 
CDRc⁄figuª
 
CDR_c⁄figuª
;

172 
CDRabout
 
CDR_about
;

173 
CDR£tfûíame
 
CDR_£tfûíame
;

174 
CDRªadCDDA
 
CDR_ªadCDDA
;

175 
CDRgëTE
 
CDR_gëTE
;

178 (
CALLBACK
* 
	tSPUöô
)();

179 (
CALLBACK
* 
	tSPUshutdown
)();

180 (
CALLBACK
* 
	tSPU˛o£
)();

181 (
CALLBACK
* 
	tSPU∂aySam∂e
)();

182 (
CALLBACK
* 
	tSPUwrôeRegi°î
)(, , );

183 (
	tCALLBACK
* 
	tSPUªadRegi°î
)();

184 (
CALLBACK
* 
	tSPUwrôeDMA
)();

185 (
	tCALLBACK
* 
	tSPUªadDMA
)();

186 (
CALLBACK
* 
	tSPUwrôeDMAMem
)(*, , );

187 (
CALLBACK
* 
	tSPUªadDMAMem
)(*, , );

188 (
CALLBACK
* 
	tSPU∂ayADPCMch™√l
)(
	txa_decode_t
 *);

189 (
CALLBACK
* 
	tSPUªgi°îCÆlback
)((
	tCALLBACK
 *
	tˇŒback
)());

190 (
CALLBACK
* 
	tSPUªgi°îScheduÀCb
)((
	tCALLBACK
 *
	tˇŒback
)(
	tcy˛es_a·î
));

191 (
CALLBACK
* 
	tSPUc⁄figuª
)();

192 (
CALLBACK
* 
	tSPUã°
)();

193 (
CALLBACK
* 
	tSPUabout
)();

195 
	gPlugöName
[8];

196 
uöt32_t
 
	gPlugöVîsi⁄
;

197 
uöt32_t
 
	gSize
;

198 
	gSPUP‹ts
[0x200];

199 
	gSPURam
[0x80000];

200 
xa_decode_t
 
	gxa
;

201 *
	gSPUInfo
;

202 } 
	tSPUFªeze_t
;

203 (
CALLBACK
* 
	tSPU‰ìze
)(
	tuöt32_t
, 
	tSPUFªeze_t
 *, uint32_t);

204 (
CALLBACK
* 
	tSPUasync
)(
	tuöt32_t
, uint32_t);

205 (
CALLBACK
* 
	tSPU∂ayCDDAch™√l
)(*, );

208 
SPUc⁄figuª
 
SPU_c⁄figuª
;

209 
SPUabout
 
SPU_about
;

210 
SPUöô
 
SPU_öô
;

211 
SPUshutdown
 
SPU_shutdown
;

212 
SPUã°
 
SPU_ã°
;

213 
SPU›í
 
SPU_›í
;

214 
SPU˛o£
 
SPU_˛o£
;

215 
SPU∂aySam∂e
 
SPU_∂aySam∂e
;

216 
SPUwrôeRegi°î
 
SPU_wrôeRegi°î
;

217 
SPUªadRegi°î
 
SPU_ªadRegi°î
;

218 
SPUwrôeDMA
 
SPU_wrôeDMA
;

219 
SPUªadDMA
 
SPU_ªadDMA
;

220 
SPUwrôeDMAMem
 
SPU_wrôeDMAMem
;

221 
SPUªadDMAMem
 
SPU_ªadDMAMem
;

222 
SPU∂ayADPCMch™√l
 
SPU_∂ayADPCMch™√l
;

223 
SPU‰ìze
 
SPU_‰ìze
;

224 
SPUªgi°îCÆlback
 
SPU_ªgi°îCÆlback
;

225 
SPUªgi°îScheduÀCb
 
SPU_ªgi°îScheduÀCb
;

226 
SPUasync
 
SPU_async
;

227 
SPU∂ayCDDAch™√l
 
SPU_∂ayCDDAch™√l
;

230 (
CALLBACK
* 
	tPADc⁄figuª
)();

231 (
CALLBACK
* 
	tPADabout
)();

232 (
CALLBACK
* 
	tPADöô
)();

233 (
CALLBACK
* 
	tPADshutdown
)();

234 (
CALLBACK
* 
	tPADã°
)();

235 (
CALLBACK
* 
	tPAD˛o£
)();

236 (
CALLBACK
* 
	tPADquîy
)();

237 (
CALLBACK
* 
	tPADªadP‹t1
)(
	tPadD©aS
*);

238 (
CALLBACK
* 
	tPADªadP‹t2
)(
	tPadD©aS
*);

239 (
CALLBACK
* 
	tPADkey¥es£d
)();

240 (
	tCALLBACK
* 
	tPAD°¨tPﬁl
)();

241 (
	tCALLBACK
* 
	tPADpﬁl
)();

242 (
CALLBACK
* 
	tPAD£tSísôive
)();

245 
PADc⁄figuª
 
PAD1_c⁄figuª
;

246 
PADabout
 
PAD1_about
;

247 
PADöô
 
PAD1_öô
;

248 
PADshutdown
 
PAD1_shutdown
;

249 
PADã°
 
PAD1_ã°
;

250 
PAD›í
 
PAD1_›í
;

251 
PAD˛o£
 
PAD1_˛o£
;

252 
PADquîy
 
PAD1_quîy
;

253 
PADªadP‹t1
 
PAD1_ªadP‹t1
;

254 
PADkey¥es£d
 
PAD1_key¥es£d
;

255 
PAD°¨tPﬁl
 
PAD1_°¨tPﬁl
;

256 
PADpﬁl
 
PAD1_pﬁl
;

257 
PAD£tSísôive
 
PAD1_£tSísôive
;

259 
PADc⁄figuª
 
PAD2_c⁄figuª
;

260 
PADabout
 
PAD2_about
;

261 
PADöô
 
PAD2_öô
;

262 
PADshutdown
 
PAD2_shutdown
;

263 
PADã°
 
PAD2_ã°
;

264 
PAD›í
 
PAD2_›í
;

265 
PAD˛o£
 
PAD2_˛o£
;

266 
PADquîy
 
PAD2_quîy
;

267 
PADªadP‹t2
 
PAD2_ªadP‹t2
;

268 
PADkey¥es£d
 
PAD2_key¥es£d
;

269 
PAD°¨tPﬁl
 
PAD2_°¨tPﬁl
;

270 
PADpﬁl
 
PAD2_pﬁl
;

271 
PAD£tSísôive
 
PAD2_£tSísôive
;

274 (
CALLBACK
* 
	tNETöô
)();

275 (
CALLBACK
* 
	tNETshutdown
)();

276 (
CALLBACK
* 
	tNET˛o£
)();

277 (
CALLBACK
* 
	tNETc⁄figuª
)();

278 (
CALLBACK
* 
	tNETã°
)();

279 (
CALLBACK
* 
	tNETabout
)();

280 (
CALLBACK
* 
	tNET∑u£
)();

281 (
CALLBACK
* 
	tNETªsume
)();

282 (
CALLBACK
* 
	tNETquîyPœyî
)();

283 (
CALLBACK
* 
	tNET£ndD©a
)(*, , );

284 (
CALLBACK
* 
	tNETªcvD©a
)(*, , );

285 (
CALLBACK
* 
	tNET£ndPadD©a
)(*, );

286 (
CALLBACK
* 
	tNETªcvPadD©a
)(*, );

289 
	gEmuName
[32];

290 
	gCdromID
[9];

291 
	gCdromLabñ
[11];

292 *
	gpsxMem
;

293 
GPUshowS¸ìnPic
 
	gGPU_showS¸ìnPic
;

294 
GPUdi•œyText
 
	gGPU_di•œyText
;

295 
PAD£tSísôive
 
	gPAD_£tSísôive
;

296 
	gGPU∑th
[256];

297 
	gSPU∑th
[256];

298 
	gCDR∑th
[256];

299 
	gMCD1∑th
[256];

300 
	gMCD2∑th
[256];

301 
	gBIOS∑th
[256];

302 
	gUnu£d
[1024];

303 } 
	t√tInfo
;

305 (
CALLBACK
* 
	tNET£tInfo
)(
	t√tInfo
 *);

306 (
CALLBACK
* 
	tNETkey¥es£d
)();

309 
NETöô
 
NET_öô
;

310 
NETshutdown
 
NET_shutdown
;

311 
NET›í
 
NET_›í
;

312 
NET˛o£
 
NET_˛o£
;

313 
NETã°
 
NET_ã°
;

314 
NETc⁄figuª
 
NET_c⁄figuª
;

315 
NETabout
 
NET_about
;

316 
NET∑u£
 
NET_∑u£
;

317 
NETªsume
 
NET_ªsume
;

318 
NETquîyPœyî
 
NET_quîyPœyî
;

319 
NET£ndD©a
 
NET_£ndD©a
;

320 
NETªcvD©a
 
NET_ªcvD©a
;

321 
NET£ndPadD©a
 
NET_£ndPadD©a
;

322 
NETªcvPadD©a
 
NET_ªcvPadD©a
;

323 
NET£tInfo
 
NET_£tInfo
;

324 
NETkey¥es£d
 
NET_key¥es£d
;

326 #ifde‡
ENABLE_SIO1API


329 (
CALLBACK
* 
	tSIO1öô
)();

330 (
CALLBACK
* 
	tSIO1shutdown
)();

331 (
CALLBACK
* 
	tSIO1˛o£
)();

332 (
CALLBACK
* 
	tSIO1c⁄figuª
)();

333 (
CALLBACK
* 
	tSIO1ã°
)();

334 (
CALLBACK
* 
	tSIO1about
)();

335 (
CALLBACK
* 
	tSIO1∑u£
)();

336 (
CALLBACK
* 
	tSIO1ªsume
)();

337 (
CALLBACK
* 
	tSIO1key¥es£d
)();

338 (
CALLBACK
* 
	tSIO1wrôeD©a8
)();

339 (
CALLBACK
* 
	tSIO1wrôeD©a16
)();

340 (
CALLBACK
* 
	tSIO1wrôeD©a32
)();

341 (
CALLBACK
* 
	tSIO1wrôeSèt16
)();

342 (
CALLBACK
* 
	tSIO1wrôeSèt32
)();

343 (
CALLBACK
* 
	tSIO1wrôeMode16
)();

344 (
CALLBACK
* 
	tSIO1wrôeMode32
)();

345 (
CALLBACK
* 
	tSIO1wrôeCål16
)();

346 (
CALLBACK
* 
	tSIO1wrôeCål32
)();

347 (
CALLBACK
* 
	tSIO1wrôeBaud16
)();

348 (
CALLBACK
* 
	tSIO1wrôeBaud32
)();

349 (
	tCALLBACK
* 
	tSIO1ªadD©a8
)();

350 (
	tCALLBACK
* 
	tSIO1ªadD©a16
)();

351 (
	tCALLBACK
* 
	tSIO1ªadD©a32
)();

352 (
	tCALLBACK
* 
	tSIO1ªadSèt16
)();

353 (
	tCALLBACK
* 
	tSIO1ªadSèt32
)();

354 (
	tCALLBACK
* 
	tSIO1ªadMode16
)();

355 (
	tCALLBACK
* 
	tSIO1ªadMode32
)();

356 (
	tCALLBACK
* 
	tSIO1ªadCål16
)();

357 (
	tCALLBACK
* 
	tSIO1ªadCål32
)();

358 (
	tCALLBACK
* 
	tSIO1ªadBaud16
)();

359 (
	tCALLBACK
* 
	tSIO1ªadBaud32
)();

360 (
CALLBACK
* 
	tSIO1ªgi°îCÆlback
)((
	tCALLBACK
 *
	tˇŒback
)());

363 
SIO1öô
 
SIO1_öô
;

364 
SIO1shutdown
 
SIO1_shutdown
;

365 
SIO1›í
 
SIO1_›í
;

366 
SIO1˛o£
 
SIO1_˛o£
;

367 
SIO1ã°
 
SIO1_ã°
;

368 
SIO1c⁄figuª
 
SIO1_c⁄figuª
;

369 
SIO1about
 
SIO1_about
;

370 
SIO1∑u£
 
SIO1_∑u£
;

371 
SIO1ªsume
 
SIO1_ªsume
;

372 
SIO1key¥es£d
 
SIO1_key¥es£d
;

373 
SIO1wrôeD©a8
 
SIO1_wrôeD©a8
;

374 
SIO1wrôeD©a16
 
SIO1_wrôeD©a16
;

375 
SIO1wrôeD©a32
 
SIO1_wrôeD©a32
;

376 
SIO1wrôeSèt16
 
SIO1_wrôeSèt16
;

377 
SIO1wrôeSèt32
 
SIO1_wrôeSèt32
;

378 
SIO1wrôeMode16
 
SIO1_wrôeMode16
;

379 
SIO1wrôeMode32
 
SIO1_wrôeMode32
;

380 
SIO1wrôeCål16
 
SIO1_wrôeCål16
;

381 
SIO1wrôeCål32
 
SIO1_wrôeCål32
;

382 
SIO1wrôeBaud16
 
SIO1_wrôeBaud16
;

383 
SIO1wrôeBaud32
 
SIO1_wrôeBaud32
;

384 
SIO1ªadD©a8
 
SIO1_ªadD©a8
;

385 
SIO1ªadD©a16
 
SIO1_ªadD©a16
;

386 
SIO1ªadD©a32
 
SIO1_ªadD©a32
;

387 
SIO1ªadSèt16
 
SIO1_ªadSèt16
;

388 
SIO1ªadSèt32
 
SIO1_ªadSèt32
;

389 
SIO1ªadMode16
 
SIO1_ªadMode16
;

390 
SIO1ªadMode32
 
SIO1_ªadMode32
;

391 
SIO1ªadCål16
 
SIO1_ªadCål16
;

392 
SIO1ªadCål32
 
SIO1_ªadCål32
;

393 
SIO1ªadBaud16
 
SIO1_ªadBaud16
;

394 
SIO1ªadBaud32
 
SIO1_ªadBaud32
;

395 
SIO1ªgi°îCÆlback
 
SIO1_ªgi°îCÆlback
;

399 
CALLBACK
 
˛órDy«ªc
();

401 
SëIsoFûe
(c⁄° *
fûíame
);

402 c⁄° *
GëIsoFûe
();

403 
boﬁón
 
UsögIso
();

404 
SëCdO≥nCa£Time
(
s64
 
time
);

406 #ifde‡
__˝lu•lus


	@libpcsxcore/ppf.c

22 
	~"psxcomm⁄.h
"

23 
	~"µf.h
"

24 
	~"cdrom.h
"

26 
	sègPPF_DATA
 {

27 
s32
 
	maddr
;

28 
s32
 
	mpos
;

29 
s32
 
	m™z
;

30 
ègPPF_DATA
 *
	mpNext
;

31 } 
	tPPF_DATA
;

33 
	sègPPF_CACHE
 {

34 
s32
 
	maddr
;

35 
ègPPF_DATA
 *
	mpNext
;

36 } 
	tPPF_CACHE
;

38 
PPF_CACHE
 *
	gµfCache
 = 
NULL
;

39 
PPF_DATA
 *
	gµfHód
 = 
NULL
, *
	gµfLa°
 = NULL;

40 
	giPPFNum
 = 0;

43 
	$FûlPPFCache
() {

44 
PPF_DATA
 *
p
;

45 
PPF_CACHE
 *
pc
;

46 
s32
 
œ°addr
;

48 
p
 = 
µfHód
;

49 
œ°addr
 = -1;

50 
iPPFNum
 = 0;

52 
p
 !
NULL
) {

53 i‡(
p
->
addr
 !
œ°addr
Ë
iPPFNum
++;

54 
œ°addr
 = 
p
->
addr
;

55 
p
 =Ö->
pNext
;

58 i‡(
iPPFNum
 <= 0) ;

60 
pc
 = 
µfCache
 = (
PPF_CACHE
 *)
	`mÆloc
(
iPPFNum
 * (PPF_CACHE));

62 
iPPFNum
--;

63 
p
 = 
µfHód
;

64 
œ°addr
 = -1;

66 
p
 !
NULL
) {

67 i‡(
p
->
addr
 !
œ°addr
) {

68 
pc
->
addr
 = 
p
->addr;

69 
pc
->
pNext
 = 
p
;

70 
pc
++;

72 
œ°addr
 = 
p
->
addr
;

73 
p
 =Ö->
pNext
;

75 
	}
}

77 
	$FªePPFCache
() {

78 
PPF_DATA
 *
p
 = 
µfHód
;

79 *
≤
;

81 
p
 !
NULL
) {

82 
≤
 = 
p
->
pNext
;

83 
	`‰ì
(
p
);

84 
p
 = (
PPF_DATA
 *)
≤
;

86 
µfHód
 = 
NULL
;

87 
µfLa°
 = 
NULL
;

89 i‡(
µfCache
 !
NULL
Ë
	`‰ì
(ppfCache);

90 
µfCache
 = 
NULL
;

91 
	}
}

93 
	$CheckPPFCache
(*
pB
, 
m
, 
s
, 
f
) {

94 
PPF_CACHE
 *
pc°¨t
, *
p˚nd
, *
p˝os
;

95 
addr
 = 
	`MSF2SECT
(
	`btoi
(
m
), btoi(
s
), btoi(
f
)), 
pos
, 
™z
, 
°¨t
;

97 i‡(
µfCache
 =
NULL
) ;

99 
pc°¨t
 = 
µfCache
;

100 i‡(
addr
 < 
pc°¨t
->addr) ;

101 
p˚nd
 = 
µfCache
 + 
iPPFNum
;

102 i‡(
addr
 > 
p˚nd
->addr) ;

105 i‡(
addr
 =
p˚nd
->addrË{ 
p˝os
 =Öcend; ; }

107 
p˝os
 = 
pc°¨t
 + (
p˚nd
 -Öcstart) / 2;

108 i‡(
p˝os
 =
pc°¨t
) ;

109 i‡(
addr
 < 
p˝os
->addr) {

110 
p˚nd
 = 
p˝os
;

113 i‡(
addr
 > 
p˝os
->addr) {

114 
pc°¨t
 = 
p˝os
;

120 i‡(
addr
 =
p˝os
->addr) {

121 
PPF_DATA
 *
p
 = 
p˝os
->
pNext
;

122 
p
 !
NULL
 &&Ö->
addr
 ==áddr) {

123 
pos
 = 
p
->po†- (
CD_FRAMESIZE_RAW
 - 
DATA_SIZE
);

124 
™z
 = 
p
->anz;

125 i‡(
pos
 < 0Ë{ 
°¨t
 = -pos;Öo†0; 
™z
 -= start; }

126 
°¨t
 = 0;

127 
	`mem˝y
(
pB
 + 
pos
, (*)(
p
 + 1Ë+ 
°¨t
, 
™z
);

128 
p
 =Ö->
pNext
;

131 
	}
}

133 
	$AddToPPF
(
s32
 
œdr
, s32 
pos
, s32 
™z
, *
µfmem
) {

134 i‡(
µfHód
 =
NULL
) {

135 
µfHód
 = (
PPF_DATA
 *)
	`mÆloc
((PPF_DATAË+ 
™z
);

136 
µfHód
->
addr
 = 
œdr
;

137 
µfHód
->
pNext
 = 
NULL
;

138 
µfHód
->
pos
 =Öos;

139 
µfHód
->
™z
 =ánz;

140 
	`mem˝y
(
µfHód
 + 1, 
µfmem
, 
™z
);

141 
iPPFNum
 = 1;

142 
µfLa°
 = 
µfHód
;

144 
PPF_DATA
 *
p
 = 
µfHód
;

145 
PPF_DATA
 *
∂a°
 = 
NULL
;

146 
PPF_DATA
 *
∑dd
;

148 i‡(
œdr
 > 
µfLa°
->
addr
 || (œd∏=µfLa°->add∏&& 
pos
 >ÖpfLast->pos)) {

149 
p
 = 
NULL
;

150 
∂a°
 = 
µfLa°
;

152 
p
 !
NULL
) {

153 i‡(
œdr
 < 
p
->
addr
) ;

154 i‡(
œdr
 =
p
->
addr
) {

155 
p
 && 
œdr
 =p->
addr
 && 
pos
 >Ö->pos) {

156 
∂a°
 = 
p
;

157 
p
 =Ö->
pNext
;

161 
∂a°
 = 
p
;

162 
p
 =Ö->
pNext
;

166 
∑dd
 = (
PPF_DATA
 *)
	`mÆloc
((PPF_DATAË+ 
™z
);

167 
∑dd
->
addr
 = 
œdr
;

168 
∑dd
->
pNext
 = 
p
;

169 
∑dd
->
pos
 =Öos;

170 
∑dd
->
™z
 =ánz;

171 
	`mem˝y
(
∑dd
 + 1, 
µfmem
, 
™z
);

172 
iPPFNum
++;

173 i‡(
∂a°
 =
NULL
Ë
µfHód
 = 
∑dd
;

174 
∂a°
->
pNext
 = 
∑dd
;

176 i‡(
∑dd
->
pNext
 =
NULL
Ë
µfLa°
 =Öadd;

178 
	}
}

180 
	$BuûdPPFCache
() {

181 
FILE
 *
µffûe
;

182 
buf„r
[12];

183 
mëhod
, 
undo
 = 0, 
blockcheck
 = 0;

184 
dizÀn
, 
dizyn
;

185 
µfmem
[512];

186 
szPPF
[
MAXPATHLEN
];

187 
cou¡
, 
£ekpos
, 
pos
;

188 
u32
 
™z
;

189 
s32
 
œdr
, 
off
, 
™x
;

191 
	`FªePPFCache
();

193 i‡(
CdromId
[0] == '\0') ;

196 
buf„r
[0] = 
	`touµî
(
CdromId
[0]);

197 
buf„r
[1] = 
	`touµî
(
CdromId
[1]);

198 
buf„r
[2] = 
	`touµî
(
CdromId
[2]);

199 
buf„r
[3] = 
	`touµî
(
CdromId
[3]);

200 
buf„r
[4] = '_';

201 
buf„r
[5] = 
CdromId
[4];

202 
buf„r
[6] = 
CdromId
[5];

203 
buf„r
[7] = 
CdromId
[6];

204 
buf„r
[8] = '.';

205 
buf„r
[9] = 
CdromId
[7];

206 
buf„r
[10] = 
CdromId
[8];

207 
buf„r
[11] = '\0';

209 
	`•rötf
(
szPPF
, "%s%s", 
C⁄fig
.
P©chesDú
, 
buf„r
);

211 
µffûe
 = 
	`f›í
(
szPPF
, "rb");

212 i‡(
µffûe
 =
NULL
) ;

214 
	`mem£t
(
buf„r
, 0, 5);

215 
	`‰ód
(
buf„r
, 3, 1, 
µffûe
);

217 i‡(
	`°rcmp
(
buf„r
, "PPF") != 0) {

218 
	`SysPrötf
(
	`_
("InvÆid PPFÖ©ch: %s.\n"), 
szPPF
);

219 
	`f˛o£
(
µffûe
);

223 
	`f£ek
(
µffûe
, 5, 
SEEK_SET
);

224 
mëhod
 = 
	`fgëc
(
µffûe
);

226 
mëhod
) {

228 
	`f£ek
(
µffûe
, 0, 
SEEK_END
);

229 
cou¡
 = 
	`·ñl
(
µffûe
);

230 
cou¡
 -= 56;

231 
£ekpos
 = 56;

235 
	`f£ek
(
µffûe
, -8, 
SEEK_END
);

237 
	`mem£t
(
buf„r
, 0, 5);

238 
	`‰ód
(
buf„r
, 4, 1, 
µffûe
);

240 i‡(
	`°rcmp
(".DIZ", 
buf„r
) != 0) {

241 
dizyn
 = 0;

243 
	`‰ód
(&
dizÀn
, 4, 1, 
µffûe
);

244 
dizÀn
 = 
	`SWAP32
(dizlen);

245 
dizyn
 = 1;

248 
	`f£ek
(
µffûe
, 0, 
SEEK_END
);

249 
cou¡
 = 
	`·ñl
(
µffûe
);

251 i‡(
dizyn
 == 0) {

252 
cou¡
 -= 1084;

253 
£ekpos
 = 1084;

255 
cou¡
 -= 1084;

256 
cou¡
 -= 38;

257 
cou¡
 -
dizÀn
;

258 
£ekpos
 = 1084;

263 
	`f£ek
(
µffûe
, 57, 
SEEK_SET
);

264 
blockcheck
 = 
	`fgëc
(
µffûe
);

265 
undo
 = 
	`fgëc
(
µffûe
);

267 
	`f£ek
(
µffûe
, -6, 
SEEK_END
);

268 
	`mem£t
(
buf„r
, 0, 5);

269 
	`‰ód
(
buf„r
, 4, 1, 
µffûe
);

270 
dizÀn
 = 0;

272 i‡(
	`°rcmp
(".DIZ", 
buf„r
) == 0) {

273 
	`f£ek
(
µffûe
, -2, 
SEEK_END
);

274 
	`‰ód
(&
dizÀn
, 2, 1, 
µffûe
);

275 
dizÀn
 = 
	`SWAP32
(dizlen);

276 
dizÀn
 += 36;

279 
	`f£ek
(
µffûe
, 0, 
SEEK_END
);

280 
cou¡
 = 
	`·ñl
(
µffûe
);

281 
cou¡
 -
dizÀn
;

283 i‡(
blockcheck
) {

284 
£ekpos
 = 1084;

285 
cou¡
 -= 1084;

287 
£ekpos
 = 60;

288 
cou¡
 -= 60;

293 
	`f˛o£
(
µffûe
);

294 
	`SysPrötf
(
	`_
("Unsuµ‹ãd PPF vîsi⁄ (%d).\n"), 
mëhod
 + 1);

300 
	`f£ek
(
µffûe
, 
£ekpos
, 
SEEK_SET
);

301 
	`‰ód
(&
pos
, 4, 1, 
µffûe
);

302 
pos
 = 
	`SWAP32
(pos);

304 i‡(
mëhod
 =2Ë
	`‰ód
(
buf„r
, 4, 1, 
µffûe
);

306 
™z
 = 
	`fgëc
(
µffûe
);

307 
	`‰ód
(
µfmem
, 
™z
, 1, 
µffûe
);

309 
œdr
 = 
pos
 / 
CD_FRAMESIZE_RAW
;

310 
off
 = 
pos
 % 
CD_FRAMESIZE_RAW
;

312 i‡(
off
 + 
™z
 > 
CD_FRAMESIZE_RAW
) {

313 
™x
 = 
off
 + 
™z
 - 
CD_FRAMESIZE_RAW
;

314 
™z
 -()
™x
;

315 
	`AddToPPF
(
œdr
 + 1, 0, 
™x
, &
µfmem
[
™z
]);

318 
	`AddToPPF
(
œdr
, 
off
, 
™z
, 
µfmem
);

320 i‡(
mëhod
 == 2) {

321 i‡(
undo
Ë
™z
 +=ánz;

322 
™z
 += 4;

325 
£ekpos
 = sìkpo†+ 5 + 
™z
;

326 
cou¡
 = cou¡ - 5 - 
™z
;

327 } 
cou¡
 != 0);

329 
	`f˛o£
(
µffûe
);

331 
	`FûlPPFCache
();

333 
	`SysPrötf
(
	`_
("Lﬂded PPF %d.0Ö©ch: %s.\n"), 
mëhod
 + 1, 
szPPF
);

334 
	}
}

337 *
	gsbi_£˘‹s
;

339 
	$LﬂdSBI
(c⁄° *
‚ame
, 
£˘‹_cou¡
) {

340 
buf„r
[16];

341 
FILE
 *
sbih™dÀ
;

342 
u8
 
sbôime
[3], 
t
;

343 
s
;

345 
sbih™dÀ
 = 
	`f›í
(
‚ame
, "rb");

346 i‡(
sbih™dÀ
 =
NULL
)

349 
sbi_£˘‹s
 = 
	`ˇŒoc
(1, 
£˘‹_cou¡
 / 8);

350 i‡(
sbi_£˘‹s
 =
NULL
) {

351 
	`f˛o£
(
sbih™dÀ
);

356 
	`‰ód
(
buf„r
, 1, 4, 
sbih™dÀ
);

358 
s
 = 
	`‰ód
(
sbôime
, 1, 3, 
sbih™dÀ
);

359 i‡(
s
 != 3)

361 
	`‰ód
(&
t
, 1, 1, 
sbih™dÀ
);

362 
t
) {

365 
s
 = 10;

369 
s
 = 3;

372 
	`f£ek
(
sbih™dÀ
, 
s
, 
SEEK_CUR
);

374 
s
 = 
	`MSF2SECT
(
	`btoi
(
sbôime
[0]), btoi(sbitime[1]), btoi(sbitime[2]));

375 i‡(
s
 < 
£˘‹_cou¡
)

376 
sbi_£˘‹s
[
s
 >> 3] |= 1 << (s&7);

378 
	`SysPrötf
(
	`_
("SBI se˘‹ %d >%d?\n"), 
s
, 
£˘‹_cou¡
);

381 
	`f˛o£
(
sbih™dÀ
);

384 
	}
}

386 
	$U∆ﬂdSBI
() {

387 i‡(
sbi_£˘‹s
) {

388 
	`‰ì
(
sbi_£˘‹s
);

389 
sbi_£˘‹s
 = 
NULL
;

391 
	}
}

	@libpcsxcore/ppf.h

19 #i‚de‡
__PPF_H__


20 
	#__PPF_H__


	)

22 #ifde‡
__˝lu•lus


26 
BuûdPPFCache
();

27 
FªePPFCache
();

28 
CheckPPFCache
(*
pB
, 
m
, 
s
, 
f
);

30 
LﬂdSBI
(c⁄° *
‚ame
, 
£˘‹_cou¡
);

31 
U∆ﬂdSBI
();

33 *
sbi_£˘‹s
;

35 
	~"cdrom.h
"

37 
ölöe
 
CheckSBI
(c⁄° 
u8
 *
t
)

39 
	gs
;

40 i‡(
	gsbi_£˘‹s
 =
NULL
)

43 
	gs
 = 
MSF2SECT
(
t
[0],Å[1],Å[2]);

44  (
	gsbi_£˘‹s
[
s
 >> 3] >> (
	gs
 & 7)) & 1;

47 #ifde‡
__˝lu•lus


	@libpcsxcore/psxbios.c

26 
	~"psxbios.h
"

27 
	~"psxhw.h
"

28 
	~"gpu.h
"

29 
	~<zlib.h
>

31 #unde‡
SysPrötf


32 
	#SysPrötf
 i‡(
C⁄fig
.
PsxOut
Ë
¥ötf


	)

34 *
	gbiosA0n
[256] = {

95 *
	gbiosB0n
[256] = {

128 *
	gbiosC0n
[256] = {

142 
	#©
 (
psxRegs
.
GPR
.
n
.
©
)

	)

143 
	#v0
 (
psxRegs
.
GPR
.
n
.
v0
)

	)

144 
	#v1
 (
psxRegs
.
GPR
.
n
.
v1
)

	)

145 
	#a0
 (
psxRegs
.
GPR
.
n
.
a0
)

	)

146 
	#a1
 (
psxRegs
.
GPR
.
n
.
a1
)

	)

147 
	#a2
 (
psxRegs
.
GPR
.
n
.
a2
)

	)

148 
	#a3
 (
psxRegs
.
GPR
.
n
.
a3
)

	)

149 
	#t0
 (
psxRegs
.
GPR
.
n
.
t0
)

	)

150 
	#t1
 (
psxRegs
.
GPR
.
n
.
t1
)

	)

151 
	#t2
 (
psxRegs
.
GPR
.
n
.
t2
)

	)

152 
	#t3
 (
psxRegs
.
GPR
.
n
.
t3
)

	)

153 
	#t4
 (
psxRegs
.
GPR
.
n
.
t4
)

	)

154 
	#t5
 (
psxRegs
.
GPR
.
n
.
t5
)

	)

155 
	#t6
 (
psxRegs
.
GPR
.
n
.
t6
)

	)

156 
	#t7
 (
psxRegs
.
GPR
.
n
.
t7
)

	)

157 
	#t8
 (
psxRegs
.
GPR
.
n
.
t8
)

	)

158 
	#t9
 (
psxRegs
.
GPR
.
n
.
t9
)

	)

159 
	#s0
 (
psxRegs
.
GPR
.
n
.
s0
)

	)

160 
	#s1
 (
psxRegs
.
GPR
.
n
.
s1
)

	)

161 
	#s2
 (
psxRegs
.
GPR
.
n
.
s2
)

	)

162 
	#s3
 (
psxRegs
.
GPR
.
n
.
s3
)

	)

163 
	#s4
 (
psxRegs
.
GPR
.
n
.
s4
)

	)

164 
	#s5
 (
psxRegs
.
GPR
.
n
.
s5
)

	)

165 
	#s6
 (
psxRegs
.
GPR
.
n
.
s6
)

	)

166 
	#s7
 (
psxRegs
.
GPR
.
n
.
s7
)

	)

167 
	#k0
 (
psxRegs
.
GPR
.
n
.
k0
)

	)

168 
	#k1
 (
psxRegs
.
GPR
.
n
.
k1
)

	)

169 
	#gp
 (
psxRegs
.
GPR
.
n
.
gp
)

	)

170 
	#•
 (
psxRegs
.
GPR
.
n
.
•
)

	)

171 
	#Â
 (
psxRegs
.
GPR
.
n
.
s8
)

	)

172 
	#ø
 (
psxRegs
.
GPR
.
n
.
ø
)

	)

173 
	#pc0
 (
psxRegs
.
pc
)

	)

175 
	#Ra0
 ((*)
	`PSXM
(
a0
))

	)

176 
	#Ra1
 ((*)
	`PSXM
(
a1
))

	)

177 
	#Ra2
 ((*)
	`PSXM
(
a2
))

	)

178 
	#Ra3
 ((*)
	`PSXM
(
a3
))

	)

179 
	#Rv0
 ((*)
	`PSXM
(
v0
))

	)

180 
	#R•
 ((*)
	`PSXM
(
•
))

	)

183 
u32
 
	mdesc
;

184 
s32
 
	m°©us
;

185 
s32
 
	mmode
;

186 
u32
 
	mfh™dÀr
;

187 } 
	tEvCB
[32];

189 
	#EvStUNUSED
 0x0000

	)

190 
	#EvStWAIT
 0x1000

	)

191 
	#EvStACTIVE
 0x2000

	)

192 
	#EvStALREADY
 0x4000

	)

194 
	#EvMdINTR
 0x1000

	)

195 
	#EvMdNOINTR
 0x2000

	)

207 
s32
 
	m°©us
;

208 
s32
 
	mmode
;

209 
u32
 
	mªg
[32];

210 
u32
 
	mfunc
;

211 } 
	tTCB
;

214 
u32
 
	m_pc0
;

215 
u32
 
	mgp0
;

216 
u32
 
	mt_addr
;

217 
u32
 
	mt_size
;

218 
u32
 
	md_addr
;

219 
u32
 
	md_size
;

220 
u32
 
	mb_addr
;

221 
u32
 
	mb_size
;

222 
u32
 
	mS_addr
;

223 
u32
 
	ms_size
;

224 
u32
 
	m_•
, 
	m_Â
, 
	m_gp
, 
	mªt
, 
	mba£
;

225 } 
	tEXEC
;

227 
	sDIRENTRY
 {

228 
	m«me
[20];

229 
s32
 
	m©å
;

230 
s32
 
	msize
;

231 
u32
 
	m√xt
;

232 
s32
 
	mhód
;

233 
	msy°em
[4];

237 
	m«me
[32];

238 
u32
 
	mmode
;

239 
u32
 
	moff£t
;

240 
u32
 
	msize
;

241 
u32
 
	mmcfûe
;

242 } 
	tFûeDesc
;

244 
u32
 *
	gjmp_öt
 = 
NULL
;

245 *
	g∑d_buf
 = 
NULL
;

246 *
	g∑d_buf1
 = 
NULL
, *
	g∑d_buf2
 = NULL;

247 
	g∑d_buf1Àn
, 
	g∑d_buf2Àn
;

249 
u32
 
	gªgs
[35];

250 
EvCB
 *
	gEvít
;

251 
EvCB
 *
	gHwEV
;

252 
EvCB
 *
	gEvEV
;

253 
EvCB
 *
	gRcEV
;

254 
EvCB
 *
	gUeEV
;

255 
EvCB
 *
	gSwEV
;

256 
EvCB
 *
	gThEV
;

257 
u32
 *
	ghóp_addr
 = 
NULL
;

258 
u32
 *
	ghóp_íd
 = 
NULL
;

259 
u32
 
	gSysI¡RP
[8];

260 
	gC¨dSèã
 = -1;

261 
TCB
 
	gThªad
[8];

262 
	gCurThªad
 = 0;

263 
FûeDesc
 
	gFDesc
[32];

264 
u32
 
	gˇrd_a˘ive_ch™
;

266 
boﬁón
 
	ghÀSo·CÆl
 = 
FALSE
;

268 
ölöe
 
	$so·CÆl
(
u32
 
pc
) {

269 
pc0
 = 
pc
;

270 
ø
 = 0x80001000;

272 
hÀSo·CÆl
 = 
TRUE
;

274 
pc0
 !0x80001000Ë
psxCpu
->
	`ExecuãBlock
();

276 
hÀSo·CÆl
 = 
FALSE
;

277 
	}
}

279 
ölöe
 
	$so·CÆl2
(
u32
 
pc
) {

280 
u32
 
§a
 = 
ø
;

281 
pc0
 = 
pc
;

282 
ø
 = 0x80001000;

284 
hÀSo·CÆl
 = 
TRUE
;

286 
pc0
 !0x80001000Ë
psxCpu
->
	`ExecuãBlock
();

287 
ø
 = 
§a
;

289 
hÀSo·CÆl
 = 
FALSE
;

290 
	}
}

292 
ölöe
 
	$DñivîEvít
(
u32
 
ev
, u32 
•ec
) {

293 i‡(
Evít
[
ev
][
•ec
].
°©us
 !
EvStACTIVE
) ;

296 i‡(
Evít
[
ev
][
•ec
].
mode
 =
EvMdINTR
) {

297 
	`so·CÆl2
(
Evít
[
ev
][
•ec
].
fh™dÀr
);

298 } 
Evít
[
ev
][
•ec
].
°©us
 = 
EvStALREADY
;

299 
	}
}

301 
ölöe
 
	$SaveRegs
() {

302 
	`mem˝y
(
ªgs
, 
psxRegs
.
GPR
.
r
, 32*4);

303 
ªgs
[32] = 
psxRegs
.
GPR
.
n
.
lo
;

304 
ªgs
[33] = 
psxRegs
.
GPR
.
n
.
hi
;

305 
ªgs
[34] = 
psxRegs
.
pc
;

306 
	}
}

308 
ölöe
 
	$LﬂdRegs
() {

309 
	`mem˝y
(
psxRegs
.
GPR
.
r
, 
ªgs
, 32*4);

310 
psxRegs
.
GPR
.
n
.
lo
 = 
ªgs
[32];

311 
psxRegs
.
GPR
.
n
.
hi
 = 
ªgs
[33];

312 
	}
}

320 
	$psxBios_abs
() {

321 i‡((
s32
)
a0
 < 0Ë
v0
 = -(s32)a0;

322 
v0
 = 
a0
;

323 
pc0
 = 
ø
;

324 
	}
}

326 
	$psxBios_œbs
() {

327 
	`psxBios_abs
();

328 
	}
}

330 
	$psxBios_©oi
() {

331 
s32
 
n
 = 0, 
f
 = 0;

332 *
p
 = (*)
Ra0
;

334 ;;
p
++) {

335 *
p
) {

337 '-': 
f
++;

338 '+': 
p
++;

343 *
p
 >= '0' && *p <= '9') {

344 
n
 =Ç * 10 + *
p
++ - '0';

347 
v0
 = (
f
 ? -
n
 :Ç);

348 
pc0
 = 
ø
;

349 
	}
}

351 
	$psxBios_©ﬁ
() {

352 
	`psxBios_©oi
();

353 
	}
}

355 
	$psxBios_£tjmp
() {

356 
u32
 *
jmp_buf
 = (u32 *)
Ra0
;

357 
i
;

359 #ifde‡
PSXBIOS_LOG


360 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosA0n
[0x13]);

363 
jmp_buf
[0] = 
ø
;

364 
jmp_buf
[1] = 
•
;

365 
jmp_buf
[2] = 
Â
;

366 
i
 = 0; i < 8; i++)

367 
jmp_buf
[3 + 
i
] = 
psxRegs
.
GPR
.
r
[16 + i];

368 
jmp_buf
[11] = 
gp
;

370 
v0
 = 0; 
pc0
 = 
ø
;

371 
	}
}

373 
	$psxBios_l⁄gjmp
() {

374 
u32
 *
jmp_buf
 = (u32 *)
Ra0
;

375 
i
;

377 #ifde‡
PSXBIOS_LOG


378 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosA0n
[0x14]);

381 
ø
 = 
jmp_buf
[0];

382 
•
 = 
jmp_buf
[1];

383 
Â
 = 
jmp_buf
[2];

384 
i
 = 0; i < 8; i++)

385 
psxRegs
.
GPR
.
r
[16 + 
i
] = 
jmp_buf
[3 + i];

386 
gp
 = 
jmp_buf
[11];

388 
v0
 = 
a1
; 
pc0
 = 
ø
;

389 
	}
}

391 
	$psxBios_°rˇt
() {

392 *
p1
 = (*)
Ra0
, *
p2
 = (*)
Ra1
;

394 #ifde‡
PSXBIOS_LOG


395 
	`PSXBIOS_LOG
("psxBios_%s: %s, %s\n", 
biosA0n
[0x15], 
Ra0
, 
Ra1
);

398 *
p1
++);

399 --
p1
;

400 (*
p1
++ = *
p2
++) != '\0');

402 
v0
 = 
a0
; 
pc0
 = 
ø
;

403 
	}
}

405 
	$psxBios_°∫ˇt
() {

406 *
p1
 = (*)
Ra0
, *
p2
 = (*)
Ra1
;

407 
s32
 
n
 = 
a2
;

409 #ifde‡
PSXBIOS_LOG


410 
	`PSXBIOS_LOG
("psxBios_%s: %†(%x), %†(%x), %d\n", 
biosA0n
[0x16], 
Ra0
, 
a0
, 
Ra1
, 
a1
, 
a2
);

413 *
p1
++);

414 --
p1
;

415 (*
p1
++ = *
p2
++) != '\0') {

416 i‡(--
n
 < 0) {

417 *--
p1
 = '\0';

422 
v0
 = 
a0
; 
pc0
 = 
ø
;

423 
	}
}

425 
	$psxBios_°rcmp
() {

426 *
p1
 = (*)
Ra0
, *
p2
 = (*)
Ra1
;

428 #ifde‡
PSXBIOS_LOG


429 
	`PSXBIOS_LOG
("psxBios_%s: %†(%x), %†(%x)\n", 
biosA0n
[0x17], 
Ra0
, 
a0
, 
Ra1
, 
a1
);

432 *
p1
 =*
p2
++) {

433 i‡(*
p1
++ == '\0') {

434 
v0
 = 0;

435 
pc0
 = 
ø
;

440 
v0
 = (*
p1
 - *--
p2
);

441 
pc0
 = 
ø
;

442 
	}
}

444 
	$psxBios_°∫cmp
() {

445 *
p1
 = (*)
Ra0
, *
p2
 = (*)
Ra1
;

446 
s32
 
n
 = 
a2
;

448 #ifde‡
PSXBIOS_LOG


449 
	`PSXBIOS_LOG
("psxBios_%s: %†(%x), %†(%x), %d\n", 
biosA0n
[0x18], 
Ra0
, 
a0
, 
Ra1
, 
a1
, 
a2
);

452 --
n
 >0 && *
p1
 =*
p2
++) {

453 i‡(*
p1
++ == '\0') {

454 
v0
 = 0;

455 
pc0
 = 
ø
;

460 
v0
 = (
n
 < 0 ? 0 : *
p1
 - *--
p2
);

461 
pc0
 = 
ø
;

462 
	}
}

464 
	$psxBios_°r˝y
() {

465 *
p1
 = (*)
Ra0
, *
p2
 = (*)
Ra1
;

466 (*
p1
++ = *
p2
++) != '\0');

468 
v0
 = 
a0
; 
pc0
 = 
ø
;

469 
	}
}

471 
	$psxBios_°∫˝y
() {

472 *
p1
 = (*)
Ra0
, *
p2
 = (*)
Ra1
;

473 
s32
 
n
 = 
a2
, 
i
;

475 
i
 = 0; i < 
n
; i++) {

476 i‡((*
p1
++ = *
p2
++) == '\0') {

477 ++
i
 < 
n
) {

478 *
p1
++ = '\0';

480 
v0
 = 
a0
; 
pc0
 = 
ø
;

485 
v0
 = 
a0
; 
pc0
 = 
ø
;

486 
	}
}

488 
	$psxBios_°æí
() {

489 *
p
 = (*)
Ra0
;

490 
v0
 = 0;

491 *
p
++Ë
v0
++;

492 
pc0
 = 
ø
;

493 
	}
}

495 
	$psxBios_ödex
() {

496 *
p
 = (*)
Ra0
;

499 i‡(*
p
 =
a1
) {

500 
v0
 = 
a0
 + (
p
 - (*)
Ra0
);

501 
pc0
 = 
ø
;

504 } *
p
++ != '\0');

506 
v0
 = 0; 
pc0
 = 
ø
;

507 
	}
}

509 
	$psxBios_rödex
() {

510 *
p
 = (*)
Ra0
;

512 
v0
 = 0;

515 i‡(*
p
 =
a1
)

516 
v0
 = 
a0
 + (
p
 - (*)
Ra0
);

517 } *
p
++ != '\0');

519 
pc0
 = 
ø
;

520 
	}
}

522 
	$psxBios_°rchr
() {

523 
	`psxBios_ödex
();

524 
	}
}

526 
	$psxBios_°ºchr
() {

527 
	`psxBios_rödex
();

528 
	}
}

530 
	$psxBios_°Ωbrk
() {

531 *
p1
 = (*)
Ra0
, *
p2
 = (*)
Ra1
, *
sˇ≈
, 
c
, 
sc
;

533 (
c
 = *
p1
++) != '\0') {

534 
sˇ≈
 = 
p2
; (
sc
 = *scanp++) != '\0';) {

535 i‡(
sc
 =
c
) {

536 
v0
 = 
a0
 + (
p1
 - 1 - (*)
Ra0
);

537 
pc0
 = 
ø
;

544 
v0
 = 
a0
; 
pc0
 = 
ø
;

545 
	}
}

547 
	$psxBios_°r•n
() {

548 *
p1
, *
p2
;

550 
p1
 = (*)
Ra0
; *p1 != '\0';Ö1++) {

551 
p2
 = (*)
Ra1
; *p2 !'\0' && *p2 !*
p1
;Ö2++);

552 i‡(*
p2
 == '\0') ;

555 
v0
 = 
p1
 - (*)
Ra0
; 
pc0
 = 
ø
;

556 
	}
}

558 
	$psxBios_°rc•n
() {

559 *
p1
, *
p2
;

561 
p1
 = (*)
Ra0
; *p1 != '\0';Ö1++) {

562 
p2
 = (*)
Ra1
; *p2 !'\0' && *p2 !*
p1
;Ö2++);

563 i‡(*
p2
 != '\0') ;

566 
v0
 = 
p1
 - (*)
Ra0
; 
pc0
 = 
ø
;

567 
	}
}

569 
	$psxBios_°πok
() {

570 *
pcA0
 = (*)
Ra0
;

571 *
pcRë
 = 
	`°πok
(
pcA0
, (*)
Ra1
);

572 i‡(
pcRë
)

573 
v0
 = 
a0
 + 
pcRë
 - 
pcA0
;

575 
v0
 = 0;

576 
pc0
 = 
ø
;

577 
	}
}

579 
	$psxBios_°r°r
() {

580 *
p
 = (*)
Ra0
, *
p1
, *
p2
;

582 *
p
 != '\0') {

583 
p1
 = 
p
;

584 
p2
 = (*)
Ra1
;

586 *
p1
 !'\0' && *
p2
 != '\0' && *p1 == *p2) {

587 
p1
++; 
p2
++;

590 i‡(*
p2
 == '\0') {

591 
v0
 = 
a0
 + (
p
 - (*)
Ra0
);

592 
pc0
 = 
ø
;

596 
p
++;

599 
v0
 = 0; 
pc0
 = 
ø
;

600 
	}
}

602 
	$psxBios_touµî
() {

603 
v0
 = (
s8
)(
a0
 & 0xff);

604 i‡(
v0
 >= 'a' && v0 <= 'z') v0 -= 'a' - 'A';

605 
pc0
 = 
ø
;

606 
	}
}

608 
	$psxBios_tﬁowî
() {

609 
v0
 = (
s8
)(
a0
 & 0xff);

610 i‡(
v0
 >= 'A' && v0 <= 'Z') v0 += 'a' - 'A';

611 
pc0
 = 
ø
;

612 
	}
}

614 
	$psxBios_bc›y
() {

615 *
p1
 = (*)
Ra1
, *
p2
 = (*)
Ra0
;

616 (
s32
)
a2
-- > 0Ë*
p1
++ = *
p2
++;

618 
pc0
 = 
ø
;

619 
	}
}

621 
	$psxBios_bzîo
() {

622 *
p
 = (*)
Ra0
;

623 (
s32
)
a1
-- > 0Ë*
p
++ = '\0';

625 
pc0
 = 
ø
;

626 
	}
}

628 
	$psxBios_bcmp
() {

629 *
p1
 = (*)
Ra0
, *
p2
 = (*)
Ra1
;

631 i‡(
a0
 =0 || 
a1
 =0Ë{ 
v0
 = 0; 
pc0
 = 
ø
; ; }

633 (
s32
)
a2
-- > 0) {

634 i‡(*
p1
++ !*
p2
++) {

635 
v0
 = *
p1
 - *
p2
;

636 
pc0
 = 
ø
;

641 
v0
 = 0; 
pc0
 = 
ø
;

642 
	}
}

644 
	$psxBios_mem˝y
() {

645 *
p1
 = (*)
Ra0
, *
p2
 = (*)
Ra1
;

646 (
s32
)
a2
-- > 0Ë*
p1
++ = *
p2
++;

648 
v0
 = 
a0
; 
pc0
 = 
ø
;

649 
	}
}

651 
	$psxBios_mem£t
() {

652 *
p
 = (*)
Ra0
;

653 (
s32
)
a2
-- > 0Ë*
p
++ = ()
a1
;

655 
a2
 = 0;

656 
v0
 = 
a0
; 
pc0
 = 
ø
;

657 
	}
}

659 
	$psxBios_memmove
() {

660 *
p1
 = (*)
Ra0
, *
p2
 = (*)
Ra1
;

662 i‡(
p2
 <
p1
 &&Ö2 + 
a2
 >Ö1) {

663 
a2
++;

664 
p1
 +
a2
;

665 
p2
 +
a2
;

666 (
s32
)
a2
-- > 0Ë*--
p1
 = *--
p2
;

668 (
s32
)
a2
-- > 0Ë*
p1
++ = *
p2
++;

671 
v0
 = 
a0
; 
pc0
 = 
ø
;

672 
	}
}

674 
	$psxBios_memcmp
() {

675 
	`psxBios_bcmp
();

676 
	}
}

678 
	$psxBios_memchr
() {

679 *
p
 = (*)
Ra0
;

681 (
s32
)
a2
-- > 0) {

682 i‡(*
p
++ !(
s8
)
a1
) ;

683 
v0
 = 
a0
 + (
p
 - (*)
Ra0
 - 1);

684 
pc0
 = 
ø
;

688 
v0
 = 0; 
pc0
 = 
ø
;

689 
	}
}

691 
	$psxBios_ønd
() {

692 
u32
 
s
 = 
	`psxMu32
(0x9010) * 1103515245 + 12345;

693 
v0
 = (
s
 >> 16) & 0x7fff;

694 
	`psxMu32ªf
(0x9010Ë
	`SWAPu32
(
s
);

695 
pc0
 = 
ø
;

696 
	}
}

698 
	$psxBios_§™d
() {

699 
	`psxMu32ªf
(0x9010Ë
	`SWAPu32
(
a0
);

700 
pc0
 = 
ø
;

701 
	}
}

703 
u32
 
	gqscmpfunc
, 
	gqswidth
;

705 
ölöe
 
	$qscmp
(*
a
, *
b
) {

706 
u32
 
ß0
 = 
a0
;

708 
a0
 = 
ß0
 + (
a
 - (*)
	`PSXM
(sa0));

709 
a1
 = 
ß0
 + (
b
 - (*)
	`PSXM
(sa0));

711 
	`so·CÆl2
(
qscmpfunc
);

713 
a0
 = 
ß0
;

714  (
s32
)
v0
;

715 
	}
}

717 
ölöe
 
	$qexch™ge
(*
i
, *
j
) {

718 
t
;

719 
n
 = 
qswidth
;

722 
t
 = *
i
;

723 *
i
++ = *
j
;

724 *
j
++ = 
t
;

725 } --
n
);

726 
	}
}

728 
ölöe
 
	$q3exch™ge
(*
i
, *
j
, *
k
) {

729 
t
;

730 
n
 = 
qswidth
;

733 
t
 = *
i
;

734 *
i
++ = *
k
;

735 *
k
++ = *
j
;

736 *
j
++ = 
t
;

737 } --
n
);

738 
	}
}

740 
	$qs‹t_maö
(*
a
, *
l
) {

741 *
i
, *
j
, *
Õ
, *
hp
;

742 
c
;

743 
n
;

745 
°¨t
:

746 i‡((
n
 = 
l
 - 
a
Ë<
qswidth
)

748 
n
 = 
qswidth
 * (n / (2 * qswidth));

749 
hp
 = 
Õ
 = 
a
 + 
n
;

750 
i
 = 
a
;

751 
j
 = 
l
 - 
qswidth
;

752 
TRUE
) {

753 i‡(
i
 < 
Õ
) {

754 i‡((
c
 = 
	`qscmp
(
i
, 
Õ
)) == 0) {

755 
	`qexch™ge
(
i
, 
Õ
 -
qswidth
);

758 i‡(
c
 < 0) {

759 
i
 +
qswidth
;

764 
lo›
:

765 i‡(
j
 > 
hp
) {

766 i‡((
c
 = 
	`qscmp
(
hp
, 
j
)) == 0) {

767 
	`qexch™ge
(
hp
 +
qswidth
, 
j
);

768 
lo›
;

770 i‡(
c
 > 0) {

771 i‡(
i
 =
Õ
) {

772 
	`q3exch™ge
(
i
, 
hp
 +
qswidth
, 
j
);

773 
i
 = 
Õ
 +
qswidth
;

774 
lo›
;

776 
	`qexch™ge
(
i
, 
j
);

777 
j
 -
qswidth
;

778 
i
 +
qswidth
;

781 
j
 -
qswidth
;

782 
lo›
;

785 i‡(
i
 =
Õ
) {

786 i‡(
Õ
 - 
a
 >
l
 - 
hp
) {

787 
	`qs‹t_maö
(
hp
 + 
qswidth
, 
l
);

788 
l
 = 
Õ
;

790 
	`qs‹t_maö
(
a
, 
Õ
);

791 
a
 = 
hp
 + 
qswidth
;

793 
°¨t
;

796 
	`q3exch™ge
(
j
, 
Õ
 -
qswidth
, 
i
);

797 
j
 = 
hp
 -
qswidth
;

799 
	}
}

801 
	$psxBios_qs‹t
() {

802 
qswidth
 = 
a2
;

803 
qscmpfunc
 = 
a3
;

804 
	`qs‹t_maö
((*)
Ra0
, (*)Ra0 + 
a1
 * 
a2
);

806 
pc0
 = 
ø
;

807 
	}
}

809 
	$psxBios_mÆloc
() {

810 *
chunk
, *
√wchunk
 = 
NULL
;

811 
dsize
 = 0, 
csize
, 
c°©
;

812 
cﬁÊag
;

813 #ifde‡
PSXBIOS_LOG


814 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosA0n
[0x33]);

818 
chunk
 = 
hóp_addr
;

819 
cﬁÊag
 = 0;

820 
chunk
 < 
hóp_íd
) {

822 
csize
 = ((
u32
)*
chunk
) & 0xfffffffc;

823 
c°©
 = ((
u32
)*
chunk
) & 1;

826 if(
c°©
 == 1) {

827 if(
cﬁÊag
 == 0) {

828 
√wchunk
 = 
chunk
;

829 
dsize
 = 
csize
;

830 
cﬁÊag
 = 1;

832 
dsize
 +(
csize
+4);

836 if(
cﬁÊag
 == 1) {

837 
cﬁÊag
 = 0;

838 *
√wchunk
 = 
	`SWAP32
(
dsize
 | 1);

843 
chunk
 = (
u32
*)((
u±r
)chunk + 
csize
 + 4);

846 i‡(
cﬁÊag
 == 1)

847 *
√wchunk
 = 
	`SWAP32
(
dsize
 | 1);

849 
chunk
 = 
hóp_addr
;

850 
csize
 = ((
u32
)*
chunk
) & 0xfffffffc;

851 
c°©
 = ((
u32
)*
chunk
) & 1;

852 
dsize
 = (
a0
 + 3) & 0xfffffffc;

855 i‡(
chunk
 =
NULL
) {

856 
	`SysPrötf
("mÆlo¯%x,%x: Unöôülized Hóp!\n", 
v0
, 
a0
);

857 
v0
 = 0;

858 
pc0
 = 
ø
;

863 (
dsize
 > 
csize
 || 
c°©
 =0Ë&& 
chunk
 < 
hóp_íd
 ) {

864 
chunk
 = (
u32
*)((
u±r
)chunk + 
csize
 + 4);

865 
csize
 = ((
u32
)*
chunk
) & 0xfffffffc;

866 
c°©
 = ((
u32
)*
chunk
) & 1;

870 if(
chunk
 >
hóp_íd
Ë{ 
	`SysPrötf
("mÆlo¯%x,%x: Ouào‡mem‹yÉº‹!\n", 
v0
, 
a0
); v0 = 0; 
pc0
 = 
ø
; ; }

873 if(
dsize
 =
csize
) {

875 *
chunk
 &= 0xfffffffc;

879 *
chunk
 = 
	`SWAP32
(
dsize
);

880 
√wchunk
 = (
u32
*)((
u±r
)
chunk
 + 
dsize
 + 4);

881 *
√wchunk
 = 
	`SWAP32
(((
csize
 - 
dsize
 - 4) & 0xfffffffc) | 1);

885 
v0
 = (()
chunk
 - ()
psxM
) + 4;

886 
v0
|= 0x80000000;

887 
	`SysPrötf
 ("mÆlo¯%x,%x\n", 
v0
, 
a0
);

888 
pc0
 = 
ø
;

889 
	}
}

891 
	$psxBios_‰ì
() {

893 #ifde‡
PSXBIOS_LOG


894 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosA0n
[0x34]);

897 
	`SysPrötf
("‰ì %x: %x byãs\n", 
a0
, *(
u32
*)(
Ra0
-4));

899 *(
u32
*)(
Ra0
-4) |= 1;

900 
pc0
 = 
ø
;

901 
	}
}

903 
	$psxBios_ˇŒoc
() {

904 *
pv0
;

905 #ifde‡
PSXBIOS_LOG


906 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosA0n
[0x37]);

909 
a0
 =á0 * 
a1
;

910 
	`psxBios_mÆloc
();

911 
pv0
 = 
Rv0
;

912 i‡(
pv0
)

913 
	`mem£t
(
pv0
, 0, 
a0
);

914 
	}
}

916 
	$psxBios_ªÆloc
() {

917 
u32
 
block
 = 
a0
;

918 
u32
 
size
 = 
a1
;

919 #ifde‡
PSXBIOS_LOG


920 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosA0n
[0x38]);

923 
a0
 = 
block
;

924 
	`psxBios_‰ì
();

925 
a0
 = 
size
;

926 
	`psxBios_mÆloc
();

927 
	}
}

931 
	$psxBios_InôHóp
() {

932 
size
;

934 #ifde‡
PSXBIOS_LOG


935 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosA0n
[0x39]);

938 i‡(((
a0
 & 0x1fffffË+ 
a1
)>0x200000Ë
size
 = 0x1ffffc - (a0 & 0x1fffff);

939 
size
 = 
a1
;

941 
size
 &= 0xfffffffc;

943 
hóp_addr
 = (
u32
 *)
Ra0
;

944 
hóp_íd
 = (
u32
 *)((
u8
 *)
hóp_addr
 + 
size
);

945 *
hóp_addr
 = 
	`SWAP32
(
size
 | 1);

947 
	`SysPrötf
("InôHó∞%x,%x : %x %x\n",
a0
,
a1
, ()((
u±r
)
hóp_addr
-(u±r)
psxM
), 
size
);

949 
pc0
 = 
ø
;

950 
	}
}

952 
	$psxBios_gëch¨
() {

953 
v0
 = 
	`gëch¨
(); 
pc0
 = 
ø
;

954 
	}
}

956 
	$psxBios_¥ötf
() {

957 
tmp
[1024];

958 
tmp2
[1024];

959 
u32
 
ßve
[4];

960 *
±mp
 = 
tmp
;

961 
n
=1, 
i
=0, 
j
;

962 *
p•
;

964 
p•
 = 
	`PSXM
(
•
);

965 i‡(
p•
) {

966 
	`mem˝y
(
ßve
, 
p•
, 4 * 4);

967 
	`psxMu32ªf
(
•
Ë
	`SWAP32
((
u32
)
a0
);

968 
	`psxMu32ªf
(
•
 + 4Ë
	`SWAP32
((
u32
)
a1
);

969 
	`psxMu32ªf
(
•
 + 8Ë
	`SWAP32
((
u32
)
a2
);

970 
	`psxMu32ªf
(
•
 + 12Ë
	`SWAP32
((
u32
)
a3
);

973 
Ra0
[
i
]) {

974 
Ra0
[
i
]) {

976 
j
 = 0;

977 
tmp2
[
j
++] = '%';

978 
_°¨t
:

979 
Ra0
[++
i
]) {

982 
tmp2
[
j
++] = 
Ra0
[
i
]; 
_°¨t
;

984 i‡(
Ra0
[
i
] >= '0' && Ra0[i] <= '9') {

985 
tmp2
[
j
++] = 
Ra0
[
i
];

986 
_°¨t
;

990 
tmp2
[
j
++] = 
Ra0
[
i
];

991 
tmp2
[
j
] = 0;

993 
Ra0
[
i
]) {

995 
±mp
 +
	`•rötf
’tmp, 
tmp2
, ()
	`psxMu32
(
•
 + 
n
 * 4));Ç++; ;

999 
±mp
 +
	`•rötf
’tmp, 
tmp2
, ()
	`psxMu32
(
•
 + 
n
 * 4));Ç++; ;

1005 
±mp
 +
	`•rötf
’tmp, 
tmp2
, ()
	`psxMu32
(
•
 + 
n
 * 4));Ç++; ;

1007 
±mp
 +
	`•rötf
’tmp, 
tmp2
, ()
	`psxMu32
(
•
 + 
n
 * 4));Ç++; ;

1009 
±mp
 +
	`•rötf
’tmp, 
tmp2
, (*)
	`PSXM
(
	`psxMu32
(
•
 + 
n
 * 4)));Ç++; ;

1011 *
±mp
++ = 
Ra0
[
i
]; ;

1013 
i
++;

1016 *
±mp
++ = 
Ra0
[
i
++];

1019 *
±mp
 = 0;

1021 i‡(
p•
)

1022 
	`mem˝y
(
p•
, 
ßve
, 4 * 4);

1024 
	`SysPrötf
("%s", 
tmp
);

1026 
pc0
 = 
ø
;

1027 
	}
}

1029 
	$psxBios_f‹m©
() {

1030 i‡(
	`°rcmp
(
Ra0
, "bu00:"Ë=0 && 
C⁄fig
.
Mcd1
[0] != '\0')

1032 
	`Cª©eMcd
(
C⁄fig
.
Mcd1
);

1033 
	`LﬂdMcd
(1, 
C⁄fig
.
Mcd1
);

1034 
v0
 = 1;

1036 i‡(
	`°rcmp
(
Ra0
, "bu10:"Ë=0 && 
C⁄fig
.
Mcd2
[0] != '\0')

1038 
	`Cª©eMcd
(
C⁄fig
.
Mcd2
);

1039 
	`LﬂdMcd
(2, 
C⁄fig
.
Mcd2
);

1040 
v0
 = 1;

1044 
v0
 = 0;

1046 
pc0
 = 
ø
;

1047 
	}
}

1053 
	$psxBios_Lﬂd
() {

1054 
EXE_HEADER
 
ehódî
;

1055 *
∑1
;

1057 #ifde‡
PSXBIOS_LOG


1058 
	`PSXBIOS_LOG
("psxBios_%s: %s, %x\n", 
biosA0n
[0x42], 
Ra0
, 
a1
);

1061 
∑1
 = 
Ra1
;

1062 i‡(
∑1
 && 
	`LﬂdCdromFûe
(
Ra0
, &
ehódî
) == 0) {

1063 
	`mem˝y
(
∑1
, ((*)&
ehódî
)+16, (
EXEC
));

1064 
v0
 = 1;

1065 } 
v0
 = 0;

1067 
pc0
 = 
ø
;

1068 
	}
}

1074 
	$psxBios_Exec
() {

1075 
EXEC
 *
hódî
 = (EXEC*)
Ra0
;

1076 
u32
 
tmp
;

1078 #ifde‡
PSXBIOS_LOG


1079 
	`PSXBIOS_LOG
("psxBios_%s: %x, %x, %x\n", 
biosA0n
[0x43], 
a0
, 
a1
, 
a2
);

1082 
hódî
->
_•
 = 
•
;

1083 
hódî
->
_Â
 = 
Â
;

1084 
hódî
->
_•
 = 
•
;

1085 
hódî
->
_gp
 = 
gp
;

1086 
hódî
->
ªt
 = 
ø
;

1087 
hódî
->
ba£
 = 
s0
;

1089 i‡(
hódî
->
S_addr
 != 0) {

1090 
tmp
 = 
hódî
->
S_addr
 + hódî->
s_size
;

1091 
•
 = 
tmp
;

1092 
Â
 = 
•
;

1095 
gp
 = 
hódî
->
gp0
;

1097 
s0
 = 
a0
;

1099 
a0
 = 
a1
;

1100 
a1
 = 
a2
;

1102 
ø
 = 0x8000;

1103 
pc0
 = 
hódî
->
_pc0
;

1104 
	}
}

1106 
	$psxBios_FlushCache
() {

1107 #ifde‡
PSXBIOS_LOG


1108 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosA0n
[0x44]);

1111 
pc0
 = 
ø
;

1112 
	}
}

1114 
	$psxBios_GPU_dw
() {

1115 
size
;

1116 
s32
 *
±r
;

1118 #ifde‡
PSXBIOS_LOG


1119 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosA0n
[0x46]);

1122 
	`GPU_wrôeD©a
(0xa0000000);

1123 
	`GPU_wrôeD©a
((
a1
<<16)|(
a0
&0xffff));

1124 
	`GPU_wrôeD©a
((
a3
<<16)|(
a2
&0xffff));

1125 
size
 = (
a2
*
a3
+1)/2;

1126 
±r
 = (
s32
*)
	`PSXM
(
R•
[4]);

1128 
	`GPU_wrôeD©a
(
	`SWAP32
(*
±r
));

1129 
±r
++;

1130 } --
size
);

1132 
pc0
 = 
ø
;

1133 
	}
}

1135 
	$psxBios_mem2vøm
() {

1136 
size
;

1138 
	`GPU_wrôeD©a
(0xa0000000);

1139 
	`GPU_wrôeD©a
((
a1
<<16)|(
a0
&0xffff));

1140 
	`GPU_wrôeD©a
((
a3
<<16)|(
a2
&0xffff));

1141 
size
 = (
a2
*
a3
+1)/2;

1142 
	`GPU_wrôeSètus
(0x04000002);

1143 
	`psxHwWrôe32
(0x1f8010f4,0);

1144 
	`psxHwWrôe32
(0x1f8010f0,
	`psxHwRód32
(0x1f8010f0)|0x800);

1145 
	`psxHwWrôe32
(0x1f8010a0,
R•
[4]);

1146 
	`psxHwWrôe32
(0x1f8010a4,((
size
/16)<<16)|16);

1147 
	`psxHwWrôe32
(0x1f8010a8,0x01000201);

1149 
pc0
 = 
ø
;

1150 
	}
}

1152 
	$psxBios_SídGPU
() {

1153 
	`GPU_wrôeSètus
(
a0
);

1154 
	`gpuSyncPlugöSR
();

1155 
pc0
 = 
ø
;

1156 
	}
}

1158 
	$psxBios_GPU_cw
() {

1159 
	`GPU_wrôeD©a
(
a0
);

1160 
pc0
 = 
ø
;

1161 
	}
}

1163 
	$psxBios_GPU_cwb
() {

1164 
s32
 *
±r
 = (s32*)
Ra0
;

1165 
size
 = 
a1
;

1166 
size
--) {

1167 
	`GPU_wrôeD©a
(
	`SWAP32
(*
±r
));

1168 
±r
++;

1171 
pc0
 = 
ø
;

1172 
	}
}

1174 
	$psxBios_GPU_SídPackës
() {

1175 
	`GPU_wrôeSètus
(0x04000002);

1176 
	`psxHwWrôe32
(0x1f8010f4,0);

1177 
	`psxHwWrôe32
(0x1f8010f0,
	`psxHwRód32
(0x1f8010f0)|0x800);

1178 
	`psxHwWrôe32
(0x1f8010a0,
a0
);

1179 
	`psxHwWrôe32
(0x1f8010a4,0);

1180 
	`psxHwWrôe32
(0x1f8010a8,0x010000401);

1181 
pc0
 = 
ø
;

1182 
	}
}

1184 
	$psxBios_sys_a0_4c
() {

1185 
	`psxHwWrôe32
(0x1f8010a8,0x00000401);

1186 
	`GPU_wrôeD©a
(0x0400000);

1187 
	`GPU_wrôeD©a
(0x0200000);

1188 
	`GPU_wrôeD©a
(0x0100000);

1190 
pc0
 = 
ø
;

1191 
	}
}

1193 
	$psxBios_GPU_GëGPUSètus
() {

1194 
v0
 = 
	`GPU_ªadSètus
();

1195 
pc0
 = 
ø
;

1196 
	}
}

1198 #unde‡
s_addr


1200 
	$psxBios_LﬂdExec
() {

1201 
EXEC
 *
hódî
 = (EXEC*)
	`PSXM
(0xf000);

1202 
u32
 
s_addr
, 
s_size
;

1204 #ifde‡
PSXBIOS_LOG


1205 
	`PSXBIOS_LOG
("psxBios_%s: %s: %x,%x\n", 
biosA0n
[0x51], 
Ra0
, 
a1
, 
a2
);

1207 
s_addr
 = 
a1
; 
s_size
 = 
a2
;

1209 
a1
 = 0xf000;

1210 
	`psxBios_Lﬂd
();

1212 
hódî
->
S_addr
 = 
s_addr
;

1213 
hódî
->
s_size
 = s_size;

1215 
a0
 = 0xf000; 
a1
 = 0; 
a2
 = 0;

1216 
	`psxBios_Exec
();

1217 
	}
}

1219 
	$psxBios__bu_öô
() {

1220 #ifde‡
PSXBIOS_LOG


1221 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosA0n
[0x70]);

1224 
	`DñivîEvít
(0x11, 0x2);

1225 
	`DñivîEvít
(0x81, 0x2);

1227 
pc0
 = 
ø
;

1228 
	}
}

1230 
	$psxBios__96_öô
() {

1231 #ifde‡
PSXBIOS_LOG


1232 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosA0n
[0x71]);

1235 
pc0
 = 
ø
;

1236 
	}
}

1238 
	$psxBios__96_ªmove
() {

1239 #ifde‡
PSXBIOS_LOG


1240 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosA0n
[0x72]);

1243 
pc0
 = 
ø
;

1244 
	}
}

1246 
	$psxBios_SëMem
() {

1247 
u32
 
√w
 = 
	`psxHu32
(0x1060);

1249 #ifde‡
PSXBIOS_LOG


1250 
	`PSXBIOS_LOG
("psxBios_%s: %x, %x\n", 
biosA0n
[0x9f], 
a0
, 
a1
);

1253 
a0
) {

1255 
	`psxHu32ªf
(0x1060Ë
	`SWAP32
(
√w
);

1256 
	`psxMu32ªf
(0x060Ë
a0
;

1257 
	`SysPrötf
("Ch™gêef„˘ivêmem‹y : %d MByãs\n",
a0
);

1261 
	`psxHu32ªf
(0x1060Ë
	`SWAP32
(
√w
 | 0x300);

1262 
	`psxMu32ªf
(0x060Ë
a0
;

1263 
	`SysPrötf
("Ch™gêef„˘ivêmem‹y : %d MByãs\n",
a0
);

1266 
	`SysPrötf
("Effective memory must be 2/8 MBytes\n");

1270 
pc0
 = 
ø
;

1271 
	}
}

1273 
	$psxBios__ˇrd_öfo
() {

1274 #ifde‡
PSXBIOS_LOG


1275 
	`PSXBIOS_LOG
("psxBios_%s: %x\n", 
biosA0n
[0xab], 
a0
);

1278 
ˇrd_a˘ive_ch™
 = 
a0
;

1281 
	`DñivîEvít
(0x81, 0x2);

1283 
v0
 = 1; 
pc0
 = 
ø
;

1284 
	}
}

1286 
	$psxBios__ˇrd_lﬂd
() {

1287 #ifde‡
PSXBIOS_LOG


1288 
	`PSXBIOS_LOG
("psxBios_%s: %x\n", 
biosA0n
[0xac], 
a0
);

1291 
ˇrd_a˘ive_ch™
 = 
a0
;

1294 
	`DñivîEvít
(0x81, 0x2);

1296 
v0
 = 1; 
pc0
 = 
ø
;

1297 
	}
}

1301 
	$psxBios_SëRC¡
() {

1302 #ifde‡
PSXBIOS_LOG


1303 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x02]);

1306 
a0
&= 0x3;

1307 i‡(
a0
 != 3) {

1308 
u32
 
mode
=0;

1310 
	`psxR˙tWèrgë
(
a0
, 
a1
);

1311 i‡(
a2
&0x1000Ë
mode
|= 0x050;

1312 i‡(
a2
&0x0100Ë
mode
|= 0x008;

1313 i‡(
a2
&0x0010Ë
mode
|= 0x001;

1314 i‡(
a0
 =2Ë{ i‡(
a2
&0x0001Ë
mode
|= 0x200; }

1315 { i‡(
a2
&0x0001Ë
mode
|= 0x100; }

1317 
	`psxR˙tWmode
(
a0
, 
mode
);

1319 
pc0
 = 
ø
;

1320 
	}
}

1322 
	$psxBios_GëRC¡
() {

1323 #ifde‡
PSXBIOS_LOG


1324 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x03]);

1327 
a0
&= 0x3;

1328 i‡(
a0
 !3Ë
v0
 = 
	`psxR˙tRcou¡
(a0);

1329 
v0
 = 0;

1330 
pc0
 = 
ø
;

1331 
	}
}

1333 
	$psxBios_SèπRC¡
() {

1334 #ifde‡
PSXBIOS_LOG


1335 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x04]);

1338 
a0
&= 0x3;

1339 i‡(
a0
 !3Ë
	`psxHu32ªf
(0x1074)|
	`SWAP32
((
u32
)((1<<(a0+4))));

1340 
	`psxHu32ªf
(0x1074)|
	`SWAPu32
(0x1);

1341 
v0
 = 1; 
pc0
 = 
ø
;

1342 
	}
}

1344 
	$psxBios_St›RC¡
() {

1345 #ifde‡
PSXBIOS_LOG


1346 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x05]);

1349 
a0
&= 0x3;

1350 i‡(
a0
 !3Ë
	`psxHu32ªf
(0x1074)&
	`SWAP32
((
u32
)(~(1<<(a0+4))));

1351 
	`psxHu32ªf
(0x1074)&
	`SWAPu32
(~0x1);

1352 
pc0
 = 
ø
;

1353 
	}
}

1355 
	$psxBios_Re£tRC¡
() {

1356 #ifde‡
PSXBIOS_LOG


1357 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x06]);

1360 
a0
&= 0x3;

1361 i‡(
a0
 != 3) {

1362 
	`psxR˙tWmode
(
a0
, 0);

1363 
	`psxR˙tWèrgë
(
a0
, 0);

1364 
	`psxR˙tWcou¡
(
a0
, 0);

1366 
pc0
 = 
ø
;

1367 
	}
}

1371 
	#GëEv
() \

1372 
ev
 = (
a0
 >> 24) & 0xf; \

1373 i‡(
ev
 == 0xf)Év = 0x5; \

1374 
ev
*= 32; \

1375 
ev
+
a0
&0x1f;

	)

1378 
	#GëS≥c
() \

1379 
•ec
 = 0; \

1380 
a1
) { \

1381 0x0301: 
•ec
 = 16; ; \

1382 0x0302: 
•ec
 = 17; ; \

1384 
i
=0; i<16; i++Ëi‡(
a1
 & (1 << i)Ë{ 
•ec
 = i; ; } \

1386 }

	)

1388 
	$psxBios_DñivîEvít
() {

1389 
ev
, 
•ec
;

1390 
i
;

1392 
	`GëEv
();

1393 
	`GëS≥c
();

1395 #ifde‡
PSXBIOS_LOG


1396 
	`PSXBIOS_LOG
("psxBios_%†%x,%x\n", 
biosB0n
[0x07], 
ev
, 
•ec
);

1399 
	`DñivîEvít
(
ev
, 
•ec
);

1401 
pc0
 = 
ø
;

1402 
	}
}

1404 
	$psxBios_O≥nEvít
() {

1405 
ev
, 
•ec
;

1406 
i
;

1408 
	`GëEv
();

1409 
	`GëS≥c
();

1411 #ifde‡
PSXBIOS_LOG


1412 
	`PSXBIOS_LOG
("psxBios_%†%x,%x (˛ass:%x, s≥c:%x, mode:%x, func:%x)\n", 
biosB0n
[0x08], 
ev
, 
•ec
, 
a0
, 
a1
, 
a2
, 
a3
);

1415 
Evít
[
ev
][
•ec
].
°©us
 = 
EvStWAIT
;

1416 
Evít
[
ev
][
•ec
].
mode
 = 
a2
;

1417 
Evít
[
ev
][
•ec
].
fh™dÀr
 = 
a3
;

1419 
v0
 = 
ev
 | (
•ec
 << 8);

1420 
pc0
 = 
ø
;

1421 
	}
}

1423 
	$psxBios_Clo£Evít
() {

1424 
ev
, 
•ec
;

1426 
ev
 = 
a0
 & 0xff;

1427 
•ec
 = (
a0
 >> 8) & 0xff;

1429 #ifde‡
PSXBIOS_LOG


1430 
	`PSXBIOS_LOG
("psxBios_%†%x,%x\n", 
biosB0n
[0x09], 
ev
, 
•ec
);

1433 
Evít
[
ev
][
•ec
].
°©us
 = 
EvStUNUSED
;

1435 
v0
 = 1; 
pc0
 = 
ø
;

1436 
	}
}

1438 
	$psxBios_WaôEvít
() {

1439 
ev
, 
•ec
;

1441 
ev
 = 
a0
 & 0xff;

1442 
•ec
 = (
a0
 >> 8) & 0xff;

1444 #ifde‡
PSXBIOS_LOG


1445 
	`PSXBIOS_LOG
("psxBios_%†%x,%x\n", 
biosB0n
[0x0a], 
ev
, 
•ec
);

1448 
Evít
[
ev
][
•ec
].
°©us
 = 
EvStACTIVE
;

1450 
v0
 = 1; 
pc0
 = 
ø
;

1451 
	}
}

1453 
	$psxBios_Te°Evít
() {

1454 
ev
, 
•ec
;

1456 
ev
 = 
a0
 & 0xff;

1457 
•ec
 = (
a0
 >> 8) & 0xff;

1459 i‡(
Evít
[
ev
][
•ec
].
°©us
 =
EvStALREADY
) {

1460 
Evít
[
ev
][
•ec
].
°©us
 = 
EvStACTIVE
; 
v0
 = 1;

1461 } 
v0
 = 0;

1463 #ifde‡
PSXBIOS_LOG


1464 
	`PSXBIOS_LOG
("psxBios_%†%x,%x: %x\n", 
biosB0n
[0x0b], 
ev
, 
•ec
, 
v0
);

1467 
pc0
 = 
ø
;

1468 
	}
}

1470 
	$psxBios_E«bÀEvít
() {

1471 
ev
, 
•ec
;

1473 
ev
 = 
a0
 & 0xff;

1474 
•ec
 = (
a0
 >> 8) & 0xff;

1476 #ifde‡
PSXBIOS_LOG


1477 
	`PSXBIOS_LOG
("psxBios_%†%x,%x\n", 
biosB0n
[0x0c], 
ev
, 
•ec
);

1480 
Evít
[
ev
][
•ec
].
°©us
 = 
EvStACTIVE
;

1482 
v0
 = 1; 
pc0
 = 
ø
;

1483 
	}
}

1485 
	$psxBios_DißbÀEvít
() {

1486 
ev
, 
•ec
;

1488 
ev
 = 
a0
 & 0xff;

1489 
•ec
 = (
a0
 >> 8) & 0xff;

1491 #ifde‡
PSXBIOS_LOG


1492 
	`PSXBIOS_LOG
("psxBios_%†%x,%x\n", 
biosB0n
[0x0d], 
ev
, 
•ec
);

1495 
Evít
[
ev
][
•ec
].
°©us
 = 
EvStWAIT
;

1497 
v0
 = 1; 
pc0
 = 
ø
;

1498 
	}
}

1504 
	$psxBios_O≥nTh
() {

1505 
th
;

1507 
th
=1;Åh<8;Åh++)

1508 i‡(
Thªad
[
th
].
°©us
 == 0) ;

1510 #ifde‡
PSXBIOS_LOG


1511 
	`PSXBIOS_LOG
("psxBios_%s: %x\n", 
biosB0n
[0x0e], 
th
);

1514 
Thªad
[
th
].
°©us
 = 1;

1515 
Thªad
[
th
].
func
 = 
a0
;

1516 
Thªad
[
th
].
ªg
[29] = 
a1
;

1517 
Thªad
[
th
].
ªg
[28] = 
a2
;

1519 
v0
 = 
th
; 
pc0
 = 
ø
;

1520 
	}
}

1526 
	$psxBios_Clo£Th
() {

1527 
th
 = 
a0
 & 0xff;

1529 #ifde‡
PSXBIOS_LOG


1530 
	`PSXBIOS_LOG
("psxBios_%s: %x\n", 
biosB0n
[0x0f], 
th
);

1533 i‡(
Thªad
[
th
].
°©us
 == 0) {

1534 
v0
 = 0;

1536 
Thªad
[
th
].
°©us
 = 0;

1537 
v0
 = 1;

1540 
pc0
 = 
ø
;

1541 
	}
}

1547 
	$psxBios_Ch™geTh
() {

1548 
th
 = 
a0
 & 0xff;

1550 #ifde‡
PSXBIOS_LOG


1554 i‡(
Thªad
[
th
].
°©us
 =0 || 
CurThªad
 ==Åh) {

1555 
v0
 = 0;

1557 
pc0
 = 
ø
;

1559 
v0
 = 1;

1561 i‡(
Thªad
[
CurThªad
].
°©us
 == 2) {

1562 
Thªad
[
CurThªad
].
°©us
 = 1;

1563 
Thªad
[
CurThªad
].
func
 = 
ø
;

1564 
	`mem˝y
(
Thªad
[
CurThªad
].
ªg
, 
psxRegs
.
GPR
.
r
, 32*4);

1567 
	`mem˝y
(
psxRegs
.
GPR
.
r
, 
Thªad
[
th
].
ªg
, 32*4);

1568 
pc0
 = 
Thªad
[
th
].
func
;

1569 
Thªad
[
th
].
°©us
 = 2;

1570 
CurThªad
 = 
th
;

1572 
	}
}

1574 
	$psxBios_InôPAD
() {

1575 #ifde‡
PSXBIOS_LOG


1576 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x12]);

1579 
∑d_buf1
 = (*)
Ra0
;

1580 
∑d_buf1Àn
 = 
a1
;

1581 
∑d_buf2
 = (*)
Ra2
;

1582 
∑d_buf2Àn
 = 
a3
;

1584 
v0
 = 1; 
pc0
 = 
ø
;

1585 
	}
}

1587 
	$psxBios_SèπPAD
() {

1588 #ifde‡
PSXBIOS_LOG


1589 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x13]);

1592 
	`psxHwWrôe16
(0x1f801074, ()(
	`psxHwRód16
(0x1f801074) | 0x1));

1593 
psxRegs
.
CP0
.
n
.
Sètus
 |= 0x401;

1594 
pc0
 = 
ø
;

1595 
	}
}

1597 
	$psxBios_St›PAD
() {

1598 #ifde‡
PSXBIOS_LOG


1599 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x14]);

1602 
∑d_buf1
 = 
NULL
;

1603 
∑d_buf2
 = 
NULL
;

1604 
pc0
 = 
ø
;

1605 
	}
}

1607 
	$psxBios_PAD_öô
() {

1608 #ifde‡
PSXBIOS_LOG


1609 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x15]);

1611 
	`psxHwWrôe16
(0x1f801074, (
u16
)(
	`psxHwRód16
(0x1f801074) | 0x1));

1612 
∑d_buf
 = (*)
Ra1
;

1613 *
∑d_buf
 = -1;

1614 
psxRegs
.
CP0
.
n
.
Sètus
 |= 0x401;

1615 
pc0
 = 
ø
;

1616 
	}
}

1618 
	$psxBios_PAD_dr
() {

1619 #ifde‡
PSXBIOS_LOG


1620 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x16]);

1623 
v0
 = -1; 
pc0
 = 
ø
;

1624 
	}
}

1626 
	$psxBios_Rëu∫FromEx˚±i⁄
() {

1627 
	`LﬂdRegs
();

1629 
pc0
 = 
psxRegs
.
CP0
.
n
.
EPC
;

1630 i‡(
psxRegs
.
CP0
.
n
.
Cau£
 & 0x80000000Ë
pc0
 += 4;

1632 
psxRegs
.
CP0
.
n
.
Sètus
 = (psxRegs.CP0.n.Status & 0xfffffff0) |

1633 ((
psxRegs
.
CP0
.
n
.
Sètus
 & 0x3c) >> 2);

1634 
	}
}

1636 
	$psxBios_Re£tE¡ryI¡
() {

1637 #ifde‡
PSXBIOS_LOG


1638 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x18]);

1641 
jmp_öt
 = 
NULL
;

1642 
pc0
 = 
ø
;

1643 
	}
}

1645 
	$psxBios_HookE¡ryI¡
() {

1646 #ifde‡
PSXBIOS_LOG


1647 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x19]);

1650 
jmp_öt
 = (
u32
*)
Ra0
;

1651 
pc0
 = 
ø
;

1652 
	}
}

1654 
	$psxBios_UnDñivîEvít
() {

1655 
ev
, 
•ec
;

1656 
i
;

1658 
	`GëEv
();

1659 
	`GëS≥c
();

1661 #ifde‡
PSXBIOS_LOG


1662 
	`PSXBIOS_LOG
("psxBios_%†%x,%x\n", 
biosB0n
[0x20], 
ev
, 
•ec
);

1665 i‡(
Evít
[
ev
][
•ec
].
°©us
 =
EvStALREADY
 &&

1666 
Evít
[
ev
][
•ec
].
mode
 =
EvMdNOINTR
)

1667 
Evít
[
ev
][
•ec
].
°©us
 = 
EvStACTIVE
;

1669 
pc0
 = 
ø
;

1670 
	}
}

1672 
	#bu›í
(
mcd
) { \

1673 
	`°r˝y
(
FDesc
[1 + 
mcd
].
«me
, 
Ra0
+5); \

1674 
FDesc
[1 + 
mcd
].
off£t
 = 0; \

1675 
FDesc
[1 + 
mcd
].
mode
 = 
a1
; \

1677 
i
=1; i<16; i++) { \

1678 
±r
 = 
Mcd
##
mcd
##
D©a
 + 128 * 
i
; \

1679 i‡((*
±r
 & 0xF0) != 0x50) ; \

1680 i‡(
	`°rcmp
(
FDesc
[1 + 
mcd
].
«me
, 
±r
+0xa)) ; \

1681 
FDesc
[1 + 
mcd
].
mcfûe
 = 
i
; \

1682 
	`SysPrötf
("›í %s\n", 
±r
+0xa); \

1683 
v0
 = 1 + 
mcd
; \

1686 i‡(
a1
 & 0x200 && 
v0
 == -1) { \

1687 
i
=1; i<16; i++) { \

1688 
j
, 
x‹
 = 0; \

1690 
±r
 = 
Mcd
##
mcd
##
D©a
 + 128 * 
i
; \

1691 i‡((*
±r
 & 0xF0) == 0x50) ; \

1692 
±r
[0] = 0x50 | (
u8
)(
a1
 >> 16); \

1693 
±r
[4] = 0x00; \

1694 
±r
[5] = 0x20; \

1695 
±r
[6] = 0x00; \

1696 
±r
[7] = 0x00; \

1697 
±r
[8] = 'B'; \

1698 
±r
[9] = 'I'; \

1699 
	`°r˝y
(
±r
+0xa, 
FDesc
[1 + 
mcd
].
«me
); \

1700 
j
=0; j<127; j++Ë
x‹
^
±r
[j]; \

1701 
±r
[127] = 
x‹
; \

1702 
FDesc
[1 + 
mcd
].
mcfûe
 = 
i
; \

1703 
	`SysPrötf
("›íC %s\n", 
±r
); \

1704 
v0
 = 1 + 
mcd
; \

1705 
	`SaveMcd
(
C⁄fig
.
Mcd
##
mcd
, Mcd##mcd##
D©a
, 128 * 
i
, 128); \

1709 }

	)

1715 
	$psxBios_›í
() {

1716 
i
;

1717 *
±r
;

1718 *
∑0
 = 
Ra0
;

1720 #ifde‡
PSXBIOS_LOG


1721 
	`PSXBIOS_LOG
("psxBios_%s: %s,%x\n", 
biosB0n
[0x32], 
Ra0
, 
a1
);

1724 
v0
 = -1;

1726 i‡(
∑0
) {

1727 i‡(!
	`°∫cmp
(
∑0
, "bu00", 4)) {

1728 
	`bu›í
(1);

1731 i‡(!
	`°∫cmp
(
∑0
, "bu10", 4)) {

1732 
	`bu›í
(2);

1736 
pc0
 = 
ø
;

1737 
	}
}

1743 
	$psxBios_l£ek
() {

1744 #ifde‡
PSXBIOS_LOG


1745 
	`PSXBIOS_LOG
("psxBios_%s: %x, %x, %x\n", 
biosB0n
[0x33], 
a0
, 
a1
, 
a2
);

1748 
a2
) {

1750 
FDesc
[
a0
].
off£t
 = 
a1
;

1751 
v0
 = 
a1
;

1757 
FDesc
[
a0
].
off£t
+
a1
;

1758 
v0
 = 
FDesc
[
a0
].
off£t
;

1762 
pc0
 = 
ø
;

1763 
	}
}

1765 
	#buªad
(
Ra1
, 
mcd
) { \

1766 
	`SysPrötf
("ªad %d: %x,%x (%s)\n", 
FDesc
[1 + 
mcd
].
mcfûe
, FDesc[1 + mcd].
off£t
, 
a2
, 
Mcd
##mcd##
D©a
 + 128 * FDesc[1 + mcd].mcfile + 0xa); \

1767 
±r
 = 
Mcd
##
mcd
##
D©a
 + 8192 * 
FDesc
[1 + mcd].
mcfûe
 + FDesc[1 + mcd].
off£t
; \

1768 
	`mem˝y
(
Ra1
, 
±r
, 
a2
); \

1769 i‡(
FDesc
[1 + 
mcd
].
mode
 & 0x8000Ë
v0
 = 0; \

1770 
v0
 = 
a2
; \

1771 
FDesc
[1 + 
mcd
].
off£t
 +
v0
; \

1772 
	`DñivîEvít
(0x11, 0x2); \

1773 
	`DñivîEvít
(0x81, 0x2); \

1774 }

	)

1780 
	$psxBios_ªad
() {

1781 *
±r
;

1782 *
∑1
 = 
Ra1
;

1784 #ifde‡
PSXBIOS_LOG


1785 
	`PSXBIOS_LOG
("psxBios_%s: %x, %x, %x\n", 
biosB0n
[0x34], 
a0
, 
a1
, 
a2
);

1788 
v0
 = -1;

1790 i‡(
∑1
) {

1791 
a0
) {

1792 2: 
	`buªad
(
∑1
, 1); ;

1793 3: 
	`buªad
(
∑1
, 2); ;

1797 
pc0
 = 
ø
;

1798 
	}
}

1800 
	#buwrôe
(
Ra1
, 
mcd
) { \

1801 
u32
 
off£t
 = + 8192 * 
FDesc
[1 + 
mcd
].
mcfûe
 + FDesc[1 + mcd].offset; \

1802 
	`SysPrötf
("wrôê%d: %x,%x\n", 
FDesc
[1 + 
mcd
].
mcfûe
, FDesc[1 + mcd].
off£t
, 
a2
); \

1803 
±r
 = 
Mcd
##
mcd
##
D©a
 + 
off£t
; \

1804 
	`mem˝y
(
±r
, 
Ra1
, 
a2
); \

1805 
FDesc
[1 + 
mcd
].
off£t
 +
a2
; \

1806 
	`SaveMcd
(
C⁄fig
.
Mcd
##
mcd
, Mcd##mcd##
D©a
, 
off£t
, 
a2
); \

1807 i‡(
FDesc
[1 + 
mcd
].
mode
 & 0x8000Ë
v0
 = 0; \

1808 
v0
 = 
a2
; \

1809 
	`DñivîEvít
(0x11, 0x2); \

1810 
	`DñivîEvít
(0x81, 0x2); \

1811 }

	)

1817 
	$psxBios_wrôe
() {

1818 *
±r
;

1819 *
∑1
 = 
Ra1
;

1821 #ifde‡
PSXBIOS_LOG


1822 
	`PSXBIOS_LOG
("psxBios_%s: %x,%x,%x\n", 
biosB0n
[0x35], 
a0
, 
a1
, 
a2
);

1825 
v0
 = -1;

1826 i‡(!
∑1
) {

1827 
pc0
 = 
ø
;

1831 i‡(
a0
 == 1) {

1832 *
±r
 = 
∑1
;

1834 
v0
 = 
a2
;

1835 
a2
 > 0) {

1836 
	`SysPrötf
("%c", *
±r
++); 
a2
--;

1838 
pc0
 = 
ø
; ;

1841 
a0
) {

1842 2: 
	`buwrôe
(
∑1
, 1); ;

1843 3: 
	`buwrôe
(
∑1
, 2); ;

1846 
pc0
 = 
ø
;

1847 
	}
}

1853 
	$psxBios_˛o£
() {

1854 #ifde‡
PSXBIOS_LOG


1855 
	`PSXBIOS_LOG
("psxBios_%s: %x\n", 
biosB0n
[0x36], 
a0
);

1858 
v0
 = 
a0
;

1859 
pc0
 = 
ø
;

1860 
	}
}

1862 
	$psxBios_putch¨
() {

1863 
	`SysPrötf
("%c", ()
a0
);

1864 
pc0
 = 
ø
;

1865 
	}
}

1867 
	$psxBios_puts
() {

1868 
	`SysPrötf
("%s", 
Ra0
);

1869 
pc0
 = 
ø
;

1870 
	}
}

1872 
	gffûe
[64], *
	gpfûe
;

1873 
	gnfûe
;

1875 
	#bufûe
(
mcd
) { \

1876 
nfûe
 < 16) { \

1877 
m©ch
=1; \

1879 
±r
 = 
Mcd
##
mcd
##
D©a
 + 128 * 
nfûe
; \

1880 
nfûe
++; \

1881 i‡((*
±r
 & 0xF0) != 0x50) ; \

1882 
±r
+= 0xa; \

1883 i‡(
pfûe
[0] == 0) { \

1884 
	`°∫˝y
(
dú
->
«me
, 
±r
, (dir->name)); \

1885 
dú
->
«me
[(dir->name) - 1] = '\0'; \

1886 } 
i
=0; i<20; i++) { \

1887 i‡(
pfûe
[
i
] =
±r
[i]) { \

1888 
dú
->
«me
[
i
] = 
±r
[i]; \

1889 i‡(
±r
[
i
] == 0) ; ; } \

1890 i‡(
pfûe
[
i
] == '?') { \

1891 
dú
->
«me
[
i
] = 
±r
[i]; ; } \

1892 i‡(
pfûe
[
i
] == '*') { \

1893 
	`°r˝y
(
dú
->
«me
+
i
, 
±r
+i); ; } \

1894 
m©ch
 = 0; ; \

1896 
	`SysPrötf
("%d : %†%†+ %†(m©ch=%d)\n", 
nfûe
, 
dú
->
«me
, 
pfûe
, 
±r
, 
m©ch
); \

1897 i‡(
m©ch
 == 0) ; \

1898 
dú
->
size
 = 8192; \

1899 
v0
 = 
_dú
; \

1902 }

	)

1908 
	$psxBios_fú°fûe
() {

1909 
DIRENTRY
 *
dú
 = (DIRENTRY *)
Ra1
;

1910 *
∑0
 = 
Ra0
;

1911 
u32
 
_dú
 = 
a1
;

1912 *
±r
;

1913 
i
;

1915 #ifde‡
PSXBIOS_LOG


1916 
	`PSXBIOS_LOG
("psxBios_%s: %s\n", 
biosB0n
[0x42], 
Ra0
);

1919 
v0
 = 0;

1921 i‡(
∑0
) {

1922 
	`°r˝y
(
ffûe
, 
∑0
);

1923 
pfûe
 = 
ffûe
+5;

1924 
nfûe
 = 1;

1925 i‡(!
	`°∫cmp
(
∑0
, "bu00", 4)) {

1926 
	`bufûe
(1);

1927 } i‡(!
	`°∫cmp
(
∑0
, "bu10", 4)) {

1928 
	`bufûe
(2);

1933 
	`DñivîEvít
(0x11, 0x2);

1935 
pc0
 = 
ø
;

1936 
	}
}

1942 
	$psxBios_√xtfûe
() {

1943 
DIRENTRY
 *
dú
 = (DIRENTRY *)
Ra0
;

1944 
u32
 
_dú
 = 
a0
;

1945 *
±r
;

1946 
i
;

1948 #ifde‡
PSXBIOS_LOG


1949 
	`PSXBIOS_LOG
("psxBios_%s: %s\n", 
biosB0n
[0x43], 
dú
->
«me
);

1952 
v0
 = 0;

1954 i‡(!
	`°∫cmp
(
ffûe
, "bu00", 4)) {

1955 
	`bufûe
(1);

1958 i‡(!
	`°∫cmp
(
ffûe
, "bu10", 4)) {

1959 
	`bufûe
(2);

1962 
pc0
 = 
ø
;

1963 
	}
}

1965 
	#buª«me
(
mcd
) { \

1966 
i
=1; i<16; i++) { \

1967 
«mñí
, 
j
, 
x‹
 = 0; \

1968 
±r
 = 
Mcd
##
mcd
##
D©a
 + 128 * 
i
; \

1969 i‡((*
±r
 & 0xF0) != 0x50) ; \

1970 i‡(
	`°rcmp
(
Ra0
+5, 
±r
+0xa)) ; \

1971 
«mñí
 = 
	`°æí
(
Ra1
+5); \

1972 
	`mem˝y
(
±r
+0xa, 
Ra1
+5, 
«mñí
); \

1973 
	`mem£t
(
±r
+0xa+
«mñí
, 0, 0x75-namelen); \

1974 
j
=0; j<127; j++Ë
x‹
^
±r
[j]; \

1975 
±r
[127] = 
x‹
; \

1976 
	`SaveMcd
(
C⁄fig
.
Mcd
##
mcd
, Mcd##mcd##
D©a
, 128 * 
i
 + 0xa, 0x76); \

1977 
v0
 = 1; \

1980 }

	)

1986 
	$psxBios_ª«me
() {

1987 *
∑0
 = 
Ra0
;

1988 *
∑1
 = 
Ra1
;

1989 *
±r
;

1990 
i
;

1992 #ifde‡
PSXBIOS_LOG


1993 
	`PSXBIOS_LOG
("psxBios_%s: %s,%s\n", 
biosB0n
[0x44], 
Ra0
, 
Ra1
);

1996 
v0
 = 0;

1998 i‡(
∑0
 && 
∑1
) {

1999 i‡(!
	`°∫cmp
(
∑0
, "bu00", 4Ë&& !°∫cmp(
∑1
, "bu00", 4)) {

2000 
	`buª«me
(1);

2003 i‡(!
	`°∫cmp
(
∑0
, "bu10", 4Ë&& !°∫cmp(
∑1
, "bu10", 4)) {

2004 
	`buª«me
(2);

2008 
pc0
 = 
ø
;

2009 
	}
}

2012 
	#budñëe
(
mcd
) { \

2013 
i
=1; i<16; i++) { \

2014 
±r
 = 
Mcd
##
mcd
##
D©a
 + 128 * 
i
; \

2015 i‡((*
±r
 & 0xF0) != 0x50) ; \

2016 i‡(
	`°rcmp
(
Ra0
+5, 
±r
+0xa)) ; \

2017 *
±r
 = (*ptr & 0xf) | 0xA0; \

2018 
	`SaveMcd
(
C⁄fig
.
Mcd
##
mcd
, Mcd##mcd##
D©a
, 128 * 
i
, 1); \

2019 
	`SysPrötf
("dñëê%s\n", 
±r
+0xa); \

2020 
v0
 = 1; \

2023 }

	)

2029 
	$psxBios_dñëe
() {

2030 *
∑0
 = 
Ra0
;

2031 *
±r
;

2032 
i
;

2034 #ifde‡
PSXBIOS_LOG


2035 
	`PSXBIOS_LOG
("psxBios_%s: %s\n", 
biosB0n
[0x45], 
Ra0
);

2038 
v0
 = 0;

2040 i‡(
∑0
) {

2041 i‡(!
	`°∫cmp
(
∑0
, "bu00", 4)) {

2042 
	`budñëe
(1);

2045 i‡(!
	`°∫cmp
(
∑0
, "bu10", 4)) {

2046 
	`budñëe
(2);

2050 
pc0
 = 
ø
;

2051 
	}
}

2053 
	$psxBios_InôCARD
() {

2054 #ifde‡
PSXBIOS_LOG


2055 
	`PSXBIOS_LOG
("psxBios_%s: %x\n", 
biosB0n
[0x4a], 
a0
);

2058 
C¨dSèã
 = 0;

2060 
pc0
 = 
ø
;

2061 
	}
}

2063 
	$psxBios_SèπCARD
() {

2064 #ifde‡
PSXBIOS_LOG


2065 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x4b]);

2068 i‡(
C¨dSèã
 == 0) CardState = 1;

2070 
pc0
 = 
ø
;

2071 
	}
}

2073 
	$psxBios_St›CARD
() {

2074 #ifde‡
PSXBIOS_LOG


2075 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x4c]);

2078 i‡(
C¨dSèã
 == 1) CardState = 0;

2080 
pc0
 = 
ø
;

2081 
	}
}

2083 
	$psxBios__ˇrd_wrôe
() {

2084 *
∑2
 = 
Ra2
;

2085 
p‹t
;

2087 #ifde‡
PSXBIOS_LOG


2088 
	`PSXBIOS_LOG
("psxBios_%s: %x,%x,%x\n", 
biosB0n
[0x4e], 
a0
, 
a1
, 
a2
);

2091 
ˇrd_a˘ive_ch™
 = 
a0
;

2092 
p‹t
 = 
a0
 >> 4;

2094 i‡(
∑2
) {

2095 i‡(
p‹t
 == 0) {

2096 
	`mem˝y
(
Mcd1D©a
 + 
a1
 * 128, 
∑2
, 128);

2097 
	`SaveMcd
(
C⁄fig
.
Mcd1
, 
Mcd1D©a
, 
a1
 * 128, 128);

2099 
	`mem˝y
(
Mcd2D©a
 + 
a1
 * 128, 
∑2
, 128);

2100 
	`SaveMcd
(
C⁄fig
.
Mcd2
, 
Mcd2D©a
, 
a1
 * 128, 128);

2104 
	`DñivîEvít
(0x11, 0x2);

2107 
v0
 = 1; 
pc0
 = 
ø
;

2108 
	}
}

2110 
	$psxBios__ˇrd_ªad
() {

2111 *
∑2
 = 
Ra2
;

2112 
p‹t
;

2114 #ifde‡
PSXBIOS_LOG


2115 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x4f]);

2118 
ˇrd_a˘ive_ch™
 = 
a0
;

2119 
p‹t
 = 
a0
 >> 4;

2121 i‡(
∑2
) {

2122 i‡(
p‹t
 == 0) {

2123 
	`mem˝y
(
∑2
, 
Mcd1D©a
 + 
a1
 * 128, 128);

2125 
	`mem˝y
(
∑2
, 
Mcd2D©a
 + 
a1
 * 128, 128);

2129 
	`DñivîEvít
(0x11, 0x2);

2132 
v0
 = 1; 
pc0
 = 
ø
;

2133 
	}
}

2135 
	$psxBios__√w_ˇrd
() {

2136 #ifde‡
PSXBIOS_LOG


2137 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x50]);

2140 
pc0
 = 
ø
;

2141 
	}
}

2143 
	$psxBios_Krom2RawAdd
() {

2144 
i
 = 0;

2146 c⁄° 
u32
 
èbÀ_8140
[][2] = {

2159 c⁄° 
u32
 
èbÀ_889f
[][2] = {

2171 i‡(
a0
 >= 0x8140 &&á0 <= 0x84be) {

2172 
èbÀ_8140
[
i
][0] <
a0
) i++;

2173 
a0
 -
èbÀ_8140
[
i
 - 1][0];

2174 
v0
 = 0xbfc66000 + (
a0
 * 0x1ê+ 
èbÀ_8140
[
i
 - 1][1]);

2175 } i‡(
a0
 >= 0x889f &&á0 <= 0x9872) {

2176 
èbÀ_889f
[
i
][0] <
a0
) i++;

2177 
a0
 -
èbÀ_889f
[
i
 - 1][0];

2178 
v0
 = 0xbfc66000 + (
a0
 * 0x1ê+ 
èbÀ_889f
[
i
 - 1][1]);

2180 
v0
 = 0xffffffff;

2183 
pc0
 = 
ø
;

2184 
	}
}

2186 
	$psxBios_GëC0TabÀ
() {

2187 #ifde‡
PSXBIOS_LOG


2188 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x56]);

2191 
v0
 = 0x674; 
pc0
 = 
ø
;

2192 
	}
}

2194 
	$psxBios_GëB0TabÀ
() {

2195 #ifde‡
PSXBIOS_LOG


2196 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x57]);

2199 
v0
 = 0x874; 
pc0
 = 
ø
;

2200 
	}
}

2202 
	$psxBios__ˇrd_ch™
() {

2203 #ifde‡
PSXBIOS_LOG


2204 
	`PSXBIOS_LOG
("psxBios_%s\n", 
biosB0n
[0x58]);

2207 
v0
 = 
ˇrd_a˘ive_ch™
;

2208 
pc0
 = 
ø
;

2209 
	}
}

2211 
	$psxBios_Ch™geCÀ¨Pad
() {

2212 #ifde‡
PSXBIOS_LOG


2213 
	`PSXBIOS_LOG
("psxBios_%s: %x\n", 
biosB0n
[0x5b], 
a0
);

2216 
pc0
 = 
ø
;

2217 
	}
}

2225 
	$psxBios_SysEnqI¡RP
() {

2226 #ifde‡
PSXBIOS_LOG


2227 
	`PSXBIOS_LOG
("psxBios_%s: %x\n", 
biosC0n
[0x02] ,
a0
);

2230 
SysI¡RP
[
a0
] = 
a1
;

2232 
v0
 = 0; 
pc0
 = 
ø
;

2233 
	}
}

2239 
	$psxBios_SysDeqI¡RP
() {

2240 #ifde‡
PSXBIOS_LOG


2241 
	`PSXBIOS_LOG
("psxBios_%s: %x\n", 
biosC0n
[0x03], 
a0
);

2244 
SysI¡RP
[
a0
] = 0;

2246 
v0
 = 0; 
pc0
 = 
ø
;

2247 
	}
}

2249 
	$psxBios_Ch™geCÀ¨RC¡
() {

2250 
u32
 *
±r
;

2252 #ifde‡
PSXBIOS_LOG


2253 
	`PSXBIOS_LOG
("psxBios_%s: %x, %x\n", 
biosC0n
[0x0a], 
a0
, 
a1
);

2256 
±r
 = (
u32
*)
	`PSXM
((
a0
 << 2) + 0x8600);

2257 
v0
 = *
±r
;

2258 *
±r
 = 
a1
;

2261 
pc0
 = 
ø
;

2262 
	}
}

2264 
	$psxBios_dummy
() {

2265 #ifde‡
PSXBIOS_LOG


2266 
	`PSXBIOS_LOG
("unk %x cÆl: %x\n", 
pc0
 & 0x1fffff, 
t1
);

2268 
pc0
 = 
ø
;

2269 
	}
}

2271 (*
	gbiosA0
[256])();

2272 (*
	gbiosB0
[256])();

2273 (*
	gbiosC0
[256])();

2275 
	~"sjisf⁄t.h
"

2277 
	$psxBiosInô
() {

2278 
u32
 
ba£
, 
size
;

2279 
u32
 *
±r
;

2280 
i
;

2281 
uL⁄gf
 
Àn
;

2283 
i
 = 0; i < 256; i++) {

2284 
biosA0
[
i
] = 
NULL
;

2285 
biosB0
[
i
] = 
NULL
;

2286 
biosC0
[
i
] = 
NULL
;

2288 
biosA0
[0x3e] = 
psxBios_puts
;

2289 
biosA0
[0x3f] = 
psxBios_¥ötf
;

2291 
biosB0
[0x3d] = 
psxBios_putch¨
;

2292 
biosB0
[0x3f] = 
psxBios_puts
;

2294 i‡(!
C⁄fig
.
HLE
) ;

2296 
i
 = 0; i < 256; i++) {

2297 i‡(
biosA0
[
i
] =
NULL
ËbiosA0[i] = 
psxBios_dummy
;

2298 i‡(
biosB0
[
i
] =
NULL
ËbiosB0[i] = 
psxBios_dummy
;

2299 i‡(
biosC0
[
i
] =
NULL
ËbiosC0[i] = 
psxBios_dummy
;

2302 
biosA0
[0x00] = 
psxBios_›í
;

2303 
biosA0
[0x01] = 
psxBios_l£ek
;

2304 
biosA0
[0x02] = 
psxBios_ªad
;

2305 
biosA0
[0x03] = 
psxBios_wrôe
;

2306 
biosA0
[0x04] = 
psxBios_˛o£
;

2316 
biosA0
[0x0e] = 
psxBios_abs
;

2317 
biosA0
[0x0f] = 
psxBios_œbs
;

2318 
biosA0
[0x10] = 
psxBios_©oi
;

2319 
biosA0
[0x11] = 
psxBios_©ﬁ
;

2321 
biosA0
[0x13] = 
psxBios_£tjmp
;

2322 
biosA0
[0x14] = 
psxBios_l⁄gjmp
;

2323 
biosA0
[0x15] = 
psxBios_°rˇt
;

2324 
biosA0
[0x16] = 
psxBios_°∫ˇt
;

2325 
biosA0
[0x17] = 
psxBios_°rcmp
;

2326 
biosA0
[0x18] = 
psxBios_°∫cmp
;

2327 
biosA0
[0x19] = 
psxBios_°r˝y
;

2328 
biosA0
[0x1a] = 
psxBios_°∫˝y
;

2329 
biosA0
[0x1b] = 
psxBios_°æí
;

2330 
biosA0
[0x1c] = 
psxBios_ödex
;

2331 
biosA0
[0x1d] = 
psxBios_rödex
;

2332 
biosA0
[0x1e] = 
psxBios_°rchr
;

2333 
biosA0
[0x1f] = 
psxBios_°ºchr
;

2334 
biosA0
[0x20] = 
psxBios_°Ωbrk
;

2335 
biosA0
[0x21] = 
psxBios_°r•n
;

2336 
biosA0
[0x22] = 
psxBios_°rc•n
;

2337 
biosA0
[0x23] = 
psxBios_°πok
;

2338 
biosA0
[0x24] = 
psxBios_°r°r
;

2339 
biosA0
[0x25] = 
psxBios_touµî
;

2340 
biosA0
[0x26] = 
psxBios_tﬁowî
;

2341 
biosA0
[0x27] = 
psxBios_bc›y
;

2342 
biosA0
[0x28] = 
psxBios_bzîo
;

2343 
biosA0
[0x29] = 
psxBios_bcmp
;

2344 
biosA0
[0x2a] = 
psxBios_mem˝y
;

2345 
biosA0
[0x2b] = 
psxBios_mem£t
;

2346 
biosA0
[0x2c] = 
psxBios_memmove
;

2347 
biosA0
[0x2d] = 
psxBios_memcmp
;

2348 
biosA0
[0x2e] = 
psxBios_memchr
;

2349 
biosA0
[0x2f] = 
psxBios_ønd
;

2350 
biosA0
[0x30] = 
psxBios_§™d
;

2351 
biosA0
[0x31] = 
psxBios_qs‹t
;

2353 
biosA0
[0x33] = 
psxBios_mÆloc
;

2354 
biosA0
[0x34] = 
psxBios_‰ì
;

2357 
biosA0
[0x37] = 
psxBios_ˇŒoc
;

2358 
biosA0
[0x38] = 
psxBios_ªÆloc
;

2359 
biosA0
[0x39] = 
psxBios_InôHóp
;

2361 
biosA0
[0x3b] = 
psxBios_gëch¨
;

2362 
biosA0
[0x3c] = 
psxBios_putch¨
;

2366 
biosA0
[0x42] = 
psxBios_Lﬂd
;

2367 
biosA0
[0x43] = 
psxBios_Exec
;

2368 
biosA0
[0x44] = 
psxBios_FlushCache
;

2370 
biosA0
[0x46] = 
psxBios_GPU_dw
;

2371 
biosA0
[0x47] = 
psxBios_mem2vøm
;

2372 
biosA0
[0x48] = 
psxBios_SídGPU
;

2373 
biosA0
[0x49] = 
psxBios_GPU_cw
;

2374 
biosA0
[0x4a] = 
psxBios_GPU_cwb
;

2375 
biosA0
[0x4b] = 
psxBios_GPU_SídPackës
;

2376 
biosA0
[0x4c] = 
psxBios_sys_a0_4c
;

2377 
biosA0
[0x4d] = 
psxBios_GPU_GëGPUSètus
;

2381 
biosA0
[0x51] = 
psxBios_LﬂdExec
;

2412 
biosA0
[0x70] = 
psxBios__bu_öô
;

2413 
biosA0
[0x71] = 
psxBios__96_öô
;

2414 
biosA0
[0x72] = 
psxBios__96_ªmove
;

2459 
biosA0
[0x9f] = 
psxBios_SëMem
;

2471 
biosA0
[0xab] = 
psxBios__ˇrd_öfo
;

2472 
biosA0
[0xac] = 
psxBios__ˇrd_lﬂd
;

2484 
biosB0
[0x02] = 
psxBios_SëRC¡
;

2485 
biosB0
[0x03] = 
psxBios_GëRC¡
;

2486 
biosB0
[0x04] = 
psxBios_SèπRC¡
;

2487 
biosB0
[0x05] = 
psxBios_St›RC¡
;

2488 
biosB0
[0x06] = 
psxBios_Re£tRC¡
;

2489 
biosB0
[0x07] = 
psxBios_DñivîEvít
;

2490 
biosB0
[0x08] = 
psxBios_O≥nEvít
;

2491 
biosB0
[0x09] = 
psxBios_Clo£Evít
;

2492 
biosB0
[0x0a] = 
psxBios_WaôEvít
;

2493 
biosB0
[0x0b] = 
psxBios_Te°Evít
;

2494 
biosB0
[0x0c] = 
psxBios_E«bÀEvít
;

2495 
biosB0
[0x0d] = 
psxBios_DißbÀEvít
;

2496 
biosB0
[0x0e] = 
psxBios_O≥nTh
;

2497 
biosB0
[0x0f] = 
psxBios_Clo£Th
;

2498 
biosB0
[0x10] = 
psxBios_Ch™geTh
;

2500 
biosB0
[0x12] = 
psxBios_InôPAD
;

2501 
biosB0
[0x13] = 
psxBios_SèπPAD
;

2502 
biosB0
[0x14] = 
psxBios_St›PAD
;

2503 
biosB0
[0x15] = 
psxBios_PAD_öô
;

2504 
biosB0
[0x16] = 
psxBios_PAD_dr
;

2505 
biosB0
[0x17] = 
psxBios_Rëu∫FromEx˚±i⁄
;

2506 
biosB0
[0x18] = 
psxBios_Re£tE¡ryI¡
;

2507 
biosB0
[0x19] = 
psxBios_HookE¡ryI¡
;

2514 
biosB0
[0x20] = 
psxBios_UnDñivîEvít
;

2532 
biosB0
[0x32] = 
psxBios_›í
;

2533 
biosB0
[0x33] = 
psxBios_l£ek
;

2534 
biosB0
[0x34] = 
psxBios_ªad
;

2535 
biosB0
[0x35] = 
psxBios_wrôe
;

2536 
biosB0
[0x36] = 
psxBios_˛o£
;

2542 
biosB0
[0x3c] = 
psxBios_gëch¨
;

2545 
biosB0
[0x41] = 
psxBios_f‹m©
;

2546 
biosB0
[0x42] = 
psxBios_fú°fûe
;

2547 
biosB0
[0x43] = 
psxBios_√xtfûe
;

2548 
biosB0
[0x44] = 
psxBios_ª«me
;

2549 
biosB0
[0x45] = 
psxBios_dñëe
;

2554 
biosB0
[0x4a] = 
psxBios_InôCARD
;

2555 
biosB0
[0x4b] = 
psxBios_SèπCARD
;

2556 
biosB0
[0x4c] = 
psxBios_St›CARD
;

2558 
biosB0
[0x4e] = 
psxBios__ˇrd_wrôe
;

2559 
biosB0
[0x4f] = 
psxBios__ˇrd_ªad
;

2560 
biosB0
[0x50] = 
psxBios__√w_ˇrd
;

2561 
biosB0
[0x51] = 
psxBios_Krom2RawAdd
;

2566 
biosB0
[0x56] = 
psxBios_GëC0TabÀ
;

2567 
biosB0
[0x57] = 
psxBios_GëB0TabÀ
;

2568 
biosB0
[0x58] = 
psxBios__ˇrd_ch™
;

2571 
biosB0
[0x5b] = 
psxBios_Ch™geCÀ¨Pad
;

2577 
biosC0
[0x02] = 
psxBios_SysEnqI¡RP
;

2578 
biosC0
[0x03] = 
psxBios_SysDeqI¡RP
;

2585 
biosC0
[0x0a] = 
psxBios_Ch™geCÀ¨RC¡
;

2606 
ba£
 = 0x1000;

2607 
size
 = (
EvCB
) * 32;

2608 
Evít
 = (*)&
psxR
[
ba£
]; ba£ +
size
 * 6;

2609 
	`mem£t
(
Evít
, 0, 
size
 * 6);

2610 
HwEV
 = 
Evít
;

2611 
EvEV
 = 
Evít
 + 32;

2612 
RcEV
 = 
Evít
 + 32 * 2;

2613 
UeEV
 = 
Evít
 + 32 * 3;

2614 
SwEV
 = 
Evít
 + 32 * 4;

2615 
ThEV
 = 
Evít
 + 32 * 5;

2617 
±r
 = (
u32
 *)&
psxM
[0x0874];

2618 
±r
[0] = 
	`SWAPu32
(0x4c54 - 0x884);

2620 
±r
 = (
u32
 *)&
psxM
[0x0674];

2621 
±r
[6] = 
	`SWAPu32
(0xc80);

2623 
	`mem£t
(
SysI¡RP
, 0, (SysIntRP));

2624 
	`mem£t
(
Thªad
, 0, (Thread));

2625 
Thªad
[0].
°©us
 = 2;

2627 
jmp_öt
 = 
NULL
;

2628 
∑d_buf
 = 
NULL
;

2629 
∑d_buf1
 = 
NULL
;

2630 
∑d_buf2
 = 
NULL
;

2631 
∑d_buf1Àn
 = 
∑d_buf2Àn
 = 0;

2632 
hóp_addr
 = 
NULL
;

2633 
hóp_íd
 = 
NULL
;

2634 
C¨dSèã
 = -1;

2635 
CurThªad
 = 0;

2636 
	`mem£t
(
FDesc
, 0, (FDesc));

2638 
	`psxMu32ªf
(0x0150Ë
	`SWAPu32
(0x160);

2639 
	`psxMu32ªf
(0x0154Ë
	`SWAPu32
(0x320);

2640 
	`psxMu32ªf
(0x0160Ë
	`SWAPu32
(0x248);

2641 
	`°r˝y
((*)&
psxM
[0x248], "bu");

2649 
	`psxRu32ªf
(0x0000Ë
	`SWAPu32
((0x3b << 26) | 4);

2650 
	`psxMu32ªf
(0x0000Ë
	`SWAPu32
((0x3b << 26) | 0);

2651 
	`psxMu32ªf
(0x00a0Ë
	`SWAPu32
((0x3b << 26) | 1);

2652 
	`psxMu32ªf
(0x00b0Ë
	`SWAPu32
((0x3b << 26) | 2);

2653 
	`psxMu32ªf
(0x00c0Ë
	`SWAPu32
((0x3b << 26) | 3);

2654 
	`psxMu32ªf
(0x4c54Ë
	`SWAPu32
((0x3b << 26) | 0);

2655 
	`psxMu32ªf
(0x8000Ë
	`SWAPu32
((0x3b << 26) | 5);

2656 
	`psxMu32ªf
(0x07a0Ë
	`SWAPu32
((0x3b << 26) | 0);

2657 
	`psxMu32ªf
(0x0884Ë
	`SWAPu32
((0x3b << 26) | 0);

2658 
	`psxMu32ªf
(0x0894Ë
	`SWAPu32
((0x3b << 26) | 0);

2661 
	`psxMu32ªf
(0x6c80Ë
	`SWAPu32
(0x000085c8);

2664 
	`psxMu32ªf
(0x9010Ë
	`SWAPu32
(0xac20cc00);

2667 
Àn
 = 0x80000 - 0x66000;

2668 
	`uncom¥ess
((
Byãf
 *)(
psxR
 + 0x66000), &
Àn
, 
f⁄t_8140
, (font_8140));

2669 
Àn
 = 0x80000 - 0x69d68;

2670 
	`uncom¥ess
((
Byãf
 *)(
psxR
 + 0x69d68), &
Àn
, 
f⁄t_889f
, (font_889f));

2673 
	`psxHu32ªf
(0x1060Ë
	`SWAPu32
(0x00000b88);

2675 
hÀSo·CÆl
 = 
FALSE
;

2676 
	}
}

2678 
	$psxBiosShutdown
() {

2679 
	}
}

2681 
	#psxBios_PADpﬁl
(
∑d
) { \

2682 
PAD
##
∑d
##
	`_°¨tPﬁl
(pad); \

2683 
∑d_buf
##
∑d
[0] = 0; \

2684 
∑d_buf
##
∑d
[1] = 
PAD
##∑d##
	`_pﬁl
(0x42); \

2685 i‡(!(
∑d_buf
##
∑d
[1] & 0x0f)) { \

2686 
bufcou¡
 = 32; \

2688 
bufcou¡
 = (
∑d_buf
##
∑d
[1] & 0x0f) * 2; \

2690 
PAD
##
∑d
##
	`_pﬁl
(0); \

2691 
i
 = 2; \

2692 
bufcou¡
--) { \

2693 
∑d_buf
##
∑d
[
i
++] = 
PAD
##∑d##
	`_pﬁl
(0); \

2695 }

	)

2697 
	$biosI¡îru±
() {

2698 
i
, 
bufcou¡
;

2701 i‡(
∑d_buf
 !
NULL
) {

2702 
u32
 *
buf
 = (u32*)
∑d_buf
;

2704 i‡(!
C⁄fig
.
U£Në
) {

2705 
	`PAD1_°¨tPﬁl
(1);

2706 i‡(
	`PAD1_pﬁl
(0x42) == 0x23) {

2707 
	`PAD1_pﬁl
(0);

2708 *
buf
 = 
	`PAD1_pﬁl
(0) << 8;

2709 *
buf
 |
	`PAD1_pﬁl
(0);

2710 
	`PAD1_pﬁl
(0);

2711 *
buf
 &~((
	`PAD1_pﬁl
(0) > 0x20) ? 1 << 6 : 0);

2712 *
buf
 &~((
	`PAD1_pﬁl
(0) > 0x20) ? 1 << 7 : 0);

2714 
	`PAD1_pﬁl
(0);

2715 *
buf
 = 
	`PAD1_pﬁl
(0) << 8;

2716 *
buf
|
	`PAD1_pﬁl
(0);

2719 
	`PAD2_°¨tPﬁl
(2);

2720 i‡(
	`PAD2_pﬁl
(0x42) == 0x23) {

2721 
	`PAD2_pﬁl
(0);

2722 *
buf
 |
	`PAD2_pﬁl
(0) << 24;

2723 *
buf
 |
	`PAD2_pﬁl
(0) << 16;

2724 
	`PAD2_pﬁl
(0);

2725 *
buf
 &~((
	`PAD2_pﬁl
(0) > 0x20) ? 1 << 22 : 0);

2726 *
buf
 &~((
	`PAD2_pﬁl
(0) > 0x20) ? 1 << 23 : 0);

2728 
	`PAD2_pﬁl
(0);

2729 *
buf
 |
	`PAD2_pﬁl
(0) << 24;

2730 *
buf
 |
	`PAD2_pﬁl
(0) << 16;

2733 
u16
 
d©a
;

2735 
	`PAD1_°¨tPﬁl
(1);

2736 
	`PAD1_pﬁl
(0x42);

2737 
	`PAD1_pﬁl
(0);

2738 
d©a
 = 
	`PAD1_pﬁl
(0) << 8;

2739 
d©a
 |
	`PAD1_pﬁl
(0);

2741 i‡(
	`NET_£ndPadD©a
(&
d©a
, 2) == -1)

2742 
	`√tEº‹
();

2744 i‡(
	`NET_ªcvPadD©a
(&((
u16
*)
buf
)[0], 1) == -1)

2745 
	`√tEº‹
();

2746 i‡(
	`NET_ªcvPadD©a
(&((
u16
*)
buf
)[1], 2) == -1)

2747 
	`√tEº‹
();

2750 i‡(
C⁄fig
.
U£Në
 && 
∑d_buf1
 !
NULL
 && 
∑d_buf2
 != NULL) {

2751 
	`psxBios_PADpﬁl
(1);

2753 i‡(
	`NET_£ndPadD©a
(
∑d_buf1
, 
i
) == -1)

2754 
	`√tEº‹
();

2756 i‡(
	`NET_ªcvPadD©a
(
∑d_buf1
, 1) == -1)

2757 
	`√tEº‹
();

2758 i‡(
	`NET_ªcvPadD©a
(
∑d_buf2
, 2) == -1)

2759 
	`√tEº‹
();

2761 i‡(
∑d_buf1
) {

2762 
	`psxBios_PADpﬁl
(1);

2765 i‡(
∑d_buf2
) {

2766 
	`psxBios_PADpﬁl
(2);

2770 i‡(
	`psxHu32
(0x1070) & 0x1) {

2771 i‡(
RcEV
[3][1].
°©us
 =
EvStACTIVE
) {

2772 
	`so·CÆl
(
RcEV
[3][1].
fh™dÀr
);

2777 i‡(
	`psxHu32
(0x1070) & 0x70) {

2778 
i
;

2780 
i
 = 0; i < 3; i++) {

2781 i‡(
	`psxHu32
(0x1070Ë& (1 << (
i
 + 4))) {

2782 i‡(
RcEV
[
i
][1].
°©us
 =
EvStACTIVE
) {

2783 
	`so·CÆl
(
RcEV
[
i
][1].
fh™dÀr
);

2785 
	`psxHwWrôe32
(0x1f801070, ~(1 << (
i
 + 4)));

2789 
	}
}

2791 
	$psxBiosEx˚±i⁄
() {

2792 
i
;

2794 
psxRegs
.
CP0
.
n
.
Cau£
 & 0x3c) {

2796 #ifde‡
PSXCPU_LOG


2799 
	`SaveRegs
();

2801 
•
 = 
	`psxMu32
(0x6c80);

2803 
	`biosI¡îru±
();

2805 
i
 = 0; i < 8; i++) {

2806 i‡(
SysI¡RP
[
i
]) {

2807 
u32
 *
queue
 = (u32 *)
	`PSXM
(
SysI¡RP
[
i
]);

2809 
s0
 = 
queue
[2];

2810 
	`so·CÆl
(
queue
[1]);

2814 i‡(
jmp_öt
 !
NULL
) {

2815 
i
;

2817 
	`psxHwWrôe32
(0x1f801070, 0xffffffff);

2819 
ø
 = 
jmp_öt
[0];

2820 
•
 = 
jmp_öt
[1];

2821 
Â
 = 
jmp_öt
[2];

2822 
i
 = 0; i < 8; i++)

2823 
psxRegs
.
GPR
.
r
[16 + 
i
] = 
jmp_öt
[3 + i];

2824 
gp
 = 
jmp_öt
[11];

2826 
v0
 = 1;

2827 
pc0
 = 
ø
;

2830 
	`psxHwWrôe16
(0x1f801070, 0);

2834 #ifde‡
PSXCPU_LOG


2835 
	`PSXCPU_LOG
("sysˇŒÉx∞%x\n", 
a0
);

2837 
a0
) {

2839 
psxRegs
.
CP0
.
n
.
Sètus
 &= ~0x404;

2840 
v0
=1;

2844 
psxRegs
.
CP0
.
n
.
Sètus
 |= 0x404;

2847 
pc0
 = 
psxRegs
.
CP0
.
n
.
EPC
 + 4;

2849 
psxRegs
.
CP0
.
n
.
Sètus
 = (psxRegs.CP0.n.Status & 0xfffffff0) |

2850 ((
psxRegs
.
CP0
.
n
.
Sètus
 & 0x3c) >> 2);

2854 #ifde‡
PSXCPU_LOG


2855 
	`PSXCPU_LOG
("unknown biosÉxception!\n");

2860 
pc0
 = 
psxRegs
.
CP0
.
n
.
EPC
;

2861 i‡(
psxRegs
.
CP0
.
n
.
Cau£
 & 0x80000000Ë
pc0
+=4;

2863 
psxRegs
.
CP0
.
n
.
Sètus
 = (psxRegs.CP0.n.Status & 0xfffffff0) |

2864 ((
psxRegs
.
CP0
.
n
.
Sètus
 & 0x3c) >> 2);

2865 
	}
}

2867 
	#b‰ìze
(
±r
, 
size
) { \

2868 i‡(
Mode
 =1Ë
	`mem˝y
(&
psxR
[
ba£
], 
±r
, 
size
); \

2869 i‡(
Mode
 =0Ë
	`mem˝y
(
±r
, &
psxR
[
ba£
], 
size
); \

2870 
ba£
 +
size
; \

2871 }

	)

2873 
	#b‰ìzes
(
±r
Ë
	`b‰ìze
’å, ’å))

	)

2874 
	#b‰ìzñ
(
±r
Ë
	`b‰ìze
’å, (*±r))

	)

2876 
	#b‰ìzïsxM±r
(
±r
, 
ty≥
) { \

2877 i‡(
Mode
 == 1) { \

2878 i‡(
±r
Ë
	`psxRu32ªf
(
ba£
Ë
	`SWAPu32
((
s8
 *)’åË- 
psxM
); \

2879 
	`psxRu32ªf
(
ba£
) = 0; \

2881 i‡(
	`psxRu32
(
ba£
Ë!0Ë
±r
 = (
ty≥
 *)(
psxM
 +ÖsxRu32(base)); \

2882 (
±r
Ë
NULL
; \

2884 
ba£
 +(
u32
); \

2885 }

	)

2887 
	$psxBiosFªeze
(
Mode
) {

2888 
u32
 
ba£
 = 0x40000;

2890 
	`b‰ìzïsxM±r
(
jmp_öt
, 
u32
);

2891 
	`b‰ìzïsxM±r
(
∑d_buf
, );

2892 
	`b‰ìzïsxM±r
(
∑d_buf1
, );

2893 
	`b‰ìzïsxM±r
(
∑d_buf2
, );

2894 
	`b‰ìzïsxM±r
(
hóp_addr
, 
u32
);

2895 
	`b‰ìzñ
(&
∑d_buf1Àn
);

2896 
	`b‰ìzñ
(&
∑d_buf2Àn
);

2897 
	`b‰ìzes
(
ªgs
);

2898 
	`b‰ìzes
(
SysI¡RP
);

2899 
	`b‰ìzñ
(&
C¨dSèã
);

2900 
	`b‰ìzes
(
Thªad
);

2901 
	`b‰ìzñ
(&
CurThªad
);

2902 
	`b‰ìzes
(
FDesc
);

2903 
	`b‰ìzñ
(&
ˇrd_a˘ive_ch™
);

2904 
	}
}

	@libpcsxcore/psxbios.h

20 #i‚de‡
__PSXBIOS_H__


21 
	#__PSXBIOS_H__


	)

23 #ifde‡
__˝lu•lus


27 
	~"psxcomm⁄.h
"

28 
	~"r3000a.h
"

29 
	~"psxmem.h
"

30 
	~"misc.h
"

31 
	~"sio.h
"

33 *
biosA0n
[256];

34 *
biosB0n
[256];

35 *
biosC0n
[256];

37 
psxBiosInô
();

38 
psxBiosShutdown
();

39 
psxBiosEx˚±i⁄
();

40 
psxBiosFªeze
(
Mode
);

42 (*
biosA0
[256])();

43 (*
biosB0
[256])();

44 (*
biosC0
[256])();

46 
boﬁón
 
hÀSo·CÆl
;

48 #ifde‡
__˝lu•lus


	@libpcsxcore/psxcommon.c

20 
	~"psxcomm⁄.h
"

21 
	~"r3000a.h
"

22 
	~"psxbios.h
"

24 
	~"chót.h
"

25 
	~"µf.h
"

27 
PcsxC⁄fig
 
	gC⁄fig
;

28 
boﬁón
 
	gNëO≥√d
 = 
FALSE
;

30 
	gLog
 = 0;

31 
FILE
 *
	gemuLog
 = 
NULL
;

33 
	$EmuInô
() {

34  
	`psxInô
();

35 
	}
}

37 
	$EmuRe£t
() {

38 
	`FªeChótSórchResu…s
();

39 
	`FªeChótSórchMem
();

41 
	`psxRe£t
();

42 
	}
}

44 
	$EmuShutdown
() {

45 
	`CÀ¨AŒChóts
();

46 
	`FªeChótSórchResu…s
();

47 
	`FªeChótSórchMem
();

49 
	`FªePPFCache
();

51 
	`psxShutdown
();

52 
	}
}

54 
	$EmuUpd©e
() {

56 i‡(!
C⁄fig
.
HLE
 || !
hÀSo·CÆl
)

57 
	`SysUpd©e
();

59 
	`AµlyChóts
();

63 
	`∂_‰ame_limô
();

64 
	`∂_‰ame_limô
();

66 
	}
}

68 
	$__Log
(*
fmt
, ...) {

69 
va_li°
 
li°
;

70 #ifde‡
LOG_STDOUT


71 
tmp
[1024];

74 
	`va_°¨t
(
li°
, 
fmt
);

75 #i‚de‡
LOG_STDOUT


76 
	`vÂrötf
(
emuLog
, 
fmt
, 
li°
);

78 
	`v•rötf
(
tmp
, 
fmt
, 
li°
);

79 
	`SysPrötf
(
tmp
);

81 
	`va_íd
(
li°
);

82 
	}
}

	@libpcsxcore/psxcommon.h

25 #i‚de‡
__PSXCOMMON_H__


26 
	#__PSXCOMMON_H__


	)

28 #ifde‡
__˝lu•lus


32 
	~"c⁄fig.h
"

35 
	~<°dio.h
>

36 
	~<°rög.h
>

37 
	~<°d¨g.h
>

38 
	~<°döt.h
>

39 
	~<°dlib.h
>

40 
	~<m©h.h
>

41 
	~<time.h
>

42 
	~<˘y≥.h
>

43 
	~<sys/ty≥s.h
>

44 
	~<as£π.h
>

47 
öt8_t
 
	ts8
;

48 
öt16_t
 
	ts16
;

49 
öt32_t
 
	ts32
;

50 
öt64_t
 
	ts64
;

51 
öçå_t
 
	t•å
;

53 
uöt8_t
 
	tu8
;

54 
uöt16_t
 
	tu16
;

55 
uöt32_t
 
	tu32
;

56 
uöt64_t
 
	tu64
;

57 
uöçå_t
 
	tu±r
;

59 
uöt8_t
 
	tboﬁón
;

61 #i‚de‡
TRUE


62 
	#TRUE
 1

	)

65 #i‚de‡
FALSE


66 
	#FALSE
 0

	)

70 
	~"sy°em.h
"

72 #i‚de‡
_WIN32


73 
	#°∫icmp
 
°∫ˇ£cmp


	)

75 
	#__ölöe
 
ölöe


	)

78 #ifde‡
ENABLE_NLS


80 
	~<liböé.h
>

82 #unde‡
_


83 
	#_
(
Såög
Ë
	`gëãxt
(Såög)

	)

84 #ifde‡
gëãxt_no›


85 
	#N_
(
Såög
Ë
	`gëãxt_no›
 (Såög)

	)

87 
	#N_
(
Såög
Ë(Såög)

	)

92 
	#_
(
msgid
Ë
	)
msgid

93 
	#N_
(
msgid
Ë
	)
msgid

97 
FILE
 *
emuLog
;

98 
Log
;

100 
__Log
(*
fmt
, ...);

103 
	gGpu
[
MAXPATHLEN
];

104 
	gSpu
[
MAXPATHLEN
];

105 
	gCdr
[
MAXPATHLEN
];

106 
	gPad1
[
MAXPATHLEN
];

107 
	gPad2
[
MAXPATHLEN
];

108 
	gNë
[
MAXPATHLEN
];

109 
	gSio1
[
MAXPATHLEN
];

110 
	gMcd1
[
MAXPATHLEN
];

111 
	gMcd2
[
MAXPATHLEN
];

112 
	gBios
[
MAXPATHLEN
];

113 
	gBiosDú
[
MAXPATHLEN
];

114 
	gPlugösDú
[
MAXPATHLEN
];

115 
	gP©chesDú
[
MAXPATHLEN
];

116 
boﬁón
 
	gXa
;

117 
boﬁón
 
	gSio
;

118 
boﬁón
 
	gMdec
;

119 
boﬁón
 
	gPsxAuto
;

120 
boﬁón
 
	gCdda
;

121 
boﬁón
 
	gHLE
;

122 
boﬁón
 
	gDebug
;

123 
boﬁón
 
	gPsxOut
;

124 
boﬁón
 
	gSpuIrq
;

125 
boﬁón
 
	gRC¡Fix
;

126 
boﬁón
 
	gU£Në
;

127 
boﬁón
 
	gVSyncWA
;

128 
u8
 
	gCpu
;

129 
u8
 
	gPsxTy≥
;

130 #ifde‡
_WIN32


131 
	gL™g
[256];

133 } 
	tPcsxC⁄fig
;

135 
PcsxC⁄fig
 
C⁄fig
;

136 
boﬁón
 
NëO≥√d
;

138 
	sPcsxSaveFuncs
 {

139 *(*
	g›í
)(c⁄° *
	g«me
, c⁄° *
	gmode
);

140 (*
	gªad
)(*
	gfûe
, *
	gbuf
, 
u32
 
	gÀn
);

141 (*
	gwrôe
)(*
	gfûe
, c⁄° *
	gbuf
, 
u32
 
	gÀn
);

142 (*
	g£ek
)(*
	gfûe
, 
	goffs
, 
	gwhí˚
);

143 (*
	g˛o£
)(*
	gfûe
);

145 
PcsxSaveFuncs
 
SaveFuncs
;

147 
	#gz‰ìze
(
±r
, 
size
) { \

148 i‡(
Mode
 =1Ë
SaveFuncs
.
	`wrôe
(
f
, 
±r
, 
size
); \

149 i‡(
Mode
 =0Ë
SaveFuncs
.
	`ªad
(
f
, 
±r
, 
size
); \

150 }

	)

155 
	#BIAS
 2

	)

156 
	#PSXCLK
 33868800

	)

159 
	gPSX_TYPE_NTSC
 = 0,

160 
	gPSX_TYPE_PAL


164 
	gCPU_DYNAREC
 = 0,

165 
	gCPU_INTERPRETER


168 
EmuInô
();

169 
EmuRe£t
();

170 
EmuShutdown
();

171 
EmuUpd©e
();

173 #ifde‡
__˝lu•lus


	@libpcsxcore/psxcounters.c

24 
	~"psxcou¡îs.h
"

25 
	~"gpu.h
"

26 
	~"debug.h
"

32 
	mRc0G©e
 = 0x0001,

33 
	mRc1G©e
 = 0x0001,

34 
	mRc2DißbÀ
 = 0x0001,

35 
	mRcUnknown1
 = 0x0002,

36 
	mRcUnknown2
 = 0x0004,

37 
	mRcCou¡ToT¨gë
 = 0x0008,

38 
	mRcIrqOnT¨gë
 = 0x0010,

39 
	mRcIrqOnOvîÊow
 = 0x0020,

40 
	mRcIrqRegíî©e
 = 0x0040,

41 
	mRcUnknown7
 = 0x0080,

42 
	mRc0PixñClock
 = 0x0100,

43 
	mRc1HSyncClock
 = 0x0100,

44 
	mRc2Unknown8
 = 0x0100,

45 
	mRc0Unknown9
 = 0x0200,

46 
	mRc1Unknown9
 = 0x0200,

47 
	mRc2O√EighthClock
 = 0x0200,

48 
	mRcUnknown10
 = 0x0400,

49 
	mRcCou¡EqT¨gë
 = 0x0800,

50 
	mRcOvîÊow
 = 0x1000,

51 
	mRcUnknown13
 = 0x2000,

52 
	mRcUnknown14
 = 0x4000,

53 
	mRcUnknown15
 = 0x8000,

56 
	#Cou¡îQu™tôy
 ( 4 )

	)

59 c⁄° 
u32
 
	gCou¡ToOvîÊow
 = 0;

60 c⁄° 
u32
 
	gCou¡ToT¨gë
 = 1;

62 c⁄° 
u32
 
	gFømeR©e
[] = { 60, 50 };

63 c⁄° 
u32
 
	gHSyncTŸÆ
[] = { 263, 313 };

64 
	#VBœnkSèπ
 240

	)

66 
	#VERBOSE_LEVEL
 0

	)

67 c⁄° 
s32
 
	gVîbo£Levñ
 = 
VERBOSE_LEVEL
;

71 
R˙t
 
	gr˙ts
[ 
Cou¡îQu™tôy
 ];

73 
u32
 
	ghSyncCou¡
 = 0;

74 
u32
 
	g‰ame_cou¡î
 = 0;

75 
u32
 
	ghsync_°ïs
 = 0;

76 
u32
 
	gba£_cy˛e
 = 0;

78 
u32
 
	gpsxNextCou¡î
 = 0, 
	gpsxNextsCou¡î
 = 0;

82 
ölöe


83 
	$£tIrq
–
u32
 
úq
 )

85 
	`psxHu32ªf
(0x1070Ë|
	`SWAPu32
(
úq
);

86 
	}
}

89 
	$vîbo£Log
–
u32
 
Àvñ
, c⁄° *
°r
, ... )

91 #i‡
VERBOSE_LEVEL
 > 0

92 if–
Àvñ
 <
Vîbo£Levñ
 )

94 
va_li°
 
va
;

95 
buf
[ 4096 ];

97 
	`va_°¨t
–
va
, 
°r
 );

98 
	`v•rötf
–
buf
, 
°r
, 
va
 );

99 
	`va_íd
–
va
 );

101 
	`¥ötf
–"%s", 
buf
 );

102 
	`fÊush
–
°dout
 );

105 
	}
}

109 
ölöe


110 
	$_psxR˙tWcou¡
–
u32
 
ödex
, u32 
vÆue
 )

112 if–
vÆue
 > 0xffff )

114 
	`vîbo£Log
–1, "[RCNT %i] wcou¡ > 0xffff: %x\n", 
ödex
, 
vÆue
 );

115 
vÆue
 &= 0xffff;

118 
r˙ts
[
ödex
].
cy˛eSèπ
 = 
psxRegs
.
cy˛e
;

119 
r˙ts
[
ödex
].
cy˛eSèπ
 -
vÆue
 *Ñ˙ts[ödex].
øã
;

122 if–
vÆue
 < 
r˙ts
[
ödex
].
èrgë
 )

124 
r˙ts
[
ödex
].
cy˛e
 =Ñ˙ts[ödex].
èrgë
 *Ñ˙ts[ödex].
øã
;

125 
r˙ts
[
ödex
].
cou¡îSèã
 = 
Cou¡ToT¨gë
;

129 
r˙ts
[
ödex
].
cy˛e
 = 0x10000 *Ñ˙ts[ödex].
øã
;

130 
r˙ts
[
ödex
].
cou¡îSèã
 = 
Cou¡ToOvîÊow
;

132 
	}
}

134 
ölöe


135 
u32
 
	$_psxR˙tRcou¡
–
u32
 
ödex
 )

137 
u32
 
cou¡
;

139 
cou¡
 = 
psxRegs
.
cy˛e
;

140 
cou¡
 -
r˙ts
[
ödex
].
cy˛eSèπ
;

141 i‡(
r˙ts
[
ödex
].
øã
 > 1)

142 
cou¡
 /
r˙ts
[
ödex
].
øã
;

144 if–
cou¡
 > 0x10000 )

146 
	`vîbo£Log
–1, "[RCNT %i]Ñcou¡ > 0x10000: %x\n", 
ödex
, 
cou¡
 );

148 
cou¡
 &= 0xffff;

150  
cou¡
;

151 
	}
}

154 
	$_psxR˙tWmode
–
u32
 
ödex
, u32 
vÆue
 )

156 
r˙ts
[
ödex
].
mode
 = 
vÆue
;

158  
ödex
 )

161 if–
vÆue
 & 
Rc0PixñClock
 )

163 
r˙ts
[
ödex
].
øã
 = 5;

167 
r˙ts
[
ödex
].
øã
 = 1;

171 if–
vÆue
 & 
Rc1HSyncClock
 )

173 
r˙ts
[
ödex
].
øã
 = (
PSXCLK
 / (
FømeR©e
[
C⁄fig
.
PsxTy≥
] * 
HSyncTŸÆ
[Config.PsxType]));

177 
r˙ts
[
ödex
].
øã
 = 1;

181 if–
vÆue
 & 
Rc2O√EighthClock
 )

183 
r˙ts
[
ödex
].
øã
 = 8;

187 
r˙ts
[
ödex
].
øã
 = 1;

191 if–
vÆue
 & 
Rc2DißbÀ
 )

193 
r˙ts
[
ödex
].
øã
 = 0xffffffff;

197 
	}
}

202 
	$psxR˙tSë
()

204 
s32
 
cou¡ToUpd©e
;

205 
u32
 
i
;

207 
psxNextsCou¡î
 = 
psxRegs
.
cy˛e
;

208 
psxNextCou¡î
 = 0x7fffffff;

210  
i
 = 0; i < 
Cou¡îQu™tôy
; ++i )

212 
cou¡ToUpd©e
 = 
r˙ts
[
i
].
cy˛e
 - (
psxNextsCou¡î
 -Ñ˙ts[i].
cy˛eSèπ
);

214 if–
cou¡ToUpd©e
 < 0 )

216 
psxNextCou¡î
 = 0;

220 if–
cou¡ToUpd©e
 < (
s32
)
psxNextCou¡î
 )

222 
psxNextCou¡î
 = 
cou¡ToUpd©e
;

226 
psxRegs
.
öãºu±
 |(1 << 
PSXINT_RCNT
);

227 
	`√w_dy«_£t_evít
(
PSXINT_RCNT
, 
psxNextCou¡î
);

228 
	}
}

233 
	$psxR˙tRe£t
–
u32
 
ödex
 )

235 
u32
 
rcy˛es
;

237 
r˙ts
[
ödex
].
mode
 |
RcUnknown10
;

239 if–
r˙ts
[
ödex
].
cou¡îSèã
 =
Cou¡ToT¨gë
 )

241 
rcy˛es
 = 
psxRegs
.
cy˛e
 - 
r˙ts
[
ödex
].
cy˛eSèπ
;

242 if–
r˙ts
[
ödex
].
mode
 & 
RcCou¡ToT¨gë
 )

244 
rcy˛es
 -
r˙ts
[
ödex
].
èrgë
 *Ñ˙ts[ödex].
øã
;

245 
r˙ts
[
ödex
].
cy˛eSèπ
 = 
psxRegs
.
cy˛e
 - 
rcy˛es
;

249 
r˙ts
[
ödex
].
cy˛e
 = 0x10000 *Ñ˙ts[ödex].
øã
;

250 
r˙ts
[
ödex
].
cou¡îSèã
 = 
Cou¡ToOvîÊow
;

253 if–
r˙ts
[
ödex
].
mode
 & 
RcIrqOnT¨gë
 )

255 if–(
r˙ts
[
ödex
].
mode
 & 
RcIrqRegíî©e
Ë|| (!r˙ts[ödex].
úqSèã
) )

257 
	`vîbo£Log
–3, "[RCNT %i] irq\n", 
ödex
 );

258 
	`£tIrq
–
r˙ts
[
ödex
].
úq
 );

259 
r˙ts
[
ödex
].
úqSèã
 = 1;

263 
r˙ts
[
ödex
].
mode
 |
RcCou¡EqT¨gë
;

265 if–
rcy˛es
 < 0x10000 * 
r˙ts
[
ödex
].
øã
 )

269 if–
r˙ts
[
ödex
].
cou¡îSèã
 =
Cou¡ToOvîÊow
 )

271 
rcy˛es
 = 
psxRegs
.
cy˛e
 - 
r˙ts
[
ödex
].
cy˛eSèπ
;

272 
rcy˛es
 -0x10000 * 
r˙ts
[
ödex
].
øã
;

274 
r˙ts
[
ödex
].
cy˛eSèπ
 = 
psxRegs
.
cy˛e
 - 
rcy˛es
;

276 if–
rcy˛es
 < 
r˙ts
[
ödex
].
èrgë
 *Ñ˙ts[ödex].
øã
 )

278 
r˙ts
[
ödex
].
cy˛e
 =Ñ˙ts[ödex].
èrgë
 *Ñ˙ts[ödex].
øã
;

279 
r˙ts
[
ödex
].
cou¡îSèã
 = 
Cou¡ToT¨gë
;

282 if–
r˙ts
[
ödex
].
mode
 & 
RcIrqOnOvîÊow
 )

284 if–(
r˙ts
[
ödex
].
mode
 & 
RcIrqRegíî©e
Ë|| (!r˙ts[ödex].
úqSèã
) )

286 
	`vîbo£Log
–3, "[RCNT %i] irq\n", 
ödex
 );

287 
	`£tIrq
–
r˙ts
[
ödex
].
úq
 );

288 
r˙ts
[
ödex
].
úqSèã
 = 1;

292 
r˙ts
[
ödex
].
mode
 |
RcOvîÊow
;

294 
	}
}

296 
	$psxR˙tUpd©e
()

298 
u32
 
cy˛e
;

300 
cy˛e
 = 
psxRegs
.cycle;

303 if–
cy˛e
 - 
r˙ts
[0].
cy˛eSèπ
 >=Ñcnts[0].cycle )

305 
	`psxR˙tRe£t
( 0 );

309 if–
cy˛e
 - 
r˙ts
[1].
cy˛eSèπ
 >=Ñcnts[1].cycle )

311 
	`psxR˙tRe£t
( 1 );

315 if–
cy˛e
 - 
r˙ts
[2].
cy˛eSèπ
 >=Ñcnts[2].cycle )

317 
	`psxR˙tRe£t
( 2 );

321 if–
cy˛e
 - 
r˙ts
[3].
cy˛eSèπ
 >=Ñcnts[3].cycle )

323 
u32
 
À·ovî_cy˛es
 = 
cy˛e
 - 
r˙ts
[3].
cy˛eSèπ
 -Ñcnts[3].cycle;

324 
u32
 
√xt_vsync
;

326 
hSyncCou¡
 +
hsync_°ïs
;

329 if–
hSyncCou¡
 =
VBœnkSèπ
 )

331 
HW_GPU_STATUS
 &~
PSXGPU_LCF
;

332 
	`GPU_vBœnk
( 1, 0 );

333 
	`£tIrq
( 0x01 );

335 
	`EmuUpd©e
();

336 
	`GPU_upd©eLa˚
();

338 if–
SPU_async
 )

340 
	`SPU_async
–
cy˛e
, 1 );

345 if–
hSyncCou¡
 >(
C⁄fig
.
VSyncWA
 ? 
HSyncTŸÆ
[C⁄fig.
PsxTy≥
] / 
BIAS
 : HSyncTotal[Config.PsxType]) )

347 
hSyncCou¡
 = 0;

348 
‰ame_cou¡î
++;

350 
	`gpuSyncPlugöSR
();

351 if–(
HW_GPU_STATUS
 & 
PSXGPU_ILACE_BITS
) == PSXGPU_ILACE_BITS )

352 
HW_GPU_STATUS
 |
‰ame_cou¡î
 << 31;

353 
	`GPU_vBœnk
–0, 
HW_GPU_STATUS
 >> 31 );

357 
hsync_°ïs
 = 
HSyncTŸÆ
[
C⁄fig
.
PsxTy≥
] - 
hSyncCou¡
;

358 
√xt_vsync
 = 
VBœnkSèπ
 - 
hSyncCou¡
;

359 if–
√xt_vsync
 &&Çext_vsyn¯< 
hsync_°ïs
 )

360 
hsync_°ïs
 = 
√xt_vsync
;

362 
r˙ts
[3].
cy˛eSèπ
 = 
cy˛e
 - 
À·ovî_cy˛es
;

363 i‡(
C⁄fig
.
PsxTy≥
)

365 
ba£_cy˛e
 +
hsync_°ïs
 * 8864320;

368 
ba£_cy˛e
 +
hsync_°ïs
 * 8791293;

369 
r˙ts
[3].
cy˛e
 = 
ba£_cy˛e
 >> 12;

370 
ba£_cy˛e
 &= 0xfff;

373 
	`psxR˙tSë
();

375 #i‚de‡
NDEBUG


376 
	`DebugVSync
();

378 
	}
}

382 
	$psxR˙tWcou¡
–
u32
 
ödex
, u32 
vÆue
 )

384 
	`vîbo£Log
–2, "[RCNT %i] wcou¡: %x\n", 
ödex
, 
vÆue
 );

386 
	`_psxR˙tWcou¡
–
ödex
, 
vÆue
 );

387 
	`psxR˙tSë
();

388 
	}
}

390 
	$psxR˙tWmode
–
u32
 
ödex
, u32 
vÆue
 )

392 
	`vîbo£Log
–1, "[RCNT %i] wmode: %x\n", 
ödex
, 
vÆue
 );

394 
	`_psxR˙tWmode
–
ödex
, 
vÆue
 );

395 
	`_psxR˙tWcou¡
–
ödex
, 0 );

397 
r˙ts
[
ödex
].
úqSèã
 = 0;

398 
	`psxR˙tSë
();

399 
	}
}

401 
	$psxR˙tWèrgë
–
u32
 
ödex
, u32 
vÆue
 )

403 
	`vîbo£Log
–1, "[RCNT %i] wèrgë: %x\n", 
ödex
, 
vÆue
 );

405 
r˙ts
[
ödex
].
èrgë
 = 
vÆue
;

407 
	`_psxR˙tWcou¡
–
ödex
, 
	`_psxR˙tRcou¡
( index ) );

408 
	`psxR˙tSë
();

409 
	}
}

413 
u32
 
	$psxR˙tRcou¡
–
u32
 
ödex
 )

415 
u32
 
cou¡
;

417 
cou¡
 = 
	`_psxR˙tRcou¡
–
ödex
 );

420 if–
C⁄fig
.
RC¡Fix
 )

422 if–
ödex
 == 2 )

424 if–
r˙ts
[
ödex
].
cou¡îSèã
 =
Cou¡ToT¨gë
 )

426 
cou¡
 /
BIAS
;

431 
	`vîbo£Log
–2, "[RCNT %i]Ñcou¡: %x\n", 
ödex
, 
cou¡
 );

433  
cou¡
;

434 
	}
}

436 
u32
 
	$psxR˙tRmode
–
u32
 
ödex
 )

438 
u16
 
mode
;

440 
mode
 = 
r˙ts
[
ödex
].mode;

441 
r˙ts
[
ödex
].
mode
 &= 0xe7ff;

443 
	`vîbo£Log
–2, "[RCNT %i]Ñmode: %x\n", 
ödex
, 
mode
 );

445  
mode
;

446 
	}
}

448 
u32
 
	$psxR˙tRèrgë
–
u32
 
ödex
 )

450 
	`vîbo£Log
–2, "[RCNT %i]Ñèrgë: %x\n", 
ödex
, 
r˙ts
[ödex].
èrgë
 );

452  
r˙ts
[
ödex
].
èrgë
;

453 
	}
}

457 
	$psxR˙tInô
()

459 
s32
 
i
;

462 
r˙ts
[0].
øã
 = 1;

463 
r˙ts
[0].
úq
 = 0x10;

466 
r˙ts
[1].
øã
 = 1;

467 
r˙ts
[1].
úq
 = 0x20;

470 
r˙ts
[2].
øã
 = 1;

471 
r˙ts
[2].
úq
 = 0x40;

474 
r˙ts
[3].
øã
 = 1;

475 
r˙ts
[3].
mode
 = 
RcCou¡ToT¨gë
;

476 
r˙ts
[3].
èrgë
 = (
PSXCLK
 / (
FømeR©e
[
C⁄fig
.
PsxTy≥
] * 
HSyncTŸÆ
[Config.PsxType]));

478  
i
 = 0; i < 
Cou¡îQu™tôy
; ++i )

480 
	`_psxR˙tWcou¡
–
i
, 0 );

483 
hSyncCou¡
 = 0;

484 
hsync_°ïs
 = 1;

486 
	`psxR˙tSë
();

487 
	}
}

491 
s32
 
	$psxR˙tFªeze
–*
f
, 
s32
 
Mode
 )

493 
u32
 
•uSyncCou¡
 = 0;

494 
u32
 
cou¡
;

495 
s32
 
i
;

497 
	`gz‰ìze
–&
r˙ts
, (rcnts) );

498 
	`gz‰ìze
–&
hSyncCou¡
, (hSyncCount) );

499 
	`gz‰ìze
–&
•uSyncCou¡
, (spuSyncCount) );

500 
	`gz‰ìze
–&
psxNextCou¡î
, (psxNextCounter) );

501 
	`gz‰ìze
–&
psxNextsCou¡î
, (psxNextsCounter) );

503 i‡(
Mode
 == 0)

506  
i
 = 0; i < 
Cou¡îQu™tôy
; ++i )

508 
	`_psxR˙tWmode
–
i
, 
r˙ts
[i].
mode
 );

509 
cou¡
 = (
psxRegs
.
cy˛e
 - 
r˙ts
[
i
].
cy˛eSèπ
Ë/Ñ˙ts[i].
øã
;

510 
	`_psxR˙tWcou¡
–
i
, 
cou¡
 );

512 
hsync_°ïs
 = (
psxRegs
.
cy˛e
 - 
r˙ts
[3].
cy˛eSèπ
Ë/Ñ˙ts[3].
èrgë
;

513 
	`psxR˙tSë
();

515 
ba£_cy˛e
 = 0;

519 
	}
}

	@libpcsxcore/psxcounters.h

20 #i‚de‡
__PSXCOUNTERS_H__


21 
	#__PSXCOUNTERS_H__


	)

23 #ifde‡
__˝lu•lus


27 
	~"psxcomm⁄.h
"

28 
	~"r3000a.h
"

29 
	~"psxmem.h
"

30 
	~"∂ugös.h
"

32 
u32
 
psxNextCou¡î
, 
psxNextsCou¡î
;

34 
u32
 
hSyncCou¡
, 
‰ame_cou¡î
;

36 
	sR˙t


38 
u16
 
	gmode
, 
	gèrgë
;

39 
u32
 
	gøã
, 
	gúq
, 
	gcou¡îSèã
, 
	gúqSèã
;

40 
u32
 
	gcy˛e
, 
	gcy˛eSèπ
;

41 } 
	tR˙t
;

42 
R˙t
 
r˙ts
[];

44 
psxR˙tInô
();

45 
psxR˙tUpd©e
();

47 
psxR˙tWcou¡
(
u32
 
ödex
, u32 
vÆue
);

48 
psxR˙tWmode
(
u32
 
ödex
, u32 
vÆue
);

49 
psxR˙tWèrgë
(
u32
 
ödex
, u32 
vÆue
);

51 
u32
 
psxR˙tRcou¡
(u32 
ödex
);

52 
u32
 
psxR˙tRmode
(u32 
ödex
);

53 
u32
 
psxR˙tRèrgë
(u32 
ödex
);

55 
s32
 
psxR˙tFªeze
(*
f
, s32 
Mode
);

57 #ifde‡
__˝lu•lus


	@libpcsxcore/psxdma.c

24 
	~"psxdma.h
"

25 
	~"gpu.h
"

30 
	$•uI¡îru±
() {

31 i‡(
HW_DMA4_CHCR
 & 
	`SWAP32
(0x01000000))

33 
HW_DMA4_CHCR
 &
	`SWAP32
(~0x01000000);

34 
	`DMA_INTERRUPT
(4);

36 
	}
}

38 
	$psxDma4
(
u32
 
madr
, u32 
b¸
, u32 
ch¸
) {

39 
u16
 *
±r
;

40 
u32
 
w‹ds
;

42 
ch¸
) {

44 #ifde‡
PSXDMA_LOG


45 
	`PSXDMA_LOG
("*** DMA4 SPU - mem2•u *** %xádd∏%x sizê%x\n", 
ch¸
, 
madr
, 
b¸
);

47 
±r
 = (
u16
 *)
	`PSXM
(
madr
);

48 i‡(
±r
 =
NULL
) {

49 #ifde‡
CPU_LOG


50 
	`CPU_LOG
("*** DMA4 SPU - mem2spu *** NULL Pointer!!!\n");

54 
w‹ds
 = (
b¸
 >> 16) * (bcr & 0xffff);

55 
	`SPU_wrôeDMAMem
(
±r
, 
w‹ds
 * 2, 
psxRegs
.
cy˛e
);

56 
HW_DMA4_MADR
 = 
	`SWAPu32
(
madr
 + 
w‹ds
 * 4);

57 
	`SPUDMA_INT
(
w‹ds
 / 2);

61 #ifde‡
PSXDMA_LOG


62 
	`PSXDMA_LOG
("*** DMA4 SPU - spu2mem *** %xádd∏%x sizê%x\n", 
ch¸
, 
madr
, 
b¸
);

64 
±r
 = (
u16
 *)
	`PSXM
(
madr
);

65 i‡(
±r
 =
NULL
) {

66 #ifde‡
CPU_LOG


67 
	`CPU_LOG
("*** DMA4 SPU - spu2mem *** NULL Pointer!!!\n");

71 
w‹ds
 = (
b¸
 >> 16) * (bcr & 0xffff);

72 
	`SPU_ªadDMAMem
(
±r
, 
w‹ds
 * 2, 
psxRegs
.
cy˛e
);

73 
psxCpu
->
	`CÀ¨
(
madr
, 
w‹ds
);

75 
HW_DMA4_MADR
 = 
	`SWAPu32
(
madr
 + 
w‹ds
 * 4);

76 
	`SPUDMA_INT
(
w‹ds
 / 2);

79 #ifde‡
PSXDMA_LOG


81 
	`PSXDMA_LOG
("*** DMA4 SPU - unknow¿*** %xádd∏%x sizê%x\n", 
ch¸
, 
madr
, 
b¸
);

86 
HW_DMA4_CHCR
 &
	`SWAP32
(~0x01000000);

87 
	`DMA_INTERRUPT
(4);

88 
	}
}

91 
ölöe
 
boﬁón
 
	$CheckF‹EndÀssLo›
(
u32
 
œddr
, u32 *
lU£dAddr
) {

92 i‡(
œddr
 =
lU£dAddr
[1]Ë 
TRUE
;

93 i‡(
œddr
 =
lU£dAddr
[2]Ë 
TRUE
;

95 i‡(
œddr
 < 
lU£dAddr
[0])ÜUsedAddr[1] =Üaddr;

96 
lU£dAddr
[2] = 
œddr
;

98 
lU£dAddr
[0] = 
œddr
;

100  
FALSE
;

101 
	}
}

103 
u32
 
	$gpuDmaChaöSize
(
u32
 
addr
) {

104 
u32
 
size
;

105 
u32
 
DMAComm™dCou¡î
 = 0;

106 
u32
 
lU£dAddr
[3];

108 
lU£dAddr
[0] =ÜUsedAddr[1] =ÜUsedAddr[2] = 0xffffff;

111 
size
 = 1;

114 
addr
 &= 0x1ffffc;

116 i‡(
DMAComm™dCou¡î
++ > 2000000) ;

117 i‡(
	`CheckF‹EndÀssLo›
(
addr
, 
lU£dAddr
)) ;

120 
size
 +
	`psxMu8
–
addr
 + 3 );

123 
addr
 = 
	`psxMu32
(áddr & ~0x3 ) & 0xffffff;

124 
size
 += 1;

125 } 
addr
 != 0xffffff);

127  
size
;

128 
	}
}

130 
	$psxDma2
(
u32
 
madr
, u32 
b¸
, u32 
ch¸
) {

131 
u32
 *
±r
;

132 
u32
 
w‹ds
;

133 
u32
 
size
;

135 
ch¸
) {

137 #ifde‡
PSXDMA_LOG


138 
	`PSXDMA_LOG
("*** DMA2 GPU - vøm2mem *** %lxádd∏%lx sizê%lx\n", 
ch¸
, 
madr
, 
b¸
);

140 
±r
 = (
u32
 *)
	`PSXM
(
madr
);

141 i‡(
±r
 =
NULL
) {

142 #ifde‡
CPU_LOG


143 
	`CPU_LOG
("*** DMA2 GPU - vram2mem *** NULL Pointer!!!\n");

148 
w‹ds
 = (
b¸
 >> 16) * (bcr & 0xffff);

149 
	`GPU_ªadD©aMem
(
±r
, 
w‹ds
);

150 
psxCpu
->
	`CÀ¨
(
madr
, 
w‹ds
);

152 
HW_DMA2_MADR
 = 
	`SWAPu32
(
madr
 + 
w‹ds
 * 4);

155 
	`GPUDMA_INT
(
w‹ds
 / 4);

159 #ifde‡
PSXDMA_LOG


160 
	`PSXDMA_LOG
("*** DMA 2 - GPU mem2vøm *** %lxádd∏%lx sizê%lx\n", 
ch¸
, 
madr
, 
b¸
);

162 
±r
 = (
u32
 *)
	`PSXM
(
madr
);

163 i‡(
±r
 =
NULL
) {

164 #ifde‡
CPU_LOG


165 
	`CPU_LOG
("*** DMA2 GPU - mem2vram *** NULL Pointer!!!\n");

170 
w‹ds
 = (
b¸
 >> 16) * (bcr & 0xffff);

171 
	`GPU_wrôeD©aMem
(
±r
, 
w‹ds
);

173 
HW_DMA2_MADR
 = 
	`SWAPu32
(
madr
 + 
w‹ds
 * 4);

176 
	`GPUDMA_INT
(
w‹ds
 / 4);

180 #ifde‡
PSXDMA_LOG


181 
	`PSXDMA_LOG
("*** DMA 2 - GPU dm®chaö *** %lxádd∏%lx sizê%lx\n", 
ch¸
, 
madr
, 
b¸
);

184 
size
 = 
	`GPU_dmaChaö
((
u32
 *)
psxM
, 
madr
 & 0x1fffff);

185 i‡(()
size
 <= 0)

186 
size
 = 
	`gpuDmaChaöSize
(
madr
);

187 
HW_GPU_STATUS
 &~
PSXGPU_nBUSY
;

191 
HW_DMA2_MADR
 = 
	`SWAPu32
(0xffffff);

199 
	`GPUDMA_INT
(
size
);

202 #ifde‡
PSXDMA_LOG


204 
	`PSXDMA_LOG
("*** DMA 2 - GPU unknow¿*** %lxádd∏%lx sizê%lx\n", 
ch¸
, 
madr
, 
b¸
);

209 
HW_DMA2_CHCR
 &
	`SWAP32
(~0x01000000);

210 
	`DMA_INTERRUPT
(2);

211 
	}
}

213 
	$gpuI¡îru±
() {

214 i‡(
HW_DMA2_CHCR
 & 
	`SWAP32
(0x01000000))

216 
HW_DMA2_CHCR
 &
	`SWAP32
(~0x01000000);

217 
	`DMA_INTERRUPT
(2);

219 
HW_GPU_STATUS
 |
PSXGPU_nBUSY
;

220 
	}
}

222 
	$psxDma6
(
u32
 
madr
, u32 
b¸
, u32 
ch¸
) {

223 
u32
 
w‹ds
;

224 
u32
 *
mem
 = (u32 *)
	`PSXM
(
madr
);

226 #ifde‡
PSXDMA_LOG


227 
	`PSXDMA_LOG
("*** DMA6 OT *** %xádd∏%x sizê%x\n", 
ch¸
, 
madr
, 
b¸
);

230 i‡(
ch¸
 == 0x11000002) {

231 i‡(
mem
 =
NULL
) {

232 #ifde‡
CPU_LOG


233 
	`CPU_LOG
("*** DMA6 OT *** NULL Pointer!!!\n");

235 
HW_DMA6_CHCR
 &
	`SWAP32
(~0x01000000);

236 
	`DMA_INTERRUPT
(6);

241 
w‹ds
 = 
b¸
;

243 
b¸
--) {

244 *
mem
-- = 
	`SWAP32
((
madr
 - 4) & 0xffffff);

245 
madr
 -= 4;

247 
mem
++; *mem = 0xffffff;

251 
psxRegs
.
cy˛e
 +
w‹ds
;

252 
	`GPUOTCDMA_INT
(16);

255 #ifde‡
PSXDMA_LOG


258 
	`PSXDMA_LOG
("*** DMA6 OT - unknow¿*** %xádd∏%x sizê%x\n", 
ch¸
, 
madr
, 
b¸
);

262 
HW_DMA6_CHCR
 &
	`SWAP32
(~0x01000000);

263 
	`DMA_INTERRUPT
(6);

264 
	}
}

266 
	$gpuŸcI¡îru±
()

268 i‡(
HW_DMA6_CHCR
 & 
	`SWAP32
(0x01000000))

270 
HW_DMA6_CHCR
 &
	`SWAP32
(~0x01000000);

271 
	`DMA_INTERRUPT
(6);

273 
	}
}

	@libpcsxcore/psxdma.h

20 #i‚de‡
__PSXDMA_H__


21 
	#__PSXDMA_H__


	)

23 #ifde‡
__˝lu•lus


27 
	~"psxcomm⁄.h
"

28 
	~"r3000a.h
"

29 
	~"psxhw.h
"

30 
	~"psxmem.h
"

32 
	#GPUDMA_INT
(
eCy˛e
) { \

33 
psxRegs
.
öãºu±
 |(1 << 
PSXINT_GPUDMA
); \

34 
psxRegs
.
ötCy˛e
[
PSXINT_GPUDMA
].
cy˛e
 = 
eCy˛e
; \

35 
psxRegs
.
ötCy˛e
[
PSXINT_GPUDMA
].
sCy˛e
 =ÖsxRegs.
cy˛e
; \

36 
	`√w_dy«_£t_evít
(
PSXINT_GPUDMA
, 
eCy˛e
); \

37 }

	)

39 
	#SPUDMA_INT
(
eCy˛e
) { \

40 
psxRegs
.
öãºu±
 |(1 << 
PSXINT_SPUDMA
); \

41 
psxRegs
.
ötCy˛e
[
PSXINT_SPUDMA
].
cy˛e
 = 
eCy˛e
; \

42 
psxRegs
.
ötCy˛e
[
PSXINT_SPUDMA
].
sCy˛e
 =ÖsxRegs.
cy˛e
; \

43 
	`√w_dy«_£t_evít
(
PSXINT_SPUDMA
, 
eCy˛e
); \

44 }

	)

46 
	#MDECOUTDMA_INT
(
eCy˛e
) { \

47 
psxRegs
.
öãºu±
 |(1 << 
PSXINT_MDECOUTDMA
); \

48 
psxRegs
.
ötCy˛e
[
PSXINT_MDECOUTDMA
].
cy˛e
 = 
eCy˛e
; \

49 
psxRegs
.
ötCy˛e
[
PSXINT_MDECOUTDMA
].
sCy˛e
 =ÖsxRegs.
cy˛e
; \

50 
	`√w_dy«_£t_evít
(
PSXINT_MDECOUTDMA
, 
eCy˛e
); \

51 }

	)

53 
	#MDECINDMA_INT
(
eCy˛e
) { \

54 
psxRegs
.
öãºu±
 |(1 << 
PSXINT_MDECINDMA
); \

55 
psxRegs
.
ötCy˛e
[
PSXINT_MDECINDMA
].
cy˛e
 = 
eCy˛e
; \

56 
psxRegs
.
ötCy˛e
[
PSXINT_MDECINDMA
].
sCy˛e
 =ÖsxRegs.
cy˛e
; \

57 
	`√w_dy«_£t_evít
(
PSXINT_MDECINDMA
, 
eCy˛e
); \

58 }

	)

60 
	#GPUOTCDMA_INT
(
eCy˛e
) { \

61 
psxRegs
.
öãºu±
 |(1 << 
PSXINT_GPUOTCDMA
); \

62 
psxRegs
.
ötCy˛e
[
PSXINT_GPUOTCDMA
].
cy˛e
 = 
eCy˛e
; \

63 
psxRegs
.
ötCy˛e
[
PSXINT_GPUOTCDMA
].
sCy˛e
 =ÖsxRegs.
cy˛e
; \

64 
	`√w_dy«_£t_evít
(
PSXINT_GPUOTCDMA
, 
eCy˛e
); \

65 }

	)

67 
	#CDRDMA_INT
(
eCy˛e
) { \

68 
psxRegs
.
öãºu±
 |(1 << 
PSXINT_CDRDMA
); \

69 
psxRegs
.
ötCy˛e
[
PSXINT_CDRDMA
].
cy˛e
 = 
eCy˛e
; \

70 
psxRegs
.
ötCy˛e
[
PSXINT_CDRDMA
].
sCy˛e
 =ÖsxRegs.
cy˛e
; \

71 
	`√w_dy«_£t_evít
(
PSXINT_CDRDMA
, 
eCy˛e
); \

72 }

	)

74 
psxDma2
(
u32
 
madr
, u32 
b¸
, u32 
ch¸
);

75 
psxDma3
(
u32
 
madr
, u32 
b¸
, u32 
ch¸
);

76 
psxDma4
(
u32
 
madr
, u32 
b¸
, u32 
ch¸
);

77 
psxDma6
(
u32
 
madr
, u32 
b¸
, u32 
ch¸
);

78 
gpuI¡îru±
();

79 
•uI¡îru±
();

80 
gpuŸcI¡îru±
();

82 #ifde‡
__˝lu•lus


	@libpcsxcore/psxhle.c

24 
	~"psxhÀ.h
"

26 
	$hÀDummy
() {

27 
psxRegs
.
pc
 =ÖsxRegs.
GPR
.
n
.
ø
;

29 
	`psxBønchTe°
();

30 
	}
}

32 
	$hÀA0
() {

33 
u32
 
ˇŒ
 = 
psxRegs
.
GPR
.
n
.
t1
 & 0xff;

35 i‡(
biosA0
[
ˇŒ
]) biosA0[call]();

37 
	`psxBønchTe°
();

38 
	}
}

40 
	$hÀB0
() {

41 
u32
 
ˇŒ
 = 
psxRegs
.
GPR
.
n
.
t1
 & 0xff;

43 i‡(
biosB0
[
ˇŒ
]) biosB0[call]();

45 
	`psxBønchTe°
();

46 
	}
}

48 
	$hÀC0
() {

49 
u32
 
ˇŒ
 = 
psxRegs
.
GPR
.
n
.
t1
 & 0xff;

51 i‡(
biosC0
[
ˇŒ
]) biosC0[call]();

53 
	`psxBønchTe°
();

54 
	}
}

56 
	$hÀBoŸ°øp
() {

57 
	`SysPrötf
("hleBootstrap\n");

58 
	`CheckCdrom
();

59 
	`LﬂdCdrom
();

60 
	`SysPrötf
("CdromLabñ: \"%s\": PC = %8.8lx (SP = %8.8lx)\n", 
CdromLabñ
, 
psxRegs
.
pc
,ÖsxRegs.
GPR
.
n
.
•
);

61 
	}
}

64 
u32
 
	m_pc0
;

65 
u32
 
	mgp0
;

66 
u32
 
	mt_addr
;

67 
u32
 
	mt_size
;

68 
u32
 
	md_addr
;

69 
u32
 
	md_size
;

70 
u32
 
	mb_addr
;

71 
u32
 
	mb_size
;

72 
u32
 
	mS_addr
;

73 
u32
 
	ms_size
;

74 
u32
 
	m_•
,
	m_Â
,
	m_gp
,
	mªt
,
	mba£
;

75 } 
	tEXEC
;

77 
	$hÀExecRë
() {

78 
EXEC
 *
hódî
 = (EXEC*)
	`PSXM
(
psxRegs
.
GPR
.
n
.
s0
);

80 
	`SysPrötf
("ExecRë %x: %x\n", 
psxRegs
.
GPR
.
n
.
s0
, 
hódî
->
ªt
);

82 
psxRegs
.
GPR
.
n
.
ø
 = 
hódî
->
ªt
;

83 
psxRegs
.
GPR
.
n
.
•
 = 
hódî
->
_•
;

84 
psxRegs
.
GPR
.
n
.
s8
 = 
hódî
->
_Â
;

85 
psxRegs
.
GPR
.
n
.
gp
 = 
hódî
->
_gp
;

86 
psxRegs
.
GPR
.
n
.
s0
 = 
hódî
->
ba£
;

88 
psxRegs
.
GPR
.
n
.
v0
 = 1;

89 
psxRegs
.
pc
 =ÖsxRegs.
GPR
.
n
.
ø
;

90 
	}
}

92 (*
	gpsxHLEt
[256])() = {

93 
hÀDummy
, 
hÀA0
, 
hÀB0
, 
hÀC0
,

94 
hÀBoŸ°øp
, 
hÀExecRë
,

95 
hÀDummy
, hleDummy

	@libpcsxcore/psxhle.h

20 #i‚de‡
__PSXHLE_H__


21 
	#__PSXHLE_H__


	)

23 #ifde‡
__˝lu•lus


27 
	~"psxcomm⁄.h
"

28 
	~"r3000a.h
"

29 
	~"∂ugös.h
"

31 (*
psxHLEt
[256])();

33 #ifde‡
__˝lu•lus


	@libpcsxcore/psxhw.c

24 
	~"psxhw.h
"

25 
	~"mdec.h
"

26 
	~"cdrom.h
"

27 
	~"gpu.h
"

32 
	$psxHwRe£t
() {

33 i‡(
C⁄fig
.
Sio
Ë
	`psxHu32ªf
(0x1070Ë|
	`SWAP32
(0x80);

34 i‡(
C⁄fig
.
SpuIrq
Ë
	`psxHu32ªf
(0x1070Ë|
	`SWAP32
(0x200);

36 
	`mem£t
(
psxH
, 0, 0x10000);

38 
	`mdecInô
();

39 
	`cdrRe£t
();

40 
	`psxR˙tInô
();

41 
HW_GPU_STATUS
 = 0x14802000;

42 
	}
}

44 
u8
 
	$psxHwRód8
(
u32
 
add
) {

45 
h¨d
;

47 
add
) {

48 0x1f801040: 
h¨d
 = 
	`sioRód8
();;

49 #ifde‡
ENABLE_SIO1API


50 0x1f801050: 
h¨d
 = 
	`SIO1_ªadD©a8
(); ;

52 0x1f801800: 
h¨d
 = 
	`cdrRód0
(); ;

53 0x1f801801: 
h¨d
 = 
	`cdrRód1
(); ;

54 0x1f801802: 
h¨d
 = 
	`cdrRód2
(); ;

55 0x1f801803: 
h¨d
 = 
	`cdrRód3
(); ;

57 
h¨d
 = 
	`psxHu8
(
add
);

58 #ifde‡
PSXHW_LOG


59 
	`PSXHW_LOG
("*Unkwnow¿8bôÑódáàaddªs†%x\n", 
add
);

61  
h¨d
;

64 #ifde‡
PSXHW_LOG


65 
	`PSXHW_LOG
("*Know¿8bôÑódáàaddªs†%x vÆuê%x\n", 
add
, 
h¨d
);

67  
h¨d
;

68 
	}
}

70 
u16
 
	$psxHwRód16
(
u32
 
add
) {

71 
h¨d
;

73 
add
) {

74 #ifde‡
PSXHW_LOG


75 0x1f801070: 
	`PSXHW_LOG
("IREG 16bôÑód %x\n", 
	`psxHu16
(0x1070));

76  
	`psxHu16
(0x1070);

78 #ifde‡
PSXHW_LOG


79 0x1f801074: 
	`PSXHW_LOG
("IMASK 16bôÑód %x\n", 
	`psxHu16
(0x1074));

80  
	`psxHu16
(0x1074);

84 
h¨d
 = 
	`sioRód8
();

85 
h¨d
|
	`sioRód8
() << 8;

86 #ifde‡
PAD_LOG


87 
	`PAD_LOG
("siÿªad16 %x;Ñë = %x\n", 
add
&0xf, 
h¨d
);

89  
h¨d
;

91 
h¨d
 = 
	`sioRódSèt16
();

92 #ifde‡
PAD_LOG


93 
	`PAD_LOG
("siÿªad16 %x;Ñë = %x\n", 
add
&0xf, 
h¨d
);

95  
h¨d
;

97 
h¨d
 = 
	`sioRódMode16
();

98 #ifde‡
PAD_LOG


99 
	`PAD_LOG
("siÿªad16 %x;Ñë = %x\n", 
add
&0xf, 
h¨d
);

101  
h¨d
;

103 
h¨d
 = 
	`sioRódCål16
();

104 #ifde‡
PAD_LOG


105 
	`PAD_LOG
("siÿªad16 %x;Ñë = %x\n", 
add
&0xf, 
h¨d
);

107  
h¨d
;

109 
h¨d
 = 
	`sioRódBaud16
();

110 #ifde‡
PAD_LOG


111 
	`PAD_LOG
("siÿªad16 %x;Ñë = %x\n", 
add
&0xf, 
h¨d
);

113  
h¨d
;

114 #ifde‡
ENABLE_SIO1API


116 
h¨d
 = 
	`SIO1_ªadD©a16
();

117  
h¨d
;

119 
h¨d
 = 
	`SIO1_ªadSèt16
();

120  
h¨d
;

122 
h¨d
 = 
	`SIO1_ªadCål16
();

123  
h¨d
;

125 
h¨d
 = 
	`SIO1_ªadBaud16
();

126  
h¨d
;

129 
h¨d
 = 
	`psxR˙tRcou¡
(0);

130 #ifde‡
PSXHW_LOG


131 
	`PSXHW_LOG
("T0 cou¡Ñód16: %x\n", 
h¨d
);

133  
h¨d
;

135 
h¨d
 = 
	`psxR˙tRmode
(0);

136 #ifde‡
PSXHW_LOG


137 
	`PSXHW_LOG
("T0 modêªad16: %x\n", 
h¨d
);

139  
h¨d
;

141 
h¨d
 = 
	`psxR˙tRèrgë
(0);

142 #ifde‡
PSXHW_LOG


143 
	`PSXHW_LOG
("T0Å¨gëÑód16: %x\n", 
h¨d
);

145  
h¨d
;

147 
h¨d
 = 
	`psxR˙tRcou¡
(1);

148 #ifde‡
PSXHW_LOG


149 
	`PSXHW_LOG
("T1 cou¡Ñód16: %x\n", 
h¨d
);

151  
h¨d
;

153 
h¨d
 = 
	`psxR˙tRmode
(1);

154 #ifde‡
PSXHW_LOG


155 
	`PSXHW_LOG
("T1 modêªad16: %x\n", 
h¨d
);

157  
h¨d
;

159 
h¨d
 = 
	`psxR˙tRèrgë
(1);

160 #ifde‡
PSXHW_LOG


161 
	`PSXHW_LOG
("T1Å¨gëÑód16: %x\n", 
h¨d
);

163  
h¨d
;

165 
h¨d
 = 
	`psxR˙tRcou¡
(2);

166 #ifde‡
PSXHW_LOG


167 
	`PSXHW_LOG
("T2 cou¡Ñód16: %x\n", 
h¨d
);

169  
h¨d
;

171 
h¨d
 = 
	`psxR˙tRmode
(2);

172 #ifde‡
PSXHW_LOG


173 
	`PSXHW_LOG
("T2 modêªad16: %x\n", 
h¨d
);

175  
h¨d
;

177 
h¨d
 = 
	`psxR˙tRèrgë
(2);

178 #ifde‡
PSXHW_LOG


179 
	`PSXHW_LOG
("T2Å¨gëÑód16: %x\n", 
h¨d
);

181  
h¨d
;

187 i‡(
add
 >= 0x1f801c00 &&ádd < 0x1f801e00) {

188 
h¨d
 = 
	`SPU_ªadRegi°î
(
add
);

190 
h¨d
 = 
	`psxHu16
(
add
);

191 #ifde‡
PSXHW_LOG


192 
	`PSXHW_LOG
("*Unkwnow¿16bôÑódáàaddªs†%x\n", 
add
);

195  
h¨d
;

198 #ifde‡
PSXHW_LOG


199 
	`PSXHW_LOG
("*Know¿16bôÑódáàaddªs†%x vÆuê%x\n", 
add
, 
h¨d
);

201  
h¨d
;

202 
	}
}

204 
u32
 
	$psxHwRód32
(
u32
 
add
) {

205 
u32
 
h¨d
;

207 
add
) {

209 
h¨d
 = 
	`sioRód8
();

210 
h¨d
 |
	`sioRód8
() << 8;

211 
h¨d
 |
	`sioRód8
() << 16;

212 
h¨d
 |
	`sioRód8
() << 24;

213 #ifde‡
PAD_LOG


214 
	`PAD_LOG
("siÿªad32 ;ªà%x\n", 
h¨d
);

216  
h¨d
;

217 #ifde‡
ENABLE_SIO1API


219 
h¨d
 = 
	`SIO1_ªadD©a32
();

220  
h¨d
;

222 #ifde‡
PSXHW_LOG


224 
	`PSXHW_LOG
("RAM sizêªad %x\n", 
	`psxHu32
(0x1060));

225  
	`psxHu32
(0x1060);

227 #ifde‡
PSXHW_LOG


228 0x1f801070: 
	`PSXHW_LOG
("IREG 32bôÑód %x\n", 
	`psxHu32
(0x1070));

229  
	`psxHu32
(0x1070);

231 #ifde‡
PSXHW_LOG


232 0x1f801074: 
	`PSXHW_LOG
("IMASK 32bôÑód %x\n", 
	`psxHu32
(0x1074));

233  
	`psxHu32
(0x1074);

237 
h¨d
 = 
	`GPU_ªadD©a
();

238 #ifde‡
PSXHW_LOG


239 
	`PSXHW_LOG
("GPU DATA 32bôÑód %x\n", 
h¨d
);

241  
h¨d
;

243 
	`gpuSyncPlugöSR
();

244 
h¨d
 = 
HW_GPU_STATUS
;

245 i‡(
hSyncCou¡
 < 240 && (
HW_GPU_STATUS
 & 
PSXGPU_ILACE_BITS
) != PSXGPU_ILACE_BITS)

246 
h¨d
 |
PSXGPU_LCF
 & (
psxRegs
.
cy˛e
 << 20);

247 #ifde‡
PSXHW_LOG


248 
	`PSXHW_LOG
("GPU STATUS 32bôÑód %x\n", 
h¨d
);

250  
h¨d
;

252 0x1f801820: 
h¨d
 = 
	`mdecRód0
(); ;

253 0x1f801824: 
h¨d
 = 
	`mdecRód1
(); ;

255 #ifde‡
PSXHW_LOG


257 
	`PSXHW_LOG
("DMA2 MADR 32bôÑód %x\n", 
	`psxHu32
(0x10a0));

258  
	`SWAPu32
(
HW_DMA2_MADR
);

260 
	`PSXHW_LOG
("DMA2 BCR 32bôÑód %x\n", 
	`psxHu32
(0x10a4));

261  
	`SWAPu32
(
HW_DMA2_BCR
);

263 
	`PSXHW_LOG
("DMA2 CHCR 32bôÑód %x\n", 
	`psxHu32
(0x10a8));

264  
	`SWAPu32
(
HW_DMA2_CHCR
);

267 #ifde‡
PSXHW_LOG


269 
	`PSXHW_LOG
("DMA3 MADR 32bôÑód %x\n", 
	`psxHu32
(0x10b0));

270  
	`SWAPu32
(
HW_DMA3_MADR
);

272 
	`PSXHW_LOG
("DMA3 BCR 32bôÑód %x\n", 
	`psxHu32
(0x10b4));

273  
	`SWAPu32
(
HW_DMA3_BCR
);

275 
	`PSXHW_LOG
("DMA3 CHCR 32bôÑód %x\n", 
	`psxHu32
(0x10b8));

276  
	`SWAPu32
(
HW_DMA3_CHCR
);

279 #ifde‡
PSXHW_LOG


290 
h¨d
 = 
	`psxR˙tRcou¡
(0);

291 #ifde‡
PSXHW_LOG


292 
	`PSXHW_LOG
("T0 cou¡Ñód32: %x\n", 
h¨d
);

294  
h¨d
;

296 
h¨d
 = 
	`psxR˙tRmode
(0);

297 #ifde‡
PSXHW_LOG


298 
	`PSXHW_LOG
("T0 modêªad32: %x\n", 
h¨d
);

300  
h¨d
;

302 
h¨d
 = 
	`psxR˙tRèrgë
(0);

303 #ifde‡
PSXHW_LOG


304 
	`PSXHW_LOG
("T0Å¨gëÑód32: %x\n", 
h¨d
);

306  
h¨d
;

308 
h¨d
 = 
	`psxR˙tRcou¡
(1);

309 #ifde‡
PSXHW_LOG


310 
	`PSXHW_LOG
("T1 cou¡Ñód32: %x\n", 
h¨d
);

312  
h¨d
;

314 
h¨d
 = 
	`psxR˙tRmode
(1);

315 #ifde‡
PSXHW_LOG


316 
	`PSXHW_LOG
("T1 modêªad32: %x\n", 
h¨d
);

318  
h¨d
;

320 
h¨d
 = 
	`psxR˙tRèrgë
(1);

321 #ifde‡
PSXHW_LOG


322 
	`PSXHW_LOG
("T1Å¨gëÑód32: %x\n", 
h¨d
);

324  
h¨d
;

326 
h¨d
 = 
	`psxR˙tRcou¡
(2);

327 #ifde‡
PSXHW_LOG


328 
	`PSXHW_LOG
("T2 cou¡Ñód32: %x\n", 
h¨d
);

330  
h¨d
;

332 
h¨d
 = 
	`psxR˙tRmode
(2);

333 #ifde‡
PSXHW_LOG


334 
	`PSXHW_LOG
("T2 modêªad32: %x\n", 
h¨d
);

336  
h¨d
;

338 
h¨d
 = 
	`psxR˙tRèrgë
(2);

339 #ifde‡
PSXHW_LOG


340 
	`PSXHW_LOG
("T2Å¨gëÑód32: %x\n", 
h¨d
);

342  
h¨d
;

345 
h¨d
 = 
	`psxHu32
(
add
);

346 #ifde‡
PSXHW_LOG


347 
	`PSXHW_LOG
("*Unkwnow¿32bôÑódáàaddªs†%x\n", 
add
);

349  
h¨d
;

351 #ifde‡
PSXHW_LOG


352 
	`PSXHW_LOG
("*Know¿32bôÑódáàaddªs†%x\n", 
add
);

354  
h¨d
;

355 
	}
}

357 
	$psxHwWrôe8
(
u32
 
add
, 
u8
 
vÆue
) {

358 
add
) {

359 0x1f801040: 
	`sioWrôe8
(
vÆue
); ;

360 #ifde‡
ENABLE_SIO1API


361 0x1f801050: 
	`SIO1_wrôeD©a8
(
vÆue
); ;

363 0x1f801800: 
	`cdrWrôe0
(
vÆue
); ;

364 0x1f801801: 
	`cdrWrôe1
(
vÆue
); ;

365 0x1f801802: 
	`cdrWrôe2
(
vÆue
); ;

366 0x1f801803: 
	`cdrWrôe3
(
vÆue
); ;

369 
	`psxHu8
(
add
Ë
vÆue
;

370 #ifde‡
PSXHW_LOG


371 
	`PSXHW_LOG
("*Unknow¿8bô wrôê©áddªs†%x vÆuê%x\n", 
add
, 
vÆue
);

375 
	`psxHu8
(
add
Ë
vÆue
;

376 #ifde‡
PSXHW_LOG


377 
	`PSXHW_LOG
("*Know¿8bô wrôê©áddªs†%x vÆuê%x\n", 
add
, 
vÆue
);

379 
	}
}

381 
	$psxHwWrôe16
(
u32
 
add
, 
u16
 
vÆue
) {

382 
add
) {

384 
	`sioWrôe8
(()
vÆue
);

385 
	`sioWrôe8
(()(
vÆue
>>8));

386 #ifde‡
PAD_LOG


387 
	`PAD_LOG
 ("siÿwrôe16 %x, %x\n", 
add
&0xf, 
vÆue
);

391 
	`sioWrôeSèt16
(
vÆue
);

392 #ifde‡
PAD_LOG


393 
	`PAD_LOG
 ("siÿwrôe16 %x, %x\n", 
add
&0xf, 
vÆue
);

397 
	`sioWrôeMode16
(
vÆue
);

398 #ifde‡
PAD_LOG


399 
	`PAD_LOG
 ("siÿwrôe16 %x, %x\n", 
add
&0xf, 
vÆue
);

403 
	`sioWrôeCål16
(
vÆue
);

404 #ifde‡
PAD_LOG


405 
	`PAD_LOG
 ("siÿwrôe16 %x, %x\n", 
add
&0xf, 
vÆue
);

409 
	`sioWrôeBaud16
(
vÆue
);

410 #ifde‡
PAD_LOG


411 
	`PAD_LOG
 ("siÿwrôe16 %x, %x\n", 
add
&0xf, 
vÆue
);

414 #ifde‡
ENABLE_SIO1API


416 
	`SIO1_wrôeD©a16
(
vÆue
);

419 
	`SIO1_wrôeSèt16
(
vÆue
);

422 
	`SIO1_wrôeCål16
(
vÆue
);

425 
	`SIO1_wrôeBaud16
(
vÆue
);

429 #ifde‡
PSXHW_LOG


430 
	`PSXHW_LOG
("IREG 16bô wrôê%x\n", 
vÆue
);

432 i‡(
C⁄fig
.
Sio
Ë
	`psxHu16ªf
(0x1070Ë|
	`SWAPu16
(0x80);

433 i‡(
C⁄fig
.
SpuIrq
Ë
	`psxHu16ªf
(0x1070Ë|
	`SWAPu16
(0x200);

434 
	`psxHu16ªf
(0x1070Ë&
	`SWAPu16
(
vÆue
);

438 #ifde‡
PSXHW_LOG


439 
	`PSXHW_LOG
("IMASK 16bô wrôê%x\n", 
vÆue
);

441 
	`psxHu16ªf
(0x1074Ë
	`SWAPu16
(
vÆue
);

442 i‡(
	`psxHu16ªf
(0x1070Ë& 
vÆue
)

443 
	`√w_dy«_£t_evít
(
PSXINT_NEWDRC_CHECK
, 1);

447 #ifde‡
PSXHW_LOG


448 
	`PSXHW_LOG
("COUNTER 0 COUNT 16bô wrôê%x\n", 
vÆue
);

450 
	`psxR˙tWcou¡
(0, 
vÆue
); ;

452 #ifde‡
PSXHW_LOG


453 
	`PSXHW_LOG
("COUNTER 0 MODE 16bô wrôê%x\n", 
vÆue
);

455 
	`psxR˙tWmode
(0, 
vÆue
); ;

457 #ifde‡
PSXHW_LOG


458 
	`PSXHW_LOG
("COUNTER 0 TARGET 16bô wrôê%x\n", 
vÆue
);

460 
	`psxR˙tWèrgë
(0, 
vÆue
); ;

463 #ifde‡
PSXHW_LOG


464 
	`PSXHW_LOG
("COUNTER 1 COUNT 16bô wrôê%x\n", 
vÆue
);

466 
	`psxR˙tWcou¡
(1, 
vÆue
); ;

468 #ifde‡
PSXHW_LOG


469 
	`PSXHW_LOG
("COUNTER 1 MODE 16bô wrôê%x\n", 
vÆue
);

471 
	`psxR˙tWmode
(1, 
vÆue
); ;

473 #ifde‡
PSXHW_LOG


474 
	`PSXHW_LOG
("COUNTER 1 TARGET 16bô wrôê%x\n", 
vÆue
);

476 
	`psxR˙tWèrgë
(1, 
vÆue
); ;

479 #ifde‡
PSXHW_LOG


480 
	`PSXHW_LOG
("COUNTER 2 COUNT 16bô wrôê%x\n", 
vÆue
);

482 
	`psxR˙tWcou¡
(2, 
vÆue
); ;

484 #ifde‡
PSXHW_LOG


485 
	`PSXHW_LOG
("COUNTER 2 MODE 16bô wrôê%x\n", 
vÆue
);

487 
	`psxR˙tWmode
(2, 
vÆue
); ;

489 #ifde‡
PSXHW_LOG


490 
	`PSXHW_LOG
("COUNTER 2 TARGET 16bô wrôê%x\n", 
vÆue
);

492 
	`psxR˙tWèrgë
(2, 
vÆue
); ;

495 i‡(
add
>=0x1f801c00 &&ádd<0x1f801e00) {

496 
	`SPU_wrôeRegi°î
(
add
, 
vÆue
, 
psxRegs
.
cy˛e
);

500 
	`psxHu16ªf
(
add
Ë
	`SWAPu16
(
vÆue
);

501 #ifde‡
PSXHW_LOG


502 
	`PSXHW_LOG
("*Unknow¿16bô wrôê©áddªs†%x vÆuê%x\n", 
add
, 
vÆue
);

506 
	`psxHu16ªf
(
add
Ë
	`SWAPu16
(
vÆue
);

507 #ifde‡
PSXHW_LOG


508 
	`PSXHW_LOG
("*Know¿16bô wrôê©áddªs†%x vÆuê%x\n", 
add
, 
vÆue
);

510 
	}
}

512 
	#DmaExec
(
n
) { \

513 
HW_DMA
##
n
##
_CHCR
 = 
	`SWAPu32
(
vÆue
); \

515 i‡(
	`SWAPu32
(
HW_DMA
##
n
##
_CHCR
Ë& 0x01000000 && SWAPu32(
HW_DMA_PCR
) & (8 << (n * 4))) { \

516 
psxDma
##
	`n
(
	`SWAPu32
(
HW_DMA
##
n
##
_MADR
), SWAPu32(HW_DMA##n##
_BCR
), SWAPu32(HW_DMA##n##
_CHCR
)); \

518 }

	)

520 
	$psxHwWrôe32
(
u32
 
add
, u32 
vÆue
) {

521 
add
) {

523 
	`sioWrôe8
(()
vÆue
);

524 
	`sioWrôe8
(()((
vÆue
&0xff) >> 8));

525 
	`sioWrôe8
(()((
vÆue
&0xff) >> 16));

526 
	`sioWrôe8
(()((
vÆue
&0xff) >> 24));

527 #ifde‡
PAD_LOG


528 
	`PAD_LOG
("siÿwrôe32 %x\n", 
vÆue
);

531 #ifde‡
ENABLE_SIO1API


533 
	`SIO1_wrôeD©a32
(
vÆue
);

536 #ifde‡
PSXHW_LOG


538 
	`PSXHW_LOG
("RAM sizêwrôê%x\n", 
vÆue
);

539 
	`psxHu32ªf
(
add
Ë
	`SWAPu32
(
vÆue
);

544 #ifde‡
PSXHW_LOG


545 
	`PSXHW_LOG
("IREG 32bô wrôê%x\n", 
vÆue
);

547 i‡(
C⁄fig
.
Sio
Ë
	`psxHu32ªf
(0x1070Ë|
	`SWAPu32
(0x80);

548 i‡(
C⁄fig
.
SpuIrq
Ë
	`psxHu32ªf
(0x1070Ë|
	`SWAPu32
(0x200);

549 
	`psxHu32ªf
(0x1070Ë&
	`SWAPu32
(
vÆue
);

552 #ifde‡
PSXHW_LOG


553 
	`PSXHW_LOG
("IMASK 32bô wrôê%x\n", 
vÆue
);

555 
	`psxHu32ªf
(0x1074Ë
	`SWAPu32
(
vÆue
);

556 i‡(
	`psxHu32ªf
(0x1070Ë& 
vÆue
)

557 
	`√w_dy«_£t_evít
(
PSXINT_NEWDRC_CHECK
, 1);

560 #ifde‡
PSXHW_LOG


562 
	`PSXHW_LOG
("DMA0 MADR 32bô wrôê%x\n", 
vÆue
);

563 
HW_DMA0_MADR
 = 
	`SWAPu32
(
vÆue
); ;

565 
	`PSXHW_LOG
("DMA0 BCR 32bô wrôê%x\n", 
vÆue
);

566 
HW_DMA0_BCR
 = 
	`SWAPu32
(
vÆue
); ;

569 #ifde‡
PSXHW_LOG


570 
	`PSXHW_LOG
("DMA0 CHCR 32bô wrôê%x\n", 
vÆue
);

572 
	`DmaExec
(0);

575 #ifde‡
PSXHW_LOG


577 
	`PSXHW_LOG
("DMA1 MADR 32bô wrôê%x\n", 
vÆue
);

578 
HW_DMA1_MADR
 = 
	`SWAPu32
(
vÆue
); ;

580 
	`PSXHW_LOG
("DMA1 BCR 32bô wrôê%x\n", 
vÆue
);

581 
HW_DMA1_BCR
 = 
	`SWAPu32
(
vÆue
); ;

584 #ifde‡
PSXHW_LOG


585 
	`PSXHW_LOG
("DMA1 CHCR 32bô wrôê%x\n", 
vÆue
);

587 
	`DmaExec
(1);

590 #ifde‡
PSXHW_LOG


592 
	`PSXHW_LOG
("DMA2 MADR 32bô wrôê%x\n", 
vÆue
);

593 
HW_DMA2_MADR
 = 
	`SWAPu32
(
vÆue
); ;

595 
	`PSXHW_LOG
("DMA2 BCR 32bô wrôê%x\n", 
vÆue
);

596 
HW_DMA2_BCR
 = 
	`SWAPu32
(
vÆue
); ;

599 #ifde‡
PSXHW_LOG


600 
	`PSXHW_LOG
("DMA2 CHCR 32bô wrôê%x\n", 
vÆue
);

602 
	`DmaExec
(2);

605 #ifde‡
PSXHW_LOG


607 
	`PSXHW_LOG
("DMA3 MADR 32bô wrôê%x\n", 
vÆue
);

608 
HW_DMA3_MADR
 = 
	`SWAPu32
(
vÆue
); ;

610 
	`PSXHW_LOG
("DMA3 BCR 32bô wrôê%x\n", 
vÆue
);

611 
HW_DMA3_BCR
 = 
	`SWAPu32
(
vÆue
); ;

614 #ifde‡
PSXHW_LOG


615 
	`PSXHW_LOG
("DMA3 CHCR 32bô wrôê%x\n", 
vÆue
);

617 
	`DmaExec
(3);

621 #ifde‡
PSXHW_LOG


623 
	`PSXHW_LOG
("DMA4 MADR 32bô wrôê%x\n", 
vÆue
);

624 
HW_DMA4_MADR
 = 
	`SWAPu32
(
vÆue
); ;

626 
	`PSXHW_LOG
("DMA4 BCR 32bô wrôê%x\n", 
vÆue
);

627 
HW_DMA4_BCR
 = 
	`SWAPu32
(
vÆue
); ;

630 #ifde‡
PSXHW_LOG


631 
	`PSXHW_LOG
("DMA4 CHCR 32bô wrôê%x\n", 
vÆue
);

633 
	`DmaExec
(4);

642 #ifde‡
PSXHW_LOG


644 
	`PSXHW_LOG
("DMA6 MADR 32bô wrôê%x\n", 
vÆue
);

645 
HW_DMA6_MADR
 = 
	`SWAPu32
(
vÆue
); ;

647 
	`PSXHW_LOG
("DMA6 BCR 32bô wrôê%x\n", 
vÆue
);

648 
HW_DMA6_BCR
 = 
	`SWAPu32
(
vÆue
); ;

651 #ifde‡
PSXHW_LOG


652 
	`PSXHW_LOG
("DMA6 CHCR 32bô wrôê%x\n", 
vÆue
);

654 
	`DmaExec
(6);

657 #ifde‡
PSXHW_LOG


659 
	`PSXHW_LOG
("DMA PCR 32bô wrôê%x\n", 
vÆue
);

660 
HW_DMA_PCR
 = 
	`SWAPu32
(
vÆue
);

665 #ifde‡
PSXHW_LOG


666 
	`PSXHW_LOG
("DMA ICR 32bô wrôê%x\n", 
vÆue
);

669 
u32
 
tmp
 = 
vÆue
 & 0x00ff803f;

670 
tmp
 |(
	`SWAPu32
(
HW_DMA_ICR
Ë& ~
vÆue
) & 0x7f000000;

671 i‡((
tmp
 & 
HW_DMA_ICR_GLOBAL_ENABLE
 &&Åmp & 0x7f000000)

672 || 
tmp
 & 
HW_DMA_ICR_BUS_ERROR
) {

673 i‡(!(
	`SWAPu32
(
HW_DMA_ICR
Ë& 
HW_DMA_ICR_IRQ_SENT
))

674 
	`psxHu32ªf
(0x1070Ë|
	`SWAP32
(8);

675 
tmp
 |
HW_DMA_ICR_IRQ_SENT
;

677 
HW_DMA_ICR
 = 
	`SWAPu32
(
tmp
);

682 #ifde‡
PSXHW_LOG


683 
	`PSXHW_LOG
("GPU DATA 32bô wrôê%x\n", 
vÆue
);

685 
	`GPU_wrôeD©a
(
vÆue
); ;

687 #ifde‡
PSXHW_LOG


688 
	`PSXHW_LOG
("GPU STATUS 32bô wrôê%x\n", 
vÆue
);

690 
	`GPU_wrôeSètus
(
vÆue
);

691 
	`gpuSyncPlugöSR
();

695 
	`mdecWrôe0
(
vÆue
); ;

697 
	`mdecWrôe1
(
vÆue
); ;

700 #ifde‡
PSXHW_LOG


701 
	`PSXHW_LOG
("COUNTER 0 COUNT 32bô wrôê%x\n", 
vÆue
);

703 
	`psxR˙tWcou¡
(0, 
vÆue
 & 0xffff); ;

705 #ifde‡
PSXHW_LOG


706 
	`PSXHW_LOG
("COUNTER 0 MODE 32bô wrôê%x\n", 
vÆue
);

708 
	`psxR˙tWmode
(0, 
vÆue
); ;

710 #ifde‡
PSXHW_LOG


711 
	`PSXHW_LOG
("COUNTER 0 TARGET 32bô wrôê%x\n", 
vÆue
);

713 
	`psxR˙tWèrgë
(0, 
vÆue
 & 0xffff); ;

716 #ifde‡
PSXHW_LOG


717 
	`PSXHW_LOG
("COUNTER 1 COUNT 32bô wrôê%x\n", 
vÆue
);

719 
	`psxR˙tWcou¡
(1, 
vÆue
 & 0xffff); ;

721 #ifde‡
PSXHW_LOG


722 
	`PSXHW_LOG
("COUNTER 1 MODE 32bô wrôê%x\n", 
vÆue
);

724 
	`psxR˙tWmode
(1, 
vÆue
); ;

726 #ifde‡
PSXHW_LOG


727 
	`PSXHW_LOG
("COUNTER 1 TARGET 32bô wrôê%x\n", 
vÆue
);

729 
	`psxR˙tWèrgë
(1, 
vÆue
 & 0xffff); ;

732 #ifde‡
PSXHW_LOG


733 
	`PSXHW_LOG
("COUNTER 2 COUNT 32bô wrôê%x\n", 
vÆue
);

735 
	`psxR˙tWcou¡
(2, 
vÆue
 & 0xffff); ;

737 #ifde‡
PSXHW_LOG


738 
	`PSXHW_LOG
("COUNTER 2 MODE 32bô wrôê%x\n", 
vÆue
);

740 
	`psxR˙tWmode
(2, 
vÆue
); ;

742 #ifde‡
PSXHW_LOG


743 
	`PSXHW_LOG
("COUNTER 2 TARGET 32bô wrôê%x\n", 
vÆue
);

745 
	`psxR˙tWèrgë
(2, 
vÆue
 & 0xffff); ;

749 i‡(
add
>=0x1f801c00 &&ádd<0x1f801e00) {

750 
	`SPU_wrôeRegi°î
(
add
, 
vÆue
&0xffff, 
psxRegs
.
cy˛e
);

751 
	`SPU_wrôeRegi°î
(
add
 + 2, 
vÆue
>>16, 
psxRegs
.
cy˛e
);

755 
	`psxHu32ªf
(
add
Ë
	`SWAPu32
(
vÆue
);

756 #ifde‡
PSXHW_LOG


757 
	`PSXHW_LOG
("*Unknow¿32bô wrôê©áddªs†%x vÆuê%x\n", 
add
, 
vÆue
);

761 
	`psxHu32ªf
(
add
Ë
	`SWAPu32
(
vÆue
);

762 #ifde‡
PSXHW_LOG


763 
	`PSXHW_LOG
("*Know¿32bô wrôê©áddªs†%x vÆuê%x\n", 
add
, 
vÆue
);

765 
	}
}

767 
	$psxHwFªeze
(*
f
, 
Mode
) {

769 
	}
}

	@libpcsxcore/psxhw.h

20 #i‚de‡
__PSXHW_H__


21 
	#__PSXHW_H__


	)

23 #ifde‡
__˝lu•lus


27 
	~"psxcomm⁄.h
"

28 
	~"r3000a.h
"

29 
	~"psxmem.h
"

30 
	~"sio.h
"

31 
	~"psxcou¡îs.h
"

33 
	#HW_DMA0_MADR
 (
	`psxHu32ªf
(0x1080))

34 
	#HW_DMA0_BCR
 (
	`psxHu32ªf
(0x1084))

	)

35 
	#HW_DMA0_CHCR
 (
	`psxHu32ªf
(0x1088))

	)

37 
	#HW_DMA1_MADR
 (
	`psxHu32ªf
(0x1090))

38 
	#HW_DMA1_BCR
 (
	`psxHu32ªf
(0x1094))

	)

39 
	#HW_DMA1_CHCR
 (
	`psxHu32ªf
(0x1098))

	)

41 
	#HW_DMA2_MADR
 (
	`psxHu32ªf
(0x10a0))

42 
	#HW_DMA2_BCR
 (
	`psxHu32ªf
(0x10a4))

	)

43 
	#HW_DMA2_CHCR
 (
	`psxHu32ªf
(0x10a8))

	)

45 
	#HW_DMA3_MADR
 (
	`psxHu32ªf
(0x10b0))

46 
	#HW_DMA3_BCR
 (
	`psxHu32ªf
(0x10b4))

	)

47 
	#HW_DMA3_CHCR
 (
	`psxHu32ªf
(0x10b8))

	)

49 
	#HW_DMA4_MADR
 (
	`psxHu32ªf
(0x10c0))

50 
	#HW_DMA4_BCR
 (
	`psxHu32ªf
(0x10c4))

	)

51 
	#HW_DMA4_CHCR
 (
	`psxHu32ªf
(0x10c8))

	)

53 
	#HW_DMA6_MADR
 (
	`psxHu32ªf
(0x10e0))

54 
	#HW_DMA6_BCR
 (
	`psxHu32ªf
(0x10e4))

	)

55 
	#HW_DMA6_CHCR
 (
	`psxHu32ªf
(0x10e8))

	)

57 
	#HW_DMA_PCR
 (
	`psxHu32ªf
(0x10f0))

	)

58 
	#HW_DMA_ICR
 (
	`psxHu32ªf
(0x10f4))

	)

60 
	#HW_DMA_ICR_BUS_ERROR
 (1<<15)

	)

61 
	#HW_DMA_ICR_GLOBAL_ENABLE
 (1<<23)

	)

62 
	#HW_DMA_ICR_IRQ_SENT
 (1<<31)

	)

64 
	#DMA_INTERRUPT
(
n
) { \

65 
u32
 
i¸
 = 
	`SWAPu32
(
HW_DMA_ICR
); \

66 i‡(
i¸
 & (1 << (16 + 
n
))) { \

67 
i¸
 |1 << (24 + 
n
); \

68 i‡(
i¸
 & 
HW_DMA_ICR_GLOBAL_ENABLE
 && !(i¸ & 
HW_DMA_ICR_IRQ_SENT
)) { \

69 
	`psxHu32ªf
(0x1070Ë|
	`SWAP32
(8); \

70 
i¸
 |
HW_DMA_ICR_IRQ_SENT
; \

72 
HW_DMA_ICR
 = 
	`SWAP32
(
i¸
); \

74 }

	)

76 
psxHwRe£t
();

77 
u8
 
psxHwRód8
(
u32
 
add
);

78 
u16
 
psxHwRód16
(
u32
 
add
);

79 
u32
 
psxHwRód32
(u32 
add
);

80 
psxHwWrôe8
(
u32
 
add
, 
u8
 
vÆue
);

81 
psxHwWrôe16
(
u32
 
add
, 
u16
 
vÆue
);

82 
psxHwWrôe32
(
u32
 
add
, u32 
vÆue
);

83 
psxHwFªeze
(*
f
, 
Mode
);

85 #ifde‡
__˝lu•lus


	@libpcsxcore/psxinterpreter.c

24 
	~"psxcomm⁄.h
"

25 
	~"r3000a.h
"

26 
	~"gã.h
"

27 
	~"psxhÀ.h
"

28 
	~"debug.h
"

30 
	gbønch
 = 0;

31 
	gbønch2
 = 0;

32 
u32
 
	gbønchPC
;

36 #ifde‡
PSXCPU_LOG


37 
	#debugI
(Ë
	`PSXCPU_LOG
("%s\n", 
	`disR3000AF
(
psxRegs
.
code
,ÖsxRegs.
pc
));

	)

39 
	#debugI
()

	)

42 
execI
();

45 (*
	gpsxBSC
[64])();

46 (*
	gpsxSPC
[64])();

47 (*
	gpsxREG
[32])();

48 (*
	gpsxCP0
[32])();

49 (*
psxCP2
[64])(
psxCP2Regs
 *
ªgs
);

50 (*
psxCP2BSC
[32])();

52 
	$dñayRód
(
ªg
, 
u32
 
bpc
) {

53 
u32
 
rﬁd
, 
∫ew
;

57 
rﬁd
 = 
psxRegs
.
GPR
.
r
[
ªg
];

58 
psxBSC
[
psxRegs
.
code
 >> 26]();

59 
∫ew
 = 
psxRegs
.
GPR
.
r
[
ªg
];

61 
psxRegs
.
pc
 = 
bpc
;

63 
bønch
 = 0;

65 
psxRegs
.
GPR
.
r
[
ªg
] = 
rﬁd
;

66 
	`execI
();

67 
psxRegs
.
GPR
.
r
[
ªg
] = 
∫ew
;

69 
	`psxBønchTe°
();

70 
	}
}

72 
	$dñayWrôe
(
ªg
, 
u32
 
bpc
) {

81 
psxBSC
[
psxRegs
.
code
 >> 26]();

83 
bønch
 = 0;

84 
psxRegs
.
pc
 = 
bpc
;

86 
	`psxBønchTe°
();

87 
	}
}

89 
	$dñayRódWrôe
(
ªg
, 
u32
 
bpc
) {

95 
bønch
 = 0;

96 
psxRegs
.
pc
 = 
bpc
;

98 
	`psxBønchTe°
();

99 
	}
}

103 
	#_tFun˘_
 ((
tmp
 ) & 0x3F)

104 
	#_tRd_
 ((
tmp
 >> 11) & 0x1F)

105 
	#_tRt_
 ((
tmp
 >> 16) & 0x1F)

106 
	#_tRs_
 ((
tmp
 >> 21) & 0x1F)

107 
	#_tSa_
 ((
tmp
 >> 6) & 0x1F)

108 

	)

109 
	$psxTe°LﬂdDñay
(
ªg
, 
u32
 
tmp
) {

110 i‡(
tmp
 == 0)  0;

111 
tmp
 >> 26) {

113 
_tFun˘_
) {

116 i‡(
_tRd_
 =
ªg
 && 
_tRt_
 ==Ñeg)  1; 

117 i‡(
_tRt_
 =
ªg
)  2; 

118 i‡(
_tRd_
 =
ªg
)  3;

122 i‡(
_tRs_
 =
ªg
)  2;

125 i‡(
_tRd_
 =
ªg
 && 
_tRs_
 ==Ñeg)  1; 

126 i‡(
_tRs_
 =
ªg
)  2; 

127 i‡(
_tRd_
 =
ªg
)  3;

136 i‡(
_tRd_
 =
ªg
 && (
_tRt_
 =ªg || 
_tRs_
 ==Ñeg))  1; 

137 i‡(
_tRt_
 =
ªg
 || 
_tRs_
 ==Ñeg)  2; 

138 i‡(
_tRd_
 =
ªg
)  3;

142 i‡(
_tRd_
 =
ªg
)  3;

145 i‡(
_tRs_
 =
ªg
)  2;

150 i‡(
_tRt_
 =
ªg
 || 
_tRs_
 ==Ñeg)  2;

156 
_tRt_
) {

163 i‡(
_tRs_
 =
ªg
)  2;

170 i‡(31 =
ªg
)  3;

178 i‡(
_tRs_
 =
ªg
 || 
_tRt_
 ==Ñeg)  2;

186 i‡(
_tRs_
 =
ªg
)  2;

191 i‡(
_tRt_
 =
ªg
 && 
_tRs_
 ==Ñeg)  1; 

192 i‡(
_tRs_
 =
ªg
)  2; 

193 i‡(
_tRt_
 =
ªg
)  3;

197 i‡(
_tRt_
 =
ªg
)  3;

201 
_tFun˘_
) {

203 i‡(
_tRt_
 =
ªg
)  3;

206 i‡(
_tRt_
 =
ªg
)  3;

209 i‡(
_tRt_
 =
ªg
)  2;

212 i‡(
_tRt_
 =
ªg
)  2;

219 
_tFun˘_
) {

221 
_tRs_
) {

223 i‡(
_tRt_
 =
ªg
)  3;

226 i‡(
_tRt_
 =
ªg
)  3;

229 i‡(
_tRt_
 =
ªg
)  2;

232 i‡(
_tRt_
 =
ªg
)  2;

241 i‡(
_tRt_
 =
ªg
)  3; 

242 i‡(
_tRs_
 =
ªg
)  2;

247 i‡(
_tRt_
 =
ªg
 && 
_tRs_
 ==Ñeg)  1; 

248 i‡(
_tRs_
 =
ªg
)  2; 

249 i‡(
_tRt_
 =
ªg
)  3;

254 i‡(
_tRt_
 =
ªg
 || 
_tRs_
 ==Ñeg)  2;

258 i‡(
_tRs_
 =
ªg
)  2;

263 
	}
}

265 
	$psxDñayTe°
(
ªg
, 
u32
 
bpc
) {

266 
u32
 *
code
;

267 
u32
 
tmp
;

269 
code
 = (
u32
 *)
	`PSXM
(
bpc
);

270 
tmp
 = ((
code
 =
NULL
Ë? 0 : 
	`SWAP32
(*code));

271 
bønch
 = 1;

273 
	`psxTe°LﬂdDñay
(
ªg
, 
tmp
)) {

275 
	`dñayRódWrôe
(
ªg
, 
bpc
); ;

277 
	`dñayRód
(
ªg
, 
bpc
); ;

279 
	`dñayWrôe
(
ªg
, 
bpc
); ;

281 
psxBSC
[
psxRegs
.
code
 >> 26]();

283 
bønch
 = 0;

284 
psxRegs
.
pc
 = 
bpc
;

286 
	`psxBønchTe°
();

287 
	}
}

289 
u32
 
	$psxBønchNoDñay
() {

290 
u32
 *
code
;

291 
u32
 
ãmp
;

293 
code
 = (
u32
 *)
	`PSXM
(
psxRegs
.
pc
);

294 
psxRegs
.
code
 = ((codê=
NULL
Ë? 0 : 
	`SWAP32
(*code));

295 
_Op_
) {

297 
_Fun˘_
) {

299  
	`_u32
(
_rRs_
);

301 
ãmp
 = 
	`_u32
(
_rRs_
);

302 i‡(
_Rd_
Ë{ 
	`_SëLök
(_Rd_); }

303  
ãmp
;

307 
_Rt_
) {

309 i‡(
	`_i32
(
_rRs_
) < 0)

310  
_BønchT¨gë_
;

313 i‡(
	`_i32
(
_rRs_
) >= 0)

314  
_BønchT¨gë_
;

317 i‡(
	`_i32
(
_rRs_
) < 0) {

318 
	`_SëLök
(31);

319  
_BønchT¨gë_
;

323 i‡(
	`_i32
(
_rRs_
) >= 0) {

324 
	`_SëLök
(31);

325  
_BønchT¨gë_
;

331  
_JumpT¨gë_
;

333 
	`_SëLök
(31);

334  
_JumpT¨gë_
;

336 i‡(
	`_i32
(
_rRs_
Ë=_i32(
_rRt_
))

337  
_BønchT¨gë_
;

340 i‡(
	`_i32
(
_rRs_
Ë!_i32(
_rRt_
))

341  
_BønchT¨gë_
;

344 i‡(
	`_i32
(
_rRs_
) <= 0)

345  
_BønchT¨gë_
;

348 i‡(
	`_i32
(
_rRs_
) > 0)

349  
_BønchT¨gë_
;

353  (
u32
)-1;

354 
	}
}

356 
	$psxDñayBønchExec
(
u32
 
èr
) {

357 
	`execI
();

359 
bønch
 = 0;

360 
psxRegs
.
pc
 = 
èr
;

361 
psxRegs
.
cy˛e
 +
BIAS
;

362 
	`psxBønchTe°
();

364 
	}
}

366 
	$psxDñayBønchTe°
(
u32
 
èr1
) {

367 
u32
 
èr2
, 
tmp1
, 
tmp2
;

369 
èr2
 = 
	`psxBønchNoDñay
();

370 i‡(
èr2
 =(
u32
)-1)

373 
	`debugI
();

381 
psxRegs
.
pc
 = 
èr1
;

382 
tmp1
 = 
	`psxBønchNoDñay
();

383 i‡(
tmp1
 =(
u32
)-1) {

384  
	`psxDñayBønchExec
(
èr2
);

386 
	`debugI
();

387 
psxRegs
.
cy˛e
 +
BIAS
;

394 
psxRegs
.
pc
 = 
èr2
;

395 
tmp2
 = 
	`psxBønchNoDñay
();

396 i‡(
tmp2
 =(
u32
)-1) {

397  
	`psxDñayBønchExec
(
tmp1
);

399 
	`debugI
();

400 
psxRegs
.
cy˛e
 +
BIAS
;

407 
psxRegs
.
pc
 = 
tmp1
;

408  
	`psxDñayBønchExec
(
tmp2
);

409 
	}
}

411 
	$doBønch
(
u32
 
èr
) {

412 
u32
 *
code
;

413 
u32
 
tmp
;

415 
bønch2
 = 
bønch
 = 1;

416 
bønchPC
 = 
èr
;

419 i‡(
	`psxDñayBønchTe°
(
èr
))

422 
code
 = (
u32
 *)
	`PSXM
(
psxRegs
.
pc
);

423 
psxRegs
.
code
 = ((codê=
NULL
Ë? 0 : 
	`SWAP32
(*code));

425 
	`debugI
();

427 
psxRegs
.
pc
 += 4;

428 
psxRegs
.
cy˛e
 +
BIAS
;

431 
tmp
 = 
psxRegs
.
code
 >> 26;

432 
tmp
) {

434 
_Rs_
) {

437 
	`psxDñayTe°
(
_Rt_
, 
bønchPC
);

442 
_Fun˘_
) {

444 
_Rs_
) {

447 
	`psxDñayTe°
(
_Rt_
, 
bønchPC
);

454 
	`psxDñayTe°
(
_Rt_
, 
bønchPC
);

457 i‡(
tmp
 >= 0x20 &&Åmp <= 0x26) {

458 
	`psxDñayTe°
(
_Rt_
, 
bønchPC
);

464 
psxBSC
[
psxRegs
.
code
 >> 26]();

466 
bønch
 = 0;

467 
psxRegs
.
pc
 = 
bønchPC
;

469 
	`psxBønchTe°
();

470 
	}
}

476 
	$psxADDI
(Ë{ i‡(!
_Rt_
Ë; 
_rRt_
 = 
	`_u32
(
_rRs_
Ë+ 
_Imm_
 ; 
	}
}

477 
	$psxADDIU
(Ë{ i‡(!
_Rt_
Ë; 
_rRt_
 = 
	`_u32
(
_rRs_
Ë+ 
_Imm_
 ; 
	}
}

478 
	$psxANDI
(Ë{ i‡(!
_Rt_
Ë; 
_rRt_
 = 
	`_u32
(
_rRs_
Ë& 
_ImmU_
; 
	}
}

479 
	$psxORI
(Ë{ i‡(!
_Rt_
Ë; 
_rRt_
 = 
	`_u32
(
_rRs_
Ë| 
_ImmU_
; 
	}
}

480 
	$psxXORI
(Ë{ i‡(!
_Rt_
Ë; 
_rRt_
 = 
	`_u32
(
_rRs_
Ë^ 
_ImmU_
; 
	}
}

481 
	$psxSLTI
(Ë{ i‡(!
_Rt_
Ë; 
_rRt_
 = 
	`_i32
(
_rRs_
Ë< 
_Imm_
 ; 
	}
}

482 
	$psxSLTIU
(Ë{ i‡(!
_Rt_
Ë; 
_rRt_
 = 
	`_u32
(
_rRs_
Ë< ((
u32
)
_Imm_
); 
	}
}

488 
	$psxADD
(Ë{ i‡(!
_Rd_
Ë; 
_rRd_
 = 
	`_u32
(
_rRs_
Ë+ _u32(
_rRt_
); 
	}
}

489 
	$psxADDU
(Ë{ i‡(!
_Rd_
Ë; 
_rRd_
 = 
	`_u32
(
_rRs_
Ë+ _u32(
_rRt_
); 
	}
}

490 
	$psxSUB
(Ë{ i‡(!
_Rd_
Ë; 
_rRd_
 = 
	`_u32
(
_rRs_
Ë- _u32(
_rRt_
); 
	}
}

491 
	$psxSUBU
(Ë{ i‡(!
_Rd_
Ë; 
_rRd_
 = 
	`_u32
(
_rRs_
Ë- _u32(
_rRt_
); 
	}
}

492 
	$psxAND
(Ë{ i‡(!
_Rd_
Ë; 
_rRd_
 = 
	`_u32
(
_rRs_
Ë& _u32(
_rRt_
); 
	}
}

493 
	$psxOR
(Ë{ i‡(!
_Rd_
Ë; 
_rRd_
 = 
	`_u32
(
_rRs_
Ë| _u32(
_rRt_
); 
	}
}

494 
	$psxXOR
(Ë{ i‡(!
_Rd_
Ë; 
_rRd_
 = 
	`_u32
(
_rRs_
Ë^ _u32(
_rRt_
); 
	}
}

495 
	$psxNOR
(Ë{ i‡(!
_Rd_
Ë; 
_rRd_
 =~(
	`_u32
(
_rRs_
Ë| _u32(
_rRt_
)); 
	}
}

496 
	$psxSLT
(Ë{ i‡(!
_Rd_
Ë; 
_rRd_
 = 
	`_i32
(
_rRs_
Ë< _i32(
_rRt_
); 
	}
}

497 
	$psxSLTU
(Ë{ i‡(!
_Rd_
Ë; 
_rRd_
 = 
	`_u32
(
_rRs_
Ë< _u32(
_rRt_
); 
	}
}

503 
	$psxDIV
() {

504 i‡(
	`_i32
(
_rRt_
) != 0) {

505 
	`_i32
(
_rLo_
Ë_i32(
_rRs_
Ë/ _i32(
_rRt_
);

506 
	`_i32
(
_rHi_
Ë_i32(
_rRs_
Ë% _i32(
_rRt_
);

509 
	`_i32
(
_rLo_
Ë_i32(
_rRs_
) >= 0 ? 0xffffffff : 1;

510 
	`_i32
(
_rHi_
Ë_i32(
_rRs_
);

512 
	}
}

514 
	$psxDIVU
() {

515 i‡(
_rRt_
 != 0) {

516 
_rLo_
 = 
_rRs_
 / 
_rRt_
;

517 
_rHi_
 = 
_rRs_
 % 
_rRt_
;

520 
	`_i32
(
_rLo_
) = 0xffffffff;

521 
	`_i32
(
_rHi_
Ë_i32(
_rRs_
);

523 
	}
}

525 
	$psxMULT
() {

526 
u64
 
ªs
 = (
s64
)((s64)
	`_i32
(
_rRs_
Ë* (s64)_i32(
_rRt_
));

528 
psxRegs
.
GPR
.
n
.
lo
 = (
u32
)(
ªs
 & 0xffffffff);

529 
psxRegs
.
GPR
.
n
.
hi
 = (
u32
)((
ªs
 >> 32) & 0xffffffff);

530 
	}
}

532 
	$psxMULTU
() {

533 
u64
 
ªs
 = (u64)((u64)
	`_u32
(
_rRs_
Ë* (u64)_u32(
_rRt_
));

535 
psxRegs
.
GPR
.
n
.
lo
 = (
u32
)(
ªs
 & 0xffffffff);

536 
psxRegs
.
GPR
.
n
.
hi
 = (
u32
)((
ªs
 >> 32) & 0xffffffff);

537 
	}
}

543 
	#RïZBønchi32
(
›
Ëif(
	`_i32
(
_rRs_
Ë› 0Ë
	`doBønch
(
_BønchT¨gë_
);

	)

544 
	#RïZBønchLöki32
(
›
Ëif(
	`_i32
(
_rRs_
Ë› 0Ë{ 
	`_SëLök
(31); 
	`doBønch
(
_BønchT¨gë_
); }

	)

546 
	$psxBGEZ
(Ë{ 
	`RïZBønchi32
(>=Ë
	}
}

547 
	$psxBGEZAL
(Ë{ 
	`RïZBønchLöki32
(>=Ë
	}
}

548 
	$psxBGTZ
(Ë{ 
	`RïZBønchi32
(>Ë
	}
}

549 
	$psxBLEZ
(Ë{ 
	`RïZBønchi32
(<=Ë
	}
}

550 
	$psxBLTZ
(Ë{ 
	`RïZBønchi32
(<Ë
	}
}

551 
	$psxBLTZAL
(Ë{ 
	`RïZBønchLöki32
(<Ë
	}
}

557 
	$psxSLL
(Ë{ i‡(!
_Rd_
Ë; 
	`_u32
(
_rRd_
Ë_u32(
_rRt_
Ë<< 
_Sa_
; 
	}
}

558 
	$psxSRA
(Ë{ i‡(!
_Rd_
Ë; 
	`_i32
(
_rRd_
Ë_i32(
_rRt_
Ë>> 
_Sa_
; 
	}
}

559 
	$psxSRL
(Ë{ i‡(!
_Rd_
Ë; 
	`_u32
(
_rRd_
Ë_u32(
_rRt_
Ë>> 
_Sa_
; 
	}
}

565 
	$psxSLLV
(Ë{ i‡(!
_Rd_
Ë; 
	`_u32
(
_rRd_
Ë_u32(
_rRt_
Ë<< _u32(
_rRs_
); 
	}
}

566 
	$psxSRAV
(Ë{ i‡(!
_Rd_
Ë; 
	`_i32
(
_rRd_
Ë_i32(
_rRt_
Ë>> 
	`_u32
(
_rRs_
); 
	}
}

567 
	$psxSRLV
(Ë{ i‡(!
_Rd_
Ë; 
	`_u32
(
_rRd_
Ë_u32(
_rRt_
Ë>> _u32(
_rRs_
); 
	}
}

573 
	$psxLUI
(Ë{ i‡(!
_Rt_
Ë; 
	`_u32
(
_rRt_
Ë
psxRegs
.
code
 << 16; 
	}
}

579 
	$psxMFHI
(Ë{ i‡(!
_Rd_
Ë; 
_rRd_
 = 
_rHi_
; 
	}
}

580 
	$psxMFLO
(Ë{ i‡(!
_Rd_
Ë; 
_rRd_
 = 
_rLo_
; 
	}
}

586 
	$psxMTHI
(Ë{ 
_rHi_
 = 
_rRs_
; 
	}
}

587 
	$psxMTLO
(Ë{ 
_rLo_
 = 
_rRs_
; 
	}
}

593 
	$psxBREAK
() {

595 
	}
}

597 
	$psxSYSCALL
() {

598 
psxRegs
.
pc
 -= 4;

599 
	`psxEx˚±i⁄
(0x20, 
bønch
);

600 
	}
}

602 
	$psxRFE
() {

604 
psxRegs
.
CP0
.
n
.
Sètus
 = (psxRegs.CP0.n.Status & 0xfffffff0) |

605 ((
psxRegs
.
CP0
.
n
.
Sètus
 & 0x3c) >> 2);

606 
	}
}

612 
	#RïBønchi32
(
›
Ëif(
	`_i32
(
_rRs_
Ë› _i32(
_rRt_
)Ë
	`doBønch
(
_BønchT¨gë_
);

	)

614 
	$psxBEQ
(Ë{ 
	`RïBønchi32
(==Ë
	}
}

615 
	$psxBNE
(Ë{ 
	`RïBønchi32
(!=Ë
	}
}

621 
	$psxJ
(Ë{ 
	`doBønch
(
_JumpT¨gë_
); 
	}
}

622 
	$psxJAL
(Ë{ 
	`_SëLök
(31); 
	`doBønch
(
_JumpT¨gë_
); 
	}
}

628 
	$psxJR
() {

629 
	`doBønch
(
	`_u32
(
_rRs_
));

630 
	`psxJumpTe°
();

631 
	}
}

633 
	$psxJALR
() {

634 
u32
 
ãmp
 = 
	`_u32
(
_rRs_
);

635 i‡(
_Rd_
Ë{ 
	`_SëLök
(_Rd_); }

636 
	`doBønch
(
ãmp
);

637 
	}
}

644 
	#_oB_
 (
	`_u32
(
_rRs_
Ë+ 
_Imm_
)

	)

646 
	$psxLB
() {

647 i‡(
_Rt_
) {

648 
	`_i32
(
_rRt_
Ë(sig√d )
	`psxMemRód8
(
_oB_
);

650 
	`psxMemRód8
(
_oB_
);

652 
	}
}

654 
	$psxLBU
() {

655 i‡(
_Rt_
) {

656 
	`_u32
(
_rRt_
Ë
	`psxMemRód8
(
_oB_
);

658 
	`psxMemRód8
(
_oB_
);

660 
	}
}

662 
	$psxLH
() {

663 i‡(
_Rt_
) {

664 
	`_i32
(
_rRt_
Ë()
	`psxMemRód16
(
_oB_
);

666 
	`psxMemRód16
(
_oB_
);

668 
	}
}

670 
	$psxLHU
() {

671 i‡(
_Rt_
) {

672 
	`_u32
(
_rRt_
Ë
	`psxMemRód16
(
_oB_
);

674 
	`psxMemRód16
(
_oB_
);

676 
	}
}

678 
	$psxLW
() {

679 i‡(
_Rt_
) {

680 
	`_u32
(
_rRt_
Ë
	`psxMemRód32
(
_oB_
);

682 
	`psxMemRód32
(
_oB_
);

684 
	}
}

686 
u32
 
	gLWL_MASK
[4] = { 0xffffff, 0xffff, 0xff, 0 };

687 
u32
 
	gLWL_SHIFT
[4] = { 24, 16, 8, 0 };

689 
	$psxLWL
() {

690 
u32
 
addr
 = 
_oB_
;

691 
u32
 
shi·
 = 
addr
 & 3;

692 
u32
 
mem
 = 
	`psxMemRód32
(
addr
 & ~3);

694 i‡(!
_Rt_
) ;

695 
	`_u32
(
_rRt_
Ë–_u32(_rRt_Ë& 
LWL_MASK
[
shi·
]) |

696 –
mem
 << 
LWL_SHIFT
[
shi·
]);

706 
	}
}

708 
u32
 
	gLWR_MASK
[4] = { 0, 0xff000000, 0xffff0000, 0xffffff00 };

709 
u32
 
	gLWR_SHIFT
[4] = { 0, 8, 16, 24 };

711 
	$psxLWR
() {

712 
u32
 
addr
 = 
_oB_
;

713 
u32
 
shi·
 = 
addr
 & 3;

714 
u32
 
mem
 = 
	`psxMemRód32
(
addr
 & ~3);

716 i‡(!
_Rt_
) ;

717 
	`_u32
(
_rRt_
Ë–_u32(_rRt_Ë& 
LWR_MASK
[
shi·
]) |

718 –
mem
 >> 
LWR_SHIFT
[
shi·
]);

728 
	}
}

730 
	$psxSB
(Ë{ 
	`psxMemWrôe8
 (
_oB_
, 
_rRt_
 & 0xff); 
	}
}

731 
	$psxSH
(Ë{ 
	`psxMemWrôe16
(
_oB_
, 
_rRt_
 & 0xffff); 
	}
}

732 
	$psxSW
(Ë{ 
	`psxMemWrôe32
(
_oB_
, 
_rRt_
); 
	}
}

734 
u32
 
	gSWL_MASK
[4] = { 0xffffff00, 0xffff0000, 0xff000000, 0 };

735 
u32
 
	gSWL_SHIFT
[4] = { 24, 16, 8, 0 };

737 
	$psxSWL
() {

738 
u32
 
addr
 = 
_oB_
;

739 
u32
 
shi·
 = 
addr
 & 3;

740 
u32
 
mem
 = 
	`psxMemRód32
(
addr
 & ~3);

742 
	`psxMemWrôe32
(
addr
 & ~3, (
	`_u32
(
_rRt_
Ë>> 
SWL_SHIFT
[
shi·
]) |

743 –
mem
 & 
SWL_MASK
[
shi·
]) );

752 
	}
}

754 
u32
 
	gSWR_MASK
[4] = { 0, 0xff, 0xffff, 0xffffff };

755 
u32
 
	gSWR_SHIFT
[4] = { 0, 8, 16, 24 };

757 
	$psxSWR
() {

758 
u32
 
addr
 = 
_oB_
;

759 
u32
 
shi·
 = 
addr
 & 3;

760 
u32
 
mem
 = 
	`psxMemRód32
(
addr
 & ~3);

762 
	`psxMemWrôe32
(
addr
 & ~3, (
	`_u32
(
_rRt_
Ë<< 
SWR_SHIFT
[
shi·
]) |

763 –
mem
 & 
SWR_MASK
[
shi·
]) );

773 
	}
}

779 
	$psxMFC0
(Ë{ i‡(!
_Rt_
Ë; 
	`_i32
(
_rRt_
Ë()
_rFs_
; 
	}
}

780 
	$psxCFC0
(Ë{ i‡(!
_Rt_
Ë; 
	`_i32
(
_rRt_
Ë()
_rFs_
; 
	}
}

782 
	$psxTe°SWI¡s
() {

783 i‡(
psxRegs
.
CP0
.
n
.
Cau£
 &ÖsxRegs.CP0.n.
Sètus
 & 0x0300 &&

784 
psxRegs
.
CP0
.
n
.
Sètus
 & 0x1) {

785 
psxRegs
.
CP0
.
n
.
Cau£
 &= ~0x7c;

786 
	`psxEx˚±i⁄
(
psxRegs
.
CP0
.
n
.
Cau£
, 
bønch
);

788 
	}
}

790 
	$MTC0
(
ªg
, 
u32
 
vÆ
) {

792 
ªg
) {

794 
psxRegs
.
CP0
.
r
[12] = 
vÆ
;

795 
	`psxTe°SWI¡s
();

799 
psxRegs
.
CP0
.
n
.
Cau£
 &= ~0x0300;

800 
psxRegs
.
CP0
.
n
.
Cau£
 |
vÆ
 & 0x0300;

801 
	`psxTe°SWI¡s
();

805 
psxRegs
.
CP0
.
r
[
ªg
] = 
vÆ
;

808 
	}
}

810 
	$psxMTC0
(Ë{ 
	`MTC0
(
_Rd_
, 
	`_u32
(
_rRt_
)); 
	}
}

811 
	$psxCTC0
(Ë{ 
	`MTC0
(
_Rd_
, 
	`_u32
(
_rRt_
)); 
	}
}

817 
	$psxNULL
() {

818 #ifde‡
PSXCPU_LOG


819 
	`PSXCPU_LOG
("psx: Unim∂emíãd o∞%x\n", 
psxRegs
.
code
);

821 
	}
}

823 
	$psxSPECIAL
() {

824 
psxSPC
[
_Fun˘_
]();

825 
	}
}

827 
	$psxREGIMM
() {

828 
psxREG
[
_Rt_
]();

829 
	}
}

831 
	$psxCOP0
() {

832 
psxCP0
[
_Rs_
]();

833 
	}
}

835 
	$psxCOP2
() {

836 
psxCP2
[
_Fun˘_
]((
psxCP2Regs
 *)&
psxRegs
.
CP2D
);

837 
	}
}

839 
	$psxBASIC
(
psxCP2Regs
 *
ªgs
) {

840 
psxCP2BSC
[
_Rs_
]();

841 
	}
}

843 
	$psxHLE
() {

845 
psxHLEt
[
psxRegs
.
code
 & 0x07]();

846 
	}
}

848 (*
	gpsxBSC
[64])() = {

849 
psxSPECIAL
, 
psxREGIMM
, 
psxJ
 , 
psxJAL
 , 
psxBEQ
 , 
psxBNE
 , 
psxBLEZ
, 
psxBGTZ
,

850 
psxADDI
 , 
psxADDIU
 , 
psxSLTI
, 
psxSLTIU
, 
psxANDI
, 
psxORI
 , 
psxXORI
, 
psxLUI
 ,

851 
psxCOP0
 , 
psxNULL
 , 
psxCOP2
,ÖsxNULL ,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,

852 
psxNULL
 ,ÖsxNULL ,ÖsxNULL,ÖsxNULL ,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,

853 
psxLB
 , 
psxLH
 , 
psxLWL
 , 
psxLW
 , 
psxLBU
 , 
psxLHU
 , 
psxLWR
 , 
psxNULL
,

854 
psxSB
 , 
psxSH
 , 
psxSWL
 , 
psxSW
 , 
psxNULL
,ÖsxNULL, 
psxSWR
 ,ÖsxNULL,

855 
psxNULL
 ,ÖsxNULL , 
gãLWC2
,ÖsxNULL ,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,

856 
psxNULL
 ,ÖsxNULL , 
gãSWC2
, 
psxHLE
 ,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL

860 (*
	gpsxSPC
[64])() = {

861 
psxSLL
 , 
psxNULL
 , 
psxSRL
 , 
psxSRA
 , 
psxSLLV
 ,ÖsxNULL , 
psxSRLV
, 
psxSRAV
,

862 
psxJR
 , 
psxJALR
 , 
psxNULL
,ÖsxNULL, 
psxSYSCALL
, 
psxBREAK
,ÖsxNULL,ÖsxNULL,

863 
psxMFHI
, 
psxMTHI
 , 
psxMFLO
, 
psxMTLO
, 
psxNULL
 ,ÖsxNULL ,ÖsxNULL,ÖsxNULL,

864 
psxMULT
, 
psxMULTU
, 
psxDIV
 , 
psxDIVU
, 
psxNULL
 ,ÖsxNULL ,ÖsxNULL,ÖsxNULL,

865 
psxADD
 , 
psxADDU
 , 
psxSUB
 , 
psxSUBU
, 
psxAND
 , 
psxOR
 , 
psxXOR
 , 
psxNOR
 ,

866 
psxNULL
,ÖsxNULL , 
psxSLT
 , 
psxSLTU
,ÖsxNULL ,ÖsxNULL ,ÖsxNULL,ÖsxNULL,

867 
psxNULL
,ÖsxNULL ,ÖsxNULL,ÖsxNULL,ÖsxNULL ,ÖsxNULL ,ÖsxNULL,ÖsxNULL,

868 
psxNULL
,ÖsxNULL ,ÖsxNULL,ÖsxNULL,ÖsxNULL ,ÖsxNULL ,ÖsxNULL,ÖsxNULL

871 (*
	gpsxREG
[32])() = {

872 
psxBLTZ
 , 
psxBGEZ
 , 
psxNULL
,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,

873 
psxNULL
 ,ÖsxNULL ,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,

874 
psxBLTZAL
, 
psxBGEZAL
, 
psxNULL
,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,

875 
psxNULL
 ,ÖsxNULL ,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL

878 (*
	gpsxCP0
[32])() = {

879 
psxMFC0
, 
psxNULL
, 
psxCFC0
,ÖsxNULL, 
psxMTC0
,ÖsxNULL, 
psxCTC0
,ÖsxNULL,

880 
psxNULL
,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,

881 
psxRFE
 , 
psxNULL
,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,

882 
psxNULL
,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL

885 (*
psxCP2
[64])(
psxCP2Regs
 *
ªgs
) = {

886 
psxBASIC
, 
gãRTPS
 , 
psxNULL
 ,ÖsxNULL,ÖsxNULL,ÖsxNULL , 
gãNCLIP
,ÖsxNULL,

887 
psxNULL
 ,ÖsxNULL ,ÖsxNULL ,ÖsxNULL, 
gãOP
 ,ÖsxNULL ,ÖsxNULL ,ÖsxNULL,

888 
gãDPCS
 , 
gãINTPL
, 
gãMVMVA
, 
gãNCDS
, 
gãCDP
 , 
psxNULL
 , 
gãNCDT
 ,ÖsxNULL,

889 
psxNULL
 ,ÖsxNULL ,ÖsxNULL , 
gãNCCS
, 
gãCC
 ,ÖsxNULL , 
gãNCS
 ,ÖsxNULL,

890 
gãNCT
 , 
psxNULL
 ,ÖsxNULL ,ÖsxNULL,ÖsxNULL,ÖsxNULL ,ÖsxNULL ,ÖsxNULL,

891 
gãSQR
 , 
gãDCPL
 , 
gãDPCT
 , 
psxNULL
,ÖsxNULL, 
gãAVSZ3
, 
gãAVSZ4
,ÖsxNULL,

892 
gãRTPT
 , 
psxNULL
 ,ÖsxNULL ,ÖsxNULL,ÖsxNULL,ÖsxNULL ,ÖsxNULL ,ÖsxNULL,

893 
psxNULL
 ,ÖsxNULL ,ÖsxNULL ,ÖsxNULL,ÖsxNULL, 
gãGPF
 , 
gãGPL
 , 
gãNCCT


894 
	}
};

896 (*
	gpsxCP2BSC
[32])() = {

897 
gãMFC2
, 
psxNULL
, 
gãCFC2
,ÖsxNULL, 
gãMTC2
,ÖsxNULL, 
gãCTC2
,ÖsxNULL,

898 
psxNULL
,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,

899 
psxNULL
,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,

900 
psxNULL
,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL,ÖsxNULL

906 
	$ötInô
() {

908 
	}
}

910 
	$ötRe£t
() {

911 
	}
}

913 
	$ötExecuã
() {

914 
°›
;

915 ;!
°›
;)

916 
	`execI
();

917 
	}
}

919 
	$ötExecuãBlock
() {

920 
bønch2
 = 0;

921 !
bønch2
Ë
	`execI
();

922 
	}
}

924 
	$ötCÀ¨
(
u32
 
Addr
, u32 
Size
) {

925 
	}
}

927 
	$ötShutdown
() {

928 
	}
}

931 
	$execI
() {

932 
u32
 *
code
 = (u32 *)
	`PSXM
(
psxRegs
.
pc
);

933 
psxRegs
.
code
 = ((codê=
NULL
Ë? 0 : 
	`SWAP32
(*code));

935 
	`debugI
();

937 i‡(
C⁄fig
.
Debug
Ë
	`Pro˚ssDebug
();

939 
psxRegs
.
pc
 += 4;

940 
psxRegs
.
cy˛e
 +
BIAS
;

942 
psxBSC
[
psxRegs
.
code
 >> 26]();

943 
	}
}

945 
R3000A˝u
 
	gpsxI¡
 = {

946 
ötInô
,

947 
ötRe£t
,

948 
ötExecuã
,

949 
ötExecuãBlock
,

950 
ötCÀ¨
,

951 
ötShutdown


	@libpcsxcore/psxmem.c

26 
	~"psxmem.h
"

27 
	~"psxmem_m≠.h
"

28 
	~"r3000a.h
"

29 
	~"psxhw.h
"

30 
	~"debug.h
"

32 
	~"memm≠.h
"

34 #i‚de‡
MAP_ANONYMOUS


35 
	#MAP_ANONYMOUS
 
MAP_ANON


	)

38 *(*
	gpsxM≠Hook
)(
	gaddr
, 
size_t
 
	gsize
, 
	gis_fixed
,

39 
psxM≠Tag
 
	gèg
);

40 (*
psxUnm≠Hook
)(*
±r
, 
size_t
 
size
, 
psxM≠Tag
 
èg
);

42 *
	$psxM≠
(
addr
, 
size_t
 
size
, 
is_fixed
,

43 
psxM≠Tag
 
èg
)

45 
Êags
 = 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
;

46 
åõd_to_Æign
 = 0;

47 
mask
;

48 *
ªq
, *
ªt
;

50 
ªåy
:

51 i‡(
psxM≠Hook
 !
NULL
) {

52 
ªt
 = 
	`psxM≠Hook
(
addr
, 
size
, 0, 
èg
);

53 i‡(
ªt
 =
NULL
)

54  
NULL
;

61 
ªq
 = (*)
addr
;

62 
ªt
 = 
	`mm≠
(
ªq
, 
size
, 
PROT_READ
 | 
PROT_WRITE
, 
Êags
, -1, 0);

63 i‡(
ªt
 =
MAP_FAILED
)

64  
NULL
;

67 i‡(
addr
 !0 && 
ªt
 != (*)addr) {

68 
	`SysMesßge
("psxMap: warning: wantedÅo map @%08x, got %p\n",

69 
addr
, 
ªt
);

71 i‡(
is_fixed
) {

72 
	`psxUnm≠
(
ªt
, 
size
, 
èg
);

73  
NULL
;

76 i‡(((
addr
 ^ ()
ªt
Ë& 0x00ffffffË&& !
åõd_to_Æign
)

78 
	`psxUnm≠
(
ªt
, 
size
, 
èg
);

82 
mask
 = (
addr
 - 1) & ~addr & 0x07ffffff;

83 
addr
 = ()(
ªt
 + 
mask
) & ~mask;

84 
åõd_to_Æign
 = 1;

85 
ªåy
;

89  
ªt
;

90 
	}
}

92 
	$psxUnm≠
(*
±r
, 
size_t
 
size
, 
psxM≠Tag
 
èg
)

94 i‡(
psxUnm≠Hook
 !
NULL
) {

95 
	`psxUnm≠Hook
(
±r
, 
size
, 
èg
);

99 i‡(
±r
)

100 
	`munm≠
(
±r
, 
size
);

101 
	}
}

103 
s8
 *
	gpsxM
 = 
NULL
;

104 
s8
 *
	gpsxP
 = 
NULL
;

105 
s8
 *
	gpsxR
 = 
NULL
;

106 
s8
 *
	gpsxH
 = 
NULL
;

108 
u8
 **
	gpsxMemWLUT
 = 
NULL
;

109 
u8
 **
	gpsxMemRLUT
 = 
NULL
;

130 
	$psxMemInô
() {

131 
i
;

133 
psxMemRLUT
 = (
u8
 **)
	`mÆloc
(0x10000 * (*));

134 
psxMemWLUT
 = (
u8
 **)
	`mÆloc
(0x10000 * (*));

135 
	`mem£t
(
psxMemRLUT
, 0, 0x10000 * (*));

136 
	`mem£t
(
psxMemWLUT
, 0, 0x10000 * (*));

138 
psxM
 = 
	`psxM≠
(0x80000000, 0x00210000, 1, 
MAP_TAG_RAM
);

139 #i‚de‡
RAM_FIXED


140 #ifde‡
__BLACKBERRY_QNX__


141 i‡(
psxM
 =
NULL
)

142 
psxM
 = 
	`psxM≠
(0x77000000, 0x00210000, 0, 
MAP_TAG_RAM
);

144 i‡(
psxM
 =
NULL
)

145 
psxM
 = 
	`psxM≠
(0x78000000, 0x00210000, 0, 
MAP_TAG_RAM
);

148 i‡(
psxM
 =
NULL
) {

149 
	`SysMesßge
(
	`_
("mapping main RAM failed"));

153 
psxP
 = &
psxM
[0x200000];

154 
psxH
 = 
	`psxM≠
(0x1f800000, 0x10000, 0, 
MAP_TAG_OTHER
);

155 
psxR
 = 
	`psxM≠
(0x1fc00000, 0x80000, 0, 
MAP_TAG_OTHER
);

157 i‡(
psxMemRLUT
 =
NULL
 || 
psxMemWLUT
 == NULL ||

158 
psxR
 =
NULL
 || 
psxP
 =NULL || 
psxH
 == NULL) {

159 
	`SysMesßge
(
	`_
("Errorállocating memory!"));

160 
	`psxMemShutdown
();

165 
i
 = 0; i < 0x80; i++Ë
psxMemRLUT
[ò+ 0x0000] = (
u8
 *)&
psxM
[(i & 0x1f) << 16];

167 
	`mem˝y
(
psxMemRLUT
 + 0x8000,ÖsxMemRLUT, 0x80 * (*));

168 
	`mem˝y
(
psxMemRLUT
 + 0xa000,ÖsxMemRLUT, 0x80 * (*));

170 
psxMemRLUT
[0x1f00] = (
u8
 *)
psxP
;

171 
psxMemRLUT
[0x1f80] = (
u8
 *)
psxH
;

173 
i
 = 0; i < 0x08; i++Ë
psxMemRLUT
[ò+ 0x1fc0] = (
u8
 *)&
psxR
[i << 16];

175 
	`mem˝y
(
psxMemRLUT
 + 0x9fc0,ÖsxMemRLUT + 0x1fc0, 0x08 * (*));

176 
	`mem˝y
(
psxMemRLUT
 + 0xbfc0,ÖsxMemRLUT + 0x1fc0, 0x08 * (*));

179 
i
 = 0; i < 0x80; i++Ë
psxMemWLUT
[ò+ 0x0000] = (
u8
 *)&
psxM
[(i & 0x1f) << 16];

181 
	`mem˝y
(
psxMemWLUT
 + 0x8000,ÖsxMemWLUT, 0x80 * (*));

182 
	`mem˝y
(
psxMemWLUT
 + 0xa000,ÖsxMemWLUT, 0x80 * (*));

184 
psxMemWLUT
[0x1f00] = (
u8
 *)
psxP
;

185 
psxMemWLUT
[0x1f80] = (
u8
 *)
psxH
;

188 
	}
}

190 
	$psxMemRe£t
() {

191 
FILE
 *
f
 = 
NULL
;

192 
bios
[1024];

194 
	`mem£t
(
psxM
, 0, 0x00200000);

195 
	`mem£t
(
psxP
, 0, 0x00010000);

197 i‡(
	`°rcmp
(
C⁄fig
.
Bios
, "HLE") != 0) {

198 
	`•rötf
(
bios
, "%s/%s", 
C⁄fig
.
BiosDú
, C⁄fig.
Bios
);

199 
f
 = 
	`f›í
(
bios
, "rb");

201 i‡(
f
 =
NULL
) {

202 
	`SysMesßge
(
	`_
("CouldÇŸ o≥¿BIOS:\"%s\". E«blög HLE Bios!\n"), 
bios
);

203 
	`mem£t
(
psxR
, 0, 0x80000);

204 
C⁄fig
.
HLE
 = 
TRUE
;

206 
	`‰ód
(
psxR
, 1, 0x80000, 
f
);

207 
	`f˛o£
(
f
);

208 
C⁄fig
.
HLE
 = 
FALSE
;

210 } 
C⁄fig
.
HLE
 = 
TRUE
;

211 
	}
}

213 
	$psxMemShutdown
() {

214 
	`psxUnm≠
(
psxM
, 0x00210000, 
MAP_TAG_RAM
);ÖsxM = 
NULL
;

215 
	`psxUnm≠
(
psxH
, 0x10000, 
MAP_TAG_OTHER
);ÖsxH = 
NULL
;

216 
	`psxUnm≠
(
psxR
, 0x80000, 
MAP_TAG_OTHER
);ÖsxR = 
NULL
;

218 
	`‰ì
(
psxMemRLUT
);ÖsxMemRLUT = 
NULL
;

219 
	`‰ì
(
psxMemWLUT
);ÖsxMemWLUT = 
NULL
;

220 
	}
}

222 
	gwrôeok
 = 1;

224 
u8
 
	$psxMemRód8
(
u32
 
mem
) {

225 *
p
;

226 
u32
 
t
;

228 
t
 = 
mem
 >> 16;

229 i‡(
t
 == 0x1f80 ||Å == 0x9f80 ||Å == 0xbf80) {

230 i‡((
mem
 & 0xffff) < 0x400)

231  
	`psxHu8
(
mem
);

233  
	`psxHwRód8
(
mem
);

235 
p
 = (*)(
psxMemRLUT
[
t
]);

236 i‡(
p
 !
NULL
) {

237 i‡(
C⁄fig
.
Debug
)

238 
	`DebugCheckBP
((
mem
 & 0xffffffË| 0x80000000, 
R1
);

239  *(
u8
 *)(
p
 + (
mem
 & 0xffff));

241 #ifde‡
PSXMEM_LOG


242 
	`PSXMEM_LOG
("î∏lb %8.8lx\n", 
mem
);

247 
	}
}

249 
u16
 
	$psxMemRód16
(
u32
 
mem
) {

250 *
p
;

251 
u32
 
t
;

253 
t
 = 
mem
 >> 16;

254 i‡(
t
 == 0x1f80 ||Å == 0x9f80 ||Å == 0xbf80) {

255 i‡((
mem
 & 0xffff) < 0x400)

256  
	`psxHu16
(
mem
);

258  
	`psxHwRód16
(
mem
);

260 
p
 = (*)(
psxMemRLUT
[
t
]);

261 i‡(
p
 !
NULL
) {

262 i‡(
C⁄fig
.
Debug
)

263 
	`DebugCheckBP
((
mem
 & 0xffffffË| 0x80000000, 
R2
);

264  
	`SWAPu16
(*(
u16
 *)(
p
 + (
mem
 & 0xffff)));

266 #ifde‡
PSXMEM_LOG


267 
	`PSXMEM_LOG
("î∏lh %8.8lx\n", 
mem
);

272 
	}
}

274 
u32
 
	$psxMemRód32
(
u32
 
mem
) {

275 *
p
;

276 
u32
 
t
;

278 
t
 = 
mem
 >> 16;

279 i‡(
t
 == 0x1f80 ||Å == 0x9f80 ||Å == 0xbf80) {

280 i‡((
mem
 & 0xffff) < 0x400)

281  
	`psxHu32
(
mem
);

283  
	`psxHwRód32
(
mem
);

285 
p
 = (*)(
psxMemRLUT
[
t
]);

286 i‡(
p
 !
NULL
) {

287 i‡(
C⁄fig
.
Debug
)

288 
	`DebugCheckBP
((
mem
 & 0xffffffË| 0x80000000, 
R4
);

289  
	`SWAPu32
(*(
u32
 *)(
p
 + (
mem
 & 0xffff)));

291 #ifde‡
PSXMEM_LOG


292 i‡(
wrôeok
Ë{ 
	`PSXMEM_LOG
("î∏lw %8.8lx\n", 
mem
); }

297 
	}
}

299 
	$psxMemWrôe8
(
u32
 
mem
, 
u8
 
vÆue
) {

300 *
p
;

301 
u32
 
t
;

303 
t
 = 
mem
 >> 16;

304 i‡(
t
 == 0x1f80 ||Å == 0x9f80 ||Å == 0xbf80) {

305 i‡((
mem
 & 0xffff) < 0x400)

306 
	`psxHu8
(
mem
Ë
vÆue
;

308 
	`psxHwWrôe8
(
mem
, 
vÆue
);

310 
p
 = (*)(
psxMemWLUT
[
t
]);

311 i‡(
p
 !
NULL
) {

312 i‡(
C⁄fig
.
Debug
)

313 
	`DebugCheckBP
((
mem
 & 0xffffffË| 0x80000000, 
W1
);

314 *(
u8
 *)(
p
 + (
mem
 & 0xffff)Ë
vÆue
;

315 #ifde‡
PSXREC


316 
psxCpu
->
	`CÀ¨
((
mem
 & (~3)), 1);

319 #ifde‡
PSXMEM_LOG


320 
	`PSXMEM_LOG
("î∏sb %8.8lx\n", 
mem
);

324 
	}
}

326 
	$psxMemWrôe16
(
u32
 
mem
, 
u16
 
vÆue
) {

327 *
p
;

328 
u32
 
t
;

330 
t
 = 
mem
 >> 16;

331 i‡(
t
 == 0x1f80 ||Å == 0x9f80 ||Å == 0xbf80) {

332 i‡((
mem
 & 0xffff) < 0x400)

333 
	`psxHu16ªf
(
mem
Ë
	`SWAPu16
(
vÆue
);

335 
	`psxHwWrôe16
(
mem
, 
vÆue
);

337 
p
 = (*)(
psxMemWLUT
[
t
]);

338 i‡(
p
 !
NULL
) {

339 i‡(
C⁄fig
.
Debug
)

340 
	`DebugCheckBP
((
mem
 & 0xffffffË| 0x80000000, 
W2
);

341 *(
u16
 *)(
p
 + (
mem
 & 0xffff)Ë
	`SWAPu16
(
vÆue
);

342 #ifde‡
PSXREC


343 
psxCpu
->
	`CÀ¨
((
mem
 & (~3)), 1);

346 #ifde‡
PSXMEM_LOG


347 
	`PSXMEM_LOG
("î∏sh %8.8lx\n", 
mem
);

351 
	}
}

353 
	$psxMemWrôe32
(
u32
 
mem
, u32 
vÆue
) {

354 *
p
;

355 
u32
 
t
;

358 
t
 = 
mem
 >> 16;

359 i‡(
t
 == 0x1f80 ||Å == 0x9f80 ||Å == 0xbf80) {

360 i‡((
mem
 & 0xffff) < 0x400)

361 
	`psxHu32ªf
(
mem
Ë
	`SWAPu32
(
vÆue
);

363 
	`psxHwWrôe32
(
mem
, 
vÆue
);

365 
p
 = (*)(
psxMemWLUT
[
t
]);

366 i‡(
p
 !
NULL
) {

367 i‡(
C⁄fig
.
Debug
)

368 
	`DebugCheckBP
((
mem
 & 0xffffffË| 0x80000000, 
W4
);

369 *(
u32
 *)(
p
 + (
mem
 & 0xffff)Ë
	`SWAPu32
(
vÆue
);

370 #ifde‡
PSXREC


371 
psxCpu
->
	`CÀ¨
(
mem
, 1);

374 i‡(
mem
 != 0xfffe0130) {

375 #ifde‡
PSXREC


376 i‡(!
wrôeok
)

377 
psxCpu
->
	`CÀ¨
(
mem
, 1);

380 #ifde‡
PSXMEM_LOG


381 i‡(
wrôeok
Ë{ 
	`PSXMEM_LOG
("î∏sw %8.8lx\n", 
mem
); }

384 
i
;

386 
vÆue
) {

388 i‡(
wrôeok
 == 0) ;

389 
wrôeok
 = 0;

390 
	`mem£t
(
psxMemWLUT
 + 0x0000, 0, 0x80 * (*));

391 
	`mem£t
(
psxMemWLUT
 + 0x8000, 0, 0x80 * (*));

392 
	`mem£t
(
psxMemWLUT
 + 0xa000, 0, 0x80 * (*));

395 i‡(
wrôeok
 == 1) ;

396 
wrôeok
 = 1;

397 
i
 = 0; i < 0x80; i++Ë
psxMemWLUT
[ò+ 0x0000] = (*)&
psxM
[(i & 0x1f) << 16];

398 
	`mem˝y
(
psxMemWLUT
 + 0x8000,ÖsxMemWLUT, 0x80 * (*));

399 
	`mem˝y
(
psxMemWLUT
 + 0xa000,ÖsxMemWLUT, 0x80 * (*));

402 #ifde‡
PSXMEM_LOG


403 
	`PSXMEM_LOG
("unk %8.8lx = %x\n", 
mem
, 
vÆue
);

410 
	}
}

412 *
	$psxMemPoöãr
(
u32
 
mem
) {

413 *
p
;

414 
u32
 
t
;

416 
t
 = 
mem
 >> 16;

417 i‡(
t
 == 0x1f80 ||Å == 0x9f80 ||Å == 0xbf80) {

418 i‡((
mem
 & 0xffff) < 0x400)

419  (*)&
psxH
[
mem
];

421  
NULL
;

423 
p
 = (*)(
psxMemWLUT
[
t
]);

424 i‡(
p
 !
NULL
) {

425  (*)(
p
 + (
mem
 & 0xffff));

427  
NULL
;

429 
	}
}

	@libpcsxcore/psxmem.h

20 #i‚de‡
__PSXMEMORY_H__


21 
	#__PSXMEMORY_H__


	)

23 #ifde‡
__˝lu•lus


27 
	~"psxcomm⁄.h
"

29 #i‡
deföed
(
__BIGENDIAN__
)

31 
	#_SWAP16
(
b
Ë((((*)&(b))[0] & 0xffË| (((*)&(b))[1] & 0xffË<< 8)

	)

32 
	#_SWAP32
(
b
Ë((((*)&(b))[0] & 0xffË| ((((*)&(b))[1] & 0xffË<< 8Ë| ((((*)&(b))[2] & 0xffË<< 16Ë| (((*)&(b))[3] << 24))

	)

34 
	#SWAP16
(
v
Ë((((vË& 0xff00Ë>> 8Ë+(((vË& 0xffË<< 8))

	)

35 
	#SWAP32
(
v
Ë((((vË& 0xff000000ulË>> 24Ë+ (((vË& 0xff0000ulË>> 8Ë+ (((vË& 0xff00ul)<<8Ë+(((vË& 0xffulË<< 24))

	)

36 
	#SWAPu32
(
v
Ë
	`SWAP32
((
u32
)(v))

	)

37 
	#SWAPs32
(
v
Ë
	`SWAP32
((
s32
)(v))

	)

39 
	#SWAPu16
(
v
Ë
	`SWAP16
((
u16
)(v))

	)

40 
	#SWAPs16
(
v
Ë
	`SWAP16
((
s16
)(v))

	)

44 
	#SWAP16
(
b
Ë(b)

	)

45 
	#SWAP32
(
b
Ë(b)

	)

47 
	#SWAPu16
(
b
Ë(b)

	)

48 
	#SWAPu32
(
b
Ë(b)

	)

52 
s8
 *
psxM
;

53 
	#psxMs8
(
mem
Ë
psxM
[(memË& 0x1fffff]

	)

54 
	#psxMs16
(
mem
Ë(
	`SWAP16
(*(
s16
 *)&
psxM
[(memË& 0x1fffff]))

	)

55 
	#psxMs32
(
mem
Ë(
	`SWAP32
(*(
s32
 *)&
psxM
[(memË& 0x1fffff]))

	)

56 
	#psxMu8
(
mem
Ë(*(
u8
 *)&
psxM
[(memË& 0x1fffff])

	)

57 
	#psxMu16
(
mem
Ë(
	`SWAP16
(*(
u16
 *)&
psxM
[(memË& 0x1fffff]))

	)

58 
	#psxMu32
(
mem
Ë(
	`SWAP32
(*(
u32
 *)&
psxM
[(memË& 0x1fffff]))

	)

60 
	#psxMs8ªf
(
mem
Ë
psxM
[(memË& 0x1fffff]

	)

61 
	#psxMs16ªf
(
mem
Ë(*(
s16
 *)&
psxM
[(memË& 0x1fffff])

	)

62 
	#psxMs32ªf
(
mem
Ë(*(
s32
 *)&
psxM
[(memË& 0x1fffff])

	)

63 
	#psxMu8ªf
(
mem
Ë(*(
u8
 *)&
psxM
[(memË& 0x1fffff])

	)

64 
	#psxMu16ªf
(
mem
Ë(*(
u16
 *)&
psxM
[(memË& 0x1fffff])

	)

65 
	#psxMu32ªf
(
mem
Ë(*(
u32
 *)&
psxM
[(memË& 0x1fffff])

	)

67 
s8
 *
psxP
;

68 
	#psxPs8
(
mem
Ë
psxP
[(memË& 0xffff]

	)

69 
	#psxPs16
(
mem
Ë(
	`SWAP16
(*(
s16
 *)&
psxP
[(memË& 0xffff]))

	)

70 
	#psxPs32
(
mem
Ë(
	`SWAP32
(*(
s32
 *)&
psxP
[(memË& 0xffff]))

	)

71 
	#psxPu8
(
mem
Ë(*(
u8
 *)&
psxP
[(memË& 0xffff])

	)

72 
	#psxPu16
(
mem
Ë(
	`SWAP16
(*(
u16
 *)&
psxP
[(memË& 0xffff]))

	)

73 
	#psxPu32
(
mem
Ë(
	`SWAP32
(*(
u32
 *)&
psxP
[(memË& 0xffff]))

	)

75 
	#psxPs8ªf
(
mem
Ë
psxP
[(memË& 0xffff]

	)

76 
	#psxPs16ªf
(
mem
Ë(*(
s16
 *)&
psxP
[(memË& 0xffff])

	)

77 
	#psxPs32ªf
(
mem
Ë(*(
s32
 *)&
psxP
[(memË& 0xffff])

	)

78 
	#psxPu8ªf
(
mem
Ë(*(
u8
 *)&
psxP
[(memË& 0xffff])

	)

79 
	#psxPu16ªf
(
mem
Ë(*(
u16
 *)&
psxP
[(memË& 0xffff])

	)

80 
	#psxPu32ªf
(
mem
Ë(*(
u32
 *)&
psxP
[(memË& 0xffff])

	)

82 
s8
 *
psxR
;

83 
	#psxRs8
(
mem
Ë
psxR
[(memË& 0x7ffff]

	)

84 
	#psxRs16
(
mem
Ë(
	`SWAP16
(*(
s16
 *)&
psxR
[(memË& 0x7ffff]))

	)

85 
	#psxRs32
(
mem
Ë(
	`SWAP32
(*(
s32
 *)&
psxR
[(memË& 0x7ffff]))

	)

86 
	#psxRu8
(
mem
Ë(*(
u8
* )&
psxR
[(memË& 0x7ffff])

	)

87 
	#psxRu16
(
mem
Ë(
	`SWAP16
(*(
u16
 *)&
psxR
[(memË& 0x7ffff]))

	)

88 
	#psxRu32
(
mem
Ë(
	`SWAP32
(*(
u32
 *)&
psxR
[(memË& 0x7ffff]))

	)

90 
	#psxRs8ªf
(
mem
Ë
psxR
[(memË& 0x7ffff]

	)

91 
	#psxRs16ªf
(
mem
Ë(*(
s16
*)&
psxR
[(memË& 0x7ffff])

	)

92 
	#psxRs32ªf
(
mem
Ë(*(
s32
*)&
psxR
[(memË& 0x7ffff])

	)

93 
	#psxRu8ªf
(
mem
Ë(*(
u8
 *)&
psxR
[(memË& 0x7ffff])

	)

94 
	#psxRu16ªf
(
mem
Ë(*(
u16
*)&
psxR
[(memË& 0x7ffff])

	)

95 
	#psxRu32ªf
(
mem
Ë(*(
u32
*)&
psxR
[(memË& 0x7ffff])

	)

97 
s8
 *
psxH
;

98 
	#psxHs8
(
mem
Ë
psxH
[(memË& 0xffff]

	)

99 
	#psxHs16
(
mem
Ë(
	`SWAP16
(*(
s16
 *)&
psxH
[(memË& 0xffff]))

	)

100 
	#psxHs32
(
mem
Ë(
	`SWAP32
(*(
s32
 *)&
psxH
[(memË& 0xffff]))

	)

101 
	#psxHu8
(
mem
Ë(*(
u8
 *)&
psxH
[(memË& 0xffff])

	)

102 
	#psxHu16
(
mem
Ë(
	`SWAP16
(*(
u16
 *)&
psxH
[(memË& 0xffff]))

	)

103 
	#psxHu32
(
mem
Ë(
	`SWAP32
(*(
u32
 *)&
psxH
[(memË& 0xffff]))

	)

105 
	#psxHs8ªf
(
mem
Ë
psxH
[(memË& 0xffff]

	)

106 
	#psxHs16ªf
(
mem
Ë(*(
s16
 *)&
psxH
[(memË& 0xffff])

	)

107 
	#psxHs32ªf
(
mem
Ë(*(
s32
 *)&
psxH
[(memË& 0xffff])

	)

108 
	#psxHu8ªf
(
mem
Ë(*(
u8
 *)&
psxH
[(memË& 0xffff])

	)

109 
	#psxHu16ªf
(
mem
Ë(*(
u16
 *)&
psxH
[(memË& 0xffff])

	)

110 
	#psxHu32ªf
(
mem
Ë(*(
u32
 *)&
psxH
[(memË& 0xffff])

	)

112 
u8
 **
psxMemWLUT
;

113 
u8
 **
psxMemRLUT
;

115 
	#PSXM
(
mem
Ë(
psxMemRLUT
[(memË>> 16] =0 ? 
NULL
 : (
u8
*)’sxMemRLUT[(memË>> 16] + ((memË& 0xffff)))

	)

116 
	#PSXMs8
(
mem
Ë(*(
s8
 *)
	`PSXM
(mem))

	)

117 
	#PSXMs16
(
mem
Ë(
	`SWAP16
(*(
s16
 *)
	`PSXM
(mem)))

	)

118 
	#PSXMs32
(
mem
Ë(
	`SWAP32
(*(
s32
 *)
	`PSXM
(mem)))

	)

119 
	#PSXMu8
(
mem
Ë(*(
u8
 *)
	`PSXM
(mem))

	)

120 
	#PSXMu16
(
mem
Ë(
	`SWAP16
(*(
u16
 *)
	`PSXM
(mem)))

	)

121 
	#PSXMu32
(
mem
Ë(
	`SWAP32
(*(
u32
 *)
	`PSXM
(mem)))

	)

123 
	#PSXMu32ªf
(
mem
Ë(*(
u32
 *)
	`PSXM
(mem))

	)

125 #i‡!
deföed
(
PSXREC
Ë&& (deföed(
__x86_64__
Ë|| deföed(
__i386__
Ë|| deföed(
__µc__
)Ë&& !deföed(
NOPSXREC
)

126 
	#PSXREC


	)

129 
psxMemInô
();

130 
psxMemRe£t
();

131 
psxMemShutdown
();

133 
u8
 
psxMemRód8
 (
u32
 
mem
);

134 
u16
 
psxMemRód16
(
u32
 
mem
);

135 
u32
 
psxMemRód32
(u32 
mem
);

136 
psxMemWrôe8
 (
u32
 
mem
, 
u8
 
vÆue
);

137 
psxMemWrôe16
(
u32
 
mem
, 
u16
 
vÆue
);

138 
psxMemWrôe32
(
u32
 
mem
, u32 
vÆue
);

139 *
psxMemPoöãr
(
u32
 
mem
);

141 #ifde‡
__˝lu•lus


	@libpcsxcore/psxmem_map.h

1 #i‚de‡
__PSXMEM_MAP_H__


2 
	#__PSXMEM_MAP_H__


	)

4 #ifde‡
__˝lu•lus


8 
	epsxM≠Tag
 {

9 
MAP_TAG_OTHER
 = 0,

10 
MAP_TAG_RAM
,

11 
MAP_TAG_VRAM
,

12 
MAP_TAG_LUTS
,

15 *(*
psxM≠Hook
)(
addr
, 
size_t
 
size
, 
is_fixed
,

16 
psxM≠Tag
 
èg
);

17 (*
psxUnm≠Hook
)(*
±r
, 
size_t
 
size
, 
psxM≠Tag
 
èg
);

19 *
psxM≠
(
addr
, 
size_t
 
size
, 
is_fixed
,

20 
psxM≠Tag
 
èg
);

21 
psxUnm≠
(*
±r
, 
size_t
 
size
, 
psxM≠Tag
 
èg
);

23 #ifde‡
__˝lu•lus


	@libpcsxcore/r3000a.c

24 
	~"r3000a.h
"

25 
	~"cdrom.h
"

26 
	~"mdec.h
"

27 
	~"gã.h
"

29 
R3000A˝u
 *
	gpsxCpu
 = 
NULL
;

30 
psxRegi°îs
 
	gpsxRegs
;

32 
	$psxInô
() {

33 
	`SysPrötf
(
	`_
("Ru¬ög PCSX Vîsi⁄ %†(%s).\n"), 
PACKAGE_VERSION
, 
__DATE__
);

35 #ifde‡
PSXREC


36 i‡(
C⁄fig
.
Cpu
 =
CPU_INTERPRETER
) {

37 
psxCpu
 = &
psxI¡
;

38 } 
psxCpu
 = &
psxRec
;

40 
psxCpu
 = &
psxI¡
;

43 
Log
 = 0;

45 i‡(
	`psxMemInô
() == -1)  -1;

47  
psxCpu
->
	`Inô
();

48 
	}
}

50 
	$psxRe£t
() {

51 
	`psxMemRe£t
();

53 
	`mem£t
(&
psxRegs
, 0, (psxRegs));

55 
psxRegs
.
pc
 = 0xbfc00000;

57 
psxRegs
.
CP0
.
r
[12] = 0x10900000;

58 
psxRegs
.
CP0
.
r
[15] = 0x00000002;

60 
psxCpu
->
	`Re£t
();

62 
	`psxHwRe£t
();

63 
	`psxBiosInô
();

65 i‡(!
C⁄fig
.
HLE
)

66 
	`psxExecuãBios
();

68 #ifde‡
EMU_LOG


69 
	`EMU_LOG
("*BIOS END*\n");

71 
Log
 = 0;

72 
	}
}

74 
	$psxShutdown
() {

75 
	`psxMemShutdown
();

76 
	`psxBiosShutdown
();

78 
psxCpu
->
	`Shutdown
();

79 
	}
}

81 
	$psxEx˚±i⁄
(
u32
 
code
, u32 
bd
) {

82 i‡(!
C⁄fig
.
HLE
 && ((((
psxRegs
.
code
 = 
	`PSXMu32
’sxRegs.
pc
)) >> 24) & 0xfe) == 0x4a)) {

87 (*
psxCP2
[64])(*
˝2ªgs
);

88 
psxCP2
[
psxRegs
.
code
 & 0x3f](&psxRegs.
CP2D
);

92 
psxRegs
.
CP0
.
n
.
Cau£
 = (psxRegs.CP0.n.Cau£ & 0x300Ë| 
code
;

95 i‡(
bd
) {

96 #ifde‡
PSXCPU_LOG


97 
	`PSXCPU_LOG
("bd set!!!\n");

99 
	`SysPrötf
("bd set!!!\n");

100 
psxRegs
.
CP0
.
n
.
Cau£
 |= 0x80000000;

101 
psxRegs
.
CP0
.
n
.
EPC
 = (psxRegs.
pc
 - 4);

103 
psxRegs
.
CP0
.
n
.
EPC
 = (psxRegs.
pc
);

105 i‡(
psxRegs
.
CP0
.
n
.
Sètus
 & 0x400000)

106 
psxRegs
.
pc
 = 0xbfc00180;

108 
psxRegs
.
pc
 = 0x80000080;

111 
psxRegs
.
CP0
.
n
.
Sètus
 = (psxRegs.CP0.n.Status &~0x3f) |

112 ((
psxRegs
.
CP0
.
n
.
Sètus
 & 0xf) << 2);

114 i‡(
C⁄fig
.
HLE
Ë
	`psxBiosEx˚±i⁄
();

115 
	}
}

117 
	$psxBønchTe°
() {

118 i‡((
psxRegs
.
cy˛e
 - 
psxNextsCou¡î
Ë>
psxNextCou¡î
)

119 
	`psxR˙tUpd©e
();

121 i‡(
psxRegs
.
öãºu±
) {

122 i‡((
psxRegs
.
öãºu±
 & (1 << 
PSXINT_SIO
)Ë&& !
C⁄fig
.
Sio
) {

123 i‡((
psxRegs
.
cy˛e
 -ÖsxRegs.
ötCy˛e
[
PSXINT_SIO
].
sCy˛e
) >=ÖsxRegs.intCycle[PSXINT_SIO].cycle) {

124 
psxRegs
.
öãºu±
 &~(1 << 
PSXINT_SIO
);

125 
	`sioI¡îru±
();

128 i‡(
psxRegs
.
öãºu±
 & (1 << 
PSXINT_CDR
)) {

129 i‡((
psxRegs
.
cy˛e
 -ÖsxRegs.
ötCy˛e
[
PSXINT_CDR
].
sCy˛e
) >=ÖsxRegs.intCycle[PSXINT_CDR].cycle) {

130 
psxRegs
.
öãºu±
 &~(1 << 
PSXINT_CDR
);

131 
	`cdrI¡îru±
();

134 i‡(
psxRegs
.
öãºu±
 & (1 << 
PSXINT_CDREAD
)) {

135 i‡((
psxRegs
.
cy˛e
 -ÖsxRegs.
ötCy˛e
[
PSXINT_CDREAD
].
sCy˛e
) >=ÖsxRegs.intCycle[PSXINT_CDREAD].cycle) {

136 
psxRegs
.
öãºu±
 &~(1 << 
PSXINT_CDREAD
);

137 
	`cdrRódI¡îru±
();

140 i‡(
psxRegs
.
öãºu±
 & (1 << 
PSXINT_GPUDMA
)) {

141 i‡((
psxRegs
.
cy˛e
 -ÖsxRegs.
ötCy˛e
[
PSXINT_GPUDMA
].
sCy˛e
) >=ÖsxRegs.intCycle[PSXINT_GPUDMA].cycle) {

142 
psxRegs
.
öãºu±
 &~(1 << 
PSXINT_GPUDMA
);

143 
	`gpuI¡îru±
();

146 i‡(
psxRegs
.
öãºu±
 & (1 << 
PSXINT_MDECOUTDMA
)) {

147 i‡((
psxRegs
.
cy˛e
 -ÖsxRegs.
ötCy˛e
[
PSXINT_MDECOUTDMA
].
sCy˛e
) >=ÖsxRegs.intCycle[PSXINT_MDECOUTDMA].cycle) {

148 
psxRegs
.
öãºu±
 &~(1 << 
PSXINT_MDECOUTDMA
);

149 
	`mdec1I¡îru±
();

152 i‡(
psxRegs
.
öãºu±
 & (1 << 
PSXINT_SPUDMA
)) {

153 i‡((
psxRegs
.
cy˛e
 -ÖsxRegs.
ötCy˛e
[
PSXINT_SPUDMA
].
sCy˛e
) >=ÖsxRegs.intCycle[PSXINT_SPUDMA].cycle) {

154 
psxRegs
.
öãºu±
 &~(1 << 
PSXINT_SPUDMA
);

155 
	`•uI¡îru±
();

158 i‡(
psxRegs
.
öãºu±
 & (1 << 
PSXINT_MDECINDMA
)) {

159 i‡((
psxRegs
.
cy˛e
 -ÖsxRegs.
ötCy˛e
[
PSXINT_MDECINDMA
].
sCy˛e
) >=ÖsxRegs.intCycle[PSXINT_MDECINDMA].cycle) {

160 
psxRegs
.
öãºu±
 &~(1 << 
PSXINT_MDECINDMA
);

161 
	`mdec0I¡îru±
();

164 i‡(
psxRegs
.
öãºu±
 & (1 << 
PSXINT_GPUOTCDMA
)) {

165 i‡((
psxRegs
.
cy˛e
 -ÖsxRegs.
ötCy˛e
[
PSXINT_GPUOTCDMA
].
sCy˛e
) >=ÖsxRegs.intCycle[PSXINT_GPUOTCDMA].cycle) {

166 
psxRegs
.
öãºu±
 &~(1 << 
PSXINT_GPUOTCDMA
);

167 
	`gpuŸcI¡îru±
();

170 i‡(
psxRegs
.
öãºu±
 & (1 << 
PSXINT_CDRDMA
)) {

171 i‡((
psxRegs
.
cy˛e
 -ÖsxRegs.
ötCy˛e
[
PSXINT_CDRDMA
].
sCy˛e
) >=ÖsxRegs.intCycle[PSXINT_CDRDMA].cycle) {

172 
psxRegs
.
öãºu±
 &~(1 << 
PSXINT_CDRDMA
);

173 
	`cdrDmaI¡îru±
();

176 i‡(
psxRegs
.
öãºu±
 & (1 << 
PSXINT_CDRPLAY
)) {

177 i‡((
psxRegs
.
cy˛e
 -ÖsxRegs.
ötCy˛e
[
PSXINT_CDRPLAY
].
sCy˛e
) >=ÖsxRegs.intCycle[PSXINT_CDRPLAY].cycle) {

178 
psxRegs
.
öãºu±
 &~(1 << 
PSXINT_CDRPLAY
);

179 
	`cdrPœyI¡îru±
();

182 i‡(
psxRegs
.
öãºu±
 & (1 << 
PSXINT_CDRLID
)) {

183 i‡((
psxRegs
.
cy˛e
 -ÖsxRegs.
ötCy˛e
[
PSXINT_CDRLID
].
sCy˛e
) >=ÖsxRegs.intCycle[PSXINT_CDRLID].cycle) {

184 
psxRegs
.
öãºu±
 &~(1 << 
PSXINT_CDRLID
);

185 
	`cdrLidSìkI¡îru±
();

188 i‡(
psxRegs
.
öãºu±
 & (1 << 
PSXINT_SPU_UPDATE
)) {

189 i‡((
psxRegs
.
cy˛e
 -ÖsxRegs.
ötCy˛e
[
PSXINT_SPU_UPDATE
].
sCy˛e
) >=ÖsxRegs.intCycle[PSXINT_SPU_UPDATE].cycle) {

190 
psxRegs
.
öãºu±
 &~(1 << 
PSXINT_SPU_UPDATE
);

191 
	`•uUpd©e
();

196 i‡(
	`psxHu32
(0x1070) &ÖsxHu32(0x1074)) {

197 i‡((
psxRegs
.
CP0
.
n
.
Sètus
 & 0x401) == 0x401) {

198 #ifde‡
PSXCPU_LOG


199 
	`PSXCPU_LOG
("I¡îru±: %x %x\n", 
	`psxHu32
(0x1070),ÖsxHu32(0x1074));

202 
	`psxEx˚±i⁄
(0x400, 0);

205 
	}
}

207 
	$psxJumpTe°
() {

208 i‡(!
C⁄fig
.
HLE
 && C⁄fig.
PsxOut
) {

209 
u32
 
ˇŒ
 = 
psxRegs
.
GPR
.
n
.
t1
 & 0xff;

210 
psxRegs
.
pc
 & 0x1fffff) {

212 #ifde‡
PSXBIOS_LOG


213 i‡(
ˇŒ
 != 0x28 && call != 0xe) {

214 
	`PSXBIOS_LOG
("Bio†ˇŒá0: %†(%xË%x,%x,%x,%x\n", 
biosA0n
[
ˇŒ
], cÆl, 
psxRegs
.
GPR
.
n
.
a0
,ÖsxRegs.GPR.n.
a1
,ÖsxRegs.GPR.n.
a2
,ÖsxRegs.GPR.n.
a3
); }

216 i‡(
biosA0
[
ˇŒ
])

217 
biosA0
[
ˇŒ
]();

220 #ifde‡
PSXBIOS_LOG


221 i‡(
ˇŒ
 != 0x17 && call != 0xb) {

222 
	`PSXBIOS_LOG
("Bio†ˇŒ b0: %†(%xË%x,%x,%x,%x\n", 
biosB0n
[
ˇŒ
], cÆl, 
psxRegs
.
GPR
.
n
.
a0
,ÖsxRegs.GPR.n.
a1
,ÖsxRegs.GPR.n.
a2
,ÖsxRegs.GPR.n.
a3
); }

224 i‡(
biosB0
[
ˇŒ
])

225 
biosB0
[
ˇŒ
]();

228 #ifde‡
PSXBIOS_LOG


229 
	`PSXBIOS_LOG
("Bio†ˇŒ c0: %†(%xË%x,%x,%x,%x\n", 
biosC0n
[
ˇŒ
], cÆl, 
psxRegs
.
GPR
.
n
.
a0
,ÖsxRegs.GPR.n.
a1
,ÖsxRegs.GPR.n.
a2
,ÖsxRegs.GPR.n.
a3
);

231 i‡(
biosC0
[
ˇŒ
])

232 
biosC0
[
ˇŒ
]();

236 
	}
}

238 
	$psxExecuãBios
() {

239 
psxRegs
.
pc
 != 0x80030000)

240 
psxCpu
->
	`ExecuãBlock
();

241 
	}
}

	@libpcsxcore/r3000a.h

20 #i‚de‡
__R3000A_H__


21 
	#__R3000A_H__


	)

23 #ifde‡
__˝lu•lus


27 
	~"psxcomm⁄.h
"

28 
	~"psxmem.h
"

29 
	~"psxcou¡îs.h
"

30 
	~"psxbios.h
"

33 (*
Inô
)();

34 (*
Re£t
)();

35 (*
Execuã
)();

36 (*
ExecuãBlock
)();

37 (*
CÀ¨
)(
u32
 
Addr
, u32 
Size
);

38 (*
Shutdown
)();

39 } 
	tR3000A˝u
;

41 
R3000A˝u
 *
psxCpu
;

42 
R3000A˝u
 
psxI¡
;

43 #i‡(
deföed
(
__x86_64__
Ë|| deföed(
__i386__
Ë|| deföed(
__sh__
Ë|| deföed(
__µc__
Ë|| deföed(
__¨m__
)Ë&& !deföed(
NOPSXREC
)

44 
R3000A˝u
 
psxRec
;

45 
	#PSXREC


	)

49 #i‡
deföed
(
__BIGENDIAN__
)

50 °ru˘ { 
u8
 
	gh3
, 
	gh2
, 
	gh
, 
	gl
; } 
	gb
;

51 °ru˘ { 
s8
 
	gh3
, 
	gh2
, 
	gh
, 
	gl
; } 
	gsb
;

52 °ru˘ { 
u16
 
	gh
, 
	gl
; } 
	gw
;

53 °ru˘ { 
s16
 
	gh
, 
	gl
; } 
	gsw
;

55 °ru˘ { 
u8
 
	gl
, 
	gh
, 
	gh2
, 
	gh3
; } 
	gb
;

56 °ru˘ { 
u16
 
	gl
, 
	gh
; } 
	gw
;

57 °ru˘ { 
s8
 
	gl
, 
	gh
, 
	gh2
, 
	gh3
; } 
	gsb
;

58 °ru˘ { 
s16
 
	gl
, 
	gh
; } 
	gsw
;

60 } 
	tPAIR
;

64 
u32
 
	gr0
, 
	g©
, 
	gv0
, 
	gv1
, 
	ga0
, 
	ga1
, 
	ga2
, 
	ga3
,

65 
	gt0
, 
	gt1
, 
	gt2
, 
	gt3
, 
	gt4
, 
	gt5
, 
	gt6
, 
	gt7
,

66 
	gs0
, 
	gs1
, 
	gs2
, 
	gs3
, 
	gs4
, 
	gs5
, 
	gs6
, 
	gs7
,

67 
	gt8
, 
	gt9
, 
	gk0
, 
	gk1
, 
	ggp
, 
	g•
, 
	gs8
, 
	gø
, 
	glo
, 
	ghi
;

68 } 
	gn
;

69 
u32
 
	gr
[34];

70 
PAIR
 
	gp
[34];

71 } 
	tpsxGPRRegs
;

75 
u32
 
	gIndex
, 
	gR™dom
, 
	gE¡ryLo0
, 
	gE¡ryLo1
,

76 
	gC⁄ãxt
, 
	gPageMask
, 
	gWúed
, 
	gRe£rved0
,

77 
	gBadVAddr
, 
	gCou¡
, 
	gE¡ryHi
, 
	gCom∑ª
,

78 
	gSètus
, 
	gCau£
, 
	gEPC
, 
	gPRid
,

79 
	gC⁄fig
, 
	gLLAddr
, 
	gW©chLO
, 
	gW©chHI
,

80 
	gXC⁄ãxt
, 
	gRe£rved1
, 
	gRe£rved2
, 
	gRe£rved3
,

81 
	gRe£rved4
, 
	gRe£rved5
, 
	gECC
, 
	gCacheEº
,

82 
	gTagLo
, 
	gTagHi
, 
	gEº‹EPC
, 
	gRe£rved6
;

83 } 
	gn
;

84 
u32
 
	gr
[32];

85 
PAIR
 
	gp
[32];

86 } 
	tpsxCP0Regs
;

89 
	gx
, 
	gy
;

90 } 
	tSVe˘‹2D
;

93 
	gz
, 
	g∑d
;

94 } 
	tSVe˘‹2Dz
;

97 
	gx
, 
	gy
, 
	gz
, 
	g∑d
;

98 } 
	tSVe˘‹3D
;

101 
	gx
, 
	gy
, 
	gz
, 
	g∑d
;

102 } 
	tLVe˘‹3D
;

105 
	gr
, 
	gg
, 
	gb
, 
	gc
;

106 } 
	tCBGR
;

109 
	gm11
, 
	gm12
, 
	gm13
, 
	gm21
, 
	gm22
, 
	gm23
, 
	gm31
, 
	gm32
, 
	gm33
, 
	g∑d
;

110 } 
	tSM©rix3D
;

114 
SVe˘‹3D
 
	gv0
, 
	gv1
, 
	gv2
;

115 
CBGR
 
	grgb
;

116 
s32
 
	gŸz
;

117 
s32
 
	gú0
, 
	gú1
, 
	gú2
, 
	gú3
;

118 
SVe˘‹2D
 
	gsxy0
, 
	gsxy1
, 
	gsxy2
, 
	gsxyp
;

119 
SVe˘‹2Dz
 
	gsz0
, 
	gsz1
, 
	gsz2
, 
	gsz3
;

120 
CBGR
 
	grgb0
, 
	grgb1
, 
	grgb2
;

121 
s32
 
	gª£rved
;

122 
s32
 
	gmac0
, 
	gmac1
, 
	gmac2
, 
	gmac3
;

123 
u32
 
	gúgb
, 
	g‹gb
;

124 
s32
 
	glzcs
, 
	glz¸
;

125 } 
	gn
;

126 
u32
 
	gr
[32];

127 
PAIR
 
	gp
[32];

128 } 
	tpsxCP2D©a
;

132 
SM©rix3D
 
	grM©rix
;

133 
s32
 
	gåX
, 
	gåY
, 
	gåZ
;

134 
SM©rix3D
 
	glM©rix
;

135 
s32
 
	grbk
, 
	ggbk
, 
	gbbk
;

136 
SM©rix3D
 
	gcM©rix
;

137 
s32
 
	grfc
, 
	ggfc
, 
	gbfc
;

138 
s32
 
	gofx
, 
	gofy
;

139 
s32
 
	gh
;

140 
s32
 
	gdqa
, 
	gdqb
;

141 
s32
 
	gzsf3
, 
	gzsf4
;

142 
s32
 
	gÊag
;

143 } 
	gn
;

144 
u32
 
	gr
[32];

145 
PAIR
 
	gp
[32];

146 } 
	tpsxCP2Cål
;

149 
	gPSXINT_SIO
 = 0,

150 
	gPSXINT_CDR
,

151 
	gPSXINT_CDREAD
,

152 
	gPSXINT_GPUDMA
,

153 
	gPSXINT_MDECOUTDMA
,

154 
	gPSXINT_SPUDMA
,

155 
	gPSXINT_GPUBUSY
,

156 
	gPSXINT_MDECINDMA
,

157 
	gPSXINT_GPUOTCDMA
,

158 
	gPSXINT_CDRDMA
,

159 
	gPSXINT_NEWDRC_CHECK
,

160 
	gPSXINT_RCNT
,

161 
	gPSXINT_CDRLID
,

162 
	gPSXINT_CDRPLAY
,

163 
	gPSXINT_SPU_UPDATE
,

164 
	gPSXINT_COUNT


167 
	spsxCP2Regs
 {

168 
psxCP2D©a
 
	gCP2D
;

169 
psxCP2Cål
 
	gCP2C
;

170 } 
	tpsxCP2Regs
;

173 
psxGPRRegs
 
	gGPR
;

174 
psxCP0Regs
 
	gCP0
;

177 
psxCP2D©a
 
	gCP2D
;

178 
psxCP2Cål
 
	gCP2C
;

180 
psxCP2Regs
 
	gCP2
;

182 
u32
 
	gpc
;

183 
u32
 
	gcode
;

184 
u32
 
	gcy˛e
;

185 
u32
 
	göãºu±
;

186 °ru˘ { 
u32
 
	gsCy˛e
, 
	gcy˛e
; } 
	götCy˛e
[32];

187 } 
	tpsxRegi°îs
;

189 
psxRegi°îs
 
psxRegs
;

192 
u32
 
evít_cy˛es
[
PSXINT_COUNT
];

193 
u32
 
√xt_öãru±
;

195 
√w_dy«_bef‹e_ßve
();

196 
√w_dy«_a·î_ßve
();

197 
√w_dy«_‰ìze
(*
f
, 
mode
);

199 
	#√w_dy«_£t_evít
(
e
, 
c
) { \

200 
s32
 
c_
 = 
c
; \

201 
u32
 
abs_
 = 
psxRegs
.
cy˛e
 + 
c_
; \

202 
s32
 
odi_
 = 
√xt_öãru±
 - 
psxRegs
.
cy˛e
; \

203 
evít_cy˛es
[
e
] = 
abs_
; \

204 i‡(
c_
 < 
odi_
) { \

206 
√xt_öãru±
 = 
abs_
; \

208 }

	)

210 #i‡
deföed
(
__BIGENDIAN__
)

212 
	#_i32
(
x
Ë*(
s32
 *)&
	)
x

213 
	#_u32
(
x
Ë
	)
x

215 
	#_i16
(
x
Ë(((*)&x)[1])

	)

216 
	#_u16
(
x
Ë(((*)&x)[1])

	)

218 
	#_i8
(
x
Ë(((*)&x)[3])

	)

219 
	#_u8
(
x
Ë(((*)&x)[3])

	)

223 
	#_i32
(
x
Ë*(
s32
 *)&
	)
x

224 
	#_u32
(
x
Ë
	)
x

226 
	#_i16
(
x
Ë*(*)&
	)
x

227 
	#_u16
(
x
Ë*(*)&
	)
x

229 
	#_i8
(
x
Ë*(*)&
	)
x

230 
	#_u8
(
x
Ë*(*)&
	)
x

235 
	#_PC_
 
psxRegs
.
pc


236 

	)

237 
	#_fOp_
(
code
) ((code >> 26) )

238 
	#_fFun˘_
(
code
) ((code ) & 0x3F)

239 
	#_fRd_
(
code
) ((code >> 11) & 0x1F)

240 
	#_fRt_
(
code
) ((code >> 16) & 0x1F)

241 
	#_fRs_
(
code
) ((code >> 21) & 0x1F)

242 
	#_fSa_
(
code
) ((code >> 6) & 0x1F)

243 
	#_fIm_
(
code
Ë((
u16
)code)

244 
	#_fT¨gë_
(
code
) (code & 0x03ffffff)

245 

	)

246 
	#_fImm_
(
code
Ë((
s16
)code)

247 
	#_fImmU_
(
code
) (code&0xffff)

248 

	)

249 
	#_Op_
 
	`_fOp_
(
psxRegs
.
code
)

	)

250 
	#_Fun˘_
 
	`_fFun˘_
(
psxRegs
.
code
)

	)

251 
	#_Rd_
 
	`_fRd_
(
psxRegs
.
code
)

	)

252 
	#_Rt_
 
	`_fRt_
(
psxRegs
.
code
)

	)

253 
	#_Rs_
 
	`_fRs_
(
psxRegs
.
code
)

	)

254 
	#_Sa_
 
	`_fSa_
(
psxRegs
.
code
)

	)

255 
	#_Im_
 
	`_fIm_
(
psxRegs
.
code
)

	)

256 
	#_T¨gë_
 
	`_fT¨gë_
(
psxRegs
.
code
)

	)

258 
	#_Imm_
 
	`_fImm_
(
psxRegs
.
code
)

	)

259 
	#_ImmU_
 
	`_fImmU_
(
psxRegs
.
code
)

	)

261 
	#_rRs_
 
psxRegs
.
GPR
.
r
[
_Rs_
]

262 
	#_rRt_
 
psxRegs
.
GPR
.
r
[
_Rt_
]

263 
	#_rRd_
 
psxRegs
.
GPR
.
r
[
_Rd_
]

264 
	#_rSa_
 
psxRegs
.
GPR
.
r
[
_Sa_
]

265 
	#_rFs_
 
psxRegs
.
CP0
.
r
[
_Rd_
]

266 

	)

267 
	#_c2dRs_
 
psxRegs
.
CP2D
.
r
[
_Rs_
]

268 
	#_c2dRt_
 
psxRegs
.
CP2D
.
r
[
_Rt_
]

269 
	#_c2dRd_
 
psxRegs
.
CP2D
.
r
[
_Rd_
]

270 
	#_c2dSa_
 
psxRegs
.
CP2D
.
r
[
_Sa_
]

271 

	)

272 
	#_rHi_
 
psxRegs
.
GPR
.
n
.
hi


273 
	#_rLo_
 
psxRegs
.
GPR
.
n
.
lo


274 

	)

275 
	#_JumpT¨gë_
 ((
_T¨gë_
 * 4Ë+ (
_PC_
 & 0xf0000000))

276 
	#_BønchT¨gë_
 ((
s16
)
_Im_
 * 4 + 
_PC_
)

277 

	)

278 
	#_SëLök
(
x
Ë
psxRegs
.
GPR
.
r
[x] = 
_PC_
 + 4;

279 

	)

280 
psxInô
();

281 
psxRe£t
();

282 
psxShutdown
();

283 
psxEx˚±i⁄
(
u32
 
code
, u32 
bd
);

284 
psxBønchTe°
();

285 
psxExecuãBios
();

286 
psxTe°LﬂdDñay
(
ªg
, 
u32
 
tmp
);

287 
psxDñayTe°
(
ªg
, 
u32
 
bpc
);

288 
psxTe°SWI¡s
();

289 
psxJumpTe°
();

291 #ifde‡
__˝lu•lus


	@libpcsxcore/sio.c

24 
	~"sio.h
"

25 
	~<sys/°©.h
>

28 
	#TX_RDY
 0x0001

	)

29 
	#RX_RDY
 0x0002

	)

30 
	#TX_EMPTY
 0x0004

	)

31 
	#PARITY_ERR
 0x0008

	)

32 
	#RX_OVERRUN
 0x0010

	)

33 
	#FRAMING_ERR
 0x0020

	)

34 
	#SYNC_DETECT
 0x0040

	)

35 
	#DSR
 0x0080

	)

36 
	#CTS
 0x0100

	)

37 
	#IRQ
 0x0200

	)

40 
	#TX_PERM
 0x0001

	)

41 
	#DTR
 0x0002

	)

42 
	#RX_PERM
 0x0004

	)

43 
	#BREAK
 0x0008

	)

44 
	#RESET_ERR
 0x0010

	)

45 
	#RTS
 0x0020

	)

46 
	#SIO_RESET
 0x0040

	)

50 
	gbuf
[256];

51 
	gˇrdh1
[4] = { 0xff, 0x08, 0x5a, 0x5d };

52 
	gˇrdh2
[4] = { 0xff, 0x08, 0x5a, 0x5d };

56 
	gSètReg
 = 
TX_RDY
 | 
TX_EMPTY
;

57 
	gModeReg
;

58 
	gCålReg
;

59 
	gBaudReg
;

61 
	gbufcou¡
;

62 
	g∑Ω
;

63 
	gmcd°
, 
	grdwr
;

64 
	gadrH
, 
	gadrL
;

65 
	g∑d°
;

67 
	gMcd1D©a
[
MCD_SIZE
], 
	gMcd2D©a
[MCD_SIZE];

68 
	gMcdDißbÀ
[2];

70 
	#SIO_INT
(
eCy˛e
) { \

71 i‡(!
C⁄fig
.
Sio
) { \

72 
psxRegs
.
öãºu±
 |(1 << 
PSXINT_SIO
); \

73 
psxRegs
.
ötCy˛e
[
PSXINT_SIO
].
cy˛e
 = 
eCy˛e
; \

74 
psxRegs
.
ötCy˛e
[
PSXINT_SIO
].
sCy˛e
 =ÖsxRegs.
cy˛e
; \

75 
	`√w_dy«_£t_evít
(
PSXINT_SIO
, 
eCy˛e
); \

77 }

	)

82 
	#SIO_CYCLES
 535

	)

84 
	$sioWrôe8
(
vÆue
) {

85 #ifde‡
PAD_LOG


86 
	`PAD_LOG
("siÿwrôe8 %x\n", 
vÆue
);

88 
∑d°
) {

89 1: 
	`SIO_INT
(
SIO_CYCLES
);

90 i‡((
vÆue
 & 0x40) == 0x40) {

91 
∑d°
 = 2; 
∑Ω
 = 1;

92 i‡(!
C⁄fig
.
U£Në
) {

93 
CålReg
 & 0x2002) {

95 
buf
[
∑Ω
] = 
	`PAD1_pﬁl
(
vÆue
);

98 
buf
[
∑Ω
] = 
	`PAD2_pﬁl
(
vÆue
);

105 i‡(!(
buf
[
∑Ω
] & 0x0f)) {

106 
bufcou¡
 = 2 + 32;

108 
bufcou¡
 = 2 + (
buf
[
∑Ω
] & 0x0f) * 2;

110 i‡(
buf
[
∑Ω
] == 0x41) {

111 
vÆue
) {

113 
buf
[1] = 0x43;

116 
buf
[1] = 0xf3;

121 
∑d°
 = 0;

124 
∑Ω
++;

130 i‡(!
C⁄fig
.
U£Në
) {

131 
CålReg
 & 0x2002) {

132 0x0002: 
buf
[
∑Ω
] = 
	`PAD1_pﬁl
(
vÆue
); ;

133 0x2002: 
buf
[
∑Ω
] = 
	`PAD2_pﬁl
(
vÆue
); ;

137 i‡(
∑Ω
 =
bufcou¡
Ë{ 
∑d°
 = 0; ; }

138 
	`SIO_INT
(
SIO_CYCLES
);

142 
mcd°
) {

144 
	`SIO_INT
(
SIO_CYCLES
);

145 i‡(
rdwr
Ë{ 
∑Ω
++; ; }

146 
∑Ω
 = 1;

147 
vÆue
) {

148 0x52: 
rdwr
 = 1; ;

149 0x57: 
rdwr
 = 2; ;

150 : 
mcd°
 = 0;

154 
	`SIO_INT
(
SIO_CYCLES
);

155 
adrH
 = 
vÆue
;

156 *
buf
 = 0;

157 
∑Ω
 = 0;

158 
bufcou¡
 = 1;

159 
mcd°
 = 3;

162 
	`SIO_INT
(
SIO_CYCLES
);

163 
adrL
 = 
vÆue
;

164 *
buf
 = 
adrH
;

165 
∑Ω
 = 0;

166 
bufcou¡
 = 1;

167 
mcd°
 = 4;

170 
	`SIO_INT
(
SIO_CYCLES
);

171 
∑Ω
 = 0;

172 
rdwr
) {

174 
buf
[0] = 0x5c;

175 
buf
[1] = 0x5d;

176 
buf
[2] = 
adrH
;

177 
buf
[3] = 
adrL
;

178 
CålReg
 & 0x2002) {

180 
	`mem˝y
(&
buf
[4], 
Mcd1D©a
 + (
adrL
 | (
adrH
 << 8)) * 128, 128);

183 
	`mem˝y
(&
buf
[4], 
Mcd2D©a
 + (
adrL
 | (
adrH
 << 8)) * 128, 128);

187 
x‹
 = 0;

188 
i
;

189 
i
 = 2; i < 128 + 4; i++)

190 
x‹
 ^
buf
[
i
];

191 
buf
[132] = 
x‹
;

193 
buf
[133] = 0x47;

194 
bufcou¡
 = 133;

197 
buf
[0] = 
adrL
;

198 
buf
[1] = 
vÆue
;

199 
buf
[129] = 0x5c;

200 
buf
[130] = 0x5d;

201 
buf
[131] = 0x47;

202 
bufcou¡
 = 131;

205 
mcd°
 = 5;

208 
∑Ω
++;

209 i‡((
rdwr
 =1 && 
∑Ω
 == 132) ||

210 (
rdwr
 =2 && 
∑Ω
 == 129)) {

212 i‡(
CålReg
 & 0x2000)

213 
ˇrdh2
[1] &= ~8;

215 
ˇrdh1
[1] &= ~8;

217 i‡(
rdwr
 == 2) {

218 i‡(
∑Ω
 < 128Ë
buf
[∑Ω + 1] = 
vÆue
;

220 
	`SIO_INT
(
SIO_CYCLES
);

224 
vÆue
) {

226 
SètReg
 |
RX_RDY
;

228 i‡(!
C⁄fig
.
U£Në
) {

229 
CålReg
 & 0x2002) {

230 0x0002: 
buf
[0] = 
	`PAD1_°¨tPﬁl
(1); ;

231 0x2002: 
buf
[0] = 
	`PAD2_°¨tPﬁl
(2); ;

234 i‡((
CålReg
 & 0x2002) == 0x0002) {

235 
i
, 
j
;

237 
	`PAD1_°¨tPﬁl
(1);

238 
buf
[0] = 0;

239 
buf
[1] = 
	`PAD1_pﬁl
(0x42);

240 i‡(!(
buf
[1] & 0x0f)) {

241 
bufcou¡
 = 32;

243 
bufcou¡
 = (
buf
[1] & 0x0f) * 2;

245 
buf
[2] = 
	`PAD1_pﬁl
(0);

246 
i
 = 3;

247 
j
 = 
bufcou¡
;

248 
j
--) {

249 
buf
[
i
++] = 
	`PAD1_pﬁl
(0);

251 
bufcou¡
+= 3;

253 i‡(
	`NET_£ndPadD©a
(
buf
, 
bufcou¡
) == -1)

254 
	`√tEº‹
();

256 i‡(
	`NET_ªcvPadD©a
(
buf
, 1) == -1)

257 
	`√tEº‹
();

258 i‡(
	`NET_ªcvPadD©a
(
buf
 + 128, 2) == -1)

259 
	`√tEº‹
();

261 
	`mem˝y
(
buf
, buf + 128, 32);

265 
bufcou¡
 = 2;

266 
∑Ω
 = 0;

267 
∑d°
 = 1;

268 
	`SIO_INT
(
SIO_CYCLES
);

271 i‡(
CålReg
 & 0x2000)

273 i‡(
McdDißbÀ
[1])

274 
no_devi˚
;

275 
	`mem˝y
(
buf
, 
ˇrdh2
, 4);

279 i‡(
McdDißbÀ
[0])

280 
no_devi˚
;

281 
	`mem˝y
(
buf
, 
ˇrdh1
, 4);

283 
SètReg
 |
RX_RDY
;

284 
∑Ω
 = 0;

285 
bufcou¡
 = 3;

286 
mcd°
 = 1;

287 
rdwr
 = 0;

288 
	`SIO_INT
(
SIO_CYCLES
);

291 
no_devi˚
:

292 
SètReg
 |
RX_RDY
;

293 
buf
[0] = 0xff;

294 
∑Ω
 = 0;

295 
bufcou¡
 = 0;

298 
	}
}

300 
	$sioWrôeSèt16
(
vÆue
) {

301 
	}
}

303 
	$sioWrôeMode16
(
vÆue
) {

304 
ModeReg
 = 
vÆue
;

305 
	}
}

307 
	$sioWrôeCål16
(
vÆue
) {

308 
CålReg
 = 
vÆue
 & ~
RESET_ERR
;

309 i‡(
vÆue
 & 
RESET_ERR
Ë
SètReg
 &~
IRQ
;

310 i‡((
CålReg
 & 
SIO_RESET
Ë|| !(CålReg & 
DTR
)) {

311 
∑d°
 = 0; 
mcd°
 = 0; 
∑Ω
 = 0;

312 
SètReg
 = 
TX_RDY
 | 
TX_EMPTY
;

313 
psxRegs
.
öãºu±
 &~(1 << 
PSXINT_SIO
);

315 
	}
}

317 
	$sioWrôeBaud16
(
vÆue
) {

318 
BaudReg
 = 
vÆue
;

319 
	}
}

321 
	$sioRód8
() {

322 
ªt
 = 0;

324 i‡((
SètReg
 & 
RX_RDY
) ) {

326 
ªt
 = 
buf
[
∑Ω
];

327 i‡(
∑Ω
 =
bufcou¡
) {

328 
SètReg
 &~
RX_RDY
;

329 i‡(
mcd°
 == 5) {

330 
mcd°
 = 0;

331 i‡(
rdwr
 == 2) {

332 
CålReg
 & 0x2002) {

334 
	`mem˝y
(
Mcd1D©a
 + (
adrL
 | (
adrH
 << 8)Ë* 128, &
buf
[1], 128);

335 
	`SaveMcd
(
C⁄fig
.
Mcd1
, 
Mcd1D©a
, (
adrL
 | (
adrH
 << 8)) * 128, 128);

338 
	`mem˝y
(
Mcd2D©a
 + (
adrL
 | (
adrH
 << 8)Ë* 128, &
buf
[1], 128);

339 
	`SaveMcd
(
C⁄fig
.
Mcd2
, 
Mcd2D©a
, (
adrL
 | (
adrH
 << 8)) * 128, 128);

344 i‡(
∑d°
 == 2)Öadst = 0;

345 i‡(
mcd°
 == 1) {

346 
mcd°
 = 2;

347 
SètReg
|
RX_RDY
;

352 #ifde‡
PAD_LOG


353 
	`PAD_LOG
("siÿªad8 ;ªà%x\n", 
ªt
);

355  
ªt
;

356 
	}
}

358 
	$sioRódSèt16
() {

359  
SètReg
;

360 
	}
}

362 
	$sioRódMode16
() {

363  
ModeReg
;

364 
	}
}

366 
	$sioRódCål16
() {

367  
CålReg
;

368 
	}
}

370 
	$sioRódBaud16
() {

371  
BaudReg
;

372 
	}
}

374 
	$√tEº‹
() {

375 
	`Clo£Plugös
();

376 
	`SysMesßge
(
	`_
("Connection closed!\n"));

378 
CdromId
[0] = '\0';

379 
CdromLabñ
[0] = '\0';

381 
	`SysRunGui
();

382 
	}
}

384 
	$sioI¡îru±
() {

385 #ifde‡
PAD_LOG


386 
	`PAD_LOG
("SiÿI¡îru± (CP0.Sètu†%x)\n", 
psxRegs
.
CP0
.
n
.
Sètus
);

389 i‡(!(
SètReg
 & 
IRQ
)) {

390 
SètReg
 |
IRQ
;

391 
	`psxHu32ªf
(0x1070Ë|
	`SWAPu32
(0x80);

393 
	}
}

395 
	$LﬂdMcd
(
mcd
, *
°r
) {

396 
FILE
 *
f
;

397 *
d©a
 = 
NULL
;

399 i‡(
mcd
 != 1 && mcd != 2)

402 i‡(
mcd
 == 1) {

403 
d©a
 = 
Mcd1D©a
;

404 
ˇrdh1
[1] |= 8;

406 i‡(
mcd
 == 2) {

407 
d©a
 = 
Mcd2D©a
;

408 
ˇrdh2
[1] |= 8;

411 
McdDißbÀ
[
mcd
 - 1] = 0;

412 i‡(
°r
 =
NULL
 || 
	`°rcmp
(str, "none") == 0) {

413 
McdDißbÀ
[
mcd
 - 1] = 1;

416 i‡(*
°r
 == 0)

419 
f
 = 
	`f›í
(
°r
, "rb");

420 i‡(
f
 =
NULL
) {

421 
	`SysPrötf
(
	`_
("Thêmem‹y c¨d %†d€¢'àexi° - cª©ög it\n"), 
°r
);

422 
	`Cª©eMcd
(
°r
);

423 
f
 = 
	`f›í
(
°r
, "rb");

424 i‡(
f
 !
NULL
) {

425 
°©
 
buf
;

427 i‡(
	`°©
(
°r
, &
buf
) != -1) {

428 i‡(
buf
.
°_size
 =
MCD_SIZE
 + 64)

429 
	`f£ek
(
f
, 64, 
SEEK_SET
);

430 if(
buf
.
°_size
 =
MCD_SIZE
 + 3904)

431 
	`f£ek
(
f
, 3904, 
SEEK_SET
);

433 
	`‰ód
(
d©a
, 1, 
MCD_SIZE
, 
f
);

434 
	`f˛o£
(
f
);

437 
	`SysMesßge
(
	`_
("Mem‹y c¨d %†ÁûedÅÿlﬂd!\n"), 
°r
);

440 
°©
 
buf
;

441 
	`SysPrötf
(
	`_
("Lﬂdög mem‹y c¨d %s\n"), 
°r
);

442 i‡(
	`°©
(
°r
, &
buf
) != -1) {

443 i‡(
buf
.
°_size
 =
MCD_SIZE
 + 64)

444 
	`f£ek
(
f
, 64, 
SEEK_SET
);

445 if(
buf
.
°_size
 =
MCD_SIZE
 + 3904)

446 
	`f£ek
(
f
, 3904, 
SEEK_SET
);

448 
	`‰ód
(
d©a
, 1, 
MCD_SIZE
, 
f
);

449 
	`f˛o£
(
f
);

451 
	}
}

453 
	$LﬂdMcds
(*
mcd1
, *
mcd2
) {

454 
	`LﬂdMcd
(1, 
mcd1
);

455 
	`LﬂdMcd
(2, 
mcd2
);

456 
	}
}

458 
	$SaveMcd
(*
mcd
, *
d©a
, 
uöt32_t
 
adr
, 
size
) {

459 
FILE
 *
f
;

461 i‡(
mcd
 =
NULL
 || *mcd =0 || 
	`°rcmp
(mcd, "none") == 0)

464 
f
 = 
	`f›í
(
mcd
, "r+b");

465 i‡(
f
 !
NULL
) {

466 
°©
 
buf
;

468 i‡(
	`°©
(
mcd
, &
buf
) != -1) {

469 i‡(
buf
.
°_size
 =
MCD_SIZE
 + 64)

470 
	`f£ek
(
f
, 
adr
 + 64, 
SEEK_SET
);

471 i‡(
buf
.
°_size
 =
MCD_SIZE
 + 3904)

472 
	`f£ek
(
f
, 
adr
 + 3904, 
SEEK_SET
);

474 
	`f£ek
(
f
, 
adr
, 
SEEK_SET
);

476 
	`f£ek
(
f
, 
adr
, 
SEEK_SET
);

478 
	`fwrôe
(
d©a
 + 
adr
, 1, 
size
, 
f
);

479 
	`f˛o£
(
f
);

485 
f
 = 
	`f›í
(
mcd
, "wb");

486 i‡(
f
 !
NULL
) {

487 
	`fwrôe
(
d©a
, 1, 
MCD_SIZE
, 
f
);

488 
	`f˛o£
(
f
);

492 
	`C⁄vîtMcd
(
mcd
, 
d©a
);

493 
	}
}

495 
	$Cª©eMcd
(*
mcd
) {

496 
FILE
 *
f
;

497 
°©
 
buf
;

498 
s
 = 
MCD_SIZE
;

499 
i
 = 0, 
j
;

501 
f
 = 
	`f›í
(
mcd
, "wb");

502 i‡(
f
 =
NULL
)

505 i‡(
	`°©
(
mcd
, &
buf
) != -1) {

506 i‡((
buf
.
°_size
 =
MCD_SIZE
 + 3904Ë|| 
	`°r°r
(
mcd
, ".gme")) {

507 
s
 = s + 3904;

508 
	`Âutc
('1', 
f
);

509 
s
--;

510 
	`Âutc
('2', 
f
);

511 
s
--;

512 
	`Âutc
('3', 
f
);

513 
s
--;

514 
	`Âutc
('-', 
f
);

515 
s
--;

516 
	`Âutc
('4', 
f
);

517 
s
--;

518 
	`Âutc
('5', 
f
);

519 
s
--;

520 
	`Âutc
('6', 
f
);

521 
s
--;

522 
	`Âutc
('-', 
f
);

523 
s
--;

524 
	`Âutc
('S', 
f
);

525 
s
--;

526 
	`Âutc
('T', 
f
);

527 
s
--;

528 
	`Âutc
('D', 
f
);

529 
s
--;

530 
i
 = 0; i < 7; i++) {

531 
	`Âutc
(0, 
f
);

532 
s
--;

534 
	`Âutc
(1, 
f
);

535 
s
--;

536 
	`Âutc
(0, 
f
);

537 
s
--;

538 
	`Âutc
(1, 
f
);

539 
s
--;

540 
	`Âutc
('M', 
f
);

541 
s
--;

542 
	`Âutc
('Q', 
f
);

543 
s
--;

544 
i
 = 0; i < 14; i++) {

545 
	`Âutc
(0xa0, 
f
);

546 
s
--;

548 
	`Âutc
(0, 
f
);

549 
s
--;

550 
	`Âutc
(0xff, 
f
);

551 
s
-- > (
MCD_SIZE
 + 1))

552 
	`Âutc
(0, 
f
);

553 } i‡((
buf
.
°_size
 =
MCD_SIZE
 + 64Ë|| 
	`°r°r
(
mcd
, ".mem") || strstr(mcd, ".vgs")) {

554 
s
 = s + 64;

555 
	`Âutc
('V', 
f
);

556 
s
--;

557 
	`Âutc
('g', 
f
);

558 
s
--;

559 
	`Âutc
('s', 
f
);

560 
s
--;

561 
	`Âutc
('M', 
f
);

562 
s
--;

563 
i
 = 0; i < 3; i++) {

564 
	`Âutc
(1, 
f
);

565 
s
--;

566 
	`Âutc
(0, 
f
);

567 
s
--;

568 
	`Âutc
(0, 
f
);

569 
s
--;

570 
	`Âutc
(0, 
f
);

571 
s
--;

573 
	`Âutc
(0, 
f
);

574 
s
--;

575 
	`Âutc
(2, 
f
);

576 
s
-- > (
MCD_SIZE
 + 1))

577 
	`Âutc
(0, 
f
);

580 
	`Âutc
('M', 
f
);

581 
s
--;

582 
	`Âutc
('C', 
f
);

583 
s
--;

584 
s
-- > (
MCD_SIZE
 - 127))

585 
	`Âutc
(0, 
f
);

586 
	`Âutc
(0xe, 
f
);

587 
s
--;

589 
i
 = 0; i < 15; i++) {

590 
	`Âutc
(0xa0, 
f
);

591 
s
--;

592 
	`Âutc
(0x00, 
f
);

593 
s
--;

594 
	`Âutc
(0x00, 
f
);

595 
s
--;

596 
	`Âutc
(0x00, 
f
);

597 
s
--;

598 
	`Âutc
(0x00, 
f
);

599 
s
--;

600 
	`Âutc
(0x00, 
f
);

601 
s
--;

602 
	`Âutc
(0x00, 
f
);

603 
s
--;

604 
	`Âutc
(0x00, 
f
);

605 
s
--;

606 
	`Âutc
(0xff, 
f
);

607 
s
--;

608 
	`Âutc
(0xff, 
f
);

609 
s
--;

610 
j
 = 0; j < 117; j++) {

611 
	`Âutc
(0x00, 
f
);

612 
s
--;

614 
	`Âutc
(0xa0, 
f
);

615 
s
--;

618 
i
 = 0; i < 20; i++) {

619 
	`Âutc
(0xff, 
f
);

620 
s
--;

621 
	`Âutc
(0xff, 
f
);

622 
s
--;

623 
	`Âutc
(0xff, 
f
);

624 
s
--;

625 
	`Âutc
(0xff, 
f
);

626 
s
--;

627 
	`Âutc
(0x00, 
f
);

628 
s
--;

629 
	`Âutc
(0x00, 
f
);

630 
s
--;

631 
	`Âutc
(0x00, 
f
);

632 
s
--;

633 
	`Âutc
(0x00, 
f
);

634 
s
--;

635 
	`Âutc
(0xff, 
f
);

636 
s
--;

637 
	`Âutc
(0xff, 
f
);

638 
s
--;

639 
j
 = 0; j < 118; j++) {

640 
	`Âutc
(0x00, 
f
);

641 
s
--;

645 (
s
--) >= 0)

646 
	`Âutc
(0, 
f
);

648 
	`f˛o£
(
f
);

649 
	}
}

651 
	$C⁄vîtMcd
(*
mcd
, *
d©a
) {

652 
FILE
 *
f
;

653 
i
 = 0;

654 
s
 = 
MCD_SIZE
;

656 i‡(
	`°r°r
(
mcd
, ".gme")) {

657 
f
 = 
	`f›í
(
mcd
, "wb");

658 i‡(
f
 !
NULL
) {

659 
	`fwrôe
(
d©a
 - 3904, 1, 
MCD_SIZE
 + 3904, 
f
);

660 
	`f˛o£
(
f
);

662 
f
 = 
	`f›í
(
mcd
, "r+");

663 
s
 = s + 3904;

664 
	`Âutc
('1', 
f
); 
s
--;

665 
	`Âutc
('2', 
f
); 
s
--;

666 
	`Âutc
('3', 
f
); 
s
--;

667 
	`Âutc
('-', 
f
); 
s
--;

668 
	`Âutc
('4', 
f
); 
s
--;

669 
	`Âutc
('5', 
f
); 
s
--;

670 
	`Âutc
('6', 
f
); 
s
--;

671 
	`Âutc
('-', 
f
); 
s
--;

672 
	`Âutc
('S', 
f
); 
s
--;

673 
	`Âutc
('T', 
f
); 
s
--;

674 
	`Âutc
('D', 
f
); 
s
--;

675 
i
 = 0; i < 7; i++) {

676 
	`Âutc
(0, 
f
); 
s
--;

678 
	`Âutc
(1, 
f
); 
s
--;

679 
	`Âutc
(0, 
f
); 
s
--;

680 
	`Âutc
(1, 
f
); 
s
--;

681 
	`Âutc
('M', 
f
); 
s
--;

682 
	`Âutc
('Q', 
f
); 
s
--;

683 
i
=0;i<14;i++) {

684 
	`Âutc
(0xa0, 
f
); 
s
--;

686 
	`Âutc
(0, 
f
); 
s
--;

687 
	`Âutc
(0xff, 
f
);

688 
s
-- > (
MCD_SIZE
+1)Ë
	`Âutc
(0, 
f
);

689 
	`f˛o£
(
f
);

690 } if(
	`°r°r
(
mcd
, ".mem") || strstr(mcd,".vgs")) {

691 
f
 = 
	`f›í
(
mcd
, "wb");

692 i‡(
f
 !
NULL
) {

693 
	`fwrôe
(
d©a
-64, 1, 
MCD_SIZE
+64, 
f
);

694 
	`f˛o£
(
f
);

696 
f
 = 
	`f›í
(
mcd
, "r+");

697 
s
 = s + 64;

698 
	`Âutc
('V', 
f
); 
s
--;

699 
	`Âutc
('g', 
f
); 
s
--;

700 
	`Âutc
('s', 
f
); 
s
--;

701 
	`Âutc
('M', 
f
); 
s
--;

702 
i
=0;i<3;i++) {

703 
	`Âutc
(1, 
f
); 
s
--;

704 
	`Âutc
(0, 
f
); 
s
--;

705 
	`Âutc
(0, 
f
); 
s
--;

706 
	`Âutc
(0, 
f
); 
s
--;

708 
	`Âutc
(0, 
f
); 
s
--;

709 
	`Âutc
(2, 
f
);

710 
s
-- > (
MCD_SIZE
+1)Ë
	`Âutc
(0, 
f
);

711 
	`f˛o£
(
f
);

713 
f
 = 
	`f›í
(
mcd
, "wb");

714 i‡(
f
 !
NULL
) {

715 
	`fwrôe
(
d©a
, 1, 
MCD_SIZE
, 
f
);

716 
	`f˛o£
(
f
);

719 
	}
}

721 
	$GëMcdBlockInfo
(
mcd
, 
block
, 
McdBlock
 *
Info
) {

722 *
d©a
 = 
NULL
, *
±r
, *
°r
, *
s°r
;

723 
˛ut
[16];

724 
c
;

725 
i
, 
x
;

727 
	`mem£t
(
Info
, 0, (
McdBlock
));

729 i‡(
mcd
 != 1 && mcd != 2)

732 i‡(
McdDißbÀ
[
mcd
 - 1])

735 i‡(
mcd
 =1Ë
d©a
 = 
Mcd1D©a
;

736 i‡(
mcd
 =2Ë
d©a
 = 
Mcd2D©a
;

738 
±r
 = 
d©a
 + 
block
 * 8192 + 2;

740 
Info
->
Ic⁄Cou¡
 = *
±r
 & 0x3;

742 
±r
 += 2;

744 
x
 = 0;

746 
°r
 = 
Info
->
TôÀ
;

747 
s°r
 = 
Info
->
sTôÀ
;

749 
i
 = 0; i < 48; i++) {

750 
c
 = *(
±r
) << 8;

751 
c
 |*(
±r
 + 1);

752 i‡(!
c
) ;

755 i‡(
c
 >= 0x8281 && c <= 0x829A)

756 
c
 = (c - 0x8281) + 'a';

757 i‡(
c
 >= 0x824F && c <= 0x827A)

758 
c
 = (c - 0x824F) + '0';

759 i‡(
c
 == 0x8140) c = ' ';

760 i‡(
c
 == 0x8143) c = ',';

761 i‡(
c
 == 0x8144) c = '.';

762 i‡(
c
 == 0x8146) c = ':';

763 i‡(
c
 == 0x8147) c = ';';

764 i‡(
c
 == 0x8148) c = '?';

765 i‡(
c
 == 0x8149) c = '!';

766 i‡(
c
 == 0x815E) c = '/';

767 i‡(
c
 == 0x8168) c = '"';

768 i‡(
c
 == 0x8169) c = '(';

769 i‡(
c
 == 0x816A) c = ')';

770 i‡(
c
 == 0x816D) c = '[';

771 i‡(
c
 == 0x816E) c = ']';

772 i‡(
c
 == 0x817C) c = '-';

774 
°r
[
i
] = ' ';

775 
s°r
[
x
++] = *
±r
++; sstr[x++] = *ptr++;

779 
°r
[
i
] = 
s°r
[
x
++] = 
c
;

780 
±r
 += 2;

783 
	`åim
(
°r
);

784 
	`åim
(
s°r
);

786 
±r
 = 
d©a
 + 
block
 * 8192 + 0x60;

788 
i
 = 0; i < 16; i++) {

789 
˛ut
[
i
] = *((*)
±r
);

790 
±r
 += 2;

793 
i
 = 0; i < 
Info
->
Ic⁄Cou¡
; i++) {

794 *
ic⁄
 = &
Info
->
Ic⁄
[
i
 * 16 * 16];

796 
±r
 = 
d©a
 + 
block
 * 8192 + 128 + 128 * 
i
;

798 
x
 = 0; x < 16 * 16; x++) {

799 
ic⁄
[
x
++] = 
˛ut
[*
±r
 & 0xf];

800 
ic⁄
[
x
] = 
˛ut
[*
±r
 >> 4];

801 
±r
++;

805 
±r
 = 
d©a
 + 
block
 * 128;

807 
Info
->
Fœgs
 = *
±r
;

809 
±r
 += 0xa;

810 
	`°∫˝y
(
Info
->
ID
, 
±r
, 12);

811 
±r
 += 12;

812 
	`°∫˝y
(
Info
->
Name
, 
±r
, 16);

813 
	}
}

815 
	$sioFªeze
(*
f
, 
Mode
) {

816 
	`gz‰ìze
(
buf
, (buf));

817 
	`gz‰ìze
(&
SètReg
, (StatReg));

818 
	`gz‰ìze
(&
ModeReg
, (ModeReg));

819 
	`gz‰ìze
(&
CålReg
, (CtrlReg));

820 
	`gz‰ìze
(&
BaudReg
, (BaudReg));

821 
	`gz‰ìze
(&
bufcou¡
, (bufcount));

822 
	`gz‰ìze
(&
∑Ω
, (parp));

823 
	`gz‰ìze
(&
mcd°
, (mcdst));

824 
	`gz‰ìze
(&
rdwr
, (rdwr));

825 
	`gz‰ìze
(&
adrH
, (adrH));

826 
	`gz‰ìze
(&
adrL
, (adrL));

827 
	`gz‰ìze
(&
∑d°
, (padst));

830 
	}
}

	@libpcsxcore/sio.h

21 #i‚de‡
_SIO_H_


22 
	#_SIO_H_


	)

24 #ifde‡
__˝lu•lus


28 
	~"psxcomm⁄.h
"

29 
	~"r3000a.h
"

30 
	~"psxmem.h
"

31 
	~"∂ugös.h
"

32 
	~"p£mu_∂ugö_defs.h
"

34 
	#MCD_SIZE
 (1024 * 8 * 16)

	)

36 
Mcd1D©a
[
MCD_SIZE
], 
Mcd2D©a
[MCD_SIZE];

38 
sioWrôe8
(
vÆue
);

39 
sioWrôeSèt16
(
vÆue
);

40 
sioWrôeMode16
(
vÆue
);

41 
sioWrôeCål16
(
vÆue
);

42 
sioWrôeBaud16
(
vÆue
);

44 
sioRód8
();

45 
sioRódSèt16
();

46 
sioRódMode16
();

47 
sioRódCål16
();

48 
sioRódBaud16
();

50 
√tEº‹
();

52 
sioI¡îru±
();

53 
sioFªeze
(*
f
, 
Mode
);

55 
LﬂdMcd
(
mcd
, *
°r
);

56 
LﬂdMcds
(*
mcd1
, *
mcd2
);

57 
SaveMcd
(*
mcd
, *
d©a
, 
uöt32_t
 
adr
, 
size
);

58 
Cª©eMcd
(*
mcd
);

59 
C⁄vîtMcd
(*
mcd
, *
d©a
);

62 
	gTôÀ
[48 + 1];

63 
	gsTôÀ
[48 * 2 + 1];

64 
	gID
[12 + 1];

65 
	gName
[16 + 1];

66 
	gIc⁄Cou¡
;

67 
	gIc⁄
[16 * 16 * 3];

68 
	gFœgs
;

69 } 
	tMcdBlock
;

71 
GëMcdBlockInfo
(
mcd
, 
block
, 
McdBlock
 *
öfo
);

73 #ifde‡
__˝lu•lus


	@libpcsxcore/sjisfont.h

24 c⁄° 
	gf⁄t_8140
[] = {

621 c⁄° 
	gf⁄t_889f
[] = {

	@libpcsxcore/socket.c

18 #ifde‡
_WIN32


19 
	~<wösock2.h
>

22 
	~"psxcomm⁄.h
"

23 
	~"sockë.h
"

25 #i‚de‡
_WIN32


26 
	~<sys/sockë.h
>

27 
	~<sys/io˘l.h
>

28 
	~<¨∑/öë.h
>

29 
	~<√töë/ö.h
>

30 
	~<uni°d.h
>

31 
	~<f˙é.h
>

34 
	g£rvî_sockë
 = 0;

35 
	g˛õ¡_sockë
 = 0;

37 
	gtbuf
[513];

38 
	g±r
 = 0;

40 
	#PORT_NUMBER
 12345

	)

42 
	$SèπSîvî
() {

43 
ö_addr
 
loˇlho°addr
;

44 
sockaddr_ö
 
loˇlsockëaddr
;

46 #ifde‡
_WIN32


47 
WSADATA
 
wßD©a
;

49 i‡(
	`WSASèπup
(
	`MAKEWORD
(2, 0), &
wßD©a
) != 0)

53 
£rvî_sockë
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

55 #ifde‡
_WIN32


56 i‡(
£rvî_sockë
 =
INVALID_SOCKET
)

59 i‡(
£rvî_sockë
 == -1)

63 
	`SësN⁄block
();

65 
	`mem£t
((*)&
loˇlho°addr
, 0, (localhostaddr));

66 
	`mem£t
(&
loˇlsockëaddr
, 0, (
sockaddr_ö
));

68 #ifde‡
_WIN32


69 
loˇlho°addr
.
S_un
.
S_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

71 
loˇlho°addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

73 
loˇlsockëaddr
.
sö_Ámûy
 = 
AF_INET
;

74 
loˇlsockëaddr
.
sö_addr
 = 
loˇlho°addr
;

75 
loˇlsockëaddr
.
sö_p‹t
 = 
	`ht⁄s
(
PORT_NUMBER
);

77 i‡(
	`böd
(
£rvî_sockë
, (
sockaddr
 *Ë&
loˇlsockëaddr
, (localsocketaddr)) < 0)

80 i‡(
	`li°í
(
£rvî_sockë
, 1) != 0)

84 
	}
}

86 
	$St›Sîvî
() {

87 #ifde‡
_WIN32


88 
	`shutdown
(
£rvî_sockë
, 
SD_BOTH
);

89 
	`˛o£sockë
(
£rvî_sockë
);

90 
	`WSACÀ™up
();

92 
	`shutdown
(
£rvî_sockë
, 
SHUT_RDWR
);

93 
	`˛o£
(
£rvî_sockë
);

95 
	}
}

97 
	$GëClõ¡
() {

98 
√w_sockë
;

99 
hñlo
[256];

101 
√w_sockë
 = 
	`ac˚±
(
£rvî_sockë
, 0, 0);

103 #ifde‡
_WIN32


104 i‡(
√w_sockë
 =
INVALID_SOCKET
)

107 i‡(
√w_sockë
 == -1)

110 i‡(
˛õ¡_sockë
)

111 
	`Clo£Clõ¡
();

112 
˛õ¡_sockë
 = 
√w_sockë
;

114 #i‚de‡
_WIN32


116 
Êags
;

117 
Êags
 = 
	`f˙é
(
˛õ¡_sockë
, 
F_GETFL
, 0);

118 
	`f˙é
(
˛õ¡_sockë
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
);

122 
	`•rötf
(
hñlo
, "000 PCSX Vîsi⁄ %†- Debug c⁄sﬁe\r\n", 
PACKAGE_VERSION
);

123 
	`WrôeSockë
(
hñlo
, 
	`°æí
(hello));

124 
±r
 = 0;

125 
	}
}

127 
	$Clo£Clõ¡
() {

128 i‡(
˛õ¡_sockë
) {

129 #ifde‡
_WIN32


130 
	`shutdown
(
˛õ¡_sockë
, 
SD_BOTH
);

131 
	`˛o£sockë
(
˛õ¡_sockë
);

133 
	`shutdown
(
˛õ¡_sockë
, 
SHUT_RDWR
);

134 
	`˛o£
(
˛õ¡_sockë
);

136 
˛õ¡_sockë
 = 0;

138 
	}
}

140 
	$HasClõ¡
() {

141  
˛õ¡_sockë
 ? 1 : 0;

142 
	}
}

144 
	$RódSockë
(* 
buf„r
, 
Àn
) {

145 
r
;

146 * 
ídl
;

148 i‡(!
˛õ¡_sockë
)

151 
r
 = 
	`ªcv
(
˛õ¡_sockë
, 
tbuf
 + 
±r
, 512 -Ötr, 0);

153 i‡(
r
 == 0) {

154 
˛õ¡_sockë
 = 0;

155 i‡(!
±r
)

158 #ifde‡
_WIN32


159 i‡(
r
 =
SOCKET_ERROR
)

161 i‡(
r
 == -1)

164 i‡(
±r
 == 0)

166 
r
 = 0;

168 
±r
 +
r
;

169 
tbuf
[
±r
] = 0;

171 
ídl
 = 
	`°r°r
(
tbuf
, "\r\n");

173 i‡(
ídl
) {

174 
r
 = 
ídl
 - 
tbuf
;

175 
	`°∫˝y
(
buf„r
, 
tbuf
, 
r
);

177 
r
 += 2;

178 
	`memmove
(
tbuf
,Åbu‡+ 
r
, 512 -Ñ);

179 
±r
 -
r
;

180 
	`mem£t
(
tbuf
 + 
r
, 0, 512 -Ñ);

181 
r
 -= 2;

184 
r
 = 0;

187 
buf„r
[
r
] = 0;

189  
r
;

190 
	}
}

192 
	$RawRódSockë
(* 
buf„r
, 
Àn
) {

193 
r
 = 0;

194 
mÀn
 = 
Àn
 < 
±r
 ?Üen :Ötr;

196 i‡(!
˛õ¡_sockë
)

199 i‡(
±r
) {

200 
	`mem˝y
(
buf„r
, 
tbuf
, 
mÀn
);

201 
±r
 -
mÀn
;

202 
	`memmove
(
tbuf
,Åbu‡+ 
mÀn
, 512 - mlen);

205 i‡(
Àn
 - 
mÀn
)

206 
r
 = 
	`ªcv
(
˛õ¡_sockë
, 
buf„r
 + 
mÀn
, 
Àn
 - mlen, 0);

208 i‡(
r
 == 0) {

209 
˛õ¡_sockë
 = 0;

210 i‡(!
±r
)

213 #ifde‡
_WIN32


214 i‡(
r
 =
SOCKET_ERROR
)

216 i‡(
r
 == -1)

219 i‡(
±r
 == 0)

221 
r
 = 0;

224 
r
 +
mÀn
;

226  
r
;

227 
	}
}

229 
	$WrôeSockë
(* 
buf„r
, 
Àn
) {

230 i‡(!
˛õ¡_sockë
)

233 
	`£nd
(
˛õ¡_sockë
, 
buf„r
, 
Àn
, 0);

234 
	}
}

236 
	$SësBlock
() {

237 #ifde‡
_WIN32


238 
u_l⁄g
 
b
 = 0;

239 
	`io˘lsockë
(
£rvî_sockë
, 
FIONBIO
, &
b
);

241 
Êags
 = 
	`f˙é
(
£rvî_sockë
, 
F_GETFL
, 0);

242 
	`f˙é
(
£rvî_sockë
, 
F_SETFL
, 
Êags
 & ~
O_NONBLOCK
);

244 
	}
}

246 
	$SësN⁄block
() {

247 #ifde‡
_WIN32


248 
u_l⁄g
 
b
 = 1;

249 
	`io˘lsockë
(
£rvî_sockë
, 
FIONBIO
, &
b
);

251 
Êags
 = 
	`f˙é
(
£rvî_sockë
, 
F_GETFL
, 0);

252 
	`f˙é
(
£rvî_sockë
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
);

254 
	}
}

	@libpcsxcore/socket.h

18 #i‚de‡
__SOCKET_H__


19 
	#__SOCKET_H__


	)

21 #ifde‡
__˝lu•lus


25 
SèπSîvî
();

26 
St›Sîvî
();

28 
GëClõ¡
();

29 
Clo£Clõ¡
();

31 
HasClõ¡
();

33 
RódSockë
(* 
buf„r
, 
Àn
);

34 
RawRódSockë
(* 
buf„r
, 
Àn
);

35 
WrôeSockë
(* 
buf„r
, 
Àn
);

37 
SësBlock
();

38 
SësN⁄block
();

40 #ifde‡
__˝lu•lus


	@libpcsxcore/spu.c

24 
	~"•u.h
"

26 
CALLBACK
 
	$SPUúq
() {

27 
	`psxHu32ªf
(0x1070Ë|
	`SWAPu32
(0x200);

28 
	}
}

31 
CALLBACK
 
	$SPUscheduÀ
(
cy˛es_a·î
) {

32 
psxRegs
.
öãºu±
 |(1 << 
PSXINT_SPU_UPDATE
);

33 
psxRegs
.
ötCy˛e
[
PSXINT_SPU_UPDATE
].
cy˛e
 = 
cy˛es_a·î
;

34 
psxRegs
.
ötCy˛e
[
PSXINT_SPU_UPDATE
].
sCy˛e
 =ÖsxRegs.
cy˛e
;

35 
	`√w_dy«_£t_evít
(
PSXINT_SPU_UPDATE
, 
cy˛es_a·î
);

36 
	}
}

38 
	$•uUpd©e
() {

39 
	`SPU_async
(
psxRegs
.
cy˛e
, 0);

40 
	}
}

	@libpcsxcore/spu.h

20 #i‚de‡
__SPU_H__


21 
	#__SPU_H__


	)

23 #ifde‡
__˝lu•lus


27 
	~"psxcomm⁄.h
"

28 
	~"∂ugös.h
"

29 
	~"r3000a.h
"

30 
	~"psxmem.h
"

32 
	#H_SPUúqAddr
 0x0da4

	)

33 
	#H_SPUaddr
 0x0da6

	)

34 
	#H_SPUd©a
 0x0da8

	)

35 
	#H_SPU˘æ
 0x0dØ

	)

36 
	#H_SPU°©
 0x0d´

	)

37 
	#H_SPU⁄1
 0x0d88

	)

38 
	#H_SPU⁄2
 0x0d8a

	)

39 
	#H_SPUoff1
 0x0d8c

	)

40 
	#H_SPUoff2
 0x0d8e

	)

42 
CALLBACK
 
SPUúq
();

43 
CALLBACK
 
SPUscheduÀ
(
cy˛es_a·î
);

44 
•uUpd©e
();

46 #ifde‡
__˝lu•lus


	@libpcsxcore/system.h

20 #i‚de‡
__SYSTEM_H__


21 
	#__SYSTEM_H__


	)

23 #ifde‡
__˝lu•lus


27 
SysInô
();

28 
SysRe£t
();

29 
SysPrötf
(c⁄° *
fmt
, ...);

30 
SysMesßge
(c⁄° *
fmt
, ...);

31 *
SysLﬂdLibøry
(c⁄° *
lib
);

32 *
SysLﬂdSym
(*
lib
, c⁄° *
sym
);

33 c⁄° *
SysLibEº‹
();

34 
SysClo£Libøry
(*
lib
);

35 
SysUpd©e
();

36 
SysRunGui
();

37 
SysClo£
();

39 #ifde‡
__˝lu•lus


	@maemo/hildon.c

1 
	~<gtk/gtk.h
>

2 
	~<glib.h
>

3 
	~<°dlib.h
>

4 
	~<°döt.h
>

5 
	~<uni°d.h
>

6 
	~<hûd⁄/hûd⁄.h
>

7 
	~<°rög.h
>

8 
	~<±hªad.h
>

10 
	~"../‰⁄ãnd/∂ugö_lib.h
"

11 
	~"../‰⁄ãnd/maö.h
"

12 
	~"../libpcsxc‹e/misc.h
"

13 
	~"../ö˛ude/p£mu_∂ugö_defs.h
"

14 
	~"../libpcsxc‹e/cdrom.h
"

15 
	~"../libpcsxc‹e/cdriso.h
"

16 
	~"../∂ugös/dföput/maö.h
"

17 
	~"../‰⁄ãnd/libpico„/ªad≤g.h
"

18 
	~"m´mo_comm⁄.h
"

19 
	~<libosso.h
>

20 
	~<dbus/dbus.h
>

22 
	#X_RES
 800

	)

23 
	#Y_RES
 480

	)

24 
	#D_WIDTH
 640

	)

25 
	#D_HEIGHT
 480

	)

27 
	#CALL_SIGNAL_IF
 "com.nokü.csd.CÆl"

	)

28 
	#CALL_SIGNAL_PATH
 "/com/nokü/csd/ˇŒ"

	)

29 
	#CALL_INCOMING_SIG
 "Comög"

	)

31 
	#DBUS_RULE_CALL_INCOMING
 "ty≥='sig«l',öãrÁ˚='" 
CALL_SIGNAL_IF
 \

32 "',∑th='" 
CALL_SIGNAL_PATH
 \

33 "',membî='" 
CALL_INCOMING_SIG
 "'"

	)

35 
osso_c⁄ãxt_t
* 
	gosso
 = 
NULL
;

36 
	gbRu¬ög
 = 
TRUE
;

37 
bKìpDi•œyOn
;

38 
bAutoßveOnExô
;

39 
c‹√rA˘i⁄s
[4];

40 
keys_c⁄fig_fûe
[
MAXPATHLEN
];

41 
±hªad_t
 
	gdi•œy_thªad
 = (pthread_t)0;

42 
	gg_œyî_x
 = (
X_RES
 - 
D_WIDTH
) / 2;

43 
	gg_œyî_y
 = (
Y_RES
 - 
D_HEIGHT
) / 2;

44 
	gg_œyî_w
 = 
D_WIDTH
, 
	gg_œyî_h
 = 
D_HEIGHT
;

46 
GdkImage
 *
	gimage
;

47 
Hûd⁄Anim©i⁄A˘‹
 *
	ga˘‹
;

48 
GtkWidgë
 *
	gwödow
, *
	gdøwög
 = 
NULL
;

50 
	g∂_buf_w
, 
	g∂_buf_h
;

51 
	gkeym≠
[65536];

52 
	gdúe˘i⁄_keys
[4];

55 c⁄° 
	gkeym≠2
[14] = {

56 
DKEY_LEFT
,

57 
DKEY_RIGHT
,

58 
DKEY_UP
,

59 
DKEY_DOWN
,

60 
DKEY_CIRCLE
,

61 
DKEY_CROSS
,

62 
DKEY_TRIANGLE
,

63 
DKEY_SQUARE
,

64 
DKEY_SELECT
,

65 
DKEY_START
,

66 
DKEY_L1
,

67 
DKEY_R1
,

68 
DKEY_L2
,

69 
DKEY_R2
,

72 
	$hûd⁄_quô
()

74 
	`m´mo_föish
();

75 
	`gtk_maö_quô
();

76 
	`exô
(0);

77 
	}
}

79 
gdoubÀ
 
	g¥ess_x
 = -1;

80 
gdoubÀ
 
	g¥ess_y
 = -1;

82 
m´mo_x11_upd©e_keys
();

83 
show_nŸifiˇti⁄
(* 
ãxt
);

85 
	$ch™ge_¶Ÿ
(
dñè
)

87 
°©e_¶Ÿ
 +
dñè
;

88 i‡(
°©e_¶Ÿ
 > 9)

89 
°©e_¶Ÿ
 = 0;

90 i‡(
°©e_¶Ÿ
 < 0)

91 
°©e_¶Ÿ
 = 9;

92 
mesßge
[50];

93 
	`•rötf
(
mesßge
,"Save°©ê¶Ÿ: %i",
°©e_¶Ÿ
 + 1);

94 
	`show_nŸifiˇti⁄
(
mesßge
);

95 
	}
}

97 
	$ßve
(
°©e_¶Ÿ
)

99 
	`emu_ßve_°©e
(
°©e_¶Ÿ
);

100 
buf
[
MAXPATHLEN
];

101 i‡(
image
 && image->
mem
){

102 
	`•rötf
 (
buf
,"/›t/m´mo/u§/games/s¸ìnshŸs%s.%3.3d",
fûe_«me
,
°©e_¶Ÿ
);

103 
	`wrôïng
(
buf
, 
image
->
mem
, 
∂_buf_w
,
∂_buf_h
);

105 
mesßge
[50];

106 
	`•rötf
(
mesßge
,"Saved save°©ê¶Ÿ: %i",
°©e_¶Ÿ
 + 1);

107 
	`show_nŸifiˇti⁄
(
mesßge
);

108 
	}
}

110 
	$quô
()

112 i‡(
bAutoßveOnExô
){

113 
	`show_nŸifiˇti⁄
("Autosaving");

114 
	`emu_ßve_°©e
(99);

115 
buf
[
MAXPATHLEN
];

116 i‡(
image
 && image->
mem
){

117 
	`•rötf
 (
buf
,"/›t/m´mo/u§/games/s¸ìnshŸs%s.%3.3d",
fûe_«me
,99);

118 
	`wrôïng
(
buf
, 
image
->
mem
, 
∂_buf_w
,
∂_buf_h
);

121 
	`hûd⁄_quô
();

122 
	}
}

124 
	$show_c⁄fúmbox
(* 
ãxt
)

126 i‡(!
wödow
)

127  
TRUE
;

129 
GtkWidgë
 *
dülog
;

130 
dülog
 = 
	`gtk_mesßge_dülog_√w
 (
	`GTK_WINDOW
(
wödow
),

131 
GTK_DIALOG_DESTROY_WITH_PARENT
,

132 
GTK_MESSAGE_QUESTION
,

133 
GTK_BUTTONS_YES_NO
,

134 
ãxt
);

135 
göt
 
ªsu…
 = 
	`gtk_dülog_run
 (
	`GTK_DIALOG
 (
dülog
));

136 
	`gtk_widgë_de°roy
 (
dülog
);

137 i‡(
ªsu…
 =
GTK_RESPONSE_YES
)

138  
TRUE
;

139  
FALSE
;

140 
	}
}

143 
	$wödow_buâ⁄_¥oxy
(
GtkWidgë
 *
widgë
,

144 
GdkEvítBuâ⁄
 *
evít
,

145 
gpoöãr
 
u£r_d©a
)

147 
c‹√r
 = -1;

148 
£ns
 = 100;

150 
evít
->
ty≥
){

151 
GDK_BUTTON_PRESS
:

153 
¥ess_x
 = 
evít
->
x
;

154 
¥ess_y
 = 
evít
->
y
;

156 
GDK_BUTTON_RELEASE
:

158 i‡(
¥ess_x
 < 
£ns
 && 
¥ess_y
 < sí†&& 
evít
->
x
 < sí†&&Évít->
y
 < sens)

159 
c‹√r
 = 0;

160 i‡(
¥ess_x
 > 800 - 
£ns
 && 
¥ess_y
 < sí†&& 
evít
->
x
 > 800 - sí†&&Évít->
y
 < sens)

161 
c‹√r
 = 1;

162 i‡(
¥ess_x
 > 800 - 
£ns
 && 
¥ess_y
 > 480 - sí†&& 
evít
->
x
 > 800 - sí†&&Évít->
y
 > 480 - sens)

163 
c‹√r
 = 2;

164 i‡(
¥ess_x
 < 
£ns
 && 
¥ess_y
 > 480 - sí†&& 
evít
->
x
 < sí†&&Évít->
y
 > 480 - sens)

165 
c‹√r
 = 3;

167 
¥ess_x
 = -1;

168 
¥ess_y
 = -1;

174 i‡(
c‹√r
 >= 0){

175 
c‹√rA˘i⁄s
[
c‹√r
]){

177 i‡(
	`show_c⁄fúmbox
("Save savestate?"))

178 
	`ßve
(
°©e_¶Ÿ
);

181 i‡(
	`show_c⁄fúmbox
("Load savestate?"))

182 
	`emu_lﬂd_°©e
(
°©e_¶Ÿ
);

185 
	`ch™ge_¶Ÿ
(1);

188 
	`ch™ge_¶Ÿ
(-1);

191 i‡(
	`show_c⁄fúmbox
("Quit?"))

192 
	`quô
();

196 
	}
}

198 *
	$di•œyThªad
(*
¨g
)

200 
DBusC⁄√˘i⁄
* 
sy°em_bus
 = (DBusC⁄√˘i⁄*)
	`osso_gë_sys_dbus_c⁄√˘i⁄
(
osso
);

201 
DBusMesßge
* 
msg
 = 
	`dbus_mesßge_√w_mëhod_ˇŒ
("com.nokia.mce",

205 i‡(
msg
 && 
sy°em_bus
) {

206 
bRu¬ög
 = 
TRUE
;

207 
bRu¬ög
) {

208 
	`dbus_c⁄√˘i⁄_£nd
(
sy°em_bus
, 
msg
, 
NULL
);

209 
	`dbus_c⁄√˘i⁄_Êush
(
sy°em_bus
);

210 
i
 = 0;

211 
i
=0; i<8; i++){

212 
	`u¶ìp
(500000);

213 i‡(!
bRu¬ög
)

217 
	`dbus_mesßge_uƒef
(
msg
);

220 
	`±hªad_exô
(0);

221  
NULL
;

222 
	}
}

224 
	$show_nŸifiˇti⁄
(* 
ãxt
)

226 i‡(
wödow
){

227 
GtkWidgë
* 
b™√r
 = 
	`hûd⁄_b™√r_show_öf‹m©i⁄
(
	`GTK_WIDGET
(
wödow
), 
NULL
, 
ãxt
);

228 
	`hûd⁄_b™√r_£t_timeout
(
	`HILDON_BANNER
(
b™√r
), 3000);

230 
DBusC⁄√˘i⁄
* 
£ssi⁄_bus
 = (DBusC⁄√˘i⁄*)
	`osso_gë_dbus_c⁄√˘i⁄
(
osso
);

231 
DBusMesßgeIãr
 
¨gs
;

232 
DBusMesßge
*
msg
 = 
	`dbus_mesßge_√w_mëhod_ˇŒ
("org.freedesktop.Notifications",

236 i‡(
msg
) {

237 
	`dbus_mesßge_ôî_öô_≠≥nd
(
msg
, &
¨gs
);

238 * 
∑øm
 = 
ãxt
;

239 i‡(
	`dbus_mesßge_ôî_≠≥nd_basic
(&
¨gs
, 
DBUS_TYPE_STRING
, &
∑øm
)) {

240 
	`dbus_c⁄√˘i⁄_£nd
(
£ssi⁄_bus
, 
msg
, 
NULL
);

241 
	`dbus_c⁄√˘i⁄_Êush
(
£ssi⁄_bus
);

243 
	`dbus_mesßge_uƒef
(
msg
);

246 
	}
}

248 
	$show_mesßgebox
(* 
ãxt
)

250 i‡(!
wödow
)

253 
GtkWidgë
 *
dülog
;

254 
dülog
 = 
	`gtk_mesßge_dülog_√w
 (
	`GTK_WINDOW
(
wödow
),

255 
GTK_DIALOG_DESTROY_WITH_PARENT
,

256 
GTK_MESSAGE_INFO
,

257 
GTK_BUTTONS_OK
,

258 
ãxt
);

259 
	`gtk_dülog_run
 (
	`GTK_DIALOG
 (
dülog
));

260 
	`gtk_widgë_de°roy
 (
dülog
);

261 
	}
}

263 
	~<hûd⁄/hûd⁄-fûe-choo£r-dülog.h
>

264 
	$ch™ge_disc
()

266 
GtkWidgë
 *
dülog
;

267 
dülog
 = 
	`hûd⁄_fûe_choo£r_dülog_√w
 (
	`GTK_WINDOW
(
wödow
), 
GTK_FILE_CHOOSER_ACTION_OPEN
);

268 
	`gtk_wödow_£t_tôÀ
 (
	`GTK_WINDOW
 (
dülog
), "Change disc");

270 
cuºítFûe
[
MAXPATHLEN
];

271 
	`°r˝y
(
cuºítFûe
, 
	`GëIsoFûe
());

272 i‡(
	`°æí
(
cuºítFûe
))

273 
	`gtk_fûe_choo£r_£t_fûíame
 (
	`GTK_FILE_CHOOSER
(
dülog
), 
cuºítFûe
);

275 
	`gtk_fûe_choo£r_£t_cuºít_fﬁdî
 (
	`GTK_FILE_CHOOSER
(
dülog
), "/home/user/MyDocs/");

277 
GtkFûeFûãr
 *
fûãr
=
	`gtk_fûe_fûãr_√w
();

278 
	`gtk_fûe_fûãr_add_∑âîn
 (
fûãr
,"*.bin");

279 
	`gtk_fûe_fûãr_add_∑âîn
 (
fûãr
,"*.BIN");

280 
	`gtk_fûe_fûãr_add_∑âîn
 (
fûãr
,"*.iso");

281 
	`gtk_fûe_fûãr_add_∑âîn
 (
fûãr
,"*.ISO");

282 
	`gtk_fûe_fûãr_add_∑âîn
 (
fûãr
,"*.img");

283 
	`gtk_fûe_fûãr_add_∑âîn
 (
fûãr
,"*.IMG");

284 
	`gtk_fûe_fûãr_add_∑âîn
 (
fûãr
,"*.z");

285 
	`gtk_fûe_fûãr_add_∑âîn
 (
fûãr
,"*.Z");

286 
	`gtk_fûe_fûãr_add_∑âîn
 (
fûãr
,"*.znx");

287 
	`gtk_fûe_fûãr_add_∑âîn
 (
fûãr
,"*.ZNX");

288 
	`gtk_fûe_fûãr_add_∑âîn
 (
fûãr
,"*.pbp");

289 
	`gtk_fûe_fûãr_add_∑âîn
 (
fûãr
,"*.PBP");

290 
	`gtk_fûe_fûãr_add_∑âîn
 (
fûãr
,"*.mdf");

291 
	`gtk_fûe_fûãr_add_∑âîn
 (
fûãr
,"*.MDF");

292 
	`gtk_fûe_choo£r_£t_fûãr
 (
	`GTK_FILE_CHOOSER
 (
dülog
),
fûãr
);

294 i‡(
	`gtk_dülog_run
 (
	`GTK_DIALOG
 (
dülog
)Ë=
GTK_RESPONSE_OK
) {

295 *
fûíame
 = 
	`gtk_fûe_choo£r_gë_fûíame
 (
	`GTK_FILE_CHOOSER
 (
dülog
));

298 
CdromId
[0] = '\0';

299 
CdromLabñ
[0] = '\0';

301 
	`£t_cd_image
(
fûíame
);

302 i‡(
	`RñﬂdCdromPlugö
() < 0)

303 
	`¥ötf
("FailedÅoÜoad cdrÖlugin\n");

305 i‡(
	`CDR_›í
() < 0)

306 
	`¥ötf
("FailedÅo open cdrÖlugin\n");

308 
	`°r˝y
(
fûe_«me
, 
	`°ºchr
(
fûíame
,'/'));

310 
	`SëCdO≥nCa£Time
(
	`time
(
NULL
) + 3);

311 
	`LidI¡îru±
();

313 
	`g_‰ì
 (
fûíame
);

316 
	`gtk_widgë_de°roy
 (
dülog
);

317 
	}
}

319 
	$ch™ge_mu…i_disc
()

321 
Hûd⁄Dülog
* 
wödow
 = 
	`HILDON_DIALOG
(
	`hûd⁄_dülog_√w
());

322 
	`gtk_wödow_£t_tôÀ
 (
	`GTK_WINDOW
 (
wödow
), "Change disc");

323 
	`gtk_wödow_£t_deÁu…_size
(
	`GTK_WINDOW
 (
wödow
), 480, 300);

325 
GtkWidgë
* 
sw
 = 
	`hûd⁄_∑¬abÀ_¨ó_√w
 ();

326 
	`gtk_box_∑ck_°¨t
 (
	`GTK_BOX
(
	`GTK_DIALOG
(
wödow
)->
vbox
), 
sw
, 
TRUE
, TRUE, 0);

328 
GtkWidgë
* 
åì_võw
 = 
	`hûd⁄_gtk_åì_võw_√w
 (
HILDON_UI_MODE_EDIT
);

329 
	`gtk_widgë_£t_«me
 (
åì_võw
, "fremantle-widget");

331 
	`gtk_åì_võw_£t_ruÀs_höt
 (
	`GTK_TREE_VIEW
 (
åì_võw
), 
TRUE
);

333 
i
;

334 
GtkLi°St‹e
 *
°‹e
 = 
	`gtk_li°_°‹e_√w
 (1, 
G_TYPE_STRING
);

335 
i
 = 0; i < 
cdrIsoMu…idiskCou¡
; i++) {

336 
gch¨
 *
°r
;

338 
°r
 = 
	`g_°rdup_¥ötf
 ("Dis¯%d", 
i
+1);

339 
	`gtk_li°_°‹e_ö£π_wôh_vÆues
 (
°‹e
, 
NULL
, 
i
, 0, 
°r
, -1);

340 
	`g_‰ì
 (
°r
);

342 
GtkTªeModñ
* 
modñ
 = 
	`GTK_TREE_MODEL
 (
°‹e
);

344 
	`gtk_åì_võw_£t_modñ
 (
	`GTK_TREE_VIEW
 (
åì_võw
), 
modñ
);

345 
	`g_obje˘_uƒef
 (
modñ
);

347 
GtkTªeSñe˘i⁄
* 
£À˘i⁄
 = 
	`gtk_åì_võw_gë_£À˘i⁄
 (
	`GTK_TREE_VIEW
 (
åì_võw
));

348 
	`gtk_åì_£À˘i⁄_£t_mode
 (
£À˘i⁄
, 
GTK_SELECTION_SINGLE
);

350 
GtkCñlRídîî
* 
ªndîî
 = 
	`gtk_˚Œ_ªndîî_ãxt_√w
 ();

351 
	`g_obje˘_£t
 (
ªndîî
,

353 "weight", 
PANGO_WEIGHT_NORMAL
,

354 
NULL
);

356 
	`gtk_åì_võw_ö£π_cﬁumn_wôh_©åibuãs
 (
	`GTK_TREE_VIEW
 (
åì_võw
),

358 
ªndîî
,

360 
NULL
);

362 
cuºít
[5];

363 
	`•rötf
(
cuºít
, "%i", 
cdrIsoMu…idiskSñe˘
);

364 
GtkTªeP©h
* 
∑th
 = 
	`gtk_åì_∑th_√w_‰om_°rög
(
cuºít
);

365 
	`gtk_åì_£À˘i⁄_£À˘_∑th
 (
£À˘i⁄
, 
∑th
);

366 
	`gtk_åì_∑th_‰ì
(
∑th
);

368 
	`gtk_widgë_£t_size_ªque°
 (
åì_võw
, 480, 800);

369 
	`gtk_c⁄èöî_add
 (
	`GTK_CONTAINER
 (
sw
), 
åì_võw
);

371 
	`hûd⁄_dülog_add_buâ⁄
 (
	`HILDON_DIALOG
(
wödow
), 
GTK_STOCK_OK
, 
GTK_RESPONSE_ACCEPT
);

373 
	`gtk_widgë_show_Æl
 (
	`GTK_WIDGET
(
wödow
));

374 
göt
 
ªsu…
 = 
	`gtk_dülog_run
 (
	`GTK_DIALOG
 (
wödow
));

375 i‡(
ªsu…
 =
GTK_RESPONSE_ACCEPT
) {

376 
GtkTªeModñ
* 
modñ
;

377 
GtkTªeIãr
 
ôî
;

378 
GtkTªeSñe˘i⁄
* 
£À˘i⁄
 = 
	`gtk_åì_võw_gë_£À˘i⁄
(
	`GTK_TREE_VIEW
(
åì_võw
));

379 i‡(
	`gtk_åì_£À˘i⁄_gë_£À˘ed
(
£À˘i⁄
, &
modñ
, &
ôî
)){

380 
GtkTªeP©h
* 
∑th
 = 
	`gtk_åì_modñ_gë_∑th
(
modñ
 , &
ôî
);

381 * 
i
 = 
	`gtk_åì_∑th_gë_ödi˚s
(
∑th
) ;

383 
cdrIsoMu…idiskSñe˘
 = *
i
;

384 
CdromId
[0] = '\0';

385 
CdromLabñ
[0] = '\0';

387 
	`CDR_˛o£
();

388 i‡(
	`CDR_›í
() < 0) {

389 
	`¥ötf
("FailedÅoÜoad cdrÖlugin\n");

393 
	`SëCdO≥nCa£Time
(
	`time
(
NULL
) + 3);

394 
	`LidI¡îru±
();

397 
	`gtk_widgë_de°roy
(
	`GTK_WIDGET
(
wödow
));

398 
	}
}

400 
DBusH™dÀrResu…
 
	$⁄_msg_ªcõved
(
DBusC⁄√˘i⁄
* 
c⁄√˘i⁄
 
G_GNUC_UNUSED
, 
DBusMesßge
* 
mesßge
, * 
d©a
)

402 c⁄° * 
∑th
 = 
	`dbus_mesßge_gë_∑th
(
mesßge
);

403 i‡(
∑th
 && 
	`g_°r_equÆ
’©h, 
CALL_SIGNAL_PATH
)){

404 c⁄° * 
mbr
 = 
	`dbus_mesßge_gë_membî
(
mesßge
);

405 i‡(
mbr
 && 
	`g_°r_equÆ
(mbr, 
CALL_INCOMING_SIG
))

406 
	`show_mesßgebox
("Paused");

409  
DBUS_HANDLER_RESULT_NOT_YET_HANDLED
;

410 
	}
}

413 
	$wödow_key_¥oxy
(
GtkWidgë
 *
widgë
,

414 
GdkEvítKey
 *
evít
,

415 
gpoöãr
 
u£r_d©a
)

417 
	`key_¥ess_evít
(
evít
->
h¨dw¨e_keycode
,Évít->
ty≥
 =
GDK_KEY_PRESS
 ? 1 : (evít->ty≥ =
GDK_KEY_RELEASE
 ? 2 : 0) );

418 
	}
}

420 
	gœ°_key_¥es£d
 = 0;

421 
ölöe
 
	$key_¥ess_evít
(
key2
,
ty≥
)

423 
psxkey1
 = -1, 
psxkey2
 = -1;

424 
key
=
keym≠
[
key2
];

426 i‡(
key
 < 0)

429 i‡(
ty≥
 =1 && 
key2
 =
œ°_key_¥es£d
)

431 
œ°_key_¥es£d
 = 
ty≥
 =1 ? 
key2
 : 0;

434 i‡(
key
 < 
	`ARRAY_SIZE
(
keym≠2
)){

435 
psxkey1
 = 
keym≠2
[
key
];

436 }
key
) {

438 
	`quô
();

441 
psxkey1
 = 
DKEY_UP
;

442 
psxkey2
 = 
DKEY_LEFT
;

445 
psxkey1
 = 
DKEY_UP
;

446 
psxkey2
 = 
DKEY_RIGHT
;

449 
psxkey1
 = 
DKEY_DOWN
;

450 
psxkey2
 = 
DKEY_LEFT
;

453 
psxkey1
 = 
DKEY_DOWN
;

454 
psxkey2
 = 
DKEY_RIGHT
;

457 i‡(
ty≥
 == 1)

458 
	`ßve
(
°©e_¶Ÿ
);

461 i‡(
ty≥
 == 1)

462 
	`emu_lﬂd_°©e
(
°©e_¶Ÿ
);

465 i‡(
ty≥
 == 1)

466 
	`ch™ge_¶Ÿ
(1);

469 i‡(
ty≥
 == 1)

470 
	`ch™ge_¶Ÿ
(-1);

473 i‡(
ty≥
 == 1){

474 i‡(
cdrIsoMu…idiskCou¡
 > 1)

475 
	`ch™ge_mu…i_disc
();

477 
	`ch™ge_disc
();

482 i‡(
ö_ty≥1
 =
PSE_PAD_TYPE_GUNCON
){

483 i‡(
ty≥
 == 1) {

484 
psxkey1
){

485 
DKEY_CROSS
:

486 
ö_°©e_gun
 |
SACTION_GUN_A
;

488 
DKEY_CIRCLE
:

489 
ö_°©e_gun
 |
SACTION_GUN_B
;

491 
DKEY_TRIANGLE
:

492 
ö_°©e_gun
 |
SACTION_GUN_TRIGGER2
;

494 
DKEY_SQUARE
:

495 
ö_°©e_gun
 |
SACTION_GUN_TRIGGER
;

498 }i‡(
ty≥
 == 2) {

499 
psxkey1
){

500 
DKEY_CROSS
:

501 
ö_°©e_gun
 &~
SACTION_GUN_A
;

503 
DKEY_CIRCLE
:

504 
ö_°©e_gun
 &~
SACTION_GUN_B
;

506 
DKEY_TRIANGLE
:

507 
ö_°©e_gun
 &~
SACTION_GUN_TRIGGER2
;

509 
DKEY_SQUARE
:

510 
ö_°©e_gun
 &~
SACTION_GUN_TRIGGER
;

515 i‡(
ty≥
 == 1) {

516 i‡(
psxkey1
 >= 0)

517 
ö_key°©e
 |1 << 
psxkey1
;

518 i‡(
psxkey2
 >= 0)

519 
ö_key°©e
 |1 << 
psxkey2
;

521 i‡(
ö_ty≥1
 =
PSE_PAD_TYPE_ANALOGPAD
){

522 
psxkey1
){

523 
DKEY_LEFT
:

524 
ö_a1
[0] = 0;

526 
DKEY_RIGHT
:

527 
ö_a1
[0] = 255;

529 
DKEY_UP
:

530 
ö_a1
[1] = 0;

532 
DKEY_DOWN
:

533 
ö_a1
[1] = 255;

538 i‡(
ty≥
 == 2) {

539 i‡(
psxkey1
 >= 0)

540 
ö_key°©e
 &~(1 << 
psxkey1
);

541 i‡(
psxkey2
 >= 0)

542 
ö_key°©e
 &~(1 << 
psxkey2
);

544 i‡(
ö_ty≥1
 =
PSE_PAD_TYPE_ANALOGPAD
){

545 
psxkey1
){

546 
DKEY_LEFT
:

547 
DKEY_RIGHT
:

548 
ö_a1
[0] = 127;

550 
DKEY_UP
:

551 
DKEY_DOWN
:

552 
ö_a1
[1] = 127;

556 
	`emu_£t_a˘i⁄
(
SACTION_NONE
);

559 
	}
}

561 
	$∂©_föish
()

563 
	`hûd⁄_quô
();

564 
	}
}

566 
	$£t_ac˚l_mu…ùlõrs
()

568 
ac˚lO±i⁄s
.
xMu…ùlõr
 = 255.0 / ( (ac˚lO±i⁄s.
maxVÆue
 -ác˚lO±i⁄s.
£ns
) * 2.0);

569 
ac˚lO±i⁄s
.
yMu…ùlõr
 = 255.0 / ( (ac˚lO±i⁄s.
maxVÆue
 -ác˚lO±i⁄s.
£ns
) * 2.0);

570 
	}
}

572 
	~<gdk/gdkx.h
>

573 
	$m´mo_öô
(*
¨gc
, ***
¨gv
)

575 
osso
 = 
	`osso_öôülize
("pcsxª¨med", 
PACKAGE_VERSION
, 
FALSE
, 
NULL
);

577 
DBusC⁄√˘i⁄
* 
sy°em_bus
 = (DBusC⁄√˘i⁄*)
	`osso_gë_sys_dbus_c⁄√˘i⁄
(
osso
);

578 
	`dbus_bus_add_m©ch
(
sy°em_bus
, 
DBUS_RULE_CALL_INCOMING
, 
NULL
);

579 
	`dbus_c⁄√˘i⁄_add_fûãr
(
sy°em_bus
, 
⁄_msg_ªcõved
, 
NULL
, NULL);

581 
FILE
* 
pFûe
;

582 
pFûe
 = 
	`f›í
(
keys_c⁄fig_fûe
, "r");

583 i‡(
pFûe
 =
NULL
){

584 
	`Ârötf
(
°dîr
, "Eº‹ o≥nög key†c⁄fig fûê%s\n", 
keys_c⁄fig_fûe
);

587 
	`¥ötf
("Key†c⁄figÑód from %s\n", 
keys_c⁄fig_fûe
);

589 
ch
;

590 
i
=0;

591 
i
=0;i<65536;i++)

592 
keym≠
[
i
]=-1;

593 i‡(
NULL
 !
pFûe
) {

594 
i
=0;i<24;i++){

595 
	`fsˇnf
(
pFûe
, "%i",&
ch
);

596 
keym≠
[
ch
]=
i
;

597 i‡(
i
 < 4)

598 
dúe˘i⁄_keys
[
i
] = 
ch
;

600 
	`f˛o£
(
pFûe
);

603 
ö_ty≥1
){

604 
PSE_PAD_TYPE_GUNCON
:

605 
	`mem£t
(
c‹√rA˘i⁄s
, 0, (cornerActions));

606 
	`¥ötf
("Controller setÅo GUNCON (SLPH-00034)\n");

608 
PSE_PAD_TYPE_STANDARD
:

609 
	`¥ötf
("Controller setÅo standard (SCPH-1080)\n");

611 
PSE_PAD_TYPE_ANALOGPAD
:

612 
	`¥ötf
("Controller setÅoánalog (SCPH-1150)\n");

616 i‡(
ö_íabÀ_vibøti⁄
)

617 
	`¥ötf
("VibrationÉnabled\n");

619 i‡(!(
g_m´mo_›ts
&8)){

620 
	`gtk_öô
 (
¨gc
, 
¨gv
);

622 
wödow
 = 
	`hûd⁄_°ackabÀ_wödow_√w
 ();

623 
	`gtk_widgë_ªÆize
 (
wödow
);

624 
	`gtk_wödow_fuŒs¸ìn
 (
	`GTK_WINDOW
(
wödow
));

626 i‡(
c‹√rA˘i⁄s
[0] + cornerActions[1] + cornerActions[2] + cornerActions[3] > 0){

627 
	`g_sig«l_c⁄√˘
 (
	`G_OBJECT
 (
wödow
), "button_release_event",

628 
	`G_CALLBACK
 (
wödow_buâ⁄_¥oxy
), 
NULL
);

629 
	`g_sig«l_c⁄√˘
 (
	`G_OBJECT
 (
wödow
), "button_press_event",

630 
	`G_CALLBACK
 (
wödow_buâ⁄_¥oxy
), 
NULL
);

633 
	`g_sig«l_c⁄√˘
 (
	`G_OBJECT
 (
wödow
), "key-press-event",

634 
	`G_CALLBACK
 (
wödow_key_¥oxy
), 
NULL
);

635 
	`g_sig«l_c⁄√˘
 (
	`G_OBJECT
 (
wödow
), "key-release-event",

636 
	`G_CALLBACK
 (
wödow_key_¥oxy
), 
NULL
);

637 
	`g_sig«l_c⁄√˘
 (
	`G_OBJECT
 (
wödow
), "delete_event",

638 
	`G_CALLBACK
 (
hûd⁄_quô
), 
NULL
);

639 
	`gtk_widgë_add_evíts
 (
wödow
,

640 
GDK_BUTTON_PRESS_MASK
 | 
GDK_BUTTON_RELEASE_MASK
);

642 
a˘‹
 = 
	`HILDON_ANIMATION_ACTOR
 (
	`hûd⁄_™im©i⁄_a˘‹_√w
());

643 i‡(
g_m´mo_›ts
 & 2)

644 
	`hûd⁄_™im©i⁄_a˘‹_£t_posôi⁄
 (
a˘‹
, 0, 0 );

646 
	`hûd⁄_™im©i⁄_a˘‹_£t_posôi⁄
 (
a˘‹
, (
X_RES
 - 
D_WIDTH
)/2, (
Y_RES
 - 
D_HEIGHT
)/2 );

647 
	`hûd⁄_™im©i⁄_a˘‹_£t_∑ª¡
 (
a˘‹
, 
	`GTK_WINDOW
 (
wödow
));

649 
døwög
 = 
	`gtk_image_√w
 ();

651 
	`gtk_c⁄èöî_add
 (
	`GTK_CONTAINER
 (
a˘‹
), 
døwög
);

653 
	`gtk_widgë_show_Æl
 (
	`GTK_WIDGET
 (
a˘‹
));

654 
	`gtk_widgë_show_Æl
 (
	`GTK_WIDGET
 (
wödow
));

656 
	`gtk_öô
 (
¨gc
, 
¨gv
);

663 
	`£t_ac˚l_mu…ùlõrs
();

665 i‡(
bKìpDi•œyOn
){

666 i‡(
	`±hªad_¸óã
(&
di•œy_thªad
, 
NULL
, 
di•œyThªad
, NULL))

667 
	`¥ötf
("FailedÅo create displayÅhread.\n");

670 
∂_ª¨med_cbs
.
⁄ly_16bµ
 = 1;

672 
	}
}

674 
	$m´mo_föish
()

676 i‡(
di•œy_thªad
 > 0){

677 
bRu¬ög
 = 
FALSE
;

678 
	`±hªad_joö
(
di•œy_thªad
, 
NULL
);

681 i‡(
osso
){

682 
	`osso_deöôülize
(
osso
);

683 
osso
 = 
NULL
;

685 
	`¥ötf
("Exiting\n");

686 
	}
}

688 
	$míu_lo›
()

690 
	}
}

692 *
	$∂©_gvideo_£t_mode
(*
w_
, *
h_
, *
bµ_
)

694 
w
 = *
w_
, 
h
 = *
h_
;

696 i‡(
g_m´mo_›ts
&8Ë 
∂_vout_buf
;

699 i‡(
w
 <0 || 
h
 <= 0)

700  
∂_vout_buf
;

702 i‡(
image
Ë
	`gdk_image_de°roy
(image);

703 
image
 = 
	`gdk_image_√w
–
GDK_IMAGE_FASTEST
, 
	`gdk_visuÆ_gë_sy°em
(), 
w
, 
h
 );

705 
∂_vout_buf
 = (*Ë
image
->
mem
;

707 
	`gtk_image_£t_‰om_image
 (
	`GTK_IMAGE
(
døwög
), 
image
, 
NULL
);

709 
	`gtk_wödow_ªsize
 (
	`GTK_WINDOW
 (
a˘‹
), 
w
, 
h
);

710 i‡(
g_m´mo_›ts
 & 2)

711 
	`hûd⁄_™im©i⁄_a˘‹_£t_sˇÀ
 (
a˘‹
,

712 (
gdoubÀ
)800 / (gdoubÀ)
w
,

713 (
gdoubÀ
)480 / (gdoubÀ)
h


716 
	`hûd⁄_™im©i⁄_a˘‹_£t_sˇÀ
 (
a˘‹
,

717 (
gdoubÀ
)
D_WIDTH
 / (gdoubÀ)
w
,

718 (
gdoubÀ
)
D_HEIGHT
 / (gdoubÀ)
h


720 
∂_buf_w
=
w
;
∂_buf_h
=
h
;

721  
∂_vout_buf
;

722 
	}
}

724 *
	$∂©_gvideo_Êù
()

726 i‡(!(
g_m´mo_›ts
&8))

727 
	`gtk_widgë_queue_døw
(
døwög
);

730 i‡(
g_m´mo_›ts
 & 4) {

731 
x
, 
y
, 
z
;

732 
FILE
* 
f
 = 
	`f›í
( "/sys/class/i2c-adapter/i2c-3/3-001d/coord", "r" );

733 if–!
f
 ) {
	`¥ötf
 ("î∏öác˚l"); 
	`exô
(1);}

734 
	`fsˇnf
–
f
, "%‡%‡%f", &
x
, &
y
, &
z
 );

735 
	`f˛o£
–
f
 );

737 i‡(
ö_ty≥1
 =
PSE_PAD_TYPE_ANALOGPAD
){

738 i‡(
x
 > 
ac˚lO±i⁄s
.
maxVÆue
) x =áccelOptions.maxValue;

739 i‡(
x
 < -
ac˚lO±i⁄s
.
maxVÆue
) x = -accelOptions.maxValue;

741 c⁄° 
maxVÆue
 = 
ac˚lO±i⁄s
.maxVÆuê-ác˚lO±i⁄s.
£ns
;

742 if(
x
 > 
ac˚lO±i⁄s
.
£ns
){

743 
x
 -
ac˚lO±i⁄s
.
£ns
;

744 
ö_a1
[0] = (-
x
 + 
maxVÆue
 ) * 
ac˚lO±i⁄s
.
xMu…ùlõr
;

745 }i‡(
x
 < -
ac˚lO±i⁄s
.
£ns
){

746 
x
 +
ac˚lO±i⁄s
.
£ns
;

747 
ö_a1
[0] = (-
x
 + 
maxVÆue
 ) * 
ac˚lO±i⁄s
.
xMu…ùlõr
;

748 }
ö_a1
[0] = 127;

750 
y
 +
ac˚lO±i⁄s
.
y_def
;

751 i‡(
y
 > 
ac˚lO±i⁄s
.
maxVÆue
) y =áccelOptions.maxValue;

752 i‡(
y
 < -
ac˚lO±i⁄s
.
maxVÆue
) y = -accelOptions.maxValue;

754 if(
y
 > 
ac˚lO±i⁄s
.
£ns
){

755 
y
 -
ac˚lO±i⁄s
.
£ns
;

756 
ö_a1
[1] = (-
y
 + 
maxVÆue
 ) * 
ac˚lO±i⁄s
.
yMu…ùlõr
;

757 }i‡(
y
 < -
ac˚lO±i⁄s
.
£ns
){

758 
y
 +
ac˚lO±i⁄s
.
£ns
;

759 
ö_a1
[1] = (-
y
 + 
maxVÆue
 ) * 
ac˚lO±i⁄s
.
yMu…ùlõr
;

760 }
ö_a1
[1] = 127;

764 if–
x
 > 
ac˚lO±i⁄s
.
£ns
 ) 
ö_key°©e
 |1 << 
DKEY_LEFT
;

765 if–
x
 < -
ac˚lO±i⁄s
.
£ns
 ) 
ö_key°©e
 |1 << 
DKEY_RIGHT
;

766 {
ö_key°©e
 &~(1 << 
DKEY_LEFT
);ö_key°©ê&~(1 << 
DKEY_RIGHT
);}

768 
y
 +
ac˚lO±i⁄s
.
y_def
;

769 if–
y
 > 
ac˚lO±i⁄s
.
£ns
 )
ö_key°©e
 |1 << 
DKEY_UP
;

770 if–
y
 < -
ac˚lO±i⁄s
.
£ns
 ) 
ö_key°©e
 |1 << 
DKEY_DOWN
;

771 {
ö_key°©e
 &~(1 << 
DKEY_DOWN
);ö_key°©ê&~(1 << 
DKEY_UP
);}

775  
∂_vout_buf
;

776 
	}
}

779 
	$upd©e_öput
()

781 i‡(
g_m´mo_›ts
 & 8)

782 
	`m´mo_x11_upd©e_keys
();

785 
	`gtk_evíts_≥ndög
())

786 
	`gtk_maö_ôî©i⁄
();

788 
	}
}

790 
	$om≠_íabÀ_œyî
(
íabÀd
)

793 
	}
}

795 
	$míu_nŸify_mode_ch™ge
(
w
, 
h
, 
bµ
)

797 
	}
}

799 *
	$∂©_¥ï¨e_s¸ìnshŸ
(*
w
, *
h
, *
bµ
)

801  
NULL
;

802 
	}
}

804 
	$∂©_°ï_vﬁume
(
is_up
)

806 
	}
}

808 
	$∂©_åiggî_vibøã
(
∑d
, 
low
, 
high
)

810 c⁄° 
vDuøti⁄
 = 10;

812 
DBusC⁄√˘i⁄
* 
sy°em_bus
 = (DBusC⁄√˘i⁄*)
	`osso_gë_sys_dbus_c⁄√˘i⁄
(
osso
);

813 
DBusMesßgeIãr
 
¨gs
;

814 
DBusMesßge
*
msg
 = 
	`dbus_mesßge_√w_mëhod_ˇŒ
("com.nokia.mce",

818 i‡(
msg
) {

819 
	`dbus_mesßge_ôî_öô_≠≥nd
(
msg
, &
¨gs
);

821 
•ìd
 = 
high
;

822 
duøti⁄
 = 
vDuøti⁄
;

823 i‡(
	`dbus_mesßge_ôî_≠≥nd_basic
(&
¨gs
, 
DBUS_TYPE_INT32
, &
•ìd
)) {

824 i‡(
	`dbus_mesßge_ôî_≠≥nd_basic
(&
¨gs
, 
DBUS_TYPE_INT32
, &
duøti⁄
)) {

825 
	`dbus_c⁄√˘i⁄_£nd
(
sy°em_bus
, 
msg
, 
NULL
);

829 
	`dbus_mesßge_uƒef
(
msg
);

831 
	}
}

833 
	$∂©_möimize
()

835 
	}
}

837 
	$∂©_gvideo_˛o£
()

839 
	}
}

841 
	$∂©_gvideo_›í
(
is_∑l
)

843 
	}
}

	@maemo/maemo_common.h

1 
m´mo_öô
(*
¨gc
, ***
¨gv
);

2 
m´mo_föish
();

4 
fûe_«me
[
MAXPATHLEN
];

5 
g_m´mo_›ts
;

7 
ölöe
 
key_¥ess_evít
(
key
,
ty≥
);

11 
	m£ns
;

12 
	my_def
;

13 
	mmaxVÆue
;

14 
	mxMu…ùlõr
;

15 
	myMu…ùlõr
;

16 } 
	tac˚l_›ti⁄
;

18 
ac˚l_›ti⁄
 
ac˚lO±i⁄s
;

	@maemo/maemo_xkb.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°döt.h
>

22 
	~<X11/Xlib.h
>

23 
	~<X11/Xutû.h
>

24 
	~<X11/keysym.h
>

25 
	~<X11/XKBlib.h
>

27 
	~"../‰⁄ãnd/maö.h
"

28 
	~"../‰⁄ãnd/∂ugö_lib.h
"

30 
Atom
 
	gwm¥Ÿocﬁs
, 
	gwmdñwödow
;

31 
	göôülized
;

35 
	$InôKeybﬂrd
() {

36 
Di•œy
 *
di•
 = (Di•œy *)
gpuDi•
;

37 i‡(
di•
){

38 
wm¥Ÿocﬁs
 = 
	`XI¡înAtom
(
di•
, "WM_PROTOCOLS", 0);

39 
wmdñwödow
 = 
	`XI¡înAtom
(
di•
, "WM_DELETE_WINDOW", 0);

40 
	`XkbSëDëe˘abÀAutoRïót
(
di•
, 1, 
NULL
);

42 
	}
}

44 
	$De°royKeybﬂrd
() {

45 
Di•œy
 *
di•
 = (Di•œy *)
gpuDi•
;

46 i‡(
di•
)

47 
	`XkbSëDëe˘abÀAutoRïót
(
di•
, 0, 
NULL
);

48 
	}
}

49 
	~"m´mo_comm⁄.h
"

51 
	$m´mo_x11_upd©e_keys
() {

53 
XEvít
 
evt
;

54 
XClõ¡MesßgeEvít
 *
x˚
;

55 
Àave
 = 0;

56 
Di•œy
 *
di•
 = (Di•œy *)
gpuDi•
;

58 i‡(!
di•
)

61 i‡(!
öôülized
) {

62 
öôülized
++;

63 
	`InôKeybﬂrd
();

66 
	`XPídög
(
di•
)>0) {

67 
	`XNextEvít
(
di•
, &
evt
);

68 
evt
.
ty≥
) {

69 
KeyPªss
:

70 
KeyRñó£
:

71 
	`key_¥ess_evít
(
evt
.
xkey
.
keycode
,Évt.
ty≥
==
KeyPªss
 ? 1 : (evt.ty≥==
KeyRñó£
 ? 2 : 0) );

74 
Clõ¡Mesßge
:

75 
x˚
 = (
XClõ¡MesßgeEvít
 *)&
evt
;

76 i‡(
x˚
->
mesßge_ty≥
 =
wm¥Ÿocﬁs
 && (
Atom
)x˚->
d©a
.
l
[0] =
wmdñwödow
)

77 
Àave
 = 1;

82 i‡(
Àave
) {

83 
	`De°royKeybﬂrd
();

84 
	`exô
(1);

88 
	}
}

	@maemo/main.c

8 
	~<°dio.h
>

9 
	~<°rög.h
>

10 
	~<°döt.h
>

11 
	~<uni°d.h
>

13 
	~"../‰⁄ãnd/maö.h
"

14 
	~"../‰⁄ãnd/míu.h
"

15 
	~"../‰⁄ãnd/∂ugö.h
"

16 
	~"../‰⁄ãnd/∂ugö_lib.h
"

17 
	~"../libpcsxc‹e/misc.h
"

18 
	~"../libpcsxc‹e/cdriso.h
"

19 
	~"../libpcsxc‹e/√w_dy«ªc/√w_dy«ªc.h
"

20 
	~"../∂ugös/dföput/maö.h
"

21 
	~"../∂ugös/dfsound/•u_c⁄fig.h
"

22 
	~"m´mo_comm⁄.h
"

24 
ö_íabÀ_vibøti⁄
;

25 
cy˛e_mu…ùlõr
;

26 
ö_ty≥1
, 
ö_ty≥2
;

28 
ac˚l_›ti⁄
 
	gac˚lO±i⁄s
;

29 
	gªady_to_go
, 
	gg_emu_w™t_quô
, 
	gg_emu_ª£âög
;

30 
	gg_míus¸ìn_w
, 
	gg_míus¸ìn_h
;

31 
	gg_sˇÀr
, 
	gso·_fûãr
;

32 
	gg_›ts
 = 0;

33 
	gg_m´mo_›ts
;

34 
	gc‹√rA˘i⁄s
[4] = {0,0,0,0};

35 
	gbKìpDi•œyOn
 = 
FALSE
;

36 
	gbAutoßveOnExô
 = 
FALSE
;

37 
	gfûe_«me
[
MAXPATHLEN
];

38 
	gkeys_c⁄fig_fûe
[
MAXPATHLEN
] = "/opt/psx4m/keys";

40 
sched_a˘i⁄
 
	gemu_a˘i⁄
;

41 
do_emu_a˘i⁄
();

43 
	$Ch™geW‹kögDúe˘‹y
(*
exe
)

45 
exï©h
[1024];

46 *
s
;

47 
	`¢¥ötf
(
exï©h
, ”xï©h), "%s", 
exe
);

48 
s
 = 
	`°ºchr
(
exï©h
, '/');

49 i‡(
s
 !
NULL
) {

50 *
s
 = '\0';

51 
	`chdú
(
exï©h
);

53 
	}
}

55 
	$PrötHñp
()

57 
	`¥ötf
("PCSX-ReARMed vîsi⁄ %†f‹ M´mo\n\n", 
PACKAGE_VERSION
);

59 
	`¥ötf
("Usage:\n");

60 
	`¥ötf
("Öcsx [options] -cdfile FILE\n\n");

62 
	`¥ötf
("Options:\n");

63 
	`¥ötf
(" -help : This help\n");

64 
	`¥ötf
(" -disc VALUE : DiscÇumber for multi discs images\n");

65 
	`¥ötf
(" -fullscreen : Run fullscreen\n");

66 
	`¥ötf
(" -frameskip : Frameskip\n");

67 
	`¥ötf
(" -1=Auto (Default)\n");

68 
	`¥ötf
(" 0=Disabled\n");

69 
	`¥ötf
(" 1=SetÅo 1\n");

70 
	`¥ötf
(" ...\n");

71 
	`¥ötf
(" -autosave : Enableáuto save onÉxit\n");

72 
	`¥ötf
(" -accel : Enableáccelerometer\n");

73 
	`¥ötf
(" -analog : UseánalogÖad foráccel\n");

74 
	`¥ötf
(" -vibration : Activate vibration\n");

75 
	`¥ötf
(" -sens VALUE : Setáccelerometer sens [0-1000]\n");

76 
	`¥ötf
(" (Default 150)\n");

77 
	`¥ötf
(" -ydef VALUE : Setáccelerometer y zero [0-1000]\n");

78 
	`¥ötf
(" (Default 500)\n");

79 
	`¥ötf
(" -max VALUE : Setáccelerometer max value[0-1000]\n");

80 
	`¥ötf
(" (Default 500)\n");

81 
	`¥ötf
(" -nosound : No sound output\n");

82 
	`¥ötf
(" -bdir PATH : SetÅhe biosÖath\n");

83 
	`¥ötf
(" -pdir PATH : SetÅheÖluginsÖath\n");

84 
	`¥ötf
(" -bios : SetÅhe bios\n");

85 
	`¥ötf
(" -cdda : Disable CD Audio foráÖerformance boost\n");

86 
	`¥ötf
(" -xa : Disables XA sound, which can sometimes\n");

87 
	`¥ötf
(" improveÖerformance\n");

88 
	`¥ötf
(" -sio : SIO IRQ Always Enabled\n");

89 
	`¥ötf
(" -spuirq : SPU IRQ Always Enabled\n");

90 
	`¥ötf
(" -fps : Show fps\n");

91 
	`¥ötf
(" -cpu : Show CPUÜoad\n");

92 
	`¥ötf
(" -spu : Show SPU channels\n");

93 
	`¥ötf
(" -nofl : Disable Frame Limiter\n");

94 
	`¥ötf
(" -mcd1 FILE : Set memory card 1 file\n");

95 
	`¥ötf
(" -mcd2 FILE : Set memory card 2 file\n");

96 
	`¥ötf
(" -region VALUE : Set PSXÑegion\n");

97 
	`¥ötf
(" -1=Auto (Default)\n");

98 
	`¥ötf
(" 0=NTSC\n");

99 
	`¥ötf
(" 1=PAL\n");

100 
	`¥ötf
(" -cpuclock VALUE: PSX CPU clock %% [1-500]\n");

101 
	`¥ötf
(" (Default 50)\n");

102 
	`¥ötf
(" -displayon : Prevent display from blanking\n");

103 
	`¥ötf
(" (Default disabled)\n");

104 
	`¥ötf
(" -keys FILE : File with keys configuration\n");

105 
	`¥ötf
(" (Default /opt/psx4m/keys)\n");

106 
	`¥ötf
(" -corners VALUE : Defineáctions for click onÅhe\n");

107 
	`¥ötf
(" display corners\n");

108 
	`¥ötf
(" VALUE isá four digitÇumber,ÉachÇumber\n");

109 
	`¥ötf
("Ñepresentá corner (topleft,Åopright,\n");

110 
	`¥ötf
(" bottomrightánd bottomleft\n");

111 
	`¥ötf
(" Actions:\n");

112 
	`¥ötf
(" 0=Noáction\n");

113 
	`¥ötf
(" 1=Save\n");

114 
	`¥ötf
(" 2=Load\n");

115 
	`¥ötf
(" 3=Change slot (+1)\n");

116 
	`¥ötf
(" 4=Change slot (-1)\n");

117 
	`¥ötf
(" 5=Quit\n");

118 
	`¥ötf
(" -guncon : SetÅhe controllerÅo guncon\n");

119 
	`¥ötf
(" -gunnotrigger : Don'tÅrigger (shoot) whenÅouching screen\n");

120 
	`¥ötf
(" 0=Auto (Default)\n");

121 
	`¥ötf
(" 1=On\n");

122 
	`¥ötf
(" 2=Off\n");

125 
	`¥ötf
("\nGPU Options:\n");

126 
	`¥ötf
(" -gles : UseÅhe GLESÖlugin (gpu_gles.so)\n");

127 
	`¥ötf
(" -oldgpu : UseÅheÖeopsÖlugin (gpu_peops.so)\n");

128 
	`¥ötf
(" -unai : UseÅhe unaiÖlugin (gpu_unai.so)\n");

130 
	`¥ötf
("\nSound Options:\n");

131 
	`¥ötf
(" -spu_reverb VALUE : Enable/disableÑeverb [0/1]\n");

132 
	`¥ötf
(" (Default disabled)\n");

133 
	`¥ötf
(" -spu_interpolation VALUE : Set interpolation mode\n");

134 
	`¥ötf
(" 0=None (Default)\n");

135 
	`¥ötf
(" 1=Simple\n");

136 
	`¥ötf
(" 2=Gaussian\n");

137 
	`¥ötf
(" 3=Cubic\n");

139 
	`¥ötf
("\nNeon Options (default GPU):\n");

140 
	`¥ötf
(" -enhance : Enable graphicÉnhancement\n");

142 
	`¥ötf
("\nGles Options:\n");

143 
	`¥ötf
(" -gles_dithering VALUE : Enable/disable dithering [0/1]\n");

144 
	`¥ötf
(" (Default disabled)\n");

145 
	`¥ötf
(" -gles_mask VALUE : Enable/disable mask detect [0/1]\n");

146 
	`¥ötf
(" (Default disabled)\n");

147 
	`¥ötf
(" -gles_filtering VALUE : Texture Filtering\n");

148 
	`¥ötf
(" 0=None (Default)\n");

149 
	`¥ötf
(" 1=Standard\n");

150 
	`¥ötf
(" 2=Extended\n");

151 
	`¥ötf
(" 3=Standard-sprites\n");

152 
	`¥ötf
(" 4=Extended-sprites\n");

153 
	`¥ötf
(" 5=Standard+sprites\n");

154 
	`¥ötf
(" 6=Extended+sprites\n");

155 
	`¥ötf
(" -gles_fbtex VALUE : Framebuffer Textures\n");

156 
	`¥ötf
(" 0=Emulated VRam (Default)\n");

157 
	`¥ötf
(" 1=Black\n");

158 
	`¥ötf
(" 2=Card\n");

159 
	`¥ötf
(" 3=Card+soft\n");

160 
	`¥ötf
(" -gles_vram VALUE : Texture RAM size in MB [4-128]\n");

161 
	`¥ötf
(" (Default 64)\n");

162 
	`¥ötf
(" -gles_fastmdec VALUE : Enable/disable Fast Mdec [0/1]\n");

163 
	`¥ötf
(" (Default disabled)\n");

164 
	`¥ötf
(" -gles_advblend VALUE : Enable/disable Adv. Blend [0/1]\n");

165 
	`¥ötf
(" (Default disabled)\n");

166 
	`¥ötf
(" -gles_opaque VALUE : Enable/disable Opaque Pass [0/1]\n");

167 
	`¥ötf
(" (Default disabled)\n");

168 
	}
}

170 
	$maö
(
¨gc
, **
¨gv
)

172 i‡(
¨gc
 =1 || (¨g¯=2 && (!
	`°rcmp
(
¨gv
[1], "--help") || !strcmp(argv[1], "-help") || !strcmp(argv[1], "-h")))) {

173 
	`PrötHñp
();

177 
	`emu_c‹e_¥eöô
();

178 
	`Ch™geW‹kögDúe˘‹y
("c");

179 
fûe
[
MAXPATHLEN
] = "";

180 
∑th
[
MAXPATHLEN
];

181 c⁄° *
cdfûe
 = 
NULL
;

182 
lﬂd°
 = 0;

183 
i
;

184 
gë°
 = -1;

185 
discNumbî
 = 0;

187 
g_míus¸ìn_w
 = 800;

188 
g_míus¸ìn_h
 = 480;

190 
	`°r˝y
(
C⁄fig
.
Gpu
, "builtin_gpu");

191 
	`°r˝y
(
C⁄fig
.
Spu
, "builtin_spu");

192 
	`°r˝y
(
C⁄fig
.
BiosDú
, "/home/user/MyDocs");

193 
	`°r˝y
(
C⁄fig
.
PlugösDú
, "/opt/maemo/usr/games/plugins");

194 
	`¢¥ötf
(
C⁄fig
.
P©chesDú
, (C⁄fig.P©chesDú), "/›t/m´mo/u§/games" 
PATCHES_DIR
);

195 
C⁄fig
.
PsxAuto
 = 1;

196 
∂_ª¨med_cbs
.
‰ameskù
 = -1;

197 
	`°r˝y
(
C⁄fig
.
Bios
, "HLE");

198 
•u_c⁄fig
.
iU£Revîb
 = 1;

199 
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
 = 1;

201 
ö_ty≥1
 = 
PSE_PAD_TYPE_STANDARD
;

202 
ö_ty≥2
 = 
PSE_PAD_TYPE_STANDARD
;

204 
ac˚lO±i⁄s
.
£ns
 = 150;

205 
ac˚lO±i⁄s
.
y_def
 = 500;

206 
ac˚lO±i⁄s
.
maxVÆue
 = 500.0;

209 
i
 = 1; i < 
¨gc
; i++) {

210 i‡(!
	`°rcmp
(
¨gv
[
i
], "-psxout")Ë
C⁄fig
.
PsxOut
 = 1;

211 i‡(!
	`°rcmp
(
¨gv
[
i
], "-lﬂd")Ë
lﬂd°
 = 
	`©ﬁ
(argv[++i]);

212 i‡(!
	`°rcmp
(
¨gv
[
i
], "-cdfile")) {

213 
isofûíame
[
MAXPATHLEN
];

214 i‡(
i
+1 >
¨gc
) ;

215 
	`°∫˝y
(
isofûíame
, 
¨gv
[++
i
], 
MAXPATHLEN
);

216 i‡(
isofûíame
[0] != '/') {

217 
	`gëcwd
(
∑th
, 
MAXPATHLEN
);

218 i‡(
	`°æí
(
∑th
Ë+ såÀn(
isofûíame
Ë+ 1 < 
MAXPATHLEN
) {

219 
	`°rˇt
(
∑th
, "/");

220 
	`°rˇt
(
∑th
, 
isofûíame
);

221 
	`°r˝y
(
isofûíame
, 
∑th
);

223 
isofûíame
[0] = 0;

225 
cdfûe
 = 
isofûíame
;

227 i‡(!
	`°rcmp
(
¨gv
[
i
],"-frameskip")) {

228 
tv_ªg
 = 
	`©ﬁ
(
¨gv
[++
i
]);

229 i‡(
tv_ªg
 < -1)

230 
∂_ª¨med_cbs
.
‰ameskù
 = -1;

232 
∂_ª¨med_cbs
.
‰ameskù
 = 
tv_ªg
;

234 i‡(!
	`°rcmp
(
¨gv
[
i
],"-region")) {

235 
psx_ªg
 = 
	`©ﬁ
(
¨gv
[++
i
]);

236 i‡(
psx_ªg
 == 0 ||Ösx_reg == 1){

237 
C⁄fig
.
PsxAuto
 = 0;

238 
C⁄fig
.
PsxTy≥
 = 
psx_ªg
;

242 i‡(!
	`°rcmp
(
¨gv
[
i
],"-gë_s°©íame")Ë
gë°
 = 
	`©ﬁ
(argv[++i]);

244 i‡(!
	`°rcmp
(
¨gv
[
i
], "-fuŒs¸ìn")Ë
g_m´mo_›ts
 |= 2;

245 i‡(!
	`°rcmp
(
¨gv
[
i
], "-ac˚l")Ë
g_m´mo_›ts
 |= 4;

246 i‡(!
	`°rcmp
(
¨gv
[
i
], "-nosound")Ë
	`°r˝y
(
C⁄fig
.
Spu
, "spunull.so");

247 i‡(!
	`°rcmp
(
¨gv
[
i
], "-bdú")Ë
	`•rötf
(
C⁄fig
.
BiosDú
, "%s",árgv[++i]);

248 i‡(!
	`°rcmp
(
¨gv
[
i
], "-pdú")Ë
	`•rötf
(
C⁄fig
.
PlugösDú
, "%s",árgv[++i]);

249 i‡(!
	`°rcmp
(
¨gv
[
i
], "-bios")Ë
	`•rötf
(
C⁄fig
.
Bios
, "%s",árgv[++i]);

250 i‡(!
	`°rcmp
(
¨gv
[
i
], "-gÀs")Ë{ 
	`°r˝y
(
C⁄fig
.
Gpu
, "gpu_gÀs.so"); 
g_m´mo_›ts
 |= 8 ;}

251 i‡(!
	`°rcmp
(
¨gv
[
i
], "-ﬁdgpu")Ë
	`°r˝y
(
C⁄fig
.
Gpu
, "gpu_peops.so");

252 i‡(!
	`°rcmp
(
¨gv
[
i
], "-u«i")Ë
	`°r˝y
(
C⁄fig
.
Gpu
, "gpu_unai.so");

253 i‡(!
	`°rcmp
(
¨gv
[
i
], "-cdda")Ë
C⁄fig
.
Cdda
 = 1;

254 i‡(!
	`°rcmp
(
¨gv
[
i
], "-xa")Ë
C⁄fig
.
Xa
 = 1;

255 i‡(!
	`°rcmp
(
¨gv
[
i
], "-r˙t")Ë
C⁄fig
.
RC¡Fix
 = 1 ;

256 i‡(!
	`°rcmp
(
¨gv
[
i
], "-sio")Ë
C⁄fig
.
Sio
 = 1;

257 i‡(!
	`°rcmp
(
¨gv
[
i
], "-•uúq")Ë
C⁄fig
.
SpuIrq
 = 1;

258 i‡(!
	`°rcmp
(
¨gv
[
i
], "-vsync")Ë
C⁄fig
.
VSyncWA
 = 1;

259 i‡(!
	`°rcmp
(
¨gv
[
i
], "-Âs")Ë
g_›ts
 |=
OPT_SHOWFPS
;

260 i‡(!
	`°rcmp
(
¨gv
[
i
], "-˝u")Ë
g_›ts
 |=
OPT_SHOWCPU
;

261 i‡(!
	`°rcmp
(
¨gv
[
i
], "-•u")Ë
g_›ts
 |=
OPT_SHOWSPU
;

262 i‡(!
	`°rcmp
(
¨gv
[
i
], "-noÊ")Ë
g_›ts
 |=
OPT_NO_FRAMELIM
;

263 i‡(!
	`°rcmp
(
¨gv
[
i
], "-mcd1")Ë
	`•rötf
(
C⁄fig
.
Mcd1
, "%s",árgv[++i]);

264 i‡(!
	`°rcmp
(
¨gv
[
i
], "-mcd2")Ë
	`•rötf
(
C⁄fig
.
Mcd2
, "%s",árgv[++i]);

266 i‡(!
	`°rcmp
(
¨gv
[
i
], "-˝u˛ock")Ë
cy˛e_mu…ùlõr
 = 10000 / 
	`©ﬁ
(argv[++i]);

267 i‡(!
	`°rcmp
(
¨gv
[
i
], "-gunc⁄")Ë
ö_ty≥1
 = 
PSE_PAD_TYPE_GUNCON
;

268 i‡(!
	`°rcmp
(
¨gv
[
i
], "-gu¬Ÿriggî")Ë
g_›ts
 |
OPT_TSGUN_NOTRIGGER
;

269 i‡(!
	`°rcmp
(
¨gv
[
i
], "-™Æog")Ë
ö_ty≥1
 = 
PSE_PAD_TYPE_ANALOGPAD
;

270 i‡(!
	`°rcmp
(
¨gv
[
i
], "-vibøti⁄")Ë{ 
ö_ty≥1
 = 
PSE_PAD_TYPE_ANALOGPAD
; 
ö_íabÀ_vibøti⁄
 = 1; }

271 i‡(!
	`°rcmp
(
¨gv
[
i
], "-£ns")Ë
ac˚lO±i⁄s
.
£ns
 = 
	`©ﬁ
(argv[++i]);

272 i‡(!
	`°rcmp
(
¨gv
[
i
], "-ydef")Ë
ac˚lO±i⁄s
.
y_def
 = 
	`©ﬁ
(argv[++i]);

273 i‡(!
	`°rcmp
(
¨gv
[
i
], "-max")Ë
ac˚lO±i⁄s
.
maxVÆue
 = 
	`©ﬁ
(argv[++i]);

274 i‡(!
	`°rcmp
(
¨gv
[
i
], "-di•œy⁄")Ë
bKìpDi•œyOn
 = 
TRUE
;

275 i‡(!
	`°rcmp
(
¨gv
[
i
], "-keys")Ë
	`•rötf
(
keys_c⁄fig_fûe
, "%s",árgv[++i]);

276 i‡(!
	`°rcmp
(
¨gv
[
i
], "-autoßve")Ë
bAutoßveOnExô
 = 
TRUE
;

277 i‡(!
	`°rcmp
(
¨gv
[
i
], "-disc")Ë
discNumbî
 = 
	`©ﬁ
(argv[++i]);

278 i‡(!
	`°rcmp
(
¨gv
[
i
], "-corners")){

279 
j
 = 0;

280 
i
++;

281 
num
[2];

282 
j
=0; j<
	`°æí
(
¨gv
[
i
]); j++){

283 
	`°∫˝y
(
num
, 
¨gv
[
i
] + 
j
, 1);

284 
c‹√rA˘i⁄s
[
j
] = 
	`©oi
(
num
);

288 i‡(!
	`°rcmp
(
¨gv
[
i
], "-•u_ªvîb")Ë
•u_c⁄fig
.
iU£Revîb
 = 
	`©ﬁ
(argv[++i]);

289 i‡(!
	`°rcmp
(
¨gv
[
i
], "-•u_öãΩﬁ©i⁄")Ë
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
 = 
	`©ﬁ
(argv[++i]);

291 i‡(!
	`°rcmp
(
¨gv
[
i
], "-íh™˚")Ë
∂_ª¨med_cbs
.
gpu_√⁄
.
íh™˚mít_íabÀ
 = 1;

292 i‡(!
	`°rcmp
(
¨gv
[
i
], "-íh™˚hack")Ë
∂_ª¨med_cbs
.
gpu_√⁄
.
íh™˚mít_no_maö
 = 1;

294 i‡(!
	`°rcmp
(
¨gv
[
i
], "-gÀs_dôhîög")Ë
∂_ª¨med_cbs
.
gpu_≥›sgl
.
bDøwDôhî
 = 
	`©ﬁ
(argv[++i]);

295 i‡(!
	`°rcmp
(
¨gv
[
i
], "-gÀs_mask")Ë
∂_ª¨med_cbs
.
gpu_≥›sgl
.
iU£Mask
 = 
	`©ﬁ
(argv[++i]);

296 i‡(!
	`°rcmp
(
¨gv
[
i
], "-gÀs_fûãrög")Ë
∂_ª¨med_cbs
.
gpu_≥›sgl
.
iFûãrTy≥
 = 
	`©ﬁ
(argv[++i]);

297 i‡(!
	`°rcmp
(
¨gv
[
i
], "-gÀs_fbãx")Ë
∂_ª¨med_cbs
.
gpu_≥›sgl
.
iFømeTexTy≥
 = 
	`©ﬁ
(argv[++i]);

298 i‡(!
	`°rcmp
(
¨gv
[
i
], "-gÀs_vøm")Ë
∂_ª¨med_cbs
.
gpu_≥›sgl
.
iVRamSize
 = 
	`©ﬁ
(argv[++i]);

299 i‡(!
	`°rcmp
(
¨gv
[
i
], "-gÀs_Á°mdec")Ë
∂_ª¨med_cbs
.
gpu_≥›sgl
.
bU£Fa°Mdec
 = 
	`©ﬁ
(argv[++i]);

300 i‡(!
	`°rcmp
(
¨gv
[
i
], "-gÀs_advbÀnd")Ë
∂_ª¨med_cbs
.
gpu_≥›sgl
.
bAdv™˚dBÀnd
 = 
	`©ﬁ
(argv[++i]);

301 i‡(!
	`°rcmp
(
¨gv
[
i
], "-gÀs_›aque")Ë
∂_ª¨med_cbs
.
gpu_≥›sgl
.
bO∑quePass
 = 
	`©ﬁ
(argv[++i]);

304 
	`Ârötf
(
°dîr
, "Unknow¿›ti⁄: %s\n", 
¨gv
[
i
]);

309 
	`∂_öô
();

310 i‡(
	`emu_c‹e_öô
() == -1)

313 i‡(
cdfûe
) {

314 
	`£t_cd_image
(
cdfûe
);

315 
	`°r˝y
(
fûe_«me
, 
	`°ºchr
(
cdfûe
,'/'));

318 i‡(
	`LﬂdPlugös
() == -1) {

319 
	`SysMesßge
("FailedÜoadingÖlugins!");

323 i‡(
discNumbî
 > 0)

324 
cdrIsoMu…idiskSñe˘
 = 
discNumbî
 - 1;

326 i‡(
	`O≥nPlugös
() == -1) {

329 
	`∂ugö_ˇŒ_ª¨med_cbs
();

331 
	`CheckCdrom
();

333 i‡(
gë°
 >= 0){

334 
‚ame
[
MAXPATHLEN
];

336 
	`gë_°©e_fûíame
(
‚ame
, (‚ame), 
gë°
);

337 
	`¥ötf
("SAVESTATE: %s\n", 
‚ame
);

338 i‡(
cdrIsoMu…idiskCou¡
 > 1){

339 
i
 = 0;

340 
i
=1; i<
cdrIsoMu…idiskCou¡
; i++){

341 
cdrIsoMu…idiskSñe˘
 = 
i
;

342 
CdromId
[0] = '\0';

343 
CdromLabñ
[0] = '\0';

345 
	`CDR_˛o£
();

346 i‡(
	`CDR_›í
() == 0){

347 
	`CheckCdrom
();

348 
	`gë_°©e_fûíame
(
‚ame
, (‚ame), 
gë°
);

349 
	`¥ötf
("SAVESTATE: %s\n", 
‚ame
);

356 
	`SysRe£t
();

358 i‡(
fûe
[0] != '\0') {

359 i‡(
	`Lﬂd
(
fûe
) != -1)

360 
ªady_to_go
 = 1;

362 i‡(
cdfûe
) {

363 i‡(
	`LﬂdCdrom
() == -1) {

364 
	`Clo£Plugös
();

365 
	`¥ötf
(
	`_
("CouldÇotÜoad CD-ROM!\n"));

368 
	`emu_⁄_√w_cd
(0);

369 
ªady_to_go
 = 1;

373 i‡(!
ªady_to_go
) {

374 
	`¥ötf
 ("something goes wrong, maybe you forgot -cdfile ? \n");

378 i‡(
cdrIsoMu…idiskCou¡
 > 1)

379 
	`¥ötf
 ("Lﬂdedá mu…idis¯image: %òdiscs.\n", 
cdrIsoMu…idiskCou¡
);

382 i‡(
lﬂd°
) {

383 
ªt
 = 
	`emu_lﬂd_°©e
(
lﬂd°
 - 1);

384 
	`¥ötf
("%†°©ê%d\n", 
ªt
 ? "FaûedÅÿlﬂd" : "Lﬂded", 
lﬂd°
);

385 
°©e_¶Ÿ
 = 
lﬂd°
 - 1;

388 i‡(
	`m´mo_öô
(&
¨gc
, &
¨gv
))

391 i‡(
GPU_›í
 !
NULL
) {

392 
ªt
 = 
	`GPU_›í
(&
gpuDi•
, "PCSX", 
NULL
);

393 i‡(
ªt
){

394 
	`Ârötf
(
°dîr
, "W¨nög: GPU_›íÑëu∫ed %d\n", 
ªt
);

395 
gpuDi•
=
ªt
;

399 i‡(
C⁄fig
.
HLE
)

400 
	`¥ötf
("Note:Ñunning without BIOS,Éxpect compatibilityÖroblems\n");

402 
	`dföput_a˘iv©e
();

403 
	`∂_timög_¥ï¨e
(
C⁄fig
.
PsxTy≥
);

407 
°›
 = 0;

408 
emu_a˘i⁄
 = 
SACTION_NONE
;

410 
psxCpu
->
	`Execuã
();

411 i‡(
emu_a˘i⁄
 !
SACTION_NONE
)

412 
	`do_emu_a˘i⁄
();

415 
	`m´mo_föish
();

417 
	}
}

	@plugins/cdrcimg/cdrcimg.c

11 
	~<°dio.h
>

12 
	~<°rög.h
>

13 
	~<°dlib.h
>

14 
	~<zlib.h
>

15 #i‚de‡
_WIN32


16 
	#CALLBACK


	)

17 
	~<dlf˙.h
>

19 
	#WIN32_LEAN_AND_MEAN


	)

20 
	~<wödows.h
>

23 
	~"cdrcimg.h
"

25 
	#PFX
 "cdrcimg: "

	)

26 
	#îr
(
f
, ...Ë
	`Ârötf
(
°dîr
, 
PFX
 f, ##
__VA_ARGS__
)

	)

28 
	#CD_FRAMESIZE_RAW
 2352

	)

31 
	mCDRC_ZLIB
,

32 
	mCDRC_ZLIB2
,

33 
	mCDRC_BZ
,

36 c⁄° *
	gcd_‚ame
;

37 *
	gcd_ödex_èbÀ
;

38 
	gcd_ödex_Àn
;

39 
	gcd_£˘‹s_≥r_blk
;

40 
	gcd_com¥essi⁄
;

41 
FILE
 *
	gcd_fûe
;

43 (*
pBZ2_bzBuffToBuffDecom¥ess
)(*
de°
, *
de°Lí
, *
sour˚
,

44 
sour˚Lí
, 
smÆl
, 
vîbosôy
);

47 
øw
[16][
CD_FRAMESIZE_RAW
];

48 
com¥es£d
[
CD_FRAMESIZE_RAW
 * 16 + 100];

49 } *
cdbuf„r
;

50 
cuºít_block
, 
cuºít_£˘_ö_blk
;

52 
CdrSèt
;

53 
CALLBACK
 
	`CDR__gëSètus
(
CdrSèt
 *
°©
);

55 
	sCdrSèt


57 
Ty≥
;

58 
Sètus
;

59 
Time
[3];

62 
	såacköfo
 {

63 íum {
DATA
, 
CDDA
} 
ty≥
;

64 
°¨t
[3];

65 
Àngth
[3];

68 
	#MAXTRACKS
 100

	)

70 
numåacks
 = 0;

72 
	#btoi
(
b
Ë((bË/ 16 * 10 + (bË% 16Ë

	)

73 
	#MSF2SECT
(
m
, 
s
, 
f
Ë(((mË* 60 + (sË- 2Ë* 75 + (f))

	)

79 
	$CDRgëTN
(*
buf„r
)

81 
buf„r
[0] = 1;

82 
buf„r
[1] = 
numåacks
 > 0 ?Çumtracks : 1;

85 
	}
}

92 
	$CDRgëTD
(
åack
, *
buf„r
)

94 
buf„r
[2] = 0;

95 
buf„r
[1] = 2;

96 
buf„r
[0] = 0;

99 
	}
}

101 
	$uncom¥ess2
(*
out
, *
out_size
, *
ö
, 
ö_size
)

103 
z_°ªam
 
z
;

104 
ªt
 = 0;

106 i‡(
z
.
zÆloc
 =
NULL
) {

108 
z
.
√xt_ö
 = 
Z_NULL
;

109 
z
.
avaû_ö
 = 0;

110 
z
.
zÆloc
 = 
Z_NULL
;

111 
z
.
z‰ì
 = 
Z_NULL
;

112 
z
.
›aque
 = 
Z_NULL
;

113 
ªt
 = 
	`öÊ©eInô2
(&
z
, -15);

116 
ªt
 = 
	`öÊ©eRe£t
(&
z
);

117 i‡(
ªt
 !
Z_OK
)

118  
ªt
;

120 
z
.
√xt_ö
 = 
ö
;

121 
z
.
avaû_ö
 = 
ö_size
;

122 
z
.
√xt_out
 = 
out
;

123 
z
.
avaû_out
 = *
out_size
;

125 
ªt
 = 
	`öÊ©e
(&
z
, 
Z_NO_FLUSH
);

128 *
out_size
 -
z
.
avaû_out
;

129  
ªt
 == 1 ? 0 :Ñet;

130 
	}
}

135 
	$CDRªadTøck
(*
time
)

137 
°¨t_byã
, 
size
;

138 
cdbuf„r_size
;

139 
ªt
, 
£˘‹
, 
block
;

141 i‡(
cd_fûe
 =
NULL
)

144 
£˘‹
 = 
	`MSF2SECT
(
	`btoi
(
time
[0]), btoi(time[1]), btoi(time[2]));

147 
cd_£˘‹s_≥r_blk
) {

149 
block
 = 
£˘‹
;

150 
cuºít_£˘_ö_blk
 = 0;

153 
block
 = 
£˘‹
 / 10;

154 
cuºít_£˘_ö_blk
 = 
£˘‹
 % 10;

157 
block
 = 
£˘‹
 >> 4;

158 
cuºít_£˘_ö_blk
 = 
£˘‹
 & 15;

161 
	`îr
("unh™dÀd cd_£˘‹s_≥r_blk: %d\n", 
cd_£˘‹s_≥r_blk
);

165 i‡(
block
 =
cuºít_block
) {

171 i‡(
£˘‹
 >
cd_ödex_Àn
 * 
cd_£˘‹s_≥r_blk
) {

172 
	`îr
("£˘‹ %d i†∑°ÅøckÉnd\n", 
£˘‹
);

176 
°¨t_byã
 = 
cd_ödex_èbÀ
[
block
];

177 i‡(
	`f£ek
(
cd_fûe
, 
°¨t_byã
, 
SEEK_SET
) != 0) {

178 
	`îr
("seekÉrror for block %dát %x: ",

179 
block
, 
°¨t_byã
);

180 
	`≥º‹
(
NULL
);

184 
size
 = 
cd_ödex_èbÀ
[
block
 + 1] - 
°¨t_byã
;

185 i‡(
size
 > (
cdbuf„r
->
com¥es£d
)) {

186 
	`îr
("block %d i†toÿœrge: %u\n", 
block
, 
size
);

190 i‡(
	`‰ód
(
cdbuf„r
->
com¥es£d
, 1, 
size
, 
cd_fûe
) != size) {

191 
	`îr
("ªadÉº‹ f‹ block %dáà%x: ", 
block
, 
°¨t_byã
);

192 
	`≥º‹
(
NULL
);

196 
cdbuf„r_size
 = (
cdbuf„r
->
øw
[0]Ë* 
cd_£˘‹s_≥r_blk
;

197 
cd_com¥essi⁄
) {

198 
CDRC_ZLIB
:

199 
ªt
 = 
	`uncom¥ess
(
cdbuf„r
->
øw
[0], &
cdbuf„r_size
, cdbuf„r->
com¥es£d
, 
size
);

201 
CDRC_ZLIB2
:

202 
ªt
 = 
	`uncom¥ess2
(
cdbuf„r
->
øw
[0], &
cdbuf„r_size
, cdbuf„r->
com¥es£d
, 
size
);

204 
CDRC_BZ
:

205 
ªt
 = 
	`pBZ2_bzBuffToBuffDecom¥ess
((*)
cdbuf„r
->
øw
, (*)&
cdbuf„r_size
,

206 (*)
cdbuf„r
->
com¥es£d
, 
size
, 0, 0);

209 
	`îr
("bad cd_com¥essi⁄: %d\n", 
cd_com¥essi⁄
);

213 i‡(
ªt
 != 0) {

214 
	`îr
("uncompress failed with %d for block %d, sector %d\n",

215 
ªt
, 
block
, 
£˘‹
);

218 i‡(
cdbuf„r_size
 !(
cdbuf„r
->
øw
[0]Ë* 
cd_£˘‹s_≥r_blk
)

219 
	`îr
("cdbuf„r_size: %lu !%d, se˘‹ %d\n", 
cdbuf„r_size
,

220 ()(
cdbuf„r
->
øw
[0]Ë* 
cd_£˘‹s_≥r_blk
, 
£˘‹
);

223 
cuºít_block
 = 
block
;

225 
	}
}

228 *
	$CDRgëBuf„r
()

230  
cdbuf„r
->
øw
[
cuºít_£˘_ö_blk
] + 12;

231 
	}
}

236 
	$CDR∂ay
(*
time
)

239 
	}
}

242 
	$CDR°›
()

245 
	}
}

248 * 
	$CDRgëBuf„rSub
()

250  
NULL
;

251 
	}
}

253 
	$CDRgëSètus
(
CdrSèt
 *
°©
) {

254 
	`CDR__gëSètus
(
°©
);

256 
°©
->
Ty≥
 = 0x01;

259 
	}
}

261 
	$CDR˛o£
()

263 i‡(
cd_fûe
 !
NULL
) {

264 
	`f˛o£
(
cd_fûe
);

265 
cd_fûe
 = 
NULL
;

267 i‡(
cd_ödex_èbÀ
 !
NULL
) {

268 
	`‰ì
(
cd_ödex_èbÀ
);

269 
cd_ödex_èbÀ
 = 
NULL
;

272 
	}
}

274 
	$CDRshutdown
()

276  
	`CDR˛o£
();

277 
	}
}

279 
	$CDRöô
()

281 i‡(
cdbuf„r
 =
NULL
) {

282 
cdbuf„r
 = 
	`mÆloc
((*cdbuffer));

283 i‡(
cdbuf„r
 =
NULL
) {

284 
	`îr
("OOM\n");

288 #i‚de‡
_WIN32


289 i‡(
pBZ2_bzBuffToBuffDecom¥ess
 =
NULL
) {

290 *
h
 = 
	`dl›í
("/u§/lib/libbz2.so.1", 
RTLD_LAZY
);

291 i‡(
h
 =
NULL
)

292 
h
 = 
	`dl›í
("./lib/libbz2.so.1", 
RTLD_LAZY
);

293 i‡(
h
 !
NULL
) {

294 
pBZ2_bzBuffToBuffDecom¥ess
 = 
	`dlsym
(
h
, "BZ2_bzBuffToBuffDecompress");

295 i‡(
pBZ2_bzBuffToBuffDecom¥ess
 =
NULL
) {

296 
	`îr
("dlsym bz2: %s", 
	`dÀº‹
());

297 
	`dl˛o£
(
h
);

303 
	}
}

305 
	$h™dÀ_eboŸ
()

308 
sig
;

309 
d⁄tˇª
[8];

310 
pßr_offs
;

311 } 
pbp_hdr
;

313 
off£t
;

314 
size
;

315 
d⁄tˇª
[6];

316 } 
ödex_íåy
;

317 
pßr_sig
[9];

318 
cdimg_ba£
;

319 
i
, 
ªt
;

320 
FILE
 *
f
;

322 
f
 = 
	`f›í
(
cd_‚ame
, "rb");

323 i‡(
f
 =
NULL
) {

324 
	`îr
("missög fûe: %s: ", 
cd_‚ame
);

325 
	`≥º‹
(
NULL
);

329 
ªt
 = 
	`‰ód
(&
pbp_hdr
, 1, ’bp_hdr), 
f
);

330 i‡(
ªt
 !(
pbp_hdr
)) {

331 
	`îr
("failedÅoÑeadÖbp\n");

332 
Áû_io
;

335 
ªt
 = 
	`f£ek
(
f
, 
pbp_hdr
.
pßr_offs
, 
SEEK_SET
);

336 i‡(
ªt
 != 0) {

337 
	`îr
("ÁûedÅÿ£ekÅÿ%x\n", 
pbp_hdr
.
pßr_offs
);

338 
Áû_io
;

341 
ªt
 = 
	`‰ód
(
pßr_sig
, 1, ’ßr_sig), 
f
);

342 i‡(
ªt
 !(
pßr_sig
)) {

343 
	`îr
("failedÅoÑeadÖsar_sig\n");

344 
Áû_io
;

347 
pßr_sig
[8] = 0;

348 i‡(
	`°rcmp
(
pßr_sig
, "PSISOIMG") != 0) {

349 
	`îr
("badÖßr_sig: %s\n", 
pßr_sig
);

350 
Áû_io
;

354 
ªt
 = 
	`f£ek
(
f
, 0x4000 - (
pßr_sig
), 
SEEK_CUR
);

355 i‡(
ªt
 != 0) {

356 
	`îr
("failedÅo seekÅo ISO index\n");

357 
Áû_io
;

360 
cd_ödex_Àn
 = (0x100000 - 0x4000Ë/ (
ödex_íåy
);

361 
cd_ödex_èbÀ
 = 
	`mÆloc
((
cd_ödex_Àn
 + 1) * (cd_index_table[0]));

362 i‡(
cd_ödex_èbÀ
 =
NULL
)

363 
Áû_io
;

365 
cdimg_ba£
 = 
pbp_hdr
.
pßr_offs
 + 0x100000;

366 
i
 = 0; i < 
cd_ödex_Àn
; i++) {

367 
ªt
 = 
	`‰ód
(&
ödex_íåy
, 1, (ödex_íåy), 
f
);

368 i‡(
ªt
 !(
ödex_íåy
)) {

369 
	`îr
("ÁûedÅÿªad index_íåy #%d\n", 
i
);

370 
Áû_ödex
;

373 i‡(
ödex_íåy
.
size
 == 0)

376 
cd_ödex_èbÀ
[
i
] = 
cdimg_ba£
 + 
ödex_íåy
.
off£t
;

378 
cd_ödex_èbÀ
[
i
] = 
cdimg_ba£
 + 
ödex_íåy
.
off£t
 + index_íåy.
size
;

380 
cd_com¥essi⁄
 = 
CDRC_ZLIB2
;

381 
cd_£˘‹s_≥r_blk
 = 16;

382 
cd_fûe
 = 
f
;

384 
	`¥ötf
(
PFX
 "Lﬂded EBOOT CD Image: %s.\n", 
cd_‚ame
);

387 
Áû_ödex
:

388 
	`‰ì
(
cd_ödex_èbÀ
);

389 
cd_ödex_èbÀ
 = 
NULL
;

390 
Áû_io
:

391 
	`f˛o£
(
f
);

393 
	}
}

397 
	$CDR›í
()

401 
off£t
;

402 
size
;

403 } 
	`__©åibuã__
((
∑cked
)Ë
zèb_íåy
;

405 
off£t
;

406 
size
;

407 
d⁄tˇª
;

408 } 
	`__©åibuã__
((
∑cked
)Ë
znxèb_íåy
;

409 
bzèb_íåy
;

410 } 
u
;

411 
èbíåy_size
;

412 
èbÀ_‚ame
[256];

413 
èbÀ_size
;

414 
i
, 
ªt
;

415 *
ext
;

416 
FILE
 *
f
 = 
NULL
;

418 i‡(
cd_fûe
 !
NULL
)

421 
numåacks
 = 0;

422 
cuºít_block
 = -1;

423 
cuºít_£˘_ö_blk
 = 0;

425 i‡(
cd_‚ame
 =
NULL
)

428 
ext
 = 
	`°ºchr
(
cd_‚ame
, '.');

429 i‡(
ext
 =
NULL
)

432 i‡(
	`°rˇ£cmp
(
ext
, ".pbp") == 0) {

433  
	`h™dÀ_eboŸ
();

437 i‡(
	`°rˇ£cmp
(
ext
, ".z") == 0) {

438 
cd_com¥essi⁄
 = 
CDRC_ZLIB
;

439 
èbíåy_size
 = (
u
.
zèb_íåy
);

440 
	`¢¥ötf
(
èbÀ_‚ame
, —abÀ_‚ame), "%s.èbÀ", 
cd_‚ame
);

442 i‡(
	`°rˇ£cmp
(
ext
, ".znx") == 0) {

443 
cd_com¥essi⁄
 = 
CDRC_ZLIB
;

444 
èbíåy_size
 = (
u
.
znxèb_íåy
);

445 
	`¢¥ötf
(
èbÀ_‚ame
, —abÀ_‚ame), "%s.èbÀ", 
cd_‚ame
);

447 i‡(
	`°rˇ£cmp
(
ext
, ".bz") == 0) {

448 i‡(
pBZ2_bzBuffToBuffDecom¥ess
 =
NULL
) {

449 
	`îr
("libbz2 unavailable for .bz2 handling\n");

452 
cd_com¥essi⁄
 = 
CDRC_BZ
;

453 
èbíåy_size
 = (
u
.
bzèb_íåy
);

454 
	`¢¥ötf
(
èbÀ_‚ame
, —abÀ_‚ame), "%s.ödex", 
cd_‚ame
);

457 
	`îr
("unh™dÀdÉxãnsi⁄: %s\n", 
ext
);

461 
f
 = 
	`f›í
(
èbÀ_‚ame
, "rb");

462 i‡(
f
 =
NULL
) {

463 
	`îr
("missög fûe: %s: ", 
èbÀ_‚ame
);

464 
	`≥º‹
(
NULL
);

468 
ªt
 = 
	`f£ek
(
f
, 0, 
SEEK_END
);

469 i‡(
ªt
 != 0) {

470 
	`îr
("failedÅo seek\n");

471 
Áû_èbÀ_io
;

473 
èbÀ_size
 = 
	`·ñl
(
f
);

474 
	`f£ek
(
f
, 0, 
SEEK_SET
);

476 i‡(
èbÀ_size
 > 4 * 1024 * 1024) {

477 
	`îr
(".tableÅooÜarge\n");

478 
Áû_èbÀ_io
;

481 
cd_ödex_Àn
 = 
èbÀ_size
 / 
èbíåy_size
;

483 
cd_ödex_èbÀ
 = 
	`mÆloc
((
cd_ödex_Àn
 + 1) * (cd_index_table[0]));

484 i‡(
cd_ödex_èbÀ
 =
NULL
)

485 
Áû_èbÀ_io
;

487 
cd_com¥essi⁄
) {

488 
CDRC_ZLIB
:

494 
u
.
znxèb_íåy
.
d⁄tˇª
 = 0;

495 
i
 = 0; i < 
cd_ödex_Àn
; i++) {

496 
ªt
 = 
	`‰ód
(&
u
, 1, 
èbíåy_size
, 
f
);

497 i‡(
ªt
 !
èbíåy_size
) {

498 
	`îr
(".èbÀÑód faûed o¿íåy %d/%d\n", 
i
, 
cd_ödex_Àn
);

499 
Áû_èbÀ_io_ªad
;

501 
cd_ödex_èbÀ
[
i
] = 
u
.
zèb_íåy
.
off£t
;

506 
cd_ödex_èbÀ
[
i
] = 
u
.
zèb_íåy
.
off£t
 + u.zèb_íåy.
size
;

507 
cd_£˘‹s_≥r_blk
 = 1;

509 
CDRC_BZ
:

514 
i
 = 0; i < 
cd_ödex_Àn
; i++) {

515 
ªt
 = 
	`‰ód
(&
u
.
bzèb_íåy
, 1, (u.bzèb_íåy), 
f
);

516 i‡(
ªt
 !(
u
.
bzèb_íåy
)) {

517 
	`îr
(".èbÀÑód faûed o¿íåy %d/%d\n", 
i
, 
cd_ödex_Àn
);

518 
Áû_èbÀ_io_ªad
;

520 
cd_ödex_èbÀ
[
i
] = 
u
.
bzèb_íåy
;

522 
cd_£˘‹s_≥r_blk
 = 10;

526 
cd_fûe
 = 
	`f›í
(
cd_‚ame
, "rb");

527 i‡(
cd_fûe
 =
NULL
) {

528 
	`îr
("ÁûedÅÿ›í: %s: ", 
èbÀ_‚ame
);

529 
	`≥º‹
(
NULL
);

530 
Áû_img
;

532 
	`f˛o£
(
f
);

534 
	`¥ötf
(
PFX
 "Lﬂded com¥es£d CD Image: %s.\n", 
cd_‚ame
);

538 
Áû_img
:

539 
Áû_èbÀ_io_ªad
:

540 
	`‰ì
(
cd_ödex_èbÀ
);

541 
cd_ödex_èbÀ
 = 
NULL
;

542 
Áû_èbÀ_io
:

543 
	`f˛o£
(
f
);

545 
	}
}

547 
	#FUNC
(
n
Ë{ #n,Ç }

	)

550 c⁄° *
	m«me
;

551 *
	mfunc
;

552 } 
	g∂ugö_funcs
[] = {

554 
FUNC
(
CDRöô
),

555 
FUNC
(
CDRshutdown
),

556 
FUNC
(
CDR›í
),

557 
FUNC
(
CDR˛o£
),

558 
FUNC
(
CDRgëTN
),

559 
FUNC
(
CDRgëTD
),

560 
FUNC
(
CDRªadTøck
),

561 
FUNC
(
CDRgëBuf„r
),

562 
FUNC
(
CDRgëBuf„rSub
),

563 
FUNC
(
CDR∂ay
),

564 
FUNC
(
CDR°›
),

565 
FUNC
(
CDRgëSètus
),

568 
	$cdrcimg_£t_‚ame
(c⁄° *
‚ame
)

570 
cd_‚ame
 = 
‚ame
;

571 
	}
}

573 *
	$cdrcimg_gë_sym
(c⁄° *
sym
)

575 
i
;

576 
i
 = 0; i < (
∂ugö_funcs
) / (plugin_funcs[0]); i++)

577 i‡(
	`°rcmp
(
∂ugö_funcs
[
i
].
«me
, 
sym
) == 0)

578  
∂ugö_funcs
[
i
].
func
;

579  
NULL
;

580 
	}
}

	@plugins/cdrcimg/cdrcimg.h

2 
cdrcimg_£t_‚ame
(c⁄° *
‚ame
);

3 *
cdrcimg_gë_sym
(c⁄° *
sym
);

	@plugins/dfinput/externals.h

2 
dföput_a˘iv©e
();

6 
	#GUNIN_TRIGGER
 (1<<0)

	)

7 
	#GUNIN_BTNA
 (1<<1)

	)

8 
	#GUNIN_BTNB
 (1<<2)

	)

9 
	#GUNIN_TRIGGER2
 (1<<3Ë

	)

10 
∂_upd©e_gun
(*
xn
, *
yn
, *
xªs
, *
yªs
, *
ö
);

13 
ö_íabÀ_vibøti⁄
;

14 
∂©_åiggî_vibøã
(
∑d
, 
low
, 
high
);

	@plugins/dfinput/guncon.c

11 
	~<°rög.h
>

12 
	~"maö.h
"

14 
	gbuf
[8];

16 
	$PADpﬁl_gunc⁄
(
vÆue
)

18 i‡(
CurByã
 == 0) {

19 
CurCmd
 = 
vÆue
;

20 
CurByã
++;

24 i‡(
CurCmd
 !0x42 || 
CurByã
 >= 8)

27  
buf
[
CurByã
++];

28 
	}
}

30 
	$PAD°¨tPﬁl_gunc⁄
(
∑d
)

32 
x
, 
y
, 
xn
 = 0, 
yn
 = 0, 
ö
 = 0, 
xªs
 = 256, 
yªs
 = 240;

33 
CurByã
 = 0;

35 
buf
[2] = buf[3] = 0xff;

36 
	`∂_upd©e_gun
(&
xn
, &
yn
, &
xªs
, &
yªs
, &
ö
);

41 
x
 = 0x5®- (
xªs
 - 256Ë/ 3 + (((xª†- 256Ë/ 3 + 356Ë* 
xn
 >> 10);

42 
y
 = 0x20 + (
yªs
 * 
yn
 >> 10);

44 i‡(
ö
 & 
GUNIN_TRIGGER
)

45 
buf
[3] &= ~0x20;

46 i‡(
ö
 & 
GUNIN_BTNA
)

47 
buf
[2] &= ~0x08;

48 i‡(
ö
 & 
GUNIN_BTNB
)

49 
buf
[3] &= ~0x40;

50 i‡(
ö
 & 
GUNIN_TRIGGER2
) {

51 
buf
[3] &= ~0x20;

52 
x
 = 1;

53 
y
 = 10;

55 
buf
[4] = 
x
;

56 
buf
[5] = 
x
 >> 8;

57 
buf
[6] = 
y
;

58 
buf
[7] = 
y
 >> 8;

61 
	}
}

63 
	$gunc⁄_öô
()

65 
	`mem£t
(
buf
, 0xff, (buf));

66 
buf
[1] = 0x5a;

67 
	}
}

	@plugins/dfinput/main.c

11 #i‚de‡
_WIN32


12 
	#CALLBACK


	)

14 
	#WIN32_LEAN_AND_MEAN


	)

15 
	~<wödows.h
>

18 
	~"maö.h
"

20 
	gCurPad
, 
	gCurByã
, 
	gCurCmd
, 
	gCmdLí
;

23 *
PAD1_°¨tPﬁl
, *
PAD1_pﬁl
;

24 *
PAD2_°¨tPﬁl
, *
PAD2_pﬁl
;

25 
CALLBACK
 
PAD1__°¨tPﬁl
(
∑d
);

26 
CALLBACK
 
PAD2__°¨tPﬁl
(
∑d
);

27 
CALLBACK
 
PAD1__pﬁl
(
vÆue
);

28 
CALLBACK
 
PAD2__pﬁl
(
vÆue
);

30 
	gﬁd_c⁄åﬁÀr_ty≥1
 = -1, 
	gﬁd_c⁄åﬁÀr_ty≥2
 = -1;

32 
	#£À˘_∑d
(
n
) \

33 i‡(
∑d
.
c⁄åﬁÀrTy≥
 !
ﬁd_c⁄åﬁÀr_ty≥
##
n
) \

35 
∑d
.
c⁄åﬁÀrTy≥
) \

37 
PSE_PAD_TYPE_ANALOGPAD
: \

38 
PAD
##
n
##
_°¨tPﬁl
 = 
PAD°¨tPﬁl_∑d
; \

39 
PAD
##
n
##
_pﬁl
 = 
PADpﬁl_∑d
; \

40 
	`∑d_öô
(); \

42 
PSE_PAD_TYPE_GUNCON
: \

43 
PAD
##
n
##
_°¨tPﬁl
 = 
PAD°¨tPﬁl_gunc⁄
; \

44 
PAD
##
n
##
_pﬁl
 = 
PADpﬁl_gunc⁄
; \

45 
	`gunc⁄_öô
(); \

47 
PSE_PAD_TYPE_GUN
: \

49 
PAD
##
n
##
_°¨tPﬁl
 = PAD##n##
__°¨tPﬁl
; \

50 
PAD
##
n
##
_pﬁl
 = PAD##n##
__pﬁl
; \

53 }

	)

55 
	$dföput_a˘iv©e
()

57 
PadD©aS
 
∑d
;

59 
	`PAD1_ªadP‹t1
(&
∑d
);

60 
	`£À˘_∑d
(1);

62 
	`PAD2_ªadP‹t2
(&
∑d
);

63 
	`£À˘_∑d
(2);

64 
	}
}

	@plugins/dfinput/main.h

1 
	~"p£mu_∂ugö_defs.h
"

2 
	~"exã∫Æs.h
"

4 
CurPad
, 
CurByã
, 
CurCmd
, 
CmdLí
;

7 
PADpﬁl_∑d
(
vÆue
);

8 
PAD°¨tPﬁl_∑d
(
∑d
);

9 
∑d_öô
();

12 
PADpﬁl_gunc⁄
(
vÆue
);

13 
PAD°¨tPﬁl_gunc⁄
(
∑d
);

14 
gunc⁄_öô
();

17 (*
PAD1_ªadP‹t1
)(
PadD©aS
 *
∑d
);

18 (*
PAD2_ªadP‹t2
)(
PadD©aS
 *
∑d
);

	@plugins/dfinput/pad.c

22 
	~<°döt.h
>

24 
	~"p£mu_∂ugö_defs.h
"

25 
	~"maö.h
"

28 
	mANALOG_LEFT
 = 0,

29 
	mANALOG_RIGHT
,

31 
	mANALOG_TOTAL


35 
	mCMD_READ_DATA_AND_VIBRATE
 = 0x42,

36 
	mCMD_CONFIG_MODE
 = 0x43,

37 
	mCMD_SET_MODE_AND_LOCK
 = 0x44,

38 
	mCMD_QUERY_MODEL_AND_MODE
 = 0x45,

39 
	mCMD_QUERY_ACT
 = 0x46,

40 
	mCMD_QUERY_COMB
 = 0x47,

41 
	mCMD_QUERY_MODE
 = 0x4C,

42 
	mCMD_VIBRATION_TOGGLE
 = 0x4D,

46 
uöt8_t
 
	mPadMode
;

47 
uöt8_t
 
	mPadID
;

48 
uöt8_t
 
	mC⁄figMode
;

49 
PadD©aS
 
	m∑d
;

50 } 
	g∑d°©e
[2];

52 
uöt8_t
 
	g°d∑r
[2][8] = {

57 
uöt8_t
 
	gunk46
[2][8] = {

62 
uöt8_t
 
	gunk47
[2][8] = {

67 
uöt8_t
 
	gunk4c
[2][8] = {

72 
uöt8_t
 
	gunk4d
[2][8] = {

77 
uöt8_t
 
	g°dcfg
[2][8] = {

82 
uöt8_t
 
	g°dmode
[2][8] = {

87 
uöt8_t
 
	g°dmodñ
[2][8] = {

106 
uöt8_t
 *
	gbuf
;

108 
uöt8_t
 
	$do_cmd
()

110 
PadD©aS
 *
∑d
 = &
∑d°©e
[
CurPad
].pad;

111 
∑d_num
 = 
CurPad
;

113 
CmdLí
 = 8;

114 
CurCmd
) {

115 
CMD_SET_MODE_AND_LOCK
:

116 
buf
 = 
°dmode
[
∑d_num
];

119 
CMD_QUERY_MODEL_AND_MODE
:

120 
buf
 = 
°dmodñ
[
∑d_num
];

121 
buf
[4] = 
∑d°©e
[
∑d_num
].
PadMode
;

124 
CMD_QUERY_ACT
:

125 
buf
 = 
unk46
[
∑d_num
];

128 
CMD_QUERY_COMB
:

129 
buf
 = 
unk47
[
∑d_num
];

132 
CMD_QUERY_MODE
:

133 
buf
 = 
unk4c
[
∑d_num
];

136 
CMD_VIBRATION_TOGGLE
:

137 
buf
 = 
unk4d
[
∑d_num
];

140 
CMD_CONFIG_MODE
:

141 i‡(
∑d°©e
[
∑d_num
].
C⁄figMode
) {

142 
buf
 = 
°dcfg
[
∑d_num
];

147 
CMD_READ_DATA_AND_VIBRATE
:

149 
buf
 = 
°d∑r
[
∑d_num
];

151 
buf
[2] = 
∑d
->
buâ⁄Sètus
;

152 
buf
[3] = 
∑d
->
buâ⁄Sètus
 >> 8;

154 i‡(
∑d°©e
[
∑d_num
].
PadMode
 == 1) {

155 
buf
[4] = 
∑d
->
rightJoyX
;

156 
buf
[5] = 
∑d
->
rightJoyY
;

157 
buf
[6] = 
∑d
->
À·JoyX
;

158 
buf
[7] = 
∑d
->
À·JoyY
;

160 
CmdLí
 = 4;

163  
∑d°©e
[
∑d_num
].
PadID
;

165 
	}
}

167 
	$do_cmd2
(
vÆue
)

169 
CurCmd
) {

170 
CMD_CONFIG_MODE
:

171 
∑d°©e
[
CurPad
].
C⁄figMode
 = 
vÆue
;

174 
CMD_SET_MODE_AND_LOCK
:

175 
∑d°©e
[
CurPad
].
PadMode
 = 
vÆue
;

176 
∑d°©e
[
CurPad
].
PadID
 = 
vÆue
 ? 0x73 : 0x41;

179 
CMD_QUERY_ACT
:

180 
vÆue
) {

182 
buf
[5] = 0x02;

183 
buf
[6] = 0x00;

184 
buf
[7] = 0x0A;

188 
buf
[5] = 0x01;

189 
buf
[6] = 0x01;

190 
buf
[7] = 0x14;

195 
CMD_QUERY_MODE
:

196 
vÆue
) {

198 
buf
[5] = 
PSE_PAD_TYPE_STANDARD
;

202 
buf
[5] = 
PSE_PAD_TYPE_ANALOGPAD
;

207 
	}
}

209 
	$do_vibøti⁄
(
vÆue
)

211 
ch™ged
 = 0;

212 
i
;

214 
CurCmd
) {

215 
CMD_READ_DATA_AND_VIBRATE
:

216 
i
 = 0; i < 2; i++) {

217 i‡(
∑d°©e
[
CurPad
].
∑d
.
Vib
[
i
] =
CurByã


218 && 
∑d°©e
[
CurPad
].
∑d
.
VibF
[
i
] !
vÆue
) {

219 
∑d°©e
[
CurPad
].
∑d
.
VibF
[
i
] = 
vÆue
;

220 
ch™ged
 = 1;

224 i‡(!
ö_íabÀ_vibøti⁄
 || !
ch™ged
)

227 
	`∂©_åiggî_vibøã
(
CurPad
,

228 
∑d°©e
[
CurPad
].
∑d
.
VibF
[0],

229 
∑d°©e
[
CurPad
].
∑d
.
VibF
[1]);

231 
CMD_VIBRATION_TOGGLE
:

232 
i
 = 0; i < 2; i++) {

233 i‡(
∑d°©e
[
CurPad
].
∑d
.
Vib
[
i
] =
CurByã
)

234 
buf
[
CurByã
] = 0;

236 i‡(
vÆue
 < 2) {

237 
∑d°©e
[
CurPad
].
∑d
.
Vib
[
vÆue
] = 
CurByã
;

238 if((
∑d°©e
[
CurPad
].
PadID
 & 0x0fË< (
CurByã
 - 1) / 2) {

239 
∑d°©e
[
CurPad
].
PadID
 = (∑d°©e[CurPad].PadID & 0xf0Ë+ (
CurByã
 - 1) / 2;

244 
	}
}

247 
	~<°dio.h
>

248 
PADpﬁl_
(
vÆue
);

249 
	$PADpﬁl
(
vÆue
) {

250 
b
 = 
CurByã
, 
r
 = 
	`PADpﬁl_
(
vÆue
);

251 
	`¥ötf
("pﬁl[%d] %02x %02x\n", 
b
, 
vÆue
, 
r
);

252  
r
;

253 
	}
}

254 
	#PADpﬁl
 
PADpﬁl_


	)

257 
	$PADpﬁl_∑d
(
vÆue
) {

258 i‡(
CurByã
 == 0) {

259 
CurCmd
 = 
vÆue
;

260 
CurByã
++;

263 i‡(
∑d°©e
[
CurPad
].
∑d
.
c⁄åﬁÀrTy≥
 !
PSE_PAD_TYPE_ANALOGPAD
)

264 
CurCmd
 = 
CMD_READ_DATA_AND_VIBRATE
;

266  
	`do_cmd
();

269 i‡(
CurByã
 >
CmdLí
)

272 i‡(
CurByã
 == 2)

273 
	`do_cmd2
(
vÆue
);

275 i‡(
∑d°©e
[
CurPad
].
∑d
.
c⁄åﬁÀrTy≥
 =
PSE_PAD_TYPE_ANALOGPAD
)

276 
	`do_vibøti⁄
(
vÆue
);

278  
buf
[
CurByã
++];

279 
	}
}

281 
	$PAD°¨tPﬁl_∑d
(
∑d
) {

282 
CurPad
 = 
∑d
 - 1;

283 
CurByã
 = 0;

285 i‡(
∑d
 == 1)

286 
	`PAD1_ªadP‹t1
(&
∑d°©e
[0].
∑d
);

288 
	`PAD2_ªadP‹t2
(&
∑d°©e
[1].
∑d
);

291 
	}
}

293 
	$∑d_öô
()

295 
i
;

297 
	`PAD1_ªadP‹t1
(&
∑d°©e
[0].
∑d
);

298 
	`PAD2_ªadP‹t2
(&
∑d°©e
[1].
∑d
);

300 
i
 = 0; i < 2; i++) {

301 
∑d°©e
[
i
].
PadID
 =Öad°©e[i].
∑d
.
c⁄åﬁÀrTy≥
 =
PSE_PAD_TYPE_ANALOGPAD
 ? 0x73 : 0x41;

302 
∑d°©e
[
i
].
PadMode
 =Öad°©e[i].
∑d
.
c⁄åﬁÀrTy≥
 =
PSE_PAD_TYPE_ANALOGPAD
;

304 
	}
}

	@plugins/dfsound/adsr.c

18 
	~"°dafx.h
"

20 
	#_IN_ADSR


	)

23 #ifde‡
_IN_SPU


29 
	gR©eTabÀAdd
[128];

30 
	gR©eTabÀSub
[128];

32 
	$InôADSR
()

34 
lcv
, 
díom
;

37 
lcv
 = 0;Ücv < 48;Ücv++)

39 
R©eTabÀAdd
[
lcv
] = (7 - (lcv&3)) << (11 + 16 - (lcv >> 2));

40 
R©eTabÀSub
[
lcv
] = (-8 + (lcv&3)) << (11 + 16 - (lcv >> 2));

43 ; 
lcv
 < 128;Ücv++)

45 
díom
 = 1 << ((
lcv
>>2) - 11);

47 
R©eTabÀAdd
[
lcv
] = ((7 - (lcv&3)Ë<< 16Ë/ 
díom
;

48 
R©eTabÀSub
[
lcv
] = ((-8 + (lcv&3)Ë<< 16Ë/ 
díom
;

51 i‡(
R©eTabÀAdd
[
lcv
] == 0)

52 
R©eTabÀAdd
[
lcv
] = 1;

54 
	}
}

58 
INLINE
 
	$SèπADSR
(
ch
)

60 
•u
.
s_ch™
[
ch
].
ADSRX
.
Sèã
 = 
ADSR_ATTACK
;

61 
•u
.
s_ch™
[
ch
].
ADSRX
.
Envñ›eVﬁ
 = 0;

62 
	}
}

66 
	$MixADSR
(
ADSRInfoEx
 *
ad§
, 
ns_to
)

68 
Envñ›eVﬁ
 = 
ad§
->EnvelopeVol;

69 
ns
 = 0, 
vÆ
, 
πo
, 
Àvñ
;

71 i‡(
ad§
->
Sèã
 =
ADSR_RELEASE
)

73 
vÆ
 = 
R©eTabÀSub
[
ad§
->
Rñó£R©e
 * 4];

75 i‡(
ad§
->
Rñó£ModeExp
)

77 ; 
ns
 < 
ns_to
;Çs++)

79 
Envñ›eVﬁ
 +(()
vÆ
 * EnvelopeVol) >> (15+16);

80 i‡(
Envñ›eVﬁ
 <= 0)

83 
Ch™Buf
[
ns
] *
Envñ›eVﬁ
 >> 21;

84 
Ch™Buf
[
ns
] >>= 10;

89 ; 
ns
 < 
ns_to
;Çs++)

91 
Envñ›eVﬁ
 +
vÆ
;

92 i‡(
Envñ›eVﬁ
 <= 0)

95 
Ch™Buf
[
ns
] *
Envñ›eVﬁ
 >> 21;

96 
Ch™Buf
[
ns
] >>= 10;

100 
d⁄e
;

103 
ad§
->
Sèã
)

105 
ADSR_ATTACK
:

106 
πo
 = 0;

107 i‡(
ad§
->
AâackModeExp
 && 
Envñ›eVﬁ
 >= 0x60000000)

108 
πo
 = 8;

109 
vÆ
 = 
R©eTabÀAdd
[
ad§
->
AâackR©e
 + 
πo
];

111 ; 
ns
 < 
ns_to
;Çs++)

113 
Envñ›eVﬁ
 +
vÆ
;

114 i‡(
Envñ›eVﬁ
 < 0)

117 
Ch™Buf
[
ns
] *
Envñ›eVﬁ
 >> 21;

118 
Ch™Buf
[
ns
] >>= 10;

121 i‡(
Envñ›eVﬁ
 < 0)

123 
Envñ›eVﬁ
 = 0x7fffffff;

124 
ad§
->
Sèã
 = 
ADSR_DECAY
;

125 
ns
++;

126 
deˇy
;

131 
deˇy
:

132 
ADSR_DECAY
:

133 
vÆ
 = 
R©eTabÀSub
[
ad§
->
DeˇyR©e
 * 4];

134 
Àvñ
 = 
ad§
->
Su°aöLevñ
;

136 ; 
ns
 < 
ns_to
; )

138 
Envñ›eVﬁ
 +(()
vÆ
 * EnvelopeVol) >> (15+16);

139 i‡(
Envñ›eVﬁ
 < 0)

140 
Envñ›eVﬁ
 = 0;

142 
Ch™Buf
[
ns
] *
Envñ›eVﬁ
 >> 21;

143 
Ch™Buf
[
ns
] >>= 10;

144 
ns
++;

146 i‡(((
Envñ›eVﬁ
 >> 27Ë& 0xfË<
Àvñ
)

148 
ad§
->
Sèã
 = 
ADSR_SUSTAIN
;

149 
su°aö
;

155 
su°aö
:

156 
ADSR_SUSTAIN
:

157 i‡(
ad§
->
Su°aöIn¸ó£
)

159 i‡(
Envñ›eVﬁ
 >= 0x7fff0000)

161 
ns
 = 
ns_to
;

165 
πo
 = 0;

166 i‡(
ad§
->
Su°aöModeExp
 && 
Envñ›eVﬁ
 >= 0x60000000)

167 
πo
 = 8;

168 
vÆ
 = 
R©eTabÀAdd
[
ad§
->
Su°aöR©e
 + 
πo
];

170 ; 
ns
 < 
ns_to
;Çs++)

172 
Envñ›eVﬁ
 +
vÆ
;

173 i‡(()
Envñ›eVﬁ
 >= 0x7fe00000)

175 
Envñ›eVﬁ
 = 0x7fffffff;

176 
ns
 = 
ns_to
;

180 
Ch™Buf
[
ns
] *
Envñ›eVﬁ
 >> 21;

181 
Ch™Buf
[
ns
] >>= 10;

186 
vÆ
 = 
R©eTabÀSub
[
ad§
->
Su°aöR©e
];

187 i‡(
ad§
->
Su°aöModeExp
)

189 ; 
ns
 < 
ns_to
;Çs++)

191 
Envñ›eVﬁ
 +(()
vÆ
 * EnvelopeVol) >> (15+16);

192 i‡(
Envñ›eVﬁ
 < 0)

195 
Ch™Buf
[
ns
] *
Envñ›eVﬁ
 >> 21;

196 
Ch™Buf
[
ns
] >>= 10;

201 ; 
ns
 < 
ns_to
;Çs++)

203 
Envñ›eVﬁ
 +
vÆ
;

204 i‡(
Envñ›eVﬁ
 < 0)

207 
Ch™Buf
[
ns
] *
Envñ›eVﬁ
 >> 21;

208 
Ch™Buf
[
ns
] >>= 10;

215 
d⁄e
:

216 
ad§
->
Envñ›eVﬁ
 = EnvelopeVol;

217  
ns
;

218 
	}
}

220 
	$SkùADSR
(
ADSRInfoEx
 *
ad§
, 
ns_to
)

222 
Envñ›eVﬁ
 = 
ad§
->EnvelopeVol;

223 
ns
 = 0, 
vÆ
, 
πo
, 
Àvñ
;

224 
öt64_t
 
v64
;

226 i‡(
ad§
->
Sèã
 =
ADSR_RELEASE
)

228 
vÆ
 = 
R©eTabÀSub
[
ad§
->
Rñó£R©e
 * 4];

229 i‡(
ad§
->
Rñó£ModeExp
)

231 ; 
ns
 < 
ns_to
;Çs++)

233 
Envñ›eVﬁ
 +(()
vÆ
 * EnvelopeVol) >> (15+16);

234 i‡(
Envñ›eVﬁ
 <= 0)

240 
v64
 = 
Envñ›eVﬁ
;

241 
v64
 +(
öt64_t
)
vÆ
 * 
ns_to
;

242 
Envñ›eVﬁ
 = ()
v64
;

243 i‡(
v64
 > 0)

244 
ns
 = 
ns_to
;

246 
d⁄e
;

249 
ad§
->
Sèã
)

251 
ADSR_ATTACK
:

252 
πo
 = 0;

253 i‡(
ad§
->
AâackModeExp
 && 
Envñ›eVﬁ
 >= 0x60000000)

254 
πo
 = 8;

255 
vÆ
 = 
R©eTabÀAdd
[
ad§
->
AâackR©e
 + 
πo
];

257 ; 
ns
 < 
ns_to
;Çs++)

259 
Envñ›eVﬁ
 +
vÆ
;

260 i‡(
Envñ›eVﬁ
 < 0)

263 i‡(
Envñ›eVﬁ
 < 0)

265 
Envñ›eVﬁ
 = 0x7fffffff;

266 
ad§
->
Sèã
 = 
ADSR_DECAY
;

267 
ns
++;

268 
deˇy
;

273 
deˇy
:

274 
ADSR_DECAY
:

275 
vÆ
 = 
R©eTabÀSub
[
ad§
->
DeˇyR©e
 * 4];

276 
Àvñ
 = 
ad§
->
Su°aöLevñ
;

278 ; 
ns
 < 
ns_to
; )

280 
Envñ›eVﬁ
 +(()
vÆ
 * EnvelopeVol) >> (15+16);

281 i‡(
Envñ›eVﬁ
 < 0)

282 
Envñ›eVﬁ
 = 0;

284 
ns
++;

286 i‡(((
Envñ›eVﬁ
 >> 27Ë& 0xfË<
Àvñ
)

288 
ad§
->
Sèã
 = 
ADSR_SUSTAIN
;

289 
su°aö
;

295 
su°aö
:

296 
ADSR_SUSTAIN
:

297 i‡(
ad§
->
Su°aöIn¸ó£
)

299 
ns
 = 
ns_to
;

301 i‡(
Envñ›eVﬁ
 >= 0x7fff0000)

304 
πo
 = 0;

305 i‡(
ad§
->
Su°aöModeExp
 && 
Envñ›eVﬁ
 >= 0x60000000)

306 
πo
 = 8;

307 
vÆ
 = 
R©eTabÀAdd
[
ad§
->
Su°aöR©e
 + 
πo
];

309 
v64
 = 
Envñ›eVﬁ
;

310 
v64
 +(
öt64_t
)
vÆ
 * (
ns_to
 - 
ns
);

311 
Envñ›eVﬁ
 = ()
v64
;

312 i‡(
v64
 >= 0x7fe00000ll)

313 
Envñ›eVﬁ
 = 0x7fffffff;

317 
vÆ
 = 
R©eTabÀSub
[
ad§
->
Su°aöR©e
];

318 i‡(
ad§
->
Su°aöModeExp
)

320 ; 
ns
 < 
ns_to
;Çs++)

322 
Envñ›eVﬁ
 +(()
vÆ
 * EnvelopeVol) >> (15+16);

323 i‡(
Envñ›eVﬁ
 < 0)

329 
v64
 = 
Envñ›eVﬁ
;

330 
v64
 +(
öt64_t
)
vÆ
 * (
ns_to
 - 
ns
);

331 
Envñ›eVﬁ
 = ()
v64
;

332 i‡(
v64
 > 0)

334 
ns
 = 
ns_to
;

342 
d⁄e
:

343 
ad§
->
Envñ›eVﬁ
 = EnvelopeVol;

344  
ns
;

345 
	}
}

	@plugins/dfsound/adsr.h

18 
INLINE
 
SèπADSR
(
ch
);

19 
INLINE
 
MixADSR
(
ch
);

	@plugins/dfsound/alsa.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	#ALSA_PCM_NEW_HW_PARAMS_API


	)

21 
	#ALSA_PCM_NEW_SW_PARAMS_API


	)

22 
	~<Æß/asoundlib.h
>

23 
	~"out.h
"

25 
¢d_pcm_t
 *
	gh™dÀ
 = 
NULL
;

26 
¢d_pcm_u‰ames_t
 
	gbuf„r_size
;

28 
Æß_föish
();

31 
	$Æß_öô
()

33 
¢d_pcm_hw_∑øms_t
 *
hw∑øms
;

34 
¢d_pcm_°©us_t
 *
°©us
;

35 
¢d_˘l_t
 *
˘l_h™dÀ
 = 
NULL
;

36 
¢d_˘l_ˇrd_öfo_t
 *
öfo
;

37 
p•ìd
;

38 
pch™√ls
;

39 
f‹m©
;

40 
buf„r_time
 = 100000;

41 
≥riod_time
 = 
buf„r_time
 / 4;

42 c⁄° *
Æß_«me
 = "default";

43 c⁄° *
«me
;

44 
ªtvÆ
 = -1;

45 
îr
;

47 
«me
 = 
	`gëív
("ALSA_NAME");

48 i‡(
«me
 !
NULL
)

49 
Æß_«me
 = 
«me
;

51 
	`¢d_˘l_ˇrd_öfo_Æloˇ
(&
öfo
);

52 i‡((
îr
 = 
	`¢d_˘l_›í
(&
˘l_h™dÀ
, 
Æß_«me
, 0)) < 0) {

53 
	`¥ötf
("c⁄åﬁ o≥n: %s\n", 
	`¢d_°ªº‹
(
îr
));

55 i‡((
îr
 = 
	`¢d_˘l_ˇrd_öfo
(
˘l_h™dÀ
, 
öfo
)) < 0) {

56 
	`¥ötf
("c⁄åﬁ info: %s\n", 
	`¢d_°ªº‹
(
îr
));

57 
	`¢d_˘l_ˇrd_öfo_˛ór
(
öfo
);

59 i‡(
˘l_h™dÀ
 !
NULL
)

60 
	`¢d_˘l_˛o£
(
˘l_h™dÀ
);

62 
«me
 = 
	`¢d_˘l_ˇrd_öfo_gë_«me
(
öfo
);

63 i‡(
«me
 !
NULL
) {

64 i‡(
	`°rˇ£cmp
(
«me
, "PulseAudio") == 0) {

66 
	`¥ötf
("alsa:ÑefusingÅoÑun under PulseAudio'sÉmulation\n");

70 
	`¥ötf
("Æß: usög '%s', së ALSA_NAMEÅÿch™ge\n", 
«me
);

74 
pch™√ls
=2;

76 
p•ìd
 = 44100;

77 
f‹m©
 = 
SND_PCM_FORMAT_S16
;

79 i‡((
îr
 = 
	`¢d_pcm_›í
(&
h™dÀ
, 
Æß_«me
,

80 
SND_PCM_STREAM_PLAYBACK
, 
SND_PCM_NONBLOCK
)) < 0)

82 
	`¥ötf
("Audiÿ›íÉº‹: %s\n", 
	`¢d_°ªº‹
(
îr
));

86 if((
îr
 = 
	`¢d_pcm_n⁄block
(
h™dÀ
, 0))<0)

88 
	`¥ötf
("C™'à£àblockög moded: %s\n", 
	`¢d_°ªº‹
(
îr
));

89 
out
;

92 
	`¢d_pcm_hw_∑øms_Æloˇ
(&
hw∑øms
);

94 if((
îr
=
	`¢d_pcm_hw_∑øms_™y
(
h™dÀ
, 
hw∑øms
))<0)

96 
	`¥ötf
("Brokí c⁄figuøti⁄ f‹Åhi†PCM: %s\n", 
	`¢d_°ªº‹
(
îr
));

97 
out
;

100 if((
îr
=
	`¢d_pcm_hw_∑øms_£t_ac˚ss
(
h™dÀ
, 
hw∑øms
, 
SND_PCM_ACCESS_RW_INTERLEAVED
))<0)

102 
	`¥ötf
("Ac˚s†ty≥ÇŸávaûabÀ: %s\n", 
	`¢d_°ªº‹
(
îr
));

103 
out
;

106 if((
îr
=
	`¢d_pcm_hw_∑øms_£t_f‹m©
(
h™dÀ
, 
hw∑øms
, 
f‹m©
))<0)

108 
	`¥ötf
("Sam∂êf‹m©ÇŸávaûabÀ: %s\n", 
	`¢d_°ªº‹
(
îr
));

109 
out
;

112 if((
îr
=
	`¢d_pcm_hw_∑øms_£t_ch™√ls
(
h™dÀ
, 
hw∑øms
, 
pch™√ls
))<0)

114 
	`¥ötf
("Ch™√l†cou¡ÇŸávaûabÀ: %s\n", 
	`¢d_°ªº‹
(
îr
));

115 
out
;

118 if((
îr
=
	`¢d_pcm_hw_∑øms_£t_øã_√¨
(
h™dÀ
, 
hw∑øms
, &
p•ìd
, 0))<0)

120 
	`¥ötf
("R©ênŸávaûabÀ: %s\n", 
	`¢d_°ªº‹
(
îr
));

121 
out
;

124 if((
îr
=
	`¢d_pcm_hw_∑øms_£t_buf„r_time_√¨
(
h™dÀ
, 
hw∑øms
, &
buf„r_time
, 0))<0)

126 
	`¥ötf
("Buf„∏timêîr‹: %s\n", 
	`¢d_°ªº‹
(
îr
));

127 
out
;

130 if((
îr
=
	`¢d_pcm_hw_∑øms_£t_≥riod_time_√¨
(
h™dÀ
, 
hw∑øms
, &
≥riod_time
, 0))<0)

132 
	`¥ötf
("PîiodÅimêîr‹: %s\n", 
	`¢d_°ªº‹
(
îr
));

133 
out
;

136 if((
îr
=
	`¢d_pcm_hw_∑øms
(
h™dÀ
, 
hw∑øms
))<0)

138 
	`¥ötf
("U«bÀÅÿö°Æ»hwÖ¨ams: %s\n", 
	`¢d_°ªº‹
(
îr
));

139 
out
;

142 
	`¢d_pcm_°©us_Æloˇ
(&
°©us
);

143 if((
îr
=
	`¢d_pcm_°©us
(
h™dÀ
, 
°©us
))<0)

145 
	`¥ötf
("U«bÀÅÿgë sètus: %s\n", 
	`¢d_°ªº‹
(
îr
));

146 
out
;

149 
buf„r_size
 = 
	`¢d_pcm_°©us_gë_avaû
(
°©us
);

150 
ªtvÆ
 = 0;

152 
out
:

153 i‡(
ªtvÆ
 != 0)

154 
	`Æß_föish
();

155  
ªtvÆ
;

156 
	}
}

159 
	$Æß_föish
()

161 if(
h™dÀ
 !
NULL
)

163 
	`¢d_pcm_dr›
(
h™dÀ
);

164 
	`¢d_pcm_˛o£
(
h™dÀ
);

165 
h™dÀ
 = 
NULL
;

167 
	}
}

170 
	$Æß_busy
()

172 
l
;

174 i‡(
h™dÀ
 =
NULL
)

176 
l
 = 
	`¢d_pcm_avaû
(
h™dÀ
);

177 i‡(
l
 < 0)  0;

178 i‡(
l
 < 
buf„r_size
 / 2)

179 
l
 = 1;

180 
l
 = 0;

182  
l
;

183 
	}
}

186 
	$Æß_„ed
(*
pSound
, 
lByãs
)

188 
sbuf
[4096];

190 i‡(
h™dÀ
 =
NULL
) ;

192 i‡(
	`¢d_pcm_°©e
(
h™dÀ
Ë=
SND_PCM_STATE_XRUN
)

194 
	`mem£t
(
sbuf
, 0, (sbuf));

195 
	`¢d_pcm_¥ï¨e
(
h™dÀ
);

196 
	`¢d_pcm_wrôei
(
h™dÀ
, 
sbuf
, (sbuf) / 4);

197 
	`¢d_pcm_wrôei
(
h™dÀ
, 
sbuf
, (sbuf) / 4);

198 
	`¢d_pcm_wrôei
(
h™dÀ
, 
sbuf
, (sbuf) / 4);

202 
l
 = 
	`¢d_pcm_avaû
(
h™dÀ
);

203 i‡(
l
 < 
lByãs
 / 4)

205 i‡(
l
 == 0)

208 
lByãs
 = 
l
 * 4;

212 
	`¢d_pcm_wrôei
(
h™dÀ
, 
pSound
, 
lByãs
 / 4);

213 
	}
}

215 
	$out_ªgi°î_Æß
(
out_drivî
 *
drv
)

217 
drv
->
«me
 = "alsa";

218 
drv
->
öô
 = 
Æß_öô
;

219 
drv
->
föish
 = 
Æß_föish
;

220 
drv
->
busy
 = 
Æß_busy
;

221 
drv
->
„ed
 = 
Æß_„ed
;

222 
	}
}

	@plugins/dfsound/dma.c

18 
	~"°dafx.h
"

20 
	#_IN_DMA


	)

22 
	~"exã∫Æs.h
"

28 
CALLBACK
 
	$SPUªadDMA
()

30 
s
 = *(*)(
•u
.
•uMemC
 + spu.
•uAddr
);

31 
•u
.
•uAddr
 += 2;

32 
•u
.
•uAddr
 &= 0x7fffe;

34  
s
;

35 
	}
}

41 
CALLBACK
 
	$SPUªadDMAMem
(*
pusPSXMem
, 
iSize
,

42 
cy˛es
)

44 
i
;

46 
	`do_ßm∂es_if_√eded
(
cy˛es
, 1);

48 
i
=0;i<
iSize
;i++)

50 *
pusPSXMem
++ = *(*)(
•u
.
•uMemC
 + spu.
•uAddr
);

51 
•u
.
•uAddr
 += 2;

52 
•u
.
•uAddr
 &= 0x7fffe;

54 
	}
}

68 
CALLBACK
 
	$SPUwrôeDMA
(
vÆ
)

70 *(*)(
•u
.
•uMemC
 + spu.
•uAddr
Ë
vÆ
;

72 
•u
.
•uAddr
 += 2;

73 
•u
.
•uAddr
 &= 0x7fffe;

74 
•u
.
bMemDúty
 = 1;

75 
	}
}

81 
CALLBACK
 
	$SPUwrôeDMAMem
(*
pusPSXMem
, 
iSize
,

82 
cy˛es
)

84 
i
;

86 
	`do_ßm∂es_if_√eded
(
cy˛es
, 1);

87 
•u
.
bMemDúty
 = 1;

89 if(
•u
.
•uAddr
 + 
iSize
*2 < 0x80000)

91 
	`mem˝y
(
•u
.
•uMemC
 + spu.
•uAddr
, 
pusPSXMem
, 
iSize
*2);

92 
•u
.
•uAddr
 +
iSize
*2;

96 
i
=0;i<
iSize
;i++)

98 *(*)(
•u
.
•uMemC
 + spu.
•uAddr
Ë*
pusPSXMem
++;

99 
•u
.
•uAddr
 += 2;

100 
•u
.
•uAddr
 &= 0x7fffe;

102 
	}
}

	@plugins/dfsound/dma.h

28 
CALLBACK
 
SPUªadDMA
();

29 
CALLBACK
 
SPUªadDMAMem
(* 
pusPSXMem
,
iSize
);

30 
CALLBACK
 
SPUwrôeDMA
(
vÆ
);

31 
CALLBACK
 
SPUwrôeDMAMem
(* 
pusPSXMem
,
iSize
);

	@plugins/dfsound/externals.h

18 
	~<°döt.h
>

24 #ifde‡
__GNUC__


25 
	#noölöe
 
	`__©åibuã__
((
noölöe
))

	)

26 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
((x), 0)

	)

28 
	#noölöe


	)

29 
	#u∆ikñy
(
x
Ë
	)
x

31 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
_TMS320C6X
)

32 
	#¥ñﬂd
 
__buûtö_¥e„tch


	)

34 
	#¥ñﬂd
(...)

	)

37 
	#PSE_LT_SPU
 4

	)

38 
	#PSE_SPU_ERR_SUCCESS
 0

	)

39 
	#PSE_SPU_ERR
 -60

	)

40 
	#PSE_SPU_ERR_NOTCONFIGURED
 
PSE_SPU_ERR
 - 1

	)

41 
	#PSE_SPU_ERR_INIT
 
PSE_SPU_ERR
 - 2

	)

42 #i‚de‡
max


43 
	#max
(
a
,
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

44 
	#mö
(
a
,
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

52 
	#MAXCHAN
 24

	)

55 
	#NSSIZE
 ((44100 / 50 + 16Ë& ~1)

	)

61 
	eADSR_Sèã
 {

62 
	mADSR_ATTACK
 = 0,

63 
	mADSR_DECAY
 = 1,

64 
	mADSR_SUSTAIN
 = 2,

65 
	mADSR_RELEASE
 = 3,

71 
	mSèã
:2;

72 
	mAâackModeExp
:1;

73 
	mSu°aöModeExp
:1;

74 
	mSu°aöIn¸ó£
:1;

75 
	mRñó£ModeExp
:1;

76 
	mAâackR©e
;

77 
	mDeˇyR©e
;

78 
	mSu°aöLevñ
;

79 
	mSu°aöR©e
;

80 
	mRñó£R©e
;

81 
	mEnvñ›eVﬁ
;

82 } 
	tADSRInfoEx
;

89 
	#FLAG_MUTE
 1

	)

92 
	#FLAG_IPOL0
 2

	)

93 
	#FLAG_IPOL1
 4

	)

100 
	miSBPos
;

101 
	m•os
;

102 
	msöc
;

103 
	msöc_öv
;

105 * 
	mpCuº
;

106 * 
	mpLo›
;

108 
	mbRevîb
:1;

109 
	mbRVBA˘ive
:1;

110 
	mbNoi£
:1;

111 
	mbFMod
:2;

112 
	m¥evÊags
:3;

114 
	miLe·Vﬁume
;

115 
	miRightVﬁume
;

116 
ADSRInfoEx
 
	mADSRX
;

117 
	miRawPôch
;

118 } 
	tSPUCHAN
;

124 
	mSèπAddr
;

125 
	mCuºAddr
;

127 
	mVﬁLe·
;

128 
	mVﬁRight
;

130 
	mFB_SRC_A
;

131 
	mFB_SRC_B
;

132 
	mIIR_ALPHA
;

133 
	mACC_COEF_A
;

134 
	mACC_COEF_B
;

135 
	mACC_COEF_C
;

136 
	mACC_COEF_D
;

137 
	mIIR_COEF
;

138 
	mFB_ALPHA
;

139 
	mFB_X
;

140 
	mIIR_DEST_A0
;

141 
	mIIR_DEST_A1
;

142 
	mACC_SRC_A0
;

143 
	mACC_SRC_A1
;

144 
	mACC_SRC_B0
;

145 
	mACC_SRC_B1
;

146 
	mIIR_SRC_A0
;

147 
	mIIR_SRC_A1
;

148 
	mIIR_DEST_B0
;

149 
	mIIR_DEST_B1
;

150 
	mACC_SRC_C0
;

151 
	mACC_SRC_C1
;

152 
	mACC_SRC_D0
;

153 
	mACC_SRC_D1
;

154 
	mIIR_SRC_B1
;

155 
	mIIR_SRC_B0
;

156 
	mMIX_DEST_A0
;

157 
	mMIX_DEST_A1
;

158 
	mMIX_DEST_B0
;

159 
	mMIX_DEST_B1
;

160 
	mIN_COEF_L
;

161 
	mIN_COEF_R
;

163 
	mdúty
;

166 
	mFB_SRC_A0
, 
	mFB_SRC_A1
, 
	mFB_SRC_B0
, 
	mFB_SRC_B1
;

167 } 
	tREVERBInfo
;

173 
	#SB_SIZE
 (32 + 4)

	)

177 
	m•uCål
;

178 
	m•uSèt
;

180 
	m•uAddr
;

182 *
	m•uMemC
;

183 *
	m•uMem
;

185 * 
	mpSpuIrq
;

187 
	mcy˛es_∂ayed
;

188 
	mdecode_pos
;

189 
	mdecode_dúty_ch
;

190 
	mbSpuInô
:1;

191 
	mbSPUIsO≥n
:1;

192 
	mbMemDúty
:1;

194 
	mdwNoi£VÆ
;

195 
	mdwNoi£Cou¡
;

196 
	mdwNewCh™√l
;

197 
	mdwCh™√lOn
;

198 
	mdwCh™√lDód
;

200 * 
	mpSpuBuf„r
;

201 * 
	mpS
;

203 (
CALLBACK
 *
	múqCÆlback
)();

204 (
CALLBACK
 *
	mcddavCÆlback
)(,);

205 (
CALLBACK
 *
	mscheduÀCÆlback
)();

207 
xa_decode_t
 * 
	mx≠GlobÆ
;

208 * 
	mXAFìd
;

209 * 
	mXAPœy
;

210 * 
	mXASèπ
;

211 * 
	mXAEnd
;

213 * 
	mCDDAFìd
;

214 * 
	mCDDAPœy
;

215 * 
	mCDDASèπ
;

216 * 
	mCDDAEnd
;

218 
	mXARïót
;

219 
	mXALa°VÆ
;

221 
	miLe·XAVﬁ
;

222 
	miRightXAVﬁ
;

224 
SPUCHAN
 * 
	ms_ch™
;

225 
REVERBInfo
 * 
	mrvb
;

228 * 
	mSB
;

229 * 
	mSSumLR
;

231 
	m∑d
[29];

232 
	mªgAªa
[0x400];

233 } 
	tSPUInfo
;

239 #i‚de‡
_IN_SPU


241 
SPUInfo
 
•u
;

243 
do_ßm∂es
(
cy˛es_to
, 
do_sync
);

244 
scheduÀ_√xt_úq
();

246 
	#ªgAªaGë
(
ch
,
off£t
Ë\

	)

247 
	g•u
.
	gªgAªa
[((
ch
<<4)|(
off£t
))>>1]

249 
	#do_ßm∂es_if_√eded
(
c
, 
sync
Ë\

	)

251 i‡(
	gsync
 || ()((
	gc
Ë- 
	g•u
.
	gcy˛es_∂ayed
) >= 16 * 768) \

252 
do_ßm∂es
(
c
, 
sync
); \

	@plugins/dfsound/freeze.c

18 
	~"°dafx.h
"

20 
	#_IN_FREEZE


	)

22 
	~"exã∫Æs.h
"

23 
	~"ªgi°îs.h
"

24 
	~"•u.h
"

32 
	mAâackModeExp
;

33 
	mAâackTime
;

34 
	mDeˇyTime
;

35 
	mSu°aöLevñ
;

36 
	mSu°aöModeExp
;

37 
	mSu°aöModeDec
;

38 
	mSu°aöTime
;

39 
	mRñó£ModeExp
;

40 
	mRñó£VÆ
;

41 
	mRñó£Time
;

42 
	mRñó£SèπTime
;

43 
	mRñó£Vﬁ
;

44 
	mlTime
;

45 
	mlVﬁume
;

46 } 
	tADSRInfo
;

50 
	mSèã
;

51 
	mAâackModeExp
;

52 
	mAâackR©e
;

53 
	mDeˇyR©e
;

54 
	mSu°aöLevñ
;

55 
	mSu°aöModeExp
;

56 
	mSu°aöIn¸ó£
;

57 
	mSu°aöR©e
;

58 
	mRñó£ModeExp
;

59 
	mRñó£R©e
;

60 
	mEnvñ›eVﬁ
;

61 
	mlVﬁume
;

62 
	mlDummy1
;

63 
	mlDummy2
;

64 } 
	tADSRInfoEx_‹ig
;

71 
	mbNew
;

73 
	miSBPos
;

74 
	m•os
;

75 
	msöc
;

76 
	mSB
[32+32];

77 
	msvÆ
;

79 
	miSèπ
;

80 
	miCuº
;

81 
	miLo›
;

83 
	mbOn
;

84 
	mbSt›
;

85 
	mbRevîb
;

86 
	miA˘Fªq
;

87 
	miU£dFªq
;

88 
	miLe·Vﬁume
;

89 
	miLe·VﬁRaw
;

90 
	mbIgn‹eLo›
;

91 
	miMuã
;

92 
	miRightVﬁume
;

93 
	miRightVﬁRaw
;

94 
	miRawPôch
;

95 
	miIrqD⁄e
;

96 
	ms_1
;

97 
	ms_2
;

98 
	mbRVBA˘ive
;

99 
	miRVBOff£t
;

100 
	miRVBRïót
;

101 
	mbNoi£
;

102 
	mbFMod
;

103 
	miRVBNum
;

104 
	miOldNoi£
;

105 
ADSRInfo
 
	mADSR
;

106 
ADSRInfoEx_‹ig
 
	mADSRX
;

107 } 
	tSPUCHAN_‹ig
;

111 
	mszSPUName
[8];

112 
uöt32_t
 
	mulFªezeVîsi⁄
;

113 
uöt32_t
 
	mulFªezeSize
;

114 
	mcSPUP‹t
[0x200];

115 
	mcSPURam
[0x80000];

116 
xa_decode_t
 
	mxaS
;

117 } 
	tSPUFªeze_t
;

121 
	m•uIrq
;

122 
uöt32_t
 
	mpSpuIrq
;

123 
uöt32_t
 
	m•uAddr
;

124 
uöt32_t
 
	mdummy1
;

125 
uöt32_t
 
	mdummy2
;

126 
uöt32_t
 
	mdummy3
;

128 
SPUCHAN_‹ig
 
	ms_ch™
[
MAXCHAN
];

130 } 
	tSPUOSSFªeze_t
;

134 
LﬂdSèãV5
(
SPUFªeze_t
 * 
pF
);

135 
LﬂdSèãUnknown
(
SPUFªeze_t
 * 
pF
, 
uöt32_t
 
cy˛es
);

139 
	$ßve_ch™√l
(
SPUCHAN_‹ig
 *
d
, c⁄° 
SPUCHAN
 *
s
, 
ch
)

141 
	`mem£t
(
d
, 0, (*d));

142 
d
->
bNew
 = !!(
•u
.
dwNewCh™√l
 & (1<<
ch
));

143 
d
->
iSBPos
 = 
s
->iSBPos;

144 
d
->
•os
 = 
s
->spos;

145 
d
->
söc
 = 
s
->sinc;

146 
	`mem˝y
(
d
->
SB
, 
•u
.SB + 
ch
 * 
SB_SIZE
, (d->SB[0]) * SB_SIZE);

147 
d
->
iSèπ
 = (
	`ªgAªaGë
(
ch
,6)&~1)<<3;

148 
d
->
iCuº
 = 0;

149 
d
->
iLo›
 = 0;

150 
d
->
bOn
 = !!(
•u
.
dwCh™√lOn
 & (1<<
ch
));

151 
d
->
bSt›
 = 
s
->
ADSRX
.
Sèã
 =
ADSR_RELEASE
;

152 
d
->
bRevîb
 = 
s
->bReverb;

153 
d
->
iA˘Fªq
 = 1;

154 
d
->
iU£dFªq
 = 2;

155 
d
->
iLe·Vﬁume
 = 
s
->iLeftVolume;

157 
d
->
bIgn‹eLo›
 = (
s
->
¥evÊags
 ^ 2) << 1;

158 
d
->
iRightVﬁume
 = 
s
->iRightVolume;

159 
d
->
iRawPôch
 = 
s
->iRawPitch;

160 
d
->
s_1
 = 
•u
.
SB
[
ch
 * 
SB_SIZE
 + 27];

161 
d
->
s_2
 = 
•u
.
SB
[
ch
 * 
SB_SIZE
 + 26];

162 
d
->
bRVBA˘ive
 = 
s
->bRVBActive;

163 
d
->
bNoi£
 = 
s
->bNoise;

164 
d
->
bFMod
 = 
s
->bFMod;

165 
d
->
ADSRX
.
Sèã
 = 
s
->ADSRX.State;

166 
d
->
ADSRX
.
AâackModeExp
 = 
s
->ADSRX.AttackModeExp;

167 
d
->
ADSRX
.
AâackR©e
 = 
s
->ADSRX.AttackRate;

168 
d
->
ADSRX
.
DeˇyR©e
 = 
s
->ADSRX.DecayRate;

169 
d
->
ADSRX
.
Su°aöLevñ
 = 
s
->ADSRX.SustainLevel;

170 
d
->
ADSRX
.
Su°aöModeExp
 = 
s
->ADSRX.SustainModeExp;

171 
d
->
ADSRX
.
Su°aöIn¸ó£
 = 
s
->ADSRX.SustainIncrease;

172 
d
->
ADSRX
.
Su°aöR©e
 = 
s
->ADSRX.SustainRate;

173 
d
->
ADSRX
.
Rñó£ModeExp
 = 
s
->ADSRX.ReleaseModeExp;

174 
d
->
ADSRX
.
Rñó£R©e
 = 
s
->ADSRX.ReleaseRate;

175 
d
->
ADSRX
.
Envñ›eVﬁ
 = 
s
->ADSRX.EnvelopeVol;

176 
d
->
ADSRX
.
lVﬁume
 = d->
bOn
;

177 
	}
}

179 
	$lﬂd_ch™√l
(
SPUCHAN
 *
d
, c⁄° 
SPUCHAN_‹ig
 *
s
, 
ch
)

181 
	`mem£t
(
d
, 0, (*d));

182 i‡(
s
->
bNew
Ë
•u
.
dwNewCh™√l
 |1<<
ch
;

183 
d
->
iSBPos
 = 
s
->iSBPos;

184 i‡((
uöt32_t
)
d
->
iSBPos
 >= 28) d->iSBPos = 27;

185 
d
->
•os
 = 
s
->spos;

186 
d
->
söc
 = 
s
->sinc;

187 
d
->
söc_öv
 = 0;

188 
	`mem˝y
(
•u
.
SB
 + 
ch
 * 
SB_SIZE
, 
s
->SB, (spu.SB[0]) * SB_SIZE);

189 
d
->
pCuº
 = (*)(()
s
->
iCuº
 & 0x7fff0);

190 
d
->
pLo›
 = (*)(()
s
->
iLo›
 & 0x7fff0);

191 
d
->
bRevîb
 = 
s
->bReverb;

192 
d
->
iLe·Vﬁume
 = 
s
->iLeftVolume;

193 
d
->
iRightVﬁume
 = 
s
->iRightVolume;

194 
d
->
iRawPôch
 = 
s
->iRawPitch;

195 
d
->
bRVBA˘ive
 = 
s
->bRVBActive;

196 
d
->
bNoi£
 = 
s
->bNoise;

197 
d
->
bFMod
 = 
s
->bFMod;

198 
d
->
¥evÊags
 = (
s
->
bIgn‹eLo›
 >> 1) ^ 2;

199 
d
->
ADSRX
.
Sèã
 = 
s
->ADSRX.State;

200 i‡(
s
->
bSt›
Ë
d
->
ADSRX
.
Sèã
 = 
ADSR_RELEASE
;

201 
d
->
ADSRX
.
AâackModeExp
 = 
s
->ADSRX.AttackModeExp;

202 
d
->
ADSRX
.
AâackR©e
 = 
s
->ADSRX.AttackRate;

203 
d
->
ADSRX
.
DeˇyR©e
 = 
s
->ADSRX.DecayRate;

204 
d
->
ADSRX
.
Su°aöLevñ
 = 
s
->ADSRX.SustainLevel;

205 
d
->
ADSRX
.
Su°aöModeExp
 = 
s
->ADSRX.SustainModeExp;

206 
d
->
ADSRX
.
Su°aöIn¸ó£
 = 
s
->ADSRX.SustainIncrease;

207 
d
->
ADSRX
.
Su°aöR©e
 = 
s
->ADSRX.SustainRate;

208 
d
->
ADSRX
.
Rñó£ModeExp
 = 
s
->ADSRX.ReleaseModeExp;

209 
d
->
ADSRX
.
Rñó£R©e
 = 
s
->ADSRX.ReleaseRate;

210 
d
->
ADSRX
.
Envñ›eVﬁ
 = 
s
->ADSRX.EnvelopeVol;

211 i‡(
s
->
bOn
Ë
•u
.
dwCh™√lOn
 |1<<
ch
;

212 
d
->
ADSRX
.
Envñ›eVﬁ
 = 0;

213 
	}
}

216 
	$lﬂd_ªgi°î
(
ªg
, 
cy˛es
)

218 *
r
 = &
•u
.
ªgAªa
[((
ªg
 & 0xfff) - 0xc00) >> 1];

219 *
r
 ^= 1;

220 
	`SPUwrôeRegi°î
(
ªg
, *
r
 ^ 1, 
cy˛es
);

221 
	}
}

227 
CALLBACK
 
	$SPU‰ìze
(
uöt32_t
 
ulFªezeMode
, 
SPUFªeze_t
 * 
pF
,

228 
uöt32_t
 
cy˛es
)

230 
i
;
SPUOSSFªeze_t
 * 
pFO
;

232 if(!
pF
)  0;

234 
	`do_ßm∂es
(
cy˛es
, 1);

236 if(
ulFªezeMode
)

238 if(
ulFªezeMode
==1)

239 
	`mem£t
(
pF
,0,(
SPUFªeze_t
)+(
SPUOSSFªeze_t
));

241 
	`°r˝y
(
pF
->
szSPUName
,"PBOSS");

242 
pF
->
ulFªezeVîsi⁄
=5;

243 
pF
->
ulFªezeSize
=(
SPUFªeze_t
)+(
SPUOSSFªeze_t
);

245 if(
ulFªezeMode
==2)  1;

247 
	`mem˝y
(
pF
->
cSPURam
,
•u
.
•uMem
,0x80000);

248 
	`mem˝y
(
pF
->
cSPUP‹t
,
•u
.
ªgAªa
,0x200);

250 if(
•u
.
x≠GlobÆ
 && spu.
XAPœy
!=•u.
XAFìd
)

252 
pF
->
xaS
=*
•u
.
x≠GlobÆ
;

255 
	`mem£t
(&
pF
->
xaS
,0,(
xa_decode_t
));

257 
pFO
=(
SPUOSSFªeze_t
 *)(
pF
+1);

259 
pFO
->
•uIrq
 = 
•u
.
ªgAªa
[(
H_SPUúqAddr
 - 0x0c00) / 2];

260 if(
•u
.
pSpuIrq
Ë
pFO
->pSpuIrq = ()•u.pSpuIrq-()•u.
•uMemC
;

262 
pFO
->
•uAddr
=
•u
.spuAddr;

263 if(
pFO
->
•uAddr
==0)ÖFO->spuAddr=0xbaadf00d;

265 
i
=0;i<
MAXCHAN
;i++)

267 
	`ßve_ch™√l
(&
pFO
->
s_ch™
[
i
],&
•u
.s_chan[i],i);

268 if(
•u
.
s_ch™
[
i
].
pCuº
)

269 
pFO
->
s_ch™
[
i
].
iCuº
=
•u
.s_ch™[i].
pCuº
-•u.
•uMemC
;

270 if(
•u
.
s_ch™
[
i
].
pLo›
)

271 
pFO
->
s_ch™
[
i
].
iLo›
=
•u
.s_ch™[i].
pLo›
-•u.
•uMemC
;

278 if(
ulFªezeMode
!=0)  0;

280 
	`mem˝y
(
•u
.
•uMem
,
pF
->
cSPURam
,0x80000);

281 
	`mem˝y
(
•u
.
ªgAªa
,
pF
->
cSPUP‹t
,0x200);

282 
•u
.
bMemDúty
 = 1;

284 if(
pF
->
xaS
.
nßm∂es
<=4032)

285 
	`SPU∂ayADPCMch™√l
(&
pF
->
xaS
);

287 
•u
.
x≠GlobÆ
=0;

289 if(!
	`°rcmp
(
pF
->
szSPUName
,"PBOSS"Ë&&ÖF->
ulFªezeVîsi⁄
==5)

290 
	`LﬂdSèãV5
(
pF
);

291 
	`LﬂdSèãUnknown
(
pF
, 
cy˛es
);

294 
i
=0;i<=62;i+=2)

295 
	`lﬂd_ªgi°î
(
H_Revîb
+
i
, 
cy˛es
);

296 
	`lﬂd_ªgi°î
(
H_SPURevîbAddr
, 
cy˛es
);

297 
	`lﬂd_ªgi°î
(
H_SPUrvﬁL
, 
cy˛es
);

298 
	`lﬂd_ªgi°î
(
H_SPUrvﬁR
, 
cy˛es
);

300 
	`lﬂd_ªgi°î
(
H_SPU˘æ
, 
cy˛es
);

301 
	`lﬂd_ªgi°î
(
H_SPU°©
, 
cy˛es
);

302 
	`lﬂd_ªgi°î
(
H_CDLe·
, 
cy˛es
);

303 
	`lﬂd_ªgi°î
(
H_CDRight
, 
cy˛es
);

306 
i
=0;i<
MAXCHAN
;i++Ë
•u
.
SB
[ò* 
SB_SIZE
 + 28]=0;

308 
	`CÀ¨W‹kögSèã
();

309 
•u
.
cy˛es_∂ayed
 = 
cy˛es
;

311 i‡(
•u
.
•uCål
 & 
CTRL_IRQ
)

312 
	`scheduÀ_√xt_úq
();

315 
	}
}

319 
	$LﬂdSèãV5
(
SPUFªeze_t
 * 
pF
)

321 
i
;
SPUOSSFªeze_t
 * 
pFO
;

323 
pFO
=(
SPUOSSFªeze_t
 *)(
pF
+1);

325 
•u
.
pSpuIrq
 = spu.
•uMemC
 + ((•u.
ªgAªa
[(
H_SPUúqAddr
 - 0x0c00) / 2] << 3) & ~0xf);

327 if(
pFO
->
•uAddr
)

329 i‡(
pFO
->
•uAddr
 =0xbØdf00dË
•u
.spuAddr = 0;

330 
•u
.
•uAddr
 = 
pFO
->spuAddr & 0x7fffe;

333 
•u
.
dwNewCh™√l
=0;

334 
•u
.
dwCh™√lOn
=0;

335 
•u
.
dwCh™√lDód
=0;

336 
i
=0;i<
MAXCHAN
;i++)

338 
	`lﬂd_ch™√l
(&
•u
.
s_ch™
[
i
],&
pFO
->s_chan[i],i);

340 
•u
.
s_ch™
[
i
].
pCuº
+=()•u.
•uMemC
;

341 
•u
.
s_ch™
[
i
].
pLo›
+=()•u.
•uMemC
;

343 
	}
}

347 
	$LﬂdSèãUnknown
(
SPUFªeze_t
 * 
pF
, 
uöt32_t
 
cy˛es
)

349 
i
;

351 
i
=0;i<
MAXCHAN
;i++)

353 
•u
.
s_ch™
[
i
].
pLo›
=•u.
•uMemC
;

356 
•u
.
dwNewCh™√l
=0;

357 
•u
.
dwCh™√lOn
=0;

358 
•u
.
dwCh™√lDód
=0;

359 
•u
.
pSpuIrq
=•u.
•uMemC
;

361 
i
=0;i<0xc0;i++)

363 
	`lﬂd_ªgi°î
(0x1f801c00 + 
i
*2, 
cy˛es
);

365 
	}
}

	@plugins/dfsound/gauss_i.h

18 #i‚de‡
GAUSS_H


19 
	#GAUSS_H


	)

21 c⁄° 
	ggauss
[]={

	@plugins/dfsound/nullsnd.c

1 
	~"out.h
"

4 
	$n⁄e_öô
()

7 
	}
}

10 
	$n⁄e_föish
()

12 
	}
}

15 
	$n⁄e_busy
()

18 
	}
}

21 
	$n⁄e_„ed
(*
buf
, 
byãs
)

23 
	}
}

25 
	$out_ªgi°î_n⁄e
(
out_drivî
 *
drv
)

27 
drv
->
«me
 = "none";

28 
drv
->
öô
 = 
n⁄e_öô
;

29 
drv
->
föish
 = 
n⁄e_föish
;

30 
drv
->
busy
 = 
n⁄e_busy
;

31 
drv
->
„ed
 = 
n⁄e_„ed
;

32 
	}
}

	@plugins/dfsound/oss.c

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<sys/ty≥s.h
>

21 
	~<sys/°©.h
>

22 
	~<f˙é.h
>

23 
	~<sys/io˘l.h
>

24 
	~<uni°d.h
>

25 
	~<sys/soundˇrd.h
>

26 
	~"out.h
"

32 
	#OSS_MODE_STEREO
 1

	)

33 
	#OSS_MODE_MONO
 0

	)

35 
	#OSS_SPEED_44100
 44100

	)

37 
	#FRAGMENT_SHIFT
 12

	)

38 
	#FRAGMENT_SIZE
 (1 << 
FRAGMENT_SHIFT
)

	)

40 
	goss_audio_fd
 = -1;

41 
î∫o
;

47 
	$oss_öô
()

49 
p•ìd
=44100;

50 
p°îeo
;

51 
f‹m©
;

52 
my‰ag
;

53 
oss_•ìd
, 
oss_°îeo
;

55 
p°îeo
 = 
OSS_MODE_STEREO
;

56 
oss_•ìd
 = 
p•ìd
;

57 
oss_°îeo
 = 
p°îeo
;

59 if((
oss_audio_fd
=
	`›í
("/dev/d•",
O_WRONLY
,0))==-1)

61 
	`¥ötf
("OSS deviceÇotávailable\n");

65 if(
	`io˘l
(
oss_audio_fd
,
SNDCTL_DSP_RESET
,0)==-1)

67 
	`¥ötf
("SoundÑeset failed\n");

74 
my‰ag
 = (10<<16Ë| 
FRAGMENT_SHIFT
;

76 if(
	`io˘l
(
oss_audio_fd
,
SNDCTL_DSP_SETFRAGMENT
,&
my‰ag
)==-1)

78 
	`¥ötf
("Sound set fragment failed!\n");

82 
f‹m©
 = 
AFMT_S16_NE
;

84 if(
	`io˘l
(
oss_audio_fd
,
SNDCTL_DSP_SETFMT
,&
f‹m©
) == -1)

86 
	`¥ötf
("Sound formatÇot supported!\n");

90 if(
f‹m©
!=
AFMT_S16_NE
)

92 
	`¥ötf
("Sound formatÇot supported!\n");

96 if(
	`io˘l
(
oss_audio_fd
,
SNDCTL_DSP_STEREO
,&
oss_°îeo
)==-1 || !oss_stereo)

98 
	`¥ötf
("Stereo modeÇot supported!\n");

102 if(
	`io˘l
(
oss_audio_fd
,
SNDCTL_DSP_SPEED
,&
oss_•ìd
)==-1)

104 
	`¥ötf
("Sound frequencyÇot supported\n");

108 if(
oss_•ìd
!=
p•ìd
)

110 
	`¥ötf
("Sound frequencyÇot supported\n");

115 
	}
}

121 
	$oss_föish
()

123 if(
oss_audio_fd
 != -1 )

125 
	`˛o£
(
oss_audio_fd
);

126 
oss_audio_fd
 = -1;

128 
	}
}

134 
	$oss_busy
()

136 
audio_buf_öfo
 
öfo
;

137 
l
;

139 if(
oss_audio_fd
 == -1)  1;

140 if(
	`io˘l
(
oss_audio_fd
,
SNDCTL_DSP_GETOSPACE
,&
öfo
)==-1)

141 
l
=0;

144 if(
öfo
.
‰agmíts
<(öfo.
‰ag°ŸÆ
>>1))

145 
l
=1;

146 
l
=0;

149  
l
;

150 
	}
}

156 
	$oss_„ed
(*
buf
, 
byãs
)

158 
audio_buf_öfo
 
öfo
;

159 
sbuf
[4096];

161 if(
oss_audio_fd
 == -1) ;

162 if(
	`io˘l
(
oss_audio_fd
,
SNDCTL_DSP_GETOSPACE
,&
öfo
)==0)

165 if(
byãs
 > 
öfo
.
‰agmíts
 * 
FRAGMENT_SIZE
)

166 
byãs
 = 
öfo
.
‰agmíts
 * 
FRAGMENT_SIZE
;

167 if(
byãs
 == 0)

170 if(
öfo
.
‰agmíts
==öfo.
‰ag°ŸÆ
)

172 
	`mem£t
(
sbuf
, 0, (sbuf));

173 
	`wrôe
(
oss_audio_fd
, 
sbuf
, (sbuf));

174 
	`wrôe
(
oss_audio_fd
, 
sbuf
, (sbuf));

175 
	`wrôe
(
oss_audio_fd
, 
sbuf
, (sbuf));

179 
	`wrôe
(
oss_audio_fd
, 
buf
, 
byãs
);

180 
	}
}

182 
	$out_ªgi°î_oss
(
out_drivî
 *
drv
)

184 
drv
->
«me
 = "oss";

185 
drv
->
öô
 = 
oss_öô
;

186 
drv
->
föish
 = 
oss_föish
;

187 
drv
->
busy
 = 
oss_busy
;

188 
drv
->
„ed
 = 
oss_„ed
;

189 
	}
}

	@plugins/dfsound/out.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~"out.h
"

5 
	#MAX_OUT_DRIVERS
 5

	)

7 
out_drivî
 
	gout_drivîs
[
MAX_OUT_DRIVERS
];

8 
out_drivî
 *
	gout_cuºít
;

9 
	gdrivî_cou¡
;

11 
	#REGISTER_DRIVER
(
d
) { \

12 
out_ªgi°î_
##
	`d
(
out_drivî
 *
drv
); \

13 
out_ªgi°î_
##
	`d
(&
out_drivîs
[
drivî_cou¡
++]); \

14 }

	)

16 
	$SëupSound
()

18 
i
;

20 i‡(
drivî_cou¡
 == 0) {

21 #ifde‡
HAVE_OSS


22 
	`REGISTER_DRIVER
(
oss
);

24 #ifde‡
HAVE_ALSA


25 
	`REGISTER_DRIVER
(
Æß
);

27 #ifde‡
HAVE_SDL


28 
	`REGISTER_DRIVER
(
sdl
);

30 #ifde‡
HAVE_PULSE


31 
	`REGISTER_DRIVER
(
pul£
);

33 #ifde‡
HAVE_LIBRETRO


34 
	`REGISTER_DRIVER
(
libªåo
);

36 
	`REGISTER_DRIVER
(
n⁄e
);

40 
i
 = 0; i < 
drivî_cou¡
; i++)

41 i‡(
out_drivîs
[
i
].
	`öô
() == 0)

44 i‡(
i
 < 0 || i >
drivî_cou¡
) {

45 
	`¥ötf
("the impossible happened\n");

46 
	`ab‹t
();

49 
out_cuºít
 = &
out_drivîs
[
i
];

50 
	`¥ötf
("£À˘ed sound ouçuàdrivî: %s\n", 
out_cuºít
->
«me
);

51 
	}
}

	@plugins/dfsound/out.h

2 
	sout_drivî
 {

3 c⁄° *
	m«me
;

4 (*
	möô
)();

5 (*
	mföish
)();

6 (*
	mbusy
)();

7 (*
	m„ed
)(*
	md©a
, 
	mbyãs
);

10 
out_drivî
 *
out_cuºít
;

12 
SëupSound
();

	@plugins/dfsound/psemuxa.h

6 #i‚de‡
DECODEXA_H


7 
	#DECODEXA_H


	)

11 
	my0
, 
	my1
;

12 } 
	tADPCM_Decode_t
;

16 
	m‰eq
;

17 
	mnbôs
;

18 
	m°îeo
;

19 
	mnßm∂es
;

20 
ADPCM_Decode_t
 
	mÀ·
, 
	mright
;

21 
	mpcm
[16384];

22 } 
	txa_decode_t
;

24 
xa_decode_£˘‹
–
xa_decode_t
 *
xdp
,

25 *
£˘‹p
,

26 
is_fú°_£˘‹
 );

	@plugins/dfsound/pulseaudio.c

20 
	~<°dio.h
>

22 
	~<pul£/pul£audio.h
>

23 
	~"out.h
"

30 
∑_thªaded_maölo›
 *
	mmaölo›
;

31 
∑_c⁄ãxt
 *
	mc⁄ãxt
;

32 
∑_maölo›_≠i
 *
	m≠i
;

33 
∑_°ªam
 *
	m°ªam
;

34 
∑_ßm∂e_•ec
 
	m•ec
;

35 
	mfú°
;

36 } 
	tDevi˚
;

39 
	m‰equícy
;

40 
	mœãncy_ö_m£c
;

41 } 
	tSëtögs
;

47 
Devi˚
 
	gdevi˚
 = {

48 .
maölo›
 = 
NULL
,

49 .
	g≠i
 = 
NULL
,

50 .
	gc⁄ãxt
 = 
NULL
,

51 .
	g°ªam
 = 
NULL


54 
Sëtögs
 
	g£âögs
 = {

55 .
‰equícy
 = 44100,

56 .
	gœãncy_ö_m£c
 = 20,

60 c⁄° 
	gmixÀn
 = 3240;

68 
	$c⁄ãxt_°©e_cb
 (
∑_c⁄ãxt
 *
c⁄ãxt
, *
u£rd©a
)

70 
Devi˚
 *
dev
 = 
u£rd©a
;

72 i‡((
c⁄ãxt
 =
NULL
Ë|| (
dev
 == NULL))

75 
	`∑_c⁄ãxt_gë_°©e
 (
c⁄ãxt
))

77 
PA_CONTEXT_READY
:

78 
PA_CONTEXT_TERMINATED
:

79 
PA_CONTEXT_FAILED
:

80 
	`∑_thªaded_maölo›_sig«l
 (
dev
->
maölo›
, 0);

83 
PA_CONTEXT_UNCONNECTED
:

84 
PA_CONTEXT_CONNECTING
:

85 
PA_CONTEXT_AUTHORIZING
:

86 
PA_CONTEXT_SETTING_NAME
:

89 
	}
}

91 
	$°ªam_°©e_cb
 (
∑_°ªam
 *
°ªam
, * 
u£rd©a
)

93 
Devi˚
 *
dev
 = 
u£rd©a
;

95 i‡((
°ªam
 =
NULL
Ë|| (
dev
 == NULL))

98 
	`∑_°ªam_gë_°©e
 (
°ªam
))

100 
PA_STREAM_READY
:

101 
PA_STREAM_FAILED
:

102 
PA_STREAM_TERMINATED
:

103 
	`∑_thªaded_maölo›_sig«l
 (
dev
->
maölo›
, 0);

106 
PA_STREAM_UNCONNECTED
:

107 
PA_STREAM_CREATING
:

110 
	}
}

112 
	$°ªam_œãncy_upd©e_cb
 (
∑_°ªam
 *
°ªam
, *
u£rd©a
)

114 
Devi˚
 *
dev
 = 
u£rd©a
;

116 i‡((
°ªam
 =
NULL
Ë|| (
dev
 == NULL))

119 
	`∑_thªaded_maölo›_sig«l
 (
dev
->
maölo›
, 0);

120 
	}
}

122 
	$°ªam_ªque°_cb
 (
∑_°ªam
 *
°ªam
, 
size_t
 
Àngth
, *
u£rd©a
)

124 
Devi˚
 *
dev
 = 
u£rd©a
;

126 i‡((
°ªam
 =
NULL
Ë|| (
dev
 == NULL))

128 
	`∑_thªaded_maölo›_sig«l
 (
dev
->
maölo›
, 0);

129 
	}
}

135 
	$pul£_öô
()

137 
îr‹_numbî
;

140 
devi˚
.
maölo›
 = 
	`∑_thªaded_maölo›_√w
 ();

141 i‡(
devi˚
.
maölo›
 =
NULL
)

143 
	`Ârötf
 (
°dîr
, "CouldÇotácquire PulseAudio mainÜoop\n");

148 
devi˚
.
≠i
 = 
	`∑_thªaded_maölo›_gë_≠i
 (devi˚.
maölo›
);

149 
devi˚
.
c⁄ãxt
 = 
	`∑_c⁄ãxt_√w
 (devi˚.
≠i
, "PCSX");

150 
	`∑_c⁄ãxt_£t_°©e_ˇŒback
 (
devi˚
.
c⁄ãxt
, 
c⁄ãxt_°©e_cb
, &device);

152 i‡(
devi˚
.
c⁄ãxt
 =
NULL
)

154 
	`Ârötf
 (
°dîr
, "CouldÇotácquire PulseAudio device context\n");

159 i‡(
	`∑_c⁄ãxt_c⁄√˘
 (
devi˚
.
c⁄ãxt
, 
NULL
, 0, NULL) < 0)

161 
îr‹_numbî
 = 
	`∑_c⁄ãxt_î∫o
 (
devi˚
.
c⁄ãxt
);

162 
	`Ârötf
 (
°dîr
, "CouldÇŸ c⁄√˘ÅÿPul£Audiÿ£rvî: %s\n", 
	`∑_°ªº‹
(
îr‹_numbî
));

167 
	`∑_thªaded_maölo›_lock
 (
devi˚
.
maölo›
);

168 i‡(
	`∑_thªaded_maölo›_°¨t
 (
devi˚
.
maölo›
) < 0)

170 
	`Ârötf
 (
°dîr
, "CouldÇot start mainloop\n");

174 
∑_c⁄ãxt_°©e_t
 
c⁄ãxt_°©e
;

175 
c⁄ãxt_°©e
 = 
	`∑_c⁄ãxt_gë_°©e
 (
devi˚
.
c⁄ãxt
);

176 
c⁄ãxt_°©e
 !
PA_CONTEXT_READY
)

178 
c⁄ãxt_°©e
 = 
	`∑_c⁄ãxt_gë_°©e
 (
devi˚
.
c⁄ãxt
);

179 i‡(! 
	`PA_CONTEXT_IS_GOOD
 (
c⁄ãxt_°©e
))

181 
îr‹_numbî
 = 
	`∑_c⁄ãxt_î∫o
 (
devi˚
.
c⁄ãxt
);

182 
	`Ârötf
 (
°dîr
, "C⁄ãxà°©êi†nŸ good: %s\n", 
	`∑_°ªº‹
 (
îr‹_numbî
));

185 i‡(
c⁄ãxt_°©e
 =
PA_CONTEXT_READY
)

188 
	`Ârötf
 (
°dîr
, "Pul£Audiÿc⁄ãxà°©êi†%d\n", 
c⁄ãxt_°©e
);

189 
	`∑_thªaded_maölo›_waô
 (
devi˚
.
maölo›
);

193 
devi˚
.
•ec
.
f‹m©
 = 
PA_SAMPLE_S16NE
;

194 
devi˚
.
•ec
.
ch™√ls
 = 2;

195 
devi˚
.
•ec
.
øã
 = 
£âögs
.
‰equícy
;

197 
∑_buf„r_©å
 
buf„r_©åibuãs
;

198 
buf„r_©åibuãs
.
éígth
 = 
	`∑_byãs_≥r_£c⁄d
 (& 
devi˚
.
•ec
) / 5;

199 
buf„r_©åibuãs
.
maxÀngth
 = buf„r_©åibuãs.
éígth
 * 3;

200 
buf„r_©åibuãs
.
möªq
 = buf„r_©åibuãs.
éígth
 / 3;

201 
buf„r_©åibuãs
.
¥ebuf
 = buf„r_©åibuãs.
éígth
;

210 
devi˚
.
°ªam
 = 
	`∑_°ªam_√w
 (devi˚.
c⁄ãxt
, "PCSX", &devi˚.
•ec
, 
NULL
);

211 i‡(
devi˚
.
°ªam
 =
NULL
)

213 
îr‹_numbî
 = 
	`∑_c⁄ãxt_î∫o
 (
devi˚
.
c⁄ãxt
);

214 
	`Ârötf
 (
°dîr
, "CouldÇŸácquúê√w Pul£Audiÿ°ªam: %s\n", 
	`∑_°ªº‹
 (
îr‹_numbî
));

219 
	`∑_°ªam_£t_°©e_ˇŒback
 (
devi˚
.
°ªam
, 
°ªam_°©e_cb
, &device);

220 
	`∑_°ªam_£t_wrôe_ˇŒback
 (
devi˚
.
°ªam
, 
°ªam_ªque°_cb
, &device);

221 
	`∑_°ªam_£t_œãncy_upd©e_ˇŒback
 (
devi˚
.
°ªam
, 
°ªam_œãncy_upd©e_cb
, &device);

224 
∑_°ªam_Êags_t
 
Êags
 = (∑_°ªam_Êags_tË(
PA_STREAM_ADJUST_LATENCY
 | 
PA_STREAM_INTERPOLATE_TIMING
 | 
PA_STREAM_AUTO_TIMING_UPDATE
);

226 i‡(
	`∑_°ªam_c⁄√˘_∂ayback
 (
devi˚
.
°ªam
, 
NULL
, &
buf„r_©åibuãs
, 
Êags
, NULL, NULL) < 0)

228 
îr‹_numbî
 = 
	`∑_c⁄ãxt_î∫o
 (
devi˚
.
c⁄ãxt
);

229 
	`Ârötf
 (
°dîr
, "CouldÇŸ c⁄√˘ f‹Öœyback: %s\n", 
	`∑_°ªº‹
 (
îr‹_numbî
));

234 
∑_°ªam_°©e_t
 
°ªam_°©e
;

235 
°ªam_°©e
 = 
	`∑_°ªam_gë_°©e
 (
devi˚
.
°ªam
);

236 
°ªam_°©e
 !
PA_STREAM_READY
)

238 
°ªam_°©e
 = 
	`∑_°ªam_gë_°©e
 (
devi˚
.
°ªam
);

240 i‡(
°ªam_°©e
 =
PA_STREAM_READY
)

243 i‡(! 
	`PA_STREAM_IS_GOOD
 (
°ªam_°©e
))

245 
îr‹_numbî
 = 
	`∑_c⁄ãxt_î∫o
 (
devi˚
.
c⁄ãxt
);

246 
	`Ârötf
 (
°dîr
, "Såóm sèã i†nŸ good: %s\n", 
	`∑_°ªº‹
 (
îr‹_numbî
));

250 
	`Ârötf
 (
°dîr
, "Pul£Audiÿ°ªam sèã i†%d\n", 
°ªam_°©e
);

251 
	`∑_thªaded_maölo›_waô
 (
devi˚
.
maölo›
);

254 
	`∑_thªaded_maölo›_u∆ock
 (
devi˚
.
maölo›
);

256 
	`Ârötf
 (
°dîr
, "PulseAudio should be connected\n");

258 
	}
}

263 
	$pul£_föish
()

265 i‡(
devi˚
.
maölo›
 !
NULL
)

266 
	`∑_thªaded_maölo›_°›
 (
devi˚
.
maölo›
);

269 i‡(
devi˚
.
°ªam
 !
NULL
)

271 
	`∑_°ªam_uƒef
 (
devi˚
.
°ªam
);

272 
devi˚
.
°ªam
 = 
NULL
;

275 i‡(
devi˚
.
c⁄ãxt
 !
NULL
)

277 
	`∑_c⁄ãxt_disc⁄√˘
 (
devi˚
.
c⁄ãxt
);

278 
	`∑_c⁄ãxt_uƒef
 (
devi˚
.
c⁄ãxt
);

279 
devi˚
.
c⁄ãxt
 = 
NULL
;

282 i‡(
devi˚
.
maölo›
 !
NULL
)

284 
	`∑_thªaded_maölo›_‰ì
 (
devi˚
.
maölo›
);

285 
devi˚
.
maölo›
 = 
NULL
;

288 
	}
}

294 
	$pul£_busy
()

296 
‰ì_•a˚
;

298 i‡((
devi˚
.
maölo›
 =
NULL
Ë|| (devi˚.
≠i
 =NULLË|| ( devi˚.
c⁄ãxt
 =NULLË|| (devi˚.
°ªam
 == NULL))

301 
	`∑_thªaded_maölo›_lock
 (
devi˚
.
maölo›
);

302 
‰ì_•a˚
 = 
	`∑_°ªam_wrôabÀ_size
 (
devi˚
.
°ªam
);

303 
	`∑_thªaded_maölo›_u∆ock
 (
devi˚
.
maölo›
);

307 i‡(
‰ì_•a˚
 < 
mixÀn
 * 3)

319 
	}
}

325 
	$pul£_„ed
(*
pSound
, 
lByãs
)

327 i‡(
devi˚
.
maölo›
 !
NULL
)

329 
	`∑_thªaded_maölo›_lock
 (
devi˚
.
maölo›
);

330 i‡(
	`∑_°ªam_wrôe
 (
devi˚
.
°ªam
, 
pSound
, 
lByãs
, 
NULL
, 0LL, 
PA_SEEK_RELATIVE
) < 0)

332 
	`Ârötf
 (
°dîr
, "CouldÇotÖerform write\n");

337 
	`∑_thªaded_maölo›_u∆ock
 (
devi˚
.
maölo›
);

340 
	}
}

342 
	$out_ªgi°î_pul£
(
out_drivî
 *
drv
)

344 
drv
->
«me
 = "pulseaudio";

345 
drv
->
öô
 = 
pul£_öô
;

346 
drv
->
föish
 = 
pul£_föish
;

347 
drv
->
busy
 = 
pul£_busy
;

348 
drv
->
„ed
 = 
pul£_„ed
;

349 
	}
}

	@plugins/dfsound/registers.c

18 
	~"°dafx.h
"

20 
	#_IN_REGISTERS


	)

22 
	~"exã∫Æs.h
"

23 
	~"ªgi°îs.h
"

24 
	~"•u_c⁄fig.h
"

26 
SoundOn
(
°¨t
,
íd
,
vÆ
);

27 
SoundOff
(
°¨t
,
íd
,
vÆ
);

28 
FModOn
(
°¨t
,
íd
,
vÆ
);

29 
Noi£On
(
°¨t
,
íd
,
vÆ
);

30 
SëVﬁumeL
(
ch
,
vﬁ
);

31 
SëVﬁumeR
(
ch
,
vﬁ
);

32 
SëPôch
(
ch
,
vÆ
);

33 
RevîbOn
(
°¨t
,
íd
,
vÆ
);

39 c⁄° 
uöt32_t
 
	gign‹e_du≥
[8] = {

46 
CALLBACK
 
	$SPUwrôeRegi°î
(
ªg
, 
vÆ
,

47 
cy˛es
)

49 
r
 = 
ªg
 & 0xfff;

50 
rofs
 = (
r
 - 0xc00) >> 1;

51 
ch™ged
 = 
•u
.
ªgAªa
[
rofs
] !
vÆ
;

52 
•u
.
ªgAªa
[
rofs
] = 
vÆ
;

54 i‡(!
ch™ged
 && (
ign‹e_du≥
[
rofs
 >> 5] & (1 << (rofs & 0x1f))))

57 i‡(
vÆ
 =0 && (
r
 & 0xff8) == 0xd88)

60 
	`do_ßm∂es_if_√eded
(
cy˛es
, 0);

62 if(
r
>=0x0c00 &&Ñ<0x0d80)

64 
ch
=(
r
>>4)-0xc0;

65 
r
&0x0f)

69 
	`SëVﬁumeL
(()
ch
,
vÆ
);

73 
	`SëVﬁumeR
(()
ch
,
vÆ
);

77 
	`SëPôch
(
ch
,
vÆ
);

78 
upd_úq
;

86 c⁄° 
lvÆ
=
vÆ
;

88 
•u
.
s_ch™
[
ch
].
ADSRX
.
AâackModeExp
=(
lvÆ
&0x8000)?1:0;

89 
•u
.
s_ch™
[
ch
].
ADSRX
.
AâackR©e
=(
lvÆ
>>8) & 0x007f;

90 
•u
.
s_ch™
[
ch
].
ADSRX
.
DeˇyR©e
=(
lvÆ
>>4) & 0x000f;

91 
•u
.
s_ch™
[
ch
].
ADSRX
.
Su°aöLevñ
=
lvÆ
 & 0x000f;

98 c⁄° 
lvÆ
=
vÆ
;

101 
•u
.
s_ch™
[
ch
].
ADSRX
.
Su°aöModeExp
 = (
lvÆ
&0x8000)?1:0;

102 
•u
.
s_ch™
[
ch
].
ADSRX
.
Su°aöIn¸ó£
(
lvÆ
&0x4000)?0:1;

103 
•u
.
s_ch™
[
ch
].
ADSRX
.
Su°aöR©e
 = (
lvÆ
>>6) & 0x007f;

104 
•u
.
s_ch™
[
ch
].
ADSRX
.
Rñó£ModeExp
 = (
lvÆ
&0x0020)?1:0;

105 
•u
.
s_ch™
[
ch
].
ADSRX
.
Rñó£R©e
 = 
lvÆ
 & 0x001f;

114 
•u
.
s_ch™
[
ch
].
pLo›
=•u.
•uMemC
+((
vÆ
&~1)<<3);

115 
upd_úq
;

121 
r
)

124 
H_SPUaddr
:

125 
•u
.
•uAddr
 = (Ë
vÆ
<<3;

128 
H_SPUd©a
:

129 *(*)(
•u
.
•uMemC
 + spu.
•uAddr
Ë
vÆ
;

130 
•u
.
•uAddr
 += 2;

131 
•u
.
•uAddr
 &= 0x7fffe;

134 
H_SPU˘æ
:

135 i‡(!(
•u
.
•uCål
 & 
CTRL_IRQ
)) {

136 
•u
.
•uSèt
&=~
STAT_IRQ
;

137 i‡(
vÆ
 & 
CTRL_IRQ
)

138 
	`scheduÀ_√xt_úq
();

140 
•u
.
•uCål
=
vÆ
;

143 
H_SPU°©
:

144 
•u
.
•uSèt
=
vÆ
&0xf800;

147 
H_SPURevîbAddr
:

148 
rvbd
;

150 
H_SPUúqAddr
:

151 
•u
.
pSpuIrq
=•u.
•uMemC
+(((Ë
vÆ
<<3)&~0xf);

152 
upd_úq
;

154 
H_SPUrvﬁL
:

155 
•u
.
rvb
->
VﬁLe·
=
vÆ
;

158 
H_SPUrvﬁR
:

159 
•u
.
rvb
->
VﬁRight
=
vÆ
;

189 
H_SPU⁄1
:

190 
	`SoundOn
(0,16,
vÆ
);

193 
H_SPU⁄2
:

194 
	`SoundOn
(16,24,
vÆ
);

197 
H_SPUoff1
:

198 
	`SoundOff
(0,16,
vÆ
);

201 
H_SPUoff2
:

202 
	`SoundOff
(16,24,
vÆ
);

205 
H_CDLe·
:

206 
•u
.
iLe·XAVﬁ
=
vÆ
 & 0x7fff;

207 if(
•u
.
cddavCÆlback
Ë•u.
	`cddavCÆlback
(0,
vÆ
);

209 
H_CDRight
:

210 
•u
.
iRightXAVﬁ
=
vÆ
 & 0x7fff;

211 if(
•u
.
cddavCÆlback
Ë•u.
	`cddavCÆlback
(1,
vÆ
);

214 
H_FMod1
:

215 
	`FModOn
(0,16,
vÆ
);

218 
H_FMod2
:

219 
	`FModOn
(16,24,
vÆ
);

222 
H_Noi£1
:

223 
	`Noi£On
(0,16,
vÆ
);

226 
H_Noi£2
:

227 
	`Noi£On
(16,24,
vÆ
);

230 
H_RVB⁄1
:

231 
	`RevîbOn
(0,16,
vÆ
);

234 
H_RVB⁄2
:

235 
	`RevîbOn
(16,24,
vÆ
);

238 
H_Revîb
+0 : 
rvbd
;

239 
H_Revîb
+2 : 
rvbd
;

240 
H_Revîb
+4 : 
•u
.
rvb
->
IIR_ALPHA
=()
vÆ
; ;

241 
H_Revîb
+6 : 
•u
.
rvb
->
ACC_COEF_A
=()
vÆ
; ;

242 
H_Revîb
+8 : 
•u
.
rvb
->
ACC_COEF_B
=()
vÆ
; ;

243 
H_Revîb
+10 : 
•u
.
rvb
->
ACC_COEF_C
=()
vÆ
; ;

244 
H_Revîb
+12 : 
•u
.
rvb
->
ACC_COEF_D
=()
vÆ
; ;

245 
H_Revîb
+14 : 
•u
.
rvb
->
IIR_COEF
=()
vÆ
; ;

246 
H_Revîb
+16 : 
•u
.
rvb
->
FB_ALPHA
=()
vÆ
; ;

247 
H_Revîb
+18 : 
•u
.
rvb
->
FB_X
=()
vÆ
; ;

248 
H_Revîb
+20 : 
rvbd
;

249 
H_Revîb
+22 : 
rvbd
;

250 
H_Revîb
+24 : 
rvbd
;

251 
H_Revîb
+26 : 
rvbd
;

252 
H_Revîb
+28 : 
rvbd
;

253 
H_Revîb
+30 : 
rvbd
;

254 
H_Revîb
+32 : 
rvbd
;

255 
H_Revîb
+34 : 
rvbd
;

256 
H_Revîb
+36 : 
rvbd
;

257 
H_Revîb
+38 : 
rvbd
;

258 
H_Revîb
+40 : 
rvbd
;

259 
H_Revîb
+42 : 
rvbd
;

260 
H_Revîb
+44 : 
rvbd
;

261 
H_Revîb
+46 : 
rvbd
;

262 
H_Revîb
+48 : 
rvbd
;

263 
H_Revîb
+50 : 
rvbd
;

264 
H_Revîb
+52 : 
rvbd
;

265 
H_Revîb
+54 : 
rvbd
;

266 
H_Revîb
+56 : 
rvbd
;

267 
H_Revîb
+58 : 
rvbd
;

268 
H_Revîb
+60 : 
•u
.
rvb
->
IN_COEF_L
=()
vÆ
; ;

269 
H_Revîb
+62 : 
•u
.
rvb
->
IN_COEF_R
=()
vÆ
; ;

273 
upd_úq
:

274 i‡(
•u
.
•uCål
 & 
CTRL_IRQ
)

275 
	`scheduÀ_√xt_úq
();

278 
rvbd
:

279 
•u
.
rvb
->
dúty
 = 1;

280 
	}
}

286 
CALLBACK
 
	$SPUªadRegi°î
(
ªg
)

288 c⁄° 
r
=
ªg
&0xfff;

290 if(
r
>=0x0c00 &&Ñ<0x0d80)

292 
r
&0x0f)

296 c⁄° 
ch
=(
r
>>4)-0xc0;

297 if(
•u
.
dwNewCh™√l
&(1<<
ch
))  1;

298 if((
•u
.
dwCh™√lOn
&(1<<
ch
)) &&

299 !
•u
.
s_ch™
[
ch
].
ADSRX
.
Envñ›eVﬁ
)

301  ()(
•u
.
s_ch™
[
ch
].
ADSRX
.
Envñ›eVﬁ
>>16);

306 c⁄° 
ch
=(
r
>>4)-0xc0;

307  ()((
•u
.
s_ch™
[
ch
].
pLo›
-•u.
•uMemC
)>>3);

312 
r
)

314 
H_SPU˘æ
:

315  
•u
.
•uCål
;

317 
H_SPU°©
:

318  
•u
.
•uSèt
;

320 
H_SPUaddr
:

321  ()(
•u
.
•uAddr
>>3);

323 
H_SPUd©a
:

325 
s
 = *(*)(
•u
.
•uMemC
 + spu.
•uAddr
);

326 
•u
.
•uAddr
 += 2;

327 
•u
.
•uAddr
 &= 0x7fffe;

328  
s
;

339  
•u
.
ªgAªa
[(
r
-0xc00)>>1];

340 
	}
}

346 
	$SoundOn
(
°¨t
,
íd
,
vÆ
)

348 
ch
;

350 
ch
=
°¨t
;ch<
íd
;ch++,
vÆ
>>=1)

352 if((
vÆ
&1Ë&& 
	`ªgAªaGë
(
ch
,6))

354 
•u
.
s_ch™
[
ch
].
pCuº
=•u.
•uMemC
+((
	`ªgAªaGë
(ch,6)&~1)<<3);

355 
•u
.
s_ch™
[
ch
].
pLo›
=•u.
•uMemC
+((
	`ªgAªaGë
(ch,14)&~1)<<3);

356 
•u
.
dwNewCh™√l
|=(1<<
ch
);

359 
	}
}

365 
	$SoundOff
(
°¨t
,
íd
,
vÆ
)

367 
ch
;

368 
ch
=
°¨t
;ch<
íd
;ch++,
vÆ
>>=1)

370 if(
vÆ
&1)

372 
•u
.
s_ch™
[
ch
].
ADSRX
.
Sèã
 = 
ADSR_RELEASE
;

376 
•u
.
dwNewCh™√l
 &~(1<<
ch
);

379 
	}
}

385 
	$FModOn
(
°¨t
,
íd
,
vÆ
)

387 
ch
;

389 
ch
=
°¨t
;ch<
íd
;ch++,
vÆ
>>=1)

391 if(
vÆ
&1)

393 if(
ch
>0)

395 
•u
.
s_ch™
[
ch
].
bFMod
=1;

396 
•u
.
s_ch™
[
ch
-1].
bFMod
=2;

401 
•u
.
s_ch™
[
ch
].
bFMod
=0;

402 if(
ch
>0&&
•u
.
s_ch™
[ch-1].
bFMod
==2)

403 
•u
.
s_ch™
[
ch
-1].
bFMod
=0;

406 
	}
}

412 
	$Noi£On
(
°¨t
,
íd
,
vÆ
)

414 
ch
;

416 
ch
=
°¨t
;ch<
íd
;ch++,
vÆ
>>=1)

418 
•u
.
s_ch™
[
ch
].
bNoi£
=
vÆ
&1;

420 
	}
}

429 
	$SëVﬁumeL
(
ch
,
vﬁ
)

431 if(
vﬁ
&0x8000)

433 
sInc
=1;

434 if(
vﬁ
&0x2000Ë
sInc
=-1;

435 if(
vﬁ
&0x1000) vol^=0xffff;

436 
vﬁ
=((vol&0x7f)+1)/2;

437 
vﬁ
+=vﬁ/(2*
sInc
);

438 
vﬁ
*=128;

442 if(
vﬁ
&0x4000)

444 
vﬁ
=0x3fff-(vol&0x3fff);

447 
vﬁ
&=0x3fff;

448 
•u
.
s_ch™
[
ch
].
iLe·Vﬁume
=
vﬁ
;

449 
	}
}

455 
	$SëVﬁumeR
(
ch
,
vﬁ
)

457 if(
vﬁ
&0x8000)

459 
sInc
=1;

460 if(
vﬁ
&0x2000Ë
sInc
=-1;

461 if(
vﬁ
&0x1000) vol^=0xffff;

462 
vﬁ
=((vol&0x7f)+1)/2;

463 
vﬁ
+=vﬁ/(2*
sInc
);

464 
vﬁ
*=128;

468 if(
vﬁ
&0x4000)

469 
vﬁ
=0x3fff-(vol&0x3fff);

472 
vﬁ
&=0x3fff;

474 
•u
.
s_ch™
[
ch
].
iRightVﬁume
=
vﬁ
;

475 
	}
}

481 
	$SëPôch
(
ch
,
vÆ
)

483 
NP
;

484 if(
vÆ
>0x3fffË
NP
=0x3fff;

485 
NP
=
vÆ
;

487 
•u
.
s_ch™
[
ch
].
iRawPôch
=
NP
;

488 
•u
.
s_ch™
[
ch
].
söc
=(
NP
<<4)|8;

489 
•u
.
s_ch™
[
ch
].
söc_öv
=0;

490 i‡(
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
 == 1)

491 
•u
.
SB
[
ch
 * 
SB_SIZE
 + 32] = 1;

492 
	}
}

498 
	$RevîbOn
(
°¨t
,
íd
,
vÆ
)

500 
ch
;

502 
ch
=
°¨t
;ch<
íd
;ch++,
vÆ
>>=1)

504 
•u
.
s_ch™
[
ch
].
bRevîb
=
vÆ
&1;

506 
	}
}

	@plugins/dfsound/registers.h

18 
	#H_SPURevîbAddr
 0x0da2

	)

19 
	#H_SPUúqAddr
 0x0da4

	)

20 
	#H_SPUaddr
 0x0da6

	)

21 
	#H_SPUd©a
 0x0da8

	)

22 
	#H_SPU˘æ
 0x0dØ

	)

23 
	#H_SPU°©
 0x0d´

	)

24 
	#H_SPUmvﬁL
 0x0d80

	)

25 
	#H_SPUmvﬁR
 0x0d82

	)

26 
	#H_SPUrvﬁL
 0x0d84

	)

27 
	#H_SPUrvﬁR
 0x0d86

	)

28 
	#H_SPU⁄1
 0x0d88

	)

29 
	#H_SPU⁄2
 0x0d8a

	)

30 
	#H_SPUoff1
 0x0d8c

	)

31 
	#H_SPUoff2
 0x0d8e

	)

32 
	#H_FMod1
 0x0d90

	)

33 
	#H_FMod2
 0x0d92

	)

34 
	#H_Noi£1
 0x0d94

	)

35 
	#H_Noi£2
 0x0d96

	)

36 
	#H_RVB⁄1
 0x0d98

	)

37 
	#H_RVB⁄2
 0x0d9a

	)

38 
	#H_SPUMuã1
 0x0d9c

	)

39 
	#H_SPUMuã2
 0x0d9e

	)

40 
	#H_CDLe·
 0x0db0

	)

41 
	#H_CDRight
 0x0db2

	)

42 
	#H_ExtLe·
 0x0db4

	)

43 
	#H_ExtRight
 0x0db6

	)

44 
	#H_Revîb
 0x0dc0

	)

45 
	#H_SPUPôch0
 0x0c04

	)

46 
	#H_SPUPôch1
 0x0c14

	)

47 
	#H_SPUPôch2
 0x0c24

	)

48 
	#H_SPUPôch3
 0x0c34

	)

49 
	#H_SPUPôch4
 0x0c44

	)

50 
	#H_SPUPôch5
 0x0c54

	)

51 
	#H_SPUPôch6
 0x0c64

	)

52 
	#H_SPUPôch7
 0x0c74

	)

53 
	#H_SPUPôch8
 0x0c84

	)

54 
	#H_SPUPôch9
 0x0c94

	)

55 
	#H_SPUPôch10
 0x0ˇ4

	)

56 
	#H_SPUPôch11
 0x0cb4

	)

57 
	#H_SPUPôch12
 0x0cc4

	)

58 
	#H_SPUPôch13
 0x0cd4

	)

59 
	#H_SPUPôch14
 0x0˚4

	)

60 
	#H_SPUPôch15
 0x0cf4

	)

61 
	#H_SPUPôch16
 0x0d04

	)

62 
	#H_SPUPôch17
 0x0d14

	)

63 
	#H_SPUPôch18
 0x0d24

	)

64 
	#H_SPUPôch19
 0x0d34

	)

65 
	#H_SPUPôch20
 0x0d44

	)

66 
	#H_SPUPôch21
 0x0d54

	)

67 
	#H_SPUPôch22
 0x0d64

	)

68 
	#H_SPUPôch23
 0x0d74

	)

70 
	#H_SPUSèπAdr0
 0x0c06

	)

71 
	#H_SPUSèπAdr1
 0x0c16

	)

72 
	#H_SPUSèπAdr2
 0x0c26

	)

73 
	#H_SPUSèπAdr3
 0x0c36

	)

74 
	#H_SPUSèπAdr4
 0x0c46

	)

75 
	#H_SPUSèπAdr5
 0x0c56

	)

76 
	#H_SPUSèπAdr6
 0x0c66

	)

77 
	#H_SPUSèπAdr7
 0x0c76

	)

78 
	#H_SPUSèπAdr8
 0x0c86

	)

79 
	#H_SPUSèπAdr9
 0x0c96

	)

80 
	#H_SPUSèπAdr10
 0x0ˇ6

	)

81 
	#H_SPUSèπAdr11
 0x0cb6

	)

82 
	#H_SPUSèπAdr12
 0x0cc6

	)

83 
	#H_SPUSèπAdr13
 0x0cd6

	)

84 
	#H_SPUSèπAdr14
 0x0˚6

	)

85 
	#H_SPUSèπAdr15
 0x0cf6

	)

86 
	#H_SPUSèπAdr16
 0x0d06

	)

87 
	#H_SPUSèπAdr17
 0x0d16

	)

88 
	#H_SPUSèπAdr18
 0x0d26

	)

89 
	#H_SPUSèπAdr19
 0x0d36

	)

90 
	#H_SPUSèπAdr20
 0x0d46

	)

91 
	#H_SPUSèπAdr21
 0x0d56

	)

92 
	#H_SPUSèπAdr22
 0x0d66

	)

93 
	#H_SPUSèπAdr23
 0x0d76

	)

95 
	#H_SPULo›Adr0
 0x0c0e

	)

96 
	#H_SPULo›Adr1
 0x0c1e

	)

97 
	#H_SPULo›Adr2
 0x0c2e

	)

98 
	#H_SPULo›Adr3
 0x0c3e

	)

99 
	#H_SPULo›Adr4
 0x0c4e

	)

100 
	#H_SPULo›Adr5
 0x0c5e

	)

101 
	#H_SPULo›Adr6
 0x0c6e

	)

102 
	#H_SPULo›Adr7
 0x0c7e

	)

103 
	#H_SPULo›Adr8
 0x0c8e

	)

104 
	#H_SPULo›Adr9
 0x0c9e

	)

105 
	#H_SPULo›Adr10
 0x0ˇe

	)

106 
	#H_SPULo›Adr11
 0x0cbe

	)

107 
	#H_SPULo›Adr12
 0x0c˚

	)

108 
	#H_SPULo›Adr13
 0x0cde

	)

109 
	#H_SPULo›Adr14
 0x0˚e

	)

110 
	#H_SPULo›Adr15
 0x0c„

	)

111 
	#H_SPULo›Adr16
 0x0d0e

	)

112 
	#H_SPULo›Adr17
 0x0d1e

	)

113 
	#H_SPULo›Adr18
 0x0d2e

	)

114 
	#H_SPULo›Adr19
 0x0d3e

	)

115 
	#H_SPULo›Adr20
 0x0d4e

	)

116 
	#H_SPULo›Adr21
 0x0d5e

	)

117 
	#H_SPULo›Adr22
 0x0d6e

	)

118 
	#H_SPULo›Adr23
 0x0d7e

	)

120 
	#H_SPU_ADSRLevñ0
 0x0c08

	)

121 
	#H_SPU_ADSRLevñ1
 0x0c18

	)

122 
	#H_SPU_ADSRLevñ2
 0x0c28

	)

123 
	#H_SPU_ADSRLevñ3
 0x0c38

	)

124 
	#H_SPU_ADSRLevñ4
 0x0c48

	)

125 
	#H_SPU_ADSRLevñ5
 0x0c58

	)

126 
	#H_SPU_ADSRLevñ6
 0x0c68

	)

127 
	#H_SPU_ADSRLevñ7
 0x0c78

	)

128 
	#H_SPU_ADSRLevñ8
 0x0c88

	)

129 
	#H_SPU_ADSRLevñ9
 0x0c98

	)

130 
	#H_SPU_ADSRLevñ10
 0x0ˇ8

	)

131 
	#H_SPU_ADSRLevñ11
 0x0cb8

	)

132 
	#H_SPU_ADSRLevñ12
 0x0cc8

	)

133 
	#H_SPU_ADSRLevñ13
 0x0cd8

	)

134 
	#H_SPU_ADSRLevñ14
 0x0˚8

	)

135 
	#H_SPU_ADSRLevñ15
 0x0cf8

	)

136 
	#H_SPU_ADSRLevñ16
 0x0d08

	)

137 
	#H_SPU_ADSRLevñ17
 0x0d18

	)

138 
	#H_SPU_ADSRLevñ18
 0x0d28

	)

139 
	#H_SPU_ADSRLevñ19
 0x0d38

	)

140 
	#H_SPU_ADSRLevñ20
 0x0d48

	)

141 
	#H_SPU_ADSRLevñ21
 0x0d58

	)

142 
	#H_SPU_ADSRLevñ22
 0x0d68

	)

143 
	#H_SPU_ADSRLevñ23
 0x0d78

	)

145 
	#CTRL_IRQ
 0x40

	)

146 
	#CTRL_REVERB
 0x80

	)

147 
	#CTRL_NOISE
 0x3f00

	)

148 
	#CTRL_MUTE
 0x4000

	)

149 
	#CTRL_ON
 0x8000

	)

151 
	#STAT_IRQ
 0x40

	)

155 
CALLBACK
 
SPUwrôeRegi°î
(
ªg
, 
vÆ
, 
cy˛es
);

	@plugins/dfsound/reverb.c

22 
	~"°dafx.h
"

24 
	#_IN_REVERB


	)

27 #ifde‡
_IN_SPU


33 
INLINE
 
	$SèπREVERB
(
ch
)

35 if(
•u
.
s_ch™
[
ch
].
bRevîb
 && (•u.
•uCål
&0x80))

37 
•u
.
s_ch™
[
ch
].
bRVBA˘ive
=!!
•u_c⁄fig
.
iU£Revîb
;

39 
•u
.
s_ch™
[
ch
].
bRVBA˘ive
=0;

40 
	}
}

44 
INLINE
 
	$rvb2øm_offs
(
cuº
, 
•a˚
, 
iOff
)

46 
iOff
 +
cuº
;

47 i‡(
iOff
 >0x40000ËiOf‡-
•a˚
;

48  
iOff
;

49 
	}
}

52 
	#g_buf„r
(
v¨
Ë\

	)

53 (()(sig√d )
	g•u
.
	g•uMem
[
rvb2øm_offs
(
cuº_addr
, 
•a˚
, 
rvb
->
v¨
)])

56 
	#s_buf„r
(
v¨
, 
iVÆ
Ë\

	)

57 
sßt32_to_16
(
iVÆ
); \

58 
	g•u
.
	g•uMem
[
rvb2øm_offs
(
cuº_addr
, 
•a˚
, 
rvb
->
v¨
)] = 
iVÆ


60 
	#s_buf„r1
(
v¨
, 
iVÆ
Ë\

	)

61 
sßt32_to_16
(
iVÆ
); \

62 
	g•u
.
	g•uMem
[
rvb2øm_offs
(
cuº_addr
, 
•a˚
, 
rvb
->
v¨
 + 1)] = 
iVÆ


67 
	$MixREVERB
(*
SSumLR
, *
RVB
, 
ns_to
, 
cuº_addr
)

69 c⁄° 
REVERBInfo
 *
rvb
 = 
•u
.rvb;

70 
IIR_ALPHA
 = 
rvb
->IIR_ALPHA;

71 
IIR_COEF
 = 
rvb
->IIR_COEF;

72 
•a˚
 = 0x40000 - 
rvb
->
SèπAddr
;

73 
l
, 
r
, 
ns
;

75 
ns
 = 0;Ç†< 
ns_to
 * 2; )

77 
ACC0
, 
ACC1
, 
FB_A0
, 
FB_A1
, 
FB_B0
, 
FB_B1
;

78 
mix_de°_a0
, 
mix_de°_a1
, 
mix_de°_b0
, 
mix_de°_b1
;

80 
öput_L
 = 
RVB
[
ns
] * 
rvb
->
IN_COEF_L
;

81 
öput_R
 = 
RVB
[
ns
+1] * 
rvb
->
IN_COEF_R
;

83 
IIR_INPUT_A0
 = ((
	`g_buf„r
(
IIR_SRC_A0
Ë* 
IIR_COEF
Ë+ 
öput_L
) >> 15;

84 
IIR_INPUT_A1
 = ((
	`g_buf„r
(
IIR_SRC_A1
Ë* 
IIR_COEF
Ë+ 
öput_R
) >> 15;

85 
IIR_INPUT_B0
 = ((
	`g_buf„r
(
IIR_SRC_B0
Ë* 
IIR_COEF
Ë+ 
öput_L
) >> 15;

86 
IIR_INPUT_B1
 = ((
	`g_buf„r
(
IIR_SRC_B1
Ë* 
IIR_COEF
Ë+ 
öput_R
) >> 15;

88 
iú_de°_a0
 = 
	`g_buf„r
(
IIR_DEST_A0
);

89 
iú_de°_a1
 = 
	`g_buf„r
(
IIR_DEST_A1
);

90 
iú_de°_b0
 = 
	`g_buf„r
(
IIR_DEST_B0
);

91 
iú_de°_b1
 = 
	`g_buf„r
(
IIR_DEST_B1
);

93 
IIR_A0
 = 
iú_de°_a0
 + ((
IIR_INPUT_A0
 - iú_de°_a0Ë* 
IIR_ALPHA
 >> 15);

94 
IIR_A1
 = 
iú_de°_a1
 + ((
IIR_INPUT_A1
 - iú_de°_a1Ë* 
IIR_ALPHA
 >> 15);

95 
IIR_B0
 = 
iú_de°_b0
 + ((
IIR_INPUT_B0
 - iú_de°_b0Ë* 
IIR_ALPHA
 >> 15);

96 
IIR_B1
 = 
iú_de°_b1
 + ((
IIR_INPUT_B1
 - iú_de°_b1Ë* 
IIR_ALPHA
 >> 15);

98 
	`¥ñﬂd
(
SSumLR
 + 
ns
 + 64*2/4 - 4);

100 
	`s_buf„r1
(
IIR_DEST_A0
, 
IIR_A0
);

101 
	`s_buf„r1
(
IIR_DEST_A1
, 
IIR_A1
);

102 
	`s_buf„r1
(
IIR_DEST_B0
, 
IIR_B0
);

103 
	`s_buf„r1
(
IIR_DEST_B1
, 
IIR_B1
);

105 
	`¥ñﬂd
(
RVB
 + 
ns
 + 64*2/4 - 4);

107 
ACC0
 = (
	`g_buf„r
(
ACC_SRC_A0
Ë* 
rvb
->
ACC_COEF_A
 +

108 
	`g_buf„r
(
ACC_SRC_B0
Ë* 
rvb
->
ACC_COEF_B
 +

109 
	`g_buf„r
(
ACC_SRC_C0
Ë* 
rvb
->
ACC_COEF_C
 +

110 
	`g_buf„r
(
ACC_SRC_D0
Ë* 
rvb
->
ACC_COEF_D
) >> 15;

111 
ACC1
 = (
	`g_buf„r
(
ACC_SRC_A1
Ë* 
rvb
->
ACC_COEF_A
 +

112 
	`g_buf„r
(
ACC_SRC_B1
Ë* 
rvb
->
ACC_COEF_B
 +

113 
	`g_buf„r
(
ACC_SRC_C1
Ë* 
rvb
->
ACC_COEF_C
 +

114 
	`g_buf„r
(
ACC_SRC_D1
Ë* 
rvb
->
ACC_COEF_D
) >> 15;

116 
FB_A0
 = 
	`g_buf„r
(
FB_SRC_A0
);

117 
FB_A1
 = 
	`g_buf„r
(
FB_SRC_A1
);

118 
FB_B0
 = 
	`g_buf„r
(
FB_SRC_B0
);

119 
FB_B1
 = 
	`g_buf„r
(
FB_SRC_B1
);

121 
mix_de°_a0
 = 
ACC0
 - ((
FB_A0
 * 
rvb
->
FB_ALPHA
) >> 15);

122 
mix_de°_a1
 = 
ACC1
 - ((
FB_A1
 * 
rvb
->
FB_ALPHA
) >> 15);

124 
mix_de°_b0
 = 
FB_A0
 + (((
ACC0
 - FB_A0Ë* 
rvb
->
FB_ALPHA
 - 
FB_B0
 *Ñvb->
FB_X
) >> 15);

125 
mix_de°_b1
 = 
FB_A1
 + (((
ACC1
 - FB_A1Ë* 
rvb
->
FB_ALPHA
 - 
FB_B1
 *Ñvb->
FB_X
) >> 15);

127 
	`s_buf„r
(
MIX_DEST_A0
, 
mix_de°_a0
);

128 
	`s_buf„r
(
MIX_DEST_A1
, 
mix_de°_a1
);

129 
	`s_buf„r
(
MIX_DEST_B0
, 
mix_de°_b0
);

130 
	`s_buf„r
(
MIX_DEST_B1
, 
mix_de°_b1
);

132 
l
 = (
mix_de°_a0
 + 
mix_de°_b0
) / 2;

133 
r
 = (
mix_de°_a1
 + 
mix_de°_b1
) / 2;

135 
l
 = (»* 
rvb
->
VﬁLe·
) >> 15;

136 
r
 = (∏* 
rvb
->
VﬁRight
) >> 15;

138 
SSumLR
[
ns
++] +
l
;

139 
SSumLR
[
ns
++] +
r
;

140 
SSumLR
[
ns
++] +
l
;

141 
SSumLR
[
ns
++] +
r
;

143 
cuº_addr
++;

144 i‡(
cuº_addr
 >0x40000Ëcuº_add∏
rvb
->
SèπAddr
;

146 
	}
}

148 
	$MixREVERB_off
(*
SSumLR
, 
ns_to
, 
cuº_addr
)

150 c⁄° 
REVERBInfo
 *
rvb
 = 
•u
.rvb;

151 
•a˚
 = 0x40000 - 
rvb
->
SèπAddr
;

152 
l
, 
r
, 
ns
;

154 
ns
 = 0;Ç†< 
ns_to
 * 2; )

156 
	`¥ñﬂd
(
SSumLR
 + 
ns
 + 64*2/4 - 4);

158 
l
 = (
	`g_buf„r
(
MIX_DEST_A0
Ë+ g_buf„r(
MIX_DEST_B0
)) / 2;

159 
r
 = (
	`g_buf„r
(
MIX_DEST_A1
Ë+ g_buf„r(
MIX_DEST_B1
)) / 2;

161 
l
 = (»* 
rvb
->
VﬁLe·
) >> 15;

162 
r
 = (∏* 
rvb
->
VﬁRight
) >> 15;

164 
SSumLR
[
ns
++] +
l
;

165 
SSumLR
[
ns
++] +
r
;

166 
SSumLR
[
ns
++] +
l
;

167 
SSumLR
[
ns
++] +
r
;

169 
cuº_addr
++;

170 i‡(
cuº_addr
 >0x40000Ëcuº_add∏
rvb
->
SèπAddr
;

172 
	}
}

174 
	$REVERBPªp
()

176 
REVERBInfo
 *
rvb
 = 
•u
.rvb;

177 
•a˚
, 
t
;

179 
t
 = 
•u
.
ªgAªa
[(
H_SPURevîbAddr
 - 0xc00) >> 1];

180 i‡(
t
 == 0xFFFF ||Å <= 0x200)

181 
•u
.
rvb
->
SèπAddr
 = spu.rvb->
CuºAddr
 = 0;

182 i‡(
•u
.
rvb
->
SèπAddr
 !(
t
 << 2))

183 
•u
.
rvb
->
SèπAddr
 = spu.rvb->
CuºAddr
 = 
t
 << 2;

185 
•a˚
 = 0x40000 - 
rvb
->
SèπAddr
;

187 
	#¥ï_offs
(
v
, 
r
Ë\

	)

188 
t
 = 
•u
.
ªgAªa
[(0x1c0 + 
r
) >> 1] * 4; \

189 
t
 >
•a˚
) \

190 
t
 -
•a˚
; \

191 
rvb
->
v
 = 
t


192 
	#¥ï_offs2
(
d
, 
r1
, 
r2
Ë\

	)

193 
t
 = 
•u
.
ªgAªa
[(0x1c0 + 
r1
) >> 1] * 4; \

194 
t
 -
•u
.
ªgAªa
[(0x1c0 + 
r2
) >> 1] * 4; \

195 
t
 < 0) \

196 
t
 +
•a˚
; \

197 
t
 >
•a˚
) \

198 
t
 -
•a˚
; \

199 
rvb
->
d
 = 
t


201 
	`¥ï_offs
(
IIR_SRC_A0
, 32);

202 
	`¥ï_offs
(
IIR_SRC_A1
, 34);

203 
	`¥ï_offs
(
IIR_SRC_B0
, 36);

204 
	`¥ï_offs
(
IIR_SRC_B1
, 38);

205 
	`¥ï_offs
(
IIR_DEST_A0
, 20);

206 
	`¥ï_offs
(
IIR_DEST_A1
, 22);

207 
	`¥ï_offs
(
IIR_DEST_B0
, 36);

208 
	`¥ï_offs
(
IIR_DEST_B1
, 38);

209 
	`¥ï_offs
(
ACC_SRC_A0
, 24);

210 
	`¥ï_offs
(
ACC_SRC_A1
, 26);

211 
	`¥ï_offs
(
ACC_SRC_B0
, 28);

212 
	`¥ï_offs
(
ACC_SRC_B1
, 30);

213 
	`¥ï_offs
(
ACC_SRC_C0
, 40);

214 
	`¥ï_offs
(
ACC_SRC_C1
, 42);

215 
	`¥ï_offs
(
ACC_SRC_D0
, 44);

216 
	`¥ï_offs
(
ACC_SRC_D1
, 46);

217 
	`¥ï_offs
(
MIX_DEST_A0
, 52);

218 
	`¥ï_offs
(
MIX_DEST_A1
, 54);

219 
	`¥ï_offs
(
MIX_DEST_B0
, 56);

220 
	`¥ï_offs
(
MIX_DEST_B1
, 58);

221 
	`¥ï_offs2
(
FB_SRC_A0
, 52, 0);

222 
	`¥ï_offs2
(
FB_SRC_A1
, 54, 0);

223 
	`¥ï_offs2
(
FB_SRC_B0
, 56, 2);

224 
	`¥ï_offs2
(
FB_SRC_B1
, 58, 2);

226 #unde‡
¥ï_offs


227 #unde‡
¥ï_offs2


228 
rvb
->
dúty
 = 0;

229 
	}
}

231 
INLINE
 
	$REVERBDo
(*
SSumLR
, *
RVB
, 
ns_to
, 
cuº_addr
)

233 i‡(
•u
.
•uCål
 & 0x80)

235 
	`MixREVERB
(
SSumLR
, 
RVB
, 
ns_to
, 
cuº_addr
);

237 i‡(
•u
.
rvb
->
VﬁLe·
 || spu.rvb->
VﬁRight
)

239 
	`MixREVERB_off
(
SSumLR
, 
ns_to
, 
cuº_addr
);

241 
	}
}

	@plugins/dfsound/sdl.c

19 
	~<°dlib.h
>

20 
	~<SDL.h
>

21 
	~"out.h
"

23 
	#BUFFER_SIZE
 22050

	)

25 *
	gpSndBuf„r
 = 
NULL
;

26 
	giBufSize
 = 0;

27 vﬁ©ûê
	giRódPos
 = 0, 
	giWrôePos
 = 0;

29 
	$SOUND_FûlAudio
(*
unu£d
, 
Uöt8
 *
°ªam
, 
Àn
) {

30 *
p
 = (*)
°ªam
;

32 
Àn
 /= ();

34 
iRódPos
 !
iWrôePos
 && 
Àn
 > 0) {

35 *
p
++ = 
pSndBuf„r
[
iRódPos
++];

36 i‡(
iRódPos
 >
iBufSize
) iReadPos = 0;

37 --
Àn
;

41 
Àn
 > 0) {

42 *
p
++ = 0;

43 --
Àn
;

45 
	}
}

47 
	$InôSDL
() {

48 i‡(
	`SDL_WasInô
(
SDL_INIT_EVERYTHING
)) {

49 
	`SDL_InôSubSy°em
(
SDL_INIT_AUDIO
);

51 
	`SDL_Inô
(
SDL_INIT_AUDIO
 | 
SDL_INIT_NOPARACHUTE
);

53 
	}
}

55 
	$De°roySDL
() {

56 i‡(
	`SDL_WasInô
(
SDL_INIT_EVERYTHING
 & ~
SDL_INIT_AUDIO
)) {

57 
	`SDL_QuôSubSy°em
(
SDL_INIT_AUDIO
);

59 
	`SDL_Quô
();

61 
	}
}

63 
	$sdl_öô
() {

64 
SDL_AudioS≥c
 
•ec
;

66 i‡(
pSndBuf„r
 !
NULL
)  -1;

68 
	`InôSDL
();

70 
•ec
.
‰eq
 = 44100;

71 
•ec
.
f‹m©
 = 
AUDIO_S16SYS
;

72 
•ec
.
ch™√ls
 = 2;

73 
•ec
.
ßm∂es
 = 512;

74 
•ec
.
ˇŒback
 = 
SOUND_FûlAudio
;

76 i‡(
	`SDL_O≥nAudio
(&
•ec
, 
NULL
) < 0) {

77 
	`De°roySDL
();

81 
iBufSize
 = 
BUFFER_SIZE
;

83 
pSndBuf„r
 = (*)
	`mÆloc
(
iBufSize
 * ());

84 i‡(
pSndBuf„r
 =
NULL
) {

85 
	`SDL_Clo£Audio
();

89 
iRódPos
 = 0;

90 
iWrôePos
 = 0;

92 
	`SDL_Pau£Audio
(0);

94 
	}
}

96 
	$sdl_föish
() {

97 i‡(
pSndBuf„r
 =
NULL
) ;

99 
	`SDL_Clo£Audio
();

100 
	`De°roySDL
();

102 
	`‰ì
(
pSndBuf„r
);

103 
pSndBuf„r
 = 
NULL
;

104 
	}
}

106 
	$sdl_busy
() {

107 
size
;

109 i‡(
pSndBuf„r
 =
NULL
)  1;

111 
size
 = 
iRódPos
 - 
iWrôePos
;

112 i‡(
size
 <0Ësizê+
iBufSize
;

114 i‡(
size
 < 
iBufSize
 / 2)  1;

117 
	}
}

119 
	$sdl_„ed
(*
pSound
, 
lByãs
) {

120 *
p
 = (*)
pSound
;

122 i‡(
pSndBuf„r
 =
NULL
) ;

124 
lByãs
 > 0) {

125 i‡(((
iWrôePos
 + 1Ë% 
iBufSize
Ë=
iRódPos
) ;

127 
pSndBuf„r
[
iWrôePos
] = *
p
++;

129 ++
iWrôePos
;

130 i‡(
iWrôePos
 >
iBufSize
) iWritePos = 0;

132 
lByãs
 -= ();

134 
	}
}

136 
	$out_ªgi°î_sdl
(
out_drivî
 *
drv
)

138 
drv
->
«me
 = "sdl";

139 
drv
->
öô
 = 
sdl_öô
;

140 
drv
->
föish
 = 
sdl_föish
;

141 
drv
->
busy
 = 
sdl_busy
;

142 
drv
->
„ed
 = 
sdl_„ed
;

143 
	}
}

	@plugins/dfsound/spu.c

21 #i‡!
deföed
(
_WIN32
Ë&& !deföed(
NO_OS
)

22 
	~<sys/time.h
>

23 
	#THREAD_ENABLED
 1

	)

25 
	~"°dafx.h
"

27 
	#_IN_SPU


	)

29 
	~"exã∫Æs.h
"

30 
	~"ªgi°îs.h
"

31 
	~"out.h
"

32 
	~"•u_c⁄fig.h
"

34 #ifde‡
__¨m__


35 
	~"¨m_„©uªs.h
"

38 #ifde‡
__ARM_ARCH_7A__


39 
	#sßt32_to_16
(
v
) \

40 
	`asm
("sßà%0,#16,%1" : "Ù" (
v
Ë: "r" (v))

	)

42 
	#sßt32_to_16
(
v
) do { \

43 i‡(
v
 < -32768) v = -32768; \

44 i‡(
v
 > 32767) v = 32767; \

45 } 0)

	)

48 
	#PSXCLK
 33868800

	)

51 
	#IRQ_NEAR_BLOCKS
 32

	)

73 
SPUInfo
 
	g•u
;

74 
SPUC⁄fig
 
	g•u_c⁄fig
;

76 
	giFMod
[
NSSIZE
];

77 
	gRVB
[
NSSIZE
 * 2];

78 
	gCh™Buf
[
NSSIZE
];

80 
	#CDDA_BUFFER_SIZE
 (16384 * (
uöt32_t
))

81 

	)

88 
	~"ªvîb.c
"

89 
	~"ad§.c
"

133 
	$I¡îpﬁ©eUp
(*
SB
, 
söc
)

135 if(
SB
[32]==1)

137 c⁄° 
id1
=
SB
[30]-SB[29];

138 c⁄° 
id2
=
SB
[31]-SB[30];

140 
SB
[32]=0;

142 if(
id1
>0)

144 if(
id2
<
id1
)

145 {
SB
[28]=
id1
;SB[32]=2;}

147 if(
id2
<(
id1
<<1))

148 
SB
[28]=(
id1
*
söc
)>>16;

150 
SB
[28]=(
id1
*
söc
)>>17;

154 if(
id2
>
id1
)

155 {
SB
[28]=
id1
;SB[32]=2;}

157 if(
id2
>(
id1
<<1))

158 
SB
[28]=(
id1
*
söc
)>>16;

160 
SB
[28]=(
id1
*
söc
)>>17;

164 if(
SB
[32]==2)

166 
SB
[32]=0;

168 
SB
[28]=(SB[28]*
söc
)>>17;

172 
SB
[29]+=SB[28];

175 
SB
[29]+=SB[28];

176 
	}
}

182 
	$I¡îpﬁ©eDown
(*
SB
, 
söc
)

184 if(
söc
>=0x20000L)

186 
SB
[29]+=(SB[30]-SB[29])/2;

187 if(
söc
>=0x30000L)

188 
SB
[29]+=(SB[31]-SB[30])/2;

190 
	}
}

195 
	#gvÆ0
 (((*)(&
SB
[29]))[
gpos
&3])

	)

196 
	#gvÆ
(
x
Ë(()((*)(&
SB
[29]))[(
gpos
+x)&3])

	)

198 
	~"gauss_i.h
"

202 
	~"xa.c
"

204 
	$do_úq
()

208 
•u
.
•uSèt
 |
STAT_IRQ
;

209 if(
•u
.
úqCÆlback
Ë•u.
	`úqCÆlback
();

211 
	}
}

213 
	$check_úq
(
ch
, *
pos
)

215 if((
•u
.
•uCål
 & 
CTRL_IRQ
Ë&& 
pos
 =•u.
pSpuIrq
)

218 
	`do_úq
();

222 
	}
}

228 
	$SèπSoundSB
(*
SB
)

230 
SB
[26]=0;

231 
SB
[27]=0;

233 
SB
[28]=0;

234 
SB
[29]=0;

235 
SB
[30]=0;

236 
SB
[31]=0;

237 
	}
}

239 
	$SèπSoundMaö
(
ch
)

241 
SPUCHAN
 *
s_ch™
 = &
•u
.s_ch™[
ch
];

243 
	`SèπADSR
(
ch
);

244 
	`SèπREVERB
(
ch
);

246 
s_ch™
->
¥evÊags
=2;

247 
s_ch™
->
iSBPos
=27;

248 
s_ch™
->
•os
=0;

250 
•u
.
dwNewCh™√l
&=~(1<<
ch
);

251 
•u
.
dwCh™√lOn
|=1<<
ch
;

252 
•u
.
dwCh™√lDód
&=~(1<<
ch
);

253 
	}
}

255 
	$SèπSound
(
ch
)

257 
	`SèπSoundMaö
(
ch
);

258 
	`SèπSoundSB
(
•u
.
SB
 + 
ch
 * 
SB_SIZE
);

259 
	}
}

265 
INLINE
 
	$FModCh™geFªquícy
(*
SB
, 
pôch
, 
ns
)

267 
NP
=
pôch
;

268 
söc
;

270 
NP
=((32768L+
iFMod
[
ns
])*NP)>>15;

272 if(
NP
>0x3fff) NP=0x3fff;

273 if(
NP
<0x1) NP=0x1;

275 
söc
=
NP
<<4;

276 if(
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
==1)

277 
SB
[32]=1;

278 
iFMod
[
ns
]=0;

280  
söc
;

281 
	}
}

285 
INLINE
 
	$St‹eI¡îpﬁ©i⁄VÆ
(*
SB
, 
söc
, 
Á
, 
fmod_‰eq
)

287 if(
fmod_‰eq
)

288 
SB
[29]=
Á
;

291 
	`sßt32_to_16
(
Á
);

293 if(
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
>=2)

295 
gpos
 = 
SB
[28];

296 
gvÆ0
 = 
Á
;

297 
gpos
 = (gpos+1) & 3;

298 
SB
[28] = 
gpos
;

301 if(
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
==1)

303 
SB
[28] = 0;

304 
SB
[29] = SB[30];

305 
SB
[30] = SB[31];

306 
SB
[31] = 
Á
;

307 
SB
[32] = 1;

309 
SB
[29]=
Á
;

311 
	}
}

315 
INLINE
 
	$iGëI¡îpﬁ©i⁄VÆ
(*
SB
, 
söc
, 
•os
, 
fmod_‰eq
)

317 
Á
;

319 if(
fmod_‰eq
Ë 
SB
[29];

321 
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
)

326 
xd
;
gpos
;

327 
xd
 = (
•os
 >> 1)+1;

328 
gpos
 = 
SB
[28];

330 
Á
 = 
	`gvÆ
(3Ë- 3*gvÆ(2Ë+ 3*gvÆ(1Ë- 
gvÆ0
;

331 
Á
 *(
xd
 - (2<<15)) / 6;

332 
Á
 >>= 15;

333 
Á
 +
	`gvÆ
(2Ë- gvÆ(1Ë- gvÆ(1Ë+ 
gvÆ0
;

334 
Á
 *(
xd
 - (1<<15)) >> 1;

335 
Á
 >>= 15;

336 
Á
 +
	`gvÆ
(1Ë- 
gvÆ0
;

337 
Á
 *
xd
;

338 
Á
 >>= 15;

339 
Á
 = f®+ 
gvÆ0
;

345 
vl
, 
vr
;
gpos
;

346 
vl
 = (
•os
 >> 6) & ~3;

347 
gpos
 = 
SB
[28];

348 
vr
=(
gauss
[
vl
]*()
gvÆ0
)&~2047;

349 
vr
+=(
gauss
[
vl
+1]*
	`gvÆ
(1))&~2047;

350 
vr
+=(
gauss
[
vl
+2]*
	`gvÆ
(2))&~2047;

351 
vr
+=(
gauss
[
vl
+3]*
	`gvÆ
(3))&~2047;

352 
Á
 = 
vr
>>11;

357 if(
söc
<0x10000L)

358 
	`I¡îpﬁ©eUp
(
SB
, 
söc
);

359 
	`I¡îpﬁ©eDown
(
SB
, 
söc
);

360 
Á
=
SB
[29];

365 
Á
=
SB
[29];

370  
Á
;

371 
	}
}

373 
	$decode_block_d©a
(*
de°
, c⁄° *
§c
, 
¥edi˘_ƒ
, 
shi·_Á˘‹
)

375 c⁄° 
f
[16][2] = {

382 
nSam∂e
;

383 
Á
, 
s_1
, 
s_2
, 
d
, 
s
;

385 
s_1
 = 
de°
[27];

386 
s_2
 = 
de°
[26];

388 
nSam∂e
 = 0;ÇSam∂ê< 28; 
§c
++)

390 
d
 = ()*
§c
;

391 
s
 = ()(sig√d )((
d
 & 0x0f) << 12);

393 
Á
 = 
s
 >> 
shi·_Á˘‹
;

394 
Á
 +((
s_1
 * 
f
[
¥edi˘_ƒ
][0])>>6Ë+ ((
s_2
 * f[predict_nr][1])>>6);

395 
s_2
=
s_1
;s_1=
Á
;

397 
de°
[
nSam∂e
++] = 
Á
;

399 
s
 = ()(sig√d )((
d
 & 0xf0) << 8);

400 
Á
 = 
s
 >> 
shi·_Á˘‹
;

401 
Á
 +((
s_1
 * 
f
[
¥edi˘_ƒ
][0])>>6Ë+ ((
s_2
 * f[predict_nr][1])>>6);

402 
s_2
=
s_1
;s_1=
Á
;

404 
de°
[
nSam∂e
++] = 
Á
;

406 
	}
}

408 
	$decode_block
(*
unu£d
, 
ch
, *
SB
)

410 
SPUCHAN
 *
s_ch™
 = &
•u
.s_ch™[
ch
];

411 *
°¨t
;

412 
¥edi˘_ƒ
, 
shi·_Á˘‹
, 
Êags
;

413 
ªt
 = 0;

415 
°¨t
 = 
s_ch™
->
pCuº
;

416 i‡(
°¨t
 =
•u
.
•uMemC
)

417 
ªt
 = 1;

419 i‡(
s_ch™
->
¥evÊags
 & 1)

421 i‡(!(
s_ch™
->
¥evÊags
 & 2))

422 
ªt
 = 1;

424 
°¨t
 = 
s_ch™
->
pLo›
;

427 
	`check_úq
(
ch
, 
°¨t
);

429 
¥edi˘_ƒ
 = 
°¨t
[0];

430 
shi·_Á˘‹
 = 
¥edi˘_ƒ
 & 0xf;

431 
¥edi˘_ƒ
 >>= 4;

433 
	`decode_block_d©a
(
SB
, 
°¨t
 + 2, 
¥edi˘_ƒ
, 
shi·_Á˘‹
);

435 
Êags
 = 
°¨t
[1];

436 i‡(
Êags
 & 4)

437 
s_ch™
->
pLo›
 = 
°¨t
;

439 
°¨t
 += 16;

441 i‡(
Êags
 & 1) {

442 
°¨t
 = 
s_ch™
->
pLo›
;

443 
	`check_úq
(
ch
, 
°¨t
);

446 i‡(
°¨t
 - 
•u
.
•uMemC
 >= 0x80000)

447 
°¨t
 = 
•u
.
•uMemC
;

449 
s_ch™
->
pCuº
 = 
°¨t
;

450 
s_ch™
->
¥evÊags
 = 
Êags
;

452  
ªt
;

453 
	}
}

456 
	$skù_block
(
ch
)

458 
SPUCHAN
 *
s_ch™
 = &
•u
.s_ch™[
ch
];

459 *
°¨t
 = 
s_ch™
->
pCuº
;

460 
Êags
;

461 
ªt
 = 0;

463 i‡(
s_ch™
->
¥evÊags
 & 1) {

464 i‡(!(
s_ch™
->
¥evÊags
 & 2))

465 
ªt
 = 1;

467 
°¨t
 = 
s_ch™
->
pLo›
;

470 
	`check_úq
(
ch
, 
°¨t
);

472 
Êags
 = 
°¨t
[1];

473 i‡(
Êags
 & 4)

474 
s_ch™
->
pLo›
 = 
°¨t
;

476 
°¨t
 += 16;

478 i‡(
Êags
 & 1) {

479 
°¨t
 = 
s_ch™
->
pLo›
;

480 
	`check_úq
(
ch
, 
°¨t
);

483 
s_ch™
->
pCuº
 = 
°¨t
;

484 
s_ch™
->
¥evÊags
 = 
Êags
;

486  
ªt
;

487 
	}
}

490 
	$sˇn_f‹_úq
(
ch
, *
upd_ßm∂es
)

492 
SPUCHAN
 *
s_ch™
 = &
•u
.s_ch™[
ch
];

493 
pos
, 
söc
, 
söc_öv
, 
íd
;

494 *
block
;

495 
Êags
;

497 
block
 = 
s_ch™
->
pCuº
;

498 
pos
 = 
s_ch™
->
•os
;

499 
söc
 = 
s_ch™
->sinc;

500 
íd
 = 
pos
 + *
upd_ßm∂es
 * 
söc
;

502 
pos
 +(28 - 
s_ch™
->
iSBPos
) << 16;

503 
pos
 < 
íd
)

505 i‡(
block
 =
•u
.
pSpuIrq
)

507 
Êags
 = 
block
[1];

508 
block
 += 16;

509 i‡(
Êags
 & 1) {

510 
block
 = 
s_ch™
->
pLo›
;

511 i‡(
block
 =
•u
.
pSpuIrq
)

514 
pos
 += 28 << 16;

517 i‡(
pos
 < 
íd
)

519 
söc_öv
 = 
s_ch™
->sinc_inv;

520 i‡(
söc_öv
 == 0)

521 
söc_öv
 = 
s_ch™
->söc_öv = (0x80000000u / (
uöt32_t
)
söc
) << 1;

523 
pos
 -
s_ch™
->
•os
;

524 *
upd_ßm∂es
 = (((
uöt64_t
)
pos
 * 
söc_öv
) >> 32) + 1;

528 
	}
}

530 
	#make_do_ßm∂es
(
«me
, 
fmod_code
, 
öãΩ_°¨t
, 
öãΩ1_code
, 
öãΩ2_code
, 
öãΩ_íd
) \

531 
noölöe
 
do_ßm∂es_
##
	`«me
( \

532 (*
decode_f
)(*
c⁄ãxt
, 
ch
, *
SB
), *
˘x
, \

533 
ch
, 
ns_to
, *
SB
, 
söc
, *
•os
, *
sbpos
) \

535 
ns
, 
d
, 
Á
; \

536 
ªt
 = 
ns_to
; \

537 
öãΩ_°¨t
; \

539 
ns
 = 0;Ç†< 
ns_to
;Çs++) \

541 
fmod_code
; \

543 *
•os
 +
söc
; \

544 *
•os
 >= 0x10000) \

546 
Á
 = 
SB
[(*
sbpos
)++]; \

547 i‡(*
sbpos
 >= 28) \

549 *
sbpos
 = 0; \

550 
d
 = 
	`decode_f
(
˘x
, 
ch
, 
SB
); \

551 i‡(
d
 && 
ns
 < 
ªt
) \

552 
ªt
 = 
ns
; \

555 
öãΩ1_code
; \

556 *
•os
 -= 0x10000; \

559 
öãΩ2_code
; \

562 
öãΩ_íd
; \

564  
ªt
; \

565 }

	)

567 
	#fmod_ªcv_check
 \

568 if(
•u
.
s_ch™
[
ch
].
bFMod
==1 && 
iFMod
[
ns
]) \

569 
söc
 = 
	`FModCh™geFªquícy
(
SB
, 
•u
.
s_ch™
[
ch
].
iRawPôch
, 
ns
)

	)

571 
make_do_ßm∂es
(, 
fmod_ªcv_check
, ,

572 
St‹eI¡îpﬁ©i⁄VÆ
(
SB
, 
söc
, 
Á
, 
•u
.
s_ch™
[
ch
].
bFMod
==2),

573 
Ch™Buf
[
ns
] = 
iGëI¡îpﬁ©i⁄VÆ
(
SB
, 
söc
, *
•os
, 
•u
.
s_ch™
[
ch
].
bFMod
==2), )

574 
	$make_do_ßm∂es
(
noöt
, , 
Á
 = 
SB
[29], , 
Ch™Buf
[
ns
] = fa, SB[29] = fa)

576 
	#sim∂e_öãΩ_°‹e
 \

577 
SB
[28] = 0; \

578 
SB
[29] = SB[30]; \

579 
SB
[30] = SB[31]; \

580 
SB
[31] = 
Á
; \

581 
SB
[32] = 1

	)

583 
	#sim∂e_öãΩ_gë
 \

584 if(
söc
<0x10000) \

585 
	`I¡îpﬁ©eUp
(
SB
, 
söc
); \

586 
	`I¡îpﬁ©eDown
(
SB
, 
söc
); \

587 
Ch™Buf
[
ns
] = 
SB
[29]

	)

589 
	$make_do_ßm∂es
(
sim∂e
, , ,

590 
sim∂e_öãΩ_°‹e
, 
sim∂e_öãΩ_gë
, )

592 
	$do_ßm∂es_skù
(
ch
, 
ns_to
)

594 
SPUCHAN
 *
s_ch™
 = &
•u
.s_ch™[
ch
];

595 
•os
 = 
s_ch™
->spos;

596 
söc
 = 
s_ch™
->sinc;

597 
ªt
 = 
ns_to
, 
ns
, 
d
;

599 
•os
 +
s_ch™
->
iSBPos
 << 16;

601 
ns
 = 0;Ç†< 
ns_to
;Çs++)

603 
•os
 +
söc
;

604 
•os
 >= 28*0x10000)

606 
d
 = 
	`skù_block
(
ch
);

607 i‡(
d
 && 
ns
 < 
ªt
)

608 
ªt
 = 
ns
;

609 
•os
 -= 28*0x10000;

613 
s_ch™
->
iSBPos
 = 
•os
 >> 16;

614 
s_ch™
->
•os
 = spos & 0xffff;

616  
ªt
;

617 
	}
}

619 
	$do_ls‰_ßm∂es
(
ns_to
, 
˘æ
,

620 *
dwNoi£Cou¡
, *
dwNoi£VÆ
)

622 
cou¡î
 = *
dwNoi£Cou¡
;

623 
vÆ
 = *
dwNoi£VÆ
;

624 
Àvñ
, 
shi·
, 
bô
;

625 
ns
;

628 
Àvñ
 = (
˘æ
 >> 10) & 0x0f;

629 
Àvñ
 = 0x8000 >>Üevel;

631 
ns
 = 0;Ç†< 
ns_to
;Çs++)

633 
cou¡î
 += 2;

634 i‡(
cou¡î
 >
Àvñ
)

636 
cou¡î
 -
Àvñ
;

637 
shi·
 = (
vÆ
 >> 10) & 0x1f;

638 
bô
 = (0x69696969 >> 
shi·
) & 1;

639 
bô
 ^(
vÆ
 >> 15) & 1;

640 
vÆ
 = (vÆ << 1Ë| 
bô
;

643 
Ch™Buf
[
ns
] = (sig√d )
vÆ
;

646 *
dwNoi£Cou¡
 = 
cou¡î
;

647 *
dwNoi£VÆ
 = 
vÆ
;

648 
	}
}

650 
	$do_ßm∂es_noi£
(
ch
, 
ns_to
)

652 
ªt
;

654 
ªt
 = 
	`do_ßm∂es_skù
(
ch
, 
ns_to
);

656 
	`do_ls‰_ßm∂es
(
ns_to
, 
•u
.
•uCål
, &•u.
dwNoi£Cou¡
, &•u.
dwNoi£VÆ
);

658  
ªt
;

659 
	}
}

661 #ifde‡
HAVE_ARMV5


663 
mix_ch™
(*
SSumLR
, 
cou¡
, 
lv
, 
rv
);

664 
mix_ch™_rvb
(*
SSumLR
, 
cou¡
, 
lv
, 
rv
, *
rvb
);

666 
	$mix_ch™
(*
SSumLR
, 
cou¡
, 
lv
, 
rv
)

668 c⁄° *
§c
 = 
Ch™Buf
;

669 
l
, 
r
;

671 
cou¡
--)

673 
svÆ
 = *
§c
++;

675 
l
 = (
svÆ
 * 
lv
) >> 14;

676 
r
 = (
svÆ
 * 
rv
) >> 14;

677 *
SSumLR
++ +
l
;

678 *
SSumLR
++ +
r
;

680 
	}
}

682 
	$mix_ch™_rvb
(*
SSumLR
, 
cou¡
, 
lv
, 
rv
, *
rvb
)

684 c⁄° *
§c
 = 
Ch™Buf
;

685 *
d°
 = 
SSumLR
;

686 *
drvb
 = 
rvb
;

687 
l
, 
r
;

689 
cou¡
--)

691 
svÆ
 = *
§c
++;

693 
l
 = (
svÆ
 * 
lv
) >> 14;

694 
r
 = (
svÆ
 * 
rv
) >> 14;

695 *
d°
++ +
l
;

696 *
d°
++ +
r
;

697 *
drvb
++ +
l
;

698 *
drvb
++ +
r
;

700 
	}
}

705 
noölöe
 
	$do_decode_bufs
(*
mem
, 
which
,

706 
cou¡
, 
decode_pos
)

708 *
d°
 = &
mem
[0x800/2 + 
which
*0x400/2];

709 c⁄° *
§c
 = 
Ch™Buf
;

710 
curs‹
 = 
decode_pos
;

712 
cou¡
-- > 0)

714 
curs‹
 &= 0x1ff;

715 
d°
[
curs‹
] = *
§c
++;

716 
curs‹
++;

720 
	}
}

722 
	$do_sûít_ch™s
(
ns_to
, 
sûítch
)

724 
mask
;

725 
SPUCHAN
 *
s_ch™
;

726 
ch
;

728 
mask
 = 
sûítch
 & 0xffffff;

729 
ch
 = 0; 
mask
 != 0; ch++, mask >>= 1)

731 i‡(!(
mask
 & 1)) ;

732 i‡(
•u
.
dwCh™√lDód
 & (1<<
ch
)) ;

734 
s_ch™
 = &
•u
.s_ch™[
ch
];

735 i‡(
s_ch™
->
pCuº
 > 
•u
.
pSpuIrq
 && s_ch™->
pLo›
 > spu.pSpuIrq)

738 
s_ch™
->
•os
 +s_ch™->
iSBPos
 << 16;

739 
s_ch™
->
iSBPos
 = 0;

741 
s_ch™
->
•os
 +s_ch™->
söc
 * 
ns_to
;

742 
s_ch™
->
•os
 >= 28 * 0x10000)

744 *
°¨t
 = 
s_ch™
->
pCuº
;

746 
	`skù_block
(
ch
);

747 i‡(
°¨t
 =
s_ch™
->
pCuº
 || sèπ - 
•u
.
•uMemC
 < 0x1000)

750 
•u
.
dwCh™√lDód
 |1<<
ch
;

751 
s_ch™
->
•os
 = 0;

755 
s_ch™
->
•os
 -= 28 * 0x10000;

758 
	}
}

760 
	$do_ch™√ls
(
ns_to
)

762 
mask
;

763 
do_rvb
, 
ch
, 
d
;

764 
SPUCHAN
 *
s_ch™
;

765 *
SB
, 
söc
;

767 
do_rvb
 = 
•u
.
rvb
->
SèπAddr
 && 
•u_c⁄fig
.
iU£Revîb
;

768 i‡(
do_rvb
)

769 
	`mem£t
(
RVB
, 0, 
ns_to
 * (RVB[0]) * 2);

771 
mask
 = 
•u
.
dwNewCh™√l
 & 0xffffff;

772 
ch
 = 0; 
mask
 != 0; ch++, mask >>= 1) {

773 i‡(
mask
 & 1)

774 
	`SèπSound
(
ch
);

777 
mask
 = 
•u
.
dwCh™√lOn
 & 0xffffff;

778 
ch
 = 0; 
mask
 != 0; ch++, mask >>= 1)

780 i‡(!(
mask
 & 1)) ;

782 
s_ch™
 = &
•u
.s_ch™[
ch
];

783 
SB
 = 
•u
.SB + 
ch
 * 
SB_SIZE
;

784 
söc
 = 
s_ch™
->sinc;

786 i‡(
s_ch™
->
bNoi£
)

787 
d
 = 
	`do_ßm∂es_noi£
(
ch
, 
ns_to
);

788 i‡(
s_ch™
->
bFMod
 == 2

789 || (
s_ch™
->
bFMod
 =0 && 
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
 == 0))

790 
d
 = 
	`do_ßm∂es_noöt
(
decode_block
, 
NULL
, 
ch
, 
ns_to
,

791 
SB
, 
söc
, &
s_ch™
->
•os
, &s_ch™->
iSBPos
);

792 i‡(
s_ch™
->
bFMod
 =0 && 
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
 == 1)

793 
d
 = 
	`do_ßm∂es_sim∂e
(
decode_block
, 
NULL
, 
ch
, 
ns_to
,

794 
SB
, 
söc
, &
s_ch™
->
•os
, &s_ch™->
iSBPos
);

796 
d
 = 
	`do_ßm∂es_deÁu…
(
decode_block
, 
NULL
, 
ch
, 
ns_to
,

797 
SB
, 
söc
, &
s_ch™
->
•os
, &s_ch™->
iSBPos
);

799 
d
 = 
	`MixADSR
(&
s_ch™
->
ADSRX
, d);

800 i‡(
d
 < 
ns_to
) {

801 
•u
.
dwCh™√lOn
 &~(1 << 
ch
);

802 
s_ch™
->
ADSRX
.
Envñ›eVﬁ
 = 0;

803 
	`mem£t
(&
Ch™Buf
[
d
], 0, (
ns_to
 - d) * (ChanBuf[0]));

806 i‡(
ch
 == 1 || ch == 3)

808 
	`do_decode_bufs
(
•u
.
•uMem
, 
ch
/2, 
ns_to
, spu.
decode_pos
);

809 
•u
.
decode_dúty_ch
 |1 << 
ch
;

812 i‡(
s_ch™
->
bFMod
 == 2)

813 
	`mem˝y
(
iFMod
, &
Ch™Buf
, 
ns_to
 * (iFMod[0]));

814 i‡(
s_ch™
->
bRVBA˘ive
 && 
do_rvb
)

815 
	`mix_ch™_rvb
(
•u
.
SSumLR
, 
ns_to
, 
s_ch™
->
iLe·Vﬁume
, s_ch™->
iRightVﬁume
, 
RVB
);

817 
	`mix_ch™
(
•u
.
SSumLR
, 
ns_to
, 
s_ch™
->
iLe·Vﬁume
, s_ch™->
iRightVﬁume
);

820 i‡(
•u
.
rvb
->
SèπAddr
) {

821 i‡(
do_rvb
)

822 
	`REVERBDo
(
•u
.
SSumLR
, 
RVB
, 
ns_to
, spu.
rvb
->
CuºAddr
);

824 
•u
.
rvb
->
CuºAddr
 +
ns_to
 / 2;

825 
•u
.
rvb
->
CuºAddr
 >= 0x40000)

826 
•u
.
rvb
->
CuºAddr
 -0x40000 - spu.rvb->
SèπAddr
;

828 
	}
}

830 
do_ßm∂es_föish
(*
SSumLR
, 
ns_to
,

831 
sûítch
, 
decode_pos
);

835 #i‡
deföed
(
THREAD_ENABLED
Ë|| deföed(
WANT_THREAD_CODE
)

838 
	s•u_w‹kî
 {

841 
	mexô_thªad
;

842 
	mi_ªady
;

843 
	mi_ª≠ed
;

844 
	mœ°_boŸ_˙t
;

845 
	møm_dúty
;

848 
	m_∑d0
[128/4];

852 
	mi_d⁄e
;

853 
	ma˘ive
;

854 
	mboŸ_˙t
;

856 
	m_∑d1
[128/4];

858 
	sw‹k_ôem
 {

859 
	mns_to
;

860 
	m˘æ
;

861 
	mdecode_pos
;

862 
	mrvb_addr
;

863 
	mch™√ls_√w
;

864 
	mch™√ls_⁄
;

865 
	mch™√ls_sûít
;

867 
	m•os
;

868 
	msbpos
;

869 
	msöc
;

870 
	m°¨t
;

871 
	mlo›
;

872 
	mns_to
;

873 
	mvﬁ_l
;

874 
	mvﬁ_r
;

875 
ADSRInfoEx
 
	mad§
;

877 } 
	mch
[24];

878 
	mSSumLR
[
NSSIZE
 * 2];

879 } 
	mi
[4];

880 } *
	gw‹kî
;

882 
	#WORK_MAXCNT
 ((
w‹kî
->
i
Ë/ (w‹kî->i[0]))

	)

883 
	#WORK_I_MASK
 (
WORK_MAXCNT
 - 1)

	)

885 
thªad_w‹k_°¨t
();

886 
thªad_w‹k_waô_sync
(
w‹k_ôem
 *
w‹k
, 
f‹˚
);

887 
thªad_sync_ˇches
();

888 
thªad_gë_i_d⁄e
();

890 
	$decode_block_w‹k
(*
c⁄ãxt
, 
ch
, *
SB
)

892 c⁄° *
øm
 = 
•u
.
•uMemC
;

893 
¥edi˘_ƒ
, 
shi·_Á˘‹
, 
Êags
;

894 
w‹k_ôem
 *
w‹k
 = 
c⁄ãxt
;

895 
°¨t
 = 
w‹k
->
ch
[ch].start;

896 
lo›
 = 
w‹k
->
ch
[ch].loop;

898 
¥edi˘_ƒ
 = 
øm
[
°¨t
];

899 
shi·_Á˘‹
 = 
¥edi˘_ƒ
 & 0xf;

900 
¥edi˘_ƒ
 >>= 4;

902 
	`decode_block_d©a
(
SB
, 
øm
 + 
°¨t
 + 2, 
¥edi˘_ƒ
, 
shi·_Á˘‹
);

904 
Êags
 = 
øm
[
°¨t
 + 1];

905 i‡(
Êags
 & 4)

906 
lo›
 = 
°¨t
;

908 
°¨t
 += 16;

910 i‡(
Êags
 & 1)

911 
°¨t
 = 
lo›
;

913 
w‹k
->
ch
[ch].
°¨t
 = start & 0x7ffff;

914 
w‹k
->
ch
[ch].
lo›
 =Üoop;

917 
	}
}

919 
	$queue_ch™√l_w‹k
(
ns_to
, 
sûítch
)

921 
w‹k_ôem
 *
w‹k
;

922 
SPUCHAN
 *
s_ch™
;

923 
mask
;

924 
ch
, 
d
;

926 
w‹k
 = &
w‹kî
->
i
[w‹kî->
i_ªady
 & 
WORK_I_MASK
];

927 
w‹k
->
ns_to
 =Çs_to;

928 
w‹k
->
˘æ
 = 
•u
.
•uCål
;

929 
w‹k
->
decode_pos
 = 
•u
.decode_pos;

930 
w‹k
->
ch™√ls_sûít
 = 
sûítch
;

932 
mask
 = 
w‹k
->
ch™√ls_√w
 = 
•u
.
dwNewCh™√l
 & 0xffffff;

933 
ch
 = 0; 
mask
 != 0; ch++, mask >>= 1) {

934 i‡(
mask
 & 1)

935 
	`SèπSoundMaö
(
ch
);

938 
mask
 = 
w‹k
->
ch™√ls_⁄
 = 
•u
.
dwCh™√lOn
 & 0xffffff;

939 
•u
.
decode_dúty_ch
 |
mask
 & 0x0a;

941 
ch
 = 0; 
mask
 != 0; ch++, mask >>= 1)

943 i‡(!(
mask
 & 1)) ;

945 
s_ch™
 = &
•u
.s_ch™[
ch
];

946 
w‹k
->
ch
[ch].
•os
 = 
s_ch™
->spos;

947 
w‹k
->
ch
[ch].
sbpos
 = 
s_ch™
->
iSBPos
;

948 
w‹k
->
ch
[ch].
söc
 = 
s_ch™
->sinc;

949 
w‹k
->
ch
[ch].
ad§
 = 
s_ch™
->
ADSRX
;

950 
w‹k
->
ch
[ch].
vﬁ_l
 = 
s_ch™
->
iLe·Vﬁume
;

951 
w‹k
->
ch
[ch].
vﬁ_r
 = 
s_ch™
->
iRightVﬁume
;

952 
w‹k
->
ch
[ch].
°¨t
 = 
s_ch™
->
pCuº
 - 
•u
.
•uMemC
;

953 
w‹k
->
ch
[ch].
lo›
 = 
s_ch™
->
pLo›
 - 
•u
.
•uMemC
;

954 i‡(
s_ch™
->
¥evÊags
 & 1)

955 
w‹k
->
ch
[ch].
°¨t
 = w‹k->ch[ch].
lo›
;

957 
d
 = 
	`do_ßm∂es_skù
(
ch
, 
ns_to
);

958 
w‹k
->
ch
[ch].
ns_to
 = 
d
;

961 
d
 = 
	`SkùADSR
(&
s_ch™
->
ADSRX
, d);

962 i‡(
d
 < 
ns_to
) {

963 
•u
.
dwCh™√lOn
 &~(1 << 
ch
);

964 
s_ch™
->
ADSRX
.
Envñ›eVﬁ
 = 0;

968 
w‹k
->
rvb_addr
 = 0;

969 i‡(
•u
.
rvb
->
SèπAddr
) {

970 i‡(
•u_c⁄fig
.
iU£Revîb
)

971 
w‹k
->
rvb_addr
 = 
•u
.
rvb
->
CuºAddr
;

973 
•u
.
rvb
->
CuºAddr
 +
ns_to
 / 2;

974 
•u
.
rvb
->
CuºAddr
 >= 0x40000)

975 
•u
.
rvb
->
CuºAddr
 -0x40000 - spu.rvb->
SèπAddr
;

978 
w‹kî
->
i_ªady
++;

979 
	`thªad_w‹k_°¨t
();

980 
	}
}

982 
	$do_ch™√l_w‹k
(
w‹k_ôem
 *
w‹k
)

984 
mask
;

985 
decode_dúty_ch
 = 0;

986 c⁄° 
SPUCHAN
 *
s_ch™
;

987 *
SB
, 
söc
, 
•os
, 
sbpos
;

988 
d
, 
ch
, 
ns_to
;

990 
ns_to
 = 
w‹k
->ns_to;

992 i‡(
w‹k
->
rvb_addr
)

993 
	`mem£t
(
RVB
, 0, 
ns_to
 * (RVB[0]) * 2);

995 
mask
 = 
w‹k
->
ch™√ls_√w
;

996 
ch
 = 0; 
mask
 != 0; ch++, mask >>= 1) {

997 i‡(
mask
 & 1)

998 
	`SèπSoundSB
(
•u
.
SB
 + 
ch
 * 
SB_SIZE
);

1001 
mask
 = 
w‹k
->
ch™√ls_⁄
;

1002 
ch
 = 0; 
mask
 != 0; ch++, mask >>= 1)

1004 i‡(!(
mask
 & 1)) ;

1006 
d
 = 
w‹k
->
ch
[ch].
ns_to
;

1007 
•os
 = 
w‹k
->
ch
[ch].spos;

1008 
sbpos
 = 
w‹k
->
ch
[ch].sbpos;

1009 
söc
 = 
w‹k
->
ch
[ch].sinc;

1011 
s_ch™
 = &
•u
.s_ch™[
ch
];

1012 
SB
 = 
•u
.SB + 
ch
 * 
SB_SIZE
;

1014 i‡(
s_ch™
->
bNoi£
)

1015 
	`do_ls‰_ßm∂es
(
d
, 
w‹k
->
˘æ
, &
•u
.
dwNoi£Cou¡
, &•u.
dwNoi£VÆ
);

1016 i‡(
s_ch™
->
bFMod
 == 2

1017 || (
s_ch™
->
bFMod
 =0 && 
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
 == 0))

1018 
	`do_ßm∂es_noöt
(
decode_block_w‹k
, 
w‹k
, 
ch
, 
d
, 
SB
, 
söc
, &
•os
, &
sbpos
);

1019 i‡(
s_ch™
->
bFMod
 =0 && 
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
 == 1)

1020 
	`do_ßm∂es_sim∂e
(
decode_block_w‹k
, 
w‹k
, 
ch
, 
d
, 
SB
, 
söc
, &
•os
, &
sbpos
);

1022 
	`do_ßm∂es_deÁu…
(
decode_block_w‹k
, 
w‹k
, 
ch
, 
d
, 
SB
, 
söc
, &
•os
, &
sbpos
);

1024 
d
 = 
	`MixADSR
(&
w‹k
->
ch
[ch].
ad§
, d);

1025 i‡(
d
 < 
ns_to
) {

1026 
w‹k
->
ch
[ch].
ad§
.
Envñ›eVﬁ
 = 0;

1027 
	`mem£t
(&
Ch™Buf
[
d
], 0, (
ns_to
 - d) * (ChanBuf[0]));

1030 i‡(
ch
 == 1 || ch == 3)

1032 
	`do_decode_bufs
(
•u
.
•uMem
, 
ch
/2, 
ns_to
, 
w‹k
->
decode_pos
);

1033 
decode_dúty_ch
 |1 << 
ch
;

1036 i‡(
s_ch™
->
bFMod
 == 2)

1037 
	`mem˝y
(
iFMod
, &
Ch™Buf
, 
ns_to
 * (iFMod[0]));

1038 i‡(
s_ch™
->
bRVBA˘ive
 && 
w‹k
->
rvb_addr
)

1039 
	`mix_ch™_rvb
(
w‹k
->
SSumLR
, 
ns_to
,

1040 
w‹k
->
ch
[ch].
vﬁ_l
, w‹k->ch[ch].
vﬁ_r
, 
RVB
);

1042 
	`mix_ch™
(
w‹k
->
SSumLR
, 
ns_to
, w‹k->
ch
[ch].
vﬁ_l
, w‹k->ch[ch].
vﬁ_r
);

1045 i‡(
w‹k
->
rvb_addr
)

1046 
	`REVERBDo
(
w‹k
->
SSumLR
, 
RVB
, 
ns_to
, w‹k->
rvb_addr
);

1047 
	}
}

1049 
	$sync_w‹kî_thªad
(
f‹˚
)

1051 
w‹k_ôem
 *
w‹k
;

1052 
d⁄e
, 
u£d_•a˚
;

1055 
f‹˚
 |
•u
.
rvb
->
dúty
 && spu.rvb->
SèπAddr
;

1057 
d⁄e
 = 
	`thªad_gë_i_d⁄e
(Ë- 
w‹kî
->
i_ª≠ed
;

1058 
u£d_•a˚
 = 
w‹kî
->
i_ªady
 - w‹kî->
i_ª≠ed
;

1063 (
f‹˚
 && 
u£d_•a˚
 > 0Ë|| u£d_•a˚ >
WORK_MAXCNT
 || 
d⁄e
 > 0) {

1064 
w‹k
 = &
w‹kî
->
i
[w‹kî->
i_ª≠ed
 & 
WORK_I_MASK
];

1065 
	`thªad_w‹k_waô_sync
(
w‹k
, 
f‹˚
);

1067 
	`do_ßm∂es_föish
(
w‹k
->
SSumLR
, w‹k->
ns_to
,

1068 
w‹k
->
ch™√ls_sûít
, w‹k->
decode_pos
);

1070 
w‹kî
->
i_ª≠ed
++;

1071 
d⁄e
 = 
	`thªad_gë_i_d⁄e
(Ë- 
w‹kî
->
i_ª≠ed
;

1072 
u£d_•a˚
 = 
w‹kî
->
i_ªady
 - w‹kî->
i_ª≠ed
;

1074 i‡(
f‹˚
)

1075 
	`thªad_sync_ˇches
();

1076 
	}
}

1080 
	$queue_ch™√l_w‹k
(
ns_to
, 
sûítch
Ë{
	}
}

1081 
	$sync_w‹kî_thªad
(
f‹˚
Ë{
	}
}

1083 c⁄° * c⁄° 
	gw‹kî
 = 
NULL
;

1092 
	$do_ßm∂es
(
cy˛es_to
, 
do_dúe˘
)

1094 
sûítch
;

1095 
cy˛e_diff
;

1096 
ns_to
;

1098 
cy˛e_diff
 = 
cy˛es_to
 - 
•u
.
cy˛es_∂ayed
;

1099 i‡(
cy˛e_diff
 < -2*1048576 || cycle_diff > 2*1048576)

1102 
•u
.
cy˛es_∂ayed
 = 
cy˛es_to
;

1106 
sûítch
 = ~(
•u
.
dwCh™√lOn
 | spu.
dwNewCh™√l
) & 0xffffff;

1108 
do_dúe˘
 |(
sûítch
 == 0xffffff);

1109 i‡(
w‹kî
 !
NULL
)

1110 
	`sync_w‹kî_thªad
(
do_dúe˘
);

1112 i‡(
cy˛e_diff
 < 2 * 768)

1115 
ns_to
 = (
cy˛e_diff
 / 768 + 1) & ~1;

1116 i‡(
ns_to
 > 
NSSIZE
) {

1119 
ns_to
 = 
NSSIZE
;

1139 i‡(
	`u∆ikñy
((
•u
.
•uCål
 & 
CTRL_IRQ
)

1140 && 
•u
.
pSpuIrq
 < spu.
•uMemC
+0x1000))

1142 
úq_pos
 = (
•u
.
pSpuIrq
 - spu.
•uMemC
) / 2 & 0x1ff;

1143 
À·
 = (
úq_pos
 - 
•u
.
decode_pos
) & 0x1ff;

1144 i‡(0 < 
À·
 &&Üe· <
ns_to
)

1147 
	`do_úq
();

1151 i‡(
	`u∆ikñy
(
•u
.
rvb
->
dúty
))

1152 
	`REVERBPªp
();

1154 i‡(
do_dúe˘
 || 
w‹kî
 =
NULL
 || !
•u_c⁄fig
.
iU£Thªad
) {

1155 
	`do_ch™√ls
(
ns_to
);

1156 
	`do_ßm∂es_föish
(
•u
.
SSumLR
, 
ns_to
, 
sûítch
, spu.
decode_pos
);

1159 
	`queue_ch™√l_w‹k
(
ns_to
, 
sûítch
);

1164 i‡(
•u
.
•uCål
 & 
CTRL_IRQ
)

1165 
	`do_sûít_ch™s
(
ns_to
, 
sûítch
);

1167 
•u
.
cy˛es_∂ayed
 +
ns_to
 * 768;

1168 
•u
.
decode_pos
 = (•u.decode_po†+ 
ns_to
) & 0x1ff;

1169 
	}
}

1171 
	$do_ßm∂es_föish
(*
SSumLR
, 
ns_to
,

1172 
sûítch
, 
decode_pos
)

1174 
vﬁmu…
 = 
•u_c⁄fig
.
iVﬁume
;

1175 
ns
;

1176 
d
;

1179 if(
	`u∆ikñy
(
sûítch
 & 
•u
.
decode_dúty_ch
 & (1<<1)))

1181 
	`mem£t
(&
•u
.
•uMem
[0x800/2], 0, 0x400);

1182 
•u
.
decode_dúty_ch
 &= ~(1<<1);

1184 if(
	`u∆ikñy
(
sûítch
 & 
•u
.
decode_dúty_ch
 & (1<<3)))

1186 
	`mem£t
(&
•u
.
•uMem
[0xc00/2], 0, 0x400);

1187 
•u
.
decode_dúty_ch
 &= ~(1<<3);

1190 
	`MixXA
(
SSumLR
, 
ns_to
, 
decode_pos
);

1192 if((
•u
.
•uCål
&0x4000)==0)

1194 
	`mem£t
(
•u
.
pS
, 0, 
ns_to
 * 2 * (spu.pS[0]));

1195 
•u
.
pS
 +
ns_to
 * 2;

1198 
ns
 = 0;Ç†< 
ns_to
 * 2; )

1200 
d
 = 
SSumLR
[
ns
]; SSumLR[ns] = 0;

1201 
d
 = d * 
vﬁmu…
 >> 10;

1202 
	`sßt32_to_16
(
d
);

1203 *
•u
.
pS
++ = 
d
;

1204 
ns
++;

1206 
d
 = 
SSumLR
[
ns
]; SSumLR[ns] = 0;

1207 
d
 = d * 
vﬁmu…
 >> 10;

1208 
	`sßt32_to_16
(
d
);

1209 *
•u
.
pS
++ = 
d
;

1210 
ns
++;

1212 
	}
}

1214 
	$scheduÀ_√xt_úq
()

1216 
upd_ßm∂es
;

1217 
ch
;

1219 i‡(
•u
.
scheduÀCÆlback
 =
NULL
)

1222 
upd_ßm∂es
 = 44100 / 50;

1224 
ch
 = 0; ch < 
MAXCHAN
; ch++)

1226 i‡(
•u
.
dwCh™√lDód
 & (1 << 
ch
))

1228 i‡(()(
•u
.
pSpuIrq
 - spu.
s_ch™
[
ch
].
pCuº
Ë> 
IRQ_NEAR_BLOCKS
 * 16

1229 && ()(
•u
.
pSpuIrq
 - spu.
s_ch™
[
ch
].
pLo›
Ë> 
IRQ_NEAR_BLOCKS
 * 16)

1232 
	`sˇn_f‹_úq
(
ch
, &
upd_ßm∂es
);

1235 i‡(
	`u∆ikñy
(
•u
.
pSpuIrq
 < spu.
•uMemC
 + 0x1000))

1237 
úq_pos
 = (
•u
.
pSpuIrq
 - spu.
•uMemC
) / 2 & 0x1ff;

1238 
À·
 = (
úq_pos
 - 
•u
.
decode_pos
) & 0x1ff;

1239 i‡(0 < 
À·
 &&Üe· < 
upd_ßm∂es
) {

1241 
upd_ßm∂es
 = 
À·
;

1245 i‡(
upd_ßm∂es
 < 44100 / 50)

1246 
•u
.
	`scheduÀCÆlback
(
upd_ßm∂es
 * 768);

1247 
	}
}

1254 
CALLBACK
 
	$SPUasync
(
cy˛e
, 
Êags
)

1256 
	`do_ßm∂es
(
cy˛e
, 
•u_c⁄fig
.
iU£FixedUpd©es
);

1258 i‡(
•u
.
•uCål
 & 
CTRL_IRQ
)

1259 
	`scheduÀ_√xt_úq
();

1261 i‡(
Êags
 & 1) {

1262 
out_cuºít
->
	`„ed
(
•u
.
pSpuBuf„r
, (*)•u.
pS
 - spu.pSpuBuffer);

1263 
•u
.
pS
 = (*)•u.
pSpuBuf„r
;

1265 i‡(
•u_c⁄fig
.
iTempo
) {

1266 i‡(!
out_cuºít
->
	`busy
())

1269 
•u
.
cy˛es_∂ayed
 -= 44100 / 60 / 2 * 768;

1272 
	}
}

1283 
CALLBACK
 
	$SPUupd©e
()

1285 
	}
}

1289 
CALLBACK
 
	$SPU∂ayADPCMch™√l
(
xa_decode_t
 *
x≠
)

1291 if(!
x≠
) ;

1292 if(!
x≠
->
‰eq
) ;

1294 
	`FìdXA
(
x≠
);

1295 
	}
}

1298 
CALLBACK
 
	$SPU∂ayCDDAch™√l
(*
pcm
, 
nbyãs
)

1300 i‡(!
pcm
)  -1;

1301 i‡(
nbyãs
<=0)  -1;

1303  
	`FìdCDDA
((*)
pcm
, 
nbyãs
);

1304 
	}
}

1307 
	$CÀ¨W‹kögSèã
()

1309 
	`mem£t
(
iFMod
, 0, (iFMod));

1310 
•u
.
pS
=(*)•u.
pSpuBuf„r
;

1311 
	}
}

1314 
	$SëupSåóms
()

1316 
•u
.
pSpuBuf„r
 = (*)
	`mÆloc
(32768);

1317 
•u
.
SSumLR
 = 
	`ˇŒoc
(
NSSIZE
 * 2, (spu.SSumLR[0]));

1319 
•u
.
XASèπ
 =

1320 (
uöt32_t
 *)
	`mÆloc
(44100 * (uint32_t));

1321 
•u
.
XAEnd
 = spu.
XASèπ
 + 44100;

1322 
•u
.
XAPœy
 = spu.
XASèπ
;

1323 
•u
.
XAFìd
 = spu.
XASèπ
;

1325 
•u
.
CDDASèπ
 =

1326 (
uöt32_t
 *)
	`mÆloc
(
CDDA_BUFFER_SIZE
);

1327 
•u
.
CDDAEnd
 = spu.
CDDASèπ
 + 16384;

1328 
•u
.
CDDAPœy
 = spu.
CDDASèπ
;

1329 
•u
.
CDDAFìd
 = spu.
CDDASèπ
;

1331 
	`CÀ¨W‹kögSèã
();

1332 
	}
}

1335 
	$RemoveSåóms
()

1337 
	`‰ì
(
•u
.
pSpuBuf„r
);

1338 
•u
.
pSpuBuf„r
 = 
NULL
;

1339 
	`‰ì
(
•u
.
SSumLR
);

1340 
•u
.
SSumLR
 = 
NULL
;

1341 
	`‰ì
(
•u
.
XASèπ
);

1342 
•u
.
XASèπ
 = 
NULL
;

1343 
	`‰ì
(
•u
.
CDDASèπ
);

1344 
•u
.
CDDASèπ
 = 
NULL
;

1345 
	}
}

1347 #i‡
deföed
(
C64X_DSP
)

1350 
	~"•u_c64x.c
"

1352 #ñi‡
deföed
(
THREAD_ENABLED
)

1354 
	~<±hªad.h
>

1355 
	~<£m≠h‹e.h
>

1356 
	~<uni°d.h
>

1359 
±hªad_t
 
	mthªad
;

1360 
£m_t
 
	m£m_avaû
;

1361 
£m_t
 
	m£m_d⁄e
;

1362 } 
	gt
;

1366 
	$thªad_w‹k_°¨t
()

1368 
	`£m_po°
(&
t
.
£m_avaû
);

1369 
	}
}

1371 
	$thªad_w‹k_waô_sync
(
w‹k_ôem
 *
w‹k
, 
f‹˚
)

1373 
	`£m_waô
(&
t
.
£m_d⁄e
);

1374 
	}
}

1376 
	$thªad_gë_i_d⁄e
()

1378  
w‹kî
->
i_d⁄e
;

1379 
	}
}

1381 
	$thªad_sync_ˇches
()

1383 
	}
}

1385 *
	$•u_w‹kî_thªad
(*
unu£d
)

1387 
w‹k_ôem
 *
w‹k
;

1390 
	`£m_waô
(&
t
.
£m_avaû
);

1391 i‡(
w‹kî
->
exô_thªad
)

1394 
w‹k
 = &
w‹kî
->
i
[w‹kî->
i_d⁄e
 & 
WORK_I_MASK
];

1395 
	`do_ch™√l_w‹k
(
w‹k
);

1396 
w‹kî
->
i_d⁄e
++;

1398 
	`£m_po°
(&
t
.
£m_d⁄e
);

1401  
NULL
;

1402 
	}
}

1404 
	$öô_•u_thªad
()

1406 
ªt
;

1408 i‡(
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
) <= 1)

1411 
w‹kî
 = 
	`ˇŒoc
(1, (*worker));

1412 i‡(
w‹kî
 =
NULL
)

1414 
ªt
 = 
	`£m_öô
(&
t
.
£m_avaû
, 0, 0);

1415 i‡(
ªt
 != 0)

1416 
Áû_£m_avaû
;

1417 
ªt
 = 
	`£m_öô
(&
t
.
£m_d⁄e
, 0, 0);

1418 i‡(
ªt
 != 0)

1419 
Áû_£m_d⁄e
;

1421 
ªt
 = 
	`±hªad_¸óã
(&
t
.
thªad
, 
NULL
, 
•u_w‹kî_thªad
, NULL);

1422 i‡(
ªt
 != 0)

1423 
Áû_thªad
;

1425 
•u_c⁄fig
.
iThªadAvaû
 = 1;

1428 
Áû_thªad
:

1429 
	`£m_de°roy
(&
t
.
£m_d⁄e
);

1430 
Áû_£m_d⁄e
:

1431 
	`£m_de°roy
(&
t
.
£m_avaû
);

1432 
Áû_£m_avaû
:

1433 
	`‰ì
(
w‹kî
);

1434 
w‹kî
 = 
NULL
;

1435 
•u_c⁄fig
.
iThªadAvaû
 = 0;

1436 
	}
}

1438 
	$exô_•u_thªad
()

1440 i‡(
w‹kî
 =
NULL
)

1442 
w‹kî
->
exô_thªad
 = 1;

1443 
	`£m_po°
(&
t
.
£m_avaû
);

1444 
	`±hªad_joö
(
t
.
thªad
, 
NULL
);

1445 
	`£m_de°roy
(&
t
.
£m_d⁄e
);

1446 
	`£m_de°roy
(&
t
.
£m_avaû
);

1447 
	`‰ì
(
w‹kî
);

1448 
w‹kî
 = 
NULL
;

1449 
	}
}

1453 
	$öô_•u_thªad
()

1455 
	}
}

1457 
	$exô_•u_thªad
()

1459 
	}
}

1464 
CALLBACK
 
	$SPUöô
()

1466 
i
;

1468 
•u
.
•uMemC
 = 
	`ˇŒoc
(1, 512 * 1024);

1469 
	`InôADSR
();

1471 
•u
.
s_ch™
 = 
	`ˇŒoc
(
MAXCHAN
+1, (spu.s_chan[0]));

1472 
•u
.
rvb
 = 
	`ˇŒoc
(1, (
REVERBInfo
));

1473 
•u
.
SB
 = 
	`ˇŒoc
(
MAXCHAN
, (•u.SB[0]Ë* 
SB_SIZE
);

1475 
•u
.
•uAddr
 = 0;

1476 
•u
.
decode_pos
 = 0;

1477 
•u
.
pSpuIrq
 = spu.
•uMemC
;

1479 
	`SëupSåóms
();

1481 i‡(
•u_c⁄fig
.
iVﬁume
 == 0)

1482 
•u_c⁄fig
.
iVﬁume
 = 768;

1484 
	`öô_•u_thªad
();

1486 
i
 = 0; i < 
MAXCHAN
; i++)

1488 
•u
.
s_ch™
[
i
].
ADSRX
.
Su°aöLevñ
 = 0xf;

1489 
•u
.
s_ch™
[
i
].
ADSRX
.
Su°aöIn¸ó£
 = 1;

1490 
•u
.
s_ch™
[
i
].
pLo›
 = spu.
•uMemC
;

1491 
•u
.
s_ch™
[
i
].
pCuº
 = spu.
•uMemC
;

1494 
•u
.
bSpuInô
=1;

1497 
	}
}

1500 
CALLBACK
 
	$SPU›í
()

1502 i‡(
•u
.
bSPUIsO≥n
)  0;

1504 
	`SëupSound
();

1506 
•u
.
bSPUIsO≥n
 = 1;

1508  
PSE_SPU_ERR_SUCCESS
;

1509 
	}
}

1512 
CALLBACK
 
	$SPU˛o£
()

1514 i‡(!
•u
.
bSPUIsO≥n
)  0;

1516 
•u
.
bSPUIsO≥n
 = 0;

1518 
out_cuºít
->
	`föish
();

1521 
	}
}

1524 
CALLBACK
 
	$SPUshutdown
()

1526 
	`SPU˛o£
();

1528 
	`exô_•u_thªad
();

1530 
	`‰ì
(
•u
.
•uMemC
);

1531 
•u
.
•uMemC
 = 
NULL
;

1532 
	`‰ì
(
•u
.
SB
);

1533 
•u
.
SB
 = 
NULL
;

1534 
	`‰ì
(
•u
.
s_ch™
);

1535 
•u
.
s_ch™
 = 
NULL
;

1536 
	`‰ì
(
•u
.
rvb
);

1537 
•u
.
rvb
 = 
NULL
;

1539 
	`RemoveSåóms
();

1540 
•u
.
bSpuInô
=0;

1543 
	}
}

1546 
CALLBACK
 
	$SPUã°
()

1549 
	}
}

1552 
CALLBACK
 
	$SPUc⁄figuª
()

1554 #ifde‡
_MACOSX


1555 
	`DoC⁄figuøti⁄
();

1560 
	}
}

1563 
CALLBACK
 
	$SPUabout
()

1565 #ifde‡
_MACOSX


1566 
	`DoAbout
();

1570 
	}
}

1575 
CALLBACK
 
SPUªgi°îCÆlback
((CALLBACK *
ˇŒback
)())

1577 
•u
.
úqCÆlback
 = 
ˇŒback
;

1578 
	}
}

1580 
CALLBACK
 
SPUªgi°îCDDAVﬁume
((CALLBACK *
CDDAVˇŒback
)(,))

1582 
•u
.
cddavCÆlback
 = 
CDDAVˇŒback
;

1583 
	}
}

1585 
CALLBACK
 
SPUªgi°îScheduÀCb
((CALLBACK *
ˇŒback
)())

1587 
•u
.
scheduÀCÆlback
 = 
ˇŒback
;

1588 
	}
}

1614 
	$•u_gë_debug_öfo
(*
ch™s_out
, *
run_ch™s
, *
fmod_ch™s_out
, *
noi£_ch™s_out
)

1616 
ch
 = 0, 
fmod_ch™s
 = 0, 
noi£_ch™s
 = 0, 
úq_ch™s
 = 0;

1618 i‡(
•u
.
s_ch™
 =
NULL
)

1621 ;
ch
<
MAXCHAN
;ch++)

1623 i‡(!(
•u
.
dwCh™√lOn
 & (1<<
ch
)))

1625 i‡(
•u
.
s_ch™
[
ch
].
bFMod
 == 2)

1626 
fmod_ch™s
 |1 << 
ch
;

1627 i‡(
•u
.
s_ch™
[
ch
].
bNoi£
)

1628 
noi£_ch™s
 |1 << 
ch
;

1629 if((
•u
.
•uCål
&
CTRL_IRQ
Ë&& spu.
s_ch™
[
ch
].
pCuº
 <•u.
pSpuIrq
 && spu.s_ch™[ch].
pLo›
 <= spu.pSpuIrq)

1630 
úq_ch™s
 |1 << 
ch
;

1633 *
ch™s_out
 = 
•u
.
dwCh™√lOn
;

1634 *
run_ch™s
 = ~
•u
.
dwCh™√lOn
 & ~•u.
dwCh™√lDód
 & 
úq_ch™s
;

1635 *
fmod_ch™s_out
 = 
fmod_ch™s
;

1636 *
noi£_ch™s_out
 = 
noi£_ch™s
;

1637 
	}
}

	@plugins/dfsound/spu.h

18 
CÀ¨W‹kögSèã
();

19 
CALLBACK
 
SPU∂ayADPCMch™√l
(
xa_decode_t
 *
x≠
);

20 
CALLBACK
 
SPU∂ayCDDAch™√l
(*
pcm
, 
byãs
);

	@plugins/dfsound/spu_c64x.c

24 
	~<dlf˙.h
>

25 
	~<°ddef.h
>

26 
	~<uni°d.h
>

28 
	~<öc_libc64_möi.h
>

29 
	~"•u_c64x.h
"

32 *
	mh™dÀ
;

33 (*
	md•_›í
)();

34 
d•_mem_ªgi⁄_t
 (*
d•_shm_Æloc
)(
d•_ˇche_t
 
	m_ty≥
, 
sU32
 
	m_numByãs
);

35 (*
	md•_shm_‰ì
)(
d•_mem_ªgi⁄_t
 
	m_mem
);

36 (*
	md•_˛o£
)();

37 (*
	md•_comp⁄ít_lﬂd
)(c⁄° *
	m_∑th
, c⁄° *
	m_«me
, 
d•_comp⁄ít_id_t
 *
	m_id
);

38 (*
	md•_ˇche_öv_vút
)(*
	m_vútAddr
, 
sU32
 
	m_size
);

39 (*
	md•_Ωc_£nd
)(c⁄° 
d•_msg_t
 *
	m_msgTo
);

40 (*
	md•_Ωc_ªcv
)(
d•_msg_t
 *
	m_msgFrom
);

41 (*
	md•_Ωc
)(c⁄° 
d•_msg_t
 *
	m_msgTo
, d•_msg_à*
	m_msgFrom
);

42 (*
	md•_logbuf_¥öt
)();

44 
d•_mem_ªgi⁄_t
 
	mªgi⁄
;

45 
d•_comp⁄ít_id_t
 
	mcompid
;

46 
	m°Æe_ˇches
:1;

47 
	mªq_£¡
:1;

48 } 
	gf
;

50 
noölöe
 
	$d•_Áu…
()

52 
d•_msg_t
 
msg
;

54 
f
.
	`d•_ˇche_öv_vút
(
w‹kî
, (*worker));

55 
	`¥ötf
("dsp crash/fault/corruption:\n");

56 
	`¥ötf
("stateÑdy/reap/done: %u %u %u\n",

57 
w‹kî
->
i_ªady
, w‹kî->
i_ª≠ed
, w‹kî->
i_d⁄e
);

58 
	`¥ötf
("active/boot: %u %u\n",

59 
w‹kî
->
a˘ive
, w‹kî->
boŸ_˙t
);

61 i‡(
f
.
ªq_£¡
) {

62 
f
.
	`d•_Ωc_ªcv
(&
msg
);

63 
f
.
ªq_£¡
 = 0;

65 
f
.
	`d•_logbuf_¥öt
();

66 
•u_c⁄fig
.
iU£Thªad
 = 0;

67 
	}
}

69 
	$thªad_w‹k_°¨t
()

71 
ªgi⁄_mem
 *
mem
;

72 
d•_msg_t
 
msg
;

73 
ªt
;

76 
	`__sync_synchr⁄ize
();

81 
f
.
	`d•_ˇche_öv_vút
(&
w‹kî
->
i_d⁄e
, 64);

82 i‡(
w‹kî
->
a˘ive
 =
ACTIVE_CNT
)

87 i‡(
f
.
ªq_£¡
) {

88 i‡(
w‹kî
->
boŸ_˙t
 =w‹kî->
œ°_boŸ_˙t
) {

94 
ªt
 = 
f
.
	`d•_Ωc_ªcv
(&
msg
);

95 i‡(
ªt
 != 0) {

96 
	`Ârötf
(
°dîr
, "d•_Ωc_ªcv faûed: %d\n", 
ªt
);

97 
f
.
	`d•_logbuf_¥öt
();

98 
f
.
ªq_£¡
 = 0;

99 
•u_c⁄fig
.
iU£Thªad
 = 0;

104 
f
.
	`d•_ˇche_öv_vút
(&
w‹kî
->
i_d⁄e
, 64);

105 
w‹kî
->
œ°_boŸ_˙t
 = w‹kî->
boŸ_˙t
;

106 
w‹kî
->
øm_dúty
 = 
•u
.
bMemDúty
;

107 
•u
.
bMemDúty
 = 0;

109 
mem
 = (*)
f
.
ªgi⁄
.
vút_addr
;

110 
	`mem˝y
(&
mem
->
ö
.
•u_c⁄fig
, &spu_config, (mem->in.spu_config));

112 
	`DSP_MSG_INIT
(&
msg
, 
f
.
compid
, 
CCMD_DOIT
, f.
ªgi⁄
.
phys_addr
, 0);

113 
ªt
 = 
f
.
	`d•_Ωc_£nd
(&
msg
);

114 i‡(
ªt
 != 0) {

115 
	`Ârötf
(
°dîr
, "d•_Ωc_£nd faûed: %d\n", 
ªt
);

116 
f
.
	`d•_logbuf_¥öt
();

117 
•u_c⁄fig
.
iU£Thªad
 = 0;

120 
f
.
ªq_£¡
 = 1;

123 
f
.
	`d•_Ωc_ªcv
(&
msg
);

124 
f
.
ªq_£¡
 = 0;

126 
	}
}

128 
	$thªad_gë_i_d⁄e
()

130 
f
.
	`d•_ˇche_öv_vút
(&
w‹kî
->
i_d⁄e
, (worker->i_done));

131  
w‹kî
->
i_d⁄e
;

132 
	}
}

134 
	$thªad_w‹k_waô_sync
(
w‹k_ôem
 *
w‹k
, 
f‹˚
)

136 
limô
 = 1000;

137 
ns_to
;

139 i‡(()(
w‹kî
->
i_d⁄e
 - w‹kî->
i_ª≠ed
Ë> 
WORK_MAXCNT
) {

140 
	`d•_Áu…
();

144 
w‹kî
->
i_d⁄e
 =w‹kî->
i_ª≠ed
 && 
limô
-- > 0) {

145 i‡(!
f
.
ªq_£¡
) {

146 
	`¥ötf
("dsp:ÑeqÇot sent?\n");

150 i‡(
w‹kî
->
boŸ_˙t
 !w‹kî->
œ°_boŸ_˙t
 && !w‹kî->
a˘ive
) {

151 
	`¥ötf
("dsp: broken sync\n");

152 
w‹kî
->
œ°_boŸ_˙t
 = ~0;

156 
	`u¶ìp
(500);

157 
f
.
	`d•_ˇche_öv_vút
(&
w‹kî
->
i_d⁄e
, 64);

160 
ns_to
 = 
w‹k
->ns_to;

161 
f
.
	`d•_ˇche_öv_vút
(
w‹k
->
SSumLR
, (w‹k->SSumLR[0]Ë* 2 * 
ns_to
);

162 
	`¥ñﬂd
(
w‹k
->
SSumLR
);

163 
	`¥ñﬂd
(
w‹k
->
SSumLR
 + 64/4);

165 
f
.
°Æe_ˇches
 = 1;

167 i‡(
limô
 == 0)

168 
	`¥ötf
("dsp: waitÅimeout\n");

171 i‡(
w‹kî
->
i_ª≠ed
 !w‹kî->
i_d⁄e
 - 1)

174 i‡(
f
.
ªq_£¡
 && (
f‹˚
 || 
w‹kî
->
i_d⁄e
 =w‹kî->
i_ªady
)) {

175 
d•_msg_t
 
msg
;

176 
ªt
;

178 
ªt
 = 
f
.
	`d•_Ωc_ªcv
(&
msg
);

179 i‡(
ªt
 != 0) {

180 
	`Ârötf
(
°dîr
, "d•_Ωc_ªcv faûed: %d\n", 
ªt
);

181 
f
.
	`d•_logbuf_¥öt
();

182 
•u_c⁄fig
.
iU£Thªad
 = 0;

184 
f
.
ªq_£¡
 = 0;

186 
	}
}

188 
	$thªad_sync_ˇches
()

190 i‡(
f
.
°Æe_ˇches
) {

191 
f
.
	`d•_ˇche_öv_vút
(
•u
.
SB
, (•u.SB[0]Ë* 
SB_SIZE
 * 24);

192 
f
.
	`d•_ˇche_öv_vút
(
•u
.
•uMemC
 + 0x800, 0x800);

193 i‡(
•u
.
rvb
->
SèπAddr
) {

194 
À·
 = 0x40000 - 
•u
.
rvb
->
SèπAddr
;

195 
f
.
	`d•_ˇche_öv_vút
(
•u
.
•uMem
 + spu.
rvb
->
SèπAddr
, 
À·
 * 2);

197 
f
.
°Æe_ˇches
 = 0;

199 
	}
}

201 
	$öô_•u_thªad
()

203 
d•_msg_t
 
öô_msg
, 
msg_ö
;

204 
ªgi⁄_mem
 *
mem
;

205 
ªt
;

207 i‡(
f
.
h™dÀ
 =
NULL
) {

208 c⁄° 
lib
[] = "libc64.so.1";

209 
Áûed
 = 0;

211 
f
.
h™dÀ
 = 
	`dl›í
(
lib
, 
RTLD_NOW
);

212 i‡(
f
.
h™dÀ
 =
NULL
) {

213 
	`Ârötf
(
°dîr
, "ˇn'àlﬂd %s: %s\n", 
lib
, 
	`dÀº‹
());

214 
Áû_›í
;

216 
	#LDS
(
«me
) \

217 
Áûed
 |(
f
.
«me
 = 
	`dlsym
(f.
h™dÀ
, #«me)Ë=
NULL


	)

218 
	`LDS
(
d•_›í
);

219 
	`LDS
(
d•_˛o£
);

220 
	`LDS
(
d•_shm_Æloc
);

221 
	`LDS
(
d•_shm_‰ì
);

222 
	`LDS
(
d•_ˇche_öv_vút
);

223 
	`LDS
(
d•_comp⁄ít_lﬂd
);

224 
	`LDS
(
d•_Ωc_£nd
);

225 
	`LDS
(
d•_Ωc_ªcv
);

226 
	`LDS
(
d•_Ωc
);

227 
	`LDS
(
d•_logbuf_¥öt
);

228 #unde‡
LDS


229 i‡(
Áûed
) {

230 
	`Ârötf
(
°dîr
, "missög symbﬁ(sËö %s\n", 
lib
);

231 
	`dl˛o£
(
f
.
h™dÀ
);

232 
f
.
h™dÀ
 = 
NULL
;

233 
Áû_›í
;

237 
ªt
 = 
f
.
	`d•_›í
();

238 i‡(
ªt
 != 0) {

239 
	`Ârötf
(
°dîr
, "d•_›í faûed: %d\n", 
ªt
);

240 
Áû_›í
;

243 
ªt
 = 
f
.
	`d•_comp⁄ít_lﬂd
(
NULL
, 
COMPONENT_NAME
, &f.
compid
);

244 i‡(
ªt
 != 0) {

245 
	`Ârötf
(
°dîr
, "d•_comp⁄ít_lﬂd faûed: %d\n", 
ªt
);

246 
Áû_˛ﬂd
;

249 
f
.
ªgi⁄
 = f.
	`d•_shm_Æloc
(
DSP_CACHE_R
, (*
mem
));

250 i‡(
f
.
ªgi⁄
.
size
 < (*
mem
Ë|| f.ªgi⁄.
vút_addr
 == 0) {

251 
	`Ârötf
(
°dîr
, "dsp_shm_alloc failed\n");

252 
Áû_mem
;

254 
mem
 = (*)
f
.
ªgi⁄
.
vút_addr
;

256 
	`mem˝y
(&
mem
->
ö
.
•u_c⁄fig
, &spu_config, (mem->in.spu_config));

258 
	`DSP_MSG_INIT
(&
öô_msg
, 
f
.
compid
, 
CCMD_INIT
, f.
ªgi⁄
.
phys_addr
, 0);

259 
ªt
 = 
f
.
	`d•_Ωc
(&
öô_msg
, &
msg_ö
);

260 i‡(
ªt
 != 0) {

261 
	`Ârötf
(
°dîr
, "d•_Ω¯Áûed: %d\n", 
ªt
);

262 
Áû_öô
;

265 i‡(
mem
->
sizeof_ªgi⁄_mem
 != (*mem)) {

266 
	`Ârötf
(
°dîr
, "error: size mismatch 1: %d vs %zd\n",

267 
mem
->
sizeof_ªgi⁄_mem
, (*mem));

268 
Áû_öô
;

270 i‡(
mem
->
off£tof_s_ch™1
 !
	`off£tof
(
	`ty≥of
(*mem), 
ö
.
s_ch™
[1])) {

271 
	`Ârötf
(
°dîr
, "error: size mismatch 2: %d vs %zd\n",

272 
mem
->
off£tof_s_ch™1
, 
	`off£tof
(
	`ty≥of
(*mem), 
ö
.
s_ch™
[1]));

273 
Áû_öô
;

275 i‡(
mem
->
off£tof_•os_3_20
 !
	`off£tof
(
	`ty≥of
(*mem), 
w‹kî
.
i
[3].
ch
[20])) {

276 
	`Ârötf
(
°dîr
, "error: size mismatch 3: %d vs %zd\n",

277 
mem
->
off£tof_•os_3_20
, 
	`off£tof
(
	`ty≥of
(*mem), 
w‹kî
.
i
[3].
ch
[20]));

278 
Áû_öô
;

282 
	`‰ì
(
•u
.
•uMemC
);

283 
•u
.
•uMemC
 = 
mem
->
•u_øm
;

284 
	`‰ì
(
•u
.
SB
);

285 
•u
.
SB
 = 
mem
->SB;

286 
	`‰ì
(
•u
.
s_ch™
);

287 
•u
.
s_ch™
 = 
mem
->
ö
.s_chan;

288 
	`‰ì
(
•u
.
rvb
);

289 
•u
.
rvb
 = &
mem
->
ö
.rvb;

290 
w‹kî
 = &
mem
->worker;

292 
	`¥ötf
("•u: C64x DSPÑódy (id=%d).\n", ()
f
.
compid
);

293 
f
.
	`d•_logbuf_¥öt
();

295 
•u_c⁄fig
.
iThªadAvaû
 = 1;

296 ()
do_ch™√l_w‹k
;

299 
Áû_öô
:

300 
f
.
	`d•_shm_‰ì
(f.
ªgi⁄
);

301 
Áû_mem
:

303 
Áû_˛ﬂd
:

304 
f
.
	`d•_logbuf_¥öt
();

305 
f
.
	`d•_˛o£
();

306 
Áû_›í
:

307 
	`¥ötf
("spu: C64x DSP init failed.\n");

308 
•u_c⁄fig
.
iU£Thªad
 = spu_c⁄fig.
iThªadAvaû
 = 0;

309 
w‹kî
 = 
NULL
;

310 
	}
}

312 
	$exô_•u_thªad
()

314 
d•_msg_t
 
msg
;

316 i‡(
w‹kî
 =
NULL
)

319 i‡(
f
.
ªq_£¡
) {

320 
f
.
	`d•_Ωc_ªcv
(&
msg
);

321 
f
.
ªq_£¡
 = 0;

324 
f
.
	`d•_logbuf_¥öt
();

325 
f
.
	`d•_shm_‰ì
(f.
ªgi⁄
);

326 
f
.
	`d•_˛o£
();

328 
•u
.
•uMemC
 = 
NULL
;

329 
•u
.
SB
 = 
NULL
;

330 
•u
.
s_ch™
 = 
NULL
;

331 
•u
.
rvb
 = 
NULL
;

332 
w‹kî
 = 
NULL
;

333 
	}
}

337 
ªgi⁄_mem
 *
	gdbg_d•_mem
;

339 
	$dbg_d•_mem_upd©e
()

341 
ªgi⁄_mem
 *
mem
;

343 i‡(
dbg_d•_mem
 =
NULL
)

344 
dbg_d•_mem
 = 
	`mÆloc
((*dbg_dsp_mem));

345 i‡(
dbg_d•_mem
 =
NULL
)

348 
mem
 = (*)
f
.
ªgi⁄
.
vút_addr
;

349 
f
.
	`d•_ˇche_öv_vút
(
mem
, (*mem));

350 
	`mem˝y
(
dbg_d•_mem
, 
mem
, (*dbg_dsp_mem));

351 
	}
}

	@plugins/dfsound/spu_c64x.h

1 
	#COMPONENT_NAME
 "pcsxr_•u"

	)

4 
	mCCMD_INIT
 = 0x101,

5 
	mCCMD_DOIT
 = 0x102,

8 
	sªgi⁄_mem
 {

9 
	m•u_øm
[512 * 1024];

10 
	mSB
[
SB_SIZE
 * 24];

13 
	m_∑d1
[128/4 - ((
SB_SIZE
 * 24) & (128/4 - 1))];

14 
	s•u_ö
 {

16 
SPUCHAN
 
	ms_ch™
[24 + 1];

17 
REVERBInfo
 
	mrvb
;

18 
SPUC⁄fig
 
	m•u_c⁄fig
;

19 } 
	mö
;

20 
	m_∑d2
[128/4 - (((
•u_ö
) / 4) & (128/4 - 1))];

21 
•u_w‹kî
 
	mw‹kî
;

23 
	msizeof_ªgi⁄_mem
;

24 
	moff£tof_s_ch™1
;

25 
	moff£tof_•os_3_20
;

28 
	#ACTIVE_CNT
 3

	)

	@plugins/dfsound/spu_c64x_dspcode.c

24 
	#SYSCALLS_C


	)

25 
	~<libc64_d•/ö˛ude/öc_ovîœy.h
>

26 
	~<°ddef.h
>

28 
	~"•u.c
"

29 
	~"•u_c64x.h
"

32 
	$thªad_w‹k_°¨t
(Ë{
	}
}

33 
	$thªad_w‹k_waô_sync
(
w‹k_ôem
 *
w‹k
, 
f‹˚
Ë{
	}
}

34 
	$thªad_sync_ˇches
(Ë{
	}
}

35 
	$thªad_gë_i_d⁄e
(Ë{  0; 
	}
}

36 
out_drivî
 *
	gout_cuºít
;

37 
	$SëupSound
(Ë{
	}
}

40 
	$íabÀ_l2_ˇche
()

42 vﬁ©ûê
uöt32_t
 *
L2CFG
 = (volatile uint32_t *)0x01840000;

43 
uöt32_t
 *
MARi
 = (*)0x01848000;

44 
i
;

50 
i
 = 0x10; i < 0x80; i++)

51 
MARi
[
i
] = 0;

53  ; 
i
 < 0xa0; i++)

54 
MARi
[
i
] = 1;

56  ; 
i
 < 0x100; i++)

57 
MARi
[
i
] = 0;

60 i‡(!(*
L2CFG
 & 2)) {

61 *
L2CFG
 = 2;

63 *
L2CFG
;

65 
	}
}

67 
	$övÆid©e_ˇche
(
w‹k_ôem
 *
w‹k
)

71 
sysˇŒs
.
	`ˇche_öv
(
•u
.
s_ch™
, (spu.s_chan[0]) * 24, 1);

72 
sysˇŒs
.
	`ˇche_öv
(
w‹k
->
SSumLR
,

73 (
w‹k
->
SSumLR
[0]Ë* 2 * w‹k->
ns_to
, 1);

74 
	}
}

76 
	$wrôeout_ˇche
(
w‹k_ôem
 *
w‹k
)

78 
ns_to
 = 
w‹k
->ns_to;

80 
sysˇŒs
.
	`ˇche_wb
(
w‹k
->
SSumLR
, (w‹k->SSumLR[0]Ë* 2 * 
ns_to
, 1);

83 
sysˇŒs
.
	`ˇche_öv
(
w‹k
, 
	`off£tof
(
	`ty≥of
(*w‹k), 
SSumLR
), 1);

84 
	}
}

86 
	$do_¥o˚ssög
()

88 
À·
, 
dúty
 = 0, 
had_rvb
 = 0;

89 
w‹k_ôem
 *
w‹k
;

91 
w‹kî
->
a˘ive
)

94 
sysˇŒs
.
	`ˇche_öv
(
w‹kî
, 64, 1);

96 
À·
 = 
w‹kî
->
i_ªady
 - w‹kî->
i_d⁄e
;

97 i‡(
À·
 > 0) {

98 
dúty
 = 1;

99 
w‹kî
->
a˘ive
 = 
ACTIVE_CNT
;

100 
sysˇŒs
.
	`ˇche_wb
(&
w‹kî
->
a˘ive
, 4, 1);

102 
w‹k
 = &
w‹kî
->
i
[w‹kî->
i_d⁄e
 & 
WORK_I_MASK
];

103 
	`övÆid©e_ˇche
(
w‹k
);

104 
had_rvb
 |
w‹k
->
rvb_addr
;

105 
•u
.
•uCål
 = 
w‹k
->
˘æ
;

106 
	`do_ch™√l_w‹k
(
w‹k
);

107 
	`wrôeout_ˇche
(
w‹k
);

109 
w‹kî
->
i_d⁄e
++;

110 
sysˇŒs
.
	`ˇche_wb
(&
w‹kî
->
i_d⁄e
, 4, 1);

115 i‡(
dúty
) {

116 
sysˇŒs
.
	`ˇche_wb
(
•u
.
•uMemC
 + 0x800, 0x800, 1);

117 
sysˇŒs
.
	`ˇche_wb
(
•u
.
SB
, (•u.SB[0]Ë* 
SB_SIZE
 * 24, 1);

118 i‡(
had_rvb
) {

119 
À·
 = 0x40000 - 
•u
.
rvb
->
SèπAddr
;

120 
sysˇŒs
.
	`ˇche_wb
(
•u
.
•uMem
 + spu.
rvb
->
SèπAddr
, 
À·
 * 2, 1);

121 
had_rvb
 = 0;

123 
dúty
 = 0;

129 
w‹kî
->
a˘ive
--;

130 
sysˇŒs
.
	`ˇche_wb
(&
w‹kî
->
a˘ive
, 4, 1);

132 
	}
}

134 
	$exec
(
d•_comp⁄ít_cmd_t
 
cmd
,

135 
¨g1
, 
¨g2
,

136 *
ªt1
, *
ªt2
)

138 
ªgi⁄_mem
 *
mem
 = (*)
¨g1
;

140 
cmd
) {

141 
CCMD_INIT
:

142 
	`íabÀ_l2_ˇche
();

143 
	`InôADSR
();

145 
•u
.
•uMemC
 = 
mem
->
•u_øm
;

146 
•u
.
SB
 = 
mem
->SB;

147 
•u
.
s_ch™
 = 
mem
->
ö
.s_chan;

148 
•u
.
rvb
 = &
mem
->
ö
.rvb;

149 
w‹kî
 = &
mem
->worker;

150 
	`mem˝y
(&
•u_c⁄fig
, &
mem
->
ö
.spu_config, (spu_config));

152 
mem
->
sizeof_ªgi⁄_mem
 = (*mem);

153 
mem
->
off£tof_s_ch™1
 = 
	`off£tof
(
	`ty≥of
(*mem), 
ö
.
s_ch™
[1]);

154 
mem
->
off£tof_•os_3_20
 = 
	`off£tof
(
	`ty≥of
(*mem), 
w‹kî
.
i
[3].
ch
[20]);

156 
sysˇŒs
.
	`ˇche_wb
(&
mem
->
sizeof_ªgi⁄_mem
, 3 * 4, 1);

159 
CCMD_DOIT
:

160 
w‹kî
->
a˘ive
 = 
ACTIVE_CNT
;

161 
w‹kî
->
boŸ_˙t
++;

162 
sysˇŒs
.
	`ˇche_öv
(
w‹kî
, 128, 1);

163 
sysˇŒs
.
	`ˇche_wb
(&
w‹kî
->
i_d⁄e
, 128, 1);

164 
	`mem˝y
(&
•u_c⁄fig
, &
mem
->
ö
.spu_config, (spu_config));

166 i‡(
w‹kî
->
øm_dúty
)

168 
sysˇŒs
.
	`ˇche_wbInvAŒ
();

170 
	`do_¥o˚ssög
();

172 
sysˇŒs
.
	`ˇche_öv
(&
mem
->
SB
, (mem->SB), 0);

173 
sysˇŒs
.
	`ˇche_öv
(&
mem
->
ö
, (mem->in), 0);

177 
sysˇŒs
.
	`¥ötf
("bad cmd: %x\n", 
cmd
);

182 
	}
}

184 #¥agm®
DATA_SECTION
(
comp⁄ít_ã°_d•
, ".sec_com");

185 
d•_comp⁄ít_t
 
	gcomp⁄ít_ã°_d•
 = {

187 
NULL
,

188 
exec
,

189 
NULL
,

190 
NULL
,

193 
COMPONENT_NAME
,

196 
	gDSP_COMPONENT_MAIN


	@plugins/dfsound/spu_config.h

5 
	miVﬁume
;

6 
	miXAPôch
;

7 
	miU£Revîb
;

8 
	miU£I¡îpﬁ©i⁄
;

9 
	miTempo
;

10 
	miU£Thªad
;

11 
	miU£FixedUpd©es
;

14 
	miThªadAvaû
;

15 } 
	tSPUC⁄fig
;

17 
SPUC⁄fig
 
•u_c⁄fig
;

	@plugins/dfsound/stdafx.h

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

22 #ifde‡
_WIN32


23 
	#WIN32_LEAN_AND_MEAN


	)

24 
	~<wödows.h
>

26 #unde‡
CALLBACK


27 
	#CALLBACK


	)

28 
	#DWORD
 

	)

29 
	#LOWORD
(
l
Ë(()÷))

	)

30 
	#HIWORD
(
l
Ë(()((()÷Ë>> 16Ë& 0xFFFF))

	)

33 #i‚de‡
INLINE


34 
	#INLINE
 
ölöe


	)

37 
	~"p£muxa.h
"

	@plugins/dfsound/xa.c

18 
	~"°dafx.h
"

19 
	#_IN_XA


	)

20 
	~<°döt.h
>

23 #ifde‡
_IN_SPU


29 
	ggauss_±r
 = 0;

30 
	ggauss_wödow
[8] = {0, 0, 0, 0, 0, 0, 0, 0};

32 
	#gvÆl0
 
gauss_wödow
[
gauss_±r
]

	)

33 
	#gvÆl
(
x
Ë
gauss_wödow
[(
gauss_±r
+x)&3]

	)

34 
	#gvÆr0
 
gauss_wödow
[4+
gauss_±r
]

	)

35 
	#gvÆr
(
x
Ë
gauss_wödow
[4+((
gauss_±r
+x)&3)]

	)

41 
INLINE
 
	$MixXA
(*
SSumLR
, 
ns_to
, 
decode_pos
)

43 
curs‹
 = 
decode_pos
;

44 
ns
;

45 
l
, 
r
;

46 
uöt32_t
 
v
;

48 if(
•u
.
XAPœy
 !•u.
XAFìd
 || spu.
XARïót
 > 0)

50 if(
•u
.
XAPœy
 =•u.
XAFìd
)

51 
•u
.
XARïót
--;

53 
v
 = 
•u
.
XALa°VÆ
;

54 
ns
 = 0;Ç†< 
ns_to
*2; )

56 if(
•u
.
XAPœy
 !•u.
XAFìd
Ë
v
=*spu.XAPlay++;

57 if(
•u
.
XAPœy
 =•u.
XAEnd
Ë•u.XAPœy=•u.
XASèπ
;

59 
l
 = (()()
v
 * 
•u
.
iLe·XAVﬁ
) >> 15;

60 
r
 = (()()(
v
 >> 16Ë* 
•u
.
iLe·XAVﬁ
) >> 15;

61 
SSumLR
[
ns
++] +
l
;

62 
SSumLR
[
ns
++] +
r
;

64 
•u
.
•uMem
[
curs‹
] = 
v
;

65 
•u
.
•uMem
[
curs‹
 + 0x400/2] = 
v
 >> 16;

66 
curs‹
 = (cursor + 1) & 0x1ff;

68 
•u
.
XALa°VÆ
 = 
v
;

71 
ns
 = 0;Ç†< 
ns_to
 * 2 && 
•u
.
CDDAPœy
!=•u.
CDDAFìd
 && (•u.CDDAPœy!=•u.
CDDAEnd
-1||•u.CDDAFìd!=•u.
CDDASèπ
);)

73 
v
=*
•u
.
CDDAPœy
++;

74 if(
•u
.
CDDAPœy
==•u.
CDDAEnd
Ë•u.CDDAPœy=•u.
CDDASèπ
;

76 
l
 = (()()
v
 * 
•u
.
iLe·XAVﬁ
) >> 15;

77 
r
 = (()()(
v
 >> 16Ë* 
•u
.
iLe·XAVﬁ
) >> 15;

78 
SSumLR
[
ns
++] +
l
;

79 
SSumLR
[
ns
++] +
r
;

81 
•u
.
•uMem
[
curs‹
] = 
v
;

82 
•u
.
•uMem
[
curs‹
 + 0x400/2] = 
v
 >> 16;

83 
curs‹
 = (cursor + 1) & 0x1ff;

85 
	}
}

91 
	$timeGëTime_•u
()

93 #i‡
	`deföed
(
NO_OS
)

95 #ñi‡
	`deföed
(
_WIN32
)

96  
	`GëTickCou¡
();

98 
timevÆ
 
tv
;

99 
	`gëtimeofday
(&
tv
, 0);

100  
tv
.
tv_£c
 * 1000 +Åv.
tv_u£c
/1000;

102 
	}
}

108 
INLINE
 
	$FìdXA
(
xa_decode_t
 *
x≠
)

110 
söc
,
•os
,
i
,
iSize
,
iPœ˚
,
vl
,
vr
;

112 if(!
•u
.
bSPUIsO≥n
) ;

114 
•u
.
x≠GlobÆ
 = 
x≠
;

115 
•u
.
XARïót
 = 100;

118 
iSize
=((45500*
x≠
->
nßm∂es
)/x≠->
‰eq
);

120 
iSize
=((44100*
x≠
->
nßm∂es
)/x≠->
‰eq
);

122 if(!
iSize
) ;

124 if(
•u
.
XAFìd
<•u.
XAPœy
Ë
iPœ˚
=spu.XAPlay-spu.XAFeed;

125 
iPœ˚
=(
•u
.
XAEnd
-•u.
XAFìd
Ë+ (•u.
XAPœy
-•u.
XASèπ
);

127 if(
iPœ˚
==0) ;

130 if(
•u_c⁄fig
.
iXAPôch
)

132 
DWORD
 
dwLT
=0;

133 
DWORD
 
dwFPS
=0;

134 
iFPSC¡
=0;

135 
iLa°Size
=0;

136 
DWORD
 
dwL1
=0;

137 
DWORD
 
dw
=
	`timeGëTime_•u
(),
dw1
,
dw2
;

139 
iPœ˚
=
iSize
;

141 
dwFPS
+=
dw
-
dwLT
;
iFPSC¡
++;

143 
dwLT
=
dw
;

145 if(
iFPSC¡
>=10)

147 if(!
dwFPS
) dwFPS=1;

148 
dw1
=1000000/
dwFPS
;

149 if(
dw1
>=(
dwL1
-100) && dw1<=(dwL1+100)) dw1=dwL1;

150 
dwL1
=
dw1
;

151 
dw2
=(
x≠
->
‰eq
*100/x≠->
nßm∂es
);

152 if((!
dw1
)||((
dw2
+100)>=dw1)Ë
iLa°Size
=0;

155 
iLa°Size
=
iSize
*
dw2
/
dw1
;

156 if(
iLa°Size
>
iPœ˚
) iLastSize=iPlace;

157 
iSize
=
iLa°Size
;

159 
iFPSC¡
=0;
dwFPS
=0;

163 if(
iLa°Size
Ë
iSize
=iLastSize;

168 
•os
=0x10000L;

169 
söc
 = (
x≠
->
nßm∂es
 << 16Ë/ 
iSize
;

171 if(
x≠
->
°îeo
)

173 
uöt32_t
 * 
pS
=(uöt32_à*)
x≠
->
pcm
;

174 
uöt32_t
 
l
=0;

176 if(
•u_c⁄fig
.
iXAPôch
)

178 
öt32_t
 
l1
,
l2
;
s
;

179 
i
=0;i<
iSize
;i++)

181 if(
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
==2)

183 
•os
>=0x10000L)

185 
l
 = *
pS
++;

186 
gauss_wödow
[
gauss_±r
] = ()
	`LOWORD
(
l
);

187 
gauss_wödow
[4+
gauss_±r
] = ()
	`HIWORD
(
l
);

188 
gauss_±r
 = (gauss_ptr+1) & 3;

189 
•os
 -= 0x10000L;

191 
vl
 = (
•os
 >> 6) & ~3;

192 
vr
=(
gauss
[
vl
]*
gvÆl0
)&~2047;

193 
vr
+=(
gauss
[
vl
+1]*
	`gvÆl
(1))&~2047;

194 
vr
+=(
gauss
[
vl
+2]*
	`gvÆl
(2))&~2047;

195 
vr
+=(
gauss
[
vl
+3]*
	`gvÆl
(3))&~2047;

196 
l
(
vr
 >> 11) & 0xffff;

197 
vr
=(
gauss
[
vl
]*
gvÆr0
)&~2047;

198 
vr
+=(
gauss
[
vl
+1]*
	`gvÆr
(1))&~2047;

199 
vr
+=(
gauss
[
vl
+2]*
	`gvÆr
(2))&~2047;

200 
vr
+=(
gauss
[
vl
+3]*
	`gvÆr
(3))&~2047;

201 
l
 |
vr
 << 5;

205 
•os
>=0x10000L)

207 
l
 = *
pS
++;

208 
•os
 -= 0x10000L;

212 
s
=()
	`LOWORD
(
l
);

213 
l1
=
s
;

214 
l1
=÷1*
iPœ˚
)/
iSize
;

215 
	`sßt32_to_16
(
l1
);

216 
s
=()
	`HIWORD
(
l
);

217 
l2
=
s
;

218 
l2
=÷2*
iPœ˚
)/
iSize
;

219 
	`sßt32_to_16
(
l2
);

220 
l
=(
l1
&0xffff)|(
l2
<<16);

222 *
•u
.
XAFìd
++=
l
;

224 if(
•u
.
XAFìd
==•u.
XAEnd
Ë•u.XAFìd=•u.
XASèπ
;

225 if(
•u
.
XAFìd
==•u.
XAPœy
)

227 if(
•u
.
XAPœy
!=•u.
XASèπ
Ë•u.
XAFìd
=spu.XAPlay-1;

231 
•os
 +
söc
;

236 
i
=0;i<
iSize
;i++)

238 if(
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
==2)

240 
•os
>=0x10000L)

242 
l
 = *
pS
++;

243 
gauss_wödow
[
gauss_±r
] = ()
	`LOWORD
(
l
);

244 
gauss_wödow
[4+
gauss_±r
] = ()
	`HIWORD
(
l
);

245 
gauss_±r
 = (gauss_ptr+1) & 3;

246 
•os
 -= 0x10000L;

248 
vl
 = (
•os
 >> 6) & ~3;

249 
vr
=(
gauss
[
vl
]*
gvÆl0
)&~2047;

250 
vr
+=(
gauss
[
vl
+1]*
	`gvÆl
(1))&~2047;

251 
vr
+=(
gauss
[
vl
+2]*
	`gvÆl
(2))&~2047;

252 
vr
+=(
gauss
[
vl
+3]*
	`gvÆl
(3))&~2047;

253 
l
(
vr
 >> 11) & 0xffff;

254 
vr
=(
gauss
[
vl
]*
gvÆr0
)&~2047;

255 
vr
+=(
gauss
[
vl
+1]*
	`gvÆr
(1))&~2047;

256 
vr
+=(
gauss
[
vl
+2]*
	`gvÆr
(2))&~2047;

257 
vr
+=(
gauss
[
vl
+3]*
	`gvÆr
(3))&~2047;

258 
l
 |
vr
 << 5;

262 
•os
>=0x10000L)

264 
l
 = *
pS
++;

265 
•os
 -= 0x10000L;

269 *
•u
.
XAFìd
++=
l
;

271 if(
•u
.
XAFìd
==•u.
XAEnd
Ë•u.XAFìd=•u.
XASèπ
;

272 if(
•u
.
XAFìd
==•u.
XAPœy
)

274 if(
•u
.
XAPœy
!=•u.
XASèπ
Ë•u.
XAFìd
=spu.XAPlay-1;

278 
•os
 +
söc
;

284 * 
pS
=(*)
x≠
->
pcm
;

285 
uöt32_t
 
l
;
s
=0;

287 if(
•u_c⁄fig
.
iXAPôch
)

289 
öt32_t
 
l1
;

290 
i
=0;i<
iSize
;i++)

292 if(
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
==2)

294 
•os
>=0x10000L)

296 
gauss_wödow
[
gauss_±r
] = ()*
pS
++;

297 
gauss_±r
 = (gauss_ptr+1) & 3;

298 
•os
 -= 0x10000L;

300 
vl
 = (
•os
 >> 6) & ~3;

301 
vr
=(
gauss
[
vl
]*
gvÆl0
)&~2047;

302 
vr
+=(
gauss
[
vl
+1]*
	`gvÆl
(1))&~2047;

303 
vr
+=(
gauss
[
vl
+2]*
	`gvÆl
(2))&~2047;

304 
vr
+=(
gauss
[
vl
+3]*
	`gvÆl
(3))&~2047;

305 
l1
=
s

vr
 >> 11;

306 
l1
 &= 0xffff;

310 
•os
>=0x10000L)

312 
s
 = *
pS
++;

313 
•os
 -= 0x10000L;

315 
l1
=
s
;

318 
l1
=÷1*
iPœ˚
)/
iSize
;

319 
	`sßt32_to_16
(
l1
);

320 
l
=(
l1
&0xffff)|(l1<<16);

321 *
•u
.
XAFìd
++=
l
;

323 if(
•u
.
XAFìd
==•u.
XAEnd
Ë•u.XAFìd=•u.
XASèπ
;

324 if(
•u
.
XAFìd
==•u.
XAPœy
)

326 if(
•u
.
XAPœy
!=•u.
XASèπ
Ë•u.
XAFìd
=spu.XAPlay-1;

330 
•os
 +
söc
;

335 
i
=0;i<
iSize
;i++)

337 if(
•u_c⁄fig
.
iU£I¡îpﬁ©i⁄
==2)

339 
•os
>=0x10000L)

341 
gauss_wödow
[
gauss_±r
] = ()*
pS
++;

342 
gauss_±r
 = (gauss_ptr+1) & 3;

343 
•os
 -= 0x10000L;

345 
vl
 = (
•os
 >> 6) & ~3;

346 
vr
=(
gauss
[
vl
]*
gvÆl0
)&~2047;

347 
vr
+=(
gauss
[
vl
+1]*
	`gvÆl
(1))&~2047;

348 
vr
+=(
gauss
[
vl
+2]*
	`gvÆl
(2))&~2047;

349 
vr
+=(
gauss
[
vl
+3]*
	`gvÆl
(3))&~2047;

350 
l
=
s

vr
 >> 11;

354 
•os
>=0x10000L)

356 
s
 = *
pS
++;

357 
•os
 -= 0x10000L;

359 
l
=
s
;

362 
l
 &= 0xffff;

363 *
•u
.
XAFìd
++=(
l
|(l<<16));

365 if(
•u
.
XAFìd
==•u.
XAEnd
Ë•u.XAFìd=•u.
XASèπ
;

366 if(
•u
.
XAFìd
==•u.
XAPœy
)

368 if(
•u
.
XAPœy
!=•u.
XASèπ
Ë•u.
XAFìd
=spu.XAPlay-1;

372 
•os
 +
söc
;

376 
	}
}

382 
INLINE
 
	$FìdCDDA
(*
pcm
, 
nByãs
)

384 
•a˚
;

385 
•a˚
=(
•u
.
CDDAPœy
-•u.
CDDAFìd
-1)*4 & (
CDDA_BUFFER_SIZE
 - 1);

386 if(
•a˚
<
nByãs
)

389 
nByãs
>0)

391 if(
•u
.
CDDAFìd
==•u.
CDDAEnd
Ë•u.CDDAFìd=•u.
CDDASèπ
;

392 
•a˚
=(
•u
.
CDDAPœy
-•u.
CDDAFìd
-1)*4 & (
CDDA_BUFFER_SIZE
 - 1);

393 if(
•u
.
CDDAFìd
+
•a˚
/4>•u.
CDDAEnd
)

394 
•a˚
=(
•u
.
CDDAEnd
-•u.
CDDAFìd
)*4;

395 if(
•a˚
>
nByãs
)

396 
•a˚
=
nByãs
;

398 
	`mem˝y
(
•u
.
CDDAFìd
,
pcm
,
•a˚
);

399 
•u
.
CDDAFìd
+=
•a˚
/4;

400 
nByãs
-=
•a˚
;

401 
pcm
+=
•a˚
;

405 
	}
}

	@plugins/dfsound/xa.h

18 
INLINE
 
MixXA
();

19 
INLINE
 
FìdXA
(
xa_decode_t
 *
x≠
);

20 
INLINE
 
FìdCDDA
(*
pcm
, 
nByãs
);

	@plugins/dfxvideo/draw.c

18 
	#_IN_DRAW


	)

20 
	~<X11/Xlib.h
>

21 
	~<X11/Xutû.h
>

22 
	~<X11/curs‹f⁄t.h
>

24 
	~"gpu.h
"

27 
	giResX
=640;

28 
	giResY
=480;

29 
	glLowî∑π
;

30 
BOOL
 
	gbIsFú°Føme
 = 
TRUE
;

31 
BOOL
 
	gbCheckMask
 = 
FALSE
;

32 
	gsSëMask
 = 0;

33 
	glSëMask
 = 0;

34 
	giDeskt›Cﬁ
 = 16;

35 
	giShowFPS
 = 0;

36 
	giWöSize
;

37 
	giMaöèöA•e˘
 = 0;

38 
	giU£NoSåëchB…
 = 0;

39 
	giFa°Fwd
 = 0;

41 
	giFVDi•œy
 = 0;

42 
PSXPoöt_t
 
	g±Curs‹Poöt
[8];

43 
	gusCurs‹A˘ive
 = 0;

44 
	gulKeybôs
;

46 
	giWödowMode
=1;

47 
	giCﬁDïth
=32;

48 
	gszDi•Buf
[64];

49 
	gszMíuBuf
[36];

50 
	gszDebugText
[512];

51 
	$InôMíu
(Ë{
	}
}

52 
	$Clo£Míu
(Ë{
	}
}

57 
	~<sys/ùc.h
>

58 
	~<sys/shm.h
>

59 
	~<X11/exãnsi⁄s/Xv.h
>

60 
	~<X11/exãnsi⁄s/Xvlib.h
>

61 
	~<X11/exãnsi⁄s/XShm.h
>

62 
	gxv_p‹t
 = -1;

63 
	gxv_id
 = -1;

64 
	gxv_dïth
 = 0;

65 
	gyuv_p‹t
 = -1;

66 
	gyuv_id
 = -1;

67 
	gu£_yuv
 = 0;

68 
	gxv_vsync
 = 0;

70 
XShmSegmítInfo
 
	gshmöfo
;

71 
	gföÆw
,
	gföÆh
;

74 
	#MWM_HINTS_DECORATIONS
 2

	)

75 
	mÊags
;

76 
	mfun˘i⁄s
;

77 
	mdec‹©i⁄s
;

78 
	möput_mode
;

79 } 
	tMŸifWmHöts
;

81 
XvImage
 *
XvShmCª©eImage
(
Di•œy
*, 
XvP‹tID
, , *, , , 
XShmSegmítInfo
*);

83 
	~<time.h
>

86 
hq2x_32
–* 
§cPå
, 
DWORD
 
§cPôch
, * 
d°På
, 
width
, 
height
);

87 
hq3x_32
–* 
§cPå
, 
DWORD
 
§cPôch
, * 
d°På
, 
width
, 
height
);

93 * 
	gpSaISmÆlBuff
=
NULL
;

94 * 
	gpSaIBigBuff
=
NULL
;

96 
	#GET_RESULT
(
A
, 
B
, 
C
, 
D
Ë((A !C || A !DË- (B !C || B !D))

	)

98 
__ölöe
 
	$GëResu…1
(
DWORD
 
A
, DWORD 
B
, DWORD 
C
, DWORD 
D
, DWORD 
E
)

100 
x
 = 0;

101 
y
 = 0;

102 
r
 = 0;

103 i‡(
A
 =
C
Ë
x
+=1; i‡(
B
 =CË
y
+=1;

104 i‡(
A
 =
D
Ë
x
+=1; i‡(
B
 =DË
y
+=1;

105 i‡(
x
 <1Ë
r
+=1;

106 i‡(
y
 <1Ë
r
-=1;

107  
r
;

108 
	}
}

110 
__ölöe
 
	$GëResu…2
(
DWORD
 
A
, DWORD 
B
, DWORD 
C
, DWORD 
D
, DWORD 
E
)

112 
x
 = 0;

113 
y
 = 0;

114 
r
 = 0;

115 i‡(
A
 =
C
Ë
x
+=1; i‡(
B
 =CË
y
+=1;

116 i‡(
A
 =
D
Ë
x
+=1; i‡(
B
 =DË
y
+=1;

117 i‡(
x
 <1Ë
r
-=1;

118 i‡(
y
 <1Ë
r
+=1;

119  
r
;

120 
	}
}

122 
	#cﬁ‹Mask8
 0x00FEFEFE

	)

123 
	#lowPixñMask8
 0x00010101

	)

124 
	#qcﬁ‹Mask8
 0x00FCFCFC

	)

125 
	#qlowpixñMask8
 0x00030303

	)

127 
	#INTERPOLATE8
(
A
, 
B
Ë((((A & 
cﬁ‹Mask8
Ë>> 1Ë+ ((B & cﬁ‹Mask8Ë>> 1Ë+ (A & B & 
lowPixñMask8
)))

	)

128 
	#Q_INTERPOLATE8
(
A
, 
B
, 
C
, 
D
Ë(((((A & 
qcﬁ‹Mask8
) >> 2) + ((B & qcolorMask8) >> 2) + ((C & qcolorMask8) >> 2) + ((D & qcolorMask8) >> 2) \

129 + ((((
A
 & 
qlowpixñMask8
Ë+ (
B
 & qlowpixñMask8Ë+ (
C
 & qlowpixñMask8Ë+ (
D
 & qlowpixñMask8)Ë>> 2Ë& qlowpixñMask8))))

	)

132 
	$Su≥r2xSaI_ex8
(*
§cPå
, 
DWORD
 
§cPôch
,

133 *
d°Bôm≠
, 
width
, 
height
)

135 
DWORD
 
d°Pôch
 = 
§cPôch
<<1;

136 
DWORD
 
§cPôchHÆf
 = 
§cPôch
>>1;

137 
föWidth
 = 
§cPôch
>>2;

138 
DWORD
 
löe
;

139 
DWORD
 *
dP
;

140 
DWORD
 *
bP
;

141 
iXA
,
iXB
,
iXC
,
iYA
,
iYB
,
iYC
,
föish
;

142 
DWORD
 
cﬁ‹4
, 
cﬁ‹5
, 
cﬁ‹6
;

143 
DWORD
 
cﬁ‹1
, 
cﬁ‹2
, 
cﬁ‹3
;

144 
DWORD
 
cﬁ‹A0
, 
cﬁ‹A1
, 
cﬁ‹A2
, 
cﬁ‹A3
,

145 
cﬁ‹B0
, 
cﬁ‹B1
, 
cﬁ‹B2
, 
cﬁ‹B3
,

146 
cﬁ‹S1
, 
cﬁ‹S2
;

147 
DWORD
 
¥odu˘1a
, 
¥odu˘1b
,

148 
¥odu˘2a
, 
¥odu˘2b
;

150 
föÆw
=
width
<<1;

151 
föÆh
=
height
<<1;

153 
löe
 = 0;

156 ; 
height
; height-=1)

158 
bP
 = (
DWORD
 *)
§cPå
;

159 
dP
 = (
DWORD
 *)(
d°Bôm≠
 + 
löe
*
d°Pôch
);

160 
föish
 = 
width
; finish; finish -= 1 )

166 if(
föish
==
föWidth
Ë
iXA
=0;

167 
iXA
=1;

168 if(
föish
>4Ë{
iXB
=1;
iXC
=2;}

170 if(
föish
>3Ë{
iXB
=1;
iXC
=1;}

171 {
iXB
=0;
iXC
=0;}

172 if(
löe
==0Ë{
iYA
=0;}

173 {
iYA
=
föWidth
;}

174 if(
height
>4Ë{
iYB
=
föWidth
;
iYC
=
§cPôchHÆf
;}

176 if(
height
>3Ë{
iYB
=
föWidth
;
iYC
=finWidth;}

177 {
iYB
=0;
iYC
=0;}

179 
cﬁ‹B0
 = *(
bP
- 
iYA
 - 
iXA
);

180 
cﬁ‹B1
 = *(
bP
- 
iYA
);

181 
cﬁ‹B2
 = *(
bP
- 
iYA
 + 
iXB
);

182 
cﬁ‹B3
 = *(
bP
- 
iYA
 + 
iXC
);

184 
cﬁ‹4
 = *(
bP
 - 
iXA
);

185 
cﬁ‹5
 = *(
bP
);

186 
cﬁ‹6
 = *(
bP
 + 
iXB
);

187 
cﬁ‹S2
 = *(
bP
 + 
iXC
);

189 
cﬁ‹1
 = *(
bP
 + 
iYB
 - 
iXA
);

190 
cﬁ‹2
 = *(
bP
 + 
iYB
);

191 
cﬁ‹3
 = *(
bP
 + 
iYB
 + 
iXB
);

192 
cﬁ‹S1
*(
bP
 + 
iYB
 + 
iXC
);

194 
cﬁ‹A0
 = *(
bP
 + 
iYC
 - 
iXA
);

195 
cﬁ‹A1
 = *(
bP
 + 
iYC
);

196 
cﬁ‹A2
 = *(
bP
 + 
iYC
 + 
iXB
);

197 
cﬁ‹A3
 = *(
bP
 + 
iYC
 + 
iXC
);

199 i‡(
cﬁ‹2
 =
cﬁ‹6
 && 
cﬁ‹5
 !
cﬁ‹3
)

201 
¥odu˘2b
 = 
¥odu˘1b
 = 
cﬁ‹2
;

204 i‡(
cﬁ‹5
 =
cﬁ‹3
 && 
cﬁ‹2
 !
cﬁ‹6
)

206 
¥odu˘2b
 = 
¥odu˘1b
 = 
cﬁ‹5
;

209 i‡(
cﬁ‹5
 =
cﬁ‹3
 && 
cﬁ‹2
 =
cﬁ‹6
)

211 
r
 = 0;

213 
r
 +
	`GET_RESULT
 ((
cﬁ‹6
&0x00ffffff), (
cﬁ‹5
&0x00ffffff), (
cﬁ‹1
&0x00ffffff), (
cﬁ‹A1
&0x00ffffff));

214 
r
 +
	`GET_RESULT
 ((
cﬁ‹6
&0x00ffffff), (
cﬁ‹5
&0x00ffffff), (
cﬁ‹4
&0x00ffffff), (
cﬁ‹B1
&0x00ffffff));

215 
r
 +
	`GET_RESULT
 ((
cﬁ‹6
&0x00ffffff), (
cﬁ‹5
&0x00ffffff), (
cﬁ‹A2
&0x00ffffff), (
cﬁ‹S1
&0x00ffffff));

216 
r
 +
	`GET_RESULT
 ((
cﬁ‹6
&0x00ffffff), (
cﬁ‹5
&0x00ffffff), (
cﬁ‹B2
&0x00ffffff), (
cﬁ‹S2
&0x00ffffff));

218 i‡(
r
 > 0)

219 
¥odu˘2b
 = 
¥odu˘1b
 = 
cﬁ‹6
;

221 i‡(
r
 < 0)

222 
¥odu˘2b
 = 
¥odu˘1b
 = 
cﬁ‹5
;

225 
¥odu˘2b
 = 
¥odu˘1b
 = 
	`INTERPOLATE8
(
cﬁ‹5
, 
cﬁ‹6
);

230 i‡(
cﬁ‹6
 =
cﬁ‹3
 && cﬁ‹3 =
cﬁ‹A1
 && 
cﬁ‹2
 !
cﬁ‹A2
 && cﬁ‹3 !
cﬁ‹A0
)

231 
¥odu˘2b
 = 
	`Q_INTERPOLATE8
 (
cﬁ‹3
, cﬁ‹3, cﬁ‹3, 
cﬁ‹2
);

233 i‡(
cﬁ‹5
 =
cﬁ‹2
 && cﬁ‹2 =
cﬁ‹A2
 && 
cﬁ‹A1
 !
cﬁ‹3
 && cﬁ‹2 !
cﬁ‹A3
)

234 
¥odu˘2b
 = 
	`Q_INTERPOLATE8
 (
cﬁ‹2
, cﬁ‹2, cﬁ‹2, 
cﬁ‹3
);

236 
¥odu˘2b
 = 
	`INTERPOLATE8
 (
cﬁ‹2
, 
cﬁ‹3
);

238 i‡(
cﬁ‹6
 =
cﬁ‹3
 && cﬁ‹6 =
cﬁ‹B1
 && 
cﬁ‹5
 !
cﬁ‹B2
 && cﬁ‹6 !
cﬁ‹B0
)

239 
¥odu˘1b
 = 
	`Q_INTERPOLATE8
 (
cﬁ‹6
, cﬁ‹6, cﬁ‹6, 
cﬁ‹5
);

241 i‡(
cﬁ‹5
 =
cﬁ‹2
 && cﬁ‹5 =
cﬁ‹B2
 && 
cﬁ‹B1
 !
cﬁ‹6
 && cﬁ‹5 !
cﬁ‹B3
)

242 
¥odu˘1b
 = 
	`Q_INTERPOLATE8
 (
cﬁ‹6
, 
cﬁ‹5
, color5, color5);

244 
¥odu˘1b
 = 
	`INTERPOLATE8
 (
cﬁ‹5
, 
cﬁ‹6
);

247 i‡(
cﬁ‹5
 =
cﬁ‹3
 && 
cﬁ‹2
 !
cﬁ‹6
 && 
cﬁ‹4
 =cﬁ‹5 && cﬁ‹5 !
cﬁ‹A2
)

248 
¥odu˘2a
 = 
	`INTERPOLATE8
(
cﬁ‹2
, 
cﬁ‹5
);

250 i‡(
cﬁ‹5
 =
cﬁ‹1
 && 
cﬁ‹6
 =cﬁ‹5 && 
cﬁ‹4
 !
cﬁ‹2
 && cﬁ‹5 !
cﬁ‹A0
)

251 
¥odu˘2a
 = 
	`INTERPOLATE8
(
cﬁ‹2
, 
cﬁ‹5
);

253 
¥odu˘2a
 = 
cﬁ‹2
;

255 i‡(
cﬁ‹2
 =
cﬁ‹6
 && 
cﬁ‹5
 !
cﬁ‹3
 && 
cﬁ‹1
 =cﬁ‹2 && cﬁ‹2 !
cﬁ‹B2
)

256 
¥odu˘1a
 = 
	`INTERPOLATE8
(
cﬁ‹2
, 
cﬁ‹5
);

258 i‡(
cﬁ‹4
 =
cﬁ‹2
 && 
cﬁ‹3
 =cﬁ‹2 && 
cﬁ‹1
 !
cﬁ‹5
 && cﬁ‹2 !
cﬁ‹B0
)

259 
¥odu˘1a
 = 
	`INTERPOLATE8
(
cﬁ‹2
, 
cﬁ‹5
);

261 
¥odu˘1a
 = 
cﬁ‹5
;

263 *
dP
=
¥odu˘1a
;

264 *(
dP
+1)=
¥odu˘1b
;

265 *(
dP
+(
§cPôchHÆf
))=
¥odu˘2a
;

266 *(
dP
+1+(
§cPôchHÆf
))=
¥odu˘2b
;

268 
bP
 += 1;

269 
dP
 += 2;

272 
löe
 += 2;

273 
§cPå
 +
§cPôch
;

276 
	}
}

280 
	$Std2xSaI_ex8
(*
§cPå
, 
DWORD
 
§cPôch
,

281 *
d°Bôm≠
, 
width
, 
height
)

283 
DWORD
 
d°Pôch
 = 
§cPôch
<<1;

284 
DWORD
 
§cPôchHÆf
 = 
§cPôch
>>1;

285 
föWidth
 = 
§cPôch
>>2;

286 
DWORD
 
löe
;

287 
DWORD
 *
dP
;

288 
DWORD
 *
bP
;

289 
iXA
,
iXB
,
iXC
,
iYA
,
iYB
,
iYC
,
föish
;

291 
föÆw
=
width
<<1;

292 
föÆh
=
height
<<1;

294 
DWORD
 
cﬁ‹A
, 
cﬁ‹B
;

295 
DWORD
 
cﬁ‹C
, 
cﬁ‹D
,

296 
cﬁ‹E
, 
cﬁ‹F
, 
cﬁ‹G
, 
cﬁ‹H
,

297 
cﬁ‹I
, 
cﬁ‹J
, 
cﬁ‹K
, 
cﬁ‹L
,

298 
cﬁ‹M
, 
cﬁ‹N
, 
cﬁ‹O
, 
cﬁ‹P
;

299 
DWORD
 
¥odu˘
, 
¥odu˘1
, 
¥odu˘2
;

301 
löe
 = 0;

304 ; 
height
; height-=1)

306 
bP
 = (
DWORD
 *)
§cPå
;

307 
dP
 = (
DWORD
 *)(
d°Bôm≠
 + 
löe
*
d°Pôch
);

308 
föish
 = 
width
; finish; finish -= 1 )

315 if(
föish
==
föWidth
Ë
iXA
=0;

316 
iXA
=1;

317 if(
föish
>4Ë{
iXB
=1;
iXC
=2;}

319 if(
föish
>3Ë{
iXB
=1;
iXC
=1;}

320 {
iXB
=0;
iXC
=0;}

321 if(
löe
==0Ë{
iYA
=0;}

322 {
iYA
=
föWidth
;}

323 if(
height
>4Ë{
iYB
=
föWidth
;
iYC
=
§cPôchHÆf
;}

325 if(
height
>3Ë{
iYB
=
föWidth
;
iYC
=finWidth;}

326 {
iYB
=0;
iYC
=0;}

328 
cﬁ‹I
 = *(
bP
- 
iYA
 - 
iXA
);

329 
cﬁ‹E
 = *(
bP
- 
iYA
);

330 
cﬁ‹F
 = *(
bP
- 
iYA
 + 
iXB
);

331 
cﬁ‹J
 = *(
bP
- 
iYA
 + 
iXC
);

333 
cﬁ‹G
 = *(
bP
 - 
iXA
);

334 
cﬁ‹A
 = *(
bP
);

335 
cﬁ‹B
 = *(
bP
 + 
iXB
);

336 
cﬁ‹K
 = *(
bP
 + 
iXC
);

338 
cﬁ‹H
 = *(
bP
 + 
iYB
 - 
iXA
);

339 
cﬁ‹C
 = *(
bP
 + 
iYB
);

340 
cﬁ‹D
 = *(
bP
 + 
iYB
 + 
iXB
);

341 
cﬁ‹L
 = *(
bP
 + 
iYB
 + 
iXC
);

343 
cﬁ‹M
 = *(
bP
 + 
iYC
 - 
iXA
);

344 
cﬁ‹N
 = *(
bP
 + 
iYC
);

345 
cﬁ‹O
 = *(
bP
 + 
iYC
 + 
iXB
);

346 
cﬁ‹P
 = *(
bP
 + 
iYC
 + 
iXC
);

349 if((
cﬁ‹A
 =
cﬁ‹D
Ë&& (
cﬁ‹B
 !
cﬁ‹C
))

351 if(((
cﬁ‹A
 =
cﬁ‹E
Ë&& (
cﬁ‹B
 =
cﬁ‹L
)) ||

352 ((
cﬁ‹A
 =
cﬁ‹C
Ë&& (cﬁ‹A =
cﬁ‹F
) &&

353 (
cﬁ‹B
 !
cﬁ‹E
Ë&& (cﬁ‹B =
cﬁ‹J
)))

355 
¥odu˘
 = 
cﬁ‹A
;

359 
¥odu˘
 = 
	`INTERPOLATE8
(
cﬁ‹A
, 
cﬁ‹B
);

362 if(((
cﬁ‹A
 =
cﬁ‹G
Ë&& (
cﬁ‹C
 =
cﬁ‹O
)) ||

363 ((
cﬁ‹A
 =
cﬁ‹B
Ë&& (cﬁ‹A =
cﬁ‹H
) &&

364 (
cﬁ‹G
 !
cﬁ‹C
Ë&& (cﬁ‹C =
cﬁ‹M
)))

366 
¥odu˘1
 = 
cﬁ‹A
;

370 
¥odu˘1
 = 
	`INTERPOLATE8
(
cﬁ‹A
, 
cﬁ‹C
);

372 
¥odu˘2
 = 
cﬁ‹A
;

375 if((
cﬁ‹B
 =
cﬁ‹C
Ë&& (
cﬁ‹A
 !
cﬁ‹D
))

377 if(((
cﬁ‹B
 =
cﬁ‹F
Ë&& (
cﬁ‹A
 =
cﬁ‹H
)) ||

378 ((
cﬁ‹B
 =
cﬁ‹E
Ë&& (cﬁ‹B =
cﬁ‹D
) &&

379 (
cﬁ‹A
 !
cﬁ‹F
Ë&& (cﬁ‹A =
cﬁ‹I
)))

381 
¥odu˘
 = 
cﬁ‹B
;

385 
¥odu˘
 = 
	`INTERPOLATE8
(
cﬁ‹A
, 
cﬁ‹B
);

388 if(((
cﬁ‹C
 =
cﬁ‹H
Ë&& (
cﬁ‹A
 =
cﬁ‹F
)) ||

389 ((
cﬁ‹C
 =
cﬁ‹G
Ë&& (cﬁ‹C =
cﬁ‹D
) &&

390 (
cﬁ‹A
 !
cﬁ‹H
Ë&& (cﬁ‹A =
cﬁ‹I
)))

392 
¥odu˘1
 = 
cﬁ‹C
;

396 
¥odu˘1
=
	`INTERPOLATE8
(
cﬁ‹A
, 
cﬁ‹C
);

398 
¥odu˘2
 = 
cﬁ‹B
;

401 if((
cﬁ‹A
 =
cﬁ‹D
Ë&& (
cﬁ‹B
 =
cﬁ‹C
))

403 i‡(
cﬁ‹A
 =
cﬁ‹B
)

405 
¥odu˘
 = 
cﬁ‹A
;

406 
¥odu˘1
 = 
cﬁ‹A
;

407 
¥odu˘2
 = 
cﬁ‹A
;

411 
r
 = 0;

412 
¥odu˘1
 = 
	`INTERPOLATE8
(
cﬁ‹A
, 
cﬁ‹C
);

413 
¥odu˘
 = 
	`INTERPOLATE8
(
cﬁ‹A
, 
cﬁ‹B
);

415 
r
 +
	`GëResu…1
 (
cﬁ‹A
&0x00FFFFFF, 
cﬁ‹B
&0x00FFFFFF, 
cﬁ‹G
&0x00FFFFFF, 
cﬁ‹E
&0x00FFFFFF, 
cﬁ‹I
&0x00FFFFFF);

416 
r
 +
	`GëResu…2
 (
cﬁ‹B
&0x00FFFFFF, 
cﬁ‹A
&0x00FFFFFF, 
cﬁ‹K
&0x00FFFFFF, 
cﬁ‹F
&0x00FFFFFF, 
cﬁ‹J
&0x00FFFFFF);

417 
r
 +
	`GëResu…2
 (
cﬁ‹B
&0x00FFFFFF, 
cﬁ‹A
&0x00FFFFFF, 
cﬁ‹H
&0x00FFFFFF, 
cﬁ‹N
&0x00FFFFFF, 
cﬁ‹M
&0x00FFFFFF);

418 
r
 +
	`GëResu…1
 (
cﬁ‹A
&0x00FFFFFF, 
cﬁ‹B
&0x00FFFFFF, 
cﬁ‹L
&0x00FFFFFF, 
cﬁ‹O
&0x00FFFFFF, 
cﬁ‹P
&0x00FFFFFF);

420 i‡(
r
 > 0)

421 
¥odu˘2
 = 
cﬁ‹A
;

423 i‡(
r
 < 0)

424 
¥odu˘2
 = 
cﬁ‹B
;

427 
¥odu˘2
 = 
	`Q_INTERPOLATE8
(
cﬁ‹A
, 
cﬁ‹B
, 
cﬁ‹C
, 
cﬁ‹D
);

433 
¥odu˘2
 = 
	`Q_INTERPOLATE8
(
cﬁ‹A
, 
cﬁ‹B
, 
cﬁ‹C
, 
cﬁ‹D
);

435 i‡((
cﬁ‹A
 =
cﬁ‹C
Ë&& (cﬁ‹A =
cﬁ‹F
) &&

436 (
cﬁ‹B
 !
cﬁ‹E
Ë&& (cﬁ‹B =
cﬁ‹J
))

438 
¥odu˘
 = 
cﬁ‹A
;

441 i‡((
cﬁ‹B
 =
cﬁ‹E
Ë&& (cﬁ‹B =
cﬁ‹D
Ë&& (
cﬁ‹A
 !
cﬁ‹F
Ë&& (cﬁ‹A =
cﬁ‹I
))

443 
¥odu˘
 = 
cﬁ‹B
;

447 
¥odu˘
 = 
	`INTERPOLATE8
(
cﬁ‹A
, 
cﬁ‹B
);

450 i‡((
cﬁ‹A
 =
cﬁ‹B
Ë&& (cﬁ‹A =
cﬁ‹H
) &&

451 (
cﬁ‹G
 !
cﬁ‹C
Ë&& (cﬁ‹C =
cﬁ‹M
))

453 
¥odu˘1
 = 
cﬁ‹A
;

456 i‡((
cﬁ‹C
 =
cﬁ‹G
Ë&& (cﬁ‹C =
cﬁ‹D
) &&

457 (
cﬁ‹A
 !
cﬁ‹H
Ë&& (cﬁ‹A =
cﬁ‹I
))

459 
¥odu˘1
 = 
cﬁ‹C
;

463 
¥odu˘1
 = 
	`INTERPOLATE8
(
cﬁ‹A
, 
cﬁ‹C
);

469 *
dP
=
cﬁ‹A
;

470 *(
dP
+1)=
¥odu˘
;

471 *(
dP
+(
§cPôchHÆf
))=
¥odu˘1
;

472 *(
dP
+1+(
§cPôchHÆf
))=
¥odu˘2
;

474 
bP
 += 1;

475 
dP
 += 2;

478 
löe
 += 2;

479 
§cPå
 +
§cPôch
;

482 
	}
}

486 
	$Su≥rEagÀ_ex8
(*
§cPå
, 
DWORD
 
§cPôch
,

487 *
d°Bôm≠
, 
width
, 
height
)

489 
DWORD
 
d°Pôch
 = 
§cPôch
<<1;

490 
DWORD
 
§cPôchHÆf
 = 
§cPôch
>>1;

491 
föWidth
 = 
§cPôch
>>2;

492 
DWORD
 
löe
;

493 
DWORD
 *
dP
;

494 
DWORD
 *
bP
;

495 
iXA
,
iXB
,
iXC
,
iYA
,
iYB
,
iYC
,
föish
;

496 
DWORD
 
cﬁ‹4
, 
cﬁ‹5
, 
cﬁ‹6
;

497 
DWORD
 
cﬁ‹1
, 
cﬁ‹2
, 
cﬁ‹3
;

498 
DWORD
 
cﬁ‹A1
, 
cﬁ‹A2
,

499 
cﬁ‹B1
, 
cﬁ‹B2
,

500 
cﬁ‹S1
, 
cﬁ‹S2
;

501 
DWORD
 
¥odu˘1a
, 
¥odu˘1b
,

502 
¥odu˘2a
, 
¥odu˘2b
;

504 
föÆw
=
width
<<1;

505 
föÆh
=
height
<<1;

507 
löe
 = 0;

510 ; 
height
; height-=1)

512 
bP
 = (
DWORD
 *)
§cPå
;

513 
dP
 = (
DWORD
 *)(
d°Bôm≠
 + 
löe
*
d°Pôch
);

514 
föish
 = 
width
; finish; finish -= 1 )

516 if(
föish
==
föWidth
Ë
iXA
=0;

517 
iXA
=1;

518 if(
föish
>4Ë{
iXB
=1;
iXC
=2;}

520 if(
föish
>3Ë{
iXB
=1;
iXC
=1;}

521 {
iXB
=0;
iXC
=0;}

522 if(
löe
==0Ë{
iYA
=0;}

523 {
iYA
=
föWidth
;}

524 if(
height
>4Ë{
iYB
=
föWidth
;
iYC
=
§cPôchHÆf
;}

526 if(
height
>3Ë{
iYB
=
föWidth
;
iYC
=finWidth;}

527 {
iYB
=0;
iYC
=0;}

529 
cﬁ‹B1
 = *(
bP
- 
iYA
);

530 
cﬁ‹B2
 = *(
bP
- 
iYA
 + 
iXB
);

532 
cﬁ‹4
 = *(
bP
 - 
iXA
);

533 
cﬁ‹5
 = *(
bP
);

534 
cﬁ‹6
 = *(
bP
 + 
iXB
);

535 
cﬁ‹S2
 = *(
bP
 + 
iXC
);

537 
cﬁ‹1
 = *(
bP
 + 
iYB
 - 
iXA
);

538 
cﬁ‹2
 = *(
bP
 + 
iYB
);

539 
cﬁ‹3
 = *(
bP
 + 
iYB
 + 
iXB
);

540 
cﬁ‹S1
*(
bP
 + 
iYB
 + 
iXC
);

542 
cﬁ‹A1
 = *(
bP
 + 
iYC
);

543 
cﬁ‹A2
 = *(
bP
 + 
iYC
 + 
iXB
);

545 if(
cﬁ‹2
 =
cﬁ‹6
 && 
cﬁ‹5
 !
cﬁ‹3
)

547 
¥odu˘1b
 = 
¥odu˘2a
 = 
cﬁ‹2
;

548 if((
cﬁ‹1
 =
cﬁ‹2
) ||

549 (
cﬁ‹6
 =
cﬁ‹B2
))

551 
¥odu˘1a
 = 
	`INTERPOLATE8
(
cﬁ‹2
, 
cﬁ‹5
);

552 
¥odu˘1a
 = 
	`INTERPOLATE8
(
cﬁ‹2
,Öroduct1a);

556 
¥odu˘1a
 = 
	`INTERPOLATE8
(
cﬁ‹5
, 
cﬁ‹6
);

559 if((
cﬁ‹6
 =
cﬁ‹S2
) ||

560 (
cﬁ‹2
 =
cﬁ‹A1
))

562 
¥odu˘2b
 = 
	`INTERPOLATE8
(
cﬁ‹2
, 
cﬁ‹3
);

563 
¥odu˘2b
 = 
	`INTERPOLATE8
(
cﬁ‹2
,Öroduct2b);

567 
¥odu˘2b
 = 
	`INTERPOLATE8
(
cﬁ‹2
, 
cﬁ‹3
);

571 i‡(
cﬁ‹5
 =
cﬁ‹3
 && 
cﬁ‹2
 !
cﬁ‹6
)

573 
¥odu˘2b
 = 
¥odu˘1a
 = 
cﬁ‹5
;

575 i‡((
cﬁ‹B1
 =
cﬁ‹5
) ||

576 (
cﬁ‹3
 =
cﬁ‹S1
))

578 
¥odu˘1b
 = 
	`INTERPOLATE8
(
cﬁ‹5
, 
cﬁ‹6
);

579 
¥odu˘1b
 = 
	`INTERPOLATE8
(
cﬁ‹5
,Öroduct1b);

583 
¥odu˘1b
 = 
	`INTERPOLATE8
(
cﬁ‹5
, 
cﬁ‹6
);

586 i‡((
cﬁ‹3
 =
cﬁ‹A2
) ||

587 (
cﬁ‹4
 =
cﬁ‹5
))

589 
¥odu˘2a
 = 
	`INTERPOLATE8
(
cﬁ‹5
, 
cﬁ‹2
);

590 
¥odu˘2a
 = 
	`INTERPOLATE8
(
cﬁ‹5
,Öroduct2a);

594 
¥odu˘2a
 = 
	`INTERPOLATE8
(
cﬁ‹2
, 
cﬁ‹3
);

598 i‡(
cﬁ‹5
 =
cﬁ‹3
 && 
cﬁ‹2
 =
cﬁ‹6
)

600 
r
 = 0;

602 
r
 +
	`GET_RESULT
 ((
cﬁ‹6
&0x00ffffff), (
cﬁ‹5
&0x00ffffff), (
cﬁ‹1
&0x00ffffff), (
cﬁ‹A1
&0x00ffffff));

603 
r
 +
	`GET_RESULT
 ((
cﬁ‹6
&0x00ffffff), (
cﬁ‹5
&0x00ffffff), (
cﬁ‹4
&0x00ffffff), (
cﬁ‹B1
&0x00ffffff));

604 
r
 +
	`GET_RESULT
 ((
cﬁ‹6
&0x00ffffff), (
cﬁ‹5
&0x00ffffff), (
cﬁ‹A2
&0x00ffffff), (
cﬁ‹S1
&0x00ffffff));

605 
r
 +
	`GET_RESULT
 ((
cﬁ‹6
&0x00ffffff), (
cﬁ‹5
&0x00ffffff), (
cﬁ‹B2
&0x00ffffff), (
cﬁ‹S2
&0x00ffffff));

607 i‡(
r
 > 0)

609 
¥odu˘1b
 = 
¥odu˘2a
 = 
cﬁ‹2
;

610 
¥odu˘1a
 = 
¥odu˘2b
 = 
	`INTERPOLATE8
(
cﬁ‹5
, 
cﬁ‹6
);

613 i‡(
r
 < 0)

615 
¥odu˘2b
 = 
¥odu˘1a
 = 
cﬁ‹5
;

616 
¥odu˘1b
 = 
¥odu˘2a
 = 
	`INTERPOLATE8
(
cﬁ‹5
, 
cﬁ‹6
);

620 
¥odu˘2b
 = 
¥odu˘1a
 = 
cﬁ‹5
;

621 
¥odu˘1b
 = 
¥odu˘2a
 = 
cﬁ‹2
;

626 
¥odu˘2b
 = 
¥odu˘1a
 = 
	`INTERPOLATE8
(
cﬁ‹2
, 
cﬁ‹6
);

627 
¥odu˘2b
 = 
	`Q_INTERPOLATE8
(
cﬁ‹3
, color3, color3,Öroduct2b);

628 
¥odu˘1a
 = 
	`Q_INTERPOLATE8
(
cﬁ‹5
, color5, color5,Öroduct1a);

630 
¥odu˘2a
 = 
¥odu˘1b
 = 
	`INTERPOLATE8
(
cﬁ‹5
, 
cﬁ‹3
);

631 
¥odu˘2a
 = 
	`Q_INTERPOLATE8
(
cﬁ‹2
, color2, color2,Öroduct2a);

632 
¥odu˘1b
 = 
	`Q_INTERPOLATE8
(
cﬁ‹6
, color6, color6,Öroduct1b);

637 *
dP
=
¥odu˘1a
;

638 *(
dP
+1)=
¥odu˘1b
;

639 *(
dP
+(
§cPôchHÆf
))=
¥odu˘2a
;

640 *(
dP
+1+(
§cPôchHÆf
))=
¥odu˘2b
;

642 
bP
 += 1;

643 
dP
 += 2;

646 
löe
 += 2;

647 
§cPå
 +
§cPôch
;

650 
	}
}

656 
__ölöe
 
	$sˇÀ2x_32_def_whﬁe
(
uöt32_t
* 
d°0
, uöt32_t* 
d°1
, c⁄° uöt32_t* 
§c0
, c⁄° uöt32_t* 
§c1
, c⁄° uöt32_t* 
§c2
, 
cou¡
)

662 i‡(
§c0
[0] !
§c2
[0] && 
§c1
[0] != src1[1]) {

663 
d°0
[0] = 
§c1
[0] =
§c0
[0] ? src0[0] : src1[0];

664 
d°0
[1] = 
§c1
[1] =
§c0
[0] ? src0[0] : src1[0];

665 
d°1
[0] = 
§c1
[0] =
§c2
[0] ? src2[0] : src1[0];

666 
d°1
[1] = 
§c1
[1] =
§c2
[0] ? src2[0] : src1[0];

668 
d°0
[0] = 
§c1
[0];

669 
d°0
[1] = 
§c1
[0];

670 
d°1
[0] = 
§c1
[0];

671 
d°1
[1] = 
§c1
[0];

673 ++
§c0
;

674 ++
§c1
;

675 ++
§c2
;

676 
d°0
 += 2;

677 
d°1
 += 2;

680 
cou¡
 -= 2;

681 
cou¡
) {

682 i‡(
§c0
[0] !
§c2
[0] && 
§c1
[-1] != src1[1]) {

683 
d°0
[0] = 
§c1
[-1] =
§c0
[0] ? src0[0] : src1[0];

684 
d°0
[1] = 
§c1
[1] =
§c0
[0] ? src0[0] : src1[0];

685 
d°1
[0] = 
§c1
[-1] =
§c2
[0] ? src2[0] : src1[0];

686 
d°1
[1] = 
§c1
[1] =
§c2
[0] ? src2[0] : src1[0];

688 
d°0
[0] = 
§c1
[0];

689 
d°0
[1] = 
§c1
[0];

690 
d°1
[0] = 
§c1
[0];

691 
d°1
[1] = 
§c1
[0];

694 ++
§c0
;

695 ++
§c1
;

696 ++
§c2
;

697 
d°0
 += 2;

698 
d°1
 += 2;

699 --
cou¡
;

703 i‡(
§c0
[0] !
§c2
[0] && 
§c1
[-1] != src1[0]) {

704 
d°0
[0] = 
§c1
[-1] =
§c0
[0] ? src0[0] : src1[0];

705 
d°0
[1] = 
§c1
[0] =
§c0
[0] ? src0[0] : src1[0];

706 
d°1
[0] = 
§c1
[-1] =
§c2
[0] ? src2[0] : src1[0];

707 
d°1
[1] = 
§c1
[0] =
§c2
[0] ? src2[0] : src1[0];

709 
d°0
[0] = 
§c1
[0];

710 
d°0
[1] = 
§c1
[0];

711 
d°1
[0] = 
§c1
[0];

712 
d°1
[1] = 
§c1
[0];

714 
	}
}

716 
	$SˇÀ2x_ex8
(*
§cPå
, 
DWORD
 
§cPôch
,

717 *
d°På
, 
width
, 
height
)

720 c⁄° 
d°Pôch
 = 
§cPôch
<<1;

722 
cou¡
 = 
height
;

724 
föÆw
=
width
<<1;

725 
föÆh
=
height
<<1;

727 
uöt32_t
 *
d°0
 = (uöt32_à*)
d°På
;

728 
uöt32_t
 *
d°1
 = 
d°0
 + (
d°Pôch
 >> 2);

730 
uöt32_t
 *
§c0
 = (uöt32_à*)
§cPå
;

731 
uöt32_t
 *
§c1
 = 
§c0
 + (
§cPôch
 >> 2);

732 
uöt32_t
 *
§c2
 = 
§c1
 + (
§cPôch
 >> 2);

733 
	`sˇÀ2x_32_def_whﬁe
(
d°0
, 
d°1
, 
§c0
, src0, 
§c1
, 
width
);

735 
cou¡
 -= 2;

736 
cou¡
) {

737 
d°0
 +
d°Pôch
 >> 1;

738 
d°1
 +
d°Pôch
 >> 1;

739 
	`sˇÀ2x_32_def_whﬁe
(
d°0
, 
d°1
, 
§c0
, src0, 
§c1
, 
width
);

740 
§c0
 = 
§c1
;

741 
§c1
 = 
§c2
;

742 
§c2
 +
§cPôch
 >> 2;

743 --
cou¡
;

745 
d°0
 +
d°Pôch
 >> 1;

746 
d°1
 +
d°Pôch
 >> 1;

747 
	`sˇÀ2x_32_def_whﬁe
(
d°0
, 
d°1
, 
§c0
, 
§c1
, src1, 
width
);

749 
	}
}

753 
__ölöe
 
	$sˇÀ3x_32_def_whﬁe
(
uöt32_t
* 
d°0
, uöt32_t* 
d°1
, uöt32_t* 
d°2
, c⁄° uöt32_t* 
§c0
, c⁄° uöt32_t* 
§c1
, c⁄° uöt32_t* 
§c2
, 
cou¡
)

758 i‡(
§c0
[0] !
§c2
[0] && 
§c1
[0] != src1[1]) {

759 
d°0
[0] = 
§c1
[0];

760 
d°0
[1] = (
§c1
[0] =
§c0
[0] && src1[0] != src0[1]) || (src1[1] == src0[0] && src1[0] != src0[0]) ? src0[0] : src1[0];

761 
d°0
[2] = 
§c1
[1] =
§c0
[0] ? src1[1] : src1[0];

762 
d°1
[0] = (
§c1
[0] =
§c0
[0] && src1[0] !
§c2
[0]) || (src1[0] == src2[0] && src1[0] != src0[0]) ? src1[0] : src1[0];

763 
d°1
[1] = 
§c1
[0];

764 
d°1
[2] = (
§c1
[1] =
§c0
[0] && src1[0] !
§c2
[1]) || (src1[1] == src2[0] && src1[0] != src0[1]) ? src1[1] : src1[0];

765 
d°2
[0] = 
§c1
[0];

766 
d°2
[1] = (
§c1
[0] =
§c2
[0] && src1[0] != src2[1]) || (src1[1] == src2[0] && src1[0] != src2[0]) ? src2[0] : src1[0];

767 
d°2
[2] = 
§c1
[1] =
§c2
[0] ? src1[1] : src1[0];

769 
d°0
[0] = 
§c1
[0];

770 
d°0
[1] = 
§c1
[0];

771 
d°0
[2] = 
§c1
[0];

772 
d°1
[0] = 
§c1
[0];

773 
d°1
[1] = 
§c1
[0];

774 
d°1
[2] = 
§c1
[0];

775 
d°2
[0] = 
§c1
[0];

776 
d°2
[1] = 
§c1
[0];

777 
d°2
[2] = 
§c1
[0];

779 ++
§c0
;

780 ++
§c1
;

781 ++
§c2
;

782 
d°0
 += 3;

783 
d°1
 += 3;

784 
d°2
 += 3;

787 
cou¡
 -= 2;

788 
cou¡
) {

789 i‡(
§c0
[0] !
§c2
[0] && 
§c1
[-1] != src1[1]) {

790 
d°0
[0] = 
§c1
[-1] =
§c0
[0] ? src1[-1] : src1[0];

791 
d°0
[1] = (
§c1
[-1] =
§c0
[0] && src1[0] != src0[1]) || (src1[1] == src0[0] && src1[0] != src0[-1]) ? src0[0] : src1[0];

792 
d°0
[2] = 
§c1
[1] =
§c0
[0] ? src1[1] : src1[0];

793 
d°1
[0] = (
§c1
[-1] =
§c0
[0] && src1[0] !
§c2
[-1]) || (src1[-1] == src2[0] && src1[0] != src0[-1]) ? src1[-1] : src1[0];

794 
d°1
[1] = 
§c1
[0];

795 
d°1
[2] = (
§c1
[1] =
§c0
[0] && src1[0] !
§c2
[1]) || (src1[1] == src2[0] && src1[0] != src0[1]) ? src1[1] : src1[0];

796 
d°2
[0] = 
§c1
[-1] =
§c2
[0] ? src1[-1] : src1[0];

797 
d°2
[1] = (
§c1
[-1] =
§c2
[0] && src1[0] != src2[1]) || (src1[1] == src2[0] && src1[0] != src2[-1]) ? src2[0] : src1[0];

798 
d°2
[2] = 
§c1
[1] =
§c2
[0] ? src1[1] : src1[0];

800 
d°0
[0] = 
§c1
[0];

801 
d°0
[1] = 
§c1
[0];

802 
d°0
[2] = 
§c1
[0];

803 
d°1
[0] = 
§c1
[0];

804 
d°1
[1] = 
§c1
[0];

805 
d°1
[2] = 
§c1
[0];

806 
d°2
[0] = 
§c1
[0];

807 
d°2
[1] = 
§c1
[0];

808 
d°2
[2] = 
§c1
[0];

811 ++
§c0
;

812 ++
§c1
;

813 ++
§c2
;

814 
d°0
 += 3;

815 
d°1
 += 3;

816 
d°2
 += 3;

817 --
cou¡
;

821 i‡(
§c0
[0] !
§c2
[0] && 
§c1
[-1] != src1[0]) {

822 
d°0
[0] = 
§c1
[-1] =
§c0
[0] ? src1[-1] : src1[0];

823 
d°0
[1] = (
§c1
[-1] =
§c0
[0] && src1[0] != src0[0]) || (src1[0] == src0[0] && src1[0] != src0[-1]) ? src0[0] : src1[0];

824 
d°0
[2] = 
§c1
[0];

825 
d°1
[0] = (
§c1
[-1] =
§c0
[0] && src1[0] !
§c2
[-1]) || (src1[-1] == src2[0] && src1[0] != src0[-1]) ? src1[-1] : src1[0];

826 
d°1
[1] = 
§c1
[0];

827 
d°1
[2] = (
§c1
[0] =
§c0
[0] && src1[0] !
§c2
[0]) || (src1[0] == src2[0] && src1[0] != src0[0]) ? src1[0] : src1[0];

828 
d°2
[0] = 
§c1
[-1] =
§c2
[0] ? src1[-1] : src1[0];

829 
d°2
[1] = (
§c1
[-1] =
§c2
[0] && src1[0] != src2[0]) || (src1[0] == src2[0] && src1[0] != src2[-1]) ? src2[0] : src1[0];

830 
d°2
[2] = 
§c1
[0];

832 
d°0
[0] = 
§c1
[0];

833 
d°0
[1] = 
§c1
[0];

834 
d°0
[2] = 
§c1
[0];

835 
d°1
[0] = 
§c1
[0];

836 
d°1
[1] = 
§c1
[0];

837 
d°1
[2] = 
§c1
[0];

838 
d°2
[0] = 
§c1
[0];

839 
d°2
[1] = 
§c1
[0];

840 
d°2
[2] = 
§c1
[0];

842 
	}
}

845 
	$SˇÀ3x_ex8
(*
§cPå
, 
DWORD
 
§cPôch
,

846 *
d°På
, 
width
, 
height
)

848 
cou¡
 = 
height
;

850 
d°Pôch
 = 
§cPôch
*3;

851 
d°RowPixñs
 = 
d°Pôch
>>2;

853 
föÆw
=
width
*3;

854 
föÆh
=
height
*3;

856 
uöt32_t
 *
d°0
 = (uöt32_à*)
d°På
;

857 
uöt32_t
 *
d°1
 = 
d°0
 + 
d°RowPixñs
;

858 
uöt32_t
 *
d°2
 = 
d°1
 + 
d°RowPixñs
;

860 
uöt32_t
 *
§c0
 = (uöt32_à*)
§cPå
;

861 
uöt32_t
 *
§c1
 = 
§c0
 + (
§cPôch
 >> 2);

862 
uöt32_t
 *
§c2
 = 
§c1
 + (
§cPôch
 >> 2);

863 
	`sˇÀ3x_32_def_whﬁe
(
d°0
, 
d°1
, 
d°2
, 
§c0
, src0, 
§c2
, 
width
);

865 
cou¡
 -= 2;

866 
cou¡
) {

867 
d°0
 +
d°RowPixñs
*3;

868 
d°1
 +
d°RowPixñs
*3;

869 
d°2
 +
d°RowPixñs
*3;

871 
	`sˇÀ3x_32_def_whﬁe
(
d°0
, 
d°1
, 
d°2
, 
§c0
, 
§c1
, 
§c2
, 
width
);

872 
§c0
 = 
§c1
;

873 
§c1
 = 
§c2
;

874 
§c2
 +
§cPôch
 >> 2;

875 --
cou¡
;

878 
d°0
 +
d°RowPixñs
*3;

879 
d°1
 +
d°RowPixñs
*3;

880 
d°2
 +
d°RowPixñs
*3;

882 
	`sˇÀ3x_32_def_whﬁe
(
d°0
, 
d°1
, 
d°2
, 
§c0
, 
§c1
, src1, 
width
);

883 
	}
}

888 #i‚de‡
MAX


889 
	#MAX
(
a
,
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

890 
	#MIN
(
a
,
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

899 
Curs‹
 
	gcurs‹
;

900 
XVisuÆInfo
 
	gvi
;

901 
XVisuÆInfo
 *
	gmyvisuÆ
;

902 
Di•œy
 *
	gdi•œy
;

903 
Cﬁ‹m≠
 
	gcﬁ‹m≠
;

904 
Wödow
 
	gwödow
;

905 
GC
 
	ghGC
;

906 
XImage
 * 
	gXimage
;

907 
XvImage
 * 
	gXCimage
;

908 
XImage
 * 
	gXFimage
;

909 
XImage
 * 
	gXPimage
=0 ;

910 * 
	gXpixñs
;

911 * 
	gpC≠ti⁄Text
;

913 
	gfx
=0;

916 
Atom
 
	$xv_öã∫_©om_if_exi°s
–
Di•œy
 *
di•œy
, c⁄° * 
©om_«me
 )

918 
XvAâribuã
 * 
©åibuãs
;

919 
©åib_cou¡
,
i
;

920 
Atom
 
xv_©om
 = 
N⁄e
;

922 
©åibuãs
 = 
	`XvQuîyP‹tAâribuãs
–
di•œy
, 
xv_p‹t
, &
©åib_cou¡
 );

923 if–
©åibuãs
!=
NULL
 )

925  
i
 = 0; i < 
©åib_cou¡
; ++i )

927 i‡–
	`°rcmp
(
©åibuãs
[
i
].
«me
, 
©om_«me
 ) == 0 )

929 
xv_©om
 = 
	`XI¡înAtom
–
di•œy
, 
©om_«me
, 
FÆ£
 );

933 
	`XFªe
–
©åibuãs
 );

936  
xv_©om
;

937 
	}
}

943 
	$De°royDi•œy
()

945 if(
di•œy
)

947 
	`XFªeCﬁ‹m≠
(
di•œy
, 
cﬁ‹m≠
);

948 if(
hGC
)

950 
	`XFªeGC
(
di•œy
,
hGC
);

951 
hGC
 = 0;

953 if(
Ximage
)

955 
	`XDe°royImage
(
Ximage
);

956 
Ximage
=0;

958 if(
XCimage
)

960 
	`XFªe
(
XCimage
);

961 
XCimage
=0;

963 if(
XFimage
)

965 
	`XDe°royImage
(
XFimage
);

966 
XFimage
=0;

969 
	`XShmDëach
(
di•œy
,&
shmöfo
);

970 
	`shmdt
(
shmöfo
.
shmaddr
);

971 
	`shm˘l
(
shmöfo
.
shmid
,
IPC_RMID
,
NULL
);

973 
Atom
 
©om_vsync
 = 
	`xv_öã∫_©om_if_exi°s
(
di•œy
, "XV_SYNC_TO_VBLANK");

974 i‡(
©om_vsync
 !
N⁄e
) {

975 
	`XvSëP‹tAâribuã
(
di•œy
, 
xv_p‹t
, 
©om_vsync
, 
xv_vsync
);

978 
	`XSync
(
di•œy
,
FÆ£
);

980 
	`XClo£Di•œy
(
di•œy
);

982 
	}
}

984 
	gdïth
=0;

985 
	groŸ_wödow_id
=0;

990 
	$Cª©eDi•œy
()

992 
XSëWödowAâribuãs
 
wö©å
;

993 
mys¸ìn
;

994 
S¸ìn
 * 
s¸ìn
;

995 
XEvít
 
evít
;

996 
XSizeHöts
 
höts
;

997 
XWMHöts
 
wm_höts
;

998 
MŸifWmHöts
 
mwmhöts
;

999 
Atom
 
mwm©om
;

1001 
Atom
 
dñwödow
;

1003 
XGCVÆues
 
gcv
;

1004 
i
;

1006 
ªt
, 
j
, 
p
;

1007 
f‹m©s
;

1008 
p_num_ad≠t‹s
=0, 
p_num_p‹ts
=0;

1010 
XvAd≠t‹Info
 *
ai
;

1011 
XvImageF‹m©VÆues
 *
fo
;

1014 
di•œy
 = 
	`XO≥nDi•œy
(
NULL
);

1016 i‡(!
di•œy
)

1018 
	`Ârötf
 (
°dîr
,"FailedÅo open display!!!\n");

1019 
	`De°royDi•œy
();

1023 
mys¸ìn
=
	`DeÁu…S¸ìn
(
di•œy
);

1026 i‡(!
iWödowMode
Ë
fx
 = 1;

1028 
s¸ìn
=
	`DeÁu…S¸ìnOfDi•œy
(
di•œy
);

1030 
roŸ_wödow_id
=
	`RoŸWödow
(
di•œy
,
	`DeÁu…S¸ìn
(display));

1033 
ªt
 = 
	`XvQuîyAd≠t‹s
(
di•œy
, 
roŸ_wödow_id
, &
p_num_ad≠t‹s
, &
ai
);

1034 i‡(
ªt
 !
Suc˚ss
) {

1035 i‡(
ªt
 =
XvBadExãnsi⁄
)

1036 
	`¥ötf
("XvBadExtensionÑeturnedát XvQueryExtension.\n");

1038 i‡(
ªt
 =
XvBadAŒoc
)

1039 
	`¥ötf
("XvBadAllocÑeturnedát XvQueryExtension.\n");

1041 
	`¥ötf
("otherÉrror happanedát XvQueryAdaptors.\n");

1043 
	`exô
(-1);

1046 
dïth
 = 
	`DeÁu…Dïth
(
di•œy
, 
mys¸ìn
);

1048 
i
 = 0; i < 
p_num_ad≠t‹s
; i++) {

1049 
p_num_p‹ts
 = 
ai
[
i
].
ba£_id
 +ái[i].
num_p‹ts
;

1050 
p
 = 
ai
[
i
].
ba£_id
;Ö < 
p_num_p‹ts
;Ö++) {

1051 
fo
 = 
	`XvLi°ImageF‹m©s
(
di•œy
, 
p
, &
f‹m©s
);

1052 
j
 = 0; j < 
f‹m©s
; j++) {

1056 #ifde‡
__BIG_ENDIAN__


1057 i‡–
fo
[
j
].
ty≥
 =
XvYUV
 && fo[j].
bôs_≥r_pixñ
 =16 && fo[j].
f‹m©
 =
XvPacked
 && 
	`°∫cmp
("YUYV", fo[j].
comp⁄ít_‹dî
, 5) == 0 )

1059 i‡–
fo
[
j
].
ty≥
 =
XvYUV
 && fo[j].
bôs_≥r_pixñ
 =16 && fo[j].
f‹m©
 =
XvPacked
 && 
	`°∫cmp
("UYVY", fo[j].
comp⁄ít_‹dî
, 5) == 0 )

1062 
yuv_p‹t
 = 
p
;

1063 
yuv_id
 = 
fo
[
j
].
id
;

1065 i‡(
fo
[
j
].
ty≥
 =
XvRGB
 && fo[j].
bôs_≥r_pixñ
 == 32)

1067 
xv_p‹t
 = 
p
;

1068 
xv_id
 = 
fo
[
j
].
id
;

1069 
xv_dïth
 = 
fo
[
j
].
dïth
;

1070 
	`¥ötf
("RGB modêfound. id: %x, dïth: %d\n", 
xv_id
, 
xv_dïth
);

1072 i‡(
xv_dïth
 !
dïth
) {

1073 
	`¥ötf
("W¨nög: Dïth d€†nŸ m©ch s¸ì¿dïth (%d)\n", 
dïth
);

1077 
j
 = 
f‹m©s
;

1078 
p
 = 
p_num_p‹ts
;

1079 
i
 = 
p_num_ad≠t‹s
;

1083 i‡(
fo
)

1084 
	`XFªe
(
fo
);

1087 i‡(
p_num_ad≠t‹s
 > 0)

1088 
	`XvFªeAd≠t‹Info
(
ai
);

1089 i‡(
xv_p‹t
 =-1 && 
yuv_p‹t
 == -1)

1091 
	`¥ötf
("RGB & YUVÇot found. Quitting.\n");

1092 
	`exô
(-1);

1094 i‡(
xv_p‹t
 =-1 && 
yuv_p‹t
 != -1)

1096 
u£_yuv
 = 1;

1097 
	`¥ötf
("RGBÇot found. Using YUV.\n");

1098 
xv_p‹t
 = 
yuv_p‹t
;

1099 
xv_id
 = 
yuv_id
;

1101 i‡(
xv_dïth
 && xv_dïth !
dïth
 && 
yuv_p‹t
 != -1)

1103 
u£_yuv
 = 1;

1104 
	`¥ötf
("Acceptable RGB modeÇot found. Using YUV.\n");

1105 
xv_p‹t
 = 
yuv_p‹t
;

1106 
xv_id
 = 
yuv_id
;

1109 
Atom
 
©om_vsync
 = 
	`xv_öã∫_©om_if_exi°s
(
di•œy
, "XV_SYNC_TO_VBLANK");

1110 i‡(
©om_vsync
 !
N⁄e
) {

1111 
	`XvGëP‹tAâribuã
(
di•œy
, 
xv_p‹t
, 
©om_vsync
, &
xv_vsync
);

1112 
	`XvSëP‹tAâribuã
(
di•œy
, 
xv_p‹t
, 
©om_vsync
, 0);

1115 
myvisuÆ
 = 0;

1117 if(
	`XM©chVisuÆInfo
(
di•œy
,
mys¸ìn
, 
dïth
, 
TrueCﬁ‹
, &
vi
))

1118 
myvisuÆ
 = &
vi
;

1120 i‡(!
myvisuÆ
)

1122 
	`Ârötf
(
°dîr
,"FailedÅo obtain visual!\n");

1123 
	`De°royDi•œy
();

1127 if(
myvisuÆ
->
ªd_mask
==0x00007c00 &&

1128 
myvisuÆ
->
gªí_mask
==0x000003e0 &&

1129 
myvisuÆ
->
blue_mask
==0x0000001f)

1130 {
iCﬁDïth
=15;}

1132 if(
myvisuÆ
->
ªd_mask
==0x0000f800 &&

1133 
myvisuÆ
->
gªí_mask
==0x000007e0 &&

1134 
myvisuÆ
->
blue_mask
==0x0000001f)

1135 {
iCﬁDïth
=16;}

1137 if(
myvisuÆ
->
ªd_mask
==0x00ff0000 &&

1138 
myvisuÆ
->
gªí_mask
==0x0000ff00 &&

1139 
myvisuÆ
->
blue_mask
==0x000000ff)

1140 {
iCﬁDïth
=32;}

1143 
iCﬁDïth
=0;

1153 if(
iWödowMode
Ë
curs‹
=
	`XCª©eF⁄tCurs‹
(
di•œy
,
XC_åek
);

1156 
Pixm≠
 
p1
,
p2
;

1157 
XImage
 * 
img
;

1158 
XCﬁ‹
 
b
,
w
;

1159 * 
id©a
;

1160 
XGCVÆues
 
GCv
;

1161 
GC
 
GCc
;

1163 
	`mem£t
(&
b
,0,(
XCﬁ‹
));

1164 
	`mem£t
(&
w
,0,(
XCﬁ‹
));

1165 
id©a
=(*)
	`mÆloc
(8);

1166 
	`mem£t
(
id©a
,0,8);

1168 
p1
=
	`XCª©ePixm≠
(
di•œy
,
	`RoŸWödow
(di•œy,
myvisuÆ
->
s¸ìn
),8,8,1);

1169 
p2
=
	`XCª©ePixm≠
(
di•œy
,
	`RoŸWödow
(di•œy,
myvisuÆ
->
s¸ìn
),8,8,1);

1171 
img
 = 
	`XCª©eImage
(
di•œy
,
myvisuÆ
->
visuÆ
,

1172 1,
XYBôm≠
,0,
id©a
,8,8,8,1);

1174 
GCv
.
fun˘i⁄
 = 
GXc›y
;

1175 
GCv
.
f‹eground
 = ~0;

1176 
GCv
.
background
 = 0;

1177 
GCv
.
∂™e_mask
 = 
AŒPœ√s
;

1178 
GCc
 = 
	`XCª©eGC
(
di•œy
,
p1
,

1179 (
GCFun˘i⁄
|
GCF‹eground
|
GCBackground
|
GCPœ√Mask
),&
GCv
);

1181 
	`XPutImage
(
di•œy
, 
p1
,
GCc
,
img
,0,0,0,0,8,8);

1182 
	`XPutImage
(
di•œy
, 
p2
,
GCc
,
img
,0,0,0,0,8,8);

1183 
	`XFªeGC
(
di•œy
, 
GCc
);

1185 
curs‹
 = 
	`XCª©ePixm≠Curs‹
(
di•œy
,
p1
,
p2
,&
b
,&
w
,0,0);

1187 
	`XFªePixm≠
(
di•œy
,
p1
);

1188 
	`XFªePixm≠
(
di•œy
,
p2
);

1189 
	`XDe°royImage
(
img
);

1192 
cﬁ‹m≠
=
	`XCª©eCﬁ‹m≠
(
di•œy
,
roŸ_wödow_id
,

1193 
myvisuÆ
->
visuÆ
,
AŒocN⁄e
);

1195 
wö©å
.
background_pixñ
=0;

1196 
wö©å
.
b‹dî_pixñ
=
	`WhôePixñOfS¸ìn
(
s¸ìn
);

1197 
wö©å
.
bô_gøvôy
=
F‹gëGøvôy
;

1198 
wö©å
.
wö_gøvôy
=
N‹thWe°Gøvôy
;

1199 
wö©å
.
backög_°‹e
=
NŸU£ful
;

1201 
wö©å
.
ovîride_ªdúe˘
=
FÆ£
;

1202 
wö©å
.
ßve_undî
=
FÆ£
;

1203 
wö©å
.
evít_mask
=0;

1204 
wö©å
.
do_nŸ_¥›ag©e_mask
=0;

1205 
wö©å
.
cﬁ‹m≠
=colormap;

1206 
wö©å
.
curs‹
=
N⁄e
;

1208 
wödow
=
	`XCª©eWödow
(
di•œy
,
roŸ_wödow_id
,

1209 0,0,
iResX
,
iResY
,

1210 0,
myvisuÆ
->
dïth
,

1211 
I≈utOuçut
,
myvisuÆ
->
visuÆ
,

1212 
CWB‹dîPixñ
 | 
CWBackPixñ
 |

1213 
CWEvítMask
 | 
CWD⁄tPr›ag©e
 |

1214 
CWCﬁ‹m≠
 | 
CWCurs‹
,

1215 &
wö©å
);

1217 if(!
wödow
)

1219 
	`Ârötf
(
°dîr
,"Failed in XCreateWindow()!!!\n");

1220 
	`De°royDi•œy
();

1224 
dñwödow
 = 
	`XI¡înAtom
(
di•œy
,"WM_DELETE_WINDOW",0);

1225 
	`XSëWMPrŸocﬁs
(
di•œy
, 
wödow
, &
dñwödow
, 1);

1227 
höts
.
Êags
=
USPosôi⁄
|
USSize
;

1228 
höts
.
ba£_width
 = 
iResX
;

1229 
höts
.
ba£_height
 = 
iResY
;

1231 
wm_höts
.
öput
=1;

1232 
wm_höts
.
Êags
=
I≈utHöt
;

1234 
	`XSëWMHöts
(
di•œy
,
wödow
,&
wm_höts
);

1235 
	`XSëWMN‹mÆHöts
(
di•œy
,
wödow
,&
höts
);

1236 if(
pC≠ti⁄Text
)

1237 
	`XSt‹eName
(
di•œy
,
wödow
,
pC≠ti⁄Text
);

1238 
	`XSt‹eName
(
di•œy
,
wödow
,"P.E.Op.S SoftX PSX Gpu");

1240 
	`XDeföeCurs‹
(
di•œy
,
wödow
,
curs‹
);

1243 i‡(
fx
)

1245 
mwmhöts
.
Êags
=
MWM_HINTS_DECORATIONS
;

1246 
mwmhöts
.
dec‹©i⁄s
=0;

1247 
mwm©om
=
	`XI¡înAtom
(
di•œy
,"_MOTIF_WM_HINTS",0);

1248 
	`XCh™gePr›îty
(
di•œy
,
wödow
,
mwm©om
,mwmatom,32,

1249 
Pr›ModeRïœ˚
,(*)&
mwmhöts
,4);

1253 
	`XSñe˘I≈ut
(
di•œy
,

1254 
wödow
,

1255 
FocusCh™geMask
 | 
ExposuªMask
 |

1256 
KeyPªssMask
 | 
KeyRñó£Mask


1259 
	`XM≠Rai£d
(
di•œy
,
wödow
);

1260 
	`XCÀ¨Wödow
(
di•œy
,
wödow
);

1261 
	`XWödowEvít
(
di•œy
,
wödow
,
ExposuªMask
,&
evít
);

1263 i‡(
fx
)

1265 
	`XResizeWödow
(
di•œy
,
wödow
,
s¸ìn
->
width
,s¸ìn->
height
);

1267 
höts
.
mö_width
 = höts.
max_width
 = höts.
ba£_width
 = 
s¸ìn
->
width
;

1268 
höts
.
mö_height
höts.
max_height
 = höts.
ba£_height
 = 
s¸ìn
->
height
;

1270 
	`XSëWMN‹mÆHöts
(
di•œy
,
wödow
,&
höts
);

1274 
XEvít
 
xev
;

1276 
	`mem£t
(&
xev
, 0, (xev));

1277 
xev
.
x˛õ¡
.
ty≥
 = 
Clõ¡Mesßge
;

1278 
xev
.
x˛õ¡
.
£rül
 = 0;

1279 
xev
.
x˛õ¡
.
£nd_evít
 = 1;

1280 
xev
.
x˛õ¡
.
mesßge_ty≥
 = 
	`XI¡înAtom
(
di•œy
, "_NET_WM_STATE", 0);

1281 
xev
.
x˛õ¡
.
wödow
 = window;

1282 
xev
.
x˛õ¡
.
f‹m©
 = 32;

1283 
xev
.
x˛õ¡
.
d©a
.
l
[0] = 1;

1284 
xev
.
x˛õ¡
.
d©a
.
l
[1] = 
	`XI¡înAtom
(
di•œy
, "_NET_WM_STATE_FULLSCREEN", 0);

1285 
xev
.
x˛õ¡
.
d©a
.
l
[2] = 0;

1286 
xev
.
x˛õ¡
.
d©a
.
l
[3] = 0;

1287 
xev
.
x˛õ¡
.
d©a
.
l
[4] = 0;

1289 
	`XSídEvít
(
di•œy
, 
roŸ_wödow_id
, 0,

1290 
Sub°ru˘uªRedúe˘Mask
 | 
Sub°ru˘uªNŸifyMask
, &
xev
);

1294 
gcv
.
gøphics_exposuªs
 = 
FÆ£
;

1295 
hGC
 = 
	`XCª©eGC
(
di•œy
,
wödow
,

1296 
GCGøphicsExposuªs
, &
gcv
);

1297 if(!
hGC
)

1299 
	`Ârötf
(
°dîr
,"No gfx context!!!\n");

1300 
	`De°royDi•œy
();

1305 
Xpixñs
 = (*)
	`mÆloc
(220*15*4);

1306 
	`mem£t
(
Xpixñs
,255,220*15*4);

1307 
XFimage
 = 
	`XCª©eImage
(
di•œy
,
myvisuÆ
->
visuÆ
,

1308 
dïth
, 
ZPixm≠
, 0,

1309 (*)
Xpixñs
,

1311 
dïth
>16 ? 32 : 16,

1314 
Xpixñs
 = (*)
	`mÆloc
(8*8*4);

1315 
	`mem£t
(
Xpixñs
,0,8*8*4);

1316 
XCimage
 = 
	`XvCª©eImage
(
di•œy
,
xv_p‹t
,
xv_id
,

1317 (*)
Xpixñs
, 8, 8);

1327 
shmöfo
.
shmid
 = 
	`shmgë
(
IPC_PRIVATE
, 640*512*4*3*3, 
IPC_CREAT
 | 0777);

1328 
shmöfo
.
shmaddr
 = 
	`shm©
(shmöfo.
shmid
, 0, 0);

1329 
shmöfo
.
ªadO∆y
 = 0;

1331 i‡(!
	`XShmAâach
(
di•œy
, &
shmöfo
)) {

1332 
	`¥ötf
("XShmAttach failed !\n");

1333 
	`exô
 (-1);

1335 
	}
}

1337 (*
p2XSaIFunc
Ë(*, 
DWORD
, *, , );

1338 *
pBackBuf„r
 = 0;

1340 
	$BlôS¸ìn32
(*
surf
, 
öt32_t
 
x
, i¡32_à
y
)

1342 *
pD
;

1343 
°¨txy
;

1344 
uöt32_t
 
lu
;

1345 
s
;

1346 
row
, 
cﬁumn
;

1347 
dx
 = 
PªviousPSXDi•œy
.
R™ge
.
x1
;

1348 
dy
 = 
PªviousPSXDi•œy
.
Di•œyMode
.
y
;

1350 
öt32_t
 
lPôch
 = 
PSXDi•œy
.
Di•œyMode
.
x
 << 2;

1352 
uöt32_t
 *
de°pix
;

1354 i‡(
PªviousPSXDi•œy
.
R™ge
.
y0
)

1356 
	`mem£t
(
surf
, 0, (
PªviousPSXDi•œy
.
R™ge
.
y0
 >> 1Ë* 
lPôch
);

1358 
dy
 -
PªviousPSXDi•œy
.
R™ge
.
y0
;

1359 
surf
 +(
PªviousPSXDi•œy
.
R™ge
.
y0
 >> 1Ë* 
lPôch
;

1361 
	`mem£t
(
surf
 + 
dy
 * 
lPôch
,

1362 0, ((
PªviousPSXDi•œy
.
R™ge
.
y0
 + 1Ë>> 1Ë* 
lPôch
);

1365 i‡(
PªviousPSXDi•œy
.
R™ge
.
x0
)

1367 
cﬁumn
 = 0; cﬁum¿< 
dy
; column++)

1369 
de°pix
 = (
uöt32_t
 *)(
surf
 + (
cﬁumn
 * 
lPôch
));

1370 
	`mem£t
(
de°pix
, 0, 
PªviousPSXDi•œy
.
R™ge
.
x0
 << 2);

1372 
surf
 +
PªviousPSXDi•œy
.
R™ge
.
x0
 << 2;

1375 i‡(
PSXDi•œy
.
RGB24
)

1377 
cﬁumn
 = 0; cﬁum¿< 
dy
; column++)

1379 
°¨txy
 = ((1024Ë* (
cﬁumn
 + 
y
)Ë+ 
x
;

1380 
pD
 = (*)&
psxVuw
[
°¨txy
];

1381 
de°pix
 = (
uöt32_t
 *)(
surf
 + (
cﬁumn
 * 
lPôch
));

1382 
row
 = 0;Ñow < 
dx
;Ñow++)

1384 
lu
 = *((
uöt32_t
 *)
pD
);

1385 
de°pix
[
row
] =

1386 0xff000000 | (
	`RED
(
lu
Ë<< 16Ë| (
	`GREEN
÷uË<< 8Ë| (
	`BLUE
(lu));

1387 
pD
 += 3;

1393 
cﬁumn
 = 0;cﬁumn<
dy
;column++)

1395 
°¨txy
 = (1024 * (
cﬁumn
 + 
y
)Ë+ 
x
;

1396 
de°pix
 = (
uöt32_t
 *)(
surf
 + (
cﬁumn
 * 
lPôch
));

1397 
row
 = 0;Ñow < 
dx
;Ñow++)

1399 
s
 = 
	`GETLE16
(&
psxVuw
[
°¨txy
++]);

1400 
de°pix
[
row
] =

1401 (((
s
 << 19) & 0xf80000) | ((s << 6) & 0xf800) | ((s >> 7) & 0xf8)) | 0xff000000;

1405 
	}
}

1407 
	$BlôToYUV
(* 
surf
,
öt32_t
 
x
,öt32_à
y
)

1409 * 
pD
;

1410 
°¨txy
;

1411 
uöt32_t
 
lu
;
s
;

1412 
row
,
cﬁumn
;

1413 
dx
 = 
PªviousPSXDi•œy
.
R™ge
.
x1
;

1414 
dy
 = 
PªviousPSXDi•œy
.
Di•œyMode
.
y
;

1415 
Y
,
U
,
V
, 
R
,
G
,
B
;

1417 
öt32_t
 
lPôch
 = 
PSXDi•œy
.
Di•œyMode
.
x
 << 2;

1418 
uöt32_t
 *
de°pix
;

1420 i‡(
PªviousPSXDi•œy
.
R™ge
.
y0
)

1422 
cﬁumn
 = 0; cﬁum¿< (
PªviousPSXDi•œy
.
R™ge
.
y0
 >> 1); column++)

1424 
de°pix
 = (
uöt32_t
 *)(
surf
 + 
cﬁumn
 * 
lPôch
);

1425 
row
 = 0;Ñow < 
dx
;Ñow++)

1427 
de°pix
[
row
] = (4 << 24) | (128 << 16) | (4 << 8) | 128;

1431 
dy
 -
PªviousPSXDi•œy
.
R™ge
.
y0
;

1432 
surf
 +(
PªviousPSXDi•œy
.
R™ge
.
y0
 >> 1Ë* 
lPôch
;

1434 
cﬁumn
 = 0; cﬁum¿< (
PªviousPSXDi•œy
.
R™ge
.
y0
 + 1) >> 1; column++)

1436 
de°pix
 = (
uöt32_t
 *)(
surf
 + (
dy
 + 
cﬁumn
Ë* 
lPôch
);

1437 
row
 = 0;Ñow < 
dx
;Ñow++)

1439 
de°pix
[
row
] = (4 << 24) | (128 << 16) | (4 << 8) | 128;

1444 i‡(
PªviousPSXDi•œy
.
R™ge
.
x0
)

1446 
cﬁumn
 = 0; cﬁum¿< 
dy
; column++)

1448 
de°pix
 = (
uöt32_t
 *)(
surf
 + (
cﬁumn
 * 
lPôch
));

1449 
row
 = 0;Ñow < 
PªviousPSXDi•œy
.
R™ge
.
x0
;Ñow++)

1451 
de°pix
[
row
] = (4 << 24) | (128 << 16) | (4 << 8) | 128;

1454 
surf
 +
PªviousPSXDi•œy
.
R™ge
.
x0
 << 2;

1457 i‡(
PSXDi•œy
.
RGB24
)

1459 
cﬁumn
 = 0; cﬁum¿< 
dy
; column++)

1461 
°¨txy
 = (1024 * (
cﬁumn
 + 
y
)Ë+ 
x
;

1462 
pD
 = (*)&
psxVuw
[
°¨txy
];

1463 
de°pix
 = (
uöt32_t
 *)(
surf
 + (
cﬁumn
 * 
lPôch
));

1464 
row
 = 0;Ñow < 
dx
;Ñow++)

1466 
lu
 = *((
uöt32_t
 *)
pD
);

1468 
R
 = 
	`RED
(
lu
);

1469 
G
 = 
	`GREEN
(
lu
);

1470 
B
 = 
	`BLUE
(
lu
);

1472 
Y
 = 
	`mö
(
	`abs
(
R
 * 2104 + 
G
 * 4130 + 
B
 * 802 + 4096 + 131072) >> 13, 235);

1473 
U
 = 
	`mö
(
	`abs
(
R
 * -1214 + 
G
 * -2384 + 
B
 * 3598 + 4096 + 1048576) >> 13, 240);

1474 
V
 = 
	`mö
(
	`abs
(
R
 * 3598 + 
G
 * -3013 + 
B
 * -585 + 4096 + 1048576) >> 13, 240);

1476 #ifde‡
__BIG_ENDIAN__


1477 
de°pix
[
row
] = 
Y
 << 24 | 
U
 << 16 | Y << 8 | 
V
;

1479 
de°pix
[
row
] = 
Y
 << 24 | 
V
 << 16 | Y << 8 | 
U
;

1481 
pD
 += 3;

1487 
cﬁumn
 = 0; cﬁum¿< 
dy
; column++)

1489 
°¨txy
 = (1024 * (
cﬁumn
 + 
y
)Ë+ 
x
;

1490 
de°pix
 = (
uöt32_t
 *)(
surf
 + (
cﬁumn
 * 
lPôch
));

1491 
row
 = 0;Ñow < 
dx
;Ñow++)

1493 
s
 = 
	`GETLE16
(&
psxVuw
[
°¨txy
++]);

1495 
R
 = (
s
 << 3) &0xf8;

1496 
G
 = (
s
 >> 2) &0xf8;

1497 
B
 = (
s
 >> 7) &0xf8;

1499 
Y
 = 
	`mö
(
	`abs
(
R
 * 2104 + 
G
 * 4130 + 
B
 * 802 + 4096 + 131072) >> 13, 235);

1500 
U
 = 
	`mö
(
	`abs
(
R
 * -1214 + 
G
 * -2384 + 
B
 * 3598 + 4096 + 1048576) >> 13, 240);

1501 
V
 = 
	`mö
(
	`abs
(
R
 * 3598 + 
G
 * -3013 + 
B
 * -585 + 4096 + 1048576) >> 13, 240);

1503 #ifde‡
__BIG_ENDIAN__


1504 
de°pix
[
row
] = 
Y
 << 24 | 
U
 << 16 | Y << 8 | 
V
;

1506 
de°pix
[
row
] = 
Y
 << 24 | 
V
 << 16 | Y << 8 | 
U
;

1511 
	}
}

1514 
	$RGB2YUV
(
uöt32_t
 *
s
, 
width
, 
height
, uöt32_à*
d
)

1516 
x
,
y
;

1517 
R
,
G
,
B
, 
Y1
,
Y2
,
U
,
V
;

1519 
y
=0; y<
height
; y++) {

1520 
x
=0; x<
width
>>1; x++) {

1521 
R
 = (*
s
 >> 16) & 0xff;

1522 
G
 = (*
s
 >> 8) & 0xff;

1523 
B
 = *
s
 & 0xff;

1524 
s
++;

1526 
Y1
 = 
	`mö
(
	`abs
(
R
 * 2104 + 
G
 * 4130 + 
B
 * 802 + 4096 + 131072) >> 13, 235);

1527 
U
 = 
	`mö
(
	`abs
(
R
 * -1214 + 
G
 * -2384 + 
B
 * 3598 + 4096 + 1048576) >> 13, 240);

1528 
V
 = 
	`mö
(
	`abs
(
R
 * 3598 + 
G
 * -3013 + 
B
 * -585 + 4096 + 1048576) >> 13, 240);

1530 
R
 = (*
s
 >> 16) & 0xff;

1531 
G
 = (*
s
 >> 8) & 0xff;

1532 
B
 = *
s
 & 0xff;

1533 
s
++;

1535 
Y2
 = 
	`mö
(
	`abs
(
R
 * 2104 + 
G
 * 4130 + 
B
 * 802 + 4096 + 131072) >> 13, 235);

1537 #ifde‡
__BIG_ENDIAN__


1538 *
d
 = 
V
 | 
Y2
 << 8 | 
U
 << 16 | 
Y1
 << 24;

1540 *
d
 = 
U
 | 
Y1
 << 8 | 
V
 << 16 | 
Y2
 << 24;

1542 
d
++;

1545 
	}
}

1547 
time_t
 
	gtSèπ
;

1550 
ölöe
 
	$MaöèöA•e˘
(*
dx
,*
dy
,*
dw
,*
dh
)

1553 
t
;

1555 i‡(*
dw
 * 3 > *
dh
 * 4) {

1556 
t
 = *
dh
 * 4.0f / 3;

1557 *
dx
 = (*
dw
 - 
t
) / 2;

1558 *
dw
 = 
t
;

1560 
t
 = *
dw
 * 3.0f / 4;

1561 *
dy
 = (*
dh
 - 
t
) / 2;

1562 *
dh
 = 
t
;

1564 
	}
}

1566 
	$DoBuf„rSw≠
()

1568 
S¸ìn
 *
s¸ìn
;

1569 
Wödow
 
_dw
;

1570 
XvImage
 *
xvi
;

1571 
d°x
, 
d°y
, 
§cy
 = 0;

1572 
_d
, 
_w
, 
_h
;

1574 
föÆw
 = 
PSXDi•œy
.
Di•œyMode
.
x
;

1575 
föÆh
 = 
PSXDi•œy
.
Di•œyMode
.
y
;

1577 i‡(
föÆw
 =0 || 
föÆh
 == 0)

1580 
	`XSync
(
di•œy
,
FÆ£
);

1582 if(
u£_yuv
) {

1583 i‡(
iU£NoSåëchB…
==0 || 
föÆw
 > 320 || 
föÆh
 > 256) {

1584 
	`BlôToYUV
((*)
shmöfo
.
shmaddr
, 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
, PSXDi•œy.Di•œyPosôi⁄.
y
);

1585 
föÆw
 <<= 1;

1587 
	`BlôS¸ìn32
((*)
pBackBuf„r
, 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
, PSXDi•œy.Di•œyPosôi⁄.
y
);

1588 
	`p2XSaIFunc
(
pBackBuf„r
, 
föÆw
<<2, (*)
pSaIBigBuff
,föÆw,
föÆh
);

1589 
	`RGB2YUV
–(
uöt32_t
*)
pSaIBigBuff
, 
föÆw
, 
föÆh
, (uöt32_t*)
shmöfo
.
shmaddr
);

1591 } if(
iU£NoSåëchB…
==0 || 
föÆw
 > 320 || 
föÆh
 > 256) {

1592 
	`BlôS¸ìn32
((*)
shmöfo
.
shmaddr
, 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
, PSXDi•œy.Di•œyPosôi⁄.
y
);

1594 
	`BlôS¸ìn32
((*)
pBackBuf„r
, 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
, PSXDi•œy.Di•œyPosôi⁄.
y
);

1595 
	`p2XSaIFunc
(
pBackBuf„r
, 
föÆw
<<2, (*)
shmöfo
.
shmaddr
,föÆw,
föÆh
);

1598 
	`XGëGeomëry
(
di•œy
, 
wödow
, &
_dw
, (*)&
_d
, (*)&_d, &
_w
, &
_h
, &_d, &_d);

1599 i‡(
u£_yuv
) {

1600 
xvi
 = 
	`XvShmCª©eImage
(
di•œy
, 
yuv_p‹t
, 
yuv_id
, 0, 
föÆw
, 
föÆh
, &
shmöfo
);

1602 
xvi
 = 
	`XvShmCª©eImage
(
di•œy
, 
xv_p‹t
, 
xv_id
, 0, 
föÆw
, 
föÆh
, &
shmöfo
);

1604 
xvi
->
d©a
 = 
shmöfo
.
shmaddr
;

1606 
s¸ìn
=
	`DeÁu…S¸ìnOfDi•œy
(
di•œy
);

1609 i‡(!
iWödowMode
) {

1610 
_w
 = 
s¸ìn
->
width
;

1611 
_h
 = 
s¸ìn
->
height
;

1614 
d°x
 = 0;

1615 
d°y
 = 0;

1617 i‡(
iMaöèöA•e˘
)

1618 
	`MaöèöA•e˘
(&
d°x
, &
d°y
, &
_w
, &
_h
);

1620 i‡(
ulKeybôs
&
KEY_SHOWFPS
)

1622 
§cy
 = 15 * 
föÆh
 / 
_h
;

1623 
d°y
 += 15;

1626 
	`XvShmPutImage
(
di•œy
, 
xv_p‹t
, 
wödow
, 
hGC
, 
xvi
,

1627 0,
§cy
,

1628 
föÆw
,
föÆh
,

1629 
d°x
,
d°y
,

1630 
_w
,
_h
,

1634 if(
ulKeybôs
&
KEY_SHOWFPS
)

1636 if(
szDebugText
[0] && ((
	`time
(
NULL
Ë- 
tSèπ
) < 2))

1638 
	`°r˝y
(
szDi•Buf
,
szDebugText
);

1642 
szDebugText
[0]=0;

1643 
	`°rˇt
(
szDi•Buf
,
szMíuBuf
);

1648 
	`XFªe
(
xvi
);

1649 
xvi
 = 
	`XvCª©eImage
(
di•œy
, 
xv_p‹t
, 
xv_id
, 
XFimage
->
d©a
, 220, 15);

1650 
	`XvPutImage
(
di•œy
, 
xv_p‹t
, 
wödow
, 
hGC
, 
xvi
,

1657 
	`XDøwSåög
(
di•œy
,
wödow
,
hGC
,2,13,
szDi•Buf
,
	`°æí
(szDispBuf));

1663 
	`XFªe
(
xvi
);

1664 
	}
}

1666 
	$DoCÀ¨S¸ìnBuf„r
()

1668 
Wödow
 
_dw
;

1669 
_d
, 
_w
, 
_h
;

1671 
	`XGëGeomëry
(
di•œy
, 
wödow
, &
_dw
, (*)&
_d
, (*)&_d, &
_w
, &
_h
, &_d, &_d);

1673 
	`XvPutImage
(
di•œy
, 
xv_p‹t
, 
wödow
, 
hGC
, 
XCimage
,

1674 0, 0, 8, 8, 0, 0, 
_w
, 
_h
);

1676 
	}
}

1678 
	$DoCÀ¨Fr⁄tBuf„r
()

1683 
	}
}

1685 
	$Xöôülize
()

1687 
iDeskt›Cﬁ
=32;

1690 if(
iU£NoSåëchB…
>0)

1692 
pBackBuf„r
=(*)
	`mÆloc
(640*512*(
uöt32_t
));

1693 
	`mem£t
(
pBackBuf„r
,0,640*512*(
uöt32_t
));

1694 i‡(
u£_yuv
) {

1695 
pSaIBigBuff
=
	`mÆloc
(640*512*4*3*3);

1696 
	`mem£t
(
pSaIBigBuff
,0,640*512*4*3*3);

1700 
p2XSaIFunc
=
NULL
;

1703 if(
iU£NoSåëchB…
==1)

1705 
p2XSaIFunc
=
Std2xSaI_ex8
;

1708 if(
iU£NoSåëchB…
==2)

1710 
p2XSaIFunc
=
Su≥r2xSaI_ex8
;

1713 if(
iU£NoSåëchB…
==3)

1715 
p2XSaIFunc
=
Su≥rEagÀ_ex8
;

1718 if(
iU£NoSåëchB…
==4)

1720 
p2XSaIFunc
=
SˇÀ2x_ex8
;

1722 if(
iU£NoSåëchB…
==5)

1724 
p2XSaIFunc
=
SˇÀ3x_ex8
;

1726 if(
iU£NoSåëchB…
==6)

1728 
p2XSaIFunc
=
hq2x_32
;

1730 if(
iU£NoSåëchB…
==7)

1732 
p2XSaIFunc
=
hq3x_32
;

1736 
bUsögTWö
=
FALSE
;

1738 
	`InôMíu
();

1740 
bIsFú°Føme
 = 
FALSE
;

1742 if(
iShowFPS
)

1744 
iShowFPS
=0;

1745 
ulKeybôs
|=
KEY_SHOWFPS
;

1746 
szDi•Buf
[0]=0;

1751 
	}
}

1753 
	$X˛ónup
()

1755 
	`Clo£Míu
();

1757 if(
iU£NoSåëchB…
>0)

1759 if(
pBackBuf„r
Ë
	`‰ì
(pBackBuffer);

1760 
pBackBuf„r
=0;

1761 if(
pSaIBigBuff
Ë
	`‰ì
(pSaIBigBuff);

1762 
pSaIBigBuff
=0;

1764 
	}
}

1766 
	$ulInôDi•œy
()

1768 
	`Cª©eDi•œy
();

1769 
	`Xöôülize
();

1770  ()
di•œy
;

1771 
	}
}

1773 
	$Clo£Di•œy
()

1775 
	`X˛ónup
();

1776 
	`De°royDi•œy
();

1777 
	}
}

1779 
	$Cª©ePic
(* 
pMem
)

1781 * 
p
=(*)
	`mÆloc
(128*96*4);

1782 * 
ps
; 
x
,
y
;

1784 
ps
=
p
;

1786 if(
iDeskt›Cﬁ
==16)

1788 
s
;

1789 
y
=0;y<96;y++)

1791 
x
=0;x<128;x++)

1793 
s
=(*(
pMem
+0))>>3;

1794 
s
|=((*(
pMem
+1))&0xfc)<<3;

1795 
s
|=((*(
pMem
+2))&0xf8)<<8;

1796 
pMem
+=3;

1797 *((*)(
ps
+
y
*256+
x
*2))=
s
;

1802 if(
iDeskt›Cﬁ
==15)

1804 
s
;

1805 
y
=0;y<96;y++)

1807 
x
=0;x<128;x++)

1809 
s
=(*(
pMem
+0))>>3;

1810 
s
|=((*(
pMem
+1))&0xfc)<<2;

1811 
s
|=((*(
pMem
+2))&0xf8)<<7;

1812 
pMem
+=3;

1813 *((*)(
ps
+
y
*256+
x
*2))=
s
;

1818 if(
iDeskt›Cﬁ
==32)

1820 
uöt32_t
 
l
;

1821 
y
=0;y<96;y++)

1823 
x
=0;x<128;x++)

1825 
l
*(
pMem
+0);

1826 
l
|=(*(
pMem
+1))<<8;

1827 
l
|=(*(
pMem
+2))<<16;

1828 
pMem
+=3;

1829 *((
uöt32_t
 *)(
ps
+
y
*512+
x
*4))=
l
;

1834 
XPimage
 = 
	`XCª©eImage
(
di•œy
,
myvisuÆ
->
visuÆ
,

1835 
dïth
, 
ZPixm≠
, 0,

1836 (*)
p
,

1838 
dïth
>16 ? 32 : 16,

1840 
	}
}

1842 
	$De°royPic
()

1844 if(
XPimage
)

1848 
	`XDe°royImage
(
XPimage
);

1849 
XPimage
=0;

1851 
	}
}

1853 
	$Di•œyPic
()

1855 
	`XPutImage
(
di•œy
,
wödow
,
hGC
, 
XPimage
,

1856 0, 0, 
iResX
-128, 0,128,96);

1857 
	}
}

1859 
	$ShowGpuPic
()

1861 
	}
}

1863 
	$ShowTextGpuPic
()

1865 
	}
}

1868 
	$hq2x_32_def
(
uöt32_t
 * 
d°0
, uöt32_à* 
d°1
, c⁄° uöt32_à* 
§c0
, c⁄° uöt32_à* 
§c1
, c⁄° uöt32_à* 
§c2
, 
cou¡
)

1870 
ˇche_vît_mask
[640];

1871 
ˇche_h‹iz_mask
 = 0;

1873 
i
;

1874 
mask
;

1875 
uöt32_t
 
c
[9];

1877 i‡(
§c0
 =
§c1
)

1878 
	`mem£t
(
ˇche_vît_mask
, 0, 
cou¡
);

1880 
i
=0;i<
cou¡
;++i) {

1881 
c
[1] = 
§c0
[0];

1882 
c
[4] = 
§c1
[0];

1883 
c
[7] = 
§c2
[0];

1885 i‡(
i
>0) {

1886 
c
[0] = 
§c0
[-1];

1887 
c
[3] = 
§c1
[-1];

1888 
c
[6] = 
§c2
[-1];

1890 
c
[0] = c[1];

1891 
c
[3] = c[4];

1892 
c
[6] = c[7];

1895 i‡(
i
<
cou¡
-1) {

1896 
c
[2] = 
§c0
[1];

1897 
c
[5] = 
§c1
[1];

1898 
c
[8] = 
§c2
[1];

1900 
c
[2] = c[1];

1901 
c
[5] = c[4];

1902 
c
[8] = c[7];

1905 
mask
 = 0;

1907 
mask
 |
	`öãΩ_32_diff
(
c
[0], c[4]) << 0;

1908 
mask
 |
ˇche_vît_mask
[
i
];

1909 
mask
 |
	`öãΩ_32_diff
(
c
[2], c[4]) << 2;

1910 
mask
 |
ˇche_h‹iz_mask
;

1911 
ˇche_h‹iz_mask
 = 
	`öãΩ_32_diff
(
c
[5], c[4]) << 3;

1912 
mask
 |
ˇche_h‹iz_mask
 << 1;

1913 
mask
 |
	`öãΩ_32_diff
(
c
[6], c[4]) << 5;

1914 
ˇche_vît_mask
[
i
] = 
	`öãΩ_32_diff
(
c
[7], c[4]) << 1;

1915 
mask
 |
ˇche_vît_mask
[
i
] << 5;

1916 
mask
 |
	`öãΩ_32_diff
(
c
[8], c[4]) << 7;

1919 
mask
) {

1920 
	~"hq2x.h
"

1924 
§c0
 += 1;

1925 
§c1
 += 1;

1926 
§c2
 += 1;

1927 
d°0
 += 2;

1928 
d°1
 += 2;

1930 
	}
}

1932 
	$hq2x_32
–* 
§cPå
, 
DWORD
 
§cPôch
, * 
d°På
, 
width
, 
height
)

1934 c⁄° 
d°Pôch
 = 
§cPôch
<<1;

1936 
cou¡
 = 
height
;

1938 
föÆw
=
width
*2;

1939 
föÆh
=
height
*2;

1941 
uöt32_t
 *
d°0
 = (uöt32_à*)
d°På
;

1942 
uöt32_t
 *
d°1
 = 
d°0
 + (
d°Pôch
 >> 2);

1944 
uöt32_t
 *
§c0
 = (uöt32_à*)
§cPå
;

1945 
uöt32_t
 *
§c1
 = 
§c0
 + (
§cPôch
 >> 2);

1946 
uöt32_t
 *
§c2
 = 
§c1
 + (
§cPôch
 >> 2);

1947 
	`hq2x_32_def
(
d°0
, 
d°1
, 
§c0
, src0, 
§c1
, 
width
);

1950 
cou¡
 -= 2;

1951 
cou¡
) {

1952 
d°0
 +
d°Pôch
 >> 1;

1953 
d°1
 +
d°Pôch
 >> 1;

1954 
	`hq2x_32_def
(
d°0
, 
d°1
, 
§c0
, 
§c1
, 
§c2
, 
width
);

1955 
§c0
 = 
§c1
;

1956 
§c1
 = 
§c2
;

1957 
§c2
 +
§cPôch
 >> 2;

1958 --
cou¡
;

1960 
d°0
 +
d°Pôch
 >> 1;

1961 
d°1
 +
d°Pôch
 >> 1;

1962 
	`hq2x_32_def
(
d°0
, 
d°1
, 
§c0
, 
§c1
, src1, 
width
);

1963 
	}
}

1965 
	$hq3x_32_def
(
uöt32_t
* 
d°0
, uöt32_t* 
d°1
, uöt32_t* 
d°2
, c⁄° uöt32_t* 
§c0
, c⁄° uöt32_t* 
§c1
, c⁄° uöt32_t* 
§c2
, 
cou¡
)

1967 
ˇche_vît_mask
[640];

1968 
ˇche_h‹iz_mask
 = 0;

1970 
i
;

1971 
mask
;

1972 
uöt32_t
 
c
[9];

1974 i‡(
§c0
 =
§c1
)

1975 
	`mem£t
(
ˇche_vît_mask
, 0, 
cou¡
);

1977 
i
=0;i<
cou¡
;++i) {

1978 
c
[1] = 
§c0
[0];

1979 
c
[4] = 
§c1
[0];

1980 
c
[7] = 
§c2
[0];

1982 i‡(
i
>0) {

1983 
c
[0] = 
§c0
[-1];

1984 
c
[3] = 
§c1
[-1];

1985 
c
[6] = 
§c2
[-1];

1987 
c
[0] = c[1];

1988 
c
[3] = c[4];

1989 
c
[6] = c[7];

1992 i‡(
i
<
cou¡
-1) {

1993 
c
[2] = 
§c0
[1];

1994 
c
[5] = 
§c1
[1];

1995 
c
[8] = 
§c2
[1];

1997 
c
[2] = c[1];

1998 
c
[5] = c[4];

1999 
c
[8] = c[7];

2002 
mask
 = 0;

2004 
mask
 |
	`öãΩ_32_diff
(
c
[0], c[4]) << 0;

2005 
mask
 |
ˇche_vît_mask
[
i
];

2006 
mask
 |
	`öãΩ_32_diff
(
c
[2], c[4]) << 2;

2007 
mask
 |
ˇche_h‹iz_mask
;

2008 
ˇche_h‹iz_mask
 = 
	`öãΩ_32_diff
(
c
[5], c[4]) << 3;

2009 
mask
 |
ˇche_h‹iz_mask
 << 1;

2010 
mask
 |
	`öãΩ_32_diff
(
c
[6], c[4]) << 5;

2011 
ˇche_vît_mask
[
i
] = 
	`öãΩ_32_diff
(
c
[7], c[4]) << 1;

2012 
mask
 |
ˇche_vît_mask
[
i
] << 5;

2013 
mask
 |
	`öãΩ_32_diff
(
c
[8], c[4]) << 7;

2015 
mask
) {

2016 
	~"hq3x.h
"

2019 
§c0
 += 1;

2020 
§c1
 += 1;

2021 
§c2
 += 1;

2022 
d°0
 += 3;

2023 
d°1
 += 3;

2024 
d°2
 += 3;

2026 
	}
}

2028 
	$hq3x_32
–* 
§cPå
, 
DWORD
 
§cPôch
, * 
d°På
, 
width
, 
height
)

2030 
cou¡
 = 
height
;

2032 
d°Pôch
 = 
§cPôch
*3;

2033 
d°RowPixñs
 = 
d°Pôch
>>2;

2035 
föÆw
=
width
*3;

2036 
föÆh
=
height
*3;

2038 
uöt32_t
 *
d°0
 = (uöt32_à*)
d°På
;

2039 
uöt32_t
 *
d°1
 = 
d°0
 + 
d°RowPixñs
;

2040 
uöt32_t
 *
d°2
 = 
d°1
 + 
d°RowPixñs
;

2042 
uöt32_t
 *
§c0
 = (uöt32_à*)
§cPå
;

2043 
uöt32_t
 *
§c1
 = 
§c0
 + (
§cPôch
 >> 2);

2044 
uöt32_t
 *
§c2
 = 
§c1
 + (
§cPôch
 >> 2);

2045 
	`hq3x_32_def
(
d°0
, 
d°1
, 
d°2
, 
§c0
, src0, 
§c2
, 
width
);

2047 
cou¡
 -= 2;

2048 
cou¡
) {

2049 
d°0
 +
d°RowPixñs
 * 3;

2050 
d°1
 +
d°RowPixñs
 * 3;

2051 
d°2
 +
d°RowPixñs
 * 3;

2053 
	`hq3x_32_def
(
d°0
, 
d°1
, 
d°2
, 
§c0
, 
§c1
, 
§c2
, 
width
);

2054 
§c0
 = 
§c1
;

2055 
§c1
 = 
§c2
;

2056 
§c2
 +
§cPôch
 >> 2;

2057 --
cou¡
;

2059 
d°0
 +
d°RowPixñs
 * 3;

2060 
d°1
 +
d°RowPixñs
 * 3;

2061 
d°2
 +
d°RowPixñs
 * 3;

2063 
	`hq3x_32_def
(
d°0
, 
d°1
, 
d°2
, 
§c0
, 
§c1
, src1, 
width
);

2065 
	}
}

	@plugins/dfxvideo/draw_pl.c

8 
	#_IN_DRAW


	)

10 
	~"gpu.h
"

12 
	~"../../‰⁄ãnd/∂ugö_lib.h
"

13 
	~"p˙t.h
"

16 
	glLowî∑π
;

17 
BOOL
 
	gbCheckMask
 = 
FALSE
;

18 
	gsSëMask
;

19 
	glSëMask
;

21 
	$blô
()

23 
px
 = 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
 & ~1;

24 
py
 = 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
;

25 
w
 = 
PªviousPSXDi•œy
.
R™ge
.
x1
;

26 
h
 = 
PªviousPSXDi•œy
.
Di•œyMode
.
y
;

27 *
§cs
 = 
psxVuw
 + 
py
 * 1024 + 
px
;

29 i‡(
w
 <= 0)

33 
h
 -
PªviousPSXDi•œy
.
R™ge
.
y0
;

35 
rcbs
->
	`∂_vout_Êù
(
§cs
, 1024, 
PSXDi•œy
.
RGB24
, 
w
, 
h
);

36 
	}
}

38 
	$DoBuf„rSw≠
()

40 
fbw
, 
fbh
, 
fb24bµ
;

42 i‡(
PªviousPSXDi•œy
.
Di•œyMode
.
x
 =0 || PªviousPSXDi•œy.Di•œyMode.
y
 == 0)

47 i‡(
PªviousPSXDi•œy
.
Di•œyMode
.
x
 !
fbw
 || PªviousPSXDi•œy.Di•œyMode.
y
 !
fbh


48 || 
PSXDi•œy
.
RGB24
 !
fb24bµ
) {

49 
fbw
 = 
PªviousPSXDi•œy
.
Di•œyMode
.
x
;

50 
fbh
 = 
PªviousPSXDi•œy
.
Di•œyMode
.
y
;

51 
fb24bµ
 = 
PSXDi•œy
.
RGB24
;

52 
rcbs
->
	`∂_vout_£t_mode
(
fbw
, 
fbh
, fbw, fbh, 
fb24bµ
 ? 24 : 16);

55 
	`p˙t_°¨t
(
PCNT_BLIT
);

56 
	`blô
();

57 
	`p˙t_íd
(
PCNT_BLIT
);

58 
	}
}

60 
	$DoCÀ¨S¸ìnBuf„r
()

62 
	}
}

64 
	$ulInôDi•œy
()

66 i‡(
rcbs
->
	`∂_vout_›í
() != 0)

70 
	}
}

72 
	$Clo£Di•œy
()

74 
rcbs
->
	`∂_vout_˛o£
();

75 
	}
}

	@plugins/dfxvideo/fps.c

19 
	gfFømeR©eHz
=0;

20 
DWORD
 
	gdwFømeR©eTicks
=16;

21 
	gfFømeR©e
=200.0f;

22 
	giFømeLimô
=2;

23 
	gU£FømeLimô
=0;

24 
	gU£FømeSkù
=0;

27 
BOOL
 
	gbInôC≠
 = 
TRUE
;

28 
	gÂs_skù
 = 0;

29 
	gÂs_cur
 = 0;

31 
	#TIMEBASE
 100000

	)

32 
	#MAXLACE
 16

	)

33 
	#MAXSKIP
 120

	)

35 
ˇlcÂs
();

36 
FømeC≠
();

38 
	$CheckFømeR©e
()

40 if(
U£FømeSkù
)

42 if(!(
dwA˘Fixes
&0x80))

44 
dwLa˚C¡
++;

45 if(
dwLa˚C¡
>=
MAXLACE
 && 
U£FømeLimô
)

47 if(
dwLa˚C¡
==
MAXLACE
Ë
bInôC≠
=
TRUE
;

48 
	`FømeC≠
();

51 if(
U£FømeLimô
Ë
	`FømeC≠
();

52 
	`ˇlcÂs
();

56 if(
U£FømeLimô
Ë
	`FømeC≠
();

57 
	`ˇlcÂs
();

59 
	}
}

61 
	$timeGëTime
()

63 
timevÆ
 
tv
;

64 
	`gëtimeofday
(&
tv
, 0);

65  
tv
.
tv_£c
 * 100000 +Åv.
tv_u£c
/10;

66 
	}
}

68 
	$FømeC≠
 ()

70 
cuπicks
, 
œ°ticks
, 
_ticks_sö˚_œ°_upd©e
;

71 
TicksToWaô
 = 0;

72 
ovî¶ït
=0, 
tick°ogo
=0;

73 
BOOL
 
Waôög
 = 
TRUE
;

76 
cuπicks
 = 
	`timeGëTime
();

77 
_ticks_sö˚_œ°_upd©e
 = 
cuπicks
 - 
œ°ticks
;

79 if((
_ticks_sö˚_œ°_upd©e
 > 
TicksToWaô
) ||

80 (
cuπicks
 <
œ°ticks
))

82 
œ°ticks
 = 
cuπicks
;

83 
ovî¶ït
 = 
_ticks_sö˚_œ°_upd©e
 - 
TicksToWaô
;

84 if((
_ticks_sö˚_œ°_upd©e
-
TicksToWaô
Ë> 
dwFømeR©eTicks
)

85 
TicksToWaô
=0;

87 
TicksToWaô
=
dwFømeR©eTicks
 - 
ovî¶ït
;

91 
Waôög
)

93 
cuπicks
 = 
	`timeGëTime
();

94 
_ticks_sö˚_œ°_upd©e
 = 
cuπicks
 - 
œ°ticks
;

95 
tick°ogo
 = 
TicksToWaô
 - 
_ticks_sö˚_œ°_upd©e
;

96 i‡((
_ticks_sö˚_œ°_upd©e
 > 
TicksToWaô
) ||

97 (
cuπicks
 < 
œ°ticks
Ë|| 
tick°ogo
 < 
ovî¶ït
)

99 
Waôög
 = 
FALSE
;

100 
œ°ticks
 = 
cuπicks
;

101 
ovî¶ït
 = 
_ticks_sö˚_œ°_upd©e
 - 
TicksToWaô
;

102 
TicksToWaô
 = 
dwFømeR©eTicks
 - 
ovî¶ït
;

105 i‡(
tick°ogo
 >200 && !(
dwA˘Fixes
&16))

106 
	`u¶ìp
(
tick°ogo
*10 - 200);

110 
	}
}

112 
	$FømeSkù
()

114 
iNumSkùs
=0,
iAddôi⁄ÆSkù
=0;

115 
DWORD
 
dwLa°La˚
=0;

116 
DWORD
 
cuπicks
, 
œ°ticks
, 
_ticks_sö˚_œ°_upd©e
;

117 
tick°ogo
=0;

118 
ovî¶ït
=0;

120 if(!
dwLa˚C¡
) ;

122 if(
iNumSkùs
)

124 
dwLa°La˚
+=
dwLa˚C¡
;

125 
bSkùNextFøme
 = 
TRUE
;

126 
iNumSkùs
--;

130 
DWORD
 
dwWaôTime
;

132 if(
bInôC≠
 || 
bSkùNextFøme
)

134 if(
U£FømeLimô
 && !
bInôC≠
)

136 
DWORD
 
dwT
=
_ticks_sö˚_œ°_upd©e
;

137 
dwLa°La˚
+=
dwLa˚C¡
;

139 
cuπicks
 = 
	`timeGëTime
();

140 
_ticks_sö˚_œ°_upd©e

dwT
+
cuπicks
 - 
œ°ticks
;

142 
dwWaôTime
=
dwLa°La˚
*
dwFømeR©eTicks
;

144 if(
_ticks_sö˚_œ°_upd©e
<
dwWaôTime
)

146 if((
dwWaôTime
-
_ticks_sö˚_œ°_upd©e
)>

147 (60*
dwFømeR©eTicks
))

148 
_ticks_sö˚_œ°_upd©e
=
dwWaôTime
;

150 
_ticks_sö˚_œ°_upd©e
<
dwWaôTime
)

152 
cuπicks
 = 
	`timeGëTime
();

153 
_ticks_sö˚_œ°_upd©e
 = 
dwT
+
cuπicks
 - 
œ°ticks
;

158 if(
iAddôi⁄ÆSkù
<
MAXSKIP
)

160 
iAddôi⁄ÆSkù
++;

161 
dwLa˚C¡
=0;

162 
œ°ticks
 = 
	`timeGëTime
();

168 
bInôC≠
=
FALSE
;

169 
iAddôi⁄ÆSkù
=0;

170 
bSkùNextFøme
=
FALSE
;

171 
œ°ticks
 = 
	`timeGëTime
();

172 
dwLa˚C¡
=0;

173 
dwLa°La˚
=0;

174 
_ticks_sö˚_œ°_upd©e
=0;

178 
bSkùNextFøme
=
FALSE
;

180 
cuπicks
 = 
	`timeGëTime
();

181 
_ticks_sö˚_œ°_upd©e
 = 
cuπicks
 - 
œ°ticks
;

183 
dwLa°La˚
=
dwLa˚C¡
;

184 
dwWaôTime
=
dwLa˚C¡
*
dwFømeR©eTicks
;

185 i‡(
dwWaôTime
 >
ovî¶ït
)

186 
dwWaôTime
-=
ovî¶ït
;

188 if(
_ticks_sö˚_œ°_upd©e
>
dwWaôTime
)

190 if(
U£FømeLimô
)

192 
iNumSkùs
=0;

196 
iNumSkùs
=
_ticks_sö˚_œ°_upd©e
/
dwWaôTime
;

197 
iNumSkùs
--;

198 if(
iNumSkùs
>
MAXSKIP
) iNumSkips=MAXSKIP;

200 
bSkùNextFøme
 = 
TRUE
;

203 if(
U£FømeLimô
)

205 if(
dwLa˚C¡
>
MAXLACE
)

206 
_ticks_sö˚_œ°_upd©e
=
dwWaôTime
;

208 
_ticks_sö˚_œ°_upd©e
<
dwWaôTime
)

210 
cuπicks
 = 
	`timeGëTime
();

211 
_ticks_sö˚_œ°_upd©e
 = 
cuπicks
 - 
œ°ticks
;

213 
tick°ogo
 = 
dwWaôTime
 - 
_ticks_sö˚_œ°_upd©e
;

214 i‡(
tick°ogo
-
ovî¶ït
 >200 && !(
dwA˘Fixes
&16))

215 
	`u¶ìp
(
tick°ogo
*10 - 200);

218 
ovî¶ït
 = 
_ticks_sö˚_œ°_upd©e
 - 
dwWaôTime
;

219 i‡(
ovî¶ït
 < 0)

220 
ovî¶ït
 = 0;

221 
œ°ticks
 = 
	`timeGëTime
();

224 
dwLa˚C¡
=0;

225 
	}
}

227 
	$ˇlcÂs
()

229 
cuπicks
,
_ticks_sö˚_œ°_upd©e
,
œ°ticks
;

230 
Âs_˙t
 = 0;

231 
Âs_tck
 = 1;

232 
Âsskù_˙t
 = 0;

233 
Âsskù_tck
 = 1;

236 
cuπicks
 = 
	`timeGëTime
();

237 
_ticks_sö˚_œ°_upd©e
=
cuπicks
-
œ°ticks
;

239 if(
U£FømeSkù
 && !
U£FømeLimô
 && 
_ticks_sö˚_œ°_upd©e
)

240 
Âs_skù
=
	`mö
(Âs_skù,(()
TIMEBASE
/()
_ticks_sö˚_œ°_upd©e
+1.0f));

242 
œ°ticks
 = 
cuπicks
;

245 if(
U£FømeSkù
 && 
U£FømeLimô
)

247 
Âsskù_tck
 +
_ticks_sö˚_œ°_upd©e
;

249 if(++
Âsskù_˙t
==2)

251 
Âs_skù
 = ()2000/()
Âsskù_tck
;

252 
Âs_skù
 +=6.0f;

253 
Âsskù_˙t
 = 0;

254 
Âsskù_tck
 = 1;

258 
Âs_tck
 +
_ticks_sö˚_œ°_upd©e
;

260 if(++
Âs_˙t
==20)

262 
Âs_cur
 = ()(
TIMEBASE
*20)/()
Âs_tck
;

264 
Âs_˙t
 = 0;

265 
Âs_tck
 = 1;

268 
	}
}

270 
	$PCFømeC≠
 ()

272 
cuπicks
, 
œ°ticks
, 
_ticks_sö˚_œ°_upd©e
;

273 
TicksToWaô
 = 0;

274 
BOOL
 
Waôög
 = 
TRUE
;

276 
Waôög
)

278 
cuπicks
 = 
	`timeGëTime
();

279 
_ticks_sö˚_œ°_upd©e
 = 
cuπicks
 - 
œ°ticks
;

280 i‡((
_ticks_sö˚_œ°_upd©e
 > 
TicksToWaô
) ||

281 (
cuπicks
 < 
œ°ticks
))

283 
Waôög
 = 
FALSE
;

284 
œ°ticks
 = 
cuπicks
;

285 
TicksToWaô
 = (
TIMEBASE
/ ()
fFømeR©eHz
);

288 
	}
}

290 
	$PCˇlcÂs
()

292 
cuπicks
,
_ticks_sö˚_œ°_upd©e
,
œ°ticks
;

293 
Âs_˙t
 = 0;

294 
Âs_acc
 = 0;

295 
CuºítFPS
=0;

297 
cuπicks
 = 
	`timeGëTime
();

298 
_ticks_sö˚_œ°_upd©e
=
cuπicks
-
œ°ticks
;

299 if(
_ticks_sö˚_œ°_upd©e
)

300 
CuºítFPS
=()
TIMEBASE
/()
_ticks_sö˚_œ°_upd©e
;

301 
CuºítFPS
 = 0;

302 
œ°ticks
 = 
cuπicks
;

304 
Âs_acc
 +
CuºítFPS
;

306 if(++
Âs_˙t
==10)

308 
Âs_cur
 = 
Âs_acc
 / 10;

309 
Âs_acc
 = 0;

310 
Âs_˙t
 = 0;

313 
Âs_skù
=
CuºítFPS
+1.0f;

314 
	}
}

316 
	$SëAutoFømeC≠
()

318 if(
iFømeLimô
==1)

320 
fFømeR©eHz
 = 
fFømeR©e
;

321 
dwFømeR©eTicks
=(
TIMEBASE
*100 / ()(
fFømeR©eHz
*100));

325 if(
dwA˘Fixes
&32)

327 i‡(
PSXDi•œy
.
I¡îœ˚d
)

328 
fFømeR©eHz
 = 
PSXDi•œy
.
PAL
?50.0f:60.0f;

329 
fFømeR©eHz
 = 
PSXDi•œy
.
PAL
?25.0f:30.0f;

333 
fFømeR©eHz
 = 
PSXDi•œy
.
PAL
?50.0f:59.94f;

334 
dwFømeR©eTicks
=(
TIMEBASE
*100 / ()(
fFømeR©eHz
*100));

336 
	}
}

338 
	$InôFPS
()

340 if(!
fFømeR©e
) fFrameRate=200.0f;

341 if(
fFømeR©eHz
==0ËfFømeR©eHz=
fFømeR©e
;

342 
dwFømeR©eTicks
=(
TIMEBASE
 / ()
fFømeR©eHz
);

343 
	}
}

	@plugins/dfxvideo/gpu.c

18 
	~"gpu.h
"

19 
	~"°döt.h
"

20 
	~"p£mu_∂ugö_defs.h
"

26 *
	gpsxVub
;

27 sig√d *
	gpsxVsb
;

28 *
	gpsxVuw
;

29 *
	gpsxVuw_eom
;

30 sig√d *
	gpsxVsw
;

31 
uöt32_t
 *
	gpsxVul
;

32 
öt32_t
 *
	gpsxV¶
;

38 
	glGPUd©aRë
;

39 
	glGPU°©usRë
;

40 
uöt32_t
 
	gulSètusC⁄åﬁ
[256];

42 
uöt32_t
 
	ggpuD©aM
[256];

43 
	ggpuComm™d
 = 0;

44 
	ggpuD©aC
 = 0;

45 
	ggpuD©aP
 = 0;

47 
VRAMLﬂd_t
 
	gVRAMWrôe
;

48 
VRAMLﬂd_t
 
	gVRAMRód
;

49 
DATAREGISTERMODES
 
	gD©aWrôeMode
;

50 
DATAREGISTERMODES
 
	gD©aRódMode
;

52 
BOOL
 
	gbSkùNextFøme
 = 
FALSE
;

53 
BOOL
 
	gfskù_‰ameRódy
;

54 
DWORD
 
	gœ˚_cou¡_sö˚_Êù
;

55 
DWORD
 
	gdwLa˚C¡
=0;

56 
	gsDi•Widths
[8] = {256,320,512,640,368,384,512,640};

57 
PSXDi•œy_t
 
	gPSXDi•œy
;

58 
PSXDi•œy_t
 
	gPªviousPSXDi•œy
;

59 
	glSñe˘edSlŸ
=0;

60 
BOOL
 
	gbDoLazyUpd©e
=
FALSE
;

61 
uöt32_t
 
	glGPUInfoVÆs
[16];

62 
	giFakePrimBusy
=0;

63 c⁄° *
	gskù_advi˚
;

69 
	~<time.h
>

72 
	~"Âs.c
"

79 
	$SëFixes
()

81 if(
dwA˘Fixes
&0x02Ë
sDi•Widths
[4]=384;

82 
sDi•Widths
[4]=368;

83 
	}
}

90 
	gvøm
[1024*512*2 + 1024*1024] 
__©åibuã__
((
Æig√d
(2048)));

92 
CALLBACK
 
	$GPUöô
()

94 
	`mem£t
(
ulSètusC⁄åﬁ
,0,256*(
uöt32_t
));

97 
psxVub
=
vøm
 + 512 * 1024;

99 
psxVsb
=(sig√d *)
psxVub
;

100 
psxVsw
=(sig√d *)
psxVub
;

101 
psxV¶
=(
öt32_t
 *)
psxVub
;

102 
psxVuw
=(*)
psxVub
;

103 
psxVul
=(
uöt32_t
 *)
psxVub
;

105 
psxVuw_eom
=
psxVuw
+1024*512;

107 
	`mem£t
(
vøm
,0x00,(512*2)*1024 + (1024*1024));

108 
	`mem£t
(
lGPUInfoVÆs
,0x00,16*(
uöt32_t
));

110 
PSXDi•œy
.
RGB24
 = 
FALSE
;

111 
PSXDi•œy
.
I¡îœ˚d
 = 
FALSE
;

112 
PSXDi•œy
.
DøwOff£t
.
x
 = 0;

113 
PSXDi•œy
.
DøwOff£t
.
y
 = 0;

114 
PSXDi•œy
.
Di•œyMode
.
x
= 320;

115 
PSXDi•œy
.
Di•œyMode
.
y
= 240;

116 
PªviousPSXDi•œy
.
Di•œyMode
.
x
= 320;

117 
PªviousPSXDi•œy
.
Di•œyMode
.
y
= 240;

118 
PSXDi•œy
.
DißbÀd
 = 
FALSE
;

119 
PªviousPSXDi•œy
.
R™ge
.
x0
 =0;

120 
PªviousPSXDi•œy
.
R™ge
.
y0
 =0;

121 
PSXDi•œy
.
R™ge
.
x0
=0;

122 
PSXDi•œy
.
R™ge
.
x1
=0;

123 
PªviousPSXDi•œy
.
Di•œyModeNew
.
y
=0;

124 
PSXDi•œy
.
DoubÀ
 = 1;

125 
lGPUd©aRë
 = 0x400;

127 
D©aWrôeMode
 = 
DR_NORMAL
;

130 
	`mem£t
(&
VRAMWrôe
, 0, (
VRAMLﬂd_t
));

131 
	`mem£t
(&
VRAMRód
, 0, (
VRAMLﬂd_t
));

134 
lGPU°©usRë
 = 0x14802000;

135 
GPUIsIdÀ
;

136 
GPUIsRódyF‹Comm™ds
;

137 
bDoVSyncUpd©e
 = 
TRUE
;

140 
	}
}

147 
	$GPU›í
(* 
di•
,* 
C≠Text
,* 
CfgFûe
)

149 
d
;

151 
	`SëFixes
();

153 
	`InôFPS
();

155 
bDoVSyncUpd©e
 = 
TRUE
;

157 
d
=
	`ulInôDi•œy
();

159 if(
di•
)

160 *
di•
=
d
;

162 if(
d
)  0;

164 
	}
}

171 
CALLBACK
 
	$GPU˛o£
()

173 
	`Clo£Di•œy
();

176 
	}
}

182 
CALLBACK
 
	$GPUshutdown
()

184 
	`Clo£Di•œy
();

186 
	}
}

192 
	$upd©eDi•œy
()

194 if(
PSXDi•œy
.
DißbÀd
)

199 if(
dwA˘Fixes
&32)

201 if(
U£FømeLimô
Ë
	`PCFømeC≠
();

202 if(
U£FømeSkù
Ë
	`PCˇlcÂs
();

205 if(
U£FømeSkù
)

207 if(
fskù_‰ameRódy
)

209 
	`DoBuf„rSw≠
();

210 
fskù_‰ameRódy
=
FALSE
;

211 
bDoVSyncUpd©e
=
FALSE
;

216 
bSkùNextFøme
 = 
FALSE
;

217 
	`DoBuf„rSw≠
();

218 
bDoVSyncUpd©e
=
FALSE
;

220 
	}
}

222 
	$decideSkù
()

224 if(!
bDoVSyncUpd©e
)

227 
œ˚_cou¡_sö˚_Êù
=0;

228 
fskù_‰ameRódy
=!
bSkùNextFøme
;

230 if(
dwA˘Fixes
&0xa0)

232 
skù
 = (
skù_advi˚
 && *skù_advi˚Ë|| 
U£FømeSkù
 =1 || 
Âs_skù
 < 
fFømeR©eHz
;

233 if(
skù
 && !
bSkùNextFøme
)

234 {
bSkùNextFøme
 = 
TRUE
; 
Âs_skù
=
fFømeR©eHz
;}

235 
bSkùNextFøme
 = 
FALSE
;

237 
	`FømeSkù
();

238 
	}
}

244 
	$Ch™geDi•Off£tsX
()

246 
lx
,
l
;

248 if(!
PSXDi•œy
.
R™ge
.
x1
) ;

250 
l
=
PªviousPSXDi•œy
.
Di•œyMode
.
x
;

252 
l
*=()
PSXDi•œy
.
R™ge
.
x1
;

253 
l
/=2560;
lx
=l;l&=0xfffffff8;

255 if(
l
==
PªviousPSXDi•œy
.
R™ge
.
y1
) ;

256 
PªviousPSXDi•œy
.
R™ge
.
y1
=()
l
;

258 if(
lx
>=
PªviousPSXDi•œy
.
Di•œyMode
.
x
)

260 
PªviousPSXDi•œy
.
R™ge
.
x1
=

261 ()
PªviousPSXDi•œy
.
Di•œyMode
.
x
;

262 
PªviousPSXDi•œy
.
R™ge
.
x0
=0;

266 
PªviousPSXDi•œy
.
R™ge
.
x1
=()
l
;

268 
PªviousPSXDi•œy
.
R™ge
.
x0
=

269 (
PSXDi•œy
.
R™ge
.
x0
-500)/8;

271 if(
PªviousPSXDi•œy
.
R™ge
.
x0
<0)

272 
PªviousPSXDi•œy
.
R™ge
.
x0
=0;

274 if((
PªviousPSXDi•œy
.
R™ge
.
x0
+
lx
)>

275 
PªviousPSXDi•œy
.
Di•œyMode
.
x
)

277 
PªviousPSXDi•œy
.
R™ge
.
x0
=

278 ()(
PªviousPSXDi•œy
.
Di•œyMode
.
x
-
lx
);

279 
PªviousPSXDi•œy
.
R™ge
.
x0
+=2;

281 
PªviousPSXDi•œy
.
R™ge
.
x1
+=()(
lx
-
l
);

283 
PªviousPSXDi•œy
.
R™ge
.
x1
-=2;

288 
PªviousPSXDi•œy
.
R™ge
.
x0
=PreviousPSXDisplay.Range.x0>>1;

289 
PªviousPSXDi•œy
.
R™ge
.
x0
=PreviousPSXDisplay.Range.x0<<1;

290 
PªviousPSXDi•œy
.
R™ge
.
x1
=PreviousPSXDisplay.Range.x1>>1;

291 
PªviousPSXDi•œy
.
R™ge
.
x1
=PreviousPSXDisplay.Range.x1<<1;

293 
	`DoCÀ¨S¸ìnBuf„r
();

296 
bDoVSyncUpd©e
=
TRUE
;

297 
	}
}

301 
	$Ch™geDi•Off£tsY
()

303 
iT
,
iO
=
PªviousPSXDi•œy
.
R™ge
.
y0
;

304 
iOldYOff£t
=
PªviousPSXDi•œy
.
Di•œyModeNew
.
y
;

308 if((
PªviousPSXDi•œy
.
Di•œyModeNew
.
x
+
PSXDi•œy
.Di•œyModeNew.
y
)>512)

310 
dy1
=512-
PªviousPSXDi•œy
.
Di•œyModeNew
.
x
;

311 
dy2
=(
PªviousPSXDi•œy
.
Di•œyModeNew
.
x
+
PSXDi•œy
.Di•œyModeNew.
y
)-512;

313 if(
dy1
>=
dy2
)

315 
PªviousPSXDi•œy
.
Di•œyModeNew
.
y
=-
dy2
;

319 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
=0;

320 
PªviousPSXDi•œy
.
Di•œyModeNew
.
y
=-
dy1
;

323 
PªviousPSXDi•œy
.
Di•œyModeNew
.
y
=0;

327 if(
PªviousPSXDi•œy
.
Di•œyModeNew
.
y
!=
iOldYOff£t
)

329 
PSXDi•œy
.
Height
 = PSXDi•œy.
R™ge
.
y1
 -

330 
PSXDi•œy
.
R™ge
.
y0
 +

331 
PªviousPSXDi•œy
.
Di•œyModeNew
.
y
;

332 
PSXDi•œy
.
Di•œyModeNew
.
y
=PSXDi•œy.
Height
*PSXDi•œy.
DoubÀ
;

337 if(
PSXDi•œy
.
PAL
Ë
iT
=48; iT=28;

339 if(
PSXDi•œy
.
R™ge
.
y0
>=
iT
)

341 
PªviousPSXDi•œy
.
R™ge
.
y0
=

342 ()((
PSXDi•œy
.
R™ge
.
y0
-
iT
-4)*PSXDi•œy.
DoubÀ
);

343 if(
PªviousPSXDi•œy
.
R™ge
.
y0
<0)

344 
PªviousPSXDi•œy
.
R™ge
.
y0
=0;

345 
PSXDi•œy
.
Di•œyModeNew
.
y
+=

346 
PªviousPSXDi•œy
.
R™ge
.
y0
;

349 
PªviousPSXDi•œy
.
R™ge
.
y0
=0;

351 if(
iO
!=
PªviousPSXDi•œy
.
R™ge
.
y0
)

353 
	`DoCÀ¨S¸ìnBuf„r
();

355 
	}
}

361 
	$upd©eDi•œyIfCh™ged
()

363 i‡((
PSXDi•œy
.
Di•œyMode
.
y
 =PSXDi•œy.
Di•œyModeNew
.y) &&

364 (
PSXDi•œy
.
Di•œyMode
.
x
 =PSXDi•œy.
Di•œyModeNew
.x))

366 if((
PSXDi•œy
.
RGB24
 =PSXDi•œy.
RGB24New
) &&

367 (
PSXDi•œy
.
I¡îœ˚d
 =PSXDi•œy.
I¡îœ˚dNew
)) ;

370 
PSXDi•œy
.
RGB24
 = PSXDi•œy.
RGB24New
;

372 
PSXDi•œy
.
Di•œyMode
.
y
 = PSXDi•œy.
Di•œyModeNew
.y;

373 
PSXDi•œy
.
Di•œyMode
.
x
 = PSXDi•œy.
Di•œyModeNew
.x;

374 
PªviousPSXDi•œy
.
Di•œyMode
.
x
=

375 
	`mö
(640,
PSXDi•œy
.
Di•œyMode
.
x
);

376 
PªviousPSXDi•œy
.
Di•œyMode
.
y
=

377 
	`mö
(512,
PSXDi•œy
.
Di•œyMode
.
y
);

378 
PSXDi•œy
.
I¡îœ˚d
 = PSXDi•œy.
I¡îœ˚dNew
;

380 
PSXDi•œy
.
Di•œyEnd
.
x
=

381 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
+ PSXDi•œy.
Di•œyMode
.x;

382 
PSXDi•œy
.
Di•œyEnd
.
y
=

383 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
+ PSXDi•œy.
Di•œyMode
.y+
PªviousPSXDi•œy
.
Di•œyModeNew
.y;

384 
PªviousPSXDi•œy
.
Di•œyEnd
.
x
=

385 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
+ 
PSXDi•œy
.
Di•œyMode
.x;

386 
PªviousPSXDi•œy
.
Di•œyEnd
.
y
=

387 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
+ 
PSXDi•œy
.
Di•œyMode
.y+PªviousPSXDi•œy.
Di•œyModeNew
.y;

389 
	`Ch™geDi•Off£tsX
();

391 if(
iFømeLimô
==2Ë
	`SëAutoFømeC≠
();

393 if(
U£FømeSkù
Ë
	`decideSkù
();

394 
	}
}

400 
CALLBACK
 
	$GPUupd©eLa˚
()

409 if(
PSXDi•œy
.
I¡îœ˚d
)

411 
lGPU°©usRë
^=0x80000000;

413 if(
bDoVSyncUpd©e
 && 
PSXDi•œy
.
Di•œyMode
.
x
>0 && PSXDi•œy.Di•œyMode.
y
>0)

415 
	`upd©eDi•œy
();

420 if(
dwA˘Fixes
&64)

422 if(
bDoLazyUpd©e
)

423 
	`upd©eDi•œy
();

424 
bDoLazyUpd©e
=
FALSE
;

428 if(
bDoVSyncUpd©e
)

429 
	`upd©eDi•œy
();

433 if(
U£FømeSkù
) {

434 
œ˚_cou¡_sö˚_Êù
++;

435 if(
œ˚_cou¡_sö˚_Êù
 > 8) {

436 
bSkùNextFøme
=
FALSE
;

437 
fskù_‰ameRódy
=
TRUE
;

440 
	}
}

447 
uöt32_t
 
CALLBACK
 
	$GPUªadSètus
()

449 if(
dwA˘Fixes
&1)

451 
iNumRód
=0;

452 if((
iNumRód
++)==2)

454 
iNumRód
=0;

455 
lGPU°©usRë
^=0x80000000;

459 if(
iFakePrimBusy
)

461 
iFakePrimBusy
--;

463 if(
iFakePrimBusy
&1)

465 
GPUIsBusy
;

466 
GPUIsNŸRódyF‹Comm™ds
;

470 
GPUIsIdÀ
;

471 
GPUIsRódyF‹Comm™ds
;

474  
lGPU°©usRë
;

475 
	}
}

482 
CALLBACK
 
	$GPUwrôeSètus
(
uöt32_t
 
gd©a
)

484 
uöt32_t
 
lComm™d
=(
gd©a
>>24)&0xff;

486 
ulSètusC⁄åﬁ
[
lComm™d
]=
gd©a
;

488 
lComm™d
)

493 
	`mem£t
(
lGPUInfoVÆs
,0x00,16*(
uöt32_t
));

494 
lGPU°©usRë
=0x14802000;

495 
PSXDi•œy
.
DißbÀd
=1;

496 
D©aWrôeMode
=
D©aRódMode
=
DR_NORMAL
;

497 
PSXDi•œy
.
DøwOff£t
.
x
=PSXDi•œy.DøwOff£t.
y
=0;

498 
døwX
=
døwY
=0;
døwW
=
døwH
=0;

499 
sSëMask
=0;
lSëMask
=0;
bCheckMask
=
FALSE
;

500 
usMúr‹
=0;

501 
GlobÆTextAddrX
=0;
GlobÆTextAddrY
=0;

502 
GlobÆTextTP
=0;
GlobÆTextABR
=0;

503 
PSXDi•œy
.
RGB24
=
FALSE
;

504 
PSXDi•œy
.
I¡îœ˚d
=
FALSE
;

505 
bUsögTWö
 = 
FALSE
;

511 
PªviousPSXDi•œy
.
DißbÀd
 = 
PSXDi•œy
.Disabled;

512 
PSXDi•œy
.
DißbÀd
 = (
gd©a
 & 1);

514 if(
PSXDi•œy
.
DißbÀd
)

515 
lGPU°©usRë
|=
GPUSTATUS_DISPLAYDISABLED
;

516 
lGPU°©usRë
&=~
GPUSTATUS_DISPLAYDISABLED
;

522 
gd©a
 &= 0x03;

524 
D©aWrôeMode
=
D©aRódMode
=
DR_NORMAL
;

525 if(
gd©a
==0x02Ë
D©aWrôeMode
=
DR_VRAMTRANSFER
;

526 if(
gd©a
==0x03Ë
D©aRódMode
 =
DR_VRAMTRANSFER
;

527 
lGPU°©usRë
&=~
GPUSTATUS_DMABITS
;

528 
lGPU°©usRë
|=(
gd©a
 << 29);

535 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
 = 
PSXDi•œy
.DisplayPosition.x;

536 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
 = 
PSXDi•œy
.DisplayPosition.y;

539 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
 = ()((
gd©a
>>10)&0x1ff);

542 
PªviousPSXDi•œy
.
Di•œyModeNew
.
x
=
PSXDi•œy
.
Di•œyPosôi⁄
.
y
;

544 if((
PSXDi•œy
.
Di•œyPosôi⁄
.
y
+PSXDi•œy.
Di•œyMode
.y)>512)

546 
dy1
=512-
PSXDi•œy
.
Di•œyPosôi⁄
.
y
;

547 
dy2
=(
PSXDi•œy
.
Di•œyPosôi⁄
.
y
+PSXDi•œy.
Di•œyMode
.y)-512;

549 if(
dy1
>=
dy2
)

551 
PªviousPSXDi•œy
.
Di•œyModeNew
.
y
=-
dy2
;

555 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
=0;

556 
PªviousPSXDi•œy
.
Di•œyModeNew
.
y
=-
dy1
;

559 
PªviousPSXDi•œy
.
Di•œyModeNew
.
y
=0;

562 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
 = ()(
gd©a
 & 0x3ff);

563 
PSXDi•œy
.
Di•œyEnd
.
x
=

564 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
+ PSXDi•œy.
Di•œyMode
.x;

565 
PSXDi•œy
.
Di•œyEnd
.
y
=

566 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
+ PSXDi•œy.
Di•œyMode
.y + 
PªviousPSXDi•œy
.
Di•œyModeNew
.y;

567 
PªviousPSXDi•œy
.
Di•œyEnd
.
x
=

568 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
+ 
PSXDi•œy
.
Di•œyMode
.x;

569 
PªviousPSXDi•œy
.
Di•œyEnd
.
y
=

570 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
+ 
PSXDi•œy
.
Di•œyMode
.y + PªviousPSXDi•œy.
Di•œyModeNew
.y;

572 
bDoVSyncUpd©e
=
TRUE
;

574 i‡(!(
PSXDi•œy
.
I¡îœ˚d
))

576 if(
dwA˘Fixes
&64Ë
bDoLazyUpd©e
=
TRUE
;

578 if(
U£FømeSkù
Ë
	`decideSkù
();

584 
PSXDi•œy
.
R™ge
.
x0
=()(
gd©a
 & 0x7ff);

585 
PSXDi•œy
.
R™ge
.
x1
=()((
gd©a
>>12) & 0xfff);

587 
PSXDi•œy
.
R™ge
.
x1
-=PSXDi•œy.R™ge.
x0
;

589 
	`Ch™geDi•Off£tsX
();

597 
PSXDi•œy
.
R™ge
.
y0
=()(
gd©a
 & 0x3ff);

598 
PSXDi•œy
.
R™ge
.
y1
=()((
gd©a
>>10) & 0x3ff);

600 
PªviousPSXDi•œy
.
Height
 = 
PSXDi•œy
.Height;

602 
PSXDi•œy
.
Height
 = PSXDi•œy.
R™ge
.
y1
 -

603 
PSXDi•œy
.
R™ge
.
y0
 +

604 
PªviousPSXDi•œy
.
Di•œyModeNew
.
y
;

606 if(
PªviousPSXDi•œy
.
Height
!=
PSXDi•œy
.Height)

608 
PSXDi•œy
.
Di•œyModeNew
.
y
=PSXDi•œy.
Height
*PSXDi•œy.
DoubÀ
;

610 
	`Ch™geDi•Off£tsY
();

612 
	`upd©eDi•œyIfCh™ged
();

620 
PSXDi•œy
.
Di•œyModeNew
.
x
 =

621 
sDi•Widths
[(
gd©a
 & 0x03) | ((gdata & 0x40) >> 4)];

623 i‡(
gd©a
&0x04Ë
PSXDi•œy
.
DoubÀ
=2;

624 
PSXDi•œy
.
DoubÀ
=1;

626 
PSXDi•œy
.
Di•œyModeNew
.
y
 = PSXDi•œy.
Height
*PSXDi•œy.
DoubÀ
;

628 
	`Ch™geDi•Off£tsY
();

630 
PSXDi•œy
.
PAL
 = (
gd©a
 & 0x08)?
TRUE
:
FALSE
;

631 
PSXDi•œy
.
RGB24New
 = (
gd©a
 & 0x10)?
TRUE
:
FALSE
;

632 
PSXDi•œy
.
I¡îœ˚dNew
 = (
gd©a
 & 0x20)?
TRUE
:
FALSE
;

634 
lGPU°©usRë
&=~
GPUSTATUS_WIDTHBITS
;

635 
lGPU°©usRë
|=

636 (((
gd©a
 & 0x03) << 17) |

637 ((
gd©a
 & 0x40) << 10));

639 if(
PSXDi•œy
.
I¡îœ˚dNew
)

641 if(!
PSXDi•œy
.
I¡îœ˚d
)

643 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
 = 
PSXDi•œy
.DisplayPosition.x;

644 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
 = 
PSXDi•œy
.DisplayPosition.y;

646 
lGPU°©usRë
|=
GPUSTATUS_INTERLACED
;

648 
lGPU°©usRë
&=~(
GPUSTATUS_INTERLACED
|0x80000000);

650 i‡(
PSXDi•œy
.
PAL
)

651 
lGPU°©usRë
|=
GPUSTATUS_PAL
;

652 
lGPU°©usRë
&=~
GPUSTATUS_PAL
;

654 i‡(
PSXDi•œy
.
DoubÀ
==2)

655 
lGPU°©usRë
|=
GPUSTATUS_DOUBLEHEIGHT
;

656 
lGPU°©usRë
&=~
GPUSTATUS_DOUBLEHEIGHT
;

658 i‡(
PSXDi•œy
.
RGB24New
)

659 
lGPU°©usRë
|=
GPUSTATUS_RGB24
;

660 
lGPU°©usRë
&=~
GPUSTATUS_RGB24
;

662 
	`upd©eDi•œyIfCh™ged
();

669 
gd©a
&=0xff;

671 
gd©a
)

674 
lGPUd©aRë
=
lGPUInfoVÆs
[
INFO_TW
];

677 
lGPUd©aRë
=
lGPUInfoVÆs
[
INFO_DRAWSTART
];

680 
lGPUd©aRë
=
lGPUInfoVÆs
[
INFO_DRAWEND
];

684 
lGPUd©aRë
=
lGPUInfoVÆs
[
INFO_DRAWOFF
];

687 
lGPUd©aRë
=0x02;

691 
lGPUd©aRë
=0xBFC03720;

697 
	}
}

703 
ölöe
 
	$FöishedVRAMWrôe
()

706 
D©aWrôeMode
 = 
DR_NORMAL
;

708 
VRAMWrôe
.
x
 = 0;

709 
VRAMWrôe
.
y
 = 0;

710 
VRAMWrôe
.
Width
 = 0;

711 
VRAMWrôe
.
Height
 = 0;

712 
VRAMWrôe
.
CﬁsRemaöög
 = 0;

713 
VRAMWrôe
.
RowsRemaöög
 = 0;

714 
	}
}

716 
ölöe
 
	$FöishedVRAMRód
()

719 
D©aRódMode
 = 
DR_NORMAL
;

721 
VRAMRód
.
x
 = 0;

722 
VRAMRód
.
y
 = 0;

723 
VRAMRód
.
Width
 = 0;

724 
VRAMRód
.
Height
 = 0;

725 
VRAMRód
.
CﬁsRemaöög
 = 0;

726 
VRAMRód
.
RowsRemaöög
 = 0;

729 
lGPU°©usRë
&=~
GPUSTATUS_READYFORVRAM
;

730 
	}
}

736 
CALLBACK
 
	$GPUªadD©aMem
(
uöt32_t
 * 
pMem
, 
iSize
)

738 
i
;

740 if(
D©aRódMode
!=
DR_VRAMTRANSFER
) ;

742 
GPUIsBusy
;

745 
VRAMRód
.
ImagePå
>=
psxVuw_eom
)

746 
VRAMRód
.
ImagePå
-=512*1024;

747 
VRAMRód
.
ImagePå
<
psxVuw
)

748 
VRAMRód
.
ImagePå
+=512*1024;

750 
i
=0;i<
iSize
;i++)

753 i‡((
VRAMRód
.
CﬁsRemaöög
 > 0Ë&& (VRAMRód.
RowsRemaöög
 > 0))

756 
lGPUd©aRë
=(
uöt32_t
)
	`GETLE16
(
VRAMRód
.
ImagePå
);

758 
VRAMRód
.
ImagePå
++;

759 if(
VRAMRód
.
ImagePå
>=
psxVuw_eom
) VRAMRead.ImagePtr-=512*1024;

760 
VRAMRód
.
RowsRemaöög
 --;

762 if(
VRAMRód
.
RowsRemaöög
<=0)

764 
VRAMRód
.
RowsRemaöög
 = VRAMRód.
Width
;

765 
VRAMRód
.
CﬁsRemaöög
--;

766 
VRAMRód
.
ImagePå
 +1024 - VRAMRód.
Width
;

767 if(
VRAMRód
.
ImagePå
>=
psxVuw_eom
) VRAMRead.ImagePtr-=512*1024;

771 
lGPUd©aRë
|=(
uöt32_t
)
	`GETLE16
(
VRAMRód
.
ImagePå
)<<16;

772 
	`PUTLE32
(
pMem
, 
lGPUd©aRë
);ÖMem++;

774 if(
VRAMRód
.
CﬁsRemaöög
 <= 0)

775 {
	`FöishedVRAMRód
();
ENDREAD
;}

777 
VRAMRód
.
ImagePå
++;

778 if(
VRAMRód
.
ImagePå
>=
psxVuw_eom
) VRAMRead.ImagePtr-=512*1024;

779 
VRAMRód
.
RowsRemaöög
--;

780 if(
VRAMRód
.
RowsRemaöög
<=0)

782 
VRAMRód
.
RowsRemaöög
 = VRAMRód.
Width
;

783 
VRAMRód
.
CﬁsRemaöög
--;

784 
VRAMRód
.
ImagePå
 +1024 - VRAMRód.
Width
;

785 if(
VRAMRód
.
ImagePå
>=
psxVuw_eom
) VRAMRead.ImagePtr-=512*1024;

787 if(
VRAMRód
.
CﬁsRemaöög
 <= 0)

788 {
	`FöishedVRAMRód
();
ENDREAD
;}

790 {
	`FöishedVRAMRód
();
ENDREAD
;}

793 
ENDREAD
:

794 
GPUIsIdÀ
;

795 
	}
}

800 
uöt32_t
 
CALLBACK
 
	$GPUªadD©a
()

802 
uöt32_t
 
l
;

803 
	`GPUªadD©aMem
(&
l
,1);

804  
lGPUd©aRë
;

805 
	}
}

808 
	~"so·.c
"

811 
	~"¥im.c
"

818 c⁄° 
	g¥imTabÀCX
[256] =

888 
CALLBACK
 
	$GPUwrôeD©aMem
(
uöt32_t
 * 
pMem
, 
iSize
)

890 
comm™d
;

891 
uöt32_t
 
gd©a
=0;

892 
i
=0;

893 
GPUIsBusy
;

894 
GPUIsNŸRódyF‹Comm™ds
;

896 
STARTVRAM
:

898 if(
D©aWrôeMode
==
DR_VRAMTRANSFER
)

900 
BOOL
 
bFöished
=
FALSE
;

903 
VRAMWrôe
.
ImagePå
>=
psxVuw_eom
)

904 
VRAMWrôe
.
ImagePå
-=512*1024;

905 
VRAMWrôe
.
ImagePå
<
psxVuw
)

906 
VRAMWrôe
.
ImagePå
+=512*1024;

909 
VRAMWrôe
.
CﬁsRemaöög
>0)

911 
VRAMWrôe
.
RowsRemaöög
>0)

913 if(
i
>=
iSize
Ë{
ENDVRAM
;}

914 
i
++;

916 
gd©a
=
	`GETLE32
(
pMem
);ÖMem++;

918 
	`PUTLE16
(
VRAMWrôe
.
ImagePå
, ()
gd©a
); VRAMWrite.ImagePtr++;

919 if(
VRAMWrôe
.
ImagePå
>=
psxVuw_eom
) VRAMWrite.ImagePtr-=512*1024;

920 
VRAMWrôe
.
RowsRemaöög
 --;

922 if(
VRAMWrôe
.
RowsRemaöög
 <= 0)

924 
VRAMWrôe
.
CﬁsRemaöög
--;

925 i‡(
VRAMWrôe
.
CﬁsRemaöög
 <= 0)

927 
gd©a
=(gd©a&0xFFFF)|(((
uöt32_t
)
	`GETLE16
(
VRAMWrôe
.
ImagePå
))<<16);

928 
	`FöishedVRAMWrôe
();

929 
bDoVSyncUpd©e
=
TRUE
;

930 
ENDVRAM
;

932 
VRAMWrôe
.
RowsRemaöög
 = VRAMWrôe.
Width
;

933 
VRAMWrôe
.
ImagePå
 +1024 - VRAMWrôe.
Width
;

936 
	`PUTLE16
(
VRAMWrôe
.
ImagePå
, ()(
gd©a
>>16)); VRAMWrite.ImagePtr++;

937 if(
VRAMWrôe
.
ImagePå
>=
psxVuw_eom
) VRAMWrite.ImagePtr-=512*1024;

938 
VRAMWrôe
.
RowsRemaöög
 --;

941 
VRAMWrôe
.
RowsRemaöög
 = VRAMWrôe.
Width
;

942 
VRAMWrôe
.
CﬁsRemaöög
--;

943 
VRAMWrôe
.
ImagePå
 +1024 - VRAMWrôe.
Width
;

944 
bFöished
=
TRUE
;

947 
	`FöishedVRAMWrôe
();

948 if(
bFöished
Ë
bDoVSyncUpd©e
=
TRUE
;

951 
ENDVRAM
:

953 if(
D©aWrôeMode
==
DR_NORMAL
)

955 (* *
¥imFunc
)(*);

956 if(
bSkùNextFøme
Ë
¥imFunc
=
¥imTabÀSkù
;

957 
¥imFunc
=
¥imTabÀJ
;

959 ;
i
<
iSize
;)

961 if(
D©aWrôeMode
==
DR_VRAMTRANSFER
Ë
STARTVRAM
;

963 
gd©a
=
	`GETLE32
(
pMem
);ÖMem++; 
i
++;

965 if(
gpuD©aC
 == 0)

967 
comm™d
 = ()((
gd©a
>>24) & 0xff);

971 if(
¥imTabÀCX
[
comm™d
])

973 
gpuD©aC
 = 
¥imTabÀCX
[
comm™d
];

974 
gpuComm™d
 = 
comm™d
;

975 
	`PUTLE32_
(&
gpuD©aM
[0], 
gd©a
);

976 
gpuD©aP
 = 1;

982 
	`PUTLE32_
(&
gpuD©aM
[
gpuD©aP
], 
gd©a
);

983 if(
gpuD©aC
>128)

985 if((
gpuD©aC
==254 && 
gpuD©aP
>=3) ||

986 (
gpuD©aC
==255 && 
gpuD©aP
>=4 && !(gpuDataP&1)))

988 if((
gpuD©aM
[
gpuD©aP
] & 0xF000F000) == 0x50005000)

989 
gpuD©aP
=
gpuD©aC
-1;

992 
gpuD©aP
++;

995 if(
gpuD©aP
 =
gpuD©aC
)

997 
gpuD©aC
=
gpuD©aP
=0;

998 
¥imFunc
[
gpuComm™d
]((*)
gpuD©aM
);

999 if(
dwA˘Fixes
&0x0400)

1000 
iFakePrimBusy
=4;

1005 
lGPUd©aRë
=
gd©a
;

1007 
GPUIsRódyF‹Comm™ds
;

1008 
GPUIsIdÀ
;

1009 
	}
}

1013 
CALLBACK
 
	$GPUwrôeD©a
(
uöt32_t
 
gd©a
)

1015 
	`PUTLE32_
(&
gd©a
, gdata);

1016 
	`GPUwrôeD©aMem
(&
gd©a
,1);

1017 
	}
}

1023 
	glU£dAddr
[3];

1025 
ölöe
 
BOOL
 
	$CheckF‹EndÀssLo›
(
œddr
)

1027 if(
œddr
==
lU£dAddr
[1]Ë 
TRUE
;

1028 if(
œddr
==
lU£dAddr
[2]Ë 
TRUE
;

1030 if(
œddr
<
lU£dAddr
[0])ÜUsedAddr[1]=laddr;

1031 
lU£dAddr
[2]=
œddr
;

1032 
lU£dAddr
[0]=
œddr
;

1033  
FALSE
;

1034 
	}
}

1036 
CALLBACK
 
	$GPUdmaChaö
(
uöt32_t
 * 
ba£AddrL
, uöt32_à
addr
)

1038 
uöt32_t
 
dmaMem
;

1039 * 
ba£AddrB
;

1040 
cou¡
;
DMAComm™dCou¡î
 = 0;

1041 
dmaW‹ds
 = 0;

1043 
GPUIsBusy
;

1045 
lU£dAddr
[0]=lUsedAddr[1]=lUsedAddr[2]=0xffffff;

1047 
ba£AddrB
 = (*Ë
ba£AddrL
;

1051 
addr
&=0x1FFFFC;

1052 if(
DMAComm™dCou¡î
++ > 2000000) ;

1053 if(
	`CheckF‹EndÀssLo›
(
addr
)) ;

1055 
cou¡
 = 
ba£AddrB
[
addr
+3];

1056 
dmaW‹ds
 +1 + 
cou¡
;

1058 
dmaMem
=
addr
+4;

1060 if(
cou¡
>0Ë
	`GPUwrôeD©aMem
(&
ba£AddrL
[
dmaMem
>>2],count);

1062 
addr
 = 
	`GETLE32
(&
ba£AddrL
[addr>>2])&0xffffff;

1064 
addr
 != 0xffffff);

1066 
GPUIsIdÀ
;

1068  
dmaW‹ds
;

1069 
	}
}

1075 
	sGPUFREEZETAG


1077 
uöt32_t
 
	mulFªezeVîsi⁄
;

1078 
uöt32_t
 
	mulSètus
;

1079 
uöt32_t
 
	mulC⁄åﬁ
[256];

1080 
	mpsxVRam
[1024*1024*2];

1081 } 
	tGPUFªeze_t
;

1085 
CALLBACK
 
	$GPU‰ìze
(
uöt32_t
 
ulGëFªezeD©a
,
GPUFªeze_t
 * 
pF
)

1088 if(
ulGëFªezeD©a
==2)

1090 
lSlŸNum
=*((*)
pF
);

1091 if(
lSlŸNum
<0)  0;

1092 if(
lSlŸNum
>8)  0;

1093 
lSñe˘edSlŸ
=
lSlŸNum
+1;

1097 if(!
pF
)  0;

1098 if(
pF
->
ulFªezeVîsi⁄
!=1)  0;

1100 if(
ulGëFªezeD©a
==1)

1102 
pF
->
ulSètus
=
lGPU°©usRë
;

1103 
	`mem˝y
(
pF
->
ulC⁄åﬁ
,
ulSètusC⁄åﬁ
,256*(
uöt32_t
));

1104 
	`mem˝y
(
pF
->
psxVRam
, 
psxVub
, 1024*512*2);

1109 if(
ulGëFªezeD©a
!=0)  0;

1111 
lGPU°©usRë
=
pF
->
ulSètus
;

1112 
	`mem˝y
(
ulSètusC⁄åﬁ
,
pF
->
ulC⁄åﬁ
,256*(
uöt32_t
));

1113 
	`mem˝y
(
psxVub
, 
pF
->
psxVRam
, 1024*512*2);

1117 
PªviousPSXDi•œy
.
Height
 = 0;

1118 
	`GPUwrôeSètus
(
ulSètusC⁄åﬁ
[0]);

1119 
	`GPUwrôeSètus
(
ulSètusC⁄åﬁ
[1]);

1120 
	`GPUwrôeSètus
(
ulSètusC⁄åﬁ
[2]);

1121 
	`GPUwrôeSètus
(
ulSètusC⁄åﬁ
[3]);

1122 
	`GPUwrôeSètus
(
ulSètusC⁄åﬁ
[8]);

1123 
	`GPUwrôeSètus
(
ulSètusC⁄åﬁ
[6]);

1124 
	`GPUwrôeSètus
(
ulSètusC⁄åﬁ
[7]);

1125 
	`GPUwrôeSètus
(
ulSètusC⁄åﬁ
[5]);

1126 
	`GPUwrôeSètus
(
ulSètusC⁄åﬁ
[4]);

1129 
	}
}

1132 
	~"../../‰⁄ãnd/∂ugö_lib.h
"

1134 c⁄° 
ª¨med_cbs
 *
	grcbs
;

1136 
	$GPUª¨medCÆlbacks
(c⁄° 
ª¨med_cbs
 *
cbs
)

1139 
U£FømeSkù
 = 
cbs
->
‰ameskù
;

1140 
iU£Dôhî
 = 
cbs
->
gpu_≥›s
.iUseDither;

1141 
dwA˘Fixes
 = 
cbs
->
gpu_≥›s
.dwActFixes;

1142 
fFømeR©eHz
 = 
cbs
->
gpu_≥›s
.fFrameRateHz;

1143 
dwFømeR©eTicks
 = 
cbs
->
gpu_≥›s
.dwFrameRateTicks;

1144 i‡(
cbs
->
∂_vout_£t_øw_vøm
)

1145 
cbs
->
	`∂_vout_£t_øw_vøm
(
psxVub
);

1146 i‡(
cbs
->
∂_£t_gpu_ˇps
)

1147 
cbs
->
	`∂_£t_gpu_ˇps
(0);

1149 
skù_advi˚
 = &
cbs
->
fskù_advi˚
;

1150 
Âs_skù
 = 100.0f;

1151 
rcbs
 = 
cbs
;

1152 
	}
}

	@plugins/dfxvideo/gpu.h

18 #i‚de‡
_PSX_GPU_


19 
	#_PSX_GPU_


	)

21 
	#INFO_TW
 0

	)

22 
	#INFO_DRAWSTART
 1

	)

23 
	#INFO_DRAWEND
 2

	)

24 
	#INFO_DRAWOFF
 3

	)

26 
	#SHADETEXBIT
(
x
Ë((x>>24Ë& 0x1)

	)

27 
	#SEMITRANSBIT
(
x
Ë((x>>25Ë& 0x1)

	)

28 
	#PSXRGB
(
r
,
g
,
b
Ë((g<<10)|(b<<5)|r)

	)

30 
	#DATAREGISTERMODES
 

	)

32 
	#DR_NORMAL
 0

	)

33 
	#DR_VRAMTRANSFER
 1

	)

36 
	#GPUSTATUS_ODDLINES
 0x80000000

	)

37 
	#GPUSTATUS_DMABITS
 0x60000000

38 
	#GPUSTATUS_READYFORCOMMANDS
 0x10000000

	)

39 
	#GPUSTATUS_READYFORVRAM
 0x08000000

	)

40 
	#GPUSTATUS_IDLE
 0x04000000

	)

41 
	#GPUSTATUS_DISPLAYDISABLED
 0x00800000

	)

42 
	#GPUSTATUS_INTERLACED
 0x00400000

	)

43 
	#GPUSTATUS_RGB24
 0x00200000

	)

44 
	#GPUSTATUS_PAL
 0x00100000

	)

45 
	#GPUSTATUS_DOUBLEHEIGHT
 0x00080000

	)

46 
	#GPUSTATUS_WIDTHBITS
 0x00070000

47 
	#GPUSTATUS_MASKENABLED
 0x00001000

	)

48 
	#GPUSTATUS_MASKDRAWN
 0x00000800

	)

49 
	#GPUSTATUS_DRAWINGALLOWED
 0x00000400

	)

50 
	#GPUSTATUS_DITHER
 0x00000200

	)

52 
	#GPUIsBusy
 (
lGPU°©usRë
 &~
GPUSTATUS_IDLE
)

	)

53 
	#GPUIsIdÀ
 (
lGPU°©usRë
 |
GPUSTATUS_IDLE
)

	)

55 
	#GPUIsNŸRódyF‹Comm™ds
 (
lGPU°©usRë
 &~
GPUSTATUS_READYFORCOMMANDS
)

	)

56 
	#GPUIsRódyF‹Comm™ds
 (
lGPU°©usRë
 |
GPUSTATUS_READYFORCOMMANDS
)

	)

58 
	#CALLBACK


	)

60 
	~<°dio.h
>

61 
	~<°dlib.h
>

62 
	~<°rög.h
>

63 
	~<sys/time.h
>

64 
	~<m©h.h
>

65 
	~<°döt.h
>

66 
	~<uni°d.h
>

72 
	#SWAP16
(
x
Ë({ 
uöt16_t
 
y
=(x); (((y)>>8 & 0xffË| ((y)<<8 & 0xff00)); })

	)

73 
	#SWAP32
(
x
Ë({ 
uöt32_t
 
y
=(x); (((y)>>24 & 0xffulË| ((y)>>8 & 0xff00ulË| ((y)<<8 & 0xff0000ulË| ((y)<<24 & 0xff000000ul)); })

	)

75 #ifde‡
__BIG_ENDIAN__


78 
	#HOST2LE32
(
x
Ë
	`SWAP32
(x)

	)

79 
	#HOST2BE32
(
x
Ë(x)

	)

80 
	#LE2HOST32
(
x
Ë
	`SWAP32
(x)

	)

81 
	#BE2HOST32
(
x
Ë(x)

	)

83 
	#HOST2LE16
(
x
Ë
	`SWAP16
(x)

	)

84 
	#HOST2BE16
(
x
Ë(x)

	)

85 
	#LE2HOST16
(
x
Ë
	`SWAP16
(x)

	)

86 
	#BE2HOST16
(
x
Ë(x)

	)

91 
	#HOST2LE32
(
x
Ë(x)

	)

92 
	#HOST2BE32
(
x
Ë
	`SWAP32
(x)

	)

93 
	#LE2HOST32
(
x
Ë(x)

	)

94 
	#BE2HOST32
(
x
Ë
	`SWAP32
(x)

	)

96 
	#HOST2LE16
(
x
Ë(x)

	)

97 
	#HOST2BE16
(
x
Ë
	`SWAP16
(x)

	)

98 
	#LE2HOST16
(
x
Ë(x)

	)

99 
	#BE2HOST16
(
x
Ë
	`SWAP16
(x)

	)

103 
	#GETLEs16
(
X
Ë((
öt16_t
)
	`GETLE16
((
uöt16_t
 *)X))

	)

104 
	#GETLEs32
(
X
Ë((
öt16_t
)
	`GETLE32
((
uöt16_t
 *)X))

	)

106 
	#GETLE16
(
X
Ë
	`LE2HOST16
(*(
uöt16_t
 *)X)

	)

107 
	#GETLE32_
(
X
Ë
	`LE2HOST32
(*(
uöt32_t
 *)X)

	)

108 
	#GETLE16D
(
X
Ë({
uöt32_t
 
vÆ
 = 
	`GETLE32
(X); (vÆ<<16 | vÆ >> 16);})

	)

109 
	#PUTLE16
(
X
, 
Y
Ëdo{*((
uöt16_t
 *)X)=
	`HOST2LE16
((uöt16_t)Y);}0)

	)

110 
	#PUTLE32_
(
X
, 
Y
Ëdo{*((
uöt32_t
 *)X)=
	`HOST2LE16
((uöt32_t)Y);}0)

	)

111 #ifde‡
__¨m__


112 
	#GETLE32
(
X
Ë(*(
uöt16_t
 *)(X)|(((uöt16_à*)(X))[1]<<16))

	)

113 
	#PUTLE32
(
X
, 
Y
Ëdo{
uöt16_t
 *
p_
=(uöt16_à*)(X);
uöt32_t
 
y_
=Y;p_[0]=y_;p_[1]=y_>>16;}0)

	)

115 
	#GETLE32
 
GETLE32_


	)

116 
	#PUTLE32
 
PUTLE32_


	)

121 
	sVRAMLOADTTAG


123 
	mx
;

124 
	my
;

125 
	mWidth
;

126 
	mHeight
;

127 
	mRowsRemaöög
;

128 
	mCﬁsRemaöög
;

129 *
	mImagePå
;

130 } 
	tVRAMLﬂd_t
;

134 
	sPSXPOINTTAG


136 
öt32_t
 
	mx
;

137 
öt32_t
 
	my
;

138 } 
	tPSXPoöt_t
;

140 
	sPSXSPOINTTAG


142 
	mx
;

143 
	my
;

144 } 
	tPSXSPoöt_t
;

146 
	sPSXRECTTAG


148 
	mx0
;

149 
	mx1
;

150 
	my0
;

151 
	my1
;

152 } 
	tPSXRe˘_t
;

156 
	#FALSE
 0

	)

157 
	#TRUE
 1

	)

158 
	#BOOL
 

	)

159 
	#LOWORD
(
l
Ë(()÷))

	)

160 
	#HIWORD
(
l
Ë(()(((
uöt32_t
)÷Ë>> 16Ë& 0xFFFF))

	)

161 
	#max
(
a
,
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

162 
	#mö
(
a
,
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

163 
	#DWORD
 
uöt32_t


	)

164 #i‚de‡
__öt64


165 
	#__öt64
 

	)

168 
	sRECTTAG


170 
	mÀ·
;

171 
	mt›
;

172 
	mright
;

173 
	mbŸtom
;

174 }
	tRECT
;

178 
	sTWINTAG


180 
PSXRe˘_t
 
	mPosôi⁄
;

181 
	mxmask
, 
	mymask
;

182 } 
	tTWö_t
;

186 
	sPSXDISPLAYTAG


188 
PSXPoöt_t
 
	mDi•œyModeNew
;

189 
PSXPoöt_t
 
	mDi•œyMode
;

190 
PSXPoöt_t
 
	mDi•œyPosôi⁄
;

191 
PSXPoöt_t
 
	mDi•œyEnd
;

193 
öt32_t
 
	mDoubÀ
;

194 
öt32_t
 
	mHeight
;

195 
öt32_t
 
	mPAL
;

196 
öt32_t
 
	mI¡îœ˚dNew
;

197 
öt32_t
 
	mI¡îœ˚d
;

198 
öt32_t
 
	mRGB24New
;

199 
öt32_t
 
	mRGB24
;

200 
PSXSPoöt_t
 
	mDøwOff£t
;

201 
öt32_t
 
	mDißbÀd
;

202 
PSXRe˘_t
 
	mR™ge
;

204 } 
	tPSXDi•œy_t
;

210 
öt32_t
 
GlobÆTextAddrX
,
GlobÆTextAddrY
,
GlobÆTextTP
;

211 
öt32_t
 
GlobÆTextABR
,
GlobÆTextPAGE
;

212 
ly0
,
lx0
,
ly1
,
lx1
,
ly2
,
lx2
,
ly3
,
lx3
;

213 
lLowî∑π
;

214 
BOOL
 
bCheckMask
;

215 
sSëMask
;

216 
lSëMask
;

217 
g_m1
;

218 
g_m2
;

219 
g_m3
;

220 
DøwSemiTøns
;

224 
BOOL
 
bUsögTWö
;

225 
TWö_t
 
TWö
;

226 (*
¥imTabÀJ
[256])(*);

227 (*
¥imTabÀSkù
[256])(*);

228 
usMúr‹
;

229 
iDôhî
;

230 
uöt32_t
 
dwCfgFixes
;

231 
uöt32_t
 
dwA˘Fixes
;

232 
iU£Fixes
;

233 
iU£Dôhî
;

234 
BOOL
 
bDoVSyncUpd©e
;

235 
öt32_t
 
døwX
;

236 
öt32_t
 
døwY
;

237 
öt32_t
 
døwW
;

238 
öt32_t
 
døwH
;

242 
	#OPAQUEON
 10

	)

243 
	#OPAQUEOFF
 11

	)

245 
	#KEY_RESETTEXSTORE
 1

	)

246 
	#KEY_SHOWFPS
 2

	)

247 
	#KEY_RESETOPAQUE
 4

	)

248 
	#KEY_RESETDITHER
 8

	)

249 
	#KEY_RESETFILTER
 16

	)

250 
	#KEY_RESETADVBLEND
 32

	)

251 
	#KEY_BADTEXTURES
 128

	)

252 
	#KEY_CHECKTHISOUT
 256

	)

254 #i‡!
	`deföed
(
__BIG_ENDIAN__
Ë|| deföed(
__x86_64__
Ë|| deföed(
__i386__
)

255 #i‚de‡
__LITTLE_ENDIAN__


256 
	#__LITTLE_ENDIAN__


	)

260 #ifde‡
__LITTLE_ENDIAN__


261 
	#RED
(
x
Ë(x & 0xff)

	)

262 
	#BLUE
(
x
Ë((x>>16Ë& 0xff)

	)

263 
	#GREEN
(
x
Ë((x>>8Ë& 0xff)

	)

264 
	#COLOR
(
x
Ë(x & 0xffffff)

	)

265 #ñi‡
deföed
 
__BIG_ENDIAN__


266 
	#RED
(
x
Ë((x>>24Ë& 0xff)

	)

267 
	#BLUE
(
x
Ë((x>>8Ë& 0xff)

	)

268 
	#GREEN
(
x
Ë((x>>16Ë& 0xff)

	)

269 
	#COLOR
(
x
Ë
	`SWAP32
(x & 0xffffff)

	)

274 
VRAMLﬂd_t
 
VRAMWrôe
;

275 
VRAMLﬂd_t
 
VRAMRód
;

276 
DATAREGISTERMODES
 
D©aWrôeMode
;

277 
DATAREGISTERMODES
 
D©aRódMode
;

278 
sDi•Widths
[];

279 
BOOL
 
bDebugText
;

280 
PSXDi•œy_t
 
PSXDi•œy
;

281 
PSXDi•œy_t
 
PªviousPSXDi•œy
;

282 
BOOL
 
bSkùNextFøme
;

283 
lGPU°©usRë
;

284 * 
psxVSecuª
;

285 * 
psxVub
;

286 sig√d * 
psxVsb
;

287 * 
psxVuw
;

288 sig√d * 
psxVsw
;

289 
uöt32_t
 * 
psxVul
;

290 
öt32_t
 * 
psxV¶
;

291 * 
psxVuw_eom
;

292 
BOOL
 
bCh™geWöMode
;

293 
lSñe˘edSlŸ
;

294 
BOOL
 
bInôC≠
;

295 
DWORD
 
dwLa˚C¡
;

296 
uöt32_t
 
lGPUInfoVÆs
[];

297 
uöt32_t
 
ulSètusC⁄åﬁ
[];

301 
U£FømeLimô
;

302 
U£FømeSkù
;

303 
fFømeR©e
;

304 
iFømeLimô
;

305 
fFømeR©eHz
;

306 
Âs_skù
;

307 
Âs_cur
;

311 
	`DoBuf„rSw≠
();

312 
	`DoCÀ¨S¸ìnBuf„r
();

313 
	`DoCÀ¨Fr⁄tBuf„r
();

314 
	`ulInôDi•œy
();

315 
	`Clo£Di•œy
();

317 
ª¨med_cbs
;

318 c⁄° 
ª¨med_cbs
 *
rcbs
;

	@plugins/dfxvideo/gpulib_if.c

15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

18 
	~"../gpulib/gpu.h
"

20 
	#u32
 
uöt32_t


	)

22 
	#INFO_TW
 0

	)

23 
	#INFO_DRAWSTART
 1

	)

24 
	#INFO_DRAWEND
 2

	)

25 
	#INFO_DRAWOFF
 3

	)

27 
	#SHADETEXBIT
(
x
Ë((x>>24Ë& 0x1)

	)

28 
	#SEMITRANSBIT
(
x
Ë((x>>25Ë& 0x1)

	)

29 
	#PSXRGB
(
r
,
g
,
b
Ë((g<<10)|(b<<5)|r)

	)

31 
	#DATAREGISTERMODES
 

	)

33 
	#DR_NORMAL
 0

	)

34 
	#DR_VRAMTRANSFER
 1

	)

36 
	#GPUSTATUS_READYFORVRAM
 0x08000000

	)

40 
	#SWAP16
(
x
Ë({ 
uöt16_t
 
y
=(x); (((y)>>8 & 0xffË| ((y)<<8 & 0xff00)); })

	)

41 
	#SWAP32
(
x
Ë({ 
uöt32_t
 
y
=(x); (((y)>>24 & 0xffulË| ((y)>>8 & 0xff00ulË| ((y)<<8 & 0xff0000ulË| ((y)<<24 & 0xff000000ul)); })

	)

43 #ifde‡
__BIG_ENDIAN__


46 
	#HOST2LE32
(
x
Ë
	`SWAP32
(x)

	)

47 
	#HOST2BE32
(
x
Ë(x)

	)

48 
	#LE2HOST32
(
x
Ë
	`SWAP32
(x)

	)

49 
	#BE2HOST32
(
x
Ë(x)

	)

51 
	#HOST2LE16
(
x
Ë
	`SWAP16
(x)

	)

52 
	#HOST2BE16
(
x
Ë(x)

	)

53 
	#LE2HOST16
(
x
Ë
	`SWAP16
(x)

	)

54 
	#BE2HOST16
(
x
Ë(x)

	)

59 
	#HOST2LE32
(
x
Ë(x)

	)

60 
	#HOST2BE32
(
x
Ë
	`SWAP32
(x)

	)

61 
	#LE2HOST32
(
x
Ë(x)

	)

62 
	#BE2HOST32
(
x
Ë
	`SWAP32
(x)

	)

64 
	#HOST2LE16
(
x
Ë(x)

	)

65 
	#HOST2BE16
(
x
Ë
	`SWAP16
(x)

	)

66 
	#LE2HOST16
(
x
Ë(x)

	)

67 
	#BE2HOST16
(
x
Ë
	`SWAP16
(x)

	)

71 
	#GETLEs16
(
X
Ë((
öt16_t
)
	`GETLE16
((
uöt16_t
 *)X))

	)

72 
	#GETLEs32
(
X
Ë((
öt16_t
)
	`GETLE32
((
uöt16_t
 *)X))

	)

74 
	#GETLE16
(
X
Ë
	`LE2HOST16
(*(
uöt16_t
 *)X)

	)

75 
	#GETLE32_
(
X
Ë
	`LE2HOST32
(*(
uöt32_t
 *)X)

	)

76 
	#GETLE16D
(
X
Ë({
uöt32_t
 
vÆ
 = 
	`GETLE32
(X); (vÆ<<16 | vÆ >> 16);})

	)

77 
	#PUTLE16
(
X
, 
Y
Ëdo{*((
uöt16_t
 *)X)=
	`HOST2LE16
((uöt16_t)Y);}0)

	)

78 
	#PUTLE32_
(
X
, 
Y
Ëdo{*((
uöt32_t
 *)X)=
	`HOST2LE16
((uöt32_t)Y);}0)

	)

79 #ifde‡
__¨m__


80 
	#GETLE32
(
X
Ë(*(
uöt16_t
 *)(X)|(((uöt16_à*)(X))[1]<<16))

	)

81 
	#PUTLE32
(
X
, 
Y
Ëdo{
uöt16_t
 *
p_
=(uöt16_à*)(X);
uöt32_t
 
y_
=Y;p_[0]=y_;p_[1]=y_>>16;}0)

	)

83 
	#GETLE32
 
GETLE32_


	)

84 
	#PUTLE32
 
PUTLE32_


	)

89 
	sVRAMLOADTTAG


91 
	mx
;

92 
	my
;

93 
	mWidth
;

94 
	mHeight
;

95 
	mRowsRemaöög
;

96 
	mCﬁsRemaöög
;

97 *
	mImagePå
;

98 } 
	tVRAMLﬂd_t
;

102 
	sPSXPOINTTAG


104 
öt32_t
 
	mx
;

105 
öt32_t
 
	my
;

106 } 
	tPSXPoöt_t
;

108 
	sPSXSPOINTTAG


110 
	mx
;

111 
	my
;

112 } 
	tPSXSPoöt_t
;

114 
	sPSXRECTTAG


116 
	mx0
;

117 
	mx1
;

118 
	my0
;

119 
	my1
;

120 } 
	tPSXRe˘_t
;

124 
	#FALSE
 0

	)

125 
	#TRUE
 1

	)

126 
	#BOOL
 

	)

127 
	#LOWORD
(
l
Ë(()÷))

	)

128 
	#HIWORD
(
l
Ë(()(((
uöt32_t
)÷Ë>> 16Ë& 0xFFFF))

	)

129 
	#max
(
a
,
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

130 
	#mö
(
a
,
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

131 
	#DWORD
 
uöt32_t


	)

132 #i‚de‡
__öt64


133 
	#__öt64
 

	)

136 
	sRECTTAG


138 
	mÀ·
;

139 
	mt›
;

140 
	mright
;

141 
	mbŸtom
;

142 }
	tRECT
;

146 
	sTWINTAG


148 
PSXRe˘_t
 
	mPosôi⁄
;

149 
	mxmask
, 
	mymask
;

150 } 
	tTWö_t
;

154 
	sPSXDISPLAYTAG


156 
PSXPoöt_t
 
	mDi•œyModeNew
;

157 
PSXPoöt_t
 
	mDi•œyMode
;

158 
PSXPoöt_t
 
	mDi•œyPosôi⁄
;

159 
PSXPoöt_t
 
	mDi•œyEnd
;

161 
öt32_t
 
	mDoubÀ
;

162 
öt32_t
 
	mHeight
;

163 
öt32_t
 
	mPAL
;

164 
öt32_t
 
	mI¡îœ˚dNew
;

165 
öt32_t
 
	mI¡îœ˚d
;

166 
öt32_t
 
	mRGB24New
;

167 
öt32_t
 
	mRGB24
;

168 
PSXSPoöt_t
 
	mDøwOff£t
;

169 
öt32_t
 
	mDißbÀd
;

170 
PSXRe˘_t
 
	mR™ge
;

172 } 
	tPSXDi•œy_t
;

178 
öt32_t
 
GlobÆTextAddrX
,
GlobÆTextAddrY
,
GlobÆTextTP
;

179 
öt32_t
 
GlobÆTextABR
,
GlobÆTextPAGE
;

180 
ly0
,
lx0
,
ly1
,
lx1
,
ly2
,
lx2
,
ly3
,
lx3
;

181 
lLowî∑π
;

182 
BOOL
 
bCheckMask
;

183 
sSëMask
;

184 
lSëMask
;

185 
g_m1
;

186 
g_m2
;

187 
g_m3
;

188 
DøwSemiTøns
;

192 
BOOL
 
bUsögTWö
;

193 
TWö_t
 
TWö
;

194 (*
¥imTabÀJ
[256])(*);

195 (*
¥imTabÀSkù
[256])(*);

196 
usMúr‹
;

197 
iDôhî
;

198 
uöt32_t
 
dwCfgFixes
;

199 
uöt32_t
 
dwA˘Fixes
;

200 
iU£Fixes
;

201 
iU£Dôhî
;

202 
BOOL
 
bDoVSyncUpd©e
;

203 
öt32_t
 
døwX
;

204 
öt32_t
 
døwY
;

205 
öt32_t
 
døwW
;

206 
öt32_t
 
døwH
;

210 
	#OPAQUEON
 10

	)

211 
	#OPAQUEOFF
 11

	)

213 
	#KEY_RESETTEXSTORE
 1

	)

214 
	#KEY_SHOWFPS
 2

	)

215 
	#KEY_RESETOPAQUE
 4

	)

216 
	#KEY_RESETDITHER
 8

	)

217 
	#KEY_RESETFILTER
 16

	)

218 
	#KEY_RESETADVBLEND
 32

	)

219 
	#KEY_BADTEXTURES
 128

	)

220 
	#KEY_CHECKTHISOUT
 256

	)

222 #i‡!
	`deföed
(
__BIG_ENDIAN__
Ë|| deföed(
__x86_64__
Ë|| deföed(
__i386__
)

223 #i‚de‡
__LITTLE_ENDIAN__


224 
	#__LITTLE_ENDIAN__


	)

228 #ifde‡
__LITTLE_ENDIAN__


229 
	#RED
(
x
Ë(x & 0xff)

	)

230 
	#BLUE
(
x
Ë((x>>16Ë& 0xff)

	)

231 
	#GREEN
(
x
Ë((x>>8Ë& 0xff)

	)

232 
	#COLOR
(
x
Ë(x & 0xffffff)

	)

233 #ñi‡
deföed
 
__BIG_ENDIAN__


234 
	#RED
(
x
Ë((x>>24Ë& 0xff)

	)

235 
	#BLUE
(
x
Ë((x>>8Ë& 0xff)

	)

236 
	#GREEN
(
x
Ë((x>>16Ë& 0xff)

	)

237 
	#COLOR
(
x
Ë
	`SWAP32
(x & 0xffffff)

	)

240 
PSXDi•œy_t
 
PSXDi•œy
;

241 *
psxVub
;

242 sig√d *
psxVsb
;

243 *
psxVuw
;

244 *
psxVuw_eom
;

245 sig√d *
psxVsw
;

246 
uöt32_t
 *
psxVul
;

247 
öt32_t
 *
psxV¶
;

249 
lGPU°©usRë
;

250 
uöt32_t
 
lGPUInfoVÆs
[16];

252 
VRAMLﬂd_t
 
VRAMWrôe
;

253 
VRAMLﬂd_t
 
VRAMRód
;

255 
DATAREGISTERMODES
 
D©aWrôeMode
;

256 
DATAREGISTERMODES
 
D©aRódMode
;

258 
BOOL
 
bCheckMask
 = 
FALSE
;

259 
sSëMask
 = 0;

260 
lSëMask
 = 0;

261 
lLowî∑π
;

263 
	~"so·.c
"

264 
	~"¥im.c
"

268 
	$£t_vøm
(*
vøm
)

270 
psxVub
=
vøm
;

272 
psxVsb
=(sig√d *)
psxVub
;

273 
psxVsw
=(sig√d *)
psxVub
;

274 
psxV¶
=(
öt32_t
 *)
psxVub
;

275 
psxVuw
=(*)
psxVub
;

276 
psxVul
=(
uöt32_t
 *)
psxVub
;

278 
psxVuw_eom
=
psxVuw
+1024*512;

279 
	}
}

281 
	$ªndîî_öô
()

283 
	`£t_vøm
(
gpu
.
vøm
);

285 
PSXDi•œy
.
RGB24
 = 
FALSE
;

286 
PSXDi•œy
.
I¡îœ˚d
 = 
FALSE
;

287 
PSXDi•œy
.
DøwOff£t
.
x
 = 0;

288 
PSXDi•œy
.
DøwOff£t
.
y
 = 0;

289 
PSXDi•œy
.
Di•œyMode
.
x
= 320;

290 
PSXDi•œy
.
Di•œyMode
.
y
= 240;

291 
PSXDi•œy
.
DißbÀd
 = 
FALSE
;

292 
PSXDi•œy
.
R™ge
.
x0
=0;

293 
PSXDi•œy
.
R™ge
.
x1
=0;

294 
PSXDi•œy
.
DoubÀ
 = 1;

296 
D©aWrôeMode
 = 
DR_NORMAL
;

297 
lGPU°©usRë
 = 0x14802000;

300 
	}
}

302 
	$ªndîî_föish
()

304 
	}
}

306 
	$ªndîî_nŸify_ªs_ch™ge
()

308 
	}
}

310 c⁄° 
cmd_Àngths
[256];

312 
	$do_cmd_li°
(*
li°
, 
li°_Àn
, *
œ°_cmd
)

314 
cmd
 = 0, 
Àn
;

315 *
li°_°¨t
 = 
li°
;

316 *
li°_íd
 = 
li°
 + 
li°_Àn
;

318 ; 
li°
 < 
li°_íd
;Üi° +1 + 
Àn
)

320 
cmd
 = *
li°
 >> 24;

321 
Àn
 = 
cmd_Àngths
[
cmd
];

322 i‡(
li°
 + 1 + 
Àn
 > 
li°_íd
) {

323 
cmd
 = -1;

327 #i‚de‡
TEST


328 i‡(
cmd
 == 0xa0 || cmd == 0xc0)

330 i‡((
cmd
 & 0xf8) == 0xe0)

331 
gpu
.
ex_ªgs
[
cmd
 & 7] = 
li°
[0];

334 
¥imTabÀJ
[
cmd
]((*)
li°
);

336 
cmd
)

340 
u32
 
num_vîãxes
 = 2;

341 
u32
 *
li°_posôi⁄
 = &(
li°
[3]);

345 if(
li°_posôi⁄
 >
li°_íd
) {

346 
cmd
 = -1;

347 
bªaklo›
;

350 if((*
li°_posôi⁄
 & 0xf000f000) == 0x50005000)

353 
li°_posôi⁄
++;

354 
num_vîãxes
++;

357 
Àn
 +(
num_vîãxes
 - 2);

363 
u32
 
num_vîãxes
 = 2;

364 
u32
 *
li°_posôi⁄
 = &(
li°
[4]);

368 if(
li°_posôi⁄
 >
li°_íd
) {

369 
cmd
 = -1;

370 
bªaklo›
;

373 if((*
li°_posôi⁄
 & 0xf000f000) == 0x50005000)

376 
li°_posôi⁄
 += 2;

377 
num_vîãxes
++;

380 
Àn
 +(
num_vîãxes
 - 2) * 2;

384 #ifde‡
TEST


387 *
¶i°
 = (*)
li°
;

388 
u32
 
lﬂd_width
 = 
¶i°
[4];

389 
u32
 
lﬂd_height
 = 
¶i°
[5];

390 
u32
 
lﬂd_size
 = 
lﬂd_width
 * 
lﬂd_height
;

392 
Àn
 +
lﬂd_size
 / 2;

399 
bªaklo›
:

400 
gpu
.
ex_ªgs
[1] &= ~0x1ff;

401 
gpu
.
ex_ªgs
[1] |
lGPU°©usRë
 & 0x1ff;

403 *
œ°_cmd
 = 
cmd
;

404  
li°
 - 
li°_°¨t
;

405 
	}
}

407 
	$ªndîî_sync_ecmds
(
uöt32_t
 *
ecmds
)

409 
	`cmdTextuªPage
((*)&
ecmds
[1]);

410 
	`cmdTextuªWödow
((*)&
ecmds
[2]);

411 
	`cmdDøwAªaSèπ
((*)&
ecmds
[3]);

412 
	`cmdDøwAªaEnd
((*)&
ecmds
[4]);

413 
	`cmdDøwOff£t
((*)&
ecmds
[5]);

414 
	`cmdSTP
((*)&
ecmds
[6]);

415 
	}
}

417 
	$ªndîî_upd©e_ˇches
(
x
, 
y
, 
w
, 
h
)

419 
	}
}

421 
	$ªndîî_Êush_queues
()

423 
	}
}

425 
	$ªndîî_£t_öãæa˚
(
íabÀ
, 
is_odd
)

427 
	}
}

429 
	~"../../‰⁄ãnd/∂ugö_lib.h
"

431 
	$ªndîî_£t_c⁄fig
(c⁄° 
ª¨med_cbs
 *
cbs
)

433 
iU£Dôhî
 = 
cbs
->
gpu_≥›s
.iUseDither;

434 
dwA˘Fixes
 = 
cbs
->
gpu_≥›s
.dwActFixes;

435 i‡(
cbs
->
∂_£t_gpu_ˇps
)

436 
cbs
->
	`∂_£t_gpu_ˇps
(0);

437 
	`£t_vøm
(
gpu
.
vøm
);

438 
	}
}

	@plugins/dfxvideo/prim.c

22 
BOOL
 
	gbUsögTWö
=
FALSE
;

23 
TWö_t
 
	gTWö
;

25 
	gusMúr‹
=0;

26 
	giDôhî
=0;

27 
öt32_t
 
	gdøwX
;

28 
öt32_t
 
	gdøwY
;

29 
öt32_t
 
	gdøwW
;

30 
öt32_t
 
	gdøwH
;

31 
uöt32_t
 
	gdwCfgFixes
;

32 
uöt32_t
 
	gdwA˘Fixes
=0;

33 
	giU£Fixes
;

34 
	giU£Dôhî
=0;

35 
BOOL
 
	gbDoVSyncUpd©e
=
FALSE
;

38 
ölöe
 
	$BGR24to16
 (
uöt32_t
 
BGR
)

40  ()(((
BGR
>>3)&0x1f)|((BGR&0xf80000)>>9)|((BGR&0xf800)>>6));

41 
	}
}

47 
ölöe
 
	$Upd©eGlobÆTP
(
gd©a
)

49 
GlobÆTextAddrX
 = (
gd©a
 << 6) & 0x3c0;

51 
GlobÆTextAddrY
 = (
gd©a
 << 4) & 0x100;

53 
GlobÆTextTP
 = (
gd©a
 >> 7) & 0x3;

55 if(
GlobÆTextTP
==3) GlobalTextTP=2;

57 
GlobÆTextABR
 = (
gd©a
 >> 5) & 0x3;

59 
lGPU°©usRë
&=~0x000001ff;

60 
lGPU°©usRë
|=(
gd©a
 & 0x01ff);

62 
iU£Dôhî
)

65 
iDôhî
=0;

68 if(
lGPU°©usRë
&0x0200Ë
iDôhî
=2;

69 
iDôhî
=0;

72 
iDôhî
=2;

75 
	}
}

79 
ölöe
 
	$SëRídîMode
(
uöt32_t
 
DøwAâribuãs
)

81 
DøwSemiTøns
 = (
	`SEMITRANSBIT
(
DøwAâribuãs
)Ë? 
TRUE
 : 
FALSE
;

83 if(
	`SHADETEXBIT
(
DøwAâribuãs
))

84 {
g_m1
=
g_m2
=
g_m3
=128;}

87 if((
dwA˘Fixes
&4Ë&& ((
DøwAâribuãs
&0x00ffffff)==0))

88 
DøwAâribuãs
|=0x007f7f7f;

90 
g_m1
=()(
DøwAâribuãs
&0xff);

91 
g_m2
=()((
DøwAâribuãs
>>8)&0xff);

92 
g_m3
=()((
DøwAâribuãs
>>16)&0xff);

94 
	}
}

111 
	#SIGNSHIFT
 21

	)

112 
	#CHKMAX_X
 1024

	)

113 
	#CHKMAX_Y
 512

	)

115 
ölöe
 
	$Adju°Co‹d4
()

117 
lx0
=()(((Óx0<<
SIGNSHIFT
)>>SIGNSHIFT);

118 
lx1
=()(((Óx1<<
SIGNSHIFT
)>>SIGNSHIFT);

119 
lx2
=()(((Óx2<<
SIGNSHIFT
)>>SIGNSHIFT);

120 
lx3
=()(((Óx3<<
SIGNSHIFT
)>>SIGNSHIFT);

121 
ly0
=()(((Óy0<<
SIGNSHIFT
)>>SIGNSHIFT);

122 
ly1
=()(((Óy1<<
SIGNSHIFT
)>>SIGNSHIFT);

123 
ly2
=()(((Óy2<<
SIGNSHIFT
)>>SIGNSHIFT);

124 
ly3
=()(((Óy3<<
SIGNSHIFT
)>>SIGNSHIFT);

125 
	}
}

127 
ölöe
 
	$Adju°Co‹d3
()

129 
lx0
=()(((Óx0<<
SIGNSHIFT
)>>SIGNSHIFT);

130 
lx1
=()(((Óx1<<
SIGNSHIFT
)>>SIGNSHIFT);

131 
lx2
=()(((Óx2<<
SIGNSHIFT
)>>SIGNSHIFT);

132 
ly0
=()(((Óy0<<
SIGNSHIFT
)>>SIGNSHIFT);

133 
ly1
=()(((Óy1<<
SIGNSHIFT
)>>SIGNSHIFT);

134 
ly2
=()(((Óy2<<
SIGNSHIFT
)>>SIGNSHIFT);

135 
	}
}

137 
ölöe
 
	$Adju°Co‹d2
()

139 
lx0
=()(((Óx0<<
SIGNSHIFT
)>>SIGNSHIFT);

140 
lx1
=()(((Óx1<<
SIGNSHIFT
)>>SIGNSHIFT);

141 
ly0
=()(((Óy0<<
SIGNSHIFT
)>>SIGNSHIFT);

142 
ly1
=()(((Óy1<<
SIGNSHIFT
)>>SIGNSHIFT);

143 
	}
}

145 
ölöe
 
	$Adju°Co‹d1
()

147 
lx0
=()(((Óx0<<
SIGNSHIFT
)>>SIGNSHIFT);

148 
ly0
=()(((Óy0<<
SIGNSHIFT
)>>SIGNSHIFT);

150 if(
lx0
<-512 && 
PSXDi•œy
.
DøwOff£t
.
x
<=-512)

151 
lx0
+=2048;

153 if(
ly0
<-512 && 
PSXDi•œy
.
DøwOff£t
.
y
<=-512)

154 
ly0
+=2048;

155 
	}
}

171 
ölöe
 
BOOL
 
	$CheckCo‹d4
()

173 if(
lx0
<0)

175 if(((
lx1
-
lx0
)>
CHKMAX_X
) ||

176 ((
lx2
-
lx0
)>
CHKMAX_X
))

178 if(
lx3
<0)

180 if((
lx1
-
lx3
)>
CHKMAX_X
Ë 
TRUE
;

181 if((
lx2
-
lx3
)>
CHKMAX_X
Ë 
TRUE
;

185 if(
lx1
<0)

187 if((
lx0
-
lx1
)>
CHKMAX_X
Ë 
TRUE
;

188 if((
lx2
-
lx1
)>
CHKMAX_X
Ë 
TRUE
;

189 if((
lx3
-
lx1
)>
CHKMAX_X
Ë 
TRUE
;

191 if(
lx2
<0)

193 if((
lx0
-
lx2
)>
CHKMAX_X
Ë 
TRUE
;

194 if((
lx1
-
lx2
)>
CHKMAX_X
Ë 
TRUE
;

195 if((
lx3
-
lx2
)>
CHKMAX_X
Ë 
TRUE
;

197 if(
lx3
<0)

199 if(((
lx1
-
lx3
)>
CHKMAX_X
) ||

200 ((
lx2
-
lx3
)>
CHKMAX_X
))

202 if(
lx0
<0)

204 if((
lx1
-
lx0
)>
CHKMAX_X
Ë 
TRUE
;

205 if((
lx2
-
lx0
)>
CHKMAX_X
Ë 
TRUE
;

211 if(
ly0
<0)

213 if((
ly1
-
ly0
)>
CHKMAX_Y
Ë 
TRUE
;

214 if((
ly2
-
ly0
)>
CHKMAX_Y
Ë 
TRUE
;

216 if(
ly1
<0)

218 if((
ly0
-
ly1
)>
CHKMAX_Y
Ë 
TRUE
;

219 if((
ly2
-
ly1
)>
CHKMAX_Y
Ë 
TRUE
;

220 if((
ly3
-
ly1
)>
CHKMAX_Y
Ë 
TRUE
;

222 if(
ly2
<0)

224 if((
ly0
-
ly2
)>
CHKMAX_Y
Ë 
TRUE
;

225 if((
ly1
-
ly2
)>
CHKMAX_Y
Ë 
TRUE
;

226 if((
ly3
-
ly2
)>
CHKMAX_Y
Ë 
TRUE
;

228 if(
ly3
<0)

230 if((
ly1
-
ly3
)>
CHKMAX_Y
Ë 
TRUE
;

231 if((
ly2
-
ly3
)>
CHKMAX_Y
Ë 
TRUE
;

234  
FALSE
;

235 
	}
}

237 
ölöe
 
BOOL
 
	$CheckCo‹d3
()

239 if(
lx0
<0)

241 if((
lx1
-
lx0
)>
CHKMAX_X
Ë 
TRUE
;

242 if((
lx2
-
lx0
)>
CHKMAX_X
Ë 
TRUE
;

244 if(
lx1
<0)

246 if((
lx0
-
lx1
)>
CHKMAX_X
Ë 
TRUE
;

247 if((
lx2
-
lx1
)>
CHKMAX_X
Ë 
TRUE
;

249 if(
lx2
<0)

251 if((
lx0
-
lx2
)>
CHKMAX_X
Ë 
TRUE
;

252 if((
lx1
-
lx2
)>
CHKMAX_X
Ë 
TRUE
;

254 if(
ly0
<0)

256 if((
ly1
-
ly0
)>
CHKMAX_Y
Ë 
TRUE
;

257 if((
ly2
-
ly0
)>
CHKMAX_Y
Ë 
TRUE
;

259 if(
ly1
<0)

261 if((
ly0
-
ly1
)>
CHKMAX_Y
Ë 
TRUE
;

262 if((
ly2
-
ly1
)>
CHKMAX_Y
Ë 
TRUE
;

264 if(
ly2
<0)

266 if((
ly0
-
ly2
)>
CHKMAX_Y
Ë 
TRUE
;

267 if((
ly1
-
ly2
)>
CHKMAX_Y
Ë 
TRUE
;

270  
FALSE
;

271 
	}
}

274 
ölöe
 
BOOL
 
	$CheckCo‹d2
()

276 if(
lx0
<0)

278 if((
lx1
-
lx0
)>
CHKMAX_X
Ë 
TRUE
;

280 if(
lx1
<0)

282 if((
lx0
-
lx1
)>
CHKMAX_X
Ë 
TRUE
;

284 if(
ly0
<0)

286 if((
ly1
-
ly0
)>
CHKMAX_Y
Ë 
TRUE
;

288 if(
ly1
<0)

290 if((
ly0
-
ly1
)>
CHKMAX_Y
Ë 
TRUE
;

293  
FALSE
;

294 
	}
}

296 
ölöe
 
BOOL
 
	$CheckCo‹dL
(
¶x0
,
¶y0
,
¶x1
,
¶y1
)

298 if(
¶x0
<0)

300 if((
¶x1
-
¶x0
)>
CHKMAX_X
Ë 
TRUE
;

302 if(
¶x1
<0)

304 if((
¶x0
-
¶x1
)>
CHKMAX_X
Ë 
TRUE
;

306 if(
¶y0
<0)

308 if((
¶y1
-
¶y0
)>
CHKMAX_Y
Ë 
TRUE
;

310 if(
¶y1
<0)

312 if((
¶y0
-
¶y1
)>
CHKMAX_Y
Ë 
TRUE
;

315  
FALSE
;

316 
	}
}

323 
ölöe
 
	$cmdSTP
(* 
ba£Addr
)

325 
uöt32_t
 
gd©a
 = 
	`GETLE32
(&((uöt32_t*)
ba£Addr
)[0]);

327 
lGPU°©usRë
&=~0x1800;

328 
lGPU°©usRë
|=((
gd©a
 & 0x03) << 11);

330 if(
gd©a
&1Ë{
sSëMask
=0x8000;
lSëMask
=0x80008000;}

331 {
sSëMask
=0; 
lSëMask
=0; }

333 if(
gd©a
&2Ë
bCheckMask
=
TRUE
;

334 
bCheckMask
=
FALSE
;

335 
	}
}

341 
	$cmdTextuªPage
(* 
ba£Addr
)

343 
uöt32_t
 
gd©a
 = 
	`GETLE32
(&((uöt32_t*)
ba£Addr
)[0]);

345 
lGPU°©usRë
&=~0x000007ff;

346 
lGPU°©usRë
|=(
gd©a
 & 0x07ff);

348 
usMúr‹
=
gd©a
&0x3000;

350 
	`Upd©eGlobÆTP
(()
gd©a
);

351 
	}
}

357 
	$cmdTextuªWödow
(*
ba£Addr
)

359 
uöt32_t
 
gd©a
 = 
	`GETLE32
(&((uöt32_t*)
ba£Addr
)[0]);

361 
uöt32_t
 
YAlign
,
XAlign
;

363 
lGPUInfoVÆs
[
INFO_TW
]=
gd©a
&0xFFFFF;

365 if(
gd©a
 & 0x020)

366 
TWö
.
Posôi⁄
.
y1
 = 8;

367 i‡(
gd©a
 & 0x040)

368 
TWö
.
Posôi⁄
.
y1
 = 16;

369 i‡(
gd©a
 & 0x080)

370 
TWö
.
Posôi⁄
.
y1
 = 32;

371 i‡(
gd©a
 & 0x100)

372 
TWö
.
Posôi⁄
.
y1
 = 64;

373 i‡(
gd©a
 & 0x200)

374 
TWö
.
Posôi⁄
.
y1
 = 128;

376 
TWö
.
Posôi⁄
.
y1
 = 256;

377 
TWö
.
ymask
 = TWö.
Posôi⁄
.
y1
 - 1;

381 i‡(
gd©a
 & 0x001)

382 
TWö
.
Posôi⁄
.
x1
 = 8;

383 i‡(
gd©a
 & 0x002)

384 
TWö
.
Posôi⁄
.
x1
 = 16;

385 i‡(
gd©a
 & 0x004)

386 
TWö
.
Posôi⁄
.
x1
 = 32;

387 i‡(
gd©a
 & 0x008)

388 
TWö
.
Posôi⁄
.
x1
 = 64;

389 i‡(
gd©a
 & 0x010)

390 
TWö
.
Posôi⁄
.
x1
 = 128;

392 
TWö
.
Posôi⁄
.
x1
 = 256;

393 
TWö
.
xmask
 = TWö.
Posôi⁄
.
x1
 - 1;

398 
YAlign
 = (
uöt32_t
)(32 - (
TWö
.
Posôi⁄
.
y1
 >> 3));

399 
XAlign
 = (
uöt32_t
)(32 - (
TWö
.
Posôi⁄
.
x1
 >> 3));

403 
TWö
.
Posôi⁄
.
y0
 = ()(((
gd©a
 >> 15Ë& 
YAlign
) << 3);

404 
TWö
.
Posôi⁄
.
x0
 = ()(((
gd©a
 >> 10Ë& 
XAlign
) << 3);

406 if((
TWö
.
Posôi⁄
.
x0
 == 0 &&

407 
TWö
.
Posôi⁄
.
y0
 == 0 &&

408 
TWö
.
Posôi⁄
.
x1
 == 0 &&

409 
TWö
.
Posôi⁄
.
y1
 == 0) ||

410 (
TWö
.
Posôi⁄
.
x1
 == 256 &&

411 
TWö
.
Posôi⁄
.
y1
 == 256))

413 
bUsögTWö
 = 
FALSE
;

417 
bUsögTWö
 = 
TRUE
;

419 
	}
}

427 
	$cmdDøwAªaSèπ
(* 
ba£Addr
)

429 
uöt32_t
 
gd©a
 = 
	`GETLE32
(&((uöt32_t*)
ba£Addr
)[0]);

431 
døwX
 = 
gd©a
 & 0x3ff;

433 
lGPUInfoVÆs
[
INFO_DRAWSTART
]=
gd©a
&0xFFFFF;

434 
døwY
 = (
gd©a
>>10)&0x3ff;

435 if(
døwY
>=512) drawY=511;

436 
	}
}

442 
	$cmdDøwAªaEnd
(* 
ba£Addr
)

444 
uöt32_t
 
gd©a
 = 
	`GETLE32
(&((uöt32_t*)
ba£Addr
)[0]);

446 
døwW
 = 
gd©a
 & 0x3ff;

448 
lGPUInfoVÆs
[
INFO_DRAWEND
]=
gd©a
&0xFFFFF;

449 
døwH
 = (
gd©a
>>10)&0x3ff;

450 if(
døwH
>=512) drawH=511;

451 
	}
}

457 
	$cmdDøwOff£t
(* 
ba£Addr
)

459 
uöt32_t
 
gd©a
 = 
	`GETLE32
(&((uöt32_t*)
ba£Addr
)[0]);

461 
PSXDi•œy
.
DøwOff£t
.
x
 = ()(
gd©a
 & 0x7ff);

463 
lGPUInfoVÆs
[
INFO_DRAWOFF
]=
gd©a
&0x3FFFFF;

464 
PSXDi•œy
.
DøwOff£t
.
y
 = ()((
gd©a
>>11) & 0x7ff);

466 
PSXDi•œy
.
DøwOff£t
.
y
=()((()PSXDisplay.DrawOffset.y<<21)>>21);

467 
PSXDi•œy
.
DøwOff£t
.
x
=()((()PSXDisplay.DrawOffset.x<<21)>>21);

468 
	}
}

474 
	$¥imLﬂdImage
(* 
ba£Addr
)

476 *
sgpuD©a
 = ((*Ë
ba£Addr
);

478 
VRAMWrôe
.
x
 = 
	`GETLEs16
(&
sgpuD©a
[2])&0x3ff;

479 
VRAMWrôe
.
y
 = 
	`GETLEs16
(&
sgpuD©a
[3])&511;

480 
VRAMWrôe
.
Width
 = 
	`GETLEs16
(&
sgpuD©a
[4]);

481 
VRAMWrôe
.
Height
 = 
	`GETLEs16
(&
sgpuD©a
[5]);

483 
D©aWrôeMode
 = 
DR_VRAMTRANSFER
;

485 
VRAMWrôe
.
ImagePå
 = 
psxVuw
 + (VRAMWrôe.
y
<<10Ë+ VRAMWrôe.
x
;

486 
VRAMWrôe
.
RowsRemaöög
 = VRAMWrôe.
Width
;

487 
VRAMWrôe
.
CﬁsRemaöög
 = VRAMWrôe.
Height
;

488 
	}
}

494 
	$¥imSt‹eImage
(* 
ba£Addr
)

496 *
sgpuD©a
 = ((*Ë
ba£Addr
);

498 
VRAMRód
.
x
 = 
	`GETLEs16
(&
sgpuD©a
[2])&0x03ff;

499 
VRAMRód
.
y
 = 
	`GETLEs16
(&
sgpuD©a
[3])&511;

500 
VRAMRód
.
Width
 = 
	`GETLEs16
(&
sgpuD©a
[4]);

501 
VRAMRód
.
Height
 = 
	`GETLEs16
(&
sgpuD©a
[5]);

503 
VRAMRód
.
ImagePå
 = 
psxVuw
 + (VRAMRód.
y
<<10Ë+ VRAMRód.
x
;

504 
VRAMRód
.
RowsRemaöög
 = VRAMRód.
Width
;

505 
VRAMRód
.
CﬁsRemaöög
 = VRAMRód.
Height
;

507 
D©aRódMode
 = 
DR_VRAMTRANSFER
;

509 
lGPU°©usRë
 |
GPUSTATUS_READYFORVRAM
;

510 
	}
}

516 
	$¥imBlkFûl
(* 
ba£Addr
)

518 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

519 *
sgpuD©a
 = ((*Ë
ba£Addr
);

521 
sX
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

522 
sY
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

523 
sW
 = 
	`GETLEs16
(&
sgpuD©a
[4]) & 0x3ff;

524 
sH
 = 
	`GETLEs16
(&
sgpuD©a
[5]) & 0x3ff;

526 
sW
 = (sW+15) & ~15;

529 i‡(
sH
 >= 1023) sH=1024;

530 i‡(
sW
 >= 1023) sW=1024;

533 
sW
+=
sX
;

534 
sH
+=
sY
;

536 
	`FûlSo·w¨eAªa
(
sX
, 
sY
, 
sW
, 
sH
, 
	`BGR24to16
(
	`GETLE32
(&
gpuD©a
[0])));

538 
bDoVSyncUpd©e
=
TRUE
;

539 
	}
}

545 
	$¥imMoveImage
(* 
ba£Addr
)

547 *
sgpuD©a
 = ((*Ë
ba£Addr
);

549 
imageY0
,
imageX0
,
imageY1
,
imageX1
,
imageSX
,
imageSY
,
i
,
j
;

551 
imageX0
 = 
	`GETLEs16
(&
sgpuD©a
[2])&0x03ff;

552 
imageY0
 = 
	`GETLEs16
(&
sgpuD©a
[3])&511;

553 
imageX1
 = 
	`GETLEs16
(&
sgpuD©a
[4])&0x03ff;

554 
imageY1
 = 
	`GETLEs16
(&
sgpuD©a
[5])&511;

555 
imageSX
 = 
	`GETLEs16
(&
sgpuD©a
[6]);

556 
imageSY
 = 
	`GETLEs16
(&
sgpuD©a
[7]);

558 if((
imageX0
 =
imageX1
Ë&& (
imageY0
 =
imageY1
)) ;

559 if(
imageSX
<=0) ;

560 if(
imageSY
<=0) ;

562 if((
imageY0
+
imageSY
)>512 ||

563 (
imageX0
+
imageSX
)>1024 ||

564 (
imageY1
+
imageSY
)>512 ||

565 (
imageX1
+
imageSX
)>1024)

567 
i
,
j
;

568 
j
=0;j<
imageSY
;j++)

569 
i
=0;i<
imageSX
;i++)

570 
psxVuw
 [(1024*((
imageY1
+
j
)&511))+((
imageX1
+
i
)&0x3ff)]=

571 
psxVuw
[(1024*((
imageY0
+
j
)&511))+((
imageX0
+
i
)&0x3ff)];

573 
bDoVSyncUpd©e
=
TRUE
;

578 if((
imageSX
|
imageX0
|
imageX1
)&1)

580 *
SRCPå
, *
DSTPå
;

581 
LöeOff£t
;

583 
SRCPå
 = 
psxVuw
 + (1024*
imageY0
Ë+ 
imageX0
;

584 
DSTPå
 = 
psxVuw
 + (1024*
imageY1
Ë+ 
imageX1
;

586 
LöeOff£t
 = 1024 - 
imageSX
;

588 
j
=0;j<
imageSY
;j++)

590 
i
=0;i<
imageSX
;i++Ë*
DSTPå
++ = *
SRCPå
++;

591 
SRCPå
 +
LöeOff£t
;

592 
DSTPå
 +
LöeOff£t
;

597 
uöt32_t
 *
SRCPå
, *
DSTPå
;

598 
LöeOff£t
;

599 
dx
=
imageSX
>>1;

601 
SRCPå
 = (
uöt32_t
 *)(
psxVuw
 + (1024*
imageY0
Ë+ 
imageX0
);

602 
DSTPå
 = (
uöt32_t
 *)(
psxVuw
 + (1024*
imageY1
Ë+ 
imageX1
);

604 
LöeOff£t
 = 512 - 
dx
;

606 
j
=0;j<
imageSY
;j++)

608 
i
=0;i<
dx
;i++Ë*
DSTPå
++ = *
SRCPå
++;

609 
SRCPå
 +
LöeOff£t
;

610 
DSTPå
 +
LöeOff£t
;

614 
imageSX
+=
imageX1
;

615 
imageSY
+=
imageY1
;

617 
bDoVSyncUpd©e
=
TRUE
;

618 
	}
}

624 
	$¥imTûeS
(* 
ba£Addr
)

626 
uöt32_t
 *
gpuD©a
 = ((uöt32_t*)
ba£Addr
);

627 *
sgpuD©a
 = ((*Ë
ba£Addr
);

628 
sW
 = 
	`GETLEs16
(&
sgpuD©a
[4]) & 0x3ff;

629 
sH
 = 
	`GETLEs16
(&
sgpuD©a
[5]) & 511;

631 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

632 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

634 if(!(
dwA˘Fixes
&8)Ë
	`Adju°Co‹d1
();

637 
ly2
 = 
ly3
 = 
ly0
+
sH
 +
PSXDi•œy
.
DøwOff£t
.
y
;

638 
ly0
 = 
ly1
 =Üy0 +
PSXDi•œy
.
DøwOff£t
.
y
;

639 
lx1
 = 
lx2
 = 
lx0
+
sW
 +
PSXDi•œy
.
DøwOff£t
.
x
;

640 
lx0
 = 
lx3
 =Üx0 +
PSXDi•œy
.
DøwOff£t
.
x
;

642 
DøwSemiTøns
 = (
	`SEMITRANSBIT
(
	`GETLE32
(&
gpuD©a
[0]))Ë? 
TRUE
 : 
FALSE
;

644 
	`FûlSo·w¨eAªaTøns
(
lx0
,
ly0
,
lx2
,
ly2
,

645 
	`BGR24to16
(
	`GETLE32
(&
gpuD©a
[0])));

647 
bDoVSyncUpd©e
=
TRUE
;

648 
	}
}

654 
	$¥imTûe1
(* 
ba£Addr
)

656 
uöt32_t
 *
gpuD©a
 = ((uöt32_t*)
ba£Addr
);

657 *
sgpuD©a
 = ((*Ë
ba£Addr
);

658 
sH
 = 1;

659 
sW
 = 1;

661 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

662 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

664 if(!(
dwA˘Fixes
&8)Ë
	`Adju°Co‹d1
();

667 
ly2
 = 
ly3
 = 
ly0
+
sH
 +
PSXDi•œy
.
DøwOff£t
.
y
;

668 
ly0
 = 
ly1
 =Üy0 +
PSXDi•œy
.
DøwOff£t
.
y
;

669 
lx1
 = 
lx2
 = 
lx0
+
sW
 +
PSXDi•œy
.
DøwOff£t
.
x
;

670 
lx0
 = 
lx3
 =Üx0 +
PSXDi•œy
.
DøwOff£t
.
x
;

672 
DøwSemiTøns
 = (
	`SEMITRANSBIT
(
	`GETLE32
(&
gpuD©a
[0]))Ë? 
TRUE
 : 
FALSE
;

674 
	`FûlSo·w¨eAªaTøns
(
lx0
,
ly0
,
lx2
,
ly2
,

675 
	`BGR24to16
(
	`GETLE32
(&
gpuD©a
[0])));

677 
bDoVSyncUpd©e
=
TRUE
;

678 
	}
}

684 
	$¥imTûe8
(* 
ba£Addr
)

686 
uöt32_t
 *
gpuD©a
 = ((uöt32_t*)
ba£Addr
);

687 *
sgpuD©a
 = ((*Ë
ba£Addr
);

688 
sH
 = 8;

689 
sW
 = 8;

691 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

692 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

694 if(!(
dwA˘Fixes
&8)Ë
	`Adju°Co‹d1
();

697 
ly2
 = 
ly3
 = 
ly0
+
sH
 +
PSXDi•œy
.
DøwOff£t
.
y
;

698 
ly0
 = 
ly1
 =Üy0 +
PSXDi•œy
.
DøwOff£t
.
y
;

699 
lx1
 = 
lx2
 = 
lx0
+
sW
 +
PSXDi•œy
.
DøwOff£t
.
x
;

700 
lx0
 = 
lx3
 =Üx0 +
PSXDi•œy
.
DøwOff£t
.
x
;

702 
DøwSemiTøns
 = (
	`SEMITRANSBIT
(
	`GETLE32
(&
gpuD©a
[0]))Ë? 
TRUE
 : 
FALSE
;

704 
	`FûlSo·w¨eAªaTøns
(
lx0
,
ly0
,
lx2
,
ly2
,

705 
	`BGR24to16
(
	`GETLE32
(&
gpuD©a
[0])));

707 
bDoVSyncUpd©e
=
TRUE
;

708 
	}
}

714 
	$¥imTûe16
(* 
ba£Addr
)

716 
uöt32_t
 *
gpuD©a
 = ((uöt32_t*)
ba£Addr
);

717 *
sgpuD©a
 = ((*Ë
ba£Addr
);

718 
sH
 = 16;

719 
sW
 = 16;

721 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

722 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

724 if(!(
dwA˘Fixes
&8)Ë
	`Adju°Co‹d1
();

727 
ly2
 = 
ly3
 = 
ly0
+
sH
 +
PSXDi•œy
.
DøwOff£t
.
y
;

728 
ly0
 = 
ly1
 =Üy0 +
PSXDi•œy
.
DøwOff£t
.
y
;

729 
lx1
 = 
lx2
 = 
lx0
+
sW
 +
PSXDi•œy
.
DøwOff£t
.
x
;

730 
lx0
 = 
lx3
 =Üx0 +
PSXDi•œy
.
DøwOff£t
.
x
;

732 
DøwSemiTøns
 = (
	`SEMITRANSBIT
(
	`GETLE32
(&
gpuD©a
[0]))Ë? 
TRUE
 : 
FALSE
;

734 
	`FûlSo·w¨eAªaTøns
(
lx0
,
ly0
,
lx2
,
ly2
,

735 
	`BGR24to16
(
	`GETLE32
(&
gpuD©a
[0])));

737 
bDoVSyncUpd©e
=
TRUE
;

738 
	}
}

744 
	$¥imS¥t8
(* 
ba£Addr
)

746 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

747 *
sgpuD©a
 = ((*Ë
ba£Addr
);

749 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

750 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

752 if(!(
dwA˘Fixes
&8)Ë
	`Adju°Co‹d1
();

754 
	`SëRídîMode
(
	`GETLE32
(&
gpuD©a
[0]));

756 if(
bUsögTWö
Ë
	`DøwSo·w¨eS¥ôeTWö
(
ba£Addr
,8,8);

758 if(
usMúr‹
Ë
	`DøwSo·w¨eS¥ôeMúr‹
(
ba£Addr
,8,8);

759 
	`DøwSo·w¨eS¥ôe
(
ba£Addr
,8,8,

760 
ba£Addr
[8],

761 
ba£Addr
[9]);

763 
bDoVSyncUpd©e
=
TRUE
;

764 
	}
}

770 
	$¥imS¥t16
(* 
ba£Addr
)

772 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

773 *
sgpuD©a
 = ((*Ë
ba£Addr
);

775 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

776 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

778 if(!(
dwA˘Fixes
&8)Ë
	`Adju°Co‹d1
();

780 
	`SëRídîMode
(
	`GETLE32
(&
gpuD©a
[0]));

782 if(
bUsögTWö
Ë
	`DøwSo·w¨eS¥ôeTWö
(
ba£Addr
,16,16);

784 if(
usMúr‹
Ë
	`DøwSo·w¨eS¥ôeMúr‹
(
ba£Addr
,16,16);

785 
	`DøwSo·w¨eS¥ôe
(
ba£Addr
,16,16,

786 
ba£Addr
[8],

787 
ba£Addr
[9]);

789 
bDoVSyncUpd©e
=
TRUE
;

790 
	}
}

797 
	$¥imS¥tSRe°
(* 
ba£Addr
,
ty≥
)

799 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

800 *
sgpuD©a
 = ((*Ë
ba£Addr
);

801 
sTy≥Re°
=0;

803 
s
;

804 
sX
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

805 
sY
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

806 
sW
 = 
	`GETLEs16
(&
sgpuD©a
[6]) & 0x3ff;

807 
sH
 = 
	`GETLEs16
(&
sgpuD©a
[7]) & 0x1ff;

808 
tX
 = 
ba£Addr
[8];

809 
tY
 = 
ba£Addr
[9];

811 
ty≥
)

814 
s
=256-
ba£Addr
[8];

815 
sW
-=
s
;

816 
sX
+=
s
;

817 
tX
=0;

820 
s
=256-
ba£Addr
[9];

821 
sH
-=
s
;

822 
sY
+=
s
;

823 
tY
=0;

826 
s
=256-
ba£Addr
[8];

827 
sW
-=
s
;

828 
sX
+=
s
;

829 
tX
=0;

830 
s
=256-
ba£Addr
[9];

831 
sH
-=
s
;

832 
sY
+=
s
;

833 
tY
=0;

836 
s
=512-
ba£Addr
[8];

837 
sW
-=
s
;

838 
sX
+=
s
;

839 
tX
=0;

842 
s
=512-
ba£Addr
[9];

843 
sH
-=
s
;

844 
sY
+=
s
;

845 
tY
=0;

848 
s
=512-
ba£Addr
[8];

849 
sW
-=
s
;

850 
sX
+=
s
;

851 
tX
=0;

852 
s
=512-
ba£Addr
[9];

853 
sH
-=
s
;

854 
sY
+=
s
;

855 
tY
=0;

859 
	`SëRídîMode
(
	`GETLE32
(&
gpuD©a
[0]));

861 if(
tX
+
sW
>256Ë{sW=256-tX;
sTy≥Re°
+=1;}

862 if(
tY
+
sH
>256Ë{sH=256-tY;
sTy≥Re°
+=2;}

864 
lx0
 = 
sX
;

865 
ly0
 = 
sY
;

867 if(!(
dwA˘Fixes
&8)Ë
	`Adju°Co‹d1
();

869 
	`DøwSo·w¨eS¥ôe
(
ba£Addr
,
sW
,
sH
,
tX
,
tY
);

871 if(
sTy≥Re°
 && 
ty≥
<4)

873 if(
sTy≥Re°
&1 && 
ty≥
==1Ë
	`¥imS¥tSRe°
(
ba£Addr
,4);

874 if(
sTy≥Re°
&2 && 
ty≥
==2Ë
	`¥imS¥tSRe°
(
ba£Addr
,5);

875 if(
sTy≥Re°
==3 && 
ty≥
==3Ë
	`¥imS¥tSRe°
(
ba£Addr
,6);

878 
	}
}

882 
	$¥imS¥tS
(* 
ba£Addr
)

884 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

885 *
sgpuD©a
 = ((*Ë
ba£Addr
);

886 
sW
,
sH
;

888 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

889 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

891 if(!(
dwA˘Fixes
&8)Ë
	`Adju°Co‹d1
();

893 
sW
 = 
	`GETLEs16
(&
sgpuD©a
[6]) & 0x3ff;

894 
sH
 = 
	`GETLEs16
(&
sgpuD©a
[7]) & 0x1ff;

896 
	`SëRídîMode
(
	`GETLE32
(&
gpuD©a
[0]));

898 if(
bUsögTWö
Ë
	`DøwSo·w¨eS¥ôeTWö
(
ba£Addr
,
sW
,
sH
);

900 if(
usMúr‹
Ë
	`DøwSo·w¨eS¥ôeMúr‹
(
ba£Addr
,
sW
,
sH
);

903 
sTy≥Re°
=0;

904 
tX
=
ba£Addr
[8];

905 
tY
=
ba£Addr
[9];

907 if(
tX
+
sW
>256Ë{sW=256-tX;
sTy≥Re°
+=1;}

908 if(
tY
+
sH
>256Ë{sH=256-tY;
sTy≥Re°
+=2;}

910 
	`DøwSo·w¨eS¥ôe
(
ba£Addr
,
sW
,
sH
,
tX
,
tY
);

912 if(
sTy≥Re°
)

914 if(
sTy≥Re°
&1Ë
	`¥imS¥tSRe°
(
ba£Addr
,1);

915 if(
sTy≥Re°
&2Ë
	`¥imS¥tSRe°
(
ba£Addr
,2);

916 if(
sTy≥Re°
==3Ë
	`¥imS¥tSRe°
(
ba£Addr
,3);

921 
bDoVSyncUpd©e
=
TRUE
;

922 
	}
}

928 
	$¥imPﬁyF4
(*
ba£Addr
)

930 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

931 *
sgpuD©a
 = ((*Ë
ba£Addr
);

933 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

934 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

935 
lx1
 = 
	`GETLEs16
(&
sgpuD©a
[4]);

936 
ly1
 = 
	`GETLEs16
(&
sgpuD©a
[5]);

937 
lx2
 = 
	`GETLEs16
(&
sgpuD©a
[6]);

938 
ly2
 = 
	`GETLEs16
(&
sgpuD©a
[7]);

939 
lx3
 = 
	`GETLEs16
(&
sgpuD©a
[8]);

940 
ly3
 = 
	`GETLEs16
(&
sgpuD©a
[9]);

942 if(!(
dwA˘Fixes
&8))

944 
	`Adju°Co‹d4
();

945 if(
	`CheckCo‹d4
()) ;

948 
	`off£tPSX4
();

949 
DøwSemiTøns
 = (
	`SEMITRANSBIT
(
	`GETLE32
(&
gpuD©a
[0]))Ë? 
TRUE
 : 
FALSE
;

951 
	`døwPﬁy4F
(
	`GETLE32
(&
gpuD©a
[0]));

953 
bDoVSyncUpd©e
=
TRUE
;

954 
	}
}

960 
	$¥imPﬁyG4
(* 
ba£Addr
)

962 
uöt32_t
 *
gpuD©a
 = (uöt32_à*)
ba£Addr
;

963 *
sgpuD©a
 = ((*Ë
ba£Addr
);

965 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

966 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

967 
lx1
 = 
	`GETLEs16
(&
sgpuD©a
[6]);

968 
ly1
 = 
	`GETLEs16
(&
sgpuD©a
[7]);

969 
lx2
 = 
	`GETLEs16
(&
sgpuD©a
[10]);

970 
ly2
 = 
	`GETLEs16
(&
sgpuD©a
[11]);

971 
lx3
 = 
	`GETLEs16
(&
sgpuD©a
[14]);

972 
ly3
 = 
	`GETLEs16
(&
sgpuD©a
[15]);

974 if(!(
dwA˘Fixes
&8))

976 
	`Adju°Co‹d4
();

977 if(
	`CheckCo‹d4
()) ;

980 
	`off£tPSX4
();

981 
DøwSemiTøns
 = (
	`SEMITRANSBIT
(
	`GETLE32
(&
gpuD©a
[0]))Ë? 
TRUE
 : 
FALSE
;

983 
	`døwPﬁy4G
(
	`GETLE32
(&
gpuD©a
[0]), GETLE32(&gpuData[2]),

984 
	`GETLE32
(&
gpuD©a
[4]), GETLE32(&gpuData[6]));

986 
bDoVSyncUpd©e
=
TRUE
;

987 
	}
}

993 
	$¥imPﬁyFT3
(* 
ba£Addr
)

995 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

996 *
sgpuD©a
 = ((*Ë
ba£Addr
);

998 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

999 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

1000 
lx1
 = 
	`GETLEs16
(&
sgpuD©a
[6]);

1001 
ly1
 = 
	`GETLEs16
(&
sgpuD©a
[7]);

1002 
lx2
 = 
	`GETLEs16
(&
sgpuD©a
[10]);

1003 
ly2
 = 
	`GETLEs16
(&
sgpuD©a
[11]);

1005 
lLowî∑π
=
	`GETLE32
(&
gpuD©a
[4])>>16;

1006 
	`Upd©eGlobÆTP
(()
lLowî∑π
);

1008 if(!(
dwA˘Fixes
&8))

1010 
	`Adju°Co‹d3
();

1011 if(
	`CheckCo‹d3
()) ;

1014 
	`off£tPSX3
();

1015 
	`SëRídîMode
(
	`GETLE32
(&
gpuD©a
[0]));

1017 
	`døwPﬁy3FT
(
ba£Addr
);

1019 
bDoVSyncUpd©e
=
TRUE
;

1020 
	}
}

1026 
	$¥imPﬁyFT4
(* 
ba£Addr
)

1028 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

1029 *
sgpuD©a
 = ((*Ë
ba£Addr
);

1031 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

1032 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

1033 
lx1
 = 
	`GETLEs16
(&
sgpuD©a
[6]);

1034 
ly1
 = 
	`GETLEs16
(&
sgpuD©a
[7]);

1035 
lx2
 = 
	`GETLEs16
(&
sgpuD©a
[10]);

1036 
ly2
 = 
	`GETLEs16
(&
sgpuD©a
[11]);

1037 
lx3
 = 
	`GETLEs16
(&
sgpuD©a
[14]);

1038 
ly3
 = 
	`GETLEs16
(&
sgpuD©a
[15]);

1040 
lLowî∑π
=
	`GETLE32
(&
gpuD©a
[4])>>16;

1041 
	`Upd©eGlobÆTP
(()
lLowî∑π
);

1043 if(!(
dwA˘Fixes
&8))

1045 
	`Adju°Co‹d4
();

1046 if(
	`CheckCo‹d4
()) ;

1049 
	`off£tPSX4
();

1051 
	`SëRídîMode
(
	`GETLE32
(&
gpuD©a
[0]));

1053 
	`døwPﬁy4FT
(
ba£Addr
);

1055 
bDoVSyncUpd©e
=
TRUE
;

1056 
	}
}

1062 
	$¥imPﬁyGT3
(*
ba£Addr
)

1064 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

1065 *
sgpuD©a
 = ((*Ë
ba£Addr
);

1067 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

1068 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

1069 
lx1
 = 
	`GETLEs16
(&
sgpuD©a
[8]);

1070 
ly1
 = 
	`GETLEs16
(&
sgpuD©a
[9]);

1071 
lx2
 = 
	`GETLEs16
(&
sgpuD©a
[14]);

1072 
ly2
 = 
	`GETLEs16
(&
sgpuD©a
[15]);

1074 
lLowî∑π
=
	`GETLE32
(&
gpuD©a
[5])>>16;

1075 
	`Upd©eGlobÆTP
(()
lLowî∑π
);

1077 if(!(
dwA˘Fixes
&8))

1079 
	`Adju°Co‹d3
();

1080 if(
	`CheckCo‹d3
()) ;

1083 
	`off£tPSX3
();

1084 
DøwSemiTøns
 = (
	`SEMITRANSBIT
(
	`GETLE32
(&
gpuD©a
[0]))Ë? 
TRUE
 : 
FALSE
;

1086 if(
	`SHADETEXBIT
(
	`GETLE32
(&
gpuD©a
[0])))

1088 
gpuD©a
[0] = (gpuD©a[0]&
	`HOST2LE32
(0xff000000))|HOST2LE32(0x00808080);

1089 
gpuD©a
[3] = (gpuD©a[3]&
	`HOST2LE32
(0xff000000))|HOST2LE32(0x00808080);

1090 
gpuD©a
[6] = (gpuD©a[6]&
	`HOST2LE32
(0xff000000))|HOST2LE32(0x00808080);

1093 
	`døwPﬁy3GT
(
ba£Addr
);

1095 
bDoVSyncUpd©e
=
TRUE
;

1096 
	}
}

1102 
	$¥imPﬁyG3
(*
ba£Addr
)

1104 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

1105 *
sgpuD©a
 = ((*Ë
ba£Addr
);

1107 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

1108 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

1109 
lx1
 = 
	`GETLEs16
(&
sgpuD©a
[6]);

1110 
ly1
 = 
	`GETLEs16
(&
sgpuD©a
[7]);

1111 
lx2
 = 
	`GETLEs16
(&
sgpuD©a
[10]);

1112 
ly2
 = 
	`GETLEs16
(&
sgpuD©a
[11]);

1114 if(!(
dwA˘Fixes
&8))

1116 
	`Adju°Co‹d3
();

1117 if(
	`CheckCo‹d3
()) ;

1120 
	`off£tPSX3
();

1121 
DøwSemiTøns
 = (
	`SEMITRANSBIT
(
	`GETLE32
(&
gpuD©a
[0]))Ë? 
TRUE
 : 
FALSE
;

1123 
	`døwPﬁy3G
(
	`GETLE32
(&
gpuD©a
[0]), GETLE32(&gpuData[2]), GETLE32(&gpuData[4]));

1125 
bDoVSyncUpd©e
=
TRUE
;

1126 
	}
}

1132 
	$¥imPﬁyGT4
(*
ba£Addr
)

1134 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

1135 *
sgpuD©a
 = ((*Ë
ba£Addr
);

1137 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

1138 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

1139 
lx1
 = 
	`GETLEs16
(&
sgpuD©a
[8]);

1140 
ly1
 = 
	`GETLEs16
(&
sgpuD©a
[9]);

1141 
lx2
 = 
	`GETLEs16
(&
sgpuD©a
[14]);

1142 
ly2
 = 
	`GETLEs16
(&
sgpuD©a
[15]);

1143 
lx3
 = 
	`GETLEs16
(&
sgpuD©a
[20]);

1144 
ly3
 = 
	`GETLEs16
(&
sgpuD©a
[21]);

1146 
lLowî∑π
=
	`GETLE32
(&
gpuD©a
[5])>>16;

1147 
	`Upd©eGlobÆTP
(()
lLowî∑π
);

1149 if(!(
dwA˘Fixes
&8))

1151 
	`Adju°Co‹d4
();

1152 if(
	`CheckCo‹d4
()) ;

1155 
	`off£tPSX4
();

1156 
DøwSemiTøns
 = (
	`SEMITRANSBIT
(
	`GETLE32
(&
gpuD©a
[0]))Ë? 
TRUE
 : 
FALSE
;

1158 if(
	`SHADETEXBIT
(
	`GETLE32
(&
gpuD©a
[0])))

1160 
gpuD©a
[0] = (gpuD©a[0]&
	`HOST2LE32
(0xff000000))|HOST2LE32(0x00808080);

1161 
gpuD©a
[3] = (gpuD©a[3]&
	`HOST2LE32
(0xff000000))|HOST2LE32(0x00808080);

1162 
gpuD©a
[6] = (gpuD©a[6]&
	`HOST2LE32
(0xff000000))|HOST2LE32(0x00808080);

1163 
gpuD©a
[9] = (gpuD©a[9]&
	`HOST2LE32
(0xff000000))|HOST2LE32(0x00808080);

1166 
	`døwPﬁy4GT
(
ba£Addr
);

1168 
bDoVSyncUpd©e
=
TRUE
;

1169 
	}
}

1175 
	$¥imPﬁyF3
(*
ba£Addr
)

1177 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

1178 *
sgpuD©a
 = ((*Ë
ba£Addr
);

1180 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

1181 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

1182 
lx1
 = 
	`GETLEs16
(&
sgpuD©a
[4]);

1183 
ly1
 = 
	`GETLEs16
(&
sgpuD©a
[5]);

1184 
lx2
 = 
	`GETLEs16
(&
sgpuD©a
[6]);

1185 
ly2
 = 
	`GETLEs16
(&
sgpuD©a
[7]);

1187 if(!(
dwA˘Fixes
&8))

1189 
	`Adju°Co‹d3
();

1190 if(
	`CheckCo‹d3
()) ;

1193 
	`off£tPSX3
();

1194 
	`SëRídîMode
(
	`GETLE32
(&
gpuD©a
[0]));

1196 
	`døwPﬁy3F
(
	`GETLE32
(&
gpuD©a
[0]));

1198 
bDoVSyncUpd©e
=
TRUE
;

1199 
	}
}

1205 
	$¥imLöeGSkù
(*
ba£Addr
)

1207 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

1208 
iMax
=255;

1209 
i
=2;

1211 
ly1
 = ()((
	`GETLE32
(&
gpuD©a
[1])>>16) & 0xffff);

1212 
lx1
 = ()(
	`GETLE32
(&
gpuD©a
[1]) & 0xffff);

1214 !(((
	`GETLE32
(&
gpuD©a
[
i
]) & 0xF000F000) == 0x50005000) && i>=4))

1216 
i
++;

1217 
ly1
 = ()((
	`GETLE32
(&
gpuD©a
[
i
])>>16) & 0xffff);

1218 
lx1
 = ()(
	`GETLE32
(&
gpuD©a
[
i
]) & 0xffff);

1219 
i
++;if(i>
iMax
) ;

1221 
	}
}

1227 
	$¥imLöeGEx
(*
ba£Addr
)

1229 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

1230 
iMax
=255;

1231 
uöt32_t
 
lc0
,
lc1
;

1232 
¶x0
,
¶x1
,
¶y0
,
¶y1
;
i
=2;
BOOL
 
bDøw
=
TRUE
;

1234 
¶y1
 = ()((
	`GETLE32
(&
gpuD©a
[1])>>16) & 0xffff);

1235 
¶x1
 = ()(
	`GETLE32
(&
gpuD©a
[1]) & 0xffff);

1237 if(!(
dwA˘Fixes
&8))

1239 
¶x1
=()((()¶x1<<
SIGNSHIFT
)>>SIGNSHIFT);

1240 
¶y1
=()((()¶y1<<
SIGNSHIFT
)>>SIGNSHIFT);

1243 
lc1
 = 
gpuD©a
[0] & 0xffffff;

1245 
DøwSemiTøns
 = (
	`SEMITRANSBIT
(
	`GETLE32
(&
gpuD©a
[0]))Ë? 
TRUE
 : 
FALSE
;

1247 !(((
	`GETLE32
(&
gpuD©a
[
i
]) & 0xF000F000) == 0x50005000) && i>=4))

1249 
¶y0
=
¶y1
; 
¶x0
=
¶x1
; 
lc0
=
lc1
;

1250 
lc1
=
	`GETLE32
(&
gpuD©a
[
i
]) & 0xffffff;

1252 
i
++;

1257 
¶y1
 = ()((
	`GETLE32
(&
gpuD©a
[
i
])>>16) & 0xffff);

1258 
¶x1
 = ()(
	`GETLE32
(&
gpuD©a
[
i
]) & 0xffff);

1260 if(!(
dwA˘Fixes
&8))

1262 
¶x1
=()((()¶x1<<
SIGNSHIFT
)>>SIGNSHIFT);

1263 
¶y1
=()((()¶y1<<
SIGNSHIFT
)>>SIGNSHIFT);

1264 if(
	`CheckCo‹dL
(
¶x0
,
¶y0
,
¶x1
,
¶y1
)Ë
bDøw
=
FALSE
; bDøw=
TRUE
;

1267 i‡((
lx0
 !
lx1
Ë|| (
ly0
 !
ly1
))

1269 
ly0
=
¶y0
;

1270 
lx0
=
¶x0
;

1271 
ly1
=
¶y1
;

1272 
lx1
=
¶x1
;

1274 
	`off£tPSX2
();

1275 if(
bDøw
Ë
	`DøwSo·w¨eLöeShade
(
lc0
, 
lc1
);

1277 
i
++;

1278 if(
i
>
iMax
) ;

1281 
bDoVSyncUpd©e
=
TRUE
;

1282 
	}
}

1288 
	$¥imLöeG2
(*
ba£Addr
)

1290 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

1291 *
sgpuD©a
 = ((*Ë
ba£Addr
);

1293 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

1294 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

1295 
lx1
 = 
	`GETLEs16
(&
sgpuD©a
[6]);

1296 
ly1
 = 
	`GETLEs16
(&
sgpuD©a
[7]);

1298 if(!(
dwA˘Fixes
&8))

1300 
	`Adju°Co‹d2
();

1301 if(
	`CheckCo‹d2
()) ;

1304 if((
lx0
 =
lx1
Ë&& (
ly0
 =
ly1
)) {lx1++;ly1++;}

1306 
DøwSemiTøns
 = (
	`SEMITRANSBIT
(
	`GETLE32
(&
gpuD©a
[0]))Ë? 
TRUE
 : 
FALSE
;

1307 
	`off£tPSX2
();

1308 
	`DøwSo·w¨eLöeShade
(
	`GETLE32
(&
gpuD©a
[0]),GETLE32(&gpuData[2]));

1310 
bDoVSyncUpd©e
=
TRUE
;

1311 
	}
}

1317 
	$¥imLöeFSkù
(*
ba£Addr
)

1319 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

1320 
i
=2,
iMax
=255;

1322 
ly1
 = ()((
	`GETLE32
(&
gpuD©a
[1])>>16) & 0xffff);

1323 
lx1
 = ()(
	`GETLE32
(&
gpuD©a
[1]) & 0xffff);

1325 !(((
	`GETLE32
(&
gpuD©a
[
i
]) & 0xF000F000) == 0x50005000) && i>=3))

1327 
ly1
 = ()((
	`GETLE32
(&
gpuD©a
[
i
])>>16) & 0xffff);

1328 
lx1
 = ()(
	`GETLE32
(&
gpuD©a
[
i
]) & 0xffff);

1329 
i
++;if(i>
iMax
) ;

1331 
	}
}

1337 
	$¥imLöeFEx
(*
ba£Addr
)

1339 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

1340 
iMax
;

1341 
¶x0
,
¶x1
,
¶y0
,
¶y1
;
i
=2;
BOOL
 
bDøw
=
TRUE
;

1343 
iMax
=255;

1345 
¶y1
 = ()((
	`GETLE32
(&
gpuD©a
[1])>>16) & 0xffff);

1346 
¶x1
 = ()(
	`GETLE32
(&
gpuD©a
[1]) & 0xffff);

1347 if(!(
dwA˘Fixes
&8))

1349 
¶x1
=()((()¶x1<<
SIGNSHIFT
)>>SIGNSHIFT);

1350 
¶y1
=()((()¶y1<<
SIGNSHIFT
)>>SIGNSHIFT);

1353 
	`SëRídîMode
(
	`GETLE32
(&
gpuD©a
[0]));

1355 !(((
	`GETLE32
(&
gpuD©a
[
i
]) & 0xF000F000) == 0x50005000) && i>=3))

1357 
¶y0
 = 
¶y1
;
¶x0
=
¶x1
;

1358 
¶y1
 = ()((
	`GETLE32
(&
gpuD©a
[
i
])>>16) & 0xffff);

1359 
¶x1
 = ()(
	`GETLE32
(&
gpuD©a
[
i
]) & 0xffff);

1360 if(!(
dwA˘Fixes
&8))

1362 
¶x1
=()((()¶x1<<
SIGNSHIFT
)>>SIGNSHIFT);

1363 
¶y1
=()((()¶y1<<
SIGNSHIFT
)>>SIGNSHIFT);

1365 if(
	`CheckCo‹dL
(
¶x0
,
¶y0
,
¶x1
,
¶y1
)Ë
bDøw
=
FALSE
; bDøw=
TRUE
;

1368 
ly0
=
¶y0
;

1369 
lx0
=
¶x0
;

1370 
ly1
=
¶y1
;

1371 
lx1
=
¶x1
;

1373 
	`off£tPSX2
();

1374 if(
bDøw
Ë
	`DøwSo·w¨eLöeFœt
(
	`GETLE32
(&
gpuD©a
[0]));

1376 
i
++;if(i>
iMax
) ;

1379 
bDoVSyncUpd©e
=
TRUE
;

1380 
	}
}

1386 
	$¥imLöeF2
(*
ba£Addr
)

1388 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

1389 *
sgpuD©a
 = ((*Ë
ba£Addr
);

1391 
lx0
 = 
	`GETLEs16
(&
sgpuD©a
[2]);

1392 
ly0
 = 
	`GETLEs16
(&
sgpuD©a
[3]);

1393 
lx1
 = 
	`GETLEs16
(&
sgpuD©a
[4]);

1394 
ly1
 = 
	`GETLEs16
(&
sgpuD©a
[5]);

1396 if(!(
dwA˘Fixes
&8))

1398 
	`Adju°Co‹d2
();

1399 if(
	`CheckCo‹d2
()) ;

1402 if((
lx0
 =
lx1
Ë&& (
ly0
 =
ly1
)) {lx1++;ly1++;}

1404 
	`off£tPSX2
();

1405 
	`SëRídîMode
(
	`GETLE32
(&
gpuD©a
[0]));

1407 
	`DøwSo·w¨eLöeFœt
(
	`GETLE32
(&
gpuD©a
[0]));

1409 
bDoVSyncUpd©e
=
TRUE
;

1410 
	}
}

1416 
	$¥imNI
(*
bA
)

1418 
	}
}

1425 (*
¥imTabÀJ
[256])(*) =

1428 
¥imNI
,¥imNI,
¥imBlkFûl
,primNI,primNI,primNI,primNI,primNI,

1430 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1432 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1434 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1436 
¥imPﬁyF3
,¥imPﬁyF3,¥imPﬁyF3,¥imPﬁyF3,
¥imPﬁyFT3
,primPolyFT3,primPolyFT3,primPolyFT3,

1438 
¥imPﬁyF4
,¥imPﬁyF4,¥imPﬁyF4,¥imPﬁyF4,
¥imPﬁyFT4
,primPolyFT4,primPolyFT4,primPolyFT4,

1440 
¥imPﬁyG3
,¥imPﬁyG3,¥imPﬁyG3,¥imPﬁyG3,
¥imPﬁyGT3
,primPolyGT3,primPolyGT3,primPolyGT3,

1442 
¥imPﬁyG4
,¥imPﬁyG4,¥imPﬁyG4,¥imPﬁyG4,
¥imPﬁyGT4
,primPolyGT4,primPolyGT4,primPolyGT4,

1444 
¥imLöeF2
,¥imLöeF2,¥imLöeF2,¥imLöeF2,
¥imNI
,primNI,primNI,primNI,

1446 
¥imLöeFEx
,primLineFEx,primLineFEx,primLineFEx,primLineFEx,primLineFEx,primLineFEx,primLineFEx,

1448 
¥imLöeG2
,¥imLöeG2,¥imLöeG2,¥imLöeG2,
¥imNI
,primNI,primNI,primNI,

1450 
¥imLöeGEx
,primLineGEx,primLineGEx,primLineGEx,primLineGEx,primLineGEx,primLineGEx,primLineGEx,

1452 
¥imTûeS
,¥imTûeS,¥imTûeS,¥imTûeS,
¥imS¥tS
,primSprtS,primSprtS,primSprtS,

1454 
¥imTûe1
,¥imTûe1,¥imTûe1,¥imTûe1,
¥imNI
,primNI,primNI,primNI,

1456 
¥imTûe8
,¥imTûe8,¥imTûe8,¥imTûe8,
¥imS¥t8
,primSprt8,primSprt8,primSprt8,

1458 
¥imTûe16
,¥imTûe16,¥imTûe16,¥imTûe16,
¥imS¥t16
,primSprt16,primSprt16,primSprt16,

1460 
¥imMoveImage
,
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,

1462 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1464 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1466 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1468 
¥imLﬂdImage
,
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,

1470 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1472 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1474 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1476 
¥imSt‹eImage
,
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,

1478 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1480 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1482 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1484 
¥imNI
,
cmdTextuªPage
,
cmdTextuªWödow
,
cmdDøwAªaSèπ
,
cmdDøwAªaEnd
,
cmdDøwOff£t
,
cmdSTP
,primNI,

1486 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1488 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1490 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI

1491 
	}
};

1497 (*
¥imTabÀSkù
[256])(*) =

1500 
¥imNI
,¥imNI,
¥imBlkFûl
,primNI,primNI,primNI,primNI,primNI,

1502 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1504 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1506 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1508 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1510 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1512 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1514 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1516 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1518 
¥imLöeFSkù
,primLineFSkip,primLineFSkip,primLineFSkip,primLineFSkip,primLineFSkip,primLineFSkip,primLineFSkip,

1520 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1522 
¥imLöeGSkù
,primLineGSkip,primLineGSkip,primLineGSkip,primLineGSkip,primLineGSkip,primLineGSkip,primLineGSkip,

1524 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1526 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1528 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1530 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1532 
¥imMoveImage
,
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,

1534 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1536 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1538 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1540 
¥imLﬂdImage
,
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,

1542 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1544 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1546 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1548 
¥imSt‹eImage
,
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,

1550 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1552 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1554 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1556 
¥imNI
,
cmdTextuªPage
,
cmdTextuªWödow
,
cmdDøwAªaSèπ
,
cmdDøwAªaEnd
,
cmdDøwOff£t
,
cmdSTP
,primNI,

1558 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1560 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

1562 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI

1563 
	}
};

	@plugins/dfxvideo/soft.c

20 
	#POLYQUAD3


	)

21 
	#POLYQUAD3GT


	)

24 
	#FASTSOLID


	)

27 
	#HALFBRIGHTMODE3


	)

31 
	#XCOL1
(
x
Ë(x & 0x1f)

	)

32 
	#XCOL2
(
x
Ë(x & 0x3e0)

	)

33 
	#XCOL3
(
x
Ë(x & 0x7c00)

	)

35 
	#XCOL1D
(
x
Ë(x & 0x1f)

	)

36 
	#XCOL2D
(
x
Ë((x>>5Ë& 0x1f)

	)

37 
	#XCOL3D
(
x
Ë((x>>10Ë& 0x1f)

	)

39 
	#X32TCOL1
(
x
Ë((x & 0x001f001f)<<7)

	)

40 
	#X32TCOL2
(
x
Ë((x & 0x03e003e0)<<2)

	)

41 
	#X32TCOL3
(
x
Ë((x & 0x7c007c00)>>3)

	)

43 
	#X32COL1
(
x
Ë(x & 0x001f001f)

	)

44 
	#X32COL2
(
x
Ë((x>>5Ë& 0x001f001f)

	)

45 
	#X32COL3
(
x
Ë((x>>10Ë& 0x001f001f)

	)

47 
	#X32ACOL1
(
x
Ë(x & 0x001e001e)

	)

48 
	#X32ACOL2
(
x
Ë((x>>5Ë& 0x001e001e)

	)

49 
	#X32ACOL3
(
x
Ë((x>>10Ë& 0x001e001e)

	)

51 
	#X32BCOL1
(
x
Ë(x & 0x001c001c)

	)

52 
	#X32BCOL2
(
x
Ë((x>>5Ë& 0x001c001c)

	)

53 
	#X32BCOL3
(
x
Ë((x>>10Ë& 0x001c001c)

	)

55 
	#X32PSXCOL
(
r
,
g
,
b
Ë((g<<10)|(b<<5)|r)

	)

57 
	#XPSXCOL
(
r
,
g
,
b
Ë((g&0x7c00)|(b&0x3e0)|‘&0x1f))

	)

60 
	gg_m1
=255,
	gg_m2
=255,
	gg_m3
=255;

61 
	gDøwSemiTøns
=
FALSE
;

62 
	gYmö
;

63 
	gYmax
;

64 
	gly0
,
	glx0
,
	gly1
,
	glx1
,
	gly2
,
	glx2
,
	gly3
,
	glx3
;

65 
öt32_t
 
	gGlobÆTextAddrX
,
	gGlobÆTextAddrY
,
	gGlobÆTextTP
;

66 
öt32_t
 
	gGlobÆTextABR
,
	gGlobÆTextPAGE
;

72 
	$off£tPSX2
()

74 
lx0
 +
PSXDi•œy
.
DøwOff£t
.
x
;

75 
ly0
 +
PSXDi•œy
.
DøwOff£t
.
y
;

76 
lx1
 +
PSXDi•œy
.
DøwOff£t
.
x
;

77 
ly1
 +
PSXDi•œy
.
DøwOff£t
.
y
;

78 
	}
}

80 
	$off£tPSX3
()

82 
lx0
 +
PSXDi•œy
.
DøwOff£t
.
x
;

83 
ly0
 +
PSXDi•œy
.
DøwOff£t
.
y
;

84 
lx1
 +
PSXDi•œy
.
DøwOff£t
.
x
;

85 
ly1
 +
PSXDi•œy
.
DøwOff£t
.
y
;

86 
lx2
 +
PSXDi•œy
.
DøwOff£t
.
x
;

87 
ly2
 +
PSXDi•œy
.
DøwOff£t
.
y
;

88 
	}
}

90 
	$off£tPSX4
()

92 
lx0
 +
PSXDi•œy
.
DøwOff£t
.
x
;

93 
ly0
 +
PSXDi•œy
.
DøwOff£t
.
y
;

94 
lx1
 +
PSXDi•œy
.
DøwOff£t
.
x
;

95 
ly1
 +
PSXDi•œy
.
DøwOff£t
.
y
;

96 
lx2
 +
PSXDi•œy
.
DøwOff£t
.
x
;

97 
ly2
 +
PSXDi•œy
.
DøwOff£t
.
y
;

98 
lx3
 +
PSXDi•œy
.
DøwOff£t
.
x
;

99 
ly3
 +
PSXDi•œy
.
DøwOff£t
.
y
;

100 
	}
}

111 
	gdôhîèbÀ
[16] =

119 
ölöe
 
	$Dôhî16
(* 
pde°
,
uöt32_t
 
r
,uöt32_à
g
,uöt32_à
b
,
sM
)

121 
c€ff
;

122 
æow
, 
glow
, 
blow
;

123 
x
,
y
;

125 
x
=
pde°
-
psxVuw
;

126 
y
=
x
>>10;

127 
x
-=(
y
<<10);

129 
c€ff
 = 
dôhîèbÀ
[(
y
&3)*4+(
x
&3)];

131 
æow
 = 
r
&7; 
glow
 = 
g
&7; 
blow
 = 
b
&7;

133 
r
>>=3; 
g
>>=3; 
b
>>=3;

135 i‡((
r
 < 0x1FË&& 
æow
 > 
c€ff
)Ñ++;

136 i‡((
g
 < 0x1FË&& 
glow
 > 
c€ff
) g++;

137 i‡((
b
 < 0x1FË&& 
blow
 > 
c€ff
) b++;

139 
	`PUTLE16
(
pde°
, (()
b
<<10) |

140 (()
g
<<5) |

141 ()
r
 | 
sM
);

142 
	}
}

148 
ölöe
 
	$GëShadeTønsCﬁ_Dôhî
(* 
pde°
, 
öt32_t
 
m1
, i¡32_à
m2
, i¡32_à
m3
)

150 
öt32_t
 
r
,
g
,
b
;

152 if(
bCheckMask
 && (*
pde°
 & 
	`HOST2LE16
(0x8000))) ;

154 if(
DøwSemiTøns
)

156 
r
=((
	`XCOL1D
(
	`GETLE16
(
pde°
)))<<3);

157 
b
=((
	`XCOL2D
(
	`GETLE16
(
pde°
)))<<3);

158 
g
=((
	`XCOL3D
(
	`GETLE16
(
pde°
)))<<3);

160 if(
GlobÆTextABR
==0)

162 
r
=‘>>1)+(
m1
>>1);

163 
b
=(b>>1)+(
m2
>>1);

164 
g
=(g>>1)+(
m3
>>1);

167 if(
GlobÆTextABR
==1)

169 
r
+=
m1
;

170 
b
+=
m2
;

171 
g
+=
m3
;

174 if(
GlobÆTextABR
==2)

176 
r
-=
m1
;

177 
b
-=
m2
;

178 
g
-=
m3
;

179 if(
r
&0x80000000)Ñ=0;

180 if(
b
&0x80000000) b=0;

181 if(
g
&0x80000000) g=0;

185 #ifde‡
HALFBRIGHTMODE3


186 
r
+=(
m1
>>2);

187 
b
+=(
m2
>>2);

188 
g
+=(
m3
>>2);

190 
r
+=(
m1
>>1);

191 
b
+=(
m2
>>1);

192 
g
+=(
m3
>>1);

198 
r
=
m1
;

199 
b
=
m2
;

200 
g
=
m3
;

203 if(
r
&0x7FFFFF00)Ñ=0xff;

204 if(
b
&0x7FFFFF00) b=0xff;

205 if(
g
&0x7FFFFF00) g=0xff;

207 
	`Dôhî16
(
pde°
,
r
,
b
,
g
,
sSëMask
);

208 
	}
}

212 
ölöe
 
	$GëShadeTønsCﬁ
(* 
pde°
,
cﬁ‹
)

214 if(
bCheckMask
 && (*
pde°
 & 
	`HOST2LE16
(0x8000))) ;

216 if(
DøwSemiTøns
)

218 
öt32_t
 
r
,
g
,
b
;

220 if(
GlobÆTextABR
==0)

222 
	`PUTLE16
(
pde°
, (((
	`GETLE16
’de°)&0x7bde)>>1)+(((
cﬁ‹
)&0x7bde)>>1))|
sSëMask
);

226 if(
GlobÆTextABR
==1)

228 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))+((XCOL1(
cﬁ‹
)));

229 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))+((XCOL2(
cﬁ‹
)));

230 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))+((XCOL3(
cﬁ‹
)));

233 if(
GlobÆTextABR
==2)

235 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))-((XCOL1(
cﬁ‹
)));

236 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))-((XCOL2(
cﬁ‹
)));

237 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))-((XCOL3(
cﬁ‹
)));

238 if(
r
&0x80000000)Ñ=0;

239 if(
b
&0x80000000) b=0;

240 if(
g
&0x80000000) g=0;

244 #ifde‡
HALFBRIGHTMODE3


245 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))+((XCOL1(
cﬁ‹
))>>2);

246 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))+((XCOL2(
cﬁ‹
))>>2);

247 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))+((XCOL3(
cﬁ‹
))>>2);

249 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))+((XCOL1(
cﬁ‹
))>>1);

250 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))+((XCOL2(
cﬁ‹
))>>1);

251 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))+((XCOL3(
cﬁ‹
))>>1);

255 if(
r
&0x7FFFFFE0)Ñ=0x1f;

256 if(
b
&0x7FFFFC00) b=0x3e0;

257 if(
g
&0x7FFF8000) g=0x7c00;

259 
	`PUTLE16
(
pde°
, (
	`XPSXCOL
(
r
,
g
,
b
))|
sSëMask
);

261 
	`PUTLE16
(
pde°
, 
cﬁ‹
|
sSëMask
);

262 
	}
}

266 
ölöe
 
	$GëShadeTønsCﬁ32
(
uöt32_t
 * 
pde°
,uöt32_à
cﬁ‹
)

268 if(
DøwSemiTøns
)

270 
öt32_t
 
r
,
g
,
b
;

272 if(
GlobÆTextABR
==0)

274 if(!
bCheckMask
)

276 
	`PUTLE32
(
pde°
, (((
	`GETLE32
’de°)&0x7bde7bde)>>1)+(((
cﬁ‹
)&0x7bde7bde)>>1))|
lSëMask
);

279 
r
=(
	`X32ACOL1
(
	`GETLE32
(
pde°
))>>1)+((X32ACOL1(
cﬁ‹
))>>1);

280 
b
=(
	`X32ACOL2
(
	`GETLE32
(
pde°
))>>1)+((X32ACOL2(
cﬁ‹
))>>1);

281 
g
=(
	`X32ACOL3
(
	`GETLE32
(
pde°
))>>1)+((X32ACOL3(
cﬁ‹
))>>1);

284 if(
GlobÆTextABR
==1)

286 
r
=(
	`X32COL1
(
	`GETLE32
(
pde°
)))+((X32COL1(
cﬁ‹
)));

287 
b
=(
	`X32COL2
(
	`GETLE32
(
pde°
)))+((X32COL2(
cﬁ‹
)));

288 
g
=(
	`X32COL3
(
	`GETLE32
(
pde°
)))+((X32COL3(
cﬁ‹
)));

291 if(
GlobÆTextABR
==2)

293 
öt32_t
 
§
,
sb
,
sg
,
§c
,
sbc
,
sgc
,
c
;

294 
§c
=
	`XCOL1
(
cﬁ‹
);
sbc
=
	`XCOL2
(cﬁ‹);
sgc
=
	`XCOL3
(color);

295 
c
=
	`GETLE32
(
pde°
)>>16;

296 
§
=(
	`XCOL1
(
c
))-
§c
; if(sr&0x8000) sr=0;

297 
sb
=(
	`XCOL2
(
c
))-
sbc
; if(sb&0x8000) sb=0;

298 
sg
=(
	`XCOL3
(
c
))-
sgc
; if(sg&0x8000) sg=0;

299 
r
=((
öt32_t
)
§
)<<16;
b
=((öt32_t)
sb
)<<11;
g
=((öt32_t)
sg
)<<6;

300 
c
=
	`LOWORD
(
	`GETLE32
(
pde°
));

301 
§
=(
	`XCOL1
(
c
))-
§c
; if(sr&0x8000) sr=0;

302 
sb
=(
	`XCOL2
(
c
))-
sbc
; if(sb&0x8000) sb=0;

303 
sg
=(
	`XCOL3
(
c
))-
sgc
; if(sg&0x8000) sg=0;

304 
r
|=
§
;
b
|=
sb
>>5;
g
|=
sg
>>10;

308 #ifde‡
HALFBRIGHTMODE3


309 
r
=(
	`X32COL1
(
	`GETLE32
(
pde°
)))+((
	`X32BCOL1
(
cﬁ‹
))>>2);

310 
b
=(
	`X32COL2
(
	`GETLE32
(
pde°
)))+((
	`X32BCOL2
(
cﬁ‹
))>>2);

311 
g
=(
	`X32COL3
(
	`GETLE32
(
pde°
)))+((
	`X32BCOL3
(
cﬁ‹
))>>2);

313 
r
=(
	`X32COL1
(
	`GETLE32
(
pde°
)))+((
	`X32ACOL1
(
cﬁ‹
))>>1);

314 
b
=(
	`X32COL2
(
	`GETLE32
(
pde°
)))+((
	`X32ACOL2
(
cﬁ‹
))>>1);

315 
g
=(
	`X32COL3
(
	`GETLE32
(
pde°
)))+((
	`X32ACOL3
(
cﬁ‹
))>>1);

319 if(
r
&0x7FE00000)Ñ=0x1f0000|(r&0xFFFF);

320 if(
r
&0x7FE0)Ñ=0x1f |(r&0xFFFF0000);

321 if(
b
&0x7FE00000) b=0x1f0000|(b&0xFFFF);

322 if(
b
&0x7FE0) b=0x1f |(b&0xFFFF0000);

323 if(
g
&0x7FE00000) g=0x1f0000|(g&0xFFFF);

324 if(
g
&0x7FE0) g=0x1f |(g&0xFFFF0000);

326 if(
bCheckMask
)

328 
uöt32_t
 
ma
=
	`GETLE32
(
pde°
);

329 
	`PUTLE32
(
pde°
, (
	`X32PSXCOL
(
r
,
g
,
b
))|
lSëMask
);

330 if(
ma
&0x80000000Ë
	`PUTLE32
(
pde°
, (ma&0xFFFF0000)|(*pdest&0xFFFF));

331 if(
ma
&0x00008000Ë
	`PUTLE32
(
pde°
, (ma&0xFFFF) |(*pdest&0xFFFF0000));

334 
	`PUTLE32
(
pde°
, (
	`X32PSXCOL
(
r
,
g
,
b
))|
lSëMask
);

338 if(
bCheckMask
)

340 
uöt32_t
 
ma
=
	`GETLE32
(
pde°
);

341 
	`PUTLE32
(
pde°
, 
cﬁ‹
|
lSëMask
);

342 if(
ma
&0x80000000Ë
	`PUTLE32
(
pde°
, (ma&0xFFFF0000)|(
	`GETLE32
(pdest)&0xFFFF));

343 if(
ma
&0x00008000Ë
	`PUTLE32
(
pde°
, (ma&0xFFFFË|(
	`GETLE32
(pdest)&0xFFFF0000));

347 
	`PUTLE32
(
pde°
, 
cﬁ‹
|
lSëMask
);

349 
	}
}

353 
ölöe
 
	$GëTextuªTønsCﬁG
(* 
pde°
,
cﬁ‹
)

355 
öt32_t
 
r
,
g
,
b
;
l
;

357 if(
cﬁ‹
==0) ;

359 if(
bCheckMask
 && (*
pde°
 & 
	`HOST2LE16
(0x8000))) ;

361 
l
=
sSëMask
|(
cﬁ‹
&0x8000);

363 if(
DøwSemiTøns
 && (
cﬁ‹
&0x8000))

365 if(
GlobÆTextABR
==0)

367 
d
;

368 
d
 =(
	`GETLE16
(
pde°
)&0x7bde)>>1;

369 
cﬁ‹
 =((color) &0x7bde)>>1;

370 
r
=(
	`XCOL1
(
d
))+((((XCOL1(
cﬁ‹
)))* 
g_m1
)>>7);

371 
b
=(
	`XCOL2
(
d
))+((((XCOL2(
cﬁ‹
)))* 
g_m2
)>>7);

372 
g
=(
	`XCOL3
(
d
))+((((XCOL3(
cﬁ‹
)))* 
g_m3
)>>7);

375 if(
GlobÆTextABR
==1)

377 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))+((((XCOL1(
cﬁ‹
)))* 
g_m1
)>>7);

378 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))+((((XCOL2(
cﬁ‹
)))* 
g_m2
)>>7);

379 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))+((((XCOL3(
cﬁ‹
)))* 
g_m3
)>>7);

382 if(
GlobÆTextABR
==2)

384 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))-((((XCOL1(
cﬁ‹
)))* 
g_m1
)>>7);

385 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))-((((XCOL2(
cﬁ‹
)))* 
g_m2
)>>7);

386 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))-((((XCOL3(
cﬁ‹
)))* 
g_m3
)>>7);

387 if(
r
&0x80000000)Ñ=0;

388 if(
b
&0x80000000) b=0;

389 if(
g
&0x80000000) g=0;

393 #ifde‡
HALFBRIGHTMODE3


394 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))+((((XCOL1(
cﬁ‹
))>>2)* 
g_m1
)>>7);

395 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))+((((XCOL2(
cﬁ‹
))>>2)* 
g_m2
)>>7);

396 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))+((((XCOL3(
cﬁ‹
))>>2)* 
g_m3
)>>7);

398 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))+((((XCOL1(
cﬁ‹
))>>1)* 
g_m1
)>>7);

399 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))+((((XCOL2(
cﬁ‹
))>>1)* 
g_m2
)>>7);

400 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))+((((XCOL3(
cﬁ‹
))>>1)* 
g_m3
)>>7);

406 
r
=((
	`XCOL1
(
cﬁ‹
))* 
g_m1
)>>7;

407 
b
=((
	`XCOL2
(
cﬁ‹
))* 
g_m2
)>>7;

408 
g
=((
	`XCOL3
(
cﬁ‹
))* 
g_m3
)>>7;

411 if(
r
&0x7FFFFFE0)Ñ=0x1f;

412 if(
b
&0x7FFFFC00) b=0x3e0;

413 if(
g
&0x7FFF8000) g=0x7c00;

415 
	`PUTLE16
(
pde°
, (
	`XPSXCOL
(
r
,
g
,
b
))|
l
);

416 
	}
}

420 
ölöe
 
	$GëTextuªTønsCﬁG_S
(* 
pde°
,
cﬁ‹
)

422 
öt32_t
 
r
,
g
,
b
;
l
;

424 if(
cﬁ‹
==0) ;

426 
l
=
sSëMask
|(
cﬁ‹
&0x8000);

428 
r
=((
	`XCOL1
(
cﬁ‹
))* 
g_m1
)>>7;

429 
b
=((
	`XCOL2
(
cﬁ‹
))* 
g_m2
)>>7;

430 
g
=((
	`XCOL3
(
cﬁ‹
))* 
g_m3
)>>7;

432 if(
r
&0x7FFFFFE0)Ñ=0x1f;

433 if(
b
&0x7FFFFC00) b=0x3e0;

434 if(
g
&0x7FFF8000) g=0x7c00;

436 
	`PUTLE16
(
pde°
, (
	`XPSXCOL
(
r
,
g
,
b
))|
l
);

437 
	}
}

441 
ölöe
 
	$GëTextuªTønsCﬁG_SPR
(* 
pde°
,
cﬁ‹
)

443 
öt32_t
 
r
,
g
,
b
;
l
;

445 if(
cﬁ‹
==0) ;

447 if(
bCheckMask
 && (
	`GETLE16
(
pde°
) & 0x8000)) ;

449 
l
=
sSëMask
|(
cﬁ‹
&0x8000);

451 if(
DøwSemiTøns
 && (
cﬁ‹
&0x8000))

453 if(
GlobÆTextABR
==0)

455 
d
;

456 
d
 =(
	`GETLE16
(
pde°
)&0x7bde)>>1;

457 
cﬁ‹
 =((color) &0x7bde)>>1;

458 
r
=(
	`XCOL1
(
d
))+((((XCOL1(
cﬁ‹
)))* 
g_m1
)>>7);

459 
b
=(
	`XCOL2
(
d
))+((((XCOL2(
cﬁ‹
)))* 
g_m2
)>>7);

460 
g
=(
	`XCOL3
(
d
))+((((XCOL3(
cﬁ‹
)))* 
g_m3
)>>7);

463 if(
GlobÆTextABR
==1)

465 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))+((((XCOL1(
cﬁ‹
)))* 
g_m1
)>>7);

466 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))+((((XCOL2(
cﬁ‹
)))* 
g_m2
)>>7);

467 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))+((((XCOL3(
cﬁ‹
)))* 
g_m3
)>>7);

470 if(
GlobÆTextABR
==2)

472 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))-((((XCOL1(
cﬁ‹
)))* 
g_m1
)>>7);

473 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))-((((XCOL2(
cﬁ‹
)))* 
g_m2
)>>7);

474 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))-((((XCOL3(
cﬁ‹
)))* 
g_m3
)>>7);

475 if(
r
&0x80000000)Ñ=0;

476 if(
b
&0x80000000) b=0;

477 if(
g
&0x80000000) g=0;

481 #ifde‡
HALFBRIGHTMODE3


482 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))+((((XCOL1(
cﬁ‹
))>>2)* 
g_m1
)>>7);

483 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))+((((XCOL2(
cﬁ‹
))>>2)* 
g_m2
)>>7);

484 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))+((((XCOL3(
cﬁ‹
))>>2)* 
g_m3
)>>7);

486 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))+((((XCOL1(
cﬁ‹
))>>1)* 
g_m1
)>>7);

487 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))+((((XCOL2(
cﬁ‹
))>>1)* 
g_m2
)>>7);

488 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))+((((XCOL3(
cﬁ‹
))>>1)* 
g_m3
)>>7);

494 
r
=((
	`XCOL1
(
cﬁ‹
))* 
g_m1
)>>7;

495 
b
=((
	`XCOL2
(
cﬁ‹
))* 
g_m2
)>>7;

496 
g
=((
	`XCOL3
(
cﬁ‹
))* 
g_m3
)>>7;

499 if(
r
&0x7FFFFFE0)Ñ=0x1f;

500 if(
b
&0x7FFFFC00) b=0x3e0;

501 if(
g
&0x7FFF8000) g=0x7c00;

503 
	`PUTLE16
(
pde°
, (
	`XPSXCOL
(
r
,
g
,
b
))|
l
);

504 
	}
}

508 
ölöe
 
	$GëTextuªTønsCﬁG32
(
uöt32_t
 * 
pde°
,uöt32_à
cﬁ‹
)

510 
öt32_t
 
r
,
g
,
b
,
l
;

512 if(
cﬁ‹
==0) ;

514 
l
=
lSëMask
|(
cﬁ‹
&0x80008000);

516 if(
DøwSemiTøns
 && (
cﬁ‹
&0x80008000))

518 if(
GlobÆTextABR
==0)

520 
r
=((((
	`X32TCOL1
(
	`GETLE32
(
pde°
)))+((
	`X32COL1
(
cﬁ‹
)Ë* 
g_m1
))&0xFF00FF00)>>8);

521 
b
=((((
	`X32TCOL2
(
	`GETLE32
(
pde°
)))+((
	`X32COL2
(
cﬁ‹
)Ë* 
g_m2
))&0xFF00FF00)>>8);

522 
g
=((((
	`X32TCOL3
(
	`GETLE32
(
pde°
)))+((
	`X32COL3
(
cﬁ‹
)Ë* 
g_m3
))&0xFF00FF00)>>8);

525 if(
GlobÆTextABR
==1)

527 
r
=(
	`X32COL1
(
	`GETLE32
(
pde°
)))+(((((X32COL1(
cﬁ‹
)))* 
g_m1
)&0xFF80FF80)>>7);

528 
b
=(
	`X32COL2
(
	`GETLE32
(
pde°
)))+(((((X32COL2(
cﬁ‹
)))* 
g_m2
)&0xFF80FF80)>>7);

529 
g
=(
	`X32COL3
(
	`GETLE32
(
pde°
)))+(((((X32COL3(
cﬁ‹
)))* 
g_m3
)&0xFF80FF80)>>7);

532 if(
GlobÆTextABR
==2)

534 
öt32_t
 
t
;

535 
r
=(((((
	`X32COL1
(
cﬁ‹
)))* 
g_m1
)&0xFF80FF80)>>7);

536 
t
=(
	`GETLE32
(
pde°
)&0x001f0000)-(
r
&0x003f0000); if(t&0x80000000)Å=0;

537 
r
=(
	`GETLE32
(
pde°
)&0x0000001f)-(r&0x0000003f); if(r&0x80000000)Ñ=0;

538 
r
|=
t
;

540 
b
=(((((
	`X32COL2
(
cﬁ‹
)))* 
g_m2
)&0xFF80FF80)>>7);

541 
t
=((
	`GETLE32
(
pde°
)>>5)&0x001f0000)-(
b
&0x003f0000); if(t&0x80000000)Å=0;

542 
b
=((
	`GETLE32
(
pde°
)>>5)&0x0000001f)-(b&0x0000003f); if(b&0x80000000) b=0;

543 
b
|=
t
;

545 
g
=(((((
	`X32COL3
(
cﬁ‹
)))* 
g_m3
)&0xFF80FF80)>>7);

546 
t
=((
	`GETLE32
(
pde°
)>>10)&0x001f0000)-(
g
&0x003f0000); if(t&0x80000000)Å=0;

547 
g
=((
	`GETLE32
(
pde°
)>>10)&0x0000001f)-(g&0x0000003f); if(g&0x80000000) g=0;

548 
g
|=
t
;

552 #ifde‡
HALFBRIGHTMODE3


553 
r
=(
	`X32COL1
(
	`GETLE32
(
pde°
)))+(((((
	`X32BCOL1
(
cﬁ‹
))>>2)* 
g_m1
)&0xFF80FF80)>>7);

554 
b
=(
	`X32COL2
(
	`GETLE32
(
pde°
)))+(((((
	`X32BCOL2
(
cﬁ‹
))>>2)* 
g_m2
)&0xFF80FF80)>>7);

555 
g
=(
	`X32COL3
(
	`GETLE32
(
pde°
)))+(((((
	`X32BCOL3
(
cﬁ‹
))>>2)* 
g_m3
)&0xFF80FF80)>>7);

557 
r
=(
	`X32COL1
(
	`GETLE32
(
pde°
)))+(((((
	`X32ACOL1
(
cﬁ‹
))>>1)* 
g_m1
)&0xFF80FF80)>>7);

558 
b
=(
	`X32COL2
(
	`GETLE32
(
pde°
)))+(((((
	`X32ACOL2
(
cﬁ‹
))>>1)* 
g_m2
)&0xFF80FF80)>>7);

559 
g
=(
	`X32COL3
(
	`GETLE32
(
pde°
)))+(((((
	`X32ACOL3
(
cﬁ‹
))>>1)* 
g_m3
)&0xFF80FF80)>>7);

563 if(!(
cﬁ‹
&0x8000))

565 
r
=‘&0xffff0000)|((((
	`X32COL1
(
cﬁ‹
))* 
g_m1
)&0x0000FF80)>>7);

566 
b
=(b&0xffff0000)|((((
	`X32COL2
(
cﬁ‹
))* 
g_m2
)&0x0000FF80)>>7);

567 
g
=(g&0xffff0000)|((((
	`X32COL3
(
cﬁ‹
))* 
g_m3
)&0x0000FF80)>>7);

569 if(!(
cﬁ‹
&0x80000000))

571 
r
=‘&0xffff)|((((
	`X32COL1
(
cﬁ‹
))* 
g_m1
)&0xFF800000)>>7);

572 
b
=(b&0xffff)|((((
	`X32COL2
(
cﬁ‹
))* 
g_m2
)&0xFF800000)>>7);

573 
g
=(g&0xffff)|((((
	`X32COL3
(
cﬁ‹
))* 
g_m3
)&0xFF800000)>>7);

579 
r
=(((
	`X32COL1
(
cﬁ‹
))* 
g_m1
)&0xFF80FF80)>>7;

580 
b
=(((
	`X32COL2
(
cﬁ‹
))* 
g_m2
)&0xFF80FF80)>>7;

581 
g
=(((
	`X32COL3
(
cﬁ‹
))* 
g_m3
)&0xFF80FF80)>>7;

584 if(
r
&0x7FE00000)Ñ=0x1f0000|(r&0xFFFF);

585 if(
r
&0x7FE0)Ñ=0x1f |(r&0xFFFF0000);

586 if(
b
&0x7FE00000) b=0x1f0000|(b&0xFFFF);

587 if(
b
&0x7FE0) b=0x1f |(b&0xFFFF0000);

588 if(
g
&0x7FE00000) g=0x1f0000|(g&0xFFFF);

589 if(
g
&0x7FE0) g=0x1f |(g&0xFFFF0000);

591 if(
bCheckMask
)

593 
uöt32_t
 
ma
=
	`GETLE32
(
pde°
);

595 
	`PUTLE32
(
pde°
, (
	`X32PSXCOL
(
r
,
g
,
b
))|
l
);

597 if((
cﬁ‹
&0xffff)==0 ) 
	`PUTLE32
(
pde°
, (
ma
&0xffff)|(
	`GETLE32
(pdest)&0xffff0000));

598 if((
cﬁ‹
&0xffff0000)==0Ë
	`PUTLE32
(
pde°
, (
ma
&0xffff0000)|(
	`GETLE32
(pdest)&0xffff));

599 if(
ma
&0x80000000Ë
	`PUTLE32
(
pde°
, (ma&0xFFFF0000)|(
	`GETLE32
(pdest)&0xFFFF));

600 if(
ma
&0x00008000Ë
	`PUTLE32
(
pde°
, (ma&0xFFFFË|(
	`GETLE32
(pdest)&0xFFFF0000));

604 if((
cﬁ‹
&0xffff)==0 ) {
	`PUTLE32
(
pde°
, (
	`GETLE32
’de°)&0xffff)|(((
	`X32PSXCOL
(
r
,
g
,
b
))|
l
)&0xffff0000));;}

605 if((
cﬁ‹
&0xffff0000)==0Ë{
	`PUTLE32
(
pde°
, (
	`GETLE32
’de°)&0xffff0000)|(((
	`X32PSXCOL
(
r
,
g
,
b
))|
l
)&0xffff));;}

607 
	`PUTLE32
(
pde°
, (
	`X32PSXCOL
(
r
,
g
,
b
))|
l
);

608 
	}
}

612 
ölöe
 
	$GëTextuªTønsCﬁG32_S
(
uöt32_t
 * 
pde°
,uöt32_à
cﬁ‹
)

614 
öt32_t
 
r
,
g
,
b
;

616 if(
cﬁ‹
==0) ;

618 
r
=(((
	`X32COL1
(
cﬁ‹
))* 
g_m1
)&0xFF80FF80)>>7;

619 
b
=(((
	`X32COL2
(
cﬁ‹
))* 
g_m2
)&0xFF80FF80)>>7;

620 
g
=(((
	`X32COL3
(
cﬁ‹
))* 
g_m3
)&0xFF80FF80)>>7;

622 if(
r
&0x7FE00000)Ñ=0x1f0000|(r&0xFFFF);

623 if(
r
&0x7FE0)Ñ=0x1f |(r&0xFFFF0000);

624 if(
b
&0x7FE00000) b=0x1f0000|(b&0xFFFF);

625 if(
b
&0x7FE0) b=0x1f |(b&0xFFFF0000);

626 if(
g
&0x7FE00000) g=0x1f0000|(g&0xFFFF);

627 if(
g
&0x7FE0) g=0x1f |(g&0xFFFF0000);

629 if((
cﬁ‹
&0xffff)==0Ë{
	`PUTLE32
(
pde°
, (
	`GETLE32
’de°)&0xffff)|(((
	`X32PSXCOL
(
r
,
g
,
b
))|
lSëMask
|(color&0x80008000))&0xffff0000));;}

630 if((
cﬁ‹
&0xffff0000)==0Ë{
	`PUTLE32
(
pde°
, (
	`GETLE32
’de°)&0xffff0000)|(((
	`X32PSXCOL
(
r
,
g
,
b
))|
lSëMask
|(color&0x80008000))&0xffff));;}

632 
	`PUTLE32
(
pde°
, (
	`X32PSXCOL
(
r
,
g
,
b
))|
lSëMask
|(
cﬁ‹
&0x80008000));

633 
	}
}

637 
ölöe
 
	$GëTextuªTønsCﬁG32_SPR
(
uöt32_t
 * 
pde°
,uöt32_à
cﬁ‹
)

639 
öt32_t
 
r
,
g
,
b
;

641 if(
cﬁ‹
==0) ;

643 if(
DøwSemiTøns
 && (
cﬁ‹
&0x80008000))

645 if(
GlobÆTextABR
==0)

647 
r
=((((
	`X32TCOL1
(
	`GETLE32
(
pde°
)))+((
	`X32COL1
(
cﬁ‹
)Ë* 
g_m1
))&0xFF00FF00)>>8);

648 
b
=((((
	`X32TCOL2
(
	`GETLE32
(
pde°
)))+((
	`X32COL2
(
cﬁ‹
)Ë* 
g_m2
))&0xFF00FF00)>>8);

649 
g
=((((
	`X32TCOL3
(
	`GETLE32
(
pde°
)))+((
	`X32COL3
(
cﬁ‹
)Ë* 
g_m3
))&0xFF00FF00)>>8);

652 if(
GlobÆTextABR
==1)

654 
r
=(
	`X32COL1
(
	`GETLE32
(
pde°
)))+(((((X32COL1(
cﬁ‹
)))* 
g_m1
)&0xFF80FF80)>>7);

655 
b
=(
	`X32COL2
(
	`GETLE32
(
pde°
)))+(((((X32COL2(
cﬁ‹
)))* 
g_m2
)&0xFF80FF80)>>7);

656 
g
=(
	`X32COL3
(
	`GETLE32
(
pde°
)))+(((((X32COL3(
cﬁ‹
)))* 
g_m3
)&0xFF80FF80)>>7);

659 if(
GlobÆTextABR
==2)

661 
öt32_t
 
t
;

662 
r
=(((((
	`X32COL1
(
cﬁ‹
)))* 
g_m1
)&0xFF80FF80)>>7);

663 
t
=(
	`GETLE32
(
pde°
)&0x001f0000)-(
r
&0x003f0000); if(t&0x80000000)Å=0;

664 
r
=(
	`GETLE32
(
pde°
)&0x0000001f)-(r&0x0000003f); if(r&0x80000000)Ñ=0;

665 
r
|=
t
;

667 
b
=(((((
	`X32COL2
(
cﬁ‹
)))* 
g_m2
)&0xFF80FF80)>>7);

668 
t
=((
	`GETLE32
(
pde°
)>>5)&0x001f0000)-(
b
&0x003f0000); if(t&0x80000000)Å=0;

669 
b
=((
	`GETLE32
(
pde°
)>>5)&0x0000001f)-(b&0x0000003f); if(b&0x80000000) b=0;

670 
b
|=
t
;

672 
g
=(((((
	`X32COL3
(
cﬁ‹
)))* 
g_m3
)&0xFF80FF80)>>7);

673 
t
=((
	`GETLE32
(
pde°
)>>10)&0x001f0000)-(
g
&0x003f0000); if(t&0x80000000)Å=0;

674 
g
=((
	`GETLE32
(
pde°
)>>10)&0x0000001f)-(g&0x0000003f); if(g&0x80000000) g=0;

675 
g
|=
t
;

679 #ifde‡
HALFBRIGHTMODE3


680 
r
=(
	`X32COL1
(
	`GETLE32
(
pde°
)))+(((((
	`X32BCOL1
(
cﬁ‹
))>>2)* 
g_m1
)&0xFF80FF80)>>7);

681 
b
=(
	`X32COL2
(
	`GETLE32
(
pde°
)))+(((((
	`X32BCOL2
(
cﬁ‹
))>>2)* 
g_m2
)&0xFF80FF80)>>7);

682 
g
=(
	`X32COL3
(
	`GETLE32
(
pde°
)))+(((((
	`X32BCOL3
(
cﬁ‹
))>>2)* 
g_m3
)&0xFF80FF80)>>7);

684 
r
=(
	`X32COL1
(
	`GETLE32
(
pde°
)))+(((((
	`X32ACOL1
(
cﬁ‹
))>>1)* 
g_m1
)&0xFF80FF80)>>7);

685 
b
=(
	`X32COL2
(
	`GETLE32
(
pde°
)))+(((((
	`X32ACOL2
(
cﬁ‹
))>>1)* 
g_m2
)&0xFF80FF80)>>7);

686 
g
=(
	`X32COL3
(
	`GETLE32
(
pde°
)))+(((((
	`X32ACOL3
(
cﬁ‹
))>>1)* 
g_m3
)&0xFF80FF80)>>7);

690 if(!(
cﬁ‹
&0x8000))

692 
r
=‘&0xffff0000)|((((
	`X32COL1
(
cﬁ‹
))* 
g_m1
)&0x0000FF80)>>7);

693 
b
=(b&0xffff0000)|((((
	`X32COL2
(
cﬁ‹
))* 
g_m2
)&0x0000FF80)>>7);

694 
g
=(g&0xffff0000)|((((
	`X32COL3
(
cﬁ‹
))* 
g_m3
)&0x0000FF80)>>7);

696 if(!(
cﬁ‹
&0x80000000))

698 
r
=‘&0xffff)|((((
	`X32COL1
(
cﬁ‹
))* 
g_m1
)&0xFF800000)>>7);

699 
b
=(b&0xffff)|((((
	`X32COL2
(
cﬁ‹
))* 
g_m2
)&0xFF800000)>>7);

700 
g
=(g&0xffff)|((((
	`X32COL3
(
cﬁ‹
))* 
g_m3
)&0xFF800000)>>7);

706 
r
=(((
	`X32COL1
(
cﬁ‹
))* 
g_m1
)&0xFF80FF80)>>7;

707 
b
=(((
	`X32COL2
(
cﬁ‹
))* 
g_m2
)&0xFF80FF80)>>7;

708 
g
=(((
	`X32COL3
(
cﬁ‹
))* 
g_m3
)&0xFF80FF80)>>7;

711 if(
r
&0x7FE00000)Ñ=0x1f0000|(r&0xFFFF);

712 if(
r
&0x7FE0)Ñ=0x1f |(r&0xFFFF0000);

713 if(
b
&0x7FE00000) b=0x1f0000|(b&0xFFFF);

714 if(
b
&0x7FE0) b=0x1f |(b&0xFFFF0000);

715 if(
g
&0x7FE00000) g=0x1f0000|(g&0xFFFF);

716 if(
g
&0x7FE0) g=0x1f |(g&0xFFFF0000);

718 if(
bCheckMask
)

720 
uöt32_t
 
ma
=
	`GETLE32
(
pde°
);

722 
	`PUTLE32
(
pde°
, (
	`X32PSXCOL
(
r
,
g
,
b
))|
lSëMask
|(
cﬁ‹
&0x80008000));

724 if((
cﬁ‹
&0xffff)==0 ) 
	`PUTLE32
(
pde°
, (
ma
&0xffff)|(
	`GETLE32
(pdest)&0xffff0000));

725 if((
cﬁ‹
&0xffff0000)==0Ë
	`PUTLE32
(
pde°
, (
ma
&0xffff0000)|(
	`GETLE32
(pdest)&0xffff));

726 if(
ma
&0x80000000Ë
	`PUTLE32
(
pde°
, (ma&0xFFFF0000)|(
	`GETLE32
(pdest)&0xFFFF));

727 if(
ma
&0x00008000Ë
	`PUTLE32
(
pde°
, (ma&0xFFFFË|(
	`GETLE32
(pdest)&0xFFFF0000));

731 if((
cﬁ‹
&0xffff)==0 ) {
	`PUTLE32
(
pde°
, (
	`GETLE32
’de°)&0xffff)|(((
	`X32PSXCOL
(
r
,
g
,
b
))|
lSëMask
|(color&0x80008000))&0xffff0000));;}

732 if((
cﬁ‹
&0xffff0000)==0Ë{
	`PUTLE32
(
pde°
, (
	`GETLE32
’de°)&0xffff0000)|(((
	`X32PSXCOL
(
r
,
g
,
b
))|
lSëMask
|(color&0x80008000))&0xffff));;}

734 
	`PUTLE32
(
pde°
, (
	`X32PSXCOL
(
r
,
g
,
b
))|
lSëMask
|(
cﬁ‹
&0x80008000));

735 
	}
}

739 
ölöe
 
	$GëTextuªTønsCﬁGX_Dôhî
(* 
pde°
,
cﬁ‹
,
öt32_t
 
m1
,öt32_à
m2
,öt32_à
m3
)

741 
öt32_t
 
r
,
g
,
b
;

743 if(
cﬁ‹
==0) ;

745 if(
bCheckMask
 && (*
pde°
 & 
	`HOST2LE16
(0x8000))) ;

747 
m1
=(((
	`XCOL1D
(
cﬁ‹
)))*m1)>>4;

748 
m2
=(((
	`XCOL2D
(
cﬁ‹
)))*m2)>>4;

749 
m3
=(((
	`XCOL3D
(
cﬁ‹
)))*m3)>>4;

751 if(
DøwSemiTøns
 && (
cﬁ‹
&0x8000))

753 
r
=((
	`XCOL1D
(
	`GETLE16
(
pde°
)))<<3);

754 
b
=((
	`XCOL2D
(
	`GETLE16
(
pde°
)))<<3);

755 
g
=((
	`XCOL3D
(
	`GETLE16
(
pde°
)))<<3);

757 if(
GlobÆTextABR
==0)

759 
r
=‘>>1)+(
m1
>>1);

760 
b
=(b>>1)+(
m2
>>1);

761 
g
=(g>>1)+(
m3
>>1);

764 if(
GlobÆTextABR
==1)

766 
r
+=
m1
;

767 
b
+=
m2
;

768 
g
+=
m3
;

771 if(
GlobÆTextABR
==2)

773 
r
-=
m1
;

774 
b
-=
m2
;

775 
g
-=
m3
;

776 if(
r
&0x80000000)Ñ=0;

777 if(
b
&0x80000000) b=0;

778 if(
g
&0x80000000) g=0;

782 #ifde‡
HALFBRIGHTMODE3


783 
r
+=(
m1
>>2);

784 
b
+=(
m2
>>2);

785 
g
+=(
m3
>>2);

787 
r
+=(
m1
>>1);

788 
b
+=(
m2
>>1);

789 
g
+=(
m3
>>1);

795 
r
=
m1
;

796 
b
=
m2
;

797 
g
=
m3
;

800 if(
r
&0x7FFFFF00)Ñ=0xff;

801 if(
b
&0x7FFFFF00) b=0xff;

802 if(
g
&0x7FFFFF00) g=0xff;

804 
	`Dôhî16
(
pde°
,
r
,
b
,
g
,
sSëMask
|(
cﬁ‹
&0x8000));

806 
	}
}

810 
ölöe
 
	$GëTextuªTønsCﬁGX
(* 
pde°
,
cﬁ‹
,
m1
,
m2
,
m3
)

812 
öt32_t
 
r
,
g
,
b
;
l
;

814 if(
cﬁ‹
==0) ;

816 if(
bCheckMask
 && (*
pde°
 & 
	`HOST2LE16
(0x8000))) ;

818 
l
=
sSëMask
|(
cﬁ‹
&0x8000);

820 if(
DøwSemiTøns
 && (
cﬁ‹
&0x8000))

822 if(
GlobÆTextABR
==0)

824 
d
;

825 
d
 =(
	`GETLE16
(
pde°
)&0x7bde)>>1;

826 
cﬁ‹
 =((color) &0x7bde)>>1;

827 
r
=(
	`XCOL1
(
d
))+((((XCOL1(
cﬁ‹
)))* 
m1
)>>7);

828 
b
=(
	`XCOL2
(
d
))+((((XCOL2(
cﬁ‹
)))* 
m2
)>>7);

829 
g
=(
	`XCOL3
(
d
))+((((XCOL3(
cﬁ‹
)))* 
m3
)>>7);

832 if(
GlobÆTextABR
==1)

834 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))+((((XCOL1(
cﬁ‹
)))* 
m1
)>>7);

835 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))+((((XCOL2(
cﬁ‹
)))* 
m2
)>>7);

836 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))+((((XCOL3(
cﬁ‹
)))* 
m3
)>>7);

839 if(
GlobÆTextABR
==2)

841 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))-((((XCOL1(
cﬁ‹
)))* 
m1
)>>7);

842 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))-((((XCOL2(
cﬁ‹
)))* 
m2
)>>7);

843 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))-((((XCOL3(
cﬁ‹
)))* 
m3
)>>7);

844 if(
r
&0x80000000)Ñ=0;

845 if(
b
&0x80000000) b=0;

846 if(
g
&0x80000000) g=0;

850 #ifde‡
HALFBRIGHTMODE3


851 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))+((((XCOL1(
cﬁ‹
))>>2)* 
m1
)>>7);

852 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))+((((XCOL2(
cﬁ‹
))>>2)* 
m2
)>>7);

853 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))+((((XCOL3(
cﬁ‹
))>>2)* 
m3
)>>7);

855 
r
=(
	`XCOL1
(
	`GETLE16
(
pde°
)))+((((XCOL1(
cﬁ‹
))>>1)* 
m1
)>>7);

856 
b
=(
	`XCOL2
(
	`GETLE16
(
pde°
)))+((((XCOL2(
cﬁ‹
))>>1)* 
m2
)>>7);

857 
g
=(
	`XCOL3
(
	`GETLE16
(
pde°
)))+((((XCOL3(
cﬁ‹
))>>1)* 
m3
)>>7);

863 
r
=((
	`XCOL1
(
cﬁ‹
))* 
m1
)>>7;

864 
b
=((
	`XCOL2
(
cﬁ‹
))* 
m2
)>>7;

865 
g
=((
	`XCOL3
(
cﬁ‹
))* 
m3
)>>7;

868 if(
r
&0x7FFFFFE0)Ñ=0x1f;

869 if(
b
&0x7FFFFC00) b=0x3e0;

870 if(
g
&0x7FFF8000) g=0x7c00;

872 
	`PUTLE16
(
pde°
, (
	`XPSXCOL
(
r
,
g
,
b
))|
l
);

873 
	}
}

877 
ölöe
 
	$GëTextuªTønsCﬁGX_S
(* 
pde°
,
cﬁ‹
,
m1
,
m2
,
m3
)

879 
öt32_t
 
r
,
g
,
b
;

881 if(
cﬁ‹
==0) ;

883 
r
=((
	`XCOL1
(
cﬁ‹
))* 
m1
)>>7;

884 
b
=((
	`XCOL2
(
cﬁ‹
))* 
m2
)>>7;

885 
g
=((
	`XCOL3
(
cﬁ‹
))* 
m3
)>>7;

887 if(
r
&0x7FFFFFE0)Ñ=0x1f;

888 if(
b
&0x7FFFFC00) b=0x3e0;

889 if(
g
&0x7FFF8000) g=0x7c00;

891 
	`PUTLE16
(
pde°
, (
	`XPSXCOL
(
r
,
g
,
b
))|
sSëMask
|(
cﬁ‹
&0x8000));

892 
	}
}

896 
ölöe
 
	$GëTextuªTønsCﬁGX32_S
(
uöt32_t
 * 
pde°
,uöt32_à
cﬁ‹
,
m1
,
m2
,
m3
)

898 
öt32_t
 
r
,
g
,
b
;

900 if(
cﬁ‹
==0) ;

902 
r
=(((
	`X32COL1
(
cﬁ‹
))* 
m1
)&0xFF80FF80)>>7;

903 
b
=(((
	`X32COL2
(
cﬁ‹
))* 
m2
)&0xFF80FF80)>>7;

904 
g
=(((
	`X32COL3
(
cﬁ‹
))* 
m3
)&0xFF80FF80)>>7;

906 if(
r
&0x7FE00000)Ñ=0x1f0000|(r&0xFFFF);

907 if(
r
&0x7FE0)Ñ=0x1f |(r&0xFFFF0000);

908 if(
b
&0x7FE00000) b=0x1f0000|(b&0xFFFF);

909 if(
b
&0x7FE0) b=0x1f |(b&0xFFFF0000);

910 if(
g
&0x7FE00000) g=0x1f0000|(g&0xFFFF);

911 if(
g
&0x7FE0) g=0x1f |(g&0xFFFF0000);

913 if((
cﬁ‹
&0xffff)==0Ë{
	`PUTLE32
(
pde°
, (
	`GETLE32
’de°)&0xffff)|(((
	`X32PSXCOL
(
r
,
g
,
b
))|
lSëMask
|(color&0x80008000))&0xffff0000));;}

914 if((
cﬁ‹
&0xffff0000)==0Ë{
	`PUTLE32
(
pde°
, (
	`GETLE32
’de°)&0xffff0000)|(((
	`X32PSXCOL
(
r
,
g
,
b
))|
lSëMask
|(color&0x80008000))&0xffff));;}

916 
	`PUTLE32
(
pde°
, (
	`X32PSXCOL
(
r
,
g
,
b
))|
lSëMask
|(
cﬁ‹
&0x80008000));

917 
	}
}

923 
	$FûlSo·w¨eAªaTøns
(
x0
,
y0
,
x1
,

924 
y1
,
cﬁ
)

926 
j
,
i
,
dx
,
dy
;

928 if(
y0
>
y1
) ;

929 if(
x0
>
x1
) ;

931 if(
x1
<
døwX
) ;

932 if(
y1
<
døwY
) ;

933 if(
x0
>
døwW
) ;

934 if(
y0
>
døwH
) ;

936 
x1
=
	`mö
(x1,
døwW
+1);

937 
y1
=
	`mö
(y1,
døwH
+1);

938 
x0
=
	`max
(x0,
døwX
);

939 
y0
=
	`max
(y0,
døwY
);

941 if(
y0
>=512) ;

942 if(
x0
>1023) ;

944 if(
y1
>512) y1=512;

945 if(
x1
>1024) x1=1024;

947 
dx
=
x1
-
x0
;
dy
=
y1
-
y0
;

949 if(
dx
==1 && 
dy
==1 && 
x0
==1020 && 
y0
==511)

951 
iChót
=0;

952 
cﬁ
+=
iChót
;

953 if(
iChót
==1) iCheat=0; iCheat=1;

957 if(
dx
&1)

959 *
DSTPå
;

960 
LöeOff£t
;

961 
DSTPå
 = 
psxVuw
 + (1024*
y0
Ë+ 
x0
;

962 
LöeOff£t
 = 1024 - 
dx
;

963 
i
=0;i<
dy
;i++)

965 
j
=0;j<
dx
;j++)

966 
	`GëShadeTønsCﬁ
(
DSTPå
++,
cﬁ
);

967 
DSTPå
 +
LöeOff£t
;

972 
uöt32_t
 *
DSTPå
;

973 
LöeOff£t
;

974 
uöt32_t
 
lcﬁ
=
lSëMask
|(((uöt32_t)(
cﬁ
))<<16)|col;

975 
dx
>>=1;

976 
DSTPå
 = (
uöt32_t
 *)(
psxVuw
 + (1024*
y0
Ë+ 
x0
);

977 
LöeOff£t
 = 512 - 
dx
;

979 if(!
bCheckMask
 && !
DøwSemiTøns
)

981 
i
=0;i<
dy
;i++)

983 
j
=0;j<
dx
;j++Ë{ 
	`PUTLE32
(
DSTPå
, 
lcﬁ
); DSTPtr++; }

984 
DSTPå
 +
LöeOff£t
;

989 
i
=0;i<
dy
;i++)

991 
j
=0;j<
dx
;j++)

992 
	`GëShadeTønsCﬁ32
(
DSTPå
++,
lcﬁ
);

993 
DSTPå
 +
LöeOff£t
;

997 
	}
}

1001 
	$FûlSo·w¨eAªa
(
x0
,
y0
,
x1
,

1002 
y1
,
cﬁ
)

1004 
j
,
i
,
dx
,
dy
;

1007 if(
x0
<0) x0=0;

1008 if(
y0
<0) y0=0;

1010 if(
y0
>
y1
) ;

1011 if(
x0
>
x1
) ;

1013 if(
y0
>=512) ;

1014 if(
x0
>1023) ;

1016 if(
y1
>512) y1=512;

1017 if(
x1
>1024) x1=1024;

1019 
dx
=
x1
-
x0
;
dy
=
y1
-
y0
;

1020 if(
dx
&1)

1022 *
DSTPå
;

1023 
LöeOff£t
;

1025 
DSTPå
 = 
psxVuw
 + (1024*
y0
Ë+ 
x0
;

1026 
LöeOff£t
 = 1024 - 
dx
;

1028 
i
=0;i<
dy
;i++)

1030 
j
=0;j<
dx
;j++Ë{ 
	`PUTLE16
(
DSTPå
, 
cﬁ
); DSTPtr++; }

1031 
DSTPå
 +
LöeOff£t
;

1036 
uöt32_t
 *
DSTPå
;

1037 
LöeOff£t
;

1038 
uöt32_t
 
lcﬁ
=(((
öt32_t
)
cﬁ
)<<16)|col;

1039 
dx
>>=1;

1040 
DSTPå
 = (
uöt32_t
 *)(
psxVuw
 + (1024*
y0
Ë+ 
x0
);

1041 
LöeOff£t
 = 512 - 
dx
;

1043 
i
=0;i<
dy
;i++)

1045 
j
=0;j<
dx
;j++Ë{ 
	`PUTLE32
(
DSTPå
, 
lcﬁ
); DSTPtr++; }

1046 
DSTPå
 +
LöeOff£t
;

1049 
	}
}

1059 
	sSOFTVTAG


1061 
	mx
,
	my
;

1062 
	mu
,
	mv
;

1063 
öt32_t
 
	mR
,
	mG
,
	mB
;

1064 } 
	tso·_vîãx
;

1066 
so·_vîãx
 
	gvtx
[4];

1067 
so·_vîãx
 * 
	gÀ·_¨øy
[4], * 
	gright_¨øy
[4];

1068 
	gÀ·_£˘i⁄
, 
	gright_£˘i⁄
;

1069 
	gÀ·_£˘i⁄_height
, 
	gright_£˘i⁄_height
;

1070 
	gÀ·_x
, 
	gdñè_À·_x
, 
	gright_x
, 
	gdñè_right_x
;

1071 
	gÀ·_u
, 
	gdñè_À·_u
, 
	gÀ·_v
, 
	gdñè_À·_v
;

1072 
	gright_u
, 
	gdñè_right_u
, 
	gright_v
, 
	gdñè_right_v
;

1073 
	gÀ·_R
, 
	gdñè_À·_R
, 
	gright_R
, 
	gdñè_right_R
;

1074 
	gÀ·_G
, 
	gdñè_À·_G
, 
	gright_G
, 
	gdñè_right_G
;

1075 
	gÀ·_B
, 
	gdñè_À·_B
, 
	gright_B
, 
	gdñè_right_B
;

1078 
ölöe
 
	$shl10idiv
(
x
, 
y
)

1080 #ifde‡
__ARM_ARCH_7A__


1082 
r
 = 1024.0‡* ()
x
 / ()
y
;

1083  ()
r
;

1085 
__öt64
 
bi
=
x
;

1086 
bi
<<=10;

1087  
bi
/
y
;

1089 
	}
}

1095 
ölöe
 
	$RightSe˘i⁄_F
()

1097 
so·_vîãx
 * 
v1
 = 
right_¨øy
[ 
right_£˘i⁄
 ];

1098 
so·_vîãx
 * 
v2
 = 
right_¨øy
[ 
right_£˘i⁄
-1 ];

1100 
height
 = 
v2
->
y
 - 
v1
->y;

1101 if(
height
 == 0)  0;

1102 
dñè_right_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

1103 
right_x
 = 
v1
->
x
;

1105 
right_£˘i⁄_height
 = 
height
;

1106  
height
;

1107 
	}
}

1111 
ölöe
 
	$Le·Se˘i⁄_F
()

1113 
so·_vîãx
 * 
v1
 = 
À·_¨øy
[ 
À·_£˘i⁄
 ];

1114 
so·_vîãx
 * 
v2
 = 
À·_¨øy
[ 
À·_£˘i⁄
-1 ];

1116 
height
 = 
v2
->
y
 - 
v1
->y;

1117 if(
height
 == 0)  0;

1118 
dñè_À·_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

1119 
À·_x
 = 
v1
->
x
;

1121 
À·_£˘i⁄_height
 = 
height
;

1122  
height
;

1123 
	}
}

1127 
ölöe
 
BOOL
 
	$NextRow_F
()

1129 if(--
À·_£˘i⁄_height
<=0)

1131 if(--
À·_£˘i⁄
 <0Ë{ 
TRUE
;}

1132 if(
	`Le·Se˘i⁄_F
(Ë<0Ë{ 
TRUE
;}

1136 
À·_x
 +
dñè_À·_x
;

1139 if(--
right_£˘i⁄_height
<=0)

1141 if(--
right_£˘i⁄
<=0Ë{ 
TRUE
;}

1142 if(
	`RightSe˘i⁄_F
(Ë<=0Ë{ 
TRUE
;}

1146 
right_x
 +
dñè_right_x
;

1148  
FALSE
;

1149 
	}
}

1153 
ölöe
 
BOOL
 
	$SëupSe˘i⁄s_F
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
)

1155 
so·_vîãx
 * 
v1
, * 
v2
, * 
v3
;

1156 
height
,
l⁄ge°
;

1158 
v1
 = 
vtx
; v1->
x
=
x1
<<16;v1->
y
=
y1
;

1159 
v2
 = 
vtx
+1; v2->
x
=
x2
<<16;v2->
y
=
y2
;

1160 
v3
 = 
vtx
+2; v3->
x
=
x3
<<16;v3->
y
=
y3
;

1162 if(
v1
->
y
 > 
v2
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v2; v2 = v; }

1163 if(
v1
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v3; v3 = v; }

1164 if(
v2
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v2; v2 = v3; v3 = v; }

1166 
height
 = 
v3
->
y
 - 
v1
->y;

1167 if(
height
 =0Ë{ 
FALSE
;}

1168 
l⁄ge°
 = (((
v2
->
y
 - 
v1
->yË<< 16Ë/ 
height
Ë* ((
v3
->
x
 - v1->x)>>16) + (v1->x - v2->x);

1169 if(
l⁄ge°
 =0Ë{ 
FALSE
;}

1171 if(
l⁄ge°
 < 0)

1173 
right_¨øy
[0] = 
v3
;

1174 
right_¨øy
[1] = 
v2
;

1175 
right_¨øy
[2] = 
v1
;

1176 
right_£˘i⁄
 = 2;

1177 
À·_¨øy
[0] = 
v3
;

1178 
À·_¨øy
[1] = 
v1
;

1179 
À·_£˘i⁄
 = 1;

1181 if(
	`Le·Se˘i⁄_F
(Ë<0Ë 
FALSE
;

1182 if(
	`RightSe˘i⁄_F
() <= 0)

1184 
right_£˘i⁄
--;

1185 if(
	`RightSe˘i⁄_F
(Ë<0Ë 
FALSE
;

1190 
À·_¨øy
[0] = 
v3
;

1191 
À·_¨øy
[1] = 
v2
;

1192 
À·_¨øy
[2] = 
v1
;

1193 
À·_£˘i⁄
 = 2;

1194 
right_¨øy
[0] = 
v3
;

1195 
right_¨øy
[1] = 
v1
;

1196 
right_£˘i⁄
 = 1;

1198 if(
	`RightSe˘i⁄_F
(Ë<0Ë 
FALSE
;

1199 if(
	`Le·Se˘i⁄_F
() <= 0)

1201 
À·_£˘i⁄
--;

1202 if(
	`Le·Se˘i⁄_F
(Ë<0Ë 
FALSE
;

1206 
Ymö
=
v1
->
y
;

1207 
Ymax
=
	`mö
(
v3
->
y
-1,
døwH
);

1209  
TRUE
;

1210 
	}
}

1215 
ölöe
 
	$RightSe˘i⁄_G
()

1217 
so·_vîãx
 * 
v1
 = 
right_¨øy
[ 
right_£˘i⁄
 ];

1218 
so·_vîãx
 * 
v2
 = 
right_¨øy
[ 
right_£˘i⁄
-1 ];

1220 
height
 = 
v2
->
y
 - 
v1
->y;

1221 if(
height
 == 0)  0;

1222 
dñè_right_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

1223 
right_x
 = 
v1
->
x
;

1225 
right_£˘i⁄_height
 = 
height
;

1226  
height
;

1227 
	}
}

1231 
ölöe
 
	$Le·Se˘i⁄_G
()

1233 
so·_vîãx
 * 
v1
 = 
À·_¨øy
[ 
À·_£˘i⁄
 ];

1234 
so·_vîãx
 * 
v2
 = 
À·_¨øy
[ 
À·_£˘i⁄
-1 ];

1236 
height
 = 
v2
->
y
 - 
v1
->y;

1237 if(
height
 == 0)  0;

1238 
dñè_À·_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

1239 
À·_x
 = 
v1
->
x
;

1241 
dñè_À·_R
 = ((
v2
->
R
 - 
v1
->R)Ë/ 
height
;

1242 
À·_R
 = 
v1
->
R
;

1243 
dñè_À·_G
 = ((
v2
->
G
 - 
v1
->G)Ë/ 
height
;

1244 
À·_G
 = 
v1
->
G
;

1245 
dñè_À·_B
 = ((
v2
->
B
 - 
v1
->B)Ë/ 
height
;

1246 
À·_B
 = 
v1
->
B
;

1248 
À·_£˘i⁄_height
 = 
height
;

1249  
height
;

1250 
	}
}

1254 
ölöe
 
BOOL
 
	$NextRow_G
()

1256 if(--
À·_£˘i⁄_height
<=0)

1258 if(--
À·_£˘i⁄
 <0Ë{ 
TRUE
;}

1259 if(
	`Le·Se˘i⁄_G
(Ë<0Ë{ 
TRUE
;}

1263 
À·_x
 +
dñè_À·_x
;

1264 
À·_R
 +
dñè_À·_R
;

1265 
À·_G
 +
dñè_À·_G
;

1266 
À·_B
 +
dñè_À·_B
;

1269 if(--
right_£˘i⁄_height
<=0)

1271 if(--
right_£˘i⁄
<=0Ë{ 
TRUE
;}

1272 if(
	`RightSe˘i⁄_G
(Ë<=0Ë{ 
TRUE
;}

1276 
right_x
 +
dñè_right_x
;

1278  
FALSE
;

1279 
	}
}

1283 
ölöe
 
BOOL
 
	$SëupSe˘i⁄s_G
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
öt32_t
 
rgb1
, i¡32_à
rgb2
, i¡32_à
rgb3
)

1285 
so·_vîãx
 * 
v1
, * 
v2
, * 
v3
;

1286 
height
,
l⁄ge°
,
ãmp
;

1288 
v1
 = 
vtx
; v1->
x
=
x1
<<16;v1->
y
=
y1
;

1289 
v1
->
R
=(
rgb1
) & 0x00ff0000;

1290 
v1
->
G
=(
rgb1
<<8) & 0x00ff0000;

1291 
v1
->
B
=(
rgb1
<<16) & 0x00ff0000;

1292 
v2
 = 
vtx
+1; v2->
x
=
x2
<<16;v2->
y
=
y2
;

1293 
v2
->
R
=(
rgb2
) & 0x00ff0000;

1294 
v2
->
G
=(
rgb2
<<8) & 0x00ff0000;

1295 
v2
->
B
=(
rgb2
<<16) & 0x00ff0000;

1296 
v3
 = 
vtx
+2; v3->
x
=
x3
<<16;v3->
y
=
y3
;

1297 
v3
->
R
=(
rgb3
) & 0x00ff0000;

1298 
v3
->
G
=(
rgb3
<<8) & 0x00ff0000;

1299 
v3
->
B
=(
rgb3
<<16) & 0x00ff0000;

1301 if(
v1
->
y
 > 
v2
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v2; v2 = v; }

1302 if(
v1
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v3; v3 = v; }

1303 if(
v2
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v2; v2 = v3; v3 = v; }

1305 
height
 = 
v3
->
y
 - 
v1
->y;

1306 if(
height
 =0Ë{ 
FALSE
;}

1307 
ãmp
=(((
v2
->
y
 - 
v1
->yË<< 16Ë/ 
height
);

1308 
l⁄ge°
 = 
ãmp
 * ((
v3
->
x
 - 
v1
->x)>>16Ë+ (v1->x - 
v2
->x);

1309 if(
l⁄ge°
 =0Ë{ 
FALSE
;}

1311 if(
l⁄ge°
 < 0)

1313 
right_¨øy
[0] = 
v3
;

1314 
right_¨øy
[1] = 
v2
;

1315 
right_¨øy
[2] = 
v1
;

1316 
right_£˘i⁄
 = 2;

1317 
À·_¨øy
[0] = 
v3
;

1318 
À·_¨øy
[1] = 
v1
;

1319 
À·_£˘i⁄
 = 1;

1321 if(
	`Le·Se˘i⁄_G
(Ë<0Ë 
FALSE
;

1322 if(
	`RightSe˘i⁄_G
() <= 0)

1324 
right_£˘i⁄
--;

1325 if(
	`RightSe˘i⁄_G
(Ë<0Ë 
FALSE
;

1327 if(
l⁄ge°
 > -0x1000)Üongest = -0x1000;

1331 
À·_¨øy
[0] = 
v3
;

1332 
À·_¨øy
[1] = 
v2
;

1333 
À·_¨øy
[2] = 
v1
;

1334 
À·_£˘i⁄
 = 2;

1335 
right_¨øy
[0] = 
v3
;

1336 
right_¨øy
[1] = 
v1
;

1337 
right_£˘i⁄
 = 1;

1339 if(
	`RightSe˘i⁄_G
(Ë<0Ë 
FALSE
;

1340 if(
	`Le·Se˘i⁄_G
() <= 0)

1342 
À·_£˘i⁄
--;

1343 if(
	`Le·Se˘i⁄_G
(Ë<0Ë 
FALSE
;

1345 if(
l⁄ge°
 < 0x1000)Üongest = 0x1000;

1348 
Ymö
=
v1
->
y
;

1349 
Ymax
=
	`mö
(
v3
->
y
-1,
døwH
);

1351 
dñè_right_R
=
	`shl10idiv
(
ãmp
*((
v3
->
R
 - 
v1
->R)>>10)+((v1->R - 
v2
->R)<<6),
l⁄ge°
);

1352 
dñè_right_G
=
	`shl10idiv
(
ãmp
*((
v3
->
G
 - 
v1
->G)>>10)+((v1->G - 
v2
->G)<<6),
l⁄ge°
);

1353 
dñè_right_B
=
	`shl10idiv
(
ãmp
*((
v3
->
B
 - 
v1
->B)>>10)+((v1->B - 
v2
->B)<<6),
l⁄ge°
);

1355  
TRUE
;

1356 
	}
}

1361 
ölöe
 
	$RightSe˘i⁄_FT
()

1363 
so·_vîãx
 * 
v1
 = 
right_¨øy
[ 
right_£˘i⁄
 ];

1364 
so·_vîãx
 * 
v2
 = 
right_¨øy
[ 
right_£˘i⁄
-1 ];

1366 
height
 = 
v2
->
y
 - 
v1
->y;

1367 if(
height
 == 0)  0;

1368 
dñè_right_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

1369 
right_x
 = 
v1
->
x
;

1371 
right_£˘i⁄_height
 = 
height
;

1372  
height
;

1373 
	}
}

1377 
ölöe
 
	$Le·Se˘i⁄_FT
()

1379 
so·_vîãx
 * 
v1
 = 
À·_¨øy
[ 
À·_£˘i⁄
 ];

1380 
so·_vîãx
 * 
v2
 = 
À·_¨øy
[ 
À·_£˘i⁄
-1 ];

1382 
height
 = 
v2
->
y
 - 
v1
->y;

1383 if(
height
 == 0)  0;

1384 
dñè_À·_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

1385 
À·_x
 = 
v1
->
x
;

1387 
dñè_À·_u
 = ((
v2
->
u
 - 
v1
->u)Ë/ 
height
;

1388 
À·_u
 = 
v1
->
u
;

1389 
dñè_À·_v
 = ((
v2
->
v
 - 
v1
->v)Ë/ 
height
;

1390 
À·_v
 = 
v1
->
v
;

1392 
À·_£˘i⁄_height
 = 
height
;

1393  
height
;

1394 
	}
}

1398 
ölöe
 
BOOL
 
	$NextRow_FT
()

1400 if(--
À·_£˘i⁄_height
<=0)

1402 if(--
À·_£˘i⁄
 <0Ë{ 
TRUE
;}

1403 if(
	`Le·Se˘i⁄_FT
(Ë<0Ë{ 
TRUE
;}

1407 
À·_x
 +
dñè_À·_x
;

1408 
À·_u
 +
dñè_À·_u
;

1409 
À·_v
 +
dñè_À·_v
;

1412 if(--
right_£˘i⁄_height
<=0)

1414 if(--
right_£˘i⁄
<=0Ë{ 
TRUE
;}

1415 if(
	`RightSe˘i⁄_FT
(Ë<=0Ë{ 
TRUE
;}

1419 
right_x
 +
dñè_right_x
;

1421  
FALSE
;

1422 
	}
}

1426 
ölöe
 
BOOL
 
	$SëupSe˘i⁄s_FT
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
)

1428 
so·_vîãx
 * 
v1
, * 
v2
, * 
v3
;

1429 
height
,
l⁄ge°
,
ãmp
;

1431 
v1
 = 
vtx
; v1->
x
=
x1
<<16;v1->
y
=
y1
;

1432 
v1
->
u
=
tx1
<<16;v1->
v
=
ty1
<<16;

1433 
v2
 = 
vtx
+1; v2->
x
=
x2
<<16;v2->
y
=
y2
;

1434 
v2
->
u
=
tx2
<<16;v2->
v
=
ty2
<<16;

1435 
v3
 = 
vtx
+2; v3->
x
=
x3
<<16;v3->
y
=
y3
;

1436 
v3
->
u
=
tx3
<<16;v3->
v
=
ty3
<<16;

1438 if(
v1
->
y
 > 
v2
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v2; v2 = v; }

1439 if(
v1
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v3; v3 = v; }

1440 if(
v2
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v2; v2 = v3; v3 = v; }

1442 
height
 = 
v3
->
y
 - 
v1
->y;

1443 if(
height
 =0Ë{ 
FALSE
;}

1445 
ãmp
=(((
v2
->
y
 - 
v1
->yË<< 16Ë/ 
height
);

1446 
l⁄ge°
 = 
ãmp
 * ((
v3
->
x
 - 
v1
->x)>>16Ë+ (v1->x - 
v2
->x);

1448 if(
l⁄ge°
 =0Ë{ 
FALSE
;}

1450 if(
l⁄ge°
 < 0)

1452 
right_¨øy
[0] = 
v3
;

1453 
right_¨øy
[1] = 
v2
;

1454 
right_¨øy
[2] = 
v1
;

1455 
right_£˘i⁄
 = 2;

1456 
À·_¨øy
[0] = 
v3
;

1457 
À·_¨øy
[1] = 
v1
;

1458 
À·_£˘i⁄
 = 1;

1460 if(
	`Le·Se˘i⁄_FT
(Ë<0Ë 
FALSE
;

1461 if(
	`RightSe˘i⁄_FT
() <= 0)

1463 
right_£˘i⁄
--;

1464 if(
	`RightSe˘i⁄_FT
(Ë<0Ë 
FALSE
;

1466 if(
l⁄ge°
 > -0x1000)Üongest = -0x1000;

1470 
À·_¨øy
[0] = 
v3
;

1471 
À·_¨øy
[1] = 
v2
;

1472 
À·_¨øy
[2] = 
v1
;

1473 
À·_£˘i⁄
 = 2;

1474 
right_¨øy
[0] = 
v3
;

1475 
right_¨øy
[1] = 
v1
;

1476 
right_£˘i⁄
 = 1;

1478 if(
	`RightSe˘i⁄_FT
(Ë<0Ë 
FALSE
;

1479 if(
	`Le·Se˘i⁄_FT
() <= 0)

1481 
À·_£˘i⁄
--;

1482 if(
	`Le·Se˘i⁄_FT
(Ë<0Ë 
FALSE
;

1484 if(
l⁄ge°
 < 0x1000)Üongest = 0x1000;

1487 
Ymö
=
v1
->
y
;

1488 
Ymax
=
	`mö
(
v3
->
y
-1,
døwH
);

1490 
dñè_right_u
=
	`shl10idiv
(
ãmp
*((
v3
->
u
 - 
v1
->u)>>10)+((v1->u - 
v2
->u)<<6),
l⁄ge°
);

1491 
dñè_right_v
=
	`shl10idiv
(
ãmp
*((
v3
->
v
 - 
v1
->v)>>10)+((v1->v - 
v2
->v)<<6),
l⁄ge°
);

1493  
TRUE
;

1494 
	}
}

1499 
ölöe
 
	$RightSe˘i⁄_GT
()

1501 
so·_vîãx
 * 
v1
 = 
right_¨øy
[ 
right_£˘i⁄
 ];

1502 
so·_vîãx
 * 
v2
 = 
right_¨øy
[ 
right_£˘i⁄
-1 ];

1504 
height
 = 
v2
->
y
 - 
v1
->y;

1505 if(
height
 == 0)  0;

1506 
dñè_right_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

1507 
right_x
 = 
v1
->
x
;

1509 
right_£˘i⁄_height
 = 
height
;

1510  
height
;

1511 
	}
}

1515 
ölöe
 
	$Le·Se˘i⁄_GT
()

1517 
so·_vîãx
 * 
v1
 = 
À·_¨øy
[ 
À·_£˘i⁄
 ];

1518 
so·_vîãx
 * 
v2
 = 
À·_¨øy
[ 
À·_£˘i⁄
-1 ];

1520 
height
 = 
v2
->
y
 - 
v1
->y;

1521 if(
height
 == 0)  0;

1522 
dñè_À·_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

1523 
À·_x
 = 
v1
->
x
;

1525 
dñè_À·_u
 = ((
v2
->
u
 - 
v1
->u)Ë/ 
height
;

1526 
À·_u
 = 
v1
->
u
;

1527 
dñè_À·_v
 = ((
v2
->
v
 - 
v1
->v)Ë/ 
height
;

1528 
À·_v
 = 
v1
->
v
;

1530 
dñè_À·_R
 = ((
v2
->
R
 - 
v1
->R)Ë/ 
height
;

1531 
À·_R
 = 
v1
->
R
;

1532 
dñè_À·_G
 = ((
v2
->
G
 - 
v1
->G)Ë/ 
height
;

1533 
À·_G
 = 
v1
->
G
;

1534 
dñè_À·_B
 = ((
v2
->
B
 - 
v1
->B)Ë/ 
height
;

1535 
À·_B
 = 
v1
->
B
;

1537 
À·_£˘i⁄_height
 = 
height
;

1538  
height
;

1539 
	}
}

1543 
ölöe
 
BOOL
 
	$NextRow_GT
()

1545 if(--
À·_£˘i⁄_height
<=0)

1547 if(--
À·_£˘i⁄
 <0Ë{ 
TRUE
;}

1548 if(
	`Le·Se˘i⁄_GT
(Ë<0Ë{ 
TRUE
;}

1552 
À·_x
 +
dñè_À·_x
;

1553 
À·_u
 +
dñè_À·_u
;

1554 
À·_v
 +
dñè_À·_v
;

1555 
À·_R
 +
dñè_À·_R
;

1556 
À·_G
 +
dñè_À·_G
;

1557 
À·_B
 +
dñè_À·_B
;

1560 if(--
right_£˘i⁄_height
<=0)

1562 if(--
right_£˘i⁄
<=0Ë{ 
TRUE
;}

1563 if(
	`RightSe˘i⁄_GT
(Ë<=0Ë{ 
TRUE
;}

1567 
right_x
 +
dñè_right_x
;

1569  
FALSE
;

1570 
	}
}

1574 
ölöe
 
BOOL
 
	$SëupSe˘i⁄s_GT
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
öt32_t
 
rgb1
, i¡32_à
rgb2
, i¡32_à
rgb3
)

1576 
so·_vîãx
 * 
v1
, * 
v2
, * 
v3
;

1577 
height
,
l⁄ge°
,
ãmp
;

1579 
v1
 = 
vtx
; v1->
x
=
x1
<<16;v1->
y
=
y1
;

1580 
v1
->
u
=
tx1
<<16;v1->
v
=
ty1
<<16;

1581 
v1
->
R
=(
rgb1
) & 0x00ff0000;

1582 
v1
->
G
=(
rgb1
<<8) & 0x00ff0000;

1583 
v1
->
B
=(
rgb1
<<16) & 0x00ff0000;

1585 
v2
 = 
vtx
+1; v2->
x
=
x2
<<16;v2->
y
=
y2
;

1586 
v2
->
u
=
tx2
<<16;v2->
v
=
ty2
<<16;

1587 
v2
->
R
=(
rgb2
) & 0x00ff0000;

1588 
v2
->
G
=(
rgb2
<<8) & 0x00ff0000;

1589 
v2
->
B
=(
rgb2
<<16) & 0x00ff0000;

1591 
v3
 = 
vtx
+2; v3->
x
=
x3
<<16;v3->
y
=
y3
;

1592 
v3
->
u
=
tx3
<<16;v3->
v
=
ty3
<<16;

1593 
v3
->
R
=(
rgb3
) & 0x00ff0000;

1594 
v3
->
G
=(
rgb3
<<8) & 0x00ff0000;

1595 
v3
->
B
=(
rgb3
<<16) & 0x00ff0000;

1597 if(
v1
->
y
 > 
v2
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v2; v2 = v; }

1598 if(
v1
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v3; v3 = v; }

1599 if(
v2
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v2; v2 = v3; v3 = v; }

1601 
height
 = 
v3
->
y
 - 
v1
->y;

1602 if(
height
 =0Ë{ 
FALSE
;}

1604 
ãmp
=(((
v2
->
y
 - 
v1
->yË<< 16Ë/ 
height
);

1605 
l⁄ge°
 = 
ãmp
 * ((
v3
->
x
 - 
v1
->x)>>16Ë+ (v1->x - 
v2
->x);

1607 if(
l⁄ge°
 =0Ë{ 
FALSE
;}

1609 if(
l⁄ge°
 < 0)

1611 
right_¨øy
[0] = 
v3
;

1612 
right_¨øy
[1] = 
v2
;

1613 
right_¨øy
[2] = 
v1
;

1614 
right_£˘i⁄
 = 2;

1615 
À·_¨øy
[0] = 
v3
;

1616 
À·_¨øy
[1] = 
v1
;

1617 
À·_£˘i⁄
 = 1;

1619 if(
	`Le·Se˘i⁄_GT
(Ë<0Ë 
FALSE
;

1620 if(
	`RightSe˘i⁄_GT
() <= 0)

1622 
right_£˘i⁄
--;

1623 if(
	`RightSe˘i⁄_GT
(Ë<0Ë 
FALSE
;

1626 if(
l⁄ge°
 > -0x1000)Üongest = -0x1000;

1630 
À·_¨øy
[0] = 
v3
;

1631 
À·_¨øy
[1] = 
v2
;

1632 
À·_¨øy
[2] = 
v1
;

1633 
À·_£˘i⁄
 = 2;

1634 
right_¨øy
[0] = 
v3
;

1635 
right_¨øy
[1] = 
v1
;

1636 
right_£˘i⁄
 = 1;

1638 if(
	`RightSe˘i⁄_GT
(Ë<0Ë 
FALSE
;

1639 if(
	`Le·Se˘i⁄_GT
() <= 0)

1641 
À·_£˘i⁄
--;

1642 if(
	`Le·Se˘i⁄_GT
(Ë<0Ë 
FALSE
;

1644 if(
l⁄ge°
 < 0x1000)Üongest = 0x1000;

1647 
Ymö
=
v1
->
y
;

1648 
Ymax
=
	`mö
(
v3
->
y
-1,
døwH
);

1650 
dñè_right_R
=
	`shl10idiv
(
ãmp
*((
v3
->
R
 - 
v1
->R)>>10)+((v1->R - 
v2
->R)<<6),
l⁄ge°
);

1651 
dñè_right_G
=
	`shl10idiv
(
ãmp
*((
v3
->
G
 - 
v1
->G)>>10)+((v1->G - 
v2
->G)<<6),
l⁄ge°
);

1652 
dñè_right_B
=
	`shl10idiv
(
ãmp
*((
v3
->
B
 - 
v1
->B)>>10)+((v1->B - 
v2
->B)<<6),
l⁄ge°
);

1654 
dñè_right_u
=
	`shl10idiv
(
ãmp
*((
v3
->
u
 - 
v1
->u)>>10)+((v1->u - 
v2
->u)<<6),
l⁄ge°
);

1655 
dñè_right_v
=
	`shl10idiv
(
ãmp
*((
v3
->
v
 - 
v1
->v)>>10)+((v1->v - 
v2
->v)<<6),
l⁄ge°
);

1657  
TRUE
;

1658 
	}
}

1663 
ölöe
 
	$RightSe˘i⁄_F4
()

1665 
so·_vîãx
 * 
v1
 = 
right_¨øy
[ 
right_£˘i⁄
 ];

1666 
so·_vîãx
 * 
v2
 = 
right_¨øy
[ 
right_£˘i⁄
-1 ];

1668 
height
 = 
v2
->
y
 - 
v1
->y;

1669 
right_£˘i⁄_height
 = 
height
;

1670 
right_x
 = 
v1
->
x
;

1671 if(
height
 == 0)

1675 
dñè_right_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

1677  
height
;

1678 
	}
}

1682 
ölöe
 
	$Le·Se˘i⁄_F4
()

1684 
so·_vîãx
 * 
v1
 = 
À·_¨øy
[ 
À·_£˘i⁄
 ];

1685 
so·_vîãx
 * 
v2
 = 
À·_¨øy
[ 
À·_£˘i⁄
-1 ];

1687 
height
 = 
v2
->
y
 - 
v1
->y;

1688 
À·_£˘i⁄_height
 = 
height
;

1689 
À·_x
 = 
v1
->
x
;

1690 if(
height
 == 0)

1694 
dñè_À·_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

1696  
height
;

1697 
	}
}

1701 
ölöe
 
BOOL
 
	$NextRow_F4
()

1703 if(--
À·_£˘i⁄_height
<=0)

1705 if(--
À·_£˘i⁄
 > 0)

1706 
	`Le·Se˘i⁄_F4
()<=0)

1708 if(--
À·_£˘i⁄
 <= 0) ;

1713 
À·_x
 +
dñè_À·_x
;

1716 if(--
right_£˘i⁄_height
<=0)

1718 if(--
right_£˘i⁄
 > 0)

1719 
	`RightSe˘i⁄_F4
()<=0)

1721 if(--
right_£˘i⁄
<=0) ;

1726 
right_x
 +
dñè_right_x
;

1728  
FALSE
;

1729 
	}
}

1733 
ölöe
 
BOOL
 
	$SëupSe˘i⁄s_F4
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
)

1735 
so·_vîãx
 * 
v1
, * 
v2
, * 
v3
, * 
v4
;

1736 
height
,
width
,
l⁄ge°1
,
l⁄ge°2
;

1738 
v1
 = 
vtx
; v1->
x
=
x1
<<16;v1->
y
=
y1
;

1739 
v2
 = 
vtx
+1; v2->
x
=
x2
<<16;v2->
y
=
y2
;

1740 
v3
 = 
vtx
+2; v3->
x
=
x3
<<16;v3->
y
=
y3
;

1741 
v4
 = 
vtx
+3; v4->
x
=
x4
<<16;v4->
y
=
y4
;

1743 if(
v1
->
y
 > 
v2
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v2; v2 = v; }

1744 if(
v1
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v3; v3 = v; }

1745 if(
v1
->
y
 > 
v4
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v4; v4 = v; }

1746 if(
v2
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v2; v2 = v3; v3 = v; }

1747 if(
v2
->
y
 > 
v4
->yË{ 
so·_vîãx
 * 
v
 = v2; v2 = v4; v4 = v; }

1748 if(
v3
->
y
 > 
v4
->yË{ 
so·_vîãx
 * 
v
 = v3; v3 = v4; v4 = v; }

1750 
height
 = 
v4
->
y
 - 
v1
->y; if(height == 0) height =1;

1751 
width
 = (
v4
->
x
 - 
v1
->x)>>16;

1752 
l⁄ge°1
 = (((
v2
->
y
 - 
v1
->yË<< 16Ë/ 
height
Ë* 
width
 + (v1->
x
 - v2->x);

1753 
l⁄ge°2
 = (((
v3
->
y
 - 
v1
->yË<< 16Ë/ 
height
Ë* 
width
 + (v1->
x
 - v3->x);

1755 if(
l⁄ge°1
 < 0)

1757 if(
l⁄ge°2
 < 0)

1759 
À·_¨øy
[0] = 
v4
;

1760 
À·_¨øy
[1] = 
v1
;

1761 
À·_£˘i⁄
 = 1;

1763 
height
 = 
v3
->
y
 - 
v1
->y; if(height == 0) height=1;

1764 
l⁄ge°1
 = (((
v2
->
y
 - 
v1
->yË<< 16Ë/ 
height
Ë* ((
v3
->
x
 - v1->x)>>16) + (v1->x - v2->x);

1765 if(
l⁄ge°1
 >= 0)

1767 
right_¨øy
[0] = 
v4
;

1768 
right_¨øy
[1] = 
v3
;

1769 
right_¨øy
[2] = 
v1
;

1770 
right_£˘i⁄
 = 2;

1774 
height
 = 
v4
->
y
 - 
v2
->y; if(height == 0) height=1;

1775 
l⁄ge°1
 = (((
v3
->
y
 - 
v2
->yË<< 16Ë/ 
height
Ë* ((
v4
->
x
 - v2->x)>>16) + (v2->x - v3->x);

1776 if(
l⁄ge°1
 >= 0)

1778 
right_¨øy
[0] = 
v4
;

1779 
right_¨øy
[1] = 
v2
;

1780 
right_¨øy
[2] = 
v1
;

1781 
right_£˘i⁄
 = 2;

1785 
right_¨øy
[0] = 
v4
;

1786 
right_¨øy
[1] = 
v3
;

1787 
right_¨øy
[2] = 
v2
;

1788 
right_¨øy
[3] = 
v1
;

1789 
right_£˘i⁄
 = 3;

1795 
À·_¨øy
[0] = 
v4
;

1796 
À·_¨øy
[1] = 
v3
;

1797 
À·_¨øy
[2] = 
v1
;

1798 
À·_£˘i⁄
 = 2;

1799 
right_¨øy
[0] = 
v4
;

1800 
right_¨øy
[1] = 
v2
;

1801 
right_¨øy
[2] = 
v1
;

1802 
right_£˘i⁄
 = 2;

1807 if(
l⁄ge°2
 < 0)

1809 
À·_¨øy
[0] = 
v4
;

1810 
À·_¨øy
[1] = 
v2
;

1811 
À·_¨øy
[2] = 
v1
;

1812 
À·_£˘i⁄
 = 2;

1813 
right_¨øy
[0] = 
v4
;

1814 
right_¨øy
[1] = 
v3
;

1815 
right_¨øy
[2] = 
v1
;

1816 
right_£˘i⁄
 = 2;

1820 
right_¨øy
[0] = 
v4
;

1821 
right_¨øy
[1] = 
v1
;

1822 
right_£˘i⁄
 = 1;

1824 
height
 = 
v3
->
y
 - 
v1
->y; if(height == 0) height=1;

1825 
l⁄ge°1
 = (((
v2
->
y
 - 
v1
->yË<< 16Ë/ 
height
Ë* ((
v3
->
x
 - v1->x)>>16) + (v1->x - v2->x);

1826 if(
l⁄ge°1
<0)

1828 
À·_¨øy
[0] = 
v4
;

1829 
À·_¨øy
[1] = 
v3
;

1830 
À·_¨øy
[2] = 
v1
;

1831 
À·_£˘i⁄
 = 2;

1835 
height
 = 
v4
->
y
 - 
v2
->y; if(height == 0) height=1;

1836 
l⁄ge°1
 = (((
v3
->
y
 - 
v2
->yË<< 16Ë/ 
height
Ë* ((
v4
->
x
 - v2->x)>>16) + (v2->x - v3->x);

1837 if(
l⁄ge°1
<0)

1839 
À·_¨øy
[0] = 
v4
;

1840 
À·_¨øy
[1] = 
v2
;

1841 
À·_¨øy
[2] = 
v1
;

1842 
À·_£˘i⁄
 = 2;

1846 
À·_¨øy
[0] = 
v4
;

1847 
À·_¨øy
[1] = 
v3
;

1848 
À·_¨øy
[2] = 
v2
;

1849 
À·_¨øy
[3] = 
v1
;

1850 
À·_£˘i⁄
 = 3;

1856 
	`Le·Se˘i⁄_F4
()<=0)

1858 if(--
À·_£˘i⁄
 <= 0) ;

1861 
	`RightSe˘i⁄_F4
()<=0)

1863 if(--
right_£˘i⁄
 <= 0) ;

1866 
Ymö
=
v1
->
y
;

1867 
Ymax
=
	`mö
(
v4
->
y
-1,
døwH
);

1869  
TRUE
;

1870 
	}
}

1875 
ölöe
 
	$RightSe˘i⁄_FT4
()

1877 
so·_vîãx
 * 
v1
 = 
right_¨øy
[ 
right_£˘i⁄
 ];

1878 
so·_vîãx
 * 
v2
 = 
right_¨øy
[ 
right_£˘i⁄
-1 ];

1880 
height
 = 
v2
->
y
 - 
v1
->y;

1881 
right_£˘i⁄_height
 = 
height
;

1882 
right_x
 = 
v1
->
x
;

1883 
right_u
 = 
v1
->
u
;

1884 
right_v
 = 
v1
->
v
;

1885 if(
height
 == 0)

1889 
dñè_right_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

1890 
dñè_right_u
 = (
v2
->
u
 - 
v1
->uË/ 
height
;

1891 
dñè_right_v
 = (
v2
->
v
 - 
v1
->vË/ 
height
;

1893  
height
;

1894 
	}
}

1898 
ölöe
 
	$Le·Se˘i⁄_FT4
()

1900 
so·_vîãx
 * 
v1
 = 
À·_¨øy
[ 
À·_£˘i⁄
 ];

1901 
so·_vîãx
 * 
v2
 = 
À·_¨øy
[ 
À·_£˘i⁄
-1 ];

1903 
height
 = 
v2
->
y
 - 
v1
->y;

1904 
À·_£˘i⁄_height
 = 
height
;

1905 
À·_x
 = 
v1
->
x
;

1906 
À·_u
 = 
v1
->
u
;

1907 
À·_v
 = 
v1
->
v
;

1908 if(
height
 == 0)

1912 
dñè_À·_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

1913 
dñè_À·_u
 = (
v2
->
u
 - 
v1
->uË/ 
height
;

1914 
dñè_À·_v
 = (
v2
->
v
 - 
v1
->vË/ 
height
;

1916  
height
;

1917 
	}
}

1921 
ölöe
 
BOOL
 
	$NextRow_FT4
()

1923 if(--
À·_£˘i⁄_height
<=0)

1925 if(--
À·_£˘i⁄
 > 0)

1926 
	`Le·Se˘i⁄_FT4
()<=0)

1928 if(--
À·_£˘i⁄
 <= 0) ;

1933 
À·_x
 +
dñè_À·_x
;

1934 
À·_u
 +
dñè_À·_u
;

1935 
À·_v
 +
dñè_À·_v
;

1938 if(--
right_£˘i⁄_height
<=0)

1940 if(--
right_£˘i⁄
 > 0)

1941 
	`RightSe˘i⁄_FT4
()<=0)

1943 if(--
right_£˘i⁄
<=0) ;

1948 
right_x
 +
dñè_right_x
;

1949 
right_u
 +
dñè_right_u
;

1950 
right_v
 +
dñè_right_v
;

1952  
FALSE
;

1953 
	}
}

1957 
ölöe
 
BOOL
 
	$SëupSe˘i⁄s_FT4
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
)

1959 
so·_vîãx
 * 
v1
, * 
v2
, * 
v3
, * 
v4
;

1960 
height
,
width
,
l⁄ge°1
,
l⁄ge°2
;

1962 
v1
 = 
vtx
; v1->
x
=
x1
<<16;v1->
y
=
y1
;

1963 
v1
->
u
=
tx1
<<16;v1->
v
=
ty1
<<16;

1965 
v2
 = 
vtx
+1; v2->
x
=
x2
<<16;v2->
y
=
y2
;

1966 
v2
->
u
=
tx2
<<16;v2->
v
=
ty2
<<16;

1968 
v3
 = 
vtx
+2; v3->
x
=
x3
<<16;v3->
y
=
y3
;

1969 
v3
->
u
=
tx3
<<16;v3->
v
=
ty3
<<16;

1971 
v4
 = 
vtx
+3; v4->
x
=
x4
<<16;v4->
y
=
y4
;

1972 
v4
->
u
=
tx4
<<16;v4->
v
=
ty4
<<16;

1974 if(
v1
->
y
 > 
v2
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v2; v2 = v; }

1975 if(
v1
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v3; v3 = v; }

1976 if(
v1
->
y
 > 
v4
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v4; v4 = v; }

1977 if(
v2
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v2; v2 = v3; v3 = v; }

1978 if(
v2
->
y
 > 
v4
->yË{ 
so·_vîãx
 * 
v
 = v2; v2 = v4; v4 = v; }

1979 if(
v3
->
y
 > 
v4
->yË{ 
so·_vîãx
 * 
v
 = v3; v3 = v4; v4 = v; }

1981 
height
 = 
v4
->
y
 - 
v1
->y; if(height == 0) height =1;

1982 
width
 = (
v4
->
x
 - 
v1
->x)>>16;

1983 
l⁄ge°1
 = (((
v2
->
y
 - 
v1
->yË<< 16Ë/ 
height
Ë* 
width
 + (v1->
x
 - v2->x);

1984 
l⁄ge°2
 = (((
v3
->
y
 - 
v1
->yË<< 16Ë/ 
height
Ë* 
width
 + (v1->
x
 - v3->x);

1986 if(
l⁄ge°1
 < 0)

1988 if(
l⁄ge°2
 < 0)

1990 
À·_¨øy
[0] = 
v4
;

1991 
À·_¨øy
[1] = 
v1
;

1992 
À·_£˘i⁄
 = 1;

1994 
height
 = 
v3
->
y
 - 
v1
->y; if(height == 0) height=1;

1995 
l⁄ge°1
 = (((
v2
->
y
 - 
v1
->yË<< 16Ë/ 
height
Ë* ((
v3
->
x
 - v1->x)>>16) + (v1->x - v2->x);

1996 if(
l⁄ge°1
 >= 0)

1998 
right_¨øy
[0] = 
v4
;

1999 
right_¨øy
[1] = 
v3
;

2000 
right_¨øy
[2] = 
v1
;

2001 
right_£˘i⁄
 = 2;

2005 
height
 = 
v4
->
y
 - 
v2
->y; if(height == 0) height=1;

2006 
l⁄ge°1
 = (((
v3
->
y
 - 
v2
->yË<< 16Ë/ 
height
Ë* ((
v4
->
x
 - v2->x)>>16) + (v2->x - v3->x);

2007 if(
l⁄ge°1
 >= 0)

2009 
right_¨øy
[0] = 
v4
;

2010 
right_¨øy
[1] = 
v2
;

2011 
right_¨øy
[2] = 
v1
;

2012 
right_£˘i⁄
 = 2;

2016 
right_¨øy
[0] = 
v4
;

2017 
right_¨øy
[1] = 
v3
;

2018 
right_¨øy
[2] = 
v2
;

2019 
right_¨øy
[3] = 
v1
;

2020 
right_£˘i⁄
 = 3;

2026 
À·_¨øy
[0] = 
v4
;

2027 
À·_¨øy
[1] = 
v3
;

2028 
À·_¨øy
[2] = 
v1
;

2029 
À·_£˘i⁄
 = 2;

2030 
right_¨øy
[0] = 
v4
;

2031 
right_¨øy
[1] = 
v2
;

2032 
right_¨øy
[2] = 
v1
;

2033 
right_£˘i⁄
 = 2;

2038 if(
l⁄ge°2
 < 0)

2040 
À·_¨øy
[0] = 
v4
;

2041 
À·_¨øy
[1] = 
v2
;

2042 
À·_¨øy
[2] = 
v1
;

2043 
À·_£˘i⁄
 = 2;

2044 
right_¨øy
[0] = 
v4
;

2045 
right_¨øy
[1] = 
v3
;

2046 
right_¨øy
[2] = 
v1
;

2047 
right_£˘i⁄
 = 2;

2051 
right_¨øy
[0] = 
v4
;

2052 
right_¨øy
[1] = 
v1
;

2053 
right_£˘i⁄
 = 1;

2055 
height
 = 
v3
->
y
 - 
v1
->y; if(height == 0) height=1;

2056 
l⁄ge°1
 = (((
v2
->
y
 - 
v1
->yË<< 16Ë/ 
height
Ë* ((
v3
->
x
 - v1->x)>>16) + (v1->x - v2->x);

2057 if(
l⁄ge°1
<0)

2059 
À·_¨øy
[0] = 
v4
;

2060 
À·_¨øy
[1] = 
v3
;

2061 
À·_¨øy
[2] = 
v1
;

2062 
À·_£˘i⁄
 = 2;

2066 
height
 = 
v4
->
y
 - 
v2
->y; if(height == 0) height=1;

2067 
l⁄ge°1
 = (((
v3
->
y
 - 
v2
->yË<< 16Ë/ 
height
Ë* ((
v4
->
x
 - v2->x)>>16) + (v2->x - v3->x);

2068 if(
l⁄ge°1
<0)

2070 
À·_¨øy
[0] = 
v4
;

2071 
À·_¨øy
[1] = 
v2
;

2072 
À·_¨øy
[2] = 
v1
;

2073 
À·_£˘i⁄
 = 2;

2077 
À·_¨øy
[0] = 
v4
;

2078 
À·_¨øy
[1] = 
v3
;

2079 
À·_¨øy
[2] = 
v2
;

2080 
À·_¨øy
[3] = 
v1
;

2081 
À·_£˘i⁄
 = 3;

2087 
	`Le·Se˘i⁄_FT4
()<=0)

2089 if(--
À·_£˘i⁄
 <= 0) ;

2092 
	`RightSe˘i⁄_FT4
()<=0)

2094 if(--
right_£˘i⁄
 <= 0) ;

2097 
Ymö
=
v1
->
y
;

2098 
Ymax
=
	`mö
(
v4
->
y
-1,
døwH
);

2100  
TRUE
;

2101 
	}
}

2106 
ölöe
 
	$RightSe˘i⁄_GT4
()

2108 
so·_vîãx
 * 
v1
 = 
right_¨øy
[ 
right_£˘i⁄
 ];

2109 
so·_vîãx
 * 
v2
 = 
right_¨øy
[ 
right_£˘i⁄
-1 ];

2111 
height
 = 
v2
->
y
 - 
v1
->y;

2112 
right_£˘i⁄_height
 = 
height
;

2113 
right_x
 = 
v1
->
x
;

2114 
right_u
 = 
v1
->
u
;

2115 
right_v
 = 
v1
->
v
;

2116 
right_R
 = 
v1
->
R
;

2117 
right_G
 = 
v1
->
G
;

2118 
right_B
 = 
v1
->
B
;

2120 if(
height
 == 0)

2124 
dñè_right_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

2125 
dñè_right_u
 = (
v2
->
u
 - 
v1
->uË/ 
height
;

2126 
dñè_right_v
 = (
v2
->
v
 - 
v1
->vË/ 
height
;

2127 
dñè_right_R
 = (
v2
->
R
 - 
v1
->RË/ 
height
;

2128 
dñè_right_G
 = (
v2
->
G
 - 
v1
->GË/ 
height
;

2129 
dñè_right_B
 = (
v2
->
B
 - 
v1
->BË/ 
height
;

2131  
height
;

2132 
	}
}

2136 
ölöe
 
	$Le·Se˘i⁄_GT4
()

2138 
so·_vîãx
 * 
v1
 = 
À·_¨øy
[ 
À·_£˘i⁄
 ];

2139 
so·_vîãx
 * 
v2
 = 
À·_¨øy
[ 
À·_£˘i⁄
-1 ];

2141 
height
 = 
v2
->
y
 - 
v1
->y;

2142 
À·_£˘i⁄_height
 = 
height
;

2143 
À·_x
 = 
v1
->
x
;

2144 
À·_u
 = 
v1
->
u
;

2145 
À·_v
 = 
v1
->
v
;

2146 
À·_R
 = 
v1
->
R
;

2147 
À·_G
 = 
v1
->
G
;

2148 
À·_B
 = 
v1
->
B
;

2150 if(
height
 == 0)

2154 
dñè_À·_x
 = (
v2
->
x
 - 
v1
->xË/ 
height
;

2155 
dñè_À·_u
 = (
v2
->
u
 - 
v1
->uË/ 
height
;

2156 
dñè_À·_v
 = (
v2
->
v
 - 
v1
->vË/ 
height
;

2157 
dñè_À·_R
 = (
v2
->
R
 - 
v1
->RË/ 
height
;

2158 
dñè_À·_G
 = (
v2
->
G
 - 
v1
->GË/ 
height
;

2159 
dñè_À·_B
 = (
v2
->
B
 - 
v1
->BË/ 
height
;

2161  
height
;

2162 
	}
}

2166 
ölöe
 
BOOL
 
	$NextRow_GT4
()

2168 if(--
À·_£˘i⁄_height
<=0)

2170 if(--
À·_£˘i⁄
 > 0)

2171 
	`Le·Se˘i⁄_GT4
()<=0)

2173 if(--
À·_£˘i⁄
 <= 0) ;

2178 
À·_x
 +
dñè_À·_x
;

2179 
À·_u
 +
dñè_À·_u
;

2180 
À·_v
 +
dñè_À·_v
;

2181 
À·_R
 +
dñè_À·_R
;

2182 
À·_G
 +
dñè_À·_G
;

2183 
À·_B
 +
dñè_À·_B
;

2186 if(--
right_£˘i⁄_height
<=0)

2188 if(--
right_£˘i⁄
 > 0)

2189 
	`RightSe˘i⁄_GT4
()<=0)

2191 if(--
right_£˘i⁄
<=0) ;

2196 
right_x
 +
dñè_right_x
;

2197 
right_u
 +
dñè_right_u
;

2198 
right_v
 +
dñè_right_v
;

2199 
right_R
 +
dñè_right_R
;

2200 
right_G
 +
dñè_right_G
;

2201 
right_B
 +
dñè_right_B
;

2203  
FALSE
;

2204 
	}
}

2208 
ölöe
 
BOOL
 
	$SëupSe˘i⁄s_GT4
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,
öt32_t
 
rgb1
,öt32_à
rgb2
,öt32_à
rgb3
,öt32_à
rgb4
)

2210 
so·_vîãx
 * 
v1
, * 
v2
, * 
v3
, * 
v4
;

2211 
height
,
width
,
l⁄ge°1
,
l⁄ge°2
;

2213 
v1
 = 
vtx
; v1->
x
=
x1
<<16;v1->
y
=
y1
;

2214 
v1
->
u
=
tx1
<<16;v1->
v
=
ty1
<<16;

2215 
v1
->
R
=(
rgb1
) & 0x00ff0000;

2216 
v1
->
G
=(
rgb1
<<8) & 0x00ff0000;

2217 
v1
->
B
=(
rgb1
<<16) & 0x00ff0000;

2219 
v2
 = 
vtx
+1; v2->
x
=
x2
<<16;v2->
y
=
y2
;

2220 
v2
->
u
=
tx2
<<16;v2->
v
=
ty2
<<16;

2221 
v2
->
R
=(
rgb2
) & 0x00ff0000;

2222 
v2
->
G
=(
rgb2
<<8) & 0x00ff0000;

2223 
v2
->
B
=(
rgb2
<<16) & 0x00ff0000;

2225 
v3
 = 
vtx
+2; v3->
x
=
x3
<<16;v3->
y
=
y3
;

2226 
v3
->
u
=
tx3
<<16;v3->
v
=
ty3
<<16;

2227 
v3
->
R
=(
rgb3
) & 0x00ff0000;

2228 
v3
->
G
=(
rgb3
<<8) & 0x00ff0000;

2229 
v3
->
B
=(
rgb3
<<16) & 0x00ff0000;

2231 
v4
 = 
vtx
+3; v4->
x
=
x4
<<16;v4->
y
=
y4
;

2232 
v4
->
u
=
tx4
<<16;v4->
v
=
ty4
<<16;

2233 
v4
->
R
=(
rgb4
) & 0x00ff0000;

2234 
v4
->
G
=(
rgb4
<<8) & 0x00ff0000;

2235 
v4
->
B
=(
rgb4
<<16) & 0x00ff0000;

2237 if(
v1
->
y
 > 
v2
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v2; v2 = v; }

2238 if(
v1
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v3; v3 = v; }

2239 if(
v1
->
y
 > 
v4
->yË{ 
so·_vîãx
 * 
v
 = v1; v1 = v4; v4 = v; }

2240 if(
v2
->
y
 > 
v3
->yË{ 
so·_vîãx
 * 
v
 = v2; v2 = v3; v3 = v; }

2241 if(
v2
->
y
 > 
v4
->yË{ 
so·_vîãx
 * 
v
 = v2; v2 = v4; v4 = v; }

2242 if(
v3
->
y
 > 
v4
->yË{ 
so·_vîãx
 * 
v
 = v3; v3 = v4; v4 = v; }

2244 
height
 = 
v4
->
y
 - 
v1
->y; if(height == 0) height =1;

2245 
width
 = (
v4
->
x
 - 
v1
->x)>>16;

2246 
l⁄ge°1
 = (((
v2
->
y
 - 
v1
->yË<< 16Ë/ 
height
Ë* 
width
 + (v1->
x
 - v2->x);

2247 
l⁄ge°2
 = (((
v3
->
y
 - 
v1
->yË<< 16Ë/ 
height
Ë* 
width
 + (v1->
x
 - v3->x);

2249 if(
l⁄ge°1
 < 0)

2251 if(
l⁄ge°2
 < 0)

2253 
À·_¨øy
[0] = 
v4
;

2254 
À·_¨øy
[1] = 
v1
;

2255 
À·_£˘i⁄
 = 1;

2257 
height
 = 
v3
->
y
 - 
v1
->y; if(height == 0) height=1;

2258 
l⁄ge°1
 = (((
v2
->
y
 - 
v1
->yË<< 16Ë/ 
height
Ë* ((
v3
->
x
 - v1->x)>>16) + (v1->x - v2->x);

2259 if(
l⁄ge°1
 >= 0)

2261 
right_¨øy
[0] = 
v4
;

2262 
right_¨øy
[1] = 
v3
;

2263 
right_¨øy
[2] = 
v1
;

2264 
right_£˘i⁄
 = 2;

2268 
height
 = 
v4
->
y
 - 
v2
->y; if(height == 0) height=1;

2269 
l⁄ge°1
 = (((
v3
->
y
 - 
v2
->yË<< 16Ë/ 
height
Ë* ((
v4
->
x
 - v2->x)>>16) + (v2->x - v3->x);

2270 if(
l⁄ge°1
 >= 0)

2272 
right_¨øy
[0] = 
v4
;

2273 
right_¨øy
[1] = 
v2
;

2274 
right_¨øy
[2] = 
v1
;

2275 
right_£˘i⁄
 = 2;

2279 
right_¨øy
[0] = 
v4
;

2280 
right_¨øy
[1] = 
v3
;

2281 
right_¨øy
[2] = 
v2
;

2282 
right_¨øy
[3] = 
v1
;

2283 
right_£˘i⁄
 = 3;

2289 
À·_¨øy
[0] = 
v4
;

2290 
À·_¨øy
[1] = 
v3
;

2291 
À·_¨øy
[2] = 
v1
;

2292 
À·_£˘i⁄
 = 2;

2293 
right_¨øy
[0] = 
v4
;

2294 
right_¨øy
[1] = 
v2
;

2295 
right_¨øy
[2] = 
v1
;

2296 
right_£˘i⁄
 = 2;

2301 if(
l⁄ge°2
 < 0)

2303 
À·_¨øy
[0] = 
v4
;

2304 
À·_¨øy
[1] = 
v2
;

2305 
À·_¨øy
[2] = 
v1
;

2306 
À·_£˘i⁄
 = 2;

2307 
right_¨øy
[0] = 
v4
;

2308 
right_¨øy
[1] = 
v3
;

2309 
right_¨øy
[2] = 
v1
;

2310 
right_£˘i⁄
 = 2;

2314 
right_¨øy
[0] = 
v4
;

2315 
right_¨øy
[1] = 
v1
;

2316 
right_£˘i⁄
 = 1;

2318 
height
 = 
v3
->
y
 - 
v1
->y; if(height == 0) height=1;

2319 
l⁄ge°1
 = (((
v2
->
y
 - 
v1
->yË<< 16Ë/ 
height
Ë* ((
v3
->
x
 - v1->x)>>16) + (v1->x - v2->x);

2320 if(
l⁄ge°1
<0)

2322 
À·_¨øy
[0] = 
v4
;

2323 
À·_¨øy
[1] = 
v3
;

2324 
À·_¨øy
[2] = 
v1
;

2325 
À·_£˘i⁄
 = 2;

2329 
height
 = 
v4
->
y
 - 
v2
->y; if(height == 0) height=1;

2330 
l⁄ge°1
 = (((
v3
->
y
 - 
v2
->yË<< 16Ë/ 
height
Ë* ((
v4
->
x
 - v2->x)>>16) + (v2->x - v3->x);

2331 if(
l⁄ge°1
<0)

2333 
À·_¨øy
[0] = 
v4
;

2334 
À·_¨øy
[1] = 
v2
;

2335 
À·_¨øy
[2] = 
v1
;

2336 
À·_£˘i⁄
 = 2;

2340 
À·_¨øy
[0] = 
v4
;

2341 
À·_¨øy
[1] = 
v3
;

2342 
À·_¨øy
[2] = 
v2
;

2343 
À·_¨øy
[3] = 
v1
;

2344 
À·_£˘i⁄
 = 3;

2350 
	`Le·Se˘i⁄_GT4
()<=0)

2352 if(--
À·_£˘i⁄
 <= 0) ;

2355 
	`RightSe˘i⁄_GT4
()<=0)

2357 if(--
right_£˘i⁄
 <= 0) ;

2360 
Ymö
=
v1
->
y
;

2361 
Ymax
=
	`mö
(
v4
->
y
-1,
døwH
);

2363  
TRUE
;

2364 
	}
}

2378 
ölöe
 
	$døwPﬁy3Fi
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
öt32_t
 
rgb
)

2380 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

2381 
cﬁ‹
;
uöt32_t
 
lcﬁ‹
;

2383 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

2384 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

2385 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

2386 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

2387 if(
døwY
>=
døwH
) ;

2388 if(
døwX
>=
døwW
) ;

2390 if(!
	`SëupSe˘i⁄s_F
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
)) ;

2392 
ymax
=
Ymax
;

2394 
cﬁ‹
 = ((
rgb
 & 0x00f80000)>>9) | ((rgb & 0x0000f800)>>6) | ((rgb & 0x000000f8)>>3);

2395 
lcﬁ‹
=
lSëMask
|(((
uöt32_t
)(
cﬁ‹
))<<16)|color;

2397 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

2398 if(
	`NextRow_F
()) ;

2400 #ifde‡
FASTSOLID


2402 if(!
bCheckMask
 && !
DøwSemiTøns
)

2404 
cﬁ‹
 |=
sSëMask
;

2405 
i
=
ymö
;i<=
ymax
;i++)

2407 
xmö
=
À·_x
 >> 16; if(
døwX
>xmin) xmin=drawX;

2408 
xmax
=(
right_x
 >> 16)-1; if(
døwW
<xmax) xmax=drawW;

2410 
j
=
xmö
;j<
xmax
;j+=2)

2412 
	`PUTLE32
(((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
]), 
lcﬁ‹
);

2414 if(
j
==
xmax
Ë
	`PUTLE16
(&
psxVuw
[(
i
<<10)+j], 
cﬁ‹
);

2416 if(
	`NextRow_F
()) ;

2423 
i
=
ymö
;i<=
ymax
;i++)

2425 
xmö
=
À·_x
 >> 16; if(
døwX
>xmin) xmin=drawX;

2426 
xmax
=(
right_x
 >> 16)-1; if(
døwW
<xmax) xmax=drawW;

2428 
j
=
xmö
;j<
xmax
;j+=2)

2430 
	`GëShadeTønsCﬁ32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],
lcﬁ‹
);

2432 if(
j
==
xmax
)

2433 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
i
<<10)+
j
],
cﬁ‹
);

2435 if(
	`NextRow_F
()) ;

2437 
	}
}

2441 
	$døwPﬁy3F
(
öt32_t
 
rgb
)

2443 
	`døwPﬁy3Fi
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,
rgb
);

2444 
	}
}

2446 #ifde‡
POLYQUAD3FS


2448 
	$døwPﬁy4F_TRI
(
öt32_t
 
rgb
)

2450 
	`døwPﬁy3Fi
(
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,
rgb
);

2451 
	`døwPﬁy3Fi
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,
rgb
);

2452 
	}
}

2458 
	$døwPﬁy4F
(
öt32_t
 
rgb
)

2460 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

2461 
cﬁ‹
;
uöt32_t
 
lcﬁ‹
;

2463 if(
lx0
>
døwW
 && 
lx1
>døwW && 
lx2
>døwW && 
lx3
>drawW) ;

2464 if(
ly0
>
døwH
 && 
ly1
>døwH && 
ly2
>døwH && 
ly3
>drawH) ;

2465 if(
lx0
<
døwX
 && 
lx1
<døwX && 
lx2
<døwX && 
lx3
<drawX) ;

2466 if(
ly0
<
døwY
 && 
ly1
<døwY && 
ly2
<døwY && 
ly3
<drawY) ;

2467 if(
døwY
>=
døwH
) ;

2468 if(
døwX
>=
døwW
) ;

2470 if(!
	`SëupSe˘i⁄s_F4
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,
lx3
,
ly3
)) ;

2472 
ymax
=
Ymax
;

2474 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

2475 if(
	`NextRow_F4
()) ;

2477 
cﬁ‹
 = ((
rgb
 & 0x00f80000)>>9) | ((rgb & 0x0000f800)>>6) | ((rgb & 0x000000f8)>>3);

2478 
lcﬁ‹

lSëMask
|(((
uöt32_t
)(
cﬁ‹
))<<16)|color;

2480 #ifde‡
FASTSOLID


2482 if(!
bCheckMask
 && !
DøwSemiTøns
)

2484 
cﬁ‹
 |=
sSëMask
;

2485 
i
=
ymö
;i<=
ymax
;i++)

2487 
xmö
=
À·_x
 >> 16; if(
døwX
>xmin) xmin=drawX;

2488 
xmax
=(
right_x
 >> 16)-1; if(
døwW
<xmax) xmax=drawW;

2490 
j
=
xmö
;j<
xmax
;j+=2)

2492 
	`PUTLE32
(((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
]), 
lcﬁ‹
);

2494 if(
j
==
xmax
Ë
	`PUTLE16
(&
psxVuw
[(
i
<<10)+j], 
cﬁ‹
);

2496 if(
	`NextRow_F4
()) ;

2503 
i
=
ymö
;i<=
ymax
;i++)

2505 
xmö
=
À·_x
 >> 16; if(
døwX
>xmin) xmin=drawX;

2506 
xmax
=(
right_x
 >> 16)-1; if(
døwW
<xmax) xmax=drawW;

2508 
j
=
xmö
;j<
xmax
;j+=2)

2510 
	`GëShadeTønsCﬁ32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],
lcﬁ‹
);

2512 if(
j
==
xmax
Ë
	`GëShadeTønsCﬁ
(&
psxVuw
[(
i
<<10)+j],
cﬁ‹
);

2514 if(
	`NextRow_F4
()) ;

2516 
	}
}

2522 
	$døwPﬁy3TEx4
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
,
˛X
, 
˛Y
)

2524 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

2525 
öt32_t
 
difX
, 
difY
,
difX2
, 
difY2
;

2526 
öt32_t
 
posX
,
posY
,
YAdju°
,
XAdju°
;

2527 
öt32_t
 
˛utP
;

2528 
tC1
,
tC2
;

2530 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

2531 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

2532 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

2533 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

2534 if(
døwY
>=
døwH
) ;

2535 if(
døwX
>=
døwW
) ;

2537 if(!
	`SëupSe˘i⁄s_FT
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
)) ;

2539 
ymax
=
Ymax
;

2541 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

2542 if(
	`NextRow_FT
()) ;

2544 
˛utP
=(
˛Y
<<10)+
˛X
;

2546 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

2548 
difX
=
dñè_right_u
;
difX2
=difX<<1;

2549 
difY
=
dñè_right_v
;
difY2
=difY<<1;

2551 #ifde‡
FASTSOLID


2553 if(!
bCheckMask
 && !
DøwSemiTøns
)

2555 
i
=
ymö
;i<=
ymax
;i++)

2557 
xmö
=(
À·_x
 >> 16);

2558 
xmax
=(
right_x
 >> 16)-1;

2559 if(
døwW
<
xmax
) xmax=drawW;

2561 if(
xmax
>=
xmö
)

2563 
posX
=
À·_u
;

2564 
posY
=
À·_v
;

2566 if(
xmö
<
døwX
)

2567 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

2569 
j
=
xmö
;j<
xmax
;j+=2)

2571 
XAdju°
=(
posX
>>16);

2572 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
XAdju°
>>1)];

2573 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

2574 
XAdju°
=((
posX
+
difX
)>>16);

2575 
tC2
 = 
psxVub
[(((
posY
+
difY
)>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

2576 (
XAdju°
>>1)];

2577 
tC2
=—C2>>((
XAdju°
&1)<<2))&0xf;

2579 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

2580 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

2581 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

2583 
posX
+=
difX2
;

2584 
posY
+=
difY2
;

2586 if(
j
==
xmax
)

2588 
XAdju°
=(
posX
>>16);

2589 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

2590 (
XAdju°
>>1)];

2591 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

2592 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

2595 if(
	`NextRow_FT
())

2605 
i
=
ymö
;i<=
ymax
;i++)

2607 
xmö
=(
À·_x
 >> 16);

2608 
xmax
=(
right_x
 >> 16)-1;

2609 if(
døwW
<
xmax
) xmax=drawW;

2611 if(
xmax
>=
xmö
)

2613 
posX
=
À·_u
;

2614 
posY
=
À·_v
;

2616 if(
xmö
<
døwX
)

2617 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

2619 
j
=
xmö
;j<
xmax
;j+=2)

2621 
XAdju°
=(
posX
>>16);

2622 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
XAdju°
>>1)];

2623 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

2624 
XAdju°
=((
posX
+
difX
)>>16);

2625 
tC2
 = 
psxVub
[(((
posY
+
difY
)>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

2626 (
XAdju°
>>1)];

2627 
tC2
=—C2>>((
XAdju°
&1)<<2))&0xf;

2629 
	`GëTextuªTønsCﬁG32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

2630 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

2631 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

2633 
posX
+=
difX2
;

2634 
posY
+=
difY2
;

2636 if(
j
==
xmax
)

2638 
XAdju°
=(
posX
>>16);

2639 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

2640 (
XAdju°
>>1)];

2641 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

2642 
	`GëTextuªTønsCﬁG
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

2645 if(
	`NextRow_FT
())

2650 
	}
}

2654 
	$døwPﬁy3TEx4_TW
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
,
˛X
, 
˛Y
)

2656 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

2657 
öt32_t
 
difX
, 
difY
,
difX2
, 
difY2
;

2658 
öt32_t
 
posX
,
posY
,
YAdju°
,
XAdju°
;

2659 
öt32_t
 
˛utP
;

2660 
tC1
,
tC2
;

2662 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

2663 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

2664 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

2665 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

2666 if(
døwY
>=
døwH
) ;

2667 if(
døwX
>=
døwW
) ;

2669 if(!
	`SëupSe˘i⁄s_FT
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
)) ;

2671 
ymax
=
Ymax
;

2673 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

2674 if(
	`NextRow_FT
()) ;

2676 
˛utP
=(
˛Y
<<10)+
˛X
;

2678 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

2679 
YAdju°
+=(
TWö
.
Posôi⁄
.
y0
<<11)+(TWö.Posôi⁄.
x0
>>1);

2681 
difX
=
dñè_right_u
;
difX2
=difX<<1;

2682 
difY
=
dñè_right_v
;
difY2
=difY<<1;

2684 #ifde‡
FASTSOLID


2686 if(!
bCheckMask
 && !
DøwSemiTøns
)

2688 
i
=
ymö
;i<=
ymax
;i++)

2690 
xmö
=(
À·_x
 >> 16);

2691 
xmax
=(
right_x
 >> 16);

2692 if(
xmax
>
xmö
) xmax--;

2694 if(
døwW
<
xmax
) xmax=drawW;

2696 if(
xmax
>=
xmö
)

2698 
posX
=
À·_u
;

2699 
posY
=
À·_v
;

2701 if(
xmö
<
døwX
)

2702 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

2704 
j
=
xmö
;j<
xmax
;j+=2)

2706 
XAdju°
=(
posX
>>16)&
TWö
.
xmask
;

2707 
tC1
 = 
psxVub
[(((
posY
>>16)&
TWö
.
ymask
)<<11)+

2708 
YAdju°
+(
XAdju°
>>1)];

2709 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

2710 
XAdju°
=((
posX
+
difX
)>>16)&
TWö
.
xmask
;

2711 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)&
TWö
.
ymask
)<<11)+

2712 
YAdju°
+(
XAdju°
>>1)];

2713 
tC2
=—C2>>((
XAdju°
&1)<<2))&0xf;

2715 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

2716 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

2717 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

2719 
posX
+=
difX2
;

2720 
posY
+=
difY2
;

2722 if(
j
==
xmax
)

2724 
XAdju°
=(
posX
>>16)&
TWö
.
xmask
;

2725 
tC1
 = 
psxVub
[(((
posY
>>16)&
TWö
.
ymask
)<<11)+

2726 
YAdju°
+(
XAdju°
>>1)];

2727 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

2728 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

2731 if(
	`NextRow_FT
())

2741 
i
=
ymö
;i<=
ymax
;i++)

2743 
xmö
=(
À·_x
 >> 16);

2744 
xmax
=(
right_x
 >> 16)-1;

2745 if(
døwW
<
xmax
) xmax=drawW;

2747 if(
xmax
>=
xmö
)

2749 
posX
=
À·_u
;

2750 
posY
=
À·_v
;

2752 if(
xmö
<
døwX
)

2753 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

2755 
j
=
xmö
;j<
xmax
;j+=2)

2757 
XAdju°
=(
posX
>>16)&
TWö
.
xmask
;

2758 
tC1
 = 
psxVub
[(((
posY
>>16)&
TWö
.
ymask
)<<11)+

2759 
YAdju°
+(
XAdju°
>>1)];

2760 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

2761 
XAdju°
=((
posX
+
difX
)>>16)&
TWö
.
xmask
;

2762 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)&
TWö
.
ymask
)<<11)+

2763 
YAdju°
+(
XAdju°
>>1)];

2764 
tC2
=—C2>>((
XAdju°
&1)<<2))&0xf;

2766 
	`GëTextuªTønsCﬁG32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

2767 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

2768 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

2770 
posX
+=
difX2
;

2771 
posY
+=
difY2
;

2773 if(
j
==
xmax
)

2775 
XAdju°
=(
posX
>>16)&
TWö
.
xmask
;

2776 
tC1
 = 
psxVub
[(((
posY
>>16)&
TWö
.
ymask
)<<11)+

2777 
YAdju°
+(
XAdju°
>>1)];

2778 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

2779 
	`GëTextuªTønsCﬁG
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

2782 if(
	`NextRow_FT
())

2787 
	}
}

2791 #ifde‡
POLYQUAD3


2793 
	$døwPﬁy4TEx4_TRI
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,
˛X
, 
˛Y
)

2795 
	`døwPﬁy3TEx4
(
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,

2796 
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
,

2797 
˛X
,
˛Y
);

2798 
	`døwPﬁy3TEx4
(
x1
,
y1
,
x2
,
y2
,
x4
,
y4
,

2799 
tx1
,
ty1
,
tx2
,
ty2
,
tx4
,
ty4
,

2800 
˛X
,
˛Y
);

2801 
	}
}

2807 
	$døwPﬁy4TEx4
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,
˛X
, 
˛Y
)

2809 
öt32_t
 
num
;

2810 
öt32_t
 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

2811 
öt32_t
 
difX
, 
difY
, 
difX2
, 
difY2
;

2812 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
,
XAdju°
;

2813 
tC1
,
tC2
;

2815 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>døwW && 
x4
>drawW) ;

2816 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>døwH && 
y4
>drawH) ;

2817 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<døwX && 
x4
<drawX) ;

2818 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<døwY && 
y4
<drawY) ;

2819 if(
døwY
>=
døwH
) ;

2820 if(
døwX
>=
døwW
) ;

2822 if(!
	`SëupSe˘i⁄s_FT4
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
)) ;

2824 
ymax
=
Ymax
;

2826 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

2827 if(
	`NextRow_FT4
()) ;

2829 
˛utP
=(
˛Y
<<10)+
˛X
;

2831 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

2833 #ifde‡
FASTSOLID


2835 if(!
bCheckMask
 && !
DøwSemiTøns
)

2837 
i
=
ymö
;i<=
ymax
;i++)

2839 
xmö
=(
À·_x
 >> 16);

2840 
xmax
=(
right_x
 >> 16);

2842 if(
xmax
>=
xmö
)

2844 
posX
=
À·_u
;

2845 
posY
=
À·_v
;

2847 
num
=(
xmax
-
xmö
);

2848 if(
num
==0)Çum=1;

2849 
difX
=(
right_u
-
posX
)/
num
;

2850 
difY
=(
right_v
-
posY
)/
num
;

2851 
difX2
=
difX
<<1;

2852 
difY2
=
difY
<<1;

2854 if(
xmö
<
døwX
)

2855 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

2856 
xmax
--;if(
døwW
<xmax) xmax=drawW;

2858 
j
=
xmö
;j<
xmax
;j+=2)

2860 
XAdju°
=(
posX
>>16);

2861 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
XAdju°
>>1)];

2862 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

2863 
XAdju°
=((
posX
+
difX
)>>16);

2864 
tC2
 = 
psxVub
[(((
posY
+
difY
)>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

2865 (
XAdju°
>>1)];

2866 
tC2
=—C2>>((
XAdju°
&1)<<2))&0xf;

2868 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

2869 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

2870 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

2871 
posX
+=
difX2
;

2872 
posY
+=
difY2
;

2874 if(
j
==
xmax
)

2876 
XAdju°
=(
posX
>>16);

2877 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

2878 (
XAdju°
>>1)];

2879 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

2880 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

2884 if(
	`NextRow_FT4
()) ;

2891 
i
=
ymö
;i<=
ymax
;i++)

2893 
xmö
=(
À·_x
 >> 16);

2894 
xmax
=(
right_x
 >> 16);

2896 if(
xmax
>=
xmö
)

2898 
posX
=
À·_u
;

2899 
posY
=
À·_v
;

2901 
num
=(
xmax
-
xmö
);

2902 if(
num
==0)Çum=1;

2903 
difX
=(
right_u
-
posX
)/
num
;

2904 
difY
=(
right_v
-
posY
)/
num
;

2905 
difX2
=
difX
<<1;

2906 
difY2
=
difY
<<1;

2908 if(
xmö
<
døwX
)

2909 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

2910 
xmax
--;if(
døwW
<xmax) xmax=drawW;

2912 
j
=
xmö
;j<
xmax
;j+=2)

2914 
XAdju°
=(
posX
>>16);

2915 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
XAdju°
>>1)];

2916 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

2917 
XAdju°
=((
posX
+
difX
)>>16);

2918 
tC2
 = 
psxVub
[(((
posY
+
difY
)>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

2919 (
XAdju°
>>1)];

2920 
tC2
=—C2>>((
XAdju°
&1)<<2))&0xf;

2922 
	`GëTextuªTønsCﬁG32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

2923 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

2924 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

2925 
posX
+=
difX2
;

2926 
posY
+=
difY2
;

2928 if(
j
==
xmax
)

2930 
XAdju°
=(
posX
>>16);

2931 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

2932 (
XAdju°
>>1)];

2933 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

2934 
	`GëTextuªTønsCﬁG
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

2937 if(
	`NextRow_FT4
()) ;

2939 
	}
}

2943 
	$døwPﬁy4TEx4_TW
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,
˛X
, 
˛Y
)

2945 
öt32_t
 
num
;

2946 
öt32_t
 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

2947 
öt32_t
 
difX
, 
difY
, 
difX2
, 
difY2
;

2948 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
,
XAdju°
;

2949 
tC1
,
tC2
;

2951 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>døwW && 
x4
>drawW) ;

2952 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>døwH && 
y4
>drawH) ;

2953 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<døwX && 
x4
<drawX) ;

2954 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<døwY && 
y4
<drawY) ;

2955 if(
døwY
>=
døwH
) ;

2956 if(
døwX
>=
døwW
) ;

2958 if(!
	`SëupSe˘i⁄s_FT4
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
)) ;

2960 
ymax
=
Ymax
;

2962 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

2963 if(
	`NextRow_FT4
()) ;

2965 
˛utP
=(
˛Y
<<10)+
˛X
;

2967 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

2968 
YAdju°
+=(
TWö
.
Posôi⁄
.
y0
<<11)+(TWö.Posôi⁄.
x0
>>1);

2970 #ifde‡
FASTSOLID


2972 if(!
bCheckMask
 && !
DøwSemiTøns
)

2974 
i
=
ymö
;i<=
ymax
;i++)

2976 
xmö
=(
À·_x
 >> 16);

2977 
xmax
=(
right_x
 >> 16);

2979 if(
xmax
>=
xmö
)

2981 
posX
=
À·_u
;

2982 
posY
=
À·_v
;

2984 
num
=(
xmax
-
xmö
);

2985 if(
num
==0)Çum=1;

2986 
difX
=(
right_u
-
posX
)/
num
;

2987 
difY
=(
right_v
-
posY
)/
num
;

2988 
difX2
=
difX
<<1;

2989 
difY2
=
difY
<<1;

2991 if(
xmö
<
døwX
)

2992 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

2993 
xmax
--;if(
døwW
<xmax) xmax=drawW;

2995 
j
=
xmö
;j<
xmax
;j+=2)

2997 
XAdju°
=(
posX
>>16)&
TWö
.
xmask
;

2998 
tC1
 = 
psxVub
[(((
posY
>>16)&
TWö
.
ymask
)<<11)+

2999 
YAdju°
+(
XAdju°
>>1)];

3000 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

3001 
XAdju°
=((
posX
+
difX
)>>16)&
TWö
.
xmask
;

3002 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)&
TWö
.
ymask
)<<11)+

3003 
YAdju°
+(
XAdju°
>>1)];

3004 
tC2
=—C2>>((
XAdju°
&1)<<2))&0xf;

3006 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3007 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

3008 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

3009 
posX
+=
difX2
;

3010 
posY
+=
difY2
;

3012 if(
j
==
xmax
)

3014 
XAdju°
=(
posX
>>16)&
TWö
.
xmask
;

3015 
tC1
 = 
psxVub
[(((
posY
>>16)&
TWö
.
ymask
)<<11)+

3016 
YAdju°
+(
XAdju°
>>1)];

3017 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

3018 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3021 if(
	`NextRow_FT4
()) ;

3028 
i
=
ymö
;i<=
ymax
;i++)

3030 
xmö
=(
À·_x
 >> 16);

3031 
xmax
=(
right_x
 >> 16);

3033 if(
xmax
>=
xmö
)

3035 
posX
=
À·_u
;

3036 
posY
=
À·_v
;

3038 
num
=(
xmax
-
xmö
);

3039 if(
num
==0)Çum=1;

3040 
difX
=(
right_u
-
posX
)/
num
;

3041 
difY
=(
right_v
-
posY
)/
num
;

3042 
difX2
=
difX
<<1;

3043 
difY2
=
difY
<<1;

3045 if(
xmö
<
døwX
)

3046 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3047 
xmax
--;if(
døwW
<xmax) xmax=drawW;

3049 
j
=
xmö
;j<
xmax
;j+=2)

3051 
XAdju°
=(
posX
>>16)&
TWö
.
xmask
;

3052 
tC1
 = 
psxVub
[(((
posY
>>16)&
TWö
.
ymask
)<<11)+

3053 
YAdju°
+(
XAdju°
>>1)];

3054 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

3055 
XAdju°
=((
posX
+
difX
)>>16)&
TWö
.
xmask
;

3056 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)&
TWö
.
ymask
)<<11)+

3057 
YAdju°
+(
XAdju°
>>1)];

3058 
tC2
=—C2>>((
XAdju°
&1)<<2))&0xf;

3060 
	`GëTextuªTønsCﬁG32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3061 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

3062 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

3063 
posX
+=
difX2
;

3064 
posY
+=
difY2
;

3066 if(
j
==
xmax
)

3068 
XAdju°
=(
posX
>>16)&
TWö
.
xmask
;

3069 
tC1
 = 
psxVub
[(((
posY
>>16)&
TWö
.
ymask
)<<11)+

3070 
YAdju°
+(
XAdju°
>>1)];

3071 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

3072 
	`GëTextuªTønsCﬁG
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3075 if(
	`NextRow_FT4
()) ;

3077 
	}
}

3081 
	$døwPﬁy4TEx4_TW_S
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,
˛X
, 
˛Y
)

3083 
öt32_t
 
num
;

3084 
öt32_t
 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

3085 
öt32_t
 
difX
, 
difY
, 
difX2
, 
difY2
;

3086 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
,
XAdju°
;

3087 
tC1
,
tC2
;

3089 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>døwW && 
x4
>drawW) ;

3090 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>døwH && 
y4
>drawH) ;

3091 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<døwX && 
x4
<drawX) ;

3092 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<døwY && 
y4
<drawY) ;

3093 if(
døwY
>=
døwH
) ;

3094 if(
døwX
>=
døwW
) ;

3096 if(!
	`SëupSe˘i⁄s_FT4
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
)) ;

3098 
ymax
=
Ymax
;

3100 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

3101 if(
	`NextRow_FT4
()) ;

3103 
˛utP
=(
˛Y
<<10)+
˛X
;

3105 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

3106 
YAdju°
+=(
TWö
.
Posôi⁄
.
y0
<<11)+(TWö.Posôi⁄.
x0
>>1);

3108 #ifde‡
FASTSOLID


3110 if(!
bCheckMask
 && !
DøwSemiTøns
)

3112 
i
=
ymö
;i<=
ymax
;i++)

3114 
xmö
=(
À·_x
 >> 16);

3115 
xmax
=(
right_x
 >> 16);

3117 if(
xmax
>=
xmö
)

3119 
posX
=
À·_u
;

3120 
posY
=
À·_v
;

3122 
num
=(
xmax
-
xmö
);

3123 if(
num
==0)Çum=1;

3124 
difX
=(
right_u
-
posX
)/
num
;

3125 
difY
=(
right_v
-
posY
)/
num
;

3126 
difX2
=
difX
<<1;

3127 
difY2
=
difY
<<1;

3129 if(
xmö
<
døwX
)

3130 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3131 
xmax
--;if(
døwW
<xmax) xmax=drawW;

3133 
j
=
xmö
;j<
xmax
;j+=2)

3135 
XAdju°
=(
posX
>>16)&
TWö
.
xmask
;

3136 
tC1
 = 
psxVub
[(((
posY
>>16)&
TWö
.
ymask
)<<11)+

3137 
YAdju°
+(
XAdju°
>>1)];

3138 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

3139 
XAdju°
=((
posX
+
difX
)>>16)&
TWö
.
xmask
;

3140 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)&
TWö
.
ymask
)<<11)+

3141 
YAdju°
+(
XAdju°
>>1)];

3142 
tC2
=—C2>>((
XAdju°
&1)<<2))&0xf;

3144 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3145 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

3146 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

3147 
posX
+=
difX2
;

3148 
posY
+=
difY2
;

3150 if(
j
==
xmax
)

3152 
XAdju°
=(
posX
>>16)&
TWö
.
xmask
;

3153 
tC1
 = 
psxVub
[(((
posY
>>16)&
TWö
.
ymask
)<<11)+

3154 
YAdju°
+(
XAdju°
>>1)];

3155 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

3156 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3159 if(
	`NextRow_FT4
()) ;

3166 
i
=
ymö
;i<=
ymax
;i++)

3168 
xmö
=(
À·_x
 >> 16);

3169 
xmax
=(
right_x
 >> 16);

3171 if(
xmax
>=
xmö
)

3173 
posX
=
À·_u
;

3174 
posY
=
À·_v
;

3176 
num
=(
xmax
-
xmö
);

3177 if(
num
==0)Çum=1;

3178 
difX
=(
right_u
-
posX
)/
num
;

3179 
difY
=(
right_v
-
posY
)/
num
;

3180 
difX2
=
difX
<<1;

3181 
difY2
=
difY
<<1;

3183 if(
xmö
<
døwX
)

3184 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3185 
xmax
--;if(
døwW
<xmax) xmax=drawW;

3187 
j
=
xmö
;j<
xmax
;j+=2)

3189 
XAdju°
=(
posX
>>16)&
TWö
.
xmask
;

3190 
tC1
 = 
psxVub
[(((
posY
>>16)&
TWö
.
ymask
)<<11)+

3191 
YAdju°
+(
XAdju°
>>1)];

3192 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

3193 
XAdju°
=((
posX
+
difX
)>>16)&
TWö
.
xmask
;

3194 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)&
TWö
.
ymask
)<<11)+

3195 
YAdju°
+(
XAdju°
>>1)];

3196 
tC2
=—C2>>((
XAdju°
&1)<<2))&0xf;

3198 
	`GëTextuªTønsCﬁG32_SPR
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3199 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

3200 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

3201 
posX
+=
difX2
;

3202 
posY
+=
difY2
;

3204 if(
j
==
xmax
)

3206 
XAdju°
=(
posX
>>16)&
TWö
.
xmask
;

3207 
tC1
 = 
psxVub
[(((
posY
>>16)&
TWö
.
ymask
)<<11)+

3208 
YAdju°
+(
XAdju°
>>1)];

3209 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

3210 
	`GëTextuªTønsCﬁG_SPR
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3213 if(
	`NextRow_FT4
()) ;

3215 
	}
}

3220 
	$døwPﬁy3TEx8
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
,
˛X
, 
˛Y
)

3222 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

3223 
öt32_t
 
difX
, 
difY
,
difX2
, 
difY2
;

3224 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
;

3225 
tC1
,
tC2
;

3227 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

3228 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

3229 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

3230 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

3231 if(
døwY
>=
døwH
) ;

3232 if(
døwX
>=
døwW
) ;

3234 if(!
	`SëupSe˘i⁄s_FT
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
)) ;

3236 
ymax
=
Ymax
;

3238 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

3239 if(
	`NextRow_FT
()) ;

3241 
˛utP
=(
˛Y
<<10)+
˛X
;

3243 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

3245 
difX
=
dñè_right_u
;
difX2
=difX<<1;

3246 
difY
=
dñè_right_v
;
difY2
=difY<<1;

3248 #ifde‡
FASTSOLID


3250 if(!
bCheckMask
 && !
DøwSemiTøns
)

3252 
i
=
ymö
;i<=
ymax
;i++)

3254 
xmö
=(
À·_x
 >> 16);

3255 
xmax
=(
right_x
 >> 16)-1;

3256 if(
døwW
<
xmax
) xmax=drawW;

3258 if(
xmax
>=
xmö
)

3260 
posX
=
À·_u
;

3261 
posY
=
À·_v
;

3263 if(
xmö
<
døwX
)

3264 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3266 
j
=
xmö
;j<
xmax
;j+=2)

3268 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
posX
>>16)];

3269 
tC2
 = 
psxVub
[(((
posY
+
difY
)>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

3270 ((
posX
+
difX
)>>16)];

3271 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3272 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

3273 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

3274 
posX
+=
difX2
;

3275 
posY
+=
difY2
;

3278 if(
j
==
xmax
)

3280 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
posX
>>16)];

3281 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3284 if(
	`NextRow_FT
())

3294 
i
=
ymö
;i<=
ymax
;i++)

3296 
xmö
=(
À·_x
 >> 16);

3297 
xmax
=(
right_x
 >> 16)-1;

3298 if(
døwW
<
xmax
) xmax=drawW;

3300 if(
xmax
>=
xmö
)

3302 
posX
=
À·_u
;

3303 
posY
=
À·_v
;

3305 if(
xmö
<
døwX
)

3306 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3308 
j
=
xmö
;j<
xmax
;j+=2)

3310 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
posX
>>16)];

3311 
tC2
 = 
psxVub
[(((
posY
+
difY
)>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

3312 ((
posX
+
difX
)>>16)];

3313 
	`GëTextuªTønsCﬁG32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3314 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

3315 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

3316 
posX
+=
difX2
;

3317 
posY
+=
difY2
;

3320 if(
j
==
xmax
)

3322 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
posX
>>16)];

3323 
	`GëTextuªTønsCﬁG
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3327 if(
	`NextRow_FT
())

3332 
	}
}

3336 
	$døwPﬁy3TEx8_TW
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
,
˛X
, 
˛Y
)

3338 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

3339 
öt32_t
 
difX
, 
difY
,
difX2
, 
difY2
;

3340 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
;

3341 
tC1
,
tC2
;

3343 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

3344 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

3345 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

3346 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

3347 if(
døwY
>=
døwH
) ;

3348 if(
døwX
>=
døwW
) ;

3350 if(!
	`SëupSe˘i⁄s_FT
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
)) ;

3352 
ymax
=
Ymax
;

3354 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

3355 if(
	`NextRow_FT
()) ;

3357 
˛utP
=(
˛Y
<<10)+
˛X
;

3359 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

3360 
YAdju°
+=(
TWö
.
Posôi⁄
.
y0
<<11)+(TWö.Posôi⁄.
x0
);

3362 
difX
=
dñè_right_u
;
difX2
=difX<<1;

3363 
difY
=
dñè_right_v
;
difY2
=difY<<1;

3365 #ifde‡
FASTSOLID


3367 if(!
bCheckMask
 && !
DøwSemiTøns
)

3369 
i
=
ymö
;i<=
ymax
;i++)

3371 
xmö
=(
À·_x
 >> 16);

3372 
xmax
=(
right_x
 >> 16);

3373 if(
xmax
>
xmö
) xmax--;

3375 if(
døwW
<
xmax
) xmax=drawW;

3377 if(
xmax
>=
xmö
)

3379 
posX
=
À·_u
;

3380 
posY
=
À·_v
;

3382 if(
xmö
<
døwX
)

3383 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3385 
j
=
xmö
;j<
xmax
;j+=2)

3387 
tC1
 = 
psxVub
[(((
posY
>>16)&
TWö
.
ymask
)<<11)+

3388 
YAdju°
+((
posX
>>16)&
TWö
.
xmask
)];

3389 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)&
TWö
.
ymask
)<<11)+

3390 
YAdju°
+(((
posX
+
difX
)>>16)&
TWö
.
xmask
)];

3391 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3392 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

3393 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

3394 
posX
+=
difX2
;

3395 
posY
+=
difY2
;

3398 if(
j
==
xmax
)

3400 
tC1
 = 
psxVub
[(((
posY
>>16)&
TWö
.
ymask
)<<11)+

3401 
YAdju°
+((
posX
>>16)&
TWö
.
xmask
)];

3402 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3405 if(
	`NextRow_FT
())

3415 
i
=
ymö
;i<=
ymax
;i++)

3417 
xmö
=(
À·_x
 >> 16);

3418 
xmax
=(
right_x
 >> 16)-1;

3419 if(
døwW
<
xmax
) xmax=drawW;

3421 if(
xmax
>=
xmö
)

3423 
posX
=
À·_u
;

3424 
posY
=
À·_v
;

3426 if(
xmö
<
døwX
)

3427 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3429 
j
=
xmö
;j<
xmax
;j+=2)

3431 
tC1
 = 
psxVub
[(((
posY
>>16)&
TWö
.
ymask
)<<11)+

3432 
YAdju°
+((
posX
>>16)&
TWö
.
xmask
)];

3433 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)&
TWö
.
ymask
)<<11)+

3434 
YAdju°
+(((
posX
+
difX
)>>16)&
TWö
.
xmask
)];

3435 
	`GëTextuªTønsCﬁG32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3436 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

3437 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

3438 
posX
+=
difX2
;

3439 
posY
+=
difY2
;

3442 if(
j
==
xmax
)

3444 
tC1
 = 
psxVub
[(((
posY
>>16)&
TWö
.
ymask
)<<11)+

3445 
YAdju°
+((
posX
>>16)&
TWö
.
xmask
)];

3446 
	`GëTextuªTønsCﬁG
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3450 if(
	`NextRow_FT
())

3455 
	}
}

3459 #ifde‡
POLYQUAD3


3461 
	$døwPﬁy4TEx8_TRI
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,
˛X
, 
˛Y
)

3463 
	`døwPﬁy3TEx8
(
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,

3464 
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
,

3465 
˛X
,
˛Y
);

3467 
	`døwPﬁy3TEx8
(
x1
,
y1
,
x2
,
y2
,
x4
,
y4
,

3468 
tx1
,
ty1
,
tx2
,
ty2
,
tx4
,
ty4
,

3469 
˛X
,
˛Y
);

3470 
	}
}

3476 
	$døwPﬁy4TEx8
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,
˛X
, 
˛Y
)

3478 
öt32_t
 
num
;

3479 
öt32_t
 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

3480 
öt32_t
 
difX
, 
difY
, 
difX2
, 
difY2
;

3481 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
;

3482 
tC1
,
tC2
;

3484 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>døwW && 
x4
>drawW) ;

3485 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>døwH && 
y4
>drawH) ;

3486 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<døwX && 
x4
<drawX) ;

3487 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<døwY && 
y4
<drawY) ;

3488 if(
døwY
>=
døwH
) ;

3489 if(
døwX
>=
døwW
) ;

3491 if(!
	`SëupSe˘i⁄s_FT4
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
)) ;

3493 
ymax
=
Ymax
;

3495 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

3496 if(
	`NextRow_FT4
()) ;

3498 
˛utP
=(
˛Y
<<10)+
˛X
;

3500 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

3502 #ifde‡
FASTSOLID


3504 if(!
bCheckMask
 && !
DøwSemiTøns
)

3506 
i
=
ymö
;i<=
ymax
;i++)

3508 
xmö
=(
À·_x
 >> 16);

3509 
xmax
=(
right_x
 >> 16);

3511 if(
xmax
>=
xmö
)

3513 
posX
=
À·_u
;

3514 
posY
=
À·_v
;

3516 
num
=(
xmax
-
xmö
);

3517 if(
num
==0)Çum=1;

3518 
difX
=(
right_u
-
posX
)/
num
;

3519 
difY
=(
right_v
-
posY
)/
num
;

3520 
difX2
=
difX
<<1;

3521 
difY2
=
difY
<<1;

3523 if(
xmö
<
døwX
)

3524 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3525 
xmax
--;if(
døwW
<xmax) xmax=drawW;

3527 
j
=
xmö
;j<
xmax
;j+=2)

3529 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
posX
>>16)];

3530 
tC2
 = 
psxVub
[(((
posY
+
difY
)>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

3531 ((
posX
+
difX
)>>16)];

3532 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3533 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

3534 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

3535 
posX
+=
difX2
;

3536 
posY
+=
difY2
;

3538 if(
j
==
xmax
)

3540 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
posX
>>16)];

3541 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3544 if(
	`NextRow_FT4
()) ;

3551 
i
=
ymö
;i<=
ymax
;i++)

3553 
xmö
=(
À·_x
 >> 16);

3554 
xmax
=(
right_x
 >> 16);

3556 if(
xmax
>=
xmö
)

3558 
posX
=
À·_u
;

3559 
posY
=
À·_v
;

3561 
num
=(
xmax
-
xmö
);

3562 if(
num
==0)Çum=1;

3563 
difX
=(
right_u
-
posX
)/
num
;

3564 
difY
=(
right_v
-
posY
)/
num
;

3565 
difX2
=
difX
<<1;

3566 
difY2
=
difY
<<1;

3568 if(
xmö
<
døwX
)

3569 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3570 
xmax
--;if(
døwW
<xmax) xmax=drawW;

3572 
j
=
xmö
;j<
xmax
;j+=2)

3574 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
posX
>>16)];

3575 
tC2
 = 
psxVub
[(((
posY
+
difY
)>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

3576 ((
posX
+
difX
)>>16)];

3577 
	`GëTextuªTønsCﬁG32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3578 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

3579 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

3580 
posX
+=
difX2
;

3581 
posY
+=
difY2
;

3583 if(
j
==
xmax
)

3585 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
posX
>>16)];

3586 
	`GëTextuªTønsCﬁG
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3589 if(
	`NextRow_FT4
()) ;

3591 
	}
}

3595 
	$døwPﬁy4TEx8_TW
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,
˛X
, 
˛Y
)

3597 
öt32_t
 
num
;

3598 
öt32_t
 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

3599 
öt32_t
 
difX
, 
difY
, 
difX2
, 
difY2
;

3600 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
;

3601 
tC1
,
tC2
;

3603 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>døwW && 
x4
>drawW) ;

3604 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>døwH && 
y4
>drawH) ;

3605 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<døwX && 
x4
<drawX) ;

3606 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<døwY && 
y4
<drawY) ;

3607 if(
døwY
>=
døwH
) ;

3608 if(
døwX
>=
døwW
) ;

3610 if(!
	`SëupSe˘i⁄s_FT4
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
)) ;

3612 
ymax
=
Ymax
;

3614 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

3615 if(
	`NextRow_FT4
()) ;

3617 
˛utP
=(
˛Y
<<10)+
˛X
;

3619 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

3620 
YAdju°
+=(
TWö
.
Posôi⁄
.
y0
<<11)+(TWö.Posôi⁄.
x0
);

3622 #ifde‡
FASTSOLID


3624 if(!
bCheckMask
 && !
DøwSemiTøns
)

3626 
i
=
ymö
;i<=
ymax
;i++)

3628 
xmö
=(
À·_x
 >> 16);

3629 
xmax
=(
right_x
 >> 16);

3631 if(
xmax
>=
xmö
)

3633 
posX
=
À·_u
;

3634 
posY
=
À·_v
;

3636 
num
=(
xmax
-
xmö
);

3637 if(
num
==0)Çum=1;

3638 
difX
=(
right_u
-
posX
)/
num
;

3639 
difY
=(
right_v
-
posY
)/
num
;

3640 
difX2
=
difX
<<1;

3641 
difY2
=
difY
<<1;

3643 if(
xmö
<
døwX
)

3644 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3645 
xmax
--;if(
døwW
<xmax) xmax=drawW;

3647 
j
=
xmö
;j<
xmax
;j+=2)

3649 
tC1
 = 
psxVub
[(((
posY
>>16)&
TWö
.
ymask
)<<11)+

3650 
YAdju°
+((
posX
>>16)&
TWö
.
xmask
)];

3651 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)&
TWö
.
ymask
)<<11)+

3652 
YAdju°
+(((
posX
+
difX
)>>16)&
TWö
.
xmask
)];

3653 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3654 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

3655 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

3656 
posX
+=
difX2
;

3657 
posY
+=
difY2
;

3659 if(
j
==
xmax
)

3661 
tC1
 = 
psxVub
[((((
posY
+
difY
)>>16)&
TWö
.
ymask
)<<11)+

3662 
YAdju°
+((
posX
>>16)&
TWö
.
xmask
)];

3663 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3666 if(
	`NextRow_FT4
()) ;

3674 
i
=
ymö
;i<=
ymax
;i++)

3676 
xmö
=(
À·_x
 >> 16);

3677 
xmax
=(
right_x
 >> 16);

3679 if(
xmax
>=
xmö
)

3681 
posX
=
À·_u
;

3682 
posY
=
À·_v
;

3684 
num
=(
xmax
-
xmö
);

3685 if(
num
==0)Çum=1;

3686 
difX
=(
right_u
-
posX
)/
num
;

3687 
difY
=(
right_v
-
posY
)/
num
;

3688 
difX2
=
difX
<<1;

3689 
difY2
=
difY
<<1;

3691 if(
xmö
<
døwX
)

3692 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3693 
xmax
--;if(
døwW
<xmax) xmax=drawW;

3695 
j
=
xmö
;j<
xmax
;j+=2)

3697 
tC1
 = 
psxVub
[(((
posY
>>16)&
TWö
.
ymask
)<<11)+

3698 
YAdju°
+((
posX
>>16)&
TWö
.
xmask
)];

3699 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)&
TWö
.
ymask
)<<11)+

3700 
YAdju°
+(((
posX
+
difX
)>>16)&
TWö
.
xmask
)];

3701 
	`GëTextuªTønsCﬁG32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3702 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

3703 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

3704 
posX
+=
difX2
;

3705 
posY
+=
difY2
;

3707 if(
j
==
xmax
)

3709 
tC1
 = 
psxVub
[((((
posY
+
difY
)>>16)&
TWö
.
ymask
)<<11)+

3710 
YAdju°
+((
posX
>>16)&
TWö
.
xmask
)];

3711 
	`GëTextuªTønsCﬁG
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3714 if(
	`NextRow_FT4
()) ;

3716 
	}
}

3720 
	$døwPﬁy4TEx8_TW_S
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,
˛X
, 
˛Y
)

3722 
öt32_t
 
num
;

3723 
öt32_t
 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

3724 
öt32_t
 
difX
, 
difY
, 
difX2
, 
difY2
;

3725 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
;

3726 
tC1
,
tC2
;

3728 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>døwW && 
x4
>drawW) ;

3729 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>døwH && 
y4
>drawH) ;

3730 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<døwX && 
x4
<drawX) ;

3731 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<døwY && 
y4
<drawY) ;

3732 if(
døwY
>=
døwH
) ;

3733 if(
døwX
>=
døwW
) ;

3735 if(!
	`SëupSe˘i⁄s_FT4
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
)) ;

3737 
ymax
=
Ymax
;

3739 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

3740 if(
	`NextRow_FT4
()) ;

3742 
˛utP
=(
˛Y
<<10)+
˛X
;

3744 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

3745 
YAdju°
+=(
TWö
.
Posôi⁄
.
y0
<<11)+(TWö.Posôi⁄.
x0
);

3747 #ifde‡
FASTSOLID


3749 if(!
bCheckMask
 && !
DøwSemiTøns
)

3751 
i
=
ymö
;i<=
ymax
;i++)

3753 
xmö
=(
À·_x
 >> 16);

3754 
xmax
=(
right_x
 >> 16);

3756 if(
xmax
>=
xmö
)

3758 
posX
=
À·_u
;

3759 
posY
=
À·_v
;

3761 
num
=(
xmax
-
xmö
);

3762 if(
num
==0)Çum=1;

3763 
difX
=(
right_u
-
posX
)/
num
;

3764 
difY
=(
right_v
-
posY
)/
num
;

3765 
difX2
=
difX
<<1;

3766 
difY2
=
difY
<<1;

3768 if(
xmö
<
døwX
)

3769 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3770 
xmax
--;if(
døwW
<xmax) xmax=drawW;

3772 
j
=
xmö
;j<
xmax
;j+=2)

3774 
tC1
 = 
psxVub
[(((
posY
>>16)&
TWö
.
ymask
)<<11)+

3775 
YAdju°
+((
posX
>>16)&
TWö
.
xmask
)];

3776 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)&
TWö
.
ymask
)<<11)+

3777 
YAdju°
+(((
posX
+
difX
)>>16)&
TWö
.
xmask
)];

3778 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3779 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

3780 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

3781 
posX
+=
difX2
;

3782 
posY
+=
difY2
;

3784 if(
j
==
xmax
)

3786 
tC1
 = 
psxVub
[((((
posY
+
difY
)>>16)&
TWö
.
ymask
)<<11)+

3787 
YAdju°
+((
posX
>>16)&
TWö
.
xmask
)];

3788 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3791 if(
	`NextRow_FT4
()) ;

3799 
i
=
ymö
;i<=
ymax
;i++)

3801 
xmö
=(
À·_x
 >> 16);

3802 
xmax
=(
right_x
 >> 16);

3804 if(
xmax
>=
xmö
)

3806 
posX
=
À·_u
;

3807 
posY
=
À·_v
;

3809 
num
=(
xmax
-
xmö
);

3810 if(
num
==0)Çum=1;

3811 
difX
=(
right_u
-
posX
)/
num
;

3812 
difY
=(
right_v
-
posY
)/
num
;

3813 
difX2
=
difX
<<1;

3814 
difY2
=
difY
<<1;

3816 if(
xmö
<
døwX
)

3817 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3818 
xmax
--;if(
døwW
<xmax) xmax=drawW;

3820 
j
=
xmö
;j<
xmax
;j+=2)

3822 
tC1
 = 
psxVub
[(((
posY
>>16)&
TWö
.
ymask
)<<11)+

3823 
YAdju°
+((
posX
>>16)&
TWö
.
xmask
)];

3824 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)&
TWö
.
ymask
)<<11)+

3825 
YAdju°
+(((
posX
+
difX
)>>16)&
TWö
.
xmask
)];

3826 
	`GëTextuªTønsCﬁG32_SPR
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3827 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

3828 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16);

3829 
posX
+=
difX2
;

3830 
posY
+=
difY2
;

3832 if(
j
==
xmax
)

3834 
tC1
 = 
psxVub
[((((
posY
+
difY
)>>16)&
TWö
.
ymask
)<<11)+

3835 
YAdju°
+((
posX
>>16)&
TWö
.
xmask
)];

3836 
	`GëTextuªTønsCﬁG_SPR
(&
psxVuw
[(
i
<<10)+
j
],
	`GETLE16
(&psxVuw[
˛utP
+
tC1
]));

3839 if(
	`NextRow_FT4
()) ;

3841 
	}
}

3847 
	$døwPﬁy3TD
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
)

3849 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

3850 
öt32_t
 
difX
, 
difY
,
difX2
, 
difY2
;

3851 
öt32_t
 
posX
,
posY
;

3853 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

3854 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

3855 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

3856 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

3857 if(
døwY
>=
døwH
) ;

3858 if(
døwX
>=
døwW
) ;

3860 if(!
	`SëupSe˘i⁄s_FT
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
)) ;

3862 
ymax
=
Ymax
;

3864 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

3865 if(
	`NextRow_FT
()) ;

3867 
difX
=
dñè_right_u
;
difX2
=difX<<1;

3868 
difY
=
dñè_right_v
;
difY2
=difY<<1;

3870 #ifde‡
FASTSOLID


3872 if(!
bCheckMask
 && !
DøwSemiTøns
)

3874 
i
=
ymö
;i<=
ymax
;i++)

3876 
xmö
=(
À·_x
 >> 16);

3877 
xmax
=(
right_x
 >> 16)-1;

3878 if(
døwW
<
xmax
) xmax=drawW;

3880 if(
xmax
>=
xmö
)

3882 
posX
=
À·_u
;

3883 
posY
=
À·_v
;

3885 if(
xmö
<
døwX
)

3886 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3888 
j
=
xmö
;j<
xmax
;j+=2)

3890 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3891 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[((((
posY
+
difY
)>>16)+
GlobÆTextAddrY
)<<10)+((
posX
+
difX
)>>16)+
GlobÆTextAddrX
]))<<16)|

3892 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+((
posX
)>>16)+
GlobÆTextAddrX
]));

3894 
posX
+=
difX2
;

3895 
posY
+=
difY2
;

3897 if(
j
==
xmax
)

3898 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],

3899 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+(
posX
>>16)+
GlobÆTextAddrX
]));

3901 if(
	`NextRow_FT
())

3911 
i
=
ymö
;i<=
ymax
;i++)

3913 
xmö
=(
À·_x
 >> 16);

3914 
xmax
=(
right_x
 >> 16)-1;

3915 if(
døwW
<
xmax
) xmax=drawW;

3917 if(
xmax
>=
xmö
)

3919 
posX
=
À·_u
;

3920 
posY
=
À·_v
;

3922 if(
xmö
<
døwX
)

3923 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3925 
j
=
xmö
;j<
xmax
;j+=2)

3927 
	`GëTextuªTønsCﬁG32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3928 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[((((
posY
+
difY
)>>16)+
GlobÆTextAddrY
)<<10)+((
posX
+
difX
)>>16)+
GlobÆTextAddrX
]))<<16)|

3929 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+((
posX
)>>16)+
GlobÆTextAddrX
]));

3931 
posX
+=
difX2
;

3932 
posY
+=
difY2
;

3934 if(
j
==
xmax
)

3935 
	`GëTextuªTønsCﬁG
(&
psxVuw
[(
i
<<10)+
j
],

3936 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+(
posX
>>16)+
GlobÆTextAddrX
]));

3938 if(
	`NextRow_FT
())

3943 
	}
}

3947 
	$døwPﬁy3TD_TW
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
)

3949 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

3950 
öt32_t
 
difX
, 
difY
,
difX2
, 
difY2
;

3951 
öt32_t
 
posX
,
posY
;

3953 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

3954 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

3955 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

3956 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

3957 if(
døwY
>=
døwH
) ;

3958 if(
døwX
>=
døwW
) ;

3960 if(!
	`SëupSe˘i⁄s_FT
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
)) ;

3962 
ymax
=
Ymax
;

3964 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

3965 if(
	`NextRow_FT
()) ;

3967 
difX
=
dñè_right_u
;
difX2
=difX<<1;

3968 
difY
=
dñè_right_v
;
difY2
=difY<<1;

3970 #ifde‡
FASTSOLID


3972 if(!
bCheckMask
 && !
DøwSemiTøns
)

3974 
i
=
ymö
;i<=
ymax
;i++)

3976 
xmö
=(
À·_x
 >> 16);

3977 
xmax
=(
right_x
 >> 16)-1;

3978 if(
døwW
<
xmax
) xmax=drawW;

3980 if(
xmax
>=
xmö
)

3982 
posX
=
À·_u
;

3983 
posY
=
À·_v
;

3985 if(
xmö
<
døwX
)

3986 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

3988 
j
=
xmö
;j<
xmax
;j+=2)

3990 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

3991 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[(((((
posY
+
difY
)>>16)&
TWö
.
ymask
)+
GlobÆTextAddrY
+TWö.
Posôi⁄
.
y0
)<<10)+

3992 (((
posX
+
difX
)>>16)&
TWö
.
xmask
)+
GlobÆTextAddrX
+TWö.
Posôi⁄
.
x0
]))<<16)|

3993 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)&
TWö
.
ymask
)+
GlobÆTextAddrY
+TWö.
Posôi⁄
.
y0
)<<10)+

3994 (((
posX
)>>16)&
TWö
.
xmask
)+
GlobÆTextAddrX
+TWö.
Posôi⁄
.
x0
]));

3996 
posX
+=
difX2
;

3997 
posY
+=
difY2
;

3999 if(
j
==
xmax
)

4000 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],

4001 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)&
TWö
.
ymask
)+
GlobÆTextAddrY
+TWö.
Posôi⁄
.
y0
)<<10)+

4002 ((
posX
>>16)&
TWö
.
xmask
)+
GlobÆTextAddrX
+TWö.
Posôi⁄
.
x0
]));

4004 if(
	`NextRow_FT
())

4014 
i
=
ymö
;i<=
ymax
;i++)

4016 
xmö
=(
À·_x
 >> 16);

4017 
xmax
=(
right_x
 >> 16)-1;

4018 if(
døwW
<
xmax
) xmax=drawW;

4020 if(
xmax
>=
xmö
)

4022 
posX
=
À·_u
;

4023 
posY
=
À·_v
;

4025 if(
xmö
<
døwX
)

4026 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

4028 
j
=
xmö
;j<
xmax
;j+=2)

4030 
	`GëTextuªTønsCﬁG32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

4031 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[(((((
posY
+
difY
)>>16)&
TWö
.
ymask
)+
GlobÆTextAddrY
+TWö.
Posôi⁄
.
y0
)<<10)+

4032 (((
posX
+
difX
)>>16)&
TWö
.
xmask
)+
GlobÆTextAddrX
+TWö.
Posôi⁄
.
x0
]))<<16)|

4033 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)&
TWö
.
ymask
)+
GlobÆTextAddrY
+TWö.
Posôi⁄
.
y0
)<<10)+

4034 (((
posX
)>>16)&
TWö
.
xmask
)+
GlobÆTextAddrX
+TWö.
Posôi⁄
.
x0
]));

4036 
posX
+=
difX2
;

4037 
posY
+=
difY2
;

4039 if(
j
==
xmax
)

4040 
	`GëTextuªTønsCﬁG
(&
psxVuw
[(
i
<<10)+
j
],

4041 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)&
TWö
.
ymask
)+
GlobÆTextAddrY
+TWö.
Posôi⁄
.
y0
)<<10)+

4042 ((
posX
>>16)&
TWö
.
xmask
)+
GlobÆTextAddrX
+TWö.
Posôi⁄
.
x0
]));

4044 if(
	`NextRow_FT
())

4049 
	}
}

4054 #ifde‡
POLYQUAD3


4056 
	$døwPﬁy4TD_TRI
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
)

4058 
	`døwPﬁy3TD
(
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,

4059 
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
);

4060 
	`døwPﬁy3TD
(
x1
,
y1
,
x2
,
y2
,
x4
,
y4
,

4061 
tx1
,
ty1
,
tx2
,
ty2
,
tx4
,
ty4
);

4062 
	}
}

4068 
	$døwPﬁy4TD
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
)

4070 
öt32_t
 
num
;

4071 
öt32_t
 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

4072 
öt32_t
 
difX
, 
difY
, 
difX2
, 
difY2
;

4073 
öt32_t
 
posX
,
posY
;

4075 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>døwW && 
x4
>drawW) ;

4076 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>døwH && 
y4
>drawH) ;

4077 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<døwX && 
x4
<drawX) ;

4078 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<døwY && 
y4
<drawY) ;

4079 if(
døwY
>=
døwH
) ;

4080 if(
døwX
>=
døwW
) ;

4082 if(!
	`SëupSe˘i⁄s_FT4
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
)) ;

4084 
ymax
=
Ymax
;

4086 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

4087 if(
	`NextRow_FT4
()) ;

4089 #ifde‡
FASTSOLID


4091 if(!
bCheckMask
 && !
DøwSemiTøns
)

4093 
i
=
ymö
;i<=
ymax
;i++)

4095 
xmö
=(
À·_x
 >> 16);

4096 
xmax
=(
right_x
 >> 16);

4098 if(
xmax
>=
xmö
)

4100 
posX
=
À·_u
;

4101 
posY
=
À·_v
;

4103 
num
=(
xmax
-
xmö
);

4104 if(
num
==0)Çum=1;

4105 
difX
=(
right_u
-
posX
)/
num
;

4106 
difY
=(
right_v
-
posY
)/
num
;

4107 
difX2
=
difX
<<1;

4108 
difY2
=
difY
<<1;

4110 if(
xmö
<
døwX
)

4111 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

4112 
xmax
--;if(
døwW
<xmax) xmax=drawW;

4114 
j
=
xmö
;j<
xmax
;j+=2)

4116 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

4117 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[((((
posY
+
difY
)>>16)+
GlobÆTextAddrY
)<<10)+((
posX
+
difX
)>>16)+
GlobÆTextAddrX
]))<<16)|

4118 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+((
posX
)>>16)+
GlobÆTextAddrX
]));

4120 
posX
+=
difX2
;

4121 
posY
+=
difY2
;

4123 if(
j
==
xmax
)

4124 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],

4125 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+(
posX
>>16)+
GlobÆTextAddrX
]));

4127 if(
	`NextRow_FT4
()) ;

4134 
i
=
ymö
;i<=
ymax
;i++)

4136 
xmö
=(
À·_x
 >> 16);

4137 
xmax
=(
right_x
 >> 16);

4139 if(
xmax
>=
xmö
)

4141 
posX
=
À·_u
;

4142 
posY
=
À·_v
;

4144 
num
=(
xmax
-
xmö
);

4145 if(
num
==0)Çum=1;

4146 
difX
=(
right_u
-
posX
)/
num
;

4147 
difY
=(
right_v
-
posY
)/
num
;

4148 
difX2
=
difX
<<1;

4149 
difY2
=
difY
<<1;

4151 if(
xmö
<
døwX
)

4152 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

4153 
xmax
--;if(
døwW
<xmax) xmax=drawW;

4155 
j
=
xmö
;j<
xmax
;j+=2)

4157 
	`GëTextuªTønsCﬁG32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

4158 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[((((
posY
+
difY
)>>16)+
GlobÆTextAddrY
)<<10)+((
posX
+
difX
)>>16)+
GlobÆTextAddrX
]))<<16)|

4159 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+((
posX
)>>16)+
GlobÆTextAddrX
]));

4161 
posX
+=
difX2
;

4162 
posY
+=
difY2
;

4164 if(
j
==
xmax
)

4165 
	`GëTextuªTønsCﬁG
(&
psxVuw
[(
i
<<10)+
j
],

4166 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+(
posX
>>16)+
GlobÆTextAddrX
]));

4168 if(
	`NextRow_FT4
()) ;

4170 
	}
}

4174 
	$døwPﬁy4TD_TW
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
)

4176 
öt32_t
 
num
;

4177 
öt32_t
 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

4178 
öt32_t
 
difX
, 
difY
, 
difX2
, 
difY2
;

4179 
öt32_t
 
posX
,
posY
;

4181 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>døwW && 
x4
>drawW) ;

4182 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>døwH && 
y4
>drawH) ;

4183 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<døwX && 
x4
<drawX) ;

4184 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<døwY && 
y4
<drawY) ;

4185 if(
døwY
>=
døwH
) ;

4186 if(
døwX
>=
døwW
) ;

4188 if(!
	`SëupSe˘i⁄s_FT4
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
)) ;

4190 
ymax
=
Ymax
;

4192 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

4193 if(
	`NextRow_FT4
()) ;

4195 #ifde‡
FASTSOLID


4197 if(!
bCheckMask
 && !
DøwSemiTøns
)

4199 
i
=
ymö
;i<=
ymax
;i++)

4201 
xmö
=(
À·_x
 >> 16);

4202 
xmax
=(
right_x
 >> 16);

4204 if(
xmax
>=
xmö
)

4206 
posX
=
À·_u
;

4207 
posY
=
À·_v
;

4209 
num
=(
xmax
-
xmö
);

4210 if(
num
==0)Çum=1;

4211 
difX
=(
right_u
-
posX
)/
num
;

4212 
difY
=(
right_v
-
posY
)/
num
;

4213 
difX2
=
difX
<<1;

4214 
difY2
=
difY
<<1;

4216 if(
xmö
<
døwX
)

4217 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

4218 
xmax
--;if(
døwW
<xmax) xmax=drawW;

4220 
j
=
xmö
;j<
xmax
;j+=2)

4222 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

4223 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[(((((
posY
+
difY
)>>16)&
TWö
.
ymask
)+
GlobÆTextAddrY
+TWö.
Posôi⁄
.
y0
)<<10)+

4224 (((
posX
+
difX
)>>16)&
TWö
.
xmask
)+
GlobÆTextAddrX
+TWö.
Posôi⁄
.
x0
]))<<16)|

4225 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)&
TWö
.
ymask
)+
GlobÆTextAddrY
)<<10)+TWö.
Posôi⁄
.
y0
+

4226 ((
posX
>>16)&
TWö
.
xmask
)+
GlobÆTextAddrX
+TWö.
Posôi⁄
.
x0
]));

4228 
posX
+=
difX2
;

4229 
posY
+=
difY2
;

4231 if(
j
==
xmax
)

4232 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],

4233 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)&
TWö
.
ymask
)+
GlobÆTextAddrY
+TWö.
Posôi⁄
.
y0
)<<10)+

4234 ((
posX
>>16)&
TWö
.
xmask
)+
GlobÆTextAddrX
+TWö.
Posôi⁄
.
x0
]));

4236 if(
	`NextRow_FT4
()) ;

4243 
i
=
ymö
;i<=
ymax
;i++)

4245 
xmö
=(
À·_x
 >> 16);

4246 
xmax
=(
right_x
 >> 16);

4248 if(
xmax
>=
xmö
)

4250 
posX
=
À·_u
;

4251 
posY
=
À·_v
;

4253 
num
=(
xmax
-
xmö
);

4254 if(
num
==0)Çum=1;

4255 
difX
=(
right_u
-
posX
)/
num
;

4256 
difY
=(
right_v
-
posY
)/
num
;

4257 
difX2
=
difX
<<1;

4258 
difY2
=
difY
<<1;

4260 if(
xmö
<
døwX
)

4261 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

4262 
xmax
--;if(
døwW
<xmax) xmax=drawW;

4264 
j
=
xmö
;j<
xmax
;j+=2)

4266 
	`GëTextuªTønsCﬁG32
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

4267 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[(((((
posY
+
difY
)>>16)&
TWö
.
ymask
)+
GlobÆTextAddrY
+TWö.
Posôi⁄
.
y0
)<<10)+

4268 (((
posX
+
difX
)>>16)&
TWö
.
xmask
)+
GlobÆTextAddrX
+TWö.
Posôi⁄
.
x0
]))<<16)|

4269 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)&
TWö
.
ymask
)+
GlobÆTextAddrY
+TWö.
Posôi⁄
.
y0
)<<10)+

4270 ((
posX
>>16)&
TWö
.
xmask
)+
GlobÆTextAddrX
+TWö.
Posôi⁄
.
x0
]));

4272 
posX
+=
difX2
;

4273 
posY
+=
difY2
;

4275 if(
j
==
xmax
)

4276 
	`GëTextuªTønsCﬁG
(&
psxVuw
[(
i
<<10)+
j
],

4277 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)&
TWö
.
ymask
)+
GlobÆTextAddrY
+TWö.
Posôi⁄
.
y0
)<<10)+

4278 ((
posX
>>16)&
TWö
.
xmask
)+
GlobÆTextAddrX
+TWö.
Posôi⁄
.
x0
]));

4280 if(
	`NextRow_FT4
()) ;

4282 
	}
}

4286 
	$døwPﬁy4TD_TW_S
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
)

4288 
öt32_t
 
num
;

4289 
öt32_t
 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

4290 
öt32_t
 
difX
, 
difY
, 
difX2
, 
difY2
;

4291 
öt32_t
 
posX
,
posY
;

4293 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>døwW && 
x4
>drawW) ;

4294 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>døwH && 
y4
>drawH) ;

4295 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<døwX && 
x4
<drawX) ;

4296 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<døwY && 
y4
<drawY) ;

4297 if(
døwY
>=
døwH
) ;

4298 if(
døwX
>=
døwW
) ;

4300 if(!
	`SëupSe˘i⁄s_FT4
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
)) ;

4302 
ymax
=
Ymax
;

4304 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

4305 if(
	`NextRow_FT4
()) ;

4307 #ifde‡
FASTSOLID


4309 if(!
bCheckMask
 && !
DøwSemiTøns
)

4311 
i
=
ymö
;i<=
ymax
;i++)

4313 
xmö
=(
À·_x
 >> 16);

4314 
xmax
=(
right_x
 >> 16);

4316 if(
xmax
>=
xmö
)

4318 
posX
=
À·_u
;

4319 
posY
=
À·_v
;

4321 
num
=(
xmax
-
xmö
);

4322 if(
num
==0)Çum=1;

4323 
difX
=(
right_u
-
posX
)/
num
;

4324 
difY
=(
right_v
-
posY
)/
num
;

4325 
difX2
=
difX
<<1;

4326 
difY2
=
difY
<<1;

4328 if(
xmö
<
døwX
)

4329 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

4330 
xmax
--;if(
døwW
<xmax) xmax=drawW;

4332 
j
=
xmö
;j<
xmax
;j+=2)

4334 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

4335 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[(((((
posY
+
difY
)>>16)&
TWö
.
ymask
)+
GlobÆTextAddrY
+TWö.
Posôi⁄
.
y0
)<<10)+

4336 (((
posX
+
difX
)>>16)&
TWö
.
xmask
)+
GlobÆTextAddrX
+TWö.
Posôi⁄
.
x0
]))<<16)|

4337 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)&
TWö
.
ymask
)+
GlobÆTextAddrY
)<<10)+TWö.
Posôi⁄
.
y0
+

4338 ((
posX
>>16)&
TWö
.
xmask
)+
GlobÆTextAddrX
+TWö.
Posôi⁄
.
x0
]));

4340 
posX
+=
difX2
;

4341 
posY
+=
difY2
;

4343 if(
j
==
xmax
)

4344 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[(
i
<<10)+
j
],

4345 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)&
TWö
.
ymask
)+
GlobÆTextAddrY
+TWö.
Posôi⁄
.
y0
)<<10)+

4346 ((
posX
>>16)&
TWö
.
xmask
)+
GlobÆTextAddrX
+TWö.
Posôi⁄
.
x0
]));

4348 if(
	`NextRow_FT4
()) ;

4355 
i
=
ymö
;i<=
ymax
;i++)

4357 
xmö
=(
À·_x
 >> 16);

4358 
xmax
=(
right_x
 >> 16);

4360 if(
xmax
>=
xmö
)

4362 
posX
=
À·_u
;

4363 
posY
=
À·_v
;

4365 
num
=(
xmax
-
xmö
);

4366 if(
num
==0)Çum=1;

4367 
difX
=(
right_u
-
posX
)/
num
;

4368 
difY
=(
right_v
-
posY
)/
num
;

4369 
difX2
=
difX
<<1;

4370 
difY2
=
difY
<<1;

4372 if(
xmö
<
døwX
)

4373 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;}

4374 
xmax
--;if(
døwW
<xmax) xmax=drawW;

4376 
j
=
xmö
;j<
xmax
;j+=2)

4378 
	`GëTextuªTønsCﬁG32_SPR
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

4379 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[(((((
posY
+
difY
)>>16)&
TWö
.
ymask
)+
GlobÆTextAddrY
+TWö.
Posôi⁄
.
y0
)<<10)+

4380 (((
posX
+
difX
)>>16)&
TWö
.
xmask
)+
GlobÆTextAddrX
+TWö.
Posôi⁄
.
x0
]))<<16)|

4381 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)&
TWö
.
ymask
)+
GlobÆTextAddrY
+TWö.
Posôi⁄
.
y0
)<<10)+

4382 ((
posX
>>16)&
TWö
.
xmask
)+
GlobÆTextAddrX
+TWö.
Posôi⁄
.
x0
]));

4384 
posX
+=
difX2
;

4385 
posY
+=
difY2
;

4387 if(
j
==
xmax
)

4388 
	`GëTextuªTønsCﬁG_SPR
(&
psxVuw
[(
i
<<10)+
j
],

4389 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)&
TWö
.
ymask
)+
GlobÆTextAddrY
+TWö.
Posôi⁄
.
y0
)<<10)+

4390 ((
posX
>>16)&
TWö
.
xmask
)+
GlobÆTextAddrX
+TWö.
Posôi⁄
.
x0
]));

4392 if(
	`NextRow_FT4
()) ;

4394 
	}
}

4400 
ölöe
 
	$døwPﬁy3Gi
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
öt32_t
 
rgb1
, i¡32_à
rgb2
, i¡32_à
rgb3
)

4402 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

4403 
öt32_t
 
cR1
,
cG1
,
cB1
;

4404 
öt32_t
 
difR
,
difB
,
difG
,
difR2
,
difB2
,
difG2
;

4406 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

4407 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

4408 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

4409 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

4410 if(
døwY
>=
døwH
) ;

4411 if(
døwX
>=
døwW
) ;

4413 if(!
	`SëupSe˘i⁄s_G
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
rgb1
,
rgb2
,
rgb3
)) ;

4415 
ymax
=
Ymax
;

4417 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

4418 if(
	`NextRow_G
()) ;

4420 
difR
=
dñè_right_R
;

4421 
difG
=
dñè_right_G
;

4422 
difB
=
dñè_right_B
;

4423 
difR2
=
difR
<<1;

4424 
difG2
=
difG
<<1;

4425 
difB2
=
difB
<<1;

4427 #ifde‡
FASTSOLID


4429 if(!
bCheckMask
 && !
DøwSemiTøns
 && 
iDôhî
!=2)

4431 
i
=
ymö
;i<=
ymax
;i++)

4433 
xmö
=(
À·_x
 >> 16);

4434 
xmax
=(
right_x
 >> 16)-1;if(
døwW
<xmax) xmax=drawW;

4436 if(
xmax
>=
xmö
)

4438 
cR1
=
À·_R
;

4439 
cG1
=
À·_G
;

4440 
cB1
=
À·_B
;

4442 if(
xmö
<
døwX
)

4443 {
j
=
døwX
-
xmö
;xmö=døwX;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

4445 
j
=
xmö
;j<
xmax
;j+=2)

4447 
	`PUTLE32
(((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
]),

4448 ((((
cR1
+
difR
Ë<<7)&0x7c000000)|(((
cG1
+
difG
Ë<< 2)&0x03e00000)|(((
cB1
+
difB
)>>3)&0x001f0000)|

4449 (((
cR1
Ë>> 9)&0x7c00)|(((
cG1
Ë>> 14)&0x03e0)|(((
cB1
Ë>> 19)&0x001f))|
lSëMask
);

4451 
cR1
+=
difR2
;

4452 
cG1
+=
difG2
;

4453 
cB1
+=
difB2
;

4455 if(
j
==
xmax
)

4456 
	`PUTLE16
(&
psxVuw
[(
i
<<10)+
j
], (((
cR1
 >> 9)&0x7c00)|((
cG1
 >> 14)&0x03e0)|((
cB1
 >> 19)&0x001f))|
sSëMask
);

4458 if(
	`NextRow_G
()) ;

4465 if(
iDôhî
==2)

4466 
i
=
ymö
;i<=
ymax
;i++)

4468 
xmö
=(
À·_x
 >> 16);

4469 
xmax
=(
right_x
 >> 16)-1;if(
døwW
<xmax) xmax=drawW;

4471 if(
xmax
>=
xmö
)

4473 
cR1
=
À·_R
;

4474 
cG1
=
À·_G
;

4475 
cB1
=
À·_B
;

4477 if(
xmö
<
døwX
)

4478 {
j
=
døwX
-
xmö
;xmö=døwX;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

4480 
j
=
xmö
;j<=
xmax
;j++)

4482 
	`GëShadeTønsCﬁ_Dôhî
(&
psxVuw
[(
i
<<10)+
j
],(
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

4484 
cR1
+=
difR
;

4485 
cG1
+=
difG
;

4486 
cB1
+=
difB
;

4489 if(
	`NextRow_G
()) ;

4492 
i
=
ymö
;i<=
ymax
;i++)

4494 
xmö
=(
À·_x
 >> 16);

4495 
xmax
=(
right_x
 >> 16)-1;if(
døwW
<xmax) xmax=drawW;

4497 if(
xmax
>=
xmö
)

4499 
cR1
=
À·_R
;

4500 
cG1
=
À·_G
;

4501 
cB1
=
À·_B
;

4503 if(
xmö
<
døwX
)

4504 {
j
=
døwX
-
xmö
;xmö=døwX;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

4506 
j
=
xmö
;j<=
xmax
;j++)

4508 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
i
<<10)+
j
],((
cR1
 >> 9)&0x7c00)|((
cG1
 >> 14)&0x03e0)|((
cB1
 >> 19)&0x001f));

4510 
cR1
+=
difR
;

4511 
cG1
+=
difG
;

4512 
cB1
+=
difB
;

4515 if(
	`NextRow_G
()) ;

4518 
	}
}

4522 
	$døwPﬁy3G
(
öt32_t
 
rgb1
, i¡32_à
rgb2
, i¡32_à
rgb3
)

4524 
	`døwPﬁy3Gi
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,
rgb1
,
rgb2
,
rgb3
);

4525 
	}
}

4529 
	$døwPﬁy4G
(
öt32_t
 
rgb1
, i¡32_à
rgb2
, i¡32_à
rgb3
, i¡32_à
rgb4
)

4531 
	`døwPﬁy3Gi
(
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,

4532 
rgb2
,
rgb4
,
rgb3
);

4533 
	`døwPﬁy3Gi
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,

4534 
rgb1
,
rgb2
,
rgb3
);

4535 
	}
}

4541 
	$døwPﬁy3TGEx4
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
˛X
, 
˛Y
,
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ3
)

4543 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

4544 
öt32_t
 
cR1
,
cG1
,
cB1
;

4545 
öt32_t
 
difR
,
difB
,
difG
,
difR2
,
difB2
,
difG2
;

4546 
öt32_t
 
difX
, 
difY
,
difX2
, 
difY2
;

4547 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
,
XAdju°
;

4548 
tC1
,
tC2
;

4550 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

4551 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

4552 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

4553 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

4554 if(
døwY
>=
døwH
) ;

4555 if(
døwX
>=
døwW
) ;

4557 if(!
	`SëupSe˘i⁄s_GT
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
cﬁ1
,
cﬁ2
,
cﬁ3
)) ;

4559 
ymax
=
Ymax
;

4561 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

4562 if(
	`NextRow_GT
()) ;

4564 
˛utP
=(
˛Y
<<10)+
˛X
;

4566 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

4568 
difR
=
dñè_right_R
;

4569 
difG
=
dñè_right_G
;

4570 
difB
=
dñè_right_B
;

4571 
difR2
=
difR
<<1;

4572 
difG2
=
difG
<<1;

4573 
difB2
=
difB
<<1;

4575 
difX
=
dñè_right_u
;
difX2
=difX<<1;

4576 
difY
=
dñè_right_v
;
difY2
=difY<<1;

4578 #ifde‡
FASTSOLID


4580 if(!
bCheckMask
 && !
DøwSemiTøns
 && !
iDôhî
)

4582 
i
=
ymö
;i<=
ymax
;i++)

4584 
xmö
=((
À·_x
) >> 16);

4585 
xmax
=((
right_x
) >> 16)-1;

4586 if(
døwW
<
xmax
) xmax=drawW;

4588 if(
xmax
>=
xmö
)

4590 
posX
=
À·_u
;

4591 
posY
=
À·_v
;

4592 
cR1
=
À·_R
;

4593 
cG1
=
À·_G
;

4594 
cB1
=
À·_B
;

4596 if(
xmö
<
døwX
)

4597 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

4599 
j
=
xmö
;j<
xmax
;j+=2)

4601 
XAdju°
=(
posX
>>16);

4602 
tC1
 = 
psxVub
[((
posY
>>5)&0xFFFFF800)+
YAdju°
+(
XAdju°
>>1)];

4603 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

4604 
XAdju°
=((
posX
+
difX
)>>16);

4605 
tC2
 = 
psxVub
[(((
posY
+
difY
)>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

4606 (
XAdju°
>>1)];

4607 
tC2
=—C2>>((
XAdju°
&1)<<2))&0xf;

4609 
	`GëTextuªTønsCﬁGX32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

4610 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

4611 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16,

4612 (
cB1
>>16)|((cB1+
difB
)&0xff0000),

4613 (
cG1
>>16)|((cG1+
difG
)&0xff0000),

4614 (
cR1
>>16)|((cR1+
difR
)&0xff0000));

4615 
posX
+=
difX2
;

4616 
posY
+=
difY2
;

4617 
cR1
+=
difR2
;

4618 
cG1
+=
difG2
;

4619 
cB1
+=
difB2
;

4621 if(
j
==
xmax
)

4623 
XAdju°
=(
posX
>>16);

4624 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
XAdju°
>>1)];

4625 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

4626 
	`GëTextuªTønsCﬁGX_S
(&
psxVuw
[(
i
<<10)+
j
],

4627 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

4628 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

4631 if(
	`NextRow_GT
())

4641 
i
=
ymö
;i<=
ymax
;i++)

4643 
xmö
=(
À·_x
 >> 16);

4644 
xmax
=(
right_x
 >> 16)-1;

4645 if(
døwW
<
xmax
) xmax=drawW;

4647 if(
xmax
>=
xmö
)

4649 
posX
=
À·_u
;

4650 
posY
=
À·_v
;

4651 
cR1
=
À·_R
;

4652 
cG1
=
À·_G
;

4653 
cB1
=
À·_B
;

4655 if(
xmö
<
døwX
)

4656 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

4658 
j
=
xmö
;j<=
xmax
;j++)

4660 
XAdju°
=(
posX
>>16);

4661 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
XAdju°
>>1)];

4662 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

4663 if(
iDôhî
)

4664 
	`GëTextuªTønsCﬁGX_Dôhî
(&
psxVuw
[(
i
<<10)+
j
],

4665 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

4666 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

4668 
	`GëTextuªTønsCﬁGX
(&
psxVuw
[(
i
<<10)+
j
],

4669 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

4670 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

4671 
posX
+=
difX
;

4672 
posY
+=
difY
;

4673 
cR1
+=
difR
;

4674 
cG1
+=
difG
;

4675 
cB1
+=
difB
;

4678 if(
	`NextRow_GT
())

4683 
	}
}

4687 
	$døwPﬁy3TGEx4_TW
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
˛X
, 
˛Y
,
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ3
)

4689 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

4690 
öt32_t
 
cR1
,
cG1
,
cB1
;

4691 
öt32_t
 
difR
,
difB
,
difG
,
difR2
,
difB2
,
difG2
;

4692 
öt32_t
 
difX
, 
difY
,
difX2
, 
difY2
;

4693 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
,
XAdju°
;

4694 
tC1
,
tC2
;

4696 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

4697 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

4698 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

4699 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

4700 if(
døwY
>=
døwH
) ;

4701 if(
døwX
>=
døwW
) ;

4703 if(!
	`SëupSe˘i⁄s_GT
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
cﬁ1
,
cﬁ2
,
cﬁ3
)) ;

4705 
ymax
=
Ymax
;

4707 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

4708 if(
	`NextRow_GT
()) ;

4710 
˛utP
=(
˛Y
<<10)+
˛X
;

4712 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

4713 
YAdju°
+=(
TWö
.
Posôi⁄
.
y0
<<11)+(TWö.Posôi⁄.
x0
>>1);

4715 
difR
=
dñè_right_R
;

4716 
difG
=
dñè_right_G
;

4717 
difB
=
dñè_right_B
;

4718 
difR2
=
difR
<<1;

4719 
difG2
=
difG
<<1;

4720 
difB2
=
difB
<<1;

4722 
difX
=
dñè_right_u
;
difX2
=difX<<1;

4723 
difY
=
dñè_right_v
;
difY2
=difY<<1;

4725 #ifde‡
FASTSOLID


4727 if(!
bCheckMask
 && !
DøwSemiTøns
 && !
iDôhî
)

4729 
i
=
ymö
;i<=
ymax
;i++)

4731 
xmö
=((
À·_x
) >> 16);

4732 
xmax
=((
right_x
) >> 16)-1;

4733 if(
døwW
<
xmax
) xmax=drawW;

4735 if(
xmax
>=
xmö
)

4737 
posX
=
À·_u
;

4738 
posY
=
À·_v
;

4739 
cR1
=
À·_R
;

4740 
cG1
=
À·_G
;

4741 
cB1
=
À·_B
;

4743 if(
xmö
<
døwX
)

4744 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

4746 
j
=
xmö
;j<
xmax
;j+=2)

4748 
XAdju°
=(
posX
>>16)&
TWö
.
xmask
;

4749 
tC1
 = 
psxVub
[(((
posY
>>16)&
TWö
.
ymask
)<<11)+

4750 
YAdju°
+(
XAdju°
>>1)];

4751 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

4752 
XAdju°
=((
posX
+
difX
)>>16)&
TWö
.
xmask
;

4753 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)&
TWö
.
ymask
)<<11)+

4754 
YAdju°
+(
XAdju°
>>1)];

4755 
tC2
=—C2>>((
XAdju°
&1)<<2))&0xf;

4756 
	`GëTextuªTønsCﬁGX32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

4757 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

4758 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16,

4759 (
cB1
>>16)|((cB1+
difB
)&0xff0000),

4760 (
cG1
>>16)|((cG1+
difG
)&0xff0000),

4761 (
cR1
>>16)|((cR1+
difR
)&0xff0000));

4762 
posX
+=
difX2
;

4763 
posY
+=
difY2
;

4764 
cR1
+=
difR2
;

4765 
cG1
+=
difG2
;

4766 
cB1
+=
difB2
;

4768 if(
j
==
xmax
)

4770 
XAdju°
=(
posX
>>16)&
TWö
.
xmask
;

4771 
tC1
 = 
psxVub
[(((
posY
>>16)&
TWö
.
ymask
)<<11)+

4772 
YAdju°
+(
XAdju°
>>1)];

4773 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

4774 
	`GëTextuªTønsCﬁGX_S
(&
psxVuw
[(
i
<<10)+
j
],

4775 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

4776 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

4779 if(
	`NextRow_GT
())

4789 
i
=
ymö
;i<=
ymax
;i++)

4791 
xmö
=(
À·_x
 >> 16);

4792 
xmax
=(
right_x
 >> 16)-1;

4793 if(
døwW
<
xmax
) xmax=drawW;

4795 if(
xmax
>=
xmö
)

4797 
posX
=
À·_u
;

4798 
posY
=
À·_v
;

4799 
cR1
=
À·_R
;

4800 
cG1
=
À·_G
;

4801 
cB1
=
À·_B
;

4803 if(
xmö
<
døwX
)

4804 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

4806 
j
=
xmö
;j<=
xmax
;j++)

4808 
XAdju°
=(
posX
>>16)&
TWö
.
xmask
;

4809 
tC1
 = 
psxVub
[(((
posY
>>16)&
TWö
.
ymask
)<<11)+

4810 
YAdju°
+(
XAdju°
>>1)];

4811 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

4812 if(
iDôhî
)

4813 
	`GëTextuªTønsCﬁGX_Dôhî
(&
psxVuw
[(
i
<<10)+
j
],

4814 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

4815 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

4817 
	`GëTextuªTønsCﬁGX
(&
psxVuw
[(
i
<<10)+
j
],

4818 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

4819 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

4820 
posX
+=
difX
;

4821 
posY
+=
difY
;

4822 
cR1
+=
difR
;

4823 
cG1
+=
difG
;

4824 
cB1
+=
difB
;

4827 if(
	`NextRow_GT
())

4832 
	}
}

4841 #ifde‡
POLYQUAD3GT


4843 
	$døwPﬁy4TGEx4_TRI
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
,

4844 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,

4845 
˛X
, 
˛Y
,

4846 
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ3
, i¡32_à
cﬁ4
)

4848 
	`døwPﬁy3TGEx4
(
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,

4849 
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
,

4850 
˛X
,
˛Y
,

4851 
cﬁ2
,
cﬁ4
,
cﬁ3
);

4852 
	`døwPﬁy3TGEx4
(
x1
,
y1
,
x2
,
y2
,
x4
,
y4
,

4853 
tx1
,
ty1
,
tx2
,
ty2
,
tx4
,
ty4
,

4854 
˛X
,
˛Y
,

4855 
cﬁ1
,
cﬁ2
,
cﬁ3
);

4856 
	}
}

4862 
	$døwPﬁy4TGEx4
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
,

4863 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,

4864 
˛X
, 
˛Y
,

4865 
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ4
, i¡32_à
cﬁ3
)

4867 
öt32_t
 
num
;

4868 
öt32_t
 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

4869 
öt32_t
 
cR1
,
cG1
,
cB1
;

4870 
öt32_t
 
difR
,
difB
,
difG
,
difR2
,
difB2
,
difG2
;

4871 
öt32_t
 
difX
, 
difY
, 
difX2
, 
difY2
;

4872 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
,
XAdju°
;

4873 
tC1
,
tC2
;

4875 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>døwW && 
x4
>drawW) ;

4876 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>døwH && 
y4
>drawH) ;

4877 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<døwX && 
x4
<drawX) ;

4878 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<døwY && 
y4
<drawY) ;

4879 if(
døwY
>=
døwH
) ;

4880 if(
døwX
>=
døwW
) ;

4882 if(!
	`SëupSe˘i⁄s_GT4
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
,
cﬁ1
,
cﬁ2
,
cﬁ3
,
cﬁ4
)) ;

4884 
ymax
=
Ymax
;

4886 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

4887 if(
	`NextRow_GT4
()) ;

4889 
˛utP
=(
˛Y
<<10)+
˛X
;

4891 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

4894 #ifde‡
FASTSOLID


4896 if(!
bCheckMask
 && !
DøwSemiTøns
 && !
iDôhî
)

4898 
i
=
ymö
;i<=
ymax
;i++)

4900 
xmö
=(
À·_x
 >> 16);

4901 
xmax
=(
right_x
 >> 16);

4903 if(
xmax
>=
xmö
)

4905 
posX
=
À·_u
;

4906 
posY
=
À·_v
;

4908 
num
=(
xmax
-
xmö
);

4909 if(
num
==0)Çum=1;

4910 
difX
=(
right_u
-
posX
)/
num
;

4911 
difY
=(
right_v
-
posY
)/
num
;

4912 
difX2
=
difX
<<1;

4913 
difY2
=
difY
<<1;

4915 
cR1
=
À·_R
;

4916 
cG1
=
À·_G
;

4917 
cB1
=
À·_B
;

4918 
difR
=(
right_R
-
cR1
)/
num
;

4919 
difG
=(
right_G
-
cG1
)/
num
;

4920 
difB
=(
right_B
-
cB1
)/
num
;

4921 
difR2
=
difR
<<1;

4922 
difG2
=
difG
<<1;

4923 
difB2
=
difB
<<1;

4925 if(
xmö
<
døwX
)

4926 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

4927 
xmax
--;if(
døwW
<xmax) xmax=drawW;

4929 
j
=
xmö
;j<
xmax
;j+=2)

4931 
XAdju°
=(
posX
>>16);

4932 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
XAdju°
>>1)];

4933 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

4934 
XAdju°
=((
posX
+
difX
)>>16);

4935 
tC2
 = 
psxVub
[(((
posY
+
difY
)>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

4936 (
XAdju°
>>1)];

4937 
tC2
=—C2>>((
XAdju°
&1)<<2))&0xf;

4939 
	`GëTextuªTønsCﬁGX32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

4940 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

4941 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16,

4942 (
cB1
>>16)|((cB1+
difB
)&0xff0000),

4943 (
cG1
>>16)|((cG1+
difG
)&0xff0000),

4944 (
cR1
>>16)|((cR1+
difR
)&0xff0000));

4945 
posX
+=
difX2
;

4946 
posY
+=
difY2
;

4947 
cR1
+=
difR2
;

4948 
cG1
+=
difG2
;

4949 
cB1
+=
difB2
;

4951 if(
j
==
xmax
)

4953 
XAdju°
=(
posX
>>16);

4954 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

4955 (
XAdju°
>>1)];

4956 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

4958 
	`GëTextuªTønsCﬁGX_S
(&
psxVuw
[(
i
<<10)+
j
],

4959 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

4960 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

4963 if(
	`NextRow_GT4
()) ;

4970 
i
=
ymö
;i<=
ymax
;i++)

4972 
xmö
=(
À·_x
 >> 16);

4973 
xmax
=(
right_x
 >> 16);

4975 if(
xmax
>=
xmö
)

4977 
posX
=
À·_u
;

4978 
posY
=
À·_v
;

4980 
num
=(
xmax
-
xmö
);

4981 if(
num
==0)Çum=1;

4982 
difX
=(
right_u
-
posX
)/
num
;

4983 
difY
=(
right_v
-
posY
)/
num
;

4984 
difX2
=
difX
<<1;

4985 
difY2
=
difY
<<1;

4987 
cR1
=
À·_R
;

4988 
cG1
=
À·_G
;

4989 
cB1
=
À·_B
;

4990 
difR
=(
right_R
-
cR1
)/
num
;

4991 
difG
=(
right_G
-
cG1
)/
num
;

4992 
difB
=(
right_B
-
cB1
)/
num
;

4993 
difR2
=
difR
<<1;

4994 
difG2
=
difG
<<1;

4995 
difB2
=
difB
<<1;

4997 if(
xmö
<
døwX
)

4998 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

4999 
xmax
--;if(
døwW
<xmax) xmax=drawW;

5001 
j
=
xmö
;j<=
xmax
;j++)

5003 
XAdju°
=(
posX
>>16);

5004 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

5005 (
XAdju°
>>1)];

5006 
tC1
=—C1>>((
XAdju°
&1)<<2))&0xf;

5007 if(
iDôhî
)

5008 
	`GëTextuªTønsCﬁGX_Dôhî
(&
psxVuw
[(
i
<<10)+
j
],

5009 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

5010 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5012 
	`GëTextuªTønsCﬁGX
(&
psxVuw
[(
i
<<10)+
j
],

5013 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

5014 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5015 
posX
+=
difX
;

5016 
posY
+=
difY
;

5017 
cR1
+=
difR
;

5018 
cG1
+=
difG
;

5019 
cB1
+=
difB
;

5022 if(
	`NextRow_GT4
()) ;

5024 
	}
}

5028 
	$døwPﬁy4TGEx4_TW
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
,

5029 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,

5030 
˛X
, 
˛Y
,

5031 
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ3
, i¡32_à
cﬁ4
)

5033 
	`døwPﬁy3TGEx4_TW
(
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,

5034 
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
,

5035 
˛X
,
˛Y
,

5036 
cﬁ2
,
cﬁ4
,
cﬁ3
);

5038 
	`døwPﬁy3TGEx4_TW
(
x1
,
y1
,
x2
,
y2
,
x4
,
y4
,

5039 
tx1
,
ty1
,
tx2
,
ty2
,
tx4
,
ty4
,

5040 
˛X
,
˛Y
,

5041 
cﬁ1
,
cﬁ2
,
cﬁ3
);

5042 
	}
}

5048 
	$døwPﬁy3TGEx8
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
˛X
, 
˛Y
,
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ3
)

5050 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

5051 
öt32_t
 
cR1
,
cG1
,
cB1
;

5052 
öt32_t
 
difR
,
difB
,
difG
,
difR2
,
difB2
,
difG2
;

5053 
öt32_t
 
difX
, 
difY
,
difX2
, 
difY2
;

5054 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
;

5055 
tC1
,
tC2
;

5057 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

5058 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

5059 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

5060 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

5061 if(
døwY
>=
døwH
) ;

5062 if(
døwX
>=
døwW
) ;

5064 if(!
	`SëupSe˘i⁄s_GT
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
cﬁ1
,
cﬁ2
,
cﬁ3
)) ;

5066 
ymax
=
Ymax
;

5068 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

5069 if(
	`NextRow_GT
()) ;

5071 
˛utP
=(
˛Y
<<10)+
˛X
;

5073 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

5075 
difR
=
dñè_right_R
;

5076 
difG
=
dñè_right_G
;

5077 
difB
=
dñè_right_B
;

5078 
difR2
=
difR
<<1;

5079 
difG2
=
difG
<<1;

5080 
difB2
=
difB
<<1;

5081 
difX
=
dñè_right_u
;
difX2
=difX<<1;

5082 
difY
=
dñè_right_v
;
difY2
=difY<<1;

5084 #ifde‡
FASTSOLID


5086 if(!
bCheckMask
 && !
DøwSemiTøns
 && !
iDôhî
)

5088 
i
=
ymö
;i<=
ymax
;i++)

5090 
xmö
=(
À·_x
 >> 16);

5091 
xmax
=(
right_x
 >> 16)-1;

5092 if(
døwW
<
xmax
) xmax=drawW;

5094 if(
xmax
>=
xmö
)

5096 
posX
=
À·_u
;

5097 
posY
=
À·_v
;

5098 
cR1
=
À·_R
;

5099 
cG1
=
À·_G
;

5100 
cB1
=
À·_B
;

5102 if(
xmö
<
døwX
)

5103 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

5105 
j
=
xmö
;j<
xmax
;j+=2)

5107 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+((
posX
>>16))];

5108 
tC2
 = 
psxVub
[(((
posY
+
difY
)>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

5109 (((
posX
+
difX
)>>16))];

5110 
	`GëTextuªTønsCﬁGX32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

5111 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

5112 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16,

5113 (
cB1
>>16)|((cB1+
difB
)&0xff0000),

5114 (
cG1
>>16)|((cG1+
difG
)&0xff0000),

5115 (
cR1
>>16)|((cR1+
difR
)&0xff0000));

5116 
posX
+=
difX2
;

5117 
posY
+=
difY2
;

5118 
cR1
+=
difR2
;

5119 
cG1
+=
difG2
;

5120 
cB1
+=
difB2
;

5122 if(
j
==
xmax
)

5124 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+((
posX
>>16))];

5125 
	`GëTextuªTønsCﬁGX_S
(&
psxVuw
[(
i
<<10)+
j
],

5126 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

5127 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5130 if(
	`NextRow_GT
())

5140 
i
=
ymö
;i<=
ymax
;i++)

5142 
xmö
=(
À·_x
 >> 16);

5143 
xmax
=(
right_x
 >> 16)-1;

5144 if(
døwW
<
xmax
) xmax=drawW;

5146 if(
xmax
>=
xmö
)

5148 
posX
=
À·_u
;

5149 
posY
=
À·_v
;

5150 
cR1
=
À·_R
;

5151 
cG1
=
À·_G
;

5152 
cB1
=
À·_B
;

5154 if(
xmö
<
døwX
)

5155 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

5157 
j
=
xmö
;j<=
xmax
;j++)

5159 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+((
posX
>>16))];

5160 if(
iDôhî
)

5161 
	`GëTextuªTønsCﬁGX_Dôhî
(&
psxVuw
[(
i
<<10)+
j
],

5162 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

5163 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5165 
	`GëTextuªTønsCﬁGX
(&
psxVuw
[(
i
<<10)+
j
],

5166 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

5167 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5168 
posX
+=
difX
;

5169 
posY
+=
difY
;

5170 
cR1
+=
difR
;

5171 
cG1
+=
difG
;

5172 
cB1
+=
difB
;

5175 if(
	`NextRow_GT
())

5180 
	}
}

5184 
	$døwPﬁy3TGEx8_TW
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
˛X
, 
˛Y
,
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ3
)

5186 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

5187 
öt32_t
 
cR1
,
cG1
,
cB1
;

5188 
öt32_t
 
difR
,
difB
,
difG
,
difR2
,
difB2
,
difG2
;

5189 
öt32_t
 
difX
, 
difY
,
difX2
, 
difY2
;

5190 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
;

5191 
tC1
,
tC2
;

5193 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

5194 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

5195 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

5196 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

5197 if(
døwY
>=
døwH
) ;

5198 if(
døwX
>=
døwW
) ;

5200 if(!
	`SëupSe˘i⁄s_GT
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
cﬁ1
,
cﬁ2
,
cﬁ3
)) ;

5202 
ymax
=
Ymax
;

5204 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

5205 if(
	`NextRow_GT
()) ;

5207 
˛utP
=(
˛Y
<<10)+
˛X
;

5209 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

5210 
YAdju°
+=(
TWö
.
Posôi⁄
.
y0
<<11)+(TWö.Posôi⁄.
x0
);

5212 
difR
=
dñè_right_R
;

5213 
difG
=
dñè_right_G
;

5214 
difB
=
dñè_right_B
;

5215 
difR2
=
difR
<<1;

5216 
difG2
=
difG
<<1;

5217 
difB2
=
difB
<<1;

5218 
difX
=
dñè_right_u
;
difX2
=difX<<1;

5219 
difY
=
dñè_right_v
;
difY2
=difY<<1;

5221 #ifde‡
FASTSOLID


5223 if(!
bCheckMask
 && !
DøwSemiTøns
 && !
iDôhî
)

5225 
i
=
ymö
;i<=
ymax
;i++)

5227 
xmö
=(
À·_x
 >> 16);

5228 
xmax
=(
right_x
 >> 16)-1;

5229 if(
døwW
<
xmax
) xmax=drawW;

5231 if(
xmax
>=
xmö
)

5233 
posX
=
À·_u
;

5234 
posY
=
À·_v
;

5235 
cR1
=
À·_R
;

5236 
cG1
=
À·_G
;

5237 
cB1
=
À·_B
;

5239 if(
xmö
<
døwX
)

5240 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

5242 
j
=
xmö
;j<
xmax
;j+=2)

5244 
tC1
 = 
psxVub
[(((
posY
>>16)&
TWö
.
ymask
)<<11)+

5245 
YAdju°
+((
posX
>>16)&
TWö
.
xmask
)];

5246 
tC2
 = 
psxVub
[((((
posY
+
difY
)>>16)&
TWö
.
ymask
)<<11)+

5247 
YAdju°
+(((
posX
+
difX
)>>16)&
TWö
.
xmask
)];

5249 
	`GëTextuªTønsCﬁGX32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

5250 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

5251 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16,

5252 (
cB1
>>16)|((cB1+
difB
)&0xff0000),

5253 (
cG1
>>16)|((cG1+
difG
)&0xff0000),

5254 (
cR1
>>16)|((cR1+
difR
)&0xff0000));

5255 
posX
+=
difX2
;

5256 
posY
+=
difY2
;

5257 
cR1
+=
difR2
;

5258 
cG1
+=
difG2
;

5259 
cB1
+=
difB2
;

5261 if(
j
==
xmax
)

5263 
tC1
 = 
psxVub
[(((
posY
>>16)&
TWö
.
ymask
)<<11)+

5264 
YAdju°
+((
posX
>>16)&
TWö
.
xmask
)];

5265 
	`GëTextuªTønsCﬁGX_S
(&
psxVuw
[(
i
<<10)+
j
],

5266 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

5267 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5270 if(
	`NextRow_GT
())

5280 
i
=
ymö
;i<=
ymax
;i++)

5282 
xmö
=(
À·_x
 >> 16);

5283 
xmax
=(
right_x
 >> 16)-1;

5284 if(
døwW
<
xmax
) xmax=drawW;

5286 if(
xmax
>=
xmö
)

5288 
posX
=
À·_u
;

5289 
posY
=
À·_v
;

5290 
cR1
=
À·_R
;

5291 
cG1
=
À·_G
;

5292 
cB1
=
À·_B
;

5294 if(
xmö
<
døwX
)

5295 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

5297 
j
=
xmö
;j<=
xmax
;j++)

5299 
tC1
 = 
psxVub
[(((
posY
>>16)&
TWö
.
ymask
)<<11)+

5300 
YAdju°
+((
posX
>>16)&
TWö
.
xmask
)];

5301 if(
iDôhî
)

5302 
	`GëTextuªTønsCﬁGX_Dôhî
(&
psxVuw
[(
i
<<10)+
j
],

5303 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

5304 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5306 
	`GëTextuªTønsCﬁGX
(&
psxVuw
[(
i
<<10)+
j
],

5307 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

5308 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5309 
posX
+=
difX
;

5310 
posY
+=
difY
;

5311 
cR1
+=
difR
;

5312 
cG1
+=
difG
;

5313 
cB1
+=
difB
;

5316 if(
	`NextRow_GT
())

5321 
	}
}

5327 #ifde‡
POLYQUAD3GT


5329 
	$døwPﬁy4TGEx8_TRI
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
,

5330 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,

5331 
˛X
, 
˛Y
,

5332 
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ3
, i¡32_à
cﬁ4
)

5334 
	`døwPﬁy3TGEx8
(
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,

5335 
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
,

5336 
˛X
,
˛Y
,

5337 
cﬁ2
,
cﬁ4
,
cﬁ3
);

5338 
	`døwPﬁy3TGEx8
(
x1
,
y1
,
x2
,
y2
,
x4
,
y4
,

5339 
tx1
,
ty1
,
tx2
,
ty2
,
tx4
,
ty4
,

5340 
˛X
,
˛Y
,

5341 
cﬁ1
,
cﬁ2
,
cﬁ3
);

5342 
	}
}

5346 
	$døwPﬁy4TGEx8
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
,

5347 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,

5348 
˛X
, 
˛Y
,

5349 
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ4
, i¡32_à
cﬁ3
)

5351 
öt32_t
 
num
;

5352 
öt32_t
 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

5353 
öt32_t
 
cR1
,
cG1
,
cB1
;

5354 
öt32_t
 
difR
,
difB
,
difG
,
difR2
,
difB2
,
difG2
;

5355 
öt32_t
 
difX
, 
difY
, 
difX2
, 
difY2
;

5356 
öt32_t
 
posX
,
posY
,
YAdju°
,
˛utP
;

5357 
tC1
,
tC2
;

5359 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>døwW && 
x4
>drawW) ;

5360 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>døwH && 
y4
>drawH) ;

5361 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<døwX && 
x4
<drawX) ;

5362 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<døwY && 
y4
<drawY) ;

5363 if(
døwY
>=
døwH
) ;

5364 if(
døwX
>=
døwW
) ;

5366 if(!
	`SëupSe˘i⁄s_GT4
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
,
cﬁ1
,
cﬁ2
,
cﬁ3
,
cﬁ4
)) ;

5368 
ymax
=
Ymax
;

5370 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

5371 if(
	`NextRow_GT4
()) ;

5373 
˛utP
=(
˛Y
<<10)+
˛X
;

5375 
YAdju°
=((
GlobÆTextAddrY
)<<11)+(
GlobÆTextAddrX
<<1);

5377 #ifde‡
FASTSOLID


5379 if(!
bCheckMask
 && !
DøwSemiTøns
 && !
iDôhî
)

5381 
i
=
ymö
;i<=
ymax
;i++)

5383 
xmö
=(
À·_x
 >> 16);

5384 
xmax
=(
right_x
 >> 16);

5386 if(
xmax
>=
xmö
)

5388 
posX
=
À·_u
;

5389 
posY
=
À·_v
;

5391 
num
=(
xmax
-
xmö
);

5392 if(
num
==0)Çum=1;

5393 
difX
=(
right_u
-
posX
)/
num
;

5394 
difY
=(
right_v
-
posY
)/
num
;

5395 
difX2
=
difX
<<1;

5396 
difY2
=
difY
<<1;

5398 
cR1
=
À·_R
;

5399 
cG1
=
À·_G
;

5400 
cB1
=
À·_B
;

5401 
difR
=(
right_R
-
cR1
)/
num
;

5402 
difG
=(
right_G
-
cG1
)/
num
;

5403 
difB
=(
right_B
-
cB1
)/
num
;

5404 
difR2
=
difR
<<1;

5405 
difG2
=
difG
<<1;

5406 
difB2
=
difB
<<1;

5408 if(
xmö
<
døwX
)

5409 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

5410 
xmax
--;if(
døwW
<xmax) xmax=drawW;

5412 
j
=
xmö
;j<
xmax
;j+=2)

5414 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
posX
>>16)];

5415 
tC2
 = 
psxVub
[(((
posY
+
difY
)>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+

5416 ((
posX
+
difX
)>>16)];

5418 
	`GëTextuªTønsCﬁGX32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

5419 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
])|

5420 ((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16,

5421 (
cB1
>>16)|((cB1+
difB
)&0xff0000),

5422 (
cG1
>>16)|((cG1+
difG
)&0xff0000),

5423 (
cR1
>>16)|((cR1+
difR
)&0xff0000));

5424 
posX
+=
difX2
;

5425 
posY
+=
difY2
;

5426 
cR1
+=
difR2
;

5427 
cG1
+=
difG2
;

5428 
cB1
+=
difB2
;

5430 if(
j
==
xmax
)

5432 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
posX
>>16)];

5433 
	`GëTextuªTønsCﬁGX_S
(&
psxVuw
[(
i
<<10)+
j
],

5434 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

5435 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5438 if(
	`NextRow_GT4
()) ;

5445 
i
=
ymö
;i<=
ymax
;i++)

5447 
xmö
=(
À·_x
 >> 16);

5448 
xmax
=(
right_x
 >> 16);

5450 if(
xmax
>=
xmö
)

5452 
posX
=
À·_u
;

5453 
posY
=
À·_v
;

5455 
num
=(
xmax
-
xmö
);

5456 if(
num
==0)Çum=1;

5457 
difX
=(
right_u
-
posX
)/
num
;

5458 
difY
=(
right_v
-
posY
)/
num
;

5459 
difX2
=
difX
<<1;

5460 
difY2
=
difY
<<1;

5462 
cR1
=
À·_R
;

5463 
cG1
=
À·_G
;

5464 
cB1
=
À·_B
;

5465 
difR
=(
right_R
-
cR1
)/
num
;

5466 
difG
=(
right_G
-
cG1
)/
num
;

5467 
difB
=(
right_B
-
cB1
)/
num
;

5468 
difR2
=
difR
<<1;

5469 
difG2
=
difG
<<1;

5470 
difB2
=
difB
<<1;

5472 if(
xmö
<
døwX
)

5473 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

5474 
xmax
--;if(
døwW
<xmax) xmax=drawW;

5476 
j
=
xmö
;j<=
xmax
;j++)

5478 
tC1
 = 
psxVub
[((
posY
>>5)&(
öt32_t
)0xFFFFF800)+
YAdju°
+(
posX
>>16)];

5479 if(
iDôhî
)

5480 
	`GëTextuªTønsCﬁGX_Dôhî
(&
psxVuw
[(
i
<<10)+
j
],

5481 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

5482 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5484 
	`GëTextuªTønsCﬁGX
(&
psxVuw
[(
i
<<10)+
j
],

5485 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC1
]),

5486 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5487 
posX
+=
difX
;

5488 
posY
+=
difY
;

5489 
cR1
+=
difR
;

5490 
cG1
+=
difG
;

5491 
cB1
+=
difB
;

5494 if(
	`NextRow_GT4
()) ;

5496 
	}
}

5500 
	$døwPﬁy4TGEx8_TW
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
,

5501 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
,

5502 
˛X
, 
˛Y
,

5503 
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ3
, i¡32_à
cﬁ4
)

5505 
	`døwPﬁy3TGEx8_TW
(
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,

5506 
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
,

5507 
˛X
,
˛Y
,

5508 
cﬁ2
,
cﬁ4
,
cﬁ3
);

5509 
	`døwPﬁy3TGEx8_TW
(
x1
,
y1
,
x2
,
y2
,
x4
,
y4
,

5510 
tx1
,
ty1
,
tx2
,
ty2
,
tx4
,
ty4
,

5511 
˛X
,
˛Y
,

5512 
cﬁ1
,
cﬁ2
,
cﬁ3
);

5513 
	}
}

5519 
	$døwPﬁy3TGD
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
,
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ3
)

5521 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

5522 
öt32_t
 
cR1
,
cG1
,
cB1
;

5523 
öt32_t
 
difR
,
difB
,
difG
,
difR2
,
difB2
,
difG2
;

5524 
öt32_t
 
difX
, 
difY
,
difX2
, 
difY2
;

5525 
öt32_t
 
posX
,
posY
;

5527 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

5528 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

5529 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

5530 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

5531 if(
døwY
>=
døwH
) ;

5532 if(
døwX
>=
døwW
) ;

5534 if(!
	`SëupSe˘i⁄s_GT
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
cﬁ1
,
cﬁ2
,
cﬁ3
)) ;

5536 
ymax
=
Ymax
;

5538 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

5539 if(
	`NextRow_GT
()) ;

5541 
difR
=
dñè_right_R
;

5542 
difG
=
dñè_right_G
;

5543 
difB
=
dñè_right_B
;

5544 
difR2
=
difR
<<1;

5545 
difG2
=
difG
<<1;

5546 
difB2
=
difB
<<1;

5547 
difX
=
dñè_right_u
;
difX2
=difX<<1;

5548 
difY
=
dñè_right_v
;
difY2
=difY<<1;

5550 #ifde‡
FASTSOLID


5552 if(!
bCheckMask
 && !
DøwSemiTøns
 && !
iDôhî
)

5554 
i
=
ymö
;i<=
ymax
;i++)

5556 
xmö
=(
À·_x
 >> 16);

5557 
xmax
=(
right_x
 >> 16)-1;

5558 if(
døwW
<
xmax
) xmax=drawW;

5560 if(
xmax
>=
xmö
)

5562 
posX
=
À·_u
;

5563 
posY
=
À·_v
;

5564 
cR1
=
À·_R
;

5565 
cG1
=
À·_G
;

5566 
cB1
=
À·_B
;

5568 if(
xmö
<
døwX
)

5569 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

5571 
j
=
xmö
;j<
xmax
;j+=2)

5573 
	`GëTextuªTønsCﬁGX32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

5574 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[((((
posY
+
difY
)>>16)+
GlobÆTextAddrY
)<<10)+((
posX
+
difX
)>>16)+
GlobÆTextAddrX
]))<<16)|

5575 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+((
posX
)>>16)+
GlobÆTextAddrX
]),

5576 (
cB1
>>16)|((cB1+
difB
)&0xff0000),

5577 (
cG1
>>16)|((cG1+
difG
)&0xff0000),

5578 (
cR1
>>16)|((cR1+
difR
)&0xff0000));

5579 
posX
+=
difX2
;

5580 
posY
+=
difY2
;

5581 
cR1
+=
difR2
;

5582 
cG1
+=
difG2
;

5583 
cB1
+=
difB2
;

5585 if(
j
==
xmax
)

5586 
	`GëTextuªTønsCﬁGX_S
(&
psxVuw
[(
i
<<10)+
j
],

5587 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+(
posX
>>16)+
GlobÆTextAddrX
]),

5588 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5590 if(
	`NextRow_GT
())

5600 
i
=
ymö
;i<=
ymax
;i++)

5602 
xmö
=(
À·_x
 >> 16);

5603 
xmax
=(
right_x
 >> 16)-1;

5604 if(
døwW
<
xmax
) xmax=drawW;

5606 if(
xmax
>=
xmö
)

5608 
posX
=
À·_u
;

5609 
posY
=
À·_v
;

5610 
cR1
=
À·_R
;

5611 
cG1
=
À·_G
;

5612 
cB1
=
À·_B
;

5614 if(
xmö
<
døwX
)

5615 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

5617 
j
=
xmö
;j<=
xmax
;j++)

5619 if(
iDôhî
)

5620 
	`GëTextuªTønsCﬁGX_Dôhî
(&
psxVuw
[(
i
<<10)+
j
],

5621 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+(
posX
>>16)+
GlobÆTextAddrX
]),

5622 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5624 
	`GëTextuªTønsCﬁGX
(&
psxVuw
[(
i
<<10)+
j
],

5625 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+(
posX
>>16)+
GlobÆTextAddrX
]),

5626 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5627 
posX
+=
difX
;

5628 
posY
+=
difY
;

5629 
cR1
+=
difR
;

5630 
cG1
+=
difG
;

5631 
cB1
+=
difB
;

5634 if(
	`NextRow_GT
())

5639 
	}
}

5643 
	$døwPﬁy3TGD_TW
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
,
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ3
)

5645 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

5646 
öt32_t
 
cR1
,
cG1
,
cB1
;

5647 
öt32_t
 
difR
,
difB
,
difG
,
difR2
,
difB2
,
difG2
;

5648 
öt32_t
 
difX
, 
difY
,
difX2
, 
difY2
;

5649 
öt32_t
 
posX
,
posY
;

5651 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>drawW) ;

5652 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>drawH) ;

5653 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<drawX) ;

5654 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<drawY) ;

5655 if(
døwY
>=
døwH
) ;

5656 if(
døwX
>=
døwW
) ;

5658 if(!
	`SëupSe˘i⁄s_GT
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
cﬁ1
,
cﬁ2
,
cﬁ3
)) ;

5660 
ymax
=
Ymax
;

5662 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

5663 if(
	`NextRow_GT
()) ;

5665 
difR
=
dñè_right_R
;

5666 
difG
=
dñè_right_G
;

5667 
difB
=
dñè_right_B
;

5668 
difR2
=
difR
<<1;

5669 
difG2
=
difG
<<1;

5670 
difB2
=
difB
<<1;

5671 
difX
=
dñè_right_u
;
difX2
=difX<<1;

5672 
difY
=
dñè_right_v
;
difY2
=difY<<1;

5674 #ifde‡
FASTSOLID


5676 if(!
bCheckMask
 && !
DøwSemiTøns
 && !
iDôhî
)

5678 
i
=
ymö
;i<=
ymax
;i++)

5680 
xmö
=(
À·_x
 >> 16);

5681 
xmax
=(
right_x
 >> 16)-1;

5682 if(
døwW
<
xmax
) xmax=drawW;

5684 if(
xmax
>=
xmö
)

5686 
posX
=
À·_u
;

5687 
posY
=
À·_v
;

5688 
cR1
=
À·_R
;

5689 
cG1
=
À·_G
;

5690 
cB1
=
À·_B
;

5692 if(
xmö
<
døwX
)

5693 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

5695 
j
=
xmö
;j<
xmax
;j+=2)

5697 
	`GëTextuªTønsCﬁGX32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

5698 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[(((((
posY
+
difY
)>>16)&
TWö
.
ymask
)+
GlobÆTextAddrY
+TWö.
Posôi⁄
.
y0
)<<10)+

5699 (((
posX
+
difX
)>>16)&
TWö
.
xmask
)+
GlobÆTextAddrX
+TWö.
Posôi⁄
.
x0
]))<<16)|

5700 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)&
TWö
.
ymask
)+
GlobÆTextAddrY
+TWö.
Posôi⁄
.
y0
)<<10)+

5701 (((
posX
)>>16)&
TWö
.
xmask
)+
GlobÆTextAddrX
+TWö.
Posôi⁄
.
x0
]),

5702 (
cB1
>>16)|((cB1+
difB
)&0xff0000),

5703 (
cG1
>>16)|((cG1+
difG
)&0xff0000),

5704 (
cR1
>>16)|((cR1+
difR
)&0xff0000));

5705 
posX
+=
difX2
;

5706 
posY
+=
difY2
;

5707 
cR1
+=
difR2
;

5708 
cG1
+=
difG2
;

5709 
cB1
+=
difB2
;

5711 if(
j
==
xmax
)

5712 
	`GëTextuªTønsCﬁGX_S
(&
psxVuw
[(
i
<<10)+
j
],

5713 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)&
TWö
.
ymask
)+
GlobÆTextAddrY
+TWö.
Posôi⁄
.
y0
)<<10)+

5714 ((
posX
>>16)&
TWö
.
xmask
)+
GlobÆTextAddrX
+TWö.
Posôi⁄
.
x0
]),

5715 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5717 if(
	`NextRow_GT
())

5727 
i
=
ymö
;i<=
ymax
;i++)

5729 
xmö
=(
À·_x
 >> 16);

5730 
xmax
=(
right_x
 >> 16)-1;

5731 if(
døwW
<
xmax
) xmax=drawW;

5733 if(
xmax
>=
xmö
)

5735 
posX
=
À·_u
;

5736 
posY
=
À·_v
;

5737 
cR1
=
À·_R
;

5738 
cG1
=
À·_G
;

5739 
cB1
=
À·_B
;

5741 if(
xmö
<
døwX
)

5742 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

5744 
j
=
xmö
;j<=
xmax
;j++)

5746 if(
iDôhî
)

5747 
	`GëTextuªTønsCﬁGX_Dôhî
(&
psxVuw
[(
i
<<10)+
j
],

5748 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)&
TWö
.
ymask
)+
GlobÆTextAddrY
+TWö.
Posôi⁄
.
y0
)<<10)+

5749 ((
posX
>>16)&
TWö
.
xmask
)+
GlobÆTextAddrX
+TWö.
Posôi⁄
.
x0
]),

5750 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5752 
	`GëTextuªTønsCﬁGX
(&
psxVuw
[(
i
<<10)+
j
],

5753 
	`GETLE16
(&
psxVuw
[((((
posY
>>16)&
TWö
.
ymask
)+
GlobÆTextAddrY
+TWö.
Posôi⁄
.
y0
)<<10)+

5754 ((
posX
>>16)&
TWö
.
xmask
)+
GlobÆTextAddrX
+TWö.
Posôi⁄
.
x0
]),

5755 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5756 
posX
+=
difX
;

5757 
posY
+=
difY
;

5758 
cR1
+=
difR
;

5759 
cG1
+=
difG
;

5760 
cB1
+=
difB
;

5763 if(
	`NextRow_GT
())

5768 
	}
}

5774 #ifde‡
POLYQUAD3GT


5776 
	$døwPﬁy4TGD_TRI
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
, 
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ3
, i¡32_à
cﬁ4
)

5778 
	`døwPﬁy3TGD
(
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,

5779 
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
,

5780 
cﬁ2
,
cﬁ4
,
cﬁ3
);

5781 
	`døwPﬁy3TGD
(
x1
,
y1
,
x2
,
y2
,
x4
,
y4
,

5782 
tx1
,
ty1
,
tx2
,
ty2
,
tx4
,
ty4
,

5783 
cﬁ1
,
cﬁ2
,
cﬁ3
);

5784 
	}
}

5788 
	$døwPﬁy4TGD
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
, 
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ4
, i¡32_à
cﬁ3
)

5790 
öt32_t
 
num
;

5791 
öt32_t
 
i
,
j
,
xmö
,
xmax
,
ymö
,
ymax
;

5792 
öt32_t
 
cR1
,
cG1
,
cB1
;

5793 
öt32_t
 
difR
,
difB
,
difG
,
difR2
,
difB2
,
difG2
;

5794 
öt32_t
 
difX
, 
difY
, 
difX2
, 
difY2
;

5795 
öt32_t
 
posX
,
posY
;

5797 if(
x1
>
døwW
 && 
x2
>døwW && 
x3
>døwW && 
x4
>drawW) ;

5798 if(
y1
>
døwH
 && 
y2
>døwH && 
y3
>døwH && 
y4
>drawH) ;

5799 if(
x1
<
døwX
 && 
x2
<døwX && 
x3
<døwX && 
x4
<drawX) ;

5800 if(
y1
<
døwY
 && 
y2
<døwY && 
y3
<døwY && 
y4
<drawY) ;

5801 if(
døwY
>=
døwH
) ;

5802 if(
døwX
>=
døwW
) ;

5804 if(!
	`SëupSe˘i⁄s_GT4
(
x1
,
y1
,
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
,
cﬁ1
,
cﬁ2
,
cﬁ3
,
cﬁ4
)) ;

5806 
ymax
=
Ymax
;

5808 
ymö
=
Ymö
;ymö<
døwY
;ymin++)

5809 if(
	`NextRow_GT4
()) ;

5811 #ifde‡
FASTSOLID


5813 if(!
bCheckMask
 && !
DøwSemiTøns
 && !
iDôhî
)

5815 
i
=
ymö
;i<=
ymax
;i++)

5817 
xmö
=(
À·_x
 >> 16);

5818 
xmax
=(
right_x
 >> 16);

5820 if(
xmax
>=
xmö
)

5822 
posX
=
À·_u
;

5823 
posY
=
À·_v
;

5825 
num
=(
xmax
-
xmö
);

5826 if(
num
==0)Çum=1;

5827 
difX
=(
right_u
-
posX
)/
num
;

5828 
difY
=(
right_v
-
posY
)/
num
;

5829 
difX2
=
difX
<<1;

5830 
difY2
=
difY
<<1;

5832 
cR1
=
À·_R
;

5833 
cG1
=
À·_G
;

5834 
cB1
=
À·_B
;

5835 
difR
=(
right_R
-
cR1
)/
num
;

5836 
difG
=(
right_G
-
cG1
)/
num
;

5837 
difB
=(
right_B
-
cB1
)/
num
;

5838 
difR2
=
difR
<<1;

5839 
difG2
=
difG
<<1;

5840 
difB2
=
difB
<<1;

5842 if(
xmö
<
døwX
)

5843 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

5844 
xmax
--;if(
døwW
<xmax) xmax=drawW;

5846 
j
=
xmö
;j<
xmax
;j+=2)

5848 
	`GëTextuªTønsCﬁGX32_S
((
uöt32_t
 *)&
psxVuw
[(
i
<<10)+
j
],

5849 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[((((
posY
+
difY
)>>16)+
GlobÆTextAddrY
)<<10)+((
posX
+
difX
)>>16)+
GlobÆTextAddrX
]))<<16)|

5850 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+((
posX
)>>16)+
GlobÆTextAddrX
]),

5851 (
cB1
>>16)|((cB1+
difB
)&0xff0000),

5852 (
cG1
>>16)|((cG1+
difG
)&0xff0000),

5853 (
cR1
>>16)|((cR1+
difR
)&0xff0000));

5854 
posX
+=
difX2
;

5855 
posY
+=
difY2
;

5856 
cR1
+=
difR2
;

5857 
cG1
+=
difG2
;

5858 
cB1
+=
difB2
;

5860 if(
j
==
xmax
)

5861 
	`GëTextuªTønsCﬁGX_S
(&
psxVuw
[(
i
<<10)+
j
],

5862 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+(
posX
>>16)+
GlobÆTextAddrX
]),

5863 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5865 if(
	`NextRow_GT4
()) ;

5872 
i
=
ymö
;i<=
ymax
;i++)

5874 
xmö
=(
À·_x
 >> 16);

5875 
xmax
=(
right_x
 >> 16);

5877 if(
xmax
>=
xmö
)

5879 
posX
=
À·_u
;

5880 
posY
=
À·_v
;

5882 
num
=(
xmax
-
xmö
);

5883 if(
num
==0)Çum=1;

5884 
difX
=(
right_u
-
posX
)/
num
;

5885 
difY
=(
right_v
-
posY
)/
num
;

5886 
difX2
=
difX
<<1;

5887 
difY2
=
difY
<<1;

5889 
cR1
=
À·_R
;

5890 
cG1
=
À·_G
;

5891 
cB1
=
À·_B
;

5892 
difR
=(
right_R
-
cR1
)/
num
;

5893 
difG
=(
right_G
-
cG1
)/
num
;

5894 
difB
=(
right_B
-
cB1
)/
num
;

5895 
difR2
=
difR
<<1;

5896 
difG2
=
difG
<<1;

5897 
difB2
=
difB
<<1;

5899 if(
xmö
<
døwX
)

5900 {
j
=
døwX
-
xmö
;xmö=døwX;
posX
+=j*
difX
;
posY
+=j*
difY
;
cR1
+=j*
difR
;
cG1
+=j*
difG
;
cB1
+=j*
difB
;}

5901 
xmax
--;if(
døwW
<xmax) xmax=drawW;

5903 
j
=
xmö
;j<=
xmax
;j++)

5905 if(
iDôhî
)

5906 
	`GëTextuªTønsCﬁGX
(&
psxVuw
[(
i
<<10)+
j
],

5907 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+(
posX
>>16)+
GlobÆTextAddrX
]),

5908 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5910 
	`GëTextuªTønsCﬁGX
(&
psxVuw
[(
i
<<10)+
j
],

5911 
	`GETLE16
(&
psxVuw
[(((
posY
>>16)+
GlobÆTextAddrY
)<<10)+(
posX
>>16)+
GlobÆTextAddrX
]),

5912 (
cB1
>>16),(
cG1
>>16),(
cR1
>>16));

5913 
posX
+=
difX
;

5914 
posY
+=
difY
;

5915 
cR1
+=
difR
;

5916 
cG1
+=
difG
;

5917 
cB1
+=
difB
;

5920 if(
	`NextRow_GT4
()) ;

5922 
	}
}

5926 
	$døwPﬁy4TGD_TW
(
x1
, 
y1
, 
x2
, 
y2
, 
x3
, 
y3
, 
x4
, 
y4
, 
tx1
, 
ty1
, 
tx2
, 
ty2
, 
tx3
, 
ty3
, 
tx4
, 
ty4
, 
öt32_t
 
cﬁ1
, i¡32_à
cﬁ2
, i¡32_à
cﬁ3
, i¡32_à
cﬁ4
)

5928 
	`døwPﬁy3TGD_TW
(
x2
,
y2
,
x3
,
y3
,
x4
,
y4
,

5929 
tx2
,
ty2
,
tx3
,
ty3
,
tx4
,
ty4
,

5930 
cﬁ2
,
cﬁ4
,
cﬁ3
);

5931 
	`døwPﬁy3TGD_TW
(
x1
,
y1
,
x2
,
y2
,
x4
,
y4
,

5932 
tx1
,
ty1
,
tx2
,
ty2
,
tx4
,
ty4
,

5933 
cﬁ1
,
cﬁ2
,
cﬁ3
);

5934 
	}
}

5956 
ölöe
 
BOOL
 
	$IsNoRe˘
()

5958 if(!(
dwA˘Fixes
&0x200)Ë 
FALSE
;

5960 if(
ly0
==
ly1
)

5962 if(
lx1
==
lx3
 && 
ly3
==
ly2
 && 
lx2
==
lx0
Ë 
FALSE
;

5963 if(
lx1
==
lx2
 && 
ly2
==
ly3
 && 
lx3
==
lx0
Ë 
FALSE
;

5964  
TRUE
;

5967 if(
ly0
==
ly2
)

5969 if(
lx2
==
lx3
 && 
ly3
==
ly1
 && 
lx1
==
lx0
Ë 
FALSE
;

5970 if(
lx2
==
lx1
 && 
ly1
==
ly3
 && 
lx3
==
lx0
Ë 
FALSE
;

5971  
TRUE
;

5974 if(
ly0
==
ly3
)

5976 if(
lx3
==
lx2
 && 
ly2
==
ly1
 && 
lx1
==
lx0
Ë 
FALSE
;

5977 if(
lx3
==
lx1
 && 
ly1
==
ly2
 && 
lx2
==
lx0
Ë 
FALSE
;

5978  
TRUE
;

5980  
TRUE
;

5981 
	}
}

5985 
	$døwPﬁy3FT
(* 
ba£Addr
)

5987 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

5989 if(!
bUsögTWö
 && !(
dwA˘Fixes
&0x100))

5991 
GlobÆTextTP
)

5994 
	`døwPﬁy3TEx4
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,

5995 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff),

5996 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511));

5999 
	`døwPﬁy3TEx8
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,

6000 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff),

6001 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511));

6004 
	`døwPﬁy3TD
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,(
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff));

6010 
GlobÆTextTP
)

6013 
	`døwPﬁy3TEx4_TW
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,

6014 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff),

6015 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511));

6018 
	`døwPﬁy3TEx8_TW
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,

6019 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff),

6020 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511));

6023 
	`døwPﬁy3TD_TW
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,(
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff));

6026 
	}
}

6030 
	$døwPﬁy4FT
(* 
ba£Addr
)

6032 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

6034 if(!
bUsögTWö
)

6036 #ifde‡
POLYQUAD3GT


6037 if(
	`IsNoRe˘
())

6039 
GlobÆTextTP
)

6042 
	`døwPﬁy4TEx4_TRI
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,

6043 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff), ((GETLE32(&gpuData[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511));

6046 
	`døwPﬁy4TEx8_TRI
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,

6047 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff), ((GETLE32(&gpuData[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511));

6050 
	`døwPﬁy4TD_TRI
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,(
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff));

6057 
GlobÆTextTP
)

6060 
	`døwPﬁy4TEx4
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,

6061 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff), ((GETLE32(&gpuData[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511));

6064 
	`døwPﬁy4TEx8
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,

6065 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff), ((GETLE32(&gpuData[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511));

6068 
	`døwPﬁy4TD
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,(
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff));

6074 
GlobÆTextTP
)

6077 
	`døwPﬁy4TEx4_TW
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,

6078 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff), ((GETLE32(&gpuData[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511));

6081 
	`døwPﬁy4TEx8_TW
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,

6082 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff), ((GETLE32(&gpuData[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511));

6085 
	`døwPﬁy4TD_TW
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,(
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[4]) & 0x000000ff), ((GETLE32(&gpuData[4])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),(GETLE32(&gpuData[6]) & 0x000000ff), ((GETLE32(&gpuData[6])>>8) & 0x000000ff));

6088 
	}
}

6092 
	$døwPﬁy3GT
(* 
ba£Addr
)

6094 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

6096 if(!
bUsögTWö
)

6098 
GlobÆTextTP
)

6101 
	`døwPﬁy3TGEx4
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,

6102 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),

6103 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511),

6104 
	`GETLE32
(&
gpuD©a
[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]));

6107 
	`døwPﬁy3TGEx8
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,

6108 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),

6109 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511),

6110 
	`GETLE32
(&
gpuD©a
[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]));

6113 
	`døwPﬁy3TGD
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,(
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),GETLE32(&gpuData[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]));

6119 
GlobÆTextTP
)

6122 
	`døwPﬁy3TGEx4_TW
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,

6123 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),

6124 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511),

6125 
	`GETLE32
(&
gpuD©a
[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]));

6128 
	`døwPﬁy3TGEx8_TW
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,

6129 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),

6130 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511),

6131 
	`GETLE32
(&
gpuD©a
[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]));

6134 
	`døwPﬁy3TGD_TW
(
lx0
,
ly0
,
lx1
,
ly1
,
lx2
,
ly2
,(
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),GETLE32(&gpuData[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]));

6137 
	}
}

6141 
	$døwPﬁy4GT
(*
ba£Addr
)

6143 
uöt32_t
 *
gpuD©a
 = ((uöt32_à*Ë
ba£Addr
);

6145 if(!
bUsögTWö
)

6147 #ifde‡
POLYQUAD3GT


6148 if(
	`IsNoRe˘
())

6150 
GlobÆTextTP
)

6153 
	`døwPﬁy4TGEx4_TRI
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,

6154 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[11]) & 0x000000ff), ((GETLE32(&gpuData[11])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),

6155 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0),((GETLE32(&gpuData[2])>>22) & 511),

6156 
	`GETLE32
(&
gpuD©a
[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]),GETLE32(&gpuData[9]));

6160 
	`døwPﬁy4TGEx8_TRI
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,

6161 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[11]) & 0x000000ff), ((GETLE32(&gpuData[11])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),

6162 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0),((GETLE32(&gpuData[2])>>22) & 511),

6163 
	`GETLE32
(&
gpuD©a
[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]),GETLE32(&gpuData[9]));

6166 
	`døwPﬁy4TGD_TRI
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,(
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff),((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[11]) & 0x000000ff), ((GETLE32(&gpuData[11])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),GETLE32(&gpuData[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]),GETLE32(&gpuData[9]));

6173 
GlobÆTextTP
)

6176 
	`døwPﬁy4TGEx4
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,

6177 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[11]) & 0x000000ff), ((GETLE32(&gpuData[11])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),

6178 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0),((GETLE32(&gpuData[2])>>22) & 511),

6179 
	`GETLE32
(&
gpuD©a
[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]),GETLE32(&gpuData[9]));

6183 
	`døwPﬁy4TGEx8
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,

6184 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[11]) & 0x000000ff), ((GETLE32(&gpuData[11])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),

6185 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0),((GETLE32(&gpuData[2])>>22) & 511),

6186 
	`GETLE32
(&
gpuD©a
[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]),GETLE32(&gpuData[9]));

6189 
	`døwPﬁy4TGD
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,(
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff),((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[11]) & 0x000000ff), ((GETLE32(&gpuData[11])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),GETLE32(&gpuData[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]),GETLE32(&gpuData[9]));

6195 
GlobÆTextTP
)

6198 
	`døwPﬁy4TGEx4_TW
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,

6199 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[11]) & 0x000000ff), ((GETLE32(&gpuData[11])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),

6200 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0),((GETLE32(&gpuData[2])>>22) & 511),

6201 
	`GETLE32
(&
gpuD©a
[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]),GETLE32(&gpuData[9]));

6204 
	`døwPﬁy4TGEx8_TW
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,

6205 (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff), ((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[11]) & 0x000000ff), ((GETLE32(&gpuData[11])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),

6206 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0),((GETLE32(&gpuData[2])>>22) & 511),

6207 
	`GETLE32
(&
gpuD©a
[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]),GETLE32(&gpuData[9]));

6210 
	`døwPﬁy4TGD_TW
(
lx0
,
ly0
,
lx1
,
ly1
,
lx3
,
ly3
,
lx2
,
ly2
,(
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff),((GETLE32(&gpuData[2])>>8) & 0x000000ff), (GETLE32(&gpuData[5]) & 0x000000ff), ((GETLE32(&gpuData[5])>>8) & 0x000000ff),(GETLE32(&gpuData[11]) & 0x000000ff), ((GETLE32(&gpuData[11])>>8) & 0x000000ff),(GETLE32(&gpuData[8]) & 0x000000ff), ((GETLE32(&gpuData[8])>>8) & 0x000000ff),GETLE32(&gpuData[0]),GETLE32(&gpuData[3]),GETLE32(&gpuData[6]),GETLE32(&gpuData[9]));

6213 
	}
}

6219 
	$DøwSo·w¨eS¥ôeTWö
(* 
ba£Addr
,
öt32_t
 
w
,öt32_à
h
)

6221 
uöt32_t
 *
gpuD©a
 = (uöt32_à*)
ba£Addr
;

6222 
sx0
,
sy0
,
sx1
,
sy1
,
sx2
,
sy2
,
sx3
,
sy3
;

6223 
tx0
,
ty0
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
;

6225 
sx0
=
lx0
;

6226 
sy0
=
ly0
;

6228 
sx0
=
sx3
=sx0+
PSXDi•œy
.
DøwOff£t
.
x
;

6229 
sx1
=
sx2
=
sx0
+
w
;

6230 
sy0
=
sy1
=sy0+
PSXDi•œy
.
DøwOff£t
.
y
;

6231 
sy2
=
sy3
=
sy0
+
h
;

6233 
tx0
=
tx3
=
	`GETLE32
(&
gpuD©a
[2])&0xff;

6234 
tx1
=
tx2
=
tx0
+
w
;

6235 
ty0
=
ty1
=(
	`GETLE32
(&
gpuD©a
[2])>>8)&0xff;

6236 
ty2
=
ty3
=
ty0
+
h
;

6238 
GlobÆTextTP
)

6241 
	`døwPﬁy4TEx4_TW_S
(
sx0
,
sy0
,
sx1
,
sy1
,
sx2
,
sy2
,
sx3
,
sy3
,

6242 
tx0
,
ty0
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,

6243 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511));

6246 
	`døwPﬁy4TEx8_TW_S
(
sx0
,
sy0
,
sx1
,
sy1
,
sx2
,
sy2
,
sx3
,
sy3
,

6247 
tx0
,
ty0
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
,

6248 ((
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0), ((GETLE32(&gpuData[2])>>22) & 511));

6251 
	`døwPﬁy4TD_TW_S
(
sx0
,
sy0
,
sx1
,
sy1
,
sx2
,
sy2
,
sx3
,
sy3
,

6252 
tx0
,
ty0
,
tx1
,
ty1
,
tx2
,
ty2
,
tx3
,
ty3
);

6255 
	}
}

6259 
	$DøwSo·w¨eS¥ôeMúr‹
(* 
ba£Addr
,
öt32_t
 
w
,öt32_à
h
)

6261 
öt32_t
 
•πY
,
•πX
,
•πW
,
•πH
,
lXDú
,
lYDú
;

6262 
öt32_t
 
˛utY0
,
˛utX0
,
˛utP
,
ãxtX0
,
ãxtY0
,
•πYa
,
•rCY
,
•rCX
,
•rA
;

6263 
tC
;

6264 
uöt32_t
 *
gpuD©a
 = (uöt32_à*)
ba£Addr
;

6265 
•πY
 = 
ly0
;

6266 
•πX
 = 
lx0
;

6267 
•πH
 = 
h
;

6268 
•πW
 = 
w
;

6269 
˛utY0
 = (
	`GETLE32
(&
gpuD©a
[2])>>22) & 511;

6270 
˛utX0
 = (
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0;

6271 
˛utP
 = (
˛utY0
<<11Ë+ (
˛utX0
<<1);

6272 
ãxtY0
 = ((
	`GETLE32
(&
gpuD©a
[2])>>8Ë& 0x000000ffË+ 
GlobÆTextAddrY
;

6273 
ãxtX0
 = (
	`GETLE32
(&
gpuD©a
[2]) & 0x000000ff);

6275 
•πX
+=
PSXDi•œy
.
DøwOff£t
.
x
;

6276 
•πY
+=
PSXDi•œy
.
DøwOff£t
.
y
;

6278 if(
•πX
>
døwW
)

6283 if(
•πY
>
døwH
)

6288 if(
•πY
<
døwY
)

6290 if((
•πY
+
•πH
)<
døwY
) ;

6291 
•πH
-=(
døwY
-
•πY
);

6292 
ãxtY0
+=(
døwY
-
•πY
);

6293 
•πY
=
døwY
;

6296 if(
•πX
<
døwX
)

6298 if((
•πX
+
•πW
)<
døwX
) ;

6299 
•πW
-=(
døwX
-
•πX
);

6300 
ãxtX0
+=(
døwX
-
•πX
);

6301 
•πX
=
døwX
;

6304 if((
•πY
+
•πH
)>
døwH
) sprtH=drawH-sprtY+1;

6305 if((
•πX
+
•πW
)>
døwW
) sprtW=drawW-sprtX+1;

6307 if(
usMúr‹
&0x1000Ë
lXDú
=-1; lXDir=1;

6308 if(
usMúr‹
&0x2000Ë
lYDú
=-1; lYDir=1;

6310 
GlobÆTextTP
)

6314 
•πW
=sprtW/2;

6315 
ãxtX0
=(
GlobÆTextAddrX
<<1)+(textX0>>1);

6316 
•πYa
=(
•πY
<<10);

6317 
˛utP
=(
˛utY0
<<10)+
˛utX0
;

6318 
•rCY
=0;•rCY<
•πH
;sprCY++)

6319 
•rCX
=0;•rCX<
•πW
;sprCX++)

6321 
tC

psxVub
[((
ãxtY0
+(
•rCY
*
lYDú
))<<11Ë+ 
ãxtX0
 +(
•rCX
*
lXDú
)];

6322 
•rA
=
•πYa
+(
•rCY
<<10)+
•πX
 + (
•rCX
<<1);

6323 
	`GëTextuªTønsCﬁG_SPR
(&
psxVuw
[
•rA
],
	`GETLE16
(&psxVuw[
˛utP
+((
tC
>>4)&0xf)]));

6324 
	`GëTextuªTønsCﬁG_SPR
(&
psxVuw
[
•rA
+1],
	`GETLE16
(&psxVuw[
˛utP
+(
tC
&0xf)]));

6330 
˛utP
>>=1;

6331 
•rCY
=0;•rCY<
•πH
;sprCY++)

6332 
•rCX
=0;•rCX<
•πW
;sprCX++)

6334 
tC
 = 
psxVub
[((
ãxtY0
+(
•rCY
*
lYDú
))<<11)+(
GlobÆTextAddrX
<<1Ë+ 
ãxtX0
 + (
•rCX
*
lXDú
)] & 0xff;

6335 
	`GëTextuªTønsCﬁG_SPR
(&
psxVuw
[((
•πY
+
•rCY
)<<10)+
•πX
 + 
•rCX
],psxVuw[
˛utP
+
tC
]);

6341 
•rCY
=0;•rCY<
•πH
;sprCY++)

6342 
•rCX
=0;•rCX<
•πW
;sprCX++)

6344 
	`GëTextuªTønsCﬁG_SPR
(&
psxVuw
[((
•πY
+
•rCY
)<<10)+
•πX
+
•rCX
],

6345 
	`GETLE16
(&
psxVuw
[((
ãxtY0
+(
•rCY
*
lYDú
))<<10)+
GlobÆTextAddrX
 + 
ãxtX0
 +(
•rCX
*
lXDú
)]));

6349 
	}
}

6353 
	$DøwSo·w¨eS¥ôe
(* 
ba£Addr
,
w
,
h
,
öt32_t
 
tx
,öt32_à
ty
)

6355 
öt32_t
 
•πY
,
•πX
,
•πW
,
•πH
;

6356 
öt32_t
 
˛utY0
,
˛utX0
,
˛utP
,
ãxtX0
,
ãxtY0
,
•πYa
,
•rCY
,
•rCX
,
•rA
;

6357 
tC
,
tC2
;

6358 
uöt32_t
 *
gpuD©a
 = (uöt32_à*)
ba£Addr
;

6359 * 
pV
;

6360 
BOOL
 
bWT
,
bWS
;

6362 
•πY
 = 
ly0
;

6363 
•πX
 = 
lx0
;

6364 
•πH
 = 
h
;

6365 
•πW
 = 
w
;

6366 
˛utY0
 = (
	`GETLE32
(&
gpuD©a
[2])>>22) & 511;

6367 
˛utX0
 = (
	`GETLE32
(&
gpuD©a
[2])>>12) & 0x3f0;

6369 
˛utP
 = (
˛utY0
<<11Ë+ (
˛utX0
<<1);

6371 
ãxtY0
 =
ty
+ 
GlobÆTextAddrY
;

6372 
ãxtX0
 =
tx
;

6374 
•πX
+=
PSXDi•œy
.
DøwOff£t
.
x
;

6375 
•πY
+=
PSXDi•œy
.
DøwOff£t
.
y
;

6377 if(
•πX
>
døwW
)

6382 if(
•πY
>
døwH
)

6387 if(
•πY
<
døwY
)

6389 if((
•πY
+
•πH
)<
døwY
) ;

6390 
•πH
-=(
døwY
-
•πY
);

6391 
ãxtY0
+=(
døwY
-
•πY
);

6392 
•πY
=
døwY
;

6395 if(
•πX
<
døwX
)

6397 if((
•πX
+
•πW
)<
døwX
) ;

6399 
•πW
-=(
døwX
-
•πX
);

6400 
ãxtX0
+=(
døwX
-
•πX
);

6401 
•πX
=
døwX
;

6404 if((
•πY
+
•πH
)>
døwH
) sprtH=drawH-sprtY+1;

6405 if((
•πX
+
•πW
)>
døwW
) sprtW=drawW-sprtX+1;

6408 
bWT
=
FALSE
;

6409 
bWS
=
FALSE
;

6411 
GlobÆTextTP
)

6415 if(
ãxtX0
&1Ë{
bWS
=
TRUE
;
•πW
--;}

6416 if(
•πW
&1Ë
bWT
=
TRUE
;

6418 
•πW
=sprtW>>1;

6419 
ãxtX0
=(
GlobÆTextAddrX
<<1)+—extX0>>1)+(
ãxtY0
<<11);

6420 
•πYa
=(
•πY
<<10)+
•πX
;

6421 
˛utP
=(
˛utY0
<<10)+
˛utX0
;

6423 #ifde‡
FASTSOLID


6425 if(!
bCheckMask
 && !
DøwSemiTøns
)

6427 
•rCY
=0;•rCY<
•πH
;sprCY++)

6429 
•rA
=
•πYa
+(
•rCY
<<10);

6430 
pV
=&
psxVub
[(
•rCY
<<11)+
ãxtX0
];

6432 if(
bWS
)

6434 
tC
=*
pV
++;

6435 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[
•rA
++],
	`GETLE16
(&psxVuw[
˛utP
+((
tC
>>4)&0xf)]));

6438 
•rCX
=0;•rCX<
•πW
;•rCX++,
•rA
+=2)

6440 
tC
=*
pV
++;

6442 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[
•rA
],

6443 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+((
tC
>>4)&0xf)]))<<16)|

6444 
	`GETLE16
(&
psxVuw
[
˛utP
+(
tC
&0x0f)]));

6447 if(
bWT
)

6449 
tC
=*
pV
;

6450 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[
•rA
],
	`GETLE16
(&psxVuw[
˛utP
+(
tC
&0x0f)]));

6458 
•rCY
=0;•rCY<
•πH
;sprCY++)

6460 
•rA
=
•πYa
+(
•rCY
<<10);

6461 
pV
=&
psxVub
[(
•rCY
<<11)+
ãxtX0
];

6463 if(
bWS
)

6465 
tC
=*
pV
++;

6466 
	`GëTextuªTønsCﬁG_SPR
(&
psxVuw
[
•rA
++],
	`GETLE16
(&psxVuw[
˛utP
+((
tC
>>4)&0xf)]));

6469 
•rCX
=0;•rCX<
•πW
;•rCX++,
•rA
+=2)

6471 
tC
=*
pV
++;

6473 
	`GëTextuªTønsCﬁG32_SPR
((
uöt32_t
 *)&
psxVuw
[
•rA
],

6474 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+((
tC
>>4)&0xf)])<<16))|

6475 
	`GETLE16
(&
psxVuw
[
˛utP
+(
tC
&0x0f)]));

6478 if(
bWT
)

6480 
tC
=*
pV
;

6481 
	`GëTextuªTønsCﬁG_SPR
(&
psxVuw
[
•rA
],
	`GETLE16
(&psxVuw[
˛utP
+(
tC
&0x0f)]));

6487 
˛utP
>>=1;
•πW
--;

6488 
ãxtX0
+=(
GlobÆTextAddrX
<<1Ë+ (
ãxtY0
<<11);

6490 #ifde‡
FASTSOLID


6492 if(!
bCheckMask
 && !
DøwSemiTøns
)

6494 
•rCY
=0;•rCY<
•πH
;sprCY++)

6496 
•rA
=((
•πY
+
•rCY
)<<10)+
•πX
;

6497 
pV
=&
psxVub
[(
•rCY
<<11)+
ãxtX0
];

6498 
•rCX
=0;•rCX<
•πW
;•rCX+=2,
•rA
+=2)

6500 
tC
 = *
pV
++;
tC2
 = *pV++;

6501 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[
•rA
],

6502 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16)|

6503 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC
]));

6505 if(
•rCX
==
•πW
)

6506 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[
•rA
],
	`GETLE16
(&psxVuw[
˛utP
+(*
pV
)]));

6513 
•rCY
=0;•rCY<
•πH
;sprCY++)

6515 
•rA
=((
•πY
+
•rCY
)<<10)+
•πX
;

6516 
pV
=&
psxVub
[(
•rCY
<<11)+
ãxtX0
];

6517 
•rCX
=0;•rCX<
•πW
;•rCX+=2,
•rA
+=2)

6519 
tC
 = *
pV
++;
tC2
 = *pV++;

6520 
	`GëTextuªTønsCﬁG32_SPR
((
uöt32_t
 *)&
psxVuw
[
•rA
],

6521 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[
˛utP
+
tC2
]))<<16)|

6522 
	`GETLE16
(&
psxVuw
[
˛utP
+
tC
]));

6524 if(
•rCX
==
•πW
)

6525 
	`GëTextuªTønsCﬁG_SPR
(&
psxVuw
[
•rA
],
	`GETLE16
(&psxVuw[
˛utP
+(*
pV
)]));

6531 
ãxtX0
+=(
GlobÆTextAddrX
Ë+ (
ãxtY0
<<10);

6532 
•πW
--;

6534 #ifde‡
FASTSOLID


6536 if(!
bCheckMask
 && !
DøwSemiTøns
)

6538 
•rCY
=0;•rCY<
•πH
;sprCY++)

6540 
•rA
=((
•πY
+
•rCY
)<<10)+
•πX
;

6542 
•rCX
=0;•rCX<
•πW
;•rCX+=2,
•rA
+=2)

6544 
	`GëTextuªTønsCﬁG32_S
((
uöt32_t
 *)&
psxVuw
[
•rA
],

6545 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[(
•rCY
<<10Ë+ 
ãxtX0
 + 
•rCX
 +1]))<<16)|

6546 
	`GETLE16
(&
psxVuw
[(
•rCY
<<10Ë+ 
ãxtX0
 + 
•rCX
]));

6548 if(
•rCX
==
•πW
)

6549 
	`GëTextuªTønsCﬁG_S
(&
psxVuw
[
•rA
],

6550 
	`GETLE16
(&
psxVuw
[(
•rCY
<<10Ë+ 
ãxtX0
 + 
•rCX
]));

6558 
•rCY
=0;•rCY<
•πH
;sprCY++)

6560 
•rA
=((
•πY
+
•rCY
)<<10)+
•πX
;

6562 
•rCX
=0;•rCX<
•πW
;•rCX+=2,
•rA
+=2)

6564 
	`GëTextuªTønsCﬁG32_SPR
((
uöt32_t
 *)&
psxVuw
[
•rA
],

6565 (((
öt32_t
)
	`GETLE16
(&
psxVuw
[(
•rCY
<<10Ë+ 
ãxtX0
 + 
•rCX
 +1]))<<16)|

6566 
	`GETLE16
(&
psxVuw
[(
•rCY
<<10Ë+ 
ãxtX0
 + 
•rCX
]));

6568 if(
•rCX
==
•πW
)

6569 
	`GëTextuªTønsCﬁG_SPR
(&
psxVuw
[
•rA
],

6570 
	`GETLE16
(&
psxVuw
[(
•rCY
<<10Ë+ 
ãxtX0
 + 
•rCX
]));

6575 
	}
}

6590 
	$Löe_E_SE_Shade
(
x0
, 
y0
, 
x1
, 
y1
, 
uöt32_t
 
rgb0
, uöt32_à
rgb1
)

6592 
dx
, 
dy
, 
ö¸E
, 
ö¸SE
, 
d
;

6593 
uöt32_t
 
r0
, 
g0
, 
b0
, 
r1
, 
g1
, 
b1
;

6594 
öt32_t
 
dr
, 
dg
, 
db
;

6596 
r0
 = (
rgb0
 & 0x00ff0000);

6597 
g0
 = (
rgb0
 & 0x0000ff00) << 8;

6598 
b0
 = (
rgb0
 & 0x000000ff) << 16;

6599 
r1
 = (
rgb1
 & 0x00ff0000);

6600 
g1
 = (
rgb1
 & 0x0000ff00) << 8;

6601 
b1
 = (
rgb1
 & 0x000000ff) << 16;

6603 
dx
 = 
x1
 - 
x0
;

6604 
dy
 = 
y1
 - 
y0
;

6606 i‡(
dx
 > 0)

6608 
dr
 = ((
öt32_t
)
r1
 - (öt32_t)
r0
Ë/ 
dx
;

6609 
dg
 = ((
öt32_t
)
g1
 - (öt32_t)
g0
Ë/ 
dx
;

6610 
db
 = ((
öt32_t
)
b1
 - (öt32_t)
b0
Ë/ 
dx
;

6614 
dr
 = ((
öt32_t
)
r1
 - (öt32_t)
r0
);

6615 
dg
 = ((
öt32_t
)
g1
 - (öt32_t)
g0
);

6616 
db
 = ((
öt32_t
)
b1
 - (öt32_t)
b0
);

6619 
d
 = 2*
dy
 - 
dx
;

6620 
ö¸E
 = 2*
dy
;

6621 
ö¸SE
 = 2*(
dy
 - 
dx
);

6623 i‡((
x0
>=
døwX
)&&(x0<
døwW
)&&(
y0
>=
døwY
)&&(y0<
døwH
))

6624 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y0
<<10)+
x0
],()(((
r0
 >> 9)&0x7c00)|((
g0
 >> 14)&0x03e0)|((
b0
 >> 19)&0x001f)));

6625 
x0
 < 
x1
)

6627 i‡(
d
 <= 0)

6629 
d
 = d + 
ö¸E
;

6633 
d
 = d + 
ö¸SE
;

6634 
y0
++;

6636 
x0
++;

6638 
r0
+=
dr
;

6639 
g0
+=
dg
;

6640 
b0
+=
db
;

6642 i‡((
x0
>=
døwX
)&&(x0<
døwW
)&&(
y0
>=
døwY
)&&(y0<
døwH
))

6643 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y0
<<10)+
x0
],()(((
r0
 >> 9)&0x7c00)|((
g0
 >> 14)&0x03e0)|((
b0
 >> 19)&0x001f)));

6645 
	}
}

6649 
	$Löe_S_SE_Shade
(
x0
, 
y0
, 
x1
, 
y1
, 
uöt32_t
 
rgb0
, uöt32_à
rgb1
)

6651 
dx
, 
dy
, 
ö¸S
, 
ö¸SE
, 
d
;

6652 
uöt32_t
 
r0
, 
g0
, 
b0
, 
r1
, 
g1
, 
b1
;

6653 
öt32_t
 
dr
, 
dg
, 
db
;

6655 
r0
 = (
rgb0
 & 0x00ff0000);

6656 
g0
 = (
rgb0
 & 0x0000ff00) << 8;

6657 
b0
 = (
rgb0
 & 0x000000ff) << 16;

6658 
r1
 = (
rgb1
 & 0x00ff0000);

6659 
g1
 = (
rgb1
 & 0x0000ff00) << 8;

6660 
b1
 = (
rgb1
 & 0x000000ff) << 16;

6662 
dx
 = 
x1
 - 
x0
;

6663 
dy
 = 
y1
 - 
y0
;

6665 i‡(
dy
 > 0)

6667 
dr
 = ((
öt32_t
)
r1
 - (öt32_t)
r0
Ë/ 
dy
;

6668 
dg
 = ((
öt32_t
)
g1
 - (öt32_t)
g0
Ë/ 
dy
;

6669 
db
 = ((
öt32_t
)
b1
 - (öt32_t)
b0
Ë/ 
dy
;

6673 
dr
 = ((
öt32_t
)
r1
 - (öt32_t)
r0
);

6674 
dg
 = ((
öt32_t
)
g1
 - (öt32_t)
g0
);

6675 
db
 = ((
öt32_t
)
b1
 - (öt32_t)
b0
);

6678 
d
 = 2*
dx
 - 
dy
;

6679 
ö¸S
 = 2*
dx
;

6680 
ö¸SE
 = 2*(
dx
 - 
dy
);

6682 i‡((
x0
>=
døwX
)&&(x0<
døwW
)&&(
y0
>=
døwY
)&&(y0<
døwH
))

6683 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y0
<<10)+
x0
],()(((
r0
 >> 9)&0x7c00)|((
g0
 >> 14)&0x03e0)|((
b0
 >> 19)&0x001f)));

6684 
y0
 < 
y1
)

6686 i‡(
d
 <= 0)

6688 
d
 = d + 
ö¸S
;

6692 
d
 = d + 
ö¸SE
;

6693 
x0
++;

6695 
y0
++;

6697 
r0
+=
dr
;

6698 
g0
+=
dg
;

6699 
b0
+=
db
;

6701 i‡((
x0
>=
døwX
)&&(x0<
døwW
)&&(
y0
>=
døwY
)&&(y0<
døwH
))

6702 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y0
<<10)+
x0
],()(((
r0
 >> 9)&0x7c00)|((
g0
 >> 14)&0x03e0)|((
b0
 >> 19)&0x001f)));

6704 
	}
}

6708 
	$Löe_N_NE_Shade
(
x0
, 
y0
, 
x1
, 
y1
, 
uöt32_t
 
rgb0
, uöt32_à
rgb1
)

6710 
dx
, 
dy
, 
ö¸N
, 
ö¸NE
, 
d
;

6711 
uöt32_t
 
r0
, 
g0
, 
b0
, 
r1
, 
g1
, 
b1
;

6712 
öt32_t
 
dr
, 
dg
, 
db
;

6714 
r0
 = (
rgb0
 & 0x00ff0000);

6715 
g0
 = (
rgb0
 & 0x0000ff00) << 8;

6716 
b0
 = (
rgb0
 & 0x000000ff) << 16;

6717 
r1
 = (
rgb1
 & 0x00ff0000);

6718 
g1
 = (
rgb1
 & 0x0000ff00) << 8;

6719 
b1
 = (
rgb1
 & 0x000000ff) << 16;

6721 
dx
 = 
x1
 - 
x0
;

6722 
dy
 = -(
y1
 - 
y0
);

6724 i‡(
dy
 > 0)

6726 
dr
 = ((
öt32_t
)
r1
 - (öt32_t)
r0
Ë/ 
dy
;

6727 
dg
 = ((
öt32_t
)
g1
 - (öt32_t)
g0
Ë/ 
dy
;

6728 
db
 = ((
öt32_t
)
b1
 - (öt32_t)
b0
Ë/ 
dy
;

6732 
dr
 = ((
öt32_t
)
r1
 - (öt32_t)
r0
);

6733 
dg
 = ((
öt32_t
)
g1
 - (öt32_t)
g0
);

6734 
db
 = ((
öt32_t
)
b1
 - (öt32_t)
b0
);

6737 
d
 = 2*
dx
 - 
dy
;

6738 
ö¸N
 = 2*
dx
;

6739 
ö¸NE
 = 2*(
dx
 - 
dy
);

6741 i‡((
x0
>=
døwX
)&&(x0<
døwW
)&&(
y0
>=
døwY
)&&(y0<
døwH
))

6742 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y0
<<10)+
x0
],()(((
r0
 >> 9)&0x7c00)|((
g0
 >> 14)&0x03e0)|((
b0
 >> 19)&0x001f)));

6743 
y0
 > 
y1
)

6745 i‡(
d
 <= 0)

6747 
d
 = d + 
ö¸N
;

6751 
d
 = d + 
ö¸NE
;

6752 
x0
++;

6754 
y0
--;

6756 
r0
+=
dr
;

6757 
g0
+=
dg
;

6758 
b0
+=
db
;

6760 i‡((
x0
>=
døwX
)&&(x0<
døwW
)&&(
y0
>=
døwY
)&&(y0<
døwH
))

6761 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y0
<<10)+
x0
],()(((
r0
 >> 9)&0x7c00)|((
g0
 >> 14)&0x03e0)|((
b0
 >> 19)&0x001f)));

6763 
	}
}

6767 
	$Löe_E_NE_Shade
(
x0
, 
y0
, 
x1
, 
y1
, 
uöt32_t
 
rgb0
, uöt32_à
rgb1
)

6769 
dx
, 
dy
, 
ö¸E
, 
ö¸NE
, 
d
;

6770 
uöt32_t
 
r0
, 
g0
, 
b0
, 
r1
, 
g1
, 
b1
;

6771 
öt32_t
 
dr
, 
dg
, 
db
;

6773 
r0
 = (
rgb0
 & 0x00ff0000);

6774 
g0
 = (
rgb0
 & 0x0000ff00) << 8;

6775 
b0
 = (
rgb0
 & 0x000000ff) << 16;

6776 
r1
 = (
rgb1
 & 0x00ff0000);

6777 
g1
 = (
rgb1
 & 0x0000ff00) << 8;

6778 
b1
 = (
rgb1
 & 0x000000ff) << 16;

6780 
dx
 = 
x1
 - 
x0
;

6781 
dy
 = -(
y1
 - 
y0
);

6783 i‡(
dx
 > 0)

6785 
dr
 = ((
öt32_t
)
r1
 - (öt32_t)
r0
Ë/ 
dx
;

6786 
dg
 = ((
öt32_t
)
g1
 - (öt32_t)
g0
Ë/ 
dx
;

6787 
db
 = ((
öt32_t
)
b1
 - (öt32_t)
b0
Ë/ 
dx
;

6791 
dr
 = ((
öt32_t
)
r1
 - (öt32_t)
r0
);

6792 
dg
 = ((
öt32_t
)
g1
 - (öt32_t)
g0
);

6793 
db
 = ((
öt32_t
)
b1
 - (öt32_t)
b0
);

6796 
d
 = 2*
dy
 - 
dx
;

6797 
ö¸E
 = 2*
dy
;

6798 
ö¸NE
 = 2*(
dy
 - 
dx
);

6800 i‡((
x0
>=
døwX
)&&(x0<
døwW
)&&(
y0
>=
døwY
)&&(y0<
døwH
))

6801 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y0
<<10)+
x0
],()(((
r0
 >> 9)&0x7c00)|((
g0
 >> 14)&0x03e0)|((
b0
 >> 19)&0x001f)));

6802 
x0
 < 
x1
)

6804 i‡(
d
 <= 0)

6806 
d
 = d + 
ö¸E
;

6810 
d
 = d + 
ö¸NE
;

6811 
y0
--;

6813 
x0
++;

6815 
r0
+=
dr
;

6816 
g0
+=
dg
;

6817 
b0
+=
db
;

6819 i‡((
x0
>=
døwX
)&&(x0<
døwW
)&&(
y0
>=
døwY
)&&(y0<
døwH
))

6820 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y0
<<10)+
x0
],()(((
r0
 >> 9)&0x7c00)|((
g0
 >> 14)&0x03e0)|((
b0
 >> 19)&0x001f)));

6822 
	}
}

6826 
	$VîtLöeShade
(
x
, 
y0
, 
y1
, 
uöt32_t
 
rgb0
, uöt32_à
rgb1
)

6828 
y
, 
dy
;

6829 
uöt32_t
 
r0
, 
g0
, 
b0
, 
r1
, 
g1
, 
b1
;

6830 
öt32_t
 
dr
, 
dg
, 
db
;

6832 
r0
 = (
rgb0
 & 0x00ff0000);

6833 
g0
 = (
rgb0
 & 0x0000ff00) << 8;

6834 
b0
 = (
rgb0
 & 0x000000ff) << 16;

6835 
r1
 = (
rgb1
 & 0x00ff0000);

6836 
g1
 = (
rgb1
 & 0x0000ff00) << 8;

6837 
b1
 = (
rgb1
 & 0x000000ff) << 16;

6839 
dy
 = (
y1
 - 
y0
);

6841 i‡(
dy
 > 0)

6843 
dr
 = ((
öt32_t
)
r1
 - (öt32_t)
r0
Ë/ 
dy
;

6844 
dg
 = ((
öt32_t
)
g1
 - (öt32_t)
g0
Ë/ 
dy
;

6845 
db
 = ((
öt32_t
)
b1
 - (öt32_t)
b0
Ë/ 
dy
;

6849 
dr
 = ((
öt32_t
)
r1
 - (öt32_t)
r0
);

6850 
dg
 = ((
öt32_t
)
g1
 - (öt32_t)
g0
);

6851 
db
 = ((
öt32_t
)
b1
 - (öt32_t)
b0
);

6854 i‡(
y0
 < 
døwY
)

6856 
r0
+=
dr
*(
døwY
 - 
y0
);

6857 
g0
+=
dg
*(
døwY
 - 
y0
);

6858 
b0
+=
db
*(
døwY
 - 
y0
);

6859 
y0
 = 
døwY
;

6862 i‡(
y1
 > 
døwH
)

6863 
y1
 = 
døwH
;

6865 
y
 = 
y0
; y <
y1
; y++)

6867 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y
<<10)+
x
],()(((
r0
 >> 9)&0x7c00)|((
g0
 >> 14)&0x03e0)|((
b0
 >> 19)&0x001f)));

6868 
r0
+=
dr
;

6869 
g0
+=
dg
;

6870 
b0
+=
db
;

6872 
	}
}

6876 
	$H‹zLöeShade
(
y
, 
x0
, 
x1
, 
uöt32_t
 
rgb0
, uöt32_à
rgb1
)

6878 
x
, 
dx
;

6879 
uöt32_t
 
r0
, 
g0
, 
b0
, 
r1
, 
g1
, 
b1
;

6880 
öt32_t
 
dr
, 
dg
, 
db
;

6882 
r0
 = (
rgb0
 & 0x00ff0000);

6883 
g0
 = (
rgb0
 & 0x0000ff00) << 8;

6884 
b0
 = (
rgb0
 & 0x000000ff) << 16;

6885 
r1
 = (
rgb1
 & 0x00ff0000);

6886 
g1
 = (
rgb1
 & 0x0000ff00) << 8;

6887 
b1
 = (
rgb1
 & 0x000000ff) << 16;

6889 
dx
 = (
x1
 - 
x0
);

6891 i‡(
dx
 > 0)

6893 
dr
 = ((
öt32_t
)
r1
 - (öt32_t)
r0
Ë/ 
dx
;

6894 
dg
 = ((
öt32_t
)
g1
 - (öt32_t)
g0
Ë/ 
dx
;

6895 
db
 = ((
öt32_t
)
b1
 - (öt32_t)
b0
Ë/ 
dx
;

6899 
dr
 = ((
öt32_t
)
r1
 - (öt32_t)
r0
);

6900 
dg
 = ((
öt32_t
)
g1
 - (öt32_t)
g0
);

6901 
db
 = ((
öt32_t
)
b1
 - (öt32_t)
b0
);

6904 i‡(
x0
 < 
døwX
)

6906 
r0
+=
dr
*(
døwX
 - 
x0
);

6907 
g0
+=
dg
*(
døwX
 - 
x0
);

6908 
b0
+=
db
*(
døwX
 - 
x0
);

6909 
x0
 = 
døwX
;

6912 i‡(
x1
 > 
døwW
)

6913 
x1
 = 
døwW
;

6915 
x
 = 
x0
; x <
x1
; x++)

6917 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y
<<10)+
x
],()(((
r0
 >> 9)&0x7c00)|((
g0
 >> 14)&0x03e0)|((
b0
 >> 19)&0x001f)));

6918 
r0
+=
dr
;

6919 
g0
+=
dg
;

6920 
b0
+=
db
;

6922 
	}
}

6926 
	$Löe_E_SE_Fœt
(
x0
, 
y0
, 
x1
, 
y1
, 
cﬁour
)

6928 
dx
, 
dy
, 
ö¸E
, 
ö¸SE
, 
d
, 
x
, 
y
;

6930 
dx
 = 
x1
 - 
x0
;

6931 
dy
 = 
y1
 - 
y0
;

6932 
d
 = 2*
dy
 - 
dx
;

6933 
ö¸E
 = 2*
dy
;

6934 
ö¸SE
 = 2*(
dy
 - 
dx
);

6935 
x
 = 
x0
;

6936 
y
 = 
y0
;

6937 i‡((
x
>=
døwX
)&&(x<
døwW
)&&(
y
>=
døwY
)&&(y<
døwH
))

6938 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y
<<10)+
x
], 
cﬁour
);

6939 
x
 < 
x1
)

6941 i‡(
d
 <= 0)

6943 
d
 = d + 
ö¸E
;

6944 
x
++;

6948 
d
 = d + 
ö¸SE
;

6949 
x
++;

6950 
y
++;

6952 i‡((
x
>=
døwX
)&&(x<
døwW
)&&(
y
>=
døwY
)&&(y<
døwH
))

6953 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y
<<10)+
x
], 
cﬁour
);

6955 
	}
}

6959 
	$Löe_S_SE_Fœt
(
x0
, 
y0
, 
x1
, 
y1
, 
cﬁour
)

6961 
dx
, 
dy
, 
ö¸S
, 
ö¸SE
, 
d
, 
x
, 
y
;

6963 
dx
 = 
x1
 - 
x0
;

6964 
dy
 = 
y1
 - 
y0
;

6965 
d
 = 2*
dx
 - 
dy
;

6966 
ö¸S
 = 2*
dx
;

6967 
ö¸SE
 = 2*(
dx
 - 
dy
);

6968 
x
 = 
x0
;

6969 
y
 = 
y0
;

6970 i‡((
x
>=
døwX
)&&(x<
døwW
)&&(
y
>=
døwY
)&&(y<
døwH
))

6971 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y
<<10)+
x
], 
cﬁour
);

6972 
y
 < 
y1
)

6974 i‡(
d
 <= 0)

6976 
d
 = d + 
ö¸S
;

6977 
y
++;

6981 
d
 = d + 
ö¸SE
;

6982 
x
++;

6983 
y
++;

6985 i‡((
x
>=
døwX
)&&(x<
døwW
)&&(
y
>=
døwY
)&&(y<
døwH
))

6986 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y
<<10)+
x
], 
cﬁour
);

6988 
	}
}

6992 
	$Löe_N_NE_Fœt
(
x0
, 
y0
, 
x1
, 
y1
, 
cﬁour
)

6994 
dx
, 
dy
, 
ö¸N
, 
ö¸NE
, 
d
, 
x
, 
y
;

6996 
dx
 = 
x1
 - 
x0
;

6997 
dy
 = -(
y1
 - 
y0
);

6998 
d
 = 2*
dx
 - 
dy
;

6999 
ö¸N
 = 2*
dx
;

7000 
ö¸NE
 = 2*(
dx
 - 
dy
);

7001 
x
 = 
x0
;

7002 
y
 = 
y0
;

7003 i‡((
x
>=
døwX
)&&(x<
døwW
)&&(
y
>=
døwY
)&&(y<
døwH
))

7004 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y
<<10)+
x
], 
cﬁour
);

7005 
y
 > 
y1
)

7007 i‡(
d
 <= 0)

7009 
d
 = d + 
ö¸N
;

7010 
y
--;

7014 
d
 = d + 
ö¸NE
;

7015 
x
++;

7016 
y
--;

7018 i‡((
x
>=
døwX
)&&(x<
døwW
)&&(
y
>=
døwY
)&&(y<
døwH
))

7019 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y
<<10)+
x
], 
cﬁour
);

7021 
	}
}

7025 
	$Löe_E_NE_Fœt
(
x0
, 
y0
, 
x1
, 
y1
, 
cﬁour
)

7027 
dx
, 
dy
, 
ö¸E
, 
ö¸NE
, 
d
, 
x
, 
y
;

7029 
dx
 = 
x1
 - 
x0
;

7030 
dy
 = -(
y1
 - 
y0
);

7031 
d
 = 2*
dy
 - 
dx
;

7032 
ö¸E
 = 2*
dy
;

7033 
ö¸NE
 = 2*(
dy
 - 
dx
);

7034 
x
 = 
x0
;

7035 
y
 = 
y0
;

7036 i‡((
x
>=
døwX
)&&(x<
døwW
)&&(
y
>=
døwY
)&&(y<
døwH
))

7037 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y
<<10)+
x
], 
cﬁour
);

7038 
x
 < 
x1
)

7040 i‡(
d
 <= 0)

7042 
d
 = d + 
ö¸E
;

7043 
x
++;

7047 
d
 = d + 
ö¸NE
;

7048 
x
++;

7049 
y
--;

7051 i‡((
x
>=
døwX
)&&(x<
døwW
)&&(
y
>=
døwY
)&&(y<
døwH
))

7052 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y
<<10)+
x
], 
cﬁour
);

7054 
	}
}

7058 
	$VîtLöeFœt
(
x
, 
y0
, 
y1
, 
cﬁour
)

7060 
y
;

7062 i‡(
y0
 < 
døwY
)

7063 
y0
 = 
døwY
;

7065 i‡(
y1
 > 
døwH
)

7066 
y1
 = 
døwH
;

7068 
y
 = 
y0
; y <
y1
; y++)

7069 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y
<<10)+
x
], 
cﬁour
);

7070 
	}
}

7074 
	$H‹zLöeFœt
(
y
, 
x0
, 
x1
, 
cﬁour
)

7076 
x
;

7078 i‡(
x0
 < 
døwX
)

7079 
x0
 = 
døwX
;

7081 i‡(
x1
 > 
døwW
)

7082 
x1
 = 
døwW
;

7084 
x
 = 
x0
; x <
x1
; x++)

7085 
	`GëShadeTønsCﬁ
(&
psxVuw
[(
y
 << 10Ë+ 
x
], 
cﬁour
);

7086 
	}
}

7091 
	$DøwSo·w¨eLöeShade
(
öt32_t
 
rgb0
, i¡32_à
rgb1
)

7093 
x0
, 
y0
, 
x1
, 
y1
, 
xt
, 
yt
;

7094 
öt32_t
 
rgbt
;

7095 
dy
, 
dx
;

7097 i‡(
lx0
 > 
døwW
 && 
lx1
 > drawW) ;

7098 i‡(
ly0
 > 
døwH
 && 
ly1
 > drawH) ;

7099 i‡(
lx0
 < 
døwX
 && 
lx1
 < drawX) ;

7100 i‡(
ly0
 < 
døwY
 && 
ly1
 < drawY) ;

7101 i‡(
døwY
 >
døwH
) ;

7102 i‡(
døwX
 >
døwW
) ;

7104 
x0
 = 
lx0
;

7105 
y0
 = 
ly0
;

7106 
x1
 = 
lx1
;

7107 
y1
 = 
ly1
;

7109 
dx
 = 
x1
 - 
x0
;

7110 
dy
 = 
y1
 - 
y0
;

7112 i‡(
dx
 == 0)

7114 i‡(
dy
 > 0)

7115 
	`VîtLöeShade
(
x0
, 
y0
, 
y1
, 
rgb0
, 
rgb1
);

7117 
	`VîtLöeShade
(
x0
, 
y1
, 
y0
, 
rgb1
, 
rgb0
);

7120 i‡(
dy
 == 0)

7122 i‡(
dx
 > 0)

7123 
	`H‹zLöeShade
(
y0
, 
x0
, 
x1
, 
rgb0
, 
rgb1
);

7125 
	`H‹zLöeShade
(
y0
, 
x1
, 
x0
, 
rgb1
, 
rgb0
);

7129 i‡(
dx
 < 0)

7131 
xt
 = 
x0
;

7132 
yt
 = 
y0
;

7133 
rgbt
 = 
rgb0
;

7134 
x0
 = 
x1
;

7135 
y0
 = 
y1
;

7136 
rgb0
 = 
rgb1
;

7137 
x1
 = 
xt
;

7138 
y1
 = 
yt
;

7139 
rgb1
 = 
rgbt
;

7141 
dx
 = 
x1
 - 
x0
;

7142 
dy
 = 
y1
 - 
y0
;

7145 i‡((
dx
 >0 && 
dy
 >= 0) || (dx < 0 && dy < 0))

7147 i‡(
	`abs
(
dy
Ë>ábs(
dx
))

7148 
	`Löe_S_SE_Shade
(
x0
, 
y0
, 
x1
, 
y1
, 
rgb0
, 
rgb1
);

7150 
	`Löe_E_SE_Shade
(
x0
, 
y0
, 
x1
, 
y1
, 
rgb0
, 
rgb1
);

7153 i‡(
	`abs
(
dy
Ë>ábs(
dx
))

7154 
	`Löe_N_NE_Shade
(
x0
, 
y0
, 
x1
, 
y1
, 
rgb0
, 
rgb1
);

7156 
	`Löe_E_NE_Shade
(
x0
, 
y0
, 
x1
, 
y1
, 
rgb0
, 
rgb1
);

7158 
	}
}

7162 
	$DøwSo·w¨eLöeFœt
(
öt32_t
 
rgb
)

7164 
x0
, 
y0
, 
x1
, 
y1
, 
xt
, 
yt
;

7165 
dy
, 
dx
;

7166 
cﬁour
 = 0;

7168 i‡(
lx0
 > 
døwW
 && 
lx1
 > drawW) ;

7169 i‡(
ly0
 > 
døwH
 && 
ly1
 > drawH) ;

7170 i‡(
lx0
 < 
døwX
 && 
lx1
 < drawX) ;

7171 i‡(
ly0
 < 
døwY
 && 
ly1
 < drawY) ;

7172 i‡(
døwY
 >
døwH
) ;

7173 i‡(
døwX
 >
døwW
) ;

7175 
cﬁour
 = ((
rgb
 & 0x00f80000) >> 9) | ((rgb & 0x0000f800) >> 6) | ((rgb & 0x000000f8) >> 3);

7177 
x0
 = 
lx0
;

7178 
y0
 = 
ly0
;

7179 
x1
 = 
lx1
;

7180 
y1
 = 
ly1
;

7182 
dx
 = 
x1
 - 
x0
;

7183 
dy
 = 
y1
 - 
y0
;

7185 i‡(
dx
 == 0)

7187 i‡(
dy
 == 0)

7189 i‡(
dy
 > 0)

7190 
	`VîtLöeFœt
(
x0
, 
y0
, 
y1
, 
cﬁour
);

7192 
	`VîtLöeFœt
(
x0
, 
y1
, 
y0
, 
cﬁour
);

7195 i‡(
dy
 == 0)

7197 i‡(
dx
 > 0)

7198 
	`H‹zLöeFœt
(
y0
, 
x0
, 
x1
, 
cﬁour
);

7200 
	`H‹zLöeFœt
(
y0
, 
x1
, 
x0
, 
cﬁour
);

7204 i‡(
dx
 < 0)

7206 
xt
 = 
x0
;

7207 
yt
 = 
y0
;

7208 
x0
 = 
x1
;

7209 
y0
 = 
y1
;

7210 
x1
 = 
xt
;

7211 
y1
 = 
yt
;

7213 
dx
 = 
x1
 - 
x0
;

7214 
dy
 = 
y1
 - 
y0
;

7217 i‡((
dx
 >0 && 
dy
 >= 0) || (dx < 0 && dy < 0))

7219 i‡(
	`abs
(
dy
Ë>ábs(
dx
))

7220 
	`Löe_S_SE_Fœt
(
x0
, 
y0
, 
x1
, 
y1
, 
cﬁour
);

7222 
	`Löe_E_SE_Fœt
(
x0
, 
y0
, 
x1
, 
y1
, 
cﬁour
);

7225 i‡(
	`abs
(
dy
Ë>ábs(
dx
))

7226 
	`Löe_N_NE_Fœt
(
x0
, 
y0
, 
x1
, 
y1
, 
cﬁour
);

7228 
	`Löe_E_NE_Fœt
(
x0
, 
y0
, 
x1
, 
y1
, 
cﬁour
);

7230 
	}
}

	@plugins/gpu-gles/gpuDraw.c

28 
	#_IN_DRAW


	)

31 
	~"gpuExã∫Æs.h
"

32 
	~"gpuPlugö.h
"

33 
	~"gpuDøw.h
"

34 
	~"gpuPrim.h
"

35 
	~"gpuTextuª.h
"

36 
	~"gpuStdafx.h
"

38 
	~<°dio.h
>

39 
	~<°dlib.h
>

40 
	~<m©h.h
>

46 
	#SIGNBIT
 0x800

	)

47 
	#S_MASK
 0xf000

	)

48 
	#L_MASK
 0xfffff000

	)

53 #ifde‡
OWNSCALE


57 
	#ST_FACSPRITE
 255.99f

	)

58 
	#ST_BFFACSPRITE
 0.5f/256.0f

	)

59 
	#ST_BFFACSPRITESORT
 0.333f/256.0f

	)

61 
	#ST_OFFSET
 0.5f/256.0f;

	)

63 
	#ST_FAC
 255.99f

	)

64 
	#ST_BFFAC
 0.5f/256.0f

	)

65 
	#ST_BFFACSORT
 0.333f/256.0f

	)

67 
	#ST_FACTRI
 255.99f

	)

68 
	#ST_BFFACTRI
 0.5f/256.0f

	)

69 
	#ST_BFFACTRISORT
 0.333f/256.0f

	)

71 
	#ST_FACVRAMX
 255.0f

	)

72 
	#ST_FACVRAM
 256.0f

	)

78 
	#ST_BFFACSPRITE
 0.5f

	)

79 
	#ST_BFFACSPRITESORT
 0.333f

	)

81 
	#ST_BFFAC
 0.5f

	)

82 
	#ST_BFFACSORT
 0.333f

	)

84 
	#ST_BFFACTRI
 0.5f

	)

85 
	#ST_BFFACTRISORT
 0.333f

	)

87 
	#ST_OFFSET
 0.5f;

	)

94 
glBÀndEqu©i⁄EXT
(
GLíum
 
mode
);

95 
glCﬁ‹TabÀEXT
(
GLíum
 
èrgë
, GLíum 
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
,GLíum 
ty≥
, c⁄° 
GLvoid
 *
d©a
);

99 
BOOL
 
	gbIsFú°Føme
=
TRUE
;

103 
	giResX
;

104 
	giResY
;

105 
BOOL
 
	gbKìpR©io
=
FALSE
;

106 
RECT
 
	grR©ioRe˘
;

110 
BOOL
 
	gbCheckMask
=
FALSE
;

111 
	giU£Mask
=0;

112 
	giSëMask
=0;

113 
	gsSëMask
=0;

114 
	glSëMask
=0;

118 
OGLVîãx
 
	gvîãx
[4];

119 
GLubyã
 
	ggl_ux
[8];

120 
GLubyã
 
	ggl_vy
[8];

121 
	g•πY
,
	g•πX
,
	g•πH
,
	g•πW
;

125 
BOOL
 
	gbO∑quePass
;

126 
BOOL
 
	gbAdv™˚dBÀnd
;

133 
	giDïthFunc
=0;

134 
	giZBuf„rDïth
=0;

135 
GLbôfõld
 
	guiBuf„rBôs
=
GL_COLOR_BUFFER_BIT
;

150 
	$GëExtInfos
()

152 
BOOL
 
bPacked
=
FALSE
;

154 if(
	`°r°r
((*)
	`glGëSåög
(
GL_EXTENSIONS
),

156 
bPacked
=
TRUE
;

159 
iCœmpTy≥
=
GL_CLAMP_TO_EDGE
;

160 
	}
}

166 
	$SëExtGLFuncs
()

170 
	`SëFixes
();

175 if(
bAdv™˚dBÀnd
Ë
bU£Mu…iPass
=
TRUE
;

176 
bU£Mu…iPass
=
FALSE
;

178 
	`glTexEnvf
(
GL_TEXTURE_ENV
, 
GL_TEXTURE_ENV_MODE
, 
GL_MODULATE
); 
	`glEº‹
();

181 if(
bO∑quePass
)

183 if(
dwA˘Fixes
&32)

185 
TCF
[0]=
CP8RGBA_0
;

186 
PÆTextuªdCﬁourFn
=
CP8RGBA
;

190 
TCF
[0]=
XP8RGBA_0
;

191 
PÆTextuªdCﬁourFn
=
XP8RGBA
;

194 
TCF
[1]=
XP8RGBA_1
;

195 
	`glAÕhaFuncx
(
GL_GREATER
,0.49f); 
	`glEº‹
();

200 
TCF
[0]=TCF[1]=
P8RGBA
;

201 
PÆTextuªdCﬁourFn
=
P8RGBA
;

202 
	`glAÕhaFuncx
(
GL_NOTEQUAL
,0); 
	`glEº‹
();

208 
LﬂdSubTexFn
=
LﬂdSubTextuªPageS‹t
;

210 
bBÀndE«bÀ
=
FALSE
;

211 
	`glDißbÀ
(
GL_BLEND
); 
	`glEº‹
();

214 
	`SëSˇnTøns
();

215 
	}
}

221 
	#R_TSP
 0x00,0x45,0x00,0xff

	)

222 
	#G_TSP
 0x00,0x00,0x45,0xff

	)

223 
	#B_TSP
 0x45,0x00,0x00,0xff

	)

224 
	#O_TSP
 0x45,0x45,0x45,0xff

	)

225 
	#N_TSP
 0x00,0x00,0x00,0xff

	)

227 
GLuöt
 
	ggTexSˇnName
=0;

229 
GLubyã
 
	gãxsˇn
[4][16]=

231 {
R_TSP
, 
G_TSP
, 
B_TSP
, 
N_TSP
},

232 {
O_TSP
, 
N_TSP
, O_TSP, N_TSP},

233 {
B_TSP
, 
N_TSP
, 
R_TSP
, 
G_TSP
},

234 {
O_TSP
, 
N_TSP
, O_TSP, N_TSP}

237 
	$Cª©eSˇnLöes
()

239 
	}
}

245 
	#MODE_RAW
 0

	)

246 
	#MODE_X11
 1

	)

247 
	#MODE_SDL
 2

	)

248 
	gu£_fßa
 = 0;

250 
EGLDi•œy
 
	gdi•œy
;

251 
EGLSurÁ˚
 
	gsurÁ˚
;

252 
EGLC⁄fig
 
	gc⁄fig
;

253 
EGLC⁄ãxt
 
	gc⁄ãxt
;

255 #i‡
deföed
(
USE_X11
)

256 
	~"X11/Xlib.h
"

257 
	~"X11/Xutû.h
"

258 
	~"X11/X©om.h
"

260 
Wödow
 
	gx11Wödow
 = 0;

261 
Di•œy
* 
	gx11Di•œy
 = 0;

262 
	gx11S¸ìn
 = 0;

263 
XVisuÆInfo
 
	gx11VisuÆ
;

264 
XVisuÆInfo
* 
	gpx11VisuÆ
 = 0;

265 
Cﬁ‹m≠
 
	gx11Cﬁ‹m≠
 = 0;

268 
EGLöt
 
	g©åib_li°_fßa
[] =

270 
EGL_SURFACE_TYPE
, 
EGL_WINDOW_BIT
,

271 
EGL_BUFFER_SIZE
, 0,

272 
EGL_DEPTH_SIZE
, 16,

273 
EGL_SAMPLE_BUFFERS
, 1,

274 
EGL_SAMPLES
, 4,

275 
EGL_NONE


278 
EGLöt
 
	g©åib_li°
[] =

281 
EGL_NONE


284 
boﬁ
 
	$Te°EGLEº‹
(c⁄° * 
pszLoˇti⁄
)

291 
EGLöt
 
iEº
 = 
	`eglGëEº‹
();

292 i‡(
iEº
 !
EGL_SUCCESS
)

294 
	`¥ötf
("%†Áûed (0x%x).\n", 
pszLoˇti⁄
, 
iEº
);

295  
FALSE
;

298  
TRUE
;

299 
	}
}

301 
	$öôEGL
()

303 
N©iveWödowTy≥
 
wödow
 = 0;

305 
	`¥ötf
 ("GL init\n");

307 
EGLöt
 
numC⁄figs
;

308 
EGLöt
 
maj‹Vîsi⁄
;

309 
EGLöt
 
mö‹Vîsi⁄
;

310 #i‡
	`deföed
(
USE_X11
)

313 
_NET_WM_STATE_REMOVE
 =0,

314 
_NET_WM_STATE_ADD
 = 1,

315 
_NET_WM_STATE_TOGGLE
 =2

318 
Wödow
 
sRoŸWödow
;

319 
XSëWödowAâribuãs
 
sWA
;

320 
ui32Mask
;

321 
i32Dïth
;

324 
EGLöt
 *
©åibLi°
 = 
NULL
;

325 i‡(
u£_fßa
)

327 
	`¥ötf
( "GLES: Using Full Scene Antialiasing\n" );

328 
©åibLi°
 = 
©åib_li°_fßa
;

332 
©åibLi°
 = 
©åib_li°
;

335 #i‡
	`deföed
(
USE_X11
)

337 
x11Di•œy
 = 
	`XO≥nDi•œy
( ":0" );

338 i‡(!
x11Di•œy
)

340 
	`¥ötf
("GLES Error: UnableÅo open X display\n");

343 
x11S¸ìn
 = 
	`XDeÁu…S¸ìn
–
x11Di•œy
 );

346 
sRoŸWödow
 = 
	`RoŸWödow
(
x11Di•œy
, 
x11S¸ìn
);

347 
i32Dïth
 = 
	`DeÁu…Dïth
(
x11Di•œy
, 
x11S¸ìn
);

348 
px11VisuÆ
 = &
x11VisuÆ
;

349 
	`XM©chVisuÆInfo
–
x11Di•œy
, 
x11S¸ìn
, 
i32Dïth
, 
TrueCﬁ‹
, 
px11VisuÆ
);

350 i‡(!
px11VisuÆ
)

352 
	`¥ötf
("GLES Error: UnableÅoácquire visual\n");

356 
x11Cﬁ‹m≠
 = 
	`XCª©eCﬁ‹m≠
–
x11Di•œy
, 
sRoŸWödow
, 
px11VisuÆ
->
visuÆ
, 
AŒocN⁄e
 );

357 
sWA
.
cﬁ‹m≠
 = 
x11Cﬁ‹m≠
;

360 
sWA
.
evít_mask
 = 
Såu˘uªNŸifyMask
 | 
ExposuªMask
 | 
Buâ⁄PªssMask
 | 
Buâ⁄Rñó£Mask
 | 
KeyPªssMask
 | 
KeyRñó£Mask
;

363 
ui32Mask
 = 
CWBackPixñ
 | 
CWB‹dîPixñ
 | 
CWEvítMask
 | 
CWCﬁ‹m≠
;

366 
x11Wödow
 = 
	`XCª©eWödow
–
x11Di•œy
, 
	`RoŸWödow
(x11Di•œy, 
x11S¸ìn
), 0, 0, 
iResX
, 
iResY
,

367 0, 
C›yFromP¨ít
, 
I≈utOuçut
, C›yFromP¨ít, 
ui32Mask
, &
sWA
);

370 
	`XM≠Wödow
(
x11Di•œy
, 
x11Wödow
);

371 
	`XFlush
(
x11Di•œy
);

374 
fuŒS¸ìn
 = 1;

375 
Atom
 
wmSèã
 = 
	`XI¡înAtom
(
x11Di•œy
, "_NET_WM_STATE", 
FÆ£
);

376 
Atom
 
wmFuŒS¸ìn
 = 
	`XI¡înAtom
(
x11Di•œy
,"_NET_WM_STATE_FULLSCREEN", 
FÆ£
);

378 
XEvít
 
xev
;

379 
xev
.
x˛õ¡
.
ty≥
 = 
Clõ¡Mesßge
;

380 
xev
.
x˛õ¡
.
£rül
 = 0;

381 
xev
.
x˛õ¡
.
£nd_evít
 = 
True
;

382 
xev
.
x˛õ¡
.
wödow
 = 
x11Wödow
;

383 
xev
.
x˛õ¡
.
mesßge_ty≥
 = 
wmSèã
;

384 
xev
.
x˛õ¡
.
f‹m©
 = 32;

385 
xev
.
x˛õ¡
.
d©a
.
l
[0] = (
fuŒS¸ìn
 ? 
_NET_WM_STATE_ADD
 : 
_NET_WM_STATE_REMOVE
);

386 
xev
.
x˛õ¡
.
d©a
.
l
[1] = 
wmFuŒS¸ìn
;

387 
xev
.
x˛õ¡
.
d©a
.
l
[2] = 0;

389 
	`XSídEvít
(
x11Di•œy
, 
	`DeÁu…RoŸWödow
(x11Di•œy), 
FÆ£
, 
Sub°ru˘uªRedúe˘Mask
 | 
Sub°ru˘uªNŸifyMask
, &
xev
);

391 
di•œy
 = 
	`eglGëDi•œy
–(
EGLN©iveDi•œyTy≥
)
x11Di•œy
 );

392 
wödow
 = 
x11Wödow
;

394 
di•œy
 = 
	`eglGëDi•œy
–(
EGLN©iveDi•œyTy≥
)0 );

397 if–
di•œy
 =
EGL_NO_DISPLAY
 )

399 
	`¥ötf
( "GLES EGL Error: GL No Display\n" );

403 if–!
	`eglInôülize
–
di•œy
, &
maj‹Vîsi⁄
, &
mö‹Vîsi⁄
 ) )

405 
	`¥ötf
( "GLES EGL Error:ÉglInitialize failed\n" );

409 if–!
	`eglChoo£C⁄fig
–
di•œy
, 
©åibLi°
, &
c⁄fig
, 1, &
numC⁄figs
 ) )

411 
	`¥ötf
( "GLES EGL Error:ÉglChooseConfig failed\n" );

415 
c⁄ãxt
 = 
	`eglCª©eC⁄ãxt
–
di•œy
, 
c⁄fig
, 
NULL
, NULL );

416 if–
c⁄ãxt
==0 )

418 
	`¥ötf
( "GLES EGL Error:ÉglCreateContext failed\n" );

422 #ifde‡
FAKE_WINDOW


424 
wödow
 = (
N©iveWödowTy≥
)1;

426 
surÁ˚
 = 
	`eglCª©eWödowSurÁ˚
–
di•œy
, 
c⁄fig
, 
wödow
, 
NULL
 );

427 i‡(!
	`Te°EGLEº‹
("eglCreateWindowSurface"))

430 
	`eglMakeCuºít
–
di•œy
, 
surÁ˚
, surÁ˚, 
c⁄ãxt
 );

431 i‡(!
	`Te°EGLEº‹
("eglMakeCurrent"))

434 
	`¥ötf
("GLES init ok\n");

436 
	}
}

438 
	g¸óãd_gÀs_c⁄ãxt
;

440 
	$GLöôülize
(*
ext_gÀs_di•œy
, *
ext_gÀs_surÁ˚
)

442 if(
ext_gÀs_di•œy
 !
NULL
 && 
ext_gÀs_surÁ˚
 != NULL) {

443 
di•œy
 = (
EGLDi•œy
)
ext_gÀs_di•œy
;

444 
surÁ˚
 = (
EGLSurÁ˚
)
ext_gÀs_surÁ˚
;

447 if(
	`öôEGL
()!=0)

449 
¸óãd_gÀs_c⁄ãxt
=1;

454 
	`glDïthR™gef
(0.0f, 1.0f);
	`glEº‹
();

456 
	`glVõwp‹t
(
rR©ioRe˘
.
À·
,

457 
iResY
-(
rR©ioRe˘
.
t›
+rR©ioRe˘.
bŸtom
),

458 
rR©ioRe˘
.
right
,

459 
rR©ioRe˘
.
bŸtom
); 
	`glEº‹
();

461 
	`glSciss‹
(0, 0, 
iResX
, 
iResY
); 
	`glEº‹
();

462 
	`glE«bÀ
(
GL_SCISSOR_TEST
); 
	`glEº‹
();

464 #i‚de‡
OWNSCALE


465 
	`glM©rixMode
(
GL_TEXTURE
);

466 
	`glLﬂdIdítôy
();

467 
	`glSˇÀf
(1.0f/255.99f,1.0f/255.99f,1.0f);

472 
	`glM©rixMode
(
GL_PROJECTION
); 
	`glEº‹
();

473 
	`glLﬂdIdítôy
(); 
	`glEº‹
();

475 
	`glOπho
(0,
PSXDi•œy
.
Di•œyMode
.
x
,

476 
PSXDi•œy
.
Di•œyMode
.
y
, 0, -1, 1); 
	`glEº‹
();

478 if(
iZBuf„rDïth
)

480 
uiBuf„rBôs
=
GL_COLOR_BUFFER_BIT
|
GL_DEPTH_BUFFER_BIT
;

481 
	`glE«bÀ
(
GL_DEPTH_TEST
); 
	`glEº‹
();

482 
	`glDïthFunc
(
GL_ALWAYS
); 
	`glEº‹
();

483 
iDïthFunc
=1;

487 
uiBuf„rBôs
=
GL_COLOR_BUFFER_BIT
;

488 
	`glDißbÀ
(
GL_DEPTH_TEST
); 
	`glEº‹
();

491 
	`glCÀ¨Cﬁ‹
(0.0f, 0.0f, 0.0f, 0.0f); 
	`glEº‹
();

492 
	`glCÀ¨
(
uiBuf„rBôs
); 
	`glEº‹
();

494 
	`GëExtInfos
();

495 
	`SëExtGLFuncs
();

497 
	`glE«bÀ
(
GL_ALPHA_TEST
); 
	`glEº‹
();

500 
	`glDißbÀ
(
GL_LINE_SMOOTH
); 
	`glEº‹
();

501 
	`glDißbÀ
(
GL_POINT_SMOOTH
); 
	`glEº‹
();

504 
ubGloAÕha
=127;

505 
ubGloCﬁAÕha
=127;

506 
TWö
.
USˇÀFa˘‹
 = 1;

507 
TWö
.
VSˇÀFa˘‹
 = 1;

508 
bDøwMu…iPass
=
FALSE
;

509 
bTexE«bÀd
=
FALSE
;

510 
bUsögTWö
=
FALSE
;

512 if(
bDøwDôhî
Ë
	`glE«bÀ
(
GL_DITHER
);

513 
	`glDißbÀ
(
GL_DITHER
);

514 
	`glEº‹
();

515 
	`glDißbÀ
(
GL_FOG
); 
	`glEº‹
();

516 
	`glDißbÀ
(
GL_LIGHTING
); 
	`glEº‹
();

517 
	`glDißbÀ
(
GL_STENCIL_TEST
); 
	`glEº‹
();

518 
	`glDißbÀ
(
GL_TEXTURE_2D
); 
	`glEº‹
();

519 
	`glDißbÀ
(
GL_CULL_FACE
);

521 
	`glFlush
(); 
	`glEº‹
();

522 
	`glFöish
(); 
	`glEº‹
();

524 
	`Cª©eSˇnLöes
();

526 
	`CheckTextuªMem‹y
();

528 if(
bKìpR©io
Ë
	`SëA•e˘R©io
();

531 
bIsFú°Føme
 = 
FALSE
;

534 
	}
}

540 
	$GL˛ónup
()

542 
	`CÀ™upTextuªSt‹e
();

544 if(
¸óãd_gÀs_c⁄ãxt
) {

545 
	`eglMakeCuºít
–
di•œy
, 
EGL_NO_SURFACE
, EGL_NO_SURFACE, 
EGL_NO_CONTEXT
 );

546 
	`eglDe°roySurÁ˚
–
di•œy
, 
surÁ˚
 );

547 
	`eglDe°royC⁄ãxt
–
di•œy
, 
c⁄ãxt
 );

548 
	`eglTîmö©e
–
di•œy
 );

550 #i‡
	`deföed
(
USE_X11
)

551 i‡(
x11Wödow
Ë
	`XDe°royWödow
(
x11Di•œy
, x11Window);

552 i‡(
x11Cﬁ‹m≠
Ë
	`XFªeCﬁ‹m≠
–
x11Di•œy
, x11Colormap );

553 i‡(
x11Di•œy
Ë
	`XClo£Di•œy
(x11Display);

555 
¸óãd_gÀs_c⁄ãxt
=0;

557 
	}
}

575 
__ölöe
 
BOOL
 
	$CheckCo‹d4
()

577 if(
lx0
<0)

579 if(((
lx1
-
lx0
)>
CHKMAX_X
) ||

580 ((
lx2
-
lx0
)>
CHKMAX_X
))

582 if(
lx3
<0)

584 if((
lx1
-
lx3
)>
CHKMAX_X
Ë 
TRUE
;

585 if((
lx2
-
lx3
)>
CHKMAX_X
Ë 
TRUE
;

589 if(
lx1
<0)

591 if((
lx0
-
lx1
)>
CHKMAX_X
Ë 
TRUE
;

592 if((
lx2
-
lx1
)>
CHKMAX_X
Ë 
TRUE
;

593 if((
lx3
-
lx1
)>
CHKMAX_X
Ë 
TRUE
;

595 if(
lx2
<0)

597 if((
lx0
-
lx2
)>
CHKMAX_X
Ë 
TRUE
;

598 if((
lx1
-
lx2
)>
CHKMAX_X
Ë 
TRUE
;

599 if((
lx3
-
lx2
)>
CHKMAX_X
Ë 
TRUE
;

601 if(
lx3
<0)

603 if(((
lx1
-
lx3
)>
CHKMAX_X
) ||

604 ((
lx2
-
lx3
)>
CHKMAX_X
))

606 if(
lx0
<0)

608 if((
lx1
-
lx0
)>
CHKMAX_X
Ë 
TRUE
;

609 if((
lx2
-
lx0
)>
CHKMAX_X
Ë 
TRUE
;

615 if(
ly0
<0)

617 if((
ly1
-
ly0
)>
CHKMAX_Y
Ë 
TRUE
;

618 if((
ly2
-
ly0
)>
CHKMAX_Y
Ë 
TRUE
;

620 if(
ly1
<0)

622 if((
ly0
-
ly1
)>
CHKMAX_Y
Ë 
TRUE
;

623 if((
ly2
-
ly1
)>
CHKMAX_Y
Ë 
TRUE
;

624 if((
ly3
-
ly1
)>
CHKMAX_Y
Ë 
TRUE
;

626 if(
ly2
<0)

628 if((
ly0
-
ly2
)>
CHKMAX_Y
Ë 
TRUE
;

629 if((
ly1
-
ly2
)>
CHKMAX_Y
Ë 
TRUE
;

630 if((
ly3
-
ly2
)>
CHKMAX_Y
Ë 
TRUE
;

632 if(
ly3
<0)

634 if((
ly1
-
ly3
)>
CHKMAX_Y
Ë 
TRUE
;

635 if((
ly2
-
ly3
)>
CHKMAX_Y
Ë 
TRUE
;

638  
FALSE
;

639 
	}
}

641 
__ölöe
 
BOOL
 
	$CheckCo‹d3
()

643 if(
lx0
<0)

645 if((
lx1
-
lx0
)>
CHKMAX_X
Ë 
TRUE
;

646 if((
lx2
-
lx0
)>
CHKMAX_X
Ë 
TRUE
;

648 if(
lx1
<0)

650 if((
lx0
-
lx1
)>
CHKMAX_X
Ë 
TRUE
;

651 if((
lx2
-
lx1
)>
CHKMAX_X
Ë 
TRUE
;

653 if(
lx2
<0)

655 if((
lx0
-
lx2
)>
CHKMAX_X
Ë 
TRUE
;

656 if((
lx1
-
lx2
)>
CHKMAX_X
Ë 
TRUE
;

658 if(
ly0
<0)

660 if((
ly1
-
ly0
)>
CHKMAX_Y
Ë 
TRUE
;

661 if((
ly2
-
ly0
)>
CHKMAX_Y
Ë 
TRUE
;

663 if(
ly1
<0)

665 if((
ly0
-
ly1
)>
CHKMAX_Y
Ë 
TRUE
;

666 if((
ly2
-
ly1
)>
CHKMAX_Y
Ë 
TRUE
;

668 if(
ly2
<0)

670 if((
ly0
-
ly2
)>
CHKMAX_Y
Ë 
TRUE
;

671 if((
ly1
-
ly2
)>
CHKMAX_Y
Ë 
TRUE
;

674  
FALSE
;

675 
	}
}

678 
__ölöe
 
BOOL
 
	$CheckCo‹d2
()

680 if(
lx0
<0)

682 if((
lx1
-
lx0
)>
CHKMAX_X
Ë 
TRUE
;

684 if(
lx1
<0)

686 if((
lx0
-
lx1
)>
CHKMAX_X
Ë 
TRUE
;

688 if(
ly0
<0)

690 if((
ly1
-
ly0
)>
CHKMAX_Y
Ë 
TRUE
;

692 if(
ly1
<0)

694 if((
ly0
-
ly1
)>
CHKMAX_Y
Ë 
TRUE
;

697  
FALSE
;

698 
	}
}

703 
	#VERTEX_OFFX
 0.2f

	)

704 
	#VERTEX_OFFY
 0.2f

	)

706 
BOOL
 
	$off£éöe
()

708 
x0
,
x1
,
y0
,
y1
,
dx
,
dy
;
px
,
py
;

710 if(
bDi•œyNŸSë
)

711 
	`SëOGLDi•œySëtögs
(1);

713 if(!(
dwA˘Fixes
&16))

715 
lx0
=()(((Óx0<<
SIGNSHIFT
)>>SIGNSHIFT);

716 
lx1
=()(((Óx1<<
SIGNSHIFT
)>>SIGNSHIFT);

717 
ly0
=()(((Óy0<<
SIGNSHIFT
)>>SIGNSHIFT);

718 
ly1
=()(((Óy1<<
SIGNSHIFT
)>>SIGNSHIFT);

720 if(
	`CheckCo‹d2
()Ë 
TRUE
;

723 
x0
 = (
lx0
 + 
PSXDi•œy
.
CumulOff£t
.
x
)+1;

724 
x1
 = (
lx1
 + 
PSXDi•œy
.
CumulOff£t
.
x
)+1;

725 
y0
 = (
ly0
 + 
PSXDi•œy
.
CumulOff£t
.
y
)+1;

726 
y1
 = (
ly1
 + 
PSXDi•œy
.
CumulOff£t
.
y
)+1;

728 
dx
=
x1
-
x0
;

729 
dy
=
y1
-
y0
;

731 if(
dx
>=0)

733 if(
dy
>=0)

735 
px
=0.5f;

736 if(
dx
>
dy
Ë
py
=-0.5f;

737 if(
dx
<
dy
Ë
py
= 0.5f;

738 
py
= 0.0f;

742 
py
=-0.5f;

743 
dy
=-dy;

744 if(
dx
>
dy
Ë
px
= 0.5f;

745 if(
dx
<
dy
Ë
px
=-0.5f;

746 
px
= 0.0f;

751 if(
dy
>=0)

753 
py
=0.5f;

754 
dx
=-dx;

755 if(
dx
>
dy
Ë
px
=-0.5f;

756 if(
dx
<
dy
Ë
px
= 0.5f;

757 
px
= 0.0f;

761 
px
=-0.5f;

762 if(
dx
>
dy
Ë
py
=-0.5f;

763 if(
dx
<
dy
Ë
py
= 0.5f;

764 
py
= 0.0f;

768 
vîãx
[0].
x
=()(()
x0
-
px
);

769 
vîãx
[3].
x
=()(()
x0
+
py
);

771 
vîãx
[0].
y
=()(()
y0
-
py
);

772 
vîãx
[3].
y
=()(()
y0
-
px
);

774 
vîãx
[1].
x
=()(()
x1
-
py
);

775 
vîãx
[2].
x
=()(()
x1
+
px
);

777 
vîãx
[1].
y
=()(()
y1
+
px
);

778 
vîãx
[2].
y
=()(()
y1
+
py
);

780 if(
vîãx
[0].
x
==vertex[3].x &&

781 
vîãx
[1].
x
==vertex[2].x &&

782 
vîãx
[0].
y
==vertex[1].y &&

783 
vîãx
[2].
y
==vîãx[3].yË 
FALSE
;

784 if(
vîãx
[0].
x
==vertex[1].x &&

785 
vîãx
[2].
x
==vertex[3].x &&

786 
vîãx
[0].
y
==vertex[3].y &&

787 
vîãx
[1].
y
==vîãx[2].yË 
FALSE
;

789 
vîãx
[0].
x
-=
VERTEX_OFFX
;

790 
vîãx
[0].
y
-=
VERTEX_OFFY
;

791 
vîãx
[1].
x
-=
VERTEX_OFFX
;

792 
vîãx
[1].
y
-=
VERTEX_OFFY
;

793 
vîãx
[2].
x
-=
VERTEX_OFFX
;

794 
vîãx
[2].
y
-=
VERTEX_OFFY
;

795 
vîãx
[3].
x
-=
VERTEX_OFFX
;

796 
vîãx
[3].
y
-=
VERTEX_OFFY
;

798  
FALSE
;

799 
	}
}

803 
BOOL
 
	$off£t2
()

805 if(
bDi•œyNŸSë
)

806 
	`SëOGLDi•œySëtögs
(1);

808 if(!(
dwA˘Fixes
&16))

810 
lx0
=()(((Óx0<<
SIGNSHIFT
)>>SIGNSHIFT);

811 
lx1
=()(((Óx1<<
SIGNSHIFT
)>>SIGNSHIFT);

812 
ly0
=()(((Óy0<<
SIGNSHIFT
)>>SIGNSHIFT);

813 
ly1
=()(((Óy1<<
SIGNSHIFT
)>>SIGNSHIFT);

815 if(
	`CheckCo‹d2
()Ë 
TRUE
;

818 
vîãx
[0].
x
=
lx0
+
PSXDi•œy
.
CumulOff£t
.x;

819 
vîãx
[1].
x
=
lx1
+
PSXDi•œy
.
CumulOff£t
.x;

820 
vîãx
[0].
y
=
ly0
+
PSXDi•œy
.
CumulOff£t
.y;

821 
vîãx
[1].
y
=
ly1
+
PSXDi•œy
.
CumulOff£t
.y;

823  
FALSE
;

824 
	}
}

828 
BOOL
 
	$off£t3
()

830 if(
bDi•œyNŸSë
)

831 
	`SëOGLDi•œySëtögs
(1);

833 if(!(
dwA˘Fixes
&16))

835 
lx0
=()(((Óx0<<
SIGNSHIFT
)>>SIGNSHIFT);

836 
lx1
=()(((Óx1<<
SIGNSHIFT
)>>SIGNSHIFT);

837 
lx2
=()(((Óx2<<
SIGNSHIFT
)>>SIGNSHIFT);

838 
ly0
=()(((Óy0<<
SIGNSHIFT
)>>SIGNSHIFT);

839 
ly1
=()(((Óy1<<
SIGNSHIFT
)>>SIGNSHIFT);

840 
ly2
=()(((Óy2<<
SIGNSHIFT
)>>SIGNSHIFT);

842 if(
	`CheckCo‹d3
()Ë 
TRUE
;

845 
vîãx
[0].
x
=
lx0
+
PSXDi•œy
.
CumulOff£t
.x;

846 
vîãx
[1].
x
=
lx1
+
PSXDi•œy
.
CumulOff£t
.x;

847 
vîãx
[2].
x
=
lx2
+
PSXDi•œy
.
CumulOff£t
.x;

848 
vîãx
[0].
y
=
ly0
+
PSXDi•œy
.
CumulOff£t
.y;

849 
vîãx
[1].
y
=
ly1
+
PSXDi•œy
.
CumulOff£t
.y;

850 
vîãx
[2].
y
=
ly2
+
PSXDi•œy
.
CumulOff£t
.y;

852  
FALSE
;

853 
	}
}

857 
BOOL
 
	$off£t4
()

859 if(
bDi•œyNŸSë
)

860 
	`SëOGLDi•œySëtögs
(1);

862 if(!(
dwA˘Fixes
&16))

864 
lx0
=()(((Óx0<<
SIGNSHIFT
)>>SIGNSHIFT);

865 
lx1
=()(((Óx1<<
SIGNSHIFT
)>>SIGNSHIFT);

866 
lx2
=()(((Óx2<<
SIGNSHIFT
)>>SIGNSHIFT);

867 
lx3
=()(((Óx3<<
SIGNSHIFT
)>>SIGNSHIFT);

868 
ly0
=()(((Óy0<<
SIGNSHIFT
)>>SIGNSHIFT);

869 
ly1
=()(((Óy1<<
SIGNSHIFT
)>>SIGNSHIFT);

870 
ly2
=()(((Óy2<<
SIGNSHIFT
)>>SIGNSHIFT);

871 
ly3
=()(((Óy3<<
SIGNSHIFT
)>>SIGNSHIFT);

873 if(
	`CheckCo‹d4
()Ë 
TRUE
;

876 
vîãx
[0].
x
=
lx0
+
PSXDi•œy
.
CumulOff£t
.x;

877 
vîãx
[1].
x
=
lx1
+
PSXDi•œy
.
CumulOff£t
.x;

878 
vîãx
[2].
x
=
lx2
+
PSXDi•œy
.
CumulOff£t
.x;

879 
vîãx
[3].
x
=
lx3
+
PSXDi•œy
.
CumulOff£t
.x;

880 
vîãx
[0].
y
=
ly0
+
PSXDi•œy
.
CumulOff£t
.y;

881 
vîãx
[1].
y
=
ly1
+
PSXDi•œy
.
CumulOff£t
.y;

882 
vîãx
[2].
y
=
ly2
+
PSXDi•œy
.
CumulOff£t
.y;

883 
vîãx
[3].
y
=
ly3
+
PSXDi•œy
.
CumulOff£t
.y;

885  
FALSE
;

886 
	}
}

890 
	$off£tST
()

892 if(
bDi•œyNŸSë
)

893 
	`SëOGLDi•œySëtögs
(1);

895 if(!(
dwA˘Fixes
&16))

897 
lx0
=()(((Óx0<<
SIGNSHIFT
)>>SIGNSHIFT);

898 
ly0
=()(((Óy0<<
SIGNSHIFT
)>>SIGNSHIFT);

900 if(
lx0
<-512 && 
PSXDi•œy
.
DøwOff£t
.
x
<=-512)

901 
lx0
+=2048;

903 if(
ly0
<-512 && 
PSXDi•œy
.
DøwOff£t
.
y
<=-512)

904 
ly0
+=2048;

907 
ly1
 = 
ly0
;

908 
ly2
 = 
ly3
 = 
ly0
+
•πH
;

909 
lx3
 = 
lx0
;

910 
lx1
 = 
lx2
 = 
lx0
+
•πW
;

912 
vîãx
[0].
x
=
lx0
+
PSXDi•œy
.
CumulOff£t
.x;

913 
vîãx
[1].
x
=
lx1
+
PSXDi•œy
.
CumulOff£t
.x;

914 
vîãx
[2].
x
=
lx2
+
PSXDi•œy
.
CumulOff£t
.x;

915 
vîãx
[3].
x
=
lx3
+
PSXDi•œy
.
CumulOff£t
.x;

916 
vîãx
[0].
y
=
ly0
+
PSXDi•œy
.
CumulOff£t
.y;

917 
vîãx
[1].
y
=
ly1
+
PSXDi•œy
.
CumulOff£t
.y;

918 
vîãx
[2].
y
=
ly2
+
PSXDi•œy
.
CumulOff£t
.y;

919 
vîãx
[3].
y
=
ly3
+
PSXDi•œy
.
CumulOff£t
.y;

920 
	}
}

924 
	$off£tS¸ìnU∂ﬂd
(
Posôi⁄
)

926 if(
bDi•œyNŸSë
)

927 
	`SëOGLDi•œySëtögs
(1);

929 if(
Posôi⁄
==-1)

931 
lmdx
,
lmdy
;

933 
lmdx
=
xrU∂ﬂdAªa
.
x0
;

934 
lmdy
=
xrU∂ﬂdAªa
.
y0
;

936 
lx0
-=
lmdx
;

937 
ly0
-=
lmdy
;

938 
lx1
-=
lmdx
;

939 
ly1
-=
lmdy
;

940 
lx2
-=
lmdx
;

941 
ly2
-=
lmdy
;

942 
lx3
-=
lmdx
;

943 
ly3
-=
lmdy
;

946 if(
Posôi⁄
)

948 
lx0
-=
PSXDi•œy
.
Di•œyPosôi⁄
.
x
;

949 
ly0
-=
PSXDi•œy
.
Di•œyPosôi⁄
.
y
;

950 
lx1
-=
PSXDi•œy
.
Di•œyPosôi⁄
.
x
;

951 
ly1
-=
PSXDi•œy
.
Di•œyPosôi⁄
.
y
;

952 
lx2
-=
PSXDi•œy
.
Di•œyPosôi⁄
.
x
;

953 
ly2
-=
PSXDi•œy
.
Di•œyPosôi⁄
.
y
;

954 
lx3
-=
PSXDi•œy
.
Di•œyPosôi⁄
.
x
;

955 
ly3
-=
PSXDi•œy
.
Di•œyPosôi⁄
.
y
;

959 
lx0
-=
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
;

960 
ly0
-=
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
;

961 
lx1
-=
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
;

962 
ly1
-=
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
;

963 
lx2
-=
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
;

964 
ly2
-=
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
;

965 
lx3
-=
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
;

966 
ly3
-=
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
;

969 
vîãx
[0].
x
=
lx0
 + 
PªviousPSXDi•œy
.
R™ge
.
x0
;

970 
vîãx
[1].
x
=
lx1
 + 
PªviousPSXDi•œy
.
R™ge
.
x0
;

971 
vîãx
[2].
x
=
lx2
 + 
PªviousPSXDi•œy
.
R™ge
.
x0
;

972 
vîãx
[3].
x
=
lx3
 + 
PªviousPSXDi•œy
.
R™ge
.
x0
;

973 
vîãx
[0].
y
=
ly0
 + 
PªviousPSXDi•œy
.
R™ge
.
y0
;

974 
vîãx
[1].
y
=
ly1
 + 
PªviousPSXDi•œy
.
R™ge
.
y0
;

975 
vîãx
[2].
y
=
ly2
 + 
PªviousPSXDi•œy
.
R™ge
.
y0
;

976 
vîãx
[3].
y
=
ly3
 + 
PªviousPSXDi•œy
.
R™ge
.
y0
;

978 if(
iU£Mask
)

980 
vîãx
[0].
z
=vîãx[1].z=vîãx[2].z=vîãx[3].z=
gl_z
;

981 
gl_z
+=0.00004f;

983 
	}
}

987 
	$off£tBlk
()

989 if(
bDi•œyNŸSë
)

990 
	`SëOGLDi•œySëtögs
(1);

992 
vîãx
[0].
x
=
lx0
-
PSXDi•œy
.
GDøwOff£t
.x + 
PªviousPSXDi•œy
.
R™ge
.
x0
;

993 
vîãx
[1].
x
=
lx1
-
PSXDi•œy
.
GDøwOff£t
.x + 
PªviousPSXDi•œy
.
R™ge
.
x0
;

994 
vîãx
[2].
x
=
lx2
-
PSXDi•œy
.
GDøwOff£t
.x + 
PªviousPSXDi•œy
.
R™ge
.
x0
;

995 
vîãx
[3].
x
=
lx3
-
PSXDi•œy
.
GDøwOff£t
.x + 
PªviousPSXDi•œy
.
R™ge
.
x0
;

996 
vîãx
[0].
y
=
ly0
-
PSXDi•œy
.
GDøwOff£t
.y + 
PªviousPSXDi•œy
.
R™ge
.
y0
;

997 
vîãx
[1].
y
=
ly1
-
PSXDi•œy
.
GDøwOff£t
.y + 
PªviousPSXDi•œy
.
R™ge
.
y0
;

998 
vîãx
[2].
y
=
ly2
-
PSXDi•œy
.
GDøwOff£t
.y + 
PªviousPSXDi•œy
.
R™ge
.
y0
;

999 
vîãx
[3].
y
=
ly3
-
PSXDi•œy
.
GDøwOff£t
.y + 
PªviousPSXDi•œy
.
R™ge
.
y0
;

1001 if(
iU£Mask
)

1003 
vîãx
[0].
z
=vîãx[1].z=vîãx[2].z=vîãx[3].z=
gl_z
;

1004 
gl_z
+=0.00004f;

1006 
	}
}

1012 
	$assignTextuªVRAMWrôe
()

1014 #ifde‡
OWNSCALE


1016 
vîãx
[0].
sow
=0.5f/ 
ST_FACVRAMX
;

1017 
vîãx
[0].
tow
=0.5f/ 
ST_FACVRAM
;

1019 
vîãx
[1].
sow
=()
gl_ux
[1]/ 
ST_FACVRAMX
;

1020 
vîãx
[1].
tow
=0.5f/ 
ST_FACVRAM
;

1022 
vîãx
[2].
sow
=()
gl_ux
[2]/ 
ST_FACVRAMX
;

1023 
vîãx
[2].
tow
=()
gl_vy
[2]/ 
ST_FACVRAM
;

1025 
vîãx
[3].
sow
=0.5f/ 
ST_FACVRAMX
;

1026 
vîãx
[3].
tow
=()
gl_vy
[3]/ 
ST_FACVRAM
;

1030 if(
gl_ux
[1]==255)

1032 
vîãx
[0].
sow
=(
gl_ux
[0]*255.99f)/255.0f;

1033 
vîãx
[1].
sow
=(
gl_ux
[1]*255.99f)/255.0f;

1034 
vîãx
[2].
sow
=(
gl_ux
[2]*255.99f)/255.0f;

1035 
vîãx
[3].
sow
=(
gl_ux
[3]*255.99f)/255.0f;

1039 
vîãx
[0].
sow
=
gl_ux
[0];

1040 
vîãx
[1].
sow
=
gl_ux
[1];

1041 
vîãx
[2].
sow
=
gl_ux
[2];

1042 
vîãx
[3].
sow
=
gl_ux
[3];

1045 
vîãx
[0].
tow
=
gl_vy
[0];

1046 
vîãx
[1].
tow
=
gl_vy
[1];

1047 
vîãx
[2].
tow
=
gl_vy
[2];

1048 
vîãx
[3].
tow
=
gl_vy
[3];

1051 
	}
}

1053 
GLuöt
 
	ggLa°Tex
=0;

1054 
GLuöt
 
	ggLa°FMode
=(GLuint)-1;

1058 
	$assignTextuªS¥ôe
()

1060 if(
bUsögTWö
)

1062 
vîãx
[0].
sow
=vîãx[3].sow=()
gl_ux
[0]/
TWö
.
USˇÀFa˘‹
;

1063 
vîãx
[1].
sow
=vîãx[2].sow=()
sS¥ôe_ux2
/
TWö
.
USˇÀFa˘‹
;

1064 
vîãx
[0].
tow
=vîãx[1].tow=()
gl_vy
[0]/
TWö
.
VSˇÀFa˘‹
;

1065 
vîãx
[2].
tow
=vîãx[3].tow=()
sS¥ôe_vy2
/
TWö
.
VSˇÀFa˘‹
;

1066 
gLa°Tex
=
gTexName
;

1070 #ifde‡
OWNSCALE


1072 
vîãx
[0].
sow
=vîãx[3].sow=()
gl_ux
[0] / 
ST_FACSPRITE
;

1073 
vîãx
[1].
sow
=vîãx[2].sow=()
sS¥ôe_ux2
 / 
ST_FACSPRITE
;

1074 
vîãx
[0].
tow
=vîãx[1].tow=()
gl_vy
[0] / 
ST_FACSPRITE
;

1075 
vîãx
[2].
tow
=vîãx[3].tow=()
sS¥ôe_vy2
 / 
ST_FACSPRITE
;

1079 
vîãx
[0].
sow
=vîãx[3].sow=
gl_ux
[0];

1080 
vîãx
[1].
sow
=vîãx[2].sow=
sS¥ôe_ux2
;

1081 
vîãx
[0].
tow
=vîãx[1].tow=
gl_vy
[0];

1082 
vîãx
[2].
tow
=vîãx[3].tow=
sS¥ôe_vy2
;

1086 if(
iFûãrTy≥
>2)

1088 if(
gLa°Tex
!=
gTexName
 || 
gLa°FMode
!=0)

1090 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
GL_LINEAR
); 
	`glEº‹
();

1091 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
GL_LINEAR
); 
	`glEº‹
();

1092 
gLa°Tex
=
gTexName
;
gLa°FMode
=0;

1097 if(
usMúr‹
 & 0x1000)

1099 
vîãx
[0].
sow
=vertex[1].sow;

1100 
vîãx
[1].
sow
=vertex[2].sow=vertex[3].sow;

1101 
vîãx
[3].
sow
=vertex[0].sow;

1104 if(
usMúr‹
 & 0x2000)

1106 
vîãx
[0].
tow
=vertex[3].tow;

1107 
vîãx
[2].
tow
=vertex[3].tow=vertex[1].tow;

1108 
vîãx
[1].
tow
=vertex[0].tow;

1111 
	}
}

1115 
	$assignTextuª3
()

1117 if(
bUsögTWö
)

1119 
vîãx
[0].
sow
=()
gl_ux
[0]/
TWö
.
USˇÀFa˘‹
;

1120 
vîãx
[0].
tow
=()
gl_vy
[0]/
TWö
.
VSˇÀFa˘‹
;

1121 
vîãx
[1].
sow
=()
gl_ux
[1]/
TWö
.
USˇÀFa˘‹
;

1122 
vîãx
[1].
tow
=()
gl_vy
[1]/
TWö
.
VSˇÀFa˘‹
;

1123 
vîãx
[2].
sow
=()
gl_ux
[2]/
TWö
.
USˇÀFa˘‹
;

1124 
vîãx
[2].
tow
=()
gl_vy
[2]/
TWö
.
VSˇÀFa˘‹
;

1125 
gLa°Tex
=
gTexName
;

1129 #ifde‡
OWNSCALE


1130 
vîãx
[0].
sow
=()
gl_ux
[0] / 
ST_FACTRI
;

1131 
vîãx
[0].
tow
=()
gl_vy
[0] / 
ST_FACTRI
;

1132 
vîãx
[1].
sow
=()
gl_ux
[1] / 
ST_FACTRI
;

1134 
vîãx
[1].
tow
=()
gl_vy
[1] / 
ST_FACTRI
;

1135 
vîãx
[2].
sow
=()
gl_ux
[2] / 
ST_FACTRI
;

1136 
vîãx
[2].
tow
=()
gl_vy
[2] / 
ST_FACTRI
;

1138 
vîãx
[0].
sow
=
gl_ux
[0];

1139 
vîãx
[0].
tow
=
gl_vy
[0];

1140 
vîãx
[1].
sow
=
gl_ux
[1];

1141 
vîãx
[1].
tow
=
gl_vy
[1];

1142 
vîãx
[2].
sow
=
gl_ux
[2];

1143 
vîãx
[2].
tow
=
gl_vy
[2];

1146 if(
iFûãrTy≥
>2)

1148 if(
gLa°Tex
!=
gTexName
 || 
gLa°FMode
!=1)

1150 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
GL_LINEAR
); 
	`glEº‹
();

1151 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
GL_LINEAR
); 
	`glEº‹
();

1152 
gLa°Tex
=
gTexName
;
gLa°FMode
=1;

1156 if(
iFûãrTy≥
)

1158 
fxmö
=256.0f,
fxmax
=0.0f,
fymö
=256.0f,
fymax
=0.0f;
i
;

1159 
i
=0;i<3;i++)

1161 if(
vîãx
[
i
].
sow
<
fxmö
) fxmin=vertex[i].sow;

1162 if(
vîãx
[
i
].
tow
<
fymö
) fymin=vertex[i].tow;

1163 if(
vîãx
[
i
].
sow
>
fxmax
) fxmax=vertex[i].sow;

1164 if(
vîãx
[
i
].
tow
>
fymax
) fymax=vertex[i].tow;

1167 
i
=0;i<3;i++)

1169 if(
vîãx
[
i
].
sow
==
fxmö
Ëvîãx[i].sow+=
ST_BFFACSORT
;

1170 if(
vîãx
[
i
].
sow
==
fxmax
Ëvîãx[i].sow-=
ST_BFFACSORT
;

1171 if(
vîãx
[
i
].
tow
==
fymö
Ëvîãx[i].tow+=
ST_BFFACSORT
;

1172 if(
vîãx
[
i
].
tow
==
fymax
Ëvîãx[i].tow-=
ST_BFFACSORT
;

1176 
	}
}

1180 
	$assignTextuª4
()

1182 if(
bUsögTWö
)

1184 
vîãx
[0].
sow
=()
gl_ux
[0]/
TWö
.
USˇÀFa˘‹
;

1185 
vîãx
[0].
tow
=()
gl_vy
[0]/
TWö
.
VSˇÀFa˘‹
;

1186 
vîãx
[1].
sow
=()
gl_ux
[1]/
TWö
.
USˇÀFa˘‹
;

1187 
vîãx
[1].
tow
=()
gl_vy
[1]/
TWö
.
VSˇÀFa˘‹
;

1188 
vîãx
[2].
sow
=()
gl_ux
[2]/
TWö
.
USˇÀFa˘‹
;

1189 
vîãx
[2].
tow
=()
gl_vy
[2]/
TWö
.
VSˇÀFa˘‹
;

1190 
vîãx
[3].
sow
=()
gl_ux
[3]/
TWö
.
USˇÀFa˘‹
;

1191 
vîãx
[3].
tow
=()
gl_vy
[3]/
TWö
.
VSˇÀFa˘‹
;

1192 
gLa°Tex
=
gTexName
;

1196 #ifde‡
OWNSCALE


1197 
vîãx
[0].
sow
=()
gl_ux
[0] / 
ST_FAC
;

1198 
vîãx
[0].
tow
=()
gl_vy
[0] / 
ST_FAC
;

1199 
vîãx
[1].
sow
=()
gl_ux
[1] / 
ST_FAC
;

1200 
vîãx
[1].
tow
=()
gl_vy
[1] / 
ST_FAC
;

1201 
vîãx
[2].
sow
=()
gl_ux
[2] / 
ST_FAC
;

1202 
vîãx
[2].
tow
=()
gl_vy
[2] / 
ST_FAC
;

1203 
vîãx
[3].
sow
=()
gl_ux
[3] / 
ST_FAC
;

1204 
vîãx
[3].
tow
=()
gl_vy
[3] / 
ST_FAC
;

1206 
vîãx
[0].
sow
=
gl_ux
[0];

1207 
vîãx
[0].
tow
=
gl_vy
[0];

1208 
vîãx
[1].
sow
=
gl_ux
[1];

1209 
vîãx
[1].
tow
=
gl_vy
[1];

1210 
vîãx
[2].
sow
=
gl_ux
[2];

1211 
vîãx
[2].
tow
=
gl_vy
[2];

1212 
vîãx
[3].
sow
=
gl_ux
[3];

1213 
vîãx
[3].
tow
=
gl_vy
[3];

1216 if(
iFûãrTy≥
>2)

1218 if(
gLa°Tex
!=
gTexName
 || 
gLa°FMode
!=1)

1220 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
GL_LINEAR
); 
	`glEº‹
();

1221 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
GL_LINEAR
); 
	`glEº‹
();

1222 
gLa°Tex
=
gTexName
;
gLa°FMode
=1;

1226 if(
iFûãrTy≥
)

1228 
fxmö
=256.0f,
fxmax
=0.0f,
fymö
=256.0f,
fymax
=0.0f;
i
;

1229 
i
=0;i<4;i++)

1231 if(
vîãx
[
i
].
sow
<
fxmö
) fxmin=vertex[i].sow;

1232 if(
vîãx
[
i
].
tow
<
fymö
) fymin=vertex[i].tow;

1233 if(
vîãx
[
i
].
sow
>
fxmax
) fxmax=vertex[i].sow;

1234 if(
vîãx
[
i
].
tow
>
fymax
) fymax=vertex[i].tow;

1237 
i
=0;i<4;i++)

1239 if(
vîãx
[
i
].
sow
==
fxmö
Ëvîãx[i].sow+=
ST_BFFACSORT
;

1240 if(
vîãx
[
i
].
sow
==
fxmax
Ëvîãx[i].sow-=
ST_BFFACSORT
;

1241 if(
vîãx
[
i
].
tow
==
fymö
Ëvîãx[i].tow+=
ST_BFFACSORT
;

1242 if(
vîãx
[
i
].
tow
==
fymax
Ëvîãx[i].tow-=
ST_BFFACSORT
;

1246 
	}
}

1256 
	#EquÆRe˘
(
¥1
,
¥2
Ë(’r1)->
À·
==’r2)->À· && (¥1)->
t›
==’r2)->t› && (¥1)->
right
==’r2)->righà&& (¥1)->
bŸtom
==’r2)->bŸtom)

	)

1262 
BOOL
 
	gbSëClù
=
FALSE
;

1264 
	$SëOGLDi•œySëtögs
(
BOOL
 
Di•œySë
)

1266 
RECT
 
Ωªv
={0,0,0,0};

1267 
RECT
 
rC
 ={0,0,0,0};

1268 
iOldX
=0;

1269 
iOldY
=0;

1270 
RECT
 
r
;
XS
,
YS
;

1272 
bDi•œyNŸSë
 = 
FALSE
;

1275 if(!
Di•œySë
)

1277 
RECT
 
rX
;

1278 
PSXDi•œy
.
GDøwOff£t
.
x
=0;

1279 
PSXDi•œy
.
GDøwOff£t
.
y
=0;

1281 
PSXDi•œy
.
CumulOff£t
.
x
 = PSXDi•œy.
DøwOff£t
.x+
PªviousPSXDi•œy
.
R™ge
.
x0
;

1282 
PSXDi•œy
.
CumulOff£t
.
y
 = PSXDi•œy.
DøwOff£t
.y+
PªviousPSXDi•œy
.
R™ge
.
y0
;

1284 
Ωªv
.
À·
=rprev.left+1;

1286 
rX
=
rR©ioRe˘
;

1287 
rX
.
t›
=
iResY
-(
rR©ioRe˘
.t›+rR©ioRe˘.
bŸtom
);

1289 if(
bSëClù
 || !
	`EquÆRe˘
(&
rC
,&
rX
))

1291 
rC
=
rX
;

1292 
	`glSciss‹
(
rC
.
À·
,rC.
t›
,rC.
right
,rC.
bŸtom
); 
	`glEº‹
();

1294 
bSëClù
=
FALSE
;

1300 
PSXDi•œy
.
GDøwOff£t
.
y
 = 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.y;

1301 
PSXDi•œy
.
GDøwOff£t
.
x
 = 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.x;

1302 
PSXDi•œy
.
CumulOff£t
.
x
 = PSXDi•œy.
DøwOff£t
.x - PSXDi•œy.
GDøwOff£t
.x+
PªviousPSXDi•œy
.
R™ge
.
x0
;

1303 
PSXDi•œy
.
CumulOff£t
.
y
 = PSXDi•œy.
DøwOff£t
.y - PSXDi•œy.
GDøwOff£t
.y+
PªviousPSXDi•œy
.
R™ge
.
y0
;

1305 
r
.
t›
 =
PSXDi•œy
.
DøwAªa
.
y0
 - 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
;

1306 
r
.
bŸtom
=
PSXDi•œy
.
DøwAªa
.
y1
 - 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
;

1308 if(
r
.
bŸtom
<0 ||Ñ.
t›
>=
PSXDi•œy
.
Di•œyMode
.
y
)

1310 
r
.
t›
 =
PSXDi•œy
.
DøwAªa
.
y0
 - PSXDi•œy.
Di•œyPosôi⁄
.
y
;

1311 
r
.
bŸtom
=
PSXDi•œy
.
DøwAªa
.
y1
 - PSXDi•œy.
Di•œyPosôi⁄
.
y
;

1314 
r
.
À·
 =
PSXDi•œy
.
DøwAªa
.
x0
 - 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
;

1315 
r
.
right
 =
PSXDi•œy
.
DøwAªa
.
x1
 - 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
;

1317 if(
r
.
right
<0 ||Ñ.
À·
>=
PSXDi•œy
.
Di•œyMode
.
x
)

1319 
r
.
À·
 =
PSXDi•œy
.
DøwAªa
.
x0
 - PSXDi•œy.
Di•œyPosôi⁄
.
x
;

1320 
r
.
right
 =
PSXDi•œy
.
DøwAªa
.
x1
 - PSXDi•œy.
Di•œyPosôi⁄
.
x
;

1323 if(!
bSëClù
 && 
	`EquÆRe˘
(&
r
,&
Ωªv
) &&

1324 
iOldX
 =
PSXDi•œy
.
Di•œyMode
.
x
 &&

1325 
iOldY
 =
PSXDi•œy
.
Di•œyMode
.
y
)

1328 
Ωªv
 = 
r
;

1329 
iOldX
 = 
PSXDi•œy
.
Di•œyMode
.
x
;

1330 
iOldY
 = 
PSXDi•œy
.
Di•œyMode
.
y
;

1332 
XS
=()
rR©ioRe˘
.
right
/()
PSXDi•œy
.
Di•œyMode
.
x
;

1333 
YS
=()
rR©ioRe˘
.
bŸtom
/()
PSXDi•œy
.
Di•œyMode
.
y
;

1335 if(
PªviousPSXDi•œy
.
R™ge
.
x0
)

1337 
s
=
PªviousPSXDi•œy
.
R™ge
.
x0
+PªviousPSXDi•œy.R™ge.
x1
;

1339 
r
.
À·
+=
PªviousPSXDi•œy
.
R™ge
.
x0
+1;

1341 
r
.
right
+=
PªviousPSXDi•œy
.
R™ge
.
x0
;

1343 if(
r
.
À·
>
s
)Ñ.left=s;

1344 if(
r
.
right
>
s
)Ñ.right=s;

1347 if(
PªviousPSXDi•œy
.
R™ge
.
y0
)

1349 
s
=
PªviousPSXDi•œy
.
R™ge
.
y0
+PªviousPSXDi•œy.R™ge.
y1
;

1351 
r
.
t›
+=
PªviousPSXDi•œy
.
R™ge
.
y0
+1;

1352 
r
.
bŸtom
+=
PªviousPSXDi•œy
.
R™ge
.
y0
;

1354 if(
r
.
t›
>
s
)Ñ.top=s;

1355 if(
r
.
bŸtom
>
s
)Ñ.bottom=s;

1360 
r
.
À·
 = ()((()‘.À·)Ë*
XS
);

1361 
r
.
t›
 = ()((()‘.t›)Ë*
YS
);

1362 
r
.
right
 = ()((()‘.righà+ 1))*
XS
);

1363 
r
.
bŸtom
 = ()((()‘.bŸtom + 1))*
YS
);

1366 i‡(
r
.
À·
 > 
iResX
)Ñ.left = iResX;

1367 i‡(
r
.
À·
 < 0)Ñ.left = 0;

1368 i‡(
r
.
t›
 > 
iResY
)Ñ.top = iResY;

1369 i‡(
r
.
t›
 < 0)Ñ.top = 0;

1370 i‡(
r
.
right
 > 
iResX
)Ñ.right = iResX;

1371 i‡(
r
.
right
 < 0)Ñ.right = 0;

1372 i‡(
r
.
bŸtom
 > 
iResY
)Ñ.bottom = iResY;

1373 i‡(
r
.
bŸtom
 < 0)Ñ.bottom = 0;

1375 
r
.
right
 -Ù.
À·
;

1376 
r
.
bŸtom
-Ù.
t›
;

1377 
r
.
t›
=
iResY
-‘.t›+r.
bŸtom
);

1379 
r
.
À·
+=
rR©ioRe˘
.left;

1380 
r
.
t›
 -=
rR©ioRe˘
.top;

1382 if(
bSëClù
 || !
	`EquÆRe˘
(&
r
,&
rC
))

1384 
	`glSciss‹
(
r
.
À·
,r.
t›
,r.
right
,r.
bŸtom
); 
	`glEº‹
();

1386 
rC
=
r
;

1387 
bSëClù
=
FALSE
;

1389 
	}
}

	@plugins/gpu-gles/gpuDraw.h

27 #i‚de‡
_GL_DRAW_H_


28 
	#_GL_DRAW_H_


	)

31 #ifde‡
__˝lu•lus


40 
	#GPUCOMMAND
(
x
Ë((x>>24Ë& 0xff)

	)

41 
	#RED
(
x
Ë(x & 0xff)

	)

42 
	#BLUE
(
x
Ë((x>>16Ë& 0xff)

	)

43 
	#GREEN
(
x
Ë((x>>8Ë& 0xff)

	)

44 
	#COLOR
(
x
Ë(x & 0xffffff)

	)

48 #ifde‡
_WINDOWS


49 
BOOL
 
bSëupPixñF‹m©
(
HDC
 
hDC
);

52 
GLöôülize
(*
ext_gÀs_di•œy
, *
ext_gÀs_surÁ˚
);

53 
GL˛ónup
();

54 #ifde‡
_WINDOWS


55 
BOOL
 
off£t2
();

56 
BOOL
 
off£t3
();

57 
BOOL
 
off£t4
();

58 
BOOL
 
off£éöe
();

60 
off£t2
();

61 
off£t3
();

62 
off£t4
();

63 
off£éöe
();

65 
off£tST
();

66 
off£tBlk
();

67 
off£tS¸ìnU∂ﬂd
(
Posôi⁄
);

68 
assignTextuª3
();

69 
assignTextuª4
();

70 
assignTextuªS¥ôe
();

71 
assignTextuªVRAMWrôe
();

72 
SëOGLDi•œySëtögs
 (
Di•œySë
);

73 
RódC⁄fig
();

74 
WrôeC⁄fig
();

75 
SëExtGLFuncs
();

78 #ifde‡
__˝lu•lus


	@plugins/gpu-gles/gpuExternals.h

29 #i‚de‡
__GPU_EX__


30 
	#__GPU_EX__


	)

32 #ifde‡
__˝lu•lus


36 #ifde‡
__NANOGL__


37 
	~<gl/gl.h
>

38 
	~<gl/egl.h
>

40 
	~<GLES/gl.h
>

41 
	~<GLES/gÀxt.h
>

44 #i‚de‡
GL_BGRA_EXT


45 
	#GL_BGRA_EXT
 
GL_RGBA


47 

	)

48 #ifde‡
__NANOGL__


49 
	#glTexP¨amëîi
(
x
,
y
,
z
Ë
	`glTexP¨amëîf
(x,y,z)

	)

50 
	#glAÕhaFuncx
(
x
,
y
Ë
	`glAÕhaFunc
(x,y)

	)

51 #i‚de‡
APIENTRY


52 
	#APIENTRY


	)

54 –
APIENTRY
 * 
glPixñSt‹ei
 )(
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

58 
	#MIRROR_TEST
 1

	)

62 
	#SCISSOR_TEST
 1

	)

67 
	#OWNSCALE
 1

	)

71 
	#CLUTUSED
 0x80000000

	)

73 
	#SETCOL
(
x
Ëif(x.
c
.
lcﬁ
!=
ulOLDCOL
Ë{ulOLDCOL=x.c.lcﬁ;
	`glCﬁ‹4ub
(x.c.
cﬁ
[0],x.c.cﬁ[1],x.c.cﬁ[2],x.c.cﬁ[3]);}

	)

76 
	#INFO_TW
 0

	)

77 
	#INFO_DRAWSTART
 1

	)

78 
	#INFO_DRAWEND
 2

	)

79 
	#INFO_DRAWOFF
 3

	)

81 
	#SIGNSHIFT
 21

	)

82 
	#CHKMAX_X
 1024

	)

83 
	#CHKMAX_Y
 512

	)

89 
	#DR_NORMAL
 0

	)

90 
	#DR_VRAMTRANSFER
 1

	)

92 
	#GPUSTATUS_ODDLINES
 0x80000000

	)

93 
	#GPUSTATUS_DMABITS
 0x60000000

94 
	#GPUSTATUS_READYFORCOMMANDS
 0x10000000

	)

95 
	#GPUSTATUS_READYFORVRAM
 0x08000000

	)

96 
	#GPUSTATUS_IDLE
 0x04000000

	)

97 
	#GPUSTATUS_DISPLAYDISABLED
 0x00800000

	)

98 
	#GPUSTATUS_INTERLACED
 0x00400000

	)

99 
	#GPUSTATUS_RGB24
 0x00200000

	)

100 
	#GPUSTATUS_PAL
 0x00100000

	)

101 
	#GPUSTATUS_DOUBLEHEIGHT
 0x00080000

	)

102 
	#GPUSTATUS_WIDTHBITS
 0x00070000

103 
	#GPUSTATUS_MASKENABLED
 0x00001000

	)

104 
	#GPUSTATUS_MASKDRAWN
 0x00000800

	)

105 
	#GPUSTATUS_DRAWINGALLOWED
 0x00000400

	)

106 
	#GPUSTATUS_DITHER
 0x00000200

	)

108 
	#STATUSREG
 
lGPU°©usRë


	)

110 
	#GPUIsBusy
 (
STATUSREG
 &~
GPUSTATUS_IDLE
)

	)

111 
	#GPUIsIdÀ
 (
STATUSREG
 |
GPUSTATUS_IDLE
)

	)

113 
	#GPUIsNŸRódyF‹Comm™ds
 (
STATUSREG
 &~
GPUSTATUS_READYFORCOMMANDS
)

	)

114 
	#GPUIsRódyF‹Comm™ds
 (
STATUSREG
 |
GPUSTATUS_READYFORCOMMANDS
)

	)

118 
	#KEY_RESETTEXSTORE
 1

	)

119 
	#KEY_SHOWFPS
 2

	)

120 
	#KEY_RESETOPAQUE
 4

	)

121 
	#KEY_RESETDITHER
 8

	)

122 
	#KEY_RESETFILTER
 16

	)

123 
	#KEY_RESETADVBLEND
 32

	)

124 
	#KEY_BLACKWHITE
 64

	)

125 
	#KEY_TOGGLEFBTEXTURE
 128

	)

126 
	#KEY_STEPDOWN
 256

	)

127 
	#KEY_TOGGLEFBREAD
 512

	)

132 #i‚de‡
_WINDOWS


133 #i‚de‡
FALSE


134 
	#FALSE
 0

	)

136 #i‚de‡
TRUE


137 
	#TRUE
 1

	)

139 #i‚de‡
BOOL


140 
	#BOOL
 

	)

142 #i‚de‡
boﬁ


143 
	#boﬁ
 

	)

145 
	#LOWORD
(
l
Ë(()÷))

	)

146 
	#HIWORD
(
l
Ë(()((()÷Ë>> 16Ë& 0xFFFF))

	)

147 
	#max
(
a
,
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

148 
	#mö
(
a
,
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

149 
	#DWORD
 

	)

151 
	sRECTTAG


153 
	gÀ·
;

154 
	gt›
;

155 
	gright
;

156 
	gbŸtom
;

157 }
	tRECT
;

163 
	sVRAMLOADTAG


165 
	gx
;

166 
	gy
;

167 
	gWidth
;

168 
	gHeight
;

169 
	gRowsRemaöög
;

170 
	gCﬁsRemaöög
;

171 *
	gImagePå
;

172 } 
	tVRAMLﬂd_t
;

174 
	sPSXPOINTTAG


176 
	gx
;

177 
	gy
;

178 } 
	tPSXPoöt_t
;

180 
	sPSXSPOINTTAG


182 
	gx
;

183 
	gy
;

184 } 
	tPSXSPoöt_t
;

186 
	sPSXRECTTAG


188 
	gx0
;

189 
	gx1
;

190 
	gy0
;

191 
	gy1
;

192 } 
	tPSXRe˘_t
;

196 
	sTWINTAG


198 
PSXRe˘_t
 
	gPosôi⁄
;

199 
PSXRe˘_t
 
	gOPosôi⁄
;

200 
PSXPoöt_t
 
	gTextuªSize
;

201 
	gUSˇÀFa˘‹
;

202 
	gVSˇÀFa˘‹
;

203 } 
	tTWö_t
;

207 
	sPSXDISPLAYTAG


209 
PSXPoöt_t
 
	gDi•œyModeNew
;

210 
PSXPoöt_t
 
	gDi•œyMode
;

211 
PSXPoöt_t
 
	gDi•œyPosôi⁄
;

212 
PSXPoöt_t
 
	gDi•œyEnd
;

214 
	gDoubÀ
;

215 
	gHeight
;

216 
	gPAL
;

217 
	gI¡îœ˚dNew
;

218 
	gI¡îœ˚d
;

219 
	gI¡îœ˚dTe°
;

220 
	gRGB24New
;

221 
	gRGB24
;

222 
PSXSPoöt_t
 
	gDøwOff£t
;

223 
PSXRe˘_t
 
	gDøwAªa
;

224 
PSXPoöt_t
 
	gGDøwOff£t
;

225 
PSXPoöt_t
 
	gCumulOff£t
;

226 
	gDißbÀd
;

227 
PSXRe˘_t
 
	gR™ge
;

228 } 
	tPSXDi•œy_t
;

232 
	sOGLVîãxTag


234 
GLÊﬂt
 
	gx
;

235 
GLÊﬂt
 
	gy
;

236 
GLÊﬂt
 
	gz
;

238 
GLÊﬂt
 
	gsow
;

239 
GLÊﬂt
 
	gtow
;

242 
	uCOLTAG


244 
	gcﬁ
[4];

245 
	glcﬁ
;

246 } 
	gc
;

248 } 
	tOGLVîãx
;

250 
	uEXSh‹tTag


252 
	gc
[2];

253 
	gs
;

254 } 
	tEXSh‹t
;

256 
	uEXL⁄gTag


258 
	gc
[4];

259 
	gl
;

260 
EXSh‹t
 
	gs
[2];

261 } 
	tEXL⁄g
;

266 #ifde‡
_WINDOWS


268 
HINSTANCE
 
hIn°
;

274 #i‚de‡
_IN_DRAW


276 
iResX
;

277 
iResY
;

278 
BOOL
 
bKìpR©io
;

279 
RECT
 
rR©ioRe˘
;

280 
BOOL
 
bO∑quePass
;

281 
BOOL
 
bAdv™˚dBÀnd
;

286 
gl_ux
[8];

287 
gl_vy
[8];

288 
OGLVîãx
 
vîãx
[4];

289 
•πY
,
•πX
,
•πH
,
•πW
;

290 #ifde‡
_WINDOWS


291 
HWND
 
hWWödow
;

293 
BOOL
 
bIsFú°Føme
;

294 
iWöSize
;

295 
iZBuf„rDïth
;

296 
GLbôfõld
 
uiBuf„rBôs
;

297 
iU£Mask
;

298 
iSëMask
;

299 
iDïthFunc
;

300 
BOOL
 
bCheckMask
;

301 
sSëMask
;

302 
lSëMask
;

303 
BOOL
 
bSëClù
;

304 
GLuöt
 
gTexSˇnName
;

310 #i‚de‡
_IN_SOFT


312 
GlobÆTextAddrX
,
GlobÆTextAddrY
,
GlobÆTextTP
;

313 
GlobÆTextREST
,
GlobÆTextABR
,
GlobÆTextPAGE
;

314 
ly0
,
lx0
,
ly1
,
lx1
,
ly2
,
lx2
,
ly3
,
lx3
;

315 
g_m1
;

316 
g_m2
;

317 
g_m3
;

318 
DøwSemiTøns
;

324 #i‚de‡
_IN_PRIMDRAW


326 
BOOL
 
bNìdU∂ﬂdTe°
;

327 
BOOL
 
bNìdU∂ﬂdA·î
;

328 
BOOL
 
bTexE«bÀd
;

329 
BOOL
 
bBÀndE«bÀ
;

330 
BOOL
 
bDøwDôhî
;

331 
iFûãrTy≥
;

332 
BOOL
 
bFuŒVRam
;

333 
BOOL
 
bU£Mu…iPass
;

334 
iOffs¸ìnDøwög
;

335 
BOOL
 
bOldSmoŸhShaded
;

336 
BOOL
 
bUsögTWö
;

337 
BOOL
 
bUsögMovõ
;

338 
PSXRe˘_t
 
xrMovõAªa
;

339 
PSXRe˘_t
 
xrU∂ﬂdAªa
;

340 
PSXRe˘_t
 
xrU∂ﬂdAªaIL
;

341 
PSXRe˘_t
 
xrU∂ﬂdAªaRGB24
;

342 
GLuöt
 
gTexName
;

343 
BOOL
 
bDøwN⁄Shaded
;

344 
BOOL
 
bDøwMu…iPass
;

345 
GLubyã
 
ubGloCﬁAÕha
;

346 
GLubyã
 
ubGloAÕha
;

347 
sS¥ôe_ux2
;

348 
sS¥ôe_vy2
;

349 
BOOL
 
bRídîFr⁄tBuf„r
;

350 
ulOLDCOL
;

351 
ulClutID
;

352 (*
¥imTabÀJ
[256])(*);

353 (*
¥imTabÀSkù
[256])(*);

354 
usMúr‹
;

355 
dwCfgFixes
;

356 
dwA˘Fixes
;

357 
dwEmuFixes
;

358 
BOOL
 
bU£Fixes
;

359 
iS¥ôeTex
;

360 
iDøwnSomëhög
;

362 
døwX
;

363 
døwY
;

364 
døwW
;

365 
døwH
;

366 
sxmö
;

367 
sxmax
;

368 
symö
;

369 
symax
;

371 
CSVERTEX
;

372 
CSCOLOR
;

373 
CSTEXTURE
;

379 #i‚de‡
_IN_TEXTURE


381 
ubO∑queDøw
;

382 
GLöt
 
giW™ãdRGBA
;

383 
GLöt
 
giW™ãdFMT
;

384 
GLöt
 
giW™ãdTYPE
;

385 (*
LﬂdSubTexFn
) (,,,);

386 
GlobÆTextuªPage
;

387 (*
TCF
[]) ();

388 (*
PTCF
[]) ();

389 (*
PÆTextuªdCﬁourFn
) ();

390 
BOOL
 
bU£Fa°Mdec
;

391 
BOOL
 
bU£15bôMdec
;

392 
iFømeTexTy≥
;

393 
iFømeRódTy≥
;

394 
iCœmpTy≥
;

395 
iS‹tTexC¡
;

396 
BOOL
 
bFakeFr⁄tBuf„r
;

397 
GLuöt
 
gTexFømeName
;

398 
GLuöt
 
gTexBlurName
;

399 
iVRamSize
;

400 
iTexG¨bageCﬁÀ˘i⁄
;

401 
iFTexA
;

402 
iFTexB
;

403 
BOOL
 
bIgn‹eNextTûe
;

410 #i‚de‡
_IN_GPU


412 
VRAMLﬂd_t
 
VRAMWrôe
;

413 
VRAMLﬂd_t
 
VRAMRód
;

414 
iD©aWrôeMode
;

415 
iD©aRódMode
;

416 
iCﬁDïth
;

417 
BOOL
 
bCh™geRes
;

418 
BOOL
 
bWödowMode
;

419 
szDi•Buf
[];

420 
szGPUKeys
[];

421 
PSXDi•œy_t
 
PSXDi•œy
;

422 
PSXDi•œy_t
 
PªviousPSXDi•œy
;

424 
TWö_t
 
TWö
;

425 
BOOL
 
bDi•œyNŸSë
;

426 
lGPU°©usRë
;

427 
imageX0
,
imageX1
;

428 
imageY0
,
imageY1
;

429 
lCÀ¨OnSw≠
,
lCÀ¨OnSw≠Cﬁ‹
;

430 * 
psxVub
;

431 * 
psxVsb
;

432 * 
psxVuw
;

433 sig√d * 
psxVsw
;

434 * 
psxVul
;

435 sig√d * 
psxV¶
;

436 
GLÊﬂt
 
gl_z
;

437 
BOOL
 
bNìdRGB24Upd©e
;

438 
BOOL
 
bCh™geWöMode
;

439 
GLuöt
 
uiSˇnLöe
;

440 
iU£SˇnLöes
;

441 
lSñe˘edSlŸ
;

442 
iSˇnBÀnd
;

443 
BOOL
 
bInôC≠
;

444 
iBlurBuf„r
;

445 
iLa°RGB24
;

446 
iRídîFVR
;

447 
iNoS¸ìnSavî
;

448 
ulGPUInfoVÆs
[];

449 
BOOL
 
bNìdI¡îœ˚Upd©e
;

450 
BOOL
 
bNìdWrôeU∂ﬂd
;

451 
BOOL
 
bSkùNextFøme
;

454 #i‚de‡
_WINDOWS


455 
bFuŒS¸ìn
;

462 #i‚de‡
_IN_MENU


465 
GLuöt
 
gTexPicName
;

473 #i‚de‡
_IN_CFG


475 #i‚de‡
_WINDOWS


476 * 
pC⁄figFûe
;

483 #i‚de‡
_IN_FPS


485 
BOOL
 
bU£FømeLimô
;

486 
BOOL
 
bU£FømeSkù
;

487 
fFømeR©e
;

488 
fFømeR©eHz
;

489 
iFømeLimô
;

490 
Âs_skù
;

491 
Âs_cur
;

498 
	gr
;

499 
	gg
;

500 
	gb
;

501 
	ga
;

502 } 
	tVec4f
;

506 
	gx
;

507 
	gy
;

508 
	gz
;

509 } 
	tVec3f
;

512 
	gx
;

513 
	gy
;

514 } 
	tVec2f
;

530 
Vec3f
 
	gxyz
;

531 
Vec2f
 
	g°
;

532 } 
	tVîãx
;

535 
Vec3f
 
	gxyz
;

536 
Vec2f
 
	g°
;

537 
Vec4f
 
	grgba
;

538 } 
	tVîãx2
;

540 #i‚de‡
_IN_KEY


548 #i‚de‡
_IN_ZN


550 
dwGPUVîsi⁄
;

551 
iGPUHeight
;

552 
iGPUHeightMask
;

553 
GlobÆTextIL
;

554 
iTûeChót
;

558 #ifde‡
__˝lu•lus


	@plugins/gpu-gles/gpuFps.c

27 #ifde‡
_WINDOWS


28 
	~"Stdafx.h
"

29 
	~"Exã∫Æs.h
"

30 
	~"∂ugö.h
"

31 
	~"Fps.h
"

32 
	~"Prim.h
"

34 
	~"gpuStdafx.h
"

35 
	~"gpuExã∫Æs.h
"

37 
	~"gpuFps.h
"

38 
	~"gpuPrim.h
"

41 
	#_IN_FPS


	)

43 
	#CALLBACK


	)

48 #ifde‡
_WINDOWS


49 
LARGE_INTEGER
 
	gliCPUFªquícy
;

56 
BOOL
 
	gbIsPîf‹m™˚Cou¡î
;

57 
	gfFømeR©eHz
;

58 
DWORD
 
	gdwFømeR©eTicks
;

59 
	gfFømeR©e
;

60 
	giFømeLimô
;

61 
BOOL
 
	gbU£FømeLimô
;

62 
BOOL
 
	gbU£FømeSkù
;

63 
DWORD
 
	gdwLa˚C¡
;

65 
BOOL
 
	gbInôC≠
;

66 
	gÂs_skù
;

67 
	gÂs_cur
;

69 #ifde‡
_WINDOWS


71 
	$FømeC≠
 ()

73 
DWORD
 
cuπicks
, 
œ°ticks
, 
_ticks_sö˚_œ°_upd©e
;

74 
DWORD
 
TicksToWaô
 = 0;

75 
LARGE_INTEGER
 
CuºítTime
;

76 
LARGE_INTEGER
 
La°Time
;

77 
BOOL
 
SkùNextWaô
 = 
FALSE
;

78 
BOOL
 
Waôög
 = 
TRUE
;

86 if(
bInôC≠
)

88 
bInôC≠
=
FALSE
;

89 i‡(
bIsPîf‹m™˚Cou¡î
)

90 
	`QuîyPîf‹m™˚Cou¡î
(&
La°Time
);

91 
œ°ticks
 = 
	`timeGëTime
();

92 
TicksToWaô
=0;

98 if(
bIsPîf‹m™˚Cou¡î
)

100 
	`QuîyPîf‹m™˚Cou¡î
(&
CuºítTime
);

101 
_ticks_sö˚_œ°_upd©e
 = 
CuºítTime
.
LowP¨t
 - 
La°Time
.LowPart;

107 
cuπicks
 = 
	`timeGëTime
();

108 if(
_ticks_sö˚_œ°_upd©e
>(
liCPUFªquícy
.
LowP¨t
>>1))

110 if(
cuπicks
 < 
œ°ticks
)

111 
_ticks_sö˚_œ°_upd©e
 = 
dwFømeR©eTicks
+
TicksToWaô
+1;

112 
_ticks_sö˚_œ°_upd©e
 = (
liCPUFªquícy
.
LowP¨t
 * (
cuπicks
 - 
œ°ticks
))/1000;

117 i‡((
_ticks_sö˚_œ°_upd©e
 > 
TicksToWaô
) ||

118 (
CuºítTime
.
LowP¨t
 < 
La°Time
.LowPart))

120 
La°Time
.
HighP¨t
 = 
CuºítTime
.HighPart;

121 
La°Time
.
LowP¨t
 = 
CuºítTime
.LowPart;

123 
œ°ticks
=
cuπicks
;

125 if((
_ticks_sö˚_œ°_upd©e
-
TicksToWaô
Ë> 
dwFømeR©eTicks
)

126 
TicksToWaô
=0;

127 
TicksToWaô
=
dwFømeR©eTicks
-(
_ticks_sö˚_œ°_upd©e
-TicksToWait);

131 
Waôög
)

133 
	`QuîyPîf‹m™˚Cou¡î
(&
CuºítTime
);

134 
_ticks_sö˚_œ°_upd©e
 = 
CuºítTime
.
LowP¨t
 - 
La°Time
.LowPart;

139 
cuπicks
 = 
	`timeGëTime
();

140 if(
_ticks_sö˚_œ°_upd©e
>(
liCPUFªquícy
.
LowP¨t
>>1))

142 if(
cuπicks
 < 
œ°ticks
)

143 
_ticks_sö˚_œ°_upd©e
 = 
TicksToWaô
+1;

144 
_ticks_sö˚_œ°_upd©e
 = (
liCPUFªquícy
.
LowP¨t
 * (
cuπicks
 - 
œ°ticks
))/1000;

148 i‡((
_ticks_sö˚_œ°_upd©e
 > 
TicksToWaô
) ||

149 (
CuºítTime
.
LowP¨t
 < 
La°Time
.LowPart))

151 
Waôög
 = 
FALSE
;

153 
œ°ticks
=
cuπicks
;

155 
La°Time
.
HighP¨t
 = 
CuºítTime
.HighPart;

156 
La°Time
.
LowP¨t
 = 
CuºítTime
.LowPart;

157 
TicksToWaô
 = 
dwFømeR©eTicks
;

164 
cuπicks
 = 
	`timeGëTime
();

165 
_ticks_sö˚_œ°_upd©e
 = 
cuπicks
 - 
œ°ticks
;

167 i‡((
_ticks_sö˚_œ°_upd©e
 > 
TicksToWaô
) ||

168 (
cuπicks
 < 
œ°ticks
))

170 
œ°ticks
 = 
cuπicks
;

172 if((
_ticks_sö˚_œ°_upd©e
-
TicksToWaô
Ë> 
dwFømeR©eTicks
)

173 
TicksToWaô
=0;

174 
TicksToWaô
=
dwFømeR©eTicks
-(
_ticks_sö˚_œ°_upd©e
-TicksToWait);

178 
Waôög
)

180 
cuπicks
 = 
	`timeGëTime
();

181 
_ticks_sö˚_œ°_upd©e
 = 
cuπicks
 - 
œ°ticks
;

182 i‡((
_ticks_sö˚_œ°_upd©e
 > 
TicksToWaô
) ||

183 (
cuπicks
 < 
œ°ticks
))

185 
Waôög
 = 
FALSE
;

186 
œ°ticks
 = 
cuπicks
;

187 
TicksToWaô
 = 
dwFømeR©eTicks
;

192 
	}
}

196 
	#MAXSKIP
 120

	)

197 
	#MAXLACE
 16

	)

199 
	$FømeSkù
()

201 
iNumSkùs
=0,
iAddôi⁄ÆSkù
=0;

202 
DWORD
 
dwLa°La˚
=0;

203 
DWORD
 
cuπicks
, 
œ°ticks
, 
_ticks_sö˚_œ°_upd©e
;

204 
LARGE_INTEGER
 
CuºítTime
;

205 
LARGE_INTEGER
 
La°Time
;

207 if(!
dwLa˚C¡
) ;

209 if(
iNumSkùs
)

211 
dwLa°La˚
+=
dwLa˚C¡
;

212 
bSkùNextFøme
 = 
TRUE
;

213 
iNumSkùs
--;

217 
DWORD
 
dwWaôTime
;

219 if(
bInôC≠
 || 
bSkùNextFøme
)

221 if(
bU£FømeLimô
 && !
bInôC≠
)

223 
DWORD
 
dwT
=
_ticks_sö˚_œ°_upd©e
;

224 
dwLa°La˚
+=
dwLa˚C¡
;

226 if(
bIsPîf‹m™˚Cou¡î
)

228 
	`QuîyPîf‹m™˚Cou¡î
(&
CuºítTime
);

229 
_ticks_sö˚_œ°_upd©e

dwT
+
CuºítTime
.
LowP¨t
 - 
La°Time
.LowPart;

233 
cuπicks
 = 
	`timeGëTime
();

234 
_ticks_sö˚_œ°_upd©e

dwT
+
cuπicks
 - 
œ°ticks
;

237 
dwWaôTime
=
dwLa°La˚
*
dwFømeR©eTicks
;

239 if(
_ticks_sö˚_œ°_upd©e
<
dwWaôTime
)

241 if((
dwWaôTime
-
_ticks_sö˚_œ°_upd©e
)>

242 (60*
dwFømeR©eTicks
))

243 
_ticks_sö˚_œ°_upd©e
=
dwWaôTime
;

245 
_ticks_sö˚_œ°_upd©e
<
dwWaôTime
)

247 if(
bIsPîf‹m™˚Cou¡î
)

249 
	`QuîyPîf‹m™˚Cou¡î
(&
CuºítTime
);

250 
_ticks_sö˚_œ°_upd©e
 = 
dwT
+
CuºítTime
.
LowP¨t
 - 
La°Time
.LowPart;

254 
cuπicks
 = 
	`timeGëTime
();

255 
_ticks_sö˚_œ°_upd©e
 = 
dwT
+
cuπicks
 - 
œ°ticks
;

261 if(
iAddôi⁄ÆSkù
<
MAXSKIP
)

263 
iAddôi⁄ÆSkù
++;

264 
dwLa˚C¡
=0;

265 if(
bIsPîf‹m™˚Cou¡î
)

266 
	`QuîyPîf‹m™˚Cou¡î
(&
La°Time
);

267 
œ°ticks
 = 
	`timeGëTime
();

273 
bInôC≠
=
FALSE
;

274 
iAddôi⁄ÆSkù
=0;

275 
bSkùNextFøme
=
FALSE
;

276 if(
bIsPîf‹m™˚Cou¡î
)

277 
	`QuîyPîf‹m™˚Cou¡î
(&
La°Time
);

278 
œ°ticks
 = 
	`timeGëTime
();

279 
dwLa˚C¡
=0;

280 
dwLa°La˚
=0;

281 
_ticks_sö˚_œ°_upd©e
=0;

285 
bSkùNextFøme
=
FALSE
;

287 if(
bIsPîf‹m™˚Cou¡î
)

289 
	`QuîyPîf‹m™˚Cou¡î
(&
CuºítTime
);

290 
_ticks_sö˚_œ°_upd©e
 = 
CuºítTime
.
LowP¨t
 - 
La°Time
.LowPart;

294 
cuπicks
 = 
	`timeGëTime
();

295 
_ticks_sö˚_œ°_upd©e
 = 
cuπicks
 - 
œ°ticks
;

298 
dwLa°La˚
=
dwLa˚C¡
;

299 
dwWaôTime
=
dwLa˚C¡
*
dwFømeR©eTicks
;

301 if(
_ticks_sö˚_œ°_upd©e
>
dwWaôTime
)

303 if(
bU£FømeLimô
)

305 
iNumSkùs
=0;

309 
iNumSkùs
=
_ticks_sö˚_œ°_upd©e
/
dwWaôTime
;

310 
iNumSkùs
--;

311 if(
iNumSkùs
>
MAXSKIP
) iNumSkips=MAXSKIP;

313 
bSkùNextFøme
 = 
TRUE
;

316 if(
bU£FømeLimô
)

318 if(
dwLa˚C¡
>
MAXLACE
)

319 
_ticks_sö˚_œ°_upd©e
=
dwWaôTime
;

321 
_ticks_sö˚_œ°_upd©e
<
dwWaôTime
)

323 if(
bIsPîf‹m™˚Cou¡î
)

325 
	`QuîyPîf‹m™˚Cou¡î
(&
CuºítTime
);

326 
_ticks_sö˚_œ°_upd©e
 = 
CuºítTime
.
LowP¨t
 - 
La°Time
.LowPart;

330 
cuπicks
 = 
	`timeGëTime
();

331 
_ticks_sö˚_œ°_upd©e
 = 
cuπicks
 - 
œ°ticks
;

336 if(
bIsPîf‹m™˚Cou¡î
)

337 
	`QuîyPîf‹m™˚Cou¡î
(&
La°Time
);

338 
œ°ticks
 = 
	`timeGëTime
();

341 
dwLa˚C¡
=0;

342 
	}
}

346 
	$ˇlcÂs
()

348 
DWORD
 
cuπicks
,
_ticks_sö˚_œ°_upd©e
,
œ°ticks
;

349 
Âs_˙t
 = 0;

350 
DWORD
 
Âs_tck
 = 1;

351 
LARGE_INTEGER
 
CuºítTime
;

352 
LARGE_INTEGER
 
La°Time
;

353 
Âsskù_˙t
 = 0;

354 
DWORD
 
Âsskù_tck
 = 1;

356 if(
bIsPîf‹m™˚Cou¡î
)

358 
	`QuîyPîf‹m™˚Cou¡î
(&
CuºítTime
);

359 
_ticks_sö˚_œ°_upd©e
=
CuºítTime
.
LowP¨t
-
La°Time
.LowPart;

362 
cuπicks
 = 
	`timeGëTime
();

363 if(
_ticks_sö˚_œ°_upd©e
>(
liCPUFªquícy
.
LowP¨t
>>1))

364 
_ticks_sö˚_œ°_upd©e
 = (
liCPUFªquícy
.
LowP¨t
 * (
cuπicks
 - 
œ°ticks
))/1000;

365 
œ°ticks
=
cuπicks
;

368 if(
bU£FømeSkù
 && !
bU£FømeLimô
 && 
_ticks_sö˚_œ°_upd©e
)

369 
Âs_skù
=
	`mö
(Âs_skù,((()
liCPUFªquícy
.
LowP¨t
Ë/ (()
_ticks_sö˚_œ°_upd©e
) +1.0f));

371 
La°Time
.
HighP¨t
 = 
CuºítTime
.HighPart;

372 
La°Time
.
LowP¨t
 = 
CuºítTime
.LowPart;

376 
cuπicks
 = 
	`timeGëTime
();

377 
_ticks_sö˚_œ°_upd©e
=
cuπicks
-
œ°ticks
;

379 if(
bU£FømeSkù
 && !
bU£FømeLimô
 && 
_ticks_sö˚_œ°_upd©e
)

380 
Âs_skù
=
	`mö
(Âs_skù,(()1000/()
_ticks_sö˚_œ°_upd©e
+1.0f));

382 
œ°ticks
 = 
cuπicks
;

385 if(
bU£FømeSkù
 && 
bU£FømeLimô
)

387 
Âsskù_tck
 +
_ticks_sö˚_œ°_upd©e
;

389 if(++
Âsskù_˙t
==2)

391 if(
bIsPîf‹m™˚Cou¡î
)

392 
Âs_skù
 = (()
liCPUFªquícy
.
LowP¨t
Ë/ (()
Âsskù_tck
) *2.0f;

394 
Âs_skù
 = ()2000/()
Âsskù_tck
;

396 
Âs_skù
 +=6.0f;

398 
Âsskù_˙t
 = 0;

399 
Âsskù_tck
 = 1;

403 
Âs_tck
 +
_ticks_sö˚_œ°_upd©e
;

405 if(++
Âs_˙t
==10)

407 if(
bIsPîf‹m™˚Cou¡î
)

408 
Âs_cur
 = (()
liCPUFªquícy
.
LowP¨t
Ë/ (()
Âs_tck
) *10.0f;

410 
Âs_cur
 = ()10000/()
Âs_tck
;

412 
Âs_˙t
 = 0;

413 
Âs_tck
 = 1;

415 if(
bU£FømeLimô
 && 
Âs_cur
>
fFømeR©eHz
)

416 
Âs_cur
=
fFømeR©eHz
;

418 
	}
}

424 
	$PCFømeC≠
()

426 
DWORD
 
cuπicks
, 
œ°ticks
, 
_ticks_sö˚_œ°_upd©e
;

427 
DWORD
 
TicksToWaô
 = 0;

428 
LARGE_INTEGER
 
CuºítTime
;

429 
LARGE_INTEGER
 
La°Time
;

430 
BOOL
 
Waôög
 = 
TRUE
;

432 
Waôög
)

434 if(
bIsPîf‹m™˚Cou¡î
)

436 
	`QuîyPîf‹m™˚Cou¡î
(&
CuºítTime
);

437 
_ticks_sö˚_œ°_upd©e
 = 
CuºítTime
.
LowP¨t
 - 
La°Time
.LowPart;

440 
cuπicks
 = 
	`timeGëTime
();

441 if(
_ticks_sö˚_œ°_upd©e
>(
liCPUFªquícy
.
LowP¨t
>>1))

443 if(
cuπicks
 < 
œ°ticks
)

444 
_ticks_sö˚_œ°_upd©e
 = 
TicksToWaô
+1;

445 
_ticks_sö˚_œ°_upd©e
 = (
liCPUFªquícy
.
LowP¨t
 * (
cuπicks
 - 
œ°ticks
))/1000;

449 i‡((
_ticks_sö˚_œ°_upd©e
 > 
TicksToWaô
) ||

450 (
CuºítTime
.
LowP¨t
 < 
La°Time
.LowPart))

452 
Waôög
 = 
FALSE
;

454 
œ°ticks
=
cuπicks
;

456 
La°Time
.
HighP¨t
 = 
CuºítTime
.HighPart;

457 
La°Time
.
LowP¨t
 = 
CuºítTime
.LowPart;

458 
TicksToWaô
 = (
liCPUFªquícy
.
LowP¨t
 / 
fFømeR©eHz
);

463 
cuπicks
 = 
	`timeGëTime
();

464 
_ticks_sö˚_œ°_upd©e
 = 
cuπicks
 - 
œ°ticks
;

465 i‡((
_ticks_sö˚_œ°_upd©e
 > 
TicksToWaô
) ||

466 (
cuπicks
 < 
œ°ticks
))

468 
Waôög
 = 
FALSE
;

469 
œ°ticks
 = 
cuπicks
;

470 
TicksToWaô
 = (1000 / (
DWORD
)
fFømeR©eHz
);

474 
	}
}

478 
	$PCˇlcÂs
()

480 
DWORD
 
cuπicks
,
_ticks_sö˚_œ°_upd©e
,
œ°ticks
;

481 
Âs_˙t
 = 0;

482 
Âs_acc
 = 0;

483 
LARGE_INTEGER
 
CuºítTime
;

484 
LARGE_INTEGER
 
La°Time
;

485 
CuºítFPS
=0;

487 if(
bIsPîf‹m™˚Cou¡î
)

489 
	`QuîyPîf‹m™˚Cou¡î
(&
CuºítTime
);

490 
_ticks_sö˚_œ°_upd©e
=
CuºítTime
.
LowP¨t
-
La°Time
.LowPart;

493 
cuπicks
 = 
	`timeGëTime
();

494 if(
_ticks_sö˚_œ°_upd©e
>(
liCPUFªquícy
.
LowP¨t
>>1))

495 
_ticks_sö˚_œ°_upd©e
 = (
liCPUFªquícy
.
LowP¨t
 * (
cuπicks
 - 
œ°ticks
))/1000;

496 
œ°ticks
=
cuπicks
;

499 if(
_ticks_sö˚_œ°_upd©e
)

501 
CuºítFPS
 = (()
liCPUFªquícy
.
LowP¨t
Ë/ (()
_ticks_sö˚_œ°_upd©e
);

503 
CuºítFPS
 = 0;

504 
La°Time
.
HighP¨t
 = 
CuºítTime
.HighPart;

505 
La°Time
.
LowP¨t
 = 
CuºítTime
.LowPart;

509 
cuπicks
 = 
	`timeGëTime
();

510 if(
_ticks_sö˚_œ°_upd©e
=
cuπicks
-
œ°ticks
)

511 
CuºítFPS
=()1000/()
_ticks_sö˚_œ°_upd©e
;

512 
CuºítFPS
 = 0;

513 
œ°ticks
 = 
cuπicks
;

516 
Âs_acc
 +
CuºítFPS
;

518 if(++
Âs_˙t
==10)

520 
Âs_cur
 = 
Âs_acc
 / 10;

521 
Âs_acc
 = 0;

522 
Âs_˙t
 = 0;

525 
Âs_skù
=
CuºítFPS
+1.0f;

526 
	}
}

530 
	$SëAutoFømeC≠
()

532 if(
iFømeLimô
==1)

534 
fFømeR©eHz
 = 
fFømeR©e
;

535 if(
bIsPîf‹m™˚Cou¡î
)

536 
dwFømeR©eTicks
=(
liCPUFªquícy
.
LowP¨t
 / 
fFømeR©eHz
);

537 
dwFømeR©eTicks
=(1000 / (
DWORD
)
fFømeR©eHz
);

541 if(
dwA˘Fixes
&128)

543 i‡(
PSXDi•œy
.
I¡îœ˚d
)

544 
fFømeR©eHz
 = 
PSXDi•œy
.
PAL
?50.0f:60.0f;

545 
fFømeR©eHz
 = 
PSXDi•œy
.
PAL
?25.0f:30.0f;

551 if(
PSXDi•œy
.
PAL
)

553 i‡(
STATUSREG
&
GPUSTATUS_INTERLACED
)

554 
fFømeR©eHz
=33868800.0f/677343.75f;

555 
fFømeR©eHz
=33868800.0f/680595.00f;

559 i‡(
STATUSREG
&
GPUSTATUS_INTERLACED
)

560 
fFømeR©eHz
=33868800.0f/565031.25f;

561 
fFømeR©eHz
=33868800.0f/566107.50f;

564 if(
bIsPîf‹m™˚Cou¡î
)

565 
dwFømeR©eTicks
=(
liCPUFªquícy
.
LowP¨t
 / 
fFømeR©eHz
);

566 
dwFømeR©eTicks
=(1000 / (
DWORD
)
fFømeR©eHz
);

568 
	}
}

572 
	$InôFømeC≠
()

574 i‡(
	`QuîyPîf‹m™˚Fªquícy
 (&
liCPUFªquícy
))

575 
bIsPîf‹m™˚Cou¡î
 = 
TRUE
;

576 
bIsPîf‹m™˚Cou¡î
 = 
FALSE
;

577 
	}
}

581 
	$ReInôFømeC≠
()

583 
BOOL
 
bOldPîf‹m™˚Cou¡î
=
bIsPîf‹m™˚Cou¡î
;

585 if(
dwA˘Fixes
&0x10000)

586 
bIsPîf‹m™˚Cou¡î
=
FALSE
;

589 i‡(
	`QuîyPîf‹m™˚Fªquícy
 (&
liCPUFªquícy
))

590 
bIsPîf‹m™˚Cou¡î
 = 
TRUE
;

591 
bIsPîf‹m™˚Cou¡î
 = 
FALSE
;

594 if(
bOldPîf‹m™˚Cou¡î
!=
bIsPîf‹m™˚Cou¡î
)

596 
bInôC≠
 = 
TRUE
;

597 
	`SëAutoFømeC≠
();

599 
	}
}

603 
	$SëFømeR©eC⁄fig
()

605 if(
fFømeR©eHz
==0)

607 if(
iFømeLimô
==2Ë
fFømeR©eHz
=59.94f;

608 
fFømeR©eHz
=
fFømeR©e
;

611 if(
bIsPîf‹m™˚Cou¡î
)

612 
dwFømeR©eTicks
=(
liCPUFªquícy
.
LowP¨t
 / 
fFømeR©eHz
);

613 
dwFømeR©eTicks
=(1000 / (
DWORD
)
fFømeR©eHz
);

614 
	}
}

622 
	#TIMEBASE
 100000

	)

625 
	$timeGëTime
()

627 
timevÆ
 
tv
;

628 
	`gëtimeofday
(&
tv
, 0);

629  
tv
.
tv_£c
 * 100000 +Åv.
tv_u£c
/10;

630 
	}
}

632 
	$FømeC≠
()

634 
cuπicks
, 
œ°ticks
, 
_ticks_sö˚_œ°_upd©e
;

635 
TicksToWaô
 = 0;

636 
boﬁ
 
Waôög
 = 
TRUE
;

639 
cuπicks
 = 
	`timeGëTime
();

640 
_ticks_sö˚_œ°_upd©e
 = 
cuπicks
 - 
œ°ticks
;

642 if((
_ticks_sö˚_œ°_upd©e
 > 
TicksToWaô
) ||

643 (
cuπicks
 <
œ°ticks
))

645 
œ°ticks
 = 
cuπicks
;

647 if((
_ticks_sö˚_œ°_upd©e
-
TicksToWaô
Ë> 
dwFømeR©eTicks
)

648 
TicksToWaô
=0;

649 
TicksToWaô
=
dwFømeR©eTicks
-(
_ticks_sö˚_œ°_upd©e
-TicksToWait);

653 
Waôög
)

655 
cuπicks
 = 
	`timeGëTime
();

656 
_ticks_sö˚_œ°_upd©e
 = 
cuπicks
 - 
œ°ticks
;

657 i‡((
_ticks_sö˚_œ°_upd©e
 > 
TicksToWaô
) ||

658 (
cuπicks
 < 
œ°ticks
))

660 
Waôög
 = 
FALSE
;

661 
œ°ticks
 = 
cuπicks
;

662 
TicksToWaô
 = 
dwFømeR©eTicks
;

667 
	}
}

671 
	#MAXSKIP
 120

	)

672 
	#MAXLACE
 16

	)

674 
	$FømeSkù
()

676 
iNumSkùs
=0,
iAddôi⁄ÆSkù
=0;

677 
DWORD
 
dwLa°La˚
=0;

678 
DWORD
 
cuπicks
, 
œ°ticks
, 
_ticks_sö˚_œ°_upd©e
;

680 if(!
dwLa˚C¡
) ;

682 if(
iNumSkùs
)

684 
dwLa°La˚
+=
dwLa˚C¡
;

685 
bSkùNextFøme
 = 
TRUE
;

686 
iNumSkùs
--;

690 
DWORD
 
dwWaôTime
;

692 if(
bInôC≠
 || 
bSkùNextFøme
)

694 if(
bU£FømeLimô
 && !
bInôC≠
)

696 
DWORD
 
dwT
=
_ticks_sö˚_œ°_upd©e
;

697 
dwLa°La˚
+=
dwLa˚C¡
;

699 
cuπicks
 = 
	`timeGëTime
();

700 
_ticks_sö˚_œ°_upd©e

dwT
+
cuπicks
 - 
œ°ticks
;

702 
dwWaôTime
=
dwLa°La˚
*
dwFømeR©eTicks
;

704 if(
_ticks_sö˚_œ°_upd©e
<
dwWaôTime
)

706 if((
dwWaôTime
-
_ticks_sö˚_œ°_upd©e
)>

707 (60*
dwFømeR©eTicks
))

708 
_ticks_sö˚_œ°_upd©e
=
dwWaôTime
;

710 
_ticks_sö˚_œ°_upd©e
<
dwWaôTime
)

712 
cuπicks
 = 
	`timeGëTime
();

713 
_ticks_sö˚_œ°_upd©e
 = 
dwT
+
cuπicks
 - 
œ°ticks
;

718 if(
iAddôi⁄ÆSkù
<
MAXSKIP
)

720 
iAddôi⁄ÆSkù
++;

721 
dwLa˚C¡
=0;

722 
œ°ticks
 = 
	`timeGëTime
();

728 
bInôC≠
=
FALSE
;

729 
iAddôi⁄ÆSkù
=0;

730 
bSkùNextFøme
=
FALSE
;

731 
œ°ticks
 = 
	`timeGëTime
();

732 
dwLa˚C¡
=0;

733 
dwLa°La˚
=0;

734 
_ticks_sö˚_œ°_upd©e
=0;

738 
bSkùNextFøme
=
FALSE
;

740 
cuπicks
 = 
	`timeGëTime
();

741 
_ticks_sö˚_œ°_upd©e
 = 
cuπicks
 - 
œ°ticks
;

743 
dwLa°La˚
=
dwLa˚C¡
;

744 
dwWaôTime
=
dwLa˚C¡
*
dwFømeR©eTicks
;

746 if(
_ticks_sö˚_œ°_upd©e
>
dwWaôTime
)

748 if(
bU£FømeLimô
)

750 
iNumSkùs
=0;

754 
iNumSkùs
=
_ticks_sö˚_œ°_upd©e
/
dwWaôTime
;

755 
iNumSkùs
--;

756 if(
iNumSkùs
>
MAXSKIP
) iNumSkips=MAXSKIP;

758 
bSkùNextFøme
 = 
TRUE
;

761 if(
bU£FømeLimô
)

763 if(
dwLa˚C¡
>
MAXLACE
)

764 
_ticks_sö˚_œ°_upd©e
=
dwWaôTime
;

766 
_ticks_sö˚_œ°_upd©e
<
dwWaôTime
)

768 
cuπicks
 = 
	`timeGëTime
();

769 
_ticks_sö˚_œ°_upd©e
 = 
cuπicks
 - 
œ°ticks
;

773 
œ°ticks
 = 
	`timeGëTime
();

776 
dwLa˚C¡
=0;

777 
	}
}

781 
	$ˇlcÂs
()

783 
cuπicks
,
_ticks_sö˚_œ°_upd©e
,
œ°ticks
;

784 
Âs_˙t
 = 0;

785 
Âs_tck
 = 1;

786 
Âsskù_˙t
 = 0;

787 
Âsskù_tck
 = 1;

790 
cuπicks
 = 
	`timeGëTime
();

791 
_ticks_sö˚_œ°_upd©e
=
cuπicks
-
œ°ticks
;

793 if(
bU£FømeSkù
 && !
bU£FømeLimô
 && 
_ticks_sö˚_œ°_upd©e
)

794 
Âs_skù
=
	`mö
(Âs_skù,(()
TIMEBASE
/()
_ticks_sö˚_œ°_upd©e
+1.0f));

796 
œ°ticks
 = 
cuπicks
;

799 if(
bU£FømeSkù
 && 
bU£FømeLimô
)

801 
Âsskù_tck
 +
_ticks_sö˚_œ°_upd©e
;

803 if(++
Âsskù_˙t
==2)

805 
Âs_skù
 = ()2000/()
Âsskù_tck
;

807 
Âs_skù
 +=6.0f;

809 
Âsskù_˙t
 = 0;

810 
Âsskù_tck
 = 1;

814 
Âs_tck
 +
_ticks_sö˚_œ°_upd©e
;

816 if(++
Âs_˙t
==10)

818 
Âs_cur
 = ()(
TIMEBASE
*10)/()
Âs_tck
;

820 
Âs_˙t
 = 0;

821 
Âs_tck
 = 1;

823 if(
bU£FømeLimô
 && 
Âs_cur
>
fFømeR©eHz
)

824 
Âs_cur
=
fFømeR©eHz
;

826 
	}
}

828 
	$PCFømeC≠
 ()

830 
cuπicks
, 
œ°ticks
, 
_ticks_sö˚_œ°_upd©e
;

831 
TicksToWaô
 = 0;

832 
boﬁ
 
Waôög
 = 
TRUE
;

834 
Waôög
)

836 
cuπicks
 = 
	`timeGëTime
();

837 
_ticks_sö˚_œ°_upd©e
 = 
cuπicks
 - 
œ°ticks
;

838 i‡((
_ticks_sö˚_œ°_upd©e
 > 
TicksToWaô
) ||

839 (
cuπicks
 < 
œ°ticks
))

841 
Waôög
 = 
FALSE
;

842 
œ°ticks
 = 
cuπicks
;

843 
TicksToWaô
 = (
TIMEBASE
 / ()
fFømeR©eHz
);

846 
	}
}

850 
	$PCˇlcÂs
()

852 
cuπicks
,
_ticks_sö˚_œ°_upd©e
,
œ°ticks
;

853 
Âs_˙t
 = 0;

854 
Âs_acc
 = 0;

855 
CuºítFPS
=0;

857 
cuπicks
 = 
	`timeGëTime
();

858 
_ticks_sö˚_œ°_upd©e
=
cuπicks
-
œ°ticks
;

859 if(
_ticks_sö˚_œ°_upd©e
)

860 
CuºítFPS
=()
TIMEBASE
/()
_ticks_sö˚_œ°_upd©e
;

861 
CuºítFPS
 = 0;

862 
œ°ticks
 = 
cuπicks
;

864 
Âs_acc
 +
CuºítFPS
;

866 if(++
Âs_˙t
==10)

868 
Âs_cur
 = 
Âs_acc
 / 10;

869 
Âs_acc
 = 0;

870 
Âs_˙t
 = 0;

873 
Âs_skù
=
CuºítFPS
+1.0f;

874 
	}
}

878 
	$SëAutoFømeC≠
()

880 if(
iFømeLimô
==1)

882 
fFømeR©eHz
 = 
fFømeR©e
;

883 
dwFømeR©eTicks
=(
TIMEBASE
 / ()
fFømeR©eHz
);

887 if(
dwA˘Fixes
&128)

889 i‡(
PSXDi•œy
.
I¡îœ˚d
)

890 
fFømeR©eHz
 = 
PSXDi•œy
.
PAL
?50.0f:60.0f;

891 
fFømeR©eHz
 = 
PSXDi•œy
.
PAL
?25.0f:30.0f;

897 if(
PSXDi•œy
.
PAL
)

899 i‡(
STATUSREG
&
GPUSTATUS_INTERLACED
)

900 
fFømeR©eHz
=33868800.0f/677343.75f;

901 
fFømeR©eHz
=33868800.0f/680595.00f;

905 i‡(
STATUSREG
&
GPUSTATUS_INTERLACED
)

906 
fFømeR©eHz
=33868800.0f/565031.25f;

907 
fFømeR©eHz
=33868800.0f/566107.50f;

910 
dwFømeR©eTicks
=(
TIMEBASE
 / ()
fFømeR©eHz
);

912 
	}
}

916 
	$SëFømeR©eC⁄fig
()

918 if(!
fFømeR©e
) fFrameRate=200.0f;

920 if(
fFømeR©eHz
==0)

922 if(
iFømeLimô
==2Ë
fFømeR©eHz
=59.94f;

923 
fFømeR©eHz
=
fFømeR©e
;

926 
dwFømeR©eTicks
=(
TIMEBASE
 / ()
fFømeR©eHz
);

928 if(
iFømeLimô
==2Ë
	`SëAutoFømeC≠
();

929 
	}
}

933 
	$InôFømeC≠
()

936 
	}
}

938 
	$ReInôFømeC≠
()

941 
	}
}

951 
	$CheckFømeR©e
()

953 if(
bU£FømeSkù
)

955 if(!(
dwA˘Fixes
&0x100))

957 
dwLa˚C¡
++;

958 if(
dwLa˚C¡
>=
MAXLACE
 && 
bU£FømeLimô
)

960 if(
dwLa˚C¡
==
MAXLACE
Ë
bInôC≠
=
TRUE
;

961 
	`FømeC≠
();

964 if(
bU£FømeLimô
Ë
	`FømeC≠
();

965 
	`ˇlcÂs
();

969 if(
bU£FømeLimô
Ë
	`FømeC≠
();

970 
	`ˇlcÂs
();

972 
	}
}

976 
CALLBACK
 
	$GPU£t‰amñimô
(
›ti⁄
)

978 
bInôC≠
 = 
TRUE
;

980 if(
›ti⁄
==1)

982 
bU£FømeLimô
=
TRUE
;
bU£FømeSkù
=
FALSE
;
iFømeLimô
=2;

983 
	`SëAutoFømeC≠
();

987 
bU£FømeLimô
=
FALSE
;

989 
	}
}

	@plugins/gpu-gles/gpuFps.h

1 #i‚de‡
__GPU_FPS__


2 
	#__GPU_FPS__


	)

4 #ifde‡
__˝lu•lus


35 
BOOL
 
bIsPîf‹m™˚Cou¡î
;

36 
fFømeR©eHz
;

37 
DWORD
 
dwFømeR©eTicks
;

38 
fFømeR©e
;

39 
iFømeLimô
;

40 
BOOL
 
bU£FømeLimô
;

41 
BOOL
 
bU£FømeSkù
;

42 
DWORD
 
dwLa˚C¡
;

44 
BOOL
 
bInôC≠
;

45 
Âs_skù
;

46 
Âs_cur
;

49 
InôFømeC≠
();

50 
SëFømeR©eC⁄fig
();

51 
PCFømeC≠
();

52 
PCˇlcÂs
();

53 
FømeSkù
();

54 
CheckFømeR©e
();

55 
ReInôFømeC≠
();

56 
SëAutoFømeC≠
();

57 #i‚de‡
_WINDOWS


58 
timeGëTime
();

61 #ifde‡
__˝lu•lus


	@plugins/gpu-gles/gpuPlugin.c

30 
	#_IN_GPU


	)

32 
	~<°dlib.h
>

33 
	~<°dio.h
>

34 
	~<°d¨g.h
>

35 
	~<°rög.h
>

36 
	~"gpuExã∫Æs.h
"

37 
	~"gpuPlugö.h
"

38 
	~"gpuDøw.h
"

39 
	~"gpuTextuª.h
"

40 
	~"gpuFps.h
"

41 
	~"gpuPrim.h
"

45 
	~"gpuStdafx.h
"

47 
	gg_m1
=255,
	gg_m2
=255,
	gg_m3
=255;

48 
	gDøwSemiTøns
=
FALSE
;

49 
	gYmö
;

50 
	gYmax
;

52 
	gly0
,
	glx0
,
	gly1
,
	glx1
,
	gly2
,
	glx2
,
	gly3
,
	glx3
;

53 
	gGlobÆTextAddrX
,
	gGlobÆTextAddrY
,
	gGlobÆTextTP
;

54 
	gGlobÆTextREST
,
	gGlobÆTextABR
,
	gGlobÆTextPAGE
;

56 
	gdwGPUVîsi⁄
=0;

57 
	giGPUHeight
=512;

58 
	giGPUHeightMask
=511;

59 
	gGlobÆTextIL
=0;

60 
	giTûeChót
=0;

66 *
	gpsxVSecuª
;

67 *
	gpsxVub
;

68 sig√d *
	gpsxVsb
;

69 *
	gpsxVuw
;

70 *
	gpsxVuw_eom
;

71 sig√d *
	gpsxVsw
;

72 *
	gpsxVul
;

73 sig√d *
	gpsxV¶
;

76 
	#GPUCOMMAND
(
x
Ë((x>>24Ë& 0xff)

	)

78 
GLÊﬂt
 
	ggl_z
=0.0f;

79 
BOOL
 
	gbNìdI¡îœ˚Upd©e
=
FALSE
;

80 
BOOL
 
	gbNìdRGB24Upd©e
=
FALSE
;

81 
BOOL
 
	gbCh™geWöMode
=
FALSE
;

83 
	gulSètusC⁄åﬁ
[256];

89 
	gGPUd©aRë
;

90 
	glGPU°©usRë
;

91 
	gszDi•Buf
[64];

93 
	ggpuD©aM
[256];

94 
	ggpuComm™d
 = 0;

95 
	ggpuD©aC
 = 0;

96 
	ggpuD©aP
 = 0;

98 
VRAMLﬂd_t
 
	gVRAMWrôe
;

99 
VRAMLﬂd_t
 
	gVRAMRód
;

100 
	giD©aWrôeMode
;

101 
	giD©aRódMode
;

103 
	glCÀ¨OnSw≠
;

104 
	glCÀ¨OnSw≠Cﬁ‹
;

105 
BOOL
 
	gbSkùNextFøme
 = 
FALSE
;

106 
	giCﬁDïth
;

107 
BOOL
 
	gbCh™geRes
;

108 
BOOL
 
	gbWödowMode
;

109 
	giWöSize
;

112 
	gdi•Widths
[8] = {256,320,512,640,368,384,512,640};

114 
PSXDi•œy_t
 
	gPSXDi•œy
;

115 
PSXDi•œy_t
 
	gPªviousPSXDi•œy
;

116 
TWö_t
 
	gTWö
;

117 
	gimageX0
,
	gimageX1
;

118 
	gimageY0
,
	gimageY1
;

119 
BOOL
 
	gbDi•œyNŸSë
 = 
TRUE
;

120 
GLuöt
 
	guiSˇnLöe
=0;

121 
	giU£SˇnLöes
=0;

122 
	glSñe˘edSlŸ
=0;

123 * 
	gpGfxC¨dS¸ìn
=0;

124 
	giBlurBuf„r
=0;

125 
	giSˇnBÀnd
=0;

126 
	giRídîFVR
=0;

127 
	giNoS¸ìnSavî
=0;

128 
	gulGPUInfoVÆs
[16];

129 
	giFakePrimBusy
 = 0;

130 
	giRumbÀVÆ
 = 0;

131 
	giRumbÀTime
 = 0;

133 (*
ª¨med_gë_œyî_pos
)(*
x
, *
y
, *
w
, *
h
);

134 
	`ÊùEGL
();

144 
	$ResizeWödow
()

146 
rR©ioRe˘
.
À·
 =ÑR©ioRe˘.
t›
=0;

147 
rR©ioRe˘
.
right
 = 
iResX
;

148 
rR©ioRe˘
.
bŸtom
 = 
iResY
;

149 
	`glVõwp‹t
(
rR©ioRe˘
.
À·
,

150 
iResY
-(
rR©ioRe˘
.
t›
+rR©ioRe˘.
bŸtom
),

151 
rR©ioRe˘
.
right
,

152 
rR©ioRe˘
.
bŸtom
); 
	`glEº‹
();

154 
	`glSciss‹
(0, 0, 
iResX
, 
iResY
); 
	`glEº‹
();

155 
	`glE«bÀ
(
GL_SCISSOR_TEST
); 
	`glEº‹
();

157 #i‚de‡
OWNSCALE


158 
	`glM©rixMode
(
GL_TEXTURE
);

159 
	`glLﬂdIdítôy
();

160 
	`glSˇÀf
(1.0f/255.99f,1.0f/255.99f,1.0f);

163 
	`glM©rixMode
(
GL_PROJECTION
); 
	`glEº‹
();

164 
	`glLﬂdIdítôy
(); 
	`glEº‹
();

165 
	`glOπho
(0,
PSXDi•œy
.
Di•œyMode
.
x
,

166 
PSXDi•œy
.
Di•œyMode
.
y
, 0, -1, 1); 
	`glEº‹
();

167 i‡(
bKìpR©io
)

168 
	`SëA•e˘R©io
();

169 
	}
}

171 * 
	$GëC⁄figInfos
(
hW
)

173 
szO
[2][4]={"off","on "};

174 
szTxt
[256];

175 * 
pB
=(*)
	`mÆloc
(32767);

336   
pB
;

337 
	}
}

343 
	$DoTextS«pShŸ
(
iNum
)

345 
	}
}

351 
	$DoS«pShŸ
()

353 
	}
}

355 
CALLBACK
 
	$GPUmakeS«pshŸ
()

358 
	}
}

364 
CALLBACK
 
	$GPUöô
()

366 
	`mem£t
(
ulSètusC⁄åﬁ
,0,256*());

368 
bCh™geRes
=
FALSE
;

369 
bWödowMode
=
FALSE
;

371 
bKìpR©io
 = 
TRUE
;

374 
psxVSecuª
=(*)
	`mÆloc
((
iGPUHeight
*2)*1024 + (1024*1024));

375 if(!
psxVSecuª
)  -1;

377 
psxVub
=
psxVSecuª
+512*1024;

378 
psxVsb
=(sig√d *)
psxVub
;

379 
psxVsw
=(sig√d *)
psxVub
;

380 
psxV¶
=(sig√d *)
psxVub
;

381 
psxVuw
=(*)
psxVub
;

382 
psxVul
=(*)
psxVub
;

384 
psxVuw_eom
=
psxVuw
+1024*
iGPUHeight
;

386 
	`mem£t
(
psxVSecuª
,0x00,(
iGPUHeight
*2)*1024 + (1024*1024));

387 
	`mem£t
(
ulGPUInfoVÆs
,0x00,16*());

389 
	`InôFømeC≠
();

391 
PSXDi•œy
.
RGB24
 = 0;

392 
PªviousPSXDi•œy
.
RGB24
= 0;

393 
PSXDi•œy
.
I¡îœ˚d
 = 0;

394 
PSXDi•œy
.
I¡îœ˚dTe°
=0;

395 
PSXDi•œy
.
DøwOff£t
.
x
 = 0;

396 
PSXDi•œy
.
DøwOff£t
.
y
 = 0;

397 
PSXDi•œy
.
DøwAªa
.
x0
 = 0;

398 
PSXDi•œy
.
DøwAªa
.
y0
 = 0;

399 
PSXDi•œy
.
DøwAªa
.
x1
 = 320;

400 
PSXDi•œy
.
DøwAªa
.
y1
 = 240;

401 
PSXDi•œy
.
Di•œyMode
.
x
= 320;

402 
PSXDi•œy
.
Di•œyMode
.
y
= 240;

403 
PSXDi•œy
.
DißbÀd
 = 
FALSE
;

404 
PªviousPSXDi•œy
.
R™ge
.
x0
 =0;

405 
PªviousPSXDi•œy
.
R™ge
.
x1
 =0;

406 
PªviousPSXDi•œy
.
R™ge
.
y0
 =0;

407 
PªviousPSXDi•œy
.
R™ge
.
y1
 =0;

408 
PSXDi•œy
.
R™ge
.
x0
=0;

409 
PSXDi•œy
.
R™ge
.
x1
=0;

410 
PSXDi•œy
.
R™ge
.
y0
=0;

411 
PSXDi•œy
.
R™ge
.
y1
=0;

412 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
 = 1;

413 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
 = 1;

414 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
 = 1;

415 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
 = 1;

416 
PªviousPSXDi•œy
.
Di•œyModeNew
.
y
=0;

417 
PSXDi•œy
.
DoubÀ
=1;

418 
GPUd©aRë
=0x400;

420 
PSXDi•œy
.
Di•œyModeNew
.
x
=0;

421 
PSXDi•œy
.
Di•œyModeNew
.
y
=0;

425 
iD©aWrôeMode
 = 
DR_NORMAL
;

428 
	`mem£t
(&
VRAMWrôe
,0,(
VRAMLﬂd_t
));

429 
	`mem£t
(&
VRAMRód
,0,(
VRAMLﬂd_t
));

434 
STATUSREG
 = 0x14802000;

435 
GPUIsIdÀ
;

436 
GPUIsRódyF‹Comm™ds
;

439 
	}
}

456 
CALLBACK
 
	$GPU›í
(
hwndGPU
)

458 
iResX
=800;
iResY
=480;

459 
iCﬁDïth
=8;

460 
bCh™geRes
=
FALSE
;

461 
bWödowMode
=
FALSE
;

462 
bFuŒVRam
=
FALSE
;

463 
iFûãrTy≥
=0;

465 
bDøwDôhî
=
FALSE
;

467 
bU£FømeLimô
=
FALSE
;

468 
bU£FømeSkù
=
FALSE
;

469 
iFømeLimô
=0;

470 
fFømeR©e
=50.0f;

471 
iOffs¸ìnDøwög
=0;

475 
iU£Mask
=0;

476 
iZBuf„rDïth
=0;

477 
bU£Fa°Mdec
=
FALSE
;

478 
bU£15bôMdec
=
FALSE
;

479 
dwCfgFixes
=0;

480 
bU£Fixes
=
FALSE
;

482 
iFømeTexTy≥
=0;

483 
iFømeRódTy≥
=0;

485 
bKìpR©io
=
TRUE
;

486 
iSˇnBÀnd
=0;

487 
iVRamSize
=0;

488 
iTexG¨bageCﬁÀ˘i⁄
=0;

489 
iBlurBuf„r
=0;

491 
iNoS¸ìnSavî
=0;

496 
bIsFú°Føme
 = 
TRUE
;

498 
rR©ioRe˘
.
À·
 =ÑR©ioRe˘.
t›
=0;

499 
rR©ioRe˘
.
right
 = 
iResX
;

500 
rR©ioRe˘
.
bŸtom
 = 
iResY
;

502 
bDi•œyNŸSë
 = 
TRUE
;

503 
bSëClù
=
TRUE
;

505 
	`SëFixes
();

507 
	`InôülizeTextuªSt‹e
();

509 
CSTEXTURE
 = 
CSVERTEX
 = 
CSCOLOR
 = 0;

514 if(
bIsFú°Føme
Ë
	`GLöôülize
(
NULL
, NULL);

517 
	}
}

524 
	$GPU˛o£
()

526 
	`GL˛ónup
();

528 if(
pGfxC¨dS¸ìn
Ë
	`‰ì
(pGfxCardScreen);

529 
pGfxC¨dS¸ìn
=0;

534 
	}
}

540 
CALLBACK
 
	$GPUshutdown
()

542 if(
psxVSecuª
Ë
	`‰ì
(psxVSecure);

543 
psxVSecuª
=0;

546 
	}
}

552 
	$PaötBœckB‹dîs
()

554 
s
;

555 
	`glDißbÀ
(
GL_SCISSOR_TEST
); 
	`glEº‹
();

556 if(
bTexE«bÀd
Ë{
	`glDißbÀ
(
GL_TEXTURE_2D
);bTexE«bÀd=
FALSE
;} 
	`glEº‹
();

557 if(
bOldSmoŸhShaded
Ë{
	`glShadeModñ
(
GL_FLAT
);bOldSmoŸhShaded=
FALSE
;} 
	`glEº‹
();

558 if(
bBÀndE«bÀ
Ë{
	`glDißbÀ
(
GL_BLEND
);bBÀndE«bÀ=
FALSE
;} 
	`glEº‹
();

559 
	`glDißbÀ
(
GL_ALPHA_TEST
); 
	`glEº‹
();

561 
	`glE«bÀ
(
GL_ALPHA_TEST
); 
	`glEº‹
();

562 
	`glE«bÀ
(
GL_SCISSOR_TEST
); 
	`glEº‹
();

564 
	}
}

570 
__ölöe
 
	$XPRIMdøwTextuªdQuad
(
OGLVîãx
* 
vîãx1
, OGLVîãx* 
vîãx2
,

571 
OGLVîãx
* 
vîãx3
, OGLVîãx* 
vîãx4
)

574 
	}
}

580 
	$SëSˇnLöes
()

582 
	}
}

595 
	giLa°RGB24
=0;

596 
	giSkùTwo
=0;

597 
	$GPUvSöc
(){

598 
	`upd©eDi•œy
();

599 
	}
}

600 
	$upd©eDi•œy
()

602 
BOOL
 
bBlur
=
FALSE
;

605 
bFakeFr⁄tBuf„r
=
FALSE
;

606 
bRídîFr⁄tBuf„r
=
FALSE
;

608 if(
iRídîFVR
)

610 
iRídîFVR
--;

611 if(!
iRídîFVR
Ë
bFuŒVRam
=
FALSE
;

614 if(
iLa°RGB24
 && iLa°RGB24!=
PSXDi•œy
.
RGB24
+1)

616 
iSkùTwo
=2;

618 
iLa°RGB24
=0;

620 if(
PSXDi•œy
.
RGB24
)

622 
	`Pª∑ªFuŒS¸ìnU∂ﬂd
(-1);

623 
	`U∂ﬂdS¸ìn
(
PSXDi•œy
.
I¡îœ˚d
);

624 
bNìdU∂ﬂdTe°
=
FALSE
;

625 
bNìdI¡îœ˚Upd©e
=
FALSE
;

626 
bNìdU∂ﬂdA·î
=
FALSE
;

627 
bNìdRGB24Upd©e
=
FALSE
;

630 if(
bNìdI¡îœ˚Upd©e
)

632 
bNìdI¡îœ˚Upd©e
=
FALSE
;

633 
xrU∂ﬂdAªa
=
xrU∂ﬂdAªaIL
;

634 
	`U∂ﬂdS¸ìn
(
TRUE
);

637 if(
dwA˘Fixes
&512Ë
	`bCheckFF9G4
(
NULL
);

639 if(
PªviousPSXDi•œy
.
R™ge
.
x0
||

640 
PªviousPSXDi•œy
.
R™ge
.
y0
)

641 
	`PaötBœckB‹dîs
();

643 if(
PSXDi•œy
.
DißbÀd
)

648 
	`glDißbÀ
(
GL_SCISSOR_TEST
); 
	`glEº‹
();

649 
	`glCÀ¨Cﬁ‹
(0,0,0,128); 
	`glEº‹
();

650 
	`glCÀ¨
(
uiBuf„rBôs
); 
	`glEº‹
();

651 
	`glE«bÀ
(
GL_SCISSOR_TEST
); 
	`glEº‹
();

652 
gl_z
=0.0f;

653 
bDi•œyNŸSë
 = 
TRUE
;

656 if(
iSkùTwo
)

658 
iSkùTwo
--;

659 
iDøwnSomëhög
=0;

669 if(
dwA˘Fixes
&128)

671 if(
bU£FømeLimô
Ë
	`PCFømeC≠
();

673 
	`PCˇlcÂs
();

689 if(
bU£FømeSkù
)

691 if(!
bSkùNextFøme
)

693 if(
iDøwnSomëhög
Ë
	`ÊùEGL
();

695 if((
Âs_skù
 < 
fFømeR©eHz
Ë&& !(
bSkùNextFøme
))

696 {
bSkùNextFøme
 = 
TRUE
; 
Âs_skù
=
fFømeR©eHz
;}

697 
bSkùNextFøme
 = 
FALSE
;

702 if(
iDøwnSomëhög
Ë
	`ÊùEGL
();

705 
iDøwnSomëhög
=0;

709 if(
lCÀ¨OnSw≠
)

711 
GL˛ampf
 
g
,
b
,
r
;

713 if(
bDi•œyNŸSë
)

714 
	`SëOGLDi•œySëtögs
(1);

716 
g
=((
GL˛ampf
)
	`GREEN
(
lCÀ¨OnSw≠Cﬁ‹
))/255.0f;

717 
b
=((
GL˛ampf
)
	`BLUE
(
lCÀ¨OnSw≠Cﬁ‹
))/255.0f;

718 
r
=((
GL˛ampf
)
	`RED
(
lCÀ¨OnSw≠Cﬁ‹
))/255.0f;

719 
	`glDißbÀ
(
GL_SCISSOR_TEST
); 
	`glEº‹
();

720 
	`glCÀ¨Cﬁ‹
(
r
,
g
,
b
,128); 
	`glEº‹
();

721 
	`glCÀ¨
(
uiBuf„rBôs
); 
	`glEº‹
();

722 
	`glE«bÀ
(
GL_SCISSOR_TEST
); 
	`glEº‹
();

723 
lCÀ¨OnSw≠
=0;

729 if(
iZBuf„rDïth
)

731 
	`glDißbÀ
(
GL_SCISSOR_TEST
); 
	`glEº‹
();

732 
	`glCÀ¨
(
GL_DEPTH_BUFFER_BIT
); 
	`glEº‹
();

733 
	`glE«bÀ
(
GL_SCISSOR_TEST
); 
	`glEº‹
();

737 
gl_z
=0.0f;

742 if(
bNìdU∂ﬂdA·î
)

744 
bNìdU∂ﬂdA·î
=
FALSE
;

745 
bNìdU∂ﬂdTe°
=
FALSE
;

746 
	`U∂ﬂdS¸ìn
(-1);

749 if(
bNìdU∂ﬂdTe°
)

751 
bNìdU∂ﬂdTe°
=
FALSE
;

752 if(
PSXDi•œy
.
I¡îœ˚dTe°
 &&

754 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
==
PSXDi•œy
.DisplayPosition.x &&

755 
PªviousPSXDi•œy
.
Di•œyEnd
.
x
==
PSXDi•œy
.DisplayEnd.x &&

756 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
==
PSXDi•œy
.DisplayPosition.y &&

757 
PªviousPSXDi•œy
.
Di•œyEnd
.
y
==
PSXDi•œy
.DisplayEnd.y)

759 
	`Pª∑ªFuŒS¸ìnU∂ﬂd
(
TRUE
);

760 
	`U∂ﬂdS¸ìn
(
TRUE
);

767 if(
iRumbÀTime
)

769 
i1
=0,
i2
=0,
i3
=0,
i4
=0;

771 
iRumbÀTime
--;

772 if(
iRumbÀTime
)

774 
i1
=((
	`ønd
()*
iRumbÀVÆ
)/
RAND_MAX
)-(iRumbleVal/2);

775 
i2
=((
	`ønd
()*
iRumbÀVÆ
)/
RAND_MAX
)-(iRumbleVal/2);

776 
i3
=((
	`ønd
()*
iRumbÀVÆ
)/
RAND_MAX
)-(iRumbleVal/2);

777 
i4
=((
	`ønd
()*
iRumbÀVÆ
)/
RAND_MAX
)-(iRumbleVal/2);

780 
	`glVõwp‹t
(
rR©ioRe˘
.
À·
+
i1
,

781 
iResY
-(
rR©ioRe˘
.
t›
+rR©ioRe˘.
bŸtom
)+
i2
,

782 
rR©ioRe˘
.
right
+
i3
,

783 
rR©ioRe˘
.
bŸtom
+
i4
); 
	`glEº‹
();

791 
	}
}

798 
	$upd©eFr⁄tDi•œy
()

800 if(
PªviousPSXDi•œy
.
R™ge
.
x0
||

801 
PªviousPSXDi•œy
.
R™ge
.
y0
)

802 
	`PaötBœckB‹dîs
();

810 
bFakeFr⁄tBuf„r
=
FALSE
;

811 
bRídîFr⁄tBuf„r
=
FALSE
;

816 if(
iDøwnSomëhög
)

817 
	`ÊùEGL
();

821 
	}
}

826 
	$Ch™geDi•Off£tsX
()

828 
lx
,
l
;
sO
;

830 if(!
PSXDi•œy
.
R™ge
.
x1
) ;

832 
l
=
PSXDi•œy
.
Di•œyMode
.
x
;

834 
l
*=()
PSXDi•œy
.
R™ge
.
x1
;

835 
l
/=2560;
lx
=l;l&=0xfffffff8;

837 if(
l
==
PªviousPSXDi•œy
.
R™ge
.
x1
) ;

839 
sO
=
PªviousPSXDi•œy
.
R™ge
.
x0
;

841 if(
lx
>=
PSXDi•œy
.
Di•œyMode
.
x
)

843 
PªviousPSXDi•œy
.
R™ge
.
x1
=

844 
PSXDi•œy
.
Di•œyMode
.
x
;

845 
PªviousPSXDi•œy
.
R™ge
.
x0
=0;

849 
PªviousPSXDi•œy
.
R™ge
.
x1
=
l
;

850 
PªviousPSXDi•œy
.
R™ge
.
x0
=

851 (
PSXDi•œy
.
R™ge
.
x0
-500)/8;

852 if(
PªviousPSXDi•œy
.
R™ge
.
x0
<0)

853 
PªviousPSXDi•œy
.
R™ge
.
x0
=0;

855 if((
PªviousPSXDi•œy
.
R™ge
.
x0
+
lx
)>

856 
PSXDi•œy
.
Di•œyMode
.
x
)

858 
PªviousPSXDi•œy
.
R™ge
.
x0
=

859 
PSXDi•œy
.
Di•œyMode
.
x
-
lx
;

860 
PªviousPSXDi•œy
.
R™ge
.
x1
+=
lx
-
l
;

864 if(
sO
!=
PªviousPSXDi•œy
.
R™ge
.
x0
)

866 
bDi•œyNŸSë
=
TRUE
;

868 
	}
}

872 
	$Ch™geDi•Off£tsY
()

874 
iT
;
sO
;

876 if(
PSXDi•œy
.
PAL
Ë
iT
=48; iT=28;

878 if(
PSXDi•œy
.
R™ge
.
y0
>=
iT
)

880 
PªviousPSXDi•œy
.
R™ge
.
y1
=

881 
PSXDi•œy
.
Di•œyModeNew
.
y
;

883 
sO
=(
PSXDi•œy
.
R™ge
.
y0
-
iT
-4)*PSXDi•œy.
DoubÀ
;

884 if(
sO
<0) sO=0;

886 
PSXDi•œy
.
Di•œyModeNew
.
y
+=
sO
;

888 
sO
=0;

890 if(
sO
!=
PªviousPSXDi•œy
.
R™ge
.
y0
)

892 
PªviousPSXDi•œy
.
R™ge
.
y0
=
sO
;

893 
bDi•œyNŸSë
=
TRUE
;

895 
	}
}

901 
	$SëA•e˘R©io
()

903 
xs
,
ys
,
s
;
RECT
 
r
;

905 if(!
PSXDi•œy
.
Di•œyModeNew
.
x
) ;

906 if(!
PSXDi•œy
.
Di•œyModeNew
.
y
) ;

909 
xs
=()
iResX
/()
PSXDi•œy
.
Di•œyModeNew
.
x
;

910 
ys
=()
iResY
/()
PSXDi•œy
.
Di•œyModeNew
.
y
;

912 
s
=
	`mö
(
xs
,
ys
);

913 
r
.
right
 =()(()
PSXDi•œy
.
Di•œyModeNew
.
x
*
s
);

914 
r
.
bŸtom
=()(()
PSXDi•œy
.
Di•œyModeNew
.
y
*
s
);

915 if(
r
.
right
 > 
iResX
)Ñ.right = iResX;

916 if(
r
.
bŸtom
 > 
iResY
)Ñ.bottom = iResY;

917 if(
r
.
right
 < 1)Ñ.right = 1;

918 if(
r
.
bŸtom
 < 1)Ñ.bottom = 1;

920 
r
.
À·
 = (
iResX
-r.
right
)/2;

921 
r
.
t›
 = (
iResY
-r.
bŸtom
)/2;

922 if(
r
.
bŸtom
<
rR©ioRe˘
.bottom ||

923 
r
.
right
 <
rR©ioRe˘
.right)

925 
RECT
 
rC
;

926 
	`glCÀ¨Cﬁ‹
(0,0,0,128); 
	`glEº‹
();

928 if(
r
.
right
 <
rR©ioRe˘
.right)

930 
rC
.
À·
=0;

931 
rC
.
t›
=0;

932 
rC
.
right
=
r
.
À·
;

933 
rC
.
bŸtom
=
iResY
;

934 
	`glSciss‹
(
rC
.
À·
,rC.
t›
,rC.
right
,rC.
bŸtom
); 
	`glEº‹
();

935 
	`glCÀ¨
(
uiBuf„rBôs
); 
	`glEº‹
();

936 
rC
.
À·
=
iResX
-rC.
right
;

937 
	`glSciss‹
(
rC
.
À·
,rC.
t›
,rC.
right
,rC.
bŸtom
); 
	`glEº‹
();

939 
	`glCÀ¨
(
uiBuf„rBôs
); 
	`glEº‹
();

942 if(
r
.
bŸtom
 <
rR©ioRe˘
.bottom)

944 
rC
.
À·
=0;

945 
rC
.
t›
=0;

946 
rC
.
right
=
iResX
;

947 
rC
.
bŸtom
=
r
.
t›
;

948 
	`glSciss‹
(
rC
.
À·
,rC.
t›
,rC.
right
,rC.
bŸtom
); 
	`glEº‹
();

950 
	`glCÀ¨
(
uiBuf„rBôs
); 
	`glEº‹
();

951 
rC
.
t›
=
iResY
-rC.
bŸtom
;

952 
	`glSciss‹
(
rC
.
À·
,rC.
t›
,rC.
right
,rC.
bŸtom
); 
	`glEº‹
();

953 
	`glCÀ¨
(
uiBuf„rBôs
); 
	`glEº‹
();

956 
bSëClù
=
TRUE
;

957 
bDi•œyNŸSë
=
TRUE
;

960 
rR©ioRe˘
=
r
;

963 i‡(
ª¨med_gë_œyî_pos
 !
NULL
)

964 
	`ª¨med_gë_œyî_pos
(&
rR©ioRe˘
.
À·
, &rR©ioRe˘.
t›
, &rR©ioRe˘.
right
, &rR©ioRe˘.
bŸtom
);

967 
	`glVõwp‹t
(
rR©ioRe˘
.
À·
,

968 
iResY
-(
rR©ioRe˘
.
t›
+rR©ioRe˘.
bŸtom
),

969 
rR©ioRe˘
.
right
,

970 
rR©ioRe˘
.
bŸtom
); 
	`glEº‹
();

971 
	}
}

977 
	$upd©eDi•œyIfCh™ged
()

979 
BOOL
 
bUp
;

981 i‡((
PSXDi•œy
.
Di•œyMode
.
y
 =PSXDi•œy.
Di•œyModeNew
.y) &&

982 (
PSXDi•œy
.
Di•œyMode
.
x
 =PSXDi•œy.
Di•œyModeNew
.x))

984 if((
PSXDi•œy
.
RGB24
 =PSXDi•œy.
RGB24New
) &&

985 (
PSXDi•œy
.
I¡îœ˚d
 =PSXDi•œy.
I¡îœ˚dNew
))

990 
	`glLﬂdIdítôy
(); 
	`glEº‹
();

991 
	`glOπho
(0,
PSXDi•œy
.
Di•œyModeNew
.
x
,

992 
PSXDi•œy
.
Di•œyModeNew
.
y
, 0, -1, 1); 
	`glEº‹
();

993 if(
bKìpR©io
Ë
	`SëA•e˘R©io
();

996 
bDi•œyNŸSë
 = 
TRUE
;

998 
bUp
=
FALSE
;

999 if(
PSXDi•œy
.
RGB24
!=PSXDi•œy.
RGB24New
)

1001 
PªviousPSXDi•œy
.
RGB24
=0;

1002 
	`Re£tTextuªAªa
(
FALSE
);

1003 
bUp
=
TRUE
;

1006 
PSXDi•œy
.
RGB24
 = PSXDi•œy.
RGB24New
;

1007 
PSXDi•œy
.
Di•œyMode
.
y
 = PSXDi•œy.
Di•œyModeNew
.y;

1008 
PSXDi•œy
.
Di•œyMode
.
x
 = PSXDi•œy.
Di•œyModeNew
.x;

1009 
PSXDi•œy
.
I¡îœ˚d
 = PSXDi•œy.
I¡îœ˚dNew
;

1011 
PSXDi•œy
.
Di•œyEnd
.
x
=

1012 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
+ PSXDi•œy.
Di•œyMode
.x;

1013 
PSXDi•œy
.
Di•œyEnd
.
y
=

1014 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
+ PSXDi•œy.
Di•œyMode
.y+
PªviousPSXDi•œy
.
Di•œyModeNew
.y;

1015 
PªviousPSXDi•œy
.
Di•œyEnd
.
x
=

1016 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
+ 
PSXDi•œy
.
Di•œyMode
.x;

1017 
PªviousPSXDi•œy
.
Di•œyEnd
.
y
=

1018 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
+ 
PSXDi•œy
.
Di•œyMode
.y+PªviousPSXDi•œy.
Di•œyModeNew
.y;

1020 
	`Ch™geDi•Off£tsX
();

1022 if(
iFømeLimô
==2Ë
	`SëAutoFømeC≠
();

1024 if(
bUp
Ë
	`upd©eDi•œy
();

1025 
	}
}

1036 
BOOL
 
	$bSw≠Check
()

1038 
iPosCheck
=0;

1039 
PSXPoöt_t
 
pO
;

1040 
PSXPoöt_t
 
pD
;

1041 
iDoAgaö
=0;

1043 if(
PSXDi•œy
.
Di•œyPosôi⁄
.
x
==
pO
.x &&

1044 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
==
pO
.y &&

1045 
PSXDi•œy
.
Di•œyEnd
.
x
==
pD
.x &&

1046 
PSXDi•œy
.
Di•œyEnd
.
y
==
pD
.y)

1047 
iPosCheck
++;

1048 
iPosCheck
=0;

1050 
pO
=
PSXDi•œy
.
Di•œyPosôi⁄
;

1051 
pD
=
PSXDi•œy
.
Di•œyEnd
;

1053 if(
iPosCheck
<=4Ë 
FALSE
;

1055 
iPosCheck
=4;

1057 if(
PSXDi•œy
.
I¡îœ˚d
Ë 
FALSE
;

1059 i‡(
bNìdI¡îœ˚Upd©e
||

1060 
bNìdRGB24Upd©e
 ||

1061 
bNìdU∂ﬂdA·î
||

1062 
bNìdU∂ﬂdTe°
 ||

1063 
iDoAgaö


1066 
iDoAgaö
=0;

1067 if(
bNìdU∂ﬂdA·î
)

1068 
iDoAgaö
=1;

1069 if(
bNìdU∂ﬂdTe°
 && 
PSXDi•œy
.
I¡îœ˚dTe°
)

1070 
iDoAgaö
=1;

1072 
bDi•œyNŸSë
 = 
TRUE
;

1073 
	`upd©eDi•œy
();

1075 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
=
PSXDi•œy
.DisplayPosition.x;

1076 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
=
PSXDi•œy
.DisplayPosition.y;

1077 
PªviousPSXDi•œy
.
Di•œyEnd
.
x
=
PSXDi•œy
.DisplayEnd.x;

1078 
PªviousPSXDi•œy
.
Di•œyEnd
.
y
=
PSXDi•œy
.DisplayEnd.y;

1079 
pO
=
PSXDi•œy
.
Di•œyPosôi⁄
;

1080 
pD
=
PSXDi•œy
.
Di•œyEnd
;

1082  
TRUE
;

1085  
FALSE
;

1086 
	}
}

1096 
	gusFú°Pos
=2;

1098 
CALLBACK
 
	$GPUupd©eLa˚
()

1100 if(!(
dwA˘Fixes
&0x1000))

1101 
STATUSREG
^=0x80000000;

1103 if(!(
dwA˘Fixes
&128))

1104 
	`CheckFømeR©e
();

1106 if(
iOffs¸ìnDøwög
==4)

1108 if(
	`bSw≠Check
()) ;

1111 if(
PSXDi•œy
.
I¡îœ˚d
)

1113 if(
PSXDi•œy
.
Di•œyMode
.
x
>0 && PSXDi•œy.Di•œyMode.
y
>0)

1115 
	`upd©eDi•œy
();

1118 if(
bRídîFr⁄tBuf„r
)

1120 
	`upd©eFr⁄tDi•œy
();

1122 if(
usFú°Pos
==1)

1124 
	`upd©eDi•œy
();

1127 
	}
}

1133 
CALLBACK
 
	$GPUªadSètus
()

1135 if(
dwA˘Fixes
&0x1000)

1137 
iNumRód
=0;

1138 if((
iNumRód
++)==2)

1140 
iNumRód
=0;

1141 
STATUSREG
^=0x80000000;

1145 if(
iFakePrimBusy
)

1147 
iFakePrimBusy
--;

1149 if(
iFakePrimBusy
&1)

1151 
GPUIsBusy
;

1152 
GPUIsNŸRódyF‹Comm™ds
;

1156 
GPUIsIdÀ
;

1157 
GPUIsRódyF‹Comm™ds
;

1161  
STATUSREG
;

1162 
	}
}

1169 
CALLBACK
 
	$GPUwrôeSètus
(
gd©a
)

1171 
lComm™d
=(
gd©a
>>24)&0xff;

1173 if(
bIsFú°Føme
Ë
	`GLöôülize
(
NULL
, NULL);

1175 
ulSètusC⁄åﬁ
[
lComm™d
]=
gd©a
;

1177 
lComm™d
)

1182 
	`mem£t
(
ulGPUInfoVÆs
,0x00,16*());

1183 
lGPU°©usRë
=0x14802000;

1184 
PSXDi•œy
.
DißbÀd
=1;

1185 
iD©aWrôeMode
=
iD©aRódMode
=
DR_NORMAL
;

1186 
PSXDi•œy
.
DøwOff£t
.
x
=PSXDi•œy.DøwOff£t.
y
=0;

1187 
døwX
=
døwY
=0;
døwW
=
døwH
=0;

1188 
sSëMask
=0;
lSëMask
=0;
bCheckMask
=
FALSE
;
iSëMask
=0;

1189 
usMúr‹
=0;

1190 
GlobÆTextAddrX
=0;
GlobÆTextAddrY
=0;

1191 
GlobÆTextTP
=0;
GlobÆTextABR
=0;

1192 
PSXDi•œy
.
RGB24
=
FALSE
;

1193 
PSXDi•œy
.
I¡îœ˚d
=
FALSE
;

1194 
bUsögTWö
 = 
FALSE
;

1199 
PªviousPSXDi•œy
.
DißbÀd
 = 
PSXDi•œy
.Disabled;

1200 
PSXDi•œy
.
DißbÀd
 = (
gd©a
 & 1);

1202 if(
PSXDi•œy
.
DißbÀd
)

1203 
STATUSREG
|=
GPUSTATUS_DISPLAYDISABLED
;

1204 
STATUSREG
&=~
GPUSTATUS_DISPLAYDISABLED
;

1206 i‡(
iOffs¸ìnDøwög
==4 &&

1207 
PªviousPSXDi•œy
.
DißbÀd
 &&

1208 !(
PSXDi•œy
.
DißbÀd
))

1211 if(!
PSXDi•œy
.
RGB24
)

1213 
	`Pª∑ªFuŒS¸ìnU∂ﬂd
(
TRUE
);

1214 
	`U∂ﬂdS¸ìn
(
TRUE
);

1215 
	`upd©eDi•œy
();

1223 
gd©a
 &= 0x03;

1225 
iD©aWrôeMode
=
iD©aRódMode
=
DR_NORMAL
;

1226 if(
gd©a
==0x02Ë
iD©aWrôeMode
=
DR_VRAMTRANSFER
;

1227 if(
gd©a
==0x03Ë
iD©aRódMode
 =
DR_VRAMTRANSFER
;

1229 
STATUSREG
&=~
GPUSTATUS_DMABITS
;

1230 
STATUSREG
|=(
gd©a
 << 29);

1237 
sx
=()(
gd©a
 & 0x3ff);

1238 
sy
;

1240 if(
iGPUHeight
==1024)

1242 if(
dwGPUVîsi⁄
==2)

1243 
sy
 = ()((
gd©a
>>12)&0x3ff);

1244 
sy
 = ()((
gd©a
>>10)&0x3ff);

1246 
sy
 = ()((
gd©a
>>10)&0x3ff);

1248 i‡(
sy
 & 0x200)

1250 
sy
|=0xfc00;

1251 
PªviousPSXDi•œy
.
Di•œyModeNew
.
y
=
sy
/
PSXDi•œy
.
DoubÀ
;

1252 
sy
=0;

1254 
PªviousPSXDi•œy
.
Di•œyModeNew
.
y
=0;

1256 if(
sx
>1000) sx=0;

1258 if(
usFú°Pos
)

1260 
usFú°Pos
--;

1261 if(
usFú°Pos
)

1263 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
 = 
sx
;

1264 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
 = 
sy
;

1265 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
 = 
sx
;

1266 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
 = 
sy
;

1270 if(
dwA˘Fixes
&8)

1272 if((!
PSXDi•œy
.
I¡îœ˚d
) &&

1273 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
 =
sx
 &&

1274 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
 =
sy
)

1277 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
 = 
PªviousPSXDi•œy
.DisplayPosition.x;

1278 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
 = 
PªviousPSXDi•œy
.DisplayPosition.y;

1279 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
 = 
sx
;

1280 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
 = 
sy
;

1284 if((!
PSXDi•œy
.
I¡îœ˚d
) &&

1285 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
 =
sx
 &&

1286 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
 =
sy
)

1288 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
 = 
PSXDi•œy
.DisplayPosition.x;

1289 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
 = 
PSXDi•œy
.DisplayPosition.y;

1290 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
 = 
sx
;

1291 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
 = 
sy
;

1294 
PSXDi•œy
.
Di•œyEnd
.
x
=

1295 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
+ PSXDi•œy.
Di•œyMode
.x;

1296 
PSXDi•œy
.
Di•œyEnd
.
y
=

1297 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
+ PSXDi•œy.
Di•œyMode
.y+
PªviousPSXDi•œy
.
Di•œyModeNew
.y;

1299 
PªviousPSXDi•œy
.
Di•œyEnd
.
x
=

1300 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
+ 
PSXDi•œy
.
Di•œyMode
.x;

1301 
PªviousPSXDi•œy
.
Di•œyEnd
.
y
=

1302 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
+ 
PSXDi•œy
.
Di•œyMode
.y+PªviousPSXDi•œy.
Di•œyModeNew
.y;

1304 
bDi•œyNŸSë
 = 
TRUE
;

1306 i‡(!(
PSXDi•œy
.
I¡îœ˚d
))

1308 
	`upd©eDi•œy
();

1311 if(
PSXDi•œy
.
I¡îœ˚dTe°
 &&

1312 ((
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
 !
PSXDi•œy
.DisplayPosition.x)||

1313 (
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
 !
PSXDi•œy
.DisplayPosition.y)))

1314 
PSXDi•œy
.
I¡îœ˚dTe°
--;

1322 
PSXDi•œy
.
R™ge
.
x0
=
gd©a
 & 0x7ff;

1323 
PSXDi•œy
.
R™ge
.
x1
=(
gd©a
>>12) & 0xfff;

1325 
PSXDi•œy
.
R™ge
.
x1
-=PSXDi•œy.R™ge.
x0
;

1327 
	`Ch™geDi•Off£tsX
();

1334 
PªviousPSXDi•œy
.
Height
 = 
PSXDi•œy
.Height;

1336 
PSXDi•œy
.
R™ge
.
y0
=
gd©a
 & 0x3ff;

1337 
PSXDi•œy
.
R™ge
.
y1
=(
gd©a
>>10) & 0x3ff;

1339 
PSXDi•œy
.
Height
 = PSXDi•œy.
R™ge
.
y1
 -

1340 
PSXDi•œy
.
R™ge
.
y0
 +

1341 
PªviousPSXDi•œy
.
Di•œyModeNew
.
y
;

1343 i‡(
PªviousPSXDi•œy
.
Height
 !
PSXDi•œy
.Height)

1345 
PSXDi•œy
.
Di•œyModeNew
.
y
=PSXDi•œy.
Height
*PSXDi•œy.
DoubÀ
;

1346 
	`Ch™geDi•Off£tsY
();

1347 
	`upd©eDi•œyIfCh™ged
();

1354 
PSXDi•œy
.
Di•œyModeNew
.
x
 = 
di•Widths
[(
gd©a
 & 0x03) | ((gdata & 0x40) >> 4)];

1356 i‡(
gd©a
&0x04Ë
PSXDi•œy
.
DoubÀ
=2;

1357 
PSXDi•œy
.
DoubÀ
=1;

1358 
PSXDi•œy
.
Di•œyModeNew
.
y
 = PSXDi•œy.
Height
*PSXDi•œy.
DoubÀ
;

1360 
	`Ch™geDi•Off£tsY
();

1362 
PSXDi•œy
.
PAL
 = (
gd©a
 & 0x08)?
TRUE
:
FALSE
;

1363 
PSXDi•œy
.
RGB24New
 = (
gd©a
 & 0x10)?
TRUE
:
FALSE
;

1364 
PSXDi•œy
.
I¡îœ˚dNew
 = (
gd©a
 & 0x20)?
TRUE
:
FALSE
;

1366 
STATUSREG
&=~
GPUSTATUS_WIDTHBITS
;

1368 
STATUSREG
|=

1369 (((
gd©a
 & 0x03) << 17) |

1370 ((
gd©a
 & 0x40) << 10));

1372 
PªviousPSXDi•œy
.
I¡îœ˚dNew
=
FALSE
;

1373 i‡(
PSXDi•œy
.
I¡îœ˚dNew
)

1375 if(!
PSXDi•œy
.
I¡îœ˚d
)

1377 
PSXDi•œy
.
I¡îœ˚dTe°
=2;

1378 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
 = 
PSXDi•œy
.DisplayPosition.x;

1379 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
 = 
PSXDi•œy
.DisplayPosition.y;

1380 
PªviousPSXDi•œy
.
I¡îœ˚dNew
=
TRUE
;

1383 
STATUSREG
|=
GPUSTATUS_INTERLACED
;

1387 
PSXDi•œy
.
I¡îœ˚dTe°
=0;

1388 
STATUSREG
&=~
GPUSTATUS_INTERLACED
;

1391 i‡(
PSXDi•œy
.
PAL
)

1392 
STATUSREG
|=
GPUSTATUS_PAL
;

1393 
STATUSREG
&=~
GPUSTATUS_PAL
;

1395 i‡(
PSXDi•œy
.
DoubÀ
==2)

1396 
STATUSREG
|=
GPUSTATUS_DOUBLEHEIGHT
;

1397 
STATUSREG
&=~
GPUSTATUS_DOUBLEHEIGHT
;

1399 i‡(
PSXDi•œy
.
RGB24New
)

1400 
STATUSREG
|=
GPUSTATUS_RGB24
;

1401 
STATUSREG
&=~
GPUSTATUS_RGB24
;

1403 
	`upd©eDi•œyIfCh™ged
();

1411 
gd©a
&=0xff;

1413 
gd©a
)

1416 
GPUd©aRë
=
ulGPUInfoVÆs
[
INFO_TW
];

1419 
GPUd©aRë
=
ulGPUInfoVÆs
[
INFO_DRAWSTART
];

1422 
GPUd©aRë
=
ulGPUInfoVÆs
[
INFO_DRAWEND
];

1426 
GPUd©aRë
=
ulGPUInfoVÆs
[
INFO_DRAWOFF
];

1429 if(
dwGPUVîsi⁄
==2)

1430 
GPUd©aRë
=0x01;

1431 
GPUd©aRë
=0x02;

1435 
GPUd©aRë
=0xBFC03720;

1441 
	}
}

1447 
BOOL
 
	gbNìdWrôeU∂ﬂd
=
FALSE
;

1449 
__ölöe
 
	$FöishedVRAMWrôe
()

1451 if(
bNìdWrôeU∂ﬂd
)

1453 
bNìdWrôeU∂ﬂd
=
FALSE
;

1454 
	`CheckWrôeUpd©e
();

1458 
iD©aWrôeMode
 = 
DR_NORMAL
;

1461 
VRAMWrôe
.
CﬁsRemaöög
 = 0;

1462 
VRAMWrôe
.
RowsRemaöög
 = 0;

1463 
	}
}

1465 
__ölöe
 
	$FöishedVRAMRód
()

1468 
iD©aRódMode
 = 
DR_NORMAL
;

1470 
VRAMRód
.
x
 = 0;

1471 
VRAMRód
.
y
 = 0;

1472 
VRAMRód
.
Width
 = 0;

1473 
VRAMRód
.
Height
 = 0;

1474 
VRAMRód
.
CﬁsRemaöög
 = 0;

1475 
VRAMRód
.
RowsRemaöög
 = 0;

1478 
STATUSREG
&=~
GPUSTATUS_READYFORVRAM
;

1479 
	}
}

1486 
	$CheckVRamRódEx
(
x
, 
y
, 
dx
, 
dy
)

1488 
sAªa
;

1489 
ux
,
uy
,
udx
,
udy
,
wx
,
wy
;

1490 * 
p1
, *
p2
;

1491 
XS
,
YS
;

1492 * 
ps
;

1493 * 
px
;

1494 
s
,
sx
;

1496 if(
STATUSREG
&
GPUSTATUS_RGB24
) ;

1498 if(((
dx
 > 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
) &&

1499 (
x
 < 
PSXDi•œy
.
Di•œyEnd
.x) &&

1500 (
dy
 > 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
) &&

1501 (
y
 < 
PSXDi•œy
.
Di•œyEnd
.y)))

1502 
sAªa
=0;

1504 if((!(
PSXDi•œy
.
I¡îœ˚dTe°
) &&

1505 (
dx
 > 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
) &&

1506 (
x
 < 
PªviousPSXDi•œy
.
Di•œyEnd
.x) &&

1507 (
dy
 > 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
) &&

1508 (
y
 < 
PªviousPSXDi•œy
.
Di•œyEnd
.y)))

1509 
sAªa
=1;

1517 if(
iRídîFVR
)

1519 
bFuŒVRam
=
TRUE
;
iRídîFVR
=2;;

1521 
bFuŒVRam
=
TRUE
;
iRídîFVR
=2;

1525 
p2
=0;

1527 if(
sAªa
==0)

1529 
ux
=
PSXDi•œy
.
Di•œyPosôi⁄
.
x
;

1530 
uy
=
PSXDi•œy
.
Di•œyPosôi⁄
.
y
;

1531 
udx
=
PSXDi•œy
.
Di•œyEnd
.
x
-
ux
;

1532 
udy
=
PSXDi•œy
.
Di•œyEnd
.
y
-
uy
;

1533 if((
PªviousPSXDi•œy
.
Di•œyEnd
.
x
-

1534 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
)==
udx
 &&

1535 (
PªviousPSXDi•œy
.
Di•œyEnd
.
y
-

1536 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
)==
udy
)

1537 
p2
=(
psxVuw
 + (1024*
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
) +

1538 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
);

1542 
ux
=
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
;

1543 
uy
=
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
;

1544 
udx
=
PªviousPSXDi•œy
.
Di•œyEnd
.
x
-
ux
;

1545 
udy
=
PªviousPSXDi•œy
.
Di•œyEnd
.
y
-
uy
;

1546 if((
PSXDi•œy
.
Di•œyEnd
.
x
-

1547 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
)==
udx
 &&

1548 (
PSXDi•œy
.
Di•œyEnd
.
y
-

1549 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
)==
udy
)

1550 
p2
=(
psxVuw
 + (1024*
PSXDi•œy
.
Di•œyPosôi⁄
.
y
) +

1551 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
);

1554 
p1
=(
psxVuw
 + (1024*
uy
Ë+ 
ux
);

1555 if(
p1
==
p2
)Ö2=0;

1557 
x
=0;
y
=0;

1558 
wx
=
dx
=
udx
;
wy
=
dy
=
udy
;

1560 if(
udx
<=0) ;

1561 if(
udy
<=0) ;

1562 if(
dx
<=0) ;

1563 if(
dy
<=0) ;

1564 if(
wx
<=0) ;

1565 if(
wy
<=0) ;

1567 
XS
=()
rR©ioRe˘
.
right
/()
wx
;

1568 
YS
=()
rR©ioRe˘
.
bŸtom
/()
wy
;

1570 
dx
=()(()(dx)*
XS
);

1571 
dy
=()(()(dy)*
YS
);

1573 if(
dx
>
iResX
) dx=iResX;

1574 if(
dy
>
iResY
) dy=iResY;

1576 if(
dx
<=0) ;

1577 if(
dy
<=0) ;

1580 
y
=
iResY
-y-
dy
;

1582 
x
+=
rR©ioRe˘
.
À·
;

1583 
y
-=
rR©ioRe˘
.
t›
;

1585 if(
y
<0Ëy=0; if((y+
dy
)>
iResY
) dy=iResY-y;

1587 if(!
pGfxC¨dS¸ìn
)

1589 
	`glPixñSt‹ei
(
GL_PACK_ALIGNMENT
,1); 
	`glEº‹
();

1590 
pGfxC¨dS¸ìn
=(*)
	`mÆloc
(
iResX
*
iResY
*4);

1593 
ps
=
pGfxC¨dS¸ìn
;

1597 
	`glRódPixñs
(
x
,
y
,
dx
,
dy
,
GL_RGB
,
GL_UNSIGNED_BYTE
,
ps
); 
	`glEº‹
();

1600 
s
=0;

1602 
XS
=()
dx
/()(
udx
);

1603 
YS
=()
dy
/()(
udy
+1);

1605 
y
=
udy
;y>0;y--)

1607 
x
=0;x<
udx
;x++)

1609 if(
p1
>=
psxVuw
 &&Ö1<
psxVuw_eom
)

1611 
px
=
ps
+(3*(()(()
x
 * 
XS
))+

1612 (3*
dx
)*(()(()
y
*
YS
)));

1613 
sx
=(*
px
)>>3;px++;

1614 
s
=
sx
;

1615 
sx
=(*
px
)>>3;px++;

1616 
s
|=
sx
<<5;

1617 
sx
=(*
px
)>>3;

1618 
s
|=
sx
<<10;

1619 
s
&=~0x8000;

1620 *
p1
=
s
;

1622 if(
p2
>=
psxVuw
 &&Ö2<
psxVuw_eom
Ë*p2=
s
;

1624 
p1
++;

1625 if(
p2
)Ö2++;

1628 
p1
 +1024 - 
udx
;

1629 if(
p2
Ëp2 +1024 - 
udx
;

1631 
	}
}

1638 
	$CheckVRamRód
(
x
, 
y
, 
dx
, 
dy
, 
boﬁ
 
bFr⁄t
)

1640 
sAªa
;* 
p
;

1641 
ux
,
uy
,
udx
,
udy
,
wx
,
wy
;
XS
,
YS
;

1642 * 
ps
, * 
px
;

1643 
s
=0,
sx
;

1645 if(
STATUSREG
&
GPUSTATUS_RGB24
) ;

1647 if(((
dx
 > 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
) &&

1648 (
x
 < 
PSXDi•œy
.
Di•œyEnd
.x) &&

1649 (
dy
 > 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
) &&

1650 (
y
 < 
PSXDi•œy
.
Di•œyEnd
.y)))

1651 
sAªa
=0;

1653 if((!(
PSXDi•œy
.
I¡îœ˚dTe°
) &&

1654 (
dx
 > 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
) &&

1655 (
x
 < 
PªviousPSXDi•œy
.
Di•œyEnd
.x) &&

1656 (
dy
 > 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
) &&

1657 (
y
 < 
PªviousPSXDi•œy
.
Di•œyEnd
.y)))

1658 
sAªa
=1;

1664 if(
dwA˘Fixes
&0x40)

1666 if(
iRídîFVR
)

1668 
bFuŒVRam
=
TRUE
;
iRídîFVR
=2;;

1670 
bFuŒVRam
=
TRUE
;
iRídîFVR
=2;

1673 
ux
=
x
;
uy
=
y
;
udx
=
dx
;
udy
=
dy
;

1675 if(
sAªa
==0)

1677 
x
 -=
PSXDi•œy
.
Di•œyPosôi⁄
.x;

1678 
dx
-=
PSXDi•œy
.
Di•œyPosôi⁄
.
x
;

1679 
y
 -=
PSXDi•œy
.
Di•œyPosôi⁄
.y;

1680 
dy
-=
PSXDi•œy
.
Di•œyPosôi⁄
.
y
;

1681 
wx
=
PSXDi•œy
.
Di•œyEnd
.
x
-PSXDi•œy.
Di•œyPosôi⁄
.x;

1682 
wy
=
PSXDi•œy
.
Di•œyEnd
.
y
-PSXDi•œy.
Di•œyPosôi⁄
.y;

1686 
x
 -=
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.x;

1687 
dx
-=
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
;

1688 
y
 -=
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.y;

1689 
dy
-=
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
;

1690 
wx
=
PªviousPSXDi•œy
.
Di•œyEnd
.
x
-PªviousPSXDi•œy.
Di•œyPosôi⁄
.x;

1691 
wy
=
PªviousPSXDi•œy
.
Di•œyEnd
.
y
-PªviousPSXDi•œy.
Di•œyPosôi⁄
.y;

1693 if(
x
<0Ë{
ux
-=x;x=0;}

1694 if(
y
<0Ë{
uy
-=y;y=0;}

1695 if(
dx
>
wx
Ë{
udx
-=(dx-wx);dx=wx;}

1696 if(
dy
>
wy
Ë{
udy
-=(dy-wy);dy=wy;}

1697 
udx
-=
ux
;

1698 
udy
-=
uy
;

1700 
p
=(
psxVuw
 + (1024*
uy
Ë+ 
ux
);

1702 if(
udx
<=0) ;

1703 if(
udy
<=0) ;

1704 if(
dx
<=0) ;

1705 if(
dy
<=0) ;

1706 if(
wx
<=0) ;

1707 if(
wy
<=0) ;

1709 
XS
=()
rR©ioRe˘
.
right
/()
wx
;

1710 
YS
=()
rR©ioRe˘
.
bŸtom
/()
wy
;

1712 
dx
=()(()(dx)*
XS
);

1713 
dy
=()(()(dy)*
YS
);

1714 
x
=()(()x*
XS
);

1715 
y
=()(()y*
YS
);

1717 
dx
-=
x
;

1718 
dy
-=
y
;

1720 if(
dx
>
iResX
) dx=iResX;

1721 if(
dy
>
iResY
) dy=iResY;

1723 if(
dx
<=0) ;

1724 if(
dy
<=0) ;

1727 
y
=
iResY
-y-
dy
;

1729 
x
+=
rR©ioRe˘
.
À·
;

1730 
y
-=
rR©ioRe˘
.
t›
;

1732 if(
y
<0Ëy=0; if((y+
dy
)>
iResY
) dy=iResY-y;

1734 if(!
pGfxC¨dS¸ìn
)

1736 
	`glPixñSt‹ei
(
GL_PACK_ALIGNMENT
,1); 
	`glEº‹
();

1737 
pGfxC¨dS¸ìn
=(*)
	`mÆloc
(
iResX
*
iResY
*4);

1740 
ps
=
pGfxC¨dS¸ìn
;

1744 
	`glRódPixñs
(
x
,
y
,
dx
,
dy
,
GL_RGB
,
GL_UNSIGNED_BYTE
,
ps
); 
	`glEº‹
(); glError();

1747 
XS
=()
dx
/()(
udx
);

1748 
YS
=()
dy
/()(
udy
+1);

1750 
y
=
udy
;y>0;y--)

1752 
x
=0;x<
udx
;x++)

1754 if(
p
>=
psxVuw
 &&Ö<
psxVuw_eom
)

1756 
px
=
ps
+(3*(()(()
x
 * 
XS
))+

1757 (3*
dx
)*(()(()
y
*
YS
)));

1758 
sx
=(*
px
)>>3;px++;

1759 
s
=
sx
;

1760 
sx
=(*
px
)>>3;px++;

1761 
s
|=
sx
<<5;

1762 
sx
=(*
px
)>>3;

1763 
s
|=
sx
<<10;

1764 
s
&=~0x8000;

1765 *
p
=
s
;

1767 
p
++;

1769 
p
 +1024 - 
udx
;

1771 
	}
}

1777 
CALLBACK
 
	$GPUªadD©aMem
(* 
pMem
, 
iSize
)

1779 
i
;

1781 if(
iD©aRódMode
!=
DR_VRAMTRANSFER
) ;

1783 
GPUIsBusy
;

1786 
VRAMRód
.
ImagePå
>=
psxVuw_eom
)

1787 
VRAMRód
.
ImagePå
-=
iGPUHeight
*1024;

1788 
VRAMRód
.
ImagePå
<
psxVuw
)

1789 
VRAMRód
.
ImagePå
+=
iGPUHeight
*1024;

1791 if((
iFømeRódTy≥
&1 && 
iSize
>1) &&

1792 !(
iDøwnSomëhög
==2 &&

1793 
VRAMRód
.
x
 =
VRAMWrôe
.x &&

1794 
VRAMRód
.
y
 =
VRAMWrôe
.y &&

1795 
VRAMRód
.
Width
 =
VRAMWrôe
.Width &&

1796 
VRAMRód
.
Height
 =
VRAMWrôe
.Height))

1797 
	`CheckVRamRód
(
VRAMRód
.
x
,VRAMRód.
y
,

1798 
VRAMRód
.
x
+VRAMRód.
RowsRemaöög
,

1799 
VRAMRód
.
y
+VRAMRód.
CﬁsRemaöög
,

1800 
TRUE
);

1802 
i
=0;i<
iSize
;i++)

1805 i‡((
VRAMRód
.
CﬁsRemaöög
 > 0Ë&& (VRAMRód.
RowsRemaöög
 > 0))

1808 
GPUd©aRë
=()*
VRAMRód
.
ImagePå
;

1810 
VRAMRód
.
ImagePå
++;

1811 if(
VRAMRód
.
ImagePå
>=
psxVuw_eom
ËVRAMRód.ImagePå-=
iGPUHeight
*1024;

1812 
VRAMRód
.
RowsRemaöög
 --;

1814 if(
VRAMRód
.
RowsRemaöög
<=0)

1816 
VRAMRód
.
RowsRemaöög
 = VRAMRód.
Width
;

1817 
VRAMRód
.
CﬁsRemaöög
--;

1818 
VRAMRód
.
ImagePå
 +1024 - VRAMRód.
Width
;

1819 if(
VRAMRód
.
ImagePå
>=
psxVuw_eom
ËVRAMRód.ImagePå-=
iGPUHeight
*1024;

1823 
GPUd©aRë
|=()(*
VRAMRód
.
ImagePå
)<<16;

1824 *
pMem
++=
GPUd©aRë
;

1826 if(
VRAMRód
.
CﬁsRemaöög
 <= 0)

1827 {
	`FöishedVRAMRód
();
ENDREAD
;}

1829 
VRAMRód
.
ImagePå
++;

1830 if(
VRAMRód
.
ImagePå
>=
psxVuw_eom
ËVRAMRód.ImagePå-=
iGPUHeight
*1024;

1831 
VRAMRód
.
RowsRemaöög
--;

1832 if(
VRAMRód
.
RowsRemaöög
<=0)

1834 
VRAMRód
.
RowsRemaöög
 = VRAMRód.
Width
;

1835 
VRAMRód
.
CﬁsRemaöög
--;

1836 
VRAMRód
.
ImagePå
 +1024 - VRAMRód.
Width
;

1837 if(
VRAMRód
.
ImagePå
>=
psxVuw_eom
ËVRAMRód.ImagePå-=
iGPUHeight
*1024;

1839 if(
VRAMRód
.
CﬁsRemaöög
 <= 0)

1840 {
	`FöishedVRAMRód
();
ENDREAD
;}

1842 {
	`FöishedVRAMRód
();
ENDREAD
;}

1845 
ENDREAD
:

1846 
GPUIsIdÀ
;

1847 
	}
}

1849 
CALLBACK
 
	$GPUªadD©a
()

1851 
l
;

1852 
	`GPUªadD©aMem
(&
l
,1);

1853  
GPUd©aRë
;

1854 
	}
}

1860 c⁄° 
	g¥imTabÀCX
[256] =

1934 
CALLBACK
 
	$GPUwrôeD©aMem
(* 
pMem
, 
iSize
)

1936 
comm™d
;

1937 
gd©a
=0;

1938 
i
=0;

1939 
GPUIsBusy
;

1940 
GPUIsNŸRódyF‹Comm™ds
;

1942 
STARTVRAM
:

1944 if(
iD©aWrôeMode
==
DR_VRAMTRANSFER
)

1947 
VRAMWrôe
.
ImagePå
>=
psxVuw_eom
)

1948 
VRAMWrôe
.
ImagePå
-=
iGPUHeight
*1024;

1949 
VRAMWrôe
.
ImagePå
<
psxVuw
)

1950 
VRAMWrôe
.
ImagePå
+=
iGPUHeight
*1024;

1953 
VRAMWrôe
.
CﬁsRemaöög
>0)

1955 
VRAMWrôe
.
RowsRemaöög
>0)

1957 if(
i
>=
iSize
Ë{
ENDVRAM
;}

1958 
i
++;

1960 
gd©a
=*
pMem
++;

1962 *
VRAMWrôe
.
ImagePå
++ = ()
gd©a
;

1963 if(
VRAMWrôe
.
ImagePå
>=
psxVuw_eom
ËVRAMWrôe.ImagePå-=
iGPUHeight
*1024;

1964 
VRAMWrôe
.
RowsRemaöög
 --;

1966 if(
VRAMWrôe
.
RowsRemaöög
 <= 0)

1968 
VRAMWrôe
.
CﬁsRemaöög
--;

1969 i‡(
VRAMWrôe
.
CﬁsRemaöög
 <= 0)

1971 
gd©a
=(gd©a&0xFFFF)|((()(*
VRAMWrôe
.
ImagePå
))<<16);

1972 
	`FöishedVRAMWrôe
();

1973 
ENDVRAM
;

1975 
VRAMWrôe
.
RowsRemaöög
 = VRAMWrôe.
Width
;

1976 
VRAMWrôe
.
ImagePå
 +1024 - VRAMWrôe.
Width
;

1979 *
VRAMWrôe
.
ImagePå
++ = ()(
gd©a
>>16);

1980 if(
VRAMWrôe
.
ImagePå
>=
psxVuw_eom
ËVRAMWrôe.ImagePå-=
iGPUHeight
*1024;

1981 
VRAMWrôe
.
RowsRemaöög
 --;

1984 
VRAMWrôe
.
RowsRemaöög
 = VRAMWrôe.
Width
;

1985 
VRAMWrôe
.
CﬁsRemaöög
--;

1986 
VRAMWrôe
.
ImagePå
 +1024 - VRAMWrôe.
Width
;

1989 
	`FöishedVRAMWrôe
();

1992 
ENDVRAM
:

1994 if(
iD©aWrôeMode
==
DR_NORMAL
)

1996 (* *
¥imFunc
)(*);

1997 if(
bSkùNextFøme
Ë
¥imFunc
=
¥imTabÀSkù
;

1998 
¥imFunc
=
¥imTabÀJ
;

2000 ;
i
<
iSize
;)

2002 if(
iD©aWrôeMode
==
DR_VRAMTRANSFER
Ë
STARTVRAM
;

2004 
gd©a
=*
pMem
++;
i
++;

2006 if(
gpuD©aC
 == 0)

2008 
comm™d
 = ()((
gd©a
>>24) & 0xff);

2010 if(
¥imTabÀCX
[
comm™d
])

2012 
gpuD©aC
 = 
¥imTabÀCX
[
comm™d
];

2013 
gpuComm™d
 = 
comm™d
;

2014 
gpuD©aM
[0] = 
gd©a
;

2015 
gpuD©aP
 = 1;

2021 
gpuD©aM
[
gpuD©aP
] = 
gd©a
;

2022 if(
gpuD©aC
>128)

2024 if((
gpuD©aC
==254 && 
gpuD©aP
>=3) ||

2025 (
gpuD©aC
==255 && 
gpuD©aP
>=4 && !(gpuDataP&1)))

2027 if((
gpuD©aM
[
gpuD©aP
] & 0xF000F000) == 0x50005000)

2028 
gpuD©aP
=
gpuD©aC
-1;

2031 
gpuD©aP
++;

2034 if(
gpuD©aP
 =
gpuD©aC
)

2036 
gpuD©aC
=
gpuD©aP
=0;

2037 
¥imFunc
[
gpuComm™d
]((*)
gpuD©aM
);

2039 if(
dwEmuFixes
&0x0001 || 
dwA˘Fixes
&0x20000)

2040 
iFakePrimBusy
=4;

2045 
GPUd©aRë
=
gd©a
;

2047 
GPUIsRódyF‹Comm™ds
;

2048 
GPUIsIdÀ
;

2049 
	}
}

2053 
CALLBACK
 
	$GPUwrôeD©a
(
gd©a
)

2055 
	`GPUwrôeD©aMem
(&
gd©a
,1);

2056 
	}
}

2062 
CALLBACK
 
	$GPU£tMode
(
gd©a
)

2069 
	}
}

2072 
CALLBACK
 
	$GPUgëMode
()

2077 
iT
=0;

2079 if(
iD©aWrôeMode
==
DR_VRAMTRANSFER
Ë
iT
|=0x1;

2080 if(
iD©aRódMode
 ==
DR_VRAMTRANSFER
Ë
iT
|=0x2;

2082  
iT
;

2083 
	}
}

2089 #i‚de‡
_WINDOWS


2139 
CALLBACK
 
	$GPUc⁄figuª
()

2144 
	}
}

2150 
	$SëFixes
()

2152 
	`ReInôFømeC≠
();

2154 if(
dwA˘Fixes
 & 0x2000)

2155 
di•Widths
[4]=384;

2156 
di•Widths
[4]=368;

2157 
	}
}

2163 
	glU£dAddr
[3];

2165 
__ölöe
 
BOOL
 
	$CheckF‹EndÀssLo›
(
œddr
)

2167 if(
œddr
==
lU£dAddr
[1]Ë 
TRUE
;

2168 if(
œddr
==
lU£dAddr
[2]Ë 
TRUE
;

2170 if(
œddr
<
lU£dAddr
[0])ÜUsedAddr[1]=laddr;

2171 
lU£dAddr
[2]=
œddr
;

2172 
lU£dAddr
[0]=
œddr
;

2173  
FALSE
;

2174 
	}
}

2180 
CALLBACK
 
	$GPUdmaChaö
(* 
ba£AddrL
, 
addr
)

2182 
dmaMem
;

2183 * 
ba£AddrB
;

2184 
cou¡
;
DMAComm™dCou¡î
 = 0;

2186 if(
bIsFú°Føme
Ë
	`GLöôülize
(
NULL
, NULL);

2188 
GPUIsBusy
;

2190 
lU£dAddr
[0]=lUsedAddr[1]=lUsedAddr[2]=0xffffff;

2192 
ba£AddrB
 = (*Ë
ba£AddrL
;

2196 if(
iGPUHeight
==512Ë
addr
&=0x1FFFFC;

2198 if(
DMAComm™dCou¡î
++ > 2000000) ;

2199 if(
	`CheckF‹EndÀssLo›
(
addr
)) ;

2201 
cou¡
 = 
ba£AddrB
[
addr
+3];

2203 
dmaMem
=
addr
+4;

2205 if(
cou¡
>0Ë
	`GPUwrôeD©aMem
(&
ba£AddrL
[
dmaMem
>>2],count);

2207 
addr
 = 
ba£AddrL
[addr>>2]&0xffffff;

2209 
addr
 != 0xffffff);

2211 
GPUIsIdÀ
;

2214 
	}
}

2220 
CALLBACK
 
	$GPUabout
()

2223 
	}
}

2229 
CALLBACK
 
	$GPUã°
()

2235 
	}
}

2243 
CALLBACK
 
	$GPU‰ìze
(
ulGëFªezeD©a
,
GPUFªeze_t
 * 
pF
)

2245 if(
ulGëFªezeD©a
==2)

2247 
lSlŸNum
=*((*)
pF
);

2248 if(
lSlŸNum
<0)  0;

2249 if(
lSlŸNum
>8)  0;

2250 
lSñe˘edSlŸ
=
lSlŸNum
+1;

2254 if(!
pF
)  0;

2255 if(
pF
->
ulFªezeVîsi⁄
!=1)  0;

2257 if(
ulGëFªezeD©a
==1)

2259 
pF
->
ulSètus
=
STATUSREG
;

2260 
	`mem˝y
(
pF
->
ulC⁄åﬁ
,
ulSètusC⁄åﬁ
,256*());

2261 
	`mem˝y
(
pF
->
psxVRam
, 
psxVub
, 1024*
iGPUHeight
*2);

2266 if(
ulGëFªezeD©a
!=0)  0;

2268 
STATUSREG
=
pF
->
ulSètus
;

2269 
	`mem˝y
(
ulSètusC⁄åﬁ
,
pF
->
ulC⁄åﬁ
,256*());

2270 
	`mem˝y
(
psxVub
, 
pF
->
psxVRam
, 1024*
iGPUHeight
*2);

2272 
	`Re£tTextuªAªa
(
TRUE
);

2274 
	`GPUwrôeSètus
(
ulSètusC⁄åﬁ
[0]);

2275 
	`GPUwrôeSètus
(
ulSètusC⁄åﬁ
[1]);

2276 
	`GPUwrôeSètus
(
ulSètusC⁄åﬁ
[2]);

2277 
	`GPUwrôeSètus
(
ulSètusC⁄åﬁ
[3]);

2278 
	`GPUwrôeSètus
(
ulSètusC⁄åﬁ
[8]);

2279 
	`GPUwrôeSètus
(
ulSètusC⁄åﬁ
[6]);

2280 
	`GPUwrôeSètus
(
ulSètusC⁄åﬁ
[7]);

2281 
	`GPUwrôeSètus
(
ulSètusC⁄åﬁ
[5]);

2282 
	`GPUwrôeSètus
(
ulSètusC⁄åﬁ
[4]);

2284 
	}
}

2295 
	gcF⁄t
[10][120]=

2521 
	$PaötPicDŸ
(* 
p
,
c
)

2523 if(
c
==0Ë{*
p
++=0x00;*p++=0x00;*p=0x00;;}

2524 if(
c
==1Ë{*
p
++=0xff;*p++=0xff;*p=0xff;;}

2525 if(
c
==2Ë{*
p
++=0x00;*p++=0x00;*p=0xff;;}

2526 
	}
}

2530 
CALLBACK
 
	$GPUgëS¸ìnPic
(* 
pMem
)

2532 
XS
,
YS
;
x
,
y
,
v
;

2533 * 
ps
, * 
px
, * 
pf
;

2534 
c
;

2536 if(!
pGfxC¨dS¸ìn
)

2538 
	`glPixñSt‹ei
(
GL_PACK_ALIGNMENT
,1); 
	`glEº‹
();

2539 
pGfxC¨dS¸ìn
=(*)
	`mÆloc
(
iResX
*
iResY
*4);

2542 
ps
=
pGfxC¨dS¸ìn
;

2546 
	`glRódPixñs
(0,0,
iResX
,
iResY
,
GL_RGB
,
GL_UNSIGNED_BYTE
,
ps
); 
	`glEº‹
();

2550 
XS
=()
iResX
/128;

2551 
YS
=()
iResY
/96;

2552 
pf
=
pMem
;

2554 
y
=96;y>0;y--)

2556 
x
=0;x<128;x++)

2558 
px
=
ps
+(3*(()(()
x
 * 
XS
))+

2559 (3*
iResX
)*(()(()
y
*
YS
)));

2560 *(
pf
+0)=*(
px
+2);

2561 *(
pf
+1)=*(
px
+1);

2562 *(
pf
+2)=*(
px
+0);

2563 
pf
+=3;

2570 
pf
=
pMem
+(103*3);

2572 
y
=0;y<20;y++)

2574 
x
=0;x<6;x++)

2576 
c
=
cF⁄t
[
lSñe˘edSlŸ
][
x
+
y
*6];

2577 
v
=(
c
&0xc0)>>6;

2578 
	`PaötPicDŸ
(
pf
,()
v
);pf+=3;

2579 
v
=(
c
&0x30)>>4;

2580 
	`PaötPicDŸ
(
pf
,()
v
);pf+=3;

2581 
v
=(
c
&0x0c)>>2;

2582 
	`PaötPicDŸ
(
pf
,()
v
);pf+=3;

2583 
v
=
c
&0x03;

2584 
	`PaötPicDŸ
(
pf
,()
v
);pf+=3;

2586 
pf
+=104*3;

2589 
pf
=
pMem
;

2590 
x
=0;x<128;x++)

2592 *(
pf
+(95*128*3))=0x00;*pf++=0x00;

2593 *(
pf
+(95*128*3))=0x00;*pf++=0x00;

2594 *(
pf
+(95*128*3))=0xff;*pf++=0xff;

2596 
pf
=
pMem
;

2597 
y
=0;y<96;y++)

2599 *(
pf
+(127*3))=0x00;*pf++=0x00;

2600 *(
pf
+(127*3))=0x00;*pf++=0x00;

2601 *(
pf
+(127*3))=0xff;*pf++=0xff;

2602 
pf
+=127*3;

2605 
	}
}

2609 
CALLBACK
 
	$GPUshowS¸ìnPic
(* 
pMem
)

2614 
	}
}

2618 
CALLBACK
 
	$GPU£tfix
(
dwFixBôs
)

2620 
dwEmuFixes
=
dwFixBôs
;

2621 
	}
}

2625 
CALLBACK
 
	$GPUvisuÆVibøti⁄
(
iSmÆl
, 
iBig
)

2627 
iVibVÆ
;

2629 if(
PSXDi•œy
.
Di•œyModeNew
.
x
)

2630 
iVibVÆ
=
	`max
(1,
iResX
/
PSXDi•œy
.
Di•œyModeNew
.
x
);

2631 
iVibVÆ
=1;

2633 if(
iBig
Ë
iRumbÀVÆ
=
	`max
(4*
iVibVÆ
,
	`mö
(15*iVibVal,(()iBig *iVibVal)/10));

2634 
iRumbÀVÆ
=
	`max
(1*
iVibVÆ
,
	`mö
–3*iVibVÆ,(()
iSmÆl
*iVibVal)/10));

2636 
	`§™d
(
	`timeGëTime
());

2638 
iRumbÀTime
=15;

2639 
	}
}

2645 
CALLBACK
 
	$GPUdi•œyFœgs
(
dwFœgs
)

2648 
	}
}

2651 
CALLBACK
 
	$GPUª¨medCÆlbacks
(c⁄° **
cbs
)

2653 
ª¨med_gë_œyî_pos
 = 
cbs
[0];

2654 
	}
}

2656 
	$ÊùEGL
()

2658 
	`eglSw≠Buf„rs
(
di•œy
, 
surÁ˚
);

2659 
	}
}

	@plugins/gpu-gles/gpuPlugin.h

27 #i‚de‡
_GPU_PLUGIN_H


28 
	#_GPU_PLUGIN_H


	)

32 #ifde‡
__˝lu•lus


36 #i‡!
deföed
(
_WINDOWS
Ë&& !deföed(
__NANOGL__
)

37 
	#glOπho
(
x
,
y
,
z
,
xx
,
yy
,
zz
Ë
	`glOπhof
(x,y,z,xx,yy,zz)

	)

40 
	#PRED
(
x
Ë((x << 3Ë& 0xF8)

	)

41 
	#PBLUE
(
x
Ë((x >> 2Ë& 0xF8)

	)

42 
	#PGREEN
(
x
Ë((x >> 7Ë& 0xF8)

	)

44 
	#RED
(
x
Ë(x & 0xff)

	)

45 
	#BLUE
(
x
Ë((x>>16Ë& 0xff)

	)

46 
	#GREEN
(
x
Ë((x>>8Ë& 0xff)

	)

47 
	#COLOR
(
x
Ë(x & 0xffffff)

	)

50 
	~"gpuExã∫Æs.h
"

54 
	#CALLBACK


	)

56 
	#boﬁ
 

	)

59 
ulFªezeVîsi⁄
;

60 
ulSètus
;

61 
ulC⁄åﬁ
[256];

62 
psxVRam
[1024*1024*2];

63 } 
	tGPUFªeze_t
;

66 
CALLBACK
 
GPUöô
();

67 
CALLBACK
 
GPUshutdown
();

68 
CALLBACK
 
GPU›í
(
hwndGPU
);

69 
CALLBACK
 
GPU˛o£
();

70 
CALLBACK
 
GPUªadD©a
();

71 
CALLBACK
 
GPUªadD©aMem
(* 
pMem
, 
iSize
);

72 
CALLBACK
 
GPUªadSètus
();

73 
CALLBACK
 
GPUwrôeD©a
(
gd©a
);

74 
CALLBACK
 
GPUwrôeD©aMem
(* 
pMem
, 
iSize
);

75 
CALLBACK
 
GPUwrôeSètus
(
gd©a
);

76 
CALLBACK
 
GPUdmaChaö
(* 
ba£AddrL
, 
addr
);

77 
CALLBACK
 
GPUupd©eLa˚
();

78 
CALLBACK
 
GPUmakeS«pshŸ
();

79 
CALLBACK
 
GPU‰ìze
(
ulGëFªezeD©a
,
GPUFªeze_t
 * 
pF
);

80 
CALLBACK
 
GPUgëS¸ìnPic
(* 
pMem
);

81 
CALLBACK
 
GPUshowS¸ìnPic
(* 
pMem
);

85 
CALLBACK
 
GPUc⁄figuª
();

86 
CALLBACK
 
GPUã°
();

87 
CALLBACK
 
GPUabout
();

90 
DoS«pShŸ
();

91 
GPUvSöc
();

92 
upd©eDi•œy
();

93 
upd©eFr⁄tDi•œy
();

94 
SëAutoFømeC≠
();

95 
SëA•e˘R©io
();

96 
CheckVRamRód
(
x
, 
y
, 
dx
, 
dy
, 
boﬁ
 
bFr⁄t
);

97 
CheckVRamRódEx
(
x
, 
y
, 
dx
, 
dy
);

98 
SëFixes
();

100 
PaötPicDŸ
(* 
p
,
c
);

102 
ResizeWödow
();

105 #ifde‡
__˝lu•lus


	@plugins/gpu-gles/gpuPrim.c

27 
	#_IN_PRIMDRAW


	)

29 
	~"gpuStdafx.h
"

30 
	~"gpuExã∫Æs.h
"

31 
	~"gpuPlugö.h
"

32 
	~"gpuDøw.h
"

33 
	~"gpuTextuª.h
"

34 
	~"gpuPrim.h
"

40 
	#DEFOPAQUEON
 
	`glAÕhaFunc
(
GL_EQUAL
,0.0f);
bBÀndE«bÀ
=
FALSE
;
	`glDißbÀ
(
GL_BLEND
);

	)

41 
	#DEFOPAQUEOFF
 
	`glAÕhaFunc
(
GL_GREATER
,0.49f);

	)

42 
	#Âoöt
(
x
Ë
	)
x

48 
BOOL
 
	gbDøwTextuªd
;

49 
BOOL
 
	gbDøwSmoŸhShaded
;

50 
BOOL
 
	gbOldSmoŸhShaded
;

51 
BOOL
 
	gbDøwN⁄Shaded
;

52 
BOOL
 
	gbDøwMu…iPass
;

53 
	giOffs¸ìnDøwög
;

54 
	giDøwnSomëhög
=0;

56 
BOOL
 
	gbRídîFr⁄tBuf„r
=
FALSE
;

58 
GLubyã
 
	gubGloAÕha
;

59 
GLubyã
 
	gubGloCﬁAÕha
;

60 
	giFûãrTy≥
;

61 
BOOL
 
	gbFuŒVRam
=
FALSE
;

62 
BOOL
 
	gbDøwDôhî
;

63 
BOOL
 
	gbU£Mu…iPass
;

64 
GLuöt
 
	ggTexName
;

65 
BOOL
 
	gbTexE«bÀd
;

66 
BOOL
 
	gbBÀndE«bÀ
;

67 
PSXRe˘_t
 
	gxrU∂ﬂdAªa
;

68 
PSXRe˘_t
 
	gxrU∂ﬂdAªaIL
;

69 
PSXRe˘_t
 
	gxrU∂ﬂdAªaRGB24
;

70 
	giS¥ôeTex
=0;

71 
	gusMúr‹
;

73 
BOOL
 
	gbNìdU∂ﬂdA·î
=
FALSE
;

74 
BOOL
 
	gbNìdU∂ﬂdTe°
=
FALSE
;

75 
BOOL
 
	gbUsögTWö
=
FALSE
;

76 
BOOL
 
	gbUsögMovõ
=
FALSE
;

77 
PSXRe˘_t
 
	gxrMovõAªa
;

78 
	gsS¥ôe_ux2
;

79 
	gsS¥ôe_vy2
;

80 
	gulOLDCOL
=0;

81 
	gulClutID
;

83 
	gdwCfgFixes
;

84 
	gdwA˘Fixes
=0;

85 
	gdwEmuFixes
=0;

86 
BOOL
 
	gbU£Fixes
;

88 
	gdøwX
,
	gdøwY
,
	gdøwW
,
	gdøwH
;

89 
	gsxmö
,
	gsxmax
,
	gsymö
,
	gsymax
;

90 
	gCSVERTEX
=0,
	gCSCOLOR
=0,
	gCSTEXTURE
=0;

92 
	$off£tPSX4
()

94 
lx0
 +
PSXDi•œy
.
DøwOff£t
.
x
;

95 
ly0
 +
PSXDi•œy
.
DøwOff£t
.
y
;

96 
lx1
 +
PSXDi•œy
.
DøwOff£t
.
x
;

97 
ly1
 +
PSXDi•œy
.
DøwOff£t
.
y
;

98 
lx2
 +
PSXDi•œy
.
DøwOff£t
.
x
;

99 
ly2
 +
PSXDi•œy
.
DøwOff£t
.
y
;

100 
lx3
 +
PSXDi•œy
.
DøwOff£t
.
x
;

101 
ly3
 +
PSXDi•œy
.
DøwOff£t
.
y
;

102 
	}
}

108 
	$Upd©eGlobÆTP
(
gd©a
)

110 
GlobÆTextAddrX
 = (
gd©a
 << 6) & 0x3c0;

112 if(
iGPUHeight
==1024)

114 if(
dwGPUVîsi⁄
==2)

116 
GlobÆTextAddrY
 =((
gd©a
 & 0x60 ) << 3);

117 
GlobÆTextIL
 =(
gd©a
 & 0x2000) >> 13;

118 
GlobÆTextABR
 = ()((
gd©a
 >> 7) & 0x3);

119 
GlobÆTextTP
 = (
gd©a
 >> 9) & 0x3;

120 if(
GlobÆTextTP
==3) GlobalTextTP=2;

121 
GlobÆTextuªPage
 = (
GlobÆTextAddrX
>>6)+(
GlobÆTextAddrY
>>4);

122 
usMúr‹
 =0;

123 
STATUSREG
 = (STATUSREG & 0xfff„000 ) | (
gd©a
 & 0x1fff );

128 
GlobÆTextAddrY
 = ()(((
gd©a
 << 4) & 0x100) | ((gdata >> 2) & 0x200));

131 
GlobÆTextAddrY
 = (
gd©a
 << 4) & 0x100;

133 
usMúr‹
=
gd©a
&0x3000;

135 
GlobÆTextTP
 = (
gd©a
 >> 7) & 0x3;

136 if(
GlobÆTextTP
==3) GlobalTextTP=2;

137 
GlobÆTextABR
 = (
gd©a
 >> 5) & 0x3;

139 
GlobÆTextuªPage
 = (
GlobÆTextAddrX
>>6)+(
GlobÆTextAddrY
>>4);

141 
STATUSREG
&=~0x07ff;

142 
STATUSREG
|=(
gd©a
 & 0x07ff);

143 
	}
}

150 
	$DoubÀBGR2RGB
 (
BGR
)

152 
ebx
,
óx
,
edx
;

154 
ebx
=(
BGR
&0x000000ff)<<1;

155 if(
ebx
&0x00000100)Ébx=0x000000ff;

157 
óx
=(
BGR
&0x0000ff00)<<1;

158 if(
óx
&0x00010000)Éax=0x0000ff00;

160 
edx
=(
BGR
&0x00ff0000)<<1;

161 if(
edx
&0x01000000)Édx=0x00ff0000;

163  (
ebx
|
óx
|
edx
);

164 
	}
}

166 
	$BGR24to16
 (
BGR
)

168  ((
BGR
>>3)&0x1f)|((BGR&0xf80000)>>9)|((BGR&0xf800)>>6);

169 
	}
}

176 
	$PRIMdøwTextuªdQuad
(
OGLVîãx
* 
vîãx1
, OGLVîãx* 
vîãx2
,

177 
OGLVîãx
* 
vîãx3
, OGLVîãx* 
vîãx4
)

181 
Vîãx
 
v
[4];

183 
v
[0].
xyz
.
x
 = 
	`Âoöt
(
vîãx1
->x);

184 
v
[0].
xyz
.
y
 = 
	`Âoöt
(
vîãx1
->y);

185 
v
[0].
xyz
.
z
 = 
	`Âoöt
(
vîãx1
->z);

186 
v
[0].
°
.
x
 = 
	`Âoöt
(
vîãx1
->
sow
);

187 
v
[0].
°
.
y
 = 
	`Âoöt
(
vîãx1
->
tow
);

189 
v
[1].
xyz
.
x
 = 
	`Âoöt
(
vîãx2
->x);

190 
v
[1].
xyz
.
y
 = 
	`Âoöt
(
vîãx2
->y);

191 
v
[1].
xyz
.
z
 = 
	`Âoöt
(
vîãx2
->z);

192 
v
[1].
°
.
x
 = 
	`Âoöt
(
vîãx2
->
sow
);

193 
v
[1].
°
.
y
 = 
	`Âoöt
(
vîãx2
->
tow
);

195 
v
[2].
xyz
.
x
 = 
	`Âoöt
(
vîãx4
->x);

196 
v
[2].
xyz
.
y
 = 
	`Âoöt
(
vîãx4
->y);

197 
v
[2].
xyz
.
z
 = 
	`Âoöt
(
vîãx4
->z);

198 
v
[2].
°
.
x
 = 
	`Âoöt
(
vîãx4
->
sow
);

199 
v
[2].
°
.
y
 = 
	`Âoöt
(
vîãx4
->
tow
);

201 
v
[3].
xyz
.
x
 = 
	`Âoöt
(
vîãx3
->x);

202 
v
[3].
xyz
.
y
 = 
	`Âoöt
(
vîãx3
->y);

203 
v
[3].
xyz
.
z
 = 
	`Âoöt
(
vîãx3
->z);

204 
v
[3].
°
.
x
 = 
	`Âoöt
(
vîãx3
->
sow
);

205 
v
[3].
°
.
y
 = 
	`Âoöt
(
vîãx3
->
tow
);

206 i‡(
CSCOLOR
==1Ë
	`glDißbÀClõ¡Sèã
(
GL_COLOR_ARRAY
);
	`glEº‹
();

207 i‡(
CSTEXTURE
==0Ë
	`glE«bÀClõ¡Sèã
(
GL_TEXTURE_COORD_ARRAY
);
	`glEº‹
();

208 i‡(
CSVERTEX
==0Ë
	`glE«bÀClõ¡Sèã
(
GL_VERTEX_ARRAY
);
	`glEº‹
();

209 
	`glTexCo‹dPoöãr
(2, 
GL_FLOAT
, (
v
[0]), &v[0].
°
);
	`glEº‹
();

210 
	`glVîãxPoöãr
(3, 
GL_FLOAT
, (
v
[0]), &v[0].
xyz
);
	`glEº‹
();

211 
	`glDøwAºays
(
GL_TRIANGLE_STRIP
, 0, 4);
	`glEº‹
();

212 
CSTEXTURE
=
CSVERTEX
=1;

213 
CSCOLOR
=0;

214 
	}
}

218 
	$PRIMdøwTextuªdTri
(
OGLVîãx
* 
vîãx1
, OGLVîãx* 
vîãx2
,

219 
OGLVîãx
* 
vîãx3
)

221 
Vîãx
 
v
[3];

222 i‡(
vîãx1
->
x
==0&&vîãx1->
y
==0&&
vîãx2
->x==0&&vîãx2->y==0&&
vîãx3
->x==0&&vertex3->y==0) ;

224 
v
[0].
xyz
.
x
 = 
	`Âoöt
(
vîãx1
->x);

225 
v
[0].
xyz
.
y
 = 
	`Âoöt
(
vîãx1
->y);

226 
v
[0].
xyz
.
z
 = 
	`Âoöt
(
vîãx1
->z);

227 
v
[0].
°
.
x
 = 
	`Âoöt
(
vîãx1
->
sow
);

228 
v
[0].
°
.
y
 = 
	`Âoöt
(
vîãx1
->
tow
);

230 
v
[1].
xyz
.
x
 = 
	`Âoöt
(
vîãx2
->x);

231 
v
[1].
xyz
.
y
 = 
	`Âoöt
(
vîãx2
->y);

232 
v
[1].
xyz
.
z
 = 
	`Âoöt
(
vîãx2
->z);

233 
v
[1].
°
.
x
 = 
	`Âoöt
(
vîãx2
->
sow
);

234 
v
[1].
°
.
y
 = 
	`Âoöt
(
vîãx2
->
tow
);

236 
v
[2].
xyz
.
x
 = 
	`Âoöt
(
vîãx3
->x);

237 
v
[2].
xyz
.
y
 = 
	`Âoöt
(
vîãx3
->y);

238 
v
[2].
xyz
.
z
 = 
	`Âoöt
(
vîãx3
->z);

239 
v
[2].
°
.
x
 = 
	`Âoöt
(
vîãx3
->
sow
);

240 
v
[2].
°
.
y
 = 
	`Âoöt
(
vîãx3
->
tow
);

241 i‡(
CSCOLOR
==1Ë
	`glDißbÀClõ¡Sèã
(
GL_COLOR_ARRAY
);
	`glEº‹
();

242 i‡(
CSTEXTURE
==0Ë
	`glE«bÀClõ¡Sèã
(
GL_TEXTURE_COORD_ARRAY
);
	`glEº‹
();

243 i‡(
CSVERTEX
==0Ë
	`glE«bÀClõ¡Sèã
(
GL_VERTEX_ARRAY
);
	`glEº‹
();

244 
	`glTexCo‹dPoöãr
(2, 
GL_FLOAT
, (
v
[0]), &v[0].
°
);
	`glEº‹
();

245 
	`glVîãxPoöãr
(3, 
GL_FLOAT
, (
v
[0]), &v[0].
xyz
);
	`glEº‹
();

246 
	`glDøwAºays
(
GL_TRIANGLES
, 0, 3);
	`glEº‹
();

247 
CSTEXTURE
=
CSVERTEX
=1;

248 
CSCOLOR
=0;

250 
	}
}

254 
	$PRIMdøwTexGouøudTriCﬁ‹
(
OGLVîãx
* 
vîãx1
, OGLVîãx* 
vîãx2
,

255 
OGLVîãx
* 
vîãx3
)

258 
Vîãx2
 
v
[3];

259 i‡(
vîãx1
->
x
==0&&vîãx1->
y
==0&&
vîãx2
->x==0&&vîãx2->y==0&&
vîãx3
->x==0&&vertex3->y==0) ;

261 
v
[0].
xyz
.
x
 = 
	`Âoöt
(
vîãx1
->x);

262 
v
[0].
xyz
.
y
 = 
	`Âoöt
(
vîãx1
->y);

263 
v
[0].
xyz
.
z
 = 
	`Âoöt
(
vîãx1
->z);

264 
v
[0].
°
.
x
 = 
	`Âoöt
(
vîãx1
->
sow
);

265 
v
[0].
°
.
y
 = 
	`Âoöt
(
vîãx1
->
tow
);

266 
v
[0].
rgba
.
r
 = 
vîãx1
->
c
.
cﬁ
[0];

267 
v
[0].
rgba
.
g
 = 
vîãx1
->
c
.
cﬁ
[1];

268 
v
[0].
rgba
.
b
 = 
vîãx1
->
c
.
cﬁ
[2];

269 
v
[0].
rgba
.
a
 = 
vîãx1
->
c
.
cﬁ
[3];

271 
v
[1].
xyz
.
x
 = 
	`Âoöt
(
vîãx2
->x);

272 
v
[1].
xyz
.
y
 = 
	`Âoöt
(
vîãx2
->y);

273 
v
[1].
xyz
.
z
 = 
	`Âoöt
(
vîãx2
->z);

274 
v
[1].
°
.
x
 = 
	`Âoöt
(
vîãx2
->
sow
);

275 
v
[1].
°
.
y
 = 
	`Âoöt
(
vîãx2
->
tow
);

276 
v
[1].
rgba
.
r
 = 
vîãx2
->
c
.
cﬁ
[0];

277 
v
[1].
rgba
.
g
 = 
vîãx2
->
c
.
cﬁ
[1];

278 
v
[1].
rgba
.
b
 = 
vîãx2
->
c
.
cﬁ
[2];

279 
v
[1].
rgba
.
a
 = 
vîãx2
->
c
.
cﬁ
[3];

281 
v
[2].
xyz
.
x
 = 
	`Âoöt
(
vîãx3
->x);

282 
v
[2].
xyz
.
y
 = 
	`Âoöt
(
vîãx3
->y);

283 
v
[2].
xyz
.
z
 = 
	`Âoöt
(
vîãx3
->z);

284 
v
[2].
°
.
x
 = 
	`Âoöt
(
vîãx3
->
sow
);

285 
v
[2].
°
.
y
 = 
	`Âoöt
(
vîãx3
->
tow
);

286 
v
[2].
rgba
.
r
 = 
vîãx3
->
c
.
cﬁ
[0];

287 
v
[2].
rgba
.
g
 = 
vîãx3
->
c
.
cﬁ
[1];

288 
v
[2].
rgba
.
b
 = 
vîãx3
->
c
.
cﬁ
[2];

289 
v
[2].
rgba
.
a
 = 
vîãx3
->
c
.
cﬁ
[3];

291 i‡(
CSTEXTURE
==0Ë
	`glE«bÀClõ¡Sèã
(
GL_TEXTURE_COORD_ARRAY
);
	`glEº‹
();

292 i‡(
CSVERTEX
==0Ë
	`glE«bÀClõ¡Sèã
(
GL_VERTEX_ARRAY
);
	`glEº‹
();

293 i‡(
CSCOLOR
==0Ë
	`glE«bÀClõ¡Sèã
(
GL_COLOR_ARRAY
);
	`glEº‹
();

295 
	`glTexCo‹dPoöãr
(2, 
GL_FLOAT
, (
v
[0]), &v[0].
°
);
	`glEº‹
();

296 
	`glVîãxPoöãr
(3, 
GL_FLOAT
, (
v
[0]), &v[0].
xyz
);
	`glEº‹
();

297 
	`glCﬁ‹Poöãr
(4, 
GL_UNSIGNED_BYTE
, (
v
[0]), &v[0].
rgba
);
	`glEº‹
();

299 
	`glDøwAºays
(
GL_TRIANGLES
, 0, 3);
	`glEº‹
();

300 
CSTEXTURE
=
CSVERTEX
=
CSCOLOR
=1;

301 
	}
}

305 
	$PRIMdøwTexGouøudTriCﬁ‹Quad
(
OGLVîãx
* 
vîãx1
, OGLVîãx* 
vîãx2
,

306 
OGLVîãx
* 
vîãx3
, OGLVîãx* 
vîãx4
)

308 
Vîãx2
 
v
[4];

309 i‡(
vîãx1
->
x
==0&&vîãx1->
y
==0&&
vîãx2
->x==0&&vîãx2->y==0&&
vîãx3
->x==0&&vîãx3->y==0&&
vîãx4
->x==0&&vertex4->y==0) ;

311 
v
[0].
xyz
.
x
 = 
	`Âoöt
(
vîãx1
->x);

312 
v
[0].
xyz
.
y
 = 
	`Âoöt
(
vîãx1
->y);

313 
v
[0].
xyz
.
z
 = 
	`Âoöt
(
vîãx1
->z);

314 
v
[0].
°
.
x
 = 
	`Âoöt
(
vîãx1
->
sow
);

315 
v
[0].
°
.
y
 = 
	`Âoöt
(
vîãx1
->
tow
);

316 
v
[0].
rgba
.
r
 = 
vîãx1
->
c
.
cﬁ
[0];

317 
v
[0].
rgba
.
g
 = 
vîãx1
->
c
.
cﬁ
[1];

318 
v
[0].
rgba
.
b
 = 
vîãx1
->
c
.
cﬁ
[2];

319 
v
[0].
rgba
.
a
 = 
vîãx1
->
c
.
cﬁ
[3];

321 
v
[1].
xyz
.
x
 = 
	`Âoöt
(
vîãx2
->x);

322 
v
[1].
xyz
.
y
 = 
	`Âoöt
(
vîãx2
->y);

323 
v
[1].
xyz
.
z
 = 
	`Âoöt
(
vîãx2
->z);

324 
v
[1].
°
.
x
 = 
	`Âoöt
(
vîãx2
->
sow
);

325 
v
[1].
°
.
y
 = 
	`Âoöt
(
vîãx2
->
tow
);

326 
v
[1].
rgba
.
r
 = 
vîãx2
->
c
.
cﬁ
[0];

327 
v
[1].
rgba
.
g
 = 
vîãx2
->
c
.
cﬁ
[1];

328 
v
[1].
rgba
.
b
 = 
vîãx2
->
c
.
cﬁ
[2];

329 
v
[1].
rgba
.
a
 = 
vîãx2
->
c
.
cﬁ
[3];

331 
v
[2].
xyz
.
x
 = 
	`Âoöt
(
vîãx4
->x);

332 
v
[2].
xyz
.
y
 = 
	`Âoöt
(
vîãx4
->y);

333 
v
[2].
xyz
.
z
 = 
	`Âoöt
(
vîãx4
->z);

334 
v
[2].
°
.
x
 = 
	`Âoöt
(
vîãx4
->
sow
);

335 
v
[2].
°
.
y
 = 
	`Âoöt
(
vîãx4
->
tow
);

336 
v
[2].
rgba
.
r
 = 
vîãx4
->
c
.
cﬁ
[0];

337 
v
[2].
rgba
.
g
 = 
vîãx4
->
c
.
cﬁ
[1];

338 
v
[2].
rgba
.
b
 = 
vîãx4
->
c
.
cﬁ
[2];

339 
v
[2].
rgba
.
a
 = 
vîãx4
->
c
.
cﬁ
[3];

341 
v
[3].
xyz
.
x
 = 
	`Âoöt
(
vîãx3
->x);

342 
v
[3].
xyz
.
y
 = 
	`Âoöt
(
vîãx3
->y);

343 
v
[3].
xyz
.
z
 = 
	`Âoöt
(
vîãx3
->z);

344 
v
[3].
°
.
x
 = 
	`Âoöt
(
vîãx3
->
sow
);

345 
v
[3].
°
.
y
 = 
	`Âoöt
(
vîãx3
->
tow
);

346 
v
[3].
rgba
.
r
 = 
vîãx3
->
c
.
cﬁ
[0];

347 
v
[3].
rgba
.
g
 = 
vîãx3
->
c
.
cﬁ
[1];

348 
v
[3].
rgba
.
b
 = 
vîãx3
->
c
.
cﬁ
[2];

349 
v
[3].
rgba
.
a
 = 
vîãx3
->
c
.
cﬁ
[3];

351 i‡(
CSTEXTURE
==0Ë
	`glE«bÀClõ¡Sèã
(
GL_TEXTURE_COORD_ARRAY
);
	`glEº‹
();

352 i‡(
CSVERTEX
==0Ë
	`glE«bÀClõ¡Sèã
(
GL_VERTEX_ARRAY
);
	`glEº‹
();

353 i‡(
CSCOLOR
==0Ë
	`glE«bÀClõ¡Sèã
(
GL_COLOR_ARRAY
);
	`glEº‹
();

355 
	`glTexCo‹dPoöãr
(2, 
GL_FLOAT
, (
v
[0]), &v[0].
°
);
	`glEº‹
();

356 
	`glVîãxPoöãr
(3, 
GL_FLOAT
, (
v
[0]), &v[0].
xyz
);
	`glEº‹
();

357 
	`glCﬁ‹Poöãr
(4, 
GL_UNSIGNED_BYTE
, (
v
[0]), &v[0].
rgba
);
	`glEº‹
();

359 
	`glDøwAºays
(
GL_TRIANGLE_STRIP
, 0, 4);
	`glEº‹
();

360 
CSTEXTURE
=
CSVERTEX
=
CSCOLOR
=1;

361 
	}
}

365 
	$PRIMdøwTri
(
OGLVîãx
* 
vîãx1
, OGLVîãx* 
vîãx2
, OGLVîãx* 
vîãx3
)

367 
Vec3f
 
v
[3];

368 i‡(
vîãx1
->
x
==0&&vîãx1->
y
==0&&
vîãx2
->x==0&&vîãx2->y==0&&
vîãx3
->x==0&&vertex3->y==0) ;

370 
v
[0].
x
 = 
	`Âoöt
(
vîãx1
->x);

371 
v
[0].
y
 = 
	`Âoöt
(
vîãx1
->y);

372 
v
[0].
z
 = 
	`Âoöt
(
vîãx1
->z);

374 
v
[1].
x
 = 
	`Âoöt
(
vîãx2
->x);

375 
v
[1].
y
 = 
	`Âoöt
(
vîãx2
->y);

376 
v
[1].
z
 = 
	`Âoöt
(
vîãx2
->z);

378 
v
[2].
x
 = 
	`Âoöt
(
vîãx3
->x);

379 
v
[2].
y
 = 
	`Âoöt
(
vîãx3
->y);

380 
v
[2].
z
 = 
	`Âoöt
(
vîãx3
->z);

382 i‡(
CSVERTEX
==0Ë
	`glE«bÀClõ¡Sèã
(
GL_VERTEX_ARRAY
);
	`glEº‹
();

383 i‡(
CSTEXTURE
==1Ë
	`glDißbÀClõ¡Sèã
(
GL_TEXTURE_COORD_ARRAY
);
	`glEº‹
();

384 i‡(
CSCOLOR
==1Ë
	`glDißbÀClõ¡Sèã
(
GL_COLOR_ARRAY
);
	`glEº‹
();

386 
	`glVîãxPoöãr
(3, 
GL_FLOAT
, (
v
[0]), &v[0]);
	`glEº‹
();

387 
	`glDøwAºays
(
GL_TRIANGLES
, 0, 3);
	`glEº‹
();

388 
CSVERTEX
=1;

389 
CSTEXTURE
=
CSCOLOR
=0;

391 
	}
}

395 
	$PRIMdøwTri2
(
OGLVîãx
* 
vîãx1
, OGLVîãx* 
vîãx2
,

396 
OGLVîãx
* 
vîãx3
, OGLVîãx* 
vîãx4
)

398 
Vec3f
 
v
[4];

399 i‡(
vîãx1
->
x
==0&&vîãx1->
y
==0&&
vîãx2
->x==0&&vîãx2->y==0&&
vîãx3
->x==0&&vîãx3->y==0&&
vîãx4
->x==0&&vertex4->y==0) ;

401 
v
[0].
x
 = 
	`Âoöt
(
vîãx1
->x);

402 
v
[0].
y
 = 
	`Âoöt
(
vîãx1
->y);

403 
v
[0].
z
 = 
	`Âoöt
(
vîãx1
->z);

405 
v
[1].
x
 = 
	`Âoöt
(
vîãx3
->x);

406 
v
[1].
y
 = 
	`Âoöt
(
vîãx3
->y);

407 
v
[1].
z
 = 
	`Âoöt
(
vîãx3
->z);

409 
v
[2].
x
 = 
	`Âoöt
(
vîãx2
->x);

410 
v
[2].
y
 = 
	`Âoöt
(
vîãx2
->y);

411 
v
[2].
z
 = 
	`Âoöt
(
vîãx2
->z);

413 
v
[3].
x
 = 
	`Âoöt
(
vîãx4
->x);

414 
v
[3].
y
 = 
	`Âoöt
(
vîãx4
->y);

415 
v
[3].
z
 = 
	`Âoöt
(
vîãx4
->z);

417 i‡(
CSVERTEX
==0Ë
	`glE«bÀClõ¡Sèã
(
GL_VERTEX_ARRAY
);
	`glEº‹
();

418 i‡(
CSTEXTURE
==1Ë
	`glDißbÀClõ¡Sèã
(
GL_TEXTURE_COORD_ARRAY
);
	`glEº‹
();

419 i‡(
CSCOLOR
==1Ë
	`glDißbÀClõ¡Sèã
(
GL_COLOR_ARRAY
);
	`glEº‹
();

421 
	`glVîãxPoöãr
(3, 
GL_FLOAT
, (
v
[0]), &v[0]);
	`glEº‹
();

422 
	`glDøwAºays
(
GL_TRIANGLE_STRIP
, 0, 4);
	`glEº‹
();

423 
CSVERTEX
=1;

424 
CSTEXTURE
=
CSCOLOR
=0;

425 
	}
}

429 
	$PRIMdøwGouøudTriCﬁ‹
(
OGLVîãx
* 
vîãx1
, OGLVîãx* 
vîãx2
,

430 
OGLVîãx
* 
vîãx3
)

432 
Vîãx2
 
v
[3];

433 i‡(
vîãx1
->
x
==0&&vîãx1->
y
==0&&
vîãx2
->x==0&&vîãx2->y==0&&
vîãx3
->x==0&&vertex3->y==0) ;

435 
v
[0].
xyz
.
x
 = 
	`Âoöt
(
vîãx1
->x);

436 
v
[0].
xyz
.
y
 = 
	`Âoöt
(
vîãx1
->y);

437 
v
[0].
xyz
.
z
 = 
	`Âoöt
(
vîãx1
->z);

438 
v
[0].
rgba
.
r
 = 
vîãx1
->
c
.
cﬁ
[0];

439 
v
[0].
rgba
.
g
 = 
vîãx1
->
c
.
cﬁ
[1];

440 
v
[0].
rgba
.
b
 = 
vîãx1
->
c
.
cﬁ
[2];

441 
v
[0].
rgba
.
a
 = 
vîãx1
->
c
.
cﬁ
[3];

443 
v
[1].
xyz
.
x
 = 
	`Âoöt
(
vîãx2
->x);

444 
v
[1].
xyz
.
y
 = 
	`Âoöt
(
vîãx2
->y);

445 
v
[1].
xyz
.
z
 = 
	`Âoöt
(
vîãx2
->z);

446 
v
[1].
rgba
.
r
 = 
vîãx2
->
c
.
cﬁ
[0];

447 
v
[1].
rgba
.
g
 = 
vîãx2
->
c
.
cﬁ
[1];

448 
v
[1].
rgba
.
b
 = 
vîãx2
->
c
.
cﬁ
[2];

449 
v
[1].
rgba
.
a
 = 
vîãx2
->
c
.
cﬁ
[3];

451 
v
[2].
xyz
.
x
 = 
	`Âoöt
(
vîãx3
->x);

452 
v
[2].
xyz
.
y
 = 
	`Âoöt
(
vîãx3
->y);

453 
v
[2].
xyz
.
z
 = 
	`Âoöt
(
vîãx3
->z);

454 
v
[2].
rgba
.
r
 = 
vîãx3
->
c
.
cﬁ
[0];

455 
v
[2].
rgba
.
g
 = 
vîãx3
->
c
.
cﬁ
[1];

456 
v
[2].
rgba
.
b
 = 
vîãx3
->
c
.
cﬁ
[2];

457 
v
[2].
rgba
.
a
 = 
vîãx3
->
c
.
cﬁ
[3];

459 i‡(
CSVERTEX
==0Ë
	`glE«bÀClõ¡Sèã
(
GL_VERTEX_ARRAY
);
	`glEº‹
();

460 i‡(
CSCOLOR
==0Ë
	`glE«bÀClõ¡Sèã
(
GL_COLOR_ARRAY
);
	`glEº‹
();

461 i‡(
CSTEXTURE
==1Ë
	`glDißbÀClõ¡Sèã
(
GL_TEXTURE_COORD_ARRAY
);
	`glEº‹
();

463 
	`glVîãxPoöãr
(3, 
GL_FLOAT
, (
v
[0]), &v[0].
xyz
);
	`glEº‹
();

464 
	`glCﬁ‹Poöãr
(4, 
GL_UNSIGNED_BYTE
, (
v
[0]), &v[0].
rgba
);
	`glEº‹
();

466 
	`glDøwAºays
(
GL_TRIANGLES
, 0, 3);
	`glEº‹
();

467 
CSVERTEX
=
CSCOLOR
=1;

468 
CSTEXTURE
=0;

469 
	}
}

473 
	$PRIMdøwGouøudTri2Cﬁ‹
(
OGLVîãx
* 
vîãx1
, OGLVîãx* 
vîãx2
,

474 
OGLVîãx
* 
vîãx3
, OGLVîãx* 
vîãx4
)

476 
Vîãx2
 
v
[4];

477 i‡(
vîãx1
->
x
==0&&vîãx1->
y
==0&&
vîãx2
->x==0&&vîãx2->y==0&&
vîãx3
->x==0&&vîãx3->y==0&&
vîãx4
->x==0&&vertex4->y==0) ;

479 
v
[0].
xyz
.
x
 = 
	`Âoöt
(
vîãx1
->x);

480 
v
[0].
xyz
.
y
 = 
	`Âoöt
(
vîãx1
->y);

481 
v
[0].
xyz
.
z
 = 
	`Âoöt
(
vîãx1
->z);

482 
v
[0].
rgba
.
r
 = 
vîãx1
->
c
.
cﬁ
[0];

483 
v
[0].
rgba
.
g
 = 
vîãx1
->
c
.
cﬁ
[1];

484 
v
[0].
rgba
.
b
 = 
vîãx1
->
c
.
cﬁ
[2];

485 
v
[0].
rgba
.
a
 = 
vîãx1
->
c
.
cﬁ
[3];

487 
v
[1].
xyz
.
x
 = 
	`Âoöt
(
vîãx2
->x);

488 
v
[1].
xyz
.
y
 = 
	`Âoöt
(
vîãx2
->y);

489 
v
[1].
xyz
.
z
 = 
	`Âoöt
(
vîãx2
->z);

490 
v
[1].
rgba
.
r
 = 
vîãx2
->
c
.
cﬁ
[0];

491 
v
[1].
rgba
.
g
 = 
vîãx2
->
c
.
cﬁ
[1];

492 
v
[1].
rgba
.
b
 = 
vîãx2
->
c
.
cﬁ
[2];

493 
v
[1].
rgba
.
a
 = 
vîãx2
->
c
.
cﬁ
[3];

495 
v
[2].
xyz
.
x
 = 
	`Âoöt
(
vîãx3
->x);

496 
v
[2].
xyz
.
y
 = 
	`Âoöt
(
vîãx3
->y);

497 
v
[2].
xyz
.
z
 = 
	`Âoöt
(
vîãx3
->z);

498 
v
[2].
rgba
.
r
 = 
vîãx3
->
c
.
cﬁ
[0];

499 
v
[2].
rgba
.
g
 = 
vîãx3
->
c
.
cﬁ
[1];

500 
v
[2].
rgba
.
b
 = 
vîãx3
->
c
.
cﬁ
[2];

501 
v
[2].
rgba
.
a
 = 
vîãx3
->
c
.
cﬁ
[3];

503 
v
[3].
xyz
.
x
 = 
	`Âoöt
(
vîãx4
->x);

504 
v
[3].
xyz
.
y
 = 
	`Âoöt
(
vîãx4
->y);

505 
v
[3].
xyz
.
z
 = 
	`Âoöt
(
vîãx4
->z);

506 
v
[3].
rgba
.
r
 = 
vîãx4
->
c
.
cﬁ
[0];

507 
v
[3].
rgba
.
g
 = 
vîãx4
->
c
.
cﬁ
[1];

508 
v
[3].
rgba
.
b
 = 
vîãx4
->
c
.
cﬁ
[2];

509 
v
[3].
rgba
.
a
 = 
vîãx4
->
c
.
cﬁ
[3];

511 i‡(
CSTEXTURE
==1Ë
	`glDißbÀClõ¡Sèã
(
GL_TEXTURE_COORD_ARRAY
);
	`glEº‹
();

512 i‡(
CSVERTEX
==0Ë
	`glE«bÀClõ¡Sèã
(
GL_VERTEX_ARRAY
);
	`glEº‹
();

513 i‡(
CSCOLOR
==0Ë
	`glE«bÀClõ¡Sèã
(
GL_COLOR_ARRAY
);
	`glEº‹
();

515 
	`glVîãxPoöãr
(3, 
GL_FLOAT
, (
v
[0]), &v[0].
xyz
);
	`glEº‹
();

516 
	`glCﬁ‹Poöãr
(4, 
GL_UNSIGNED_BYTE
, (
v
[0]), &v[0].
rgba
);
	`glEº‹
();

518 
	`glDøwAºays
(
GL_TRIANGLE_STRIP
, 0, 4);
	`glEº‹
();

519 
CSTEXTURE
=0;

520 
CSVERTEX
=
CSCOLOR
=1;

521 
	}
}

525 
	$PRIMdøwFœtLöe
(
OGLVîãx
* 
vîãx1
, OGLVîãx* 
vîãx2
,OGLVîãx* 
vîãx3
, OGLVîãx* 
vîãx4
)

527 
Vîãx2
 
v
[4];

528 i‡(
vîãx1
->
x
==0&&vîãx1->
y
==0&&
vîãx2
->x==0&&vîãx2->y==0&&
vîãx3
->x==0&&vîãx3->y==0&&
vîãx4
->x==0&&vertex4->y==0) ;

530 
v
[0].
xyz
.
x
 = 
	`Âoöt
(
vîãx1
->x);

531 
v
[0].
xyz
.
y
 = 
	`Âoöt
(
vîãx1
->y);

532 
v
[0].
xyz
.
z
 = 
	`Âoöt
(
vîãx1
->z);

533 
v
[0].
rgba
.
r
 = 
vîãx1
->
c
.
cﬁ
[0];

534 
v
[0].
rgba
.
g
 = 
vîãx1
->
c
.
cﬁ
[1];

535 
v
[0].
rgba
.
b
 = 
vîãx1
->
c
.
cﬁ
[2];

536 
v
[0].
rgba
.
a
 = 
vîãx1
->
c
.
cﬁ
[3];

538 
v
[1].
xyz
.
x
 = 
	`Âoöt
(
vîãx2
->x);

539 
v
[1].
xyz
.
y
 = 
	`Âoöt
(
vîãx2
->y);

540 
v
[1].
xyz
.
z
 = 
	`Âoöt
(
vîãx2
->z);

541 
v
[1].
rgba
.
r
 = 
vîãx1
->
c
.
cﬁ
[0];

542 
v
[1].
rgba
.
g
 = 
vîãx1
->
c
.
cﬁ
[1];

543 
v
[1].
rgba
.
b
 = 
vîãx1
->
c
.
cﬁ
[2];

544 
v
[1].
rgba
.
a
 = 
vîãx1
->
c
.
cﬁ
[3];

546 
v
[2].
xyz
.
x
 = 
	`Âoöt
(
vîãx4
->x);

547 
v
[2].
xyz
.
y
 = 
	`Âoöt
(
vîãx4
->y);

548 
v
[2].
xyz
.
z
 = 
	`Âoöt
(
vîãx4
->z);

549 
v
[2].
rgba
.
r
 = 
vîãx1
->
c
.
cﬁ
[0];

550 
v
[2].
rgba
.
g
 = 
vîãx1
->
c
.
cﬁ
[1];

551 
v
[2].
rgba
.
b
 = 
vîãx1
->
c
.
cﬁ
[2];

552 
v
[2].
rgba
.
a
 = 
vîãx1
->
c
.
cﬁ
[3];

554 
v
[3].
xyz
.
x
 = 
	`Âoöt
(
vîãx3
->x);

555 
v
[3].
xyz
.
y
 = 
	`Âoöt
(
vîãx3
->y);

556 
v
[3].
xyz
.
z
 = 
	`Âoöt
(
vîãx3
->z);

557 
v
[3].
rgba
.
r
 = 
vîãx1
->
c
.
cﬁ
[0];

558 
v
[3].
rgba
.
g
 = 
vîãx1
->
c
.
cﬁ
[1];

559 
v
[3].
rgba
.
b
 = 
vîãx1
->
c
.
cﬁ
[2];

560 
v
[3].
rgba
.
a
 = 
vîãx1
->
c
.
cﬁ
[3];

562 i‡(
CSTEXTURE
==1Ë
	`glDißbÀClõ¡Sèã
(
GL_TEXTURE_COORD_ARRAY
);
	`glEº‹
();

563 i‡(
CSVERTEX
==0Ë
	`glE«bÀClõ¡Sèã
(
GL_VERTEX_ARRAY
);
	`glEº‹
();

564 i‡(
CSCOLOR
==0Ë
	`glE«bÀClõ¡Sèã
(
GL_COLOR_ARRAY
);
	`glEº‹
();

566 
	`glVîãxPoöãr
(3, 
GL_FLOAT
, (
v
[0]), &v[0].
xyz
);
	`glEº‹
();

567 
	`glCﬁ‹Poöãr
(4, 
GL_UNSIGNED_BYTE
, (
v
[0]), &v[0].
rgba
);
	`glEº‹
();

569 
	`glDøwAºays
(
GL_TRIANGLE_STRIP
, 0, 4);
	`glEº‹
();

571 
CSTEXTURE
=0;

572 
CSVERTEX
=
CSCOLOR
=1;

575 
	}
}

579 
	$PRIMdøwGouøudLöe
(
OGLVîãx
* 
vîãx1
, OGLVîãx* 
vîãx2
,OGLVîãx* 
vîãx3
, OGLVîãx* 
vîãx4
)

581 
Vîãx2
 
v
[4];

582 i‡(
vîãx1
->
x
==0&&vîãx1->
y
==0&&
vîãx2
->x==0&&vîãx2->y==0&&
vîãx3
->x==0&&vîãx3->y==0&&
vîãx4
->x==0&&vertex4->y==0) ;

584 
v
[0].
xyz
.
x
 = 
	`Âoöt
(
vîãx1
->x);

585 
v
[0].
xyz
.
y
 = 
	`Âoöt
(
vîãx1
->y);

586 
v
[0].
xyz
.
z
 = 
	`Âoöt
(
vîãx1
->z);

587 
v
[0].
rgba
.
r
 = 
vîãx1
->
c
.
cﬁ
[0];

588 
v
[0].
rgba
.
g
 = 
vîãx1
->
c
.
cﬁ
[1];

589 
v
[0].
rgba
.
b
 = 
vîãx1
->
c
.
cﬁ
[2];

590 
v
[0].
rgba
.
a
 = 
vîãx1
->
c
.
cﬁ
[3];

592 
v
[1].
xyz
.
x
 = 
	`Âoöt
(
vîãx2
->x);

593 
v
[1].
xyz
.
y
 = 
	`Âoöt
(
vîãx2
->y);

594 
v
[1].
xyz
.
z
 = 
	`Âoöt
(
vîãx2
->z);

595 
v
[1].
rgba
.
r
 = 
vîãx2
->
c
.
cﬁ
[0];

596 
v
[1].
rgba
.
g
 = 
vîãx2
->
c
.
cﬁ
[1];

597 
v
[1].
rgba
.
b
 = 
vîãx2
->
c
.
cﬁ
[2];

598 
v
[1].
rgba
.
a
 = 
vîãx2
->
c
.
cﬁ
[3];

600 
v
[3].
xyz
.
x
 = 
	`Âoöt
(
vîãx3
->x);

601 
v
[3].
xyz
.
y
 = 
	`Âoöt
(
vîãx3
->y);

602 
v
[3].
xyz
.
z
 = 
	`Âoöt
(
vîãx3
->z);

603 
v
[3].
rgba
.
r
 = 
vîãx3
->
c
.
cﬁ
[0];

604 
v
[3].
rgba
.
g
 = 
vîãx3
->
c
.
cﬁ
[1];

605 
v
[3].
rgba
.
b
 = 
vîãx3
->
c
.
cﬁ
[2];

606 
v
[3].
rgba
.
a
 = 
vîãx3
->
c
.
cﬁ
[3];

608 
v
[2].
xyz
.
x
 = 
	`Âoöt
(
vîãx4
->x);

609 
v
[2].
xyz
.
y
 = 
	`Âoöt
(
vîãx4
->y);

610 
v
[2].
xyz
.
z
 = 
	`Âoöt
(
vîãx4
->z);

611 
v
[2].
rgba
.
r
 = 
vîãx4
->
c
.
cﬁ
[0];

612 
v
[2].
rgba
.
g
 = 
vîãx4
->
c
.
cﬁ
[1];

613 
v
[2].
rgba
.
b
 = 
vîãx4
->
c
.
cﬁ
[2];

614 
v
[2].
rgba
.
a
 = 
vîãx4
->
c
.
cﬁ
[3];

616 i‡(
CSTEXTURE
==1Ë
	`glDißbÀClõ¡Sèã
(
GL_TEXTURE_COORD_ARRAY
);
	`glEº‹
();

617 i‡(
CSVERTEX
==0Ë
	`glE«bÀClõ¡Sèã
(
GL_VERTEX_ARRAY
);
	`glEº‹
();

618 i‡(
CSCOLOR
==0Ë
	`glE«bÀClõ¡Sèã
(
GL_COLOR_ARRAY
);
	`glEº‹
();

620 
	`glVîãxPoöãr
(3, 
GL_FLOAT
, (
v
[0]), &v[0].
xyz
);
	`glEº‹
();

621 
	`glCﬁ‹Poöãr
(4, 
GL_UNSIGNED_BYTE
, (
v
[0]), &v[0].
rgba
);
	`glEº‹
();

623 
	`glDøwAºays
(
GL_TRIANGLE_STRIP
, 0, 4);
	`glEº‹
();

624 
CSTEXTURE
=0;

625 
CSVERTEX
=
CSCOLOR
=1;

626 
	}
}

630 
	$PRIMdøwQuad
(
OGLVîãx
* 
vîãx1
, OGLVîãx* 
vîãx2
,

631 
OGLVîãx
* 
vîãx3
, OGLVîãx* 
vîãx4
)

633 
Vec3f
 
v
[4];

634 i‡(
vîãx1
->
x
==0&&vîãx1->
y
==0&&
vîãx2
->x==0&&vîãx2->y==0&&
vîãx3
->x==0&&vîãx3->y==0&&
vîãx4
->x==0&&vertex4->y==0) ;

636 
v
[0].
x
 = 
	`Âoöt
(
vîãx1
->x);

637 
v
[0].
y
 = 
	`Âoöt
(
vîãx1
->y);

638 
v
[0].
z
 = 
	`Âoöt
(
vîãx1
->z);

640 
v
[1].
x
 = 
	`Âoöt
(
vîãx2
->x);

641 
v
[1].
y
 = 
	`Âoöt
(
vîãx2
->y);

642 
v
[1].
z
 = 
	`Âoöt
(
vîãx2
->z);

644 
v
[2].
x
 = 
	`Âoöt
(
vîãx4
->x);

645 
v
[2].
y
 = 
	`Âoöt
(
vîãx4
->y);

646 
v
[2].
z
 = 
	`Âoöt
(
vîãx4
->z);

648 
v
[3].
x
 = 
	`Âoöt
(
vîãx3
->x);

649 
v
[3].
y
 = 
	`Âoöt
(
vîãx3
->y);

650 
v
[3].
z
 = 
	`Âoöt
(
vîãx3
->z);

652 i‡(
CSTEXTURE
==1Ë
	`glDißbÀClõ¡Sèã
(
GL_TEXTURE_COORD_ARRAY
);
	`glEº‹
();

653 i‡(
CSVERTEX
==0Ë
	`glE«bÀClõ¡Sèã
(
GL_VERTEX_ARRAY
);
	`glEº‹
();

654 i‡(
CSCOLOR
==1Ë
	`glDißbÀClõ¡Sèã
(
GL_COLOR_ARRAY
);
	`glEº‹
();

656 
	`glVîãxPoöãr
(3, 
GL_FLOAT
, (
v
[0]), &v[0]);
	`glEº‹
();

657 
	`glDøwAºays
(
GL_TRIANGLE_STRIP
, 0, 4);
	`glEº‹
();

658 
CSTEXTURE
=0;

659 
CSVERTEX
=1;

660 
CSCOLOR
=0;

661 
	}
}

667 
GLíum
 
	gobm1
=
GL_ZERO
;

668 
GLíum
 
	gobm2
=
GL_ZERO
;

670 
	sSEMITRANSTAG


672 
GLíum
 
	m§cFac
;

673 
GLíum
 
	md°Fac
;

674 
GLubyã
 
	mÆpha
;

675 } 
	tSemiTønsP¨ams
;

677 
SemiTønsP¨ams
 
	gTønsSës
[4]=

679 {
GL_SRC_ALPHA
,GL_SRC_ALPHA, 127},

680 {
GL_ONE
, GL_ONE, 255},

681 {
GL_ZERO
, 
GL_ONE_MINUS_SRC_COLOR
,255},

682 {
GL_ONE_MINUS_SRC_ALPHA
,
GL_ONE
, 192}

687 
	$SëSemiTøns
()

696 if(!
DøwSemiTøns
)

698 if(
bBÀndE«bÀ
)

699 {
	`glDißbÀ
(
GL_BLEND
);
	`glEº‹
();
bBÀndE«bÀ
=
FALSE
;}

700 
ubGloAÕha
=
ubGloCﬁAÕha
=255;

704 
ubGloAÕha
=
ubGloCﬁAÕha
=
TønsSës
[
GlobÆTextABR
].
Æpha
;

706 if(!
bBÀndE«bÀ
)

707 {
	`glE«bÀ
(
GL_BLEND
);
	`glEº‹
();
bBÀndE«bÀ
=
TRUE
;}

709 if(
TønsSës
[
GlobÆTextABR
].
§cFac
!=
obm1
 ||

710 
TønsSës
[
GlobÆTextABR
].
d°Fac
!=
obm2
)

714 
obm1
=
TønsSës
[
GlobÆTextABR
].
§cFac
;

715 
obm2
=
TønsSës
[
GlobÆTextABR
].
d°Fac
;

716 
	`glBÀndFunc
(
obm1
,
obm2
); 
	`glEº‹
();

735 
	}
}

737 
	$SëSˇnTøns
()

745 
obm1
=
TønsSës
[0].
§cFac
;

746 
obm2
=
TønsSës
[0].
d°Fac
;

747 
	`glBÀndFunc
(
obm1
,
obm2
); 
	`glEº‹
();

748 
	}
}

750 
	$SëSˇnTexTøns
()

758 
obm1
=
TønsSës
[2].
§cFac
;

759 
obm2
=
TønsSës
[2].
d°Fac
;

760 
	`glBÀndFunc
(
obm1
,
obm2
); 
	`glEº‹
();

761 
	}
}

767 
SemiTønsP¨ams
 
	gMu…iTexTønsSës
[4][2]=

770 {
GL_ONE
 ,
GL_SRC_ALPHA
, 127},

771 {
GL_SRC_ALPHA
,
GL_ONE
, 127}

774 {
GL_ONE
, 
GL_SRC_ALPHA
, 255},

775 {
GL_SRC_ALPHA
,
GL_ONE
, 255}

778 {
GL_ZERO
, 
GL_ONE_MINUS_SRC_COLOR
,255},

779 {
GL_ZERO
, 
GL_ONE_MINUS_SRC_COLOR
,255}

782 {
GL_SRC_ALPHA
,
GL_ONE
, 127},

783 {
GL_ONE_MINUS_SRC_ALPHA
,
GL_ONE
, 255}

789 
SemiTønsP¨ams
 
	gMu…iCﬁTønsSës
[4]=

791 {
GL_ONE_MINUS_SRC_ALPHA
,
GL_SRC_ALPHA
,127},

792 {
GL_ONE
, GL_ONE, 255},

793 {
GL_ZERO
, 
GL_ONE_MINUS_SRC_COLOR
,255},

794 {
GL_SRC_ALPHA
,
GL_ONE
, 127}

799 
	$SëSemiTønsMu…i
(
Pass
)

801 
GLíum
 
bm1
=
GL_ZERO
;

802 
GLíum
 
bm2
=
GL_ONE
;

804 
ubGloAÕha
=255;

805 
ubGloCﬁAÕha
=255;

808 if(
DøwSemiTøns
)

810 if(
bDøwTextuªd
)

812 
bm1
=
Mu…iTexTønsSës
[
GlobÆTextABR
][
Pass
].
§cFac
;

813 
bm2
=
Mu…iTexTønsSës
[
GlobÆTextABR
][
Pass
].
d°Fac
;

814 
ubGloAÕha
=
Mu…iTexTønsSës
[
GlobÆTextABR
][
Pass
].
Æpha
;

819 
bm1
=
Mu…iCﬁTønsSës
[
GlobÆTextABR
].
§cFac
;

820 
bm2
=
Mu…iCﬁTønsSës
[
GlobÆTextABR
].
d°Fac
;

821 
ubGloCﬁAÕha
=
Mu…iCﬁTønsSës
[
GlobÆTextABR
].
Æpha
;

827 if(
Pass
==0)

830 
bm1
=
GL_ONE
;
bm2
=
GL_ZERO
;

835 
bm1
=
GL_ONE
;
bm2
=GL_ONE;

839 if(!
bBÀndE«bÀ
)

840 {
	`glE«bÀ
(
GL_BLEND
);
	`glEº‹
();
bBÀndE«bÀ
=
TRUE
;}

842 if(
bm1
!=
obm1
 || 
bm2
!=
obm2
)

844 
	`glBÀndFunc
(
bm1
,
bm2
); 
	`glEº‹
();

845 
obm1
=
bm1
;
obm2
=
bm2
;

847 
	}
}

853 
	$SëZMask3O
()

855 if(
iU£Mask
 && 
DøwSemiTøns
 && !
iSëMask
)

857 
vîãx
[0].
z
=vîãx[1].z=vîãx[2].z=
gl_z
;

858 
gl_z
+=0.00004f;

860 
	}
}

862 
	$SëZMask3
()

864 if(
iU£Mask
)

866 if(
iSëMask
 || 
DøwSemiTøns
)

867 {
vîãx
[0].
z
=vertex[1].z=vertex[2].z=0.95f;}

870 
vîãx
[0].
z
=vîãx[1].z=vîãx[2].z=
gl_z
;

871 
gl_z
+=0.00004f;

874 
	}
}

876 
	$SëZMask3NT
()

878 if(
iU£Mask
)

880 if(
iSëMask
)

881 {
vîãx
[0].
z
=vertex[1].z=vertex[2].z=0.95f;}

884 
vîãx
[0].
z
=vîãx[1].z=vîãx[2].z=
gl_z
;

885 
gl_z
+=0.00004f;

888 
	}
}

892 
	$SëZMask4O
()

894 if(
iU£Mask
 && 
DøwSemiTøns
 && !
iSëMask
)

896 
vîãx
[0].
z
=vîãx[1].z=vîãx[2].z=vîãx[3].z=
gl_z
;

897 
gl_z
+=0.00004f;

899 
	}
}

901 
	$SëZMask4
()

903 if(
iU£Mask
)

905 if(
iSëMask
 || 
DøwSemiTøns
)

906 {
vîãx
[0].
z
=vertex[1].z=vertex[2].z=vertex[3].z=0.95f;}

909 
vîãx
[0].
z
=vîãx[1].z=vîãx[2].z=vîãx[3].z=
gl_z
;

910 
gl_z
+=0.00004f;

913 
	}
}

915 
	$SëZMask4NT
()

917 if(
iU£Mask
)

919 if(
iSëMask
==1)

920 {
vîãx
[0].
z
=vertex[1].z=vertex[2].z=vertex[3].z=0.95f;}

923 
vîãx
[0].
z
=vîãx[1].z=vîãx[2].z=vîãx[3].z=
gl_z
;

924 
gl_z
+=0.00004f;

927 
	}
}

929 
	$SëZMask4SP
()

931 if(
iU£Mask
)

933 if(
iSëMask
==1)

934 {
vîãx
[0].
z
=vertex[1].z=vertex[2].z=vertex[3].z=0.95f;}

937 if(
bCheckMask
)

939 
vîãx
[0].
z
=vîãx[1].z=vîãx[2].z=vîãx[3].z=
gl_z
;

940 
gl_z
+=0.00004f;

943 {
vîãx
[0].
z
=vertex[1].z=vertex[2].z=vertex[3].z=0.95f;}

946 
	}
}

950 
	$SëRídîSèã
(
DøwAâribuãs
)

952 
bDøwN⁄Shaded
 = (
	`SHADETEXBIT
(
DøwAâribuãs
)Ë? 
TRUE
 : 
FALSE
;

953 
DøwSemiTøns
 = (
	`SEMITRANSBIT
(
DøwAâribuãs
)Ë? 
TRUE
 : 
FALSE
;

954 
	}
}

958 
	$SëRídîCﬁ‹
(
DøwAâribuãs
)

960 if(
bDøwN⁄Shaded
Ë{
g_m1
=
g_m2
=
g_m3
=128;}

963 
g_m1
=
DøwAâribuãs
&0xff;

964 
g_m2
=(
DøwAâribuãs
>>8)&0xff;

965 
g_m3
=(
DøwAâribuãs
>>16)&0xff;

967 
	}
}

971 
	$SëRídîMode
(
DøwAâribuãs
,
BOOL
 
bSCﬁ
)

973 if((
bU£Mu…iPass
Ë&& (
bDøwTextuªd
Ë&& !(
bDøwN⁄Shaded
))

974 {
bDøwMu…iPass
 = 
TRUE
; 
	`SëSemiTønsMu…i
(0);}

975 {
bDøwMu…iPass
 = 
FALSE
;
	`SëSemiTøns
();}

977 if(
bDøwTextuªd
)

979 
GLuöt
 
cuºTex
;

980 if(
bUsögTWö
Ë
cuºTex
=
	`LﬂdTextuªWnd
(
GlobÆTextuªPage
,
GlobÆTextTP
, 
ulClutID
);

981 if(
bUsögMovõ
Ë
cuºTex
=
	`LﬂdTextuªMovõ
();

982 
cuºTex
=
	`Sñe˘SubTextuªS
(
GlobÆTextTP
,
ulClutID
);

984 if(
gTexName
!=
cuºTex
)

985 {
gTexName
=
cuºTex
;
	`glBödTextuª
(
GL_TEXTURE_2D
,cuºTex); 
	`glEº‹
();}

987 if(!
bTexE«bÀd
)

988 {
bTexE«bÀd
=
TRUE
;
	`glE«bÀ
(
GL_TEXTURE_2D
); 
	`glEº‹
();}

991 if(
bTexE«bÀd
)

992 {
bTexE«bÀd
=
FALSE
;
	`glDißbÀ
(
GL_TEXTURE_2D
); 
	`glEº‹
();}

994 if(
bSCﬁ
)

996 if((
dwA˘Fixes
&4Ë&& ((
DøwAâribuãs
&0x00ffffff)==0))

997 
DøwAâribuãs
|=0x007f7f7f;

999 if(
bDøwN⁄Shaded
)

1002  
vîãx
[0].
c
.
lcﬁ
=0xffffff;

1007 
vîãx
[0].
c
.
lcﬁ
=
	`DoubÀBGR2RGB
(
DøwAâribuãs
);

1010 
vîãx
[0].
c
.
cﬁ
[3]=
ubGloAÕha
;

1011 
	`SETCOL
(
vîãx
[0]);

1014 if(
bDøwSmoŸhShaded
!=
bOldSmoŸhShaded
)

1016 if(
bDøwSmoŸhShaded
Ë
	`glShadeModñ
(
GL_SMOOTH
);

1017 
	`glShadeModñ
(
GL_FLAT
);

1018 
	`glEº‹
();

1019 
bOldSmoŸhShaded
=
bDøwSmoŸhShaded
;

1021 
	}
}

1027 
	$SëO∑queCﬁ‹
(
DøwAâribuãs
)

1029 if(
bDøwN⁄Shaded
) ;

1031 
DøwAâribuãs
=
	`DoubÀBGR2RGB
(DrawAttributes);

1032 
vîãx
[0].
c
.
lcﬁ
=
DøwAâribuãs
|0xff000000;

1033 
	`SETCOL
(
vîãx
[0]);

1034 
	}
}

1040 
BOOL
 
	$ClùVîãxLi°S¸ìn
()

1042 i‡(
lx0
 >
PSXDi•œy
.
Di•œyEnd
.
x
Ë
NEXTSCRTEST
;

1043 i‡(
ly0
 >
PSXDi•œy
.
Di•œyEnd
.
y
Ë
NEXTSCRTEST
;

1044 i‡(
lx2
 < 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
Ë
NEXTSCRTEST
;

1045 i‡(
ly2
 < 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
Ë
NEXTSCRTEST
;

1047  
TRUE
;

1049 
NEXTSCRTEST
:

1050 if(
PSXDi•œy
.
I¡îœ˚dTe°
Ë 
FALSE
;

1052 i‡(
lx0
 >
PªviousPSXDi•œy
.
Di•œyEnd
.
x
Ë 
FALSE
;

1053 i‡(
ly0
 >
PªviousPSXDi•œy
.
Di•œyEnd
.
y
Ë 
FALSE
;

1054 i‡(
lx2
 < 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
Ë 
FALSE
;

1055 i‡(
ly2
 < 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
Ë 
FALSE
;

1057  
TRUE
;

1058 
	}
}

1062 
BOOL
 
	$bDøwOffs¸ìnFr⁄t
()

1064 if(
sxmö
 < 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
Ë 
FALSE
;

1065 if(
symö
 < 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
Ë 
FALSE
;

1066 if(
sxmax
 > 
PSXDi•œy
.
Di•œyEnd
.
x
Ë 
FALSE
;

1067 if(
symax
 > 
PSXDi•œy
.
Di•œyEnd
.
y
Ë 
FALSE
;

1068  
TRUE
;

1069 
	}
}

1071 
BOOL
 
	$bO√PoötInFr⁄t
()

1073 if(
sxmax
< 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
)

1074  
FALSE
;

1076 if(
symax
< 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
)

1077  
FALSE
;

1079 if(
sxmö
>=
PSXDi•œy
.
Di•œyEnd
.
x
)

1080  
FALSE
;

1082 if(
symö
>=
PSXDi•œy
.
Di•œyEnd
.
y
)

1083  
FALSE
;

1085  
TRUE
;

1086 
	}
}

1089 
BOOL
 
	$bO√PoötInBack
()

1091 if(
sxmax
< 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
)

1092  
FALSE
;

1094 if(
symax
< 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
)

1095  
FALSE
;

1097 if(
sxmö
>=
PªviousPSXDi•œy
.
Di•œyEnd
.
x
)

1098  
FALSE
;

1100 if(
symö
>=
PªviousPSXDi•œy
.
Di•œyEnd
.
y
)

1101  
FALSE
;

1103  
TRUE
;

1104 
	}
}

1106 
BOOL
 
	$bDøwOffs¸ìn4
()

1108 
BOOL
 
bFr⁄t
;
sW
,
sH
;

1110 
sxmax
=
	`max
(
lx0
,max(
lx1
,max(
lx2
,
lx3
)));

1111 if(
sxmax
<
døwX
Ë 
FALSE
;

1112 
sxmö
=
	`mö
(
lx0
,mö(
lx1
,mö(
lx2
,
lx3
)));

1113 if(
sxmö
>
døwW
Ë 
FALSE
;

1114 
symax
=
	`max
(
ly0
,max(
ly1
,max(
ly2
,
ly3
)));

1115 if(
symax
<
døwY
Ë 
FALSE
;

1116 
symö
=
	`mö
(
ly0
,mö(
ly1
,mö(
ly2
,
ly3
)));

1117 if(
symö
>
døwH
Ë 
FALSE
;

1119 if(
PSXDi•œy
.
DißbÀd
Ë 
TRUE
;

1121 if(
iOffs¸ìnDøwög
==1Ë 
bFuŒVRam
;

1123 if(
dwA˘Fixes
&1 && 
iOffs¸ìnDøwög
==4)

1125 if(
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
==
PSXDi•œy
.DisplayPosition.x &&

1126 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
==
PSXDi•œy
.DisplayPosition.y &&

1127 
PªviousPSXDi•œy
.
Di•œyEnd
.
x
==
PSXDi•œy
.DisplayEnd.x &&

1128 
PªviousPSXDi•œy
.
Di•œyEnd
.
y
==
PSXDi•œy
.DisplayEnd.y)

1130 
bRídîFr⁄tBuf„r
=
TRUE
;

1131  
FALSE
;

1135 
sW
=
døwW
-1;
sH
=
døwH
-1;

1137 
sxmö
=
	`mö
(
sW
,
	`max
(sxmö,
døwX
));

1138 
sxmax
=
	`max
(
døwX
,
	`mö
(sxmax,
sW
));

1139 
symö
=
	`mö
(
sH
,
	`max
(symö,
døwY
));

1140 
symax
=
	`max
(
døwY
,
	`mö
(symax,
sH
));

1142 if(
	`bO√PoötInBack
()Ë 
bFuŒVRam
;

1144 if(
iOffs¸ìnDøwög
==2)

1145 
bFr⁄t
=
	`bDøwOffs¸ìnFr⁄t
();

1146 
bFr⁄t
=
	`bO√PoötInFr⁄t
();

1148 if(
bFr⁄t
)

1150 if(
PSXDi•œy
.
I¡îœ˚dTe°
Ë 
bFuŒVRam
;

1152 
vîãx
[0].
x
=
lx0
 - 
PSXDi•œy
.
Di•œyPosôi⁄
.x+
PªviousPSXDi•œy
.
R™ge
.
x0
;

1153 
vîãx
[1].
x
=
lx1
 - 
PSXDi•œy
.
Di•œyPosôi⁄
.x+
PªviousPSXDi•œy
.
R™ge
.
x0
;

1154 
vîãx
[2].
x
=
lx2
 - 
PSXDi•œy
.
Di•œyPosôi⁄
.x+
PªviousPSXDi•œy
.
R™ge
.
x0
;

1155 
vîãx
[3].
x
=
lx3
 - 
PSXDi•œy
.
Di•œyPosôi⁄
.x+
PªviousPSXDi•œy
.
R™ge
.
x0
;

1156 
vîãx
[0].
y
=
ly0
 - 
PSXDi•œy
.
Di•œyPosôi⁄
.y+
PªviousPSXDi•œy
.
R™ge
.
y0
;

1157 
vîãx
[1].
y
=
ly1
 - 
PSXDi•œy
.
Di•œyPosôi⁄
.y+
PªviousPSXDi•œy
.
R™ge
.
y0
;

1158 
vîãx
[2].
y
=
ly2
 - 
PSXDi•œy
.
Di•œyPosôi⁄
.y+
PªviousPSXDi•œy
.
R™ge
.
y0
;

1159 
vîãx
[3].
y
=
ly3
 - 
PSXDi•œy
.
Di•œyPosôi⁄
.y+
PªviousPSXDi•œy
.
R™ge
.
y0
;

1161 if(
iOffs¸ìnDøwög
==4 && !(
dwA˘Fixes
&1))

1163 
bRídîFr⁄tBuf„r
=
TRUE
;

1166  
bFuŒVRam
;

1169  
TRUE
;

1170 
	}
}

1174 
BOOL
 
	$bDøwOffs¸ìn3
()

1176 
BOOL
 
bFr⁄t
;
sW
,
sH
;

1178 
sxmax
=
	`max
(
lx0
,max(
lx1
,
lx2
));

1179 if(
sxmax
<
døwX
Ë 
FALSE
;

1180 
sxmö
=
	`mö
(
lx0
,mö(
lx1
,
lx2
));

1181 if(
sxmö
>
døwW
Ë 
FALSE
;

1182 
symax
=
	`max
(
ly0
,max(
ly1
,
ly2
));

1183 if(
symax
<
døwY
Ë 
FALSE
;

1184 
symö
=
	`mö
(
ly0
,mö(
ly1
,
ly2
));

1185 if(
symö
>
døwH
Ë 
FALSE
;

1187 if(
PSXDi•œy
.
DißbÀd
Ë 
TRUE
;

1189 if(
iOffs¸ìnDøwög
==1Ë 
bFuŒVRam
;

1191 
sW
=
døwW
-1;
sH
=
døwH
-1;

1192 
sxmö
=
	`mö
(
sW
,
	`max
(sxmö,
døwX
));

1193 
sxmax
=
	`max
(
døwX
,
	`mö
(sxmax,
sW
));

1194 
symö
=
	`mö
(
sH
,
	`max
(symö,
døwY
));

1195 
symax
=
	`max
(
døwY
,
	`mö
(symax,
sH
));

1197 if(
	`bO√PoötInBack
()Ë 
bFuŒVRam
;

1199 if(
iOffs¸ìnDøwög
==2)

1200 
bFr⁄t
=
	`bDøwOffs¸ìnFr⁄t
();

1201 
bFr⁄t
=
	`bO√PoötInFr⁄t
();

1203 if(
bFr⁄t
)

1205 if(
PSXDi•œy
.
I¡îœ˚dTe°
Ë 
bFuŒVRam
;

1207 
vîãx
[0].
x
=
lx0
 - 
PSXDi•œy
.
Di•œyPosôi⁄
.x+
PªviousPSXDi•œy
.
R™ge
.
x0
;

1208 
vîãx
[1].
x
=
lx1
 - 
PSXDi•œy
.
Di•œyPosôi⁄
.x+
PªviousPSXDi•œy
.
R™ge
.
x0
;

1209 
vîãx
[2].
x
=
lx2
 - 
PSXDi•œy
.
Di•œyPosôi⁄
.x+
PªviousPSXDi•œy
.
R™ge
.
x0
;

1210 
vîãx
[0].
y
=
ly0
 - 
PSXDi•œy
.
Di•œyPosôi⁄
.y+
PªviousPSXDi•œy
.
R™ge
.
y0
;

1211 
vîãx
[1].
y
=
ly1
 - 
PSXDi•œy
.
Di•œyPosôi⁄
.y+
PªviousPSXDi•œy
.
R™ge
.
y0
;

1212 
vîãx
[2].
y
=
ly2
 - 
PSXDi•œy
.
Di•œyPosôi⁄
.y+
PªviousPSXDi•œy
.
R™ge
.
y0
;

1214 if(
iOffs¸ìnDøwög
==4)

1216 
bRídîFr⁄tBuf„r
=
TRUE
;

1220  
bFuŒVRam
;

1223  
TRUE
;

1224 
	}
}

1228 
BOOL
 
	$Fa°CheckAgaö°S¸ìn
(
imageX0
,
imageY0
,
imageX1
,
imageY1
)

1230 
PSXRe˘_t
 
xU∂ﬂdAªa
;

1232 
imageX1
 +
imageX0
;

1233 
imageY1
 +
imageY0
;

1235 i‡(
imageX0
 < 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
)

1236 
xU∂ﬂdAªa
.
x0
 = 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
;

1238 i‡(
imageX0
 > 
PªviousPSXDi•œy
.
Di•œyEnd
.
x
)

1239 
xU∂ﬂdAªa
.
x0
 = 
PªviousPSXDi•œy
.
Di•œyEnd
.
x
;

1241 
xU∂ﬂdAªa
.
x0
 = 
imageX0
;

1243 if(
imageX1
 < 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
)

1244 
xU∂ﬂdAªa
.
x1
 = 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
;

1246 i‡(
imageX1
 > 
PªviousPSXDi•œy
.
Di•œyEnd
.
x
)

1247 
xU∂ﬂdAªa
.
x1
 = 
PªviousPSXDi•œy
.
Di•œyEnd
.
x
;

1249 
xU∂ﬂdAªa
.
x1
 = 
imageX1
;

1251 i‡(
imageY0
 < 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
)

1252 
xU∂ﬂdAªa
.
y0
 = 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
;

1254 i‡(
imageY0
 > 
PªviousPSXDi•œy
.
Di•œyEnd
.
y
)

1255 
xU∂ﬂdAªa
.
y0
 = 
PªviousPSXDi•œy
.
Di•œyEnd
.
y
;

1257 
xU∂ﬂdAªa
.
y0
 = 
imageY0
;

1259 i‡(
imageY1
 < 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
)

1260 
xU∂ﬂdAªa
.
y1
 = 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
;

1262 i‡(
imageY1
 > 
PªviousPSXDi•œy
.
Di•œyEnd
.
y
)

1263 
xU∂ﬂdAªa
.
y1
 = 
PªviousPSXDi•œy
.
Di•œyEnd
.
y
;

1265 
xU∂ﬂdAªa
.
y1
 = 
imageY1
;

1267 i‡((
xU∂ﬂdAªa
.
x0
 !xU∂ﬂdAªa.
x1
Ë&& (xU∂ﬂdAªa.
y0
 !xU∂ﬂdAªa.
y1
))

1268  
TRUE
;

1269  
FALSE
;

1270 
	}
}

1272 
BOOL
 
	$CheckAgaö°S¸ìn
(
imageX0
,
imageY0
,
imageX1
,
imageY1
)

1274 
imageX1
 +
imageX0
;

1275 
imageY1
 +
imageY0
;

1277 i‡(
imageX0
 < 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
)

1278 
xrU∂ﬂdAªa
.
x0
 = 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
;

1280 i‡(
imageX0
 > 
PªviousPSXDi•œy
.
Di•œyEnd
.
x
)

1281 
xrU∂ﬂdAªa
.
x0
 = 
PªviousPSXDi•œy
.
Di•œyEnd
.
x
;

1283 
xrU∂ﬂdAªa
.
x0
 = 
imageX0
;

1285 if(
imageX1
 < 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
)

1286 
xrU∂ﬂdAªa
.
x1
 = 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
;

1288 i‡(
imageX1
 > 
PªviousPSXDi•œy
.
Di•œyEnd
.
x
)

1289 
xrU∂ﬂdAªa
.
x1
 = 
PªviousPSXDi•œy
.
Di•œyEnd
.
x
;

1291 
xrU∂ﬂdAªa
.
x1
 = 
imageX1
;

1293 i‡(
imageY0
 < 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
)

1294 
xrU∂ﬂdAªa
.
y0
 = 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
;

1296 i‡(
imageY0
 > 
PªviousPSXDi•œy
.
Di•œyEnd
.
y
)

1297 
xrU∂ﬂdAªa
.
y0
 = 
PªviousPSXDi•œy
.
Di•œyEnd
.
y
;

1299 
xrU∂ﬂdAªa
.
y0
 = 
imageY0
;

1301 i‡(
imageY1
 < 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
)

1302 
xrU∂ﬂdAªa
.
y1
 = 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
;

1304 i‡(
imageY1
 > 
PªviousPSXDi•œy
.
Di•œyEnd
.
y
)

1305 
xrU∂ﬂdAªa
.
y1
 = 
PªviousPSXDi•œy
.
Di•œyEnd
.
y
;

1307 
xrU∂ﬂdAªa
.
y1
 = 
imageY1
;

1309 i‡((
xrU∂ﬂdAªa
.
x0
 !xrU∂ﬂdAªa.
x1
Ë&& (xrU∂ﬂdAªa.
y0
 !xrU∂ﬂdAªa.
y1
))

1310  
TRUE
;

1311  
FALSE
;

1312 
	}
}

1314 
BOOL
 
	$Fa°CheckAgaö°Fr⁄tS¸ìn
(
imageX0
,
imageY0
,
imageX1
,
imageY1
)

1316 
PSXRe˘_t
 
xU∂ﬂdAªa
;

1318 
imageX1
 +
imageX0
;

1319 
imageY1
 +
imageY0
;

1321 i‡(
imageX0
 < 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
)

1322 
xU∂ﬂdAªa
.
x0
 = 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
;

1324 i‡(
imageX0
 > 
PSXDi•œy
.
Di•œyEnd
.
x
)

1325 
xU∂ﬂdAªa
.
x0
 = 
PSXDi•œy
.
Di•œyEnd
.
x
;

1327 
xU∂ﬂdAªa
.
x0
 = 
imageX0
;

1329 if(
imageX1
 < 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
)

1330 
xU∂ﬂdAªa
.
x1
 = 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
;

1332 i‡(
imageX1
 > 
PSXDi•œy
.
Di•œyEnd
.
x
)

1333 
xU∂ﬂdAªa
.
x1
 = 
PSXDi•œy
.
Di•œyEnd
.
x
;

1335 
xU∂ﬂdAªa
.
x1
 = 
imageX1
;

1337 i‡(
imageY0
 < 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
)

1338 
xU∂ﬂdAªa
.
y0
 = 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
;

1340 i‡(
imageY0
 > 
PSXDi•œy
.
Di•œyEnd
.
y
)

1341 
xU∂ﬂdAªa
.
y0
 = 
PSXDi•œy
.
Di•œyEnd
.
y
;

1343 
xU∂ﬂdAªa
.
y0
 = 
imageY0
;

1345 i‡(
imageY1
 < 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
)

1346 
xU∂ﬂdAªa
.
y1
 = 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
;

1348 i‡(
imageY1
 > 
PSXDi•œy
.
Di•œyEnd
.
y
)

1349 
xU∂ﬂdAªa
.
y1
 = 
PSXDi•œy
.
Di•œyEnd
.
y
;

1351 
xU∂ﬂdAªa
.
y1
 = 
imageY1
;

1353 i‡((
xU∂ﬂdAªa
.
x0
 !xU∂ﬂdAªa.
x1
Ë&& (xU∂ﬂdAªa.
y0
 !xU∂ﬂdAªa.
y1
))

1354  
TRUE
;

1355  
FALSE
;

1356 
	}
}

1358 
BOOL
 
	$CheckAgaö°Fr⁄tS¸ìn
(
imageX0
,
imageY0
,
imageX1
,
imageY1
)

1360 
imageX1
 +
imageX0
;

1361 
imageY1
 +
imageY0
;

1363 i‡(
imageX0
 < 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
)

1364 
xrU∂ﬂdAªa
.
x0
 = 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
;

1366 i‡(
imageX0
 > 
PSXDi•œy
.
Di•œyEnd
.
x
)

1367 
xrU∂ﬂdAªa
.
x0
 = 
PSXDi•œy
.
Di•œyEnd
.
x
;

1369 
xrU∂ﬂdAªa
.
x0
 = 
imageX0
;

1371 if(
imageX1
 < 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
)

1372 
xrU∂ﬂdAªa
.
x1
 = 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
;

1374 i‡(
imageX1
 > 
PSXDi•œy
.
Di•œyEnd
.
x
)

1375 
xrU∂ﬂdAªa
.
x1
 = 
PSXDi•œy
.
Di•œyEnd
.
x
;

1377 
xrU∂ﬂdAªa
.
x1
 = 
imageX1
;

1379 i‡(
imageY0
 < 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
)

1380 
xrU∂ﬂdAªa
.
y0
 = 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
;

1382 i‡(
imageY0
 > 
PSXDi•œy
.
Di•œyEnd
.
y
)

1383 
xrU∂ﬂdAªa
.
y0
 = 
PSXDi•œy
.
Di•œyEnd
.
y
;

1385 
xrU∂ﬂdAªa
.
y0
 = 
imageY0
;

1387 i‡(
imageY1
 < 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
)

1388 
xrU∂ﬂdAªa
.
y1
 = 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
;

1390 i‡(
imageY1
 > 
PSXDi•œy
.
Di•œyEnd
.
y
)

1391 
xrU∂ﬂdAªa
.
y1
 = 
PSXDi•œy
.
Di•œyEnd
.
y
;

1393 
xrU∂ﬂdAªa
.
y1
 = 
imageY1
;

1395 i‡((
xrU∂ﬂdAªa
.
x0
 !xrU∂ﬂdAªa.
x1
Ë&& (xrU∂ﬂdAªa.
y0
 !xrU∂ﬂdAªa.
y1
))

1396  
TRUE
;

1397  
FALSE
;

1398 
	}
}

1402 
	$Pª∑ªFuŒS¸ìnU∂ﬂd
 (
Posôi⁄
)

1404 i‡(
Posôi⁄
==-1)

1406 if(
PSXDi•œy
.
I¡îœ˚d
)

1408 
xrU∂ﬂdAªa
.
x0
 = 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
;

1409 
xrU∂ﬂdAªa
.
x1
 = 
PSXDi•œy
.
Di•œyEnd
.
x
;

1410 
xrU∂ﬂdAªa
.
y0
 = 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
;

1411 
xrU∂ﬂdAªa
.
y1
 = 
PSXDi•œy
.
Di•œyEnd
.
y
;

1415 
xrU∂ﬂdAªa
.
x0
 = 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
;

1416 
xrU∂ﬂdAªa
.
x1
 = 
PªviousPSXDi•œy
.
Di•œyEnd
.
x
;

1417 
xrU∂ﬂdAªa
.
y0
 = 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
;

1418 
xrU∂ﬂdAªa
.
y1
 = 
PªviousPSXDi•œy
.
Di•œyEnd
.
y
;

1421 if(
bNìdRGB24Upd©e
)

1423 if(
lCÀ¨OnSw≠
)

1428 if(
PSXDi•œy
.
I¡îœ˚d
 && 
PªviousPSXDi•œy
.
RGB24
<2)

1430 
PªviousPSXDi•œy
.
RGB24
++;

1434 
xrU∂ﬂdAªa
.
y1
 = 
	`mö
(xrU∂ﬂdAªa.
y0
+
xrU∂ﬂdAªaRGB24
.y1,xrUploadArea.y1);

1435 
xrU∂ﬂdAªa
.
y0
+=
xrU∂ﬂdAªaRGB24
.y0;

1440 i‡(
Posôi⁄
)

1442 
xrU∂ﬂdAªa
.
x0
 = 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
;

1443 
xrU∂ﬂdAªa
.
x1
 = 
PSXDi•œy
.
Di•œyEnd
.
x
;

1444 
xrU∂ﬂdAªa
.
y0
 = 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
;

1445 
xrU∂ﬂdAªa
.
y1
 = 
PSXDi•œy
.
Di•œyEnd
.
y
;

1449 
xrU∂ﬂdAªa
.
x0
 = 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
;

1450 
xrU∂ﬂdAªa
.
x1
 = 
PªviousPSXDi•œy
.
Di•œyEnd
.
x
;

1451 
xrU∂ﬂdAªa
.
y0
 = 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
;

1452 
xrU∂ﬂdAªa
.
y1
 = 
PªviousPSXDi•œy
.
Di•œyEnd
.
y
;

1455 i‡(
xrU∂ﬂdAªa
.
x0
 < 0) xrUploadArea.x0 = 0;

1457 i‡(
xrU∂ﬂdAªa
.
x0
 > 1023) xrUploadArea.x0 = 1023;

1459 i‡(
xrU∂ﬂdAªa
.
x1
 < 0) xrUploadArea.x1 = 0;

1461 i‡(
xrU∂ﬂdAªa
.
x1
 > 1024) xrUploadArea.x1 = 1024;

1463 i‡(
xrU∂ﬂdAªa
.
y0
 < 0) xrUploadArea.y0 = 0;

1465 i‡(
xrU∂ﬂdAªa
.
y0
 > 
iGPUHeightMask
) xrUploadArea.y0 = iGPUHeightMask;

1467 i‡(
xrU∂ﬂdAªa
.
y1
 < 0) xrUploadArea.y1 = 0;

1469 i‡(
xrU∂ﬂdAªa
.
y1
 > 
iGPUHeight
) xrUploadArea.y1 = iGPUHeight;

1471 i‡(
PSXDi•œy
.
RGB24
)

1473 
	`InvÆid©eTextuªAªa
(
xrU∂ﬂdAªa
.
x0
,xrU∂ﬂdAªa.
y0
,xrU∂ﬂdAªa.
x1
-xrU∂ﬂdAªa.x0,xrU∂ﬂdAªa.
y1
-xrUploadArea.y0);

1475 
	}
}

1482 * 
LﬂdDúe˘MovõFa°
();

1484 
	$U∂ﬂdS¸ìnEx
(
Posôi⁄
)

1486 
ya
,
yb
,
xa
,
xb
,
x
, 
y
, 
YSãp
, 
XSãp
, 
U
, 
USãp
,
ux
[4],
vy
[4];

1488 if(!
PSXDi•œy
.
Di•œyMode
.
x
) ;

1489 if(!
PSXDi•œy
.
Di•œyMode
.
y
) ;

1491 
	`glDißbÀ
(
GL_SCISSOR_TEST
); 
	`glEº‹
();

1492 
	`glShadeModñ
(
GL_FLAT
); 
	`glEº‹
();

1493 
bOldSmoŸhShaded
=
FALSE
;

1494 
	`glDißbÀ
(
GL_BLEND
); 
	`glEº‹
();

1495 
bBÀndE«bÀ
=
FALSE
;

1496 
	`glDißbÀ
(
GL_TEXTURE_2D
); 
	`glEº‹
();

1497 
bTexE«bÀd
=
FALSE
;

1498 
	`glDißbÀ
(
GL_ALPHA_TEST
); 
	`glEº‹
();

1505 
YSãp
 = 256;

1506 
XSãp
 = 256;

1507 
USãp
 = (
PSXDi•œy
.
RGB24
 ? 128 : 0);

1508 
ya
 = 
xrU∂ﬂdAªa
.
y0
;

1509 
yb
 = 
xrU∂ﬂdAªa
.
y1
;

1510 
xa
 = 
xrU∂ﬂdAªa
.
x0
;

1511 
xb
 = 
xrU∂ﬂdAªa
.
x1
;

1513 
y
=
ya
;y<=
yb
;y+=
YSãp
)

1515 
U
 = 0;

1516 
x
=
xa
;x<=
xb
;x+=
XSãp
)

1518 
ly0
 = 
ly1
 = 
y
;

1519 
ly2
 = 
y
 + 
YSãp
;

1520 i‡(
ly2
 > 
yb
)Üy2 = yb;

1521 
ly3
 = 
ly2
;

1523 
lx0
 = 
lx3
 = 
x
;

1524 
lx1
 = 
x
 + 
XSãp
;

1525 i‡(
lx1
 > 
xb
)Üx1 = xb;

1527 
lx2
 = 
lx1
;

1529 
ux
[0]=ux[3]=(
xa
 - 
x
);

1530 i‡(
ux
[0] < 0) ux[0]=ux[3]=0;

1531 
ux
[2]=ux[1]=(
xb
 - 
x
);

1532 i‡(
ux
[2] > 256) ux[2]=ux[1]=256;

1534 
vy
[0]=vy[1]=(
ya
 - 
y
);

1535 i‡(
vy
[0] < 0) vy[0]=vy[1]=0;

1536 
vy
[2]=vy[3]=(
yb
 - 
y
);

1537 i‡(
vy
[2] > 256) vy[2]=vy[3]=256;

1539 i‡((
ux
[0] >= ux[2]) ||

1540 (
vy
[0] >= vy[2])) ;

1542 
xrMovõAªa
.
x0
=
lx0
+
U
; xrMovõAªa.
y0
=
ly0
;

1543 
xrMovõAªa
.
x1
=
lx2
+
U
; xrMovõAªa.
y1
=
ly2
;

1545 
	`off£tS¸ìnU∂ﬂd
(
Posôi⁄
);

1552 
	`LﬂdDúe˘MovõFa°
();

1554 
U
+=
USãp
;

1562 
	`glE«bÀ
(
GL_ALPHA_TEST
); 
	`glEº‹
();

1563 
	`glE«bÀ
(
GL_SCISSOR_TEST
); 
	`glEº‹
();

1564 
	}
}

1568 
	$U∂ﬂdS¸ìn
(
Posôi⁄
)

1570 
x
, 
y
, 
YSãp
, 
XSãp
, 
U
, 
s
, 
USãp
,
ux
[4],
vy
[4];

1571 
xa
,
xb
,
ya
,
yb
;

1573 if(
xrU∂ﬂdAªa
.
x0
>1023) xrUploadArea.x0=1023;

1574 if(
xrU∂ﬂdAªa
.
x1
>1024) xrUploadArea.x1=1024;

1575 if(
xrU∂ﬂdAªa
.
y0
>
iGPUHeightMask
) xrUploadArea.y0=iGPUHeightMask;

1576 if(
xrU∂ﬂdAªa
.
y1
>
iGPUHeight
) xrUploadArea.y1=iGPUHeight;

1578 if(
xrU∂ﬂdAªa
.
x0
==xrU∂ﬂdAªa.
x1
) ;

1579 if(
xrU∂ﬂdAªa
.
y0
==xrU∂ﬂdAªa.
y1
) ;

1581 if(
PSXDi•œy
.
DißbÀd
 && 
iOffs¸ìnDøwög
<4) ;

1583 
iDøwnSomëhög
 = 2;

1584 
iLa°RGB24
=
PSXDi•œy
.
RGB24
+1;

1586 if(
bSkùNextFøme
) ;

1588 if(
dwA˘Fixes
 & 2Ë{
	`U∂ﬂdS¸ìnEx
(
Posôi⁄
);;}

1590 
bUsögMovõ
 = 
TRUE
;

1591 
bDøwTextuªd
 = 
TRUE
;

1592 
bDøwSmoŸhShaded
 = 
FALSE
;

1595  
vîãx
[0].
c
.
lcﬁ
=0xffffffff;

1596 
	`SETCOL
(
vîãx
[0]);

1598 
	`SëOGLDi•œySëtögs
(0);

1600 
YSãp
 = 256;

1601 
XSãp
 = 256;

1603 
USãp
 = (
PSXDi•œy
.
RGB24
 ? 128 : 0);

1605 
ya
=
xrU∂ﬂdAªa
.
y0
;

1606 
yb
=
xrU∂ﬂdAªa
.
y1
;

1607 
xa
=
xrU∂ﬂdAªa
.
x0
;

1608 
xb
=
xrU∂ﬂdAªa
.
x1
;

1610 
y
=
ya
;y<=
yb
;y+=
YSãp
)

1612 
U
 = 0;

1613 
x
=
xa
;x<=
xb
;x+=
XSãp
)

1615 
ly0
 = 
ly1
 = 
y
;

1616 
ly2
 = 
y
 + 
YSãp
;

1617 i‡(
ly2
 > 
yb
)Üy2 = yb;

1618 
ly3
 = 
ly2
;

1620 
lx0
 = 
lx3
 = 
x
;

1621 
lx1
 = 
x
 + 
XSãp
;

1622 i‡(
lx1
 > 
xb
)Üx1 = xb;

1624 
lx2
 = 
lx1
;

1626 
ux
[0]=ux[3]=(
xa
 - 
x
);

1627 i‡(
ux
[0] < 0) ux[0]=ux[3]=0;

1628 
ux
[2]=ux[1]=(
xb
 - 
x
);

1629 i‡(
ux
[2] > 256) ux[2]=ux[1]=256;

1631 
vy
[0]=vy[1]=(
ya
 - 
y
);

1632 i‡(
vy
[0] < 0) vy[0]=vy[1]=0;

1633 
vy
[2]=vy[3]=(
yb
 - 
y
);

1634 i‡(
vy
[2] > 256) vy[2]=vy[3]=256;

1636 i‡((
ux
[0] >= ux[2]) ||

1637 (
vy
[0] >= vy[2])) ;

1639 
xrMovõAªa
.
x0
=
lx0
+
U
; xrMovõAªa.
y0
=
ly0
;

1640 
xrMovõAªa
.
x1
=
lx2
+
U
; xrMovõAªa.
y1
=
ly2
;

1642 
s
=
ux
[2] - ux[0]; if(s>255) s=255;

1644 
gl_ux
[2] = gl_ux[1] = 
s
;

1645 
s
=
vy
[2] - vy[0]; if(s>255) s=255;

1646 
gl_vy
[2] = gl_vy[3] = 
s
;

1647 
gl_ux
[0] = gl_ux[3] = 
gl_vy
[0] = gl_vy[1] = 0;

1649 
	`SëRídîSèã
(()0x01000000);

1650 
	`SëRídîMode
(()0x01000000, 
FALSE
);

1651 
	`off£tS¸ìnU∂ﬂd
(
Posôi⁄
);

1652 
	`assignTextuªVRAMWrôe
();

1654 
	`PRIMdøwTextuªdQuad
(&
vîãx
[0], &vertex[1], &vertex[2], &vertex[3]);

1656 
U
+=
USãp
;

1660 
bUsögMovõ
=
FALSE
;

1661 
bDi•œyNŸSë
 = 
TRUE
;

1662 
	}
}

1668 
BOOL
 
	$IsCom∂ëeInsideNextS¸ìn
(
x
, 
y
, 
xoff
, 
yoff
)

1670 i‡(
x
 > 
PSXDi•œy
.
Di•œyPosôi⁄
.x+1Ë 
FALSE
;

1671 i‡((
x
 + 
xoff
Ë< 
PSXDi•œy
.
Di•œyEnd
.x-1Ë 
FALSE
;

1672 
yoff
+=
y
;

1673 i‡(
y
 >
PSXDi•œy
.
Di•œyPosôi⁄
.y &&

1674 
y
 <
PSXDi•œy
.
Di•œyEnd
.y )

1676 i‡((
yoff
Ë>
PSXDi•œy
.
Di•œyPosôi⁄
.
y
 &&

1677 (
yoff
Ë<
PSXDi•œy
.
Di•œyEnd
.
y
 )  
TRUE
;

1679 i‡(
y
 > 
PSXDi•œy
.
Di•œyPosôi⁄
.y+1Ë 
FALSE
;

1680 i‡(
yoff
 < 
PSXDi•œy
.
Di•œyEnd
.
y
-1Ë 
FALSE
;

1681  
TRUE
;

1682 
	}
}

1684 
BOOL
 
	$IsPrimCom∂ëeInsideNextS¸ìn
(
x
, 
y
, 
xoff
, 
yoff
)

1686 
x
+=
PSXDi•œy
.
DøwOff£t
.x;

1687 i‡(
x
 > 
PSXDi•œy
.
Di•œyPosôi⁄
.x+1Ë 
FALSE
;

1688 
y
+=
PSXDi•œy
.
DøwOff£t
.y;

1689 i‡(
y
 > 
PSXDi•œy
.
Di•œyPosôi⁄
.y+1Ë 
FALSE
;

1690 
xoff
+=
PSXDi•œy
.
DøwOff£t
.
x
;

1691 i‡(
xoff
 < 
PSXDi•œy
.
Di•œyEnd
.
x
-1Ë 
FALSE
;

1692 
yoff
+=
PSXDi•œy
.
DøwOff£t
.
y
;

1693 i‡(
yoff
 < 
PSXDi•œy
.
Di•œyEnd
.
y
-1Ë 
FALSE
;

1694  
TRUE
;

1695 
	}
}

1697 
BOOL
 
	$IsInsideNextS¸ìn
(
x
, 
y
, 
xoff
, 
yoff
)

1699 i‡(
x
 > 
PSXDi•œy
.
Di•œyEnd
.xË 
FALSE
;

1700 i‡(
y
 > 
PSXDi•œy
.
Di•œyEnd
.yË 
FALSE
;

1701 i‡((
x
 + 
xoff
Ë< 
PSXDi•œy
.
Di•œyPosôi⁄
.xË 
FALSE
;

1702 i‡((
y
 + 
yoff
Ë< 
PSXDi•œy
.
Di•œyPosôi⁄
.yË 
FALSE
;

1703  
TRUE
;

1704 
	}
}

1713 
	$cmdSTP
(* 
ba£Addr
)

1715 
gd©a
 = ((*)
ba£Addr
)[0];

1717 
STATUSREG
&=~0x1800;

1718 
STATUSREG
|=((
gd©a
 & 0x03) << 11);

1720 if(!
iU£Mask
) ;

1722 if(
gd©a
&1Ë{
sSëMask
=0x8000;
lSëMask
=0x80008000;
iSëMask
=1;}

1723 {
sSëMask
=0; 
lSëMask
=0; 
iSëMask
=0;}

1725 if(
gd©a
&2)

1727 if(!(
gd©a
&1)Ë
iSëMask
=2;

1728 
bCheckMask
=
TRUE
;

1729 if(
iDïthFunc
==0) ;

1730 
iDïthFunc
=0;

1731 
	`glDïthFunc
(
GL_LESS
); 
	`glEº‹
();

1735 
bCheckMask
=
FALSE
;

1736 if(
iDïthFunc
==1) ;

1737 
	`glDïthFunc
(
GL_ALWAYS
); 
	`glEº‹
();

1738 
iDïthFunc
=1;

1740 
	}
}

1746 
	$cmdTextuªPage
(* 
ba£Addr
)

1748 
gd©a
 = ((*)
ba£Addr
)[0];

1749 
	`Upd©eGlobÆTP
(()
gd©a
);

1750 
GlobÆTextREST
 = (
gd©a
&0x00ffffff)>>9;

1751 
	}
}

1757 
	$cmdTextuªWödow
(*
ba£Addr
)

1759 
gd©a
 = ((*)
ba£Addr
)[0];

1761 
YAlign
,
XAlign
;

1763 
ulGPUInfoVÆs
[
INFO_TW
]=
gd©a
&0xFFFFF;

1765 if(
gd©a
 & 0x020)

1766 
TWö
.
Posôi⁄
.
y1
 = 8;

1767 i‡(
gd©a
 & 0x040)

1768 
TWö
.
Posôi⁄
.
y1
 = 16;

1769 i‡(
gd©a
 & 0x080)

1770 
TWö
.
Posôi⁄
.
y1
 = 32;

1771 i‡(
gd©a
 & 0x100)

1772 
TWö
.
Posôi⁄
.
y1
 = 64;

1773 i‡(
gd©a
 & 0x200)

1774 
TWö
.
Posôi⁄
.
y1
 = 128;

1776 
TWö
.
Posôi⁄
.
y1
 = 256;

1780 i‡(
gd©a
 & 0x001)

1781 
TWö
.
Posôi⁄
.
x1
 = 8;

1782 i‡(
gd©a
 & 0x002)

1783 
TWö
.
Posôi⁄
.
x1
 = 16;

1784 i‡(
gd©a
 & 0x004)

1785 
TWö
.
Posôi⁄
.
x1
 = 32;

1786 i‡(
gd©a
 & 0x008)

1787 
TWö
.
Posôi⁄
.
x1
 = 64;

1788 i‡(
gd©a
 & 0x010)

1789 
TWö
.
Posôi⁄
.
x1
 = 128;

1791 
TWö
.
Posôi⁄
.
x1
 = 256;

1795 
YAlign
 = ()(32 - (
TWö
.
Posôi⁄
.
y1
 >> 3));

1796 
XAlign
 = ()(32 - (
TWö
.
Posôi⁄
.
x1
 >> 3));

1800 
TWö
.
Posôi⁄
.
y0
 = ()(((
gd©a
 >> 15Ë& 
YAlign
) << 3);

1801 
TWö
.
Posôi⁄
.
x0
 = ()(((
gd©a
 >> 10Ë& 
XAlign
) << 3);

1803 if((
TWö
.
Posôi⁄
.
x0
 == 0 &&

1804 
TWö
.
Posôi⁄
.
y0
 == 0 &&

1805 
TWö
.
Posôi⁄
.
x1
 == 0 &&

1806 
TWö
.
Posôi⁄
.
y1
 == 0) ||

1807 (
TWö
.
Posôi⁄
.
x1
 == 256 &&

1808 
TWö
.
Posôi⁄
.
y1
 == 256))

1810 
bUsögTWö
 = 
FALSE
;

1812 #ifde‡
OWNSCALE


1813 
TWö
.
USˇÀFa˘‹
 = 1.0f;

1814 
TWö
.
VSˇÀFa˘‹
 = 1.0f;

1816 
TWö
.
USˇÀFa˘‹
 =

1817 
TWö
.
VSˇÀFa˘‹
 = 1.0f/256.0f;

1822 
bUsögTWö
 = 
TRUE
;

1824 
TWö
.
OPosôi⁄
.
y1
 = TWö.
Posôi⁄
.y1;

1825 
TWö
.
OPosôi⁄
.
x1
 = TWö.
Posôi⁄
.x1;

1827 if(
TWö
.
Posôi⁄
.
x1
<=2) TWin.Position.x1=2;

1829 if(
TWö
.
Posôi⁄
.
x1
<=4) TWin.Position.x1=4;

1831 if(
TWö
.
Posôi⁄
.
x1
<=8) TWin.Position.x1=8;

1833 if(
TWö
.
Posôi⁄
.
x1
<=16) TWin.Position.x1=16;

1835 if(
TWö
.
Posôi⁄
.
x1
<=32) TWin.Position.x1=32;

1837 if(
TWö
.
Posôi⁄
.
x1
<=64) TWin.Position.x1=64;

1839 if(
TWö
.
Posôi⁄
.
x1
<=128) TWin.Position.x1=128;

1841 if(
TWö
.
Posôi⁄
.
x1
<=256) TWin.Position.x1=256;

1843 if(
TWö
.
Posôi⁄
.
y1
<=2) TWin.Position.y1=2;

1845 if(
TWö
.
Posôi⁄
.
y1
<=4) TWin.Position.y1=4;

1847 if(
TWö
.
Posôi⁄
.
y1
<=8) TWin.Position.y1=8;

1849 if(
TWö
.
Posôi⁄
.
y1
<=16) TWin.Position.y1=16;

1851 if(
TWö
.
Posôi⁄
.
y1
<=32) TWin.Position.y1=32;

1853 if(
TWö
.
Posôi⁄
.
y1
<=64) TWin.Position.y1=64;

1855 if(
TWö
.
Posôi⁄
.
y1
<=128) TWin.Position.y1=128;

1857 if(
TWö
.
Posôi⁄
.
y1
<=256) TWin.Position.y1=256;

1859 #ifde‡
OWNSCALE


1860 
TWö
.
USˇÀFa˘‹
 = ()TWö.
Posôi⁄
.
x1
;

1861 
TWö
.
VSˇÀFa˘‹
 = ()TWö.
Posôi⁄
.
y1
;

1863 
TWö
.
USˇÀFa˘‹
 = (()TWö.
Posôi⁄
.
x1
)/256.0f;

1864 
TWö
.
VSˇÀFa˘‹
 = (()TWö.
Posôi⁄
.
y1
)/256.0f;

1867 
	}
}

1916 
	$CœmpToPSXS¸ìn
(*
x0
, *
y0
, *
x1
, *
y1
)

1918 i‡(*
x0
 < 0) *x0 = 0;

1920 i‡(*
x0
 > 1023) *x0 = 1023;

1922 i‡(*
x1
 < 0) *x1 = 0;

1924 i‡(*
x1
 > 1023) *x1 = 1023;

1926 i‡(*
y0
 < 0) *y0 = 0;

1928 i‡(*
y0
 > 
iGPUHeightMask
) *y0 = iGPUHeightMask;

1930 i‡(*
y1
 < 0) *y1 = 0;

1932 i‡(*
y1
 > 
iGPUHeightMask
) *y1 = iGPUHeightMask;

1933 
	}
}

1939 
	$CœmpToPSXS¸ìnOff£t
(*
x0
, *
y0
, *
x1
, *
y1
)

1941 i‡(*
x0
 < 0)

1942 { *
x1
 +*
x0
; *x0 = 0; }

1944 i‡(*
x0
 > 1023)

1945 { *
x0
 = 1023; *
x1
 = 0; }

1947 i‡(*
y0
 < 0)

1948 { *
y1
 +*
y0
; *y0 = 0; }

1950 i‡(*
y0
 > 
iGPUHeightMask
)

1951 { *
y0
 = 
iGPUHeightMask
; *
y1
 = 0; }

1953 i‡(*
x1
 < 0) *x1 = 0;

1955 i‡((*
x1
 + *
x0
) > 1024) *x1 = (1024 - *x0);

1957 i‡(*
y1
 < 0) *y1 = 0;

1959 i‡((*
y1
 + *
y0
Ë> 
iGPUHeight
) *y1 = (iGPUHeight - *y0);

1960 
	}
}

1966 
	$cmdDøwAªaSèπ
(* 
ba£Addr
)

1968 
gd©a
 = ((*)
ba£Addr
)[0];

1970 
døwX
 = 
gd©a
 & 0x3ff;

1971 if(
døwX
>=1024) drawX=1023;

1973 if(
dwGPUVîsi⁄
==2)

1975 
ulGPUInfoVÆs
[
INFO_DRAWSTART
]=
gd©a
&0x3FFFFF;

1976 
døwY
 = (
gd©a
>>12)&0x3ff;

1980 
ulGPUInfoVÆs
[
INFO_DRAWSTART
]=
gd©a
&0xFFFFF;

1981 
døwY
 = (
gd©a
>>10)&0x3ff;

1984 if(
døwY
>=
iGPUHeight
ËdøwY=
iGPUHeightMask
;

1986 
PªviousPSXDi•œy
.
DøwAªa
.
y0
=
PSXDi•œy
.DrawArea.y0;

1987 
PªviousPSXDi•œy
.
DøwAªa
.
x0
=
PSXDi•œy
.DrawArea.x0;

1989 
PSXDi•œy
.
DøwAªa
.
y0
 = ()
døwY
;

1990 
PSXDi•œy
.
DøwAªa
.
x0
 = ()
døwX
;

1991 
	}
}

1997 
	$cmdDøwAªaEnd
(* 
ba£Addr
)

1999 
gd©a
 = ((*)
ba£Addr
)[0];

2001 
døwW
 = 
gd©a
 & 0x3ff;

2002 if(
døwW
>=1024) drawW=1023;

2004 if(
dwGPUVîsi⁄
==2)

2006 
ulGPUInfoVÆs
[
INFO_DRAWEND
]=
gd©a
&0x3FFFFF;

2007 
døwH
 = (
gd©a
>>12)&0x3ff;

2011 
ulGPUInfoVÆs
[
INFO_DRAWEND
]=
gd©a
&0xFFFFF;

2012 
døwH
 = (
gd©a
>>10)&0x3ff;

2015 if(
døwH
>=
iGPUHeight
ËdøwH=
iGPUHeightMask
;

2017 
PSXDi•œy
.
DøwAªa
.
y1
 = ()
døwH
;

2018 
PSXDi•œy
.
DøwAªa
.
x1
 = ()
døwW
;

2020 
	`CœmpToPSXS¸ìn
(&
PSXDi•œy
.
DøwAªa
.
x0
,

2021 &
PSXDi•œy
.
DøwAªa
.
y0
,

2022 &
PSXDi•œy
.
DøwAªa
.
x1
,

2023 &
PSXDi•œy
.
DøwAªa
.
y1
);

2025 
bDi•œyNŸSë
 = 
TRUE
;

2026 
	}
}

2032 
	$cmdDøwOff£t
(* 
ba£Addr
)

2034 
gd©a
 = ((*)
ba£Addr
)[0];

2036 
PªviousPSXDi•œy
.
DøwOff£t
.
x
 =

2037 
PSXDi•œy
.
DøwOff£t
.
x
 = ()(
gd©a
 & 0x7ff);

2039 if(
dwGPUVîsi⁄
==2)

2041 
ulGPUInfoVÆs
[
INFO_DRAWOFF
]=
gd©a
&0x7FFFFF;

2042 
PSXDi•œy
.
DøwOff£t
.
y
 = ()((
gd©a
>>12) & 0x7ff);

2046 
ulGPUInfoVÆs
[
INFO_DRAWOFF
]=
gd©a
&0x3FFFFF;

2047 
PSXDi•œy
.
DøwOff£t
.
y
 = ()((
gd©a
>>11) & 0x7ff);

2050 
PSXDi•œy
.
DøwOff£t
.
x
=()((()PSXDisplay.DrawOffset.x<<21)>>21);

2051 
PSXDi•œy
.
DøwOff£t
.
y
=()((()PSXDisplay.DrawOffset.y<<21)>>21);

2053 
PSXDi•œy
.
CumulOff£t
.
x
 =

2054 
PSXDi•œy
.
DøwOff£t
.
x
 - PSXDi•œy.
GDøwOff£t
.x + 
PªviousPSXDi•œy
.
R™ge
.
x0
;

2055 
PSXDi•œy
.
CumulOff£t
.
y
 =

2056 
PSXDi•œy
.
DøwOff£t
.
y
 - PSXDi•œy.
GDøwOff£t
.y + 
PªviousPSXDi•œy
.
R™ge
.
y0
;

2057 
	}
}

2063 
	$¥imLﬂdImage
(* 
ba£Addr
)

2065 *
sgpuD©a
 = ((*Ë
ba£Addr
);

2067 
VRAMWrôe
.
x
 = 
sgpuD©a
[2]&0x03ff;

2068 
VRAMWrôe
.
y
 = 
sgpuD©a
[3]&
iGPUHeightMask
;

2069 
VRAMWrôe
.
Width
 = 
sgpuD©a
[4];

2070 
VRAMWrôe
.
Height
 = 
sgpuD©a
[5];

2072 
iD©aWrôeMode
 = 
DR_VRAMTRANSFER
;

2073 
VRAMWrôe
.
ImagePå
 = 
psxVuw
 + (VRAMWrôe.
y
<<10Ë+ VRAMWrôe.
x
;

2074 
VRAMWrôe
.
RowsRemaöög
 = VRAMWrôe.
Width
;

2075 
VRAMWrôe
.
CﬁsRemaöög
 = VRAMWrôe.
Height
;

2077 
bNìdWrôeU∂ﬂd
=
TRUE
;

2078 
	}
}

2082 
	$Pª∑ªRGB24U∂ﬂd
()

2084 
VRAMWrôe
.
x
=(VRAMWrite.x*2)/3;

2085 
VRAMWrôe
.
Width
=(VRAMWrite.Width*2)/3;

2087 if(!
PSXDi•œy
.
I¡îœ˚dTe°
 &&

2088 
	`CheckAgaö°S¸ìn
(
VRAMWrôe
.
x
, VRAMWrôe.
y
, VRAMWrôe.
Width
, VRAMWrôe.
Height
))

2090 
xrU∂ﬂdAªa
.
x0
-=
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
;

2091 
xrU∂ﬂdAªa
.
x1
-=
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
;

2092 
xrU∂ﬂdAªa
.
y0
-=
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
;

2093 
xrU∂ﬂdAªa
.
y1
-=
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
;

2096 if(
	`CheckAgaö°Fr⁄tS¸ìn
(
VRAMWrôe
.
x
, VRAMWrôe.
y
, VRAMWrôe.
Width
, VRAMWrôe.
Height
))

2098 
xrU∂ﬂdAªa
.
x0
-=
PSXDi•œy
.
Di•œyPosôi⁄
.
x
;

2099 
xrU∂ﬂdAªa
.
x1
-=
PSXDi•œy
.
Di•œyPosôi⁄
.
x
;

2100 
xrU∂ﬂdAªa
.
y0
-=
PSXDi•œy
.
Di•œyPosôi⁄
.
y
;

2101 
xrU∂ﬂdAªa
.
y1
-=
PSXDi•œy
.
Di•œyPosôi⁄
.
y
;

2105 if(
bRídîFr⁄tBuf„r
)

2107 
	`upd©eFr⁄tDi•œy
();

2110 if(
bNìdRGB24Upd©e
==
FALSE
)

2112 
xrU∂ﬂdAªaRGB24
=
xrU∂ﬂdAªa
;

2113 
bNìdRGB24Upd©e
=
TRUE
;

2117 
xrU∂ﬂdAªaRGB24
.
x0
=
	`mö
(xrU∂ﬂdAªaRGB24.x0,
xrU∂ﬂdAªa
.x0);

2118 
xrU∂ﬂdAªaRGB24
.
x1
=
	`max
(xrU∂ﬂdAªaRGB24.x1,
xrU∂ﬂdAªa
.x1);

2119 
xrU∂ﬂdAªaRGB24
.
y0
=
	`mö
(xrU∂ﬂdAªaRGB24.y0,
xrU∂ﬂdAªa
.y0);

2120 
xrU∂ﬂdAªaRGB24
.
y1
=
	`max
(xrU∂ﬂdAªaRGB24.y1,
xrU∂ﬂdAªa
.y1);

2122 
	}
}

2126 
	$CheckWrôeUpd©e
()

2128 
iX
=0,
iY
=0;

2130 if(
VRAMWrôe
.
Width
Ë
iX
=1;

2131 if(
VRAMWrôe
.
Height
Ë
iY
=1;

2133 
	`InvÆid©eTextuªAªa
(
VRAMWrôe
.
x
, VRAMWrôe.
y
, VRAMWrôe.
Width
-
iX
, VRAMWrôe.
Height
-
iY
);

2135 if(
PSXDi•œy
.
I¡îœ˚d
 && !
iOffs¸ìnDøwög
) ;

2137 if(
PSXDi•œy
.
RGB24
Ë{
	`Pª∑ªRGB24U∂ﬂd
();;}

2139 if(!
PSXDi•œy
.
I¡îœ˚dTe°
 &&

2140 
	`CheckAgaö°S¸ìn
(
VRAMWrôe
.
x
, VRAMWrôe.
y
, VRAMWrôe.
Width
, VRAMWrôe.
Height
))

2142 if(
dwA˘Fixes
&0x800) ;

2144 if(
bRídîFr⁄tBuf„r
)

2146 
	`upd©eFr⁄tDi•œy
();

2149 
	`U∂ﬂdS¸ìn
(
FALSE
);

2151 
bNìdU∂ﬂdTe°
=
TRUE
;

2154 if(
iOffs¸ìnDøwög
)

2156 i‡(
	`CheckAgaö°Fr⁄tS¸ìn
(
VRAMWrôe
.
x
, VRAMWrôe.
y
, VRAMWrôe.
Width
, VRAMWrôe.
Height
))

2158 if(
PSXDi•œy
.
I¡îœ˚dTe°
)

2160 if(
PªviousPSXDi•œy
.
I¡îœ˚dNew
)

2162 
PªviousPSXDi•œy
.
I¡îœ˚dNew
=
FALSE
;

2163 
bNìdI¡îœ˚Upd©e
=
TRUE
;

2164 
xrU∂ﬂdAªaIL
.
x0
=
PSXDi•œy
.
Di•œyPosôi⁄
.
x
;

2165 
xrU∂ﬂdAªaIL
.
y0
=
PSXDi•œy
.
Di•œyPosôi⁄
.
y
;

2166 
xrU∂ﬂdAªaIL
.
x1
=
PSXDi•œy
.
Di•œyPosôi⁄
.
x
+PSXDi•œy.
Di•œyModeNew
.x;

2167 
xrU∂ﬂdAªaIL
.
y1
=
PSXDi•œy
.
Di•œyPosôi⁄
.
y
+PSXDi•œy.
Di•œyModeNew
.y;

2168 if(
xrU∂ﬂdAªaIL
.
x1
>1023) xrUploadAreaIL.x1=1023;

2169 if(
xrU∂ﬂdAªaIL
.
y1
>511) xrUploadAreaIL.y1=511;

2172 if(
bNìdI¡îœ˚Upd©e
==
FALSE
)

2174 
xrU∂ﬂdAªaIL
=
xrU∂ﬂdAªa
;

2175 
bNìdI¡îœ˚Upd©e
=
TRUE
;

2179 
xrU∂ﬂdAªaIL
.
x0
=
	`mö
(xrU∂ﬂdAªaIL.x0,
xrU∂ﬂdAªa
.x0);

2180 
xrU∂ﬂdAªaIL
.
x1
=
	`max
(xrU∂ﬂdAªaIL.x1,
xrU∂ﬂdAªa
.x1);

2181 
xrU∂ﬂdAªaIL
.
y0
=
	`mö
(xrU∂ﬂdAªaIL.y0,
xrU∂ﬂdAªa
.y0);

2182 
xrU∂ﬂdAªaIL
.
y1
=
	`max
(xrU∂ﬂdAªaIL.y1,
xrU∂ﬂdAªa
.y1);

2187 if(!
bNìdU∂ﬂdA·î
)

2189 
bNìdU∂ﬂdA·î
 = 
TRUE
;

2190 
xrU∂ﬂdAªa
.
x0
=
VRAMWrôe
.
x
;

2191 
xrU∂ﬂdAªa
.
x1
=
VRAMWrôe
.
x
+VRAMWrôe.
Width
;

2192 
xrU∂ﬂdAªa
.
y0
=
VRAMWrôe
.
y
;

2193 
xrU∂ﬂdAªa
.
y1
=
VRAMWrôe
.
y
+VRAMWrôe.
Height
;

2197 
xrU∂ﬂdAªa
.
x0
=
	`mö
(xrU∂ﬂdAªa.x0,
VRAMWrôe
.
x
);

2198 
xrU∂ﬂdAªa
.
x1
=
	`max
(xrU∂ﬂdAªa.x1,
VRAMWrôe
.
x
+VRAMWrôe.
Width
);

2199 
xrU∂ﬂdAªa
.
y0
=
	`mö
(xrU∂ﬂdAªa.y0,
VRAMWrôe
.
y
);

2200 
xrU∂ﬂdAªa
.
y1
=
	`max
(xrU∂ﬂdAªa.y1,
VRAMWrôe
.
y
+VRAMWrôe.
Height
);

2203 if(
dwA˘Fixes
&0x8000)

2205 if((
xrU∂ﬂdAªa
.
x1
-xrU∂ﬂdAªa.
x0
)>=(
PSXDi•œy
.
Di•œyMode
.
x
-32) &&

2206 (
xrU∂ﬂdAªa
.
y1
-xrU∂ﬂdAªa.
y0
)>=(
PSXDi•œy
.
Di•œyMode
.
y
-32))

2208 
	`U∂ﬂdS¸ìn
(-1);

2209 
	`upd©eFr⁄tDi•œy
();

2214 
	}
}

2220 
	$¥imSt‹eImage
(* 
ba£Addr
)

2222 *
sgpuD©a
 = ((*Ë
ba£Addr
);

2224 
VRAMRód
.
x
 = 
sgpuD©a
[2]&0x03ff;

2225 
VRAMRód
.
y
 = 
sgpuD©a
[3]&
iGPUHeightMask
;

2226 
VRAMRód
.
Width
 = 
sgpuD©a
[4];

2227 
VRAMRód
.
Height
 = 
sgpuD©a
[5];

2229 
VRAMRód
.
ImagePå
 = 
psxVuw
 + (VRAMRód.
y
<<10Ë+ VRAMRód.
x
;

2230 
VRAMRód
.
RowsRemaöög
 = VRAMRód.
Width
;

2231 
VRAMRód
.
CﬁsRemaöög
 = VRAMRód.
Height
;

2233 
iD©aRódMode
 = 
DR_VRAMTRANSFER
;

2235 
STATUSREG
 |
GPUSTATUS_READYFORVRAM
;

2236 
	}
}

2242 
	$¥imBlkFûl
(* 
ba£Addr
)

2244 *
gpuD©a
 = ((*Ë
ba£Addr
);

2245 *
sgpuD©a
 = ((*Ë
ba£Addr
);

2247 
iDøwnSomëhög
=1;

2249 
•πX
 = 
sgpuD©a
[2];

2250 
•πY
 = 
sgpuD©a
[3];

2251 
•πW
 = 
sgpuD©a
[4] & 0x3ff;

2252 
•πH
 = 
sgpuD©a
[5] & 
iGPUHeightMask
;

2254 
•πW
 = (sprtW+15) & ~15;

2257 i‡(
•πH
 =
iGPUHeightMask
Ë•πH=
iGPUHeight
;

2258 i‡(
•πW
 == 1023) sprtW=1024;

2261 
ly0
 = 
ly1
 = 
•πY
;

2262 
ly2
 = 
ly3
 = (
•πY
+
•πH
);

2263 
lx0
 = 
lx3
 = 
•πX
;

2264 
lx1
 = 
lx2
 = (
•πX
+
•πW
);

2266 
	`off£tBlk
();

2268 if(
	`ClùVîãxLi°S¸ìn
())

2270 
PSXDi•œy_t
 * 
pd
;

2271 if(
PSXDi•œy
.
I¡îœ˚dTe°
Ë
pd
=&PSXDisplay;

2272 
pd
=&
PªviousPSXDi•œy
;

2274 i‡((
lx0
 <
pd
->
Di•œyPosôi⁄
.
x
+16) &&

2275 (
ly0
 <
pd
->
Di•œyPosôi⁄
.
y
+16) &&

2276 (
lx2
 >
pd
->
Di•œyEnd
.
x
-16) &&

2277 (
ly2
 >
pd
->
Di•œyEnd
.
y
-16))

2279 
GL˛ampf
 
g
,
b
,
r
;

2280 
g
=((
GL˛ampf
)
	`GREEN
(
gpuD©a
[0]))/255.0f;

2281 
b
=((
GL˛ampf
)
	`BLUE
(
gpuD©a
[0]))/255.0f;

2282 
r
=((
GL˛ampf
)
	`RED
(
gpuD©a
[0]))/255.0f;

2285 
	`glCÀ¨Cﬁ‹
(
r
,
g
,
b
,1.0f); 
	`glEº‹
();

2286 
	`glCÀ¨
(
uiBuf„rBôs
); 
	`glEº‹
();

2287 
gl_z
=0.0f;

2289 if(
gpuD©a
[0]!=0x02000000 &&

2290 (
ly0
>
pd
->
Di•œyPosôi⁄
.
y
 ||

2291 
ly2
<
pd
->
Di•œyEnd
.
y
))

2293 
bDøwTextuªd
 = 
FALSE
;

2294 
bDøwSmoŸhShaded
 = 
FALSE
;

2295 
	`SëRídîSèã
(()0x01000000);

2296 
	`SëRídîMode
(()0x01000000, 
FALSE
);

2297 
vîãx
[0].
c
.
lcﬁ
=0xff000000;

2298 
	`SETCOL
(
vîãx
[0]);

2299 if(
ly0
>
pd
->
Di•œyPosôi⁄
.
y
)

2301 
vîãx
[0].
x
=0;vîãx[0].
y
=0;

2302 
vîãx
[1].
x
=
pd
->
Di•œyEnd
.x-pd->
Di•œyPosôi⁄
.x;vîãx[1].
y
=0;

2303 
vîãx
[2].
x
=vîãx[1].x;vîãx[2].
y
=
ly0
-
pd
->
Di•œyPosôi⁄
.y;

2304 
vîãx
[3].
x
=0;vîãx[3].
y
=vertex[2].y;

2305 
	`PRIMdøwQuad
(&
vîãx
[0], &vertex[1], &vertex[2], &vertex[3]);

2307 if(
ly2
<
pd
->
Di•œyEnd
.
y
)

2309 
vîãx
[0].
x
=0;vîãx[0].
y
=(
pd
->
Di•œyEnd
.y-pd->
Di•œyPosôi⁄
.y)-’d->Di•œyEnd.y-
ly2
);

2310 
vîãx
[1].
x
=
pd
->
Di•œyEnd
.x-pd->
Di•œyPosôi⁄
.x;vîãx[1].
y
=vertex[0].y;

2311 
vîãx
[2].
x
=vîãx[1].x;vîãx[2].
y
=
pd
->
Di•œyEnd
.y;

2312 
vîãx
[3].
x
=0;vîãx[3].
y
=vertex[2].y;

2313 
	`PRIMdøwQuad
(&
vîãx
[0], &vertex[1], &vertex[2], &vertex[3]);

2321 
bDøwTextuªd
 = 
FALSE
;

2322 
bDøwSmoŸhShaded
 = 
FALSE
;

2323 
	`SëRídîSèã
(()0x01000000);

2324 
	`SëRídîMode
(()0x01000000, 
FALSE
);

2325 
vîãx
[0].
c
.
lcﬁ
=
gpuD©a
[0]|0xff000000;

2326 
	`SETCOL
(
vîãx
[0]);

2328 
	`PRIMdøwQuad
(&
vîãx
[0], &vertex[1], &vertex[2], &vertex[3]);

2336 i‡(
	`IsCom∂ëeInsideNextS¸ìn
(
•πX
, 
•πY
, 
•πW
, 
•πH
))

2338 
lCÀ¨OnSw≠Cﬁ‹
 = 
	`COLOR
(
gpuD©a
[0]);

2339 
lCÀ¨OnSw≠
 = 1;

2353 
	}
}

2359 
	$MoveImageWøµed
(
imageX0
,
imageY0
,

2360 
imageX1
,
imageY1
,

2361 
imageSX
,
imageSY
)

2363 
i
,
j
,
imageXE
,
imageYE
;

2365 if(
iFømeRódTy≥
&2)

2367 
imageXE
=
imageX0
+
imageSX
;

2368 
imageYE
=
imageY0
+
imageSY
;

2370 if(
imageYE
>
iGPUHeight
 && 
imageXE
>1024)

2372 
	`CheckVRamRód
(0,0,

2373 (
imageXE
&0x3ff),

2374 (
imageY0
&
iGPUHeightMask
),

2375 
FALSE
);

2378 if(
imageXE
>1024)

2380 
	`CheckVRamRód
(0,
imageY0
,

2381 (
imageXE
&0x3ff),

2382 (
imageYE
>
iGPUHeight
)?iGPUHeight:imageYE,

2383 
FALSE
);

2386 if(
imageYE
>
iGPUHeight
)

2388 
	`CheckVRamRód
(
imageX0
,0,

2389 (
imageXE
>1024)?1024:imageXE,

2390 
imageYE
&
iGPUHeightMask
,

2391 
FALSE
);

2394 
	`CheckVRamRód
(
imageX0
,
imageY0
,

2395 (
imageXE
>1024)?1024:imageXE,

2396 (
imageYE
>
iGPUHeight
)?iGPUHeight:imageYE,

2397 
FALSE
);

2400 
j
=0;j<
imageSY
;j++)

2401 
i
=0;i<
imageSX
;i++)

2402 
psxVuw
 [(1024*((
imageY1
+
j
)&
iGPUHeightMask
))+((
imageX1
+
i
)&0x3ff)]=

2403 
psxVuw
[(1024*((
imageY0
+
j
)&
iGPUHeightMask
))+((
imageX0
+
i
)&0x3ff)];

2405 if(!
PSXDi•œy
.
RGB24
)

2407 
imageXE
=
imageX1
+
imageSX
;

2408 
imageYE
=
imageY1
+
imageSY
;

2410 if(
imageYE
>
iGPUHeight
 && 
imageXE
>1024)

2412 
	`InvÆid©eTextuªAªa
(0,0,

2413 (
imageXE
&0x3ff)-1,

2414 (
imageYE
&
iGPUHeightMask
)-1);

2417 if(
imageXE
>1024)

2419 
	`InvÆid©eTextuªAªa
(0,
imageY1
,

2420 (
imageXE
&0x3ff)-1,

2421 ((
imageYE
>
iGPUHeight
)?iGPUHeight:imageYE)-
imageY1
-1);

2424 if(
imageYE
>
iGPUHeight
)

2426 
	`InvÆid©eTextuªAªa
(
imageX1
,0,

2427 ((
imageXE
>1024)?1024:imageXE)-
imageX1
-1,

2428 (
imageYE
&
iGPUHeightMask
)-1);

2431 
	`InvÆid©eTextuªAªa
(
imageX1
,
imageY1
,

2432 ((
imageXE
>1024)?1024:imageXE)-
imageX1
-1,

2433 ((
imageYE
>
iGPUHeight
)?iGPUHeight:imageYE)-
imageY1
-1);

2435 
	}
}

2439 
	$¥imMoveImage
(* 
ba£Addr
)

2441 *
sgpuD©a
 = ((*Ë
ba£Addr
);

2442 
imageY0
,
imageX0
,
imageY1
,
imageX1
,
imageSX
,
imageSY
,
i
,
j
;

2444 
imageX0
 = 
sgpuD©a
[2]&0x03ff;

2445 
imageY0
 = 
sgpuD©a
[3]&
iGPUHeightMask
;

2446 
imageX1
 = 
sgpuD©a
[4]&0x03ff;

2447 
imageY1
 = 
sgpuD©a
[5]&
iGPUHeightMask
;

2448 
imageSX
 = 
sgpuD©a
[6];

2449 
imageSY
 = 
sgpuD©a
[7];

2451 if((
imageX0
 =
imageX1
Ë&& (
imageY0
 =
imageY1
)) ;

2452 if(
imageSX
<=0) ;

2453 if(
imageSY
<=0) ;

2455 if(
iGPUHeight
==1024 && 
sgpuD©a
[7]>1024) ;

2457 if((
imageY0
+
imageSY
)>
iGPUHeight
 ||

2458 (
imageX0
+
imageSX
)>1024 ||

2459 (
imageY1
+
imageSY
)>
iGPUHeight
 ||

2460 (
imageX1
+
imageSX
)>1024)

2462 
	`MoveImageWøµed
(
imageX0
,
imageY0
,
imageX1
,
imageY1
,
imageSX
,
imageSY
);

2463 if((
imageY0
+
imageSY
)>
iGPUHeight
) imageSY=iGPUHeight-imageY0;

2464 if((
imageX0
+
imageSX
)>1024) imageSX=1024-imageX0;

2465 if((
imageY1
+
imageSY
)>
iGPUHeight
) imageSY=iGPUHeight-imageY1;

2466 if((
imageX1
+
imageSX
)>1024) imageSX=1024-imageX1;

2469 if(
iFømeRódTy≥
&2)

2470 
	`CheckVRamRód
(
imageX0
,
imageY0
,

2471 
imageX0
+
imageSX
,

2472 
imageY0
+
imageSY
,

2473 
FALSE
);

2475 if(
imageSX
&1)

2477 *
SRCPå
, *
DSTPå
;

2478 
LöeOff£t
;

2480 
SRCPå
 = 
psxVuw
 + (1024*
imageY0
Ë+ 
imageX0
;

2481 
DSTPå
 = 
psxVuw
 + (1024*
imageY1
Ë+ 
imageX1
;

2483 
LöeOff£t
 = 1024 - 
imageSX
;

2485 
j
=0;j<
imageSY
;j++)

2487 
i
=0;i<
imageSX
;i++Ë*
DSTPå
++ = *
SRCPå
++;

2488 
SRCPå
 +
LöeOff£t
;

2489 
DSTPå
 +
LöeOff£t
;

2494 *
SRCPå
, *
DSTPå
;

2495 
LöeOff£t
;

2496 
dx
=
imageSX
>>1;

2498 
SRCPå
 = (*)(
psxVuw
 + (1024*
imageY0
Ë+ 
imageX0
);

2499 
DSTPå
 = (*)(
psxVuw
 + (1024*
imageY1
Ë+ 
imageX1
);

2501 
LöeOff£t
 = 512 - 
dx
;

2503 
j
=0;j<
imageSY
;j++)

2505 
i
=0;i<
dx
;i++Ë*
DSTPå
++ = *
SRCPå
++;

2506 
SRCPå
 +
LöeOff£t
;

2507 
DSTPå
 +
LöeOff£t
;

2511 i‡(!
PSXDi•œy
.
RGB24
)

2513 
	`InvÆid©eTextuªAªa
(
imageX1
,
imageY1
,
imageSX
-1,
imageSY
-1);

2515 i‡(
	`CheckAgaö°S¸ìn
(
imageX1
,
imageY1
,
imageSX
,
imageSY
))

2517 if(
imageX1
>=
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
 &&

2518 
imageX1
<
PªviousPSXDi•œy
.
Di•œyEnd
.
x
 &&

2519 
imageY1
>=
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
 &&

2520 
imageY1
<
PªviousPSXDi•œy
.
Di•œyEnd
.
y
)

2522 
imageX1
 +
imageSX
;

2523 
imageY1
 +
imageSY
;

2525 if(
imageX1
>=
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
 &&

2526 
imageX1
<=
PªviousPSXDi•œy
.
Di•œyEnd
.
x
 &&

2527 
imageY1
>=
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
 &&

2528 
imageY1
<=
PªviousPSXDi•œy
.
Di•œyEnd
.
y
)

2531 
imageX0
>=
PSXDi•œy
.
Di•œyPosôi⁄
.
x
 &&

2532 
imageX0
<
PSXDi•œy
.
Di•œyEnd
.
x
 &&

2533 
imageY0
>=
PSXDi•œy
.
Di•œyPosôi⁄
.
y
 &&

2534 
imageY0
<
PSXDi•œy
.
Di•œyEnd
.
y


2537 if(
bRídîFr⁄tBuf„r
)

2539 
	`upd©eFr⁄tDi•œy
();

2542 
	`U∂ﬂdS¸ìn
(
FALSE
);

2544 
bFakeFr⁄tBuf„r
=
TRUE
;

2548 
bNìdU∂ﬂdTe°
=
TRUE
;

2551 if(
iOffs¸ìnDøwög
)

2553 i‡(
	`CheckAgaö°Fr⁄tS¸ìn
(
imageX1
,
imageY1
,
imageSX
,
imageSY
))

2555 if(!
PSXDi•œy
.
I¡îœ˚dTe°
 &&

2558 
imageX0
>=
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
 &&

2559 
imageX0
<
PªviousPSXDi•œy
.
Di•œyEnd
.
x
 &&

2560 
imageY0
>=
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
 &&

2561 
imageY0
<
PªviousPSXDi•œy
.
Di•œyEnd
.
y


2564 
imageX0
>=
PSXDi•œy
.
Di•œyPosôi⁄
.
x
 &&

2565 
imageX0
<
PSXDi•œy
.
Di•œyEnd
.
x
 &&

2566 
imageY0
>=
PSXDi•œy
.
Di•œyPosôi⁄
.
y
 &&

2567 
imageY0
<
PSXDi•œy
.
Di•œyEnd
.
y


2571 
bNìdU∂ﬂdTe°
=
TRUE
;

2573 if(!
bNìdU∂ﬂdA·î
)

2575 
bNìdU∂ﬂdA·î
 = 
TRUE
;

2576 
xrU∂ﬂdAªa
.
x0
=
imageX0
;

2577 
xrU∂ﬂdAªa
.
x1
=
imageX0
+
imageSX
;

2578 
xrU∂ﬂdAªa
.
y0
=
imageY0
;

2579 
xrU∂ﬂdAªa
.
y1
=
imageY0
+
imageSY
;

2583 
xrU∂ﬂdAªa
.
x0
=
	`mö
(xrU∂ﬂdAªa.x0,
imageX0
);

2584 
xrU∂ﬂdAªa
.
x1
=
	`max
(xrU∂ﬂdAªa.x1,
imageX0
+
imageSX
);

2585 
xrU∂ﬂdAªa
.
y0
=
	`mö
(xrU∂ﬂdAªa.y0,
imageY0
);

2586 
xrU∂ﬂdAªa
.
y1
=
	`max
(xrU∂ﬂdAªa.y1,
imageY0
+
imageSY
);

2591 
	}
}

2598 
	$¥imTûeS
(* 
ba£Addr
)

2600 *
gpuD©a
 = ((*)
ba£Addr
);

2601 *
sgpuD©a
 = ((*Ë
ba£Addr
);

2603 
•πX
 = 
sgpuD©a
[2];

2604 
•πY
 = 
sgpuD©a
[3];

2605 
•πW
 = 
sgpuD©a
[4] & 0x3ff;

2606 
•πH
 = 
sgpuD©a
[5] & 
iGPUHeightMask
;

2610 
lx0
 = 
•πX
;

2611 
ly0
 = 
•πY
;

2613 
	`off£tST
();

2615 if((
dwA˘Fixes
&1) &&

2616 
•πX
==0 && 
•πY
==0 && 
•πW
==24 && 
•πH
==16)

2619 
bDøwTextuªd
 = 
FALSE
;

2620 
bDøwSmoŸhShaded
 = 
FALSE
;

2622 
	`SëRídîSèã
(
gpuD©a
[0]);

2645 
	`SëRídîMode
(
gpuD©a
[0], 
FALSE
);

2646 
	`SëZMask4NT
();

2648 if(
bIgn‹eNextTûe
Ë{bIgn‹eNextTûe=
FALSE
;;}

2650 
vîãx
[0].
c
.
lcﬁ
=
gpuD©a
[0];

2651 
vîãx
[0].
c
.
cﬁ
[3]=
ubGloCﬁAÕha
;

2652 
	`SETCOL
(
vîãx
[0]);

2654 
	`PRIMdøwQuad
(&
vîãx
[0], &vertex[1], &vertex[2], &vertex[3]);

2656 
iDøwnSomëhög
=1;

2657 
	}
}

2663 
	$¥imTûe1
(* 
ba£Addr
)

2665 *
gpuD©a
 = ((*)
ba£Addr
);

2666 *
sgpuD©a
 = ((*Ë
ba£Addr
);

2668 
•πX
 = 
sgpuD©a
[2];

2669 
•πY
 = 
sgpuD©a
[3];

2670 
•πW
 = 1;

2671 
•πH
 = 1;

2673 
lx0
 = 
•πX
;

2674 
ly0
 = 
•πY
;

2676 
	`off£tST
();

2678 
bDøwTextuªd
 = 
FALSE
;

2679 
bDøwSmoŸhShaded
 = 
FALSE
;

2681 
	`SëRídîSèã
(
gpuD©a
[0]);

2695 
	`SëRídîMode
(
gpuD©a
[0], 
FALSE
);

2696 
	`SëZMask4NT
();

2698 
vîãx
[0].
c
.
lcﬁ
=
gpuD©a
[0];vîãx[0].c.
cﬁ
[3]=
ubGloCﬁAÕha
;

2699 
	`SETCOL
(
vîãx
[0]);

2701 
	`PRIMdøwQuad
(&
vîãx
[0], &vertex[1], &vertex[2], &vertex[3]);

2703 
iDøwnSomëhög
=1;

2704 
	}
}

2710 
	$¥imTûe8
(* 
ba£Addr
)

2712 *
gpuD©a
 = ((*)
ba£Addr
);

2713 *
sgpuD©a
 = ((*Ë
ba£Addr
);

2715 
•πX
 = 
sgpuD©a
[2];

2716 
•πY
 = 
sgpuD©a
[3];

2717 
•πW
 = 8;

2718 
•πH
 = 8;

2720 
lx0
 = 
•πX
;

2721 
ly0
 = 
•πY
;

2723 
	`off£tST
();

2725 
bDøwTextuªd
 = 
FALSE
;

2726 
bDøwSmoŸhShaded
 = 
FALSE
;

2727 
	`SëRídîSèã
(
gpuD©a
[0]);

2741 
	`SëRídîMode
(
gpuD©a
[0], 
FALSE
);

2742 
	`SëZMask4NT
();

2744 
vîãx
[0].
c
.
lcﬁ
=
gpuD©a
[0];

2745 
vîãx
[0].
c
.
cﬁ
[3]=
ubGloCﬁAÕha
;

2746 
	`SETCOL
(
vîãx
[0]);

2748 
	`PRIMdøwQuad
(&
vîãx
[0], &vertex[1], &vertex[2], &vertex[3]);

2750 
iDøwnSomëhög
=1;

2751 
	}
}

2757 
	$¥imTûe16
(* 
ba£Addr
)

2759 *
gpuD©a
 = ((*)
ba£Addr
);

2760 *
sgpuD©a
 = ((*Ë
ba£Addr
);

2762 
•πX
 = 
sgpuD©a
[2];

2763 
•πY
 = 
sgpuD©a
[3];

2764 
•πW
 = 16;

2765 
•πH
 = 16;

2767 
lx0
 = 
•πX
;

2768 
ly0
 = 
•πY
;

2770 
	`off£tST
();

2772 
bDøwTextuªd
 = 
FALSE
;

2773 
bDøwSmoŸhShaded
 = 
FALSE
;

2774 
	`SëRídîSèã
(
gpuD©a
[0]);

2788 
	`SëRídîMode
(
gpuD©a
[0], 
FALSE
);

2789 
	`SëZMask4NT
();

2791 
vîãx
[0].
c
.
lcﬁ
=
gpuD©a
[0];

2792 
vîãx
[0].
c
.
cﬁ
[3]=
ubGloCﬁAÕha
;

2793 
	`SETCOL
(
vîãx
[0]);

2795 
	`PRIMdøwQuad
(&
vîãx
[0], &vertex[1], &vertex[2], &vertex[3]);

2797 
iDøwnSomëhög
=1;

2798 
	}
}

2835 
	#POFF
 0.375f

	)

2837 
	$DøwMu…iFûãrS¥ôe
()

2839 
lABR
,
lDST
;

2841 if(
bU£Mu…iPass
 || 
DøwSemiTøns
 || 
ubO∑queDøw
)

2843 
	`PRIMdøwTextuªdQuad
(&
vîãx
[0], &vertex[1], &vertex[2], &vertex[3]);

2847 
lABR
=
GlobÆTextABR
;

2848 
lDST
=
DøwSemiTøns
;

2849 
vîãx
[0].
c
.
cﬁ
[3]=
ubGloAÕha
/2;

2850 
	`SETCOL
(
vîãx
[0]);

2851 
	`PRIMdøwTextuªdQuad
(&
vîãx
[0], &vertex[1], &vertex[2], &vertex[3]);

2852 
vîãx
[0].
x
+=
POFF
;vertex[1].x+=POFF;

2853 
vîãx
[2].
x
+=
POFF
;vertex[3].x+=POFF;

2854 
vîãx
[0].
y
+=
POFF
;vertex[1].y+=POFF;

2855 
vîãx
[2].
y
+=
POFF
;vertex[3].y+=POFF;

2856 
GlobÆTextABR
=0;

2857 
DøwSemiTøns
=1;

2858 
	`SëSemiTøns
();

2859 
	`PRIMdøwTextuªdQuad
(&
vîãx
[0], &vertex[1], &vertex[2], &vertex[3]);

2860 
GlobÆTextABR
=
lABR
;

2861 
DøwSemiTøns
=
lDST
;

2862 
	}
}

2868 
	$¥imS¥t8
(* 
ba£Addr
)

2870 *
gpuD©a
 = ((*Ë
ba£Addr
);

2871 *
sgpuD©a
 = ((*Ë
ba£Addr
);

2872 
s
;

2874 
iS¥ôeTex
=1;

2876 
•πX
 = 
sgpuD©a
[2];

2877 
•πY
 = 
sgpuD©a
[3];

2878 
•πW
 = 8;

2879 
•πH
 = 8;

2881 
lx0
 = 
•πX
;

2882 
ly0
 = 
•πY
;

2884 
	`off£tST
();

2887 
gl_ux
[0]=gl_ux[3]=
ba£Addr
[8];

2889 if(
usMúr‹
 & 0x1000)

2891 
s
=
gl_ux
[0];

2892 
s
-=
•πW
-1;

2893 if(
s
<0) {s=0;}

2894 
gl_ux
[0]=gl_ux[3]=
s
;

2897 
sS¥ôe_ux2
=
s
=
gl_ux
[0]+
•πW
;

2898 if(
s
) s--;

2899 if(
s
>255) s=255;

2900 
gl_ux
[1]=gl_ux[2]=
s
;

2902 
gl_vy
[0]=gl_vy[1]=
ba£Addr
[9];

2904 if(
usMúr‹
 & 0x2000)

2906 
s
=
gl_vy
[0];

2907 
s
-=
•πH
-1;

2908 if(
s
<0) {s=0;}

2909 
gl_vy
[0]=gl_vy[1]=
s
;

2912 
sS¥ôe_vy2
=
s
=
gl_vy
[0]+
•πH
;

2913 if(
s
) s--;

2914 if(
s
>255) s=255;

2915 
gl_vy
[2]=gl_vy[3]=
s
;

2917 
ulClutID
=(
gpuD©a
[2]>>16);

2919 
bDøwTextuªd
 = 
TRUE
;

2920 
bDøwSmoŸhShaded
 = 
FALSE
;

2921 
	`SëRídîSèã
(
gpuD©a
[0]);

2942 
	`SëRídîMode
(
gpuD©a
[0], 
TRUE
);

2943 
	`SëZMask4SP
();

2945 
sS¥ôe_ux2
=
gl_ux
[0]+
•πW
;

2946 
sS¥ôe_vy2
=
gl_vy
[0]+
•πH
;

2948 
	`assignTextuªS¥ôe
();

2950 if(
iFûãrTy≥
>4)

2951 
	`DøwMu…iFûãrS¥ôe
();

2953 
	`PRIMdøwTextuªdQuad
(&
vîãx
[0], &vertex[1], &vertex[2], &vertex[3]);

2955 if(
bDøwMu…iPass
)

2957 
	`SëSemiTønsMu…i
(1);

2958 
	`PRIMdøwTextuªdQuad
(&
vîãx
[0], &vertex[1], &vertex[2], &vertex[3]);

2961 if(
ubO∑queDøw
)

2963 
	`SëZMask4O
();

2964 if(
bU£Mu…iPass
Ë
	`SëO∑queCﬁ‹
(
gpuD©a
[0]);

2965 
DEFOPAQUEON


2977 
	`PRIMdøwTextuªdQuad
(&
vîãx
[0], &vertex[1], &vertex[2], &vertex[3]);

2978 
DEFOPAQUEOFF


2981 
iS¥ôeTex
=0;

2982 
iDøwnSomëhög
=1;

2983 
	}
}

2989 
	$¥imS¥t16
(* 
ba£Addr
)

2991 *
gpuD©a
 = ((*Ë
ba£Addr
);

2992 *
sgpuD©a
 = ((*Ë
ba£Addr
);

2993 
s
;

2995 
iS¥ôeTex
=1;

2997 
•πX
 = 
sgpuD©a
[2];

2998 
•πY
 = 
sgpuD©a
[3];

2999 
•πW
 = 16;

3000 
•πH
 = 16;

3002 
lx0
 = 
•πX
;

3003 
ly0
 = 
•πY
;

3005 
	`off£tST
();

3008 
gl_ux
[0]=gl_ux[3]=
ba£Addr
[8];

3010 if(
usMúr‹
 & 0x1000)

3012 
s
=
gl_ux
[0];

3013 
s
-=
•πW
-1;

3014 if(
s
<0) {s=0;}

3015 
gl_ux
[0]=gl_ux[3]=
s
;

3018 
sS¥ôe_ux2
=
s
=
gl_ux
[0]+
•πW
;

3019 if(
s
) s--;

3020 if(
s
>255) s=255;

3021 
gl_ux
[1]=gl_ux[2]=
s
;

3023 
gl_vy
[0]=gl_vy[1]=
ba£Addr
[9];

3025 if(
usMúr‹
 & 0x2000)

3027 
s
=
gl_vy
[0];

3028 
s
-=
•πH
-1;

3029 if(
s
<0) {s=0;}

3030 
gl_vy
[0]=gl_vy[1]=
s
;

3033 
sS¥ôe_vy2
=
s
=
gl_vy
[0]+
•πH
;

3034 if(
s
) s--;

3035 if(
s
>255) s=255;

3036 
gl_vy
[2]=gl_vy[3]=
s
;

3038 
ulClutID
=(
gpuD©a
[2]>>16);

3040 
bDøwTextuªd
 = 
TRUE
;

3041 
bDøwSmoŸhShaded
 = 
FALSE
;

3042 
	`SëRídîSèã
(
gpuD©a
[0]);

3062 
	`SëRídîMode
(
gpuD©a
[0], 
TRUE
);

3063 
	`SëZMask4SP
();

3065 
sS¥ôe_ux2
=
gl_ux
[0]+
•πW
;

3066 
sS¥ôe_vy2
=
gl_vy
[0]+
•πH
;

3068 
	`assignTextuªS¥ôe
();

3070 if(
iFûãrTy≥
>4)

3071 
	`DøwMu…iFûãrS¥ôe
();

3073 
	`PRIMdøwTextuªdQuad
(&
vîãx
[0], &vertex[1], &vertex[2], &vertex[3]);

3075 if(
bDøwMu…iPass
)

3077 
	`SëSemiTønsMu…i
(1);

3078 
	`PRIMdøwTextuªdQuad
(&
vîãx
[0], &vertex[1], &vertex[2], &vertex[3]);

3081 if(
ubO∑queDøw
)

3083 
	`SëZMask4O
();

3084 if(
bU£Mu…iPass
Ë
	`SëO∑queCﬁ‹
(
gpuD©a
[0]);

3085 
DEFOPAQUEON


3097 
	`PRIMdøwTextuªdQuad
(&
vîãx
[0], &vertex[1], &vertex[2], &vertex[3]);

3098 
DEFOPAQUEOFF


3101 
iS¥ôeTex
=0;

3102 
iDøwnSomëhög
=1;

3103 
	}
}

3109 
	$¥imS¥tSRe°
(* 
ba£Addr
,
ty≥
)

3111 *
gpuD©a
 = ((*Ë
ba£Addr
);

3112 *
sgpuD©a
 = ((*Ë
ba£Addr
);

3113 
s
;
sTy≥Re°
=0;

3115 
•πX
 = 
sgpuD©a
[2];

3116 
•πY
 = 
sgpuD©a
[3];

3117 
•πW
 = 
sgpuD©a
[6] & 0x3ff;

3118 
•πH
 = 
sgpuD©a
[7] & 0x1ff;

3122 
ty≥
)

3125 
gl_vy
[0]=gl_vy[1]=
ba£Addr
[9];

3126 
s
=256-
ba£Addr
[8];

3127 
•πW
-=
s
;

3128 
•πX
+=
s
;

3129 
gl_ux
[0]=gl_ux[3]=0;

3132 
gl_ux
[0]=gl_ux[3]=
ba£Addr
[8];

3133 
s
=256-
ba£Addr
[9];

3134 
•πH
-=
s
;

3135 
•πY
+=
s
;

3136 
gl_vy
[0]=gl_vy[1]=0;

3139 
s
=256-
ba£Addr
[8];

3140 
•πW
-=
s
;

3141 
•πX
+=
s
;

3142 
gl_ux
[0]=gl_ux[3]=0;

3143 
s
=256-
ba£Addr
[9];

3144 
•πH
-=
s
;

3145 
•πY
+=
s
;

3146 
gl_vy
[0]=gl_vy[1]=0;

3150 
gl_vy
[0]=gl_vy[1]=
ba£Addr
[9];

3151 
s
=512-
ba£Addr
[8];

3152 
•πW
-=
s
;

3153 
•πX
+=
s
;

3154 
gl_ux
[0]=gl_ux[3]=0;

3157 
gl_ux
[0]=gl_ux[3]=
ba£Addr
[8];

3158 
s
=512-
ba£Addr
[9];

3159 
•πH
-=
s
;

3160 
•πY
+=
s
;

3161 
gl_vy
[0]=gl_vy[1]=0;

3164 
s
=512-
ba£Addr
[8];

3165 
•πW
-=
s
;

3166 
•πX
+=
s
;

3167 
gl_ux
[0]=gl_ux[3]=0;

3168 
s
=512-
ba£Addr
[9];

3169 
•πH
-=
s
;

3170 
•πY
+=
s
;

3171 
gl_vy
[0]=gl_vy[1]=0;

3176 if(
usMúr‹
 & 0x1000)

3178 
s
=
gl_ux
[0];

3179 
s
-=
•πW
-1;if(s<0) s=0;

3180 
gl_ux
[0]=gl_ux[3]=
s
;

3182 if(
usMúr‹
 & 0x2000)

3184 
s
=
gl_vy
[0];

3185 
s
-=
•πH
-1;if(s<0) {s=0;}

3186 
gl_vy
[0]=gl_vy[1]=
s
;

3189 
sS¥ôe_ux2
=
s
=
gl_ux
[0]+
•πW
;

3190 if(
s
>255) s=255;

3191 
gl_ux
[1]=gl_ux[2]=
s
;

3192 
sS¥ôe_vy2
=
s
=
gl_vy
[0]+
•πH
;

3193 if(
s
>255) s=255;

3194 
gl_vy
[2]=gl_vy[3]=
s
;

3196 if(!
bUsögTWö
)

3198 if(
sS¥ôe_ux2
>256)

3199 {
•πW
=256-
gl_ux
[0];
sS¥ôe_ux2
=256;
sTy≥Re°
+=1;}

3200 if(
sS¥ôe_vy2
>256)

3201 {
•πH
=256-
gl_vy
[0];
sS¥ôe_vy2
=256;
sTy≥Re°
+=2;}

3204 
lx0
 = 
•πX
;

3205 
ly0
 = 
•πY
;

3207 
	`off£tST
();

3209 
ulClutID
=(
gpuD©a
[2]>>16);

3211 
bDøwTextuªd
 = 
TRUE
;

3212 
bDøwSmoŸhShaded
 = 
FALSE
;

3213 
	`SëRídîSèã
(
gpuD©a
[0]);

3233 
	`SëRídîMode
(
gpuD©a
[0], 
TRUE
);

3234 
	`SëZMask4SP
();

3236 
sS¥ôe_ux2
=
gl_ux
[0]+
•πW
;

3237 
sS¥ôe_vy2
=
gl_vy
[0]+
•πH
;

3239 
	`assignTextuªS¥ôe
();

3241 if(
iFûãrTy≥
>4)

3242 
	`DøwMu…iFûãrS¥ôe
();

3244 
	`PRIMdøwTextuªdQuad
(&
vîãx
[0], &vertex[1], &vertex[2], &vertex[3]);

3246 if(
bDøwMu…iPass
)

3248 
	`SëSemiTønsMu…i
(1);

3249 
	`PRIMdøwTextuªdQuad
(&
vîãx
[0], &vertex[1], &vertex[2], &vertex[3]);

3252 if(
ubO∑queDøw
)

3254 
	`SëZMask4O
();

3255 if(
bU£Mu…iPass
Ë
	`SëO∑queCﬁ‹
(
gpuD©a
[0]);

3256 
DEFOPAQUEON


3268 
	`PRIMdøwTextuªdQuad
(&
vîãx
[0], &vertex[1], &vertex[2], &vertex[3]);

3269 
DEFOPAQUEOFF


3272 if(
sTy≥Re°
 && 
ty≥
<4)

3274 if(
sTy≥Re°
&1 && 
ty≥
==1Ë
	`¥imS¥tSRe°
(
ba£Addr
,4);

3275 if(
sTy≥Re°
&2 && 
ty≥
==2Ë
	`¥imS¥tSRe°
(
ba£Addr
,5);

3276 if(
sTy≥Re°
==3 && 
ty≥
==3Ë
	`¥imS¥tSRe°
(
ba£Addr
,6);

3278 
	}
}

3280 
	$¥imS¥tS
(* 
ba£Addr
)

3282 *
gpuD©a
 = ((*Ë
ba£Addr
);

3283 *
sgpuD©a
 = ((*Ë
ba£Addr
);

3285 
s
;
sTy≥Re°
=0;

3287 
•πX
 = 
sgpuD©a
[2];

3288 
•πY
 = 
sgpuD©a
[3];

3289 
•πW
 = 
sgpuD©a
[6] & 0x3ff;

3290 
•πH
 = 
sgpuD©a
[7] & 0x1ff;

3292 if(!
•πH
) ;

3293 if(!
•πW
) ;

3295 
iS¥ôeTex
=1;

3298 
gl_ux
[0]=gl_ux[3]=
ba£Addr
[8];

3299 
gl_vy
[0]=gl_vy[1]=
ba£Addr
[9];

3301 if(
usMúr‹
 & 0x1000)

3303 
s
=
gl_ux
[0];

3304 
s
-=
•πW
-1;

3305 if(
s
<0) {s=0;}

3306 
gl_ux
[0]=gl_ux[3]=
s
;

3308 if(
usMúr‹
 & 0x2000)

3310 
s
=
gl_vy
[0];

3311 
s
-=
•πH
-1;

3312 if(
s
<0) {s=0;}

3313 
gl_vy
[0]=gl_vy[1]=
s
;

3316 
sS¥ôe_ux2
=
s
=
gl_ux
[0]+
•πW
;

3317 if(
s
) s--;

3318 if(
s
>255) s=255;

3319 
gl_ux
[1]=gl_ux[2]=
s
;

3320 
sS¥ôe_vy2
=
s
=
gl_vy
[0]+
•πH
;

3321 if(
s
) s--;

3322 if(
s
>255) s=255;

3323 
gl_vy
[2]=gl_vy[3]=
s
;

3325 if(!
bUsögTWö
)

3327 if(
sS¥ôe_ux2
>256)

3328 {
•πW
=256-
gl_ux
[0];
sS¥ôe_ux2
=256;
sTy≥Re°
+=1;}

3329 if(
sS¥ôe_vy2
>256)

3330 {
•πH
=256-
gl_vy
[0];
sS¥ôe_vy2
=256;
sTy≥Re°
+=2;}

3333 
lx0
 = 
•πX
;

3334 
ly0
 = 
•πY
;

3336 
	`off£tST
();

3338 
ulClutID
=(
gpuD©a
[2]>>16);

3340 
bDøwTextuªd
 = 
TRUE
;

3341 
bDøwSmoŸhShaded
 = 
FALSE
;

3342 
	`SëRídîSèã
(
gpuD©a
[0]);

3362 
	`SëRídîMode
(
gpuD©a
[0], 
TRUE
);

3363 
	`SëZMask4SP
();

3365 if((
dwA˘Fixes
&1Ë&& 
gTexFømeName
 && 
gTexName
==gTexFrameName)

3366 {
iS¥ôeTex
=0;;}

3368 
sS¥ôe_ux2
=
gl_ux
[0]+
•πW
;

3369 
sS¥ôe_vy2
=
gl_vy
[0]+
•πH
;

3371 
	`assignTextuªS¥ôe
();

3373 if(
iFûãrTy≥
>4)

3374 
	`DøwMu…iFûãrS¥ôe
();

3376 
	`PRIMdøwTextuªdQuad
(&
vîãx
[0], &vertex[1], &vertex[2], &vertex[3]);

3378 if(
bDøwMu…iPass
)

3380 
	`SëSemiTønsMu…i
(1);

3381 
	`PRIMdøwTextuªdQuad
(&
vîãx
[0], &vertex[1], &vertex[2], &vertex[3]);

3384 if(
ubO∑queDøw
)

3386 
	`SëZMask4O
();

3387 if(
bU£Mu…iPass
Ë
	`SëO∑queCﬁ‹
(
gpuD©a
[0]);

3388 
DEFOPAQUEON


3400 
	`PRIMdøwTextuªdQuad
(&
vîãx
[0], &vertex[1], &vertex[2], &vertex[3]);

3401 
DEFOPAQUEOFF


3404 if(
sTy≥Re°
)

3406 if(
sTy≥Re°
&1Ë
	`¥imS¥tSRe°
(
ba£Addr
,1);

3407 if(
sTy≥Re°
&2Ë
	`¥imS¥tSRe°
(
ba£Addr
,2);

3408 if(
sTy≥Re°
==3Ë
	`¥imS¥tSRe°
(
ba£Addr
,3);

3411 
iS¥ôeTex
=0;

3412 
iDøwnSomëhög
=1;

3413 
	}
}

3419 
	$¥imPﬁyF4
(*
ba£Addr
)

3421 *
gpuD©a
 = ((*Ë
ba£Addr
);

3422 *
sgpuD©a
 = ((*Ë
ba£Addr
);

3424 
lx0
 = 
sgpuD©a
[2];

3425 
ly0
 = 
sgpuD©a
[3];

3426 
lx1
 = 
sgpuD©a
[4];

3427 
ly1
 = 
sgpuD©a
[5];

3428 
lx2
 = 
sgpuD©a
[6];

3429 
ly2
 = 
sgpuD©a
[7];

3430 
lx3
 = 
sgpuD©a
[8];

3431 
ly3
 = 
sgpuD©a
[9];

3433 if(
	`off£t4
()) ;

3435 
bDøwTextuªd
 = 
FALSE
;

3436 
bDøwSmoŸhShaded
 = 
FALSE
;

3437 
	`SëRídîSèã
(
gpuD©a
[0]);

3449 
	`SëRídîMode
(
gpuD©a
[0], 
FALSE
);

3450 
	`SëZMask4NT
();

3452 
vîãx
[0].
c
.
lcﬁ
=
gpuD©a
[0];vîãx[0].c.
cﬁ
[3]=
ubGloCﬁAÕha
;

3453 
	`SETCOL
(
vîãx
[0]);

3455 
	`PRIMdøwTri2
(&
vîãx
[0], &vertex[1], &vertex[2],&vertex[3]);

3457 
iDøwnSomëhög
=1;

3458 
	}
}

3464 
¥imPﬁyG4
(* 
ba£Addr
);

3466 
BOOL
 
	$bDøwOffs¸ìnFr⁄tFF9G4
()

3468 if(
lx0
< 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
Ë 
FALSE
;

3469 if(
lx0
> 
PSXDi•œy
.
Di•œyEnd
.
x
Ë 
FALSE
;

3470 if(
ly0
< 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
Ë 
FALSE
;

3471 if(
ly0
> 
PSXDi•œy
.
Di•œyEnd
.
y
Ë 
FALSE
;

3472 if(
lx1
< 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
Ë 
FALSE
;

3473 if(
lx1
> 
PSXDi•œy
.
Di•œyEnd
.
x
Ë 
FALSE
;

3474 if(
ly1
< 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
Ë 
FALSE
;

3475 if(
ly1
> 
PSXDi•œy
.
Di•œyEnd
.
y
Ë 
FALSE
;

3476 if(
lx2
< 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
Ë 
FALSE
;

3477 if(
lx2
> 
PSXDi•œy
.
Di•œyEnd
.
x
Ë 
FALSE
;

3478 if(
ly2
< 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
Ë 
FALSE
;

3479 if(
ly2
> 
PSXDi•œy
.
Di•œyEnd
.
y
Ë 
FALSE
;

3480 if(
lx3
< 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
Ë 
FALSE
;

3481 if(
lx3
> 
PSXDi•œy
.
Di•œyEnd
.
x
Ë 
FALSE
;

3482 if(
ly3
< 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
Ë 
FALSE
;

3483 if(
ly3
> 
PSXDi•œy
.
Di•œyEnd
.
y
Ë 
FALSE
;

3484  
TRUE
;

3485 
	}
}

3487 
BOOL
 
	$bCheckFF9G4
(* 
ba£Addr
)

3489 
pFF9G4Cache
[32];

3490 
iFF9Fix
=0;

3492 if(
ba£Addr
)

3494 if(
iFF9Fix
==0)

3496 if(
	`bDøwOffs¸ìnFr⁄tFF9G4
())

3498 *
sgpuD©a
 = ((*Ë
pFF9G4Cache
);

3499 
iFF9Fix
=2;

3500 
	`mem˝y
(
pFF9G4Cache
,
ba£Addr
,32);

3502 if(
sgpuD©a
[2]==142)

3504 
sgpuD©a
[2] +=65;

3505 
sgpuD©a
[10]+=65;

3507  
TRUE
;

3509 
iFF9Fix
=1;

3511  
FALSE
;

3514 if(
iFF9Fix
==2)

3516 
œbr
=
GlobÆTextABR
;

3517 
GlobÆTextABR
=1;

3518 
	`¥imPﬁyG4
(
pFF9G4Cache
);

3519 
GlobÆTextABR
=
œbr
;

3521 
iFF9Fix
=0;

3523  
FALSE
;

3524 
	}
}

3528 
	$¥imPﬁyG4
(* 
ba£Addr
)

3530 *
gpuD©a
 = (*)
ba£Addr
;

3531 *
sgpuD©a
 = ((*Ë
ba£Addr
);

3533 
lx0
 = 
sgpuD©a
[2];

3534 
ly0
 = 
sgpuD©a
[3];

3535 
lx1
 = 
sgpuD©a
[6];

3536 
ly1
 = 
sgpuD©a
[7];

3537 
lx2
 = 
sgpuD©a
[10];

3538 
ly2
 = 
sgpuD©a
[11];

3539 
lx3
 = 
sgpuD©a
[14];

3540 
ly3
 = 
sgpuD©a
[15];

3542 if(
	`off£t4
()) ;

3544 
bDøwTextuªd
 = 
FALSE
;

3545 
bDøwSmoŸhShaded
 = 
TRUE
;

3546 
	`SëRídîSèã
(
gpuD©a
[0]);

3561 
	`SëRídîMode
(
gpuD©a
[0], 
FALSE
);

3562 
	`SëZMask4NT
();

3564 
vîãx
[0].
c
.
lcﬁ
=
gpuD©a
[0];

3565 
vîãx
[1].
c
.
lcﬁ
=
gpuD©a
[2];

3566 
vîãx
[2].
c
.
lcﬁ
=
gpuD©a
[4];

3567 
vîãx
[3].
c
.
lcﬁ
=
gpuD©a
[6];

3569 
vîãx
[0].
c
.
cﬁ
[3]=vîãx[1].c.cﬁ[3]=vîãx[2].c.cﬁ[3]=vîãx[3].c.cﬁ[3]=
ubGloAÕha
;

3572 
	`PRIMdøwGouøudTri2Cﬁ‹
(&
vîãx
[0],&vertex[1], &vertex[2], &vertex[3]);

3574 
iDøwnSomëhög
=1;

3575 
	}
}

3581 
BOOL
 
	$DoLöeCheck
(* 
gpuD©a
)

3583 
BOOL
 
bQuad
=
FALSE
;
dx
,
dy
;

3585 if(
lx0
==
lx1
)

3587 
dx
=
lx0
-
lx2
;if(dx<0) dx=-dx;

3589 if(
ly1
==
ly2
)

3591 
dy
=
ly1
-
ly0
;if(dy<0) dy=-dy;

3592 if(
dx
<=1)

3594 
vîãx
[3]=vertex[2];

3595 
vîãx
[2]=vertex[0];

3596 
vîãx
[2].
x
=vertex[3].x;

3599 if(
dy
<=1)

3601 
vîãx
[3]=vertex[2];

3602 
vîãx
[2].
y
=vertex[0].y;

3604  
FALSE
;

3606 
bQuad
=
TRUE
;

3609 if(
ly0
==
ly2
)

3611 
dy
=
ly0
-
ly1
;if(dy<0) dy=-dy;

3612 if(
dx
<=1)

3614 
vîãx
[3]=vertex[1];

3615 
vîãx
[3].
x
=vertex[2].x;

3618 if(
dy
<=1)

3620 
vîãx
[3]=vertex[2];

3621 
vîãx
[3].
y
=vertex[1].y;

3623  
FALSE
;

3625 
bQuad
=
TRUE
;

3629 if(
lx0
==
lx2
)

3631 
dx
=
lx0
-
lx1
;if(dx<0) dx=-dx;

3633 if(
ly2
==
ly1
)

3635 
dy
=
ly2
-
ly0
;if(dy<0) dy=-dy;

3636 if(
dx
<=1)

3638 
vîãx
[3]=vertex[1];

3639 
vîãx
[1]=vertex[0];

3640 
vîãx
[1].
x
=vertex[3].x;

3643 if(
dy
<=1)

3645 
vîãx
[3]=vertex[1];

3646 
vîãx
[1].
y
=vertex[0].y;

3648  
FALSE
;

3650 
bQuad
=
TRUE
;

3653 if(
ly0
==
ly1
)

3655 
dy
=
ly2
-
ly0
;if(dy<0) dy=-dy;

3656 if(
dx
<=1)

3658 
vîãx
[3]=vertex[2];

3659 
vîãx
[3].
x
=vertex[1].x;

3662 if(
dy
<=1)

3664 
vîãx
[3]=vertex[1];

3665 
vîãx
[3].
y
=vertex[2].y;

3667  
FALSE
;

3669 
bQuad
=
TRUE
;

3673 if(
lx1
==
lx2
)

3675 
dx
=
lx1
-
lx0
;if(dx<0) dx=-dx;

3677 if(
ly1
==
ly0
)

3679 
dy
=
ly1
-
ly2
;if(dy<0) dy=-dy;

3681 if(
dx
<=1)

3683 
vîãx
[3]=vertex[2];

3684 
vîãx
[2].
x
=vertex[0].x;

3687 if(
dy
<=1)

3689 
vîãx
[3]=vertex[2];

3690 
vîãx
[2]=vertex[0];

3691 
vîãx
[2].
y
=vertex[3].y;

3693  
FALSE
;

3695 
bQuad
=
TRUE
;

3698 if(
ly2
==
ly0
)

3700 
dy
=
ly2
-
ly1
;if(dy<0) dy=-dy;

3702 if(
dx
<=1)

3704 
vîãx
[3]=vertex[1];

3705 
vîãx
[1].
x
=vertex[0].x;

3708 if(
dy
<=1)

3710 
vîãx
[3]=vertex[1];

3711 
vîãx
[1]=vertex[0];

3712 
vîãx
[1].
y
=vertex[3].y;

3714  
FALSE
;

3716 
bQuad
=
TRUE
;

3720 if(!
bQuad
Ë 
FALSE
;

3722 
	`PRIMdøwTextuªdQuad
(&
vîãx
[0], &vertex[1], &vertex[3], &vertex[2]);

3724 if(
bDøwMu…iPass
)

3726 
	`SëSemiTønsMu…i
(1);

3727 
	`PRIMdøwTextuªdQuad
(&
vîãx
[0], &vertex[1], &vertex[3], &vertex[2]);

3730 if(
ubO∑queDøw
)

3732 
	`SëZMask4O
();

3733 if(
bU£Mu…iPass
Ë
	`SëO∑queCﬁ‹
(
gpuD©a
[0]);

3734 
DEFOPAQUEON


3735 
	`PRIMdøwTextuªdQuad
(&
vîãx
[0], &vertex[1], &vertex[3], &vertex[2]);

3736 
DEFOPAQUEOFF


3739 
iDøwnSomëhög
=1;

3741  
TRUE
;

3742 
	}
}

3746 
	$¥imPﬁyFT3
(* 
ba£Addr
)

3748 *
gpuD©a
 = ((*Ë
ba£Addr
);

3749 *
sgpuD©a
 = ((*Ë
ba£Addr
);

3751 
lx0
 = 
sgpuD©a
[2];

3752 
ly0
 = 
sgpuD©a
[3];

3753 
lx1
 = 
sgpuD©a
[6];

3754 
ly1
 = 
sgpuD©a
[7];

3755 
lx2
 = 
sgpuD©a
[10];

3756 
ly2
 = 
sgpuD©a
[11];

3758 if(
	`off£t3
()) ;

3761 
gl_ux
[0]=gl_ux[3]=
ba£Addr
[8];

3762 
gl_vy
[0]=gl_vy[3]=
ba£Addr
[9];

3763 
gl_ux
[1]=
ba£Addr
[16];

3764 
gl_vy
[1]=
ba£Addr
[17];

3765 
gl_ux
[2]=
ba£Addr
[24];

3766 
gl_vy
[2]=
ba£Addr
[25];

3768 
	`Upd©eGlobÆTP
(()(
gpuD©a
[4]>>16));

3769 
ulClutID
=
gpuD©a
[2]>>16;

3771 
bDøwTextuªd
 = 
TRUE
;

3772 
bDøwSmoŸhShaded
 = 
FALSE
;

3773 
	`SëRídîSèã
(
gpuD©a
[0]);

3786 
	`SëRídîMode
(
gpuD©a
[0], 
TRUE
);

3787 
	`SëZMask3
();

3789 
	`assignTextuª3
();

3791 if(!(
dwA˘Fixes
&0x10))

3793 if(
	`DoLöeCheck
(
gpuD©a
)) ;

3796 
	`PRIMdøwTextuªdTri
(&
vîãx
[0], &vertex[1], &vertex[2]);

3798 if(
bDøwMu…iPass
)

3800 
	`SëSemiTønsMu…i
(1);

3801 
	`PRIMdøwTextuªdTri
(&
vîãx
[0], &vertex[1], &vertex[2]);

3804 if(
ubO∑queDøw
)

3806 
	`SëZMask3O
();

3807 if(
bU£Mu…iPass
Ë
	`SëO∑queCﬁ‹
(
gpuD©a
[0]);

3808 
DEFOPAQUEON


3809 
	`PRIMdøwTextuªdTri
(&
vîãx
[0], &vertex[1], &vertex[2]);

3810 
DEFOPAQUEOFF


3813 
iDøwnSomëhög
=1;

3814 
	}
}

3820 
	#ST_FAC
 255.99f

	)

3822 
	$Re˘TexAlign
()

3824 
UFlù≥d
 = 
FALSE
;

3825 
VFlù≥d
 = 
FALSE
;

3827 if(
gTexName
==
gTexFømeName
) ;

3829 if(
ly0
==
ly1
)

3831 if(!((
lx1
==
lx3
 && 
ly3
==
ly2
 && 
lx2
==
lx0
) ||

3832 (
lx1
==
lx2
 && 
ly2
==
ly3
 && 
lx3
==
lx0
)))

3835 if(
ly0
<
ly2
)

3837 i‡(
vîãx
[0].
tow
 > vertex[2].tow)

3838 
VFlù≥d
 = 1;

3842 i‡(
vîãx
[0].
tow
 < vertex[2].tow)

3843 
VFlù≥d
 = 2;

3847 if(
ly0
==
ly2
)

3849 if(!((
lx2
==
lx3
 && 
ly3
==
ly1
 && 
lx1
==
lx0
) ||

3850 (
lx2
==
lx1
 && 
ly1
==
ly3
 && 
lx3
==
lx0
)))

3853 if(
ly0
<
ly1
)

3855 i‡(
vîãx
[0].
tow
 > vertex[1].tow)

3856 
VFlù≥d
 = 3;

3860 i‡(
vîãx
[0].
tow
 < vertex[1].tow)

3861 
VFlù≥d
 = 4;

3865 if(
ly0
==
ly3
)

3867 if(!((
lx3
==
lx2
 && 
ly2
==
ly1
 && 
lx1
==
lx0
) ||

3868 (
lx3
==
lx1
 && 
ly1
==
ly2
 && 
lx2
==
lx0
)))

3871 if(
ly0
<
ly1
)

3873 i‡(
vîãx
[0].
tow
 > vertex[1].tow)

3874 
VFlù≥d
 = 5;

3878 i‡(
vîãx
[0].
tow
 < vertex[1].tow)

3879 
VFlù≥d
 = 6;

3884 if(
lx0
==
lx1
)

3886 if(
lx0
<
lx2
)

3888 i‡(
vîãx
[0].
sow
 > vertex[2].sow)

3889 
UFlù≥d
 = 1;

3893 i‡(
vîãx
[0].
sow
 < vertex[2].sow)

3894 
UFlù≥d
 = 2;

3898 if(
lx0
==
lx2
)

3900 if(
lx0
<
lx1
)

3902 i‡(
vîãx
[0].
sow
 > vertex[1].sow)

3903 
UFlù≥d
 = 3;

3907 i‡(
vîãx
[0].
sow
 < vertex[1].sow)

3908 
UFlù≥d
 = 4;

3912 if(
lx0
==
lx3
)

3914 if(
lx0
<
lx1
)

3916 i‡(
vîãx
[0].
sow
 > vertex[1].sow)

3917 
UFlù≥d
 = 5;

3921 i‡(
vîãx
[0].
sow
 < vertex[1].sow)

3922 
UFlù≥d
 = 6;

3926 i‡(
UFlù≥d
)

3928 #ifde‡
OWNSCALE


3929 if(
bUsögTWö
)

3931 
UFlù≥d
)

3934 
vîãx
[2].
sow
+=0.95f/
TWö
.
USˇÀFa˘‹
;

3935 
vîãx
[3].
sow
+=0.95f/
TWö
.
USˇÀFa˘‹
;

3938 
vîãx
[0].
sow
+=0.95f/
TWö
.
USˇÀFa˘‹
;

3939 
vîãx
[1].
sow
+=0.95f/
TWö
.
USˇÀFa˘‹
;

3942 
vîãx
[1].
sow
+=0.95f/
TWö
.
USˇÀFa˘‹
;

3943 
vîãx
[3].
sow
+=0.95f/
TWö
.
USˇÀFa˘‹
;

3946 
vîãx
[0].
sow
+=0.95f/
TWö
.
USˇÀFa˘‹
;

3947 
vîãx
[2].
sow
+=0.95f/
TWö
.
USˇÀFa˘‹
;

3950 
vîãx
[1].
sow
+=0.95f/
TWö
.
USˇÀFa˘‹
;

3951 
vîãx
[2].
sow
+=0.95f/
TWö
.
USˇÀFa˘‹
;

3954 
vîãx
[0].
sow
+=0.95f/
TWö
.
USˇÀFa˘‹
;

3955 
vîãx
[3].
sow
+=0.95f/
TWö
.
USˇÀFa˘‹
;

3961 
UFlù≥d
)

3964 
vîãx
[2].
sow
+=1.0f/
ST_FAC
;

3965 
vîãx
[3].
sow
+=1.0f/
ST_FAC
;

3968 
vîãx
[0].
sow
+=1.0f/
ST_FAC
;

3969 
vîãx
[1].
sow
+=1.0f/
ST_FAC
;

3972 
vîãx
[1].
sow
+=1.0f/
ST_FAC
;

3973 
vîãx
[3].
sow
+=1.0f/
ST_FAC
;

3976 
vîãx
[0].
sow
+=1.0f/
ST_FAC
;

3977 
vîãx
[2].
sow
+=1.0f/
ST_FAC
;

3980 
vîãx
[1].
sow
+=1.0f/
ST_FAC
;

3981 
vîãx
[2].
sow
+=1.0f/
ST_FAC
;

3984 
vîãx
[0].
sow
+=1.0f/
ST_FAC
;

3985 
vîãx
[3].
sow
+=1.0f/
ST_FAC
;

3990 if(
bUsögTWö
)

3992 
UFlù≥d
)

3995 
vîãx
[2].
sow
+=1.0f/
TWö
.
USˇÀFa˘‹
;

3996 
vîãx
[3].
sow
+=1.0f/
TWö
.
USˇÀFa˘‹
;

3999 
vîãx
[0].
sow
+=1.0f/
TWö
.
USˇÀFa˘‹
;

4000 
vîãx
[1].
sow
+=1.0f/
TWö
.
USˇÀFa˘‹
;

4003 
vîãx
[1].
sow
+=1.0f/
TWö
.
USˇÀFa˘‹
;

4004 
vîãx
[3].
sow
+=1.0f/
TWö
.
USˇÀFa˘‹
;

4007 
vîãx
[0].
sow
+=1.0f/
TWö
.
USˇÀFa˘‹
;

4008 
vîãx
[2].
sow
+=1.0f/
TWö
.
USˇÀFa˘‹
;

4011 
vîãx
[1].
sow
+=1.0f/
TWö
.
USˇÀFa˘‹
;

4012 
vîãx
[2].
sow
+=1.0f/
TWö
.
USˇÀFa˘‹
;

4015 
vîãx
[0].
sow
+=1.0f/
TWö
.
USˇÀFa˘‹
;

4016 
vîãx
[3].
sow
+=1.0f/
TWö
.
USˇÀFa˘‹
;

4022 
UFlù≥d
)

4025 
vîãx
[2].
sow
+=1.0f;

4026 
vîãx
[3].
sow
+=1.0f;

4029 
vîãx
[0].
sow
+=1.0f;

4030 
vîãx
[1].
sow
+=1.0f;

4033 
vîãx
[1].
sow
+=1.0f;

4034 
vîãx
[3].
sow
+=1.0f;

4037 
vîãx
[0].
sow
+=1.0f;

4038 
vîãx
[2].
sow
+=1.0f;

4041 
vîãx
[1].
sow
+=1.0f;

4042 
vîãx
[2].
sow
+=1.0f;

4045 
vîãx
[0].
sow
+=1.0f;

4046 
vîãx
[3].
sow
+=1.0f;

4053 i‡(
VFlù≥d
)

4055 #ifde‡
OWNSCALE


4056 if(
bUsögTWö
)

4058 
VFlù≥d
)

4061 
vîãx
[2].
tow
+=0.95f/
TWö
.
VSˇÀFa˘‹
;

4062 
vîãx
[3].
tow
+=0.95f/
TWö
.
VSˇÀFa˘‹
;

4065 
vîãx
[0].
tow
+=0.95f/
TWö
.
VSˇÀFa˘‹
;

4066 
vîãx
[1].
tow
+=0.95f/
TWö
.
VSˇÀFa˘‹
;

4069 
vîãx
[1].
tow
+=0.95f/
TWö
.
VSˇÀFa˘‹
;

4070 
vîãx
[3].
tow
+=0.95f/
TWö
.
VSˇÀFa˘‹
;

4073 
vîãx
[0].
tow
+=0.95f/
TWö
.
VSˇÀFa˘‹
;

4074 
vîãx
[2].
tow
+=0.95f/
TWö
.
VSˇÀFa˘‹
;

4077 
vîãx
[1].
tow
+=0.95f/
TWö
.
VSˇÀFa˘‹
;

4078 
vîãx
[2].
tow
+=0.95f/
TWö
.
VSˇÀFa˘‹
;

4081 
vîãx
[0].
tow
+=0.95f/
TWö
.
VSˇÀFa˘‹
;

4082 
vîãx
[3].
tow
+=0.95f/
TWö
.
VSˇÀFa˘‹
;

4088 
VFlù≥d
)

4091 
vîãx
[2].
tow
+=1.0f/
ST_FAC
;

4092 
vîãx
[3].
tow
+=1.0f/
ST_FAC
;

4095 
vîãx
[0].
tow
+=1.0f/
ST_FAC
;

4096 
vîãx
[1].
tow
+=1.0f/
ST_FAC
;

4099 
vîãx
[1].
tow
+=1.0f/
ST_FAC
;

4100 
vîãx
[3].
tow
+=1.0f/
ST_FAC
;

4103 
vîãx
[0].
tow
+=1.0f/
ST_FAC
;

4104 
vîãx
[2].
tow
+=1.0f/
ST_FAC
;

4107 
vîãx
[1].
tow
+=1.0f/
ST_FAC
;

4108 
vîãx
[2].
tow
+=1.0f/
ST_FAC
;

4111 
vîãx
[0].
tow
+=1.0f/
ST_FAC
;

4112 
vîãx
[3].
tow
+=1.0f/
ST_FAC
;

4117 if(
bUsögTWö
)

4119 
VFlù≥d
)

4122 
vîãx
[2].
tow
+=1.0f/
TWö
.
VSˇÀFa˘‹
;

4123 
vîãx
[3].
tow
+=1.0f/
TWö
.
VSˇÀFa˘‹
;

4126 
vîãx
[0].
tow
+=1.0f/
TWö
.
VSˇÀFa˘‹
;

4127 
vîãx
[1].
tow
+=1.0f/
TWö
.
VSˇÀFa˘‹
;

4130 
vîãx
[1].
tow
+=1.0f/
TWö
.
VSˇÀFa˘‹
;

4131 
vîãx
[3].
tow
+=1.0f/
TWö
.
VSˇÀFa˘‹
;

4134 
vîãx
[0].
tow
+=1.0f/
TWö
.
VSˇÀFa˘‹
;

4135 
vîãx
[2].
tow
+=1.0f/
TWö
.
VSˇÀFa˘‹
;

4138 
vîãx
[1].
tow
+=1.0f/
TWö
.
VSˇÀFa˘‹
;

4139 
vîãx
[2].
tow
+=1.0f/
TWö
.
VSˇÀFa˘‹
;

4142 
vîãx
[0].
tow
+=1.0f/
TWö
.
VSˇÀFa˘‹
;

4143 
vîãx
[3].
tow
+=1.0f/
TWö
.
VSˇÀFa˘‹
;

4149 
VFlù≥d
)

4152 
vîãx
[2].
tow
+=1.0f;

4153 
vîãx
[3].
tow
+=1.0f;

4156 
vîãx
[0].
tow
+=1.0f;

4157 
vîãx
[1].
tow
+=1.0f;

4160 
vîãx
[1].
tow
+=1.0f;

4161 
vîãx
[3].
tow
+=1.0f;

4164 
vîãx
[0].
tow
+=1.0f;

4165 
vîãx
[2].
tow
+=1.0f;

4168 
vîãx
[1].
tow
+=1.0f;

4169 
vîãx
[2].
tow
+=1.0f;

4172 
vîãx
[0].
tow
+=1.0f;

4173 
vîãx
[3].
tow
+=1.0f;

4180 
	}
}

4182 
	$¥imPﬁyFT4
(* 
ba£Addr
)

4184 *
gpuD©a
 = ((*Ë
ba£Addr
);

4185 *
sgpuD©a
 = ((*Ë
ba£Addr
);

4187 
lx0
 = 
sgpuD©a
[2];

4188 
ly0
 = 
sgpuD©a
[3];

4189 
lx1
 = 
sgpuD©a
[6];

4190 
ly1
 = 
sgpuD©a
[7];

4191 
lx2
 = 
sgpuD©a
[10];

4192 
ly2
 = 
sgpuD©a
[11];

4193 
lx3
 = 
sgpuD©a
[14];

4194 
ly3
 = 
sgpuD©a
[15];

4196 if(
	`off£t4
()) ;

4198 
gl_vy
[0]=
ba£Addr
[9];

4199 
gl_vy
[1]=
ba£Addr
[17];

4200 
gl_vy
[2]=
ba£Addr
[25];

4201 
gl_vy
[3]=
ba£Addr
[33];

4203 
gl_ux
[0]=
ba£Addr
[8];

4204 
gl_ux
[1]=
ba£Addr
[16];

4205 
gl_ux
[2]=
ba£Addr
[24];

4206 
gl_ux
[3]=
ba£Addr
[32];

4208 
	`Upd©eGlobÆTP
(()(
gpuD©a
[4]>>16));

4209 
ulClutID
=(
gpuD©a
[2]>>16);

4211 
bDøwTextuªd
 = 
TRUE
;

4212 
bDøwSmoŸhShaded
 = 
FALSE
;

4213 
	`SëRídîSèã
(
gpuD©a
[0]);

4226 
	`SëRídîMode
(
gpuD©a
[0], 
TRUE
);

4228 
	`SëZMask4
();

4230 
	`assignTextuª4
();

4232 
	`Re˘TexAlign
();

4234 
	`PRIMdøwTextuªdQuad
(&
vîãx
[0], &vertex[1], &vertex[3], &vertex[2]);

4236 if(
bDøwMu…iPass
)

4238 
	`SëSemiTønsMu…i
(1);

4239 
	`PRIMdøwTextuªdQuad
(&
vîãx
[0], &vertex[1], &vertex[3], &vertex[2]);

4242 if(
ubO∑queDøw
)

4244 
	`SëZMask4O
();

4245 if(
bU£Mu…iPass
Ë
	`SëO∑queCﬁ‹
(
gpuD©a
[0]);

4246 
DEFOPAQUEON


4259 
	`PRIMdøwTextuªdQuad
(&
vîãx
[0], &vertex[1], &vertex[3], &vertex[2]);

4260 
DEFOPAQUEOFF


4263 
iDøwnSomëhög
=1;

4264 
	}
}

4270 
	$¥imPﬁyGT3
(*
ba£Addr
)

4272 *
gpuD©a
 = ((*Ë
ba£Addr
);

4273 *
sgpuD©a
 = ((*Ë
ba£Addr
);

4275 
lx0
 = 
sgpuD©a
[2];

4276 
ly0
 = 
sgpuD©a
[3];

4277 
lx1
 = 
sgpuD©a
[8];

4278 
ly1
 = 
sgpuD©a
[9];

4279 
lx2
 = 
sgpuD©a
[14];

4280 
ly2
 = 
sgpuD©a
[15];

4282 if(
	`off£t3
()) ;

4285 
gl_ux
[0]=gl_ux[3]=
ba£Addr
[8];

4286 
gl_vy
[0]=gl_vy[3]=
ba£Addr
[9];

4287 
gl_ux
[1]=
ba£Addr
[20];

4288 
gl_vy
[1]=
ba£Addr
[21];

4289 
gl_ux
[2]=
ba£Addr
[32];

4290 
gl_vy
[2]=
ba£Addr
[33];

4292 
	`Upd©eGlobÆTP
(()(
gpuD©a
[5]>>16));

4293 
ulClutID
=(
gpuD©a
[2]>>16);

4295 
bDøwTextuªd
 = 
TRUE
;

4296 
bDøwSmoŸhShaded
 = 
TRUE
;

4297 
	`SëRídîSèã
(
gpuD©a
[0]);

4309 
	`SëRídîMode
(
gpuD©a
[0], 
FALSE
);

4310 
	`SëZMask3
();

4312 
	`assignTextuª3
();

4314 if(
bDøwN⁄Shaded
)

4319  
vîãx
[0].
c
.
lcﬁ
=0xffffff;

4320 
vîãx
[0].
c
.
cﬁ
[3]=
ubGloAÕha
;

4321 
	`SETCOL
(
vîãx
[0]);

4323 
	`PRIMdøwTextuªdTri
(&
vîãx
[0], &vertex[1], &vertex[2]);

4325 if(
ubO∑queDøw
)

4327 
	`SëZMask3O
();

4328 
DEFOPAQUEON


4329 
	`PRIMdøwTextuªdTri
(&
vîãx
[0], &vertex[1], &vertex[2]);

4330 
DEFOPAQUEOFF


4337  
vîãx
[0].
c
.
lcﬁ
=
	`DoubÀBGR2RGB
(
gpuD©a
[0]);

4338 
vîãx
[1].
c
.
lcﬁ
=
	`DoubÀBGR2RGB
(
gpuD©a
[3]);

4339 
vîãx
[2].
c
.
lcﬁ
=
	`DoubÀBGR2RGB
(
gpuD©a
[6]);

4347 
vîãx
[0].
c
.
cﬁ
[3]=vîãx[1].c.cﬁ[3]=vîãx[2].c.cﬁ[3]=
ubGloAÕha
;

4349 
	`PRIMdøwTexGouøudTriCﬁ‹
(&
vîãx
[0], &vertex[1], &vertex[2]);

4351 if(
bDøwMu…iPass
)

4353 
	`SëSemiTønsMu…i
(1);

4354 
	`PRIMdøwTexGouøudTriCﬁ‹
(&
vîãx
[0], &vertex[1], &vertex[2]);

4357 if(
ubO∑queDøw
)

4359 
	`SëZMask3O
();

4360 if(
bU£Mu…iPass
)

4362 
vîãx
[0].
c
.
lcﬁ
=
	`DoubÀBGR2RGB
(
gpuD©a
[0]);

4363 
vîãx
[1].
c
.
lcﬁ
=
	`DoubÀBGR2RGB
(
gpuD©a
[3]);

4364 
vîãx
[2].
c
.
lcﬁ
=
	`DoubÀBGR2RGB
(
gpuD©a
[6]);

4365 
vîãx
[0].
c
.
cﬁ
[3]=vîãx[1].c.cﬁ[3]=vîãx[2].c.cﬁ[3]=
ubGloAÕha
;

4367 
DEFOPAQUEON


4368 
	`PRIMdøwTexGouøudTriCﬁ‹
(&
vîãx
[0], &vertex[1], &vertex[2]);

4369 
DEFOPAQUEOFF


4372 
iDøwnSomëhög
=1;

4373 
	}
}

4379 
	$¥imPﬁyG3
(*
ba£Addr
)

4381 *
gpuD©a
 = ((*Ë
ba£Addr
);

4382 *
sgpuD©a
 = ((*Ë
ba£Addr
);

4384 
lx0
 = 
sgpuD©a
[2];

4385 
ly0
 = 
sgpuD©a
[3];

4386 
lx1
 = 
sgpuD©a
[6];

4387 
ly1
 = 
sgpuD©a
[7];

4388 
lx2
 = 
sgpuD©a
[10];

4389 
ly2
 = 
sgpuD©a
[11];

4391 if(
	`off£t3
()) ;

4393 
bDøwTextuªd
 = 
FALSE
;

4394 
bDøwSmoŸhShaded
 = 
TRUE
;

4395 
	`SëRídîSèã
(
gpuD©a
[0]);

4407 
	`SëRídîMode
(
gpuD©a
[0], 
FALSE
);

4408 
	`SëZMask3NT
();

4410 
vîãx
[0].
c
.
lcﬁ
=
gpuD©a
[0];

4411 
vîãx
[1].
c
.
lcﬁ
=
gpuD©a
[2];

4412 
vîãx
[2].
c
.
lcﬁ
=
gpuD©a
[4];

4413 
vîãx
[0].
c
.
cﬁ
[3]=vîãx[1].c.cﬁ[3]=vîãx[2].c.cﬁ[3]=
ubGloCﬁAÕha
;

4415 
	`PRIMdøwGouøudTriCﬁ‹
(&
vîãx
[0], &vertex[1], &vertex[2]);

4417 
iDøwnSomëhög
=1;

4418 
	}
}

4424 
	$¥imPﬁyGT4
(*
ba£Addr
)

4426 *
gpuD©a
 = ((*Ë
ba£Addr
);

4427 *
sgpuD©a
 = ((*Ë
ba£Addr
);

4429 
lx0
 = 
sgpuD©a
[2];

4430 
ly0
 = 
sgpuD©a
[3];

4431 
lx1
 = 
sgpuD©a
[8];

4432 
ly1
 = 
sgpuD©a
[9];

4433 
lx2
 = 
sgpuD©a
[14];

4434 
ly2
 = 
sgpuD©a
[15];

4435 
lx3
 = 
sgpuD©a
[20];

4436 
ly3
 = 
sgpuD©a
[21];

4438 if(
	`off£t4
()) ;

4441 
gl_ux
[0]=
ba£Addr
[8];

4442 
gl_vy
[0]=
ba£Addr
[9];

4443 
gl_ux
[1]=
ba£Addr
[20];

4444 
gl_vy
[1]=
ba£Addr
[21];

4445 
gl_ux
[2]=
ba£Addr
[32];

4446 
gl_vy
[2]=
ba£Addr
[33];

4447 
gl_ux
[3]=
ba£Addr
[44];

4448 
gl_vy
[3]=
ba£Addr
[45];

4450 
	`Upd©eGlobÆTP
(()(
gpuD©a
[5]>>16));

4451 
ulClutID
=(
gpuD©a
[2]>>16);

4453 
bDøwTextuªd
 = 
TRUE
;

4454 
bDøwSmoŸhShaded
 = 
TRUE
;

4455 
	`SëRídîSèã
(
gpuD©a
[0]);

4467 
	`SëRídîMode
(
gpuD©a
[0], 
FALSE
);

4468 
	`SëZMask4
();

4470 
	`assignTextuª4
();

4472 
	`Re˘TexAlign
();

4474 if(
bDøwN⁄Shaded
)

4478  
vîãx
[0].
c
.
lcﬁ
=0xffffff;

4479 
vîãx
[0].
c
.
cﬁ
[3]=
ubGloAÕha
;

4480 
	`SETCOL
(
vîãx
[0]);

4482 
	`PRIMdøwTextuªdQuad
(&
vîãx
[0], &vertex[1], &vertex[3], &vertex[2]);

4484 if(
ubO∑queDøw
)

4486 
	`SëZMask4O
();

4487 
ubGloAÕha
=
ubGloCﬁAÕha
=0xff;

4488 
DEFOPAQUEON


4489 
	`PRIMdøwTextuªdQuad
(&
vîãx
[0], &vertex[1], &vertex[3], &vertex[2]);

4490 
DEFOPAQUEOFF


4497 
vîãx
[0].
c
.
lcﬁ
=
	`DoubÀBGR2RGB
(
gpuD©a
[0]);

4498 
vîãx
[1].
c
.
lcﬁ
=
	`DoubÀBGR2RGB
(
gpuD©a
[3]);

4499 
vîãx
[2].
c
.
lcﬁ
=
	`DoubÀBGR2RGB
(
gpuD©a
[6]);

4500 
vîãx
[3].
c
.
lcﬁ
=
	`DoubÀBGR2RGB
(
gpuD©a
[9]);

4510 
vîãx
[0].
c
.
cﬁ
[3]=vîãx[1].c.cﬁ[3]=vîãx[2].c.cﬁ[3]=vîãx[3].c.cﬁ[3]=
ubGloAÕha
;

4512 
	`PRIMdøwTexGouøudTriCﬁ‹Quad
(&
vîãx
[0], &vertex[1], &vertex[3],&vertex[2]);

4514 if(
bDøwMu…iPass
)

4516 
	`SëSemiTønsMu…i
(1);

4517 
	`PRIMdøwTexGouøudTriCﬁ‹Quad
(&
vîãx
[0], &vertex[1], &vertex[3],&vertex[2]);

4520 if(
ubO∑queDøw
)

4522 
	`SëZMask4O
();

4523 if(
bU£Mu…iPass
)

4525 
vîãx
[0].
c
.
lcﬁ
=
	`DoubÀBGR2RGB
(
gpuD©a
[0]);

4526 
vîãx
[1].
c
.
lcﬁ
=
	`DoubÀBGR2RGB
(
gpuD©a
[3]);

4527 
vîãx
[2].
c
.
lcﬁ
=
	`DoubÀBGR2RGB
(
gpuD©a
[6]);

4528 
vîãx
[3].
c
.
lcﬁ
=
	`DoubÀBGR2RGB
(
gpuD©a
[9]);

4529 
vîãx
[0].
c
.
cﬁ
[3]=vîãx[1].c.cﬁ[3]=vîãx[2].c.cﬁ[3]=vîãx[3].c.cﬁ[3]=
ubGloAÕha
;

4531 
ubGloAÕha
=
ubGloCﬁAÕha
=0xff;

4532 
DEFOPAQUEON


4533 
	`PRIMdøwTexGouøudTriCﬁ‹Quad
(&
vîãx
[0], &vertex[1], &vertex[3],&vertex[2]);

4534 
DEFOPAQUEOFF


4537 
iDøwnSomëhög
=1;

4538 
	}
}

4544 
	$¥imPﬁyF3
(*
ba£Addr
)

4546 *
gpuD©a
 = ((*Ë
ba£Addr
);

4547 *
sgpuD©a
 = ((*Ë
ba£Addr
);

4549 
lx0
 = 
sgpuD©a
[2];

4550 
ly0
 = 
sgpuD©a
[3];

4551 
lx1
 = 
sgpuD©a
[4];

4552 
ly1
 = 
sgpuD©a
[5];

4553 
lx2
 = 
sgpuD©a
[6];

4554 
ly2
 = 
sgpuD©a
[7];

4556 if(
	`off£t3
()) ;

4558 
bDøwTextuªd
 = 
FALSE
;

4559 
bDøwSmoŸhShaded
 = 
FALSE
;

4560 
	`SëRídîSèã
(
gpuD©a
[0]);

4572 
	`SëRídîMode
(
gpuD©a
[0], 
FALSE
);

4573 
	`SëZMask3NT
();

4575 
vîãx
[0].
c
.
lcﬁ
=
gpuD©a
[0];

4576 
vîãx
[0].
c
.
cﬁ
[3]=
ubGloCﬁAÕha
;

4577 
	`SETCOL
(
vîãx
[0]);

4579 
	`PRIMdøwTri
(&
vîãx
[0], &vertex[1], &vertex[2]);

4581 
iDøwnSomëhög
=1;

4582 
	}
}

4588 
	$¥imLöeGSkù
(*
ba£Addr
)

4590 *
gpuD©a
 = ((*Ë
ba£Addr
);

4591 *
sgpuD©a
 = ((*Ë
ba£Addr
);

4592 
iMax
=255;

4593 
i
=2;

4595 
lx1
 = 
sgpuD©a
[2];

4596 
ly1
 = 
sgpuD©a
[3];

4598 !(((
gpuD©a
[
i
] & 0xF000F000) == 0x50005000) && i>=4))

4600 
i
++;

4602 
ly1
 = ()((
gpuD©a
[
i
]>>16) & 0xffff);

4603 
lx1
 = ()(
gpuD©a
[
i
] & 0xffff);

4605 
i
++;if(i>
iMax
) ;

4607 
	}
}

4613 
	$¥imLöeGEx
(*
ba£Addr
)

4615 *
gpuD©a
 = ((*Ë
ba£Addr
);

4616 
iMax
=255;

4617 
cx0
,
cx1
,
cy0
,
cy1
;
i
;
BOOL
 
bDøw
=
TRUE
;

4619 
bDøwTextuªd
 = 
FALSE
;

4620 
bDøwSmoŸhShaded
 = 
TRUE
;

4621 
	`SëRídîSèã
(
gpuD©a
[0]);

4622 
	`SëRídîMode
(
gpuD©a
[0], 
FALSE
);

4623 
	`SëZMask4NT
();

4625 
vîãx
[0].
c
.
lcﬁ
=vîãx[3].c.lcﬁ=
gpuD©a
[0];

4626 
vîãx
[0].
c
.
cﬁ
[3]=vîãx[3].c.cﬁ[3]=
ubGloCﬁAÕha
;

4627 
ly1
 = ()((
gpuD©a
[1]>>16) & 0xffff);

4628 
lx1
 = ()(
gpuD©a
[1] & 0xffff);

4630 
i
=2;

4635 !(((
gpuD©a
[
i
] & 0xF000F000) == 0x50005000) && i>=4))

4637 
ly0
 = 
ly1
;
lx0
=
lx1
;

4638 
vîãx
[1].
c
.
lcﬁ
=vertex[2].c.lcol=vertex[0].c.lcol;

4639 
vîãx
[0].
c
.
lcﬁ
=vîãx[3].c.lcﬁ=
gpuD©a
[
i
];

4640 
vîãx
[0].
c
.
cﬁ
[3]=vîãx[3].c.cﬁ[3]=
ubGloCﬁAÕha
;

4642 
i
++;

4644 
ly1
 = ()((
gpuD©a
[
i
]>>16) & 0xffff);

4645 
lx1
 = ()(
gpuD©a
[
i
] & 0xffff);

4647 if(
	`off£éöe
()Ë
bDøw
=
FALSE
; bDøw=
TRUE
;

4649 i‡(
bDøw
 && ((
lx0
 !
lx1
Ë|| (
ly0
 !
ly1
)))

4663 
	`PRIMdøwGouøudLöe
(&
vîãx
[0], &vertex[1], &vertex[2], &vertex[3]);

4665 
i
++;

4667 if(
i
>
iMax
) ;

4670 
iDøwnSomëhög
=1;

4671 
	}
}

4677 
	$¥imLöeG2
(*
ba£Addr
)

4679 *
gpuD©a
 = ((*Ë
ba£Addr
);

4680 *
sgpuD©a
 = ((*Ë
ba£Addr
);

4682 
lx0
 = 
sgpuD©a
[2];

4683 
ly0
 = 
sgpuD©a
[3];

4684 
lx1
 = 
sgpuD©a
[6];

4685 
ly1
 = 
sgpuD©a
[7];

4687 
vîãx
[0].
c
.
lcﬁ
=vîãx[3].c.lcﬁ=
gpuD©a
[0];

4688 
vîãx
[1].
c
.
lcﬁ
=vîãx[2].c.lcﬁ=
gpuD©a
[2];

4689 
vîãx
[0].
c
.
cﬁ
[3]=vîãx[1].c.cﬁ[3]=vîãx[2].c.cﬁ[3]=vîãx[3].c.cﬁ[3]=
ubGloCﬁAÕha
;

4691 
bDøwTextuªd
 = 
FALSE
;

4692 
bDøwSmoŸhShaded
 = 
TRUE
;

4694 if((
lx0
 =
lx1
Ë&& (
ly0
 =
ly1
)) ;

4696 if(
	`off£éöe
()) ;

4698 
	`SëRídîSèã
(
gpuD©a
[0]);

4699 
	`SëRídîMode
(
gpuD©a
[0], 
FALSE
);

4700 
	`SëZMask4NT
();

4713 
	`PRIMdøwGouøudLöe
(&
vîãx
[0], &vertex[1], &vertex[2], &vertex[3]);

4715 
iDøwnSomëhög
=1;

4716 
	}
}

4722 
	$¥imLöeFSkù
(*
ba£Addr
)

4724 *
gpuD©a
 = ((*Ë
ba£Addr
);

4725 
i
=2,
iMax
=255;

4727 
ly1
 = ()((
gpuD©a
[1]>>16) & 0xffff);

4728 
lx1
 = ()(
gpuD©a
[1] & 0xffff);

4730 !(((
gpuD©a
[
i
] & 0xF000F000) == 0x50005000) && i>=3))

4732 
ly1
 = ()((
gpuD©a
[
i
]>>16) & 0xffff);

4733 
lx1
 = ()(
gpuD©a
[
i
] & 0xffff);

4734 
i
++;if(i>
iMax
) ;

4736 
	}
}

4742 
	$¥imLöeFEx
(*
ba£Addr
)

4744 *
gpuD©a
 = ((*Ë
ba£Addr
);

4745 
iMax
;

4746 
cx0
,
cx1
,
cy0
,
cy1
;
i
;

4748 
iMax
=255;

4750 
bDøwTextuªd
 = 
FALSE
;

4751 
bDøwSmoŸhShaded
 = 
FALSE
;

4752 
	`SëRídîSèã
(
gpuD©a
[0]);

4753 
	`SëRídîMode
(
gpuD©a
[0], 
FALSE
);

4754 
	`SëZMask4NT
();

4756 
vîãx
[0].
c
.
lcﬁ
=
gpuD©a
[0];

4757 
vîãx
[0].
c
.
cﬁ
[3]=
ubGloCﬁAÕha
;

4759 
ly1
 = ()((
gpuD©a
[1]>>16) & 0xffff);

4760 
lx1
 = ()(
gpuD©a
[1] & 0xffff);

4762 
i
=2;

4768 !(((
gpuD©a
[
i
] & 0xF000F000) == 0x50005000) && i>=3))

4770 
ly0
 = 
ly1
;
lx0
=
lx1
;

4771 
ly1
 = ()((
gpuD©a
[
i
]>>16) & 0xffff);

4772 
lx1
 = ()(
gpuD©a
[
i
] & 0xffff);

4774 if(!
	`off£éöe
())

4787 
	`PRIMdøwFœtLöe
(&
vîãx
[0], &vertex[1], &vertex[2], &vertex[3]);

4790 
i
++;if(i>
iMax
) ;

4793 
iDøwnSomëhög
=1;

4794 
	}
}

4800 
	$¥imLöeF2
(*
ba£Addr
)

4802 *
gpuD©a
 = ((*Ë
ba£Addr
);

4803 *
sgpuD©a
 = ((*Ë
ba£Addr
);

4805 
lx0
 = 
sgpuD©a
[2];

4806 
ly0
 = 
sgpuD©a
[3];

4807 
lx1
 = 
sgpuD©a
[4];

4808 
ly1
 = 
sgpuD©a
[5];

4810 if(
	`off£éöe
()) ;

4812 
bDøwTextuªd
 = 
FALSE
;

4813 
bDøwSmoŸhShaded
 = 
FALSE
;

4814 
	`SëRídîSèã
(
gpuD©a
[0]);

4815 
	`SëRídîMode
(
gpuD©a
[0], 
FALSE
);

4816 
	`SëZMask4NT
();

4818 
vîãx
[0].
c
.
lcﬁ
=
gpuD©a
[0];

4819 
vîãx
[0].
c
.
cﬁ
[3]=
ubGloCﬁAÕha
;

4832 
	`PRIMdøwFœtLöe
(&
vîãx
[0], &vertex[1], &vertex[2], &vertex[3]);

4834 
iDøwnSomëhög
=1;

4835 
	}
}

4841 
	$¥imNI
(*
bA
)

4843 
	}
}

4849 (*
¥imTabÀJ
[256])(*) =

4852 
¥imNI
,¥imNI,
¥imBlkFûl
,primNI,primNI,primNI,primNI,primNI,

4854 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4856 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4858 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4860 
¥imPﬁyF3
,¥imPﬁyF3,¥imPﬁyF3,¥imPﬁyF3,
¥imPﬁyFT3
,primPolyFT3,primPolyFT3,primPolyFT3,

4862 
¥imPﬁyF4
,¥imPﬁyF4,¥imPﬁyF4,¥imPﬁyF4,
¥imPﬁyFT4
,primPolyFT4,primPolyFT4,primPolyFT4,

4864 
¥imPﬁyG3
,¥imPﬁyG3,¥imPﬁyG3,¥imPﬁyG3,
¥imPﬁyGT3
,primPolyGT3,primPolyGT3,primPolyGT3,

4866 
¥imPﬁyG4
,¥imPﬁyG4,¥imPﬁyG4,¥imPﬁyG4,
¥imPﬁyGT4
,primPolyGT4,primPolyGT4,primPolyGT4,

4868 
¥imLöeF2
,¥imLöeF2,¥imLöeF2,¥imLöeF2,
¥imNI
,primNI,primNI,primNI,

4870 
¥imLöeFEx
,primLineFEx,primLineFEx,primLineFEx,primLineFEx,primLineFEx,primLineFEx,primLineFEx,

4872 
¥imLöeG2
,¥imLöeG2,¥imLöeG2,¥imLöeG2,
¥imNI
,primNI,primNI,primNI,

4874 
¥imLöeGEx
,primLineGEx,primLineGEx,primLineGEx,primLineGEx,primLineGEx,primLineGEx,primLineGEx,

4876 
¥imTûeS
,¥imTûeS,¥imTûeS,¥imTûeS,
¥imS¥tS
,primSprtS,primSprtS,primSprtS,

4878 
¥imTûe1
,¥imTûe1,¥imTûe1,¥imTûe1,
¥imNI
,primNI,primNI,primNI,

4880 
¥imTûe8
,¥imTûe8,¥imTûe8,¥imTûe8,
¥imS¥t8
,primSprt8,primSprt8,primSprt8,

4882 
¥imTûe16
,¥imTûe16,¥imTûe16,¥imTûe16,
¥imS¥t16
,primSprt16,primSprt16,primSprt16,

4884 
¥imMoveImage
,
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,

4886 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4888 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4890 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4892 
¥imLﬂdImage
,
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,

4894 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4896 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4898 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4900 
¥imSt‹eImage
,
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,

4902 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4904 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4906 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4908 
¥imNI
,
cmdTextuªPage
,
cmdTextuªWödow
,
cmdDøwAªaSèπ
,
cmdDøwAªaEnd
,
cmdDøwOff£t
,
cmdSTP
,primNI,

4910 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4912 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4914 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI

4915 
	}
};

4921 (*
¥imTabÀSkù
[256])(*) =

4924 
¥imNI
,¥imNI,
¥imBlkFûl
,primNI,primNI,primNI,primNI,primNI,

4926 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4928 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4930 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4932 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4934 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4936 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4938 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4940 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4942 
¥imLöeFSkù
,primLineFSkip,primLineFSkip,primLineFSkip,primLineFSkip,primLineFSkip,primLineFSkip,primLineFSkip,

4944 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4946 
¥imLöeGSkù
,primLineGSkip,primLineGSkip,primLineGSkip,primLineGSkip,primLineGSkip,primLineGSkip,primLineGSkip,

4948 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4950 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4952 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4954 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4956 
¥imMoveImage
,
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,

4958 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4960 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4962 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4964 
¥imLﬂdImage
,
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,

4966 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4968 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4970 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4972 
¥imSt‹eImage
,
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,

4974 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4976 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4978 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4980 
¥imNI
,
cmdTextuªPage
,
cmdTextuªWödow
,
cmdDøwAªaSèπ
,
cmdDøwAªaEnd
,
cmdDøwOff£t
,
cmdSTP
,primNI,

4982 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4984 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI,

4986 
¥imNI
,primNI,primNI,primNI,primNI,primNI,primNI,primNI

4987 
	}
};

	@plugins/gpu-gles/gpuPrim.h

27 #i‚de‡
_PRIMDRAW_H_


28 
	#_PRIMDRAW_H_


	)

30 #ifde‡
__˝lu•lus


34 
	~"gpuExã∫Æs.h
"

35 
	~"gpuStdafx.h
"

37 #i‚de‡
_WINDOWS


38 
EGLSurÁ˚
 
surÁ˚
;

39 
EGLDi•œy
 
di•œy
;

42 
U∂ﬂdS¸ìn
 (
Posôi⁄
);

43 
Pª∑ªFuŒS¸ìnU∂ﬂd
 (
Posôi⁄
);

44 
BOOL
 
CheckAgaö°S¸ìn
(
imageX0
,
imageY0
,
imageX1
,
imageY1
);

45 
BOOL
 
CheckAgaö°Fr⁄tS¸ìn
(
imageX0
,
imageY0
,
imageX1
,
imageY1
);

46 
BOOL
 
Fa°CheckAgaö°S¸ìn
(
imageX0
,
imageY0
,
imageX1
,
imageY1
);

47 
BOOL
 
Fa°CheckAgaö°Fr⁄tS¸ìn
(
imageX0
,
imageY0
,
imageX1
,
imageY1
);

48 
BOOL
 
bCheckFF9G4
(* 
ba£Addr
);

49 
SëSˇnTøns
();

50 
SëSˇnTexTøns
();

51 
DøwMu…iBlur
();

52 
CheckWrôeUpd©e
();

54 #ifde‡
__˝lu•lus


	@plugins/gpu-gles/gpuStdafx.h

27 #i‚de‡
__GPU_STDAFX__


28 
	#__GPU_STDAFX__


	)

30 #ifde‡
__˝lu•lus


34 #i‚de‡
_GPU_API_


35 
	#_GPU_API_
 1

	)

41 #ifde‡
_WINDOWS


43 
	#_CRT_SECURE_NO_WARNINGS


	)

45 
	~<WINDOWS.H
>

46 
	~<WINDOWSX.H
>

47 
	~<Ts8.H
>

48 
	~"ªsour˚.h
"

50 #¥agm®
w¨nög
 (
dißbÀ
:4244)

52 
	~<gl/gl.h
>

59 
	~<°dio.h
>

60 
	~<°dlib.h
>

61 
	~<°rög.h
>

62 
	~<sys/time.h
>

63 #ifde‡
__NANOGL__


64 
	~<gl/gl.h
>

66 #ifde‡
SOFT_LINKAGE


67 #¥agm®
so·Â_lökage


69 
	~<GLES/gl.h
>

71 
	~<EGL/egl.h
>

72 #ifde‡
SOFT_LINKAGE


73 #¥agm®
no_so·Â_lökage


76 
	~<m©h.h
>

78 
	#__ölöe
 
ölöe


	)

82 
	#SHADETEXBIT
(
x
Ë((x>>24Ë& 0x1)

	)

83 
	#SEMITRANSBIT
(
x
Ë((x>>25Ë& 0x1)

	)

86 
	#glEº‹
(Ë{ \

	)

87 
GLíum
 
îr
 = 
glGëEº‹
(); \

88 
îr
 !
GL_NO_ERROR
) { \

89 
¥ötf
("glEº‹: %d caughà© %s:%u\n", 
îr
, 
__FILE__
, 
__LINE__
); \

90 
îr
 = 
glGëEº‹
(); \

94 
	#glEº‹
()

	)

97 #ifde‡
__˝lu•lus


	@plugins/gpu-gles/gpuTexture.c

68 
	#_IN_TEXTURE


	)

70 
	~"gpuStdafx.h
"

72 
	~"gpuDøw.h
"

74 
	~"gpuExã∫Æs.h
"

75 
	~"gpuTextuª.h
"

76 
	~"gpuPlugö.h
"

77 
	~"gpuPrim.h
"

79 
	#CLUTCHK
 0x00060000

	)

80 
	#CLUTSHIFT
 17

	)

86 
GLubyã
 
	gubPÆëãBuf„r
[256][4];

87 
GLuöt
 
	ggTexMovõName
=0;

88 
GLuöt
 
	ggTexBlurName
=0;

89 
GLuöt
 
	ggTexFømeName
=0;

90 
	giTexG¨bageCﬁÀ˘i⁄
=1;

91 
	gdwTexPageComp
=0;

92 
	giVRamSize
=0;

93 
	giCœmpTy≥
=
GL_CLAMP_TO_EDGE
;

94 
	giFûãr
 = 
GL_LINEAR
;

95 (*
LﬂdSubTexFn
) (,,,);

96 (*
PÆTextuªdCﬁourFn
) ();

102 
	#PALCOL
(
x
Ë
	`PÆTextuªdCﬁourFn
 (x)

	)

104 
	#CSUBSIZE
 2048

	)

105 
	#CSUBSIZEA
 8192

	)

106 
	#CSUBSIZES
 4096

	)

108 
	#OFFA
 0

	)

109 
	#OFFB
 2048

	)

110 
	#OFFC
 4096

	)

111 
	#OFFD
 6144

	)

113 
	#XOFFA
 0

	)

114 
	#XOFFB
 512

	)

115 
	#XOFFC
 1024

	)

116 
	#XOFFD
 1536

	)

118 
	#SOFFA
 0

	)

119 
	#SOFFB
 1024

	)

120 
	#SOFFC
 2048

	)

121 
	#SOFFD
 3072

	)

123 
	#MAXWNDTEXCACHE
 128

	)

125 
	#XCHECK
(
pos1
,
pos2
Ë(’os1.
c
[0]>ıos2.c[1])&&’os1.c[1]<ıos2.c[0])&&’os1.c[2]>ıos2.c[3])&&’os1.c[3]<ıos2.c[2]))

	)

126 
	#INCHECK
(
pos2
,
pos1
Ë(’os1.
c
[0]<ıos2.c[0]Ë&& (pos1.c[1]>ıos2.c[1]Ë&& (pos1.c[2]<ıos2.c[2]Ë&& (pos1.c[3]>ıos2.c[3]))

	)

130 * 
	`CheckTextuªInSubSCache
(
TextuªMode
,
GivíClutId
,* 
pCache
);

131 
	`LﬂdSubTextuªPageS‹t
(
∑geid
, 
mode
, 
cx
, 
cy
);

132 
	`LﬂdPackedSubTextuªPageS‹t
(
∑geid
, 
mode
, 
cx
, 
cy
);

133 
	`DeföeSubTextuªS‹t
();

139 
GlobÆTextuªPage
;

140 
GLöt
 
XTexS
;

141 
GLöt
 
YTexS
;

142 
GLöt
 
DXTexS
;

143 
GLöt
 
DYTexS
;

144 
iS‹tTexC¡
=32;

145 
BOOL
 
bU£Fa°Mdec
=
FALSE
;

146 
BOOL
 
bU£15bôMdec
=
FALSE
;

147 
iFømeTexTy≥
=0;

148 
iFømeRódTy≥
=0;

150 (*
TCF
[2]) ();

151 (*
PTCF
[2]) ();

159 
	sãxtuªWndCacheE¡ryTag


161 
ClutID
;

162 
∑geid
;

163 
ãxtuªMode
;

164 
O∑que
;

165 
u£d
;

166 
EXL⁄g
 
pos
;

167 
GLuöt
 
ãx«me
;

168 } 
	tãxtuªWndCacheE¡ry
;

172 
	sãxtuªSubCacheE¡ryTagS


174 
ClutID
;

175 
EXL⁄g
 
pos
;

176 
posTX
;

177 
posTY
;

178 
cTexID
;

179 
O∑que
;

180 } 
	tãxtuªSubCacheE¡ryS
;

185 
	#MAXTPAGES_MAX
 64

	)

186 
	#MAXSORTTEX_MAX
 196

	)

190 
ãxtuªWndCacheE¡ry
 
wcWndãxSt‹e
[
MAXWNDTEXCACHE
];

191 
ãxtuªSubCacheE¡ryS
 * 
pscSubãxSt‹e
[3][
MAXTPAGES_MAX
];

192 
EXL⁄g
 * 
pxSsubãxLe·
 [
MAXSORTTEX_MAX
];

193 
GLuöt
 
uiSãxtuªPage
[
MAXSORTTEX_MAX
];

195 
usLRUTexPage
=0;

197 
iMaxTexWnds
=0;

198 
iTexWndTu∫
=0;

199 
iTexWndLimô
=
MAXWNDTEXCACHE
/2;

201 
GLubyã
 * 
ãxtuª∑π
=
NULL
;

202 
GLubyã
 * 
ãxtuªbuf„r
=
NULL
;

203 
g_x1
,
g_y1
,
g_x2
,
g_y2
;

204 
ubO∑queDøw
=0;

206 
MAXTPAGES
 = 32;

207 
CLUTMASK
 = 0x7fff;

208 
CLUTYMASK
 = 0x1ff;

209 
MAXSORTTEX
 = 196;

216 
	$XP8RGBA
(
BGR
)

218 if(!(
BGR
&0xffff))  0x50000000;

219 if(
DøwSemiTøns
 && !(
BGR
&0x8000))

220 {
ubO∑queDøw
=1; ((((
BGR
<<3)&0xf8)|((BGR<<6)&0xf800)|((BGR<<9)&0xf80000))&0xffffff);}

221  ((((
BGR
<<3)&0xf8)|((BGR<<6)&0xf800)|((BGR<<9)&0xf80000))&0xffffff)|0xff000000;

222 
	}
}

224 
	$XP8RGBAEx
(
BGR
)

226 if(!(
BGR
&0xffff))  0x03000000;

227 if(
DøwSemiTøns
 && !(
BGR
&0x8000))

228 {
ubO∑queDøw
=1; ((((
BGR
<<3)&0xf8)|((BGR<<6)&0xf800)|((BGR<<9)&0xf80000))&0xffffff);}

229  ((((
BGR
<<3)&0xf8)|((BGR<<6)&0xf800)|((BGR<<9)&0xf80000))&0xffffff)|0xff000000;

230 
	}
}

232 
	$CP8RGBA
(
BGR
)

234 
l
;

235 if(!(
BGR
&0xffff))  0x50000000;

236 if(
DøwSemiTøns
 && !(
BGR
&0x8000))

237 {
ubO∑queDøw
=1; ((((
BGR
<<3)&0xf8)|((BGR<<6)&0xf800)|((BGR<<9)&0xf80000))&0xffffff);}

238 
l
=((((
BGR
<<3)&0xf8)|((BGR<<6)&0xf800)|((BGR<<9)&0xf80000))&0xffffff)|0xff000000;

239 if(
l
==0xffffff00)Ü=0xff000000;

240  
l
;

241 
	}
}

243 
	$CP8RGBAEx
(
BGR
)

245 
l
;

246 if(!(
BGR
&0xffff))  0x03000000;

247 if(
DøwSemiTøns
 && !(
BGR
&0x8000))

248 {
ubO∑queDøw
=1; ((((
BGR
<<3)&0xf8)|((BGR<<6)&0xf800)|((BGR<<9)&0xf80000))&0xffffff);}

249 
l
=((((
BGR
<<3)&0xf8)|((BGR<<6)&0xf800)|((BGR<<9)&0xf80000))&0xffffff)|0xff000000;

250 if(
l
==0xffffff00)Ü=0xff000000;

251  
l
;

252 
	}
}

254 
	$XP8RGBA_0
(
BGR
)

256 if(!(
BGR
&0xffff))  0x50000000;

257  ((((
BGR
<<3)&0xf8)|((BGR<<6)&0xf800)|((BGR<<9)&0xf80000))&0xffffff)|0xff000000;

258 
	}
}

260 
	$XP8RGBAEx_0
(
BGR
)

262 if(!(
BGR
&0xffff))  0x03000000;

263  ((((
BGR
<<3)&0xf8)|((BGR<<6)&0xf800)|((BGR<<9)&0xf80000))&0xffffff)|0xff000000;

264 
	}
}

266 
	$XP8BGRA_0
(
BGR
)

268 if(!(
BGR
&0xffff))  0x50000000;

269  ((((
BGR
>>7)&0xf8)|((BGR<<6)&0xf800)|((BGR<<19)&0xf80000))&0xffffff)|0xff000000;

270 
	}
}

272 
	$XP8BGRAEx_0
(
BGR
)

274 if(!(
BGR
&0xffff))  0x03000000;

275  ((((
BGR
>>7)&0xf8)|((BGR<<6)&0xf800)|((BGR<<19)&0xf80000))&0xffffff)|0xff000000;

276 
	}
}

278 
	$CP8RGBA_0
(
BGR
)

280 
l
;

282 if(!(
BGR
&0xffff))  0x50000000;

283 
l
=((((
BGR
<<3)&0xf8)|((BGR<<6)&0xf800)|((BGR<<9)&0xf80000))&0xffffff)|0xff000000;

284 if(
l
==0xfff8f800)Ü=0xff000000;

285  
l
;

286 
	}
}

288 
	$CP8RGBAEx_0
(
BGR
)

290 
l
;

292 if(!(
BGR
&0xffff))  0x03000000;

293 
l
=((((
BGR
<<3)&0xf8)|((BGR<<6)&0xf800)|((BGR<<9)&0xf80000))&0xffffff)|0xff000000;

294 if(
l
==0xfff8f800)Ü=0xff000000;

295  
l
;

296 
	}
}

298 
	$CP8BGRA_0
(
BGR
)

300 
l
;

302 if(!(
BGR
&0xffff))  0x50000000;

303 
l
=((((
BGR
>>7)&0xf8)|((BGR<<6)&0xf800)|((BGR<<19)&0xf80000))&0xffffff)|0xff000000;

304 if(
l
==0xff00f8f8)Ü=0xff000000;

305  
l
;

306 
	}
}

308 
	$CP8BGRAEx_0
(
BGR
)

310 
l
;

312 if(!(
BGR
&0xffff))  0x03000000;

313 
l
=((((
BGR
>>7)&0xf8)|((BGR<<6)&0xf800)|((BGR<<19)&0xf80000))&0xffffff)|0xff000000;

314 if(
l
==0xff00f8f8)Ü=0xff000000;

315  
l
;

316 
	}
}

318 
	$XP8RGBA_1
(
BGR
)

320 if(!(
BGR
&0xffff))  0x50000000;

321 if(!(
BGR
&0x8000)Ë{
ubO∑queDøw
=1; ((((BGR<<3)&0xf8)|((BGR<<6)&0xf800)|((BGR<<9)&0xf80000))&0xffffff);}

322  ((((
BGR
<<3)&0xf8)|((BGR<<6)&0xf800)|((BGR<<9)&0xf80000))&0xffffff)|0xff000000;

323 
	}
}

325 
	$XP8RGBAEx_1
(
BGR
)

327 if(!(
BGR
&0xffff))  0x03000000;

328 if(!(
BGR
&0x8000)Ë{
ubO∑queDøw
=1; ((((BGR<<3)&0xf8)|((BGR<<6)&0xf800)|((BGR<<9)&0xf80000))&0xffffff);}

329  ((((
BGR
<<3)&0xf8)|((BGR<<6)&0xf800)|((BGR<<9)&0xf80000))&0xffffff)|0xff000000;

330 
	}
}

332 
	$XP8BGRA_1
(
BGR
)

334 if(!(
BGR
&0xffff))  0x50000000;

335 if(!(
BGR
&0x8000)Ë{
ubO∑queDøw
=1; ((((BGR>>7)&0xf8)|((BGR<<6)&0xf800)|((BGR<<19)&0xf80000))&0xffffff);}

336  ((((
BGR
>>7)&0xf8)|((BGR<<6)&0xf800)|((BGR<<19)&0xf80000))&0xffffff)|0xff000000;

337 
	}
}

339 
	$XP8BGRAEx_1
(
BGR
)

341 if(!(
BGR
&0xffff))  0x03000000;

342 if(!(
BGR
&0x8000)Ë{
ubO∑queDøw
=1; ((((BGR>>7)&0xf8)|((BGR<<6)&0xf800)|((BGR<<19)&0xf80000))&0xffffff);}

343  ((((
BGR
>>7)&0xf8)|((BGR<<6)&0xf800)|((BGR<<19)&0xf80000))&0xffffff)|0xff000000;

344 
	}
}

346 
	$P8RGBA
(
BGR
)

348 if(!(
BGR
&0xffff))  0;

349  ((((
BGR
<<3)&0xf8)|((BGR<<6)&0xf800)|((BGR<<9)&0xf80000))&0xffffff)|0xff000000;

350 
	}
}

352 
	$P8BGRA
(
BGR
)

354 if(!(
BGR
&0xffff))  0;

355  ((((
BGR
>>7)&0xf8)|((BGR<<6)&0xf800)|((BGR<<19)&0xf80000))&0xffffff)|0xff000000;

356 
	}
}

358 
	$XP5RGBA
(
BGR
)

360 if(!
BGR
)  0;

361 if(
DøwSemiTøns
 && !(
BGR
&0x8000))

362 {
ubO∑queDøw
=1; ((((
BGR
<<11))|((BGR>>9)&0x3e)|((BGR<<1)&0x7c0)));}

363  ((((
BGR
<<11))|((BGR>>9)&0x3e)|((BGR<<1)&0x7c0)))|1;

364 
	}
}

366 
	$XP5RGBA_0
 (
BGR
)

368 if(!
BGR
)  0;

370  ((((
BGR
<<11))|((BGR>>9)&0x3e)|((BGR<<1)&0x7c0)))|1;

371 
	}
}

373 
	$CP5RGBA_0
 (
BGR
)

375 
s
;

377 if(!
BGR
)  0;

379 
s
=((((
BGR
<<11))|((BGR>>9)&0x3e)|((BGR<<1)&0x7c0)))|1;

380 if(
s
==0x07ff) s=1;

381  
s
;

382 
	}
}

384 
	$XP5RGBA_1
(
BGR
)

386 if(!
BGR
)  0;

387 if(!(
BGR
&0x8000))

388 {
ubO∑queDøw
=1; ((((
BGR
<<11))|((BGR>>9)&0x3e)|((BGR<<1)&0x7c0)));}

389  ((((
BGR
<<11))|((BGR>>9)&0x3e)|((BGR<<1)&0x7c0)))|1;

390 
	}
}

392 
	$P5RGBA
(
BGR
)

394 if(!
BGR
)  0;

395  ((((
BGR
<<11))|((BGR>>9)&0x3e)|((BGR<<1)&0x7c0)))|1;

396 
	}
}

398 
	$XP4RGBA
(
BGR
)

400 if(!
BGR
)  6;

401 if(
DøwSemiTøns
 && !(
BGR
&0x8000))

402 {
ubO∑queDøw
=1; ((((
BGR
<<11))|((BGR>>9)&0x3e)|((BGR<<1)&0x7c0)));}

403  (((((
BGR
&0x1e)<<11))|((BGR&0x7800)>>7)|((BGR&0x3c0)<<2)))|0xf;

404 
	}
}

406 
	$XP4RGBA_0
 (
BGR
)

408 if(!
BGR
)  6;

409  (((((
BGR
&0x1e)<<11))|((BGR&0x7800)>>7)|((BGR&0x3c0)<<2)))|0xf;

410 
	}
}

412 
	$CP4RGBA_0
 (
BGR
)

414 
s
;

415 if(!
BGR
)  6;

416 
s
=(((((
BGR
&0x1e)<<11))|((BGR&0x7800)>>7)|((BGR&0x3c0)<<2)))|0xf;

417 if(
s
==0x0fff) s=0x000f;

418  
s
;

419 
	}
}

421 
	$XP4RGBA_1
(
BGR
)

423 if(!
BGR
)  6;

424 if(!(
BGR
&0x8000))

425 {
ubO∑queDøw
=1; ((((
BGR
<<11))|((BGR>>9)&0x3e)|((BGR<<1)&0x7c0)));}

426  (((((
BGR
&0x1e)<<11))|((BGR&0x7800)>>7)|((BGR&0x3c0)<<2)))|0xf;

427 
	}
}

429 
	$P4RGBA
(
BGR
)

431 if(!
BGR
)  0;

432  (((((
BGR
&0x1e)<<11))|((BGR&0x7800)>>7)|((BGR&0x3c0)<<2)))|0xf;

433 
	}
}

439 
	giFTexA
=512;

440 
	giFTexB
=512;

442 
	$CheckTextuªMem‹y
()

444 
GLboﬁón
 
b
;GLboﬁó¿* 
bDëaû
;

445 
i
,
iC¡
,
iRam
=
iVRamSize
*1024*1024;

446 
iTSize
;* 
p
;

449 if(
iVRamSize
)

451 
ts
;

453 
iRam
-=(
iResX
*
iResY
*8);

454 
iRam
-=(
iResX
*
iResY
*(
iZBuf„rDïth
/8));

456 
ts
=4;

457 
iS‹tTexC¡
=
iRam
/(256*256*
ts
);

459 if(
iS‹tTexC¡
>
MAXSORTTEX
)

461 
iS‹tTexC¡
=
MAXSORTTEX
-
	`mö
(1,0);

465 
iS‹tTexC¡
-=3+
	`mö
(1,0);

466 if(
iS‹tTexC¡
<8) iSortTexCnt=8;

469 
i
=0;i<
MAXSORTTEX
;i++)

470 
uiSãxtuªPage
[
i
]=0;

476 
iS‹tTexC¡
=
MAXSORTTEX
;

479 
iTSize
=256;

480 
p
=(*)
	`mÆloc
(
iTSize
*iTSize*4);

482 
iC¡
=0;

483 
	`glGíTextuªs
(
MAXSORTTEX
,
uiSãxtuªPage
);

484 
i
=0;i<
MAXSORTTEX
;i++)

486 
	`glBödTextuª
(
GL_TEXTURE_2D
,
uiSãxtuªPage
[
i
]);

487 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_S
, 
iCœmpTy≥
);

488 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_T
, 
iCœmpTy≥
);

489 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
iFûãr
);

490 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
iFûãr
);

491 
	`glTexImage2D
(
GL_TEXTURE_2D
, 0, 
GL_RGBA
, 
iTSize
, iTSize, 0,GL_RGBA, 
GL_UNSIGNED_BYTE
, 
p
);

493 
	`glBödTextuª
(
GL_TEXTURE_2D
,0);

495 
	`‰ì
(
p
);

497 
bDëaû
=(
GLboﬁón
*)
	`mÆloc
(
MAXSORTTEX
*(GLboolean));

498 
	`mem£t
(
bDëaû
,0,
MAXSORTTEX
*(
GLboﬁón
));

500 
	`glDñëeTextuªs
(
MAXSORTTEX
,
uiSãxtuªPage
);

502 
i
=0;i<
MAXSORTTEX
;i++)

504 if(
bDëaû
[
i
]Ë
iC¡
++;

505 
uiSãxtuªPage
[
i
]=0;

508 
	`‰ì
(
bDëaû
);

510 if(
b
Ë
iS‹tTexC¡
=
MAXSORTTEX
-
	`mö
(1,0);

511 
iS‹tTexC¡
=
iC¡
-3+
	`mö
(1,0);

513 if(
iS‹tTexC¡
<8) iSortTexCnt=8;

515 
	}
}

521 
	$InôülizeTextuªSt‹e
()

523 
i
,
j
;

525 if(
iGPUHeight
==1024)

527 
MAXTPAGES
 = 64;

528 
CLUTMASK
 = 0xffff;

529 
CLUTYMASK
 = 0x3ff;

530 
MAXSORTTEX
 = 128;

531 
iTexG¨bageCﬁÀ˘i⁄
=0;

535 
MAXTPAGES
 = 32;

536 
CLUTMASK
 = 0x7fff;

537 
CLUTYMASK
 = 0x1ff;

538 
MAXSORTTEX
 = 196;

541 
	`mem£t
(
vîãx
,0,4*(
OGLVîãx
));

543 
gTexName
=0;

545 
iTexWndLimô
=
MAXWNDTEXCACHE
;

546  
iTexWndLimô
/=2;

548 
	`mem£t
(
wcWndãxSt‹e
,0,(
ãxtuªWndCacheE¡ry
)*

549 
MAXWNDTEXCACHE
);

550 
ãxtuª∑π
=(
GLubyã
 *)
	`mÆloc
(256*256*4);

551 
	`mem£t
(
ãxtuª∑π
,0,256*256*4);

552 
ãxtuªbuf„r
=
NULL
;

554 
i
=0;i<3;i++)

555 
j
=0;j<
MAXTPAGES
;j++)

557 
pscSubãxSt‹e
[
i
][
j
]=(
ãxtuªSubCacheE¡ryS
 *)
	`mÆloc
(
CSUBSIZES
*(textureSubCacheEntryS));

558 
	`mem£t
(
pscSubãxSt‹e
[
i
][
j
],0,
CSUBSIZES
*(
ãxtuªSubCacheE¡ryS
));

560 
i
=0;i<
MAXSORTTEX
;i++)

562 
pxSsubãxLe·
[
i
]=(
EXL⁄g
 *)
	`mÆloc
(
CSUBSIZE
*(EXLong));

563 
	`mem£t
(
pxSsubãxLe·
[
i
],0,
CSUBSIZE
*(
EXL⁄g
));

564 
uiSãxtuªPage
[
i
]=0;

566 
	}
}

572 
	$CÀ™upTextuªSt‹e
()

574 
i
,
j
;
ãxtuªWndCacheE¡ry
 * 
tsx
;

576 
	`glBödTextuª
(
GL_TEXTURE_2D
,0);

577 
	`glEº‹
();

579 
	`‰ì
(
ãxtuª∑π
);

580 
ãxtuª∑π
=0;

581 if(
ãxtuªbuf„r
)

583 
	`‰ì
(
ãxtuªbuf„r
);

584 
ãxtuªbuf„r
=0;

587 
tsx
=
wcWndãxSt‹e
;

588 
i
=0;i<
MAXWNDTEXCACHE
;i++,
tsx
++)

590 if(
tsx
->
ãx«me
)

591 
	`glDñëeTextuªs
(1,&
tsx
->
ãx«me
);

592 
	`glEº‹
();

594 
iMaxTexWnds
=0;

596 if(
gTexMovõName
!=0)

597 
	`glDñëeTextuªs
(1, &
gTexMovõName
);

598 
	`glEº‹
();

599 
gTexMovõName
=0;

601 if(
gTexFømeName
!=0)

602 
	`glDñëeTextuªs
(1, &
gTexFømeName
);

603 
	`glEº‹
();

604 
gTexFømeName
=0;

606 if(
gTexBlurName
!=0)

607 
	`glDñëeTextuªs
(1, &
gTexBlurName
);

608 
	`glEº‹
();

609 
gTexBlurName
=0;

611 
i
=0;i<3;i++)

612 
j
=0;j<
MAXTPAGES
;j++)

614 
	`‰ì
(
pscSubãxSt‹e
[
i
][
j
]);

615 
pscSubãxSt‹e
[
i
][
j
]=0;

617 
i
=0;i<
MAXSORTTEX
;i++)

619 if(
uiSãxtuªPage
[
i
])

621 
	`glDñëeTextuªs
(1,&
uiSãxtuªPage
[
i
]);

622 
	`glEº‹
();

623 
uiSãxtuªPage
[
i
]=0;

625 
	`‰ì
(
pxSsubãxLe·
[
i
]);

626 
pxSsubãxLe·
[
i
]=0;

629 
	}
}

635 
	$Re£tTextuªAªa
(
BOOL
 
bDñTex
)

637 
i
,
j
;
ãxtuªSubCacheE¡ryS
 * 
tss
;
EXL⁄g
 * 
lu
;

638 
ãxtuªWndCacheE¡ry
 * 
tsx
;

641 
dwTexPageComp
=0;

644 if(
bDñTex
Ë{
	`glBödTextuª
(
GL_TEXTURE_2D
,0); 
	`glEº‹
();
gTexName
=0;}

646 
tsx
=
wcWndãxSt‹e
;

647 
i
=0;i<
MAXWNDTEXCACHE
;i++,
tsx
++)

649 
tsx
->
u£d
=0;

650 if(
bDñTex
 && 
tsx
->
ãx«me
)

652 
	`glDñëeTextuªs
(1,&
tsx
->
ãx«me
); 
	`glEº‹
();

653 
tsx
->
ãx«me
=0;

656 
iMaxTexWnds
=0;

659 
i
=0;i<3;i++)

660 
j
=0;j<
MAXTPAGES
;j++)

662 
tss
=
pscSubãxSt‹e
[
i
][
j
];

663 (
tss
+
SOFFA
)->
pos
.
l
=0;

664 (
tss
+
SOFFB
)->
pos
.
l
=0;

665 (
tss
+
SOFFC
)->
pos
.
l
=0;

666 (
tss
+
SOFFD
)->
pos
.
l
=0;

669 
i
=0;i<
iS‹tTexC¡
;i++)

671 
lu
=
pxSsubãxLe·
[
i
];

672 
lu
->
l
=0;

673 if(
bDñTex
 && 
uiSãxtuªPage
[
i
])

674 {
	`glDñëeTextuªs
(1,&
uiSãxtuªPage
[
i
]); 
	`glEº‹
();uiStexturePage[i]=0;}

676 
	}
}

683 
	$InvÆid©eWndTextuªAªa
(
X
,
Y
,
W
, 
H
)

685 
i
,
px1
,
px2
,
py1
,
py2
,
iYM
=1;

686 
ãxtuªWndCacheE¡ry
 * 
tsw
=
wcWndãxSt‹e
;

688 
W
+=
X
-1;

689 
H
+=
Y
-1;

690 if(
X
<0) X=0;if(X>1023) X=1023;

691 if(
W
<0) W=0;if(W>1023) W=1023;

692 if(
Y
<0ËY=0;if(Y>
iGPUHeightMask
) Y=iGPUHeightMask;

693 if(
H
<0ËH=0;if(H>
iGPUHeightMask
) H=iGPUHeightMask;

694 
W
++;
H
++;

696 if(
iGPUHeight
==1024Ë
iYM
=3;

698 
py1
=
	`mö
(
iYM
,
Y
>>8);

699 
py2
=
	`mö
(
iYM
,
H
>>8);

701 
px1
=
	`max
(0,(
X
>>6));

702 
px2
=
	`mö
(15,(
W
>>6));

704 if(
py1
==
py2
)

706 
py1
ıy1<<4;
px1
+ıy1;
px2
+=py1;

707 
i
=0;i<
iMaxTexWnds
;i++,
tsw
++)

709 if(
tsw
->
u£d
)

711 if(
tsw
->
∑geid
>=
px1
 &&Åsw->∑geid<=
px2
)

713 
tsw
->
u£d
=0;

720 
py1
=
px1
+16;
py2
=
px2
+16;

721 
i
=0;i<
iMaxTexWnds
;i++,
tsw
++)

723 if(
tsw
->
u£d
)

725 if((
tsw
->
∑geid
>=
px1
 &&Åsw->∑geid<=
px2
) ||

726 (
tsw
->
∑geid
>=
py1
 &&Åsw->∑geid<=
py2
))

728 
tsw
->
u£d
=0;

735 
tsw
=
wcWndãxSt‹e
+
iMaxTexWnds
-1;

736 
iMaxTexWnds
 && !
tsw
->
u£d
) {iMaxTexWnds--;tsw--;}

737 
	}
}

745 
	$M¨kFªe
(
ãxtuªSubCacheE¡ryS
 * 
tsx
)

747 
EXL⁄g
 * 
ul
, * 
uls
;

748 
j
,
iMax
;
x1
,
y1
,
dx
,
dy
;

750 
uls
=
pxSsubãxLe·
[
tsx
->
cTexID
];

751 
iMax
=
uls
->
l
;
ul
=uls+1;

753 if(!
iMax
) ;

755 
j
=0;j<
iMax
;j++,
ul
++)

756 if(
ul
->
l
==0xffffffff) ;

758 if(
j
<
CSUBSIZE
-2)

760 if(
j
==
iMax
Ë
uls
->
l
=uls->l+1;

762 
x1
=
tsx
->
posTX
;
dx
Òsx->
pos
.
c
[2]-tsx->pos.c[3];

763 if(
tsx
->
posTX
Ë{
x1
--;
dx
+=3;}

764 
y1
=
tsx
->
posTY
;
dy
Òsx->
pos
.
c
[0]-tsx->pos.c[1];

765 if(
tsx
->
posTY
Ë{
y1
--;
dy
+=3;}

767 
ul
->
c
[3]=
x1
;

768 
ul
->
c
[2]=
dx
;

769 
ul
->
c
[1]=
y1
;

770 
ul
->
c
[0]=
dy
;

772 
	}
}

774 
	$InvÆid©eSubSTextuªAªa
(
X
,
Y
,
W
, 
H
)

776 
i
,
j
,
k
,
iMax
,
px
,
py
,
px1
,
px2
,
py1
,
py2
,
iYM
=1;

777 
EXL⁄g
 
≈os
;
ãxtuªSubCacheE¡ryS
 * 
tsb
;

778 
x1
,
x2
,
y1
,
y2
,
xa
,
sw
;

780 
W
+=
X
-1;

781 
H
+=
Y
-1;

782 if(
X
<0) X=0;if(X>1023) X=1023;

783 if(
W
<0) W=0;if(W>1023) W=1023;

784 if(
Y
<0ËY=0;if(Y>
iGPUHeightMask
) Y=iGPUHeightMask;

785 if(
H
<0ËH=0;if(H>
iGPUHeightMask
) H=iGPUHeightMask;

786 
W
++;
H
++;

788 if(
iGPUHeight
==1024Ë
iYM
=3;

790 
py1
=
	`mö
(
iYM
,
Y
>>8);

791 
py2
=
	`mö
(
iYM
,
H
>>8);

792 
px1
=
	`max
(0,(
X
>>6)-3);

793 
px2
=
	`mö
(15,(
W
>>6)+3);

795 
py
=
py1
;py<=
py2
;py++)

797 
j
=(
py
<<4)+
px1
;

799 
y1
=
py
*256;
y2
=y1+255;

801 if(
H
<
y1
) ;

802 if(
Y
>
y2
) ;

804 if(
Y
>
y1
) y1=Y;

805 if(
H
<
y2
) y2=H;

806 if(
y2
<
y1
Ë{
sw
=y1;y1=y2;y2=sw;}

807 
y1
=((y1%256)<<8);

808 
y2
=(y2%256);

810 
px
=
px1
;px<=
px2
;px++,
j
++)

812 
k
=0;k<3;k++)

814 
xa
=
x1
=
px
<<6;

815 if(
W
<
x1
) ;

816 
x2
=
x1
+(64<<
k
)-1;

817 if(
X
>
x2
) ;

819 if(
X
>
x1
) x1=X;

820 if(
W
<
x2
) x2=W;

821 if(
x2
<
x1
Ë{
sw
=x1;x1=x2;x2=sw;}

823 i‡(
dwGPUVîsi⁄
 == 2)

824 
≈os
.
l
=0x00ff00ff;

826 
≈os
.
l
=((
x1
-
xa
)<<(26-
k
))|((
x2
-xa)<<(18-k))|
y1
|
y2
;

829 
tsb
=
pscSubãxSt‹e
[
k
][
j
]+
SOFFA
;
iMax
Òsb->
pos
.
l
;tsb++;

830 
i
=0;i<
iMax
;i++,
tsb
++)

831 if(
tsb
->
ClutID
 && 
	`XCHECK
—sb->
pos
,
≈os
)Ë{tsb->ClutID=0;
	`M¨kFªe
(tsb);}

835 
tsb
=
pscSubãxSt‹e
[
k
][
j
]+
SOFFB
;
iMax
Òsb->
pos
.
l
;tsb++;

836 
i
=0;i<
iMax
;i++,
tsb
++)

837 if(
tsb
->
ClutID
 && 
	`XCHECK
—sb->
pos
,
≈os
)Ë{tsb->ClutID=0;
	`M¨kFªe
(tsb);}

842 
tsb
=
pscSubãxSt‹e
[
k
][
j
]+
SOFFC
;
iMax
Òsb->
pos
.
l
;tsb++;

843 
i
=0;i<
iMax
;i++,
tsb
++)

844 if(
tsb
->
ClutID
 && 
	`XCHECK
—sb->
pos
,
≈os
)Ë{tsb->ClutID=0;
	`M¨kFªe
(tsb);}

849 
tsb
=
pscSubãxSt‹e
[
k
][
j
]+
SOFFD
;
iMax
Òsb->
pos
.
l
;tsb++;

850 
i
=0;i<
iMax
;i++,
tsb
++)

851 if(
tsb
->
ClutID
 && 
	`XCHECK
—sb->
pos
,
≈os
)Ë{tsb->ClutID=0;
	`M¨kFªe
(tsb);}

857 
	}
}

863 
	$InvÆid©eTextuªAªaEx
()

865 
W
=
sxmax
-
sxmö
;

866 
H
=
symax
-
symö
;

868 if(
W
==0 && 
H
==0) ;

870 if(
iMaxTexWnds
)

871 
	`InvÆid©eWndTextuªAªa
(
sxmö
,
symö
,
W
,
H
);

873 
	`InvÆid©eSubSTextuªAªa
(
sxmö
,
symö
,
W
,
H
);

874 
	}
}

878 
	$InvÆid©eTextuªAªa
(
X
,
Y
,
W
, 
H
)

880 if(
W
==0 && 
H
==0) ;

882 if(
iMaxTexWnds
Ë
	`InvÆid©eWndTextuªAªa
(
X
,
Y
,
W
,
H
);

884 
	`InvÆid©eSubSTextuªAªa
(
X
,
Y
,
W
,
H
);

885 
	}
}

892 
	$DeföeTextuªWnd
()

894 if(
gTexName
==0)

895 
	`glGíTextuªs
(1, &
gTexName
);

896 
	`glEº‹
();

897 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
gTexName
);

898 
	`glEº‹
();

899 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_S
, 
GL_REPEAT
);

900 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_T
, 
GL_REPEAT
);

901 
	`glEº‹
();

903 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
iFûãr
);

904 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
iFûãr
);

905 
	`glEº‹
();

908 
	`glTexImage2D
(
GL_TEXTURE_2D
, 0,
GL_RGBA
,

909 
TWö
.
Posôi⁄
.
x1
,

910 
TWö
.
Posôi⁄
.
y1
,

911 0, 
GL_RGBA
, 
GL_UNSIGNED_BYTE
, 
ãxtuª∑π
);

912 
	`glEº‹
();

915 
	}
}

921 
	$LﬂdSåëchPackedWndTextuªPage
(
∑geid
, 
mode
, 
cx
, 
cy
)

923 
°¨t
,
row
,
cﬁumn
,
j
,
sxh
,
sxm
,
ldx
,
ldy
,
ldxo
;

924 
∑l°¨t
;

925 *
px
,*
∑
,*
è
;

926 *
cSRCPå
,*
cOSRCPå
;

927 *
wSRCPå
,*
wOSRCPå
;

928 
LöeOff£t
;
s
;

929 
pmu…
=
∑geid
/16;

930 (*
LPTCOL
)();

932 
LPTCOL
=
PTCF
[
DøwSemiTøns
];

934 
ldxo
=
TWö
.
Posôi⁄
.
x1
-TWö.
OPosôi⁄
.x1;

935 
ldy
 =
TWö
.
Posôi⁄
.
y1
-TWö.
OPosôi⁄
.y1;

937 
∑
=
px
=(*)
ubPÆëãBuf„r
;

938 
è
=(*)
ãxtuª∑π
;

939 
∑l°¨t
=
cx
+(
cy
*1024);

941 
ubO∑queDøw
=0;

943 
mode
)

948 if(
GlobÆTextIL
)

950 
TXV
,
TXU
,
n_xi
,
n_yi
;

952 
wSRCPå
=
psxVuw
+
∑l°¨t
;

953 
row
=0;row<16;row++)

954 *
px
++=
	`LPTCOL
(*
wSRCPå
++);

956 
cﬁumn
=
g_y2
-
ldy
;

957 
TXV
=
g_y1
;TXV<=
cﬁumn
;TXV++)

959 
ldx
=
ldxo
;

960 
TXU
=
g_x1
;TXU<=
g_x2
-
ldxo
;TXU++)

962 
n_xi
 = ( ( 
TXU
 >> 2 ) & ~0x3¯Ë+ ( ( 
TXV
 << 2 ) & 0x3c );

963 
n_yi
 = ( 
TXV
 & ~0x‡Ë+ ( ( 
TXU
 >> 4 ) & 0xf );

965 
s
=*(
∑
+((*–
psxVuw
 + ((
GlobÆTextAddrY
 + 
n_yi
)*1024Ë+ 
GlobÆTextAddrX
 + 
n_xi
 ) >> ( ( 
TXU
 & 0x03 ) << 2 ) ) & 0x0f ));

966 *
è
++=
s
;

968 if(
ldx
Ë{*
è
++=
s
;ldx--;}

971 if(
ldy
)

972 {
ldy
--;

973 
TXU
=
g_x1
;TXU<=
g_x2
;TXU++)

974 *
è
++=*—a-(
g_x2
-
g_x1
));

978 
	`DeföeTextuªWnd
();

984 
°¨t
=((
∑geid
-16*
pmu…
)*128)+256*2048*pmult;

988 
wSRCPå
=
psxVuw
+
∑l°¨t
;

989 
row
=0;row<16;row++)

990 *
px
++=
	`LPTCOL
(*
wSRCPå
++);

992 
sxm
=
g_x1
&1;
sxh
=g_x1>>1;

993 if(
sxm
Ë
j
=
g_x1
+1; j=g_x1;

994 
cSRCPå
 = 
psxVub
 + 
°¨t
 + (2048*
g_y1
Ë+ 
sxh
;

995 
cﬁumn
=
g_y1
;cﬁumn<=
g_y2
;column++)

997 
cOSRCPå
=
cSRCPå
;
ldx
=
ldxo
;

998 if(
sxm
Ë*
è
++=*(
∑
+((*
cSRCPå
++ >> 4) & 0xF));

1000 
row
=
j
;row<=
g_x2
-
ldxo
;row++)

1002 
s
=*(
∑
+(*
cSRCPå
 & 0xF));

1003 *
è
++=
s
;

1004 if(
ldx
Ë{*
è
++=
s
;ldx--;}

1005 
row
++;

1006 if(
row
<=
g_x2
-
ldxo
)

1008 
s
=*(
∑
+((*
cSRCPå
 >> 4) & 0xF));

1009 *
è
++=
s
;

1010 if(
ldx
Ë{*
è
++=
s
;ldx--;}

1012 
cSRCPå
++;

1015 if(
ldy
 && 
cﬁumn
&1)

1016 {
ldy
--;
cSRCPå
 = 
cOSRCPå
;}

1017 
cSRCPå
 = 
psxVub
 + 
°¨t
 + (2048*(
cﬁumn
+1)Ë+ 
sxh
;

1020 
	`DeföeTextuªWnd
();

1025 if(
GlobÆTextIL
)

1027 
TXV
,
TXU
,
n_xi
,
n_yi
;

1029 
wSRCPå
=
psxVuw
+
∑l°¨t
;

1030 
row
=0;row<256;row++)

1031 *
px
++=
	`LPTCOL
(*
wSRCPå
++);

1033 
cﬁumn
=
g_y2
-
ldy
;

1034 
TXV
=
g_y1
;TXV<=
cﬁumn
;TXV++)

1036 
ldx
=
ldxo
;

1037 
TXU
=
g_x1
;TXU<=
g_x2
-
ldxo
;TXU++)

1039 
n_xi
 = ( ( 
TXU
 >> 1 ) & ~0x78 ) + ( ( TXU << 2 ) & 0x40 ) + ( ( 
TXV
 << 3 ) & 0x38 );

1040 
n_yi
 = ( 
TXV
 & ~0x7 ) + ( ( 
TXU
 >> 5 ) & 0x7 );

1042 
s
=*(
∑
+((*–
psxVuw
 + ((
GlobÆTextAddrY
 + 
n_yi
)*1024Ë+ 
GlobÆTextAddrX
 + 
n_xi
 ) >> ( ( 
TXU
 & 0x01 ) << 3 ) ) & 0xff));

1044 *
è
++=
s
;

1045 if(
ldx
Ë{*
è
++=
s
;ldx--;}

1048 if(
ldy
)

1049 {
ldy
--;

1050 
TXU
=
g_x1
;TXU<=
g_x2
;TXU++)

1051 *
è
++=*—a-(
g_x2
-
g_x1
));

1056 
	`DeföeTextuªWnd
();

1061 
°¨t
=((
∑geid
-16*
pmu…
)*128)+256*2048*pmult;

1064 
cSRCPå
 = 
psxVub
 + 
°¨t
 + (2048*
g_y1
Ë+ 
g_x1
;

1065 
LöeOff£t
 = 2048 - (
g_x2
-
g_x1
+1Ë+
ldxo
;

1067 
cﬁumn
=
g_y1
;cﬁumn<=
g_y2
;column++)

1069 
cOSRCPå
=
cSRCPå
;
ldx
=
ldxo
;

1070 
row
=
g_x1
;row<=
g_x2
-
ldxo
;row++)

1072 
s
=
	`LPTCOL
(
psxVuw
[
∑l°¨t
+ *
cSRCPå
++]);

1073 *
è
++=
s
;

1074 if(
ldx
Ë{*
è
++=
s
;ldx--;}

1076 if(
ldy
 && 
cﬁumn
&1Ë{ldy--;
cSRCPå
=
cOSRCPå
;}

1077 
cSRCPå
+=
LöeOff£t
;

1080 
	`DeföeTextuªWnd
();

1085 
°¨t
=((
∑geid
-16*
pmu…
)*64)+256*1024*pmult;

1086 
wSRCPå
 = 
psxVuw
 + 
°¨t
 + (1024*
g_y1
Ë+ 
g_x1
;

1087 
LöeOff£t
 = 1024 - (
g_x2
-
g_x1
+1Ë+
ldxo
;

1089 
cﬁumn
=
g_y1
;cﬁumn<=
g_y2
;column++)

1091 
wOSRCPå
=
wSRCPå
;
ldx
=
ldxo
;

1092 
row
=
g_x1
;row<=
g_x2
-
ldxo
;row++)

1094 
s
=
	`LPTCOL
(*
wSRCPå
++);

1095 *
è
++=
s
;

1096 if(
ldx
Ë{*
è
++=
s
;ldx--;}

1098 if(
ldy
 && 
cﬁumn
&1Ë{ldy--;
wSRCPå
=
wOSRCPå
;}

1099 
wSRCPå
+=
LöeOff£t
;

1102 
	`DeföeTextuªWnd
();

1107 
	}
}

1113 
	$LﬂdSåëchWndTextuªPage
(
∑geid
, 
mode
, 
cx
, 
cy
)

1115 
°¨t
,
row
,
cﬁumn
,
j
,
sxh
,
sxm
,
ldx
,
ldy
,
ldxo
,
s
;

1116 
∑l°¨t
;

1117 *
px
,*
∑
,*
è
;

1118 *
cSRCPå
,*
cOSRCPå
;

1119 *
wSRCPå
,*
wOSRCPå
;

1120 
LöeOff£t
;

1121 
pmu…
=
∑geid
/16;

1122 (*
LTCOL
)();

1124 
LTCOL
=
TCF
[
DøwSemiTøns
];

1126 
ldxo
=
TWö
.
Posôi⁄
.
x1
-TWö.
OPosôi⁄
.x1;

1127 
ldy
 =
TWö
.
Posôi⁄
.
y1
-TWö.
OPosôi⁄
.y1;

1129 
∑
=
px
=(*)
ubPÆëãBuf„r
;

1130 
è
=(*)
ãxtuª∑π
;

1131 
∑l°¨t
=
cx
+(
cy
*1024);

1133 
ubO∑queDøw
=0;

1135 
mode
)

1142 if(
GlobÆTextIL
)

1144 
TXV
,
TXU
,
n_xi
,
n_yi
;

1146 
wSRCPå
=
psxVuw
+
∑l°¨t
;

1148 
row
=4;do

1150 *
px
 =
	`LTCOL
(*
wSRCPå
);

1151 *(
px
+1)=
	`LTCOL
(*(
wSRCPå
+1));

1152 *(
px
+2)=
	`LTCOL
(*(
wSRCPå
+2));

1153 *(
px
+3)=
	`LTCOL
(*(
wSRCPå
+3));

1154 
row
--;
px
+=4;
wSRCPå
+=4;

1156 
row
);

1158 
cﬁumn
=
g_y2
-
ldy
;

1159 
TXV
=
g_y1
;TXV<=
cﬁumn
;TXV++)

1161 
ldx
=
ldxo
;

1162 
TXU
=
g_x1
;TXU<=
g_x2
-
ldxo
;TXU++)

1164 
n_xi
 = ( ( 
TXU
 >> 2 ) & ~0x3¯Ë+ ( ( 
TXV
 << 2 ) & 0x3c );

1165 
n_yi
 = ( 
TXV
 & ~0x‡Ë+ ( ( 
TXU
 >> 4 ) & 0xf );

1167 
s
=*(
∑
+((*–
psxVuw
 + ((
GlobÆTextAddrY
 + 
n_yi
)*1024Ë+ 
GlobÆTextAddrX
 + 
n_xi
 ) >> ( ( 
TXU
 & 0x03 ) << 2 ) ) & 0x0f ));

1168 *
è
++=
s
;

1170 if(
ldx
Ë{*
è
++=
s
;ldx--;}

1173 if(
ldy
)

1174 {
ldy
--;

1175 
TXU
=
g_x1
;TXU<=
g_x2
;TXU++)

1176 *
è
++=*—a-(
g_x2
-
g_x1
));

1180 
	`DeföeTextuªWnd
();

1187 
°¨t
=((
∑geid
-16*
pmu…
)*128)+256*2048*pmult;

1190 
wSRCPå
=
psxVuw
+
∑l°¨t
;

1191 
row
=0;row<16;row++)

1192 *
px
++=
	`LTCOL
(*
wSRCPå
++);

1194 
sxm
=
g_x1
&1;
sxh
=g_x1>>1;

1195 if(
sxm
Ë
j
=
g_x1
+1; j=g_x1;

1196 
cSRCPå
 = 
psxVub
 + 
°¨t
 + (2048*
g_y1
Ë+ 
sxh
;

1197 
cﬁumn
=
g_y1
;cﬁumn<=
g_y2
;column++)

1199 
cOSRCPå
=
cSRCPå
;
ldx
=
ldxo
;

1200 if(
sxm
Ë*
è
++=*(
∑
+((*
cSRCPå
++ >> 4) & 0xF));

1202 
row
=
j
;row<=
g_x2
-
ldxo
;row++)

1204 
s
=*(
∑
+(*
cSRCPå
 & 0xF));

1205 *
è
++=
s
;

1206 if(
ldx
Ë{*
è
++=
s
;ldx--;}

1207 
row
++;

1208 if(
row
<=
g_x2
-
ldxo
)

1210 
s
=*(
∑
+((*
cSRCPå
 >> 4) & 0xF));

1211 *
è
++=
s
;

1212 if(
ldx
Ë{*
è
++=
s
;ldx--;}

1214 
cSRCPå
++;

1216 if(
ldy
 && 
cﬁumn
&1)

1217 {
ldy
--;
cSRCPå
 = 
cOSRCPå
;}

1218 
cSRCPå
 = 
psxVub
 + 
°¨t
 + (2048*(
cﬁumn
+1)Ë+ 
sxh
;

1221 
	`DeföeTextuªWnd
();

1227 if(
GlobÆTextIL
)

1229 
TXV
,
TXU
,
n_xi
,
n_yi
;

1231 
wSRCPå
=
psxVuw
+
∑l°¨t
;

1233 
row
=64;do

1235 *
px
 =
	`LTCOL
(*
wSRCPå
);

1236 *(
px
+1)=
	`LTCOL
(*(
wSRCPå
+1));

1237 *(
px
+2)=
	`LTCOL
(*(
wSRCPå
+2));

1238 *(
px
+3)=
	`LTCOL
(*(
wSRCPå
+3));

1239 
row
--;
px
+=4;
wSRCPå
+=4;

1241 
row
);

1243 
cﬁumn
=
g_y2
-
ldy
;

1244 
TXV
=
g_y1
;TXV<=
cﬁumn
;TXV++)

1246 
ldx
=
ldxo
;

1247 
TXU
=
g_x1
;TXU<=
g_x2
-
ldxo
;TXU++)

1249 
n_xi
 = ( ( 
TXU
 >> 1 ) & ~0x78 ) + ( ( TXU << 2 ) & 0x40 ) + ( ( 
TXV
 << 3 ) & 0x38 );

1250 
n_yi
 = ( 
TXV
 & ~0x7 ) + ( ( 
TXU
 >> 5 ) & 0x7 );

1252 
s
=*(
∑
+((*–
psxVuw
 + ((
GlobÆTextAddrY
 + 
n_yi
)*1024Ë+ 
GlobÆTextAddrX
 + 
n_xi
 ) >> ( ( 
TXU
 & 0x01 ) << 3 ) ) & 0xff));

1253 *
è
++=
s
;

1254 if(
ldx
Ë{*
è
++=
s
;ldx--;}

1257 if(
ldy
)

1258 {
ldy
--;

1259 
TXU
=
g_x1
;TXU<=
g_x2
;TXU++)

1260 *
è
++=*—a-(
g_x2
-
g_x1
));

1265 
	`DeföeTextuªWnd
();

1271 
°¨t
=((
∑geid
-16*
pmu…
)*128)+256*2048*pmult;

1274 
cSRCPå
 = 
psxVub
 + 
°¨t
 + (2048*
g_y1
Ë+ 
g_x1
;

1275 
LöeOff£t
 = 2048 - (
g_x2
-
g_x1
+1Ë+
ldxo
;

1277 
cﬁumn
=
g_y1
;cﬁumn<=
g_y2
;column++)

1279 
cOSRCPå
=
cSRCPå
;
ldx
=
ldxo
;

1280 
row
=
g_x1
;row<=
g_x2
-
ldxo
;row++)

1282 
s
=
	`LTCOL
(
psxVuw
[
∑l°¨t
+ *
cSRCPå
++]);

1283 *
è
++=
s
;

1284 if(
ldx
Ë{*
è
++=
s
;ldx--;}

1286 if(
ldy
 && 
cﬁumn
&1Ë{ldy--;
cSRCPå
=
cOSRCPå
;}

1287 
cSRCPå
+=
LöeOff£t
;

1290 
	`DeföeTextuªWnd
();

1295 
°¨t
=((
∑geid
-16*
pmu…
)*64)+256*1024*pmult;

1297 
wSRCPå
 = 
psxVuw
 + 
°¨t
 + (1024*
g_y1
Ë+ 
g_x1
;

1298 
LöeOff£t
 = 1024 - (
g_x2
-
g_x1
+1Ë+
ldxo
;

1300 
cﬁumn
=
g_y1
;cﬁumn<=
g_y2
;column++)

1302 
wOSRCPå
=
wSRCPå
;
ldx
=
ldxo
;

1303 
row
=
g_x1
;row<=
g_x2
-
ldxo
;row++)

1305 
s
=
	`LTCOL
(*
wSRCPå
++);

1306 *
è
++=
s
;

1307 if(
ldx
Ë{*
è
++=
s
;ldx--;}

1309 if(
ldy
 && 
cﬁumn
&1Ë{ldy--;
wSRCPå
=
wOSRCPå
;}

1310 
wSRCPå
+=
LöeOff£t
;

1313 
	`DeföeTextuªWnd
();

1318 
	}
}

1324 
	$LﬂdPackedWndTextuªPage
(
∑geid
, 
mode
, 
cx
, 
cy
)

1326 
°¨t
,
row
,
cﬁumn
,
j
,
sxh
,
sxm
;

1327 
∑l°¨t
;

1328 *
px
,*
∑
,*
è
;

1329 *
cSRCPå
;

1330 *
wSRCPå
;

1331 
LöeOff£t
;

1332 
pmu…
=
∑geid
/16;

1333 (*
LPTCOL
)();

1335 
LPTCOL
=
PTCF
[
DøwSemiTøns
];

1337 
∑
=
px
=(*)
ubPÆëãBuf„r
;

1338 
è
=(*)
ãxtuª∑π
;

1339 
∑l°¨t
=
cx
+(
cy
*1024);

1341 
ubO∑queDøw
=0;

1343 
mode
)

1348 if(
GlobÆTextIL
)

1350 
TXV
,
TXU
,
n_xi
,
n_yi
;

1352 
wSRCPå
=
psxVuw
+
∑l°¨t
;

1353 
row
=0;row<16;row++)

1354 *
px
++=
	`LPTCOL
(*
wSRCPå
++);

1356 
TXV
=
g_y1
;TXV<=
g_y2
;TXV++)

1358 
TXU
=
g_x1
;TXU<=
g_x2
;TXU++)

1360 
n_xi
 = ( ( 
TXU
 >> 2 ) & ~0x3¯Ë+ ( ( 
TXV
 << 2 ) & 0x3c );

1361 
n_yi
 = ( 
TXV
 & ~0x‡Ë+ ( ( 
TXU
 >> 4 ) & 0xf );

1363 *
è
++=*(
∑
+((*–
psxVuw
 + ((
GlobÆTextAddrY
 + 
n_yi
)*1024Ë+ 
GlobÆTextAddrX
 + 
n_xi
 ) >> ( ( 
TXU
 & 0x03 ) << 2 ) ) & 0x0f ));

1367 
	`DeföeTextuªWnd
();

1372 
°¨t
=((
∑geid
-16*
pmu…
)*128)+256*2048*pmult;

1376 
wSRCPå
=
psxVuw
+
∑l°¨t
;

1377 
row
=0;row<16;row++)

1378 *
px
++=
	`LPTCOL
(*
wSRCPå
++);

1380 
sxm
=
g_x1
&1;
sxh
=g_x1>>1;

1381 if(
sxm
Ë
j
=
g_x1
+1; j=g_x1;

1382 
cSRCPå
 = 
psxVub
 + 
°¨t
 + (2048*
g_y1
Ë+ 
sxh
;

1383 
cﬁumn
=
g_y1
;cﬁumn<=
g_y2
;column++)

1385 
cSRCPå
 = 
psxVub
 + 
°¨t
 + (2048*
cﬁumn
Ë+ 
sxh
;

1387 if(
sxm
Ë*
è
++=*(
∑
+((*
cSRCPå
++ >> 4) & 0xF));

1389 
row
=
j
;row<=
g_x2
;row++)

1391 *
è
++=*(
∑
+(*
cSRCPå
 & 0xF)); 
row
++;

1392 if(
row
<=
g_x2
Ë*
è
++=*(
∑
+((*
cSRCPå
 >> 4) & 0xF));

1393 
cSRCPå
++;

1397 
	`DeföeTextuªWnd
();

1402 if(
GlobÆTextIL
)

1404 
TXV
,
TXU
,
n_xi
,
n_yi
;

1406 
wSRCPå
=
psxVuw
+
∑l°¨t
;

1407 
row
=0;row<256;row++)

1408 *
px
++=
	`LPTCOL
(*
wSRCPå
++);

1410 
TXV
=
g_y1
;TXV<=
g_y2
;TXV++)

1412 
TXU
=
g_x1
;TXU<=
g_x2
;TXU++)

1414 
n_xi
 = ( ( 
TXU
 >> 1 ) & ~0x78 ) + ( ( TXU << 2 ) & 0x40 ) + ( ( 
TXV
 << 3 ) & 0x38 );

1415 
n_yi
 = ( 
TXV
 & ~0x7 ) + ( ( 
TXU
 >> 5 ) & 0x7 );

1417 *
è
++=*(
∑
+((*–
psxVuw
 + ((
GlobÆTextAddrY
 + 
n_yi
)*1024Ë+ 
GlobÆTextAddrX
 + 
n_xi
 ) >> ( ( 
TXU
 & 0x01 ) << 3 ) ) & 0xff));

1421 
	`DeföeTextuªWnd
();

1426 
°¨t
=((
∑geid
-16*
pmu…
)*128)+256*2048*pmult;

1429 
cSRCPå
 = 
psxVub
 + 
°¨t
 + (2048*
g_y1
Ë+ 
g_x1
;

1430 
LöeOff£t
 = 2048 - (
g_x2
-
g_x1
+1);

1432 
cﬁumn
=
g_y1
;cﬁumn<=
g_y2
;column++)

1434 
row
=
g_x1
;row<=
g_x2
;row++)

1435 *
è
++=
	`LPTCOL
(
psxVuw
[
∑l°¨t
+ *
cSRCPå
++]);

1436 
cSRCPå
+=
LöeOff£t
;

1439 
	`DeföeTextuªWnd
();

1444 
°¨t
=((
∑geid
-16*
pmu…
)*64)+256*1024*pmult;

1445 
wSRCPå
 = 
psxVuw
 + 
°¨t
 + (1024*
g_y1
Ë+ 
g_x1
;

1446 
LöeOff£t
 = 1024 - (
g_x2
-
g_x1
+1);

1448 
cﬁumn
=
g_y1
;cﬁumn<=
g_y2
;column++)

1450 
row
=
g_x1
;row<=
g_x2
;row++)

1451 *
è
++=
	`LPTCOL
(*
wSRCPå
++);

1452 
wSRCPå
+=
LöeOff£t
;

1455 
	`DeföeTextuªWnd
();

1460 
	}
}

1466 
	$LﬂdWndTextuªPage
(
∑geid
, 
mode
, 
cx
, 
cy
)

1468 
°¨t
,
row
,
cﬁumn
,
j
,
sxh
,
sxm
;

1469 
∑l°¨t
;

1470 *
px
,*
∑
,*
è
;

1471 *
cSRCPå
;

1472 *
wSRCPå
;

1473 
LöeOff£t
;

1474 
pmu…
=
∑geid
/16;

1475 (*
LTCOL
)();

1477 
LTCOL
=
TCF
[
DøwSemiTøns
];

1479 
∑
=
px
=(*)
ubPÆëãBuf„r
;

1480 
è
=(*)
ãxtuª∑π
;

1481 
∑l°¨t
=
cx
+(
cy
*1024);

1483 
ubO∑queDøw
=0;

1485 
mode
)

1490 if(
GlobÆTextIL
)

1492 
TXV
,
TXU
,
n_xi
,
n_yi
;

1494 
wSRCPå
=
psxVuw
+
∑l°¨t
;

1496 
row
=4;do

1498 *
px
 =
	`LTCOL
(*
wSRCPå
);

1499 *(
px
+1)=
	`LTCOL
(*(
wSRCPå
+1));

1500 *(
px
+2)=
	`LTCOL
(*(
wSRCPå
+2));

1501 *(
px
+3)=
	`LTCOL
(*(
wSRCPå
+3));

1502 
row
--;
px
+=4;
wSRCPå
+=4;

1504 
row
);

1506 
TXV
=
g_y1
;TXV<=
g_y2
;TXV++)

1508 
TXU
=
g_x1
;TXU<=
g_x2
;TXU++)

1510 
n_xi
 = ( ( 
TXU
 >> 2 ) & ~0x3¯Ë+ ( ( 
TXV
 << 2 ) & 0x3c );

1511 
n_yi
 = ( 
TXV
 & ~0x‡Ë+ ( ( 
TXU
 >> 4 ) & 0xf );

1513 *
è
++=*(
∑
+((*–
psxVuw
 + ((
GlobÆTextAddrY
 + 
n_yi
)*1024Ë+ 
GlobÆTextAddrX
 + 
n_xi
 ) >> ( ( 
TXU
 & 0x03 ) << 2 ) ) & 0x0f ));

1517 
	`DeföeTextuªWnd
();

1522 
°¨t
=((
∑geid
-16*
pmu…
)*128)+256*2048*pmult;

1526 
wSRCPå
=
psxVuw
+
∑l°¨t
;

1527 
row
=0;row<16;row++)

1528 *
px
++=
	`LTCOL
(*
wSRCPå
++);

1530 
sxm
=
g_x1
&1;
sxh
=g_x1>>1;

1531 if(
sxm
Ë
j
=
g_x1
+1; j=g_x1;

1532 
cSRCPå
 = 
psxVub
 + 
°¨t
 + (2048*
g_y1
Ë+ 
sxh
;

1533 
cﬁumn
=
g_y1
;cﬁumn<=
g_y2
;column++)

1535 
cSRCPå
 = 
psxVub
 + 
°¨t
 + (2048*
cﬁumn
Ë+ 
sxh
;

1537 if(
sxm
Ë*
è
++=*(
∑
+((*
cSRCPå
++ >> 4) & 0xF));

1539 
row
=
j
;row<=
g_x2
;row++)

1541 *
è
++=*(
∑
+(*
cSRCPå
 & 0xF)); 
row
++;

1542 if(
row
<=
g_x2
Ë*
è
++=*(
∑
+((*
cSRCPå
 >> 4) & 0xF));

1543 
cSRCPå
++;

1547 
	`DeföeTextuªWnd
();

1552 if(
GlobÆTextIL
)

1554 
TXV
,
TXU
,
n_xi
,
n_yi
;

1556 
wSRCPå
=
psxVuw
+
∑l°¨t
;

1558 
row
=64;do

1560 *
px
 =
	`LTCOL
(*
wSRCPå
);

1561 *(
px
+1)=
	`LTCOL
(*(
wSRCPå
+1));

1562 *(
px
+2)=
	`LTCOL
(*(
wSRCPå
+2));

1563 *(
px
+3)=
	`LTCOL
(*(
wSRCPå
+3));

1564 
row
--;
px
+=4;
wSRCPå
+=4;

1566 
row
);

1568 
TXV
=
g_y1
;TXV<=
g_y2
;TXV++)

1570 
TXU
=
g_x1
;TXU<=
g_x2
;TXU++)

1572 
n_xi
 = ( ( 
TXU
 >> 1 ) & ~0x78 ) + ( ( TXU << 2 ) & 0x40 ) + ( ( 
TXV
 << 3 ) & 0x38 );

1573 
n_yi
 = ( 
TXV
 & ~0x7 ) + ( ( 
TXU
 >> 5 ) & 0x7 );

1575 *
è
++=*(
∑
+((*–
psxVuw
 + ((
GlobÆTextAddrY
 + 
n_yi
)*1024Ë+ 
GlobÆTextAddrX
 + 
n_xi
 ) >> ( ( 
TXU
 & 0x01 ) << 3 ) ) & 0xff));

1579 
	`DeföeTextuªWnd
();

1584 
°¨t
=((
∑geid
-16*
pmu…
)*128)+256*2048*pmult;

1587 
cSRCPå
 = 
psxVub
 + 
°¨t
 + (2048*
g_y1
Ë+ 
g_x1
;

1588 
LöeOff£t
 = 2048 - (
g_x2
-
g_x1
+1);

1590 
cﬁumn
=
g_y1
;cﬁumn<=
g_y2
;column++)

1592 
row
=
g_x1
;row<=
g_x2
;row++)

1593 *
è
++=
	`LTCOL
(
psxVuw
[
∑l°¨t
+ *
cSRCPå
++]);

1594 
cSRCPå
+=
LöeOff£t
;

1597 
	`DeföeTextuªWnd
();

1602 
°¨t
=((
∑geid
-16*
pmu…
)*64)+256*1024*pmult;

1604 
wSRCPå
 = 
psxVuw
 + 
°¨t
 + (1024*
g_y1
Ë+ 
g_x1
;

1605 
LöeOff£t
 = 1024 - (
g_x2
-
g_x1
+1);

1607 
cﬁumn
=
g_y1
;cﬁumn<=
g_y2
;column++)

1609 
row
=
g_x1
;row<=
g_x2
;row++)

1610 *
è
++=
	`LTCOL
(*
wSRCPå
++);

1611 
wSRCPå
+=
LöeOff£t
;

1614 
	`DeföeTextuªWnd
();

1619 
	}
}

1626 
	$U∂ﬂdTexWndPÆ
(
mode
,
cx
,
cy
)

1628 
i
,
iSize
;

1629 * 
wSrcPå
;

1630 * 
è
=(*)
ãxtuª∑π
;

1632 
wSrcPå
=
psxVuw
+
cx
+(
cy
*1024);

1633 if(
mode
==0Ë
i
=4; i=64;

1634 
iSize
=
i
<<2;

1635 
ubO∑queDøw
=0;

1639 *
è
 =
	`PALCOL
(*
wSrcPå
);

1640 *(
è
+1)=
	`PALCOL
(*(
wSrcPå
+1));

1641 *(
è
+2)=
	`PALCOL
(*(
wSrcPå
+2));

1642 *(
è
+3)=
	`PALCOL
(*(
wSrcPå
+3));

1643 
è
+=4;
wSrcPå
+=4;
i
--;

1645 
i
);

1649  
	}
}

1653 
	$DeföePÆTextuªWnd
()

1655 if(
gTexName
==0)

1656 
	`glGíTextuªs
(1, &
gTexName
);

1657 
	`glEº‹
();

1658 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
gTexName
);

1659 
	`glEº‹
();

1660 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_S
, 
GL_REPEAT
);

1661 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_T
, 
GL_REPEAT
);

1662 
	`glEº‹
();

1664 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
iFûãr
);

1665 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
iFûãr
);

1667 
	`glEº‹
();

1668 
	`glTexImage2D
(
GL_TEXTURE_2D
, 0,
GL_RGBA
,

1669 
TWö
.
Posôi⁄
.
x1
,

1670 
TWö
.
Posôi⁄
.
y1
,

1671 0, 
GL_RGBA
, 
GL_UNSIGNED_BYTE
,
ãxtuª∑π
);

1672 
	`glEº‹
();

1674 
	}
}

1678 
	$LﬂdPÆWndTextuªPage
(
∑geid
, 
mode
, 
cx
, 
cy
)

1680 
°¨t
,
row
,
cﬁumn
,
j
,
sxh
,
sxm
;

1681 *
è
;

1682 *
cSRCPå
;

1683 
LöeOff£t
;

1684 
pmu…
=
∑geid
/16;

1686 
è
=(*)
ãxtuª∑π
;

1688 
mode
)

1693 
°¨t
=((
∑geid
-16*
pmu…
)*128)+256*2048*pmult;

1695 
sxm
=
g_x1
&1;
sxh
=g_x1>>1;

1696 if(
sxm
Ë
j
=
g_x1
+1; j=g_x1;

1697 
cSRCPå
 = 
psxVub
 + 
°¨t
 + (2048*
g_y1
Ë+ 
sxh
;

1698 
cﬁumn
=
g_y1
;cﬁumn<=
g_y2
;column++)

1700 
cSRCPå
 = 
psxVub
 + 
°¨t
 + (2048*
cﬁumn
Ë+ 
sxh
;

1702 if(
sxm
Ë*
è
++=((*
cSRCPå
++ >> 4) & 0xF);

1704 
row
=
j
;row<=
g_x2
;row++)

1706 *
è
++=(*
cSRCPå
 & 0xF); 
row
++;

1707 if(
row
<=
g_x2
Ë*
è
++=((*
cSRCPå
 >> 4) & 0xF);

1708 
cSRCPå
++;

1712 
	`DeföePÆTextuªWnd
();

1717 
°¨t
=((
∑geid
-16*
pmu…
)*128)+256*2048*pmult;

1720 
cSRCPå
 = 
psxVub
 + 
°¨t
 + (2048*
g_y1
Ë+ 
g_x1
;

1721 
LöeOff£t
 = 2048 - (
g_x2
-
g_x1
+1);

1723 
cﬁumn
=
g_y1
;cﬁumn<=
g_y2
;column++)

1725 
row
=
g_x1
;row<=
g_x2
;row++)

1726 *
è
++=*
cSRCPå
++;

1727 
cSRCPå
+=
LöeOff£t
;

1730 
	`DeföePÆTextuªWnd
();

1733 
	`U∂ﬂdTexWndPÆ
(
mode
,
cx
,
cy
);

1734 
	}
}

1738 
	$LﬂdSåëchPÆWndTextuªPage
(
∑geid
, 
mode
, 
cx
, 
cy
)

1740 
°¨t
,
row
,
cﬁumn
,
j
,
sxh
,
sxm
,
ldx
,
ldy
,
ldxo
;

1741 *
è
,
s
;

1742 *
cSRCPå
,*
cOSRCPå
;

1743 
LöeOff£t
;

1744 
pmu…
=
∑geid
/16;

1746 
ldxo
=
TWö
.
Posôi⁄
.
x1
-TWö.
OPosôi⁄
.x1;

1747 
ldy
 =
TWö
.
Posôi⁄
.
y1
-TWö.
OPosôi⁄
.y1;

1749 
è
=(*)
ãxtuª∑π
;

1751 
mode
)

1756 
°¨t
=((
∑geid
-16*
pmu…
)*128)+256*2048*pmult;

1758 
sxm
=
g_x1
&1;
sxh
=g_x1>>1;

1759 if(
sxm
Ë
j
=
g_x1
+1; j=g_x1;

1760 
cSRCPå
 = 
psxVub
 + 
°¨t
 + (2048*
g_y1
Ë+ 
sxh
;

1761 
cﬁumn
=
g_y1
;cﬁumn<=
g_y2
;column++)

1763 
cOSRCPå
=
cSRCPå
;
ldx
=
ldxo
;

1764 if(
sxm
Ë*
è
++=((*
cSRCPå
++ >> 4) & 0xF);

1766 
row
=
j
;row<=
g_x2
-
ldxo
;row++)

1768 
s
=(*
cSRCPå
 & 0xF);

1769 *
è
++=
s
;

1770 if(
ldx
Ë{*
è
++=
s
;ldx--;}

1771 
row
++;

1772 if(
row
<=
g_x2
-
ldxo
)

1774 
s
=((*
cSRCPå
 >> 4) & 0xF);

1775 *
è
++=
s
;

1776 if(
ldx
Ë{*
è
++=
s
;ldx--;}

1778 
cSRCPå
++;

1780 if(
ldy
 && 
cﬁumn
&1)

1781 {
ldy
--;
cSRCPå
 = 
cOSRCPå
;}

1782 
cSRCPå
 = 
psxVub
 + 
°¨t
 + (2048*(
cﬁumn
+1)Ë+ 
sxh
;

1785 
	`DeföePÆTextuªWnd
();

1790 
°¨t
=((
∑geid
-16*
pmu…
)*128)+256*2048*pmult;

1792 
cSRCPå
 = 
psxVub
 + 
°¨t
 + (2048*
g_y1
Ë+ 
g_x1
;

1793 
LöeOff£t
 = 2048 - (
g_x2
-
g_x1
+1Ë+
ldxo
;

1795 
cﬁumn
=
g_y1
;cﬁumn<=
g_y2
;column++)

1797 
cOSRCPå
=
cSRCPå
;
ldx
=
ldxo
;

1798 
row
=
g_x1
;row<=
g_x2
-
ldxo
;row++)

1800 
s
=*
cSRCPå
++;

1801 *
è
++=
s
;

1802 if(
ldx
Ë{*
è
++=
s
;ldx--;}

1804 if(
ldy
 && 
cﬁumn
&1Ë{ldy--;
cSRCPå
=
cOSRCPå
;}

1805 
cSRCPå
+=
LöeOff£t
;

1808 
	`DeföePÆTextuªWnd
();

1811 
	`U∂ﬂdTexWndPÆ
(
mode
,
cx
,
cy
);

1812 
	}
}

1818 
GLuöt
 
	$LﬂdTextuªWnd
(
∑geid
,
TextuªMode
,
GivíClutId
)

1820 
ãxtuªWndCacheE¡ry
 * 
ts
, * 
tsx
=
NULL
;

1821 
i
;
cx
,
cy
;

1822 
EXL⁄g
 
≈os
;

1824 
≈os
.
c
[3]=
TWö
.
Posôi⁄
.
x0
;

1825 
≈os
.
c
[2]=
TWö
.
OPosôi⁄
.
x1
;

1826 
≈os
.
c
[1]=
TWö
.
Posôi⁄
.
y0
;

1827 
≈os
.
c
[0]=
TWö
.
OPosôi⁄
.
y1
;

1829 
g_x1
=
TWö
.
Posôi⁄
.
x0
;
g_x2
=g_x1+TWö.Posôi⁄.
x1
-1;

1830 
g_y1
=
TWö
.
Posôi⁄
.
y0
;
g_y2
=g_y1+TWö.Posôi⁄.
y1
-1;

1832 if(
TextuªMode
==2Ë{
GivíClutId
=0;
cx
=
cy
=0;}

1835 
cx
=((
GivíClutId
 << 4Ë& 0x3F0);
cy
=((GivíClutId >> 6Ë& 
CLUTYMASK
);

1836 
GivíClutId
=(GivíClutId&
CLUTMASK
)|(
DøwSemiTøns
<<30);

1840 
l
=0,
row
;

1841 * 
lSRCPå
=(*)(
psxVuw
+
cx
+(
cy
*1024));

1842 if(
TextuªMode
==1Ë
row
=1;row<129;row++Ë
l
+=((*
lSRCPå
++)-1)*row;

1843 
row
=1;row<9;row++Ë
l
+=((*
lSRCPå
++)-1)<<row;

1844 
l
=÷+
	`HIWORD
(l))&0x3fffL;

1845 
GivíClutId
|=(
l
<<16);

1850 
ts
=
wcWndãxSt‹e
;

1852 
i
=0;i<
iMaxTexWnds
;i++,
ts
++)

1854 if(
ts
->
u£d
)

1856 if(
ts
->
pos
.
l
==
≈os
.l &&

1857 
ts
->
∑geid
==pageid &&

1858 
ts
->
ãxtuªMode
==
TextuªMode
)

1860 if(
ts
->
ClutID
==
GivíClutId
)

1862 
ubO∑queDøw
=
ts
->
O∑que
;

1863  
ts
->
ãx«me
;

1867 
tsx
=
ts
;

1870 if(!
tsx
)

1872 if(
iMaxTexWnds
==
iTexWndLimô
)

1874 
tsx
=
wcWndãxSt‹e
+
iTexWndTu∫
;

1875 
iTexWndTu∫
++;

1876 if(
iTexWndTu∫
==
iTexWndLimô
) iTexWndTurn=0;

1880 
tsx
=
wcWndãxSt‹e
+
iMaxTexWnds
;

1881 
iMaxTexWnds
++;

1885 
gTexName
=
tsx
->
ãx«me
;

1887 if(
TWö
.
OPosôi⁄
.
y1
==TWö.
Posôi⁄
.y1 &&

1888 
TWö
.
OPosôi⁄
.
x1
==TWö.
Posôi⁄
.x1)

1890 
	`LﬂdWndTextuªPage
(
∑geid
,
TextuªMode
,
cx
,
cy
);

1894 
	`LﬂdSåëchWndTextuªPage
(
∑geid
,
TextuªMode
,
cx
,
cy
);

1897 
tsx
->
O∑que
=
ubO∑queDøw
;

1898 
tsx
->
pos
.
l
=
≈os
.l;

1899 
tsx
->
ClutID
=
GivíClutId
;

1900 
tsx
->
∑geid
=pageid;

1901 
tsx
->
ãxtuªMode
=
TextuªMode
;

1902 
tsx
->
ãx«me
=
gTexName
;

1903 
tsx
->
u£d
=1;

1905  
gTexName
;

1906 
	}
}

1916 
	$DeföePackedTextuªMovõ
()

1918 if(
gTexMovõName
==0)

1920 
	`glE«bÀ
(
GL_TEXTURE_2D
);

1921 
	`glGíTextuªs
(1, &
gTexMovõName
); 
	`glEº‹
();

1922 
gTexName
=
gTexMovõName
;

1923 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
gTexName
); 
	`glEº‹
();

1925 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_S
, 
iCœmpTy≥
); 
	`glEº‹
();

1926 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_T
, 
iCœmpTy≥
); 
	`glEº‹
();

1928 if(!
bU£Fa°Mdec
)

1930 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
GL_LINEAR
); 
	`glEº‹
();

1931 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
GL_LINEAR
); 
	`glEº‹
();

1935 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
iFûãr
); 
	`glEº‹
();

1936 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
iFûãr
); 
	`glEº‹
();

1939 
	`glTexImage2D
(
GL_TEXTURE_2D
, 0,

1940 
GL_RGBA
,

1941 256, 256, 0, 
GL_RGBA
, 
GL_UNSIGNED_BYTE
, 
ãxtuª∑π
); 
	`glEº‹
();

1945 
gTexName
=
gTexMovõName
;
	`glBödTextuª
(
GL_TEXTURE_2D
, gTexName); 
	`glEº‹
();

1948 
	`glTexSubImage2D
(
GL_TEXTURE_2D
, 0, 0, 0,

1949 (
xrMovõAªa
.
x1
-xrMovõAªa.
x0
),

1950 (
xrMovõAªa
.
y1
-xrMovõAªa.
y0
),

1951 
GL_RGBA
,

1952 
GL_UNSIGNED_SHORT
,

1953 
ãxtuª∑π
); 
	`glEº‹
();

1956 
	}
}

1960 
	$DeföeTextuªMovõ
()

1962 if(
gTexMovõName
==0)

1964 
	`glGíTextuªs
(1, &
gTexMovõName
); 
	`glEº‹
();

1965 
gTexName
=
gTexMovõName
;

1966 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
gTexName
); 
	`glEº‹
();

1968 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_S
, 
iCœmpTy≥
); 
	`glEº‹
();

1969 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_T
, 
iCœmpTy≥
); 
	`glEº‹
();

1971 if(!
bU£Fa°Mdec
)

1973 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
GL_LINEAR
); 
	`glEº‹
();

1974 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
GL_LINEAR
); 
	`glEº‹
();

1978 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
iFûãr
); 
	`glEº‹
();

1979 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
iFûãr
); 
	`glEº‹
();

1982 
	`glTexImage2D
(
GL_TEXTURE_2D
, 0, 
GL_RGBA
, 256, 256, 0, GL_RGBA, 
GL_UNSIGNED_BYTE
, 
ãxtuª∑π
); 
	`glEº‹
();

1986 
gTexName
=
gTexMovõName
;
	`glBödTextuª
(
GL_TEXTURE_2D
, gTexName); 
	`glEº‹
();

1989 
	`glTexSubImage2D
(
GL_TEXTURE_2D
, 0, 0, 0,

1990 (
xrMovõAªa
.
x1
-xrMovõAªa.
x0
),

1991 (
xrMovõAªa
.
y1
-xrMovõAªa.
y0
),

1992 
GL_RGBA
, 
GL_UNSIGNED_BYTE
, 
ãxtuª∑π
); 
	`glEº‹
();

1994 
	}
}

2000 
	#MRED
(
x
Ë((x>>3Ë& 0x1f)

	)

2001 
	#MGREEN
(
x
Ë((x>>6Ë& 0x3e0)

	)

2002 
	#MBLUE
(
x
Ë((x>>9Ë& 0x7c00)

	)

2004 
	#XMGREEN
(
x
Ë((x>>5Ë& 0x07c0)

	)

2005 
	#XMRED
(
x
Ë((x<<8Ë& 0xf800)

	)

2006 
	#XMBLUE
(
x
Ë((x>>18Ë& 0x003e)

	)

2012 * 
	$LﬂdDúe˘MovõFa°
()

2014 
row
,
cﬁumn
;

2015 
°¨txy
;

2017 * 
è
=(*)
ãxtuª∑π
;

2019 if(
PSXDi•œy
.
RGB24
)

2021 * 
pD
;

2023 
°¨txy
=((1024)*
xrMovõAªa
.
y0
)+xrMovõAªa.
x0
;

2025 
cﬁumn
=
xrMovõAªa
.
y0
;cﬁumn<xrMovõAªa.
y1
;cﬁumn++,
°¨txy
+=1024)

2027 
pD
=(*)&
psxVuw
[
°¨txy
];

2028 
row
=
xrMovõAªa
.
x0
;row<xrMovõAªa.
x1
;row++)

2030 *
è
++=*((*)
pD
)|0xff000000;

2031 
pD
+=3;

2037 (*
LTCOL
)();

2039 
LTCOL
=
XP8RGBA_0
;

2041 
ubO∑queDøw
=0;

2043 
cﬁumn
=
xrMovõAªa
.
y0
;cﬁumn<xrMovõAªa.
y1
;column++)

2045 
°¨txy
=((1024)*
cﬁumn
)+
xrMovõAªa
.
x0
;

2046 
row
=
xrMovõAªa
.
x0
;row<xrMovõAªa.
x1
;row++)

2047 *
è
++=
	`LTCOL
(
psxVuw
[
°¨txy
++]|0x8000);

2051  
ãxtuª∑π
;

2052 
	}
}

2056 
GLuöt
 
	$LﬂdTextuªMovõFa°
()

2058 
row
,
cﬁumn
;

2059 
°¨t
,
°¨txy
;

2062 if(
PSXDi•œy
.
RGB24
)

2064 * 
pD
;

2065 * 
è
=(*)
ãxtuª∑π
;

2067 
°¨txy
=((1024)*
xrMovõAªa
.
y0
)+xrMovõAªa.
x0
;

2069 
cﬁumn
=
xrMovõAªa
.
y0
;cﬁumn<xrMovõAªa.
y1
;cﬁumn++,
°¨txy
+=1024)

2072 
pD
=(*)&
psxVuw
[
°¨txy
];

2073 
row
=
xrMovõAªa
.
x0
;row<xrMovõAªa.
x1
;row++)

2075 *
è
++=*((*)
pD
)|0xff000000;

2076 
pD
+=3;

2082 (*
LTCOL
)();

2083 *
è
;

2085 
LTCOL
=
XP8RGBA_0
;

2087 
ubO∑queDøw
=0;

2088 
è
=(*)
ãxtuª∑π
;

2090 
cﬁumn
=
xrMovõAªa
.
y0
;cﬁumn<xrMovõAªa.
y1
;column++)

2092 
°¨txy
=((1024)*
cﬁumn
)+
xrMovõAªa
.
x0
;

2093 
row
=
xrMovõAªa
.
x0
;row<xrMovõAªa.
x1
;row++)

2094 *
è
++=
	`LTCOL
(
psxVuw
[
°¨txy
++]|0x8000);

2097 
	`DeföeTextuªMovõ
();

2099  
gTexName
;

2100 
	}
}

2104 
GLuöt
 
	$LﬂdTextuªMovõ
()

2106 
row
,
cﬁumn
,
dx
;

2107 
°¨txy
;

2108 
BOOL
 
b_X
,
b_Y
;

2110 if(
bU£Fa°Mdec
Ë 
	`LﬂdTextuªMovõFa°
();

2112 
b_X
=
FALSE
;
b_Y
=FALSE;

2114 if((
xrMovõAªa
.
x1
-xrMovõAªa.
x0
)<255Ë
b_X
=
TRUE
;

2115 if((
xrMovõAªa
.
y1
-xrMovõAªa.
y0
)<255Ë
b_Y
=
TRUE
;

2118 if(
PSXDi•œy
.
RGB24
)

2120 * 
pD
;

2121 * 
è
=(*)
ãxtuª∑π
;

2123 if(
b_X
)

2125 
cﬁumn
=
xrMovõAªa
.
y0
;cﬁumn<xrMovõAªa.
y1
;column++)

2127 
°¨txy
=((1024)*
cﬁumn
)+
xrMovõAªa
.
x0
;

2128 
pD
=(*)&
psxVuw
[
°¨txy
];

2129 
row
=
xrMovõAªa
.
x0
;row<xrMovõAªa.
x1
;row++)

2131 *
è
++=*((*)
pD
)|0xff000000;

2132 
pD
+=3;

2134 *
è
++=*(ta-1);

2136 if(
b_Y
)

2138 
dx
=
xrMovõAªa
.
x1
-xrMovõAªa.
x0
+1;

2139 
row
=
xrMovõAªa
.
x0
;row<xrMovõAªa.
x1
;row++)

2140 *
è
++=*—a-
dx
);

2141 *
è
++=*(ta-1);

2146 
cﬁumn
=
xrMovõAªa
.
y0
;cﬁumn<xrMovõAªa.
y1
;column++)

2148 
°¨txy
=((1024)*
cﬁumn
)+
xrMovõAªa
.
x0
;

2149 
pD
=(*)&
psxVuw
[
°¨txy
];

2150 
row
=
xrMovõAªa
.
x0
;row<xrMovõAªa.
x1
;row++)

2152 *
è
++=*((*)
pD
)|0xff000000;

2153 
pD
+=3;

2156 if(
b_Y
)

2158 
dx
=
xrMovõAªa
.
x1
-xrMovõAªa.
x0
;

2159 
row
=
xrMovõAªa
.
x0
;row<xrMovõAªa.
x1
;row++)

2160 *
è
++=*—a-
dx
);

2166 (*
LTCOL
)();

2167 *
è
;

2169 
LTCOL
=
XP8RGBA_0
;

2171 
ubO∑queDøw
=0;

2172 
è
=(*)
ãxtuª∑π
;

2174 if(
b_X
)

2176 
cﬁumn
=
xrMovõAªa
.
y0
;cﬁumn<xrMovõAªa.
y1
;column++)

2178 
°¨txy
=((1024)*
cﬁumn
)+
xrMovõAªa
.
x0
;

2179 
row
=
xrMovõAªa
.
x0
;row<xrMovõAªa.
x1
;row++)

2180 *
è
++=
	`LTCOL
(
psxVuw
[
°¨txy
++]|0x8000);

2181 *
è
++=*(ta-1);

2184 if(
b_Y
)

2186 
dx
=
xrMovõAªa
.
x1
-xrMovõAªa.
x0
+1;

2187 
row
=
xrMovõAªa
.
x0
;row<xrMovõAªa.
x1
;row++)

2188 *
è
++=*—a-
dx
);

2189 *
è
++=*(ta-1);

2194 
cﬁumn
=
xrMovõAªa
.
y0
;cﬁumn<xrMovõAªa.
y1
;column++)

2196 
°¨txy
=((1024)*
cﬁumn
)+
xrMovõAªa
.
x0
;

2197 
row
=
xrMovõAªa
.
x0
;row<xrMovõAªa.
x1
;row++)

2198 *
è
++=
	`LTCOL
(
psxVuw
[
°¨txy
++]|0x8000);

2201 if(
b_Y
)

2203 
dx
=
xrMovõAªa
.
x1
-xrMovõAªa.
x0
;

2204 
row
=
xrMovõAªa
.
x0
;row<xrMovõAªa.
x1
;row++)

2205 *
è
++=*—a-
dx
);

2210 
xrMovõAªa
.
x1
+=
b_X
;xrMovõAªa.
y1
+=
b_Y
;

2211 
	`DeföeTextuªMovõ
();

2212 
xrMovõAªa
.
x1
-=
b_X
;xrMovõAªa.
y1
-=
b_Y
;

2214  
gTexName
;

2215 
	}
}

2221 
GLuöt
 
	$BœckFake15BôTextuª
()

2223 
pmu…
;
x1
,
x2
,
y1
,
y2
;

2225 if(
PSXDi•œy
.
I¡îœ˚dTe°
)  0;

2227 
pmu…
=
GlobÆTextuªPage
/16;

2228 
x1
=
gl_ux
[7];

2229 
x2
=
gl_ux
[6]-gl_ux[7];

2230 
y1
=
gl_ux
[5];

2231 
y2
=
gl_ux
[4]-gl_ux[5];

2233 if(
iS¥ôeTex
)

2235 if(
x2
<255) x2++;

2236 if(
y2
<255) y2++;

2239 
y1
+=
pmu…
*256;

2240 
x1
+=((
GlobÆTextuªPage
-16*
pmu…
)<<6);

2242 if–
	`Fa°CheckAgaö°Fr⁄tS¸ìn
(
x1
,
y1
,
x2
,
y2
)

2243 || 
	`Fa°CheckAgaö°S¸ìn
(
x1
,
y1
,
x2
,
y2
))

2245 if(!
gTexFømeName
)

2247 
	`glGíTextuªs
(1, &
gTexFømeName
); 
	`glEº‹
();

2248 
gTexName
=
gTexFømeName
;

2249 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
gTexName
); 
	`glEº‹
();

2251 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_S
, 
iCœmpTy≥
); 
	`glEº‹
();

2252 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_T
, 
iCœmpTy≥
); 
	`glEº‹
();

2253 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
iFûãr
); 
	`glEº‹
();

2254 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
iFûãr
); 
	`glEº‹
();

2257 * 
è
=(*)
ãxtuª∑π
;

2258 
y1
=0;y1<=4;y1++)

2259 
x1
=0;x1<=4;x1++)

2260 *
è
++=0xff000000;

2262 
	`glTexImage2D
(
GL_TEXTURE_2D
, 0, 
GL_RGBA
, 4, 4, 0, GL_RGBA, 
GL_UNSIGNED_BYTE
, 
ãxtuª∑π
); 
	`glEº‹
();

2267 
gTexName
=
gTexFømeName
;

2268 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
gTexName
); 
	`glEº‹
();

2271 
ubO∑queDøw
=0;

2273  (
GLuöt
)
gTexName
;

2276 
	}
}

2280 
BOOL
 
	gbFakeFr⁄tBuf„r
=
FALSE
;

2281 
BOOL
 
	gbIgn‹eNextTûe
 =
FALSE
;

2283 
	giFTex
=512;

2285 
GLuöt
 
	$Fake15BôTextuª
()

2287 
pmu…
;
x1
,
x2
,
y1
,
y2
;
iYAdju°
;

2288 
SˇÀX
,
SˇÀY
;
RECT
 
rSrc
;

2290 if(
iFømeTexTy≥
==1Ë 
	`BœckFake15BôTextuª
();

2291 if(
PSXDi•œy
.
I¡îœ˚dTe°
)  0;

2293 
pmu…
=
GlobÆTextuªPage
/16;

2294 
x1
=
gl_ux
[7];

2295 
x2
=
gl_ux
[6]-gl_ux[7];

2296 
y1
=
gl_ux
[5];

2297 
y2
=
gl_ux
[4]-gl_ux[5];

2299 
y1
+=
pmu…
*256;

2300 
x1
+=((
GlobÆTextuªPage
-16*
pmu…
)<<6);

2302 if(
iFømeTexTy≥
==3)

2304 if(
iFømeRódTy≥
==4)  0;

2306 if(!
	`Fa°CheckAgaö°Fr⁄tS¸ìn
(
x1
,
y1
,
x2
,
y2
) &&

2307 !
	`Fa°CheckAgaö°S¸ìn
(
x1
,
y1
,
x2
,
y2
))

2310 if(
bFakeFr⁄tBuf„r
Ë
bIgn‹eNextTûe
=
TRUE
;

2311 
	`CheckVRamRódEx
(
x1
,
y1
,x1+
x2
,y1+
y2
);

2317 if(
	`Fa°CheckAgaö°Fr⁄tS¸ìn
(
x1
,
y1
,
x2
,
y2
))

2319 
x1
-=
PSXDi•œy
.
Di•œyPosôi⁄
.
x
;

2320 
y1
-=
PSXDi•œy
.
Di•œyPosôi⁄
.
y
;

2323 if(
	`Fa°CheckAgaö°S¸ìn
(
x1
,
y1
,
x2
,
y2
))

2325 
x1
-=
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
;

2326 
y1
-=
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
;

2330 
bDøwMu…iPass
 = 
FALSE
;

2332 if(!
gTexFømeName
)

2334 * 
p
;

2336 if(
iResX
>1280 || 
iResY
>1024Ë
iFTex
=2048;

2338 if(
iResX
>640 || 
iResY
>480Ë
iFTex
=1024;

2339 
iFTex
=512;

2341 
	`glGíTextuªs
(1, &
gTexFømeName
); 
	`glEº‹
();

2342 
gTexName
=
gTexFømeName
;

2343 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
gTexName
); 
	`glEº‹
();

2345 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_S
, 
iCœmpTy≥
); 
	`glEº‹
();

2346 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_T
, 
iCœmpTy≥
); 
	`glEº‹
();

2347 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
iFûãr
); 
	`glEº‹
();

2348 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
iFûãr
); 
	`glEº‹
();

2350 
p
=(*)
	`mÆloc
(
iFTex
*iFTex*4);

2351 
	`mem£t
(
p
,0,
iFTex
*iFTex*4);

2352 
	`glTexImage2D
(
GL_TEXTURE_2D
, 0, 
GL_RGBA
, 
iFTex
, iFTex, 0, GL_RGBA, 
GL_UNSIGNED_BYTE
, 
p
); 
	`glEº‹
();

2353 
	`‰ì
(
p
);

2355 
	`glGëEº‹
();

2359 
gTexName
=
gTexFømeName
;

2360 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
gTexName
); 
	`glEº‹
();

2363 
x1
+=
PªviousPSXDi•œy
.
R™ge
.
x0
;

2364 
y1
+=
PªviousPSXDi•œy
.
R™ge
.
y0
;

2366 if(
PSXDi•œy
.
Di•œyMode
.
x
)

2367 
SˇÀX
=()
rR©ioRe˘
.
right
/()
PSXDi•œy
.
Di•œyMode
.
x
;

2368 
SˇÀX
=1.0f;

2369 if(
PSXDi•œy
.
Di•œyMode
.
y
)

2370 
SˇÀY
=()
rR©ioRe˘
.
bŸtom
/()
PSXDi•œy
.
Di•œyMode
.
y
;

2371 
SˇÀY
=1.0f;

2373 
rSrc
.
À·
 =
	`max
(
x1
*
SˇÀX
,0);

2374 
rSrc
.
right
 =
	`mö
((
x1
+
x2
)*
SˇÀX
+0.99f,
iResX
-1);

2375 
rSrc
.
t›
 =
	`max
(
y1
*
SˇÀY
,0);

2376 
rSrc
.
bŸtom
=
	`mö
((
y1
+
y2
)*
SˇÀY
+0.99f,
iResY
-1);

2378 
iYAdju°
=(
y1
+
y2
)-
PSXDi•œy
.
Di•œyMode
.
y
;

2379 if(
iYAdju°
>0)

2380 
iYAdju°
=()(()iYAdju°*
SˇÀY
)+1;

2381 
iYAdju°
=0;

2383 
gl_vy
[0]=255-gl_vy[0];

2384 
gl_vy
[1]=255-gl_vy[1];

2385 
gl_vy
[2]=255-gl_vy[2];

2386 
gl_vy
[3]=255-gl_vy[3];

2388 
y1
=
	`mö
(
gl_vy
[0],min(gl_vy[1],min(gl_vy[2],gl_vy[3])));

2390 
gl_vy
[0]-=
y1
;

2391 
gl_vy
[1]-=
y1
;

2392 
gl_vy
[2]-=
y1
;

2393 
gl_vy
[3]-=
y1
;

2394 
gl_ux
[0]-=gl_ux[7];

2395 
gl_ux
[1]-=gl_ux[7];

2396 
gl_ux
[2]-=gl_ux[7];

2397 
gl_ux
[3]-=gl_ux[7];

2399 
SˇÀX
*=256.0f/(()(
iFTex
));

2400 
SˇÀY
*=256.0f/(()(
iFTex
));

2402 
y1
=(()
gl_vy
[0]*
SˇÀY
); if(y1>255) y1=255;

2403 
gl_vy
[0]=
y1
;

2404 
y1
=(()
gl_vy
[1]*
SˇÀY
); if(y1>255) y1=255;

2405 
gl_vy
[1]=
y1
;

2406 
y1
=(()
gl_vy
[2]*
SˇÀY
); if(y1>255) y1=255;

2407 
gl_vy
[2]=
y1
;

2408 
y1
=(()
gl_vy
[3]*
SˇÀY
); if(y1>255) y1=255;

2409 
gl_vy
[3]=
y1
;

2411 
x1
=(()
gl_ux
[0]*
SˇÀX
); if(x1>255) x1=255;

2412 
gl_ux
[0]=
x1
;

2413 
x1
=(()
gl_ux
[1]*
SˇÀX
); if(x1>255) x1=255;

2414 
gl_ux
[1]=
x1
;

2415 
x1
=(()
gl_ux
[2]*
SˇÀX
); if(x1>255) x1=255;

2416 
gl_ux
[2]=
x1
;

2417 
x1
=(()
gl_ux
[3]*
SˇÀX
); if(x1>255) x1=255;

2418 
gl_ux
[3]=
x1
;

2420 
x1
=
rSrc
.
right
-rSrc.
À·
;

2421 if(
x1
<=0) x1=1;

2422 if(
x1
>
iFTex
) x1=iFTex;

2424 
y1
=
rSrc
.
bŸtom
-rSrc.
t›
;

2425 if(
y1
<=0) y1=1;

2426 if(
y1
+
iYAdju°
>
iFTex
) y1=iFTex-iYAdjust;

2429 
	`glC›yTexSubImage2D
–
GL_TEXTURE_2D
, 0,

2431 
iYAdju°
,

2432 
rSrc
.
À·
+
rR©ioRe˘
.left,

2433 
iResY
-
rSrc
.
bŸtom
-
rR©ioRe˘
.
t›
,

2434 
x1
,
y1
); 
	`glEº‹
();

2436 if(
	`glGëEº‹
())

2438 * 
p
=(*)
	`mÆloc
(
iFTex
*iFTex*4);

2439 
	`mem£t
(
p
,0,
iFTex
*iFTex*4);

2440 
	`glTexSubImage2D
(
GL_TEXTURE_2D
, 0, 0, 0, 
iFTex
, iFTex,

2441 
GL_RGBA
, 
GL_UNSIGNED_BYTE
, 
p
); 
	`glEº‹
();

2442 
	`‰ì
(
p
);

2446 
ubO∑queDøw
=0;

2448 if(
iS¥ôeTex
)

2450 
•πW
=
gl_ux
[1]-gl_ux[0];

2451 
•πH
=-(
gl_vy
[0]-gl_vy[2]);

2454  (
GLuöt
)
gTexName
;

2455 
	}
}

2467 
	$LﬂdSubTextuªPageS‹t
(
∑geid
, 
mode
, 
cx
, 
cy
)

2469 
°¨t
,
row
,
cﬁumn
,
j
,
sxh
,
sxm
;

2470 
∑l°¨t
;

2471 *
px
,*
∑
,*
è
;

2472 *
cSRCPå
;

2473 *
wSRCPå
;

2474 
LöeOff£t
;

2475 
x2a
,
xÆign
=0;

2476 
x1
=
gl_ux
[7];

2477 
x2
=
gl_ux
[6];

2478 
y1
=
gl_ux
[5];

2479 
y2
=
gl_ux
[4];

2480 
dx
=
x2
-
x1
+1;

2481 
dy
=
y2
-
y1
+1;

2482 
pmu…
=
∑geid
/16;

2483 (*
LTCOL
)();

2484 
a
,
r
,
g
,
b
,
˙t
,
h
;

2485 
scﬁ
[8];

2487 
LTCOL
=
TCF
[
DøwSemiTøns
];

2489 
∑
=
px
=(*)
ubPÆëãBuf„r
;

2490 
è
=(*)
ãxtuª∑π
;

2491 
∑l°¨t
=
cx
+(
cy
<<10);

2493 
ubO∑queDøw
=0;

2495 if(
YTexS
Ë{
è
+=
dx
;if(
XTexS
)Åa+=2;}

2496 if(
XTexS
Ë{
è
+=1;
xÆign
=2;}

2498 
mode
)

2503 if(
GlobÆTextIL
)

2505 
TXV
,
TXU
,
n_xi
,
n_yi
;

2507 
wSRCPå
=
psxVuw
+
∑l°¨t
;

2509 
row
=4;do

2511 *
px
 =
	`LTCOL
(*
wSRCPå
);

2512 *(
px
+1)=
	`LTCOL
(*(
wSRCPå
+1));

2513 *(
px
+2)=
	`LTCOL
(*(
wSRCPå
+2));

2514 *(
px
+3)=
	`LTCOL
(*(
wSRCPå
+3));

2515 
row
--;
px
+=4;
wSRCPå
+=4;

2517 
row
);

2519 
TXV
=
y1
;TXV<=
y2
;TXV++)

2521 
TXU
=
x1
;TXU<=
x2
;TXU++)

2523 
n_xi
 = ( ( 
TXU
 >> 2 ) & ~0x3¯Ë+ ( ( 
TXV
 << 2 ) & 0x3c );

2524 
n_yi
 = ( 
TXV
 & ~0x‡Ë+ ( ( 
TXU
 >> 4 ) & 0xf );

2526 *
è
++=*(
∑
+((*–
psxVuw
 + ((
GlobÆTextAddrY
 + 
n_yi
)*1024Ë+ 
GlobÆTextAddrX
 + 
n_xi
 ) >> ( ( 
TXU
 & 0x03 ) << 2 ) ) & 0x0f ));

2528 
è
+=
xÆign
;

2533 
°¨t
=((
∑geid
-16*
pmu…
)<<7)+524288*pmult;

2536 
wSRCPå
=
psxVuw
+
∑l°¨t
;

2538 
row
=4;do

2540 *
px
 =
	`LTCOL
(*
wSRCPå
);

2541 *(
px
+1)=
	`LTCOL
(*(
wSRCPå
+1));

2542 *(
px
+2)=
	`LTCOL
(*(
wSRCPå
+2));

2543 *(
px
+3)=
	`LTCOL
(*(
wSRCPå
+3));

2544 
row
--;
px
+=4;
wSRCPå
+=4;

2546 
row
);

2548 
x2a
=
x2
?(x2-1):0;

2549 
sxm
=
x1
&1;
sxh
=x1>>1;

2550 
j
=
sxm
?(
x1
+1):x1;

2551 
cﬁumn
=
y1
;cﬁumn<=
y2
;column++)

2553 
cSRCPå
 = 
psxVub
 + 
°¨t
 + (
cﬁumn
<<11Ë+ 
sxh
;

2555 if(
sxm
Ë*
è
++=*(
∑
+((*
cSRCPå
++ >> 4) & 0xF));

2557 
row
=
j
;row<
x2a
;row+=2)

2559 *
è
 =*(
∑
+(*
cSRCPå
 & 0xF));

2560 *(
è
+1)=*(
∑
+((*
cSRCPå
 >> 4) & 0xF));

2561 
cSRCPå
++;
è
+=2;

2564 if(
row
<=
x2
)

2566 *
è
++=*(
∑
+(*
cSRCPå
 & 0xF)); 
row
++;

2567 if(
row
<=
x2
Ë*
è
++=*(
∑
+((*
cSRCPå
 >> 4) & 0xF));

2570 
è
+=
xÆign
;

2577 if(
GlobÆTextIL
)

2579 
TXV
,
TXU
,
n_xi
,
n_yi
;

2581 
wSRCPå
=
psxVuw
+
∑l°¨t
;

2583 
row
=64;do

2585 *
px
 =
	`LTCOL
(*
wSRCPå
);

2586 *(
px
+1)=
	`LTCOL
(*(
wSRCPå
+1));

2587 *(
px
+2)=
	`LTCOL
(*(
wSRCPå
+2));

2588 *(
px
+3)=
	`LTCOL
(*(
wSRCPå
+3));

2589 
row
--;
px
+=4;
wSRCPå
+=4;

2591 
row
);

2593 
TXV
=
y1
;TXV<=
y2
;TXV++)

2595 
TXU
=
x1
;TXU<=
x2
;TXU++)

2597 
n_xi
 = ( ( 
TXU
 >> 1 ) & ~0x78 ) + ( ( TXU << 2 ) & 0x40 ) + ( ( 
TXV
 << 3 ) & 0x38 );

2598 
n_yi
 = ( 
TXV
 & ~0x7 ) + ( ( 
TXU
 >> 5 ) & 0x7 );

2600 *
è
++=*(
∑
+((*–
psxVuw
 + ((
GlobÆTextAddrY
 + 
n_yi
)*1024Ë+ 
GlobÆTextAddrX
 + 
n_xi
 ) >> ( ( 
TXU
 & 0x01 ) << 3 ) ) & 0xff));

2602 
è
+=
xÆign
;

2608 
°¨t
=((
∑geid
-16*
pmu…
)<<7)+524288*pmult;

2610 
cSRCPå
 = 
psxVub
 + 
°¨t
 + (
y1
<<11Ë+ 
x1
;

2611 
LöeOff£t
 = 2048 - 
dx
;

2613 if(
dy
*
dx
>384)

2615 
wSRCPå
=
psxVuw
+
∑l°¨t
;

2617 
row
=64;do

2619 *
px
 =
	`LTCOL
(*
wSRCPå
);

2620 *(
px
+1)=
	`LTCOL
(*(
wSRCPå
+1));

2621 *(
px
+2)=
	`LTCOL
(*(
wSRCPå
+2));

2622 *(
px
+3)=
	`LTCOL
(*(
wSRCPå
+3));

2623 
row
--;
px
+=4;
wSRCPå
+=4;

2625 
row
);

2627 
cﬁumn
=
dy
;do

2629 
row
=
dx
;

2630 dÿ{*
è
++=*(
∑
+(*
cSRCPå
++));
row
--;} row);

2631 
è
+=
xÆign
;

2632 
cSRCPå
+=
LöeOff£t
;
cﬁumn
--;

2634 
cﬁumn
);

2638 
wSRCPå
=
psxVuw
+
∑l°¨t
;

2640 
cﬁumn
=
dy
;do

2642 
row
=
dx
;

2643 dÿ{*
è
++=
	`LTCOL
(*(
wSRCPå
+*
cSRCPå
++));
row
--;} row);

2644 
è
+=
xÆign
;

2645 
cSRCPå
+=
LöeOff£t
;
cﬁumn
--;

2647 
cﬁumn
);

2654 
°¨t
=((
∑geid
-16*
pmu…
)<<6)+262144*pmult;

2656 
wSRCPå
 = 
psxVuw
 + 
°¨t
 + (
y1
<<10Ë+ 
x1
;

2657 
LöeOff£t
 = 1024 - 
dx
;

2659 
cﬁumn
=
dy
;do

2661 
row
=
dx
;

2662 dÿ{*
è
++=
	`LTCOL
(*
wSRCPå
++);
row
--;} row);

2663 
è
+=
xÆign
;

2664 
wSRCPå
+=
LöeOff£t
;
cﬁumn
--;

2666 
cﬁumn
);

2673 
x2a
=
dx
+
xÆign
;

2675 if(
YTexS
)

2677 
è
=(*)
ãxtuª∑π
;

2678 
∑
=(*)
ãxtuª∑π
+
x2a
;

2679 
row
=
x2a
;dÿ{*
è
++=*
∑
++;row--;} row);

2680 
∑
=(*)
ãxtuª∑π
+
dy
*
x2a
;

2681 
è
=
∑
+
x2a
;

2682 
row
=
x2a
;dÿ{*
è
++=*
∑
++;row--;} row);

2683 
YTexS
--;

2684 
dy
+=2;

2687 if(
XTexS
)

2689 
è
=(*)
ãxtuª∑π
;

2690 
∑
=
è
+1;

2691 
row
=
dy
;dÿ{*
è
=*
∑
;è+=
x2a
;pa+=x2a;row--;} row);

2692 
∑
=(*)
ãxtuª∑π
+
dx
;

2693 
è
=
∑
+1;

2694 
row
=
dy
;dÿ{*
è
=*
∑
;è+=
x2a
;pa+=x2a;row--;} row);

2695 
XTexS
--;

2696 
dx
+=2;

2699 
DXTexS
=
dx
;
DYTexS
=
dy
;

2701 if(!
iFûãrTy≥
Ë{
	`DeföeSubTextuªS‹t
();;}

2702 if(
iFûãrTy≥
!=2 && iFûãrTy≥!=4 && iFûãrTy≥!=6Ë{
	`DeföeSubTextuªS‹t
();;}

2703 if((
iFûãrTy≥
==4 || iFûãrTy≥==6Ë&& 
ly0
==
ly1
 && 
ly2
==
ly3
 && 
lx0
==
lx3
 && 
lx1
==
lx2
)

2704 {
	`DeföeSubTextuªS‹t
();;}

2706 
è
=(*)
ãxtuª∑π
;

2707 
x1
=
dx
-1;

2708 
y1
=
dy
-1;

2710 if(
bO∑quePass
)

2713 
cﬁumn
=0;cﬁumn<
dy
;column++)

2715 
row
=0;row<
dx
;row++)

2717 if(*
è
==0x50000000)

2719 
˙t
=0;

2721 if–
cﬁumn
 && *(
è
-
dx
Ë!=0x50000000 && *—a-dx)>>24!=1Ë
scﬁ
[
˙t
++]=*(ta-dx);

2722 if(
row
 && *(
è
-1Ë!=0x50000000 && *—a-1)>>24!=1Ë
scﬁ
[
˙t
++]=*(ta-1);

2723 if(
row
!=
x1
 && *(
è
+1Ë!=0x50000000 && *—a+1)>>24!=1Ë
scﬁ
[
˙t
++]=*(ta+1);

2724 if–
cﬁumn
!=
y1
 && *(
è
+
dx
Ë!=0x50000000 && *—a+dx)>>24!=1Ë
scﬁ
[
˙t
++]=*(ta+dx);

2726 if(
row
 && 
cﬁumn
 && *(
è
-
dx
-1)!=0x50000000 && *—a-dx-1)>>24!=1Ë
scﬁ
[
˙t
++]=*(ta-dx-1);

2727 if(
row
!=
x1
 && 
cﬁumn
 && *(
è
-
dx
+1)!=0x50000000 && *—a-dx+1)>>24!=1Ë
scﬁ
[
˙t
++]=*(ta-dx+1);

2728 if(
row
 && 
cﬁumn
!=
y1
 && *(
è
+
dx
-1)!=0x50000000 && *—a+dx-1)>>24!=1Ë
scﬁ
[
˙t
++]=*(ta+dx-1);

2729 if(
row
!=
x1
 && 
cﬁumn
!=
y1
 && *(
è
+
dx
+1)!=0x50000000 && *—a+dx+1)>>24!=1Ë
scﬁ
[
˙t
++]=*(ta+dx+1);

2731 if(
˙t
)

2733 
r
=
g
=
b
=
a
=0;

2734 
h
=0;h<
˙t
;h++)

2736 
a
+=(
scﬁ
[
h
]>>24);

2737 
r
+=(
scﬁ
[
h
]>>16)&0xff;

2738 
g
+=(
scﬁ
[
h
]>>8)&0xff;

2739 
b
+=
scﬁ
[
h
]&0xff;

2741 
r
/=
˙t
;
b
/=˙t;
g
/=cnt;

2743 *
è
=(
r
<<16)|(
g
<<8)|
b
;

2744 if(
a
Ë*
è
|=0x50000000;

2745 *
è
|=0x01000000;

2748 
è
++;

2754 
cﬁumn
=0;cﬁumn<
dy
;column++)

2756 
row
=0;row<
dx
;row++)

2758 if(*
è
==0x00000000)

2760 
˙t
=0;

2762 if(
row
!=
x1
 && *(
è
+1Ë!=0x00000000Ë
scﬁ
[
˙t
++]=*(ta+1);

2763 if–
cﬁumn
!=
y1
 && *(
è
+
dx
Ë!=0x00000000Ë
scﬁ
[
˙t
++]=*(ta+dx);

2765 if(
˙t
)

2767 
r
=
g
=
b
=0;

2768 
h
=0;h<
˙t
;h++)

2770 
r
+=(
scﬁ
[
h
]>>16)&0xff;

2771 
g
+=(
scﬁ
[
h
]>>8)&0xff;

2772 
b
+=
scﬁ
[
h
]&0xff;

2774 
r
/=
˙t
;
b
/=˙t;
g
/=cnt;

2775 *
è
=(
r
<<16)|(
g
<<8)|
b
;

2778 
è
++;

2782 
	`DeföeSubTextuªS‹t
();

2783 
	}
}

2795 
	$LﬂdPackedSubTextuªPageS‹t
(
∑geid
, 
mode
, 
cx
, 
cy
)

2797 
°¨t
,
row
,
cﬁumn
,
j
,
sxh
,
sxm
;

2798 
∑l°¨t
;

2799 *
px
,*
∑
,*
è
;

2800 *
cSRCPå
;

2801 *
wSRCPå
;

2802 
LöeOff£t
;

2803 
x2a
,
xÆign
=0;

2804 
x1
=
gl_ux
[7];

2805 
x2
=
gl_ux
[6];

2806 
y1
=
gl_ux
[5];

2807 
y2
=
gl_ux
[4];

2808 
dx
=
x2
-
x1
+1;

2809 
dy
=
y2
-
y1
+1;

2810 
pmu…
=
∑geid
/16;

2811 (*
LPTCOL
)();

2812 
a
,
r
,
g
,
b
,
˙t
,
h
;

2813 
scﬁ
[8];

2815 
LPTCOL
=
PTCF
[
DøwSemiTøns
];

2817 
∑
=
px
=(*)
ubPÆëãBuf„r
;

2818 
è
=(*)
ãxtuª∑π
;

2819 
∑l°¨t
=
cx
+(
cy
<<10);

2821 
ubO∑queDøw
=0;

2823 if(
YTexS
Ë{
è
+=
dx
;if(
XTexS
)Åa+=2;}

2824 if(
XTexS
Ë{
è
+=1;
xÆign
=2;}

2826 
mode
)

2831 if(
GlobÆTextIL
)

2833 
TXV
,
TXU
,
n_xi
,
n_yi
;

2835 
wSRCPå
=
psxVuw
+
∑l°¨t
;

2836 
row
=4;do

2838 *
px
 =
	`LPTCOL
(*
wSRCPå
);

2839 *(
px
+1)=
	`LPTCOL
(*(
wSRCPå
+1));

2840 *(
px
+2)=
	`LPTCOL
(*(
wSRCPå
+2));

2841 *(
px
+3)=
	`LPTCOL
(*(
wSRCPå
+3));

2842 
row
--;
px
+=4;
wSRCPå
+=4;

2844 
row
);

2846 
TXV
=
y1
;TXV<=
y2
;TXV++)

2848 
TXU
=
x1
;TXU<=
x2
;TXU++)

2850 
n_xi
 = ( ( 
TXU
 >> 2 ) & ~0x3¯Ë+ ( ( 
TXV
 << 2 ) & 0x3c );

2851 
n_yi
 = ( 
TXV
 & ~0x‡Ë+ ( ( 
TXU
 >> 4 ) & 0xf );

2853 *
è
++=*(
∑
+((*–
psxVuw
 + ((
GlobÆTextAddrY
 + 
n_yi
)*1024Ë+ 
GlobÆTextAddrX
 + 
n_xi
 ) >> ( ( 
TXU
 & 0x03 ) << 2 ) ) & 0x0f ));

2855 
è
+=
xÆign
;

2860 
°¨t
=((
∑geid
-16*
pmu…
)<<7)+524288*pmult;

2862 
wSRCPå
=
psxVuw
+
∑l°¨t
;

2863 
row
=4;do

2865 *
px
 =
	`LPTCOL
(*
wSRCPå
);

2866 *(
px
+1)=
	`LPTCOL
(*(
wSRCPå
+1));

2867 *(
px
+2)=
	`LPTCOL
(*(
wSRCPå
+2));

2868 *(
px
+3)=
	`LPTCOL
(*(
wSRCPå
+3));

2869 
row
--;
px
+=4;
wSRCPå
+=4;

2871 
row
);

2873 
x2a
=
x2
?(x2-1):0;

2874 
sxm
=
x1
&1;
sxh
=x1>>1;

2875 
j
=
sxm
?(
x1
+1):x1;

2877 
cﬁumn
=
y1
;cﬁumn<=
y2
;column++)

2879 
cSRCPå
 = 
psxVub
 + 
°¨t
 + (
cﬁumn
<<11Ë+ 
sxh
;

2881 if(
sxm
Ë*
è
++=*(
∑
+((*
cSRCPå
++ >> 4) & 0xF));

2883 
row
=
j
;row<
x2a
;row+=2)

2885 *
è
 =*(
∑
+(*
cSRCPå
 & 0xF));

2886 *(
è
+1)=*(
∑
+((*
cSRCPå
 >> 4) & 0xF));

2887 
cSRCPå
++;
è
+=2;

2890 if(
row
<=
x2
)

2892 *
è
++=*(
∑
+(*
cSRCPå
 & 0xF));
row
++;

2893 if(
row
<=
x2
Ë*
è
++=*(
∑
+((*
cSRCPå
 >> 4) & 0xF));

2896 
è
+=
xÆign
;

2902 if(
GlobÆTextIL
)

2904 
TXV
,
TXU
,
n_xi
,
n_yi
;

2906 
wSRCPå
=
psxVuw
+
∑l°¨t
;

2908 
row
=64;do

2910 *
px
 =
	`LPTCOL
(*
wSRCPå
);

2911 *(
px
+1)=
	`LPTCOL
(*(
wSRCPå
+1));

2912 *(
px
+2)=
	`LPTCOL
(*(
wSRCPå
+2));

2913 *(
px
+3)=
	`LPTCOL
(*(
wSRCPå
+3));

2914 
row
--;
px
+=4;
wSRCPå
+=4;

2916 
row
);

2918 
TXV
=
y1
;TXV<=
y2
;TXV++)

2920 
TXU
=
x1
;TXU<=
x2
;TXU++)

2922 
n_xi
 = ( ( 
TXU
 >> 1 ) & ~0x78 ) + ( ( TXU << 2 ) & 0x40 ) + ( ( 
TXV
 << 3 ) & 0x38 );

2923 
n_yi
 = ( 
TXV
 & ~0x7 ) + ( ( 
TXU
 >> 5 ) & 0x7 );

2925 *
è
++=*(
∑
+((*–
psxVuw
 + ((
GlobÆTextAddrY
 + 
n_yi
)*1024Ë+ 
GlobÆTextAddrX
 + 
n_xi
 ) >> ( ( 
TXU
 & 0x01 ) << 3 ) ) & 0xff));

2927 
è
+=
xÆign
;

2933 
°¨t
=((
∑geid
-16*
pmu…
)<<7)+524288*pmult;

2935 
cSRCPå
 = 
psxVub
 + 
°¨t
 + (
y1
<<11Ë+ 
x1
;

2936 
LöeOff£t
 = 2048 - 
dx
;

2938 if(
dy
*
dx
>384)

2940 
wSRCPå
=
psxVuw
+
∑l°¨t
;

2942 
row
=64;do

2944 *
px
 =
	`LPTCOL
(*
wSRCPå
);

2945 *(
px
+1)=
	`LPTCOL
(*(
wSRCPå
+1));

2946 *(
px
+2)=
	`LPTCOL
(*(
wSRCPå
+2));

2947 *(
px
+3)=
	`LPTCOL
(*(
wSRCPå
+3));

2948 
row
--;
px
+=4;
wSRCPå
+=4;

2950 
row
);

2952 
cﬁumn
=
dy
;do

2954 
row
=
dx
;

2955 dÿ{*
è
++=*(
∑
+(*
cSRCPå
++));
row
--;} row);

2957 
è
+=
xÆign
;

2959 
cSRCPå
+=
LöeOff£t
;
cﬁumn
--;

2961 
cﬁumn
);

2965 
wSRCPå
=
psxVuw
+
∑l°¨t
;

2967 
cﬁumn
=
dy
;do

2969 
row
=
dx
;

2970 dÿ{*
è
++=
	`LPTCOL
(*(
wSRCPå
+*
cSRCPå
++));
row
--;} row);

2972 
è
+=
xÆign
;

2974 
cSRCPå
+=
LöeOff£t
;
cﬁumn
--;

2976 
cﬁumn
);

2982 
°¨t
=((
∑geid
-16*
pmu…
)<<6)+262144*pmult;

2984 
wSRCPå
 = 
psxVuw
 + 
°¨t
 + (
y1
<<10Ë+ 
x1
;

2985 
LöeOff£t
 = 1024 - 
dx
;

2987 
cﬁumn
=
dy
;do

2989 
row
=
dx
;

2990 dÿ{*
è
++=
	`LPTCOL
(*
wSRCPå
++);
row
--;} row);

2992 
è
+=
xÆign
;

2994 
wSRCPå
+=
LöeOff£t
;
cﬁumn
--;

2996 
cﬁumn
);

3004 
x2a
=
dx
+
xÆign
;

3006 if(
YTexS
)

3008 
è
=(*)
ãxtuª∑π
;

3009 
∑
=(*)
ãxtuª∑π
+
x2a
;

3010 
row
=
x2a
;dÿ{*
è
++=*
∑
++;row--;} row);

3012 
∑
=(*)
ãxtuª∑π
+
dy
*
x2a
;

3013 
è
=
∑
+
x2a
;

3014 
row
=
x2a
;dÿ{*
è
++=*
∑
++;row--;} row);

3016 
YTexS
--;

3017 
dy
+=2;

3020 if(
XTexS
)

3022 
è
=(*)
ãxtuª∑π
;

3023 
∑
=
è
+1;

3024 
row
=
dy
;dÿ{*
è
=*
∑
;è+=
x2a
;pa+=x2a;row--;} row);

3026 
∑
=(*)
ãxtuª∑π
+
dx
;

3027 
è
=
∑
+1;

3028 
row
=
dy
;dÿ{*
è
=*
∑
;è+=
x2a
;pa+=x2a;row--;} row);

3030 
XTexS
--;

3031 
dx
+=2;

3034 
DXTexS
=
dx
;
DYTexS
=
dy
;

3036 if(!
iFûãrTy≥
Ë{
	`DeföeSubTextuªS‹t
();;}

3037 if(
iFûãrTy≥
!=2 && iFûãrTy≥!=4 && iFûãrTy≥!=6Ë{
	`DeföeSubTextuªS‹t
();;}

3038 if((
iFûãrTy≥
==4 || iFûãrTy≥==6Ë&& 
ly0
==
ly1
 && 
ly2
==
ly3
 && 
lx0
==
lx3
 && 
lx1
==
lx2
)

3039 {
	`DeföeSubTextuªS‹t
();;}

3041 
è
=(*)
ãxtuª∑π
;

3042 
x1
=
dx
-1;

3043 
y1
=
dy
-1;

3046 
cﬁumn
=0;cﬁumn<
dy
;column++)

3048 
row
=0;row<
dx
;row++)

3050 if(*
è
==0)

3052 
˙t
=0;

3054 if–
cﬁumn
 && *(
è
-
dx
Ë&1Ë
scﬁ
[
˙t
++]=*(ta-dx);

3055 if(
row
 && *(
è
-1Ë&1Ë
scﬁ
[
˙t
++]=*(ta-1);

3056 if(
row
!=
x1
 && *(
è
+1Ë&1Ë
scﬁ
[
˙t
++]=*(ta+1);

3057 if–
cﬁumn
!=
y1
 && *(
è
+
dx
Ë&1Ë
scﬁ
[
˙t
++]=*(ta+dx);

3059 if(
row
 && 
cﬁumn
 && *(
è
-
dx
-1)&1Ë
scﬁ
[
˙t
++]=*(ta-dx-1);

3060 if(
row
!=
x1
 && 
cﬁumn
 && *(
è
-
dx
+1)&1Ë
scﬁ
[
˙t
++]=*(ta-dx+1);

3061 if(
row
 && 
cﬁumn
!=
y1
 && *(
è
+
dx
-1)&1Ë
scﬁ
[
˙t
++]=*(ta+dx-1);

3062 if(
row
!=
x1
 && 
cﬁumn
!=
y1
 && *(
è
+
dx
+1)&1Ë
scﬁ
[
˙t
++]=*(ta+dx+1);

3064 if(
˙t
)

3066 
r
=
g
=
b
=0;

3067 
h
=0;h<
˙t
;h++)

3069 
r
+=
scﬁ
[
h
]>>11;

3070 
g
+=(
scﬁ
[
h
]>>6)&0x1f;

3071 
b
+=(
scﬁ
[
h
]>>1)&0x1f;

3073 
r
/=
˙t
;
b
/=˙t;
g
/=cnt;

3074 *
è
=(
r
<<11)|(
g
<<6)|(
b
<<1);

3077 
è
++;

3082 
	`DeföeSubTextuªS‹t
();

3083 
	}
}

3098 
	#GET_RESULT
(
A
, 
B
, 
C
, 
D
Ë((A !C || A !DË- (B !C || B !D))

	)

3102 
	#cﬁ‹Mask8
 0x00FEFEFE

	)

3103 
	#lowPixñMask8
 0x00010101

	)

3104 
	#qcﬁ‹Mask8
 0x00FCFCFC

	)

3105 
	#qlowpixñMask8
 0x00030303

	)

3108 
	#INTERPOLATE8_02
(
A
, 
B
Ë(((((A & 
cﬁ‹Mask8
Ë>> 1Ë+ ((B & cﬁ‹Mask8Ë>> 1Ë+ (A & B & 
lowPixñMask8
))|((((A&0xFF000000)==0x03000000)?0x03000000:(((B&0xFF000000)==0x03000000)?0x03000000:(((A&0xFF000000)==0x00000000)?0x00000000:(((B&0xFF000000)==0x00000000)?0x00000000:0xFF000000)))))))

	)

3110 
	#Q_INTERPOLATE8_02
(
A
, 
B
, 
C
, 
D
Ë(((((A & 
qcﬁ‹Mask8
Ë>> 2Ë+ ((B & qcﬁ‹Mask8Ë>> 2Ë+ ((C & qcﬁ‹Mask8Ë>> 2Ë+ ((D & qcﬁ‹Mask8Ë>> 2Ë+ ((((A & 
qlowpixñMask8
Ë+ (B & qlowpixñMask8Ë+ (C & qlowpixñMask8Ë+ (D & qlowpixñMask8)Ë>> 2Ë& qlowpixñMask8))|((((A&0xFF000000)==0x03000000)?0x03000000:(((B&0xFF000000)==0x03000000)?0x03000000:(((C&0xFF000000)==0x03000000)?0x03000000:(((D&0xFF000000)==0x03000000)?0x03000000:(((A&0xFF000000)==0x00000000)?0x00000000:(((B&0xFF000000)==0x00000000)?0x00000000:(((C&0xFF000000)==0x00000000)?0x00000000:(((D&0xFF000000)==0x00000000)?0x00000000:0xFF000000)))))))))))

	)

3112 
	#INTERPOLATE8
(
A
, 
B
Ë(((((A & 
cﬁ‹Mask8
Ë>> 1Ë+ ((B & cﬁ‹Mask8Ë>> 1Ë+ (A & B & 
lowPixñMask8
))|((((A&0xFF000000)==0x50000000)?0x50000000:(((B&0xFF000000)==0x50000000)?0x50000000:(((A&0xFF000000)==0x00000000)?0x00000000:(((B&0xFF000000)==0x00000000)?0x00000000:0xFF000000)))))))

	)

3114 
	#Q_INTERPOLATE8
(
A
, 
B
, 
C
, 
D
Ë(((((A & 
qcﬁ‹Mask8
Ë>> 2Ë+ ((B & qcﬁ‹Mask8Ë>> 2Ë+ ((C & qcﬁ‹Mask8Ë>> 2Ë+ ((D & qcﬁ‹Mask8Ë>> 2Ë+ ((((A & 
qlowpixñMask8
Ë+ (B & qlowpixñMask8Ë+ (C & qlowpixñMask8Ë+ (D & qlowpixñMask8)Ë>> 2Ë& qlowpixñMask8))|((((A&0xFF000000)==0x50000000)?0x50000000:(((B&0xFF000000)==0x50000000)?0x50000000:(((C&0xFF000000)==0x50000000)?0x50000000:(((D&0xFF000000)==0x50000000)?0x50000000:(((A&0xFF000000)==0x00000000)?0x00000000:(((B&0xFF000000)==0x00000000)?0x00000000:(((C&0xFF000000)==0x00000000)?0x00000000:(((D&0xFF000000)==0x00000000)?0x00000000:0xFF000000)))))))))))

	)

3116 
	$Su≥r2xSaI_ex8_Ex
(*
§cPå
, 
DWORD
 
§cPôch
,

3117 *
d°Bôm≠
, 
width
, 
height
)

3119 
DWORD
 
d°Pôch
 = 
§cPôch
 * 2;

3120 
DWORD
 
löe
;

3121 
DWORD
 *
dP
;

3122 
DWORD
 *
bP
;

3123 
width2
 = 
width
*2;

3124 
iXA
,
iXB
,
iXC
,
iYA
,
iYB
,
iYC
,
föish
;

3125 
DWORD
 
cﬁ‹4
, 
cﬁ‹5
, 
cﬁ‹6
;

3126 
DWORD
 
cﬁ‹1
, 
cﬁ‹2
, 
cﬁ‹3
;

3127 
DWORD
 
cﬁ‹A0
, 
cﬁ‹A1
, 
cﬁ‹A2
, 
cﬁ‹A3
,

3128 
cﬁ‹B0
, 
cﬁ‹B1
, 
cﬁ‹B2
, 
cﬁ‹B3
,

3129 
cﬁ‹S1
, 
cﬁ‹S2
;

3130 
DWORD
 
¥odu˘1a
, 
¥odu˘1b
,

3131 
¥odu˘2a
, 
¥odu˘2b
;

3133 
löe
 = 0;

3136 ; 
height
; height-=1)

3138 
bP
 = (
DWORD
 *)
§cPå
;

3139 
dP
 = (
DWORD
 *)(
d°Bôm≠
 + 
löe
*
d°Pôch
);

3140 
föish
 = 
width
; finish; finish -= 1 )

3146 if(
föish
==
width
Ë
iXA
=0;

3147 
iXA
=1;

3148 if(
föish
>4Ë{
iXB
=1;
iXC
=2;}

3150 if(
föish
>3Ë{
iXB
=1;
iXC
=1;}

3151 {
iXB
=0;
iXC
=0;}

3152 if(
löe
==0Ë
iYA
=0;

3153 
iYA
=
width
;

3154 if(
height
>4Ë{
iYB
=
width
;
iYC
=
width2
;}

3156 if(
height
>3Ë{
iYB
=
width
;
iYC
=width;}

3157 {
iYB
=0;
iYC
=0;}

3160 
cﬁ‹B0
 = *(
bP
- 
iYA
 - 
iXA
);

3161 
cﬁ‹B1
 = *(
bP
- 
iYA
);

3162 
cﬁ‹B2
 = *(
bP
- 
iYA
 + 
iXB
);

3163 
cﬁ‹B3
 = *(
bP
- 
iYA
 + 
iXC
);

3165 
cﬁ‹4
 = *(
bP
 - 
iXA
);

3166 
cﬁ‹5
 = *(
bP
);

3167 
cﬁ‹6
 = *(
bP
 + 
iXB
);

3168 
cﬁ‹S2
 = *(
bP
 + 
iXC
);

3170 
cﬁ‹1
 = *(
bP
 + 
iYB
 - 
iXA
);

3171 
cﬁ‹2
 = *(
bP
 + 
iYB
);

3172 
cﬁ‹3
 = *(
bP
 + 
iYB
 + 
iXB
);

3173 
cﬁ‹S1
*(
bP
 + 
iYB
 + 
iXC
);

3175 
cﬁ‹A0
 = *(
bP
 + 
iYC
 - 
iXA
);

3176 
cﬁ‹A1
 = *(
bP
 + 
iYC
);

3177 
cﬁ‹A2
 = *(
bP
 + 
iYC
 + 
iXB
);

3178 
cﬁ‹A3
 = *(
bP
 + 
iYC
 + 
iXC
);

3181 i‡(
cﬁ‹2
 =
cﬁ‹6
 && 
cﬁ‹5
 !
cﬁ‹3
)

3183 
¥odu˘2b
 = 
¥odu˘1b
 = 
cﬁ‹2
;

3186 i‡(
cﬁ‹5
 =
cﬁ‹3
 && 
cﬁ‹2
 !
cﬁ‹6
)

3188 
¥odu˘2b
 = 
¥odu˘1b
 = 
cﬁ‹5
;

3191 i‡(
cﬁ‹5
 =
cﬁ‹3
 && 
cﬁ‹2
 =
cﬁ‹6
)

3193 
r
 = 0;

3195 
r
 +
	`GET_RESULT
 ((
cﬁ‹6
&0x00ffffff), (
cﬁ‹5
&0x00ffffff), (
cﬁ‹1
&0x00ffffff), (
cﬁ‹A1
&0x00ffffff));

3196 
r
 +
	`GET_RESULT
 ((
cﬁ‹6
&0x00ffffff), (
cﬁ‹5
&0x00ffffff), (
cﬁ‹4
&0x00ffffff), (
cﬁ‹B1
&0x00ffffff));

3197 
r
 +
	`GET_RESULT
 ((
cﬁ‹6
&0x00ffffff), (
cﬁ‹5
&0x00ffffff), (
cﬁ‹A2
&0x00ffffff), (
cﬁ‹S1
&0x00ffffff));

3198 
r
 +
	`GET_RESULT
 ((
cﬁ‹6
&0x00ffffff), (
cﬁ‹5
&0x00ffffff), (
cﬁ‹B2
&0x00ffffff), (
cﬁ‹S2
&0x00ffffff));

3200 i‡(
r
 > 0)

3201 
¥odu˘2b
 = 
¥odu˘1b
 = 
cﬁ‹6
;

3203 i‡(
r
 < 0)

3204 
¥odu˘2b
 = 
¥odu˘1b
 = 
cﬁ‹5
;

3207 
¥odu˘2b
 = 
¥odu˘1b
 = 
	`INTERPOLATE8_02
(
cﬁ‹5
, 
cﬁ‹6
);

3212 i‡(
cﬁ‹6
 =
cﬁ‹3
 && cﬁ‹3 =
cﬁ‹A1
 && 
cﬁ‹2
 !
cﬁ‹A2
 && cﬁ‹3 !
cﬁ‹A0
)

3213 
¥odu˘2b
 = 
	`Q_INTERPOLATE8_02
 (
cﬁ‹3
, cﬁ‹3, cﬁ‹3, 
cﬁ‹2
);

3215 i‡(
cﬁ‹5
 =
cﬁ‹2
 && cﬁ‹2 =
cﬁ‹A2
 && 
cﬁ‹A1
 !
cﬁ‹3
 && cﬁ‹2 !
cﬁ‹A3
)

3216 
¥odu˘2b
 = 
	`Q_INTERPOLATE8_02
 (
cﬁ‹2
, cﬁ‹2, cﬁ‹2, 
cﬁ‹3
);

3218 
¥odu˘2b
 = 
	`INTERPOLATE8_02
 (
cﬁ‹2
, 
cﬁ‹3
);

3220 i‡(
cﬁ‹6
 =
cﬁ‹3
 && cﬁ‹6 =
cﬁ‹B1
 && 
cﬁ‹5
 !
cﬁ‹B2
 && cﬁ‹6 !
cﬁ‹B0
)

3221 
¥odu˘1b
 = 
	`Q_INTERPOLATE8_02
 (
cﬁ‹6
, cﬁ‹6, cﬁ‹6, 
cﬁ‹5
);

3223 i‡(
cﬁ‹5
 =
cﬁ‹2
 && cﬁ‹5 =
cﬁ‹B2
 && 
cﬁ‹B1
 !
cﬁ‹6
 && cﬁ‹5 !
cﬁ‹B3
)

3224 
¥odu˘1b
 = 
	`Q_INTERPOLATE8_02
 (
cﬁ‹6
, 
cﬁ‹5
, color5, color5);

3226 
¥odu˘1b
 = 
	`INTERPOLATE8_02
 (
cﬁ‹5
, 
cﬁ‹6
);

3229 i‡(
cﬁ‹5
 =
cﬁ‹3
 && 
cﬁ‹2
 !
cﬁ‹6
 && 
cﬁ‹4
 =cﬁ‹5 && cﬁ‹5 !
cﬁ‹A2
)

3230 
¥odu˘2a
 = 
	`INTERPOLATE8_02
(
cﬁ‹2
, 
cﬁ‹5
);

3232 i‡(
cﬁ‹5
 =
cﬁ‹1
 && 
cﬁ‹6
 =cﬁ‹5 && 
cﬁ‹4
 !
cﬁ‹2
 && cﬁ‹5 !
cﬁ‹A0
)

3233 
¥odu˘2a
 = 
	`INTERPOLATE8_02
(
cﬁ‹2
, 
cﬁ‹5
);

3235 
¥odu˘2a
 = 
cﬁ‹2
;

3237 i‡(
cﬁ‹2
 =
cﬁ‹6
 && 
cﬁ‹5
 !
cﬁ‹3
 && 
cﬁ‹1
 =cﬁ‹2 && cﬁ‹2 !
cﬁ‹B2
)

3238 
¥odu˘1a
 = 
	`INTERPOLATE8_02
(
cﬁ‹2
, 
cﬁ‹5
);

3240 i‡(
cﬁ‹4
 =
cﬁ‹2
 && 
cﬁ‹3
 =cﬁ‹2 && 
cﬁ‹1
 !
cﬁ‹5
 && cﬁ‹2 !
cﬁ‹B0
)

3241 
¥odu˘1a
 = 
	`INTERPOLATE8_02
(
cﬁ‹2
, 
cﬁ‹5
);

3243 
¥odu˘1a
 = 
cﬁ‹5
;

3245 *
dP
=
¥odu˘1a
;

3246 *(
dP
+1)=
¥odu˘1b
;

3247 *(
dP
+(
width2
))=
¥odu˘2a
;

3248 *(
dP
+1+(
width2
))=
¥odu˘2b
;

3250 
bP
 += 1;

3251 
dP
 += 2;

3254 
löe
 += 2;

3255 
§cPå
 +
§cPôch
;

3258 
	}
}

3261 
	$Su≥r2xSaI_ex8
(*
§cPå
, 
DWORD
 
§cPôch
,

3262 *
d°Bôm≠
, 
width
, 
height
)

3264 
DWORD
 
d°Pôch
 = 
§cPôch
 * 2;

3265 
DWORD
 
löe
;

3266 
DWORD
 *
dP
;

3267 
DWORD
 *
bP
;

3268 
width2
 = 
width
*2;

3269 
iXA
,
iXB
,
iXC
,
iYA
,
iYB
,
iYC
,
föish
;

3270 
DWORD
 
cﬁ‹4
, 
cﬁ‹5
, 
cﬁ‹6
;

3271 
DWORD
 
cﬁ‹1
, 
cﬁ‹2
, 
cﬁ‹3
;

3272 
DWORD
 
cﬁ‹A0
, 
cﬁ‹A1
, 
cﬁ‹A2
, 
cﬁ‹A3
,

3273 
cﬁ‹B0
, 
cﬁ‹B1
, 
cﬁ‹B2
, 
cﬁ‹B3
,

3274 
cﬁ‹S1
, 
cﬁ‹S2
;

3275 
DWORD
 
¥odu˘1a
, 
¥odu˘1b
,

3276 
¥odu˘2a
, 
¥odu˘2b
;

3278 
löe
 = 0;

3281 ; 
height
; height-=1)

3283 
bP
 = (
DWORD
 *)
§cPå
;

3284 
dP
 = (
DWORD
 *)(
d°Bôm≠
 + 
löe
*
d°Pôch
);

3285 
föish
 = 
width
; finish; finish -= 1 )

3291 if(
föish
==
width
Ë
iXA
=0;

3292 
iXA
=1;

3293 if(
föish
>4Ë{
iXB
=1;
iXC
=2;}

3295 if(
föish
>3Ë{
iXB
=1;
iXC
=1;}

3296 {
iXB
=0;
iXC
=0;}

3297 if(
löe
==0Ë
iYA
=0;

3298 
iYA
=
width
;

3299 if(
height
>4Ë{
iYB
=
width
;
iYC
=
width2
;}

3301 if(
height
>3Ë{
iYB
=
width
;
iYC
=width;}

3302 {
iYB
=0;
iYC
=0;}

3305 
cﬁ‹B0
 = *(
bP
- 
iYA
 - 
iXA
);

3306 
cﬁ‹B1
 = *(
bP
- 
iYA
);

3307 
cﬁ‹B2
 = *(
bP
- 
iYA
 + 
iXB
);

3308 
cﬁ‹B3
 = *(
bP
- 
iYA
 + 
iXC
);

3310 
cﬁ‹4
 = *(
bP
 - 
iXA
);

3311 
cﬁ‹5
 = *(
bP
);

3312 
cﬁ‹6
 = *(
bP
 + 
iXB
);

3313 
cﬁ‹S2
 = *(
bP
 + 
iXC
);

3315 
cﬁ‹1
 = *(
bP
 + 
iYB
 - 
iXA
);

3316 
cﬁ‹2
 = *(
bP
 + 
iYB
);

3317 
cﬁ‹3
 = *(
bP
 + 
iYB
 + 
iXB
);

3318 
cﬁ‹S1
*(
bP
 + 
iYB
 + 
iXC
);

3320 
cﬁ‹A0
 = *(
bP
 + 
iYC
 - 
iXA
);

3321 
cﬁ‹A1
 = *(
bP
 + 
iYC
);

3322 
cﬁ‹A2
 = *(
bP
 + 
iYC
 + 
iXB
);

3323 
cﬁ‹A3
 = *(
bP
 + 
iYC
 + 
iXC
);

3326 i‡(
cﬁ‹2
 =
cﬁ‹6
 && 
cﬁ‹5
 !
cﬁ‹3
)

3328 
¥odu˘2b
 = 
¥odu˘1b
 = 
cﬁ‹2
;

3331 i‡(
cﬁ‹5
 =
cﬁ‹3
 && 
cﬁ‹2
 !
cﬁ‹6
)

3333 
¥odu˘2b
 = 
¥odu˘1b
 = 
cﬁ‹5
;

3336 i‡(
cﬁ‹5
 =
cﬁ‹3
 && 
cﬁ‹2
 =
cﬁ‹6
)

3338 
r
 = 0;

3340 
r
 +
	`GET_RESULT
 ((
cﬁ‹6
&0x00ffffff), (
cﬁ‹5
&0x00ffffff), (
cﬁ‹1
&0x00ffffff), (
cﬁ‹A1
&0x00ffffff));

3341 
r
 +
	`GET_RESULT
 ((
cﬁ‹6
&0x00ffffff), (
cﬁ‹5
&0x00ffffff), (
cﬁ‹4
&0x00ffffff), (
cﬁ‹B1
&0x00ffffff));

3342 
r
 +
	`GET_RESULT
 ((
cﬁ‹6
&0x00ffffff), (
cﬁ‹5
&0x00ffffff), (
cﬁ‹A2
&0x00ffffff), (
cﬁ‹S1
&0x00ffffff));

3343 
r
 +
	`GET_RESULT
 ((
cﬁ‹6
&0x00ffffff), (
cﬁ‹5
&0x00ffffff), (
cﬁ‹B2
&0x00ffffff), (
cﬁ‹S2
&0x00ffffff));

3345 i‡(
r
 > 0)

3346 
¥odu˘2b
 = 
¥odu˘1b
 = 
cﬁ‹6
;

3348 i‡(
r
 < 0)

3349 
¥odu˘2b
 = 
¥odu˘1b
 = 
cﬁ‹5
;

3352 
¥odu˘2b
 = 
¥odu˘1b
 = 
	`INTERPOLATE8
(
cﬁ‹5
, 
cﬁ‹6
);

3357 i‡(
cﬁ‹6
 =
cﬁ‹3
 && cﬁ‹3 =
cﬁ‹A1
 && 
cﬁ‹2
 !
cﬁ‹A2
 && cﬁ‹3 !
cﬁ‹A0
)

3358 
¥odu˘2b
 = 
	`Q_INTERPOLATE8
 (
cﬁ‹3
, cﬁ‹3, cﬁ‹3, 
cﬁ‹2
);

3360 i‡(
cﬁ‹5
 =
cﬁ‹2
 && cﬁ‹2 =
cﬁ‹A2
 && 
cﬁ‹A1
 !
cﬁ‹3
 && cﬁ‹2 !
cﬁ‹A3
)

3361 
¥odu˘2b
 = 
	`Q_INTERPOLATE8
 (
cﬁ‹2
, cﬁ‹2, cﬁ‹2, 
cﬁ‹3
);

3363 
¥odu˘2b
 = 
	`INTERPOLATE8
 (
cﬁ‹2
, 
cﬁ‹3
);

3365 i‡(
cﬁ‹6
 =
cﬁ‹3
 && cﬁ‹6 =
cﬁ‹B1
 && 
cﬁ‹5
 !
cﬁ‹B2
 && cﬁ‹6 !
cﬁ‹B0
)

3366 
¥odu˘1b
 = 
	`Q_INTERPOLATE8
 (
cﬁ‹6
, cﬁ‹6, cﬁ‹6, 
cﬁ‹5
);

3368 i‡(
cﬁ‹5
 =
cﬁ‹2
 && cﬁ‹5 =
cﬁ‹B2
 && 
cﬁ‹B1
 !
cﬁ‹6
 && cﬁ‹5 !
cﬁ‹B3
)

3369 
¥odu˘1b
 = 
	`Q_INTERPOLATE8
 (
cﬁ‹6
, 
cﬁ‹5
, color5, color5);

3371 
¥odu˘1b
 = 
	`INTERPOLATE8
 (
cﬁ‹5
, 
cﬁ‹6
);

3374 i‡(
cﬁ‹5
 =
cﬁ‹3
 && 
cﬁ‹2
 !
cﬁ‹6
 && 
cﬁ‹4
 =cﬁ‹5 && cﬁ‹5 !
cﬁ‹A2
)

3375 
¥odu˘2a
 = 
	`INTERPOLATE8
(
cﬁ‹2
, 
cﬁ‹5
);

3377 i‡(
cﬁ‹5
 =
cﬁ‹1
 && 
cﬁ‹6
 =cﬁ‹5 && 
cﬁ‹4
 !
cﬁ‹2
 && cﬁ‹5 !
cﬁ‹A0
)

3378 
¥odu˘2a
 = 
	`INTERPOLATE8
(
cﬁ‹2
, 
cﬁ‹5
);

3380 
¥odu˘2a
 = 
cﬁ‹2
;

3382 i‡(
cﬁ‹2
 =
cﬁ‹6
 && 
cﬁ‹5
 !
cﬁ‹3
 && 
cﬁ‹1
 =cﬁ‹2 && cﬁ‹2 !
cﬁ‹B2
)

3383 
¥odu˘1a
 = 
	`INTERPOLATE8
(
cﬁ‹2
, 
cﬁ‹5
);

3385 i‡(
cﬁ‹4
 =
cﬁ‹2
 && 
cﬁ‹3
 =cﬁ‹2 && 
cﬁ‹1
 !
cﬁ‹5
 && cﬁ‹2 !
cﬁ‹B0
)

3386 
¥odu˘1a
 = 
	`INTERPOLATE8
(
cﬁ‹2
, 
cﬁ‹5
);

3388 
¥odu˘1a
 = 
cﬁ‹5
;

3390 *
dP
=
¥odu˘1a
;

3391 *(
dP
+1)=
¥odu˘1b
;

3392 *(
dP
+(
width2
))=
¥odu˘2a
;

3393 *(
dP
+1+(
width2
))=
¥odu˘2b
;

3395 
bP
 += 1;

3396 
dP
 += 2;

3399 
löe
 += 2;

3400 
§cPå
 +
§cPôch
;

3403 
	}
}

3406 
	#cﬁ‹Mask4
 0x0000EEE0

	)

3407 
	#lowPixñMask4
 0x00001110

	)

3408 
	#qcﬁ‹Mask4
 0x0000CCC0

	)

3409 
	#qlowpixñMask4
 0x00003330

	)

3411 
	#INTERPOLATE4
(
A
, 
B
Ë((((A & 
cﬁ‹Mask4
Ë>> 1Ë+ ((B & cﬁ‹Mask4Ë>> 1Ë+ (A & B & 
lowPixñMask4
))|((((A&0x0000000F)==0x00000006)?0x00000006:(((B&0x0000000F)==0x00000006)?0x00000006:(((A&0x0000000F)==0x00000000)?0x00000000:(((B&0x0000000F)==0x00000000)?0x00000000:0x0000000F))))))

	)

3413 
	#Q_INTERPOLATE4
(
A
, 
B
, 
C
, 
D
Ë((((A & 
qcﬁ‹Mask4
Ë>> 2Ë+ ((B & qcﬁ‹Mask4Ë>> 2Ë+ ((C & qcﬁ‹Mask4Ë>> 2Ë+ ((D & qcﬁ‹Mask4Ë>> 2Ë+ ((((A & 
qlowpixñMask4
Ë+ (B & qlowpixñMask4Ë+ (C & qlowpixñMask4Ë+ (D & qlowpixñMask4)Ë>> 2Ë& qlowpixñMask4))| ((((A&0x0000000F)==0x00000006)?0x00000006:(((B&0x0000000F)==0x00000006)?0x00000006:(((C&0x0000000F)==0x00000006)?0x00000006:(((D&0x0000000F)==0x00000006)?0x00000006:(((A&0x0000000F)==0x00000000)?0x00000000:(((B&0x0000000F)==0x00000000)?0x00000000:(((C&0x0000000F)==0x00000000)?0x00000000:(((D&0x0000000F)==0x00000000)?0x00000000:0x0000000F))))))))))

	)

3416 
	#cﬁ‹Mask5
 0x0000F7BC

	)

3417 
	#lowPixñMask5
 0x00000842

	)

3418 
	#qcﬁ‹Mask5
 0x0000E738

	)

3419 
	#qlowpixñMask5
 0x000018C6

	)

3421 
	#INTERPOLATE5
(
A
, 
B
Ë((((A & 
cﬁ‹Mask5
Ë>> 1Ë+ ((B & cﬁ‹Mask5Ë>> 1Ë+ (A & B & 
lowPixñMask5
))|((((A&0x00000001)==0x00000000)?0x00000000:(((B&0x00000001)==0x00000000)?0x00000000:0x00000001))))

	)

3423 
	#Q_INTERPOLATE5
(
A
, 
B
, 
C
, 
D
Ë((((A & 
qcﬁ‹Mask5
Ë>> 2Ë+ ((B & qcﬁ‹Mask5Ë>> 2Ë+ ((C & qcﬁ‹Mask5Ë>> 2Ë+ ((D & qcﬁ‹Mask5Ë>> 2Ë+ ((((A & 
qlowpixñMask5
Ë+ (B & qlowpixñMask5Ë+ (C & qlowpixñMask5Ë+ (D & qlowpixñMask5)Ë>> 2Ë& qlowpixñMask5))| ((((A&0x00000001)==0x00000000)?0x00000000:(((B&0x00000001)==0x00000000)?0x00000000:(((C&0x00000001)==0x00000000)?0x00000000:(((D&0x00000001)==0x00000000)?0x00000000:0x00000001))))))

	)

3434 
	$DeföeSubTextuªS‹tHiRes
()

3436 
x
,
y
,
dx2
;

3438 if(!
gTexName
)

3440 
	`glGíTextuªs
(1, &
gTexName
); 
	`glEº‹
();

3441 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
gTexName
); 
	`glEº‹
();

3443 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_S
, 
iCœmpTy≥
); 
	`glEº‹
();

3444 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_T
, 
iCœmpTy≥
); 
	`glEº‹
();

3446 if(
iFûãrTy≥
)

3448 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
GL_LINEAR
); 
	`glEº‹
();

3449 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
GL_LINEAR
); 
	`glEº‹
();

3453 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
iFûãr
); 
	`glEº‹
();

3454 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
iFûãr
); 
	`glEº‹
();

3456 
	`glTexImage2D
(
GL_TEXTURE_2D
, 0, 
GL_RGBA
, 512, 512, 0, GL_RGBA, 
GL_UNSIGNED_BYTE
, 
ãxtuªbuf„r
); 
	`glEº‹
();

3458 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
gTexName
); 
	`glEº‹
();

3460 
	`glTexSubImage2D
(
GL_TEXTURE_2D
, 0, 
XTexS
<<1, 
YTexS
<<1,

3461 
DXTexS
<<1, 
DYTexS
<<1,

3462 
GL_RGBA
, 
GL_UNSIGNED_BYTE
, 
ãxtuªbuf„r
); 
	`glEº‹
();

3464 
	}
}

3468 
	$DeföeSubTextuªS‹t
()

3471 if(!
gTexName
)

3473 
	`glGíTextuªs
(1, &
gTexName
); 
	`glEº‹
();

3474 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
gTexName
); 
	`glEº‹
();

3476 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_S
, 
iCœmpTy≥
); 
	`glEº‹
();

3477 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_T
, 
iCœmpTy≥
); 
	`glEº‹
();

3479 if(
iFûãrTy≥
)

3481 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
GL_LINEAR
); 
	`glEº‹
();

3482 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
GL_LINEAR
); 
	`glEº‹
();

3486 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
iFûãr
); 
	`glEº‹
();

3487 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
iFûãr
); 
	`glEº‹
();

3489 
	`glTexImage2D
(
GL_TEXTURE_2D
, 0, 
GL_RGBA
, 256, 256, 0,GL_RGBA, 
GL_UNSIGNED_BYTE
, 
ãxtuª∑π
); 
	`glEº‹
();

3491 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
gTexName
); 
	`glEº‹
();

3493 
	`glTexSubImage2D
(
GL_TEXTURE_2D
, 0, 
XTexS
, 
YTexS
,

3494 
DXTexS
, 
DYTexS
,

3495 
GL_RGBA
, 
GL_UNSIGNED_BYTE
, 
ãxtuª∑π
); 
	`glEº‹
();

3497 
	}
}

3511 
	$DoTexG¨bageCﬁÀ˘i⁄
()

3513 
LRUCÀ™ed
=0;

3514 
iC
,
iC1
,
iC2
;

3515 
i
,
j
,
iMax
;
ãxtuªSubCacheE¡ryS
 * 
tsb
;

3517 
iC
=4;

3518 
LRUCÀ™ed
+=
iC
;

3519 if((
LRUCÀ™ed
+
iC
)>=
iS‹tTexC¡
) LRUCleaned=0;

3520 
iC1
=
LRUCÀ™ed
;

3521 
iC2
=
LRUCÀ™ed
+
iC
;

3523 
iC
=
iC1
;iC<
iC2
;iC++)

3525 
pxSsubãxLe·
[
iC
]->
l
=0;

3528 
i
=0;i<3;i++)

3529 
j
=0;j<
MAXTPAGES
;j++)

3530 
iC
=0;iC<4;iC++)

3532 
tsb
=
pscSubãxSt‹e
[
i
][
j
]+(
iC
*
SOFFB
);

3533 
iMax
=
tsb
->
pos
.
l
;

3534 if(
iMax
)

3537 
tsb
++;

3538 if(
tsb
->
cTexID
>=
iC1
 &&Åsb->cTexID<
iC2
)

3539 
tsb
->
ClutID
=0;

3541 --
iMax
);

3544 
usLRUTexPage
=
LRUCÀ™ed
;

3545 
	}
}

3557 * 
	$CheckTextuªInSubSCache
(
TextuªMode
,
GivíClutId
,* 
pCache
)

3559 
ãxtuªSubCacheE¡ryS
 * 
tsx
, * 
tsb
, *
tsg
;

3560 
i
,
iMax
;
EXL⁄g
 
≈os
;

3561 
cx
,
cy
;

3562 
iC
,
j
,
k
;
rx
,
ry
,
mx
,
my
;

3563 
EXL⁄g
 * 
ul
=0, * 
uls
;

3564 
EXL⁄g
 
r‰ì
;

3565 
cXAdj
,
cYAdj
;

3567 
≈os
.
l
=*((*)&
gl_ux
[4]);

3573 
tsg
=
pscSubãxSt‹e
[
TextuªMode
][
GlobÆTextuªPage
];

3574 
tsg
+=((
GivíClutId
&
CLUTCHK
)>>
CLUTSHIFT
)*
SOFFB
;

3576 
iMax
=
tsg
->
pos
.
l
;

3577 if(
iMax
)

3579 
i
=
iMax
;

3580 
tsb
=
tsg
+1;

3583 if(
GivíClutId
==
tsb
->
ClutID
 &&

3584 (
	`INCHECK
(
tsb
->
pos
,
≈os
)))

3587 
cx
=
tsb
->
pos
.
c
[3]-tsb->
posTX
;

3588 
cy
=
tsb
->
pos
.
c
[1]-tsb->
posTY
;

3590 
gl_ux
[0]-=
cx
;

3591 
gl_ux
[1]-=
cx
;

3592 
gl_ux
[2]-=
cx
;

3593 
gl_ux
[3]-=
cx
;

3594 
gl_vy
[0]-=
cy
;

3595 
gl_vy
[1]-=
cy
;

3596 
gl_vy
[2]-=
cy
;

3597 
gl_vy
[3]-=
cy
;

3599 
ubO∑queDøw
=
tsb
->
O∑que
;

3600 *
pCache
=
tsb
->
cTexID
;

3601  
NULL
;

3604 
tsb
++;

3606 --
i
);

3611 
cXAdj
=1;
cYAdj
=1;

3613 
rx
=()
gl_ux
[6]-()gl_ux[7];

3614 
ry
=()
gl_ux
[4]-()gl_ux[5];

3616 
tsx
=
NULL
;
tsb
=
tsg
+1;

3617 
i
=0;i<
iMax
;i++,
tsb
++)

3619 if(!
tsb
->
ClutID
Ë{
tsx
=tsb;;}

3622 if(!
tsx
)

3624 
iMax
++;

3625 if(
iMax
>=
SOFFB
-2)

3627 if(
iTexG¨bageCﬁÀ˘i⁄
)

3629 if(*
pCache
==0)

3631 
dwTexPageComp
|=(1<<
GlobÆTextuªPage
);

3632 *
pCache
=0xffff;

3636 
iMax
--;

3637 
tsb
=
tsg
+1;

3639 
i
=0;i<
iMax
;i++,
tsb
++)

3640 if(
GivíClutId
==
tsb
->
ClutID
)

3642 if(!
tsx
Ë{tsx=
tsb
;
r‰ì
.
l
=
≈os
.l;}

3643 
tsb
->
ClutID
=0;

3644 
r‰ì
.
c
[3]=
	`mö
‘‰ì.c[3],
tsb
->
pos
.c[3]);

3645 
r‰ì
.
c
[2]=
	`max
‘‰ì.c[2],
tsb
->
pos
.c[2]);

3646 
r‰ì
.
c
[1]=
	`mö
‘‰ì.c[1],
tsb
->
pos
.c[1]);

3647 
r‰ì
.
c
[0]=
	`max
‘‰ì.c[0],
tsb
->
pos
.c[0]);

3648 
	`M¨kFªe
(
tsb
);

3651 if(
tsx
)

3653 *((*)&
gl_ux
[4])=
≈os
.
l
=
r‰ì
.l;

3654 
rx
=()
r‰ì
.
c
[2]-()rfree.c[3];

3655 
ry
=()
r‰ì
.
c
[0]-()rfree.c[1];

3656 
	`DoTexG¨bageCﬁÀ˘i⁄
();

3658 
ENDLOOP3
;

3662 
iMax
=1;

3664 
tsx
=
tsg
+
iMax
;

3665 
tsg
->
pos
.
l
=
iMax
;

3672 if(
iTexG¨bageCﬁÀ˘i⁄
Ë
usLRUTexPage
=0;

3674 
ENDLOOP3
:

3676 
rx
+=3;if‘x>255Ë{
cXAdj
=0;rx=255;}

3677 
ry
+=3;if‘y>255Ë{
cYAdj
=0;ry=255;}

3679 
iC
=
usLRUTexPage
;

3681 
k
=0;k<
iS‹tTexC¡
;k++)

3683 
uls
=
pxSsubãxLe·
[
iC
];

3684 
iMax
=
uls
->
l
;
ul
=uls+1;

3689 if(!
iMax
)

3691 
r‰ì
.
l
=0;

3693 if(
rx
>252 && 
ry
>252)

3694 {
uls
->
l
=1;
ul
->l=0xffffffff;ul=0;
ENDLOOP
;}

3696 if(
rx
<253)

3698 
uls
->
l
=uls->l+1;

3699 
ul
->
c
[3]=
rx
;

3700 
ul
->
c
[2]=255-
rx
;

3701 
ul
->
c
[1]=0;

3702 
ul
->
c
[0]=
ry
;

3703 
ul
++;

3706 if(
ry
<253)

3708 
uls
->
l
=uls->l+1;

3709 
ul
->
c
[3]=0;

3710 
ul
->
c
[2]=255;

3711 
ul
->
c
[1]=
ry
;

3712 
ul
->
c
[0]=255-
ry
;

3714 
ul
=0;

3715 
ENDLOOP
;

3719 
i
=0;i<
iMax
;i++,
ul
++)

3721 if(
ul
->
l
!=0xffffffff &&

3722 
ry
<=
ul
->
c
[0] &&

3723 
rx
<=
ul
->
c
[2])

3725 
r‰ì
=*
ul
;

3726 
mx
=
ul
->
c
[2]-2;

3727 
my
=
ul
->
c
[0]-2;

3728 if(
rx
<
mx
 && 
ry
<
my
)

3730 
ul
->
c
[3]+=
rx
;

3731 
ul
->
c
[2]-=
rx
;

3732 
ul
->
c
[0]=
ry
;

3734 
ul
=
uls
+1,
j
=0;j<
iMax
;j++,ul++)

3735 if(
ul
->
l
==0xffffffff) ;

3737 if(
j
<
CSUBSIZE
-2)

3739 if(
j
==
iMax
Ë
uls
->
l
=uls->l+1;

3741 
ul
->
c
[3]=
r‰ì
.c[3];

3742 
ul
->
c
[2]=
r‰ì
.c[2];

3743 
ul
->
c
[1]=
r‰ì
.c[1]+
ry
;

3744 
ul
->
c
[0]=
r‰ì
.c[0]-
ry
;

3747 if(
rx
<
mx
)

3749 
ul
->
c
[3]+=
rx
;

3750 
ul
->
c
[2]-=
rx
;

3752 if(
ry
<
my
)

3754 
ul
->
c
[1]+=
ry
;

3755 
ul
->
c
[0]-=
ry
;

3759 
ul
->
l
=0xffffffff;

3761 
ul
=0;

3762 
ENDLOOP
;

3768 
iC
++; if(iC>=
iS‹tTexC¡
) iC=0;

3775 
ENDLOOP
:

3776 if(
ul
)

3781 
dwTexPageComp
=0;

3783 
i
=0;i<3;i++)

3784 
j
=0;j<
MAXTPAGES
;j++)

3786 
tsb
=
pscSubãxSt‹e
[
i
][
j
];

3787 (
tsb
+
SOFFA
)->
pos
.
l
=0;

3788 (
tsb
+
SOFFB
)->
pos
.
l
=0;

3789 (
tsb
+
SOFFC
)->
pos
.
l
=0;

3790 (
tsb
+
SOFFD
)->
pos
.
l
=0;

3792 
i
=0;i<
iS‹tTexC¡
;i++)

3793 {
ul
=
pxSsubãxLe·
[
i
];ul->
l
=0;}

3794 
usLRUTexPage
=0;

3798 
iC
=
usLRUTexPage
;

3799 
uls
=
pxSsubãxLe·
[
usLRUTexPage
];

3800 
uls
->
l
=0;
ul
=uls+1;

3801 
r‰ì
.
l
=0;

3803 if(
rx
>252 && 
ry
>252)

3804 {
uls
->
l
=1;
ul
->l=0xffffffff;}

3807 if(
rx
<253)

3809 
uls
->
l
=uls->l+1;

3810 
ul
->
c
[3]=
rx
;

3811 
ul
->
c
[2]=255-
rx
;

3812 
ul
->
c
[1]=0;

3813 
ul
->
c
[0]=
ry
;

3814 
ul
++;

3816 if(
ry
<253)

3818 
uls
->
l
=uls->l+1;

3819 
ul
->
c
[3]=0;

3820 
ul
->
c
[2]=255;

3821 
ul
->
c
[1]=
ry
;

3822 
ul
->
c
[0]=255-
ry
;

3825 
tsg
->
pos
.
l
=1;
tsx
=tsg+1;

3828 
r‰ì
.
c
[3]+=
cXAdj
;

3829 
r‰ì
.
c
[1]+=
cYAdj
;

3831 
tsx
->
cTexID
 =*
pCache
=
iC
;

3832 
tsx
->
pos
 = 
≈os
;

3833 
tsx
->
ClutID
 = 
GivíClutId
;

3834 
tsx
->
posTX
 = 
r‰ì
.
c
[3];

3835 
tsx
->
posTY
 = 
r‰ì
.
c
[1];

3837 
cx
=
gl_ux
[7]-
r‰ì
.
c
[3];

3838 
cy
=
gl_ux
[5]-
r‰ì
.
c
[1];

3840 
gl_ux
[0]-=
cx
;

3841 
gl_ux
[1]-=
cx
;

3842 
gl_ux
[2]-=
cx
;

3843 
gl_ux
[3]-=
cx
;

3844 
gl_vy
[0]-=
cy
;

3845 
gl_vy
[1]-=
cy
;

3846 
gl_vy
[2]-=
cy
;

3847 
gl_vy
[3]-=
cy
;

3849 
XTexS
=
r‰ì
.
c
[3];

3850 
YTexS
=
r‰ì
.
c
[1];

3852  &
tsx
->
O∑que
;

3853 
	}
}

3865 
BOOL
 
	$GëCom¥essTextuªPœ˚
(
ãxtuªSubCacheE¡ryS
 * 
tsx
)

3867 
i
,
j
,
k
,
iMax
,
iC
;
rx
,
ry
,
mx
,
my
;

3868 
EXL⁄g
 * 
ul
=0, * 
uls
, 
r‰ì
;

3869 
cXAdj
=1,
cYAdj
=1;

3871 
rx
=()
tsx
->
pos
.
c
[2]-()tsx->pos.c[3];

3872 
ry
=()
tsx
->
pos
.
c
[0]-()tsx->pos.c[1];

3874 
rx
+=3;if‘x>255Ë{
cXAdj
=0;rx=255;}

3875 
ry
+=3;if‘y>255Ë{
cYAdj
=0;ry=255;}

3877 
iC
=
usLRUTexPage
;

3879 
k
=0;k<
iS‹tTexC¡
;k++)

3881 
uls
=
pxSsubãxLe·
[
iC
];

3882 
iMax
=
uls
->
l
;
ul
=uls+1;

3887 if(!
iMax
)

3889 
r‰ì
.
l
=0;

3891 if(
rx
>252 && 
ry
>252)

3892 {
uls
->
l
=1;
ul
->l=0xffffffff;ul=0;
TENDLOOP
;}

3894 if(
rx
<253)

3896 
uls
->
l
=uls->l+1;

3897 
ul
->
c
[3]=
rx
;

3898 
ul
->
c
[2]=255-
rx
;

3899 
ul
->
c
[1]=0;

3900 
ul
->
c
[0]=
ry
;

3901 
ul
++;

3904 if(
ry
<253)

3906 
uls
->
l
=uls->l+1;

3907 
ul
->
c
[3]=0;

3908 
ul
->
c
[2]=255;

3909 
ul
->
c
[1]=
ry
;

3910 
ul
->
c
[0]=255-
ry
;

3912 
ul
=0;

3913 
TENDLOOP
;

3917 
i
=0;i<
iMax
;i++,
ul
++)

3919 if(
ul
->
l
!=0xffffffff &&

3920 
ry
<=
ul
->
c
[0] &&

3921 
rx
<=
ul
->
c
[2])

3923 
r‰ì
=*
ul
;

3924 
mx
=
ul
->
c
[2]-2;

3925 
my
=
ul
->
c
[0]-2;

3927 if(
rx
<
mx
 && 
ry
<
my
)

3929 
ul
->
c
[3]+=
rx
;

3930 
ul
->
c
[2]-=
rx
;

3931 
ul
->
c
[0]=
ry
;

3933 
ul
=
uls
+1,
j
=0;j<
iMax
;j++,ul++)

3934 if(
ul
->
l
==0xffffffff) ;

3936 if(
j
<
CSUBSIZE
-2)

3938 if(
j
==
iMax
Ë
uls
->
l
=uls->l+1;

3940 
ul
->
c
[3]=
r‰ì
.c[3];

3941 
ul
->
c
[2]=
r‰ì
.c[2];

3942 
ul
->
c
[1]=
r‰ì
.c[1]+
ry
;

3943 
ul
->
c
[0]=
r‰ì
.c[0]-
ry
;

3946 if(
rx
<
mx
)

3948 
ul
->
c
[3]+=
rx
;

3949 
ul
->
c
[2]-=
rx
;

3951 if(
ry
<
my
)

3953 
ul
->
c
[1]+=
ry
;

3954 
ul
->
c
[0]-=
ry
;

3958 
ul
->
l
=0xffffffff;

3960 
ul
=0;

3961 
TENDLOOP
;

3967 
iC
++; if(iC>=
iS‹tTexC¡
) iC=0;

3974 
TENDLOOP
:

3975 if(
ul
Ë 
FALSE
;

3977 
r‰ì
.
c
[3]+=
cXAdj
;

3978 
r‰ì
.
c
[1]+=
cYAdj
;

3980 
tsx
->
cTexID
 = 
iC
;

3981 
tsx
->
posTX
 = 
r‰ì
.
c
[3];

3982 
tsx
->
posTY
 = 
r‰ì
.
c
[1];

3984 
XTexS
=
r‰ì
.
c
[3];

3985 
YTexS
=
r‰ì
.
c
[1];

3987  
TRUE
;

3988 
	}
}

4000 
	$Com¥essTextuªS∑˚
()

4002 
ãxtuªSubCacheE¡ryS
 * 
tsx
, * 
tsg
, * 
tsb
;

4003 
i
,
j
,
k
,
m
,
n
,
iMax
;
EXL⁄g
 * 
ul
, 
r
,
›os
;

4004 
sOldDST
=
DøwSemiTøns
,
cx
,
cy
;

4005 
lOGTP
=
GlobÆTextuªPage
;

4006 
l
,
row
;

4007 * 
lSRCPå
;

4009 
›os
.
l
=*((*)&
gl_ux
[4]);

4012 
i
=0;i<
iS‹tTexC¡
;i++)

4013 {
ul
=
pxSsubãxLe·
[
i
];ul->
l
=0;}

4014 
usLRUTexPage
=0;

4017 
j
=0;j<3;j++)

4019 
k
=0;k<
MAXTPAGES
;k++)

4021 
tsg
=
pscSubãxSt‹e
[
j
][
k
];

4023 if((!(
dwTexPageComp
&(1<<
k
))))

4025 (
tsg
+
SOFFA
)->
pos
.
l
=0;

4026 (
tsg
+
SOFFB
)->
pos
.
l
=0;

4027 (
tsg
+
SOFFC
)->
pos
.
l
=0;

4028 (
tsg
+
SOFFD
)->
pos
.
l
=0;

4032 
m
=0;m<4;m++,
tsg
+=
SOFFB
)

4034 
iMax
=
tsg
->
pos
.
l
;

4036 
tsx
=
tsg
+1;

4037 
i
=0;i<
iMax
;i++,
tsx
++)

4039 if(
tsx
->
ClutID
)

4041 
r
.
l
=
tsx
->
pos
.l;

4042 
n
=
i
+1,
tsb
=
tsx
+1;n<
iMax
;n++,tsb++)

4044 if(
tsx
->
ClutID
==
tsb
->ClutID)

4046 
r
.
c
[3]=
	`mö
‘.c[3],
tsb
->
pos
.c[3]);

4047 
r
.
c
[2]=
	`max
‘.c[2],
tsb
->
pos
.c[2]);

4048 
r
.
c
[1]=
	`mö
‘.c[1],
tsb
->
pos
.c[1]);

4049 
r
.
c
[0]=
	`max
‘.c[0],
tsb
->
pos
.c[0]);

4050 
tsb
->
ClutID
=0;

4056 
cx
=((
tsx
->
ClutID
 << 4) & 0x3F0);

4057 
cy
=((
tsx
->
ClutID
 >> 6Ë& 
CLUTYMASK
);

4059 if(
j
!=2)

4062 
l
=0;
lSRCPå
=(*)(
psxVuw
+
cx
+(
cy
*1024));

4063 if(
j
==1Ë
row
=1;row<129;row++Ë
l
+=((*
lSRCPå
++)-1)*row;

4064 
row
=1;row<9;row++Ë
l
+=((*
lSRCPå
++)-1)<<row;

4065 
l
=(÷+
	`HIWORD
(l))&0x3fffL)<<16;

4066 if(
l
!=(
tsx
->
ClutID
&(0x00003fff<<16)))

4068 
tsx
->
ClutID
=0;;

4072 
tsx
->
pos
.
l
=
r
.l;

4073 if(!
	`GëCom¥essTextuªPœ˚
(
tsx
))

4075 
i
=0;i<3;i++)

4076 
j
=0;j<
MAXTPAGES
;j++)

4078 
tsb
=
pscSubãxSt‹e
[
i
][
j
];

4079 (
tsb
+
SOFFA
)->
pos
.
l
=0;

4080 (
tsb
+
SOFFB
)->
pos
.
l
=0;

4081 (
tsb
+
SOFFC
)->
pos
.
l
=0;

4082 (
tsb
+
SOFFD
)->
pos
.
l
=0;

4084 
i
=0;i<
iS‹tTexC¡
;i++)

4085 {
ul
=
pxSsubãxLe·
[
i
];ul->
l
=0;}

4086 
usLRUTexPage
=0;

4087 
DøwSemiTøns
=
sOldDST
;

4088 
GlobÆTextuªPage
=
lOGTP
;

4089 *((*)&
gl_ux
[4])=
›os
.
l
;

4090 
dwTexPageComp
=0;

4095 if(
tsx
->
ClutID
&(1<<30)Ë
DøwSemiTøns
=1;

4096 
DøwSemiTøns
=0;

4097 *((*)&
gl_ux
[4])=
r
.
l
;

4099 
gTexName
=
uiSãxtuªPage
[
tsx
->
cTexID
];

4100 
	`LﬂdSubTexFn
(
k
,
j
,
cx
,
cy
);

4101 
uiSãxtuªPage
[
tsx
->
cTexID
]=
gTexName
;

4102 
tsx
->
O∑que
=
ubO∑queDøw
;

4107 if(
iMax
)

4109 
tsx
=
tsg
+
iMax
;

4110 !
tsx
->
ClutID
 && 
iMax
) {tsx--;iMax--;}

4111 
tsg
->
pos
.
l
=
iMax
;

4118 if(
dwTexPageComp
==0xffffffff) dwTexPageComp=0;

4120 *((*)&
gl_ux
[4])=
›os
.
l
;

4121 
GlobÆTextuªPage
=
lOGTP
;

4122 
DøwSemiTøns
=
sOldDST
;

4123 
	}
}

4135 
GLuöt
 
	$Sñe˘SubTextuªS
(
TextuªMode
, 
GivíClutId
)

4137 * 
OPå
;
iCache
;
cx
,
cy
;

4141 
ma1
,
ma2
,
mi1
,
mi2
;

4142 if(
gl_ux
[0]>gl_ux[1]Ë{
mi1
=gl_ux[1];
ma1
=gl_ux[0];}

4143 {
mi1
=
gl_ux
[0];
ma1
=gl_ux[1];}

4144 if(
gl_ux
[2]>gl_ux[3]Ë{
mi2
=gl_ux[3];
ma2
=gl_ux[2];}

4145 {
mi2
=
gl_ux
[2];
ma2
=gl_ux[3];}

4146 if(
mi1
>
mi2
Ë
gl_ux
[7]=mi2;

4147 
gl_ux
[7]=
mi1
;

4148 if(
ma1
>
ma2
Ë
gl_ux
[6]=ma1;

4149 
gl_ux
[6]=
ma2
;

4151 if(
gl_vy
[0]>gl_vy[1]Ë{
mi1
=gl_vy[1];
ma1
=gl_vy[0];}

4152 {
mi1
=
gl_vy
[0];
ma1
=gl_vy[1];}

4153 if(
gl_vy
[2]>gl_vy[3]Ë{
mi2
=gl_vy[3];
ma2
=gl_vy[2];}

4154 {
mi2
=
gl_vy
[2];
ma2
=gl_vy[3];}

4155 if(
mi1
>
mi2
Ë
gl_ux
[5]=mi2;

4156 
gl_ux
[5]=
mi1
;

4157 if(
ma1
>
ma2
Ë
gl_ux
[4]=ma1;

4158 
gl_ux
[4]=
ma2
;

4162 if(
TextuªMode
==2)

4164 
GivíClutId
=
CLUTUSED
|(
DøwSemiTøns
<<30);
cx
=
cy
=0;

4166 if(
iFømeTexTy≥
 && 
	`Fake15BôTextuª
())

4167  (
GLuöt
)
gTexName
;

4171 
cx
=((
GivíClutId
 << 4) & 0x3F0);

4172 
cy
=((
GivíClutId
 >> 6Ë& 
CLUTYMASK
);

4173 
GivíClutId
=(GivíClutId&
CLUTMASK
)|(
DøwSemiTøns
<<30)|
CLUTUSED
;

4177 
l
=0,
row
;

4179 * 
lSRCPå
=(*)(
psxVuw
+
cx
+(
cy
*1024));

4180 if(
TextuªMode
==1Ë
row
=1;row<129;row++Ë
l
+=((*
lSRCPå
++)-1)*row;

4181 
row
=1;row<9;row++Ë
l
+=((*
lSRCPå
++)-1)<<row;

4182 
l
=÷+
	`HIWORD
(l))&0x3fffL;

4183 
GivíClutId
|=(
l
<<16);

4189 
iCache
=0;

4190 
OPå
=
	`CheckTextuªInSubSCache
(
TextuªMode
,
GivíClutId
,&
iCache
);

4193 if(
iCache
==0xffff)

4195 
	`Com¥essTextuªS∑˚
();

4196 
OPå
=
	`CheckTextuªInSubSCache
(
TextuªMode
,
GivíClutId
,&
iCache
);

4200 
usLRUTexPage
=
iCache
;

4201 if(!
OPå
Ë 
uiSãxtuªPage
[
iCache
];

4204 
gTexName
=
uiSãxtuªPage
[
iCache
];

4205 
	`LﬂdSubTexFn
(
GlobÆTextuªPage
,
TextuªMode
,
cx
,
cy
);

4206 
uiSãxtuªPage
[
iCache
]=
gTexName
;

4207 *
OPå
=
ubO∑queDøw
;

4208  (
GLuöt
Ë
gTexName
;

4209 
	}
}

	@plugins/gpu-gles/gpuTexture.h

27 #i‚de‡
_GPU_TEXTURE_H_


28 
	#_GPU_TEXTURE_H_


	)

30 #ifde‡
__˝lu•lus


35 
	#TEXTUREPAGESIZE
 256*256

	)

37 
InôülizeTextuªSt‹e
();

38 
CÀ™upTextuªSt‹e
();

39 
GLuöt
 
LﬂdTextuªWnd
(
∑geid
,
TextuªMode
,
GivíClutId
);

40 
GLuöt
 
LﬂdTextuªMovõ
();

41 
InvÆid©eTextuªAªa
(
imageX0
,
imageY0
,
imageX1
,
imageY1
);

42 
InvÆid©eTextuªAªaEx
();

43 
LﬂdTextuªPage
(
∑geid
, 
mode
, 
cx
, 
cy
);

44 
Re£tTextuªAªa
(
BOOL
 
bDñTex
);

45 
GLuöt
 
Sñe˘SubTextuªS
(
TextuªMode
, 
GivíClutId
);

46 
CheckTextuªMem‹y
();

49 
LﬂdSubTextuªPage
(
∑geid
, 
mode
, 
cx
, 
cy
);

50 
LﬂdSubTextuªPageS‹t
(
∑geid
, 
mode
, 
cx
, 
cy
);

51 
LﬂdPackedSubTextuªPage
(
∑geid
, 
mode
, 
cx
, 
cy
);

52 
LﬂdPackedSubTextuªPageS‹t
(
∑geid
, 
mode
, 
cx
, 
cy
);

53 
XP8RGBA
(
BGR
);

54 
XP8RGBAEx
(
BGR
);

55 
XP8RGBA_0
(
BGR
);

56 
XP8RGBAEx_0
(
BGR
);

57 
XP8BGRA_0
(
BGR
);

58 
XP8BGRAEx_0
(
BGR
);

59 
XP8RGBA_1
(
BGR
);

60 
XP8RGBAEx_1
(
BGR
);

61 
XP8BGRA_1
(
BGR
);

62 
XP8BGRAEx_1
(
BGR
);

63 
P8RGBA
(
BGR
);

64 
P8BGRA
(
BGR
);

65 
CP8RGBA_0
(
BGR
);

66 
CP8RGBAEx_0
(
BGR
);

67 
CP8BGRA_0
(
BGR
);

68 
CP8BGRAEx_0
(
BGR
);

69 
CP8RGBA
(
BGR
);

70 
CP8RGBAEx
(
BGR
);

71 
XP5RGBA
 (
BGR
);

72 
XP5RGBA_0
 (
BGR
);

73 
XP5RGBA_1
 (
BGR
);

74 
P5RGBA
 (
BGR
);

75 
CP5RGBA_0
 (
BGR
);

76 
XP4RGBA
 (
BGR
);

77 
XP4RGBA_0
 (
BGR
);

78 
XP4RGBA_1
 (
BGR
);

79 
P4RGBA
 (
BGR
);

80 
CP4RGBA_0
 (
BGR
);

82 #ifde‡
__˝lu•lus


	@plugins/gpu-gles/gpulib_if.c

19 
	~"gpuDøw.c
"

20 
	~"gpuTextuª.c
"

21 
	~"gpuPrim.c
"

22 
	~"hud.c
"

24 c⁄° 
	gdi•Widths
[8] = {256,320,512,640,368,384,512,640};

25 
	gg_m1
,
	gg_m2
,
	gg_m3
;

26 
	gDøwSemiTøns
;

28 
	gly0
,
	glx0
,
	gly1
,
	glx1
,
	gly2
,
	glx2
,
	gly3
,
	glx3
;

29 
	gGlobÆTextAddrX
,
	gGlobÆTextAddrY
,
	gGlobÆTextTP
;

30 
	gGlobÆTextREST
,
	gGlobÆTextABR
,
	gGlobÆTextPAGE
;

32 
	gdwGPUVîsi⁄
;

33 
	giGPUHeight
=512;

34 
	giGPUHeightMask
=511;

35 
	gGlobÆTextIL
;

37 *
	gpsxVub
;

38 *
	gpsxVuw
;

40 
GLÊﬂt
 
	ggl_z
=0.0f;

41 
BOOL
 
	gbNìdI¡îœ˚Upd©e
;

42 
BOOL
 
	gbNìdRGB24Upd©e
;

43 
BOOL
 
	gbCh™geWöMode
;

44 
	glGPU°©usRë
;

45 
	gulGPUInfoVÆs
[16];

46 
VRAMLﬂd_t
 
	gVRAMWrôe
;

47 
VRAMLﬂd_t
 
	gVRAMRód
;

48 
	giD©aWrôeMode
;

49 
	giD©aRódMode
;

51 
	glCÀ¨OnSw≠
;

52 
	glCÀ¨OnSw≠Cﬁ‹
;

53 
BOOL
 
	gbSkùNextFøme
;

55 
PSXDi•œy_t
 
	gPSXDi•œy
;

56 
PSXDi•œy_t
 
	gPªviousPSXDi•œy
;

57 
TWö_t
 
	gTWö
;

58 
BOOL
 
	gbDi•œyNŸSë
;

59 
BOOL
 
	gbNìdWrôeU∂ﬂd
;

60 
	giLa°RGB24
;

63 
	$CheckVRamRód
(
x
, 
y
, 
dx
, 
dy
, 
boﬁ
 
bFr⁄t
)

65 
	}
}

67 
	$CheckVRamRódEx
(
x
, 
y
, 
dx
, 
dy
)

69 
	}
}

71 
	$SëFixes
()

73 
	}
}

75 
	$PaötBœckB‹dîs
()

77 
s
;

78 
	`glDißbÀ
(
GL_SCISSOR_TEST
); 
	`glEº‹
();

79 if(
bTexE«bÀd
Ë{
	`glDißbÀ
(
GL_TEXTURE_2D
);bTexE«bÀd=
FALSE
;} 
	`glEº‹
();

80 if(
bOldSmoŸhShaded
Ë{
	`glShadeModñ
(
GL_FLAT
);bOldSmoŸhShaded=
FALSE
;} 
	`glEº‹
();

81 if(
bBÀndE«bÀ
Ë{
	`glDißbÀ
(
GL_BLEND
);bBÀndE«bÀ=
FALSE
;} 
	`glEº‹
();

82 
	`glDißbÀ
(
GL_ALPHA_TEST
); 
	`glEº‹
();

84 
	`glE«bÀ
(
GL_ALPHA_TEST
); 
	`glEº‹
();

85 
	`glE«bÀ
(
GL_SCISSOR_TEST
); 
	`glEº‹
();

86 
	}
}

88 
Âs_upd©e
();

90 
	$upd©eDi•œy
()

92 
bFakeFr⁄tBuf„r
=
FALSE
;

93 
bRídîFr⁄tBuf„r
=
FALSE
;

95 if(
PSXDi•œy
.
RGB24
)

97 
	`Pª∑ªFuŒS¸ìnU∂ﬂd
(-1);

98 
	`U∂ﬂdS¸ìn
(
PSXDi•œy
.
I¡îœ˚d
);

99 
bNìdU∂ﬂdTe°
=
FALSE
;

100 
bNìdI¡îœ˚Upd©e
=
FALSE
;

101 
bNìdU∂ﬂdA·î
=
FALSE
;

102 
bNìdRGB24Upd©e
=
FALSE
;

105 if(
bNìdI¡îœ˚Upd©e
)

107 
bNìdI¡îœ˚Upd©e
=
FALSE
;

108 
xrU∂ﬂdAªa
=
xrU∂ﬂdAªaIL
;

109 
	`U∂ﬂdS¸ìn
(
TRUE
);

112 if(
dwA˘Fixes
&512Ë
	`bCheckFF9G4
(
NULL
);

114 if(
PSXDi•œy
.
DißbÀd
)

117 
	`glDißbÀ
(
GL_SCISSOR_TEST
); 
	`glEº‹
();

118 
	`glCÀ¨Cﬁ‹
(0,0,0,128); 
	`glEº‹
();

119 
	`glCÀ¨
(
uiBuf„rBôs
); 
	`glEº‹
();

120 
	`glE«bÀ
(
GL_SCISSOR_TEST
); 
	`glEº‹
();

121 
gl_z
=0.0f;

122 
bDi•œyNŸSë
 = 
TRUE
;

125 if(
iDøwnSomëhög
)

127 
	`Âs_upd©e
();

128 
	`eglSw≠Buf„rs
(
di•œy
, 
surÁ˚
);

129 
iDøwnSomëhög
=0;

132 if(
lCÀ¨OnSw≠
)

134 
GL˛ampf
 
g
,
b
,
r
;

136 if(
bDi•œyNŸSë
)

137 
	`SëOGLDi•œySëtögs
(1);

139 
g
=((
GL˛ampf
)
	`GREEN
(
lCÀ¨OnSw≠Cﬁ‹
))/255.0f;

140 
b
=((
GL˛ampf
)
	`BLUE
(
lCÀ¨OnSw≠Cﬁ‹
))/255.0f;

141 
r
=((
GL˛ampf
)
	`RED
(
lCÀ¨OnSw≠Cﬁ‹
))/255.0f;

142 
	`glDißbÀ
(
GL_SCISSOR_TEST
); 
	`glEº‹
();

143 
	`glCÀ¨Cﬁ‹
(
r
,
g
,
b
,128); 
	`glEº‹
();

144 
	`glCÀ¨
(
uiBuf„rBôs
); 
	`glEº‹
();

145 
	`glE«bÀ
(
GL_SCISSOR_TEST
); 
	`glEº‹
();

146 
lCÀ¨OnSw≠
=0;

150 if(
iZBuf„rDïth
)

152 
	`glDißbÀ
(
GL_SCISSOR_TEST
); 
	`glEº‹
();

153 
	`glCÀ¨
(
GL_DEPTH_BUFFER_BIT
); 
	`glEº‹
();

154 
	`glE«bÀ
(
GL_SCISSOR_TEST
); 
	`glEº‹
();

157 
gl_z
=0.0f;

160 if(
bNìdU∂ﬂdA·î
)

162 
bNìdU∂ﬂdA·î
=
FALSE
;

163 
bNìdU∂ﬂdTe°
=
FALSE
;

164 
	`U∂ﬂdS¸ìn
(-1);

167 if(
bNìdU∂ﬂdTe°
)

169 
bNìdU∂ﬂdTe°
=
FALSE
;

170 if(
PSXDi•œy
.
I¡îœ˚dTe°
 &&

172 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
==
PSXDi•œy
.DisplayPosition.x &&

173 
PªviousPSXDi•œy
.
Di•œyEnd
.
x
==
PSXDi•œy
.DisplayEnd.x &&

174 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
==
PSXDi•œy
.DisplayPosition.y &&

175 
PªviousPSXDi•œy
.
Di•œyEnd
.
y
==
PSXDi•œy
.DisplayEnd.y)

177 
	`Pª∑ªFuŒS¸ìnU∂ﬂd
(
TRUE
);

178 
	`U∂ﬂdS¸ìn
(
TRUE
);

181 
	}
}

183 
	$upd©eFr⁄tDi•œy
()

185 if(
PªviousPSXDi•œy
.
R™ge
.
x0
||

186 
PªviousPSXDi•œy
.
R™ge
.
y0
)

187 
	`PaötBœckB‹dîs
();

189 
bFakeFr⁄tBuf„r
=
FALSE
;

190 
bRídîFr⁄tBuf„r
=
FALSE
;

192 if(
iDøwnSomëhög
)

193 
	`eglSw≠Buf„rs
(
di•œy
, 
surÁ˚
);

194 
	}
}

196 
	$Ch™geDi•Off£tsX
()

198 
lx
,
l
;
sO
;

200 if(!
PSXDi•œy
.
R™ge
.
x1
) ;

202 
l
=
PSXDi•œy
.
Di•œyMode
.
x
;

204 
l
*=()
PSXDi•œy
.
R™ge
.
x1
;

205 
l
/=2560;
lx
=l;l&=0xfffffff8;

207 if(
l
==
PªviousPSXDi•œy
.
R™ge
.
x1
) ;

209 
sO
=
PªviousPSXDi•œy
.
R™ge
.
x0
;

211 if(
lx
>=
PSXDi•œy
.
Di•œyMode
.
x
)

213 
PªviousPSXDi•œy
.
R™ge
.
x1
=

214 
PSXDi•œy
.
Di•œyMode
.
x
;

215 
PªviousPSXDi•œy
.
R™ge
.
x0
=0;

219 
PªviousPSXDi•œy
.
R™ge
.
x1
=
l
;

220 
PªviousPSXDi•œy
.
R™ge
.
x0
=

221 (
PSXDi•œy
.
R™ge
.
x0
-500)/8;

222 if(
PªviousPSXDi•œy
.
R™ge
.
x0
<0)

223 
PªviousPSXDi•œy
.
R™ge
.
x0
=0;

225 if((
PªviousPSXDi•œy
.
R™ge
.
x0
+
lx
)>

226 
PSXDi•œy
.
Di•œyMode
.
x
)

228 
PªviousPSXDi•œy
.
R™ge
.
x0
=

229 
PSXDi•œy
.
Di•œyMode
.
x
-
lx
;

230 
PªviousPSXDi•œy
.
R™ge
.
x1
+=
lx
-
l
;

234 if(
sO
!=
PªviousPSXDi•œy
.
R™ge
.
x0
)

236 
bDi•œyNŸSë
=
TRUE
;

238 
	}
}

242 
	$Ch™geDi•Off£tsY
()

244 
iT
;
sO
;

246 if(
PSXDi•œy
.
PAL
Ë
iT
=48; iT=28;

248 if(
PSXDi•œy
.
R™ge
.
y0
>=
iT
)

250 
PªviousPSXDi•œy
.
R™ge
.
y1
=

251 
PSXDi•œy
.
Di•œyModeNew
.
y
;

253 
sO
=(
PSXDi•œy
.
R™ge
.
y0
-
iT
-4)*PSXDi•œy.
DoubÀ
;

254 if(
sO
<0) sO=0;

256 
PSXDi•œy
.
Di•œyModeNew
.
y
+=
sO
;

258 
sO
=0;

260 if(
sO
!=
PªviousPSXDi•œy
.
R™ge
.
y0
)

262 
PªviousPSXDi•œy
.
R™ge
.
y0
=
sO
;

263 
bDi•œyNŸSë
=
TRUE
;

265 
	}
}

267 
	$upd©eDi•œyIfCh™ged
()

269 
BOOL
 
bUp
;

271 i‡((
PSXDi•œy
.
Di•œyMode
.
y
 =PSXDi•œy.
Di•œyModeNew
.y) &&

272 (
PSXDi•œy
.
Di•œyMode
.
x
 =PSXDi•œy.
Di•œyModeNew
.x))

274 if((
PSXDi•œy
.
RGB24
 =PSXDi•œy.
RGB24New
) &&

275 (
PSXDi•œy
.
I¡îœ˚d
 =PSXDi•œy.
I¡îœ˚dNew
))

280 
	`glLﬂdIdítôy
(); 
	`glEº‹
();

281 
	`glOπho
(0,
PSXDi•œy
.
Di•œyModeNew
.
x
,

282 
PSXDi•œy
.
Di•œyModeNew
.
y
, 0, -1, 1); 
	`glEº‹
();

283 if(
bKìpR©io
Ë
	`SëA•e˘R©io
();

286 
bDi•œyNŸSë
 = 
TRUE
;

288 
bUp
=
FALSE
;

289 if(
PSXDi•œy
.
RGB24
!=PSXDi•œy.
RGB24New
)

291 
PªviousPSXDi•œy
.
RGB24
=0;

292 
	`Re£tTextuªAªa
(
FALSE
);

293 
bUp
=
TRUE
;

296 
PSXDi•œy
.
RGB24
 = PSXDi•œy.
RGB24New
;

297 
PSXDi•œy
.
Di•œyMode
.
y
 = PSXDi•œy.
Di•œyModeNew
.y;

298 
PSXDi•œy
.
Di•œyMode
.
x
 = PSXDi•œy.
Di•œyModeNew
.x;

299 
PSXDi•œy
.
I¡îœ˚d
 = PSXDi•œy.
I¡îœ˚dNew
;

301 
PSXDi•œy
.
Di•œyEnd
.
x
=

302 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
+ PSXDi•œy.
Di•œyMode
.x;

303 
PSXDi•œy
.
Di•œyEnd
.
y
=

304 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
+ PSXDi•œy.
Di•œyMode
.y+
PªviousPSXDi•œy
.
Di•œyModeNew
.y;

305 
PªviousPSXDi•œy
.
Di•œyEnd
.
x
=

306 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
+ 
PSXDi•œy
.
Di•œyMode
.x;

307 
PªviousPSXDi•œy
.
Di•œyEnd
.
y
=

308 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
+ 
PSXDi•œy
.
Di•œyMode
.y+PªviousPSXDi•œy.
Di•œyModeNew
.y;

310 
	`Ch™geDi•Off£tsX
();

311 if(
bUp
Ë
	`upd©eDi•œy
();

312 
	}
}

314 
	#GPUwrôeSètus_ext
 
GPUwrôeSètus_ext


315 
	`GPUwrôeSètus_ext
(
gd©a
)

	)

317 (
	ggd©a
>>24)&0xff)

320 
PSXDi•œy
.
DißbÀd
=1;

321 
	gPSXDi•œy
.
	gDøwOff£t
.
	gx
=
PSXDi•œy
.
DøwOff£t
.
y
=0;

322 
	gdøwX
=
døwY
=0;
	gdøwW
=
døwH
=0;

323 
	gsSëMask
=0;
	glSëMask
=0;
	gbCheckMask
=
FALSE
;
	giSëMask
=0;

324 
	gusMúr‹
=0;

325 
	gGlobÆTextAddrX
=0;
	gGlobÆTextAddrY
=0;

326 
	gGlobÆTextTP
=0;
	gGlobÆTextABR
=0;

327 
	gPSXDi•œy
.
	gRGB24
=
FALSE
;

328 
	gPSXDi•œy
.
	gI¡îœ˚d
=
FALSE
;

329 
	gbUsögTWö
 = 
FALSE
;

333 
PªviousPSXDi•œy
.
DißbÀd
 = 
PSXDi•œy
.Disabled;

334 
	gPSXDi•œy
.
	gDißbÀd
 = (
gd©a
 & 1);

336 i‡(
	giOffs¸ìnDøwög
==4 &&

337 
PªviousPSXDi•œy
.
DißbÀd
 &&

338 !(
PSXDi•œy
.
DißbÀd
))

341 if(!
PSXDi•œy
.
RGB24
)

343 
Pª∑ªFuŒS¸ìnU∂ﬂd
(
TRUE
);

344 
U∂ﬂdS¸ìn
(
TRUE
);

345 
upd©eDi•œy
();

352 
sx
=()(
gd©a
 & 0x3ff);

353 
	gsy
;

355 
	gsy
 = ()((
gd©a
>>10)&0x3ff);

356 i‡(
	gsy
 & 0x200)

358 
	gsy
|=0xfc00;

359 
	gPªviousPSXDi•œy
.
	gDi•œyModeNew
.
	gy
=
sy
/
PSXDi•œy
.
DoubÀ
;

360 
	gsy
=0;

362 
	gPªviousPSXDi•œy
.
	gDi•œyModeNew
.
	gy
=0;

364 if(
	gsx
>1000) sx=0;

366 if(
	gdwA˘Fixes
&8)

368 if((!
	gPSXDi•œy
.
	gI¡îœ˚d
) &&

369 
	gPªviousPSXDi•œy
.
	gDi•œyPosôi⁄
.
	gx
 =
sx
 &&

370 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
 =
sy
)

373 
	gPSXDi•œy
.
	gDi•œyPosôi⁄
.
	gx
 = 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
;

374 
	gPSXDi•œy
.
	gDi•œyPosôi⁄
.
	gy
 = 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
;

375 
	gPªviousPSXDi•œy
.
	gDi•œyPosôi⁄
.
	gx
 = 
sx
;

376 
	gPªviousPSXDi•œy
.
	gDi•œyPosôi⁄
.
	gy
 = 
sy
;

380 if((!
	gPSXDi•œy
.
	gI¡îœ˚d
) &&

381 
	gPSXDi•œy
.
	gDi•œyPosôi⁄
.
	gx
 =
sx
 &&

382 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
 =
sy
)

384 
	gPªviousPSXDi•œy
.
	gDi•œyPosôi⁄
.
	gx
 = 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
;

385 
	gPªviousPSXDi•œy
.
	gDi•œyPosôi⁄
.
	gy
 = 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
;

386 
	gPSXDi•œy
.
	gDi•œyPosôi⁄
.
	gx
 = 
sx
;

387 
	gPSXDi•œy
.
	gDi•œyPosôi⁄
.
	gy
 = 
sy
;

390 
	gPSXDi•œy
.
	gDi•œyEnd
.
	gx
=

391 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
+ PSXDi•œy.
Di•œyMode
.x;

392 
	gPSXDi•œy
.
	gDi•œyEnd
.
	gy
=

393 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
+ PSXDi•œy.
Di•œyMode
.y+
PªviousPSXDi•œy
.
Di•œyModeNew
.y;

395 
	gPªviousPSXDi•œy
.
	gDi•œyEnd
.
	gx
=

396 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
x
+ 
PSXDi•œy
.
Di•œyMode
.x;

397 
	gPªviousPSXDi•œy
.
	gDi•œyEnd
.
	gy
=

398 
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
+ 
PSXDi•œy
.
Di•œyMode
.y+PªviousPSXDi•œy.
Di•œyModeNew
.y;

400 
	gbDi•œyNŸSë
 = 
TRUE
;

402 i‡(!(
	gPSXDi•œy
.
	gI¡îœ˚d
))

404 
upd©eDi•œy
();

407 if(
	gPSXDi•œy
.
	gI¡îœ˚dTe°
 &&

408 ((
	gPªviousPSXDi•œy
.
	gDi•œyPosôi⁄
.
	gx
 !
PSXDi•œy
.
Di•œyPosôi⁄
.
x
)||

409 (
PªviousPSXDi•œy
.
Di•œyPosôi⁄
.
y
 !
PSXDi•œy
.DisplayPosition.y)))

410 
PSXDi•œy
.
I¡îœ˚dTe°
--;

415 
PSXDi•œy
.
R™ge
.
x0
=
gd©a
 & 0x7ff;

416 
	gPSXDi•œy
.
	gR™ge
.
	gx1
=(
gd©a
>>12) & 0xfff;

418 
	gPSXDi•œy
.
	gR™ge
.
	gx1
-=
PSXDi•œy
.
R™ge
.
x0
;

420 
Ch™geDi•Off£tsX
();

424 
PªviousPSXDi•œy
.
Height
 = 
PSXDi•œy
.Height;

426 
	gPSXDi•œy
.
	gR™ge
.
	gy0
=
gd©a
 & 0x3ff;

427 
	gPSXDi•œy
.
	gR™ge
.
	gy1
=(
gd©a
>>10) & 0x3ff;

429 
	gPSXDi•œy
.
	gHeight
 = 
PSXDi•œy
.
R™ge
.
y1
 -

430 
PSXDi•œy
.
R™ge
.
y0
 +

431 
PªviousPSXDi•œy
.
Di•œyModeNew
.
y
;

433 i‡(
	gPªviousPSXDi•œy
.
	gHeight
 !
PSXDi•œy
.
Height
)

435 
PSXDi•œy
.
Di•œyModeNew
.
y
=PSXDi•œy.
Height
*PSXDi•œy.
DoubÀ
;

436 
Ch™geDi•Off£tsY
();

437 
upd©eDi•œyIfCh™ged
();

442 
PSXDi•œy
.
Di•œyModeNew
.
x
 = 
di•Widths
[(
gd©a
 & 0x03) | ((gdata & 0x40) >> 4)];

444 i‡(
	ggd©a
&0x04Ë
	gPSXDi•œy
.
	gDoubÀ
=2;

445 
	gPSXDi•œy
.
	gDoubÀ
=1;

446 
	gPSXDi•œy
.
	gDi•œyModeNew
.
	gy
 = 
PSXDi•œy
.
Height
*PSXDi•œy.
DoubÀ
;

448 
Ch™geDi•Off£tsY
();

450 
	gPSXDi•œy
.
	gPAL
 = (
gd©a
 & 0x08)?
TRUE
:
FALSE
;

451 
	gPSXDi•œy
.
	gRGB24New
 = (
gd©a
 & 0x10)?
TRUE
:
FALSE
;

452 
	gPSXDi•œy
.
	gI¡îœ˚dNew
 = (
gd©a
 & 0x20)?
TRUE
:
FALSE
;

454 
	gPªviousPSXDi•œy
.
	gI¡îœ˚dNew
=
FALSE
;

455 i‡(
	gPSXDi•œy
.
	gI¡îœ˚dNew
)

457 if(!
	gPSXDi•œy
.
	gI¡îœ˚d
)

459 
	gPSXDi•œy
.
	gI¡îœ˚dTe°
=2;

460 
	gPªviousPSXDi•œy
.
	gDi•œyPosôi⁄
.
	gx
 = 
PSXDi•œy
.
Di•œyPosôi⁄
.
x
;

461 
	gPªviousPSXDi•œy
.
	gDi•œyPosôi⁄
.
	gy
 = 
PSXDi•œy
.
Di•œyPosôi⁄
.
y
;

462 
	gPªviousPSXDi•œy
.
	gI¡îœ˚dNew
=
TRUE
;

467 
	gPSXDi•œy
.
	gI¡îœ˚dTe°
=0;

469 
upd©eDi•œyIfCh™ged
();

476 
	~<°döt.h
>

478 
	~"../gpulib/gpu.c
"

480 
	gis_›íed
;

482 
	$£t_vøm
(*
vøm
)

484 
psxVub
=
vøm
;

485 
psxVuw
=(*)
psxVub
;

486 
	}
}

488 
	$ªndîî_öô
()

490 
	`£t_vøm
(
gpu
.
vøm
);

492 
PSXDi•œy
.
RGB24
 = 
FALSE
;

493 
PSXDi•œy
.
I¡îœ˚d
 = 
FALSE
;

494 
PSXDi•œy
.
DøwOff£t
.
x
 = 0;

495 
PSXDi•œy
.
DøwOff£t
.
y
 = 0;

496 
PSXDi•œy
.
Di•œyMode
.
x
= 320;

497 
PSXDi•œy
.
Di•œyMode
.
y
= 240;

498 
PSXDi•œy
.
DißbÀd
 = 
FALSE
;

499 
PSXDi•œy
.
R™ge
.
x0
=0;

500 
PSXDi•œy
.
R™ge
.
x1
=0;

501 
PSXDi•œy
.
DoubÀ
 = 1;

503 
lGPU°©usRë
 = 0x14802000;

506 
	}
}

508 
	$ªndîî_föish
()

510 
	}
}

512 
	$ªndîî_nŸify_ªs_ch™ge
()

514 
	}
}

516 c⁄° 
cmd_Àngths
[256];

519 
	$do_cmd_li°
(*
li°
, 
li°_Àn
, *
œ°_cmd
)

521 
cmd
, 
Àn
;

522 *
li°_°¨t
 = 
li°
;

523 *
li°_íd
 = 
li°
 + 
li°_Àn
;

525 ; 
li°
 < 
li°_íd
;Üi° +1 + 
Àn
)

527 
cmd
 = *
li°
 >> 24;

528 
Àn
 = 
cmd_Àngths
[
cmd
];

529 i‡(
li°
 + 1 + 
Àn
 > 
li°_íd
) {

530 
cmd
 = -1;

534 #i‚de‡
TEST


535 i‡(
cmd
 == 0xa0 || cmd == 0xc0)

537 i‡((
cmd
 & 0xf8) == 0xe0)

538 
gpu
.
ex_ªgs
[
cmd
 & 7] = 
li°
[0];

541 
¥imTabÀJ
[
cmd
]((*)
li°
);

543 
cmd
)

547 
uöt32_t
 
num_vîãxes
 = 2;

548 
uöt32_t
 *
li°_posôi⁄
 = &(
li°
[3]);

552 if(
li°_posôi⁄
 >
li°_íd
) {

553 
cmd
 = -1;

554 
bªaklo›
;

557 if((*
li°_posôi⁄
 & 0xf000f000) == 0x50005000)

560 
li°_posôi⁄
++;

561 
num_vîãxes
++;

564 
Àn
 +(
num_vîãxes
 - 2);

570 
uöt32_t
 
num_vîãxes
 = 2;

571 
uöt32_t
 *
li°_posôi⁄
 = &(
li°
[4]);

575 if(
li°_posôi⁄
 >
li°_íd
) {

576 
cmd
 = -1;

577 
bªaklo›
;

580 if((*
li°_posôi⁄
 & 0xf000f000) == 0x50005000)

583 
li°_posôi⁄
 += 2;

584 
num_vîãxes
++;

587 
Àn
 +(
num_vîãxes
 - 2) * 2;

591 #ifde‡
TEST


594 *
¶i°
 = (*)
li°
;

595 
uöt32_t
 
lﬂd_width
 = 
¶i°
[4];

596 
uöt32_t
 
lﬂd_height
 = 
¶i°
[5];

597 
uöt32_t
 
lﬂd_size
 = 
lﬂd_width
 * 
lﬂd_height
;

599 
Àn
 +
lﬂd_size
 / 2;

606 
bªaklo›
:

607 
gpu
.
ex_ªgs
[1] &= ~0x1ff;

608 
gpu
.
ex_ªgs
[1] |
lGPU°©usRë
 & 0x1ff;

610 *
œ°_cmd
 = 
cmd
;

611  
li°
 - 
li°_°¨t
;

612 
	}
}

614 
	$ªndîî_sync_ecmds
(
uöt32_t
 *
ecmds
)

616 
	`cmdTextuªPage
((*)&
ecmds
[1]);

617 
	`cmdTextuªWödow
((*)&
ecmds
[2]);

618 
	`cmdDøwAªaSèπ
((*)&
ecmds
[3]);

619 
	`cmdDøwAªaEnd
((*)&
ecmds
[4]);

620 
	`cmdDøwOff£t
((*)&
ecmds
[5]);

621 
	`cmdSTP
((*)&
ecmds
[6]);

622 
	}
}

624 
	$ªndîî_upd©e_ˇches
(
x
, 
y
, 
w
, 
h
)

626 
VRAMWrôe
.
x
 = x;

627 
VRAMWrôe
.
y
 = y;

628 
VRAMWrôe
.
Width
 = 
w
;

629 
VRAMWrôe
.
Height
 = 
h
;

630 if(
is_›íed
)

631 
	`CheckWrôeUpd©e
();

632 
	}
}

634 
	$ªndîî_Êush_queues
()

636 
	}
}

638 
	$ªndîî_£t_öãæa˚
(
íabÀ
, 
is_odd
)

640 
	}
}

642 
	$vout_öô
()

645 
	}
}

647 
	$vout_föish
()

650 
	}
}

652 
	$vout_upd©e
()

654 if(
PSXDi•œy
.
I¡îœ˚d
)

656 if(
PSXDi•œy
.
Di•œyMode
.
x
>0 && PSXDi•œy.Di•œyMode.
y
>0)

658 
	`upd©eDi•œy
();

661 if(
bRídîFr⁄tBuf„r
)

663 
	`upd©eFr⁄tDi•œy
();

665 
	}
}

667 
	$vout_bœnk
()

669 
	}
}

671 
	$vout_£t_c⁄fig
(c⁄° 
ª¨med_cbs
 *
cbs
)

673 
	}
}

675 
ª¨med_cbs
 *
	gcbs
;

677 
	$GPU›í
(**
dpy
)

679 
ªt
;

681 
iResX
 = 
cbs
->
s¸ìn_w
;

682 
iResY
 = 
cbs
->
s¸ìn_h
;

683 
rR©ioRe˘
.
À·
 =ÑR©ioRe˘.
t›
=0;

684 
rR©ioRe˘
.
right
 = 
iResX
;

685 
rR©ioRe˘
.
bŸtom
 = 
iResY
;

687 
bDi•œyNŸSë
 = 
TRUE
;

688 
bSëClù
 = 
TRUE
;

689 
CSTEXTURE
 = 
CSVERTEX
 = 
CSCOLOR
 = 0;

691 
	`InôülizeTextuªSt‹e
();

693 
ªt
 = 
	`GLöôülize
(
cbs
->
gÀs_di•œy
, cbs->
gÀs_surÁ˚
);

694 
	`MakeDi•œyLi°s
();

696 
is_›íed
 = 1;

697  
ªt
;

698 
	}
}

700 
	$GPU˛o£
()

702 
is_›íed
 = 0;

704 
	`KûlDi•œyLi°s
();

705 
	`GL˛ónup
();

707 
	}
}

710 
	$ªndîî_£t_c⁄fig
(c⁄° 
ª¨med_cbs
 *
cbs_
)

712 
cbs
 = (*)
cbs_
;

714 
iOffs¸ìnDøwög
 = 0;

715 
iZBuf„rDïth
 = 0;

716 
iFømeRódTy≥
 = 0;

717 
bKìpR©io
 = 
TRUE
;

719 
dwA˘Fixes
 = 
cbs
->
gpu_≥›sgl
.dwActFixes;

720 
bDøwDôhî
 = 
cbs
->
gpu_≥›sgl
.bDrawDither;

721 
iFûãrTy≥
 = 
cbs
->
gpu_≥›sgl
.iFilterType;

722 
iFømeTexTy≥
 = 
cbs
->
gpu_≥›sgl
.iFrameTexType;

723 
iU£Mask
 = 
cbs
->
gpu_≥›sgl
.iUseMask;

724 
bO∑quePass
 = 
cbs
->
gpu_≥›sgl
.bOpaquePass;

725 
bAdv™˚dBÀnd
 = 
cbs
->
gpu_≥›sgl
.bAdvancedBlend;

726 
bU£Fa°Mdec
 = 
cbs
->
gpu_≥›sgl
.bUseFastMdec;

727 
iTexG¨bageCﬁÀ˘i⁄
 = 
cbs
->
gpu_≥›sgl
.iTexGarbageCollection;

728 
iVRamSize
 = 
cbs
->
gpu_≥›sgl
.iVRamSize;

730 i‡(
cbs
->
∂_£t_gpu_ˇps
)

731 
cbs
->
	`∂_£t_gpu_ˇps
(
GPU_CAP_OWNS_DISPLAY
);

733 i‡(
is_›íed
 && 
cbs
->
gÀs_di•œy
 !
NULL
 && cbs->
gÀs_surÁ˚
 != NULL) {

735 
	`GPU˛o£
();

736 
	`GPU›í
(
NULL
);

739 
	`£t_vøm
(
gpu
.
vøm
);

740 
	}
}

742 
	$SëA•e˘R©io
()

744 i‡(
cbs
->
∂_gë_œyî_pos
)

745 
cbs
->
	`∂_gë_œyî_pos
(&
rR©ioRe˘
.
À·
, &rR©ioRe˘.
t›
, &rR©ioRe˘.
right
, &rR©ioRe˘.
bŸtom
);

747 
	`glSciss‹
(
rR©ioRe˘
.
À·
,

748 
iResY
-(
rR©ioRe˘
.
t›
+rR©ioRe˘.
bŸtom
),

749 
rR©ioRe˘
.
right
,rR©ioRe˘.
bŸtom
);

750 
	`glVõwp‹t
(
rR©ioRe˘
.
À·
,

751 
iResY
-(
rR©ioRe˘
.
t›
+rR©ioRe˘.
bŸtom
),

752 
rR©ioRe˘
.
right
,rR©ioRe˘.
bŸtom
);

753 
	`glEº‹
();

754 
	}
}

756 
	$Âs_upd©e
()

758 
buf
[16];

760 
cbs
->
Êù_˙t
++;

761 if(
cbs
->
Êùs_≥r_£c
 != 0)

763 
	`¢¥ötf
(
buf
,(buf),"%2d %4.1f",
cbs
->
Êùs_≥r_£c
,cbs->
v•s_cur
);

764 
	`Di•œyText
(
buf
, 0);

766 if(
cbs
->
˝u_ußge
 != 0)

768 
	`¢¥ötf
(
buf
,(buf),"%3d",
cbs
->
˝u_ußge
);

769 
	`Di•œyText
(
buf
, 1);

771 
	}
}

	@plugins/gpu-gles/hud.c

21 
	~"gpuStdafx.h
"

23 
	#_IN_MENU


	)

25 
	~"gpuExã∫Æs.h
"

31 c⁄° 
GLubyã
 
	gãxø°îs
[40][12]= {

121 
GLuöt
 
	ggTexF⁄tName
=0;

123 
	$MakeDi•œyLi°s
()

125 
GLubyã
 
TexByãs
[64][64][3];

126 
x
,
y
,
i
,
j
,
n
=0; 
GLubyã
 
cﬁ
,
IB
;

128 
	`glPixñSt‹ei
(
GL_UNPACK_ALIGNMENT
,1);

130 
	`mem£t
(
TexByãs
,0,64*64*3);

132 
y
=0;y<5;y++)

134 
x
=0;x<8;x++,
n
++)

136 
i
=0;i<12;i++)

138 
IB
=
ãxø°îs
[
n
][
i
];

139 
j
=0;j<8;j++)

141 if(
IB
&(1<<(7-
j
))Ë
cﬁ
=255; col=0;

142 
TexByãs
[
y
*12+
i
][
x
*8+
j
][0]=
cﬁ
;

143 
TexByãs
[
y
*12+
i
][
x
*8+
j
][1]=
cﬁ
;

144 
TexByãs
[
y
*12+
i
][
x
*8+
j
][2]=
cﬁ
;

150 
	`glGíTextuªs
(1, &
gTexF⁄tName
);

151 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
gTexF⁄tName
);

152 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_S
, 
GL_CLAMP_TO_EDGE
);

153 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_T
, 
GL_CLAMP_TO_EDGE
);

154 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
GL_NEAREST
);

155 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
GL_NEAREST
);

156 
	`glTexImage2D
(
GL_TEXTURE_2D
, 0, 
GL_RGB
, 64, 64, 0, GL_RGB,

157 
GL_UNSIGNED_BYTE
,
TexByãs
);

158 
	`glEº‹
();

159 
	}
}

165 
	$KûlDi•œyLi°s
()

167 #ifde‡
_WINDOWS


168 if(
hGF⁄t
Ë
	`DñëeObje˘
(hGFont);

169 
hGF⁄t
=
NULL
;

172 if(
gTexF⁄tName
)

173 {
	`glDñëeTextuªs
(1,&
gTexF⁄tName
);gTexFontName=0;}

174 
	}
}

180 
	#TEXCHAR_VERTEX
(
t0
,
t1
,
v0
,
v1
,
v2
Ë\

	)

181 *
	g±a
++ = 
t0
; *±a++ = 
t1
; *
	gpva
++ = 
v0
; *pva++ = 
v1
; *pva++ = 
v2


183 #ifde‡
OWNSCALE


184 
	#DRAWTEXCHAR
 \

	)

185 
±a
 = 
ãxt_ãx_¨øy
, 
	gpva
 = 
ãxt_vîãx_¨øy
; \

186 
TEXCHAR_VERTEX
(
fX1
/256.0f,
fY2
/256.0f,
fXS1
,
fYS2
,1.0f); \

187 
TEXCHAR_VERTEX
(
fX1
/256.0f,
fY1
/256.0f,
fXS1
,
fYS1
,1.0f); \

188 
TEXCHAR_VERTEX
(
fX2
/256.0f,
fY1
/256.0f,
fXS2
,
fYS1
,1.0f); \

189 
TEXCHAR_VERTEX
(
fX2
/256.0f,
fY2
/256.0f,
fXS2
,
fYS2
,1.0f); \

190 
	$glDøwAºays
(
GL_TRIANGLE_FAN
,0,4)

193 
	#DRAWTEXCHAR
 
	`glTexCo‹d2f
(
fX1
,
fY2
);
	`glVîãx3f
(
fXS1
,
fYS2
,1.0f);glTexCo‹d2f(fX1,
fY1
);glVîãx3f(fXS1,
fYS1
,1.0f);glTexCo‹d2f(
fX2
,fY1);glVîãx3f(
fXS2
,fYS1,1.0f);glTexCo‹d2f(fX2,fY2);glVîãx3f(fXS2,fYS2,1.0f);

	)

196 
GLÊﬂt
 
ãxt_ãx_¨øy
[2*4];

197 
GLÊﬂt
 
ãxt_vîãx_¨øy
[3*4];

199 
	$Di•œyText
(c⁄° *
…ext
, 
right_Æig√d
)

201 
iX
,
iY
,
i
;

202 
GLÊﬂt
 
fX1
,
fY1
,
fX2
,
fY2
,
fYS1
,
fYS2
,
fXS1
,
fXS2
,
fXS
,
fXSC
,
fYSC
,
fYD
;

203 
GLÊﬂt
 *
±a
, *
pva
;

205 
	`glDißbÀ
(
GL_SCISSOR_TEST
);

206 
	`glDißbÀ
(
GL_ALPHA_TEST
);

207 if(
bOldSmoŸhShaded
Ë{
	`glShadeModñ
(
GL_FLAT
);bOldSmoŸhShaded=
FALSE
;}

208 if(
bBÀndE«bÀ
Ë{
	`glDißbÀ
(
GL_BLEND
);bBÀndE«bÀ=
FALSE
;}

209 if(!
bTexE«bÀd
Ë{
	`glE«bÀ
(
GL_TEXTURE_2D
);bTexE«bÀd=
TRUE
;}

211 
gTexName
=
gTexF⁄tName
;

212 
	`glBödTextuª
(
GL_TEXTURE_2D
,
gTexF⁄tName
);

214 
fYD
=
fYSC
=(
GLÊﬂt
)
PSXDi•œy
.
Di•œyMode
.
y
/(GLÊﬂt)
iResY
;

215 
fYS1
=(
GLÊﬂt
)
PSXDi•œy
.
Di•œyMode
.
y
-1.0f*
fYSC
;

216 
fYS2
=(
GLÊﬂt
)
PSXDi•œy
.
Di•œyMode
.
y
-13.0f*
fYSC
;

217 
fYSC
*=13.0f;

218 
fXS
(
GLÊﬂt
)
PSXDi•œy
.
Di•œyMode
.
x
/(GLÊﬂt)
iResX
;

219 
fXSC
8.0f*
fXS
;fXS*=10.0f;

220 
fXS1
=0.0f;

221 
fXS2
=50.0f*
fXS
;

223 
vîãx
[0].
c
.
lcﬁ
=0xffffffff;

224 
	`SETCOL
(
vîãx
[0]);

227 
	`glE«bÀClõ¡Sèã
(
GL_VERTEX_ARRAY
);

228 
	`glE«bÀClõ¡Sèã
(
GL_TEXTURE_COORD_ARRAY
);

229 
	`glDißbÀClõ¡Sèã
(
GL_COLOR_ARRAY
);

230 
	`glVîãxPoöãr
(3,
GL_FLOAT
,0,
ãxt_vîãx_¨øy
);

231 
	`glTexCo‹dPoöãr
(2,
GL_FLOAT
,0,
ãxt_ãx_¨øy
);

232 
	`glEº‹
();

234 if(
right_Æig√d
)

235 
fYSC
=
fXS1
=(
GLÊﬂt
)
PSXDi•œy
.
Di•œyMode
.
x
-
	`°æí
(
…ext
)*8.0f;

237 
fYSC
=
fXS1
=1.0f*
fXS
;

239 
i
=0;do

241 
iX
=4;
iY
=4;

242 if(
…ext
[
i
]>='0' &&Ütext[i]<='3')

243 {
iX
=4+
…ext
[
i
]-'0';
iY
=0;}

245 if(
…ext
[
i
]>='4' &&Ütext[i]<='9')

246 {
iX
=
…ext
[
i
]-'4';
iY
=1;}

248 if(
…ext
[
i
]=='.')

249 {
iX
=7;
iY
=4;}

251 if(
…ext
[
i
]==0) ;

253 
fX1
=(
GLÊﬂt
)
iX
*32.0f; 
fX2
=fX1+32.0f;

254 
fY1
=(
GLÊﬂt
)
iY
*48.0f; 
fY2
=fY1+48.0f;

255 
fXS1
+=
fXS
;

256 
fXS2
=
fXS1
+
fXSC
;

258 
DRAWTEXCHAR
;

260 
i
++;

262 
i
);

265 
	`glDißbÀClõ¡Sèã
(
GL_VERTEX_ARRAY
);

266 
	`glDißbÀClõ¡Sèã
(
GL_TEXTURE_COORD_ARRAY
);

267 
CSTEXTURE
 = 
CSVERTEX
 = 
CSCOLOR
 = 0;

269 
	`glE«bÀ
(
GL_ALPHA_TEST
);

270 
	`glE«bÀ
(
GL_SCISSOR_TEST
);

271 
	`glEº‹
();

272 
	}
}

276 
	$HideText
()

278 
GLÊﬂt
 
fYS1
,
fYS2
,
fXS1
,
fXS2
,
fXS
,
fXSC
,
fYSC
;

280 
	`glDißbÀ
(
GL_SCISSOR_TEST
);

281 
	`glDißbÀ
(
GL_ALPHA_TEST
);

282 if(
bOldSmoŸhShaded
Ë{
	`glShadeModñ
(
GL_FLAT
);bOldSmoŸhShaded=
FALSE
;}

283 if(
bBÀndE«bÀ
Ë{
	`glDißbÀ
(
GL_BLEND
);bBÀndE«bÀ=
FALSE
;}

284 if(
bTexE«bÀd
Ë{
	`glDißbÀ
(
GL_TEXTURE_2D
);bTexE«bÀd=
FALSE
;}

286 
fYSC
=(
GLÊﬂt
)
PSXDi•œy
.
Di•œyMode
.
y
/(GLÊﬂt)
iResY
;

287 
fYS1
=12.0f*
fYSC
;fYSC*=13.0f;

288 
fYS2
=0.0f;

289 
fXS
(
GLÊﬂt
)
PSXDi•œy
.
Di•œyMode
.
x
/(GLÊﬂt)
iResX
;

290 
fXSC
8.0f*
fXS
;fXS*=10.0f;

291 
fXS1
=0.0f;

292 
fXS2
=50.0f*
fXS
;

294 
vîãx
[0].
c
.
lcﬁ
=0xff000000;

295 
	`SETCOL
(
vîãx
[0]);

300 
GLÊﬂt
 
vîãx_¨øy
[3*4] = {

301 
fXS1
,
fYS2
,0.99996f,

302 
fXS1
,
fYSC
,0.99996f,

303 
fXS2
,
fYSC
,0.99996f,

304 
fXS2
,
fYS2
,0.99996f,

306 
	`glDißbÀClõ¡Sèã
(
GL_TEXTURE_COORD_ARRAY
);

307 
	`glE«bÀClõ¡Sèã
(
GL_VERTEX_ARRAY
);

308 
	`glVîãxPoöãr
(3,
GL_FLOAT
,0,
vîãx_¨øy
);

310 
	`glDøwAºays
(
GL_TRIANGLE_STRIP
,0,4);

311 
	`glDißbÀClõ¡Sèã
(
GL_VERTEX_ARRAY
);

315 
	`glE«bÀ
(
GL_ALPHA_TEST
);

316 
	`glE«bÀ
(
GL_SCISSOR_TEST
);

317 
	}
}

	@plugins/gpu_neon/psx_gpu/common.h

1 #i‚de‡
COMMON_H


2 
	#COMMON_H


	)

4 sig√d 
	ts8
;

5 
	tu8
;

6 sig√d 
	ts16
;

7 
	tu16
;

8 sig√d 
	ts32
;

9 
	tu32
;

10 sig√d 
	ts64
;

11 
	tu64
;

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

16 
	~<sys/time.h
>

18 
	~"ve˘‹_›s.h
"

19 
	~"psx_gpu.h
"

21 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
((x), 0)

	)

	@plugins/gpu_neon/psx_gpu/psx_gpu.c

15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

19 
	~"comm⁄.h
"

21 
u32
 
	g•™_pixñs
 = 0;

22 
u32
 
	g•™_pixñ_blocks
 = 0;

23 
u32
 
	g•™s
 = 0;

24 
u32
 
	gåüngÀs
 = 0;

25 
u32
 
	g•rôes
 = 0;

26 
u32
 
	g•rôes_4bµ
 = 0;

27 
u32
 
	g•rôes_8bµ
 = 0;

28 
u32
 
	g•rôes_16bµ
 = 0;

29 
u32
 
	g•rôe_blocks
 = 0;

30 
u32
 
	g•rôes_u¡extuªd
 = 0;

31 
u32
 
	glöes
 = 0;

32 
u32
 
	gåivül_ªje˘s
 = 0;

33 
u32
 
	gãxñs_4bµ
 = 0;

34 
u32
 
	gãxñs_8bµ
 = 0;

35 
u32
 
	gãxñs_16bµ
 = 0;

36 
u32
 
	gãxñ_blocks_4bµ
 = 0;

37 
u32
 
	gãxñ_blocks_8bµ
 = 0;

38 
u32
 
	gãxñ_blocks_16bµ
 = 0;

39 
u32
 
	gãxñ_blocks_u¡extuªd
 = 0;

40 
u32
 
	gbÀnd_blocks
 = 0;

41 
u32
 
	gªndî_buf„r_Êushes
 = 0;

42 
u32
 
	g°©e_ch™ges
 = 0;

43 
u32
 
	gÀ·_•lô_åüngÀs
 = 0;

44 
u32
 
	gÊ©_åüngÀs
 = 0;

45 
u32
 
	g˛ù≥d_åüngÀs
 = 0;

46 
u32
 
	gzîo_block_•™s
 = 0;

47 
u32
 
	gãxtuª_ˇche_lﬂds
 = 0;

48 
u32
 
	gÁl£_moduœãd_blocks
 = 0;

51 
u32
 
	gªcùroˇl_èbÀ
[512 * 2];

54 
s32
 
	tfixed_ty≥
;

56 
	#EDGE_STEP_BITS
 32

	)

57 
	#FIXED_BITS
 12

	)

59 
	#fixed_˚¡î
(
vÆue
) \

60 ((((
fixed_ty≥
)(
vÆue
)Ë<< 
FIXED_BITS
) + (1 << (FIXED_BITS - 1))) \

61 

	)

62 
	#öt_to_fixed
(
vÆue
) \

63 (((
fixed_ty≥
)(
vÆue
)Ë<< 
FIXED_BITS
) \

64 

	)

65 
	#fixed_to_öt
(
vÆue
) \

66 ((
vÆue
Ë>> 
FIXED_BITS
) \

67 

	)

68 
	#fixed_to_doubÀ
(
vÆue
) \

69 ((
vÆue
Ë/ ()(1 << 
FIXED_BITS
)) \

70 

	)

71 
	#doubÀ_to_fixed
(
vÆue
) \

72 (
fixed_ty≥
)(((
vÆue
Ë* ()(1 << 
FIXED_BITS
))) \

73 

	)

74 (
	t£tup_blocks_fun˘i⁄_ty≥
)(
	tpsx_gpu_°ru˘
 *
	tpsx_gpu
);

75 (
	tãxtuª_blocks_fun˘i⁄_ty≥
)(
	tpsx_gpu_°ru˘
 *
	tpsx_gpu
);

76 (
	tshade_blocks_fun˘i⁄_ty≥
)(
	tpsx_gpu_°ru˘
 *
	tpsx_gpu
);

77 (
	tbÀnd_blocks_fun˘i⁄_ty≥
)(
	tpsx_gpu_°ru˘
 *
	tpsx_gpu
);

79 (
	t£tup_•rôe_fun˘i⁄_ty≥
)(
	tpsx_gpu_°ru˘
 *
	tpsx_gpu
, 
	ts32
 
	tx
,

80 
	ts32
 
	ty
, s32 
	tu
, s32 
	tv
, s32 
	twidth
, s32 
	theight
, 
	tu32
 
	tcﬁ‹
);

82 
	sªndî_block_h™dÀr_°ru˘


84 *
£tup_blocks
;

85 
ãxtuª_blocks_fun˘i⁄_ty≥
 *
ãxtuª_blocks
;

86 
shade_blocks_fun˘i⁄_ty≥
 *
shade_blocks
;

87 
bÀnd_blocks_fun˘i⁄_ty≥
 *
bÀnd_blocks
;

90 #i‚de‡
NEON_BUILD


92 
u32
 
	$fixed_ªcùroˇl
(
u32
 
díomö©‹
, u32 *
_shi·
)

94 
u32
 
shi·
 = 
	`__buûtö_˛z
(
díomö©‹
);

95 
u32
 
díomö©‹_n‹mÆized
 = 
díomö©‹
 << 
shi·
;

97 
numî©‹
 = (1ULL << 62Ë+ 
díomö©‹_n‹mÆized
;

98 
numî©‹_b
;

100 
díomö©‹_n‹mÆized_dp_b
;

101 
u64
 
díomö©‹_n‹mÆized_dp_u64
;

103 
u32
 
ªcùroˇl
;

104 
ªcùroˇl_dp
;

106 
u64
 
numî©‹_u64
 = (
díomö©‹_n‹mÆized
 >> 10) |

107 ((
u64
)(62 + 1023) << 52);

108 *((
u64
 *)(&
numî©‹_b
)Ë
numî©‹_u64
;

110 
díomö©‹_n‹mÆized_dp_u64
 =

111 (
u64
)(
díomö©‹_n‹mÆized
 << 21) |

112 ((
u64
)((
díomö©‹_n‹mÆized
 >> 11) + ((1022 + 31) << 20)) << 32);

113 *((
u64
 *)(&
díomö©‹_n‹mÆized_dp_b
)Ë
díomö©‹_n‹mÆized_dp_u64
;

116 
ªcùroˇl_dp
 = 
numî©‹
 / 
díomö©‹_n‹mÆized_dp_b
;

117 
ªcùroˇl
 = 
ªcùroˇl_dp
;

119 if(
ªcùroˇl
 == 0x80000001)

120 
ªcùroˇl
 = 0x80000000;

122 *
_shi·
 = 62 - 
shi·
;

123  
ªcùroˇl
;

124 
	}
}

126 
	$ªcùroˇl_e°im©e
(
a
)

128 
q
, 
s
;

129 
r
;

131 
q
 = ()(
a
 * 512.0);

133 
r
 = 1.0 / ((()
q
 + 0.5) / 512.0);

134 
s
 = ()(256.0 * 
r
 + 0.5);

138  ()
s
 / 256.0;

139 
	}
}

141 
u32
 
	$ªcùroˇl_e°im©e_u32
(
u32
 
vÆue
)

143 
u64
 
dp_vÆue_u64
;

144 vﬁ©ûê
dp_vÆue
;

145 vﬁ©ûê
u64
 *
dp_vÆue_±r
 = (vﬁ©ûêu64 *)&
dp_vÆue
;

147 if((
vÆue
 >> 31) == 0)

150 
dp_vÆue_u64
 = (0x3FEULL << (31 + 21)Ë| ((
u64
)(
vÆue
 & 0x7FFFFFFF) << 21);

152 *
dp_vÆue_±r
 = 
dp_vÆue_u64
;

154 
dp_vÆue
 = 
	`ªcùroˇl_e°im©e
(dp_value);

155 
dp_vÆue_u64
 = *
dp_vÆue_±r
;

157  (0x80000000 | ((
dp_vÆue_u64
 >> 21) & 0x7FFFFFFF));

158 
	}
}

160 
u32
 
	$fixed_ªcùroˇl_ƒ
(
u32
 
vÆue
, u32 *
_shi·
)

162 
u32
 
shi·
 = 
	`__buûtö_˛z
(
vÆue
);

163 
u32
 
vÆue_n‹mÆized
 = 
vÆue
 << 
shi·
;

165 *
_shi·
 = 62 - 
shi·
;

167 
vÆue_n‹mÆized
 -= 2;

169 
u32
 
ªcùroˇl_n‹mÆized
 = 
	`ªcùroˇl_e°im©e_u32
(
vÆue_n‹mÆized
) >> 1;

171 
u32
 
ãmp
 = -(((
u64
)
vÆue_n‹mÆized
 * (u32)
ªcùroˇl_n‹mÆized
) >> 31);

172 
ªcùroˇl_n‹mÆized
 = (((
u64
Ïecùroˇl_n‹mÆized * 
ãmp
) >> 31);

173 
ãmp
 = -(((
u64
)
vÆue_n‹mÆized
 * (
u32
)
ªcùroˇl_n‹mÆized
) >> 31);

174 
ªcùroˇl_n‹mÆized
 = (((
u64
Ïecùroˇl_n‹mÆized * 
ãmp
) >> 31);

175 
ãmp
 = -(((
u64
)
vÆue_n‹mÆized
 * (
u32
)
ªcùroˇl_n‹mÆized
) >> 31);

176 
ªcùroˇl_n‹mÆized
 = (((
u64
Ïecùroˇl_n‹mÆized * 
ãmp
) >> 31);

178  
ªcùroˇl_n‹mÆized
;

179 
	}
}

184 
s32
 
	$åüngÀ_sig√d_¨ó_x2
(
s32
 
x0
, s32 
y0
, s32 
x1
, s32 
y1
, s32 
x2
, s32 
y2
)

186  ((
x1
 - 
x0
Ë* (
y2
 - 
y1
)Ë- ((
x2
 - x1Ë* (y1 - 
y0
));

187 
	}
}

189 
u32
 
	$ãxtuª_ªgi⁄_mask
(
s32
 
x1
, s32 
y1
, s32 
x2
, s32 
y2
)

191 
s32
 
covîage_x
, 
covîage_y
;

193 
u32
 
mask_up_À·
;

194 
u32
 
mask_down_right
;

196 
covîage_x
 = 
x2
 >> 6;

197 
covîage_y
 = 
y2
 >> 8;

199 if(
covîage_x
 < 0)

200 
covîage_x
 = 0;

202 if(
covîage_x
 > 31)

203 
covîage_x
 = 31;

205 
mask_down_right
 = ~(0xFFFFFFFF << (
covîage_x
 + 1)) & 0xFFFF;

207 if(
covîage_y
 >= 1)

208 
mask_down_right
 |= mask_down_right << 16;

210 
covîage_x
 = 
x1
 >> 6;

212 
mask_up_À·
 = 0xFFFF0000 << 
covîage_x
;

213 if(
covîage_x
 < 0)

214 
mask_up_À·
 = 0xFFFF0000;

216 
covîage_y
 = 
y1
 >> 8;

217 if(
covîage_y
 <= 0)

218 
mask_up_À·
 |= mask_up_left >> 16;

220  
mask_up_À·
 & 
mask_down_right
;

221 
	}
}

223 
u32
 
	$övÆid©e_ãxtuª_ˇche_ªgi⁄
(
psx_gpu_°ru˘
 *
psx_gpu
, 
u32
 
x1
, u32 
y1
,

224 
u32
 
x2
, u32 
y2
)

226 
u32
 
mask
 = 
	`ãxtuª_ªgi⁄_mask
(
x1
, 
y1
, 
x2
, 
y2
);

228 
psx_gpu
->
dúty_ãxtuªs_4bµ_mask
 |
mask
;

229 
psx_gpu
->
dúty_ãxtuªs_8bµ_mask
 |
mask
;

230 
psx_gpu
->
dúty_ãxtuªs_8bµ_Æã∫©e_mask
 |
mask
;

232  
mask
;

233 
	}
}

235 
u32
 
	$övÆid©e_ãxtuª_ˇche_ªgi⁄_võwp‹t
(
psx_gpu_°ru˘
 *
psx_gpu
, 
u32
 
x1
,

236 
u32
 
y1
, u32 
x2
, u32 
y2
)

238 
u32
 
mask
 = 
	`ãxtuª_ªgi⁄_mask
(
x1
, 
y1
, 
x2
, 
y2
) &

239 
psx_gpu
->
võwp‹t_mask
;

241 
psx_gpu
->
dúty_ãxtuªs_4bµ_mask
 |
mask
;

242 
psx_gpu
->
dúty_ãxtuªs_8bµ_mask
 |
mask
;

243 
psx_gpu
->
dúty_ãxtuªs_8bµ_Æã∫©e_mask
 |
mask
;

245  
mask
;

246 
	}
}

248 
	$upd©e_ãxtuª_ˇche_ªgi⁄
(
psx_gpu_°ru˘
 *
psx_gpu
, 
u32
 
x1
, u32 
y1
,

249 
u32
 
x2
, u32 
y2
)

251 
u32
 
mask
 = 
	`ãxtuª_ªgi⁄_mask
(
x1
, 
y1
, 
x2
, 
y2
);

252 
u32
 
ãxtuª_∑ge
;

253 
u8
 *
ãxtuª_∑ge_±r
;

254 
u16
 *
vøm_±r
;

255 
u32
 
ãxñ_block
;

256 
u32
 
sub_x
, 
sub_y
;

258 
psx_gpu
->
dúty_ãxtuªs_8bµ_mask
 |
mask
;

259 
psx_gpu
->
dúty_ãxtuªs_8bµ_Æã∫©e_mask
 |
mask
;

261 i‡((
psx_gpu
->
dúty_ãxtuªs_4bµ_mask
 & 
mask
) == 0 &&

262 (
x1
 & 3Ë=0 && (
y1
 & 15Ë=0 && 
x2
 - x1 < 4 && 
y2
 - y1 < 16)

264 
ãxtuª_∑ge
 = ((
x1
 / 64Ë& 15Ë+ (
y1
 / 256) * 16;

265 
ãxtuª_∑ge_±r
 = 
psx_gpu
->
ãxtuª_4bµ_ˇche
[
ãxtuª_∑ge
];

266 
ãxtuª_∑ge_±r
 +(
x1
 / 4 & 15Ë* 16*16 + (
y1
 / 16 & 15) * 16*16*16;

267 
vøm_±r
 = 
psx_gpu
->vøm_±∏+ 
x1
 + 
y1
 * 1024;

268 
sub_x
 = 4;

269 
sub_y
 = 16;

271 
sub_y
)

273 
sub_x
)

275 
ãxñ_block
 = *
vøm_±r
;

277 
ãxtuª_∑ge_±r
[0] = 
ãxñ_block
 & 0xF;

278 
ãxtuª_∑ge_±r
[1] = (
ãxñ_block
 >> 4) & 0xF;

279 
ãxtuª_∑ge_±r
[2] = (
ãxñ_block
 >> 8) & 0xF;

280 
ãxtuª_∑ge_±r
[3] = 
ãxñ_block
 >> 12;

282 
vøm_±r
++;

283 
ãxtuª_∑ge_±r
 += 4;

285 
sub_x
--;

288 
vøm_±r
 -= 4;

289 
sub_x
 = 4;

291 
sub_y
--;

292 
vøm_±r
 += 1024;

297 
psx_gpu
->
dúty_ãxtuªs_4bµ_mask
 |
mask
;

299 
	}
}

301 
upd©e_ãxtuª_8bµ_ˇche_¶i˚
(
psx_gpu_°ru˘
 *
psx_gpu
,

302 
u32
 
ãxtuª_∑ge
);

304 #i‚de‡
NEON_BUILD


306 
	$upd©e_ãxtuª_4bµ_ˇche
(
psx_gpu_°ru˘
 *
psx_gpu
)

308 
u32
 
cuºít_ãxtuª_∑ge
 = 
psx_gpu
->current_texture_page;

309 
u8
 *
ãxtuª_∑ge_±r
 = 
psx_gpu
->
ãxtuª_∑ge_ba£
;

310 
u16
 *
vøm_±r
 = 
psx_gpu
->vram_ptr;

312 
u32
 
ãxñ_block
;

313 
u32
 
tûe_x
, 
tûe_y
;

314 
u32
 
sub_x
, 
sub_y
;

316 
vøm_±r
 +(
cuºít_ãxtuª_∑ge
 >> 4) * 256 * 1024;

317 
vøm_±r
 +(
cuºít_ãxtuª_∑ge
 & 0xF) * 64;

319 
ãxtuª_ˇche_lﬂds
++;

321 
tûe_y
 = 16;

322 
tûe_x
 = 16;

323 
sub_x
 = 4;

324 
sub_y
 = 16;

326 
psx_gpu
->
dúty_ãxtuªs_4bµ_mask
 &~’sx_gpu->
cuºít_ãxtuª_mask
);

328 
tûe_y
)

330 
tûe_x
)

332 
sub_y
)

334 
sub_x
)

336 
ãxñ_block
 = *
vøm_±r
;

338 
ãxtuª_∑ge_±r
[0] = 
ãxñ_block
 & 0xF;

339 
ãxtuª_∑ge_±r
[1] = (
ãxñ_block
 >> 4) & 0xF;

340 
ãxtuª_∑ge_±r
[2] = (
ãxñ_block
 >> 8) & 0xF;

341 
ãxtuª_∑ge_±r
[3] = 
ãxñ_block
 >> 12;

343 
vøm_±r
++;

344 
ãxtuª_∑ge_±r
 += 4;

346 
sub_x
--;

349 
vøm_±r
 -= 4;

350 
sub_x
 = 4;

352 
sub_y
--;

353 
vøm_±r
 += 1024;

356 
sub_y
 = 16;

358 
vøm_±r
 -= (1024 * 16) - 4;

359 
tûe_x
--;

362 
tûe_x
 = 16;

364 
vøm_±r
 += (16 * 1024) - (4 * 16);

365 
tûe_y
--;

367 
	}
}

369 
	$upd©e_ãxtuª_8bµ_ˇche_¶i˚
(
psx_gpu_°ru˘
 *
psx_gpu
,

370 
u32
 
ãxtuª_∑ge
)

372 
u16
 *
ãxtuª_∑ge_±r
 = 
psx_gpu
->
ãxtuª_∑ge_ba£
;

373 
u16
 *
vøm_±r
 = 
psx_gpu
->vram_ptr;

375 
u32
 
tûe_x
, 
tûe_y
;

376 
u32
 
sub_y
;

378 
vec_8x16u
 
ãxñs
;

380 
ãxtuª_ˇche_lﬂds
++;

382 
vøm_±r
 +(
ãxtuª_∑ge
 >> 4) * 256 * 1024;

383 
vøm_±r
 +(
ãxtuª_∑ge
 & 0xF) * 64;

385 if((
ãxtuª_∑ge
 ^ 
psx_gpu
->
cuºít_ãxtuª_∑ge
) & 0x1)

386 
ãxtuª_∑ge_±r
 += (8 * 16) * 8;

388 
tûe_x
 = 8;

389 
tûe_y
 = 16;

391 
sub_y
 = 16;

393 
tûe_y
)

395 
tûe_x
)

397 
sub_y
)

399 
	`lﬂd_128b
(
ãxñs
, 
vøm_±r
);

400 
	`°‹e_128b
(
ãxñs
, 
ãxtuª_∑ge_±r
);

402 
ãxtuª_∑ge_±r
 += 8;

403 
vøm_±r
 += 1024;

405 
sub_y
--;

408 
sub_y
 = 16;

410 
vøm_±r
 -= (1024 * 16);

411 
vøm_±r
 += 8;

413 
tûe_x
--;

416 
tûe_x
 = 8;

418 
vøm_±r
 -= (8 * 8);

419 
vøm_±r
 += (16 * 1024);

421 
ãxtuª_∑ge_±r
 += (8 * 16) * 8;

422 
tûe_y
--;

424 
	}
}

429 
	$upd©e_ãxtuª_8bµ_ˇche
(
psx_gpu_°ru˘
 *
psx_gpu
)

431 
u32
 
cuºít_ãxtuª_∑ge
 = 
psx_gpu
->current_texture_page;

432 
u32
 
upd©e_ãxtuªs
 =

433 
psx_gpu
->
dúty_ãxtuªs_8bµ_mask
 &Ösx_gpu->
cuºít_ãxtuª_mask
;

435 
psx_gpu
->
dúty_ãxtuªs_8bµ_mask
 &~
upd©e_ãxtuªs
;

437 if(
upd©e_ãxtuªs
 & (1 << 
cuºít_ãxtuª_∑ge
))

439 
	`upd©e_ãxtuª_8bµ_ˇche_¶i˚
(
psx_gpu
, 
cuºít_ãxtuª_∑ge
);

440 
upd©e_ãxtuªs
 &~(1 << 
cuºít_ãxtuª_∑ge
);

443 if(
upd©e_ãxtuªs
)

445 
u32
 
adja˚¡_ãxtuª_∑ge
 = ((
cuºít_ãxtuª_∑ge
 + 1) & 0xF) |

446 (
cuºít_ãxtuª_∑ge
 & 0x10);

448 
	`upd©e_ãxtuª_8bµ_ˇche_¶i˚
(
psx_gpu
, 
adja˚¡_ãxtuª_∑ge
);

450 
	}
}

452 
£tup_blocks_shaded_u¡extuªd_undôhîed_unswizzÀd_ödúe˘
(

453 
psx_gpu_°ru˘
 *
psx_gpu
);

455 
	$Êush_ªndî_block_buf„r
(
psx_gpu_°ru˘
 *
psx_gpu
)

457 if((
psx_gpu
->
ªndî_mode
 & 
RENDER_INTERLACE_ENABLED
) &&

458 (
psx_gpu
->
¥imôive_ty≥
 =
PRIMITIVE_TYPE_SPRITE
))

460 
u32
 
num_blocks_de°
 = 0;

461 
block_°ru˘
 *
block_§c
 = 
psx_gpu
->
blocks
;

462 
block_°ru˘
 *
block_de°
 = 
psx_gpu
->
blocks
;

464 
u16
 *
vøm_±r
 = 
psx_gpu
->vram_ptr;

465 
u32
 
i
;

467 if(
psx_gpu
->
ªndî_mode
 & 
RENDER_INTERLACE_ODD
)

469 
i
 = 0; i < 
psx_gpu
->
num_blocks
; i++)

471 
u32
 
fb_off£t
 = (u32)((
u8
 *)
block_§c
->
fb_±r
 - (u8 *)
vøm_±r
);

472 if(
fb_off£t
 & (1 << 11))

474 *
block_de°
 = *
block_§c
;

475 
num_blocks_de°
++;

476 
block_de°
++;

478 
block_§c
++;

483 
i
 = 0; i < 
psx_gpu
->
num_blocks
; i++)

485 
u32
 
fb_off£t
 = (u32)((
u8
 *)
block_§c
->
fb_±r
 - (u8 *)
vøm_±r
);

486 if((
fb_off£t
 & (1 << 11)) == 0)

488 *
block_de°
 = *
block_§c
;

489 
num_blocks_de°
++;

490 
block_de°
++;

492 
block_§c
++;

496 
psx_gpu
->
num_blocks
 = 
num_blocks_de°
;

499 if(
psx_gpu
->
num_blocks
)

501 
ªndî_block_h™dÀr_°ru˘
 *
ªndî_block_h™dÀr
 =

502 
psx_gpu
->
ªndî_block_h™dÀr
;

504 
ªndî_block_h™dÀr
->
	`ãxtuª_blocks
(
psx_gpu
);

505 
ªndî_block_h™dÀr
->
	`shade_blocks
(
psx_gpu
);

506 
ªndî_block_h™dÀr
->
	`bÀnd_blocks
(
psx_gpu
);

508 #ifde‡
PROFILE


509 
•™_pixñ_blocks
 +
psx_gpu
->
num_blocks
;

510 
ªndî_buf„r_Êushes
++;

513 
psx_gpu
->
num_blocks
 = 0;

515 
	}
}

518 
compuã_Æl_gødõ¡s
(
psx_gpu_°ru˘
 *
psx_gpu
, 
vîãx_°ru˘
 *
a
,

519 
vîãx_°ru˘
 *
b
, vîãx_°ru˘ *
c
);

521 #i‚de‡
NEON_BUILD


523 
	#£tup_gødõ¡_ˇlcuœti⁄_öput
(
£t
, 
vîãx
) \

527 
x
##
£t
##
_a_y
##£t##
_c
.
e
[0] = 
vîãx
->
u
; \

528 
x
##
£t
##
_a_y
##£t##
_c
.
e
[1] = 
vîãx
->
v
; \

529 
x
##
£t
##
_a_y
##£t##
_c
.
e
[2] = 
vîãx
->
r
; \

530 
x
##
£t
##
_a_y
##£t##
_c
.
e
[3] = 
vîãx
->
g
; \

531 
	`dup_4x16b
(
x
##
£t
##
_b
, 
vîãx
->x); \

532 
	`dup_4x16b
(
x
##
£t
##
_c
, 
vîãx
->x); \

533 
	`dup_4x16b
(
y
##
£t
##
_a
, 
vîãx
->y); \

534 
	`dup_4x16b
(
y
##
£t
##
_b
, 
vîãx
->y); \

535 
x
##
£t
##
_b
.
e
[0] = 
vîãx
->
b
; \

536 
y
##
£t
##
_b
.
e
[1] = 
vîãx
->
b
 \

537 

	)

539 
	$compuã_Æl_gødõ¡s
(
psx_gpu_°ru˘
 *
psx_gpu
, 
vîãx_°ru˘
 *
a
,

540 
vîãx_°ru˘
 *
b
, vîãx_°ru˘ *
c
)

542 
u32
 
åüngÀ_¨ó
 = 
psx_gpu
->triangle_area;

543 
u32
 
wödög_mask_sˇœr
;

545 
u32
 
åüngÀ_¨ó_shi·
;

546 
u64
 
åüngÀ_¨ó_ªcùroˇl
 =

547 
	`fixed_ªcùroˇl
(
åüngÀ_¨ó
, &
åüngÀ_¨ó_shi·
);

548 
åüngÀ_¨ó_shi·
 = -—rüngÀ_¨ó_shi· - 
FIXED_BITS
);

561 
vec_4x16s
 
x0_a_y0_c
, 
x0_b
, 
x0_c
;

562 
vec_4x16s
 
y0_a
, 
y0_b
;

563 
vec_4x16s
 
x1_a_y1_c
, 
x1_b
, 
x1_c
;

564 
vec_4x16s
 
y1_a
, 
y1_b
;

565 
vec_4x16s
 
x2_a_y2_c
, 
x2_b
, 
x2_c
;

566 
vec_4x16s
 
y2_a
, 
y2_b
;

568 
vec_4x32u
 
uvrg_ba£
;

569 
vec_4x32u
 
b_ba£
;

570 
vec_4x32u
 
uvrgb_pha£
;

572 
vec_4x16s
 
d0_a_d3_c
, 
d0_b
, 
d0_c
;

573 
vec_4x16s
 
d1_a
, 
d1_b
, 
d1_c_d2_a
;

574 
vec_4x16s
 
d2_b
, 
d2_c
;

575 
vec_4x16s
 
d3_a
, 
d3_b
;

577 
vec_4x32s
 
m0_a
, 
m0_b
, 
m0_c
;

578 
vec_4x32s
 
m1_a
, 
m1_b
, 
m1_c
;

580 
vec_4x32u
 
gødõ¡_¨ó_a
, 
gødõ¡_¨ó_c
;

581 
vec_2x32u
 
gødõ¡_¨ó_b
;

583 
vec_4x32u
 
gødõ¡_¨ó_sign_a
, 
gødõ¡_¨ó_sign_c
;

584 
vec_2x32u
 
gødõ¡_¨ó_sign_b
;

585 
vec_4x32u
 
wödög_mask
;

587 
vec_2x64u
 
gødõ¡_wide_a0
, 
gødõ¡_wide_a1
;

588 
vec_2x64u
 
gødõ¡_wide_c0
, 
gødõ¡_wide_c1
;

589 
vec_2x64u
 
gødõ¡_wide_b
;

591 
vec_4x32u
 
gødõ¡_a
, 
gødõ¡_c
;

592 
vec_2x32u
 
gødõ¡_b
;

593 
vec_16x8s
 
gødõ¡_shi·
;

595 
	`£tup_gødõ¡_ˇlcuœti⁄_öput
(0, 
a
);

596 
	`£tup_gødõ¡_ˇlcuœti⁄_öput
(1, 
b
);

597 
	`£tup_gødõ¡_ˇlcuœti⁄_öput
(2, 
c
);

599 
	`dup_4x32b
(
uvrgb_pha£
, 
psx_gpu
->uvrgb_phase);

600 
	`shl_l⁄g_4x16b
(
uvrg_ba£
, 
x0_a_y0_c
, 16);

601 
	`shl_l⁄g_4x16b
(
b_ba£
, 
x0_b
, 16);

603 
	`add_4x32b
(
uvrg_ba£
, uvrg_ba£, 
uvrgb_pha£
);

604 
	`add_4x32b
(
b_ba£
, b_ba£, 
uvrgb_pha£
);

607 
	`sub_4x16b
(
d0_a_d3_c
, 
x1_a_y1_c
, 
x0_a_y0_c
);

608 
	`sub_4x16b
(
d1_c_d2_a
, 
x2_a_y2_c
, 
x1_a_y1_c
);

610 
	`sub_4x16b
(
d0_b
, 
x1_b
, 
x0_b
);

611 
	`sub_4x16b
(
d0_c
, 
x1_c
, 
x0_c
);

613 
	`sub_4x16b
(
d1_a
, 
y2_a
, 
y1_a
);

614 
	`sub_4x16b
(
d1_b
, 
y2_b
, 
y1_b
);

616 
	`sub_4x16b
(
d2_b
, 
x2_b
, 
x1_b
);

617 
	`sub_4x16b
(
d2_c
, 
x2_c
, 
x1_c
);

619 
	`sub_4x16b
(
d3_a
, 
y1_a
, 
y0_a
);

620 
	`sub_4x16b
(
d3_b
, 
y1_b
, 
y0_b
);

622 
	`mul_l⁄g_4x16b
(
m0_a
, 
d0_a_d3_c
, 
d1_a
);

623 
	`mul_l⁄g_4x16b
(
m0_b
, 
d0_b
, 
d1_b
);

624 
	`mul_l⁄g_4x16b
(
m0_c
, 
d0_c
, 
d1_c_d2_a
);

626 
	`mul_l⁄g_4x16b
(
m1_a
, 
d1_c_d2_a
, 
d3_a
);

627 
	`mul_l⁄g_4x16b
(
m1_b
, 
d2_b
, 
d3_b
);

628 
	`mul_l⁄g_4x16b
(
m1_c
, 
d2_c
, 
d0_a_d3_c
);

630 
	`sub_4x32b
(
gødõ¡_¨ó_a
, 
m0_a
, 
m1_a
);

631 
	`sub_2x32b
(
gødõ¡_¨ó_b
, 
m0_b
.
low
, 
m1_b
.low);

632 
	`sub_4x32b
(
gødõ¡_¨ó_c
, 
m0_c
, 
m1_c
);

634 
	`cm∂tz_4x32b
(
gødõ¡_¨ó_sign_a
, 
gødõ¡_¨ó_a
);

635 
	`cm∂tz_2x32b
(
gødõ¡_¨ó_sign_b
, 
gødõ¡_¨ó_b
);

636 
	`cm∂tz_4x32b
(
gødõ¡_¨ó_sign_c
, 
gødõ¡_¨ó_c
);

638 
	`abs_4x32b
(
gødõ¡_¨ó_a
, gradient_area_a);

639 
	`abs_2x32b
(
gødõ¡_¨ó_b
, gradient_area_b);

640 
	`abs_4x32b
(
gødõ¡_¨ó_c
, gradient_area_c);

642 
wödög_mask_sˇœr
 = -
psx_gpu
->
åüngÀ_wödög
;

644 
	`dup_4x32b
(
wödög_mask
, 
wödög_mask_sˇœr
);

645 
	`e‹_4x32b
(
gødõ¡_¨ó_sign_a
, gødõ¡_¨ó_sign_a, 
wödög_mask
);

646 
	`e‹_2x32b
(
gødõ¡_¨ó_sign_b
, gødõ¡_¨ó_sign_b, 
wödög_mask
);

647 
	`e‹_4x32b
(
gødõ¡_¨ó_sign_c
, gødõ¡_¨ó_sign_c, 
wödög_mask
);

649 
	`mul_sˇœr_l⁄g_2x32b
(
gødõ¡_wide_a0
,

650 
	`ve˘‹_ˇ°
(
vec_2x32s
, 
gødõ¡_¨ó_a
.
low
),

651 (
s64
)
åüngÀ_¨ó_ªcùroˇl
);

652 
	`mul_sˇœr_l⁄g_2x32b
(
gødõ¡_wide_a1
,

653 
	`ve˘‹_ˇ°
(
vec_2x32s
, 
gødõ¡_¨ó_a
.
high
),

654 (
s64
)
åüngÀ_¨ó_ªcùroˇl
);

655 
	`mul_sˇœr_l⁄g_2x32b
(
gødõ¡_wide_b
,

656 
	`ve˘‹_ˇ°
(
vec_2x32s
, 
gødõ¡_¨ó_b
),

657 (
s64
)
åüngÀ_¨ó_ªcùroˇl
);

658 
	`mul_sˇœr_l⁄g_2x32b
(
gødõ¡_wide_c0
,

659 
	`ve˘‹_ˇ°
(
vec_2x32s
, 
gødõ¡_¨ó_c
.
low
),

660 (
s64
)
åüngÀ_¨ó_ªcùroˇl
);

661 
	`mul_sˇœr_l⁄g_2x32b
(
gødõ¡_wide_c1
,

662 
	`ve˘‹_ˇ°
(
vec_2x32s
, 
gødõ¡_¨ó_c
.
high
),

663 (
s64
)
åüngÀ_¨ó_ªcùroˇl
);

665 
	`dup_16x8b
(
gødõ¡_shi·
, 
åüngÀ_¨ó_shi·
);

666 
	`shl_ªg_2x64b
(
gødõ¡_wide_a0
, gradient_wide_a0,

667 
	`ve˘‹_ˇ°
(
vec_2x64u
, 
gødõ¡_shi·
));

668 
	`shl_ªg_2x64b
(
gødõ¡_wide_a1
, gradient_wide_a1,

669 
	`ve˘‹_ˇ°
(
vec_2x64u
, 
gødõ¡_shi·
));

670 
	`shl_ªg_2x64b
(
gødõ¡_wide_b
, gradient_wide_b,

671 
	`ve˘‹_ˇ°
(
vec_2x64u
, 
gødõ¡_shi·
));

672 
	`shl_ªg_2x64b
(
gødõ¡_wide_c0
, gradient_wide_c0,

673 
	`ve˘‹_ˇ°
(
vec_2x64u
, 
gødõ¡_shi·
));

674 
	`shl_ªg_2x64b
(
gødõ¡_wide_c1
, gradient_wide_c1,

675 
	`ve˘‹_ˇ°
(
vec_2x64u
, 
gødõ¡_shi·
));

677 
	`mov_«ºow_2x64b
(
gødõ¡_a
.
low
, 
gødõ¡_wide_a0
);

678 
	`mov_«ºow_2x64b
(
gødõ¡_a
.
high
, 
gødõ¡_wide_a1
);

679 
	`mov_«ºow_2x64b
(
gødõ¡_b
, 
gødõ¡_wide_b
);

680 
	`mov_«ºow_2x64b
(
gødõ¡_c
.
low
, 
gødõ¡_wide_c0
);

681 
	`mov_«ºow_2x64b
(
gødõ¡_c
.
high
, 
gødõ¡_wide_c1
);

683 
	`shl_4x32b
(
gødõ¡_a
, gradient_a, 4);

684 
	`shl_2x32b
(
gødõ¡_b
, gradient_b, 4);

685 
	`shl_4x32b
(
gødõ¡_c
, gradient_c, 4);

687 
	`e‹_4x32b
(
gødõ¡_a
, gødõ¡_a, 
gødõ¡_¨ó_sign_a
);

688 
	`e‹_2x32b
(
gødõ¡_b
, gødõ¡_b, 
gødõ¡_¨ó_sign_b
);

689 
	`e‹_4x32b
(
gødõ¡_c
, gødõ¡_c, 
gødõ¡_¨ó_sign_c
);

691 
	`sub_4x32b
(
gødõ¡_a
, gødõ¡_a, 
gødõ¡_¨ó_sign_a
);

692 
	`sub_2x32b
(
gødõ¡_b
, gødõ¡_b, 
gødõ¡_¨ó_sign_b
);

693 
	`sub_4x32b
(
gødõ¡_c
, gødõ¡_c, 
gødõ¡_¨ó_sign_c
);

695 
u32
 
À·_adju°
 = 
a
->
x
;

696 
	`mls_sˇœr_4x32b
(
uvrg_ba£
, 
gødõ¡_a
, 
À·_adju°
);

697 
	`mls_sˇœr_2x32b
(
b_ba£
.
low
, 
gødõ¡_b
, 
À·_adju°
);

699 
vec_4x32u
 
uvrg_dx2
;

700 
vec_2x32u
 
b_dx2
;

702 
vec_4x32u
 
uvrg_dx3
;

703 
vec_2x32u
 
b_dx3
;

705 
vec_4x32u
 
zîo
;

707 
	`e‹_4x32b
(
zîo
, zero, zero);

708 
	`add_4x32b
(
uvrg_dx2
, 
gødõ¡_a
, gradient_a);

709 
	`add_2x32b
(
b_dx2
, 
gødõ¡_b
, gradient_b);

710 
	`add_4x32b
(
uvrg_dx3
, 
gødõ¡_a
, 
uvrg_dx2
);

711 
	`add_2x32b
(
b_dx3
, 
gødõ¡_b
, 
b_dx2
);

715 
psx_gpu
->
u_block_•™
.
e
[0] = 
zîo
.e[0];

716 
psx_gpu
->
u_block_•™
.
e
[1] = 
gødõ¡_a
.e[0];

717 
psx_gpu
->
u_block_•™
.
e
[2] = 
uvrg_dx2
.e[0];

718 
psx_gpu
->
u_block_•™
.
e
[3] = 
uvrg_dx3
.e[0];

720 
psx_gpu
->
v_block_•™
.
e
[0] = 
zîo
.e[1];

721 
psx_gpu
->
v_block_•™
.
e
[1] = 
gødõ¡_a
.e[1];

722 
psx_gpu
->
v_block_•™
.
e
[2] = 
uvrg_dx2
.e[1];

723 
psx_gpu
->
v_block_•™
.
e
[3] = 
uvrg_dx3
.e[1];

725 
psx_gpu
->
r_block_•™
.
e
[0] = 
zîo
.e[2];

726 
psx_gpu
->
r_block_•™
.
e
[1] = 
gødõ¡_a
.e[2];

727 
psx_gpu
->
r_block_•™
.
e
[2] = 
uvrg_dx2
.e[2];

728 
psx_gpu
->
r_block_•™
.
e
[3] = 
uvrg_dx3
.e[2];

730 
psx_gpu
->
g_block_•™
.
e
[0] = 
zîo
.e[3];

731 
psx_gpu
->
g_block_•™
.
e
[1] = 
gødõ¡_a
.e[3];

732 
psx_gpu
->
g_block_•™
.
e
[2] = 
uvrg_dx2
.e[3];

733 
psx_gpu
->
g_block_•™
.
e
[3] = 
uvrg_dx3
.e[3];

735 
psx_gpu
->
b_block_•™
.
e
[0] = 
zîo
.e[0];

736 
psx_gpu
->
b_block_•™
.
e
[1] = 
gødõ¡_b
.e[0];

737 
psx_gpu
->
b_block_•™
.
e
[2] = 
b_dx2
.e[0];

738 
psx_gpu
->
b_block_•™
.
e
[3] = 
b_dx3
.e[0];

740 
psx_gpu
->
uvrg
 = 
uvrg_ba£
;

741 
psx_gpu
->
b
 = 
b_ba£
.
e
[0];

743 
psx_gpu
->
uvrg_dx
 = 
gødõ¡_a
;

744 
psx_gpu
->
uvrg_dy
 = 
gødõ¡_c
;

745 
psx_gpu
->
b_dy
 = 
gødõ¡_b
.
e
[1];

746 
	}
}

749 
	#ve˘‹_check
(
_a
, 
_b
) \

750 if(
	`memcmp
(&
_a
, &
_b
, (_b))) \

752 if((
_b
) == 8) \

754 
	`¥ötf
("mismatch on %s vs %s: (%x %x) vs (%x %x)\n", \

755 #_a, #_b, 
_a
.
e
[0], _a.e[1], 
_b
.e[0], _b.e[1]); \

759 
	`¥ötf
("mismatch on %s vs %s: (%x %x %x %x) vs (%x %x %x %x)\n", \

760 #_a, #_b, 
_a
.
e
[0], _a.e[1], _a.e[2], _a.e[3], 
_b
.e[0], _b.e[1], \

761 
_b
.
e
[2], _b.e[3]); \

764 

	)

765 
	#sˇœr_check
(
_a
, 
_b
) \

766 if(
_a
 !
_b
) \

767 
	`¥ötf
("mism©ch o¿%†%s: %x v†%x\n", #_a, #_b, 
_a
, 
_b
) \

768 

	)

770 #i‚de‡
NDEBUG


771 
	#£tup_•™s_debug_check
(
•™_edge_d©a_ñemít
) \

773 
u32
 
_num_•™s
 = &
•™_edge_d©a_ñemít
 - 
psx_gpu
->
•™_edge_d©a
; \

774 i‡(
_num_•™s
 > 
MAX_SPANS
) \

776 i‡(
_num_•™s
 < 
psx_gpu
->
num_•™s
) \

778 if(
•™_edge_d©a_ñemít
.
num_blocks
 > 
MAX_BLOCKS_PER_ROW
) \

780 if(
•™_edge_d©a_ñemít
.
y
 > 2048) \

784 

	)

786 
	#£tup_•™s_debug_check
(
•™_edge_d©a_ñemít
) \

787 

	)

790 
	#£tup_•™s_¥ﬁogue_Æã∫©e_yes
() \

791 
vec_2x64s
 
Æã∫©e_x
; \

792 
vec_2x64s
 
Æã∫©e_dx_dy
; \

793 
vec_4x32s
 
Æã∫©e_x_32
; \

794 
vec_2x32s
 
Æã∫©e_x_16
; \

796 
vec_4x16u
 
Æã∫©e_£À˘
; \

797 
vec_4x16s
 
y_mid_poöt
; \

799 
s32
 
y_b
 = 
v_b
->
y
; \

800 
s64
 
edge_Æt
; \

801 
s32
 
edge_dx_dy_Æt
; \

802 
u32
 
edge_shi·_Æt
 \

803 

	)

804 
	#£tup_•™s_¥ﬁogue_Æã∫©e_no
() \

805 

	)

806 
	#£tup_•™s_¥ﬁogue
(
Æã∫©e_a˘ive
) \

807 
edge_d©a_°ru˘
 *
•™_edge_d©a
; \

808 
vec_4x32u
 *
•™_uvrg_off£t
; \

809 
u32
 *
•™_b_off£t
; \

811 
s32
 
˛ù
; \

813 
vec_2x64s
 
edges_xy
; \

814 
vec_2x32s
 
edges_dx_dy
; \

815 
vec_2x32u
 
edge_shi·s
; \

817 
vec_2x64s
 
À·_x
, 
right_x
; \

818 
vec_2x64s
 
À·_dx_dy
, 
right_dx_dy
; \

819 
vec_4x32s
 
À·_x_32
, 
right_x_32
; \

820 
vec_8x16s
 
À·_right_x_16
; \

821 
vec_4x16s
 
y_x4
; \

822 
vec_8x16s
 
À·_edge
; \

823 
vec_8x16s
 
right_edge
; \

824 
vec_4x16u
 
•™_shi·
; \

826 
vec_2x32u
 
c_0x01
; \

827 
vec_4x16u
 
c_0x04
; \

828 
vec_4x16u
 
c_0xFFFE
; \

829 
vec_4x16u
 
c_0x07
; \

831 
vec_2x32s
 
x_°¨ts
; \

832 
vec_2x32s
 
x_íds
; \

834 
s32
 
x_a
 = 
v_a
->
x
; \

835 
s32
 
x_b
 = 
v_b
->
x
; \

836 
s32
 
x_c
 = 
v_c
->
x
; \

837 
s32
 
y_a
 = 
v_a
->
y
; \

838 
s32
 
y_c
 = 
v_c
->
y
; \

840 
vec_4x32u
 
uvrg
 = 
psx_gpu
->uvrg; \

841 
vec_4x32u
 
uvrg_dy
 = 
psx_gpu
->uvrg_dy; \

842 
u32
 
b
 = 
psx_gpu
->b; \

843 
u32
 
b_dy
 = 
psx_gpu
->b_dy; \

845 
	`dup_2x32b
(
c_0x01
, 0x01); \

846 
£tup_•™s_¥ﬁogue_Æã∫©e_
##
	`Æã∫©e_a˘ive
() \

847 

	)

848 
	#£tup_•™s_¥ﬁogue_b
() \

849 
•™_edge_d©a
 = 
psx_gpu
->span_edge_data; \

850 
•™_uvrg_off£t
 = 
psx_gpu
->span_uvrg_offset; \

851 
•™_b_off£t
 = 
psx_gpu
->span_b_offset; \

853 
vec_8x16u
 
c_0x0001
; \

855 
	`dup_8x16b
(
c_0x0001
, 0x0001); \

856 
	`dup_8x16b
(
À·_edge
, 
psx_gpu
->
võwp‹t_°¨t_x
); \

857 
	`dup_8x16b
(
right_edge
, 
psx_gpu
->
võwp‹t_íd_x
); \

858 
	`add_8x16b
(
right_edge
,Ñight_edge, 
c_0x0001
); \

859 
	`dup_4x16b
(
c_0x04
, 0x04); \

860 
	`dup_4x16b
(
c_0x07
, 0x07); \

861 
	`dup_4x16b
(
c_0xFFFE
, 0xFFFE); \

862 

	)

864 
	#compuã_edge_dñè_x2
() \

866 
vec_2x32s
 
heights
; \

867 
vec_2x32s
 
height_ªcùroˇls
; \

868 
vec_2x32s
 
heights_b
; \

869 
vec_4x32u
 
widths
; \

871 
u32
 
edge_shi·
 = 
ªcùroˇl_èbÀ
[
height
]; \

873 
	`dup_2x32b
(
heights
, 
height
); \

874 
	`sub_2x32b
(
widths
, 
x_íds
, 
x_°¨ts
); \

876 
	`dup_2x32b
(
edge_shi·s
, 
edge_shi·
); \

877 
	`sub_2x32b
(
heights_b
, 
heights
, 
c_0x01
); \

878 
	`shr_2x32b
(
height_ªcùroˇls
, 
edge_shi·s
, 10); \

880 
	`mœ_2x32b
(
heights_b
, 
x_°¨ts
, 
heights
); \

881 
	`bic_immedüã_4x16b
(
	`ve˘‹_ˇ°
(
vec_4x16u
, 
edge_shi·s
), 0xE0); \

882 
	`mul_2x32b
(
edges_dx_dy
, 
widths
, 
height_ªcùroˇls
); \

883 
	`mul_l⁄g_2x32b
(
edges_xy
, 
heights_b
, 
height_ªcùroˇls
); \

885 

	)

886 
	#compuã_edge_dñè_x3
(
°¨t_c
, 
height_a
, 
height_b
) \

888 
vec_2x32s
 
heights
; \

889 
vec_2x32s
 
height_ªcùroˇls
; \

890 
vec_2x32s
 
heights_b
; \

891 
vec_2x32u
 
widths
; \

893 
u32
 
width_Æt
; \

894 
s32
 
height_b_Æt
; \

895 
u32
 
height_ªcùroˇl_Æt
; \

897 
heights
.
e
[0] = 
height_a
; \

898 
heights
.
e
[1] = 
height_b
; \

900 
edge_shi·s
.
e
[0] = 
ªcùroˇl_èbÀ
[
height_a
]; \

901 
edge_shi·s
.
e
[1] = 
ªcùroˇl_èbÀ
[
height_b
]; \

902 
edge_shi·_Æt
 = 
ªcùroˇl_èbÀ
[
height_mö‹_b
]; \

904 
	`sub_2x32b
(
widths
, 
x_íds
, 
x_°¨ts
); \

905 
width_Æt
 = 
x_c
 - 
°¨t_c
; \

907 
	`shr_2x32b
(
height_ªcùroˇls
, 
edge_shi·s
, 10); \

908 
height_ªcùroˇl_Æt
 = 
edge_shi·_Æt
 >> 10; \

910 
	`bic_immedüã_4x16b
(
	`ve˘‹_ˇ°
(
vec_4x16u
, 
edge_shi·s
), 0xE0); \

911 
edge_shi·_Æt
 &= 0x1F; \

913 
	`sub_2x32b
(
heights_b
, 
heights
, 
c_0x01
); \

914 
height_b_Æt
 = 
height_mö‹_b
 - 1; \

916 
	`mœ_2x32b
(
heights_b
, 
x_°¨ts
, 
heights
); \

917 
height_b_Æt
 +
height_mö‹_b
 * 
°¨t_c
; \

919 
	`mul_l⁄g_2x32b
(
edges_xy
, 
heights_b
, 
height_ªcùroˇls
); \

920 
edge_Æt
 = (
s64
)
height_b_Æt
 * 
height_ªcùroˇl_Æt
; \

922 
	`mul_2x32b
(
edges_dx_dy
, 
widths
, 
height_ªcùroˇls
); \

923 
edge_dx_dy_Æt
 = 
width_Æt
 * 
height_ªcùroˇl_Æt
; \

925 

	)

927 
	#£tup_•™s_adju°_y_up
() \

928 
	`sub_4x32b
(
y_x4
, y_x4, 
c_0x04
) \

929 

	)

930 
	#£tup_•™s_adju°_y_down
() \

931 
	`add_4x32b
(
y_x4
, y_x4, 
c_0x04
) \

932 

	)

933 
	#£tup_•™s_adju°_öãΩﬁ™ts_up
() \

934 
	`sub_4x32b
(
uvrg
, uvrg, 
uvrg_dy
); \

935 
b
 -
b_dy
 \

936 

	)

937 
	#£tup_•™s_adju°_öãΩﬁ™ts_down
() \

938 
	`add_4x32b
(
uvrg
, uvrg, 
uvrg_dy
); \

939 
b
 +
b_dy
 \

940 

	)

942 
	#£tup_•™s_˛ù_öãΩﬁ™ts_ö¸emít
() \

943 
	`mœ_sˇœr_4x32b
(
uvrg
, 
uvrg_dy
, 
˛ù
); \

944 
b
 +
b_dy
 * 
˛ù
 \

945 

	)

946 
	#£tup_•™s_˛ù_öãΩﬁ™ts_de¸emít
() \

947 
	`mls_sˇœr_4x32b
(
uvrg
, 
uvrg_dy
, 
˛ù
); \

948 
b
 -
b_dy
 * 
˛ù
 \

949 

	)

950 
	#£tup_•™s_˛ù_Æã∫©e_yes
() \

951 
edge_Æt
 +
edge_dx_dy_Æt
 * (
s64
)(
˛ù
) \

952 

	)

953 
	#£tup_•™s_˛ù_Æã∫©e_no
() \

954 

	)

955 
	#£tup_•™s_˛ù
(
dúe˘i⁄
, 
Æã∫©e_a˘ive
) \

957 
˛ù≥d_åüngÀs
++; \

958 
	`mœ_sˇœr_l⁄g_2x32b
(
edges_xy
, 
edges_dx_dy
, (
s64
)
˛ù
); \

959 
£tup_•™s_˛ù_Æã∫©e_
##
	`Æã∫©e_a˘ive
(); \

960 
£tup_•™s_˛ù_öãΩﬁ™ts_
##
	`dúe˘i⁄
(); \

962 

	)

964 
	#£tup_•™s_adju°_edges_Æã∫©e_no
(
À·_ödex
, 
right_ödex
) \

966 
vec_2x64u
 
edge_shi·s_64
; \

967 
vec_2x64s
 
edges_dx_dy_64
; \

969 
	`mov_wide_2x32b
(
edge_shi·s_64
, 
edge_shi·s
); \

970 
	`shl_v¨übÀ_2x64b
(
edges_xy
,Édges_xy, 
edge_shi·s_64
); \

972 
	`mov_wide_2x32b
(
edges_dx_dy_64
, 
edges_dx_dy
); \

973 
	`shl_v¨übÀ_2x64b
(
edges_dx_dy_64
,Édges_dx_dy_64, 
edge_shi·s_64
); \

975 
À·_x
.
e
[0] = 
edges_xy
.e[
À·_ödex
]; \

976 
right_x
.
e
[0] = 
edges_xy
.e[
right_ödex
]; \

978 
À·_dx_dy
.
e
[0] = 
edges_dx_dy_64
.e[
À·_ödex
]; \

979 
À·_dx_dy
.
e
[1] = 
edges_dx_dy_64
.e[
À·_ödex
]; \

980 
right_dx_dy
.
e
[0] = 
edges_dx_dy_64
.e[
right_ödex
]; \

981 
right_dx_dy
.
e
[1] = 
edges_dx_dy_64
.e[
right_ödex
]; \

983 
	`add_1x64b
(
À·_x
.
high
,Üe·_x.
low
, 
À·_dx_dy
.low); \

984 
	`add_1x64b
(
right_x
.
high
,Ñight_x.
low
, 
right_dx_dy
.low); \

986 
	`add_2x64b
(
À·_dx_dy
,Üeft_dx_dy,Üeft_dx_dy); \

987 
	`add_2x64b
(
right_dx_dy
,Ñight_dx_dy,Ñight_dx_dy); \

989 

	)

990 
	#£tup_•™s_adju°_edges_Æã∫©e_yes
(
À·_ödex
, 
right_ödex
) \

992 
	`£tup_•™s_adju°_edges_Æã∫©e_no
(
À·_ödex
, 
right_ödex
); \

993 
s64
 
edge_dx_dy_Æt_64
; \

995 
	`dup_4x16b
(
y_mid_poöt
, 
y_b
); \

997 
edge_Æt
 <<
edge_shi·_Æt
; \

998 
edge_dx_dy_Æt_64
 = (
s64
)
edge_dx_dy_Æt
 << 
edge_shi·_Æt
; \

1000 
Æã∫©e_x
.
e
[0] = 
edge_Æt
; \

1001 
Æã∫©e_dx_dy
.
e
[0] = 
edge_dx_dy_Æt_64
; \

1002 
Æã∫©e_dx_dy
.
e
[1] = 
edge_dx_dy_Æt_64
; \

1004 
	`add_1x64b
(
Æã∫©e_x
.
high
,á…î«ã_x.
low
, 
Æã∫©e_dx_dy
.low); \

1005 
	`add_2x64b
(
Æã∫©e_dx_dy
,álternate_dx_dy,álternate_dx_dy); \

1007 

	)

1009 
	#£tup_•™s_y_£À˘_up
() \

1010 
	`cm∂t_4x16b
(
Æã∫©e_£À˘
, 
y_x4
, 
y_mid_poöt
) \

1011 

	)

1012 
	#£tup_•™s_y_£À˘_down
() \

1013 
	`cmpgt_4x16b
(
Æã∫©e_£À˘
, 
y_x4
, 
y_mid_poöt
) \

1014 

	)

1015 
	#£tup_•™s_y_£À˘_Æã∫©e_yes
(
dúe˘i⁄
) \

1016 
£tup_•™s_y_£À˘_
##
	`dúe˘i⁄
() \

1017 

	)

1018 
	#£tup_•™s_y_£À˘_Æã∫©e_no
(
dúe˘i⁄
) \

1019 

	)

1020 
	#£tup_•™s_Æã∫©e_£À˘_À·
() \

1021 
	`bô_4x16b
(
À·_right_x_16
.
low
, 
Æã∫©e_x_16
, 
Æã∫©e_£À˘
) \

1022 

	)

1023 
	#£tup_•™s_Æã∫©e_£À˘_right
() \

1024 
	`bô_4x16b
(
À·_right_x_16
.
high
, 
Æã∫©e_x_16
, 
Æã∫©e_£À˘
) \

1025 

	)

1026 
	#£tup_•™s_Æã∫©e_£À˘_n⁄e
() \

1027 

	)

1028 
	#£tup_•™s_ö¸emít_Æã∫©e_yes
() \

1029 
	`shr_«ºow_2x64b
(
Æã∫©e_x_32
.
low
, 
Æã∫©e_x
, 32); \

1030 
	`add_2x64b
(
Æã∫©e_x
,á…î«ã_x, 
Æã∫©e_dx_dy
); \

1031 
	`shr_«ºow_2x64b
(
Æã∫©e_x_32
.
high
, 
Æã∫©e_x
, 32); \

1032 
	`add_2x64b
(
Æã∫©e_x
,á…î«ã_x, 
Æã∫©e_dx_dy
); \

1033 
	`mov_«ºow_4x32b
(
Æã∫©e_x_16
, 
Æã∫©e_x_32
) \

1034 

	)

1035 
	#£tup_•™s_ö¸emít_Æã∫©e_no
() \

1036 

	)

1037 
	#£tup_•™s_£t_x4
(
Æã∫©e
, 
dúe˘i⁄
, 
Æã∫©e_a˘ive
) \

1039 
•™_uvrg_off£t
[0] = 
uvrg
; \

1040 
•™_b_off£t
[0] = 
b
; \

1041 
£tup_•™s_adju°_öãΩﬁ™ts_
##
	`dúe˘i⁄
(); \

1043 
•™_uvrg_off£t
[1] = 
uvrg
; \

1044 
•™_b_off£t
[1] = 
b
; \

1045 
£tup_•™s_adju°_öãΩﬁ™ts_
##
	`dúe˘i⁄
(); \

1047 
•™_uvrg_off£t
[2] = 
uvrg
; \

1048 
•™_b_off£t
[2] = 
b
; \

1049 
£tup_•™s_adju°_öãΩﬁ™ts_
##
	`dúe˘i⁄
(); \

1051 
•™_uvrg_off£t
[3] = 
uvrg
; \

1052 
•™_b_off£t
[3] = 
b
; \

1053 
£tup_•™s_adju°_öãΩﬁ™ts_
##
	`dúe˘i⁄
(); \

1055 
•™_uvrg_off£t
 += 4; \

1056 
•™_b_off£t
 += 4; \

1058 
	`shr_«ºow_2x64b
(
À·_x_32
.
low
, 
À·_x
, 32); \

1059 
	`shr_«ºow_2x64b
(
right_x_32
.
low
, 
right_x
, 32); \

1061 
	`add_2x64b
(
À·_x
,Üe·_x, 
À·_dx_dy
); \

1062 
	`add_2x64b
(
right_x
,Ñight_x, 
right_dx_dy
); \

1064 
	`shr_«ºow_2x64b
(
À·_x_32
.
high
, 
À·_x
, 32); \

1065 
	`shr_«ºow_2x64b
(
right_x_32
.
high
, 
right_x
, 32); \

1067 
	`add_2x64b
(
À·_x
,Üe·_x, 
À·_dx_dy
); \

1068 
	`add_2x64b
(
right_x
,Ñight_x, 
right_dx_dy
); \

1070 
	`mov_«ºow_4x32b
(
À·_right_x_16
.
low
, 
À·_x_32
); \

1071 
	`mov_«ºow_4x32b
(
À·_right_x_16
.
high
, 
right_x_32
); \

1073 
£tup_•™s_ö¸emít_Æã∫©e_
##
	`Æã∫©e_a˘ive
(); \

1074 
£tup_•™s_y_£À˘_Æã∫©e_
##
	`Æã∫©e_a˘ive
(
dúe˘i⁄
); \

1075 
£tup_•™s_Æã∫©e_£À˘_
##
	`Æã∫©e
(); \

1077 
	`max_8x16b
(
À·_right_x_16
,Üe·_right_x_16, 
À·_edge
); \

1078 
	`mö_8x16b
(
À·_right_x_16
,Üe·_right_x_16, 
right_edge
); \

1080 
	`sub_4x16b
(
À·_right_x_16
.
high
,Üe·_right_x_16.high,Üe·_right_x_16.
low
); \

1081 
	`add_4x16b
(
À·_right_x_16
.
high
,Üe·_right_x_16.high, 
c_0x07
); \

1082 
	`™d_4x16b
(
•™_shi·
, 
À·_right_x_16
.
high
, 
c_0x07
); \

1083 
	`shl_v¨übÀ_4x16b
(
•™_shi·
, 
c_0xFFFE
, span_shift); \

1084 
	`shr_4x16b
(
À·_right_x_16
.
high
,Üeft_right_x_16.high, 3); \

1086 
u32
 
i
; \

1087 
i
 = 0; i < 4; i++) \

1089 
•™_edge_d©a
[
i
].
À·_x
 = 
À·_right_x_16
.
low
.
e
[i]; \

1090 
•™_edge_d©a
[
i
].
num_blocks
 = 
À·_right_x_16
.
high
.
e
[i]; \

1091 
•™_edge_d©a
[
i
].
right_mask
 = 
•™_shi·
.
e
[i]; \

1092 
•™_edge_d©a
[
i
].
y
 = 
y_x4
.
e
[i]; \

1093 
	`£tup_•™s_debug_check
(
•™_edge_d©a
[
i
]); \

1096 
•™_edge_d©a
 += 4; \

1098 
£tup_•™s_adju°_y_
##
	`dúe˘i⁄
(); \

1100 

	)

1102 
	#£tup_•™s_Æã∫©e_adju°_yes
() \

1103 
edge_Æt
 -
edge_dx_dy_Æt
 * (
s64
)
height_mö‹_a
 \

1104 

	)

1105 
	#£tup_•™s_Æã∫©e_adju°_no
() \

1106 

	)

1108 
	#£tup_•™s_down
(
À·_ödex
, 
right_ödex
, 
Æã∫©e
, 
Æã∫©e_a˘ive
) \

1109 
£tup_•™s_Æã∫©e_adju°_
##
	`Æã∫©e_a˘ive
(); \

1110 if(
y_c
 > 
psx_gpu
->
võwp‹t_íd_y
) \

1111 
height
 -
y_c
 - 
psx_gpu
->
võwp‹t_íd_y
 - 1; \

1113 
˛ù
 = 
psx_gpu
->
võwp‹t_°¨t_y
 - 
y_a
; \

1114 if(
˛ù
 > 0) \

1116 
height
 -
˛ù
; \

1117 
y_a
 +
˛ù
; \

1118 
	`£tup_•™s_˛ù
(
ö¸emít
, 
Æã∫©e_a˘ive
); \

1121 
	`£tup_•™s_¥ﬁogue_b
(); \

1123 if(
height
 > 0) \

1125 
y_x4
.
e
[0] = 
y_a
; \

1126 
y_x4
.
e
[1] = 
y_a
 + 1; \

1127 
y_x4
.
e
[2] = 
y_a
 + 2; \

1128 
y_x4
.
e
[3] = 
y_a
 + 3; \

1129 
£tup_•™s_adju°_edges_Æã∫©e_
##
	`Æã∫©e_a˘ive
(
À·_ödex
, \

1130 
right_ödex
); \

1132 
psx_gpu
->
num_•™s
 = 
height
; \

1135 
	`£tup_•™s_£t_x4
(
Æã∫©e
, 
down
, 
Æã∫©e_a˘ive
); \

1136 
height
 -= 4; \

1137 } 
height
 > 0); \

1139 

	)

1141 
	#£tup_•™s_Æã∫©e_¥e_ö¸emít_yes
() \

1142 
edge_Æt
 +
edge_dx_dy_Æt
 \

1143 

	)

1144 
	#£tup_•™s_Æã∫©e_¥e_ö¸emít_no
() \

1145 

	)

1146 
	#£tup_•™s_up_de¸emít_height_yes
() \

1147 
height
-- \

1148 

	)

1149 
	#£tup_•™s_up_de¸emít_height_no
() \

1151 

	)

1152 
	#£tup_•™s_up
(
À·_ödex
, 
right_ödex
, 
Æã∫©e
, 
Æã∫©e_a˘ive
) \

1153 
£tup_•™s_Æã∫©e_adju°_
##
	`Æã∫©e_a˘ive
(); \

1154 
y_a
--; \

1156 if(
y_c
 < 
psx_gpu
->
võwp‹t_°¨t_y
) \

1157 
height
 -
psx_gpu
->
võwp‹t_°¨t_y
 - 
y_c
; \

1159 
£tup_•™s_up_de¸emít_height_
##
	`Æã∫©e_a˘ive
(); \

1161 
˛ù
 = 
y_a
 - 
psx_gpu
->
võwp‹t_íd_y
; \

1162 if(
˛ù
 > 0) \

1164 
height
 -
˛ù
; \

1165 
y_a
 -
˛ù
; \

1166 
	`£tup_•™s_˛ù
(
de¸emít
, 
Æã∫©e_a˘ive
); \

1169 
	`£tup_•™s_¥ﬁogue_b
(); \

1171 if(
height
 > 0) \

1173 
y_x4
.
e
[0] = 
y_a
; \

1174 
y_x4
.
e
[1] = 
y_a
 - 1; \

1175 
y_x4
.
e
[2] = 
y_a
 - 2; \

1176 
y_x4
.
e
[3] = 
y_a
 - 3; \

1177 
	`add_wide_2x32b
(
edges_xy
,Édges_xy, 
edges_dx_dy
); \

1178 
£tup_•™s_Æã∫©e_¥e_ö¸emít_
##
	`Æã∫©e_a˘ive
(); \

1179 
£tup_•™s_adju°_edges_Æã∫©e_
##
	`Æã∫©e_a˘ive
(
À·_ödex
, \

1180 
right_ödex
); \

1181 
	`£tup_•™s_adju°_öãΩﬁ™ts_up
(); \

1183 
psx_gpu
->
num_•™s
 = 
height
; \

1184 
height
 > 0) \

1186 
	`£tup_•™s_£t_x4
(
Æã∫©e
, 
up
, 
Æã∫©e_a˘ive
); \

1187 
height
 -= 4; \

1190 

	)

1191 
	#ödex_À·
 0

	)

1192 
	#ödex_right
 1

	)

1194 
	#£tup_•™s_up_up
(
mö‹
, 
maj‹
) \

1195 
	`£tup_•™s_¥ﬁogue
(
yes
); \

1196 
s32
 
height_mö‹_a
 = 
y_a
 - 
y_b
; \

1197 
s32
 
height_mö‹_b
 = 
y_b
 - 
y_c
; \

1198 
s32
 
height
 = 
y_a
 - 
y_c
; \

1200 
	`dup_2x32b
(
x_°¨ts
, 
x_a
); \

1201 
x_íds
.
e
[0] = 
x_c
; \

1202 
x_íds
.
e
[1] = 
x_b
; \

1204 
	`compuã_edge_dñè_x3
(
x_b
, 
height
, 
height_mö‹_a
); \

1205 
	`£tup_•™s_up
(
ödex_
##
maj‹
, index_##
mö‹
, mö‹, 
yes
) \

1206 

	)

1208 
£tup_•™s_up_À·
(
psx_gpu_°ru˘
 *
psx_gpu
, 
vîãx_°ru˘
 *
v_a
,

1209 
vîãx_°ru˘
 *
v_b
, vîãx_°ru˘ *
v_c
);

1210 
£tup_•™s_up_right
(
psx_gpu_°ru˘
 *
psx_gpu
, 
vîãx_°ru˘
 *
v_a
,

1211 
vîãx_°ru˘
 *
v_b
, vîãx_°ru˘ *
v_c
);

1212 
£tup_•™s_down_À·
(
psx_gpu_°ru˘
 *
psx_gpu
, 
vîãx_°ru˘
 *
v_a
,

1213 
vîãx_°ru˘
 *
v_b
, vîãx_°ru˘ *
v_c
);

1214 
£tup_•™s_down_right
(
psx_gpu_°ru˘
 *
psx_gpu
, 
vîãx_°ru˘
 *
v_a
,

1215 
vîãx_°ru˘
 *
v_b
, vîãx_°ru˘ *
v_c
);

1216 
£tup_•™s_up_a
(
psx_gpu_°ru˘
 *
psx_gpu
, 
vîãx_°ru˘
 *
v_a
,

1217 
vîãx_°ru˘
 *
v_b
, vîãx_°ru˘ *
v_c
);

1218 
£tup_•™s_up_b
(
psx_gpu_°ru˘
 *
psx_gpu
, 
vîãx_°ru˘
 *
v_a
,

1219 
vîãx_°ru˘
 *
v_b
, vîãx_°ru˘ *
v_c
);

1220 
£tup_•™s_down_a
(
psx_gpu_°ru˘
 *
psx_gpu
, 
vîãx_°ru˘
 *
v_a
,

1221 
vîãx_°ru˘
 *
v_b
, vîãx_°ru˘ *
v_c
);

1222 
£tup_•™s_down_b
(
psx_gpu_°ru˘
 *
psx_gpu
, 
vîãx_°ru˘
 *
v_a
,

1223 
vîãx_°ru˘
 *
v_b
, vîãx_°ru˘ *
v_c
);

1224 
£tup_•™s_up_down
(
psx_gpu_°ru˘
 *
psx_gpu
, 
vîãx_°ru˘
 *
v_a
,

1225 
vîãx_°ru˘
 *
v_b
, vîãx_°ru˘ *
v_c
);

1228 #i‚de‡
NEON_BUILD


1230 
	$£tup_•™s_up_À·
(
psx_gpu_°ru˘
 *
psx_gpu
, 
vîãx_°ru˘
 *
v_a
,

1231 
vîãx_°ru˘
 *
v_b
, vîãx_°ru˘ *
v_c
)

1233 
	`£tup_•™s_up_up
(
À·
, 
right
);

1234 
	}
}

1236 
	$£tup_•™s_up_right
(
psx_gpu_°ru˘
 *
psx_gpu
, 
vîãx_°ru˘
 *
v_a
,

1237 
vîãx_°ru˘
 *
v_b
, vîãx_°ru˘ *
v_c
)

1239 
	`£tup_•™s_up_up
(
right
, 
À·
);

1240 
	}
}

1242 
	#£tup_•™s_down_down
(
mö‹
, 
maj‹
) \

1243 
	`£tup_•™s_¥ﬁogue
(
yes
); \

1244 
s32
 
height_mö‹_a
 = 
y_b
 - 
y_a
; \

1245 
s32
 
height_mö‹_b
 = 
y_c
 - 
y_b
; \

1246 
s32
 
height
 = 
y_c
 - 
y_a
; \

1248 
	`dup_2x32b
(
x_°¨ts
, 
x_a
); \

1249 
x_íds
.
e
[0] = 
x_c
; \

1250 
x_íds
.
e
[1] = 
x_b
; \

1252 
	`compuã_edge_dñè_x3
(
x_b
, 
height
, 
height_mö‹_a
); \

1253 
	`£tup_•™s_down
(
ödex_
##
maj‹
, index_##
mö‹
, mö‹, 
yes
) \

1254 

	)

1255 
	$£tup_•™s_down_À·
(
psx_gpu_°ru˘
 *
psx_gpu
, 
vîãx_°ru˘
 *
v_a
,

1256 
vîãx_°ru˘
 *
v_b
, vîãx_°ru˘ *
v_c
)

1258 
	`£tup_•™s_down_down
(
À·
, 
right
);

1259 
	}
}

1261 
	$£tup_•™s_down_right
(
psx_gpu_°ru˘
 *
psx_gpu
, 
vîãx_°ru˘
 *
v_a
,

1262 
vîãx_°ru˘
 *
v_b
, vîãx_°ru˘ *
v_c
)

1264 
	`£tup_•™s_down_down
(
right
, 
À·
);

1265 
	}
}

1267 
	#£tup_•™s_up_Ê©
() \

1268 
s32
 
height
 = 
y_a
 - 
y_c
; \

1270 
Ê©_åüngÀs
++; \

1271 
	`compuã_edge_dñè_x2
(); \

1272 
	`£tup_•™s_up
(
ödex_À·
, 
ödex_right
, 
n⁄e
, 
no
) \

1273 

	)

1274 
	$£tup_•™s_up_a
(
psx_gpu_°ru˘
 *
psx_gpu
, 
vîãx_°ru˘
 *
v_a
,

1275 
vîãx_°ru˘
 *
v_b
, vîãx_°ru˘ *
v_c
)

1277 
	`£tup_•™s_¥ﬁogue
(
no
);

1278 
x_°¨ts
.
e
[0] = 
x_a
;

1279 
x_°¨ts
.
e
[1] = 
x_b
;

1280 
	`dup_2x32b
(
x_íds
, 
x_c
);

1282 
	`£tup_•™s_up_Ê©
();

1283 
	}
}

1285 
	$£tup_•™s_up_b
(
psx_gpu_°ru˘
 *
psx_gpu
, 
vîãx_°ru˘
 *
v_a
,

1286 
vîãx_°ru˘
 *
v_b
, vîãx_°ru˘ *
v_c
)

1288 
	`£tup_•™s_¥ﬁogue
(
no
);

1289 
	`dup_2x32b
(
x_°¨ts
, 
x_a
);

1290 
x_íds
.
e
[0] = 
x_b
;

1291 
x_íds
.
e
[1] = 
x_c
;

1293 
	`£tup_•™s_up_Ê©
();

1294 
	}
}

1296 
	#£tup_•™s_down_Ê©
() \

1297 
s32
 
height
 = 
y_c
 - 
y_a
; \

1299 
Ê©_åüngÀs
++; \

1300 
	`compuã_edge_dñè_x2
(); \

1301 
	`£tup_•™s_down
(
ödex_À·
, 
ödex_right
, 
n⁄e
, 
no
) \

1302 

	)

1303 
	$£tup_•™s_down_a
(
psx_gpu_°ru˘
 *
psx_gpu
, 
vîãx_°ru˘
 *
v_a
,

1304 
vîãx_°ru˘
 *
v_b
, vîãx_°ru˘ *
v_c
)

1306 
	`£tup_•™s_¥ﬁogue
(
no
);

1307 
x_°¨ts
.
e
[0] = 
x_a
;

1308 
x_°¨ts
.
e
[1] = 
x_b
;

1309 
	`dup_2x32b
(
x_íds
, 
x_c
);

1311 
	`£tup_•™s_down_Ê©
();

1312 
	}
}

1314 
	$£tup_•™s_down_b
(
psx_gpu_°ru˘
 *
psx_gpu
, 
vîãx_°ru˘
 *
v_a
,

1315 
vîãx_°ru˘
 *
v_b
, vîãx_°ru˘ *
v_c
)

1317 
	`£tup_•™s_¥ﬁogue
(
no
);

1318 
	`dup_2x32b
(
x_°¨ts
, 
x_a
);

1319 
x_íds
.
e
[0] = 
x_b
;

1320 
x_íds
.
e
[1] = 
x_c
;

1322 
	`£tup_•™s_down_Ê©
();

1323 
	}
}

1325 
	$£tup_•™s_up_down
(
psx_gpu_°ru˘
 *
psx_gpu
, 
vîãx_°ru˘
 *
v_a
,

1326 
vîãx_°ru˘
 *
v_b
, vîãx_°ru˘ *
v_c
)

1328 
	`£tup_•™s_¥ﬁogue
(
no
);

1330 
s32
 
y_b
 = 
v_b
->
y
;

1331 
s64
 
edge_Æt
;

1332 
s32
 
edge_dx_dy_Æt
;

1333 
u32
 
edge_shi·_Æt
;

1335 
s32
 
middÀ_y
 = 
y_a
;

1336 
s32
 
height_mö‹_a
 = 
y_a
 - 
y_b
;

1337 
s32
 
height_mö‹_b
 = 
y_c
 - 
y_a
;

1338 
s32
 
height_maj‹
 = 
y_c
 - 
y_b
;

1340 
vec_2x64s
 
edges_xy_b
;

1341 
vec_2x32s
 
edges_dx_dy_b
;

1342 
vec_2x32u
 
edge_shi·s_b
;

1344 
vec_2x32s
 
height_ö¸emít
;

1346 
x_°¨ts
.
e
[0] = 
x_a
;

1347 
x_°¨ts
.
e
[1] = 
x_c
;

1348 
	`dup_2x32b
(
x_íds
, 
x_b
);

1350 
	`compuã_edge_dñè_x3
(
x_a
, 
height_mö‹_a
, 
height_maj‹
);

1352 
height_ö¸emít
.
e
[0] = 0;

1353 
height_ö¸emít
.
e
[1] = 
height_mö‹_b
;

1355 
	`mœ_l⁄g_2x32b
(
edges_xy
, 
edges_dx_dy
, 
height_ö¸emít
);

1357 
edges_xy_b
.
e
[0] = 
edge_Æt
;

1358 
edges_xy_b
.
e
[1] = 
edges_xy
.e[1];

1360 
edge_shi·s_b
 = 
edge_shi·s
;

1361 
edge_shi·s_b
.
e
[0] = 
edge_shi·_Æt
;

1363 
	`√g_2x32b
(
edges_dx_dy_b
, 
edges_dx_dy
);

1364 
edges_dx_dy_b
.
e
[0] = 
edge_dx_dy_Æt
;

1366 
y_a
--;

1368 if(
y_b
 < 
psx_gpu
->
võwp‹t_°¨t_y
)

1369 
height_mö‹_a
 -
psx_gpu
->
võwp‹t_°¨t_y
 - 
y_b
;

1371 
˛ù
 = 
y_a
 - 
psx_gpu
->
võwp‹t_íd_y
;

1372 if(
˛ù
 > 0)

1374 
height_mö‹_a
 -
˛ù
;

1375 
y_a
 -
˛ù
;

1376 
	`£tup_•™s_˛ù
(
de¸emít
, 
no
);

1379 
	`£tup_•™s_¥ﬁogue_b
();

1381 if(
height_mö‹_a
 > 0)

1383 
y_x4
.
e
[0] = 
y_a
;

1384 
y_x4
.
e
[1] = 
y_a
 - 1;

1385 
y_x4
.
e
[2] = 
y_a
 - 2;

1386 
y_x4
.
e
[3] = 
y_a
 - 3;

1387 
	`add_wide_2x32b
(
edges_xy
,Édges_xy, 
edges_dx_dy
);

1388 
	`£tup_•™s_adju°_edges_Æã∫©e_no
(
ödex_À·
, 
ödex_right
);

1389 
	`£tup_•™s_adju°_öãΩﬁ™ts_up
();

1391 
psx_gpu
->
num_•™s
 = 
height_mö‹_a
;

1392 
height_mö‹_a
 > 0)

1394 
	`£tup_•™s_£t_x4
(
n⁄e
, 
up
, 
no
);

1395 
height_mö‹_a
 -= 4;

1398 
•™_edge_d©a
 +
height_mö‹_a
;

1399 
•™_uvrg_off£t
 +
height_mö‹_a
;

1400 
•™_b_off£t
 +
height_mö‹_a
;

1403 
edges_xy
 = 
edges_xy_b
;

1404 
edges_dx_dy
 = 
edges_dx_dy_b
;

1405 
edge_shi·s
 = 
edge_shi·s_b
;

1407 
uvrg
 = 
psx_gpu
->uvrg;

1408 
b
 = 
psx_gpu
->b;

1410 
y_a
 = 
middÀ_y
;

1412 if(
y_c
 > 
psx_gpu
->
võwp‹t_íd_y
)

1413 
height_mö‹_b
 -
y_c
 - 
psx_gpu
->
võwp‹t_íd_y
 - 1;

1415 
˛ù
 = 
psx_gpu
->
võwp‹t_°¨t_y
 - 
y_a
;

1416 if(
˛ù
 > 0)

1418 
height_mö‹_b
 -
˛ù
;

1419 
y_a
 +
˛ù
;

1420 
	`£tup_•™s_˛ù
(
ö¸emít
, 
no
);

1423 if(
height_mö‹_b
 > 0)

1425 
y_x4
.
e
[0] = 
y_a
;

1426 
y_x4
.
e
[1] = 
y_a
 + 1;

1427 
y_x4
.
e
[2] = 
y_a
 + 2;

1428 
y_x4
.
e
[3] = 
y_a
 + 3;

1429 
	`£tup_•™s_adju°_edges_Æã∫©e_no
(
ödex_À·
, 
ödex_right
);

1432 if(
psx_gpu
->
num_•™s
 + 
height_mö‹_b
 =
MAX_SPANS
)

1433 
height_mö‹_b
 &= ~3;

1435 
psx_gpu
->
num_•™s
 +
height_mö‹_b
;

1436 
height_mö‹_b
 > 0)

1438 
	`£tup_•™s_£t_x4
(
n⁄e
, 
down
, 
no
);

1439 
height_mö‹_b
 -= 4;

1443 
À·_•lô_åüngÀs
++;

1444 
	}
}

1449 
	#dôhî_èbÀ_íåy_n‹mÆ
(
vÆue
) \

1450 (
vÆue
) \

1451 

	)

1453 
	#£tup_blocks_lﬂd_msb_mask_ödúe˘
() \

1454 

	)

1455 
	#£tup_blocks_lﬂd_msb_mask_dúe˘
() \

1456 
vec_8x16u
 
msb_mask
; \

1457 
	`dup_8x16b
(
msb_mask
, 
psx_gpu
->
mask_msb
); \

1458 

	)

1460 
	#£tup_blocks_v¨übÀs_shaded_ãxtuªd
(
èrgë
) \

1461 
vec_4x32u
 
u_block
; \

1462 
vec_4x32u
 
v_block
; \

1463 
vec_4x32u
 
r_block
; \

1464 
vec_4x32u
 
g_block
; \

1465 
vec_4x32u
 
b_block
; \

1466 
vec_4x32u
 
uvrg_dx
 = 
psx_gpu
->uvrg_dx; \

1467 
vec_4x32u
 
uvrg_dx4
; \

1468 
vec_4x32u
 
uvrg_dx8
; \

1469 
vec_4x32u
 
uvrg
; \

1470 
u32
 
b_dx
 = 
psx_gpu
->
b_block_•™
.
e
[1]; \

1471 
u32
 
b_dx4
 = 
b_dx
 << 2; \

1472 
u32
 
b_dx8
 = 
b_dx
 << 3; \

1473 
u32
 
b
; \

1475 
vec_16x8u
 
ãxtuª_mask
; \

1476 
	`shl_4x32b
(
uvrg_dx4
, 
uvrg_dx
, 2); \

1477 
	`shl_4x32b
(
uvrg_dx8
, 
uvrg_dx
, 3); \

1478 
	`dup_8x8b
(
ãxtuª_mask
.
low
, 
psx_gpu
->
ãxtuª_mask_width
); \

1479 
	`dup_8x8b
(
ãxtuª_mask
.
high
, 
psx_gpu
->
ãxtuª_mask_height
) \

1480 

	)

1481 
	#£tup_blocks_v¨übÀs_shaded_u¡extuªd
(
èrgë
) \

1482 
vec_4x32u
 
r_block
; \

1483 
vec_4x32u
 
g_block
; \

1484 
vec_4x32u
 
b_block
; \

1485 
vec_4x32u
 
rgb_dx
; \

1486 
vec_4x32u
 
rgb_dx4
; \

1487 
vec_4x32u
 
rgb_dx8
; \

1488 
vec_4x32u
 
rgb
; \

1490 
vec_8x8u
 
d64_0x07
; \

1491 
vec_8x8u
 
d64_1
; \

1492 
vec_8x8u
 
d64_4
; \

1493 
vec_8x8u
 
d64_128
; \

1495 
	`dup_8x8b
(
d64_0x07
, 0x07); \

1496 
	`dup_8x8b
(
d64_1
, 1); \

1497 
	`dup_8x8b
(
d64_4
, 4); \

1498 
	`dup_8x8b
(
d64_128
, 128); \

1500 
rgb_dx
.
low
 = 
psx_gpu
->
uvrg_dx
.
high
; \

1501 
rgb_dx
.
e
[2] = 
psx_gpu
->
b_block_•™
.e[1]; \

1502 
	`shl_4x32b
(
rgb_dx4
, 
rgb_dx
, 2); \

1503 
	`shl_4x32b
(
rgb_dx8
, 
rgb_dx
, 3) \

1504 

	)

1505 
	#£tup_blocks_v¨übÀs_unshaded_ãxtuªd
(
èrgë
) \

1506 
vec_4x32u
 
u_block
; \

1507 
vec_4x32u
 
v_block
; \

1508 
vec_2x32u
 
uv_dx
 = 
psx_gpu
->
uvrg_dx
.
low
; \

1509 
vec_2x32u
 
uv_dx4
; \

1510 
vec_2x32u
 
uv_dx8
; \

1511 
vec_2x32u
 
uv
 = 
psx_gpu
->
uvrg
.
low
; \

1513 
vec_16x8u
 
ãxtuª_mask
; \

1514 
	`shl_2x32b
(
uv_dx4
, 
uv_dx
, 2); \

1515 
	`shl_2x32b
(
uv_dx8
, 
uv_dx
, 3); \

1516 
	`dup_8x8b
(
ãxtuª_mask
.
low
, 
psx_gpu
->
ãxtuª_mask_width
); \

1517 
	`dup_8x8b
(
ãxtuª_mask
.
high
, 
psx_gpu
->
ãxtuª_mask_height
) \

1518 

	)

1520 
	#£tup_blocks_v¨übÀs_unshaded_u¡extuªd_dúe˘
() \

1521 
	`‹_8x16b
(
cﬁ‹s
, cﬁ‹s, 
msb_mask
) \

1522 

	)

1523 
	#£tup_blocks_v¨übÀs_unshaded_u¡extuªd_ödúe˘
() \

1524 

	)

1525 
	#£tup_blocks_v¨übÀs_unshaded_u¡extuªd
(
èrgë
) \

1526 
u32
 
cﬁ‹
 = 
psx_gpu
->
åüngÀ_cﬁ‹
; \

1527 
vec_8x16u
 
cﬁ‹s
; \

1529 
u32
 
cﬁ‹_r
 = 
cﬁ‹
 & 0xFF; \

1530 
u32
 
cﬁ‹_g
 = (
cﬁ‹
 >> 8) & 0xFF; \

1531 
u32
 
cﬁ‹_b
 = (
cﬁ‹
 >> 16) & 0xFF; \

1533 
cﬁ‹
 = (
cﬁ‹_r
 >> 3Ë| ((
cﬁ‹_g
 >> 3) << 5) | \

1534 ((
cﬁ‹_b
 >> 3) << 10); \

1535 
	`dup_8x16b
(
cﬁ‹s
, 
cﬁ‹
); \

1536 
£tup_blocks_v¨übÀs_unshaded_u¡extuªd_
##
	`èrgë
() \

1537 

	)

1538 
	#£tup_blocks_•™_öôülize_dôhîed_ãxtuªd
() \

1539 
vec_8x16u
 
dôhî_off£ts
; \

1540 
	`shl_l⁄g_8x8b
(
dôhî_off£ts
, 
dôhî_off£ts_sh‹t
, 4) \

1541 

	)

1542 
	#£tup_blocks_•™_öôülize_dôhîed_u¡extuªd
() \

1543 
vec_8x8u
 
dôhî_off£ts
; \

1544 
	`add_8x8b
(
dôhî_off£ts
, 
dôhî_off£ts_sh‹t
, 
d64_4
) \

1545 

	)

1546 
	#£tup_blocks_•™_öôülize_dôhîed
(
ãxturög
) \

1547 
u32
 
dôhî_row
 = 
psx_gpu
->
dôhî_èbÀ
[
y
 & 0x3]; \

1548 
u32
 
dôhî_shi·
 = (
•™_edge_d©a
->
À·_x
 & 0x3) * 8; \

1549 
vec_8x8s
 
dôhî_off£ts_sh‹t
; \

1551 
dôhî_row
 = \

1552 (
dôhî_row
 >> 
dôhî_shi·
) | (dither_row << (32 - dither_shift)); \

1553 
	`dup_2x32b
(
	`ve˘‹_ˇ°
(
vec_2x32u
, 
dôhî_off£ts_sh‹t
), 
dôhî_row
); \

1554 
£tup_blocks_•™_öôülize_dôhîed_
##
	`ãxturög
() \

1555 

	)

1556 
	#£tup_blocks_•™_öôülize_undôhîed
(
ãxturög
) \

1557 

	)

1559 
	#£tup_blocks_•™_öôülize_shaded_ãxtuªd
() \

1561 
vec_4x32u
 
block_•™
; \

1562 
u32
 
off£t
 = 
•™_edge_d©a
->
À·_x
; \

1564 
uvrg
 = *
•™_uvrg_off£t
; \

1565 
	`mœ_sˇœr_4x32b
(
uvrg
, 
uvrg_dx
, 
off£t
); \

1566 
b
 = *
•™_b_off£t
; \

1567 
b
 +
b_dx
 * 
off£t
; \

1569 
	`dup_4x32b
(
u_block
, 
uvrg
.
e
[0]); \

1570 
	`dup_4x32b
(
v_block
, 
uvrg
.
e
[1]); \

1571 
	`dup_4x32b
(
r_block
, 
uvrg
.
e
[2]); \

1572 
	`dup_4x32b
(
g_block
, 
uvrg
.
e
[3]); \

1573 
	`dup_4x32b
(
b_block
, 
b
); \

1575 
block_•™
 = 
psx_gpu
->
u_block_•™
; \

1576 
	`add_4x32b
(
u_block
, u_block, 
block_•™
); \

1577 
block_•™
 = 
psx_gpu
->
v_block_•™
; \

1578 
	`add_4x32b
(
v_block
, v_block, 
block_•™
); \

1579 
block_•™
 = 
psx_gpu
->
r_block_•™
; \

1580 
	`add_4x32b
(
r_block
,Ñ_block, 
block_•™
); \

1581 
block_•™
 = 
psx_gpu
->
g_block_•™
; \

1582 
	`add_4x32b
(
g_block
, g_block, 
block_•™
); \

1583 
block_•™
 = 
psx_gpu
->
b_block_•™
; \

1584 
	`add_4x32b
(
b_block
, b_block, 
block_•™
); \

1585 }

	)

1587 
	#£tup_blocks_•™_öôülize_shaded_u¡extuªd
() \

1589 
vec_4x32u
 
block_•™
; \

1590 
u32
 
off£t
 = 
•™_edge_d©a
->
À·_x
; \

1592 
rgb
.
low
 = 
•™_uvrg_off£t
->
high
; \

1593 
rgb
.
high
.
e
[0] = *
•™_b_off£t
; \

1594 
	`mœ_sˇœr_4x32b
(
rgb
, 
rgb_dx
, 
off£t
); \

1596 
	`dup_4x32b
(
r_block
, 
rgb
.
e
[0]); \

1597 
	`dup_4x32b
(
g_block
, 
rgb
.
e
[1]); \

1598 
	`dup_4x32b
(
b_block
, 
rgb
.
e
[2]); \

1600 
block_•™
 = 
psx_gpu
->
r_block_•™
; \

1601 
	`add_4x32b
(
r_block
,Ñ_block, 
block_•™
); \

1602 
block_•™
 = 
psx_gpu
->
g_block_•™
; \

1603 
	`add_4x32b
(
g_block
, g_block, 
block_•™
); \

1604 
block_•™
 = 
psx_gpu
->
b_block_•™
; \

1605 
	`add_4x32b
(
b_block
, b_block, 
block_•™
); \

1607 

	)

1608 
	#£tup_blocks_•™_öôülize_unshaded_ãxtuªd
() \

1610 
vec_4x32u
 
block_•™
; \

1611 
u32
 
off£t
 = 
•™_edge_d©a
->
À·_x
; \

1613 
uv
 = 
•™_uvrg_off£t
->
low
; \

1614 
	`mœ_sˇœr_2x32b
(
uv
, 
uv_dx
, 
off£t
); \

1616 
	`dup_4x32b
(
u_block
, 
uv
.
e
[0]); \

1617 
	`dup_4x32b
(
v_block
, 
uv
.
e
[1]); \

1619 
block_•™
 = 
psx_gpu
->
u_block_•™
; \

1620 
	`add_4x32b
(
u_block
, u_block, 
block_•™
); \

1621 
block_•™
 = 
psx_gpu
->
v_block_•™
; \

1622 
	`add_4x32b
(
v_block
, v_block, 
block_•™
); \

1624 

	)

1625 
	#£tup_blocks_•™_öôülize_unshaded_u¡extuªd
() \

1626 

	)

1628 
	#£tup_blocks_ãxtuª_swizzÀd
() \

1630 
vec_8x8u
 
u_ßved
 = 
u
; \

1631 
	`¶i_8x8b
(
u
, 
v
, 4); \

1632 
	`§i_8x8b
(
v
, 
u_ßved
, 4); \

1634 

	)

1635 
	#£tup_blocks_ãxtuª_unswizzÀd
() \

1636 

	)

1637 
	#£tup_blocks_°‹e_shaded_ãxtuªd
(
swizzlög
, 
dôhîög
, 
èrgë
, \

1638 
edge_ty≥
) \

1640 
vec_8x16u
 
u_whﬁe
; \

1641 
vec_8x16u
 
v_whﬁe
; \

1642 
vec_8x16u
 
r_whﬁe
; \

1643 
vec_8x16u
 
g_whﬁe
; \

1644 
vec_8x16u
 
b_whﬁe
; \

1646 
vec_8x8u
 
u
; \

1647 
vec_8x8u
 
v
; \

1648 
vec_8x8u
 
r
; \

1649 
vec_8x8u
 
g
; \

1650 
vec_8x8u
 
b
; \

1651 
vec_8x16u
 
uv
; \

1653 
vec_4x32u
 
dx4
; \

1654 
vec_4x32u
 
dx8
; \

1656 
	`shr_«ºow_4x32b
(
u_whﬁe
.
low
, 
u_block
, 16); \

1657 
	`shr_«ºow_4x32b
(
v_whﬁe
.
low
, 
v_block
, 16); \

1658 
	`shr_«ºow_4x32b
(
r_whﬁe
.
low
, 
r_block
, 16); \

1659 
	`shr_«ºow_4x32b
(
g_whﬁe
.
low
, 
g_block
, 16); \

1660 
	`shr_«ºow_4x32b
(
b_whﬁe
.
low
, 
b_block
, 16); \

1662 
	`dup_4x32b
(
dx4
, 
uvrg_dx4
.
e
[0]); \

1663 
	`add_high_«ºow_4x32b
(
u_whﬁe
.
high
, 
u_block
, 
dx4
); \

1664 
	`dup_4x32b
(
dx4
, 
uvrg_dx4
.
e
[1]); \

1665 
	`add_high_«ºow_4x32b
(
v_whﬁe
.
high
, 
v_block
, 
dx4
); \

1666 
	`dup_4x32b
(
dx4
, 
uvrg_dx4
.
e
[2]); \

1667 
	`add_high_«ºow_4x32b
(
r_whﬁe
.
high
, 
r_block
, 
dx4
); \

1668 
	`dup_4x32b
(
dx4
, 
uvrg_dx4
.
e
[3]); \

1669 
	`add_high_«ºow_4x32b
(
g_whﬁe
.
high
, 
g_block
, 
dx4
); \

1670 
	`dup_4x32b
(
dx4
, 
b_dx4
); \

1671 
	`add_high_«ºow_4x32b
(
b_whﬁe
.
high
, 
b_block
, 
dx4
); \

1673 
	`mov_«ºow_8x16b
(
u
, 
u_whﬁe
); \

1674 
	`mov_«ºow_8x16b
(
v
, 
v_whﬁe
); \

1675 
	`mov_«ºow_8x16b
(
r
, 
r_whﬁe
); \

1676 
	`mov_«ºow_8x16b
(
g
, 
g_whﬁe
); \

1677 
	`mov_«ºow_8x16b
(
b
, 
b_whﬁe
); \

1679 
	`dup_4x32b
(
dx8
, 
uvrg_dx8
.
e
[0]); \

1680 
	`add_4x32b
(
u_block
, u_block, 
dx8
); \

1681 
	`dup_4x32b
(
dx8
, 
uvrg_dx8
.
e
[1]); \

1682 
	`add_4x32b
(
v_block
, v_block, 
dx8
); \

1683 
	`dup_4x32b
(
dx8
, 
uvrg_dx8
.
e
[2]); \

1684 
	`add_4x32b
(
r_block
,Ñ_block, 
dx8
); \

1685 
	`dup_4x32b
(
dx8
, 
uvrg_dx8
.
e
[3]); \

1686 
	`add_4x32b
(
g_block
, g_block, 
dx8
); \

1687 
	`dup_4x32b
(
dx8
, 
b_dx8
); \

1688 
	`add_4x32b
(
b_block
, b_block, 
dx8
); \

1690 
	`™d_8x8b
(
u
, u, 
ãxtuª_mask
.
low
); \

1691 
	`™d_8x8b
(
v
, v, 
ãxtuª_mask
.
high
); \

1692 
£tup_blocks_ãxtuª_
##
	`swizzlög
(); \

1694 
	`zù_8x16b
(
uv
, 
u
, 
v
); \

1695 
block
->
uv
 = uv; \

1696 
block
->
r
 =Ñ; \

1697 
block
->
g
 = g; \

1698 
block
->
b
 = b; \

1699 
block
->
dôhî_off£ts
 = 
	`ve˘‹_ˇ°
(
vec_8x16u
, dither_offsets); \

1700 
block
->
fb_±r
 = fb_ptr; \

1702 

	)

1703 
	#£tup_blocks_°‹e_unshaded_ãxtuªd
(
swizzlög
, 
dôhîög
, 
èrgë
, \

1704 
edge_ty≥
) \

1706 
vec_8x16u
 
u_whﬁe
; \

1707 
vec_8x16u
 
v_whﬁe
; \

1709 
vec_8x8u
 
u
; \

1710 
vec_8x8u
 
v
; \

1711 
vec_8x16u
 
uv
; \

1713 
vec_4x32u
 
dx4
; \

1714 
vec_4x32u
 
dx8
; \

1716 
	`shr_«ºow_4x32b
(
u_whﬁe
.
low
, 
u_block
, 16); \

1717 
	`shr_«ºow_4x32b
(
v_whﬁe
.
low
, 
v_block
, 16); \

1719 
	`dup_4x32b
(
dx4
, 
uv_dx4
.
e
[0]); \

1720 
	`add_high_«ºow_4x32b
(
u_whﬁe
.
high
, 
u_block
, 
dx4
); \

1721 
	`dup_4x32b
(
dx4
, 
uv_dx4
.
e
[1]); \

1722 
	`add_high_«ºow_4x32b
(
v_whﬁe
.
high
, 
v_block
, 
dx4
); \

1724 
	`mov_«ºow_8x16b
(
u
, 
u_whﬁe
); \

1725 
	`mov_«ºow_8x16b
(
v
, 
v_whﬁe
); \

1727 
	`dup_4x32b
(
dx8
, 
uv_dx8
.
e
[0]); \

1728 
	`add_4x32b
(
u_block
, u_block, 
dx8
); \

1729 
	`dup_4x32b
(
dx8
, 
uv_dx8
.
e
[1]); \

1730 
	`add_4x32b
(
v_block
, v_block, 
dx8
); \

1732 
	`™d_8x8b
(
u
, u, 
ãxtuª_mask
.
low
); \

1733 
	`™d_8x8b
(
v
, v, 
ãxtuª_mask
.
high
); \

1734 
£tup_blocks_ãxtuª_
##
	`swizzlög
(); \

1736 
	`zù_8x16b
(
uv
, 
u
, 
v
); \

1737 
block
->
uv
 = uv; \

1738 
block
->
dôhî_off£ts
 = 
	`ve˘‹_ˇ°
(
vec_8x16u
, dither_offsets); \

1739 
block
->
fb_±r
 = fb_ptr; \

1741 

	)

1742 
	#£tup_blocks_°‹e_shaded_u¡extuªd_dôhîed
() \

1743 
	`addq_8x8b
(
r
,Ñ, 
dôhî_off£ts
); \

1744 
	`addq_8x8b
(
g
, g, 
dôhî_off£ts
); \

1745 
	`addq_8x8b
(
b
, b, 
dôhî_off£ts
); \

1747 
	`subq_8x8b
(
r
,Ñ, 
d64_4
); \

1748 
	`subq_8x8b
(
g
, g, 
d64_4
); \

1749 
	`subq_8x8b
(
b
, b, 
d64_4
) \

1750 

	)

1751 
	#£tup_blocks_°‹e_shaded_u¡extuªd_undôhîed
() \

1752 

	)

1754 
	#£tup_blocks_°‹e_u¡extuªd_pixñs_ödúe˘_fuŒ
(
_pixñs
) \

1755 
block
->
pixñs
 = 
_pixñs
; \

1756 
block
->
fb_±r
 = fb_ptr \

1757 

	)

1758 
	#£tup_blocks_°‹e_u¡extuªd_pixñs_ödúe˘_edge
(
_pixñs
) \

1759 
block
->
pixñs
 = 
_pixñs
; \

1760 
block
->
fb_±r
 = fb_ptr \

1761 

	)

1762 
	#£tup_blocks_°‹e_shaded_u¡extuªd_£ed_pixñs_ödúe˘
() \

1763 
	`mul_l⁄g_8x8b
(
pixñs
, 
r
, 
d64_1
) \

1764 

	)

1766 
	#£tup_blocks_°‹e_u¡extuªd_pixñs_dúe˘_fuŒ
(
_pixñs
) \

1767 
	`°‹e_8x16b
(
_pixñs
, 
fb_±r
) \

1768 

	)

1769 
	#£tup_blocks_°‹e_u¡extuªd_pixñs_dúe˘_edge
(
_pixñs
) \

1771 
vec_8x16u
 
fb_pixñs
; \

1772 
vec_8x16u
 
døw_mask
; \

1773 
vec_8x16u
 
ã°_mask
 = 
psx_gpu
->test_mask; \

1775 
	`lﬂd_8x16b
(
fb_pixñs
, 
fb_±r
); \

1776 
	`dup_8x16b
(
døw_mask
, 
•™_edge_d©a
->
right_mask
); \

1777 
	`t°_8x16b
(
døw_mask
, døw_mask, 
ã°_mask
); \

1778 
	`bif_8x16b
(
fb_pixñs
, 
_pixñs
, 
døw_mask
); \

1779 
	`°‹e_8x16b
(
fb_pixñs
, 
fb_±r
); \

1781 

	)

1782 
	#£tup_blocks_°‹e_shaded_u¡extuªd_£ed_pixñs_dúe˘
() \

1783 
pixñs
 = 
msb_mask
; \

1784 
	`mœ_l⁄g_8x8b
(
pixñs
, 
r
, 
d64_1
) \

1785 

	)

1787 
	#£tup_blocks_°‹e_shaded_u¡extuªd
(
swizzlög
, 
dôhîög
, 
èrgë
, \

1788 
edge_ty≥
) \

1790 
vec_8x16u
 
r_whﬁe
; \

1791 
vec_8x16u
 
g_whﬁe
; \

1792 
vec_8x16u
 
b_whﬁe
; \

1794 
vec_8x8u
 
r
; \

1795 
vec_8x8u
 
g
; \

1796 
vec_8x8u
 
b
; \

1798 
vec_4x32u
 
dx4
; \

1799 
vec_4x32u
 
dx8
; \

1801 
vec_8x16u
 
pixñs
; \

1803 
	`shr_«ºow_4x32b
(
r_whﬁe
.
low
, 
r_block
, 16); \

1804 
	`shr_«ºow_4x32b
(
g_whﬁe
.
low
, 
g_block
, 16); \

1805 
	`shr_«ºow_4x32b
(
b_whﬁe
.
low
, 
b_block
, 16); \

1807 
	`dup_4x32b
(
dx4
, 
rgb_dx4
.
e
[0]); \

1808 
	`add_high_«ºow_4x32b
(
r_whﬁe
.
high
, 
r_block
, 
dx4
); \

1809 
	`dup_4x32b
(
dx4
, 
rgb_dx4
.
e
[1]); \

1810 
	`add_high_«ºow_4x32b
(
g_whﬁe
.
high
, 
g_block
, 
dx4
); \

1811 
	`dup_4x32b
(
dx4
, 
rgb_dx4
.
e
[2]); \

1812 
	`add_high_«ºow_4x32b
(
b_whﬁe
.
high
, 
b_block
, 
dx4
); \

1814 
	`mov_«ºow_8x16b
(
r
, 
r_whﬁe
); \

1815 
	`mov_«ºow_8x16b
(
g
, 
g_whﬁe
); \

1816 
	`mov_«ºow_8x16b
(
b
, 
b_whﬁe
); \

1818 
	`dup_4x32b
(
dx8
, 
rgb_dx8
.
e
[0]); \

1819 
	`add_4x32b
(
r_block
,Ñ_block, 
dx8
); \

1820 
	`dup_4x32b
(
dx8
, 
rgb_dx8
.
e
[1]); \

1821 
	`add_4x32b
(
g_block
, g_block, 
dx8
); \

1822 
	`dup_4x32b
(
dx8
, 
rgb_dx8
.
e
[2]); \

1823 
	`add_4x32b
(
b_block
, b_block, 
dx8
); \

1825 
£tup_blocks_°‹e_shaded_u¡extuªd_
##
	`dôhîög
(); \

1827 
	`shr_8x8b
(
r
,Ñ, 3); \

1828 
	`bic_8x8b
(
g
, g, 
d64_0x07
); \

1829 
	`bic_8x8b
(
b
, b, 
d64_0x07
); \

1831 
£tup_blocks_°‹e_shaded_u¡extuªd_£ed_pixñs_
##
	`èrgë
(); \

1832 
	`mœ_l⁄g_8x8b
(
pixñs
, 
g
, 
d64_4
); \

1833 
	`mœ_l⁄g_8x8b
(
pixñs
, 
b
, 
d64_128
) \

1835 
£tup_blocks_°‹e_u¡extuªd_pixñs_
##
èrgë
##
_
##
	`edge_ty≥
(
pixñs
); \

1837 

	)

1838 
	#£tup_blocks_°‹e_unshaded_u¡extuªd
(
swizzlög
, 
dôhîög
, 
èrgë
, \

1839 
edge_ty≥
) \

1840 
£tup_blocks_°‹e_u¡extuªd_pixñs_
##
èrgë
##
_
##
	`edge_ty≥
(
cﬁ‹s
) \

1841 

	)

1843 
	#£tup_blocks_°‹e_døw_mask_ãxtuªd_ödúe˘
(
_block
, 
bôs
) \

1844 (
_block
)->
døw_mask_bôs
 = 
bôs
 \

1845 

	)

1846 
	#£tup_blocks_°‹e_døw_mask_u¡extuªd_ödúe˘
(
_block
, 
bôs
) \

1848 
vec_8x16u
 
bôs_mask
; \

1849 
vec_8x16u
 
ã°_mask
 = 
psx_gpu
->test_mask; \

1850 
	`dup_8x16b
(
bôs_mask
, 
bôs
); \

1851 
	`t°_8x16b
(
bôs_mask
, bôs_mask, 
ã°_mask
); \

1852 (
_block
)->
døw_mask
 = 
bôs_mask
; \

1854 

	)

1855 
	#£tup_blocks_°‹e_døw_mask_u¡extuªd_dúe˘
(
_block
, 
bôs
) \

1856 

	)

1858 
	#£tup_blocks_add_blocks_ödúe˘
() \

1859 
num_blocks
 +
•™_num_blocks
; \

1861 if(
num_blocks
 > 
MAX_BLOCKS
) \

1863 
psx_gpu
->
num_blocks
 =Çum_block†- 
•™_num_blocks
; \

1864 
	`Êush_ªndî_block_buf„r
(
psx_gpu
); \

1865 
num_blocks
 = 
•™_num_blocks
; \

1866 
block
 = 
psx_gpu
->
blocks
; \

1868 

	)

1869 
	#£tup_blocks_add_blocks_dúe˘
() \

1870 
ãxñ_blocks_u¡extuªd
 +
•™_num_blocks
; \

1871 
•™_pixñ_blocks
 +
•™_num_blocks
 \

1872 

	)

1874 
	#£tup_blocks_buûdî
(
shadög
, 
ãxturög
, 
dôhîög
, 
sw
, 
èrgë
) \

1875 
£tup_blocks_
##
shadög
##
_
##
ãxturög
##_##
dôhîög
##_##
sw
##_##
	`èrgë
( \

1876 
psx_gpu_°ru˘
 *
psx_gpu
) \

1878 
£tup_blocks_lﬂd_msb_mask_
##
	`èrgë
(); \

1879 
£tup_blocks_v¨übÀs_
##
shadög
##
_
##
	`ãxturög
(
èrgë
); \

1881 
edge_d©a_°ru˘
 *
•™_edge_d©a
 = 
psx_gpu
->span_edge_data; \

1882 
vec_4x32u
 *
•™_uvrg_off£t
 = 
psx_gpu
->span_uvrg_offset; \

1883 
u32
 *
•™_b_off£t
 = 
psx_gpu
->span_b_offset; \

1885 
block_°ru˘
 *
block
 = 
psx_gpu
->
blocks
 +Ösx_gpu->
num_blocks
; \

1887 
u32
 
num_•™s
 = 
psx_gpu
->num_spans; \

1889 
u16
 *
fb_±r
; \

1890 
u32
 
y
; \

1892 
u32
 
num_blocks
 = 
psx_gpu
->num_blocks; \

1893 
u32
 
•™_num_blocks
; \

1895 
num_•™s
) \

1897 
•™_num_blocks
 = 
•™_edge_d©a
->
num_blocks
; \

1898 if(
•™_num_blocks
) \

1900 
y
 = 
•™_edge_d©a
->y; \

1901 
fb_±r
 = 
psx_gpu
->
vøm_out_±r
 + 
•™_edge_d©a
->
À·_x
 + (
y
 * 1024); \

1903 
£tup_blocks_•™_öôülize_
##
shadög
##
_
##
	`ãxturög
(); \

1904 
£tup_blocks_•™_öôülize_
##
	`dôhîög
(
ãxturög
); \

1906 
£tup_blocks_add_blocks_
##
	`èrgë
(); \

1908 
s32
 
pixñ_•™
 = 
•™_num_blocks
 * 8; \

1909 
pixñ_•™
 -
	`__buûtö_p›cou¡
(
•™_edge_d©a
->
right_mask
 & 0xFF); \

1910 
•™_pixñs
 +
pixñ_•™
; \

1912 
•™_num_blocks
--; \

1913 
•™_num_blocks
) \

1915 
£tup_blocks_°‹e_
##
shadög
##
_
##
	`ãxturög
(
sw
, 
dôhîög
, 
èrgë
, \

1916 
fuŒ
); \

1917 
£tup_blocks_°‹e_døw_mask_
##
ãxturög
##
_
##
	`èrgë
(
block
, 0x00); \

1919 
fb_±r
 += 8; \

1920 
block
++; \

1921 
•™_num_blocks
--; \

1924 
£tup_blocks_°‹e_
##
shadög
##
_
##
	`ãxturög
(
sw
, 
dôhîög
, 
èrgë
, 
edge
); \

1925 
£tup_blocks_°‹e_døw_mask_
##
ãxturög
##
_
##
	`èrgë
(
block
, \

1926 
•™_edge_d©a
->
right_mask
); \

1928 
block
++; \

1932 
zîo_block_•™s
++; \

1935 
num_•™s
--; \

1936 
•™_edge_d©a
++; \

1937 
•™_uvrg_off£t
++; \

1938 
•™_b_off£t
++; \

1941 
psx_gpu
->
num_blocks
 =Çum_blocks; \

1943 

	)

1944 
£tup_blocks_shaded_ãxtuªd_dôhîed_unswizzÀd_ödúe˘
(
psx_gpu_°ru˘


1945 *
psx_gpu
);

1947 
£tup_blocks_shaded_u¡extuªd_dôhîed_unswizzÀd_ödúe˘
(
psx_gpu_°ru˘


1948 *
psx_gpu
);

1949 
£tup_blocks_shaded_u¡extuªd_undôhîed_unswizzÀd_ödúe˘
(

1950 
psx_gpu_°ru˘
 *
psx_gpu
);

1951 
£tup_blocks_shaded_u¡extuªd_dôhîed_unswizzÀd_dúe˘
(
psx_gpu_°ru˘


1952 *
psx_gpu
);

1953 
£tup_blocks_shaded_u¡extuªd_undôhîed_unswizzÀd_dúe˘
(

1954 
psx_gpu_°ru˘
 *
psx_gpu
);

1956 
£tup_blocks_unshaded_ãxtuªd_dôhîed_unswizzÀd_ödúe˘
(
psx_gpu_°ru˘


1957 *
psx_gpu
);

1958 
£tup_blocks_unshaded_u¡extuªd_undôhîed_unswizzÀd_ödúe˘
(

1959 
psx_gpu_°ru˘
 *
psx_gpu
);

1960 
£tup_blocks_unshaded_u¡extuªd_undôhîed_unswizzÀd_dúe˘
(

1961 
psx_gpu_°ru˘
 *
psx_gpu
);

1963 
£tup_blocks_shaded_ãxtuªd_dôhîed_swizzÀd_ödúe˘
(
psx_gpu_°ru˘


1964 *
psx_gpu
);

1965 
£tup_blocks_unshaded_ãxtuªd_dôhîed_swizzÀd_ödúe˘
(
psx_gpu_°ru˘


1966 *
psx_gpu
);

1971 #i‚de‡
NEON_BUILD


1973 
£tup_blocks_buûdî
(
shaded
, 
ãxtuªd
, 
dôhîed
, 
swizzÀd
, 
ödúe˘
);

1974 
£tup_blocks_buûdî
(
shaded
, 
ãxtuªd
, 
dôhîed
, 
unswizzÀd
, 
ödúe˘
);

1976 
£tup_blocks_buûdî
(
unshaded
, 
ãxtuªd
, 
dôhîed
, 
unswizzÀd
, 
ödúe˘
);

1977 
£tup_blocks_buûdî
(
unshaded
, 
ãxtuªd
, 
dôhîed
, 
swizzÀd
, 
ödúe˘
);

1979 
£tup_blocks_buûdî
(
shaded
, 
u¡extuªd
, 
undôhîed
, 
unswizzÀd
, 
ödúe˘
);

1980 
£tup_blocks_buûdî
(
shaded
, 
u¡extuªd
, 
dôhîed
, 
unswizzÀd
, 
ödúe˘
);

1981 
£tup_blocks_buûdî
(
shaded
, 
u¡extuªd
, 
undôhîed
, 
unswizzÀd
, 
dúe˘
);

1982 
£tup_blocks_buûdî
(
shaded
, 
u¡extuªd
, 
dôhîed
, 
unswizzÀd
, 
dúe˘
);

1984 
£tup_blocks_buûdî
(
unshaded
, 
u¡extuªd
, 
undôhîed
, 
unswizzÀd
, 
ödúe˘
);

1985 
£tup_blocks_buûdî
(
unshaded
, 
u¡extuªd
, 
undôhîed
, 
unswizzÀd
, 
dúe˘
);

1989 
ãxtuª_blocks_u¡extuªd
(
psx_gpu_°ru˘
 *
psx_gpu
);

1990 
ãxtuª_blocks_4bµ
(
psx_gpu_°ru˘
 *
psx_gpu
);

1991 
ãxtuª_blocks_8bµ
(
psx_gpu_°ru˘
 *
psx_gpu
);

1992 
ãxtuª_blocks_16bµ
(
psx_gpu_°ru˘
 *
psx_gpu
);

1994 #i‚de‡
NEON_BUILD


1996 
	$ãxtuª_blocks_u¡extuªd
(
psx_gpu_°ru˘
 *
psx_gpu
)

1998 if(
psx_gpu
->
¥imôive_ty≥
 !
PRIMITIVE_TYPE_SPRITE
)

1999 
ãxñ_blocks_u¡extuªd
 +
psx_gpu
->
num_blocks
;

2000 
	}
}

2002 
	$ãxtuª_blocks_4bµ
(
psx_gpu_°ru˘
 *
psx_gpu
)

2004 
block_°ru˘
 *
block
 = 
psx_gpu
->
blocks
;

2005 
u32
 
num_blocks
 = 
psx_gpu
->num_blocks;

2006 
ãxñ_blocks_4bµ
 +
num_blocks
;

2008 
vec_8x8u
 
ãxñs_low
;

2009 
vec_8x8u
 
ãxñs_high
;

2010 
vec_8x8u
 
ãxñs
;

2011 
vec_8x16u
 
pixñs
;

2013 
vec_8x16u
 
˛ut_a
;

2014 
vec_8x16u
 
˛ut_b
;

2015 
vec_16x8u
 
˛ut_low
;

2016 
vec_16x8u
 
˛ut_high
;

2018 
u8
 *
ãxtuª_±r_8bµ
 = 
psx_gpu
->
ãxtuª_∑ge_±r
;

2019 
u16
 *
˛ut_±r
 = 
psx_gpu
->clut_ptr;

2022 
	`lﬂd_8x16b
(
˛ut_a
, 
˛ut_±r
);

2023 
	`lﬂd_8x16b
(
˛ut_b
, 
˛ut_±r
 + 8);

2024 
	`unzù_16x8b
(
˛ut_low
, 
˛ut_high
, 
˛ut_a
, 
˛ut_b
);

2026 if(
psx_gpu
->
cuºít_ãxtuª_mask
 &Ösx_gpu->
dúty_ãxtuªs_4bµ_mask
)

2027 
	`upd©e_ãxtuª_4bµ_ˇche
(
psx_gpu
);

2029 
num_blocks
)

2031 
ãxñs
.
e
[0] = 
ãxtuª_±r_8bµ
[
block
->
uv
.e[0]];

2032 
ãxñs
.
e
[1] = 
ãxtuª_±r_8bµ
[
block
->
uv
.e[1]];

2033 
ãxñs
.
e
[2] = 
ãxtuª_±r_8bµ
[
block
->
uv
.e[2]];

2034 
ãxñs
.
e
[3] = 
ãxtuª_±r_8bµ
[
block
->
uv
.e[3]];

2035 
ãxñs
.
e
[4] = 
ãxtuª_±r_8bµ
[
block
->
uv
.e[4]];

2036 
ãxñs
.
e
[5] = 
ãxtuª_±r_8bµ
[
block
->
uv
.e[5]];

2037 
ãxñs
.
e
[6] = 
ãxtuª_±r_8bµ
[
block
->
uv
.e[6]];

2038 
ãxñs
.
e
[7] = 
ãxtuª_±r_8bµ
[
block
->
uv
.e[7]];

2040 
	`tbl_16
(
ãxñs_low
, 
ãxñs
, 
˛ut_low
);

2041 
	`tbl_16
(
ãxñs_high
, 
ãxñs
, 
˛ut_high
);

2044 
	`zù_8x16b
(
pixñs
, 
ãxñs_low
, 
ãxñs_high
);

2046 
block
->
ãxñs
 = 
pixñs
;

2048 
num_blocks
--;

2049 
block
++;

2051 
	}
}

2053 
	$ãxtuª_blocks_8bµ
(
psx_gpu_°ru˘
 *
psx_gpu
)

2055 
block_°ru˘
 *
block
 = 
psx_gpu
->
blocks
;

2056 
u32
 
num_blocks
 = 
psx_gpu
->num_blocks;

2058 
ãxñ_blocks_8bµ
 +
num_blocks
;

2060 if(
psx_gpu
->
cuºít_ãxtuª_mask
 &Ösx_gpu->
dúty_ãxtuªs_8bµ_mask
)

2061 
	`upd©e_ãxtuª_8bµ_ˇche
(
psx_gpu
);

2063 
vec_8x16u
 
ãxñs
;

2064 
u8
 *
ãxtuª_±r_8bµ
 = 
psx_gpu
->
ãxtuª_∑ge_±r
;

2066 
u32
 
ãxñ
;

2067 
u32
 
off£t
;

2068 
u32
 
i
;

2070 
num_blocks
)

2072 
i
 = 0; i < 8; i++)

2074 
off£t
 = 
block
->
uv
.
e
[
i
];

2076 
ãxñ
 = 
ãxtuª_±r_8bµ
[
off£t
];

2077 
ãxñs
.
e
[
i
] = 
psx_gpu
->
˛ut_±r
[
ãxñ
];

2080 
block
->
ãxñs
 =Åexels;

2082 
num_blocks
--;

2083 
block
++;

2085 
	}
}

2087 
	$ãxtuª_blocks_16bµ
(
psx_gpu_°ru˘
 *
psx_gpu
)

2089 
block_°ru˘
 *
block
 = 
psx_gpu
->
blocks
;

2090 
u32
 
num_blocks
 = 
psx_gpu
->num_blocks;

2092 
ãxñ_blocks_16bµ
 +
num_blocks
;

2094 
vec_8x16u
 
ãxñs
;

2096 
u16
 *
ãxtuª_±r_16bµ
 = 
psx_gpu
->
ãxtuª_∑ge_±r
;

2097 
u32
 
off£t
;

2098 
u32
 
i
;

2100 
num_blocks
)

2102 
i
 = 0; i < 8; i++)

2104 
off£t
 = 
block
->
uv
.
e
[
i
];

2105 
off£t
 += ((offset & 0xFF00) * 3);

2107 
ãxñs
.
e
[
i
] = 
ãxtuª_±r_16bµ
[
off£t
];

2110 
block
->
ãxñs
 =Åexels;

2112 
num_blocks
--;

2113 
block
++;

2115 
	}
}

2120 
	#shade_blocks_lﬂd_msb_mask_ödúe˘
() \

2121 

	)

2122 
	#shade_blocks_lﬂd_msb_mask_dúe˘
() \

2123 
vec_8x16u
 
msb_mask
; \

2124 
	`dup_8x16b
(
msb_mask
, 
psx_gpu
->
mask_msb
); \

2125 

	)

2126 
	#shade_blocks_°‹e_ödúe˘
(
_døw_mask
, 
_pixñs
) \

2127 
block
->
døw_mask
 = 
_døw_mask
; \

2128 
block
->
pixñs
 = 
_pixñs
 \

2129 

	)

2130 
	#shade_blocks_°‹e_dúe˘
(
_døw_mask
, 
_pixñs
) \

2132 
vec_8x16u
 
fb_pixñs
; \

2133 
	`‹_8x16b
(
_pixñs
, _pixñs, 
msb_mask
); \

2134 
	`lﬂd_8x16b
(
fb_pixñs
, 
block
->
fb_±r
); \

2135 
	`bif_8x16b
(
fb_pixñs
, 
_pixñs
, 
_døw_mask
); \

2136 
	`°‹e_8x16b
(
fb_pixñs
, 
block
->
fb_±r
); \

2138 

	)

2140 
	#shade_blocks_ãxtuªd_Ál£_moduœãd_check_dôhîed
(
èrgë
) \

2141 if(
psx_gpu
->
åüngÀ_cﬁ‹
 == 0x808080) \

2143 
Ál£_moduœãd_blocks
 +
num_blocks
; \

2145 

	)

2146 
	#shade_blocks_ãxtuªd_Ál£_moduœãd_check_undôhîed
(
èrgë
) \

2147 if(
psx_gpu
->
åüngÀ_cﬁ‹
 == 0x808080) \

2150 
shade_blocks_ãxtuªd_unmoduœãd_
##
	`èrgë
(
psx_gpu
); \

2151 
Ál£_moduœãd_blocks
 +
num_blocks
; \

2154 

	)

2156 
	#shade_blocks_ãxtuªd_moduœãd_shaded_¥imôive_lﬂd
(
dôhîög
, \

2157 
èrgë
) \

2158 

	)

2159 
	#shade_blocks_ãxtuªd_moduœãd_unshaded_¥imôive_lﬂd
(
dôhîög
, \

2160 
èrgë
) \

2162 
u32
 
cﬁ‹
 = 
psx_gpu
->
åüngÀ_cﬁ‹
; \

2163 
	`dup_8x8b
(
cﬁ‹s_r
, 
cﬁ‹
); \

2164 
	`dup_8x8b
(
cﬁ‹s_g
, 
cﬁ‹
 >> 8); \

2165 
	`dup_8x8b
(
cﬁ‹s_b
, 
cﬁ‹
 >> 16); \

2166 
shade_blocks_ãxtuªd_Ál£_moduœãd_check_
##
	`dôhîög
(
èrgë
); \

2168 

	)

2169 
	#shade_blocks_ãxtuªd_moduœãd_shaded_block_lﬂd
() \

2170 
cﬁ‹s_r
 = 
block
->
r
; \

2171 
cﬁ‹s_g
 = 
block
->
g
; \

2172 
cﬁ‹s_b
 = 
block
->
b
 \

2173 

	)

2174 
	#shade_blocks_ãxtuªd_moduœãd_unshaded_block_lﬂd
() \

2175 

	)

2176 
	#shade_blocks_ãxtuªd_moduœã_dôhîed
(
comp⁄ít
) \

2177 
pixñs_
##
comp⁄ít
 = 
block
->
dôhî_off£ts
; \

2178 
	`mœ_l⁄g_8x8b
(
pixñs_
##
comp⁄ít
, 
ãxñs_
##comp⁄ít, 
cﬁ‹s_
##component) \

2179 

	)

2180 
	#shade_blocks_ãxtuªd_moduœã_undôhîed
(
comp⁄ít
) \

2181 
	`mul_l⁄g_8x8b
(
pixñs_
##
comp⁄ít
, 
ãxñs_
##comp⁄ít, 
cﬁ‹s_
##component) \

2182 

	)

2183 
	#shade_blocks_ãxtuªd_moduœãd_buûdî
(
shadög
, 
dôhîög
, 
èrgë
) \

2184 
shade_blocks_
##
shadög
##
_ãxtuªd_moduœãd_
##
dôhîög
##
_
##
	`èrgë
( \

2185 
psx_gpu_°ru˘
 *
psx_gpu
) \

2187 
block_°ru˘
 *
block
 = 
psx_gpu
->
blocks
; \

2188 
u32
 
num_blocks
 = 
psx_gpu
->num_blocks; \

2189 
vec_8x16u
 
ãxñs
; \

2191 
vec_8x8u
 
ãxñs_r
; \

2192 
vec_8x8u
 
ãxñs_g
; \

2193 
vec_8x8u
 
ãxñs_b
; \

2195 
vec_8x8u
 
cﬁ‹s_r
; \

2196 
vec_8x8u
 
cﬁ‹s_g
; \

2197 
vec_8x8u
 
cﬁ‹s_b
; \

2199 
vec_8x8u
 
pixñs_r_low
; \

2200 
vec_8x8u
 
pixñs_g_low
; \

2201 
vec_8x8u
 
pixñs_b_low
; \

2202 
vec_8x16u
 
pixñs
; \

2204 
vec_8x16u
 
pixñs_r
; \

2205 
vec_8x16u
 
pixñs_g
; \

2206 
vec_8x16u
 
pixñs_b
; \

2208 
vec_8x16u
 
døw_mask
; \

2209 
vec_8x16u
 
zîo_mask
; \

2211 
vec_8x8u
 
d64_0x07
; \

2212 
vec_8x8u
 
d64_0x1F
; \

2213 
vec_8x8u
 
d64_1
; \

2214 
vec_8x8u
 
d64_4
; \

2215 
vec_8x8u
 
d64_128
; \

2217 
vec_8x16u
 
d128_0x8000
; \

2219 
vec_8x16u
 
ã°_mask
 = 
psx_gpu
->test_mask; \

2220 
u32
 
døw_mask_bôs
; \

2221 
shade_blocks_lﬂd_msb_mask_
##
	`èrgë
(); \

2223 
	`dup_8x8b
(
d64_0x07
, 0x07); \

2224 
	`dup_8x8b
(
d64_0x1F
, 0x1F); \

2225 
	`dup_8x8b
(
d64_1
, 1); \

2226 
	`dup_8x8b
(
d64_4
, 4); \

2227 
	`dup_8x8b
(
d64_128
, 128); \

2229 
	`dup_8x16b
(
d128_0x8000
, 0x8000); \

2231 
shade_blocks_ãxtuªd_moduœãd_
##
shadög
##
	`_¥imôive_lﬂd
(
dôhîög
, \

2232 
èrgë
); \

2234 
num_blocks
) \

2236 
døw_mask_bôs
 = 
block
->draw_mask_bits; \

2237 
	`dup_8x16b
(
døw_mask
, 
døw_mask_bôs
); \

2238 
	`t°_8x16b
(
døw_mask
, døw_mask, 
ã°_mask
); \

2240 
shade_blocks_ãxtuªd_moduœãd_
##
shadög
##
	`_block_lﬂd
(); \

2242 
ãxñs
 = 
block
->texels; \

2244 
	`mov_«ºow_8x16b
(
ãxñs_r
, 
ãxñs
); \

2245 
	`shr_«ºow_8x16b
(
ãxñs_g
, 
ãxñs
, 5); \

2246 
	`shr_«ºow_8x16b
(
ãxñs_b
, 
ãxñs
, 7); \

2248 
	`™d_8x8b
(
ãxñs_r
,Åexñs_r, 
d64_0x1F
); \

2249 
	`™d_8x8b
(
ãxñs_g
,Åexñs_g, 
d64_0x1F
); \

2250 
	`shr_8x8b
(
ãxñs_b
,Åexels_b, 3); \

2252 
shade_blocks_ãxtuªd_moduœã_
##
	`dôhîög
(
r
); \

2253 
shade_blocks_ãxtuªd_moduœã_
##
	`dôhîög
(
g
); \

2254 
shade_blocks_ãxtuªd_moduœã_
##
	`dôhîög
(
b
); \

2256 
	`cm≥qz_8x16b
(
zîo_mask
, 
ãxñs
); \

2257 
	`™d_8x16b
(
pixñs
, 
ãxñs
, 
d128_0x8000
); \

2259 
	`shrq_«ºow_sig√d_8x16b
(
pixñs_r_low
, 
pixñs_r
, 4); \

2260 
	`shrq_«ºow_sig√d_8x16b
(
pixñs_g_low
, 
pixñs_g
, 4); \

2261 
	`shrq_«ºow_sig√d_8x16b
(
pixñs_b_low
, 
pixñs_b
, 4); \

2263 
	`‹_8x16b
(
zîo_mask
, 
døw_mask
, zero_mask); \

2265 
	`shr_8x8b
(
pixñs_r_low
,Öixels_r_low, 3); \

2266 
	`bic_8x8b
(
pixñs_g_low
,Öixñs_g_low, 
d64_0x07
); \

2267 
	`bic_8x8b
(
pixñs_b_low
,Öixñs_b_low, 
d64_0x07
); \

2269 
	`mœ_l⁄g_8x8b
(
pixñs
, 
pixñs_r_low
, 
d64_1
); \

2270 
	`mœ_l⁄g_8x8b
(
pixñs
, 
pixñs_g_low
, 
d64_4
); \

2271 
	`mœ_l⁄g_8x8b
(
pixñs
, 
pixñs_b_low
, 
d64_128
); \

2273 
shade_blocks_°‹e_
##
	`èrgë
(
zîo_mask
, 
pixñs
); \

2275 
num_blocks
--; \

2276 
block
++; \

2279 

	)

2280 
shade_blocks_shaded_ãxtuªd_moduœãd_dôhîed_dúe˘
(
psx_gpu_°ru˘


2281 *
psx_gpu
);

2282 
shade_blocks_shaded_ãxtuªd_moduœãd_undôhîed_dúe˘
(
psx_gpu_°ru˘


2283 *
psx_gpu
);

2284 
shade_blocks_unshaded_ãxtuªd_moduœãd_dôhîed_dúe˘
(
psx_gpu_°ru˘


2285 *
psx_gpu
);

2286 
shade_blocks_unshaded_ãxtuªd_moduœãd_undôhîed_dúe˘
(
psx_gpu_°ru˘


2287 *
psx_gpu
);

2289 
shade_blocks_shaded_ãxtuªd_moduœãd_dôhîed_ödúe˘
(
psx_gpu_°ru˘


2290 *
psx_gpu
);

2291 
shade_blocks_shaded_ãxtuªd_moduœãd_undôhîed_ödúe˘
(
psx_gpu_°ru˘


2292 *
psx_gpu
);

2293 
shade_blocks_unshaded_ãxtuªd_moduœãd_dôhîed_ödúe˘
(
psx_gpu_°ru˘


2294 *
psx_gpu
);

2295 
shade_blocks_unshaded_ãxtuªd_moduœãd_undôhîed_ödúe˘
(
psx_gpu_°ru˘


2296 *
psx_gpu
);

2298 
shade_blocks_ãxtuªd_unmoduœãd_ödúe˘
(
psx_gpu_°ru˘
 *
psx_gpu
);

2299 
shade_blocks_ãxtuªd_unmoduœãd_dúe˘
(
psx_gpu_°ru˘
 *
psx_gpu
);

2301 #i‚de‡
NEON_BUILD


2303 
shade_blocks_ãxtuªd_moduœãd_buûdî
(
shaded
, 
dôhîed
, 
dúe˘
);

2304 
shade_blocks_ãxtuªd_moduœãd_buûdî
(
shaded
, 
undôhîed
, 
dúe˘
);

2305 
shade_blocks_ãxtuªd_moduœãd_buûdî
(
unshaded
, 
dôhîed
, 
dúe˘
);

2306 
shade_blocks_ãxtuªd_moduœãd_buûdî
(
unshaded
, 
undôhîed
, 
dúe˘
);

2308 
shade_blocks_ãxtuªd_moduœãd_buûdî
(
shaded
, 
dôhîed
, 
ödúe˘
);

2309 
shade_blocks_ãxtuªd_moduœãd_buûdî
(
shaded
, 
undôhîed
, 
ödúe˘
);

2310 
shade_blocks_ãxtuªd_moduœãd_buûdî
(
unshaded
, 
dôhîed
, 
ödúe˘
);

2311 
shade_blocks_ãxtuªd_moduœãd_buûdî
(
unshaded
, 
undôhîed
, 
ödúe˘
);

2316 
	#shade_blocks_ãxtuªd_unmoduœãd_buûdî
(
èrgë
) \

2317 
shade_blocks_ãxtuªd_unmoduœãd_
##
	`èrgë
(
psx_gpu_°ru˘
 *
psx_gpu
) \

2319 
block_°ru˘
 *
block
 = 
psx_gpu
->
blocks
; \

2320 
u32
 
num_blocks
 = 
psx_gpu
->num_blocks; \

2321 
vec_8x16u
 
døw_mask
; \

2322 
vec_8x16u
 
ã°_mask
 = 
psx_gpu
->test_mask; \

2323 
u32
 
døw_mask_bôs
; \

2325 
vec_8x16u
 
pixñs
; \

2326 
shade_blocks_lﬂd_msb_mask_
##
	`èrgë
(); \

2328 
num_blocks
) \

2330 
vec_8x16u
 
zîo_mask
; \

2332 
døw_mask_bôs
 = 
block
->draw_mask_bits; \

2333 
	`dup_8x16b
(
døw_mask
, 
døw_mask_bôs
); \

2334 
	`t°_8x16b
(
døw_mask
, døw_mask, 
ã°_mask
); \

2336 
pixñs
 = 
block
->
ãxñs
; \

2338 
	`cm≥qz_8x16b
(
zîo_mask
, 
pixñs
); \

2339 
	`‹_8x16b
(
zîo_mask
, 
døw_mask
, zero_mask); \

2341 
shade_blocks_°‹e_
##
	`èrgë
(
zîo_mask
, 
pixñs
); \

2343 
num_blocks
--; \

2344 
block
++; \

2347 

	)

2348 
	#shade_blocks_ãxtuªd_unmoduœãd_dôhîed_buûdî
(
èrgë
) \

2349 
shade_blocks_ãxtuªd_unmoduœãd_dôhîed_
##
	`èrgë
(
psx_gpu_°ru˘
 \

2350 *
psx_gpu
) \

2352 
block_°ru˘
 *
block
 = 
psx_gpu
->
blocks
; \

2353 
u32
 
num_blocks
 = 
psx_gpu
->num_blocks; \

2354 
vec_8x16u
 
døw_mask
; \

2355 
vec_8x16u
 
ã°_mask
 = 
psx_gpu
->test_mask; \

2356 
u32
 
døw_mask_bôs
; \

2358 
vec_8x16u
 
pixñs
; \

2359 
shade_blocks_lﬂd_msb_mask_
##
	`èrgë
(); \

2361 
num_blocks
) \

2363 
vec_8x16u
 
zîo_mask
; \

2365 
døw_mask_bôs
 = 
block
->draw_mask_bits; \

2366 
	`dup_8x16b
(
døw_mask
, 
døw_mask_bôs
); \

2367 
	`t°_8x16b
(
døw_mask
, døw_mask, 
ã°_mask
); \

2369 
pixñs
 = 
block
->
ãxñs
; \

2371 
	`cm≥qz_8x16b
(
zîo_mask
, 
pixñs
); \

2372 
	`‹_8x16b
(
zîo_mask
, 
døw_mask
, zero_mask); \

2374 
shade_blocks_°‹e_
##
	`èrgë
(
zîo_mask
, 
pixñs
); \

2376 
num_blocks
--; \

2377 
block
++; \

2380 

	)

2381 #i‚de‡
NEON_BUILD


2383 
	$shade_blocks_ãxtuªd_unmoduœãd_buûdî
(
ödúe˘
)

2384 
	$shade_blocks_ãxtuªd_unmoduœãd_buûdî
(
dúe˘
)

2389 
	`shade_blocks_unshaded_u¡extuªd_ödúe˘
(
psx_gpu_°ru˘
 *
psx_gpu
);

2390 
	`shade_blocks_unshaded_u¡extuªd_dúe˘
(
psx_gpu_°ru˘
 *
psx_gpu
);

2392 #i‚de‡
NEON_BUILD


2394 
	$shade_blocks_unshaded_u¡extuªd_ödúe˘
(
psx_gpu_°ru˘
 *
psx_gpu
)

2396 
	}
}

2398 
	$shade_blocks_unshaded_u¡extuªd_dúe˘
(
psx_gpu_°ru˘
 *
psx_gpu
)

2400 
block_°ru˘
 *
block
 = 
psx_gpu
->
blocks
;

2401 
u32
 
num_blocks
 = 
psx_gpu
->num_blocks;

2403 
vec_8x16u
 
pixñs
 = 
block
->pixels;

2404 
	`shade_blocks_lﬂd_msb_mask_dúe˘
();

2406 
num_blocks
)

2408 
	`shade_blocks_°‹e_dúe˘
(
block
->
døw_mask
, 
pixñs
);

2410 
num_blocks
--;

2411 
block
++;

2413 
	}
}

2417 
	$shade_blocks_shaded_u¡extuªd
(
psx_gpu_°ru˘
 *
psx_gpu
)

2419 
	}
}

2422 
	#bÀnd_blocks_mask_evÆu©e_⁄
() \

2423 
vec_8x16u
 
mask_pixñs
; \

2424 
	`cm∂tz_8x16b
(
mask_pixñs
, 
‰amebuf„r_pixñs
); \

2425 
	`‹_8x16b
(
døw_mask
, døw_mask, 
mask_pixñs
) \

2426 

	)

2427 
	#bÀnd_blocks_mask_evÆu©e_off
() \

2428 

	)

2429 
	#bÀnd_blocks_avîage
() \

2431 
vec_8x16u
 
pixñs_no_msb
; \

2432 
vec_8x16u
 
fb_pixñs_no_msb
; \

2434 
vec_8x16u
 
d128_0x0421
; \

2435 
vec_8x16u
 
d128_0x8000
; \

2437 
	`dup_8x16b
(
d128_0x0421
, 0x0421); \

2438 
	`dup_8x16b
(
d128_0x8000
, 0x8000); \

2440 
	`e‹_8x16b
(
bÀnd_pixñs
, 
pixñs
, 
‰amebuf„r_pixñs
); \

2441 
	`bic_8x16b
(
pixñs_no_msb
, 
pixñs
, 
d128_0x8000
); \

2442 
	`™d_8x16b
(
bÀnd_pixñs
, bÀnd_pixñs, 
d128_0x0421
); \

2443 
	`sub_8x16b
(
bÀnd_pixñs
, 
pixñs_no_msb
, blend_pixels); \

2444 
	`bic_8x16b
(
fb_pixñs_no_msb
, 
‰amebuf„r_pixñs
, 
d128_0x8000
); \

2445 
	`avîage_8x16b
(
bÀnd_pixñs
, 
fb_pixñs_no_msb
, blend_pixels); \

2447 

	)

2448 
	#bÀnd_blocks_add
() \

2450 
vec_8x16u
 
pixñs_rb
, 
pixñs_g
; \

2451 
vec_8x16u
 
fb_rb
, 
fb_g
; \

2453 
vec_8x16u
 
d128_0x7C1F
; \

2454 
vec_8x16u
 
d128_0x03E0
; \

2456 
	`dup_8x16b
(
d128_0x7C1F
, 0x7C1F); \

2457 
	`dup_8x16b
(
d128_0x03E0
, 0x03E0); \

2459 
	`™d_8x16b
(
pixñs_rb
, 
pixñs
, 
d128_0x7C1F
); \

2460 
	`™d_8x16b
(
pixñs_g
, 
pixñs
, 
d128_0x03E0
); \

2462 
	`™d_8x16b
(
fb_rb
, 
‰amebuf„r_pixñs
, 
d128_0x7C1F
); \

2463 
	`™d_8x16b
(
fb_g
, 
‰amebuf„r_pixñs
, 
d128_0x03E0
); \

2465 
	`add_8x16b
(
fb_rb
, fb_rb, 
pixñs_rb
); \

2466 
	`add_8x16b
(
fb_g
, fb_g, 
pixñs_g
); \

2468 
	`mö_16x8b
(
	`ve˘‹_ˇ°
(
vec_16x8u
, 
fb_rb
), vector_cast(vec_16x8u, fb_rb), \

2469 
	`ve˘‹_ˇ°
(
vec_16x8u
, 
d128_0x7C1F
)); \

2470 
	`mö_8x16b
(
fb_g
, fb_g, 
d128_0x03E0
); \

2472 
	`‹_8x16b
(
bÀnd_pixñs
, 
fb_rb
, 
fb_g
); \

2474 

	)

2475 
	#bÀnd_blocks_subåa˘
() \

2477 
vec_8x16u
 
pixñs_rb
, 
pixñs_g
; \

2478 
vec_8x16u
 
fb_rb
, 
fb_g
; \

2480 
vec_8x16u
 
d128_0x7C1F
; \

2481 
vec_8x16u
 
d128_0x03E0
; \

2483 
	`dup_8x16b
(
d128_0x7C1F
, 0x7C1F); \

2484 
	`dup_8x16b
(
d128_0x03E0
, 0x03E0); \

2486 
	`™d_8x16b
(
pixñs_rb
, 
pixñs
, 
d128_0x7C1F
); \

2487 
	`™d_8x16b
(
pixñs_g
, 
pixñs
, 
d128_0x03E0
); \

2489 
	`™d_8x16b
(
fb_rb
, 
‰amebuf„r_pixñs
, 
d128_0x7C1F
); \

2490 
	`™d_8x16b
(
fb_g
, 
‰amebuf„r_pixñs
, 
d128_0x03E0
); \

2492 
	`subs_16x8b
(
	`ve˘‹_ˇ°
(
vec_16x8u
, 
fb_rb
), \

2493 
	`ve˘‹_ˇ°
(
vec_16x8u
, 
fb_rb
), ve˘‹_ˇ°(vec_16x8u, 
pixñs_rb
)); \

2494 
	`subs_8x16b
(
fb_g
, fb_g, 
pixñs_g
); \

2496 
	`‹_8x16b
(
bÀnd_pixñs
, 
fb_rb
, 
fb_g
); \

2498 

	)

2499 
	#bÀnd_blocks_add_fouπh
() \

2501 
vec_8x16u
 
pixñs_rb
, 
pixñs_g
; \

2502 
vec_8x16u
 
pixñs_fouπh
; \

2503 
vec_8x16u
 
fb_rb
, 
fb_g
; \

2505 
vec_8x16u
 
d128_0x7C1F
; \

2506 
vec_8x16u
 
d128_0x1C07
; \

2507 
vec_8x16u
 
d128_0x03E0
; \

2508 
vec_8x16u
 
d128_0x00E0
; \

2510 
	`dup_8x16b
(
d128_0x7C1F
, 0x7C1F); \

2511 
	`dup_8x16b
(
d128_0x1C07
, 0x1C07); \

2512 
	`dup_8x16b
(
d128_0x03E0
, 0x03E0); \

2513 
	`dup_8x16b
(
d128_0x00E0
, 0x00E0); \

2515 
	`shr_8x16b
(
pixñs_fouπh
, 
	`ve˘‹_ˇ°
(
vec_8x16s
, 
pixñs
), 2); \

2517 
	`™d_8x16b
(
fb_rb
, 
‰amebuf„r_pixñs
, 
d128_0x7C1F
); \

2518 
	`™d_8x16b
(
fb_g
, 
‰amebuf„r_pixñs
, 
d128_0x03E0
); \

2520 
	`™d_8x16b
(
pixñs_rb
, 
pixñs_fouπh
, 
d128_0x1C07
); \

2521 
	`™d_8x16b
(
pixñs_g
, 
pixñs_fouπh
, 
d128_0x00E0
); \

2523 
	`add_8x16b
(
fb_rb
, fb_rb, 
pixñs_rb
); \

2524 
	`add_8x16b
(
fb_g
, fb_g, 
pixñs_g
); \

2526 
	`mö_16x8b
(
	`ve˘‹_ˇ°
(
vec_16x8u
, 
fb_rb
), vector_cast(vec_16x8u, fb_rb), \

2527 
	`ve˘‹_ˇ°
(
vec_16x8u
, 
d128_0x7C1F
)); \

2528 
	`mö_8x16b
(
fb_g
, fb_g, 
d128_0x03E0
); \

2530 
	`‹_8x16b
(
bÀnd_pixñs
, 
fb_rb
, 
fb_g
); \

2532 

	)

2533 
	#bÀnd_blocks_bÀnded_comböe_ãxtuªd
() \

2535 
vec_8x16u
 
bÀnd_mask
; \

2536 
	`cm∂tz_8x16b
(
bÀnd_mask
, 
pixñs
); \

2538 
	`‹_immedüã_8x16b
(
bÀnd_pixñs
, blend_pixels, 0x8000); \

2539 
	`bif_8x16b
(
bÀnd_pixñs
, 
pixñs
, 
bÀnd_mask
); \

2541 

	)

2542 
	#bÀnd_blocks_bÀnded_comböe_u¡extuªd
() \

2543 

	)

2545 
	#bÀnd_blocks_body_bÀnd
(
bÀnd_mode
, 
ãxturög
) \

2547 
bÀnd_blocks_
##
	`bÀnd_mode
(); \

2548 
bÀnd_blocks_bÀnded_comböe_
##
	`ãxturög
(); \

2550 

	)

2551 
	#bÀnd_blocks_body_avîage
(
ãxturög
) \

2552 
	`bÀnd_blocks_body_bÀnd
(
avîage
, 
ãxturög
) \

2553 

	)

2554 
	#bÀnd_blocks_body_add
(
ãxturög
) \

2555 
	`bÀnd_blocks_body_bÀnd
(
add
, 
ãxturög
) \

2556 

	)

2557 
	#bÀnd_blocks_body_subåa˘
(
ãxturög
) \

2558 
	`bÀnd_blocks_body_bÀnd
(
subåa˘
, 
ãxturög
) \

2559 

	)

2560 
	#bÀnd_blocks_body_add_fouπh
(
ãxturög
) \

2561 
	`bÀnd_blocks_body_bÀnd
(
add_fouπh
, 
ãxturög
) \

2562 

	)

2563 
	#bÀnd_blocks_body_unbÀnded
(
ãxturög
) \

2564 
bÀnd_pixñs
 = 
pixñs
 \

2565 

	)

2567 
	#bÀnd_blocks_buûdî
(
ãxturög
, 
bÀnd_mode
, 
mask_evÆu©e
) \

2569 
bÀnd_blocks_
##
ãxturög
##
_
##
bÀnd_mode
##_##
	`mask_evÆu©e
(
psx_gpu_°ru˘
 \

2570 *
psx_gpu
) \

2572 
block_°ru˘
 *
block
 = 
psx_gpu
->
blocks
; \

2573 
u32
 
num_blocks
 = 
psx_gpu
->num_blocks; \

2574 
vec_8x16u
 
døw_mask
; \

2575 
vec_8x16u
 
pixñs
; \

2576 
vec_8x16u
 
bÀnd_pixñs
; \

2577 
vec_8x16u
 
‰amebuf„r_pixñs
; \

2578 
vec_8x16u
 
msb_mask
; \

2580 
u16
 *
fb_±r
; \

2582 
	`dup_8x16b
(
msb_mask
, 
psx_gpu
->
mask_msb
); \

2584 
num_blocks
) \

2586 
pixñs
 = 
block
->pixels; \

2587 
døw_mask
 = 
block
->draw_mask; \

2588 
fb_±r
 = 
block
->fb_ptr; \

2590 
	`lﬂd_8x16b
(
‰amebuf„r_pixñs
, 
fb_±r
); \

2592 
bÀnd_blocks_mask_evÆu©e_
##
	`mask_evÆu©e
(); \

2593 
bÀnd_blocks_body_
##
	`bÀnd_mode
(
ãxturög
); \

2595 
	`‹_8x16b
(
bÀnd_pixñs
, bÀnd_pixñs, 
msb_mask
); \

2596 
	`bif_8x16b
(
‰amebuf„r_pixñs
, 
bÀnd_pixñs
, 
døw_mask
); \

2597 
	`°‹e_8x16b
(
‰amebuf„r_pixñs
, 
fb_±r
); \

2599 
bÀnd_blocks
++; \

2600 
num_blocks
--; \

2601 
block
++; \

2604 

	)

2605 
bÀnd_blocks_ãxtuªd_avîage_off
(
psx_gpu_°ru˘
 *
psx_gpu
);

2606 
bÀnd_blocks_ãxtuªd_avîage_⁄
(
psx_gpu_°ru˘
 *
psx_gpu
);

2607 
bÀnd_blocks_ãxtuªd_add_off
(
psx_gpu_°ru˘
 *
psx_gpu
);

2608 
bÀnd_blocks_ãxtuªd_add_⁄
(
psx_gpu_°ru˘
 *
psx_gpu
);

2609 
bÀnd_blocks_ãxtuªd_subåa˘_off
(
psx_gpu_°ru˘
 *
psx_gpu
);

2610 
bÀnd_blocks_ãxtuªd_subåa˘_⁄
(
psx_gpu_°ru˘
 *
psx_gpu
);

2611 
bÀnd_blocks_ãxtuªd_add_fouπh_off
(
psx_gpu_°ru˘
 *
psx_gpu
);

2612 
bÀnd_blocks_ãxtuªd_add_fouπh_⁄
(
psx_gpu_°ru˘
 *
psx_gpu
);

2614 
bÀnd_blocks_u¡extuªd_avîage_off
(
psx_gpu_°ru˘
 *
psx_gpu
);

2615 
bÀnd_blocks_u¡extuªd_avîage_⁄
(
psx_gpu_°ru˘
 *
psx_gpu
);

2616 
bÀnd_blocks_u¡extuªd_add_off
(
psx_gpu_°ru˘
 *
psx_gpu
);

2617 
bÀnd_blocks_u¡extuªd_add_⁄
(
psx_gpu_°ru˘
 *
psx_gpu
);

2618 
bÀnd_blocks_u¡extuªd_subåa˘_off
(
psx_gpu_°ru˘
 *
psx_gpu
);

2619 
bÀnd_blocks_u¡extuªd_subåa˘_⁄
(
psx_gpu_°ru˘
 *
psx_gpu
);

2620 
bÀnd_blocks_u¡extuªd_add_fouπh_off
(
psx_gpu_°ru˘
 *
psx_gpu
);

2621 
bÀnd_blocks_u¡extuªd_add_fouπh_⁄
(
psx_gpu_°ru˘
 *
psx_gpu
);

2623 
bÀnd_blocks_ãxtuªd_unbÀnded_off
(
psx_gpu_°ru˘
 *
psx_gpu
);

2624 
bÀnd_blocks_ãxtuªd_unbÀnded_⁄
(
psx_gpu_°ru˘
 *
psx_gpu
);

2626 #i‚de‡
NEON_BUILD


2628 
	$bÀnd_blocks_ãxtuªd_unbÀnded_off
(
psx_gpu_°ru˘
 *
psx_gpu
)

2630 
	}
}

2632 
bÀnd_blocks_buûdî
(
ãxtuªd
, 
avîage
, 
off
);

2633 
bÀnd_blocks_buûdî
(
ãxtuªd
, 
avîage
, 
⁄
);

2634 
bÀnd_blocks_buûdî
(
ãxtuªd
, 
add
, 
off
);

2635 
bÀnd_blocks_buûdî
(
ãxtuªd
, 
add
, 
⁄
);

2636 
bÀnd_blocks_buûdî
(
ãxtuªd
, 
subåa˘
, 
off
);

2637 
bÀnd_blocks_buûdî
(
ãxtuªd
, 
subåa˘
, 
⁄
);

2638 
bÀnd_blocks_buûdî
(
ãxtuªd
, 
add_fouπh
, 
off
);

2639 
bÀnd_blocks_buûdî
(
ãxtuªd
, 
add_fouπh
, 
⁄
);

2641 
bÀnd_blocks_buûdî
(
u¡extuªd
, 
avîage
, 
off
);

2642 
bÀnd_blocks_buûdî
(
u¡extuªd
, 
avîage
, 
⁄
);

2643 
bÀnd_blocks_buûdî
(
u¡extuªd
, 
add
, 
off
);

2644 
bÀnd_blocks_buûdî
(
u¡extuªd
, 
add
, 
⁄
);

2645 
bÀnd_blocks_buûdî
(
u¡extuªd
, 
subåa˘
, 
off
);

2646 
bÀnd_blocks_buûdî
(
u¡extuªd
, 
subåa˘
, 
⁄
);

2647 
bÀnd_blocks_buûdî
(
u¡extuªd
, 
add_fouπh
, 
off
);

2648 
bÀnd_blocks_buûdî
(
u¡extuªd
, 
add_fouπh
, 
⁄
);

2650 
bÀnd_blocks_buûdî
(
ãxtuªd
, 
unbÀnded
, 
⁄
);

2655 
	#vîãx_sw≠
(
_a
, 
_b
) \

2657 
vîãx_°ru˘
 *
ãmp_vîãx
 = 
_a
; \

2658 
_a
 = 
_b
; \

2659 
_b
 = 
ãmp_vîãx
; \

2660 
åüngÀ_wödög
 ^= 1; \

2662 

	)

2674 
	#£tup_blocks_swôch_u¡extuªd_unshaded
(
dôhîög
, 
èrgë
) \

2675 
£tup_blocks_unshaded_u¡extuªd_undôhîed_unswizzÀd_
##
èrgë
 \

2676 

	)

2677 
	#£tup_blocks_swôch_u¡extuªd_shaded
(
dôhîög
, 
èrgë
) \

2678 
£tup_blocks_shaded_u¡extuªd_
##
dôhîög
##
_unswizzÀd_
##
èrgë
 \

2679 

	)

2680 
	#£tup_blocks_swôch_u¡extuªd
(
shadög
, 
ãxtuª_mode
, 
dôhîög
, \

2681 
èrgë
) \

2682 
£tup_blocks_swôch_u¡extuªd_
##
	`shadög
(
dôhîög
, 
èrgë
) \

2683 

	)

2684 
	#£tup_blocks_swôch_ãxtuª_mode_4bµ
(
shadög
) \

2685 
£tup_blocks_
##
shadög
##
_ãxtuªd_dôhîed_swizzÀd_ödúe˘
 \

2686 

	)

2687 
	#£tup_blocks_swôch_ãxtuª_mode_8bµ
(
shadög
) \

2688 
£tup_blocks_
##
shadög
##
_ãxtuªd_dôhîed_swizzÀd_ödúe˘
 \

2689 

	)

2690 
	#£tup_blocks_swôch_ãxtuª_mode_16bµ
(
shadög
) \

2691 
£tup_blocks_
##
shadög
##
_ãxtuªd_dôhîed_unswizzÀd_ödúe˘
 \

2692 

	)

2693 
	#£tup_blocks_swôch_ãxtuªd
(
shadög
, 
ãxtuª_mode
, 
dôhîög
, 
èrgë
) \

2694 
£tup_blocks_swôch_ãxtuª_mode_
##
	`ãxtuª_mode
(
shadög
) \

2695 

	)

2696 
	#£tup_blocks_swôch_bÀnded
(
shadög
, 
ãxturög
, 
ãxtuª_mode
, \

2697 
dôhîög
, 
mask_evÆu©e
) \

2698 
£tup_blocks_swôch_
##
	`ãxturög
(
shadög
, 
ãxtuª_mode
, 
dôhîög
, 
ödúe˘
) \

2699 

	)

2700 
	#£tup_blocks_swôch_unbÀnded_⁄
(
shadög
, 
ãxturög
, 
ãxtuª_mode
, \

2701 
dôhîög
) \

2702 
£tup_blocks_swôch_
##
	`ãxturög
(
shadög
, 
ãxtuª_mode
, 
dôhîög
, 
ödúe˘
) \

2703 

	)

2704 
	#£tup_blocks_swôch_unbÀnded_off
(
shadög
, 
ãxturög
, 
ãxtuª_mode
, \

2705 
dôhîög
) \

2706 
£tup_blocks_swôch_
##
	`ãxturög
(
shadög
, 
ãxtuª_mode
, 
dôhîög
, 
dúe˘
) \

2707 

	)

2708 
	#£tup_blocks_swôch_unbÀnded
(
shadög
, 
ãxturög
, 
ãxtuª_mode
, \

2709 
dôhîög
, 
mask_evÆu©e
) \

2710 
£tup_blocks_swôch_unbÀnded_
##
	`mask_evÆu©e
(
shadög
, 
ãxturög
, \

2711 
ãxtuª_mode
, 
dôhîög
) \

2712 

	)

2713 
	#£tup_blocks_swôch
(
shadög
, 
ãxturög
, 
ãxtuª_mode
, 
dôhîög
, \

2714 
bÀndög
, 
mask_evÆu©e
) \

2715 
£tup_blocks_swôch_
##
	`bÀndög
(
shadög
, 
ãxturög
, 
ãxtuª_mode
, \

2716 
dôhîög
, 
mask_evÆu©e
) \

2717 

	)

2721 
	#ãxtuª_blocks_swôch_u¡extuªd
(
ãxtuª_mode
) \

2722 
ãxtuª_blocks_u¡extuªd
 \

2723 

	)

2724 
	#ãxtuª_blocks_swôch_ãxtuªd
(
ãxtuª_mode
) \

2725 
ãxtuª_blocks_
##
ãxtuª_mode
 \

2726 

	)

2727 
	#ãxtuª_blocks_swôch
(
ãxturög
, 
ãxtuª_mode
) \

2728 
ãxtuª_blocks_swôch_
##
	`ãxturög
(
ãxtuª_mode
) \

2729 

	)

2743 
	#shade_blocks_swôch_unshaded_u¡extuªd
(
moduœti⁄
, 
dôhîög
, 
èrgë
) \

2744 
shade_blocks_unshaded_u¡extuªd_
##
èrgë
 \

2745 

	)

2746 
	#shade_blocks_swôch_unshaded_ãxtuªd_unmoduœãd
(
dôhîög
, 
èrgë
) \

2747 
shade_blocks_ãxtuªd_unmoduœãd_
##
èrgë
 \

2748 

	)

2749 
	#shade_blocks_swôch_unshaded_ãxtuªd_moduœãd
(
dôhîög
, 
èrgë
) \

2750 
shade_blocks_unshaded_ãxtuªd_moduœãd_
##
dôhîög
##
_
##
èrgë
 \

2751 

	)

2752 
	#shade_blocks_swôch_unshaded_ãxtuªd
(
moduœti⁄
, 
dôhîög
, 
èrgë
) \

2753 
shade_blocks_swôch_unshaded_ãxtuªd_
##
	`moduœti⁄
(
dôhîög
, 
èrgë
) \

2754 

	)

2755 
	#shade_blocks_swôch_unshaded
(
ãxturög
, 
moduœti⁄
, 
dôhîög
, 
èrgë
) \

2756 
shade_blocks_swôch_unshaded_
##
	`ãxturög
(
moduœti⁄
, 
dôhîög
, 
èrgë
) \

2757 

	)

2758 
	#shade_blocks_swôch_shaded_u¡extuªd
(
moduœti⁄
, 
dôhîög
, 
èrgë
) \

2759 
shade_blocks_shaded_u¡extuªd
 \

2760 

	)

2761 
	#shade_blocks_swôch_shaded_ãxtuªd_unmoduœãd
(
dôhîög
, 
èrgë
) \

2762 
shade_blocks_ãxtuªd_unmoduœãd_
##
èrgë
 \

2763 

	)

2764 
	#shade_blocks_swôch_shaded_ãxtuªd_moduœãd
(
dôhîög
, 
èrgë
) \

2765 
shade_blocks_shaded_ãxtuªd_moduœãd_
##
dôhîög
##
_
##
èrgë
 \

2766 

	)

2767 
	#shade_blocks_swôch_shaded_ãxtuªd
(
moduœti⁄
, 
dôhîög
, 
èrgë
) \

2768 
shade_blocks_swôch_shaded_ãxtuªd_
##
	`moduœti⁄
(
dôhîög
, 
èrgë
) \

2769 

	)

2770 
	#shade_blocks_swôch_shaded
(
ãxturög
, 
moduœti⁄
, 
dôhîög
, 
èrgë
) \

2771 
shade_blocks_swôch_shaded_
##
	`ãxturög
(
moduœti⁄
, 
dôhîög
, 
èrgë
) \

2772 

	)

2773 
	#shade_blocks_swôch_mask_off
(
shadög
, 
ãxturög
, 
moduœti⁄
, \

2774 
dôhîög
) \

2775 
shade_blocks_swôch_
##
	`shadög
(
ãxturög
, 
moduœti⁄
, 
dôhîög
, 
dúe˘
) \

2776 

	)

2777 
	#shade_blocks_swôch_mask_⁄
(
shadög
, 
ãxturög
, 
moduœti⁄
, \

2778 
dôhîög
) \

2779 
shade_blocks_swôch_
##
	`shadög
(
ãxturög
, 
moduœti⁄
, 
dôhîög
, 
ödúe˘
) \

2780 

	)

2781 
	#shade_blocks_swôch_bÀnded
(
shadög
, 
ãxturög
, 
moduœti⁄
, 
dôhîög
, \

2782 
mask_evÆu©e
) \

2783 
shade_blocks_swôch_
##
	`shadög
(
ãxturög
, 
moduœti⁄
, 
dôhîög
, 
ödúe˘
) \

2784 

	)

2785 
	#shade_blocks_swôch_unbÀnded
(
shadög
, 
ãxturög
, 
moduœti⁄
, \

2786 
dôhîög
, 
mask_evÆu©e
) \

2787 
shade_blocks_swôch_mask_
##
	`mask_evÆu©e
(
shadög
, 
ãxturög
, 
moduœti⁄
, \

2788 
dôhîög
) \

2789 

	)

2790 
	#shade_blocks_swôch
(
shadög
, 
ãxturög
, 
moduœti⁄
, 
dôhîög
, \

2791 
bÀndög
, 
mask_evÆu©e
) \

2792 
shade_blocks_swôch_
##
	`bÀndög
(
shadög
, 
ãxturög
, 
moduœti⁄
, 
dôhîög
, \

2793 
mask_evÆu©e
) \

2794 

	)

2818 
	#bÀnd_blocks_swôch_unbÀnded
(
ãxturög
, 
bÀnd_mode
, 
mask_evÆu©e
) \

2819 
bÀnd_blocks_ãxtuªd_unbÀnded_
##
mask_evÆu©e
 \

2820 

	)

2821 
	#bÀnd_blocks_swôch_bÀnded
(
ãxturög
, 
bÀnd_mode
, 
mask_evÆu©e
) \

2822 
bÀnd_blocks_
##
ãxturög
##
_
##
bÀnd_mode
##_##
mask_evÆu©e
 \

2823 

	)

2824 
	#bÀnd_blocks_swôch
(
ãxturög
, 
bÀndög
, 
bÀnd_mode
, 
mask_evÆu©e
) \

2825 
bÀnd_blocks_swôch_
##
	`bÀndög
(
ãxturög
, 
bÀnd_mode
, 
mask_evÆu©e
) \

2826 

	)

2828 
	#ªndî_blocks_swôch_block_moduœti⁄
(
ãxtuª_mode
, 
bÀnd_mode
, \

2829 
mask_evÆu©e
, 
shadög
, 
dôhîög
, 
ãxturög
, 
bÀndög
, 
moduœti⁄
) \

2831 
	`£tup_blocks_swôch
(
shadög
, 
ãxturög
, 
ãxtuª_mode
, 
dôhîög
, 
bÀndög
, \

2832 
mask_evÆu©e
), \

2833 
	`ãxtuª_blocks_swôch
(
ãxturög
, 
ãxtuª_mode
), \

2834 
	`shade_blocks_swôch
(
shadög
, 
ãxturög
, 
moduœti⁄
, 
dôhîög
, 
bÀndög
, \

2835 
mask_evÆu©e
), \

2836 
	`bÀnd_blocks_swôch
(
ãxturög
, 
bÀndög
, 
bÀnd_mode
, 
mask_evÆu©e
) \

2838 

	)

2839 
	#ªndî_blocks_swôch_block_bÀndög
(
ãxtuª_mode
, 
bÀnd_mode
, \

2840 
mask_evÆu©e
, 
shadög
, 
dôhîög
, 
ãxturög
, 
bÀndög
) \

2841 
	`ªndî_blocks_swôch_block_moduœti⁄
(
ãxtuª_mode
, 
bÀnd_mode
, \

2842 
mask_evÆu©e
, 
shadög
, 
dôhîög
, 
ãxturög
, 
bÀndög
, 
moduœãd
), \

2843 
	`ªndî_blocks_swôch_block_moduœti⁄
(
ãxtuª_mode
, 
bÀnd_mode
, \

2844 
mask_evÆu©e
, 
shadög
, 
dôhîög
, 
ãxturög
, 
bÀndög
, 
unmoduœãd
) \

2845 

	)

2846 
	#ªndî_blocks_swôch_block_ãxturög
(
ãxtuª_mode
, 
bÀnd_mode
, \

2847 
mask_evÆu©e
, 
shadög
, 
dôhîög
, 
ãxturög
) \

2848 
	`ªndî_blocks_swôch_block_bÀndög
(
ãxtuª_mode
, 
bÀnd_mode
, \

2849 
mask_evÆu©e
, 
shadög
, 
dôhîög
, 
ãxturög
, 
unbÀnded
), \

2850 
	`ªndî_blocks_swôch_block_bÀndög
(
ãxtuª_mode
, 
bÀnd_mode
, \

2851 
mask_evÆu©e
, 
shadög
, 
dôhîög
, 
ãxturög
, 
bÀnded
) \

2852 

	)

2853 
	#ªndî_blocks_swôch_block_dôhîög
(
ãxtuª_mode
, 
bÀnd_mode
, \

2854 
mask_evÆu©e
, 
shadög
, 
dôhîög
) \

2855 
	`ªndî_blocks_swôch_block_ãxturög
(
ãxtuª_mode
, 
bÀnd_mode
, \

2856 
mask_evÆu©e
, 
shadög
, 
dôhîög
, 
u¡extuªd
), \

2857 
	`ªndî_blocks_swôch_block_ãxturög
(
ãxtuª_mode
, 
bÀnd_mode
, \

2858 
mask_evÆu©e
, 
shadög
, 
dôhîög
, 
ãxtuªd
) \

2859 

	)

2860 
	#ªndî_blocks_swôch_block_shadög
(
ãxtuª_mode
, 
bÀnd_mode
, \

2861 
mask_evÆu©e
, 
shadög
) \

2862 
	`ªndî_blocks_swôch_block_dôhîög
(
ãxtuª_mode
, 
bÀnd_mode
, \

2863 
mask_evÆu©e
, 
shadög
, 
undôhîed
), \

2864 
	`ªndî_blocks_swôch_block_dôhîög
(
ãxtuª_mode
, 
bÀnd_mode
, \

2865 
mask_evÆu©e
, 
shadög
, 
dôhîed
) \

2866 

	)

2867 
	#ªndî_blocks_swôch_block_mask_evÆu©e
(
ãxtuª_mode
, 
bÀnd_mode
, \

2868 
mask_evÆu©e
) \

2869 
	`ªndî_blocks_swôch_block_shadög
(
ãxtuª_mode
, 
bÀnd_mode
, 
mask_evÆu©e
, \

2870 
unshaded
), \

2871 
	`ªndî_blocks_swôch_block_shadög
(
ãxtuª_mode
, 
bÀnd_mode
, 
mask_evÆu©e
, \

2872 
shaded
) \

2873 

	)

2874 
	#ªndî_blocks_swôch_block_bÀnd_mode
(
ãxtuª_mode
, 
bÀnd_mode
) \

2875 
	`ªndî_blocks_swôch_block_mask_evÆu©e
(
ãxtuª_mode
, 
bÀnd_mode
, 
off
), \

2876 
	`ªndî_blocks_swôch_block_mask_evÆu©e
(
ãxtuª_mode
, 
bÀnd_mode
, 
⁄
) \

2877 

	)

2878 
	#ªndî_blocks_swôch_block_ãxtuª_mode
(
ãxtuª_mode
) \

2879 
	`ªndî_blocks_swôch_block_bÀnd_mode
(
ãxtuª_mode
, 
avîage
), \

2880 
	`ªndî_blocks_swôch_block_bÀnd_mode
(
ãxtuª_mode
, 
add
), \

2881 
	`ªndî_blocks_swôch_block_bÀnd_mode
(
ãxtuª_mode
, 
subåa˘
), \

2882 
	`ªndî_blocks_swôch_block_bÀnd_mode
(
ãxtuª_mode
, 
add_fouπh
) \

2883 

	)

2884 
	#ªndî_blocks_swôch_block
() \

2885 
	`ªndî_blocks_swôch_block_ãxtuª_mode
(4b
µ
), \

2886 
	`ªndî_blocks_swôch_block_ãxtuª_mode
(8b
µ
), \

2887 
	`ªndî_blocks_swôch_block_ãxtuª_mode
(16b
µ
), \

2888 
	`ªndî_blocks_swôch_block_ãxtuª_mode
(4b
µ
) \

2889 

	)

2891 
ªndî_block_h™dÀr_°ru˘
 
	gªndî_åüngÀ_block_h™dÀrs
[] =

2893 
ªndî_blocks_swôch_block
()

2896 #unde‡
ªndî_blocks_swôch_block_moduœti⁄


2898 
	#ªndî_blocks_swôch_block_moduœti⁄
(
ãxtuª_mode
, 
bÀnd_mode
, \

2899 
mask_evÆu©e
, 
shadög
, 
dôhîög
, 
ãxturög
, 
bÀndög
, 
moduœti⁄
) \

2909 

	)

2910 *
	gªndî_block_Êag_°rögs
[] =

2912 
ªndî_blocks_swôch_block
()

2916 
	#åüngÀ_y_dúe˘i⁄_up
 1

	)

2917 
	#åüngÀ_y_dúe˘i⁄_Ê©
 2

	)

2918 
	#åüngÀ_y_dúe˘i⁄_down
 0

	)

2920 
	#åüngÀ_wödög_posôive
 0

	)

2921 
	#åüngÀ_wödög_√g©ive
 1

	)

2923 
	#åüngÀ_£t_dúe˘i⁄
(
dúe˘i⁄_v¨übÀ
, 
vÆue
) \

2924 
u32
 
dúe˘i⁄_v¨übÀ
 = (u32)(
vÆue
) >> 31; \

2925 if(
vÆue
 == 0) \

2926 
dúe˘i⁄_v¨übÀ
 = 2 \

2927 

	)

2928 
	#åüngÀ_ˇ£
(
dúe˘i⁄_a
, 
dúe˘i⁄_b
, 
dúe˘i⁄_c
, 
wödög
) \

2929 (
åüngÀ_y_dúe˘i⁄_
##
dúe˘i⁄_a
 | \

2930 (
åüngÀ_y_dúe˘i⁄_
##
dúe˘i⁄_b
 << 2) | \

2931 (
åüngÀ_y_dúe˘i⁄_
##
dúe˘i⁄_c
 << 4) | \

2932 (
åüngÀ_wödög_
##
wödög
 << 6)) \

2933 

	)

2934 
	$¥ï¨e_åüngÀ
(
psx_gpu_°ru˘
 *
psx_gpu
, 
vîãx_°ru˘
 *
vîãxes
,

2935 
vîãx_°ru˘
 *
vîãxes_out
[3])

2937 
s32
 
y_t›
, 
y_bŸtom
;

2938 
s32
 
åüngÀ_¨ó
;

2939 
u32
 
åüngÀ_wödög
 = 0;

2941 
vîãx_°ru˘
 *
a
 = &(
vîãxes
[0]);

2942 
vîãx_°ru˘
 *
b
 = &(
vîãxes
[1]);

2943 
vîãx_°ru˘
 *
c
 = &(
vîãxes
[2]);

2945 
åüngÀ_¨ó
 = 
	`åüngÀ_sig√d_¨ó_x2
(
a
->
x
,á->
y
, 
b
->x, b->y, 
c
->x, c->y);

2947 #ifde‡
PROFILE


2948 
åüngÀs
++;

2951 if(
åüngÀ_¨ó
 == 0)

2953 #ifde‡
PROFILE


2954 
åivül_ªje˘s
++;

2959 if(
b
->
y
 < 
a
->y)

2960 
	`vîãx_sw≠
(
a
, 
b
);

2962 if(
c
->
y
 < 
b
->y)

2964 
	`vîãx_sw≠
(
b
, 
c
);

2966 if(
b
->
y
 < 
a
->y)

2967 
	`vîãx_sw≠
(
a
, 
b
);

2970 
y_bŸtom
 = 
c
->
y
;

2971 
y_t›
 = 
a
->
y
;

2973 if((
y_bŸtom
 - 
y_t›
) >= 512)

2975 #ifde‡
PROFILE


2976 
åivül_ªje˘s
++;

2981 if(
åüngÀ_¨ó
 < 0)

2983 
åüngÀ_¨ó
 = -triangle_area;

2984 
åüngÀ_wödög
 ^= 1;

2985 
	`vîãx_sw≠
(
a
, 
c
);

2988 if(
b
->
x
 < 
a
->x)

2989 
	`vîãx_sw≠
(
a
, 
b
);

2991 if(
c
->
x
 < 
b
->x)

2993 
	`vîãx_sw≠
(
b
, 
c
);

2995 if(
b
->
x
 < 
a
->x)

2996 
	`vîãx_sw≠
(
a
, 
b
);

2999 if((
c
->
x
 - 
psx_gpu
->
off£t_x
Ë>1024 || (c->x - 
a
->x) >= 1024)

3001 #ifde‡
PROFILE


3002 
åivül_ªje˘s
++;

3007 if(
	`övÆid©e_ãxtuª_ˇche_ªgi⁄_võwp‹t
(
psx_gpu
, 
a
->
x
, 
y_t›
, 
c
->x,

3008 
y_bŸtom
) == 0)

3010 #ifde‡
PROFILE


3011 
åivül_ªje˘s
++;

3016 
psx_gpu
->
åüngÀ_¨ó
 =Åriangle_area;

3017 
psx_gpu
->
åüngÀ_wödög
 =Åriangle_winding;

3019 
vîãxes_out
[0] = 
a
;

3020 
vîãxes_out
[1] = 
b
;

3021 
vîãxes_out
[2] = 
c
;

3024 
	}
}

3026 
	$ªndî_åüngÀ_p
(
psx_gpu_°ru˘
 *
psx_gpu
,

3027 
vîãx_°ru˘
 *
vîãx_±rs
[3], 
u32
 
Êags
)

3029 
psx_gpu
->
num_•™s
 = 0;

3031 
vîãx_°ru˘
 *
a
 = 
vîãx_±rs
[0];

3032 
vîãx_°ru˘
 *
b
 = 
vîãx_±rs
[1];

3033 
vîãx_°ru˘
 *
c
 = 
vîãx_±rs
[2];

3035 
s32
 
y_dñè_a
 = 
b
->
y
 - 
a
->y;

3036 
s32
 
y_dñè_b
 = 
c
->
y
 - 
b
->y;

3037 
s32
 
y_dñè_c
 = 
c
->
y
 - 
a
->y;

3039 
	`åüngÀ_£t_dúe˘i⁄
(
y_dúe˘i⁄_a
, 
y_dñè_a
);

3040 
	`åüngÀ_£t_dúe˘i⁄
(
y_dúe˘i⁄_b
, 
y_dñè_b
);

3041 
	`åüngÀ_£t_dúe˘i⁄
(
y_dúe˘i⁄_c
, 
y_dñè_c
);

3043 
	`compuã_Æl_gødõ¡s
(
psx_gpu
, 
a
, 
b
, 
c
);

3045 
y_dúe˘i⁄_a
 | (
y_dúe˘i⁄_b
 << 2Ë| (
y_dúe˘i⁄_c
 << 4) |

3046 (
psx_gpu
->
åüngÀ_wödög
 << 6))

3048 
	`åüngÀ_ˇ£
(
up
, up, up, 
√g©ive
):

3049 
	`åüngÀ_ˇ£
(
up
, up, 
Ê©
, 
√g©ive
):

3050 
	`åüngÀ_ˇ£
(
up
, up, 
down
, 
√g©ive
):

3051 
	`£tup_•™s_up_right
(
psx_gpu
, 
a
, 
b
, 
c
);

3054 
	`åüngÀ_ˇ£
(
Ê©
, 
up
, up, 
√g©ive
):

3055 
	`åüngÀ_ˇ£
(
Ê©
, 
up
, fœt, 
√g©ive
):

3056 
	`åüngÀ_ˇ£
(
Ê©
, 
up
, 
down
, 
√g©ive
):

3057 
	`£tup_•™s_up_a
(
psx_gpu
, 
a
, 
b
, 
c
);

3060 
	`åüngÀ_ˇ£
(
down
, 
up
, up, 
√g©ive
):

3061 
	`£tup_•™s_up_down
(
psx_gpu
, 
a
, 
c
, 
b
);

3064 
	`åüngÀ_ˇ£
(
down
, 
up
, 
Ê©
, 
√g©ive
):

3065 
	`£tup_•™s_down_a
(
psx_gpu
, 
a
, 
c
, 
b
);

3068 
	`åüngÀ_ˇ£
(
down
, 
up
, down, 
√g©ive
):

3069 
	`£tup_•™s_down_right
(
psx_gpu
, 
a
, 
c
, 
b
);

3072 
	`åüngÀ_ˇ£
(
down
, 
Ê©
, 
up
, 
√g©ive
):

3073 
	`åüngÀ_ˇ£
(
down
, 
Ê©
, fœt, 
√g©ive
):

3074 
	`åüngÀ_ˇ£
(
down
, 
Ê©
, down, 
√g©ive
):

3075 
	`£tup_•™s_down_b
(
psx_gpu
, 
a
, 
b
, 
c
);

3078 
	`åüngÀ_ˇ£
(
down
, down, 
up
, 
√g©ive
):

3079 
	`åüngÀ_ˇ£
(
down
, down, 
Ê©
, 
√g©ive
):

3080 
	`åüngÀ_ˇ£
(
down
, down, down, 
√g©ive
):

3081 
	`£tup_•™s_down_À·
(
psx_gpu
, 
a
, 
b
, 
c
);

3084 
	`åüngÀ_ˇ£
(
up
, up, up, 
posôive
):

3085 
	`åüngÀ_ˇ£
(
up
, up, 
Ê©
, 
posôive
):

3086 
	`åüngÀ_ˇ£
(
up
, up, 
down
, 
posôive
):

3087 
	`£tup_•™s_up_À·
(
psx_gpu
, 
a
, 
b
, 
c
);

3090 
	`åüngÀ_ˇ£
(
up
, 
Ê©
, up, 
posôive
):

3091 
	`åüngÀ_ˇ£
(
up
, 
Ê©
, fœt, 
posôive
):

3092 
	`åüngÀ_ˇ£
(
up
, 
Ê©
, 
down
, 
posôive
):

3093 
	`£tup_•™s_up_b
(
psx_gpu
, 
a
, 
b
, 
c
);

3096 
	`åüngÀ_ˇ£
(
up
, 
down
, up, 
posôive
):

3097 
	`£tup_•™s_up_right
(
psx_gpu
, 
a
, 
c
, 
b
);

3100 
	`åüngÀ_ˇ£
(
up
, 
down
, 
Ê©
, 
posôive
):

3101 
	`£tup_•™s_up_a
(
psx_gpu
, 
a
, 
c
, 
b
);

3104 
	`åüngÀ_ˇ£
(
up
, 
down
, down, 
posôive
):

3105 
	`£tup_•™s_up_down
(
psx_gpu
, 
a
, 
b
, 
c
);

3108 
	`åüngÀ_ˇ£
(
Ê©
, 
down
, 
up
, 
posôive
):

3109 
	`åüngÀ_ˇ£
(
Ê©
, 
down
, fœt, 
posôive
):

3110 
	`åüngÀ_ˇ£
(
Ê©
, 
down
, down, 
posôive
):

3111 
	`£tup_•™s_down_a
(
psx_gpu
, 
a
, 
b
, 
c
);

3114 
	`åüngÀ_ˇ£
(
down
, down, 
up
, 
posôive
):

3115 
	`åüngÀ_ˇ£
(
down
, down, 
Ê©
, 
posôive
):

3116 
	`åüngÀ_ˇ£
(
down
, down, down, 
posôive
):

3117 
	`£tup_•™s_down_right
(
psx_gpu
, 
a
, 
b
, 
c
);

3121 #ifde‡
PROFILE


3122 
•™s
 +
psx_gpu
->
num_•™s
;

3125 if(
	`u∆ikñy
(
psx_gpu
->
ªndî_mode
 & 
RENDER_INTERLACE_ENABLED
))

3127 
u32
 
i
;

3129 if(
psx_gpu
->
ªndî_mode
 & 
RENDER_INTERLACE_ODD
)

3131 
i
 = 0; i < 
psx_gpu
->
num_•™s
; i++)

3133 if((
psx_gpu
->
•™_edge_d©a
[
i
].
y
 & 1) == 0)

3134 
psx_gpu
->
•™_edge_d©a
[
i
].
num_blocks
 = 0;

3139 
i
 = 0; i < 
psx_gpu
->
num_•™s
; i++)

3141 if(
psx_gpu
->
•™_edge_d©a
[
i
].
y
 & 1)

3142 
psx_gpu
->
•™_edge_d©a
[
i
].
num_blocks
 = 0;

3147 
u32
 
ªndî_°©e
 = 
Êags
 &

3148 (
RENDER_FLAGS_MODULATE_TEXELS
 | 
RENDER_FLAGS_BLEND
 |

3149 
RENDER_FLAGS_TEXTURE_MAP
 | 
RENDER_FLAGS_SHADE
);

3150 
ªndî_°©e
 |
psx_gpu
->
ªndî_°©e_ba£
;

3152 if((
psx_gpu
->
ªndî_°©e
 !=Ñender_state) ||

3153 (
psx_gpu
->
¥imôive_ty≥
 !
PRIMITIVE_TYPE_TRIANGLE
))

3155 
psx_gpu
->
ªndî_°©e
 =Ñender_state;

3156 
	`Êush_ªndî_block_buf„r
(
psx_gpu
);

3157 #ifde‡
PROFILE


3158 
°©e_ch™ges
++;

3162 
psx_gpu
->
¥imôive_ty≥
 = 
PRIMITIVE_TYPE_TRIANGLE
;

3164 
psx_gpu
->
ªndî_block_h™dÀr
 =

3165 &(
ªndî_åüngÀ_block_h™dÀrs
[
ªndî_°©e
]);

3166 ((
£tup_blocks_fun˘i⁄_ty≥
 *)
psx_gpu
->
ªndî_block_h™dÀr
->
£tup_blocks
)

3167 (
psx_gpu
);

3168 
	}
}

3170 
	$ªndî_åüngÀ
(
psx_gpu_°ru˘
 *
psx_gpu
, 
vîãx_°ru˘
 *
vîãxes
,

3171 
u32
 
Êags
)

3173 
vîãx_°ru˘
 *
vîãx_±rs
[3];

3174 i‡(
	`¥ï¨e_åüngÀ
(
psx_gpu
, 
vîãxes
, 
vîãx_±rs
))

3175 
	`ªndî_åüngÀ_p
(
psx_gpu
, 
vîãx_±rs
, 
Êags
);

3176 
	}
}

3179 
ãxtuª_•rôe_blocks_8bµ
(
psx_gpu_°ru˘
 *
psx_gpu
);

3181 #i‚de‡
NEON_BUILD


3183 
	$ãxtuª_•rôe_blocks_8bµ
(
psx_gpu_°ru˘
 *
psx_gpu
)

3185 
block_°ru˘
 *
block
 = 
psx_gpu
->
blocks
;

3186 
u32
 
num_blocks
 = 
psx_gpu
->num_blocks;

3188 
vec_8x16u
 
ãxñs
;

3189 
vec_8x8u
 
ãxñ_ödexes
;

3191 
u16
 *
˛ut_±r
 = 
psx_gpu
->clut_ptr;

3192 
u32
 
i
;

3194 
num_blocks
)

3196 
ãxñ_ödexes
 = 
block
->
r
;

3198 
i
 = 0; i < 8; i++)

3200 
ãxñs
.
e
[
i
] = 
˛ut_±r
[
ãxñ_ödexes
.e[i]];

3203 
block
->
ãxñs
 =Åexels;

3205 
num_blocks
--;

3206 
block
++;

3208 
	}
}

3213 
	#£tup_•rôe_tûed_öôülize_4bµ_˛ut
() \

3214 
u16
 *
˛ut_±r
 = 
psx_gpu
->clut_ptr; \

3215 
vec_8x16u
 
˛ut_a
, 
˛ut_b
; \

3216 
vec_16x8u
 
˛ut_low
, 
˛ut_high
; \

3218 
	`lﬂd_8x16b
(
˛ut_a
, 
˛ut_±r
); \

3219 
	`lﬂd_8x16b
(
˛ut_b
, 
˛ut_±r
 + 8); \

3220 
	`unzù_16x8b
(
˛ut_low
, 
˛ut_high
, 
˛ut_a
, 
˛ut_b
) \

3221 

	)

3222 
	#£tup_•rôe_tûed_öôülize_4bµ
() \

3223 
	`£tup_•rôe_tûed_öôülize_4bµ_˛ut
(); \

3225 if(
psx_gpu
->
cuºít_ãxtuª_mask
 &Ösx_gpu->
dúty_ãxtuªs_4bµ_mask
) \

3226 
	`upd©e_ãxtuª_4bµ_ˇche
(
psx_gpu
) \

3227 

	)

3228 
	#£tup_•rôe_tûed_öôülize_8bµ
() \

3229 if(
psx_gpu
->
cuºít_ãxtuª_mask
 &Ösx_gpu->
dúty_ãxtuªs_8bµ_mask
) \

3230 
	`upd©e_ãxtuª_8bµ_ˇche
(
psx_gpu
) \

3231 

	)

3233 
	#£tup_•rôe_tûe_„tch_ãxñ_block_8bµ
(
off£t
) \

3234 
ãxtuª_block_±r
 = 
psx_gpu
->
ãxtuª_∑ge_±r
 + \

3235 ((
ãxtuª_off£t
 + 
off£t
Ë& 
ãxtuª_mask
); \

3237 
	`lﬂd_64b
(
ãxñs
, 
ãxtuª_block_±r
) \

3238 

	)

3240 
	#£tup_•rôe_tûe_add_blocks
(
tûe_num_blocks
) \

3241 
num_blocks
 +
tûe_num_blocks
; \

3242 
•rôe_blocks
 +
tûe_num_blocks
; \

3244 if(
num_blocks
 > 
MAX_BLOCKS
) \

3246 
	`Êush_ªndî_block_buf„r
(
psx_gpu
); \

3247 
num_blocks
 = 
tûe_num_blocks
; \

3248 
block
 = 
psx_gpu
->
blocks
; \

3250 

	)

3251 
	#£tup_•rôe_tûe_fuŒ_4bµ
(
edge
) \

3253 
vec_8x8u
 
ãxñs_low
, 
ãxñs_high
; \

3254 
vec_8x16u
 
pixñs
; \

3255 
	`£tup_•rôe_tûe_add_blocks
(
sub_tûe_height
 * 2); \

3257 
sub_tûe_height
) \

3259 
	`£tup_•rôe_tûe_„tch_ãxñ_block_8bµ
(0); \

3260 
	`tbl_16
(
ãxñs_low
, 
ãxñs
, 
˛ut_low
); \

3261 
	`tbl_16
(
ãxñs_high
, 
ãxñs
, 
˛ut_high
); \

3262 
	`zù_8x16b
(
pixñs
, 
ãxñs_low
, 
ãxñs_high
); \

3264 
block
->
ãxñs
 = 
pixñs
; \

3265 
block
->
døw_mask_bôs
 = 
À·_mask_bôs
; \

3266 
block
->
fb_±r
 = fb_ptr; \

3267 
block
++; \

3269 
	`£tup_•rôe_tûe_„tch_ãxñ_block_8bµ
(8); \

3270 
	`tbl_16
(
ãxñs_low
, 
ãxñs
, 
˛ut_low
); \

3271 
	`tbl_16
(
ãxñs_high
, 
ãxñs
, 
˛ut_high
); \

3272 
	`zù_8x16b
(
pixñs
, 
ãxñs_low
, 
ãxñs_high
); \

3274 
block
->
ãxñs
 = 
pixñs
; \

3275 
block
->
døw_mask_bôs
 = 
right_mask_bôs
; \

3276 
block
->
fb_±r
 = fb_ptr + 8; \

3277 
block
++; \

3279 
fb_±r
 += 1024; \

3280 
ãxtuª_off£t
 += 0x10; \

3281 
sub_tûe_height
--; \

3283 
ãxtuª_off£t
 += 0xF00; \

3284 
psx_gpu
->
num_blocks
 =Çum_blocks; \

3286 

	)

3287 
	#£tup_•rôe_tûe_hÆf_4bµ
(
edge
) \

3289 
vec_8x8u
 
ãxñs_low
, 
ãxñs_high
; \

3290 
vec_8x16u
 
pixñs
; \

3291 
	`£tup_•rôe_tûe_add_blocks
(
sub_tûe_height
); \

3293 
sub_tûe_height
) \

3295 
	`£tup_•rôe_tûe_„tch_ãxñ_block_8bµ
(0); \

3296 
	`tbl_16
(
ãxñs_low
, 
ãxñs
, 
˛ut_low
); \

3297 
	`tbl_16
(
ãxñs_high
, 
ãxñs
, 
˛ut_high
); \

3298 
	`zù_8x16b
(
pixñs
, 
ãxñs_low
, 
ãxñs_high
); \

3300 
block
->
ãxñs
 = 
pixñs
; \

3301 
block
->
døw_mask_bôs
 = 
edge
##
_mask_bôs
; \

3302 
block
->
fb_±r
 = fb_ptr; \

3303 
block
++; \

3305 
fb_±r
 += 1024; \

3306 
ãxtuª_off£t
 += 0x10; \

3307 
sub_tûe_height
--; \

3309 
ãxtuª_off£t
 += 0xF00; \

3310 
psx_gpu
->
num_blocks
 =Çum_blocks; \

3312 

	)

3314 
	#£tup_•rôe_tûe_fuŒ_8bµ
(
edge
) \

3316 
	`£tup_•rôe_tûe_add_blocks
(
sub_tûe_height
 * 2); \

3318 
sub_tûe_height
) \

3320 
	`£tup_•rôe_tûe_„tch_ãxñ_block_8bµ
(0); \

3321 
block
->
r
 = 
ãxñs
; \

3322 
block
->
døw_mask_bôs
 = 
À·_mask_bôs
; \

3323 
block
->
fb_±r
 = fb_ptr; \

3324 
block
++; \

3326 
	`£tup_•rôe_tûe_„tch_ãxñ_block_8bµ
(8); \

3327 
block
->
r
 = 
ãxñs
; \

3328 
block
->
døw_mask_bôs
 = 
right_mask_bôs
; \

3329 
block
->
fb_±r
 = fb_ptr + 8; \

3330 
block
++; \

3332 
fb_±r
 += 1024; \

3333 
ãxtuª_off£t
 += 0x10; \

3334 
sub_tûe_height
--; \

3336 
ãxtuª_off£t
 += 0xF00; \

3337 
psx_gpu
->
num_blocks
 =Çum_blocks; \

3339 

	)

3340 
	#£tup_•rôe_tûe_hÆf_8bµ
(
edge
) \

3342 
	`£tup_•rôe_tûe_add_blocks
(
sub_tûe_height
 * 2); \

3344 
sub_tûe_height
) \

3346 
	`£tup_•rôe_tûe_„tch_ãxñ_block_8bµ
(0); \

3347 
block
->
r
 = 
ãxñs
; \

3348 
block
->
døw_mask_bôs
 = 
edge
##
_mask_bôs
; \

3349 
block
->
fb_±r
 = fb_ptr; \

3350 
block
++; \

3352 
fb_±r
 += 1024; \

3353 
ãxtuª_off£t
 += 0x10; \

3354 
sub_tûe_height
--; \

3356 
ãxtuª_off£t
 += 0xF00; \

3357 
psx_gpu
->
num_blocks
 =Çum_blocks; \

3359 

	)

3361 
	#£tup_•rôe_tûe_cﬁumn_edge_¥e_adju°_hÆf_right
() \

3362 
ãxtuª_off£t
 = 
ãxtuª_off£t_ba£
 + 8; \

3363 
fb_±r
 += 8 \

3364 

	)

3365 
	#£tup_•rôe_tûe_cﬁumn_edge_¥e_adju°_hÆf_À·
() \

3366 
ãxtuª_off£t
 = 
ãxtuª_off£t_ba£
 \

3367 

	)

3368 
	#£tup_•rôe_tûe_cﬁumn_edge_¥e_adju°_hÆf
(
edge
) \

3369 
£tup_•rôe_tûe_cﬁumn_edge_¥e_adju°_hÆf_
##
	`edge
() \

3370 

	)

3371 
	#£tup_•rôe_tûe_cﬁumn_edge_¥e_adju°_fuŒ
(
edge
) \

3372 
ãxtuª_off£t
 = 
ãxtuª_off£t_ba£
 \

3373 

	)

3374 
	#£tup_•rôe_tûe_cﬁumn_edge_po°_adju°_hÆf_right
() \

3375 
fb_±r
 -= 8 \

3376 

	)

3377 
	#£tup_•rôe_tûe_cﬁumn_edge_po°_adju°_hÆf_À·
() \

3378 

	)

3379 
	#£tup_•rôe_tûe_cﬁumn_edge_po°_adju°_hÆf
(
edge
) \

3380 
£tup_•rôe_tûe_cﬁumn_edge_po°_adju°_hÆf_
##
	`edge
() \

3381 

	)

3382 
	#£tup_•rôe_tûe_cﬁumn_edge_po°_adju°_fuŒ
(
edge
) \

3383 

	)

3385 
	#£tup_•rôe_tûe_cﬁumn_height_sögÀ
(
edge_mode
, 
edge
, 
ãxtuª_mode
, \

3386 
x4mode
) \

3389 
sub_tûe_height
 = 
cﬁumn_d©a
; \

3390 
£tup_•rôe_tûe_cﬁumn_edge_¥e_adju°_
##
edge_mode
##
	`x4mode
(
edge
); \

3391 
£tup_•rôe_tûe_
##
edge_mode
##
_
##
ãxtuª_mode
##
	`x4mode
(
edge
); \

3392 
£tup_•rôe_tûe_cﬁumn_edge_po°_adju°_
##
edge_mode
##
	`x4mode
(
edge
); \

3394 

	)

3395 
	#£tup_•rôe_tûe_cﬁumn_height_mu…i
(
edge_mode
, 
edge
, 
ãxtuª_mode
, \

3396 
x4mode
) \

3399 
u32
 
tûes_ªmaöög
 = 
cﬁumn_d©a
 >> 16; \

3400 
sub_tûe_height
 = 
cﬁumn_d©a
 & 0xFF; \

3401 
£tup_•rôe_tûe_cﬁumn_edge_¥e_adju°_
##
edge_mode
##
	`x4mode
(
edge
); \

3402 
£tup_•rôe_tûe_
##
edge_mode
##
_
##
ãxtuª_mode
##
	`x4mode
(
edge
); \

3403 
tûes_ªmaöög
 -= 1; \

3405 
tûes_ªmaöög
) \

3407 
sub_tûe_height
 = 16; \

3408 
£tup_•rôe_tûe_
##
edge_mode
##
_
##
ãxtuª_mode
##
	`x4mode
(
edge
); \

3409 
tûes_ªmaöög
--; \

3412 
sub_tûe_height
 = (
cﬁumn_d©a
 >> 8) & 0xFF; \

3413 
£tup_•rôe_tûe_
##
edge_mode
##
_
##
ãxtuª_mode
##
	`x4mode
(
edge
); \

3414 
£tup_•rôe_tûe_cﬁumn_edge_po°_adju°_
##
edge_mode
##
	`x4mode
(
edge
); \

3416 

	)

3418 
	#£tup_•rôe_cﬁumn_d©a_sögÀ
() \

3419 
cﬁumn_d©a
 = 
height
 \

3420 

	)

3421 
	#£tup_•rôe_cﬁumn_d©a_mu…i
() \

3422 
cﬁumn_d©a
 = 16 - 
off£t_v
; \

3423 
cﬁumn_d©a
 |((
height_rounded
 & 0xF) + 1) << 8; \

3424 
cﬁumn_d©a
 |(
tûe_height
 - 1) << 16 \

3425 

	)

3427 
	#RIGHT_MASK_BIT_SHIFT
 8

	)

3428 
	#RIGHT_MASK_BIT_SHIFT_4x
 16

	)

3430 
	#£tup_•rôe_tûe_cﬁumn_width_sögÀ
(
ãxtuª_mode
, 
mu…i_height
, \

3431 
edge_mode
, 
edge
, 
x4mode
) \

3433 
£tup_•rôe_cﬁumn_d©a_
##
	`mu…i_height
(); \

3434 
À·_mask_bôs
 = 
À·_block_mask
 | 
right_block_mask
; \

3435 
right_mask_bôs
 = 
À·_mask_bôs
 >> 
RIGHT_MASK_BIT_SHIFT
##
x4mode
; \

3437 
£tup_•rôe_tûe_cﬁumn_height_
##
	`mu…i_height
(
edge_mode
, 
edge
, \

3438 
ãxtuª_mode
, 
x4mode
); \

3440 

	)

3441 
	#£tup_•rôe_tûed_adv™˚_cﬁumn
() \

3442 
ãxtuª_off£t_ba£
 += 0x100; \

3443 if((
ãxtuª_off£t_ba£
 & 0xF00) == 0) \

3444 
ãxtuª_off£t_ba£
 -= (0x100 + 0xF00) \

3445 

	)

3446 
	#FB_PTR_MULTIPLIER
 1

	)

3447 
	#FB_PTR_MULTIPLIER_4x
 2

	)

3449 
	#£tup_•rôe_tûe_cﬁumn_width_mu…i
(
ãxtuª_mode
, 
mu…i_height
, \

3450 
À·_mode
, 
right_mode
, 
x4mode
) \

3452 
£tup_•rôe_cﬁumn_d©a_
##
	`mu…i_height
(); \

3453 
s32
 
fb_±r_adv™˚_cﬁumn
 = (16 - (1024 * 
height
)) \

3454 * 
FB_PTR_MULTIPLIER
##
x4mode
; \

3456 
tûe_width
 -= 2; \

3457 
À·_mask_bôs
 = 
À·_block_mask
; \

3458 
right_mask_bôs
 = 
À·_mask_bôs
 >> 
RIGHT_MASK_BIT_SHIFT
##
x4mode
; \

3460 
£tup_•rôe_tûe_cﬁumn_height_
##
	`mu…i_height
(
À·_mode
, 
right
, \

3461 
ãxtuª_mode
, 
x4mode
); \

3462 
fb_±r
 +
fb_±r_adv™˚_cﬁumn
; \

3464 
À·_mask_bôs
 = 0x00; \

3465 
right_mask_bôs
 = 0x00; \

3467 
tûe_width
) \

3469 
	`£tup_•rôe_tûed_adv™˚_cﬁumn
(); \

3470 
£tup_•rôe_tûe_cﬁumn_height_
##
	`mu…i_height
(
fuŒ
, 
n⁄e
, \

3471 
ãxtuª_mode
, 
x4mode
); \

3472 
fb_±r
 +
fb_±r_adv™˚_cﬁumn
; \

3473 
tûe_width
--; \

3476 
À·_mask_bôs
 = 
right_block_mask
; \

3477 
right_mask_bôs
 = 
À·_mask_bôs
 >> 
RIGHT_MASK_BIT_SHIFT
##
x4mode
; \

3479 
	`£tup_•rôe_tûed_adv™˚_cﬁumn
(); \

3480 
£tup_•rôe_tûe_cﬁumn_height_
##
	`mu…i_height
(
right_mode
, 
À·
, \

3481 
ãxtuª_mode
, 
x4mode
); \

3483 

	)

3486 
	#£tup_•rôe_tûed_öôülize_4bµ_4x
() \

3487 
	`£tup_•rôe_tûed_öôülize_4bµ_˛ut
() \

3488 

	)

3489 
	#£tup_•rôe_tûed_öôülize_8bµ_4x
() \

3490 

	)

3492 
	#£tup_•rôe_tûe_fuŒ_4bµ_4x
(
edge
) \

3494 
vec_8x8u
 
ãxñs_low
, 
ãxñs_high
; \

3495 
vec_8x16u
 
pixñs
, 
pixñs_wide
; \

3496 
	`£tup_•rôe_tûe_add_blocks
(
sub_tûe_height
 * 2 * 4); \

3497 
u32
 
À·_mask_bôs_a
 = 
À·_mask_bôs
 & 0xFF; \

3498 
u32
 
À·_mask_bôs_b
 = 
À·_mask_bôs
 >> 8; \

3499 
u32
 
right_mask_bôs_a
 = 
right_mask_bôs
 & 0xFF; \

3500 
u32
 
right_mask_bôs_b
 = 
right_mask_bôs
 >> 8; \

3502 
sub_tûe_height
) \

3504 
	`£tup_•rôe_tûe_„tch_ãxñ_block_8bµ
(0); \

3505 
	`tbl_16
(
ãxñs_low
, 
ãxñs
, 
˛ut_low
); \

3506 
	`tbl_16
(
ãxñs_high
, 
ãxñs
, 
˛ut_high
); \

3507 
	`zù_8x16b
(
pixñs
, 
ãxñs_low
, 
ãxñs_high
); \

3509 
	`zù_4x32b
(
	`ve˘‹_ˇ°
(
vec_4x32u
, 
pixñs_wide
), 
pixñs
.
low
,Öixels.low); \

3510 
block
->
ãxñs
 = 
pixñs_wide
; \

3511 
block
->
døw_mask_bôs
 = 
À·_mask_bôs_a
; \

3512 
block
->
fb_±r
 = fb_ptr; \

3513 
block
++; \

3515 
block
->
ãxñs
 = 
pixñs_wide
; \

3516 
block
->
døw_mask_bôs
 = 
À·_mask_bôs_a
; \

3517 
block
->
fb_±r
 = fb_ptr + 1024; \

3518 
block
++; \

3520 
	`zù_4x32b
(
	`ve˘‹_ˇ°
(
vec_4x32u
, 
pixñs_wide
), 
pixñs
.
high
,Öixels.high); \

3521 
block
->
ãxñs
 = 
pixñs_wide
; \

3522 
block
->
døw_mask_bôs
 = 
À·_mask_bôs_b
; \

3523 
block
->
fb_±r
 = fb_ptr + 8; \

3524 
block
++; \

3526 
block
->
ãxñs
 = 
pixñs_wide
; \

3527 
block
->
døw_mask_bôs
 = 
À·_mask_bôs_b
; \

3528 
block
->
fb_±r
 = fb_ptr + 1024 + 8; \

3529 
block
++; \

3531 
	`£tup_•rôe_tûe_„tch_ãxñ_block_8bµ
(8); \

3532 
	`tbl_16
(
ãxñs_low
, 
ãxñs
, 
˛ut_low
); \

3533 
	`tbl_16
(
ãxñs_high
, 
ãxñs
, 
˛ut_high
); \

3534 
	`zù_8x16b
(
pixñs
, 
ãxñs_low
, 
ãxñs_high
); \

3536 
	`zù_4x32b
(
	`ve˘‹_ˇ°
(
vec_4x32u
, 
pixñs_wide
), 
pixñs
.
low
,Öixels.low); \

3537 
block
->
ãxñs
 = 
pixñs_wide
; \

3538 
block
->
døw_mask_bôs
 = 
right_mask_bôs_a
; \

3539 
block
->
fb_±r
 = fb_ptr + 16; \

3540 
block
++; \

3542 
block
->
ãxñs
 = 
pixñs_wide
; \

3543 
block
->
døw_mask_bôs
 = 
right_mask_bôs_a
; \

3544 
block
->
fb_±r
 = fb_ptr + 1024 + 16; \

3545 
block
++; \

3547 
	`zù_4x32b
(
	`ve˘‹_ˇ°
(
vec_4x32u
, 
pixñs_wide
), 
pixñs
.
high
,Öixels.high); \

3548 
block
->
ãxñs
 = 
pixñs_wide
; \

3549 
block
->
døw_mask_bôs
 = 
right_mask_bôs_b
; \

3550 
block
->
fb_±r
 = fb_ptr + 24; \

3551 
block
++; \

3553 
block
->
ãxñs
 = 
pixñs_wide
; \

3554 
block
->
døw_mask_bôs
 = 
right_mask_bôs_b
; \

3555 
block
->
fb_±r
 = fb_ptr + 1024 + 24; \

3556 
block
++; \

3558 
fb_±r
 += 2048; \

3559 
ãxtuª_off£t
 += 0x10; \

3560 
sub_tûe_height
--; \

3562 
ãxtuª_off£t
 += 0xF00; \

3563 
psx_gpu
->
num_blocks
 =Çum_blocks; \

3565 

	)

3566 
	#£tup_•rôe_tûe_hÆf_4bµ_4x
(
edge
) \

3568 
vec_8x8u
 
ãxñs_low
, 
ãxñs_high
; \

3569 
vec_8x16u
 
pixñs
, 
pixñs_wide
; \

3570 
	`£tup_•rôe_tûe_add_blocks
(
sub_tûe_height
 * 4); \

3571 
u32
 
edge
##
_mask_bôs_a
 =Édge##
_mask_bôs
 & 0xFF; \

3572 
u32
 
edge
##
_mask_bôs_b
 =Édge##
_mask_bôs
 >> 8; \

3574 
sub_tûe_height
) \

3576 
	`£tup_•rôe_tûe_„tch_ãxñ_block_8bµ
(0); \

3577 
	`tbl_16
(
ãxñs_low
, 
ãxñs
, 
˛ut_low
); \

3578 
	`tbl_16
(
ãxñs_high
, 
ãxñs
, 
˛ut_high
); \

3579 
	`zù_8x16b
(
pixñs
, 
ãxñs_low
, 
ãxñs_high
); \

3581 
	`zù_4x32b
(
	`ve˘‹_ˇ°
(
vec_4x32u
, 
pixñs_wide
), 
pixñs
.
low
,Öixels.low); \

3582 
block
->
ãxñs
 = 
pixñs_wide
; \

3583 
block
->
døw_mask_bôs
 = 
edge
##
_mask_bôs_a
; \

3584 
block
->
fb_±r
 = fb_ptr; \

3585 
block
++; \

3587 
block
->
ãxñs
 = 
pixñs_wide
; \

3588 
block
->
døw_mask_bôs
 = 
edge
##
_mask_bôs_a
; \

3589 
block
->
fb_±r
 = fb_ptr + 1024; \

3590 
block
++; \

3592 
	`zù_4x32b
(
	`ve˘‹_ˇ°
(
vec_4x32u
, 
pixñs_wide
), 
pixñs
.
high
,Öixels.high); \

3593 
block
->
ãxñs
 = 
pixñs_wide
; \

3594 
block
->
døw_mask_bôs
 = 
edge
##
_mask_bôs_b
; \

3595 
block
->
fb_±r
 = fb_ptr + 8; \

3596 
block
++; \

3598 
block
->
ãxñs
 = 
pixñs_wide
; \

3599 
block
->
døw_mask_bôs
 = 
edge
##
_mask_bôs_b
; \

3600 
block
->
fb_±r
 = fb_ptr + 1024 + 8; \

3601 
block
++; \

3603 
fb_±r
 += 2048; \

3604 
ãxtuª_off£t
 += 0x10; \

3605 
sub_tûe_height
--; \

3607 
ãxtuª_off£t
 += 0xF00; \

3608 
psx_gpu
->
num_blocks
 =Çum_blocks; \

3610 

	)

3612 
	#£tup_•rôe_tûe_fuŒ_8bµ_4x
(
edge
) \

3614 
	`£tup_•rôe_tûe_add_blocks
(
sub_tûe_height
 * 2 * 4); \

3615 
vec_16x8u
 
ãxñs_wide
; \

3616 
u32
 
À·_mask_bôs_a
 = 
À·_mask_bôs
 & 0xFF; \

3617 
u32
 
À·_mask_bôs_b
 = 
À·_mask_bôs
 >> 8; \

3618 
u32
 
right_mask_bôs_a
 = 
right_mask_bôs
 & 0xFF; \

3619 
u32
 
right_mask_bôs_b
 = 
right_mask_bôs
 >> 8; \

3621 
sub_tûe_height
) \

3623 
	`£tup_•rôe_tûe_„tch_ãxñ_block_8bµ
(0); \

3624 
	`zù_8x16b
(
	`ve˘‹_ˇ°
(
vec_8x16u
, 
ãxñs_wide
), 
ãxñs
,Åexels); \

3625 
block
->
r
 = 
ãxñs_wide
.
low
; \

3626 
block
->
døw_mask_bôs
 = 
À·_mask_bôs_a
; \

3627 
block
->
fb_±r
 = fb_ptr; \

3628 
block
++; \

3630 
block
->
r
 = 
ãxñs_wide
.
low
; \

3631 
block
->
døw_mask_bôs
 = 
À·_mask_bôs_a
; \

3632 
block
->
fb_±r
 = fb_ptr + 1024; \

3633 
block
++; \

3635 
block
->
r
 = 
ãxñs_wide
.
high
; \

3636 
block
->
døw_mask_bôs
 = 
À·_mask_bôs_b
; \

3637 
block
->
fb_±r
 = fb_ptr + 8; \

3638 
block
++; \

3640 
block
->
r
 = 
ãxñs_wide
.
high
; \

3641 
block
->
døw_mask_bôs
 = 
À·_mask_bôs_b
; \

3642 
block
->
fb_±r
 = fb_ptr + 1024 + 8; \

3643 
block
++; \

3645 
	`£tup_•rôe_tûe_„tch_ãxñ_block_8bµ
(8); \

3646 
	`zù_8x16b
(
	`ve˘‹_ˇ°
(
vec_8x16u
, 
ãxñs_wide
), 
ãxñs
,Åexels); \

3647 
block
->
r
 = 
ãxñs_wide
.
low
; \

3648 
block
->
døw_mask_bôs
 = 
right_mask_bôs_a
; \

3649 
block
->
fb_±r
 = fb_ptr + 16; \

3650 
block
++; \

3652 
block
->
r
 = 
ãxñs_wide
.
low
; \

3653 
block
->
døw_mask_bôs
 = 
right_mask_bôs_a
; \

3654 
block
->
fb_±r
 = fb_ptr + 1024 + 16; \

3655 
block
++; \

3657 
block
->
r
 = 
ãxñs_wide
.
high
; \

3658 
block
->
døw_mask_bôs
 = 
right_mask_bôs_b
; \

3659 
block
->
fb_±r
 = fb_ptr + 24; \

3660 
block
++; \

3662 
block
->
r
 = 
ãxñs_wide
.
high
; \

3663 
block
->
døw_mask_bôs
 = 
right_mask_bôs_b
; \

3664 
block
->
fb_±r
 = fb_ptr + 24 + 1024; \

3665 
block
++; \

3667 
fb_±r
 += 2048; \

3668 
ãxtuª_off£t
 += 0x10; \

3669 
sub_tûe_height
--; \

3671 
ãxtuª_off£t
 += 0xF00; \

3672 
psx_gpu
->
num_blocks
 =Çum_blocks; \

3674 

	)

3675 
	#£tup_•rôe_tûe_hÆf_8bµ_4x
(
edge
) \

3677 
	`£tup_•rôe_tûe_add_blocks
(
sub_tûe_height
 * 4); \

3678 
vec_16x8u
 
ãxñs_wide
; \

3679 
u32
 
edge
##
_mask_bôs_a
 =Édge##
_mask_bôs
 & 0xFF; \

3680 
u32
 
edge
##
_mask_bôs_b
 =Édge##
_mask_bôs
 >> 8; \

3682 
sub_tûe_height
) \

3684 
	`£tup_•rôe_tûe_„tch_ãxñ_block_8bµ
(0); \

3685 
	`zù_8x16b
(
	`ve˘‹_ˇ°
(
vec_8x16u
, 
ãxñs_wide
), 
ãxñs
,Åexels); \

3686 
block
->
r
 = 
ãxñs_wide
.
low
; \

3687 
block
->
døw_mask_bôs
 = 
edge
##
_mask_bôs_a
; \

3688 
block
->
fb_±r
 = fb_ptr; \

3689 
block
++; \

3691 
block
->
r
 = 
ãxñs_wide
.
low
; \

3692 
block
->
døw_mask_bôs
 = 
edge
##
_mask_bôs_a
; \

3693 
block
->
fb_±r
 = fb_ptr + 1024; \

3694 
block
++; \

3696 
block
->
r
 = 
ãxñs_wide
.
high
; \

3697 
block
->
døw_mask_bôs
 = 
edge
##
_mask_bôs_b
; \

3698 
block
->
fb_±r
 = fb_ptr + 8; \

3699 
block
++; \

3701 
block
->
r
 = 
ãxñs_wide
.
high
; \

3702 
block
->
døw_mask_bôs
 = 
edge
##
_mask_bôs_b
; \

3703 
block
->
fb_±r
 = fb_ptr + 8 + 1024; \

3704 
block
++; \

3706 
fb_±r
 += 2048; \

3707 
ãxtuª_off£t
 += 0x10; \

3708 
sub_tûe_height
--; \

3710 
ãxtuª_off£t
 += 0xF00; \

3711 
psx_gpu
->
num_blocks
 =Çum_blocks; \

3713 

	)

3715 
	#£tup_•rôe_tûe_cﬁumn_edge_¥e_adju°_hÆf_right_4x
() \

3716 
ãxtuª_off£t
 = 
ãxtuª_off£t_ba£
 + 8; \

3717 
fb_±r
 += 16 \

3718 

	)

3719 
	#£tup_•rôe_tûe_cﬁumn_edge_¥e_adju°_hÆf_À·_4x
() \

3720 
ãxtuª_off£t
 = 
ãxtuª_off£t_ba£
 \

3721 

	)

3722 
	#£tup_•rôe_tûe_cﬁumn_edge_¥e_adju°_hÆf_4x
(
edge
) \

3723 
£tup_•rôe_tûe_cﬁumn_edge_¥e_adju°_hÆf_
##
edge
##
	`_4x
() \

3724 

	)

3725 
	#£tup_•rôe_tûe_cﬁumn_edge_¥e_adju°_fuŒ_4x
(
edge
) \

3726 
ãxtuª_off£t
 = 
ãxtuª_off£t_ba£
 \

3727 

	)

3728 
	#£tup_•rôe_tûe_cﬁumn_edge_po°_adju°_hÆf_right_4x
() \

3729 
fb_±r
 -= 16 \

3730 

	)

3731 
	#£tup_•rôe_tûe_cﬁumn_edge_po°_adju°_hÆf_À·_4x
() \

3732 

	)

3733 
	#£tup_•rôe_tûe_cﬁumn_edge_po°_adju°_hÆf_4x
(
edge
) \

3734 
£tup_•rôe_tûe_cﬁumn_edge_po°_adju°_hÆf_
##
edge
##
	`_4x
() \

3735 

	)

3736 
	#£tup_•rôe_tûe_cﬁumn_edge_po°_adju°_fuŒ_4x
(
edge
) \

3737 

	)

3739 
	#£tup_•rôe_off£t_u_adju°
() \

3740 

	)

3741 
	#£tup_•rôe_com≠ª_À·_block_mask
() \

3742 ((
À·_block_mask
 & 0xFF) == 0xFF) \

3743 

	)

3744 
	#£tup_•rôe_com≠ª_right_block_mask
() \

3745 (((
right_block_mask
 >> 8) & 0xFF) == 0xFF) \

3746 

	)

3748 
	#£tup_•rôe_off£t_u_adju°_4x
() \

3749 
off£t_u
 *= 2; \

3750 
off£t_u_right
 = offset_u_right * 2 + 1 \

3751 

	)

3752 
	#£tup_•rôe_com≠ª_À·_block_mask_4x
() \

3753 ((
À·_block_mask
 & 0xFFFF) == 0xFFFF) \

3754 

	)

3755 
	#£tup_•rôe_com≠ª_right_block_mask_4x
() \

3756 (((
right_block_mask
 >> 16) & 0xFFFF) == 0xFFFF) \

3757 

	)

3759 
	#£tup_•rôe_tûed_buûdî
(
ãxtuª_mode
, 
x4mode
) \

3760 
£tup_•rôe_
##
ãxtuª_mode
##
	`x4mode
(
psx_gpu_°ru˘
 *
psx_gpu
, 
s32
 
x
, s32 
y
,\

3761 
s32
 
u
, s32 
v
, s32 
width
, s32 
height
, 
u32
 
cﬁ‹
) \

3763 
s32
 
off£t_u
 = 
u
 & 0xF; \

3764 
s32
 
off£t_v
 = 
v
 & 0xF; \

3766 
s32
 
width_rounded
 = 
off£t_u
 + 
width
 + 15; \

3767 
s32
 
height_rounded
 = 
off£t_v
 + 
height
 + 15; \

3768 
s32
 
tûe_height
 = 
height_rounded
 / 16; \

3769 
s32
 
tûe_width
 = 
width_rounded
 / 16; \

3770 
u32
 
off£t_u_right
 = 
width_rounded
 & 0xF; \

3772 
£tup_•rôe_off£t_u_adju°
##
	`x4mode
(); \

3774 
u32
 
À·_block_mask
 = ~(0xFFFFFFFF << 
off£t_u
); \

3775 
u32
 
right_block_mask
 = 0xFFFFFFFE << 
off£t_u_right
; \

3777 
u32
 
À·_mask_bôs
; \

3778 
u32
 
right_mask_bôs
; \

3780 
u32
 
sub_tûe_height
; \

3781 
u32
 
cﬁumn_d©a
; \

3783 
u32
 
ãxtuª_mask
 = (
psx_gpu
->
ãxtuª_mask_width
 & 0xF) | \

3784 ((
psx_gpu
->
ãxtuª_mask_height
 & 0xF) << 4) | \

3785 ((
psx_gpu
->
ãxtuª_mask_width
 >> 4) << 8) | \

3786 ((
psx_gpu
->
ãxtuª_mask_height
 >> 4) << 12); \

3787 
u32
 
ãxtuª_off£t
 = ((
v
 & 0xFË<< 4Ë| ((
u
 & 0xF0) << 4) | \

3788 ((
v
 & 0xF0) << 8); \

3789 
u32
 
ãxtuª_off£t_ba£
 = 
ãxtuª_off£t
; \

3790 
u32
 
c⁄åﬁ_mask
; \

3792 
u16
 *
fb_±r
 = 
psx_gpu
->
vøm_out_±r
 + (
y
 * 1024Ë+ (
x
 - 
off£t_u
); \

3793 
u32
 
num_blocks
 = 
psx_gpu
->num_blocks; \

3794 
block_°ru˘
 *
block
 = 
psx_gpu
->
blocks
 + 
num_blocks
; \

3796 
u16
 *
ãxtuª_block_±r
; \

3797 
vec_8x8u
 
ãxñs
; \

3799 
£tup_•rôe_tûed_öôülize_
##
ãxtuª_mode
##
	`x4mode
(); \

3801 
c⁄åﬁ_mask
 = 
tûe_width
 == 1; \

3802 
c⁄åﬁ_mask
 |(
tûe_height
 == 1) << 1; \

3803 
c⁄åﬁ_mask
 |
£tup_•rôe_com≠ª_À·_block_mask
##
	`x4mode
() << 2; \

3804 
c⁄åﬁ_mask
 |
£tup_•rôe_com≠ª_right_block_mask
##
	`x4mode
() << 3; \

3806 
•rôes_
##
ãxtuª_mode
++; \

3808 
c⁄åﬁ_mask
) \

3812 
	`£tup_•rôe_tûe_cﬁumn_width_mu…i
(
ãxtuª_mode
, 
mu…i
, 
fuŒ
, full, \

3813 
x4mode
); \

3817 
	`£tup_•rôe_tûe_cﬁumn_width_sögÀ
(
ãxtuª_mode
, 
mu…i
, 
fuŒ
, 
n⁄e
, \

3818 
x4mode
); \

3822 
	`£tup_•rôe_tûe_cﬁumn_width_mu…i
(
ãxtuª_mode
, 
sögÀ
, 
fuŒ
, full, \

3823 
x4mode
); \

3827 
	`£tup_•rôe_tûe_cﬁumn_width_sögÀ
(
ãxtuª_mode
, 
sögÀ
, 
fuŒ
, 
n⁄e
, \

3828 
x4mode
); \

3832 
	`£tup_•rôe_tûe_cﬁumn_width_mu…i
(
ãxtuª_mode
, 
mu…i
, 
hÆf
, 
fuŒ
, \

3833 
x4mode
); \

3837 
	`£tup_•rôe_tûe_cﬁumn_width_sögÀ
(
ãxtuª_mode
, 
mu…i
, 
hÆf
, 
right
, \

3838 
x4mode
); \

3842 
	`£tup_•rôe_tûe_cﬁumn_width_mu…i
(
ãxtuª_mode
, 
sögÀ
, 
hÆf
, 
fuŒ
, \

3843 
x4mode
); \

3847 
	`£tup_•rôe_tûe_cﬁumn_width_sögÀ
(
ãxtuª_mode
, 
sögÀ
, 
hÆf
, 
right
, \

3848 
x4mode
); \

3852 
	`£tup_•rôe_tûe_cﬁumn_width_mu…i
(
ãxtuª_mode
, 
mu…i
, 
fuŒ
, 
hÆf
, \

3853 
x4mode
); \

3857 
	`£tup_•rôe_tûe_cﬁumn_width_sögÀ
(
ãxtuª_mode
, 
mu…i
, 
hÆf
, 
À·
, \

3858 
x4mode
); \

3862 
	`£tup_•rôe_tûe_cﬁumn_width_mu…i
(
ãxtuª_mode
, 
sögÀ
, 
fuŒ
, 
hÆf
, \

3863 
x4mode
); \

3867 
	`£tup_•rôe_tûe_cﬁumn_width_sögÀ
(
ãxtuª_mode
, 
sögÀ
, 
hÆf
, 
À·
, \

3868 
x4mode
); \

3872 
	`£tup_•rôe_tûe_cﬁumn_width_mu…i
(
ãxtuª_mode
, 
mu…i
, 
hÆf
, half, \

3873 
x4mode
); \

3877 
	`£tup_•rôe_tûe_cﬁumn_width_mu…i
(
ãxtuª_mode
, 
sögÀ
, 
hÆf
, half, \

3878 
x4mode
); \

3882 

	)

3883 
£tup_•rôe_4bµ
(
psx_gpu_°ru˘
 *
psx_gpu
, 
s32
 
x
, s32 
y
, s32 
u
, s32 
v
,

3884 
s32
 
width
, s32 
height
, 
u32
 
cﬁ‹
);

3885 
£tup_•rôe_8bµ
(
psx_gpu_°ru˘
 *
psx_gpu
, 
s32
 
x
, s32 
y
, s32 
u
, s32 
v
,

3886 
s32
 
width
, s32 
height
, 
u32
 
cﬁ‹
);

3887 
£tup_•rôe_16bµ
(
psx_gpu_°ru˘
 *
psx_gpu
, 
s32
 
x
, s32 
y
, s32 
u
, s32 
v
,

3888 
s32
 
width
, s32 
height
, 
u32
 
cﬁ‹
);

3890 
£tup_•rôe_4bµ_4x
(
psx_gpu_°ru˘
 *
psx_gpu
, 
s32
 
x
, s32 
y
, s32 
u
, s32 
v
,

3891 
s32
 
width
, s32 
height
, 
u32
 
cﬁ‹
);

3892 
£tup_•rôe_8bµ_4x
(
psx_gpu_°ru˘
 *
psx_gpu
, 
s32
 
x
, s32 
y
, s32 
u
, s32 
v
,

3893 
s32
 
width
, s32 
height
, 
u32
 
cﬁ‹
);

3894 
£tup_•rôe_16bµ_4x
(
psx_gpu_°ru˘
 *
psx_gpu
, 
s32
 
x
, s32 
y
, s32 
u
, s32 
v
,

3895 
s32
 
width
, s32 
height
, 
u32
 
cﬁ‹
);

3897 
£tup_•rôe_u¡extuªd
(
psx_gpu_°ru˘
 *
psx_gpu
, 
s32
 
x
, s32 
y
, s32 
u
,

3898 
s32
 
v
, s32 
width
, s32 
height
, 
u32
 
cﬁ‹
);

3899 
£tup_•rôe_u¡extuªd_sim∂e
(
psx_gpu_°ru˘
 *
psx_gpu
, 
s32
 
x
, s32 
y
,

3900 
s32
 
u
, s32 
v
, s32 
width
, s32 
height
, 
u32
 
cﬁ‹
);

3902 #i‚de‡
NEON_BUILD


3903 
£tup_•rôe_tûed_buûdî
(4b
µ
,);

3904 
£tup_•rôe_tûed_buûdî
(8b
µ
,);

3906 
£tup_•rôe_tûed_buûdî
(4b
µ
,
_4x
);

3907 
£tup_•rôe_tûed_buûdî
(8b
µ
,
_4x
);

3909 
	$£tup_•rôe_16bµ
(
psx_gpu_°ru˘
 *
psx_gpu
, 
s32
 
x
, s32 
y
, s32 
u
,

3910 
s32
 
v
, s32 
width
, s32 
height
, 
u32
 
cﬁ‹
)

3912 
u32
 
À·_off£t
 = 
u
 & 0x7;

3913 
u32
 
width_rounded
 = 
width
 + 
À·_off£t
 + 7;

3915 
u16
 *
fb_±r
 = 
psx_gpu
->
vøm_out_±r
 + (
y
 * 1024Ë+ (
s32
)(
x
 - 
À·_off£t
);

3916 
u32
 
right_width
 = 
width_rounded
 & 0x7;

3917 
u32
 
block_width
 = 
width_rounded
 / 8;

3918 
u32
 
fb_±r_pôch
 = (1024 + 8Ë- (
block_width
 * 8);

3920 
u32
 
À·_mask_bôs
 = ~(0xFF << 
À·_off£t
);

3921 
u32
 
right_mask_bôs
 = 0xFE << 
right_width
;

3923 
u32
 
ãxtuª_off£t_ba£
 = 
u
 + (
v
 * 1024);

3924 
u32
 
ãxtuª_mask
 =

3925 
psx_gpu
->
ãxtuª_mask_width
 | (psx_gpu->
ãxtuª_mask_height
 * 1024);

3927 
u32
 
blocks_ªmaöög
;

3928 
u32
 
num_blocks
 = 
psx_gpu
->num_blocks;

3929 
block_°ru˘
 *
block
 = 
psx_gpu
->
blocks
 + 
num_blocks
;

3931 
u16
 *
ãxtuª_∑ge_±r
 = 
psx_gpu
->texture_page_ptr;

3932 
u16
 *
ãxtuª_block_±r
;

3934 
ãxtuª_off£t_ba£
 &= ~0x7;

3936 
•rôes_16bµ
++;

3938 if(
block_width
 == 1)

3940 
u32
 
mask_bôs
 = 
À·_mask_bôs
 | 
right_mask_bôs
;

3942 
height
)

3944 
num_blocks
++;

3945 
•rôe_blocks
++;

3947 if(
num_blocks
 > 
MAX_BLOCKS
)

3949 
	`Êush_ªndî_block_buf„r
(
psx_gpu
);

3950 
num_blocks
 = 1;

3951 
block
 = 
psx_gpu
->
blocks
;

3954 
ãxtuª_block_±r
 =

3955 
ãxtuª_∑ge_±r
 + (
ãxtuª_off£t_ba£
 & 
ãxtuª_mask
);

3957 
	`lﬂd_128b
(
block
->
ãxñs
, 
ãxtuª_block_±r
);

3958 
block
->
døw_mask_bôs
 = 
mask_bôs
;

3959 
block
->
fb_±r
 = fb_ptr;

3961 
block
++;

3963 
ãxtuª_off£t_ba£
 += 1024;

3964 
fb_±r
 += 1024;

3966 
height
--;

3967 
psx_gpu
->
num_blocks
 =Çum_blocks;

3972 
u32
 
ãxtuª_off£t
;

3974 
height
)

3976 
blocks_ªmaöög
 = 
block_width
 - 2;

3977 
num_blocks
 +
block_width
;

3978 
•rôe_blocks
 +
block_width
;

3980 if(
num_blocks
 > 
MAX_BLOCKS
)

3982 
	`Êush_ªndî_block_buf„r
(
psx_gpu
);

3983 
num_blocks
 = 
block_width
;

3984 
block
 = 
psx_gpu
->
blocks
;

3987 
ãxtuª_off£t
 = 
ãxtuª_off£t_ba£
;

3988 
ãxtuª_off£t_ba£
 += 1024;

3990 
ãxtuª_block_±r
 = 
ãxtuª_∑ge_±r
 + (
ãxtuª_off£t
 & 
ãxtuª_mask
);

3991 
	`lﬂd_128b
(
block
->
ãxñs
, 
ãxtuª_block_±r
);

3993 
block
->
døw_mask_bôs
 = 
À·_mask_bôs
;

3994 
block
->
fb_±r
 = fb_ptr;

3996 
ãxtuª_off£t
 += 8;

3997 
fb_±r
 += 8;

3998 
block
++;

4000 
blocks_ªmaöög
)

4002 
ãxtuª_block_±r
 = 
ãxtuª_∑ge_±r
 + (
ãxtuª_off£t
 & 
ãxtuª_mask
);

4003 
	`lﬂd_128b
(
block
->
ãxñs
, 
ãxtuª_block_±r
);

4005 
block
->
døw_mask_bôs
 = 0;

4006 
block
->
fb_±r
 = fb_ptr;

4008 
ãxtuª_off£t
 += 8;

4009 
fb_±r
 += 8;

4010 
block
++;

4012 
blocks_ªmaöög
--;

4015 
ãxtuª_block_±r
 = 
ãxtuª_∑ge_±r
 + (
ãxtuª_off£t
 & 
ãxtuª_mask
);

4016 
	`lﬂd_128b
(
block
->
ãxñs
, 
ãxtuª_block_±r
);

4018 
block
->
døw_mask_bôs
 = 
right_mask_bôs
;

4019 
block
->
fb_±r
 = fb_ptr;

4021 
fb_±r
 +
fb_±r_pôch
;

4022 
block
++;

4024 
height
--;

4025 
psx_gpu
->
num_blocks
 =Çum_blocks;

4028 
	}
}

4030 
	$£tup_•rôe_u¡extuªd
(
psx_gpu_°ru˘
 *
psx_gpu
, 
s32
 
x
, s32 
y
, s32 
u
,

4031 
s32
 
v
, s32 
width
, s32 
height
, 
u32
 
cﬁ‹
)

4033 if((
psx_gpu
->
ªndî_°©e
 & (
RENDER_STATE_MASK_EVALUATE
 |

4034 
RENDER_FLAGS_MODULATE_TEXELS
 | 
RENDER_FLAGS_BLEND
)) == 0 &&

4035 (
psx_gpu
->
ªndî_mode
 & 
RENDER_INTERLACE_ENABLED
) == 0)

4037 
	`£tup_•rôe_u¡extuªd_sim∂e
(
psx_gpu
, 
x
, 
y
, 
u
, 
v
, 
width
, 
height
, 
cﬁ‹
);

4041 
u32
 
right_width
 = ((
width
 - 1) & 0x7) + 1;

4042 
u32
 
right_mask_bôs
 = (0xFF << 
right_width
);

4043 
u16
 *
fb_±r
 = 
psx_gpu
->
vøm_out_±r
 + (
y
 * 1024Ë+ 
x
;

4044 
u32
 
block_width
 = (
width
 + 7) / 8;

4045 
u32
 
fb_±r_pôch
 = 1024 - ((
block_width
 - 1) * 8);

4046 
u32
 
blocks_ªmaöög
;

4047 
u32
 
num_blocks
 = 
psx_gpu
->num_blocks;

4048 
block_°ru˘
 *
block
 = 
psx_gpu
->
blocks
 + 
num_blocks
;

4050 
u32
 
cﬁ‹_r
 = 
cﬁ‹
 & 0xFF;

4051 
u32
 
cﬁ‹_g
 = (
cﬁ‹
 >> 8) & 0xFF;

4052 
u32
 
cﬁ‹_b
 = (
cﬁ‹
 >> 16) & 0xFF;

4053 
vec_8x16u
 
cﬁ‹s
;

4054 
vec_8x16u
 
right_mask
;

4055 
vec_8x16u
 
ã°_mask
 = 
psx_gpu
->test_mask;

4056 
vec_8x16u
 
zîo_mask
;

4058 
•rôes_u¡extuªd
++;

4060 
cﬁ‹
 = (
cﬁ‹_r
 >> 3Ë| ((
cﬁ‹_g
 >> 3Ë<< 5Ë| ((
cﬁ‹_b
 >> 3) << 10);

4062 
	`dup_8x16b
(
cﬁ‹s
, 
cﬁ‹
);

4063 
	`dup_8x16b
(
zîo_mask
, 0x00);

4064 
	`dup_8x16b
(
right_mask
, 
right_mask_bôs
);

4065 
	`t°_8x16b
(
right_mask
,Ñight_mask, 
ã°_mask
);

4067 
height
)

4069 
blocks_ªmaöög
 = 
block_width
 - 1;

4070 
num_blocks
 +
block_width
;

4072 #ifde‡
PROFILE


4073 
•rôe_blocks
 +
block_width
;

4076 if(
num_blocks
 > 
MAX_BLOCKS
)

4078 
	`Êush_ªndî_block_buf„r
(
psx_gpu
);

4079 
num_blocks
 = 
block_width
;

4080 
block
 = 
psx_gpu
->
blocks
;

4083 
blocks_ªmaöög
)

4085 
block
->
pixñs
 = 
cﬁ‹s
;

4086 
block
->
døw_mask
 = 
zîo_mask
;

4087 
block
->
fb_±r
 = fb_ptr;

4089 
fb_±r
 += 8;

4090 
block
++;

4091 
blocks_ªmaöög
--;

4094 
block
->
pixñs
 = 
cﬁ‹s
;

4095 
block
->
døw_mask
 = 
right_mask
;

4096 
block
->
fb_±r
 = fb_ptr;

4098 
block
++;

4099 
fb_±r
 +
fb_±r_pôch
;

4101 
height
--;

4102 
psx_gpu
->
num_blocks
 =Çum_blocks;

4104 
	}
}

4108 
	$£tup_•rôe_u¡extuªd_sim∂e
(
psx_gpu_°ru˘
 *
psx_gpu
, 
s32
 
x
, s32 
y
,

4109 
s32
 
u
, s32 
v
, s32 
width
, s32 
height
, 
u32
 
cﬁ‹
)

4111 
u32
 
r
 = 
cﬁ‹
 & 0xFF;

4112 
u32
 
g
 = (
cﬁ‹
 >> 8) & 0xFF;

4113 
u32
 
b
 = (
cﬁ‹
 >> 16) & 0xFF;

4114 
u32
 
cﬁ‹_16bµ
 = (
r
 >> 3Ë| ((
g
 >> 3Ë<< 5Ë| ((
b
 >> 3) << 10) |

4115 
psx_gpu
->
mask_msb
;

4116 
u32
 
cﬁ‹_32bµ
 = 
cﬁ‹_16bµ
 | (color_16bpp << 16);

4118 
u16
 *
vøm_±r16
 = 
psx_gpu
->
vøm_out_±r
 + 
x
 + (
y
 * 1024);

4119 
u32
 *
vøm_±r
;

4121 
u32
 
num_width
;

4123 if(
psx_gpu
->
num_blocks
 > 
MAX_BLOCKS
)

4125 
	`Êush_ªndî_block_buf„r
(
psx_gpu
);

4128 
height
)

4130 
num_width
 = 
width
;

4132 
vøm_±r
 = (*)
vøm_±r16
;

4133 if(()
vøm_±r16
 & 2)

4135 *
vøm_±r16
 = 
cﬁ‹_32bµ
;

4136 
vøm_±r
 = (*)(
vøm_±r16
 + 1);

4137 
num_width
--;

4140 
num_width
 >= 4 * 2)

4142 
vøm_±r
[0] = 
cﬁ‹_32bµ
;

4143 
vøm_±r
[1] = 
cﬁ‹_32bµ
;

4144 
vøm_±r
[2] = 
cﬁ‹_32bµ
;

4145 
vøm_±r
[3] = 
cﬁ‹_32bµ
;

4147 
vøm_±r
 += 4;

4148 
num_width
 -= 4 * 2;

4151 
num_width
 >= 2)

4153 *
vøm_±r
++ = 
cﬁ‹_32bµ
;

4154 
num_width
 -= 2;

4157 if(
num_width
 > 0)

4159 *(
u16
 *)
vøm_±r
 = 
cﬁ‹_32bµ
;

4162 
vøm_±r16
 += 1024;

4163 
height
--;

4165 
	}
}

4168 
	#£tup_•rôe_blocks_swôch_ãxtuªd
(
ãxtuª_mode
) \

4169 
£tup_•rôe_
##
ãxtuª_mode
 \

4170 

	)

4171 
	#£tup_•rôe_blocks_swôch_u¡extuªd
(
ãxtuª_mode
) \

4172 
£tup_•rôe_u¡extuªd
 \

4173 

	)

4174 
	#£tup_•rôe_blocks_swôch
(
ãxturög
, 
ãxtuª_mode
) \

4175 
£tup_•rôe_blocks_swôch_
##
	`ãxturög
(
ãxtuª_mode
) \

4176 

	)

4178 
	#ãxtuª_•rôe_blocks_swôch_4bµ
() \

4179 
ãxtuª_blocks_u¡extuªd
 \

4180 

	)

4181 
	#ãxtuª_•rôe_blocks_swôch_8bµ
() \

4182 
ãxtuª_•rôe_blocks_8bµ
 \

4183 

	)

4184 
	#ãxtuª_•rôe_blocks_swôch_16bµ
() \

4185 
ãxtuª_blocks_u¡extuªd
 \

4186 

	)

4187 
	#ãxtuª_•rôe_blocks_swôch_u¡extuªd
(
ãxtuª_mode
) \

4188 
ãxtuª_blocks_u¡extuªd
 \

4189 

	)

4190 
	#ãxtuª_•rôe_blocks_swôch_ãxtuªd
(
ãxtuª_mode
) \

4191 
ãxtuª_•rôe_blocks_swôch_
##
	`ãxtuª_mode
() \

4192 

	)

4193 
	#ªndî_•rôe_blocks_swôch_block_moduœti⁄
(
ãxtuª_mode
, 
bÀnd_mode
, \

4194 
mask_evÆu©e
, 
shadög
, 
dôhîög
, 
ãxturög
, 
bÀndög
, 
moduœti⁄
) \

4196 
	`£tup_•rôe_blocks_swôch
(
ãxturög
, 
ãxtuª_mode
), \

4197 
ãxtuª_•rôe_blocks_swôch_
##
	`ãxturög
(
ãxtuª_mode
), \

4198 
	`shade_blocks_swôch
(
unshaded
, 
ãxturög
, 
moduœti⁄
, 
undôhîed
, 
bÀndög
, \

4199 
mask_evÆu©e
), \

4200 
	`bÀnd_blocks_swôch
(
ãxturög
, 
bÀndög
, 
bÀnd_mode
, 
mask_evÆu©e
) \

4202 

	)

4203 
	#ªndî_•rôe_blocks_swôch_block_bÀndög
(
ãxtuª_mode
, 
bÀnd_mode
, \

4204 
mask_evÆu©e
, 
shadög
, 
dôhîög
, 
ãxturög
, 
bÀndög
) \

4205 
	`ªndî_•rôe_blocks_swôch_block_moduœti⁄
(
ãxtuª_mode
, 
bÀnd_mode
, \

4206 
mask_evÆu©e
, 
shadög
, 
dôhîög
, 
ãxturög
, 
bÀndög
, 
moduœãd
), \

4207 
	`ªndî_•rôe_blocks_swôch_block_moduœti⁄
(
ãxtuª_mode
, 
bÀnd_mode
, \

4208 
mask_evÆu©e
, 
shadög
, 
dôhîög
, 
ãxturög
, 
bÀndög
, 
unmoduœãd
) \

4209 

	)

4210 
	#ªndî_•rôe_blocks_swôch_block_ãxturög
(
ãxtuª_mode
, 
bÀnd_mode
, \

4211 
mask_evÆu©e
, 
shadög
, 
dôhîög
, 
ãxturög
) \

4212 
	`ªndî_•rôe_blocks_swôch_block_bÀndög
(
ãxtuª_mode
, 
bÀnd_mode
, \

4213 
mask_evÆu©e
, 
shadög
, 
dôhîög
, 
ãxturög
, 
unbÀnded
), \

4214 
	`ªndî_•rôe_blocks_swôch_block_bÀndög
(
ãxtuª_mode
, 
bÀnd_mode
, \

4215 
mask_evÆu©e
, 
shadög
, 
dôhîög
, 
ãxturög
, 
bÀnded
) \

4216 

	)

4217 
	#ªndî_•rôe_blocks_swôch_block_dôhîög
(
ãxtuª_mode
, 
bÀnd_mode
, \

4218 
mask_evÆu©e
, 
shadög
, 
dôhîög
) \

4219 
	`ªndî_•rôe_blocks_swôch_block_ãxturög
(
ãxtuª_mode
, 
bÀnd_mode
, \

4220 
mask_evÆu©e
, 
shadög
, 
dôhîög
, 
u¡extuªd
), \

4221 
	`ªndî_•rôe_blocks_swôch_block_ãxturög
(
ãxtuª_mode
, 
bÀnd_mode
, \

4222 
mask_evÆu©e
, 
shadög
, 
dôhîög
, 
ãxtuªd
) \

4223 

	)

4224 
	#ªndî_•rôe_blocks_swôch_block_shadög
(
ãxtuª_mode
, 
bÀnd_mode
, \

4225 
mask_evÆu©e
, 
shadög
) \

4226 
	`ªndî_•rôe_blocks_swôch_block_dôhîög
(
ãxtuª_mode
, 
bÀnd_mode
, \

4227 
mask_evÆu©e
, 
shadög
, 
undôhîed
), \

4228 
	`ªndî_•rôe_blocks_swôch_block_dôhîög
(
ãxtuª_mode
, 
bÀnd_mode
, \

4229 
mask_evÆu©e
, 
shadög
, 
dôhîed
) \

4230 

	)

4231 
	#ªndî_•rôe_blocks_swôch_block_mask_evÆu©e
(
ãxtuª_mode
, \

4232 
bÀnd_mode
, 
mask_evÆu©e
) \

4233 
	`ªndî_•rôe_blocks_swôch_block_shadög
(
ãxtuª_mode
, 
bÀnd_mode
, \

4234 
mask_evÆu©e
, 
unshaded
), \

4235 
	`ªndî_•rôe_blocks_swôch_block_shadög
(
ãxtuª_mode
, 
bÀnd_mode
, \

4236 
mask_evÆu©e
, 
shaded
) \

4237 

	)

4238 
	#ªndî_•rôe_blocks_swôch_block_bÀnd_mode
(
ãxtuª_mode
, 
bÀnd_mode
) \

4239 
	`ªndî_•rôe_blocks_swôch_block_mask_evÆu©e
(
ãxtuª_mode
, 
bÀnd_mode
, \

4240 
off
), \

4241 
	`ªndî_•rôe_blocks_swôch_block_mask_evÆu©e
(
ãxtuª_mode
, 
bÀnd_mode
, \

4242 
⁄
) \

4243 

	)

4244 
	#ªndî_•rôe_blocks_swôch_block_ãxtuª_mode
(
ãxtuª_mode
) \

4245 
	`ªndî_•rôe_blocks_swôch_block_bÀnd_mode
(
ãxtuª_mode
, 
avîage
), \

4246 
	`ªndî_•rôe_blocks_swôch_block_bÀnd_mode
(
ãxtuª_mode
, 
add
), \

4247 
	`ªndî_•rôe_blocks_swôch_block_bÀnd_mode
(
ãxtuª_mode
, 
subåa˘
), \

4248 
	`ªndî_•rôe_blocks_swôch_block_bÀnd_mode
(
ãxtuª_mode
, 
add_fouπh
) \

4249 

	)

4250 
	#ªndî_•rôe_blocks_swôch_block
() \

4251 
	`ªndî_•rôe_blocks_swôch_block_ãxtuª_mode
(4b
µ
), \

4252 
	`ªndî_•rôe_blocks_swôch_block_ãxtuª_mode
(8b
µ
), \

4253 
	`ªndî_•rôe_blocks_swôch_block_ãxtuª_mode
(16b
µ
), \

4254 
	`ªndî_•rôe_blocks_swôch_block_ãxtuª_mode
(4b
µ
) \

4255 

	)

4257 
ªndî_block_h™dÀr_°ru˘
 
	gªndî_•rôe_block_h™dÀrs
[] =

4259 
ªndî_•rôe_blocks_swôch_block
()

4263 
	$ªndî_•rôe
(
psx_gpu_°ru˘
 *
psx_gpu
, 
s32
 
x
, s32 
y
, 
u32
 
u
, u32 
v
,

4264 
s32
 
width
, s32 
height
, 
u32
 
Êags
, u32 
cﬁ‹
)

4266 
s32
 
x_right
 = 
x
 + 
width
 - 1;

4267 
s32
 
y_bŸtom
 = 
y
 + 
height
 - 1;

4269 #ifde‡
PROFILE


4270 
•rôes
++;

4273 if(
	`övÆid©e_ãxtuª_ˇche_ªgi⁄_võwp‹t
(
psx_gpu
, 
x
, 
y
, 
x_right
,

4274 
y_bŸtom
) == 0)

4279 if(
x
 < 
psx_gpu
->
võwp‹t_°¨t_x
)

4281 
u32
 
˛ù
 = 
psx_gpu
->
võwp‹t_°¨t_x
 - 
x
;

4282 
x
 +
˛ù
;

4283 
u
 +
˛ù
;

4284 
width
 -
˛ù
;

4287 if(
y
 < 
psx_gpu
->
võwp‹t_°¨t_y
)

4289 
s32
 
˛ù
 = 
psx_gpu
->
võwp‹t_°¨t_y
 - 
y
;

4290 
y
 +
˛ù
;

4291 
v
 +
˛ù
;

4292 
height
 -
˛ù
;

4295 if(
x_right
 > 
psx_gpu
->
võwp‹t_íd_x
)

4296 
width
 -
x_right
 - 
psx_gpu
->
võwp‹t_íd_x
;

4298 if(
y_bŸtom
 > 
psx_gpu
->
võwp‹t_íd_y
)

4299 
height
 -
y_bŸtom
 - 
psx_gpu
->
võwp‹t_íd_y
;

4301 if((
width
 <0Ë|| (
height
 <= 0))

4304 #ifde‡
PROFILE


4305 
•™_pixñs
 +
width
 * 
height
;

4306 
•™s
 +
height
;

4309 
u32
 
ªndî_°©e
 = 
Êags
 &

4310 (
RENDER_FLAGS_MODULATE_TEXELS
 | 
RENDER_FLAGS_BLEND
 |

4311 
RENDER_FLAGS_TEXTURE_MAP
);

4312 
ªndî_°©e
 |=

4313 (
psx_gpu
->
ªndî_°©e_ba£
 & ~
RENDER_STATE_DITHER
);

4315 if((
psx_gpu
->
ªndî_°©e
 !=Ñender_state) ||

4316 (
psx_gpu
->
¥imôive_ty≥
 !
PRIMITIVE_TYPE_SPRITE
))

4318 
psx_gpu
->
ªndî_°©e
 =Ñender_state;

4319 
	`Êush_ªndî_block_buf„r
(
psx_gpu
);

4320 #ifde‡
PROFILE


4321 
°©e_ch™ges
++;

4325 
psx_gpu
->
¥imôive_ty≥
 = 
PRIMITIVE_TYPE_SPRITE
;

4327 
cﬁ‹
 &= 0xFFFFFF;

4329 if(
psx_gpu
->
åüngÀ_cﬁ‹
 !
cﬁ‹
)

4331 
	`Êush_ªndî_block_buf„r
(
psx_gpu
);

4332 
psx_gpu
->
åüngÀ_cﬁ‹
 = 
cﬁ‹
;

4335 if(
cﬁ‹
 == 0x808080)

4336 
ªndî_°©e
 |
RENDER_FLAGS_MODULATE_TEXELS
;

4338 
ªndî_block_h™dÀr_°ru˘
 *
ªndî_block_h™dÀr
 =

4339 &(
ªndî_•rôe_block_h™dÀrs
[
ªndî_°©e
]);

4340 
psx_gpu
->
ªndî_block_h™dÀr
 =Ñender_block_handler;

4342 ((
£tup_•rôe_fun˘i⁄_ty≥
 *)
ªndî_block_h™dÀr
->
£tup_blocks
)

4343 (
psx_gpu
, 
x
, 
y
, 
u
, 
v
, 
width
, 
height
, 
cﬁ‹
);

4344 
	}
}

4346 
	#døw_pixñ_löe_mask_evÆu©e_yes
() \

4347 if((*
vøm_±r
 & 0x8000) == 0) \

4348 

	)

4349 
	#døw_pixñ_löe_mask_evÆu©e_no
() \

4350 

	)

4352 
	#døw_pixñ_löe_shaded
() \

4354 
cﬁ‹_r
 = 
	`fixed_to_öt
(
cuºít_r
); \

4355 
cﬁ‹_g
 = 
	`fixed_to_öt
(
cuºít_g
); \

4356 
cﬁ‹_b
 = 
	`fixed_to_öt
(
cuºít_b
); \

4358 
cuºít_r
 +
gødõ¡_r
; \

4359 
cuºít_g
 +
gødõ¡_g
; \

4360 
cuºít_b
 +
gødõ¡_b
; \

4362 

	)

4363 
	#døw_pixñ_löe_unshaded
() \

4365 
cﬁ‹_r
 = 
cﬁ‹
 & 0xFF; \

4366 
cﬁ‹_g
 = (
cﬁ‹
 >> 8) & 0xFF; \

4367 
cﬁ‹_b
 = (
cﬁ‹
 >> 16) & 0xFF; \

4369 

	)

4371 
	#døw_pixñ_löe_dôhîed
(
_x
, 
_y
) \

4373 
u32
 
dôhî_x‹
 = 
_x
 ^ 
_y
; \

4374 
s32
 
dôhî_off£t
 = (
dôhî_x‹
 >> 1) & 0x1; \

4375 
dôhî_off£t
 |(
_y
 & 0x1) << 1; \

4376 
dôhî_off£t
 |(
dôhî_x‹
 & 0x1) << 2; \

4377 
dôhî_off£t
 -= 4; \

4379 
cﬁ‹_r
 +
dôhî_off£t
; \

4380 
cﬁ‹_g
 +
dôhî_off£t
; \

4381 
cﬁ‹_b
 +
dôhî_off£t
; \

4383 if(
cﬁ‹_r
 < 0) \

4384 
cﬁ‹_r
 = 0; \

4386 if(
cﬁ‹_g
 < 0) \

4387 
cﬁ‹_g
 = 0; \

4389 if(
cﬁ‹_b
 < 0) \

4390 
cﬁ‹_b
 = 0; \

4392 if(
cﬁ‹_r
 > 255) \

4393 
cﬁ‹_r
 = 255; \

4395 if(
cﬁ‹_g
 > 255) \

4396 
cﬁ‹_g
 = 255; \

4398 if(
cﬁ‹_b
 > 255) \

4399 
cﬁ‹_b
 = 255; \

4401 

	)

4402 
	#døw_pixñ_löe_undôhîed
(
_x
, 
_y
) \

4403 

	)

4405 
	#døw_pixñ_löe_avîage
() \

4406 
cﬁ‹_r
 = (cﬁ‹_∏+ 
fb_r
) / 2; \

4407 
cﬁ‹_g
 = (cﬁ‹_g + 
fb_g
) / 2; \

4408 
cﬁ‹_b
 = (cﬁ‹_b + 
fb_b
) / 2 \

4409 

	)

4410 
	#døw_pixñ_löe_add
() \

4411 
cﬁ‹_r
 +
fb_r
; \

4412 
cﬁ‹_g
 +
fb_g
; \

4413 
cﬁ‹_b
 +
fb_b
; \

4415 if(
cﬁ‹_r
 > 31) \

4416 
cﬁ‹_r
 = 31; \

4418 if(
cﬁ‹_g
 > 31) \

4419 
cﬁ‹_g
 = 31; \

4421 if(
cﬁ‹_b
 > 31) \

4422 
cﬁ‹_b
 = 31 \

4424 

	)

4425 
	#døw_pixñ_löe_subåa˘
() \

4426 
cﬁ‹_r
 = 
fb_r
 - color_r; \

4427 
cﬁ‹_g
 = 
fb_g
 - color_g; \

4428 
cﬁ‹_b
 = 
fb_b
 - color_b; \

4430 if(
cﬁ‹_r
 < 0) \

4431 
cﬁ‹_r
 = 0; \

4433 if(
cﬁ‹_g
 < 0) \

4434 
cﬁ‹_g
 = 0; \

4436 if(
cﬁ‹_b
 < 0) \

4437 
cﬁ‹_b
 = 0 \

4438 

	)

4439 
	#døw_pixñ_löe_add_fouπh
() \

4440 
cﬁ‹_r
 = 
fb_r
 + (color_r / 4); \

4441 
cﬁ‹_g
 = 
fb_g
 + (color_g / 4); \

4442 
cﬁ‹_b
 = 
fb_b
 + (color_b / 4); \

4444 if(
cﬁ‹_r
 > 31) \

4445 
cﬁ‹_r
 = 31; \

4447 if(
cﬁ‹_g
 > 31) \

4448 
cﬁ‹_g
 = 31; \

4450 if(
cﬁ‹_b
 > 31) \

4451 
cﬁ‹_b
 = 31 \

4452 

	)

4454 
	#døw_pixñ_löe_bÀnded
(
bÀnd_mode
) \

4455 
s32
 
fb_pixñ
 = *
vøm_±r
; \

4456 
s32
 
fb_r
 = 
fb_pixñ
 & 0x1F; \

4457 
s32
 
fb_g
 = (
fb_pixñ
 >> 5) & 0x1F; \

4458 
s32
 
fb_b
 = (
fb_pixñ
 >> 10) & 0x1F; \

4460 
døw_pixñ_löe_
##
	`bÀnd_mode
() \

4461 

	)

4462 
	#døw_pixñ_löe_unbÀnded
(
bÀnd_mode
) \

4463 

	)

4465 
	#døw_pixñ_löe
(
_x
, 
_y
, 
shadög
, 
bÀndög
, 
dôhîög
, 
mask_evÆu©e
, \

4466 
bÀnd_mode
) \

4467 if((
_x
 >
psx_gpu
->
võwp‹t_°¨t_x
Ë&& (
_y
 >psx_gpu->
võwp‹t_°¨t_y
) && \

4468 (
_x
 <
psx_gpu
->
võwp‹t_íd_x
Ë&& (
_y
 <psx_gpu->
võwp‹t_íd_y
)) \

4470 
døw_pixñ_löe_mask_evÆu©e_
##
	`mask_evÆu©e
() \

4472 
døw_pixñ_löe_
##
	`shadög
(); \

4473 
døw_pixñ_löe_
##
	`dôhîög
(
_x
, 
_y
); \

4475 
cﬁ‹_r
 >>= 3; \

4476 
cﬁ‹_g
 >>= 3; \

4477 
cﬁ‹_b
 >>= 3; \

4479 
døw_pixñ_löe_
##
	`bÀndög
(
bÀnd_mode
); \

4481 *
vøm_±r
 = 
cﬁ‹_r
 | (
cﬁ‹_g
 << 5Ë| (
cﬁ‹_b
 << 10) | \

4482 
psx_gpu
->
mask_msb
; \

4485 

	)

4486 
	#upd©e_ö¸emít
(
vÆue
) \

4487 
vÆue
++ \

4488 

	)

4489 
	#upd©e_de¸emít
(
vÆue
) \

4490 
vÆue
-- \

4491 

	)

4492 
	#upd©e_vøm_row_ö¸emít
(
vÆue
) \

4493 
vøm_±r
 += 1024 \

4494 

	)

4495 
	#upd©e_vøm_row_de¸emít
(
vÆue
) \

4496 
vøm_±r
 -= 1024 \

4497 

	)

4498 
	#com∑ª_ö¸emít
(
a
, 
b
) \

4499 (
a
 <
b
) \

4500 

	)

4501 
	#com∑ª_de¸emít
(
a
, 
b
) \

4502 (
a
 >
b
) \

4503 

	)

4504 
	#£t_löe_gødõ¡s
(
mö‹
) \

4506 
s32
 
gødõ¡_divis‹
 = 
dñè_
##
mö‹
; \

4507 if(
gødõ¡_divis‹
 != 0) \

4509 
gødõ¡_r
 = 
	`öt_to_fixed
(
vîãx_b
->
r
 - 
vîãx_a
->rË/ 
gødõ¡_divis‹
; \

4510 
gødõ¡_g
 = 
	`öt_to_fixed
(
vîãx_b
->
g
 - 
vîãx_a
->gË/ 
gødõ¡_divis‹
; \

4511 
gødõ¡_b
 = 
	`öt_to_fixed
(
vîãx_b
->
b
 - 
vîãx_a
->bË/ 
gødõ¡_divis‹
; \

4515 
gødõ¡_r
 = 0; \

4516 
gødõ¡_g
 = 0; \

4517 
gødõ¡_b
 = 0; \

4519 
cuºít_r
 = 
	`fixed_˚¡î
(
vîãx_a
->
r
); \

4520 
cuºít_g
 = 
	`fixed_˚¡î
(
vîãx_a
->
g
); \

4521 
cuºít_b
 = 
	`fixed_˚¡î
(
vîãx_a
->
b
); \

4522 }

	)

4524 
	#døw_löe_•™_h‹iz⁄èl
(
dúe˘i⁄
, 
shadög
, 
bÀndög
, 
dôhîög
, \

4525 
mask_evÆu©e
, 
bÀnd_mode
) \

4528 
îr‹_°ï
 = 
dñè_y
 * 2; \

4529 
îr‹_wøp
 = 
dñè_x
 * 2; \

4530 
îr‹
 = 
dñè_x
; \

4532 
cuºít_y
 = 
y_a
; \

4533 
	`£t_löe_gødõ¡s
(
x
); \

4535 
cuºít_x
 = 
x_a
; cuºít_x <
x_b
; current_x++) \

4537 
	`døw_pixñ_löe
(
cuºít_x
, 
cuºít_y
, 
shadög
, 
bÀndög
, 
dôhîög
, \

4538 
mask_evÆu©e
, 
bÀnd_mode
); \

4539 
îr‹
 +
îr‹_°ï
; \

4540 
vøm_±r
++; \

4542 if(
îr‹
 >
îr‹_wøp
) \

4544 
upd©e_
##
	`dúe˘i⁄
(
cuºít_y
); \

4545 
upd©e_vøm_row_
##
	`dúe˘i⁄
(); \

4546 
îr‹
 -
îr‹_wøp
; \

4550 

	)

4551 
	#døw_löe_•™_vîtiˇl
(
dúe˘i⁄
, 
shadög
, 
bÀndög
, 
dôhîög
, \

4552 
mask_evÆu©e
, 
bÀnd_mode
) \

4555 
îr‹_°ï
 = 
dñè_x
 * 2; \

4556 
îr‹_wøp
 = 
dñè_y
 * 2; \

4557 
îr‹
 = 
dñè_y
; \

4559 
cuºít_x
 = 
x_a
; \

4560 
	`£t_löe_gødõ¡s
(
y
); \

4562 
cuºít_y
 = 
y_a
; 
com∑ª_
##
	`dúe˘i⁄
(cuºít_y, 
y_b
); \

4563 
upd©e_
##
	`dúe˘i⁄
(
cuºít_y
)) \

4565 
	`døw_pixñ_löe
(
cuºít_x
, 
cuºít_y
, 
shadög
, 
bÀndög
, 
dôhîög
, \

4566 
mask_evÆu©e
, 
bÀnd_mode
); \

4567 
îr‹
 +
îr‹_°ï
; \

4568 
upd©e_vøm_row_
##
	`dúe˘i⁄
(); \

4570 if(
îr‹
 > 
îr‹_wøp
) \

4572 
vøm_±r
++; \

4573 
cuºít_x
++; \

4574 
îr‹
 -
îr‹_wøp
; \

4578 

	)

4580 
	#ªndî_löe_body
(
shadög
, 
bÀndög
, 
dôhîög
, 
mask_evÆu©e
, \

4581 
bÀnd_mode
) \

4582 if(
dñè_y
 < 0) \

4584 
dñè_y
 *= -1; \

4586 if(
dñè_x
 > 
dñè_y
) \

4588 
	`døw_löe_•™_h‹iz⁄èl
(
de¸emít
, 
shadög
, 
bÀndög
, 
dôhîög
, \

4589 
mask_evÆu©e
, 
bÀnd_mode
); \

4593 
	`døw_löe_•™_vîtiˇl
(
de¸emít
, 
shadög
, 
bÀndög
, 
dôhîög
, \

4594 
mask_evÆu©e
, 
bÀnd_mode
); \

4599 if(
dñè_x
 > 
dñè_y
) \

4601 
	`døw_löe_•™_h‹iz⁄èl
(
ö¸emít
, 
shadög
, 
bÀndög
, 
dôhîög
, \

4602 
mask_evÆu©e
, 
bÀnd_mode
); \

4606 
	`døw_löe_•™_vîtiˇl
(
ö¸emít
, 
shadög
, 
bÀndög
, 
dôhîög
, \

4607 
mask_evÆu©e
, 
bÀnd_mode
); \

4610 

	)

4612 
	$ªndî_löe
(
psx_gpu_°ru˘
 *
psx_gpu
, 
vîãx_°ru˘
 *
vîãxes
, 
u32
 
Êags
,

4613 
u32
 
cﬁ‹
, 
doubÀ_ªsﬁuti⁄
)

4615 
s32
 
cﬁ‹_r
, 
cﬁ‹_g
, 
cﬁ‹_b
;

4616 
u32
 
åüngÀ_wödög
 = 0;

4618 
fixed_ty≥
 
gødõ¡_r
 = 0;

4619 
fixed_ty≥
 
gødõ¡_g
 = 0;

4620 
fixed_ty≥
 
gødõ¡_b
 = 0;

4621 
fixed_ty≥
 
cuºít_r
 = 0;

4622 
fixed_ty≥
 
cuºít_g
 = 0;

4623 
fixed_ty≥
 
cuºít_b
 = 0;

4625 
s32
 
y_a
, 
y_b
;

4626 
s32
 
x_a
, 
x_b
;

4628 
s32
 
dñè_x
, 
dñè_y
;

4630 
s32
 
cuºít_x
;

4631 
s32
 
cuºít_y
;

4633 
u32
 
îr‹_°ï
;

4634 
u32
 
îr‹
;

4635 
u32
 
îr‹_wøp
;

4637 
u16
 *
vøm_±r
;

4639 
	`Êush_ªndî_block_buf„r
(
psx_gpu
);

4640 
psx_gpu
->
¥imôive_ty≥
 = 
PRIMITIVE_TYPE_LINE
;

4642 
vîãx_°ru˘
 *
vîãx_a
 = &(
vîãxes
[0]);

4643 
vîãx_°ru˘
 *
vîãx_b
 = &(
vîãxes
[1]);

4645 
u32
 
c⁄åﬁ_mask
;

4647 #ifde‡
PROFILE


4648 
löes
++;

4651 if(
vîãx_a
->
x
 >
vîãx_b
->x)

4653 
	`vîãx_sw≠
(
vîãx_a
, 
vîãx_b
);

4656 
x_a
 = 
vîãx_a
->
x
;

4657 
x_b
 = 
vîãx_b
->
x
;

4659 
y_a
 = 
vîãx_a
->
y
;

4660 
y_b
 = 
vîãx_b
->
y
;

4662 
dñè_x
 = 
x_b
 - 
x_a
;

4663 
dñè_y
 = 
y_b
 - 
y_a
;

4665 if(
dñè_x
 >1024 || 
dñè_y
 >= 512 || delta_y <= -512)

4668 if(
doubÀ_ªsﬁuti⁄
)

4670 
x_a
 *= 2;

4671 
x_b
 *= 2;

4672 
y_a
 *= 2;

4673 
y_b
 *= 2;

4674 
dñè_x
 *= 2;

4675 
dñè_y
 *= 2;

4678 
Êags
 &~
RENDER_FLAGS_TEXTURE_MAP
;

4680 
vøm_±r
 = 
psx_gpu
->
vøm_out_±r
 + (
y_a
 * 1024Ë+ 
x_a
;

4682 
c⁄åﬁ_mask
 = 0x0;

4684 if(
Êags
 & 
RENDER_FLAGS_SHADE
)

4685 
c⁄åﬁ_mask
 |= 0x1;

4687 if(
Êags
 & 
RENDER_FLAGS_BLEND
)

4689 
c⁄åﬁ_mask
 |= 0x2;

4690 
c⁄åﬁ_mask
 |((
psx_gpu
->
ªndî_°©e_ba£
 >> 6) & 0x3) << 4;

4693 if(
psx_gpu
->
ªndî_°©e_ba£
 & 
RENDER_STATE_DITHER
)

4694 
c⁄åﬁ_mask
 |= 0x4;

4696 if(
psx_gpu
->
ªndî_°©e_ba£
 & 
RENDER_STATE_MASK_EVALUATE
)

4697 
c⁄åﬁ_mask
 |= 0x8;

4699 
c⁄åﬁ_mask
)

4702 
	`ªndî_löe_body
(
unshaded
, 
unbÀnded
, 
undôhîed
, 
no
, 
n⁄e
);

4706 
	`ªndî_löe_body
(
shaded
, 
unbÀnded
, 
undôhîed
, 
no
, 
n⁄e
);

4710 
	`ªndî_löe_body
(
unshaded
, 
bÀnded
, 
undôhîed
, 
no
, 
avîage
);

4714 
	`ªndî_löe_body
(
shaded
, 
bÀnded
, 
undôhîed
, 
no
, 
avîage
);

4718 
	`ªndî_löe_body
(
unshaded
, 
unbÀnded
, 
dôhîed
, 
no
, 
n⁄e
);

4722 
	`ªndî_löe_body
(
shaded
, 
unbÀnded
, 
dôhîed
, 
no
, 
n⁄e
);

4726 
	`ªndî_löe_body
(
unshaded
, 
bÀnded
, 
dôhîed
, 
no
, 
avîage
);

4730 
	`ªndî_löe_body
(
shaded
, 
bÀnded
, 
dôhîed
, 
no
, 
avîage
);

4734 
	`ªndî_löe_body
(
unshaded
, 
unbÀnded
, 
undôhîed
, 
yes
, 
n⁄e
);

4738 
	`ªndî_löe_body
(
shaded
, 
unbÀnded
, 
undôhîed
, 
yes
, 
n⁄e
);

4742 
	`ªndî_löe_body
(
unshaded
, 
bÀnded
, 
undôhîed
, 
yes
, 
avîage
);

4746 
	`ªndî_löe_body
(
shaded
, 
bÀnded
, 
undôhîed
, 
yes
, 
avîage
);

4750 
	`ªndî_löe_body
(
unshaded
, 
unbÀnded
, 
dôhîed
, 
yes
, 
n⁄e
);

4754 
	`ªndî_löe_body
(
shaded
, 
unbÀnded
, 
dôhîed
, 
yes
, 
n⁄e
);

4758 
	`ªndî_löe_body
(
unshaded
, 
bÀnded
, 
dôhîed
, 
yes
, 
avîage
);

4762 
	`ªndî_löe_body
(
shaded
, 
bÀnded
, 
dôhîed
, 
yes
, 
avîage
);

4766 
	`ªndî_löe_body
(
unshaded
, 
bÀnded
, 
undôhîed
, 
no
, 
add
);

4770 
	`ªndî_löe_body
(
shaded
, 
bÀnded
, 
undôhîed
, 
no
, 
add
);

4774 
	`ªndî_löe_body
(
unshaded
, 
bÀnded
, 
dôhîed
, 
no
, 
add
);

4778 
	`ªndî_löe_body
(
shaded
, 
bÀnded
, 
dôhîed
, 
no
, 
add
);

4782 
	`ªndî_löe_body
(
unshaded
, 
bÀnded
, 
undôhîed
, 
yes
, 
add
);

4786 
	`ªndî_löe_body
(
shaded
, 
bÀnded
, 
undôhîed
, 
yes
, 
add
);

4790 
	`ªndî_löe_body
(
unshaded
, 
bÀnded
, 
dôhîed
, 
yes
, 
add
);

4794 
	`ªndî_löe_body
(
shaded
, 
bÀnded
, 
dôhîed
, 
yes
, 
add
);

4798 
	`ªndî_löe_body
(
unshaded
, 
bÀnded
, 
undôhîed
, 
no
, 
subåa˘
);

4802 
	`ªndî_löe_body
(
shaded
, 
bÀnded
, 
undôhîed
, 
no
, 
subåa˘
);

4806 
	`ªndî_löe_body
(
unshaded
, 
bÀnded
, 
dôhîed
, 
no
, 
subåa˘
);

4810 
	`ªndî_löe_body
(
shaded
, 
bÀnded
, 
dôhîed
, 
no
, 
subåa˘
);

4814 
	`ªndî_löe_body
(
unshaded
, 
bÀnded
, 
undôhîed
, 
yes
, 
subåa˘
);

4818 
	`ªndî_löe_body
(
shaded
, 
bÀnded
, 
undôhîed
, 
yes
, 
subåa˘
);

4822 
	`ªndî_löe_body
(
unshaded
, 
bÀnded
, 
dôhîed
, 
yes
, 
subåa˘
);

4826 
	`ªndî_löe_body
(
shaded
, 
bÀnded
, 
dôhîed
, 
yes
, 
subåa˘
);

4830 
	`ªndî_löe_body
(
unshaded
, 
bÀnded
, 
undôhîed
, 
no
, 
add_fouπh
);

4834 
	`ªndî_löe_body
(
shaded
, 
bÀnded
, 
undôhîed
, 
no
, 
add_fouπh
);

4838 
	`ªndî_löe_body
(
unshaded
, 
bÀnded
, 
dôhîed
, 
no
, 
add_fouπh
);

4842 
	`ªndî_löe_body
(
shaded
, 
bÀnded
, 
dôhîed
, 
no
, 
add_fouπh
);

4846 
	`ªndî_löe_body
(
unshaded
, 
bÀnded
, 
undôhîed
, 
yes
, 
add_fouπh
);

4850 
	`ªndî_löe_body
(
shaded
, 
bÀnded
, 
undôhîed
, 
yes
, 
add_fouπh
);

4854 
	`ªndî_löe_body
(
unshaded
, 
bÀnded
, 
dôhîed
, 
yes
, 
add_fouπh
);

4858 
	`ªndî_löe_body
(
shaded
, 
bÀnded
, 
dôhîed
, 
yes
, 
add_fouπh
);

4861 
	}
}

4864 
	$ªndî_block_fûl
(
psx_gpu_°ru˘
 *
psx_gpu
, 
u32
 
cﬁ‹
, u32 
x
, u32 
y
,

4865 
u32
 
width
, u32 
height
)

4867 if((
width
 =0Ë|| (
height
 == 0))

4870 
	`övÆid©e_ãxtuª_ˇche_ªgi⁄
(
psx_gpu
, 
x
, 
y
, x + 
width
 - 1, y + 
height
 - 1);

4872 
u32
 
r
 = 
cﬁ‹
 & 0xFF;

4873 
u32
 
g
 = (
cﬁ‹
 >> 8) & 0xFF;

4874 
u32
 
b
 = (
cﬁ‹
 >> 16) & 0xFF;

4875 
u32
 
cﬁ‹_16bµ
 = (
r
 >> 3Ë| ((
g
 >> 3Ë<< 5Ë| ((
b
 >> 3) << 10) |

4876 
psx_gpu
->
mask_msb
;

4877 
u32
 
cﬁ‹_32bµ
 = 
cﬁ‹_16bµ
 | (color_16bpp << 16);

4879 
u32
 *
vøm_±r
 = (u32 *)(
psx_gpu
->
vøm_out_±r
 + 
x
 + (
y
 * 1024));

4881 
u32
 
pôch
 = 512 - (
width
 / 2);

4882 
u32
 
num_width
;

4884 if(
psx_gpu
->
ªndî_mode
 & 
RENDER_INTERLACE_ENABLED
)

4886 
pôch
 += 512;

4887 
height
 /= 2;

4889 if(
psx_gpu
->
ªndî_mode
 & 
RENDER_INTERLACE_ODD
)

4890 
vøm_±r
 += 512;

4893 
height
)

4895 
num_width
 = 
width
;

4896 
num_width
)

4898 
vøm_±r
[0] = 
cﬁ‹_32bµ
;

4899 
vøm_±r
[1] = 
cﬁ‹_32bµ
;

4900 
vøm_±r
[2] = 
cﬁ‹_32bµ
;

4901 
vøm_±r
[3] = 
cﬁ‹_32bµ
;

4902 
vøm_±r
[4] = 
cﬁ‹_32bµ
;

4903 
vøm_±r
[5] = 
cﬁ‹_32bµ
;

4904 
vøm_±r
[6] = 
cﬁ‹_32bµ
;

4905 
vøm_±r
[7] = 
cﬁ‹_32bµ
;

4907 
vøm_±r
 += 8;

4908 
num_width
 -= 16;

4911 
vøm_±r
 +
pôch
;

4912 
height
--;

4914 
	}
}

4916 
	$ªndî_block_fûl_íh
(
psx_gpu_°ru˘
 *
psx_gpu
, 
u32
 
cﬁ‹
, u32 
x
, u32 
y
,

4917 
u32
 
width
, u32 
height
)

4919 if((
width
 =0Ë|| (
height
 == 0))

4922 if(
width
 > 1024)

4923 
width
 = 1024;

4925 
u32
 
r
 = 
cﬁ‹
 & 0xFF;

4926 
u32
 
g
 = (
cﬁ‹
 >> 8) & 0xFF;

4927 
u32
 
b
 = (
cﬁ‹
 >> 16) & 0xFF;

4928 
u32
 
cﬁ‹_16bµ
 = (
r
 >> 3Ë| ((
g
 >> 3Ë<< 5Ë| ((
b
 >> 3) << 10) |

4929 
psx_gpu
->
mask_msb
;

4930 
u32
 
cﬁ‹_32bµ
 = 
cﬁ‹_16bµ
 | (color_16bpp << 16);

4932 
u32
 *
vøm_±r
 = (u32 *)(
psx_gpu
->
vøm_out_±r
 + 
x
 + (
y
 * 1024));

4934 
u32
 
pôch
 = 1024 / 2 - (
width
 / 2);

4935 
u32
 
num_width
;

4937 
height
)

4939 
num_width
 = 
width
;

4940 
num_width
)

4942 
vøm_±r
[0] = 
cﬁ‹_32bµ
;

4943 
vøm_±r
[1] = 
cﬁ‹_32bµ
;

4944 
vøm_±r
[2] = 
cﬁ‹_32bµ
;

4945 
vøm_±r
[3] = 
cﬁ‹_32bµ
;

4946 
vøm_±r
[4] = 
cﬁ‹_32bµ
;

4947 
vøm_±r
[5] = 
cﬁ‹_32bµ
;

4948 
vøm_±r
[6] = 
cﬁ‹_32bµ
;

4949 
vøm_±r
[7] = 
cﬁ‹_32bµ
;

4951 
vøm_±r
 += 8;

4952 
num_width
 -= 16;

4955 
vøm_±r
 +
pôch
;

4956 
height
--;

4958 
	}
}

4960 
	$ªndî_block_c›y
(
psx_gpu_°ru˘
 *
psx_gpu
, 
u16
 *
sour˚
, 
u32
 
x
, u32 
y
,

4961 
u32
 
width
, u32 
height
, u32 
pôch
)

4963 
u16
 *
vøm_±r
 = 
psx_gpu
->vøm_±∏+ 
x
 + (
y
 * 1024);

4964 
u32
 
døw_x
, 
døw_y
;

4965 
u32
 
mask_msb
 = 
psx_gpu
->mask_msb;

4967 if((
width
 =0Ë|| (
height
 == 0))

4970 
	`Êush_ªndî_block_buf„r
(
psx_gpu
);

4971 
	`övÆid©e_ãxtuª_ˇche_ªgi⁄
(
psx_gpu
, 
x
, 
y
, x + 
width
 - 1, y + 
height
 - 1);

4973 
døw_y
 = 0; døw_y < 
height
; draw_y++)

4975 
døw_x
 = 0; døw_x < 
width
; draw_x++)

4977 
vøm_±r
[
døw_x
] = 
sour˚
[døw_x] | 
mask_msb
;

4980 
sour˚
 +
pôch
;

4981 
vøm_±r
 += 1024;

4983 
	}
}

4985 
	$ªndî_block_move
(
psx_gpu_°ru˘
 *
psx_gpu
, 
u32
 
sour˚_x
, u32 
sour˚_y
,

4986 
u32
 
de°_x
, u32 
de°_y
, u32 
width
, u32 
height
)

4988 
	`ªndî_block_c›y
(
psx_gpu
,Ösx_gpu->
vøm_±r
 + 
sour˚_x
 + (
sour˚_y
 * 1024),

4989 
de°_x
, 
de°_y
, 
width
, 
height
, 1024);

4990 
	}
}

4993 
	$öôülize_ªcùroˇl_èbÀ
()

4995 
u32
 
height
;

4996 
u32
 
height_n‹mÆized
;

4997 
u32
 
height_ªcùroˇl
;

4998 
s32
 
shi·
;

5000 
height
 = 1; heighà< (
ªcùroˇl_èbÀ
)

5001 / (
ªcùroˇl_èbÀ
[0]); 
height
++)

5003 
shi·
 = 
	`__buûtö_˛z
(
height
);

5004 
height_n‹mÆized
 = 
height
 << 
shi·
;

5005 
height_ªcùroˇl
 = ((1ULL << 51Ë+ (
height_n‹mÆized
 - 1)) /

5006 
height_n‹mÆized
;

5008 
shi·
 = 32 - (51 - shift);

5010 
ªcùroˇl_èbÀ
[
height
] = (
height_ªcùroˇl
 << 10Ë| 
shi·
;

5012 
	}
}

5015 
	#dôhî_èbÀ_row
(
a
, 
b
, 
c
, 
d
) \

5016 ((
a
 & 0xFFË| ((
b
 & 0xFFË<< 8Ë| ((
c
 & 0xFFË<< 16Ë| ((
d
 & 0xFF) << 24)) \

5017 

	)

5018 
	$öôülize_psx_gpu
(
psx_gpu_°ru˘
 *
psx_gpu
, 
u16
 *
vøm
)

5020 
vec_8x16u
 
ã°_mask
 =

5023 
psx_gpu
->
ã°_mask
 =Åest_mask;

5025 
psx_gpu
->
dúty_ãxtuªs_4bµ_mask
 = 0xFFFFFFFF;

5026 
psx_gpu
->
dúty_ãxtuªs_8bµ_mask
 = 0xFFFFFFFF;

5027 
psx_gpu
->
dúty_ãxtuªs_8bµ_Æã∫©e_mask
 = 0xFFFFFFFF;

5028 
psx_gpu
->
võwp‹t_mask
 = 0;

5029 
psx_gpu
->
cuºít_ãxtuª_∑ge
 = 0;

5030 
psx_gpu
->
cuºít_ãxtuª_mask
 = 0;

5031 
psx_gpu
->
œ°_8bµ_ãxtuª_∑ge
 = 0;

5033 
psx_gpu
->
˛ut_£âögs
 = 0;

5034 
psx_gpu
->
ãxtuª_£âögs
 = 0;

5035 
psx_gpu
->
ªndî_°©e
 = 0;

5036 
psx_gpu
->
ªndî_°©e_ba£
 = 0;

5037 
psx_gpu
->
num_blocks
 = 0;

5038 
psx_gpu
->
uvrgb_pha£
 = 0x8000;

5040 
psx_gpu
->
vøm_±r
 = 
vøm
;

5041 
psx_gpu
->
vøm_out_±r
 = 
vøm
;

5043 
psx_gpu
->
ãxtuª_∑ge_ba£
 =Ösx_gpu->
vøm_±r
;

5044 
psx_gpu
->
ãxtuª_∑ge_±r
 =Ösx_gpu->
vøm_±r
;

5045 
psx_gpu
->
˛ut_±r
 =Ösx_gpu->
vøm_±r
;

5047 
psx_gpu
->
mask_msb
 = 0;

5049 
psx_gpu
->
ãxtuª_wödow_x
 = 0;

5050 
psx_gpu
->
ãxtuª_wödow_y
 = 0;

5051 
psx_gpu
->
ãxtuª_mask_width
 = 0xFF;

5052 
psx_gpu
->
ãxtuª_mask_height
 = 0xFF;

5054 
psx_gpu
->
ªndî_mode
 = 0;

5056 
	`mem£t
(
psx_gpu
->
vøm_±r
, 0, (
u16
) * 1024 * 512);

5058 
	`öôülize_ªcùroˇl_èbÀ
();

5059 
psx_gpu
->
ªcùroˇl_èbÀ_±r
 = 
ªcùroˇl_èbÀ
;

5072 
psx_gpu
->
dôhî_èbÀ
[0] = 
	`dôhî_èbÀ_row
(-4, 0, -3, 1);

5073 
psx_gpu
->
dôhî_èbÀ
[1] = 
	`dôhî_èbÀ_row
(2, -2, 3, -1);

5074 
psx_gpu
->
dôhî_èbÀ
[2] = 
	`dôhî_èbÀ_row
(-3, 1, -4, 0);

5075 
psx_gpu
->
dôhî_èbÀ
[3] = 
	`dôhî_èbÀ_row
(3, -1, 2, -2);

5077 
psx_gpu
->
¥imôive_ty≥
 = 
PRIMITIVE_TYPE_UNKNOWN
;

5079 
psx_gpu
->
íh™˚mít_x_thªshﬁd
 = 256;

5080 
	}
}

5082 
u64
 
	$gë_us
()

5084 
timevÆ
 
tv
;

5085 
	`gëtimeofday
(&
tv
, 
NULL
);

5087  (
tv
.
tv_£c
 * 1000000ULLË+Åv.
tv_u£c
;

5088 
	}
}

5090 #ifde‡
NEON_BUILD


5092 
u32
 
	$gë_cou¡î
()

5094 
u32
 
cou¡î
;

5095 
__asm__
 vﬁ©ûe("mr¯p15, 0, %0, c9, c13, 0" : "Ù"(
cou¡î
));

5097  
cou¡î
;

5098 
	}
}

5100 
	$öô_cou¡î
()

5102 
u32
 
vÆue
;

5103 
asm
 vﬁ©ûe("mr¯p15, 0, %0, c9, c12, 0" : "Ù"(
vÆue
));

5104 
vÆue
 |= 5;

5105 
vÆue
 &= ~8;

5106 
asm
 vﬁ©ûe("m¸Ö15, 0, %0, c9, c12, 0" :: "r"(
vÆue
));

5108 
asm
 volatile("mcrÖ15, 0, %0, c9, c12, 1" :: "r"(1 << 31));

5109 
	}
}

5111 
	$åüngÀ_bíchm¨k
(
psx_gpu_°ru˘
 *
psx_gpu
)

5113 
u32
 
i
;

5115 
u32
 
ticks
;

5116 
u32
 
ticks_ñ≠£d
;

5118 c⁄° 
u32
 
ôî©i⁄s
 = 500000;

5120 
psx_gpu
->
num_blocks
 = 64;

5121 
psx_gpu
->
˛ut_±r
 =Ösx_gpu->
vøm_±r
;

5123 
i
 = 0; i < 64; i++)

5125 
	`mem£t
(&(
psx_gpu
->
blocks
[
i
].
r
), 0, 16);

5128 
	`öô_cou¡î
();

5130 
ticks
 = 
	`gë_cou¡î
();

5132 
i
 = 0; i < 
ôî©i⁄s
; i++)

5134 
	`ãxtuª_•rôe_blocks_8bµ
(
psx_gpu
);

5137 
ticks_ñ≠£d
 = 
	`gë_cou¡î
(Ë- 
ticks
;

5139 
	`¥ötf
("bíchm¨k: %l‡cy˛es\n", ()
ticks_ñ≠£d
 / (
ôî©i⁄s
 * 64));

5140 
	}
}

5144 
	~"psx_gpu_4x.c
"

	@plugins/gpu_neon/psx_gpu/psx_gpu.h

15 #i‚de‡
PSX_GPU_H


16 
	#PSX_GPU_H


	)

20 
	mPRIMITIVE_TYPE_TRIANGLE
 = 0,

21 
	mPRIMITIVE_TYPE_SPRITE
 = 1,

22 
	mPRIMITIVE_TYPE_LINE
 = 2,

23 
	mPRIMITIVE_TYPE_UNKNOWN
 = 3

24 } 
	t¥imôive_ty≥_íum
;

28 
	mTEXTURE_MODE_4BPP
 = 0,

29 
	mTEXTURE_MODE_8BPP
 = 1,

30 
	mTEXTURE_MODE_16BPP
 = 2

31 } 
	tãxtuª_mode_íum
;

35 
	mBLEND_MODE_AVERAGE
 = 0,

36 
	mBLEND_MODE_ADD
 = 1,

37 
	mBLEND_MODE_SUBTRACT
 = 2,

38 
	mBLEND_MODE_ADD_FOURTH
 = 3

39 } 
	tbÀnd_mode_íum
;

43 
	mRENDER_FLAGS_MODULATE_TEXELS
 = 0x1,

44 
	mRENDER_FLAGS_BLEND
 = 0x2,

45 
	mRENDER_FLAGS_TEXTURE_MAP
 = 0x4,

46 
	mRENDER_FLAGS_QUAD
 = 0x8,

47 
	mRENDER_FLAGS_SHADE
 = 0x10,

48 } 
	tªndî_Êags_íum
;

52 
	mRENDER_STATE_DITHER
 = 0x8,

53 
	mRENDER_STATE_MASK_EVALUATE
 = 0x20,

54 } 
	tªndî_°©e_íum
;

58 
	mRENDER_INTERLACE_ENABLED
 = 0x1,

59 
	mRENDER_INTERLACE_ODD
 = 0x2,

60 } 
	tªndî_mode_íum
;

64 
u16
 
	mÀ·_x
;

65 
u16
 
	mnum_blocks
;

66 
u16
 
	mright_mask
;

67 
u16
 
	my
;

68 } 
	tedge_d©a_°ru˘
;

76 
vec_8x16u
 
	muv
;

77 
vec_8x16u
 
	mãxñs
;

78 
vec_8x16u
 
	mdøw_mask
;

86 
vec_8x8u
 
	mr
;

87 
vec_8x8u
 
	mg
;

88 
vec_8x8u
 
	mb
;

91 
vec_8x16u
 
	mpixñs
;

95 
u32
 
	mdøw_mask_bôs
;

96 
u16
 *
	mfb_±r
;

99 
vec_8x16u
 
	mdôhî_off£ts
;

100 } 
	tblock_°ru˘
;

102 
	#MAX_SPANS
 512

	)

103 
	#MAX_BLOCKS
 64

	)

104 
	#MAX_BLOCKS_PER_ROW
 128

	)

106 
	#SPAN_DATA_BLOCKS_SIZE
 32

	)

108 
ªndî_block_h™dÀr_°ru˘
 
	tªndî_block_h™dÀr_°ru˘
;

113 
vec_8x16u
 
	mã°_mask
;

115 
vec_4x32u
 
	muvrg
;

116 
vec_4x32u
 
	muvrg_dx
;

117 
vec_4x32u
 
	muvrg_dy
;

119 
vec_4x32u
 
	mu_block_•™
;

120 
vec_4x32u
 
	mv_block_•™
;

121 
vec_4x32u
 
	mr_block_•™
;

122 
vec_4x32u
 
	mg_block_•™
;

123 
vec_4x32u
 
	mb_block_•™
;

125 
u32
 
	mb
;

126 
u32
 
	mb_dy
;

128 
u32
 
	måüngÀ_¨ó
;

130 
u32
 
	mãxtuª_wödow_£âögs
;

131 
u32
 
	mcuºít_ãxtuª_mask
;

132 
u32
 
	mvõwp‹t_mask
;

133 
u32
 
	mdúty_ãxtuªs_4bµ_mask
;

134 
u32
 
	mdúty_ãxtuªs_8bµ_mask
;

135 
u32
 
	mdúty_ãxtuªs_8bµ_Æã∫©e_mask
;

137 
u32
 
	måüngÀ_cﬁ‹
;

138 
u32
 
	mdôhî_èbÀ
[4];

140 
u32
 
	muvrgb_pha£
;

142 
ªndî_block_h™dÀr_°ru˘
 *
	mªndî_block_h™dÀr
;

143 *
	mãxtuª_∑ge_±r
;

144 *
	mãxtuª_∑ge_ba£
;

145 
u16
 *
	m˛ut_±r
;

146 
u16
 *
	mvøm_±r
;

147 
u16
 *
	mvøm_out_±r
;

149 
u16
 
	mªndî_°©e_ba£
;

150 
u16
 
	mªndî_°©e
;

152 
u16
 
	mnum_•™s
;

153 
u16
 
	mnum_blocks
;

155 
s16
 
	mvõwp‹t_°¨t_x
;

156 
s16
 
	mvõwp‹t_°¨t_y
;

157 
s16
 
	mvõwp‹t_íd_x
;

158 
s16
 
	mvõwp‹t_íd_y
;

160 
u16
 
	mmask_msb
;

162 
u8
 
	måüngÀ_wödög
;

164 
u8
 
	mdi•œy_¨ó_døw_íabÀ
;

166 
u8
 
	mcuºít_ãxtuª_∑ge
;

167 
u8
 
	mœ°_8bµ_ãxtuª_∑ge
;

169 
u8
 
	mãxtuª_mask_width
;

170 
u8
 
	mãxtuª_mask_height
;

171 
u8
 
	mãxtuª_wödow_x
;

172 
u8
 
	mãxtuª_wödow_y
;

174 
u8
 
	m¥imôive_ty≥
;

175 
u8
 
	mªndî_mode
;

177 
s16
 
	moff£t_x
;

178 
s16
 
	moff£t_y
;

180 
u16
 
	m˛ut_£âögs
;

181 
u16
 
	mãxtuª_£âögs
;

183 
u32
 *
	mªcùroˇl_èbÀ_±r
;

186 
u16
 *
	míh™˚mít_buf_±r
;

187 
u16
 *
	míh™˚mít_cuºít_buf_±r
;

188 
u32
 
	míh™˚mít_x_thªshﬁd
;

189 
s16
 
	mßved_võwp‹t_°¨t_x
;

190 
s16
 
	mßved_võwp‹t_°¨t_y
;

191 
s16
 
	mßved_võwp‹t_íd_x
;

192 
s16
 
	mßved_võwp‹t_íd_y
;

193 
u8
 
	míh™˚mít_buf_by_x16
[64];

197 
u8
 
	mª£rved_a
[160];

200 
block_°ru˘
 
	mblocks
[
MAX_BLOCKS_PER_ROW
];

203 
vec_4x32u
 
	m•™_uvrg_off£t
[
MAX_SPANS
];

204 
edge_d©a_°ru˘
 
	m•™_edge_d©a
[
MAX_SPANS
];

205 
u32
 
	m•™_b_off£t
[
MAX_SPANS
];

207 
u8
 
	mãxtuª_4bµ_ˇche
[32][256 * 256];

208 
u8
 
	mãxtuª_8bµ_eví_ˇche
[16][256 * 256];

209 
u8
 
	mãxtuª_8bµ_odd_ˇche
[16][256 * 256];

210 } 
	tpsx_gpu_°ru˘
;

212 
__©åibuã__
((
	tÆig√d
(16)))

214 
u8
 
u
;

215 
u8
 
v
;

217 
u8
 
r
;

218 
u8
 
g
;

219 
u8
 
b
;

221 
u8
 
ª£rved
[3];

223 
s16
 
x
;

224 
s16
 
y
;

225 
	}
} 
	tvîãx_°ru˘
;

227 
ªndî_block_fûl
(
psx_gpu_°ru˘
 *
psx_gpu
, 
u32
 
cﬁ‹
, u32 
x
, u32 
y
,

228 
u32
 
width
, u32 
height
);

229 
ªndî_block_c›y
(
psx_gpu_°ru˘
 *
psx_gpu
, 
u16
 *
sour˚
, 
u32
 
x
, u32 
y
,

230 
u32
 
width
, u32 
height
, u32 
pôch
);

231 
ªndî_block_move
(
psx_gpu_°ru˘
 *
psx_gpu
, 
u32
 
sour˚_x
, u32 
sour˚_y
,

232 
u32
 
de°_x
, u32 
de°_y
, u32 
width
, u32 
height
);

234 
ªndî_åüngÀ
(
psx_gpu_°ru˘
 *
psx_gpu
, 
vîãx_°ru˘
 *
vîãxes
,

235 
u32
 
Êags
);

236 
ªndî_•rôe
(
psx_gpu_°ru˘
 *
psx_gpu
, 
s32
 
x
, s32 
y
, 
u32
 
u
, u32 
v
,

237 
s32
 
width
, s32 
height
, 
u32
 
Êags
, u32 
cﬁ‹
);

238 
ªndî_löe
(
psx_gpu_°ru˘
 *
gpu
, 
vîãx_°ru˘
 *
vîãxes
, 
u32
 
Êags
,

239 
u32
 
cﬁ‹
, 
doubÀ_ªsﬁuti⁄
);

241 
u32
 
ãxtuª_ªgi⁄_mask
(
s32
 
x1
, s32 
y1
, s32 
x2
, s32 
y2
);

243 
Êush_ªndî_block_buf„r
(
psx_gpu_°ru˘
 *
psx_gpu
);

245 
öôülize_psx_gpu
(
psx_gpu_°ru˘
 *
psx_gpu
, 
u16
 *
vøm
);

246 
u32
 
gpu_∑r£
(
psx_gpu_°ru˘
 *
psx_gpu
, u32 *
li°
, u32 
size
, u32 *
œ°_comm™d
);

248 
åüngÀ_bíchm¨k
(
psx_gpu_°ru˘
 *
psx_gpu
);

	@plugins/gpu_neon/psx_gpu/psx_gpu_4x.c

1 
	#£À˘_íh™˚mít_buf_±r
(
psx_gpu
, 
x
Ë\

	)

2 ((
	gpsx_gpu
)->
	gíh™˚mít_buf_±r
 + \

3 ((
	gpsx_gpu
)->
	gíh™˚mít_buf_by_x16
[(
x
) / 16] << 20))

5 #i‚de‡
NEON_BUILD


6 
	$£tup_•rôe_16bµ_4x
(
psx_gpu_°ru˘
 *
psx_gpu
, 
s32
 
x
, s32 
y
, s32 
u
,

7 
s32
 
v
, s32 
width
, s32 
height
, 
u32
 
cﬁ‹
)

9 
u32
 
À·_off£t
 = 
u
 & 0x7;

10 
u32
 
width_rounded
 = 
width
 + 
À·_off£t
 + 7;

12 
u16
 *
fb_±r
 = 
psx_gpu
->
vøm_out_±r
 + (
y
 * 1024Ë+ (
s32
)(
x
 - 
À·_off£t
 * 2);

13 
u32
 
right_width
 = 
width_rounded
 & 0x7;

14 
u32
 
block_width
 = 
width_rounded
 / 8;

15 
u32
 
fb_±r_pôch
 = (2048 + 16Ë- (
block_width
 * 16);

17 
u32
 
À·_mask_bôs
 = ~(0xFFFF << (
À·_off£t
 * 2));

18 
u32
 
right_mask_bôs
 = 0xFFFC << (
right_width
 * 2);

20 
u32
 
ãxtuª_off£t_ba£
 = 
u
 + (
v
 * 1024);

21 
u32
 
ãxtuª_mask
 =

22 
psx_gpu
->
ãxtuª_mask_width
 | (psx_gpu->
ãxtuª_mask_height
 * 1024);

24 
u32
 
blocks_ªmaöög
;

25 
u32
 
num_blocks
 = 
psx_gpu
->num_blocks;

26 
block_°ru˘
 *
block
 = 
psx_gpu
->
blocks
 + 
num_blocks
;

28 
u16
 *
ãxtuª_∑ge_±r
 = 
psx_gpu
->texture_page_ptr;

29 
u16
 *
ãxtuª_block_±r
;

31 
ãxtuª_off£t_ba£
 &= ~0x7;

33 
•rôes_16bµ
++;

35 if(
block_width
 == 1)

37 
u32
 
mask_bôs
 = 
À·_mask_bôs
 | 
right_mask_bôs
;

38 
u32
 
mask_bôs_a
 = 
mask_bôs
 & 0xFF;

39 
u32
 
mask_bôs_b
 = 
mask_bôs
 >> 8;

41 
vec_8x16u
 
ãxñs
;

42 
vec_8x16u
 
ãxñs_wide
;

44 
height
)

46 
num_blocks
 += 4;

47 
•rôe_blocks
 += 4;

49 if(
num_blocks
 > 
MAX_BLOCKS
)

51 
	`Êush_ªndî_block_buf„r
(
psx_gpu
);

52 
num_blocks
 = 4;

53 
block
 = 
psx_gpu
->
blocks
;

56 
ãxtuª_block_±r
 =

57 
ãxtuª_∑ge_±r
 + (
ãxtuª_off£t_ba£
 & 
ãxtuª_mask
);

59 
	`lﬂd_128b
(
ãxñs
, 
ãxtuª_block_±r
);

61 
	`zù_4x32b
(
	`ve˘‹_ˇ°
(
vec_4x32u
, 
ãxñs_wide
), 
ãxñs
.
low
,Åexels.low);

62 
block
->
ãxñs
 = 
ãxñs_wide
;

63 
block
->
døw_mask_bôs
 = 
mask_bôs_a
;

64 
block
->
fb_±r
 = fb_ptr;

65 
block
++;

67 
block
->
ãxñs
 = 
ãxñs_wide
;

68 
block
->
døw_mask_bôs
 = 
mask_bôs_a
;

69 
block
->
fb_±r
 = fb_ptr + 1024;

70 
block
++;

72 
	`zù_4x32b
(
	`ve˘‹_ˇ°
(
vec_4x32u
, 
ãxñs_wide
), 
ãxñs
.
high
,Åexels.high);

73 
block
->
ãxñs
 = 
ãxñs_wide
;

74 
block
->
døw_mask_bôs
 = 
mask_bôs_b
;

75 
block
->
fb_±r
 = fb_ptr + 8;

76 
block
++;

78 
block
->
ãxñs
 = 
ãxñs_wide
;

79 
block
->
døw_mask_bôs
 = 
mask_bôs_b
;

80 
block
->
fb_±r
 = fb_ptr + 8 + 1024;

81 
block
++;

83 
ãxtuª_off£t_ba£
 += 1024;

84 
fb_±r
 += 2048;

86 
height
--;

87 
psx_gpu
->
num_blocks
 =Çum_blocks;

92 
u32
 
ãxtuª_off£t
;

94 
u32
 
À·_mask_bôs_a
 = 
À·_mask_bôs
 & 0xFF;

95 
u32
 
À·_mask_bôs_b
 = 
À·_mask_bôs
 >> 8;

96 
u32
 
right_mask_bôs_a
 = 
right_mask_bôs
 & 0xFF;

97 
u32
 
right_mask_bôs_b
 = 
right_mask_bôs
 >> 8;

99 
vec_8x16u
 
ãxñs
;

100 
vec_8x16u
 
ãxñs_wide
;

102 
height
)

104 
blocks_ªmaöög
 = 
block_width
 - 2;

105 
num_blocks
 +
block_width
 * 4;

106 
•rôe_blocks
 +
block_width
 * 4;

108 if(
num_blocks
 > 
MAX_BLOCKS
)

110 
	`Êush_ªndî_block_buf„r
(
psx_gpu
);

111 
num_blocks
 = 
block_width
 * 4;

112 
block
 = 
psx_gpu
->
blocks
;

115 
ãxtuª_off£t
 = 
ãxtuª_off£t_ba£
;

116 
ãxtuª_off£t_ba£
 += 1024;

118 
ãxtuª_block_±r
 = 
ãxtuª_∑ge_±r
 + (
ãxtuª_off£t
 & 
ãxtuª_mask
);

120 
	`lﬂd_128b
(
ãxñs
, 
ãxtuª_block_±r
);

122 
	`zù_4x32b
(
	`ve˘‹_ˇ°
(
vec_4x32u
, 
ãxñs_wide
), 
ãxñs
.
low
,Åexels.low);

123 
block
->
ãxñs
 = 
ãxñs_wide
;

124 
block
->
døw_mask_bôs
 = 
À·_mask_bôs_a
;

125 
block
->
fb_±r
 = fb_ptr;

126 
block
++;

128 
block
->
ãxñs
 = 
ãxñs_wide
;

129 
block
->
døw_mask_bôs
 = 
À·_mask_bôs_a
;

130 
block
->
fb_±r
 = fb_ptr + 1024;

131 
block
++;

133 
	`zù_4x32b
(
	`ve˘‹_ˇ°
(
vec_4x32u
, 
ãxñs_wide
), 
ãxñs
.
high
,Åexels.high);

134 
block
->
ãxñs
 = 
ãxñs_wide
;

135 
block
->
døw_mask_bôs
 = 
À·_mask_bôs_b
;

136 
block
->
fb_±r
 = fb_ptr + 8;

137 
block
++;

139 
block
->
ãxñs
 = 
ãxñs_wide
;

140 
block
->
døw_mask_bôs
 = 
À·_mask_bôs_b
;

141 
block
->
fb_±r
 = fb_ptr + 8 + 1024;

142 
block
++;

144 
ãxtuª_off£t
 += 8;

145 
fb_±r
 += 16;

147 
blocks_ªmaöög
)

149 
ãxtuª_block_±r
 = 
ãxtuª_∑ge_±r
 + (
ãxtuª_off£t
 & 
ãxtuª_mask
);

150 
	`lﬂd_128b
(
ãxñs
, 
ãxtuª_block_±r
);

152 
	`zù_4x32b
(
	`ve˘‹_ˇ°
(
vec_4x32u
, 
ãxñs_wide
), 
ãxñs
.
low
,Åexels.low);

153 
block
->
ãxñs
 = 
ãxñs_wide
;

154 
block
->
døw_mask_bôs
 = 0;

155 
block
->
fb_±r
 = fb_ptr;

156 
block
++;

158 
block
->
ãxñs
 = 
ãxñs_wide
;

159 
block
->
døw_mask_bôs
 = 0;

160 
block
->
fb_±r
 = fb_ptr + 1024;

161 
block
++;

163 
	`zù_4x32b
(
	`ve˘‹_ˇ°
(
vec_4x32u
, 
ãxñs_wide
), 
ãxñs
.
high
,Åexels.high);

164 
block
->
ãxñs
 = 
ãxñs_wide
;

165 
block
->
døw_mask_bôs
 = 0;

166 
block
->
fb_±r
 = fb_ptr + 8;

167 
block
++;

169 
block
->
ãxñs
 = 
ãxñs_wide
;

170 
block
->
døw_mask_bôs
 = 0;

171 
block
->
fb_±r
 = fb_ptr + 8 + 1024;

172 
block
++;

174 
ãxtuª_off£t
 += 8;

175 
fb_±r
 += 16;

177 
blocks_ªmaöög
--;

180 
ãxtuª_block_±r
 = 
ãxtuª_∑ge_±r
 + (
ãxtuª_off£t
 & 
ãxtuª_mask
);

181 
	`lﬂd_128b
(
ãxñs
, 
ãxtuª_block_±r
);

183 
	`zù_4x32b
(
	`ve˘‹_ˇ°
(
vec_4x32u
, 
ãxñs_wide
), 
ãxñs
.
low
,Åexels.low);

184 
block
->
ãxñs
 = 
ãxñs_wide
;

185 
block
->
døw_mask_bôs
 = 
right_mask_bôs_a
;

186 
block
->
fb_±r
 = fb_ptr;

187 
block
++;

189 
block
->
ãxñs
 = 
ãxñs_wide
;

190 
block
->
døw_mask_bôs
 = 
right_mask_bôs_a
;

191 
block
->
fb_±r
 = fb_ptr + 1024;

192 
block
++;

194 
	`zù_4x32b
(
	`ve˘‹_ˇ°
(
vec_4x32u
, 
ãxñs_wide
), 
ãxñs
.
high
,Åexels.high);

195 
block
->
ãxñs
 = 
ãxñs_wide
;

196 
block
->
døw_mask_bôs
 = 
right_mask_bôs_b
;

197 
block
->
fb_±r
 = fb_ptr + 8;

198 
block
++;

200 
block
->
ãxñs
 = 
ãxñs_wide
;

201 
block
->
døw_mask_bôs
 = 
right_mask_bôs_b
;

202 
block
->
fb_±r
 = fb_ptr + 8 + 1024;

203 
block
++;

205 
fb_±r
 +
fb_±r_pôch
;

207 
height
--;

208 
psx_gpu
->
num_blocks
 =Çum_blocks;

211 
	}
}

215 
	$£tup_•rôe_u¡extuªd_4x
(
psx_gpu_°ru˘
 *
psx_gpu
, 
s32
 
x
, s32 
y
,

216 
s32
 
u
, s32 
v
, s32 
width
, s32 
height
, 
u32
 
cﬁ‹
)

218 
	`£tup_•rôe_u¡extuªd
(
psx_gpu
, 
x
, 
y
, 
u
, 
v
, 
width
 * 2, 
height
 * 2, 
cﬁ‹
);

219 
	}
}

221 
	#£tup_•rôe_blocks_swôch_ãxtuªd_4x
(
ãxtuª_mode
Ë\

	)

222 
	g£tup_•rôe_
##
	gãxtuª_mode
##
	g_4x
 \

224 
	#£tup_•rôe_blocks_swôch_u¡extuªd_4x
(
ãxtuª_mode
Ë\

	)

225 
	g£tup_•rôe_u¡extuªd_4x
 \

227 
	#£tup_•rôe_blocks_swôch_4x
(
ãxturög
, 
ãxtuª_mode
Ë\

	)

228 
	g£tup_•rôe_blocks_swôch_
##
	gãxturög
##
_4x
(
ãxtuª_mode
) \

231 
	#ªndî_•rôe_blocks_swôch_block_moduœti⁄_4x
(
ãxtuª_mode
, \

	)

232 
	gbÀnd_mode
, 
	gmask_evÆu©e
, 
	gshadög
, 
	gdôhîög
, 
	gãxturög
, 
	gbÀndög
, \

233 
	gmoduœti⁄
) \

235 
£tup_•rôe_blocks_swôch_4x
(
ãxturög
, 
ãxtuª_mode
), \

236 
	gãxtuª_•rôe_blocks_swôch_
##
ãxturög
(
ãxtuª_mode
), \

237 
shade_blocks_swôch
(
unshaded
, 
ãxturög
, 
moduœti⁄
, 
undôhîed
, 
bÀndög
, \

238 
mask_evÆu©e
), \

239 
bÀnd_blocks_swôch
(
ãxturög
, 
bÀndög
, 
bÀnd_mode
, 
mask_evÆu©e
) \

242 
	#ªndî_•rôe_blocks_swôch_block_bÀndög_4x
(
ãxtuª_mode
, \

	)

243 
	gbÀnd_mode
, 
	gmask_evÆu©e
, 
	gshadög
, 
	gdôhîög
, 
	gãxturög
, 
	gbÀndög
) \

244 
ªndî_•rôe_blocks_swôch_block_moduœti⁄_4x
(
ãxtuª_mode
, 
bÀnd_mode
, \

245 
mask_evÆu©e
, 
shadög
, 
dôhîög
, 
ãxturög
, 
bÀndög
, 
moduœãd
), \

246 
ªndî_•rôe_blocks_swôch_block_moduœti⁄_4x
(
ãxtuª_mode
, 
bÀnd_mode
, \

247 
mask_evÆu©e
, 
shadög
, 
dôhîög
, 
ãxturög
, 
bÀndög
, 
unmoduœãd
) \

249 
	#ªndî_•rôe_blocks_swôch_block_ãxturög_4x
(
ãxtuª_mode
, \

	)

250 
	gbÀnd_mode
, 
	gmask_evÆu©e
, 
	gshadög
, 
	gdôhîög
, 
	gãxturög
) \

251 
ªndî_•rôe_blocks_swôch_block_bÀndög_4x
(
ãxtuª_mode
, 
bÀnd_mode
, \

252 
mask_evÆu©e
, 
shadög
, 
dôhîög
, 
ãxturög
, 
unbÀnded
), \

253 
ªndî_•rôe_blocks_swôch_block_bÀndög_4x
(
ãxtuª_mode
, 
bÀnd_mode
, \

254 
mask_evÆu©e
, 
shadög
, 
dôhîög
, 
ãxturög
, 
bÀnded
) \

256 
	#ªndî_•rôe_blocks_swôch_block_dôhîög_4x
(
ãxtuª_mode
, \

	)

257 
	gbÀnd_mode
, 
	gmask_evÆu©e
, 
	gshadög
, 
	gdôhîög
) \

258 
ªndî_•rôe_blocks_swôch_block_ãxturög_4x
(
ãxtuª_mode
, 
bÀnd_mode
, \

259 
mask_evÆu©e
, 
shadög
, 
dôhîög
, 
u¡extuªd
), \

260 
ªndî_•rôe_blocks_swôch_block_ãxturög_4x
(
ãxtuª_mode
, 
bÀnd_mode
, \

261 
mask_evÆu©e
, 
shadög
, 
dôhîög
, 
ãxtuªd
) \

263 
	#ªndî_•rôe_blocks_swôch_block_shadög_4x
(
ãxtuª_mode
, 
bÀnd_mode
, \

	)

264 
	gmask_evÆu©e
, 
	gshadög
) \

265 
ªndî_•rôe_blocks_swôch_block_dôhîög_4x
(
ãxtuª_mode
, 
bÀnd_mode
, \

266 
mask_evÆu©e
, 
shadög
, 
undôhîed
), \

267 
ªndî_•rôe_blocks_swôch_block_dôhîög_4x
(
ãxtuª_mode
, 
bÀnd_mode
, \

268 
mask_evÆu©e
, 
shadög
, 
dôhîed
) \

270 
	#ªndî_•rôe_blocks_swôch_block_mask_evÆu©e_4x
(
ãxtuª_mode
, \

	)

271 
	gbÀnd_mode
, 
	gmask_evÆu©e
) \

272 
ªndî_•rôe_blocks_swôch_block_shadög_4x
(
ãxtuª_mode
, 
bÀnd_mode
, \

273 
mask_evÆu©e
, 
unshaded
), \

274 
ªndî_•rôe_blocks_swôch_block_shadög_4x
(
ãxtuª_mode
, 
bÀnd_mode
, \

275 
mask_evÆu©e
, 
shaded
) \

277 
	#ªndî_•rôe_blocks_swôch_block_bÀnd_mode_4x
(
ãxtuª_mode
, \

	)

278 
	gbÀnd_mode
) \

279 
ªndî_•rôe_blocks_swôch_block_mask_evÆu©e_4x
(
ãxtuª_mode
, 
bÀnd_mode
, \

280 
off
), \

281 
ªndî_•rôe_blocks_swôch_block_mask_evÆu©e_4x
(
ãxtuª_mode
, 
bÀnd_mode
, \

282 
⁄
) \

284 
	#ªndî_•rôe_blocks_swôch_block_ãxtuª_mode_4x
(
ãxtuª_mode
Ë\

	)

285 
ªndî_•rôe_blocks_swôch_block_bÀnd_mode_4x
(
ãxtuª_mode
, 
avîage
), \

286 
ªndî_•rôe_blocks_swôch_block_bÀnd_mode_4x
(
ãxtuª_mode
, 
add
), \

287 
ªndî_•rôe_blocks_swôch_block_bÀnd_mode_4x
(
ãxtuª_mode
, 
subåa˘
), \

288 
ªndî_•rôe_blocks_swôch_block_bÀnd_mode_4x
(
ãxtuª_mode
, 
add_fouπh
) \

290 
	#ªndî_•rôe_blocks_swôch_block_4x
(Ë\

	)

291 
ªndî_•rôe_blocks_swôch_block_ãxtuª_mode_4x
(4b
µ
), \

292 
ªndî_•rôe_blocks_swôch_block_ãxtuª_mode_4x
(8b
µ
), \

293 
ªndî_•rôe_blocks_swôch_block_ãxtuª_mode_4x
(16b
µ
), \

294 
ªndî_•rôe_blocks_swôch_block_ãxtuª_mode_4x
(4b
µ
) \

297 
ªndî_block_h™dÀr_°ru˘
 
	gªndî_•rôe_block_h™dÀrs_4x
[] =

299 
ªndî_•rôe_blocks_swôch_block_4x
()

303 
	$ªndî_•rôe_4x
(
psx_gpu_°ru˘
 *
psx_gpu
, 
s32
 
x
, s32 
y
, 
u32
 
u
, u32 
v
,

304 
s32
 
width
, s32 
height
, 
u32
 
Êags
, u32 
cﬁ‹
)

306 
s32
 
x_right
 = 
x
 + 
width
 - 1;

307 
s32
 
y_bŸtom
 = 
y
 + 
height
 - 1;

309 #ifde‡
PROFILE


310 
•rôes
++;

313 if(
x
 < 
psx_gpu
->
võwp‹t_°¨t_x
)

315 
u32
 
˛ù
 = 
psx_gpu
->
võwp‹t_°¨t_x
 - 
x
;

316 
x
 +
˛ù
;

317 
u
 +
˛ù
;

318 
width
 -
˛ù
;

321 if(
y
 < 
psx_gpu
->
võwp‹t_°¨t_y
)

323 
s32
 
˛ù
 = 
psx_gpu
->
võwp‹t_°¨t_y
 - 
y
;

324 
y
 +
˛ù
;

325 
v
 +
˛ù
;

326 
height
 -
˛ù
;

329 if(
x_right
 > 
psx_gpu
->
võwp‹t_íd_x
)

330 
width
 -
x_right
 - 
psx_gpu
->
võwp‹t_íd_x
;

332 if(
y_bŸtom
 > 
psx_gpu
->
võwp‹t_íd_y
)

333 
height
 -
y_bŸtom
 - 
psx_gpu
->
võwp‹t_íd_y
;

335 if((
width
 <0Ë|| (
height
 <= 0))

338 
psx_gpu
->
vøm_out_±r
 = 
	`£À˘_íh™˚mít_buf_±r
’sx_gpu, 
x
);

340 
x
 *= 2;

341 
y
 *= 2;

343 #ifde‡
PROFILE


344 
•™_pixñs
 +
width
 * 
height
;

345 
•™s
 +
height
;

348 
u32
 
ªndî_°©e
 = 
Êags
 &

349 (
RENDER_FLAGS_MODULATE_TEXELS
 | 
RENDER_FLAGS_BLEND
 |

350 
RENDER_FLAGS_TEXTURE_MAP
);

351 
ªndî_°©e
 |=

352 (
psx_gpu
->
ªndî_°©e_ba£
 & ~
RENDER_STATE_DITHER
);

354 if((
psx_gpu
->
ªndî_°©e
 !=Ñender_state) ||

355 (
psx_gpu
->
¥imôive_ty≥
 !
PRIMITIVE_TYPE_SPRITE
))

357 
psx_gpu
->
ªndî_°©e
 =Ñender_state;

358 
	`Êush_ªndî_block_buf„r
(
psx_gpu
);

359 #ifde‡
PROFILE


360 
°©e_ch™ges
++;

364 
psx_gpu
->
¥imôive_ty≥
 = 
PRIMITIVE_TYPE_SPRITE
;

366 
cﬁ‹
 &= 0xFFFFFF;

368 if(
psx_gpu
->
åüngÀ_cﬁ‹
 !
cﬁ‹
)

370 
	`Êush_ªndî_block_buf„r
(
psx_gpu
);

371 
psx_gpu
->
åüngÀ_cﬁ‹
 = 
cﬁ‹
;

374 if(
cﬁ‹
 == 0x808080)

375 
ªndî_°©e
 |
RENDER_FLAGS_MODULATE_TEXELS
;

377 
ªndî_block_h™dÀr_°ru˘
 *
ªndî_block_h™dÀr
 =

378 &(
ªndî_•rôe_block_h™dÀrs_4x
[
ªndî_°©e
]);

379 
psx_gpu
->
ªndî_block_h™dÀr
 =Ñender_block_handler;

381 ((
£tup_•rôe_fun˘i⁄_ty≥
 *)
ªndî_block_h™dÀr
->
£tup_blocks
)

382 (
psx_gpu
, 
x
, 
y
, 
u
, 
v
, 
width
, 
height
, 
cﬁ‹
);

383 
	}
}

	@plugins/gpu_neon/psx_gpu/psx_gpu_main.c

15 
	~<°dio.h
>

16 
	~<°dlib.h
>

18 
	~"SDL.h
"

19 
	~"comm⁄.h
"

21 
u32
 
•™_pixñs
;

22 
u32
 
•™_pixñ_blocks
;

23 
u32
 
•™s
;

24 
u32
 
åüngÀs
;

25 
u32
 
•rôes
;

26 
u32
 
•rôes_4bµ
;

27 
u32
 
•rôes_8bµ
;

28 
u32
 
•rôes_16bµ
;

29 
u32
 
•rôes_u¡extuªd
;

30 
u32
 
•rôe_blocks
;

31 
u32
 
löes
;

32 
u32
 
ãxñs_4bµ
;

33 
u32
 
ãxñs_8bµ
;

34 
u32
 
ãxñs_16bµ
;

35 
u32
 
ãxñ_blocks_4bµ
;

36 
u32
 
ãxñ_blocks_8bµ
;

37 
u32
 
ãxñ_blocks_16bµ
;

38 
u32
 
ãxñ_blocks_u¡extuªd
;

39 
u32
 
bÀnd_blocks
;

40 
u32
 
ªndî_buf„r_Êushes
;

41 
u32
 
°©e_ch™ges
;

42 
u32
 
åivül_ªje˘s
;

43 
u32
 
À·_•lô_åüngÀs
;

44 
u32
 
Ê©_åüngÀs
;

45 
u32
 
˛ù≥d_åüngÀs
;

46 
u32
 
zîo_block_•™s
;

47 
u32
 
ãxtuª_ˇche_lﬂds
;

48 
u32
 
Ál£_moduœãd_blocks
;

50 
u32
 
	gmism©ches
;

54 
u16
 
	mvøm
[1024 * 512];

55 
u32
 
	mgpu_ªgi°î
[15];

56 
u32
 
	m°©us
;

57 } 
	tgpu_dump_°ru˘
;

59 
gpu_dump_°ru˘
 
	g°©e
;

61 
psx_gpu_°ru˘
 
__©åibuã__
((
	$Æig√d
(256))Ë
_psx_gpu
;

62 
u16
 
	`__©åibuã__
((
	$Æig√d
(256))Ë
_vøm
[(1024 * 512) + 1024];

64 
	#≥r˚¡_of
(
numî©‹
, 
díomö©‹
) \

65 (((()(
numî©‹
)Ë/ (
díomö©‹
)) * 100.0) \

66 

	)

67 
	$˛ór_°©s
()

69 
åüngÀs
 = 0;

70 
•rôes
 = 0;

71 
•rôes_4bµ
 = 0;

72 
•rôes_8bµ
 = 0;

73 
•rôes_16bµ
 = 0;

74 
•rôes_u¡extuªd
 = 0;

75 
•rôe_blocks
 = 0;

76 
löes
 = 0;

77 
•™_pixñs
 = 0;

78 
•™_pixñ_blocks
 = 0;

79 
•™s
 = 0;

80 
ãxñs_4bµ
 = 0;

81 
ãxñs_8bµ
 = 0;

82 
ãxñs_16bµ
 = 0;

83 
ãxñ_blocks_u¡extuªd
 = 0;

84 
ãxñ_blocks_4bµ
 = 0;

85 
ãxñ_blocks_8bµ
 = 0;

86 
ãxñ_blocks_16bµ
 = 0;

87 
bÀnd_blocks
 = 0;

88 
ªndî_buf„r_Êushes
 = 0;

89 
°©e_ch™ges
 = 0;

90 
åivül_ªje˘s
 = 0;

91 
À·_•lô_åüngÀs
 = 0;

92 
Ê©_åüngÀs
 = 0;

93 
˛ù≥d_åüngÀs
 = 0;

94 
zîo_block_•™s
 = 0;

95 
ãxtuª_ˇche_lﬂds
 = 0;

96 
Ál£_moduœãd_blocks
 = 0;

97 
	}
}

99 
	$upd©e_s¸ìn
(
psx_gpu_°ru˘
 *
psx_gpu
, 
SDL_SurÁ˚
 *
s¸ìn
)

101 
u32
 
x
, 
y
;

103 
y
 = 0; y < 512; y++)

105 
x
 = 0; x < 1024; x++)

107 
u32
 
pixñ
 = 
psx_gpu
->
vøm_±r
[(
y
 * 1024Ë+ 
x
];

108 ((
u32
 *)
s¸ìn
->
pixñs
)[(
y
 * 1024Ë+ 
x
] =

109 ((
pixñ
 & 0x1F) << (16 + 3)) |

110 (((
pixñ
 >> 5) & 0x1F) << (8 + 3)) |

111 (((
pixñ
 >> 10) & 0x1F) << 3);

115 
	`SDL_Flù
(
s¸ìn
);

116 
	}
}

118 #ifde‡
NEON_BUILD


120 
	~<f˙é.h
>

121 
	~<löux/fb.h
>

122 
	~<sys/mm™.h
>

123 
	~<sys/io˘l.h
>

127 
	$maö
(
¨gc
, *
¨gv
[])

129 
psx_gpu_°ru˘
 *
psx_gpu
 = &
_psx_gpu
;

130 
SDL_SurÁ˚
 *
s¸ìn
 = 
NULL
;

131 
SDL_Evít
 
evít
;

133 
u32
 *
li°
;

134 
size
;

135 
FILE
 *
°©e_fûe
;

136 
FILE
 *
li°_fûe
;

137 
u32
 
no_di•œy
 = 0;

139 if((
¨gc
 != 3) && (argc != 4))

141 
	`¥ötf
("ußge:\n%†<°©e> <li°>\n", 
¨gv
[0]);

145 if((
¨gc
 =4Ë&& !
	`°rcmp
(
¨gv
[3], "-n"))

146 
no_di•œy
 = 1;

148 
°©e_fûe
 = 
	`f›í
(
¨gv
[1], "rb");

149 
	`‰ód
(&
°©e
, 1, (
gpu_dump_°ru˘
), 
°©e_fûe
);

150 
	`f˛o£
(
°©e_fûe
);

152 
li°_fûe
 = 
	`f›í
(
¨gv
[2], "rb");

154 
	`f£ek
(
li°_fûe
, 0, 
SEEK_END
);

155 
size
 = 
	`·ñl
(
li°_fûe
);

156 
	`f£ek
(
li°_fûe
, 0, 
SEEK_SET
);

159 
li°
 = 
	`mÆloc
(
size
);

160 
	`‰ód
(
li°
, 1, 
size
, 
li°_fûe
);

161 
	`f˛o£
(
li°_fûe
);

163 if(
no_di•œy
 == 0)

165 
	`SDL_Inô
(
SDL_INIT_EVERYTHING
);

166 
s¸ìn
 = 
	`SDL_SëVideoMode
(1024, 512, 32, 0);

167 i‡(
s¸ìn
 == 0)

169 
	`¥ötf
("ˇn'à£àvideÿmode: %s\n", 
	`SDL_GëEº‹
());

174 #ifde‡
NEON_BUILD


175 
u16
 *
vøm_±r
;

177 
	`sy°em
("ofbset -fb /dev/fb1 -mem 6291456 -en 0");

178 
u32
 
fbdev_h™dÀ
 = 
	`›í
("/dev/fb1", 
O_RDWR
);

179 
vøm_±r
 = (
	`mm≠
((*)0x50000000, 1024 * 1024 * 2, 
PROT_READ
 | 
PROT_WRITE
,

180 
MAP_SHARED
 | 0xA0000000, 
fbdev_h™dÀ
, 0));

182 #i‚de‡
MAP_HUGETLB


183 
	#MAP_HUGETLB
 0x40000

	)

185 
vøm_±r
 = (
	`mm≠
((*)0x50000000, 1024 * 1024 * 2, 
PROT_READ
 | 
PROT_WRITE
,

186 
MAP_ANONYMOUS
 | 
MAP_PRIVATE
 | 
MAP_HUGETLB
, -1, 0));

188 
vøm_±r
 = (
	`mm≠
((*)0x50000000, 1024 * 1024 * 2, 
PROT_READ
 | 
PROT_WRITE
,

189 
MAP_ANONYMOUS
 | 
MAP_PRIVATE
, -1, 0));

191 i‡(
vøm_±r
 =
MAP_FAILED
)

193 
	`≥º‹
("mmap");

196 
vøm_±r
 += 64;

198 
	`öôülize_psx_gpu
(
psx_gpu
, 
vøm_±r
);

200 
	`öôülize_psx_gpu
(
psx_gpu
, 
_vøm
 + 64);

203 #ifde‡
NEON_BUILD


208 
	`mem˝y
(
psx_gpu
->
vøm_±r
, 
°©e
.
vøm
, 1024 * 512 * 2);

210 
	`˛ór_°©s
();

212 #ifde‡
NEON_BUILD


213 
	`öô_cou¡î
();

216 
	`gpu_∑r£
(
psx_gpu
, 
li°
, 
size
, 
NULL
);

217 
	`Êush_ªndî_block_buf„r
(
psx_gpu
);

219 
	`˛ór_°©s
();

221 #ifde‡
NEON_BUILD


222 
u32
 
cy˛es
 = 
	`gë_cou¡î
();

225 
	`gpu_∑r£
(
psx_gpu
, 
li°
, 
size
, 
NULL
);

226 
	`Êush_ªndî_block_buf„r
(
psx_gpu
);

228 #ifde‡
NEON_BUILD


229 
u32
 
cy˛es_ñ≠£d
 = 
	`gë_cou¡î
(Ë- 
cy˛es
;

231 
	`¥ötf
("%-64s: %d\n", 
¨gv
[1], 
cy˛es_ñ≠£d
);

233 
	`¥ötf
("%-64s: ", 
¨gv
[1]);

237 
u32
 
i
;

239 
i
 = 0; i < 1024 * 512; i++)

241 if((
psx_gpu
->
vøm_±r
[
i
] & 0x7FFFË!(
°©e
.
vøm
[i] & 0x7FFF))

243 
	`¥ötf
("(%d %d %d) vs (%d %d %d)át (%d %d)\n",

244 
psx_gpu
->
vøm_±r
[
i
] & 0x1F,

245 (
psx_gpu
->
vøm_±r
[
i
] >> 5) & 0x1F,

246 (
psx_gpu
->
vøm_±r
[
i
] >> 10) & 0x1F,

247 
°©e
.
vøm
[
i
] & 0x1F,

248 (
°©e
.
vøm
[
i
] >> 5) & 0x1F,

249 (
°©e
.
vøm
[
i
] >> 10) & 0x1F, i % 1024, i / 1024);

251 
mism©ches
++;

255 
psx_gpu
->
vøm_±r
[
i
] =

256 ((
psx_gpu
->
vøm_±r
[
i
] & 0x1F) / 4) |

257 ((((
psx_gpu
->
vøm_±r
[
i
] >> 5) & 0x1F) / 4) << 5) |

258 ((((
psx_gpu
->
vøm_±r
[
i
] >> 10) & 0x1F) / 4) << 10);

264 
	`¥ötf
("\n");

265 
	`¥ötf
(" %dÖixels, %dÖixel blocks, %d spans\n"

268 
•™_pixñs
, 
•™_pixñ_blocks
, 
•™s
,

269 ()
•™_pixñs
 / 
•™_pixñ_blocks
,

270 ()
•™_pixñs
 / 
•™s
,

271 ()
•™_pixñ_blocks
 / 
•™s
,

272 ()
•™_pixñ_blocks
 / (
•™s
 - 
zîo_block_•™s
),

273 ()
•™_pixñs
 /

274 ((
psx_gpu
->
võwp‹t_íd_x
 -Ösx_gpu->
võwp‹t_°¨t_x
) *

275 (
psx_gpu
->
võwp‹t_íd_y
 -Ösx_gpu->
võwp‹t_°¨t_y
)));

277 
	`¥ötf
(" %dÅriangles\n"

280 
åüngÀs
, 
åivül_ªje˘s
,

281 
	`≥r˚¡_of
(
Ê©_åüngÀs
, 
åüngÀs
),

282 
	`≥r˚¡_of
(
À·_•lô_åüngÀs
, 
åüngÀs
),

283 
	`≥r˚¡_of
(
˛ù≥d_åüngÀs
, 
åüngÀs
),

284 ()
•™_pixñs
 / 
åüngÀs
,

285 ()
•™s
 / 
åüngÀs
);

287 
	`¥ötf
(" Block data:\n");

288 
	`¥ötf
(" %7d 4bµÅexñ block† (%lf%%)\n", 
ãxñ_blocks_4bµ
,

289 
	`≥r˚¡_of
(
ãxñ_blocks_4bµ
, 
•™_pixñ_blocks
));

290 
	`¥ötf
(" %7d 8bµÅexñ block† (%lf%%)\n", 
ãxñ_blocks_8bµ
,

291 
	`≥r˚¡_of
(
ãxñ_blocks_8bµ
, 
•™_pixñ_blocks
));

292 
	`¥ötf
(" %7d 16bµÅexñ block†(%lf%%)\n", 
ãxñ_blocks_16bµ
,

293 
	`≥r˚¡_of
(
ãxñ_blocks_16bµ
, 
•™_pixñ_blocks
));

294 
	`¥ötf
(" %7d u¡extuªd block† (%lf%%)\n", 
ãxñ_blocks_u¡extuªd
,

295 
	`≥r˚¡_of
(
ãxñ_blocks_u¡extuªd
, 
•™_pixñ_blocks
));

296 
	`¥ötf
(" %7d s¥ôêblock† (%lf%%)\n", 
•rôe_blocks
,

297 
	`≥r˚¡_of
(
•rôe_blocks
, 
•™_pixñ_blocks
));

298 
	`¥ötf
(" %7d bÀnded block† (%lf%%)\n", 
bÀnd_blocks
,

299 
	`≥r˚¡_of
(
bÀnd_blocks
, 
•™_pixñ_blocks
));

300 
	`¥ötf
(" %7d fÆ£-mod block† (%lf%%)\n", 
Ál£_moduœãd_blocks
,

301 
	`≥r˚¡_of
(
Ál£_moduœãd_blocks
, 
•™_pixñ_blocks
));

302 
	`¥ötf
("\n");

303 
	`¥ötf
(" %l‡block†≥∏ªndî buf„∏Êush\n", ()
•™_pixñ_blocks
 /

304 
ªndî_buf„r_Êushes
);

305 
	`¥ötf
(" %d zîÿblock s∑ns\n", 
zîo_block_•™s
);

306 
	`¥ötf
(" %d sèã ch™ges, %dÅextuª cachêlﬂds\n", 
°©e_ch™ges
,

307 
ãxtuª_ˇche_lﬂds
);

308 if(
•rôes
)

310 
	`¥ötf
(" %d sprites\n"

315 
•rôes
, 
	`≥r˚¡_of
(
•rôes_4bµ
, sprites),

316 
	`≥r˚¡_of
(
•rôes_8bµ
, 
•rôes
),Öî˚¡_of(
•rôes_16bµ
, sprites),

317 
	`≥r˚¡_of
(
•rôes_u¡extuªd
, 
•rôes
));

319 
	`¥ötf
(" %dÜöes\n", 
löes
);

320 
	`¥ötf
("\n");

321 
	`¥ötf
(" %d mism©ches\n\n\n", 
mism©ches
);

324 
	`fÊush
(
°dout
);

326 if(
no_di•œy
 == 0)

330 
	`upd©e_s¸ìn
(
psx_gpu
, 
s¸ìn
);

332 if(
	`SDL_PﬁlEvít
(&
evít
))

334 if((
evít
.
ty≥
 =
SDL_QUIT
) ||

335 ((
evít
.
ty≥
 =
SDL_KEYDOWN
) &&

336 (
evít
.
key
.
keysym
.
sym
 =
SDLK_ESCAPE
)))

342 
	`SDL_Dñay
(20);

346  (
mism©ches
 != 0);

347 
	}
}

	@plugins/gpu_neon/psx_gpu/psx_gpu_offsets.h

1 
	#psx_gpu_ã°_mask_off£t
 0x0

	)

2 
	#psx_gpu_uvrg_off£t
 0x10

	)

3 
	#psx_gpu_uvrg_dx_off£t
 0x20

	)

4 
	#psx_gpu_uvrg_dy_off£t
 0x30

	)

5 
	#psx_gpu_u_block_•™_off£t
 0x40

	)

6 
	#psx_gpu_v_block_•™_off£t
 0x50

	)

7 
	#psx_gpu_r_block_•™_off£t
 0x60

	)

8 
	#psx_gpu_g_block_•™_off£t
 0x70

	)

9 
	#psx_gpu_b_block_•™_off£t
 0x80

	)

10 
	#psx_gpu_b_off£t
 0x90

	)

11 
	#psx_gpu_b_dy_off£t
 0x94

	)

12 
	#psx_gpu_åüngÀ_¨ó_off£t
 0x98

	)

13 
	#psx_gpu_ãxtuª_wödow_£âögs_off£t
 0x9c

	)

14 
	#psx_gpu_cuºít_ãxtuª_mask_off£t
 0xa0

	)

15 
	#psx_gpu_võwp‹t_mask_off£t
 0xa4

	)

16 
	#psx_gpu_dúty_ãxtuªs_4bµ_mask_off£t
 0xa8

	)

17 
	#psx_gpu_dúty_ãxtuªs_8bµ_mask_off£t
 0xac

	)

18 
	#psx_gpu_dúty_ãxtuªs_8bµ_Æã∫©e_mask_off£t
 0xb0

	)

19 
	#psx_gpu_åüngÀ_cﬁ‹_off£t
 0xb4

	)

20 
	#psx_gpu_dôhî_èbÀ_off£t
 0xb8

	)

21 
	#psx_gpu_uvrgb_pha£_off£t
 0xc8

	)

22 
	#psx_gpu_ªndî_block_h™dÀr_off£t
 0xcc

	)

23 
	#psx_gpu_ãxtuª_∑ge_±r_off£t
 0xd0

	)

24 
	#psx_gpu_ãxtuª_∑ge_ba£_off£t
 0xd4

	)

25 
	#psx_gpu_˛ut_±r_off£t
 0xd8

	)

26 
	#psx_gpu_vøm_±r_off£t
 0xdc

	)

27 
	#psx_gpu_vøm_out_±r_off£t
 0xe0

	)

28 
	#psx_gpu_ªndî_°©e_ba£_off£t
 0xe4

	)

29 
	#psx_gpu_ªndî_°©e_off£t
 0xe6

	)

30 
	#psx_gpu_num_•™s_off£t
 0xe8

	)

31 
	#psx_gpu_num_blocks_off£t
 0xó

	)

32 
	#psx_gpu_võwp‹t_°¨t_x_off£t
 0xec

	)

33 
	#psx_gpu_võwp‹t_°¨t_y_off£t
 0xì

	)

34 
	#psx_gpu_võwp‹t_íd_x_off£t
 0xf0

	)

35 
	#psx_gpu_võwp‹t_íd_y_off£t
 0xf2

	)

36 
	#psx_gpu_mask_msb_off£t
 0xf4

	)

37 
	#psx_gpu_åüngÀ_wödög_off£t
 0xf6

	)

38 
	#psx_gpu_di•œy_¨ó_døw_íabÀ_off£t
 0xf7

	)

39 
	#psx_gpu_cuºít_ãxtuª_∑ge_off£t
 0xf8

	)

40 
	#psx_gpu_œ°_8bµ_ãxtuª_∑ge_off£t
 0xf9

	)

41 
	#psx_gpu_ãxtuª_mask_width_off£t
 0xÁ

	)

42 
	#psx_gpu_ãxtuª_mask_height_off£t
 0xfb

	)

43 
	#psx_gpu_ãxtuª_wödow_x_off£t
 0xfc

	)

44 
	#psx_gpu_ãxtuª_wödow_y_off£t
 0xfd

	)

45 
	#psx_gpu_¥imôive_ty≥_off£t
 0x„

	)

46 
	#psx_gpu_ªndî_mode_off£t
 0xff

	)

47 
	#psx_gpu_off£t_x_off£t
 0x100

	)

48 
	#psx_gpu_off£t_y_off£t
 0x102

	)

49 
	#psx_gpu_˛ut_£âögs_off£t
 0x104

	)

50 
	#psx_gpu_ãxtuª_£âögs_off£t
 0x106

	)

51 
	#psx_gpu_ªcùroˇl_èbÀ_±r_off£t
 0x108

	)

52 
	#psx_gpu_blocks_off£t
 0x200

	)

53 
	#psx_gpu_•™_uvrg_off£t_off£t
 0x2200

	)

54 
	#psx_gpu_•™_edge_d©a_off£t
 0x4200

	)

55 
	#psx_gpu_•™_b_off£t_off£t
 0x5200

	)

56 
	#psx_gpu_ãxtuª_4bµ_ˇche_off£t
 0x5a00

	)

57 
	#psx_gpu_ãxtuª_8bµ_eví_ˇche_off£t
 0x205a00

	)

58 
	#psx_gpu_ãxtuª_8bµ_odd_ˇche_off£t
 0x305a00

	)

	@plugins/gpu_neon/psx_gpu/psx_gpu_offsets_update.c

1 
	~<°dio.h
>

2 
	~<°ddef.h
>

4 
	~"comm⁄.h
"

6 
	#WRITE_OFFSET
(
f
, 
membî
) \

7 
	`Ârötf
(
f
, "#define %-50s0x%x\n", \

9 
	`off£tof
(
psx_gpu_°ru˘
, 
membî
));

	)

11 
	$maö
()

13 
FILE
 *
f
;

15 i‡((
f
) != 4) {

16 
	`Ârötf
(
°dîr
, "badÖointer size\n");

20 
f
 = 
	`f›í
("psx_gpu_offsets.h", "w");

21 i‡(
f
 =
NULL
) {

22 
	`≥º‹
("fopen");

26 
	`WRITE_OFFSET
(
f
, 
ã°_mask
);

27 
	`WRITE_OFFSET
(
f
, 
uvrg
);

28 
	`WRITE_OFFSET
(
f
, 
uvrg_dx
);

29 
	`WRITE_OFFSET
(
f
, 
uvrg_dy
);

30 
	`WRITE_OFFSET
(
f
, 
u_block_•™
);

31 
	`WRITE_OFFSET
(
f
, 
v_block_•™
);

32 
	`WRITE_OFFSET
(
f
, 
r_block_•™
);

33 
	`WRITE_OFFSET
(
f
, 
g_block_•™
);

34 
	`WRITE_OFFSET
(
f
, 
b_block_•™
);

35 
	`WRITE_OFFSET
(
f
, 
b
);

36 
	`WRITE_OFFSET
(
f
, 
b_dy
);

37 
	`WRITE_OFFSET
(
f
, 
åüngÀ_¨ó
);

38 
	`WRITE_OFFSET
(
f
, 
ãxtuª_wödow_£âögs
);

39 
	`WRITE_OFFSET
(
f
, 
cuºít_ãxtuª_mask
);

40 
	`WRITE_OFFSET
(
f
, 
võwp‹t_mask
);

41 
	`WRITE_OFFSET
(
f
, 
dúty_ãxtuªs_4bµ_mask
);

42 
	`WRITE_OFFSET
(
f
, 
dúty_ãxtuªs_8bµ_mask
);

43 
	`WRITE_OFFSET
(
f
, 
dúty_ãxtuªs_8bµ_Æã∫©e_mask
);

44 
	`WRITE_OFFSET
(
f
, 
åüngÀ_cﬁ‹
);

45 
	`WRITE_OFFSET
(
f
, 
dôhî_èbÀ
);

46 
	`WRITE_OFFSET
(
f
, 
uvrgb_pha£
);

47 
	`WRITE_OFFSET
(
f
, 
ªndî_block_h™dÀr
);

48 
	`WRITE_OFFSET
(
f
, 
ãxtuª_∑ge_±r
);

49 
	`WRITE_OFFSET
(
f
, 
ãxtuª_∑ge_ba£
);

50 
	`WRITE_OFFSET
(
f
, 
˛ut_±r
);

51 
	`WRITE_OFFSET
(
f
, 
vøm_±r
);

52 
	`WRITE_OFFSET
(
f
, 
vøm_out_±r
);

53 
	`WRITE_OFFSET
(
f
, 
ªndî_°©e_ba£
);

54 
	`WRITE_OFFSET
(
f
, 
ªndî_°©e
);

55 
	`WRITE_OFFSET
(
f
, 
num_•™s
);

56 
	`WRITE_OFFSET
(
f
, 
num_blocks
);

57 
	`WRITE_OFFSET
(
f
, 
võwp‹t_°¨t_x
);

58 
	`WRITE_OFFSET
(
f
, 
võwp‹t_°¨t_y
);

59 
	`WRITE_OFFSET
(
f
, 
võwp‹t_íd_x
);

60 
	`WRITE_OFFSET
(
f
, 
võwp‹t_íd_y
);

61 
	`WRITE_OFFSET
(
f
, 
mask_msb
);

62 
	`WRITE_OFFSET
(
f
, 
åüngÀ_wödög
);

63 
	`WRITE_OFFSET
(
f
, 
di•œy_¨ó_døw_íabÀ
);

64 
	`WRITE_OFFSET
(
f
, 
cuºít_ãxtuª_∑ge
);

65 
	`WRITE_OFFSET
(
f
, 
œ°_8bµ_ãxtuª_∑ge
);

66 
	`WRITE_OFFSET
(
f
, 
ãxtuª_mask_width
);

67 
	`WRITE_OFFSET
(
f
, 
ãxtuª_mask_height
);

68 
	`WRITE_OFFSET
(
f
, 
ãxtuª_wödow_x
);

69 
	`WRITE_OFFSET
(
f
, 
ãxtuª_wödow_y
);

70 
	`WRITE_OFFSET
(
f
, 
¥imôive_ty≥
);

71 
	`WRITE_OFFSET
(
f
, 
ªndî_mode
);

72 
	`WRITE_OFFSET
(
f
, 
off£t_x
);

73 
	`WRITE_OFFSET
(
f
, 
off£t_y
);

74 
	`WRITE_OFFSET
(
f
, 
˛ut_£âögs
);

75 
	`WRITE_OFFSET
(
f
, 
ãxtuª_£âögs
);

76 
	`WRITE_OFFSET
(
f
, 
ªcùroˇl_èbÀ_±r
);

77 
	`WRITE_OFFSET
(
f
, 
blocks
);

78 
	`WRITE_OFFSET
(
f
, 
•™_uvrg_off£t
);

79 
	`WRITE_OFFSET
(
f
, 
•™_edge_d©a
);

80 
	`WRITE_OFFSET
(
f
, 
•™_b_off£t
);

81 
	`WRITE_OFFSET
(
f
, 
ãxtuª_4bµ_ˇche
);

82 
	`WRITE_OFFSET
(
f
, 
ãxtuª_8bµ_eví_ˇche
);

83 
	`WRITE_OFFSET
(
f
, 
ãxtuª_8bµ_odd_ˇche
);

84 
	`f˛o£
(
f
);

87 
	}
}

	@plugins/gpu_neon/psx_gpu/psx_gpu_parse.c

15 
	~<°dio.h
>

17 
	~"comm⁄.h
"

19 #i‚de‡
comm™d_Àngths


20 c⁄° 
u8
 
	gcomm™d_Àngths
[256] =

41 
	$upd©e_ãxtuª_±r
(
psx_gpu_°ru˘
 *
psx_gpu
)

43 
u8
 *
ãxtuª_ba£
;

44 
u8
 *
ãxtuª_±r
;

46 (
psx_gpu
->
ªndî_°©e_ba£
 >> 8) & 0x3)

49 
TEXTURE_MODE_4BPP
:

50 
ãxtuª_ba£
 = 
psx_gpu
->
ãxtuª_4bµ_ˇche
[psx_gpu->
cuºít_ãxtuª_∑ge
];

52 
ãxtuª_±r
 = 
ãxtuª_ba£
;

53 
ãxtuª_±r
 +
psx_gpu
->
ãxtuª_wödow_x
 & 0xF;

54 
ãxtuª_±r
 +(
psx_gpu
->
ãxtuª_wödow_y
 & 0xF) << 4;

55 
ãxtuª_±r
 +(
psx_gpu
->
ãxtuª_wödow_x
 >> 4) << 8;

56 
ãxtuª_±r
 +(
psx_gpu
->
ãxtuª_wödow_y
 >> 4) << 12;

59 
TEXTURE_MODE_8BPP
:

60 if(
psx_gpu
->
cuºít_ãxtuª_∑ge
 & 0x1)

62 
ãxtuª_ba£
 =

63 
psx_gpu
->
ãxtuª_8bµ_odd_ˇche
[psx_gpu->
cuºít_ãxtuª_∑ge
 >> 1];

67 
ãxtuª_ba£
 =

68 
psx_gpu
->
ãxtuª_8bµ_eví_ˇche
[psx_gpu->
cuºít_ãxtuª_∑ge
 >> 1];

71 
ãxtuª_±r
 = 
ãxtuª_ba£
;

72 
ãxtuª_±r
 +
psx_gpu
->
ãxtuª_wödow_x
 & 0xF;

73 
ãxtuª_±r
 +(
psx_gpu
->
ãxtuª_wödow_y
 & 0xF) << 4;

74 
ãxtuª_±r
 +(
psx_gpu
->
ãxtuª_wödow_x
 >> 4) << 8;

75 
ãxtuª_±r
 +(
psx_gpu
->
ãxtuª_wödow_y
 >> 4) << 12;

78 
TEXTURE_MODE_16BPP
:

79 
ãxtuª_ba£
 = (
u8
 *)(
psx_gpu
->
vøm_±r
);

80 
ãxtuª_ba£
 +(
psx_gpu
->
cuºít_ãxtuª_∑ge
 & 0xF) * 128;

81 
ãxtuª_ba£
 +((
psx_gpu
->
cuºít_ãxtuª_∑ge
 >> 4) * 256) * 2048;

83 
ãxtuª_±r
 = 
ãxtuª_ba£
;

84 
ãxtuª_±r
 +
psx_gpu
->
ãxtuª_wödow_x
 * 2;

85 
ãxtuª_±r
 +(
psx_gpu
->
ãxtuª_wödow_y
) * 2048;

89 
psx_gpu
->
ãxtuª_∑ge_ba£
 = 
ãxtuª_ba£
;

90 
psx_gpu
->
ãxtuª_∑ge_±r
 = 
ãxtuª_±r
;

91 
	}
}

93 
	$£t_ãxtuª
(
psx_gpu_°ru˘
 *
psx_gpu
, 
u32
 
ãxtuª_£âögs
)

95 
ãxtuª_£âögs
 &= 0x1FF;

96 if(
psx_gpu
->
ãxtuª_£âögs
 !=Åexture_settings)

98 
u32
 
√w_ãxtuª_∑ge
 = 
ãxtuª_£âögs
 & 0x1F;

99 
u32
 
ãxtuª_mode
 = (
ãxtuª_£âögs
 >> 7) & 0x3;

100 
u32
 
ªndî_°©e_ba£
 = 
psx_gpu
->render_state_base;

102 
	`Êush_ªndî_block_buf„r
(
psx_gpu
);

104 
ªndî_°©e_ba£
 &= ~(0xF << 6);

105 
ªndî_°©e_ba£
 |((
ãxtuª_£âögs
 >> 5) & 0xF) << 6;

107 
psx_gpu
->
ªndî_°©e_ba£
 =Ñender_state_base;

109 
psx_gpu
->
cuºít_ãxtuª_mask
 = 0x1 << 
√w_ãxtuª_∑ge
;

111 if(
ãxtuª_mode
 =
TEXTURE_MODE_8BPP
)

115 
u32
 
adja˚¡_ãxtuª_∑ge
 = ((
ãxtuª_£âögs
 + 1) & 0xF) | (texture_settings & 0x10);

116 
psx_gpu
->
cuºít_ãxtuª_mask
 |0x1 << 
adja˚¡_ãxtuª_∑ge
;

118 if((
psx_gpu
->
œ°_8bµ_ãxtuª_∑ge
 ^ 
√w_ãxtuª_∑ge
) & 0x1)

120 
u32
 
dúty_ãxtuªs_8bµ_Æã∫©e_mask
 =

121 
psx_gpu
->
dúty_ãxtuªs_8bµ_Æã∫©e_mask
;

122 
psx_gpu
->
dúty_ãxtuªs_8bµ_Æã∫©e_mask
 =

123 
psx_gpu
->
dúty_ãxtuªs_8bµ_mask
;

124 
psx_gpu
->
dúty_ãxtuªs_8bµ_mask
 = 
dúty_ãxtuªs_8bµ_Æã∫©e_mask
;

127 
psx_gpu
->
œ°_8bµ_ãxtuª_∑ge
 = 
√w_ãxtuª_∑ge
;

130 
psx_gpu
->
cuºít_ãxtuª_∑ge
 = 
√w_ãxtuª_∑ge
;

131 
psx_gpu
->
ãxtuª_£âögs
 =Åexture_settings;

133 
	`upd©e_ãxtuª_±r
(
psx_gpu
);

135 
	}
}

137 
	$£t_˛ut
(
psx_gpu_°ru˘
 *
psx_gpu
, 
u32
 
˛ut_£âögs
)

139 if(
psx_gpu
->
˛ut_£âögs
 != clut_settings)

141 
	`Êush_ªndî_block_buf„r
(
psx_gpu
);

142 
psx_gpu
->
˛ut_£âögs
 = clut_settings;

143 
psx_gpu
->
˛ut_±r
 =Ösx_gpu->
vøm_±r
 + ((
˛ut_£âögs
 & 0x7FFF) * 16);

145 
	}
}

147 
	$£t_åüngÀ_cﬁ‹
(
psx_gpu_°ru˘
 *
psx_gpu
, 
u32
 
åüngÀ_cﬁ‹
)

149 if(
psx_gpu
->
åüngÀ_cﬁ‹
 !=Åriangle_color)

151 
	`Êush_ªndî_block_buf„r
(
psx_gpu
);

152 
psx_gpu
->
åüngÀ_cﬁ‹
 =Åriangle_color;

154 
	}
}

156 
	$do_fûl
(
psx_gpu_°ru˘
 *
psx_gpu
, 
u32
 
x
, u32 
y
,

157 
u32
 
width
, u32 
height
, u32 
cﬁ‹
)

159 
x
 &= ~0xF;

160 
width
 = ((width + 0xF) & ~0xF);

162 
	`Êush_ªndî_block_buf„r
(
psx_gpu
);

164 if(
	`u∆ikñy
((
x
 + 
width
) > 1024))

166 
u32
 
width_a
 = 1024 - 
x
;

167 
u32
 
width_b
 = 
width
 - 
width_a
;

169 if(
	`u∆ikñy
((
y
 + 
height
) > 512))

171 
u32
 
height_a
 = 512 - 
y
;

172 
u32
 
height_b
 = 
height
 - 
height_a
;

174 
	`ªndî_block_fûl
(
psx_gpu
, 
cﬁ‹
, 
x
, 
y
, 
width_a
, 
height_a
);

175 
	`ªndî_block_fûl
(
psx_gpu
, 
cﬁ‹
, 0, 
y
, 
width_b
, 
height_a
);

176 
	`ªndî_block_fûl
(
psx_gpu
, 
cﬁ‹
, 
x
, 0, 
width_a
, 
height_b
);

177 
	`ªndî_block_fûl
(
psx_gpu
, 
cﬁ‹
, 0, 0, 
width_b
, 
height_b
);

181 
	`ªndî_block_fûl
(
psx_gpu
, 
cﬁ‹
, 
x
, 
y
, 
width_a
, 
height
);

182 
	`ªndî_block_fûl
(
psx_gpu
, 
cﬁ‹
, 0, 
y
, 
width_b
, 
height
);

187 if(
	`u∆ikñy
((
y
 + 
height
) > 512))

189 
u32
 
height_a
 = 512 - 
y
;

190 
u32
 
height_b
 = 
height
 - 
height_a
;

192 
	`ªndî_block_fûl
(
psx_gpu
, 
cﬁ‹
, 
x
, 
y
, 
width
, 
height_a
);

193 
	`ªndî_block_fûl
(
psx_gpu
, 
cﬁ‹
, 
x
, 0, 
width
, 
height_b
);

197 
	`ªndî_block_fûl
(
psx_gpu
, 
cﬁ‹
, 
x
, 
y
, 
width
, 
height
);

200 
	}
}

202 
	#sign_exãnd_12bô
(
vÆue
) \

203 (((
s32
)((
vÆue
) << 20)) >> 20) \

204 

	)

205 
	#sign_exãnd_11bô
(
vÆue
) \

206 (((
s32
)((
vÆue
) << 21)) >> 21) \

207 

	)

208 
	#sign_exãnd_10bô
(
vÆue
) \

209 (((
s32
)((
vÆue
) << 22)) >> 22) \

210 

	)

212 
	#gë_vîãx_d©a_xy
(
vîãx_numbî
, 
off£t16
) \

213 
vîãxes
[
vîãx_numbî
].
x
 = \

214 
	`sign_exãnd_12bô
(
li°_s16
[
off£t16
]Ë+ 
psx_gpu
->
off£t_x
; \

215 
vîãxes
[
vîãx_numbî
].
y
 = \

216 
	`sign_exãnd_12bô
(
li°_s16
[(
off£t16
Ë+ 1]Ë+ 
psx_gpu
->
off£t_y
; \

217 

	)

218 
	#gë_vîãx_d©a_uv
(
vîãx_numbî
, 
off£t16
) \

219 
vîãxes
[
vîãx_numbî
].
u
 = 
li°_s16
[
off£t16
] & 0xFF; \

220 
vîãxes
[
vîãx_numbî
].
v
 = (
li°_s16
[
off£t16
] >> 8) & 0xFF \

221 

	)

222 
	#gë_vîãx_d©a_rgb
(
vîãx_numbî
, 
off£t32
) \

223 
vîãxes
[
vîãx_numbî
].
r
 = 
li°
[
off£t32
] & 0xFF; \

224 
vîãxes
[
vîãx_numbî
].
g
 = (
li°
[
off£t32
] >> 8) & 0xFF; \

225 
vîãxes
[
vîãx_numbî
].
b
 = (
li°
[
off£t32
] >> 16) & 0xFF \

226 

	)

227 
	#gë_vîãx_d©a_xy_uv
(
vîãx_numbî
, 
off£t16
) \

228 
	`gë_vîãx_d©a_xy
(
vîãx_numbî
, 
off£t16
); \

229 
	`gë_vîãx_d©a_uv
(
vîãx_numbî
, (
off£t16
) + 2) \

230 

	)

231 
	#gë_vîãx_d©a_xy_rgb
(
vîãx_numbî
, 
off£t16
) \

232 
	`gë_vîãx_d©a_rgb
(
vîãx_numbî
, (
off£t16
) / 2); \

233 
	`gë_vîãx_d©a_xy
(
vîãx_numbî
, (
off£t16
) + 2); \

234 

	)

235 
	#gë_vîãx_d©a_xy_uv_rgb
(
vîãx_numbî
, 
off£t16
) \

236 
	`gë_vîãx_d©a_rgb
(
vîãx_numbî
, (
off£t16
) / 2); \

237 
	`gë_vîãx_d©a_xy
(
vîãx_numbî
, (
off£t16
) + 2); \

238 
	`gë_vîãx_d©a_uv
(
vîãx_numbî
, (
off£t16
) + 4); \

239 

	)

240 
	#£t_vîãx_cﬁ‹_c⁄°™t
(
vîãx_numbî
, 
cﬁ‹
) \

241 
vîãxes
[
vîãx_numbî
].
r
 = 
cﬁ‹
 & 0xFF; \

242 
vîãxes
[
vîãx_numbî
].
g
 = (
cﬁ‹
 >> 8) & 0xFF; \

243 
vîãxes
[
vîãx_numbî
].
b
 = (
cﬁ‹
 >> 16) & 0xFF \

244 

	)

245 
	#gë_vîãx_d©a_xy_rgb_c⁄°™t
(
vîãx_numbî
, 
off£t16
, 
cﬁ‹
) \

246 
	`gë_vîãx_d©a_xy
(
vîãx_numbî
, 
off£t16
); \

247 
	`£t_vîãx_cﬁ‹_c⁄°™t
(
vîãx_numbî
, 
cﬁ‹
) \

248 

	)

249 #i‚de‡
SET_Ex


250 
	#SET_Ex
(
r
, 
v
)

	)

253 
vîãx_°ru˘
 
	gvîãxes
[4] 
__©åibuã__
((
Æig√d
(32)));

255 
u32
 
	$gpu_∑r£
(
psx_gpu_°ru˘
 *
psx_gpu
, 
u32
 *
li°
, u32 
size
, u32 *
œ°_comm™d
)

257 
u32
 
cuºít_comm™d
 = 0, 
comm™d_Àngth
;

259 
u32
 *
li°_°¨t
 = 
li°
;

260 
u32
 *
li°_íd
 = 
li°
 + (
size
 / 4);

262 ; 
li°
 < 
li°_íd
;Üi° +1 + 
comm™d_Àngth
)

264 
s16
 *
li°_s16
 = (*)
li°
;

265 
cuºít_comm™d
 = *
li°
 >> 24;

266 
comm™d_Àngth
 = 
comm™d_Àngths
[
cuºít_comm™d
];

267 i‡(
li°
 + 1 + 
comm™d_Àngth
 > 
li°_íd
) {

268 
cuºít_comm™d
 = (
u32
)-1;

272 
cuºít_comm™d
)

279 
u32
 
x
 = 
li°_s16
[2] & 0x3FF;

280 
u32
 
y
 = 
li°_s16
[3] & 0x1FF;

281 
u32
 
width
 = 
li°_s16
[4] & 0x3FF;

282 
u32
 
height
 = 
li°_s16
[5] & 0x1FF;

283 
u32
 
cﬁ‹
 = 
li°
[0] & 0xFFFFFF;

285 
	`do_fûl
(
psx_gpu
, 
x
, 
y
, 
width
, 
height
, 
cﬁ‹
);

291 
	`£t_åüngÀ_cﬁ‹
(
psx_gpu
, 
li°
[0] & 0xFFFFFF);

293 
	`gë_vîãx_d©a_xy
(0, 2);

294 
	`gë_vîãx_d©a_xy
(1, 4);

295 
	`gë_vîãx_d©a_xy
(2, 6);

297 
	`ªndî_åüngÀ
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
);

303 
	`£t_˛ut
(
psx_gpu
, 
li°_s16
[5]);

304 
	`£t_ãxtuª
(
psx_gpu
, 
li°_s16
[9]);

305 
	`£t_åüngÀ_cﬁ‹
(
psx_gpu
, 
li°
[0] & 0xFFFFFF);

307 
	`gë_vîãx_d©a_xy_uv
(0, 2);

308 
	`gë_vîãx_d©a_xy_uv
(1, 6);

309 
	`gë_vîãx_d©a_xy_uv
(2, 10);

311 
	`ªndî_åüngÀ
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
);

317 
	`£t_åüngÀ_cﬁ‹
(
psx_gpu
, 
li°
[0] & 0xFFFFFF);

319 
	`gë_vîãx_d©a_xy
(0, 2);

320 
	`gë_vîãx_d©a_xy
(1, 4);

321 
	`gë_vîãx_d©a_xy
(2, 6);

322 
	`gë_vîãx_d©a_xy
(3, 8);

324 
	`ªndî_åüngÀ
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
);

325 
	`ªndî_åüngÀ
(
psx_gpu
, &(
vîãxes
[1]), 
cuºít_comm™d
);

331 
	`£t_˛ut
(
psx_gpu
, 
li°_s16
[5]);

332 
	`£t_ãxtuª
(
psx_gpu
, 
li°_s16
[9]);

333 
	`£t_åüngÀ_cﬁ‹
(
psx_gpu
, 
li°
[0] & 0xFFFFFF);

335 
	`gë_vîãx_d©a_xy_uv
(0, 2);

336 
	`gë_vîãx_d©a_xy_uv
(1, 6);

337 
	`gë_vîãx_d©a_xy_uv
(2, 10);

338 
	`gë_vîãx_d©a_xy_uv
(3, 14);

340 
	`ªndî_åüngÀ
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
);

341 
	`ªndî_åüngÀ
(
psx_gpu
, &(
vîãxes
[1]), 
cuºít_comm™d
);

347 
	`gë_vîãx_d©a_xy_rgb
(0, 0);

348 
	`gë_vîãx_d©a_xy_rgb
(1, 4);

349 
	`gë_vîãx_d©a_xy_rgb
(2, 8);

351 
	`ªndî_åüngÀ
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
);

360 
	`£t_˛ut
(
psx_gpu
, 
li°_s16
[5]);

361 
	`£t_ãxtuª
(
psx_gpu
, 
li°_s16
[11]);

363 
	`gë_vîãx_d©a_xy_uv_rgb
(0, 0);

364 
	`gë_vîãx_d©a_xy_uv_rgb
(1, 6);

365 
	`gë_vîãx_d©a_xy_uv_rgb
(2, 12);

367 
	`ªndî_åüngÀ
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
);

376 
	`gë_vîãx_d©a_xy_rgb
(0, 0);

377 
	`gë_vîãx_d©a_xy_rgb
(1, 4);

378 
	`gë_vîãx_d©a_xy_rgb
(2, 8);

379 
	`gë_vîãx_d©a_xy_rgb
(3, 12);

381 
	`ªndî_åüngÀ
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
);

382 
	`ªndî_åüngÀ
(
psx_gpu
, &(
vîãxes
[1]), 
cuºít_comm™d
);

391 
	`£t_˛ut
(
psx_gpu
, 
li°_s16
[5]);

392 
	`£t_ãxtuª
(
psx_gpu
, 
li°_s16
[11]);

394 
	`gë_vîãx_d©a_xy_uv_rgb
(0, 0);

395 
	`gë_vîãx_d©a_xy_uv_rgb
(1, 6);

396 
	`gë_vîãx_d©a_xy_uv_rgb
(2, 12);

397 
	`gë_vîãx_d©a_xy_uv_rgb
(3, 18);

399 
	`ªndî_åüngÀ
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
);

400 
	`ªndî_åüngÀ
(
psx_gpu
, &(
vîãxes
[1]), 
cuºít_comm™d
);

406 
vîãxes
[0].
x
 = 
li°_s16
[2] + 
psx_gpu
->
off£t_x
;

407 
vîãxes
[0].
y
 = 
li°_s16
[3] + 
psx_gpu
->
off£t_y
;

408 
vîãxes
[1].
x
 = 
li°_s16
[4] + 
psx_gpu
->
off£t_x
;

409 
vîãxes
[1].
y
 = 
li°_s16
[5] + 
psx_gpu
->
off£t_y
;

411 
	`ªndî_löe
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
, 
li°
[0], 0);

417 
u32
 
num_vîãxes
 = 1;

418 
u32
 *
li°_posôi⁄
 = &(
li°
[2]);

419 
u32
 
xy
 = 
li°
[1];

421 
vîãxes
[1].
x
 = (
xy
 & 0xFFFFË+ 
psx_gpu
->
off£t_x
;

422 
vîãxes
[1].
y
 = (
xy
 >> 16Ë+ 
psx_gpu
->
off£t_y
;

424 
xy
 = *
li°_posôi⁄
;

427 
vîãxes
[0] = vertexes[1];

429 
vîãxes
[1].
x
 = (
xy
 & 0xFFFFË+ 
psx_gpu
->
off£t_x
;

430 
vîãxes
[1].
y
 = (
xy
 >> 16Ë+ 
psx_gpu
->
off£t_y
;

432 
	`ªndî_löe
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
, 
li°
[0], 0);

434 
li°_posôi⁄
++;

435 
num_vîãxes
++;

437 if(
li°_posôi⁄
 >
li°_íd
)

439 
cuºít_comm™d
 = (
u32
)-1;

440 
bªaklo›
;

443 
xy
 = *
li°_posôi⁄
;

444 if((
xy
 & 0xF000F000) == 0x50005000)

448 
comm™d_Àngth
 +(
num_vîãxes
 - 2);

454 
vîãxes
[0].
r
 = 
li°
[0] & 0xFF;

455 
vîãxes
[0].
g
 = (
li°
[0] >> 8) & 0xFF;

456 
vîãxes
[0].
b
 = (
li°
[0] >> 16) & 0xFF;

457 
vîãxes
[0].
x
 = 
li°_s16
[2] + 
psx_gpu
->
off£t_x
;

458 
vîãxes
[0].
y
 = 
li°_s16
[3] + 
psx_gpu
->
off£t_y
;

460 
vîãxes
[1].
r
 = 
li°
[2] & 0xFF;

461 
vîãxes
[1].
g
 = (
li°
[2] >> 8) & 0xFF;

462 
vîãxes
[1].
b
 = (
li°
[2] >> 16) & 0xFF;

463 
vîãxes
[1].
x
 = 
li°_s16
[6] + 
psx_gpu
->
off£t_x
;

464 
vîãxes
[1].
y
 = 
li°_s16
[7] + 
psx_gpu
->
off£t_y
;

466 
	`ªndî_löe
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
, 0, 0);

472 
u32
 
num_vîãxes
 = 1;

473 
u32
 *
li°_posôi⁄
 = &(
li°
[2]);

474 
u32
 
cﬁ‹
 = 
li°
[0];

475 
u32
 
xy
 = 
li°
[1];

477 
vîãxes
[1].
r
 = 
cﬁ‹
 & 0xFF;

478 
vîãxes
[1].
g
 = (
cﬁ‹
 >> 8) & 0xFF;

479 
vîãxes
[1].
b
 = (
cﬁ‹
 >> 16) & 0xFF;

480 
vîãxes
[1].
x
 = (
xy
 & 0xFFFFË+ 
psx_gpu
->
off£t_x
;

481 
vîãxes
[1].
y
 = (
xy
 >> 16Ë+ 
psx_gpu
->
off£t_y
;

483 
cﬁ‹
 = 
li°_posôi⁄
[0];

486 
xy
 = 
li°_posôi⁄
[1];

488 
vîãxes
[0] = vertexes[1];

490 
vîãxes
[1].
r
 = 
cﬁ‹
 & 0xFF;

491 
vîãxes
[1].
g
 = (
cﬁ‹
 >> 8) & 0xFF;

492 
vîãxes
[1].
b
 = (
cﬁ‹
 >> 16) & 0xFF;

493 
vîãxes
[1].
x
 = (
xy
 & 0xFFFFË+ 
psx_gpu
->
off£t_x
;

494 
vîãxes
[1].
y
 = (
xy
 >> 16Ë+ 
psx_gpu
->
off£t_y
;

496 
	`ªndî_löe
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
, 0, 0);

498 
li°_posôi⁄
 += 2;

499 
num_vîãxes
++;

501 if(
li°_posôi⁄
 >
li°_íd
)

503 
cuºít_comm™d
 = (
u32
)-1;

504 
bªaklo›
;

507 
cﬁ‹
 = 
li°_posôi⁄
[0];

508 if((
cﬁ‹
 & 0xF000F000) == 0x50005000)

512 
comm™d_Àngth
 +((
num_vîãxes
 - 2) * 2);

518 
u32
 
x
 = 
	`sign_exãnd_11bô
(
li°_s16
[2] + 
psx_gpu
->
off£t_x
);

519 
u32
 
y
 = 
	`sign_exãnd_11bô
(
li°_s16
[3] + 
psx_gpu
->
off£t_y
);

520 
u32
 
width
 = 
li°_s16
[4] & 0x3FF;

521 
u32
 
height
 = 
li°_s16
[5] & 0x1FF;

523 
	`ªndî_•rôe
(
psx_gpu
, 
x
, 
y
, 0, 0, 
width
, 
height
, 
cuºít_comm™d
, 
li°
[0]);

529 
u32
 
x
 = 
	`sign_exãnd_11bô
(
li°_s16
[2] + 
psx_gpu
->
off£t_x
);

530 
u32
 
y
 = 
	`sign_exãnd_11bô
(
li°_s16
[3] + 
psx_gpu
->
off£t_y
);

531 
u32
 
uv
 = 
li°_s16
[4];

532 
u32
 
width
 = 
li°_s16
[6] & 0x3FF;

533 
u32
 
height
 = 
li°_s16
[7] & 0x1FF;

535 
	`£t_˛ut
(
psx_gpu
, 
li°_s16
[5]);

537 
	`ªndî_•rôe
(
psx_gpu
, 
x
, 
y
, 
uv
 & 0xFF, (uv >> 8Ë& 0xFF, 
width
, 
height
,

538 
cuºít_comm™d
, 
li°
[0]);

547 
s32
 
x
 = 
	`sign_exãnd_11bô
(
li°_s16
[2] + 
psx_gpu
->
off£t_x
);

548 
s32
 
y
 = 
	`sign_exãnd_11bô
(
li°_s16
[3] + 
psx_gpu
->
off£t_y
);

550 
	`ªndî_•rôe
(
psx_gpu
, 
x
, 
y
, 0, 0, 1, 1, 
cuºít_comm™d
, 
li°
[0]);

559 
s32
 
x
 = 
	`sign_exãnd_11bô
(
li°_s16
[2] + 
psx_gpu
->
off£t_x
);

560 
s32
 
y
 = 
	`sign_exãnd_11bô
(
li°_s16
[3] + 
psx_gpu
->
off£t_y
);

562 
	`ªndî_•rôe
(
psx_gpu
, 
x
, 
y
, 0, 0, 8, 8, 
cuºít_comm™d
, 
li°
[0]);

571 
s32
 
x
 = 
	`sign_exãnd_11bô
(
li°_s16
[2] + 
psx_gpu
->
off£t_x
);

572 
s32
 
y
 = 
	`sign_exãnd_11bô
(
li°_s16
[3] + 
psx_gpu
->
off£t_y
);

573 
u32
 
uv
 = 
li°_s16
[4];

575 
	`£t_˛ut
(
psx_gpu
, 
li°_s16
[5]);

577 
	`ªndî_•rôe
(
psx_gpu
, 
x
, 
y
, 
uv
 & 0xFF, (uv >> 8) & 0xFF, 8, 8,

578 
cuºít_comm™d
, 
li°
[0]);

587 
s32
 
x
 = 
	`sign_exãnd_11bô
(
li°_s16
[2] + 
psx_gpu
->
off£t_x
);

588 
s32
 
y
 = 
	`sign_exãnd_11bô
(
li°_s16
[3] + 
psx_gpu
->
off£t_y
);

590 
	`ªndî_•rôe
(
psx_gpu
, 
x
, 
y
, 0, 0, 16, 16, 
cuºít_comm™d
, 
li°
[0]);

599 
s32
 
x
 = 
	`sign_exãnd_11bô
(
li°_s16
[2] + 
psx_gpu
->
off£t_x
);

600 
s32
 
y
 = 
	`sign_exãnd_11bô
(
li°_s16
[3] + 
psx_gpu
->
off£t_y
);

601 
u32
 
uv
 = 
li°_s16
[4];

603 
	`£t_˛ut
(
psx_gpu
, 
li°_s16
[5]);

605 
	`ªndî_•rôe
(
psx_gpu
, 
x
, 
y
, 
uv
 & 0xFF, (uv >> 8) & 0xFF, 16, 16,

606 
cuºít_comm™d
, 
li°
[0]);

612 
u32
 
sx
 = 
li°_s16
[2] & 0x3FF;

613 
u32
 
sy
 = 
li°_s16
[3] & 0x1FF;

614 
u32
 
dx
 = 
li°_s16
[4] & 0x3FF;

615 
u32
 
dy
 = 
li°_s16
[5] & 0x1FF;

616 
u32
 
w
 = ((
li°_s16
[6] - 1) & 0x3FF) + 1;

617 
u32
 
h
 = ((
li°_s16
[7] - 1) & 0x1FF) + 1;

619 i‡(
sx
 =
dx
 && 
sy
 =
dy
 && 
psx_gpu
->
mask_msb
 == 0)

622 
	`ªndî_block_move
(
psx_gpu
, 
sx
, 
sy
, 
dx
, 
dy
, 
w
, 
h
);

626 #ifde‡
PCSX


629 
bªaklo›
;

633 
u32
 
lﬂd_x
 = 
li°_s16
[2] & 0x3FF;

634 
u32
 
lﬂd_y
 = 
li°_s16
[3] & 0x1FF;

635 
u32
 
lﬂd_width
 = 
li°_s16
[4] & 0x3FF;

636 
u32
 
lﬂd_height
 = 
li°_s16
[5] & 0x1FF;

637 
u32
 
lﬂd_size
 = 
lﬂd_width
 * 
lﬂd_height
;

639 
comm™d_Àngth
 +
lﬂd_size
 / 2;

641 if(
lﬂd_size
 & 1)

642 
comm™d_Àngth
++;

644 
	`ªndî_block_c›y
(
psx_gpu
, (
u16
 *)&(
li°_s16
[6]), 
lﬂd_x
, 
lﬂd_y
,

645 
lﬂd_width
, 
lﬂd_height
,Üoad_width);

654 
	`£t_ãxtuª
(
psx_gpu
, 
li°
[0]);

656 if(
li°
[0] & (1 << 9))

657 
psx_gpu
->
ªndî_°©e_ba£
 |
RENDER_STATE_DITHER
;

659 
psx_gpu
->
ªndî_°©e_ba£
 &~
RENDER_STATE_DITHER
;

661 
psx_gpu
->
di•œy_¨ó_døw_íabÀ
 = (
li°
[0] >> 10) & 0x1;

662 
	`SET_Ex
(1, 
li°
[0]);

668 
u32
 
ãxtuª_wödow_£âögs
 = 
li°
[0];

669 
u32
 
tmp
, 
x
, 
y
, 
w
, 
h
;

671 if(
ãxtuª_wödow_£âögs
 !
psx_gpu
->texture_window_settings)

673 
tmp
 = (
ãxtuª_wödow_£âögs
 & 0x1F) | 0x20;

674 
w
 = 8; (
tmp
 & 1) == 0;Åmp >>= 1, w <<= 1);

676 
tmp
 = ((
ãxtuª_wödow_£âögs
 >> 5) & 0x1f) | 0x20;

677 
h
 = 8; (
tmp
 & 1) == 0;Åmp >>= 1, h <<= 1);

679 
tmp
 = 32 - (
w
 >> 3);

680 
x
 = ((
ãxtuª_wödow_£âögs
 >> 10Ë& 
tmp
) << 3;

682 
tmp
 = 32 - (
h
 >> 3);

683 
y
 = ((
ãxtuª_wödow_£âögs
 >> 15Ë& 
tmp
) << 3;

685 
	`Êush_ªndî_block_buf„r
(
psx_gpu
);

687 
psx_gpu
->
ãxtuª_wödow_£âögs
 =Åexture_window_settings;

688 
psx_gpu
->
ãxtuª_wödow_x
 = 
x
;

689 
psx_gpu
->
ãxtuª_wödow_y
 = 
y
;

690 
psx_gpu
->
ãxtuª_mask_width
 = 
w
 - 1;

691 
psx_gpu
->
ãxtuª_mask_height
 = 
h
 - 1;

693 
	`upd©e_ãxtuª_±r
(
psx_gpu
);

695 
	`SET_Ex
(2, 
li°
[0]);

701 
s16
 
võwp‹t_°¨t_x
 = 
li°
[0] & 0x3FF;

702 
s16
 
võwp‹t_°¨t_y
 = (
li°
[0] >> 10) & 0x1FF;

704 if(
võwp‹t_°¨t_x
 =
psx_gpu
->viewport_start_x &&

705 
võwp‹t_°¨t_y
 =
psx_gpu
->viewport_start_y)

710 
psx_gpu
->
võwp‹t_°¨t_x
 = viewport_start_x;

711 
psx_gpu
->
võwp‹t_°¨t_y
 = viewport_start_y;

713 #ifde‡
TEXTURE_CACHE_4BPP


714 
psx_gpu
->
võwp‹t_mask
 =

715 
	`ãxtuª_ªgi⁄_mask
(
psx_gpu
->
võwp‹t_°¨t_x
,

716 
psx_gpu
->
võwp‹t_°¨t_y
,Ösx_gpu->
võwp‹t_íd_x
,

717 
psx_gpu
->
võwp‹t_íd_y
);

719 
	`SET_Ex
(3, 
li°
[0]);

725 
s16
 
võwp‹t_íd_x
 = 
li°
[0] & 0x3FF;

726 
s16
 
võwp‹t_íd_y
 = (
li°
[0] >> 10) & 0x1FF;

728 if(
võwp‹t_íd_x
 =
psx_gpu
->viewport_end_x &&

729 
võwp‹t_íd_y
 =
psx_gpu
->viewport_end_y)

734 
psx_gpu
->
võwp‹t_íd_x
 = viewport_end_x;

735 
psx_gpu
->
võwp‹t_íd_y
 = viewport_end_y;

737 #ifde‡
TEXTURE_CACHE_4BPP


738 
psx_gpu
->
võwp‹t_mask
 =

739 
	`ãxtuª_ªgi⁄_mask
(
psx_gpu
->
võwp‹t_°¨t_x
,

740 
psx_gpu
->
võwp‹t_°¨t_y
,Ösx_gpu->
võwp‹t_íd_x
,

741 
psx_gpu
->
võwp‹t_íd_y
);

743 
	`SET_Ex
(4, 
li°
[0]);

749 
s32
 
off£t_x
 = 
li°
[0] << 21;

750 
s32
 
off£t_y
 = 
li°
[0] << 10;

751 
psx_gpu
->
off£t_x
 = offset_x >> 21;

752 
psx_gpu
->
off£t_y
 = offset_y >> 21;

754 
	`SET_Ex
(5, 
li°
[0]);

760 
u32
 
mask_£âögs
 = 
li°
[0];

761 
u16
 
mask_msb
 = 
mask_£âögs
 << 15;

763 if(
li°
[0] & 0x2)

764 
psx_gpu
->
ªndî_°©e_ba£
 |
RENDER_STATE_MASK_EVALUATE
;

766 
psx_gpu
->
ªndî_°©e_ba£
 &~
RENDER_STATE_MASK_EVALUATE
;

768 if(
mask_msb
 !
psx_gpu
->mask_msb)

770 
	`Êush_ªndî_block_buf„r
(
psx_gpu
);

771 
psx_gpu
->
mask_msb
 = mask_msb;

774 
	`SET_Ex
(6, 
li°
[0]);

783 
bªaklo›
:

784 i‡(
œ°_comm™d
 !
NULL
)

785 *
œ°_comm™d
 = 
cuºít_comm™d
;

786  
li°
 - 
li°_°¨t
;

787 
	}
}

789 #ifde‡
PCSX


791 
	#ENH_BUF_TABLE_STEP
 (1024 / (
psx_gpu
->
íh™˚mít_buf_by_x16
))

	)

793 
	$upd©e_íh™˚mít_buf_èbÀ_‰om_hªs
(
psx_gpu_°ru˘
 *
psx_gpu
)

795 
u32
 
b
, 
x
, 
s
;

797 
b
 = 0;

798 
s
 = 
psx_gpu
->
íh™˚mít_x_thªshﬁd
;

799 
x
 = 0; x < (
psx_gpu
->
íh™˚mít_buf_by_x16
); x++)

801 i‡(
b
 < 3 && 
x
 * 
ENH_BUF_TABLE_STEP
 >
s
 - ENH_BUF_TABLE_STEP - 1)

803 
s
 +
psx_gpu
->
íh™˚mít_x_thªshﬁd
;

804 
b
++;

806 
psx_gpu
->
íh™˚mít_buf_by_x16
[
x
] = 
b
;

808 
	}
}

810 
	$upd©e_íh™˚mít_buf_èbÀ_‰om_x
(
psx_gpu_°ru˘
 *
psx_gpu
,

811 
u32
 
x0
, u32 
Àn
)

813 
u32
 
x
, 
b
;

815 
x
 = 
x0
, 
b
 = 0; x >
Àn
; b++)

816 
x
 -
Àn
;

817 i‡(
b
 > 3)

818 
b
 = 3;

820 
	`mem£t
(
psx_gpu
->
íh™˚mít_buf_by_x16
 + 
x0
 / 
ENH_BUF_TABLE_STEP
,

821 
b
, (
Àn
 + 
ENH_BUF_TABLE_STEP
 - 1) / ENH_BUF_TABLE_STEP);

822 
	}
}

824 
	#£À˘_íh™˚mít_buf
(
psx_gpu
) \

825 
psx_gpu
->
íh™˚mít_cuºít_buf_±r
 = \

826 
	`£À˘_íh™˚mít_buf_±r
(
psx_gpu
,Ösx_gpu->
ßved_võwp‹t_°¨t_x
)

	)

828 
	#íh™˚mít_dißbÀ
() { \

829 
psx_gpu
->
vøm_out_±r
 =Ösx_gpu->
vøm_±r
; \

830 
psx_gpu
->
võwp‹t_°¨t_x
 =Ösx_gpu->
ßved_võwp‹t_°¨t_x
; \

831 
psx_gpu
->
võwp‹t_°¨t_y
 =Ösx_gpu->
ßved_võwp‹t_°¨t_y
; \

832 
psx_gpu
->
võwp‹t_íd_x
 =Ösx_gpu->
ßved_võwp‹t_íd_x
; \

833 
psx_gpu
->
võwp‹t_íd_y
 =Ösx_gpu->
ßved_võwp‹t_íd_y
; \

834 
psx_gpu
->
uvrgb_pha£
 = 0x8000; \

835 }

	)

837 
	#íh™˚mít_íabÀ
() { \

838 
psx_gpu
->
vøm_out_±r
 =Ösx_gpu->
íh™˚mít_cuºít_buf_±r
; \

839 
psx_gpu
->
võwp‹t_°¨t_x
 =Ösx_gpu->
ßved_võwp‹t_°¨t_x
 * 2; \

840 
psx_gpu
->
võwp‹t_°¨t_y
 =Ösx_gpu->
ßved_võwp‹t_°¨t_y
 * 2; \

841 
psx_gpu
->
võwp‹t_íd_x
 =Ösx_gpu->
ßved_võwp‹t_íd_x
 * 2 + 1; \

842 
psx_gpu
->
võwp‹t_íd_y
 =Ösx_gpu->
ßved_võwp‹t_íd_y
 * 2 + 1; \

843 
psx_gpu
->
uvrgb_pha£
 = 0x1000; \

844 }

	)

846 
	#shi·_vîti˚s3
(
v
) { \

847 
v
[0]->
x
 *= 2; \

848 
v
[0]->
y
 *= 2; \

849 
v
[1]->
x
 *= 2; \

850 
v
[1]->
y
 *= 2; \

851 
v
[2]->
x
 *= 2; \

852 
v
[2]->
y
 *= 2; \

853 }

	)

855 
	#unshi·_vîti˚s3
(
v
) { \

856 
v
[0]->
x
 /= 2; \

857 
v
[0]->
y
 /= 2; \

858 
v
[1]->
x
 /= 2; \

859 
v
[1]->
y
 /= 2; \

860 
v
[2]->
x
 /= 2; \

861 
v
[2]->
y
 /= 2; \

862 }

	)

864 
	#shi·_åüngÀ_¨ó
() \

865 
psx_gpu
->
åüngÀ_¨ó
 *4

	)

867 
sˇÀ2x_tûes8
(*
d°
, c⁄° *
§c
, 
w8
, 
h
);

869 #i‚de‡
NEON_BUILD


871 
	$sˇÀ2x_tûes8
(*
d°
, c⁄° *
§c
, 
w8
, 
h
Ë{
	}
}

874 
	gdißbÀ_maö_ªndî
;

876 
	$do_åüngÀ_íh™˚d
(
psx_gpu_°ru˘
 *
psx_gpu
,

877 
vîãx_°ru˘
 *
vîãxes
, 
u32
 
cuºít_comm™d
)

879 
vîãx_°ru˘
 *
vîãx_±rs
[3];

881 i‡(!
	`¥ï¨e_åüngÀ
(
psx_gpu
, 
vîãxes
, 
vîãx_±rs
))

884 i‡(!
dißbÀ_maö_ªndî
)

885 
	`ªndî_åüngÀ_p
(
psx_gpu
, 
vîãx_±rs
, 
cuºít_comm™d
);

887 
	`íh™˚mít_íabÀ
();

888 
	`shi·_vîti˚s3
(
vîãx_±rs
);

889 
	`shi·_åüngÀ_¨ó
();

890 
	`ªndî_åüngÀ_p
(
psx_gpu
, 
vîãx_±rs
, 
cuºít_comm™d
);

891 
	}
}

893 
	$do_quad_íh™˚d
(
psx_gpu_°ru˘
 *
psx_gpu
, 
vîãx_°ru˘
 *
vîãxes
,

894 
u32
 
cuºít_comm™d
)

896 
vîãx_°ru˘
 *
vîãx_±rs
[3];

898 i‡(
	`¥ï¨e_åüngÀ
(
psx_gpu
, 
vîãxes
, 
vîãx_±rs
)) {

899 i‡(!
dißbÀ_maö_ªndî
)

900 
	`ªndî_åüngÀ_p
(
psx_gpu
, 
vîãx_±rs
, 
cuºít_comm™d
);

902 
	`íh™˚mít_íabÀ
();

903 
	`shi·_vîti˚s3
(
vîãx_±rs
);

904 
	`shi·_åüngÀ_¨ó
();

905 
	`ªndî_åüngÀ_p
(
psx_gpu
, 
vîãx_±rs
, 
cuºít_comm™d
);

906 
	`unshi·_vîti˚s3
(
vîãx_±rs
);

908 
	`íh™˚mít_dißbÀ
();

909 i‡(
	`¥ï¨e_åüngÀ
(
psx_gpu
, &
vîãxes
[1], 
vîãx_±rs
)) {

910 i‡(!
dißbÀ_maö_ªndî
)

911 
	`ªndî_åüngÀ_p
(
psx_gpu
, 
vîãx_±rs
, 
cuºít_comm™d
);

913 
	`íh™˚mít_íabÀ
();

914 
	`shi·_vîti˚s3
(
vîãx_±rs
);

915 
	`shi·_åüngÀ_¨ó
();

916 
	`ªndî_åüngÀ_p
(
psx_gpu
, 
vîãx_±rs
, 
cuºít_comm™d
);

918 
	}
}

922 
	#fûl_vîãx
(
i
, 
x_
, 
y_
, 
u_
, 
v_
, 
rgb_
) \

923 
vîãxes
[
i
].
x
 = 
x_
; \

924 
vîãxes
[
i
].
y
 = 
y_
; \

925 
vîãxes
[
i
].
u
 = 
u_
; \

926 
vîãxes
[
i
].
v
 = 
v_
; \

927 
vîãxes
[
i
].
r
 = 
rgb_
; \

928 
vîãxes
[
i
].
g
 = (
rgb_
) >> 8; \

929 
vîãxes
[
i
].
b
 = (
rgb_
Ë>> 16

	)

931 
	$do_•rôe_íh™˚d
(
psx_gpu_°ru˘
 *
psx_gpu
, 
x
, 
y
,

932 
u32
 
u
, u32 
v
, u32 
w
, u32 
h
, u32 
cmd_rgb
)

934 
vîãx_°ru˘
 *
vîãx_±rs
[3];

935 
u32
 
Êags
 = (
cmd_rgb
 >> 24);

936 
u32
 
cﬁ‹
 = 
cmd_rgb
 & 0xffffff;

937 
u32
 
ªndî_°©e_ba£_ßved
 = 
psx_gpu
->
ªndî_°©e_ba£
;

938 
x1
, 
y1
;

939 
u8
 
u1
, 
v1
;

941 
Êags
 &=

942 (
RENDER_FLAGS_MODULATE_TEXELS
 | 
RENDER_FLAGS_BLEND
 |

943 
RENDER_FLAGS_TEXTURE_MAP
);

945 
	`£t_åüngÀ_cﬁ‹
(
psx_gpu
, 
cﬁ‹
);

946 if(
cﬁ‹
 == 0x808080)

947 
Êags
 |
RENDER_FLAGS_MODULATE_TEXELS
;

949 
psx_gpu
->
ªndî_°©e_ba£
 &~
RENDER_STATE_DITHER
;

950 
	`íh™˚mít_íabÀ
();

952 
x1
 = 
x
 + 
w
;

953 
y1
 = 
y
 + 
h
;

954 
u1
 = 
u
 + 
w
;

955 
v1
 = 
v
 + 
h
;

957 i‡(
u1
 < 
u
) u1 = 0xff;

958 i‡(
v1
 < 
v
) v1 = 0xff;

963 
	`fûl_vîãx
(0, 
x
, 
y
, 
u
, 
v
, 
cﬁ‹
);

964 
	`fûl_vîãx
(1, 
x
, 
y1
, 
u
, 
v1
, 
cﬁ‹
);

965 
	`fûl_vîãx
(2, 
x1
, 
y
, 
u1
, 
v
, 
cﬁ‹
);

966 i‡(
	`¥ï¨e_åüngÀ
(
psx_gpu
, 
vîãxes
, 
vîãx_±rs
)) {

967 
	`shi·_vîti˚s3
(
vîãx_±rs
);

968 
	`shi·_åüngÀ_¨ó
();

969 
	`ªndî_åüngÀ_p
(
psx_gpu
, 
vîãx_±rs
, 
Êags
);

975 
	`fûl_vîãx
(0, 
x1
, 
y
, 
u1
, 
v
, 
cﬁ‹
);

976 
	`fûl_vîãx
(1, 
x
, 
y1
, 
u
, 
v1
, 
cﬁ‹
);

977 
	`fûl_vîãx
(2, 
x1
, 
y1
, 
u1
, 
v1
, 
cﬁ‹
);

978 i‡(
	`¥ï¨e_åüngÀ
(
psx_gpu
, 
vîãxes
, 
vîãx_±rs
)) {

979 
	`shi·_vîti˚s3
(
vîãx_±rs
);

980 
	`shi·_åüngÀ_¨ó
();

981 
	`ªndî_åüngÀ_p
(
psx_gpu
, 
vîãx_±rs
, 
Êags
);

984 
psx_gpu
->
ªndî_°©e_ba£
 = 
ªndî_°©e_ba£_ßved
;

985 
	}
}

987 
	$do_•rôe_íh™˚d
(
psx_gpu_°ru˘
 *
psx_gpu
, 
x
, 
y
,

988 
u32
 
u
, u32 
v
, u32 
w
, u32 
h
, u32 
cmd_rgb
)

990 
u32
 
Êags
 = (
cmd_rgb
 >> 24);

991 
u32
 
cﬁ‹
 = 
cmd_rgb
 & 0xffffff;

993 
	`ªndî_•rôe_4x
(
psx_gpu
, 
x
, 
y
, 
u
, 
v
, 
w
, 
h
, 
Êags
, 
cﬁ‹
);

994 
	}
}

997 
u32
 
	$gpu_∑r£_íh™˚d
(
psx_gpu_°ru˘
 *
psx_gpu
, 
u32
 *
li°
, u32 
size
,

998 
u32
 *
œ°_comm™d
)

1000 
u32
 
cuºít_comm™d
 = 0, 
comm™d_Àngth
;

1002 
u32
 *
li°_°¨t
 = 
li°
;

1003 
u32
 *
li°_íd
 = 
li°
 + (
size
 / 4);

1005 
psx_gpu
->
ßved_võwp‹t_°¨t_x
 =Ösx_gpu->
võwp‹t_°¨t_x
;

1006 
psx_gpu
->
ßved_võwp‹t_°¨t_y
 =Ösx_gpu->
võwp‹t_°¨t_y
;

1007 
psx_gpu
->
ßved_võwp‹t_íd_x
 =Ösx_gpu->
võwp‹t_íd_x
;

1008 
psx_gpu
->
ßved_võwp‹t_íd_y
 =Ösx_gpu->
võwp‹t_íd_y
;

1009 
	`£À˘_íh™˚mít_buf
(
psx_gpu
);

1011 ; 
li°
 < 
li°_íd
;Üi° +1 + 
comm™d_Àngth
)

1013 
s16
 *
li°_s16
 = (*)
li°
;

1014 
cuºít_comm™d
 = *
li°
 >> 24;

1015 
comm™d_Àngth
 = 
comm™d_Àngths
[
cuºít_comm™d
];

1016 i‡(
li°
 + 1 + 
comm™d_Àngth
 > 
li°_íd
) {

1017 
cuºít_comm™d
 = (
u32
)-1;

1021 
	`íh™˚mít_dißbÀ
();

1023 
cuºít_comm™d
)

1030 
u32
 
x
 = 
li°_s16
[2] & 0x3FF;

1031 
u32
 
y
 = 
li°_s16
[3] & 0x1FF;

1032 
u32
 
width
 = 
li°_s16
[4] & 0x3FF;

1033 
u32
 
height
 = 
li°_s16
[5] & 0x1FF;

1034 
u32
 
cﬁ‹
 = 
li°
[0] & 0xFFFFFF;

1036 
x
 &= ~0xF;

1037 
width
 = ((width + 0xF) & ~0xF);

1039 
	`do_fûl
(
psx_gpu
, 
x
, 
y
, 
width
, 
height
, 
cﬁ‹
);

1041 
psx_gpu
->
vøm_out_±r
 = 
	`£À˘_íh™˚mít_buf_±r
’sx_gpu, 
x
);

1042 
x
 *= 2;

1043 
y
 *= 2;

1044 
width
 *= 2;

1045 
height
 *= 2;

1046 
	`ªndî_block_fûl_íh
(
psx_gpu
, 
cﬁ‹
, 
x
, 
y
, 
width
, 
height
);

1052 
	`£t_åüngÀ_cﬁ‹
(
psx_gpu
, 
li°
[0] & 0xFFFFFF);

1054 
	`gë_vîãx_d©a_xy
(0, 2);

1055 
	`gë_vîãx_d©a_xy
(1, 4);

1056 
	`gë_vîãx_d©a_xy
(2, 6);

1058 
	`do_åüngÀ_íh™˚d
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
);

1064 
	`£t_˛ut
(
psx_gpu
, 
li°_s16
[5]);

1065 
	`£t_ãxtuª
(
psx_gpu
, 
li°_s16
[9]);

1066 
	`£t_åüngÀ_cﬁ‹
(
psx_gpu
, 
li°
[0] & 0xFFFFFF);

1068 
	`gë_vîãx_d©a_xy_uv
(0, 2);

1069 
	`gë_vîãx_d©a_xy_uv
(1, 6);

1070 
	`gë_vîãx_d©a_xy_uv
(2, 10);

1072 
	`do_åüngÀ_íh™˚d
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
);

1078 
	`£t_åüngÀ_cﬁ‹
(
psx_gpu
, 
li°
[0] & 0xFFFFFF);

1080 
	`gë_vîãx_d©a_xy
(0, 2);

1081 
	`gë_vîãx_d©a_xy
(1, 4);

1082 
	`gë_vîãx_d©a_xy
(2, 6);

1083 
	`gë_vîãx_d©a_xy
(3, 8);

1085 
	`do_quad_íh™˚d
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
);

1091 
	`£t_˛ut
(
psx_gpu
, 
li°_s16
[5]);

1092 
	`£t_ãxtuª
(
psx_gpu
, 
li°_s16
[9]);

1093 
	`£t_åüngÀ_cﬁ‹
(
psx_gpu
, 
li°
[0] & 0xFFFFFF);

1095 
	`gë_vîãx_d©a_xy_uv
(0, 2);

1096 
	`gë_vîãx_d©a_xy_uv
(1, 6);

1097 
	`gë_vîãx_d©a_xy_uv
(2, 10);

1098 
	`gë_vîãx_d©a_xy_uv
(3, 14);

1100 
	`do_quad_íh™˚d
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
);

1106 
	`gë_vîãx_d©a_xy_rgb
(0, 0);

1107 
	`gë_vîãx_d©a_xy_rgb
(1, 4);

1108 
	`gë_vîãx_d©a_xy_rgb
(2, 8);

1110 
	`do_åüngÀ_íh™˚d
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
);

1119 
	`£t_˛ut
(
psx_gpu
, 
li°_s16
[5]);

1120 
	`£t_ãxtuª
(
psx_gpu
, 
li°_s16
[11]);

1122 
	`gë_vîãx_d©a_xy_uv_rgb
(0, 0);

1123 
	`gë_vîãx_d©a_xy_uv_rgb
(1, 6);

1124 
	`gë_vîãx_d©a_xy_uv_rgb
(2, 12);

1126 
	`do_åüngÀ_íh™˚d
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
);

1135 
	`gë_vîãx_d©a_xy_rgb
(0, 0);

1136 
	`gë_vîãx_d©a_xy_rgb
(1, 4);

1137 
	`gë_vîãx_d©a_xy_rgb
(2, 8);

1138 
	`gë_vîãx_d©a_xy_rgb
(3, 12);

1140 
	`do_quad_íh™˚d
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
);

1149 
	`£t_˛ut
(
psx_gpu
, 
li°_s16
[5]);

1150 
	`£t_ãxtuª
(
psx_gpu
, 
li°_s16
[11]);

1152 
	`gë_vîãx_d©a_xy_uv_rgb
(0, 0);

1153 
	`gë_vîãx_d©a_xy_uv_rgb
(1, 6);

1154 
	`gë_vîãx_d©a_xy_uv_rgb
(2, 12);

1155 
	`gë_vîãx_d©a_xy_uv_rgb
(3, 18);

1157 
	`do_quad_íh™˚d
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
);

1163 
vîãxes
[0].
x
 = 
li°_s16
[2] + 
psx_gpu
->
off£t_x
;

1164 
vîãxes
[0].
y
 = 
li°_s16
[3] + 
psx_gpu
->
off£t_y
;

1165 
vîãxes
[1].
x
 = 
li°_s16
[4] + 
psx_gpu
->
off£t_x
;

1166 
vîãxes
[1].
y
 = 
li°_s16
[5] + 
psx_gpu
->
off£t_y
;

1168 
	`ªndî_löe
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
, 
li°
[0], 0);

1169 
	`íh™˚mít_íabÀ
();

1170 
	`ªndî_löe
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
, 
li°
[0], 1);

1176 
u32
 
num_vîãxes
 = 1;

1177 
u32
 *
li°_posôi⁄
 = &(
li°
[2]);

1178 
u32
 
xy
 = 
li°
[1];

1180 
vîãxes
[1].
x
 = (
xy
 & 0xFFFFË+ 
psx_gpu
->
off£t_x
;

1181 
vîãxes
[1].
y
 = (
xy
 >> 16Ë+ 
psx_gpu
->
off£t_y
;

1183 
xy
 = *
li°_posôi⁄
;

1186 
vîãxes
[0] = vertexes[1];

1188 
vîãxes
[1].
x
 = (
xy
 & 0xFFFFË+ 
psx_gpu
->
off£t_x
;

1189 
vîãxes
[1].
y
 = (
xy
 >> 16Ë+ 
psx_gpu
->
off£t_y
;

1191 
	`íh™˚mít_dißbÀ
();

1192 
	`ªndî_löe
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
, 
li°
[0], 0);

1193 
	`íh™˚mít_íabÀ
();

1194 
	`ªndî_löe
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
, 
li°
[0], 1);

1196 
li°_posôi⁄
++;

1197 
num_vîãxes
++;

1199 if(
li°_posôi⁄
 >
li°_íd
)

1201 
cuºít_comm™d
 = (
u32
)-1;

1202 
bªaklo›
;

1205 
xy
 = *
li°_posôi⁄
;

1206 if((
xy
 & 0xF000F000) == 0x50005000)

1210 
comm™d_Àngth
 +(
num_vîãxes
 - 2);

1216 
vîãxes
[0].
r
 = 
li°
[0] & 0xFF;

1217 
vîãxes
[0].
g
 = (
li°
[0] >> 8) & 0xFF;

1218 
vîãxes
[0].
b
 = (
li°
[0] >> 16) & 0xFF;

1219 
vîãxes
[0].
x
 = 
li°_s16
[2] + 
psx_gpu
->
off£t_x
;

1220 
vîãxes
[0].
y
 = 
li°_s16
[3] + 
psx_gpu
->
off£t_y
;

1222 
vîãxes
[1].
r
 = 
li°
[2] & 0xFF;

1223 
vîãxes
[1].
g
 = (
li°
[2] >> 8) & 0xFF;

1224 
vîãxes
[1].
b
 = (
li°
[2] >> 16) & 0xFF;

1225 
vîãxes
[1].
x
 = 
li°_s16
[6] + 
psx_gpu
->
off£t_x
;

1226 
vîãxes
[1].
y
 = 
li°_s16
[7] + 
psx_gpu
->
off£t_y
;

1228 
	`ªndî_löe
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
, 0, 0);

1229 
	`íh™˚mít_íabÀ
();

1230 
	`ªndî_löe
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
, 0, 1);

1236 
u32
 
num_vîãxes
 = 1;

1237 
u32
 *
li°_posôi⁄
 = &(
li°
[2]);

1238 
u32
 
cﬁ‹
 = 
li°
[0];

1239 
u32
 
xy
 = 
li°
[1];

1241 
vîãxes
[1].
r
 = 
cﬁ‹
 & 0xFF;

1242 
vîãxes
[1].
g
 = (
cﬁ‹
 >> 8) & 0xFF;

1243 
vîãxes
[1].
b
 = (
cﬁ‹
 >> 16) & 0xFF;

1244 
vîãxes
[1].
x
 = (
xy
 & 0xFFFFË+ 
psx_gpu
->
off£t_x
;

1245 
vîãxes
[1].
y
 = (
xy
 >> 16Ë+ 
psx_gpu
->
off£t_y
;

1247 
cﬁ‹
 = 
li°_posôi⁄
[0];

1250 
xy
 = 
li°_posôi⁄
[1];

1252 
vîãxes
[0] = vertexes[1];

1254 
vîãxes
[1].
r
 = 
cﬁ‹
 & 0xFF;

1255 
vîãxes
[1].
g
 = (
cﬁ‹
 >> 8) & 0xFF;

1256 
vîãxes
[1].
b
 = (
cﬁ‹
 >> 16) & 0xFF;

1257 
vîãxes
[1].
x
 = (
xy
 & 0xFFFFË+ 
psx_gpu
->
off£t_x
;

1258 
vîãxes
[1].
y
 = (
xy
 >> 16Ë+ 
psx_gpu
->
off£t_y
;

1260 
	`íh™˚mít_dißbÀ
();

1261 
	`ªndî_löe
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
, 0, 0);

1262 
	`íh™˚mít_íabÀ
();

1263 
	`ªndî_löe
(
psx_gpu
, 
vîãxes
, 
cuºít_comm™d
, 0, 1);

1265 
li°_posôi⁄
 += 2;

1266 
num_vîãxes
++;

1268 if(
li°_posôi⁄
 >
li°_íd
)

1270 
cuºít_comm™d
 = (
u32
)-1;

1271 
bªaklo›
;

1274 
cﬁ‹
 = 
li°_posôi⁄
[0];

1275 if((
cﬁ‹
 & 0xF000F000) == 0x50005000)

1279 
comm™d_Àngth
 +((
num_vîãxes
 - 2) * 2);

1285 
u32
 
x
 = 
	`sign_exãnd_11bô
(
li°_s16
[2] + 
psx_gpu
->
off£t_x
);

1286 
u32
 
y
 = 
	`sign_exãnd_11bô
(
li°_s16
[3] + 
psx_gpu
->
off£t_y
);

1287 
u32
 
width
 = 
li°_s16
[4] & 0x3FF;

1288 
u32
 
height
 = 
li°_s16
[5] & 0x1FF;

1290 
	`ªndî_•rôe
(
psx_gpu
, 
x
, 
y
, 0, 0, 
width
, 
height
, 
cuºít_comm™d
, 
li°
[0]);

1291 
	`do_•rôe_íh™˚d
(
psx_gpu
, 
x
, 
y
, 0, 0, 
width
, 
height
, 
li°
[0]);

1297 
u32
 
x
 = 
	`sign_exãnd_11bô
(
li°_s16
[2] + 
psx_gpu
->
off£t_x
);

1298 
u32
 
y
 = 
	`sign_exãnd_11bô
(
li°_s16
[3] + 
psx_gpu
->
off£t_y
);

1299 
u8
 
u
 = 
li°_s16
[4];

1300 
u8
 
v
 = 
li°_s16
[4] >> 8;

1301 
u32
 
width
 = 
li°_s16
[6] & 0x3FF;

1302 
u32
 
height
 = 
li°_s16
[7] & 0x1FF;

1304 
	`£t_˛ut
(
psx_gpu
, 
li°_s16
[5]);

1306 
	`ªndî_•rôe
(
psx_gpu
, 
x
, 
y
, 
u
, 
v
, 
width
, 
height
,

1307 
cuºít_comm™d
, 
li°
[0]);

1308 
	`do_•rôe_íh™˚d
(
psx_gpu
, 
x
, 
y
, 
u
, 
v
, 
width
, 
height
, 
li°
[0]);

1317 
s32
 
x
 = 
	`sign_exãnd_11bô
(
li°_s16
[2] + 
psx_gpu
->
off£t_x
);

1318 
s32
 
y
 = 
	`sign_exãnd_11bô
(
li°_s16
[3] + 
psx_gpu
->
off£t_y
);

1320 
	`ªndî_•rôe
(
psx_gpu
, 
x
, 
y
, 0, 0, 1, 1, 
cuºít_comm™d
, 
li°
[0]);

1321 
	`do_•rôe_íh™˚d
(
psx_gpu
, 
x
, 
y
, 0, 0, 1, 1, 
li°
[0]);

1330 
s32
 
x
 = 
	`sign_exãnd_11bô
(
li°_s16
[2] + 
psx_gpu
->
off£t_x
);

1331 
s32
 
y
 = 
	`sign_exãnd_11bô
(
li°_s16
[3] + 
psx_gpu
->
off£t_y
);

1333 
	`ªndî_•rôe
(
psx_gpu
, 
x
, 
y
, 0, 0, 8, 8, 
cuºít_comm™d
, 
li°
[0]);

1334 
	`do_•rôe_íh™˚d
(
psx_gpu
, 
x
, 
y
, 0, 0, 8, 8, 
li°
[0]);

1343 
s32
 
x
 = 
	`sign_exãnd_11bô
(
li°_s16
[2] + 
psx_gpu
->
off£t_x
);

1344 
s32
 
y
 = 
	`sign_exãnd_11bô
(
li°_s16
[3] + 
psx_gpu
->
off£t_y
);

1345 
u8
 
u
 = 
li°_s16
[4];

1346 
u8
 
v
 = 
li°_s16
[4] >> 8;

1348 
	`£t_˛ut
(
psx_gpu
, 
li°_s16
[5]);

1350 
	`ªndî_•rôe
(
psx_gpu
, 
x
, 
y
, 
u
, 
v
, 8, 8,

1351 
cuºít_comm™d
, 
li°
[0]);

1352 
	`do_•rôe_íh™˚d
(
psx_gpu
, 
x
, 
y
, 
u
, 
v
, 8, 8, 
li°
[0]);

1361 
s32
 
x
 = 
	`sign_exãnd_11bô
(
li°_s16
[2] + 
psx_gpu
->
off£t_x
);

1362 
s32
 
y
 = 
	`sign_exãnd_11bô
(
li°_s16
[3] + 
psx_gpu
->
off£t_y
);

1364 
	`ªndî_•rôe
(
psx_gpu
, 
x
, 
y
, 0, 0, 16, 16, 
cuºít_comm™d
, 
li°
[0]);

1365 
	`do_•rôe_íh™˚d
(
psx_gpu
, 
x
, 
y
, 0, 0, 16, 16, 
li°
[0]);

1374 
s32
 
x
 = 
	`sign_exãnd_11bô
(
li°_s16
[2] + 
psx_gpu
->
off£t_x
);

1375 
s32
 
y
 = 
	`sign_exãnd_11bô
(
li°_s16
[3] + 
psx_gpu
->
off£t_y
);

1376 
u8
 
u
 = 
li°_s16
[4];

1377 
u8
 
v
 = 
li°_s16
[4] >> 8;

1379 
	`£t_˛ut
(
psx_gpu
, 
li°_s16
[5]);

1381 
	`ªndî_•rôe
(
psx_gpu
, 
x
, 
y
, 
u
, 
v
, 16, 16, 
cuºít_comm™d
, 
li°
[0]);

1382 
	`do_•rôe_íh™˚d
(
psx_gpu
, 
x
, 
y
, 
u
, 
v
, 16, 16, 
li°
[0]);

1388 
u32
 
sx
 = 
li°_s16
[2] & 0x3FF;

1389 
u32
 
sy
 = 
li°_s16
[3] & 0x1FF;

1390 
u32
 
dx
 = 
li°_s16
[4] & 0x3FF;

1391 
u32
 
dy
 = 
li°_s16
[5] & 0x1FF;

1392 
u32
 
w
 = ((
li°_s16
[6] - 1) & 0x3FF) + 1;

1393 
u32
 
h
 = ((
li°_s16
[7] - 1) & 0x1FF) + 1;

1394 
u16
 *
buf
;

1396 i‡(
sx
 =
dx
 && 
sy
 =
dy
 && 
psx_gpu
->
mask_msb
 == 0)

1399 
	`ªndî_block_move
(
psx_gpu
, 
sx
, 
sy
, 
dx
, 
dy
, 
w
, 
h
);

1400 i‡(
dy
 + 
h
 > 512)

1401 
h
 = 512 - 
dy
;

1402 
sx
 = sx & ~7;

1403 
dx
 = dx * 2 & ~7;

1404 
dy
 *= 2;

1405 
w
 = (w + 7) / 8;

1406 
buf
 = 
	`£À˘_íh™˚mít_buf_±r
(
psx_gpu
, 
dx
 / 2);

1407 
	`sˇÀ2x_tûes8
(
buf
 + 
dy
 * 1024 + 
dx
,

1408 
psx_gpu
->
vøm_±r
 + 
sy
 * 1024 + 
sx
, 
w
, 
h
);

1414 
bªaklo›
;

1417 
	`£t_ãxtuª
(
psx_gpu
, 
li°
[0]);

1419 if(
li°
[0] & (1 << 9))

1420 
psx_gpu
->
ªndî_°©e_ba£
 |
RENDER_STATE_DITHER
;

1422 
psx_gpu
->
ªndî_°©e_ba£
 &~
RENDER_STATE_DITHER
;

1424 
psx_gpu
->
di•œy_¨ó_døw_íabÀ
 = (
li°
[0] >> 10) & 0x1;

1425 
	`SET_Ex
(1, 
li°
[0]);

1431 
u32
 
ãxtuª_wödow_£âögs
 = 
li°
[0];

1432 
u32
 
tmp
, 
x
, 
y
, 
w
, 
h
;

1434 if(
ãxtuª_wödow_£âögs
 !
psx_gpu
->texture_window_settings)

1436 
tmp
 = (
ãxtuª_wödow_£âögs
 & 0x1F) | 0x20;

1437 
w
 = 8; (
tmp
 & 1) == 0;Åmp >>= 1, w <<= 1);

1439 
tmp
 = ((
ãxtuª_wödow_£âögs
 >> 5) & 0x1f) | 0x20;

1440 
h
 = 8; (
tmp
 & 1) == 0;Åmp >>= 1, h <<= 1);

1442 
tmp
 = 32 - (
w
 >> 3);

1443 
x
 = ((
ãxtuª_wödow_£âögs
 >> 10Ë& 
tmp
) << 3;

1445 
tmp
 = 32 - (
h
 >> 3);

1446 
y
 = ((
ãxtuª_wödow_£âögs
 >> 15Ë& 
tmp
) << 3;

1448 
	`Êush_ªndî_block_buf„r
(
psx_gpu
);

1450 
psx_gpu
->
ãxtuª_wödow_£âögs
 =Åexture_window_settings;

1451 
psx_gpu
->
ãxtuª_wödow_x
 = 
x
;

1452 
psx_gpu
->
ãxtuª_wödow_y
 = 
y
;

1453 
psx_gpu
->
ãxtuª_mask_width
 = 
w
 - 1;

1454 
psx_gpu
->
ãxtuª_mask_height
 = 
h
 - 1;

1456 
	`upd©e_ãxtuª_±r
(
psx_gpu
);

1458 
	`SET_Ex
(2, 
li°
[0]);

1464 
s16
 
võwp‹t_°¨t_x
 = 
li°
[0] & 0x3FF;

1465 
s16
 
võwp‹t_°¨t_y
 = (
li°
[0] >> 10) & 0x1FF;

1466 
u32
 
w
;

1467 
s32
 
d
;

1469 if(
võwp‹t_°¨t_x
 =
psx_gpu
->viewport_start_x &&

1470 
võwp‹t_°¨t_y
 =
psx_gpu
->viewport_start_y)

1474 
psx_gpu
->
võwp‹t_°¨t_x
 = viewport_start_x;

1475 
psx_gpu
->
võwp‹t_°¨t_y
 = viewport_start_y;

1476 
psx_gpu
->
ßved_võwp‹t_°¨t_x
 = 
võwp‹t_°¨t_x
;

1477 
psx_gpu
->
ßved_võwp‹t_°¨t_y
 = 
võwp‹t_°¨t_y
;

1479 
w
 = (
u32
)
psx_gpu
->
võwp‹t_íd_x
 - (u32)
võwp‹t_°¨t_x
 + 1;

1480 
d
 = 
psx_gpu
->
íh™˚mít_x_thªshﬁd
 - 
w
;

1481 if(-16 <
d
 && d <= 16)

1483 
	`upd©e_íh™˚mít_buf_èbÀ_‰om_x
(
psx_gpu
,

1484 
võwp‹t_°¨t_x
, 
w
);

1486 
	`£À˘_íh™˚mít_buf
(
psx_gpu
);

1488 #ifde‡
TEXTURE_CACHE_4BPP


1489 
psx_gpu
->
võwp‹t_mask
 =

1490 
	`ãxtuª_ªgi⁄_mask
(
psx_gpu
->
võwp‹t_°¨t_x
,

1491 
psx_gpu
->
võwp‹t_°¨t_y
,Ösx_gpu->
võwp‹t_íd_x
,

1492 
psx_gpu
->
võwp‹t_íd_y
);

1494 
	`SET_Ex
(3, 
li°
[0]);

1500 
s16
 
võwp‹t_íd_x
 = 
li°
[0] & 0x3FF;

1501 
s16
 
võwp‹t_íd_y
 = (
li°
[0] >> 10) & 0x1FF;

1502 
u32
 
w
;

1503 
s32
 
d
;

1505 if(
võwp‹t_íd_x
 =
psx_gpu
->viewport_end_x &&

1506 
võwp‹t_íd_y
 =
psx_gpu
->viewport_end_y)

1511 
psx_gpu
->
võwp‹t_íd_x
 = viewport_end_x;

1512 
psx_gpu
->
võwp‹t_íd_y
 = viewport_end_y;

1513 
psx_gpu
->
ßved_võwp‹t_íd_x
 = 
võwp‹t_íd_x
;

1514 
psx_gpu
->
ßved_võwp‹t_íd_y
 = 
võwp‹t_íd_y
;

1516 
w
 = (
u32
)
võwp‹t_íd_x
 - (u32)
psx_gpu
->
võwp‹t_°¨t_x
 + 1;

1517 
d
 = 
psx_gpu
->
íh™˚mít_x_thªshﬁd
 - 
w
;

1518 if(-16 <
d
 && d <= 16)

1520 
	`upd©e_íh™˚mít_buf_èbÀ_‰om_x
(
psx_gpu
,

1521 
psx_gpu
->
võwp‹t_°¨t_x
, 
w
);

1523 
	`£À˘_íh™˚mít_buf
(
psx_gpu
);

1525 #ifde‡
TEXTURE_CACHE_4BPP


1526 
psx_gpu
->
võwp‹t_mask
 =

1527 
	`ãxtuª_ªgi⁄_mask
(
psx_gpu
->
võwp‹t_°¨t_x
,

1528 
psx_gpu
->
võwp‹t_°¨t_y
,Ösx_gpu->
võwp‹t_íd_x
,

1529 
psx_gpu
->
võwp‹t_íd_y
);

1531 
	`SET_Ex
(4, 
li°
[0]);

1537 
s32
 
off£t_x
 = 
li°
[0] << 21;

1538 
s32
 
off£t_y
 = 
li°
[0] << 10;

1539 
psx_gpu
->
off£t_x
 = offset_x >> 21;

1540 
psx_gpu
->
off£t_y
 = offset_y >> 21;

1542 
	`SET_Ex
(5, 
li°
[0]);

1548 
u32
 
mask_£âögs
 = 
li°
[0];

1549 
u16
 
mask_msb
 = 
mask_£âögs
 << 15;

1551 if(
li°
[0] & 0x2)

1552 
psx_gpu
->
ªndî_°©e_ba£
 |
RENDER_STATE_MASK_EVALUATE
;

1554 
psx_gpu
->
ªndî_°©e_ba£
 &~
RENDER_STATE_MASK_EVALUATE
;

1556 if(
mask_msb
 !
psx_gpu
->mask_msb)

1558 
	`Êush_ªndî_block_buf„r
(
psx_gpu
);

1559 
psx_gpu
->
mask_msb
 = mask_msb;

1562 
	`SET_Ex
(6, 
li°
[0]);

1571 
	`íh™˚mít_dißbÀ
();

1573 
bªaklo›
:

1574 i‡(
œ°_comm™d
 !
NULL
)

1575 *
œ°_comm™d
 = 
cuºít_comm™d
;

1576  
li°
 - 
li°_°¨t
;

1577 
	}
}

	@plugins/gpu_neon/psx_gpu/psx_gpu_standard.c

15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<mÆloc.h
>

18 
	~<m©h.h
>

20 
	~"comm⁄.h
"

22 
s32
 
	tfixed_ty≥
;

24 
	#EDGE_STEP_BITS
 32

	)

25 
	#FIXED_BITS
 12

	)

27 
	#fixed_˚¡î
(
vÆue
) \

28 ((((
fixed_ty≥
)
vÆue
Ë<< 
FIXED_BITS
) + (1 << (FIXED_BITS - 1))) \

29 

	)

30 
	#öt_to_fixed
(
vÆue
) \

31 (((
fixed_ty≥
)
vÆue
Ë<< 
FIXED_BITS
) \

32 

	)

33 
	#fixed_to_öt
(
vÆue
) \

34 ((
vÆue
Ë>> 
FIXED_BITS
) \

35 

	)

36 
	#fixed_mul
(
_a
, 
_b
) \

37 (((
s64
)(
_a
Ë* (
_b
)Ë>> 
FIXED_BITS
) \

38 

	)

39 
	#fixed_to_doubÀ
(
vÆue
) \

40 ((
vÆue
Ë/ ()(1 << 
FIXED_BITS
)) \

41 

	)

42 
	#doubÀ_to_fixed
(
vÆue
) \

43 (
fixed_ty≥
)(((
vÆue
Ë* ()(1 << 
FIXED_BITS
))) \

44 

	)

47 
fixed_ty≥
 
	mcuºít_vÆue
;

48 
fixed_ty≥
 
	m°ï_dx
;

49 
fixed_ty≥
 
	m°ï_dy
;

50 
fixed_ty≥
 
	mgødõ¡_¨ó_x
;

51 
fixed_ty≥
 
	mgødõ¡_¨ó_y
;

52 } 
	töãΩﬁ™t_°ru˘
;

56 
s32
 
	mba£_x
;

58 
s64
 
	mÀ·_x
;

59 
s64
 
	mÀ·_dx_dy
;

61 
s64
 
	mright_x
;

62 
s64
 
	mright_dx_dy
;

64 
u32
 
	måüngÀ_¨ó
;

65 
u32
 
	måüngÀ_wödög
;

67 
öãΩﬁ™t_°ru˘
 
	mu
;

68 
öãΩﬁ™t_°ru˘
 
	mv
;

69 
öãΩﬁ™t_°ru˘
 
	mr
;

70 
öãΩﬁ™t_°ru˘
 
	mg
;

71 
öãΩﬁ™t_°ru˘
 
	mb
;

72 } 
	t_•™_°ru˘
;

75 
u32
 
	g•™_pixñs
 = 0;

76 
u32
 
	g•™_pixñ_blocks
 = 0;

77 
u32
 
	g•™s
 = 0;

78 
u32
 
	gåüngÀs
 = 0;

80 
u32
 
	gãxñs_4bµ
 = 0;

81 
u32
 
	gãxñs_8bµ
 = 0;

82 
u32
 
	gãxñs_16bµ
 = 0;

83 
u32
 
	gu¡extuªd_pixñs
 = 0;

84 
u32
 
	gbÀnd_pixñs
 = 0;

85 
u32
 
	gå™•¨ít_pixñs
 = 0;

87 
u32
 
	g°©e_ch™ges
 = 0;

88 
u32
 
	gªndî_buf„r_Êushes
 = 0;

89 
u32
 
	gåivül_ªje˘s
 = 0;

91 
	$Êush_ªndî_block_buf„r
(
psx_gpu_°ru˘
 *
psx_gpu
)

94 
	}
}

97 
u32
 
	$fixed_ªcùroˇl
(
u32
 
díomö©‹
, u32 *
_shi·
)

99 
u32
 
shi·
 = 
	`__buûtö_˛z
(
díomö©‹
);

100 
u32
 
díomö©‹_n‹mÆized
 = 
díomö©‹
 << 
shi·
;

103 
u32
 
ªcùroˇl
 =

104 ()((1ULL << 62Ë+ (
díomö©‹_n‹mÆized
 - 1)) /

105 ()
díomö©‹_n‹mÆized
;

107 *
_shi·
 = 62 - 
shi·
;

108  
ªcùroˇl
;

109 
	}
}

111 
fixed_ty≥
 
	$fixed_ªcùroˇl_mu…ùly
(
s32
 
numî©‹
, 
u32
 
ªcùroˇl
,

112 
u32
 
ªcùroˇl_sign
, u32 
shi·
)

114 
u32
 
numî©‹_sign
 = (u32)
numî©‹
 >> 31;

115 
u32
 
Êù_sign
 = 
numî©‹_sign
 ^ 
ªcùroˇl_sign
;

116 
u32
 
Êù_sign_mask
 = ~(
Êù_sign
 - 1);

117 
fixed_ty≥
 
vÆue
;

119 
numî©‹
 = 
	`abs
(numerator);

121 
vÆue
 = ((
u64
)
numî©‹
 * 
ªcùroˇl
Ë>> 
shi·
;

123 
vÆue
 ^
Êù_sign_mask
;

124 
vÆue
 -
Êù_sign_mask
;

126  
vÆue
;

127 
	}
}

129 
s32
 
	$åüngÀ_sig√d_¨ó_x2
(
s32
 
x0
, s32 
y0
, s32 
x1
, s32 
y1
, s32 
x2
, s32 
y2
)

131  ((
x1
 - 
x0
Ë* (
y2
 - 
y1
)Ë- ((
x2
 - x1Ë* (y1 - 
y0
));

132 
	}
}

134 
u32
 
	$„tch_ãxñ_4bµ
(
psx_gpu_°ru˘
 *
psx_gpu
, 
u32
 
u
, u32 
v
)

136 
u8
 *
ãxtuª_±r_8bµ
 = 
psx_gpu
->
ãxtuª_∑ge_±r
;

137 
u32
 
ãxñ
 = 
ãxtuª_±r_8bµ
[(
v
 * 2048Ë+ (
u
 / 2)];

139 if(
u
 & 1)

140 
ãxñ
 >>= 4;

142 
ãxñ
 &= 0xF;

144 
ãxñs_4bµ
++;

146  
psx_gpu
->
˛ut_±r
[
ãxñ
];

147 
	}
}

149 
u32
 
	$„tch_ãxñ_8bµ
(
psx_gpu_°ru˘
 *
psx_gpu
, 
u32
 
u
, u32 
v
)

151 
u8
 *
ãxtuª_±r_8bµ
 = 
psx_gpu
->
ãxtuª_∑ge_±r
;

152 
u32
 
ãxñ
 = 
ãxtuª_±r_8bµ
[(
v
 * 2048Ë+ 
u
];

154 
ãxñs_8bµ
++;

156  
psx_gpu
->
˛ut_±r
[
ãxñ
];

157 
	}
}

159 
u32
 
	$„tch_ãxñ_16bµ
(
psx_gpu_°ru˘
 *
psx_gpu
, 
u32
 
u
, u32 
v
)

161 
u16
 *
ãxtuª_±r_16bµ
 = 
psx_gpu
->
ãxtuª_∑ge_±r
;

163 
ãxñs_16bµ
++;

165  
ãxtuª_±r_16bµ
[(
v
 * 1024Ë+ 
u
];

166 
	}
}

168 
u32
 
	$„tch_ãxñ
(
psx_gpu_°ru˘
 *
psx_gpu
, 
u32
 
u
, u32 
v
)

170 
u
 &
psx_gpu
->
ãxtuª_mask_width
;

171 
v
 &
psx_gpu
->
ãxtuª_mask_height
;

173 
psx_gpu
->
ãxtuª_mode
)

175 
TEXTURE_MODE_4BPP
:

176  
	`„tch_ãxñ_4bµ
(
psx_gpu
, 
u
, 
v
);

178 
TEXTURE_MODE_8BPP
:

179  
	`„tch_ãxñ_8bµ
(
psx_gpu
, 
u
, 
v
);

181 
TEXTURE_MODE_16BPP
:

182  
	`„tch_ãxñ_16bµ
(
psx_gpu
, 
u
, 
v
);

186 
	}
}

188 
	$døw_pixñ
(
psx_gpu_°ru˘
 *
psx_gpu
, 
s32
 
r
, s32 
g
, s32 
b
, 
u32
 
ãxñ
,

189 
u32
 
x
, u32 
y
, u32 
Êags
)

191 
u32
 
pixñ
;

193 if(
r
 > 31)

194 
r
 = 31;

196 if(
g
 > 31)

197 
g
 = 31;

199 if(
b
 > 31)

200 
b
 = 31;

202 if(
Êags
 & 
RENDER_FLAGS_BLEND
)

204 if(((
Êags
 & 
RENDER_FLAGS_TEXTURE_MAP
Ë=0Ë|| (
ãxñ
 & 0x8000))

206 
s32
 
fb_pixñ
 = 
psx_gpu
->
vøm
[(
y
 * 1024Ë+ 
x
];

207 
s32
 
fb_r
 = 
fb_pixñ
 & 0x1F;

208 
s32
 
fb_g
 = (
fb_pixñ
 >> 5) & 0x1F;

209 
s32
 
fb_b
 = (
fb_pixñ
 >> 10) & 0x1F;

211 
bÀnd_pixñs
++;

213 
psx_gpu
->
bÀnd_mode
)

215 
BLEND_MODE_AVERAGE
:

216 
r
 = (∏+ 
fb_r
) / 2;

217 
g
 = (g + 
fb_g
) / 2;

218 
b
 = (b + 
fb_b
) / 2;

221 
BLEND_MODE_ADD
:

222 
r
 +
fb_r
;

223 
g
 +
fb_g
;

224 
b
 +
fb_b
;

226 if(
r
 > 31)

227 
r
 = 31;

229 if(
g
 > 31)

230 
g
 = 31;

232 if(
b
 > 31)

233 
b
 = 31;

237 
BLEND_MODE_SUBTRACT
:

238 
r
 = 
fb_r
 -Ñ;

239 
g
 = 
fb_g
 - g;

240 
b
 = 
fb_b
 - b;

242 if(
r
 < 0)

243 
r
 = 0;

245 if(
g
 < 0)

246 
g
 = 0;

248 if(
b
 < 0)

249 
b
 = 0;

253 
BLEND_MODE_ADD_FOURTH
:

254 
r
 = 
fb_r
 + (r / 4);

255 
g
 = 
fb_g
 + (g / 4);

256 
b
 = 
fb_b
 + (b / 4);

258 if(
r
 > 31)

259 
r
 = 31;

261 if(
g
 > 31)

262 
g
 = 31;

264 if(
b
 > 31)

265 
b
 = 31;

272 
pixñ
 = 
r
 | (
g
 << 5Ë| (
b
 << 10);

274 if(
psx_gpu
->
mask_≠∂y
 || (
ãxñ
 & 0x8000))

275 
pixñ
 |= 0x8000;

277 
psx_gpu
->
vøm
[(
y
 * 1024Ë+ 
x
] = 
pixñ
;

278 
	}
}

280 
s32
 
	gdôhî_èbÀ
[4][4] =

288 
	$ªndî_•™
(
psx_gpu_°ru˘
 *
psx_gpu
, 
_•™_°ru˘
 *
•™
, 
s32
 
y
,

289 
u32
 
Êags
)

291 
s32
 
À·_x
 = 
•™
->À·_x >> 
EDGE_STEP_BITS
;

292 
s32
 
right_x
 = 
•™
->right_x >> 
EDGE_STEP_BITS
;

293 
s32
 
cuºít_x
 = 
À·_x
;

294 
s32
 
dñè_x
;

296 
fixed_ty≥
 
cuºít_u
 = 
•™
->
u
.
cuºít_vÆue
;

297 
fixed_ty≥
 
cuºít_v
 = 
•™
->
v
.
cuºít_vÆue
;

298 
fixed_ty≥
 
cuºít_r
 = 
•™
->
r
.
cuºít_vÆue
;

299 
fixed_ty≥
 
cuºít_g
 = 
•™
->
g
.
cuºít_vÆue
;

300 
fixed_ty≥
 
cuºít_b
 = 
•™
->
b
.
cuºít_vÆue
;

302 if(
y
 < 
psx_gpu
->
võwp‹t_°¨t_y
)

305 if(
y
 > 
psx_gpu
->
võwp‹t_íd_y
)

308 if(
right_x
 < 
psx_gpu
->
võwp‹t_°¨t_x
)

311 if(
cuºít_x
 > 
psx_gpu
->
võwp‹t_íd_x
)

314 
•™s
++;

316 if(
cuºít_x
 < 
psx_gpu
->
võwp‹t_°¨t_x
)

317 
cuºít_x
 = 
psx_gpu
->
võwp‹t_°¨t_x
;

319 if(
right_x
 > 
psx_gpu
->
võwp‹t_íd_x
 + 1)

320 
right_x
 = 
psx_gpu
->
võwp‹t_íd_x
 + 1;

322 
dñè_x
 = 
cuºít_x
 - 
•™
->
ba£_x
;

324 
cuºít_u
 +
dñè_x
 * 
•™
->
u
.
°ï_dx
;

325 
cuºít_v
 +
dñè_x
 * 
•™
->
v
.
°ï_dx
;

326 
cuºít_r
 +
dñè_x
 * 
•™
->
r
.
°ï_dx
;

327 
cuºít_g
 +
dñè_x
 * 
•™
->
g
.
°ï_dx
;

328 
cuºít_b
 +
dñè_x
 * 
•™
->
b
.
°ï_dx
;

330 
•™_pixñs
 +
right_x
 - 
cuºít_x
;

331 
•™_pixñ_blocks
 +((
right_x
 / 8Ë- (
cuºít_x
 / 8)) + 1;

333 
cuºít_x
 < 
right_x
)

335 
s32
 
cﬁ‹_r
, 
cﬁ‹_g
, 
cﬁ‹_b
;

336 
u32
 
ãxñ
 = 0;

338 if(
psx_gpu
->
mask_evÆu©e
 &&

339 (
psx_gpu
->
vøm
[(
y
 * 1024Ë+ 
cuºít_x
] & 0x8000))

341 
skù_pixñ
;

344 if(
Êags
 & 
RENDER_FLAGS_SHADE
)

346 
cﬁ‹_r
 = 
	`fixed_to_öt
(
cuºít_r
);

347 
cﬁ‹_g
 = 
	`fixed_to_öt
(
cuºít_g
);

348 
cﬁ‹_b
 = 
	`fixed_to_öt
(
cuºít_b
);

352 
cﬁ‹_r
 = 
psx_gpu
->
¥imôive_cﬁ‹
 & 0xFF;

353 
cﬁ‹_g
 = (
psx_gpu
->
¥imôive_cﬁ‹
 >> 8) & 0xFF;

354 
cﬁ‹_b
 = (
psx_gpu
->
¥imôive_cﬁ‹
 >> 16) & 0xFF;

357 if(
Êags
 & 
RENDER_FLAGS_TEXTURE_MAP
)

359 
u32
 
ãxñ_r
, 
ãxñ_g
, 
ãxñ_b
;

360 
u32
 
u
 = 
	`fixed_to_öt
(
cuºít_u
);

361 
u32
 
v
 = 
	`fixed_to_öt
(
cuºít_v
);

363 
ãxñ
 = 
	`„tch_ãxñ
(
psx_gpu
, 
u
, 
v
);

365 if(
ãxñ
 == 0)

367 
å™•¨ít_pixñs
++;

368 
skù_pixñ
;

371 
ãxñ_r
 = 
ãxñ
 & 0x1F;

372 
ãxñ_g
 = (
ãxñ
 >> 5) & 0x1F;

373 
ãxñ_b
 = (
ãxñ
 >> 10) & 0x1F;

375 if((
Êags
 & 
RENDER_FLAGS_MODULATE_TEXELS
) == 0)

377 
cﬁ‹_r
 *
ãxñ_r
;

378 
cﬁ‹_g
 *
ãxñ_g
;

379 
cﬁ‹_b
 *
ãxñ_b
;

383 
cﬁ‹_r
 = 
ãxñ_r
 << 7;

384 
cﬁ‹_g
 = 
ãxñ_g
 << 7;

385 
cﬁ‹_b
 = 
ãxñ_b
 << 7;

388 
cﬁ‹_r
 >>= 4;

389 
cﬁ‹_g
 >>= 4;

390 
cﬁ‹_b
 >>= 4;

394 
u¡extuªd_pixñs
++;

397 if(
psx_gpu
->
dôhî_mode
 && ((
Êags
 & 
RENDER_FLAGS_SHADE
) ||

398 ((
Êags
 & 
RENDER_FLAGS_TEXTURE_MAP
) &&

399 ((
Êags
 & 
RENDER_FLAGS_MODULATE_TEXELS
) == 0))))

401 
s32
 
dôhî_off£t
 = 
dôhî_èbÀ
[
y
 % 4][
cuºít_x
 % 4];

402 
cﬁ‹_r
 +
dôhî_off£t
;

403 
cﬁ‹_g
 +
dôhî_off£t
;

404 
cﬁ‹_b
 +
dôhî_off£t
;

406 if(
cﬁ‹_r
 < 0)

407 
cﬁ‹_r
 = 0;

409 if(
cﬁ‹_g
 < 0)

410 
cﬁ‹_g
 = 0;

412 if(
cﬁ‹_b
 < 0)

413 
cﬁ‹_b
 = 0;

416 
cﬁ‹_r
 >>= 3;

417 
cﬁ‹_g
 >>= 3;

418 
cﬁ‹_b
 >>= 3;

420 
	`døw_pixñ
(
psx_gpu
, 
cﬁ‹_r
, 
cﬁ‹_g
, 
cﬁ‹_b
, 
ãxñ
, 
cuºít_x
, 
y
, 
Êags
);

422 
skù_pixñ
:

424 
cuºít_u
 +
•™
->
u
.
°ï_dx
;

425 
cuºít_v
 +
•™
->
v
.
°ï_dx
;

426 
cuºít_r
 +
•™
->
r
.
°ï_dx
;

427 
cuºít_g
 +
•™
->
g
.
°ï_dx
;

428 
cuºít_b
 +
•™
->
b
.
°ï_dx
;

430 
cuºít_x
++;

432 
	}
}

434 
	$ö¸emít_•™
(
_•™_°ru˘
 *
•™
)

436 
•™
->
À·_x
 +•™->
À·_dx_dy
;

437 
•™
->
right_x
 +•™->
right_dx_dy
;

439 
•™
->
u
.
cuºít_vÆue
 +•™->u.
°ï_dy
;

440 
•™
->
v
.
cuºít_vÆue
 +•™->v.
°ï_dy
;

441 
•™
->
r
.
cuºít_vÆue
 +•™->r.
°ï_dy
;

442 
•™
->
g
.
cuºít_vÆue
 +•™->g.
°ï_dy
;

443 
•™
->
b
.
cuºít_vÆue
 +•™->b.
°ï_dy
;

444 
	}
}

446 
	$de¸emít_•™
(
_•™_°ru˘
 *
•™
)

448 
•™
->
À·_x
 +•™->
À·_dx_dy
;

449 
•™
->
right_x
 +•™->
right_dx_dy
;

451 
•™
->
u
.
cuºít_vÆue
 -•™->u.
°ï_dy
;

452 
•™
->
v
.
cuºít_vÆue
 -•™->v.
°ï_dy
;

453 
•™
->
r
.
cuºít_vÆue
 -•™->r.
°ï_dy
;

454 
•™
->
g
.
cuºít_vÆue
 -•™->g.
°ï_dy
;

455 
•™
->
b
.
cuºít_vÆue
 -•™->b.
°ï_dy
;

456 
	}
}

459 
	#compuã_gødõ¡_¨ó_x
(
öãΩﬁ™t
) \

461 
•™
.
öãΩﬁ™t
.
gødõ¡_¨ó_x
 = \

462 
	`åüngÀ_sig√d_¨ó_x2
(
a
->
öãΩﬁ™t
,á->
y
, 
b
->interpolant, b->y, \

463 
c
->
öãΩﬁ™t
, c->
y
); \

465 

	)

466 
	#compuã_gødõ¡_¨ó_y
(
öãΩﬁ™t
) \

468 
•™
.
öãΩﬁ™t
.
gødõ¡_¨ó_y
 = \

469 
	`åüngÀ_sig√d_¨ó_x2
(
a
->
x
,á->
öãΩﬁ™t
, 
b
->x, b->interpolant, \

470 
c
->
x
, c->
öãΩﬁ™t
); \

472 

	)

473 
	#compuã_Æl_gødõ¡_¨ós
() \

474 
	`compuã_gødõ¡_¨ó_x
(
u
); \

475 
	`compuã_gødõ¡_¨ó_x
(
v
); \

476 
	`compuã_gødõ¡_¨ó_x
(
r
); \

477 
	`compuã_gødõ¡_¨ó_x
(
g
); \

478 
	`compuã_gødõ¡_¨ó_x
(
b
); \

479 
	`compuã_gødõ¡_¨ó_y
(
u
); \

480 
	`compuã_gødõ¡_¨ó_y
(
v
); \

481 
	`compuã_gødõ¡_¨ó_y
(
r
); \

482 
	`compuã_gødõ¡_¨ó_y
(
g
); \

483 
	`compuã_gødõ¡_¨ó_y
(
b
) \

484 

	)

485 
	#£t_öãΩﬁ™t_ba£
(
öãΩﬁ™t
, 
ba£_vîãx
) \

486 
•™
->
öãΩﬁ™t
.
°ï_dx
 = \

487 
	`fixed_ªcùroˇl_mu…ùly
(
•™
->
öãΩﬁ™t
.
gødõ¡_¨ó_x
, 
ªcùroˇl
, \

488 
•™
->
åüngÀ_wödög
, 
shi·
); \

489 
•™
->
öãΩﬁ™t
.
°ï_dy
 = \

490 
	`fixed_ªcùroˇl_mu…ùly
(
•™
->
öãΩﬁ™t
.
gødõ¡_¨ó_y
, 
ªcùroˇl
, \

491 
•™
->
åüngÀ_wödög
, 
shi·
); \

492 
•™
->
öãΩﬁ™t
.
cuºít_vÆue
 = 
	`fixed_˚¡î
(
ba£_vîãx
->interpolant) \

493 

	)

494 
	#£t_öãΩﬁ™t_ba£s
(
ba£_vîãx
) \

496 
u32
 
shi·
; \

497 
u32
 
ªcùroˇl
 = 
	`fixed_ªcùroˇl
(
•™
->
åüngÀ_¨ó
, &
shi·
); \

498 
shi·
 -
FIXED_BITS
; \

499 
	`£t_öãΩﬁ™t_ba£
(
u
, 
ba£_vîãx
); \

500 
	`£t_öãΩﬁ™t_ba£
(
v
, 
ba£_vîãx
); \

501 
	`£t_öãΩﬁ™t_ba£
(
r
, 
ba£_vîãx
); \

502 
	`£t_öãΩﬁ™t_ba£
(
g
, 
ba£_vîãx
); \

503 
	`£t_öãΩﬁ™t_ba£
(
b
, 
ba£_vîãx
); \

504 
•™
->
ba£_x
 = s∑n->
À·_x
 >> 
EDGE_STEP_BITS
; \

506 

	)

507 
	#compuã_edge_dñè
(
edge
, 
°¨t
, 
íd
, 
height
) \

509 
s32
 
x_°¨t
 = 
°¨t
->
x
; \

510 
s32
 
x_íd
 = 
íd
->
x
; \

511 
s32
 
width
 = 
x_íd
 - 
x_°¨t
; \

513 
s32
 
shi·
 = 
	`__buûtö_˛z
(
height
); \

514 
u32
 
height_n‹mÆized
 = 
height
 << 
shi·
; \

515 
u32
 
height_ªcùroˇl
 = ((1ULL << 50Ë+ (
height_n‹mÆized
 - 1)) / \

516 
height_n‹mÆized
; \

518 
shi·
 -(50 - 
EDGE_STEP_BITS
); \

520 
•™
->
edge
##
_x
 = \

521 ((((
s64
)
x_°¨t
 * 
height
Ë+ (heighà- 1)Ë* 
height_ªcùroˇl
Ë<< 
shi·
; \

522 
•™
->
edge
##
_dx_dy
 = ((
s64
)
width
 * 
height_ªcùroˇl
Ë<< 
shi·
; \

524 

	)

526 
	#ªndî_•™s_up
(
height
) \

529 
	`de¸emít_•™
(
•™
); \

530 
	`ªndî_•™
(
psx_gpu
, 
•™
, 
cuºít_y
, 
Êags
); \

531 
cuºít_y
--; \

532 
height
--; \

533 } 
height
) \

534 

	)

535 
	#ªndî_•™s_down
(
height
) \

538 
	`ªndî_•™
(
psx_gpu
, 
•™
, 
cuºít_y
, 
Êags
); \

539 
	`ö¸emít_•™
(
•™
); \

540 
cuºít_y
++; \

541 
height
--; \

542 } 
height
) \

543 

	)

544 
	#ªndî_•™s_up_up
(
mö‹
, 
maj‹
) \

545 
s32
 
cuºít_y
 = 
bŸtom
->
y
 - 1; \

546 
s32
 
height_mö‹_a
 = 
bŸtom
->
y
 - 
middÀ
->y; \

547 
s32
 
height_mö‹_b
 = 
middÀ
->
y
 - 
t›
->y; \

548 
s32
 
height_maj‹
 = 
height_mö‹_a
 + 
height_mö‹_b
; \

550 
	`compuã_edge_dñè
(
maj‹
, 
bŸtom
, 
t›
, 
height_maj‹
); \

551 
	`compuã_edge_dñè
(
mö‹
, 
bŸtom
, 
middÀ
, 
height_mö‹_a
); \

552 
	`£t_öãΩﬁ™t_ba£s
(
bŸtom
); \

554 
	`ªndî_•™s_up
(
height_mö‹_a
); \

556 
	`compuã_edge_dñè
(
mö‹
, 
middÀ
, 
t›
, 
height_mö‹_b
); \

557 
	`ªndî_•™s_up
(
height_mö‹_b
) \

558 

	)

559 
	$ªndî_•™s_up_À·
(
psx_gpu_°ru˘
 *
psx_gpu
, 
_•™_°ru˘
 *
•™
,

560 
vîãx_°ru˘
 *
bŸtom
, vîãx_°ru˘ *
middÀ
, vîãx_°ru˘ *
t›
, 
u32
 
Êags
)

562 
	`ªndî_•™s_up_up
(
À·
, 
right
);

563 
	}
}

565 
	$ªndî_•™s_up_right
(
psx_gpu_°ru˘
 *
psx_gpu
, 
_•™_°ru˘
 *
•™
,

566 
vîãx_°ru˘
 *
bŸtom
, vîãx_°ru˘ *
middÀ
, vîãx_°ru˘ *
t›
, 
u32
 
Êags
)

568 
	`ªndî_•™s_up_up
(
right
, 
À·
);

569 
	}
}

571 
	#ªndî_•™s_down_down
(
mö‹
, 
maj‹
) \

572 
s32
 
cuºít_y
 = 
t›
->
y
; \

573 
s32
 
height_mö‹_a
 = 
middÀ
->
y
 - 
t›
->y; \

574 
s32
 
height_mö‹_b
 = 
bŸtom
->
y
 - 
middÀ
->y; \

575 
s32
 
height_maj‹
 = 
height_mö‹_a
 + 
height_mö‹_b
; \

577 
	`compuã_edge_dñè
(
mö‹
, 
t›
, 
middÀ
, 
height_mö‹_a
); \

578 
	`compuã_edge_dñè
(
maj‹
, 
t›
, 
bŸtom
, 
height_maj‹
); \

579 
	`£t_öãΩﬁ™t_ba£s
(
t›
); \

581 
	`ªndî_•™s_down
(
height_mö‹_a
); \

583 
	`compuã_edge_dñè
(
mö‹
, 
middÀ
, 
bŸtom
, 
height_mö‹_b
); \

584 
	`ªndî_•™s_down
(
height_mö‹_b
) \

585 

	)

586 
	$ªndî_•™s_down_À·
(
psx_gpu_°ru˘
 *
psx_gpu
, 
_•™_°ru˘
 *
•™
,

587 
vîãx_°ru˘
 *
t›
, vîãx_°ru˘ *
middÀ
, vîãx_°ru˘ *
bŸtom
, 
u32
 
Êags
)

589 
	`ªndî_•™s_down_down
(
À·
, 
right
);

590 
	}
}

592 
	$ªndî_•™s_down_right
(
psx_gpu_°ru˘
 *
psx_gpu
, 
_•™_°ru˘
 *
•™
,

593 
vîãx_°ru˘
 *
t›
, vîãx_°ru˘ *
middÀ
, vîãx_°ru˘ *
bŸtom
, 
u32
 
Êags
)

595 
	`ªndî_•™s_down_down
(
right
, 
À·
);

596 
	}
}

598 
	#ªndî_•™s_up_Ê©
(
bŸtom_À·
, 
bŸtom_right
, 
t›_À·
, 
t›_right
) \

599 
s32
 
cuºít_y
 = 
bŸtom_À·
->
y
 - 1; \

600 
s32
 
height
 = 
bŸtom_À·
->
y
 - 
t›_À·
->y; \

602 
	`compuã_edge_dñè
(
À·
, 
bŸtom_À·
, 
t›_À·
, 
height
); \

603 
	`compuã_edge_dñè
(
right
, 
bŸtom_right
, 
t›_right
, 
height
); \

604 
	`£t_öãΩﬁ™t_ba£s
(
bŸtom_À·
); \

605 
	`ªndî_•™s_up
(
height
) \

606 

	)

607 
	$ªndî_•™s_up_a
(
psx_gpu_°ru˘
 *
psx_gpu
, 
_•™_°ru˘
 *
•™
,

608 
vîãx_°ru˘
 *
bŸtom_À·
, vîãx_°ru˘ *
bŸtom_right
, vîãx_°ru˘ *
t›
,

609 
u32
 
Êags
)

611 
	`ªndî_•™s_up_Ê©
(
bŸtom_À·
, 
bŸtom_right
, 
t›
,Åop);

612 
	}
}

614 
	$ªndî_•™s_up_b
(
psx_gpu_°ru˘
 *
psx_gpu
, 
_•™_°ru˘
 *
•™
,

615 
vîãx_°ru˘
 *
bŸtom
, vîãx_°ru˘ *
t›_À·
, vîãx_°ru˘ *
t›_right
,

616 
u32
 
Êags
)

618 
	`ªndî_•™s_up_Ê©
(
bŸtom
, bŸtom, 
t›_À·
, 
t›_right
);

619 
	}
}

621 
	#ªndî_•™s_down_Ê©
(
t›_À·
, 
t›_right
, 
bŸtom_À·
, 
bŸtom_right
) \

622 
s32
 
cuºít_y
 = 
t›_À·
->
y
; \

623 
s32
 
height
 = 
bŸtom_À·
->
y
 - 
t›_À·
->y; \

625 
	`compuã_edge_dñè
(
À·
, 
t›_À·
, 
bŸtom_À·
, 
height
); \

626 
	`compuã_edge_dñè
(
right
, 
t›_right
, 
bŸtom_right
, 
height
); \

627 
	`£t_öãΩﬁ™t_ba£s
(
t›_À·
); \

628 
	`ªndî_•™s_down
(
height
) \

629 

	)

630 
	$ªndî_•™s_down_a
(
psx_gpu_°ru˘
 *
psx_gpu
, 
_•™_°ru˘
 *
•™
,

631 
vîãx_°ru˘
 *
t›_À·
, vîãx_°ru˘ *
t›_right
, vîãx_°ru˘ *
bŸtom
,

632 
u32
 
Êags
)

634 
	`ªndî_•™s_down_Ê©
(
t›_À·
, 
t›_right
, 
bŸtom
, bottom);

635 
	}
}

637 
	$ªndî_•™s_down_b
(
psx_gpu_°ru˘
 *
psx_gpu
, 
_•™_°ru˘
 *
•™
,

638 
vîãx_°ru˘
 *
t›
, vîãx_°ru˘ *
bŸtom_À·
, vîãx_°ru˘ *
bŸtom_right
,

639 
u32
 
Êags
)

641 
	`ªndî_•™s_down_Ê©
(
t›
,Å›, 
bŸtom_À·
, 
bŸtom_right
);

642 
	}
}

644 
	$ªndî_•™s_up_down
(
psx_gpu_°ru˘
 *
psx_gpu
, 
_•™_°ru˘
 *
•™
,

645 
vîãx_°ru˘
 *
middÀ
, vîãx_°ru˘ *
t›
, vîãx_°ru˘ *
bŸtom
, 
u32
 
Êags
)

647 
s32
 
middÀ_y
 = 
middÀ
->
y
;

648 
s32
 
cuºít_y
 = 
middÀ_y
 - 1;

649 
s32
 
height_mö‹_a
 = 
middÀ
->
y
 - 
t›
->y;

650 
s32
 
height_mö‹_b
 = 
bŸtom
->
y
 - 
middÀ
->y;

651 
s32
 
height_maj‹
 = 
height_mö‹_a
 + 
height_mö‹_b
;

653 
u64
 
right_x_mid
;

655 
	`compuã_edge_dñè
(
À·
, 
middÀ
, 
t›
, 
height_mö‹_a
);

656 
	`compuã_edge_dñè
(
right
, 
bŸtom
, 
t›
, 
height_maj‹
);

657 
	`£t_öãΩﬁ™t_ba£s
(
middÀ
);

659 
right_x_mid
 = 
•™
->
right_x
 + (•™->
right_dx_dy
 * 
height_mö‹_b
);

660 
•™
->
right_x
 = 
right_x_mid
;

662 
	`ªndî_•™s_up
(
height_mö‹_a
);

664 
	`compuã_edge_dñè
(
À·
, 
middÀ
, 
bŸtom
, 
height_mö‹_b
);

665 
	`£t_öãΩﬁ™t_ba£s
(
middÀ
);

667 
•™
->
right_dx_dy
 *= -1;

668 
•™
->
right_x
 = 
right_x_mid
;

669 
cuºít_y
 = 
middÀ_y
;

671 
	`ªndî_•™s_down
(
height_mö‹_b
);

672 
	}
}

674 
	#vîãx_sw≠
(
_a
, 
_b
) \

676 
vîãx_°ru˘
 *
ãmp_vîãx
 = 
_a
; \

677 
_a
 = 
_b
; \

678 
_b
 = 
ãmp_vîãx
; \

679 
åüngÀ_wödög
 ^= 1; \

681 

	)

683 
	#åüngÀ_y_dúe˘i⁄_up
 1

	)

684 
	#åüngÀ_y_dúe˘i⁄_Ê©
 2

	)

685 
	#åüngÀ_y_dúe˘i⁄_down
 0

	)

687 
	#åüngÀ_wödög_posôive
 0

	)

688 
	#åüngÀ_wödög_√g©ive
 1

	)

690 
	#åüngÀ_£t_dúe˘i⁄
(
dúe˘i⁄_v¨übÀ
, 
vÆue
) \

691 
u32
 
dúe˘i⁄_v¨übÀ
 = (u32)(
vÆue
) >> 31; \

692 if(
vÆue
 == 0) \

693 
dúe˘i⁄_v¨übÀ
 = 2 \

694 

	)

695 
	#åüngÀ_ˇ£
(
dúe˘i⁄_a
, 
dúe˘i⁄_b
, 
dúe˘i⁄_c
, 
wödög
) \

696 (
åüngÀ_y_dúe˘i⁄_
##
dúe˘i⁄_a
 | \

697 (
åüngÀ_y_dúe˘i⁄_
##
dúe˘i⁄_b
 << 2) | \

698 (
åüngÀ_y_dúe˘i⁄_
##
dúe˘i⁄_c
 << 4) | \

699 (
åüngÀ_wödög_
##
wödög
 << 6)) \

700 

	)

702 
	$ªndî_åüngÀ
(
psx_gpu_°ru˘
 *
psx_gpu
, 
vîãx_°ru˘
 *
vîãxes
,

703 
u32
 
Êags
)

705 
s32
 
åüngÀ_¨ó
;

706 
u32
 
åüngÀ_wödög
 = 0;

707 
_•™_°ru˘
 
•™
;

709 
vîãx_°ru˘
 *
a
 = &(
vîãxes
[0]);

710 
vîãx_°ru˘
 *
b
 = &(
vîãxes
[1]);

711 
vîãx_°ru˘
 *
c
 = &(
vîãxes
[2]);

713 
åüngÀ_¨ó
 = 
	`åüngÀ_sig√d_¨ó_x2
(
a
->
x
,á->
y
, 
b
->x, b->y, 
c
->x, c->y);

715 
åüngÀs
++;

717 if(
åüngÀ_¨ó
 == 0)

720 if(
b
->
y
 < 
a
->y)

721 
	`vîãx_sw≠
(
a
, 
b
);

723 if(
c
->
y
 < 
b
->y)

725 
	`vîãx_sw≠
(
b
, 
c
);

727 if(
b
->
y
 < 
a
->y)

728 
	`vîãx_sw≠
(
a
, 
b
);

731 if((
c
->
y
 - 
a
->y) >= 512)

734 if(
åüngÀ_¨ó
 < 0)

736 
åüngÀ_¨ó
 = -triangle_area;

737 
åüngÀ_wödög
 ^= 1;

738 
	`vîãx_sw≠
(
a
, 
c
);

741 if(
b
->
x
 < 
a
->x)

742 
	`vîãx_sw≠
(
a
, 
b
);

744 if(
c
->
x
 < 
b
->x)

746 
	`vîãx_sw≠
(
b
, 
c
);

748 if(
b
->
x
 < 
a
->x)

749 
	`vîãx_sw≠
(
a
, 
b
);

752 if((
c
->
x
 - 
a
->x) >= 1024)

755 
s32
 
y_dñè_a
 = 
b
->
y
 - 
a
->y;

756 
s32
 
y_dñè_b
 = 
c
->
y
 - 
b
->y;

757 
s32
 
y_dñè_c
 = 
c
->
y
 - 
a
->y;

759 
	`åüngÀ_£t_dúe˘i⁄
(
y_dúe˘i⁄_a
, 
y_dñè_a
);

760 
	`åüngÀ_£t_dúe˘i⁄
(
y_dúe˘i⁄_b
, 
y_dñè_b
);

761 
	`åüngÀ_£t_dúe˘i⁄
(
y_dúe˘i⁄_c
, 
y_dñè_c
);

763 
	`compuã_Æl_gødõ¡_¨ós
();

764 
•™
.
åüngÀ_¨ó
 =Åriangle_area;

765 
•™
.
åüngÀ_wödög
 =Åriangle_winding;

767 
y_dúe˘i⁄_a
 | (
y_dúe˘i⁄_b
 << 2Ë| (
y_dúe˘i⁄_c
 << 4) |

768 (
åüngÀ_wödög
 << 6))

770 
	`åüngÀ_ˇ£
(
up
, up, up, 
√g©ive
):

771 
	`åüngÀ_ˇ£
(
up
, up, 
Ê©
, 
√g©ive
):

772 
	`åüngÀ_ˇ£
(
up
, up, 
down
, 
√g©ive
):

773 
	`ªndî_•™s_up_right
(
psx_gpu
, &
•™
, 
a
, 
b
, 
c
, 
Êags
);

776 
	`åüngÀ_ˇ£
(
Ê©
, 
up
, up, 
√g©ive
):

777 
	`åüngÀ_ˇ£
(
Ê©
, 
up
, fœt, 
√g©ive
):

778 
	`åüngÀ_ˇ£
(
Ê©
, 
up
, 
down
, 
√g©ive
):

779 
	`ªndî_•™s_up_a
(
psx_gpu
, &
•™
, 
a
, 
b
, 
c
, 
Êags
);

782 
	`åüngÀ_ˇ£
(
down
, 
up
, up, 
√g©ive
):

783 
	`ªndî_•™s_up_down
(
psx_gpu
, &
•™
, 
a
, 
c
, 
b
, 
Êags
);

786 
	`åüngÀ_ˇ£
(
down
, 
up
, 
Ê©
, 
√g©ive
):

787 
	`ªndî_•™s_down_a
(
psx_gpu
, &
•™
, 
a
, 
c
, 
b
, 
Êags
);

790 
	`åüngÀ_ˇ£
(
down
, 
up
, down, 
√g©ive
):

791 
	`ªndî_•™s_down_right
(
psx_gpu
, &
•™
, 
a
, 
c
, 
b
, 
Êags
);

794 
	`åüngÀ_ˇ£
(
down
, 
Ê©
, 
up
, 
√g©ive
):

795 
	`åüngÀ_ˇ£
(
down
, 
Ê©
, fœt, 
√g©ive
):

796 
	`åüngÀ_ˇ£
(
down
, 
Ê©
, down, 
√g©ive
):

797 
	`ªndî_•™s_down_b
(
psx_gpu
, &
•™
, 
a
, 
b
, 
c
, 
Êags
);

800 
	`åüngÀ_ˇ£
(
down
, down, 
up
, 
√g©ive
):

801 
	`åüngÀ_ˇ£
(
down
, down, 
Ê©
, 
√g©ive
):

802 
	`åüngÀ_ˇ£
(
down
, down, down, 
√g©ive
):

803 
	`ªndî_•™s_down_À·
(
psx_gpu
, &
•™
, 
a
, 
b
, 
c
, 
Êags
);

806 
	`åüngÀ_ˇ£
(
up
, up, up, 
posôive
):

807 
	`åüngÀ_ˇ£
(
up
, up, 
Ê©
, 
posôive
):

808 
	`åüngÀ_ˇ£
(
up
, up, 
down
, 
posôive
):

809 
	`ªndî_•™s_up_À·
(
psx_gpu
, &
•™
, 
a
, 
b
, 
c
, 
Êags
);

812 
	`åüngÀ_ˇ£
(
up
, 
Ê©
, up, 
posôive
):

813 
	`åüngÀ_ˇ£
(
up
, 
Ê©
, fœt, 
posôive
):

814 
	`åüngÀ_ˇ£
(
up
, 
Ê©
, 
down
, 
posôive
):

815 
	`ªndî_•™s_up_b
(
psx_gpu
, &
•™
, 
a
, 
b
, 
c
, 
Êags
);

818 
	`åüngÀ_ˇ£
(
up
, 
down
, up, 
posôive
):

819 
	`ªndî_•™s_up_right
(
psx_gpu
, &
•™
, 
a
, 
c
, 
b
, 
Êags
);

822 
	`åüngÀ_ˇ£
(
up
, 
down
, 
Ê©
, 
posôive
):

823 
	`ªndî_•™s_up_a
(
psx_gpu
, &
•™
, 
a
, 
c
, 
b
, 
Êags
);

826 
	`åüngÀ_ˇ£
(
up
, 
down
, down, 
posôive
):

827 
	`ªndî_•™s_up_down
(
psx_gpu
, &
•™
, 
a
, 
b
, 
c
, 
Êags
);

830 
	`åüngÀ_ˇ£
(
Ê©
, 
down
, 
up
, 
posôive
):

831 
	`åüngÀ_ˇ£
(
Ê©
, 
down
, fœt, 
posôive
):

832 
	`åüngÀ_ˇ£
(
Ê©
, 
down
, down, 
posôive
):

833 
	`ªndî_•™s_down_a
(
psx_gpu
, &
•™
, 
a
, 
b
, 
c
, 
Êags
);

836 
	`åüngÀ_ˇ£
(
down
, down, 
up
, 
posôive
):

837 
	`åüngÀ_ˇ£
(
down
, down, 
Ê©
, 
posôive
):

838 
	`åüngÀ_ˇ£
(
down
, down, down, 
posôive
):

839 
	`ªndî_•™s_down_right
(
psx_gpu
, &
•™
, 
a
, 
b
, 
c
, 
Êags
);

843 
	}
}

846 
	$ªndî_•rôe
(
psx_gpu_°ru˘
 *
psx_gpu
, 
s32
 
x
, s32 
y
, 
u32
 
u
, u32 
v
,

847 
s32
 
width
, s32 
height
, 
u32
 
Êags
)

850 
s32
 
cuºít_x
, 
cuºít_y
;

851 
u32
 
cuºít_u
, 
cuºít_v
;

852 
u32
 
¥imôive_cﬁ‹
 = 
psx_gpu
->primitive_color;

853 
u32
 
•rôe_r
, 
•rôe_g
, 
•rôe_b
;

854 
s32
 
cﬁ‹_r
 = 0;

855 
s32
 
cﬁ‹_g
 = 0;

856 
s32
 
cﬁ‹_b
 = 0;

857 
u32
 
ãxñ
 = 0;

859 
•rôe_r
 = 
¥imôive_cﬁ‹
 & 0xFF;

860 
•rôe_g
 = (
¥imôive_cﬁ‹
 >> 8) & 0xFF;

861 
•rôe_b
 = (
¥imôive_cﬁ‹
 >> 16) & 0xFF;

863 
u32
 
•rôes
 = 0;

865 
•rôes
++;

867 
cuºít_y
 = 
y
, 
cuºít_v
 = 
v
;

868 
cuºít_y
 < 
y
 + 
height
; cuºít_y++, 
cuºít_v
++)

870 
cuºít_x
 = 
x
, 
cuºít_u
 = 
u
;

871 
cuºít_x
 < 
x
 + 
width
; cuºít_x++, 
cuºít_u
++)

873 if((
cuºít_x
 >
psx_gpu
->
võwp‹t_°¨t_x
) &&

874 (
cuºít_y
 >
psx_gpu
->
võwp‹t_°¨t_y
) &&

875 (
cuºít_x
 <
psx_gpu
->
võwp‹t_íd_x
) &&

876 (
cuºít_y
 <
psx_gpu
->
võwp‹t_íd_y
))

878 if(
psx_gpu
->
mask_evÆu©e
 &&

879 (
psx_gpu
->
vøm
[(
y
 * 1024Ë+ 
cuºít_x
] & 0x8000))

884 if(
Êags
 & 
RENDER_FLAGS_TEXTURE_MAP
)

886 
ãxñ
 = 
	`„tch_ãxñ
(
psx_gpu
, 
cuºít_u
, 
cuºít_v
);

887 if(
ãxñ
 == 0)

890 
cﬁ‹_r
 = 
ãxñ
 & 0x1F;

891 
cﬁ‹_g
 = (
ãxñ
 >> 5) & 0x1F;

892 
cﬁ‹_b
 = (
ãxñ
 >> 10) & 0x1F;

894 if((
Êags
 & 
RENDER_FLAGS_MODULATE_TEXELS
) == 0)

896 
cﬁ‹_r
 *
•rôe_r
;

897 
cﬁ‹_g
 *
•rôe_g
;

898 
cﬁ‹_b
 *
•rôe_b
;

900 
cﬁ‹_r
 >>= 7;

901 
cﬁ‹_g
 >>= 7;

902 
cﬁ‹_b
 >>= 7;

907 
cﬁ‹_r
 = 
•rôe_r
 >> 3;

908 
cﬁ‹_g
 = 
•rôe_g
 >> 3;

909 
cﬁ‹_b
 = 
•rôe_b
 >> 3;

912 
	`døw_pixñ
(
psx_gpu
, 
cﬁ‹_r
, 
cﬁ‹_g
, 
cﬁ‹_b
, 
ãxñ
, 
cuºít_x
,

913 
cuºít_y
, 
Êags
);

917 
	}
}

920 
	#døw_pixñ_löe
(
_x
, 
_y
) \

921 if((
_x
 >
psx_gpu
->
võwp‹t_°¨t_x
Ë&& (
_y
 >psx_gpu->
võwp‹t_°¨t_y
) && \

922 (
_x
 <
psx_gpu
->
võwp‹t_íd_x
Ë&& (
_y
 <psx_gpu->
võwp‹t_íd_y
)) \

924 if(
Êags
 & 
RENDER_FLAGS_SHADE
) \

926 
cﬁ‹_r
 = 
	`fixed_to_öt
(
cuºít_r
); \

927 
cﬁ‹_g
 = 
	`fixed_to_öt
(
cuºít_g
); \

928 
cﬁ‹_b
 = 
	`fixed_to_öt
(
cuºít_b
); \

930 
cuºít_r
 +
gødõ¡_r
; \

931 
cuºít_g
 +
gødõ¡_g
; \

932 
cuºít_b
 +
gødõ¡_b
; \

936 
cﬁ‹_r
 = 
¥imôive_cﬁ‹
 & 0xFF; \

937 
cﬁ‹_g
 = (
¥imôive_cﬁ‹
 >> 8) & 0xFF; \

938 
cﬁ‹_b
 = (
¥imôive_cﬁ‹
 >> 16) & 0xFF; \

941 if(
psx_gpu
->
dôhî_mode
) \

943 
s32
 
dôhî_off£t
 = 
dôhî_èbÀ
[
_y
 % 4][
_x
 % 4]; \

945 
cﬁ‹_r
 +
dôhî_off£t
; \

946 
cﬁ‹_g
 +
dôhî_off£t
; \

947 
cﬁ‹_b
 +
dôhî_off£t
; \

949 if(
cﬁ‹_r
 < 0) \

950 
cﬁ‹_r
 = 0; \

952 if(
cﬁ‹_g
 < 0) \

953 
cﬁ‹_g
 = 0; \

955 if(
cﬁ‹_b
 < 0) \

956 
cﬁ‹_b
 = 0; \

958 
cﬁ‹_r
 >>= 3; \

959 
cﬁ‹_g
 >>= 3; \

960 
cﬁ‹_b
 >>= 3; \

962 
•™_pixñs
++; \

964 
	`døw_pixñ
(
psx_gpu
, 
cﬁ‹_r
, 
cﬁ‹_g
, 
cﬁ‹_b
, 0, 
_x
, 
_y
, 
Êags
); \

966 

	)

967 
	#upd©e_ö¸emít
(
vÆue
) \

968 
vÆue
++ \

969 

	)

970 
	#upd©e_de¸emít
(
vÆue
) \

971 
vÆue
-- \

972 

	)

973 
	#com∑ª_ö¸emít
(
a
, 
b
) \

974 (
a
 <
b
) \

975 

	)

976 
	#com∑ª_de¸emít
(
a
, 
b
) \

977 (
a
 >
b
) \

978 

	)

979 
	#£t_löe_gødõ¡s
(
mö‹
) \

981 
s32
 
gødõ¡_divis‹
 = 
dñè_
##
mö‹
; \

982 
gødõ¡_r
 = 
	`öt_to_fixed
(
vîãx_b
->
r
 - 
vîãx_a
->rË/ 
gødõ¡_divis‹
; \

983 
gødõ¡_g
 = 
	`öt_to_fixed
(
vîãx_b
->
g
 - 
vîãx_a
->gË/ 
gødõ¡_divis‹
; \

984 
gødõ¡_b
 = 
	`öt_to_fixed
(
vîãx_b
->
b
 - 
vîãx_a
->bË/ 
gødõ¡_divis‹
; \

985 
cuºít_r
 = 
	`fixed_˚¡î
(
vîãx_a
->
r
); \

986 
cuºít_g
 = 
	`fixed_˚¡î
(
vîãx_a
->
g
); \

987 
cuºít_b
 = 
	`fixed_˚¡î
(
vîãx_a
->
b
); \

988 }

	)

990 
	#døw_löe_•™_h‹iz⁄èl
(
dúe˘i⁄
) \

993 
îr‹_°ï
 = 
dñè_y
 * 2; \

994 
îr‹_wøp
 = 
dñè_x
 * 2; \

995 
îr‹
 = 
dñè_x
; \

997 
cuºít_y
 = 
y_a
; \

998 
	`£t_löe_gødõ¡s
(
x
); \

1000 
cuºít_x
 = 
x_a
; cuºít_x <
x_b
; current_x++) \

1002 
	`døw_pixñ_löe
(
cuºít_x
, 
cuºít_y
); \

1003 
îr‹
 +
îr‹_°ï
; \

1005 if(
îr‹
 >
îr‹_wøp
) \

1007 
upd©e_
##
	`dúe˘i⁄
(
cuºít_y
); \

1008 
îr‹
 -
îr‹_wøp
; \

1012 

	)

1013 
	#døw_löe_•™_vîtiˇl
(
dúe˘i⁄
) \

1016 
îr‹_°ï
 = 
dñè_x
 * 2; \

1017 
îr‹_wøp
 = 
dñè_y
 * 2; \

1018 
îr‹
 = 
dñè_y
; \

1020 
cuºít_x
 = 
x_a
; \

1021 
	`£t_löe_gødõ¡s
(
y
); \

1023 
cuºít_y
 = 
y_a
; 
com∑ª_
##
	`dúe˘i⁄
(cuºít_y, 
y_b
); \

1024 
upd©e_
##
	`dúe˘i⁄
(
cuºít_y
)) \

1026 
	`døw_pixñ_löe
(
cuºít_x
, 
cuºít_y
); \

1027 
îr‹
 +
îr‹_°ï
; \

1029 if(
îr‹
 > 
îr‹_wøp
) \

1031 
cuºít_x
++; \

1032 
îr‹
 -
îr‹_wøp
; \

1036 

	)

1037 
	$ªndî_löe
(
psx_gpu_°ru˘
 *
psx_gpu
, 
vîãx_°ru˘
 *
vîãxes
, 
u32
 
Êags
)

1039 
u32
 
¥imôive_cﬁ‹
 = 
psx_gpu
->primitive_color;

1040 
s32
 
cﬁ‹_r
, 
cﬁ‹_g
, 
cﬁ‹_b
;

1042 
fixed_ty≥
 
gødõ¡_r
 = 0;

1043 
fixed_ty≥
 
gødõ¡_g
 = 0;

1044 
fixed_ty≥
 
gødõ¡_b
 = 0;

1045 
fixed_ty≥
 
cuºít_r
 = 0;

1046 
fixed_ty≥
 
cuºít_g
 = 0;

1047 
fixed_ty≥
 
cuºít_b
 = 0;

1049 
s32
 
y_a
, 
y_b
;

1050 
s32
 
x_a
, 
x_b
;

1052 
s32
 
dñè_x
, 
dñè_y
;

1053 
u32
 
åüngÀ_wödög
 = 0;

1055 
s32
 
cuºít_x
;

1056 
s32
 
cuºít_y
;

1058 
u32
 
îr‹_°ï
;

1059 
u32
 
îr‹
;

1060 
u32
 
îr‹_wøp
;

1062 
vîãx_°ru˘
 *
vîãx_a
 = &(
vîãxes
[0]);

1063 
vîãx_°ru˘
 *
vîãx_b
 = &(
vîãxes
[1]);

1065 if(
vîãx_a
->
x
 >
vîãx_b
->x)

1067 
	`vîãx_sw≠
(
vîãx_a
, 
vîãx_b
);

1070 
x_a
 = 
vîãx_a
->
x
;

1071 
x_b
 = 
vîãx_b
->
x
;

1073 
y_a
 = 
vîãx_a
->
y
;

1074 
y_b
 = 
vîãx_b
->
y
;

1076 
dñè_x
 = 
x_b
 - 
x_a
;

1077 
dñè_y
 = 
y_b
 - 
y_a
;

1079 if(
dñè_x
 >= 1024)

1082 
Êags
 &~
RENDER_FLAGS_TEXTURE_MAP
;

1084 if(
dñè_y
 < 0)

1086 
dñè_y
 *= -1;

1088 if(
dñè_y
 >= 512)

1091 if(
dñè_x
 > 
dñè_y
)

1092 
	`døw_löe_•™_h‹iz⁄èl
(
de¸emít
);

1094 
	`døw_löe_•™_vîtiˇl
(
de¸emít
);

1098 if(
dñè_y
 >= 512)

1101 if(
dñè_x
 > 
dñè_y
)

1102 
	`døw_löe_•™_h‹iz⁄èl
(
ö¸emít
);

1104 
	`døw_löe_•™_vîtiˇl
(
ö¸emít
);

1106 
	}
}

1109 
	$ªndî_block_fûl
(
psx_gpu_°ru˘
 *
psx_gpu
, 
u32
 
cﬁ‹
, u32 
x
, u32 
y
,

1110 
u32
 
width
, u32 
height
)

1112 
u32
 
r
 = 
cﬁ‹
 & 0xFF;

1113 
u32
 
g
 = (
cﬁ‹
 >> 8) & 0xFF;

1114 
u32
 
b
 = (
cﬁ‹
 >> 16) & 0xFF;

1115 
u32
 
cﬁ‹_16bµ
 = (
r
 >> 3Ë| ((
g
 >> 3Ë<< 5Ë| ((
b
 >> 3) << 10);

1117 
u16
 *
vøm_±r
 = 
psx_gpu
->
vøm
 + 
x
 + (
y
 * 1024);

1118 
u32
 
døw_x
, 
døw_y
;

1120 
døw_y
 = 0; døw_y < 
height
; draw_y++)

1122 
døw_x
 = 0; døw_x < 
width
; draw_x++)

1124 
vøm_±r
[
døw_x
] = 
cﬁ‹_16bµ
;

1127 
vøm_±r
 += 1024;

1129 
	}
}

1131 
	$ªndî_block_c›y
(
psx_gpu_°ru˘
 *
psx_gpu
, 
u16
 *
sour˚
, 
u32
 
x
, u32 
y
,

1132 
u32
 
width
, u32 
height
, u32 
pôch
)

1134 
u16
 *
vøm_±r
 = 
psx_gpu
->
vøm
 + 
x
 + (
y
 * 1024);

1135 
u32
 
døw_x
, 
døw_y
;

1137 
døw_y
 = 0; døw_y < 
height
; draw_y++)

1139 
døw_x
 = 0; døw_x < 
width
; draw_x++)

1141 
vøm_±r
[
døw_x
] = 
sour˚
[draw_x];

1144 
sour˚
 +
pôch
;

1145 
vøm_±r
 += 1024;

1147 
	}
}

1149 
	$ªndî_block_move
(
psx_gpu_°ru˘
 *
psx_gpu
, 
u32
 
sour˚_x
, u32 
sour˚_y
,

1150 
u32
 
de°_x
, u32 
de°_y
, u32 
width
, u32 
height
)

1152 
	`ªndî_block_c›y
(
psx_gpu
,Ösx_gpu->
vøm
 + 
sour˚_x
 + (
sour˚_y
 * 1024),

1153 
de°_x
, 
de°_y
, 
width
, 
height
, 1024);

1154 
	}
}

1156 
	$öôülize_psx_gpu
(
psx_gpu_°ru˘
 *
psx_gpu
)

1158 
psx_gpu
->
pixñ_cou¡_mode
 = 0;

1159 
psx_gpu
->
pixñ_com∑ª_mode
 = 0;

1161 
psx_gpu
->
vøm_pixñ_cou¡s_a
 = 
	`mÆloc
((
u8
) * 1024 * 512);

1162 
psx_gpu
->
vøm_pixñ_cou¡s_b
 = 
	`mÆloc
((
u8
) * 1024 * 512);

1163 
	`mem£t
(
psx_gpu
->
vøm_pixñ_cou¡s_a
, 0, (
u8
) * 1024 * 512);

1164 
	`mem£t
(
psx_gpu
->
vøm_pixñ_cou¡s_b
, 0, (
u8
) * 1024 * 512);

1165 
psx_gpu
->
com∑ª_vøm
 = 
	`mÆloc
((
u16
) * 1024 * 512);

1166 
	}
}

	@plugins/gpu_neon/psx_gpu/vector_ops.h

15 #i‚de‡
VECTOR_OPS


16 
	#VECTOR_OPS


	)

18 
	#buûd_ve˘‹_ty≥_∑ú
(
sign
, 
size
, 
cou¡
, 
cou¡_x2
) \

21 
sign
##
size
 
e
[
cou¡
]; \

22 } 
	tvec_
##
	tcou¡
##
	tx
##
	tsize
##
	tsign
; \

28 
sign
##
size
 
e
[
cou¡_x2
]; \

31 
vec_
##
cou¡
##
x
##
size
##
sign
 
low
; \

32 
vec_
##
cou¡
##
x
##
size
##
sign
 
high
; \

35 } 
	tvec_
##
	tcou¡_x2
##
	tx
##
	tsize
##
	tsign
 \

36 

	)

37 
	tbuûd_ve˘‹_ty≥s
(
	tsign
) \

38 
	tbuûd_ve˘‹_ty≥_∑ú
(
	tsign
, 8, 8, 16); \

39 
	`buûd_ve˘‹_ty≥_∑ú
(
sign
, 16, 4, 8); \

40 
	`buûd_ve˘‹_ty≥_∑ú
(
sign
, 32, 2, 4); \

41 
	`buûd_ve˘‹_ty≥_∑ú
(
sign
, 64, 1, 2) \

42 

	)

43 
buûd_ve˘‹_ty≥s
(
u
);

44 
buûd_ve˘‹_ty≥s
(
s
);

47 
	#f‹óch_ñemít
(
ôî©i⁄s
, 
›î©i⁄
) \

49 
u32
 
_i
; \

50 
_i
 = 0; _ò< 
ôî©i⁄s
; _i++) \

52 
›î©i⁄
; \

55 

	)

56 
	#lﬂd_64b
(
de°
, 
sour˚
) \

57 *((
u64
 *)(
de°
).
e
Ë*((u64 *)(
sour˚
)) \

58 

	)

59 
	#lﬂd_128b
(
de°
, 
sour˚
) \

60 *((
u64
 *)(
de°
).
e
Ë*((u64 *)(
sour˚
)); \

61 *((
u64
 *)(
de°
).
e
 + 1Ë*(((u64 *)(
sour˚
)) + 1) \

62 

	)

63 
	#lﬂd_8x16b
(
de°
, 
sour˚
) \

64 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = ((
u16
 *)(
sour˚
))[_i]) \

65 

	)

66 
	#°‹e_64b
(
sour˚
, 
de°
) \

67 *((
u64
 *)(
de°
)Ë*((u64 *)(
sour˚
).
e
) \

68 

	)

69 
	#°‹e_128b
(
sour˚
, 
de°
) \

70 *((
u64
 *)(
de°
)Ë*((u64 *)(
sour˚
).
e
); \

71 *(((
u64
 *)(
de°
)Ë+ 1Ë*((u64 *)(
sour˚
).
e
 + 1) \

72 

	)

73 
	#°‹e_8x16b
(
sour˚
, 
de°
) \

74 
	`f‹óch_ñemít
(8, ((
u16
 *)
de°
)[
_i
] = (
sour˚
).
e
[_i]) \

75 

	)

77 
	#•lô_8x16b
(
de°
, 
sour˚
) \

78 
	`f‹óch_ñemít
(8, \

80 (
de°
).
e
[
_i
 * 2] = (
sour˚
).e[_i]; \

81 (
de°
).
e
[(
_i
 * 2Ë+ 1] = (
sour˚
).e[_i] >> 8; \

83 

	)

84 
	#mîge_16x8b
(
de°
, 
sour˚
) \

85 
	`f‹óch_ñemít
(8, \

86 (
de°
).
e
[
_i
] = (
sour˚
).e[_i * 2] | ((source).e[(_i * 2) + 1] << 8)) \

87 

	)

88 
	#ve˘‹_ˇ°
(
vec_to
, 
sour˚
) \

89 (*((vﬁ©ûê
vec_to
 *)(&(
sour˚
)))) \

90 

	)

91 
	#ve˘‹_ˇ°_high
(
vec_to
, 
sour˚
) \

92 (*((vﬁ©ûê
vec_to
 *)((
u8
 *)
sour˚
.
e
 + ((source.e) / 2)))) \

93 

	)

95 
	#dup_8x8b
(
de°
, 
vÆue
) \

96 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = 
vÆue
) \

97 

	)

98 
	#dup_16x8b
(
de°
, 
vÆue
) \

99 
	`f‹óch_ñemít
(16, (
de°
).
e
[
_i
] = 
vÆue
) \

100 

	)

101 
	#dup_4x16b
(
de°
, 
vÆue
) \

102 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] = 
vÆue
) \

103 

	)

104 
	#dup_8x16b
(
de°
, 
vÆue
) \

105 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = 
vÆue
) \

106 

	)

107 
	#dup_2x32b
(
de°
, 
vÆue
) \

108 
	`f‹óch_ñemít
(2, (
de°
).
e
[
_i
] = 
vÆue
) \

109 

	)

110 
	#dup_4x32b
(
de°
, 
vÆue
) \

111 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] = 
vÆue
) \

112 

	)

113 
	#shr_«ºow_8x16b
(
de°
, 
sour˚
, 
shi·
) \

114 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = (
u16
)(
sour˚
).e[_i] >> (
shi·
)) \

115 

	)

116 
	#shr_«ºow_2x64b
(
de°
, 
sour˚
, 
shi·
) \

117 
	`f‹óch_ñemít
(2, (
de°
).
e
[
_i
] = (
sour˚
).e[_i] >> (
shi·
)) \

118 

	)

119 
	#shr_8x8b
(
de°
, 
sour˚
, 
shi·
) \

120 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = (
u8
)(
sour˚
).e[_i] >> (
shi·
)) \

121 

	)

122 
	#shl_8x8b
(
de°
, 
sour˚
, 
shi·
) \

123 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = (
sour˚
).e[_i] << (
shi·
)) \

124 

	)

125 
	#shr_8x16b
(
de°
, 
sour˚
, 
shi·
) \

126 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = (
u16
)(
sour˚
).e[_i] >> (
shi·
)) \

127 

	)

128 
	#shr_2x32b
(
de°
, 
sour˚
, 
shi·
) \

129 
	`f‹óch_ñemít
(2, (
de°
).
e
[
_i
] = (
u32
)(
sour˚
).e[_i] >> (
shi·
)) \

130 

	)

131 
	#shr_4x16b
(
de°
, 
sour˚
, 
shi·
) \

132 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] = (
sour˚
).e[_i] >> (
shi·
)) \

133 

	)

134 
	#shl_4x16b
(
de°
, 
sour˚
, 
shi·
) \

135 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] = (
u32
)(
sour˚
).e[_i] << (
shi·
)) \

136 

	)

137 
	#shr_4x32b
(
de°
, 
sour˚
, 
shi·
) \

138 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] = (
u32
)(
sour˚
).e[_i] >> (
shi·
)) \

139 

	)

140 
	#shr_«ºow_4x32b
(
de°
, 
sour˚
, 
shi·
) \

141 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] = (
u32
)(
sour˚
).e[_i] >> (
shi·
)) \

142 

	)

143 
	#shl_8x16b
(
de°
, 
sour˚
, 
shi·
) \

144 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = (
sour˚
).e[_i] << (
shi·
)) \

145 

	)

146 
	#shl_4x32b
(
de°
, 
sour˚
, 
shi·
) \

147 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] = (
sour˚
).e[_i] << (
shi·
)) \

148 

	)

149 
	#shl_2x32b
(
de°
, 
sour˚
, 
shi·
) \

150 
	`f‹óch_ñemít
(2, (
de°
).
e
[
_i
] = (
sour˚
).e[_i] << (
shi·
)) \

151 

	)

152 
	#shl_1x64b
(
de°
, 
sour˚
, 
shi·
) \

153 ((
de°
).
e
[0] = (
sour˚
).e[0] << (
shi·
)) \

154 

	)

155 
	#shl_2x64b
(
de°
, 
sour˚
, 
shi·
) \

156 
	`f‹óch_ñemít
(2, (
de°
).
e
[
_i
] = (
sour˚
).e[_i] << (
shi·
)) \

157 

	)

158 
	#shl_v¨übÀ_2x64b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

159 
	`f‹óch_ñemít
(2, \

160 (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] << ((
sour˚_b
).e[_i] & 0xFF)) \

161 

	)

162 
	#shl_v¨übÀ_8x16b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

163 
	`f‹óch_ñemít
(8, \

164 (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] << ((
sour˚_b
).e[_i] & 0xFF)) \

165 

	)

166 
	#shl_v¨übÀ_4x16b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

167 
	`f‹óch_ñemít
(4, \

168 (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] << ((
sour˚_b
).e[_i] & 0xFF)) \

169 

	)

170 
	#shr_1x64b
(
de°
, 
sour˚
, 
shi·
) \

171 ((
de°
).
e
[0] = (
sour˚
).e[0] >> (
shi·
)) \

172 

	)

173 
	#shl_l⁄g_8x8b
(
de°
, 
sour˚
, 
shi·
) \

174 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = (
sour˚
).e[_i] << (
shi·
)) \

175 

	)

176 
	#shl_l⁄g_4x16b
(
de°
, 
sour˚
, 
shi·
) \

177 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] = (
sour˚
).e[_i] << (
shi·
)) \

178 

	)

179 
	#shrq_«ºow_sig√d_8x16b
(
de°
, 
sour˚
, 
shi·
) \

180 
	`f‹óch_ñemít
(8, \

182 
s32
 
ªsu…
 = ((
s16
)(
sour˚
).
e
[
_i
]Ë>> 
shi·
; \

183 if(
ªsu…
 < 0) \

184 
ªsu…
 = 0; \

185 if(
ªsu…
 > 0xFF) \

186 
ªsu…
 = 0xFF; \

187 (
de°
).
e
[
_i
] = 
ªsu…
; \

189 

	)

190 
	#shl_ªg_4x32b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

191 
	`f‹óch_ñemít
(4, \

193 
s8
 
shi·
 = (
sour˚_b
).
e
[
_i
]; \

194 if(
shi·
 < 0) \

195 
de°
.
e
[
_i
] = (
sour˚_a
).e[_i] >> (-
shi·
); \

197 
de°
.
e
[
_i
] = (
sour˚_a
).e[_i] << 
shi·
; \

199 

	)

200 
	#shl_ªg_2x32b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

201 
	`f‹óch_ñemít
(2, \

203 
s8
 
shi·
 = (
sour˚_b
).
e
[
_i
]; \

204 if(
shi·
 < 0) \

205 
de°
.
e
[
_i
] = (
sour˚_a
).e[_i] >> (-
shi·
); \

207 
de°
.
e
[
_i
] = (
sour˚_a
).e[_i] << 
shi·
; \

209 

	)

210 
	#shl_ªg_2x64b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

211 
	`f‹óch_ñemít
(2, \

213 
s8
 
shi·
 = (
sour˚_b
).
e
[
_i
]; \

214 if(
shi·
 < 0) \

215 
de°
.
e
[
_i
] = (
sour˚_a
).e[_i] >> (-
shi·
); \

217 
de°
.
e
[
_i
] = (
sour˚_a
).e[_i] << 
shi·
; \

219 

	)

221 
	#§i_8x8b
(
de°
, 
sour˚
, 
shi·
) \

222 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = ((de°).e[_i] & ~(0xFF >> (
shi·
))) | \

223 ((
u8
)(
sour˚
).
e
[
_i
] >> (
shi·
))) \

224 

	)

225 
	#¶i_8x8b
(
de°
, 
sour˚
, 
shi·
) \

226 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = ((de°).e[_i] & ~(0xFF << (
shi·
))) | \

227 ((
sour˚
).
e
[
_i
] << (
shi·
))) \

228 

	)

231 
	#mov_«ºow_8x16b
(
de°
, 
sour˚
) \

232 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = (
sour˚
).e[_i]) \

233 

	)

234 
	#mov_«ºow_4x32b
(
de°
, 
sour˚
) \

235 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] = (
sour˚
).e[_i]) \

236 

	)

237 
	#mov_«ºow_2x64b
(
de°
, 
sour˚
) \

238 
	`f‹óch_ñemít
(2, (
de°
).
e
[
_i
] = (
sour˚
).e[_i]) \

239 

	)

240 
	#mov_wide_8x8b
(
de°
, 
sour˚
) \

241 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = (
sour˚
).e[_i]) \

242 

	)

243 
	#mov_wide_2x32b
(
de°
, 
sour˚
) \

244 
	`f‹óch_ñemít
(2, (
de°
).
e
[
_i
] = (
sour˚
).e[_i]) \

245 

	)

246 
	#mvn_4x16b
(
de°
, 
sour˚
) \

247 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] = ~((
sour˚
).e[_i])) \

248 

	)

249 
	#add_4x16b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

250 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] + (
sour˚_b
).e[_i]) \

251 

	)

252 
	#add_4x32b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

253 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] + (
sour˚_b
).e[_i]) \

254 

	)

255 
	#add_2x32b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

256 
	`f‹óch_ñemít
(2, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] + (
sour˚_b
).e[_i]) \

257 

	)

258 
	#add_8x16b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

259 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] + (
sour˚_b
).e[_i]) \

260 

	)

261 
	#add_16x8b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

262 
	`f‹óch_ñemít
(16, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] + (
sour˚_b
).e[_i]) \

263 

	)

264 
	#add_8x8b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

265 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] + (
sour˚_b
).e[_i]) \

266 

	)

267 
	#add_1x64b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

268 (
de°
).
e
[0] = (
sour˚_a
).e[0] + (
sour˚_b
).e[0] \

269 

	)

270 
	#add_2x64b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

271 
	`f‹óch_ñemít
(2, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] + (
sour˚_b
).e[_i]) \

272 

	)

273 
	#add_high_«ºow_2x64b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

274 
	`f‹óch_ñemít
(2, \

275 ((
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] + (
sour˚_b
).e[_i]) >> 32) \

276 

	)

277 
	#add_high_«ºow_4x32b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

278 
	`f‹óch_ñemít
(4, \

279 ((
de°
).
e
[
_i
] = ((
sour˚_a
).e[_i] + (
sour˚_b
).e[_i]) >> 16)) \

280 

	)

281 
	#sub_4x16b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

282 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] - (
sour˚_b
).e[_i]) \

283 

	)

284 
	#sub_4x32b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

285 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] - (
sour˚_b
).e[_i]) \

286 

	)

287 
	#sub_2x32b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

288 
	`f‹óch_ñemít
(2, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] - (
sour˚_b
).e[_i]) \

289 

	)

290 
	#sub_wide_8x8b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

291 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] - (
sour˚_b
).e[_i]) \

292 

	)

293 
	#add_wide_8x8b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

294 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] + (
sour˚_b
).e[_i]) \

295 

	)

296 
	#add_wide_2x32b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

297 
	`f‹óch_ñemít
(2, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] + (
sour˚_b
).e[_i]) \

298 

	)

299 
	#addq_8x8b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

300 
	`f‹óch_ñemít
(8, \

302 
u32
 
ªsu…
 = (
sour˚_a
).
e
[
_i
] + (
sour˚_b
).e[_i]; \

303 if(
ªsu…
 > 0xFF) \

304 
ªsu…
 = 0xFF; \

305 (
de°
).
e
[
_i
] = 
ªsu…
; \

307 

	)

308 
	#subq_8x8b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

309 
	`f‹óch_ñemít
(8, \

311 
u32
 
ªsu…
 = (
sour˚_a
).
e
[
_i
] - (
sour˚_b
).e[_i]; \

312 if(
ªsu…
 > 0xFF) \

313 
ªsu…
 = 0; \

314 (
de°
).
e
[
_i
] = 
ªsu…
; \

316 

	)

317 
	#subs_l⁄g_8x8b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

318 
	`subs_8x8b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

319 

	)

320 
	#subs_16x8b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

321 
	`f‹óch_ñemít
(16, \

323 
u32
 
ªsu…
 = (
sour˚_a
).
e
[
_i
] - (
sour˚_b
).e[_i]; \

324 if(
ªsu…
 > 0xFF) \

325 
ªsu…
 = 0; \

326 (
de°
).
e
[
_i
] = 
ªsu…
; \

328 

	)

329 
	#subs_8x16b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

330 
	`f‹óch_ñemít
(8, \

332 
s32
 
ªsu…
 = (
sour˚_a
).
e
[
_i
] - (
sour˚_b
).e[_i]; \

333 if(
ªsu…
 < 0) \

334 
ªsu…
 = 0; \

336 (
de°
).
e
[
_i
] = 
ªsu…
; \

338 

	)

339 
	#sub_8x16b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

340 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] - (
sour˚_b
).e[_i]) \

341 

	)

342 
	#sub_16x8b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

343 
	`f‹óch_ñemít
(16, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] - (
sour˚_b
).e[_i]) \

344 

	)

345 
	#‹n_8x16b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

346 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] | ~((
sour˚_b
).e[_i])) \

347 

	)

348 
	#™d_4x16b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

349 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] & (
sour˚_b
).e[_i]) \

350 

	)

351 
	#™d_8x16b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

352 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] & (
sour˚_b
).e[_i]) \

353 

	)

354 
	#™d_4x32b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

355 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] & (
sour˚_b
).e[_i]) \

356 

	)

357 
	#™d_16x8b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

358 
	`f‹óch_ñemít
(16, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] & (
sour˚_b
).e[_i]) \

359 

	)

360 
	#™d_8x8b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

361 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] & (
sour˚_b
).e[_i]) \

362 

	)

363 
	#™d_2x32b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

364 
	`f‹óch_ñemít
(2, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] & (
sour˚_b
).e[_i]) \

365 

	)

366 
	#bic_8x8b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

367 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] & ~((
sour˚_b
).e[_i])) \

368 

	)

369 
	#bic_8x16b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

370 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] & ~((
sour˚_b
).e[_i])) \

371 

	)

372 
	#bic_immedüã_4x16b
(
de°
, 
vÆue
) \

373 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] = (de°).e[_i] & ~(
vÆue
)) \

374 

	)

375 
	#bic_immedüã_8x16b
(
de°
, 
vÆue
) \

376 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = (de°).e[_i] & ~(
vÆue
)) \

377 

	)

378 
	#‹_8x16b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

379 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] | (
sour˚_b
).e[_i]) \

380 

	)

381 
	#‹_immedüã_8x16b
(
de°
, 
sour˚_a
, 
vÆue
) \

382 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] | (
vÆue
)) \

383 

	)

384 
	#e‹_8x16b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

385 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] ^ (
sour˚_b
).e[_i]) \

386 

	)

387 
	#e‹_4x32b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

388 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] ^ (
sour˚_b
).e[_i]) \

389 

	)

390 
	#e‹_2x32b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

391 
	`f‹óch_ñemít
(2, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] ^ (
sour˚_b
).e[_i]) \

392 

	)

393 
	#zù_8x16b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

394 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = \

395 (
u8
)(
sour˚_a
).
e
[
_i
] | ((u8)(
sour˚_b
).e[_i] << 8)) \

396 

	)

397 
	#zù_4x32b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

398 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] = \

399 (
u16
)(
sour˚_a
).
e
[
_i
] | ((u16)(
sour˚_b
).e[_i] << 16)) \

400 

	)

401 
	#zù_2x64b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

402 
	`f‹óch_ñemít
(2, (
de°
).
e
[
_i
] = \

403 (
u64
)(
sour˚_a
).
e
[
_i
] | ((u64)(
sour˚_b
).e[_i] << 32)) \

404 

	)

405 
	#unzù_8x8b
(
de°_a
, 
de°_b
, 
sour˚
) \

406 
	`f‹óch_ñemít
(8, \

408 (
de°_a
).
e
[
_i
] = (
sour˚
).e[_i]; \

409 (
de°_b
).
e
[
_i
] = ((
sour˚
).e[_i]) >> 8; \

411 

	)

412 
	#unzù_16x8b
(
de°_a
, 
de°_b
, 
sour˚_a
, 
sour˚_b
) \

413 
	`f‹óch_ñemít
(8, \

415 (
de°_a
).
e
[
_i
] = (
sour˚_a
).e[_i]; \

416 (
de°_b
).
e
[
_i
] = (
sour˚_a
).e[_i] >> 8; \

418 
	`f‹óch_ñemít
(8, \

420 (
de°_a
).
e
[
_i
 + 8] = (
sour˚_b
).e[_i]; \

421 (
de°_b
).
e
[
_i
 + 8] = (
sour˚_b
).e[_i] >> 8; \

423 

	)

424 
	#tbl_16
(
de°
, 
ödexes
, 
èbÀ
) \

425 
	`f‹óch_ñemít
(8, \

427 
u32
 
ödex
 = 
ödexes
.
e
[
_i
]; \

428 if(
ödex
 < 16) \

429 (
de°
).
e
[
_i
] = 
èbÀ
.e[
ödex
]; \

431 (
de°
).
e
[
_i
] = 0; \

433 

	)

434 
	#cm≥qz_8x16b
(
de°
, 
sour˚
) \

435 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = ~(((
sour˚
).e[_i] == 0) - 1)) \

436 

	)

437 
	#cm∂tz_8x16b
(
de°
, 
sour˚
) \

438 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = ((
s16
)(
sour˚
).e[_i] >> 15)) \

439 

	)

440 
	#cm∂tz_4x32b
(
de°
, 
sour˚
) \

441 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] = ((
s32
)(
sour˚
).e[_i] >> 31)) \

442 

	)

443 
	#cm∂tz_2x32b
(
de°
, 
sour˚
) \

444 
	`f‹óch_ñemít
(2, (
de°
).
e
[
_i
] = ((
s32
)(
sour˚
).e[_i] >> 31)) \

445 

	)

446 
	#cm∂ã_4x16b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

447 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] = ~((
sour˚_a
.e[_i] <
sour˚_b
.e[_i]) - 1)) \

448 

	)

449 
	#cm∂t_4x16b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

450 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] = ~((
sour˚_a
.e[_i] < 
sour˚_b
.e[_i]) - 1)) \

451 

	)

452 
	#cmpgt_4x16b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

453 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] = ~((
sour˚_a
.e[_i] > 
sour˚_b
.e[_i]) - 1)) \

454 

	)

455 
	#t°_8x16b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

456 
	`f‹óch_ñemít
(8, \

457 (
de°
).
e
[
_i
] = ~(((
sour˚_a
.e[_i] & 
sour˚_b
.e[_i]) != 0) - 1)) \

458 

	)

459 
	#™di_8x8b
(
de°
, 
sour˚_a
, 
vÆue
) \

460 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] & 
vÆue
) \

461 

	)

462 
	#avîage_8x16b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

463 
	`f‹óch_ñemít
(8, \

464 (
de°
).
e
[
_i
] = ((
sour˚_a
).e[_i] + (
sour˚_b
).e[_i]) >> 1) \

465 

	)

467 
	#mul_8x8b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

468 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] * (
sour˚_b
).e[_i]) \

469 

	)

470 
	#mul_8x16b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

471 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] * (
sour˚_b
).e[_i]) \

472 

	)

473 
	#mul_2x32b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

474 
	`f‹óch_ñemít
(2, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] * (
sour˚_b
).e[_i]) \

475 

	)

476 
	#mul_4x32b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

477 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] * (
sour˚_b
).e[_i]) \

478 

	)

479 
	#mul_l⁄g_8x8b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

480 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] * (
sour˚_b
).e[_i]) \

481 

	)

482 
	#mul_l⁄g_4x16b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

483 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] * (
sour˚_b
).e[_i]) \

484 

	)

485 
	#mul_l⁄g_2x32b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

486 
	`f‹óch_ñemít
(2, \

487 (
de°
).
e
[
_i
] = (
sour˚_a
).e[_i] * (
s64
)((
sour˚_b
).e[_i])) \

488 

	)

489 
	#mul_sˇœr_2x32b
(
de°
, 
sour˚
, 
vÆue
) \

490 
	`f‹óch_ñemít
(2, (
de°
).
e
[
_i
] = (
sour˚
).e[_i] * 
vÆue
) \

491 

	)

492 
	#mul_sˇœr_l⁄g_8x16b
(
de°
, 
sour˚
, 
vÆue
) \

493 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] = (
sour˚
).e[_i] * 
vÆue
) \

494 

	)

495 
	#mul_sˇœr_l⁄g_2x32b
(
de°
, 
sour˚
, 
vÆue
) \

496 
	`f‹óch_ñemít
(2, (
de°
).
e
[
_i
] = (
sour˚
).e[_i] * 
vÆue
) \

497 

	)

498 
	#mœ_2x32b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

499 
	`f‹óch_ñemít
(2, (
de°
).
e
[
_i
] +(
sour˚_a
).e[_i] * (
sour˚_b
).e[_i]) \

500 

	)

501 
	#mœ_4x32b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

502 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] +(
sour˚_a
).e[_i] * (
sour˚_b
).e[_i]) \

503 

	)

504 
	#mœ_sˇœr_l⁄g_2x32b
(
de°
, 
sour˚
, 
vÆue
) \

505 
	`f‹óch_ñemít
(2, (
de°
).
e
[
_i
] +(
sour˚
).e[_i] * 
vÆue
) \

506 

	)

507 
	#mœ_l⁄g_8x8b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

508 
	`f‹óch_ñemít
(8, (
de°
).
e
[
_i
] +(
sour˚_a
).e[_i] * (
sour˚_b
).e[_i]) \

509 

	)

510 
	#mœ_l⁄g_2x32b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

511 
	`f‹óch_ñemít
(2, (
de°
).
e
[
_i
] +(
sour˚_a
).e[_i] * (
s64
)(
sour˚_b
).e[_i]) \

512 

	)

513 
	#mœ_sˇœr_4x32b
(
de°
, 
sour˚
, 
vÆue
) \

514 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] +(
sour˚
).e[_i] * 
vÆue
) \

515 

	)

516 
	#mœ_sˇœr_2x32b
(
de°
, 
sour˚
, 
vÆue
) \

517 
	`f‹óch_ñemít
(2, (
de°
).
e
[
_i
] +(
sour˚
).e[_i] * 
vÆue
) \

518 

	)

519 
	#mls_sˇœr_4x32b
(
de°
, 
sour˚
, 
vÆue
) \

520 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] -(
sour˚
).e[_i] * 
vÆue
) \

521 

	)

522 
	#mls_sˇœr_2x32b
(
de°
, 
sour˚
, 
vÆue
) \

523 
	`f‹óch_ñemít
(2, (
de°
).
e
[
_i
] -(
sour˚
).e[_i] * 
vÆue
) \

524 

	)

525 
	#mls_sˇœr_l⁄g_2x32b
(
de°
, 
sour˚
, 
vÆue
) \

526 
	`f‹óch_ñemít
(2, (
de°
).
e
[
_i
] -(
sour˚
).e[_i] * 
vÆue
) \

527 

	)

528 
	#ªv_2x32b
(
de°
, 
sour˚
) \

530 
u32
 
tmp
 = 
sour˚
.
e
[1]; \

531 (
de°
).
e
[1] = 
sour˚
.e[0]; \

532 (
de°
).
e
[0] = 
tmp
; \

534 

	)

535 
	#abs_4x32b
(
de°
, 
sour˚
) \

536 
	`f‹óch_ñemít
(4, (
de°
).
e
[
_i
] = 
	`abs
(
sour˚
.e[_i])) \

537 

	)

538 
	#abs_2x32b
(
de°
, 
sour˚
) \

539 
	`f‹óch_ñemít
(2, (
de°
).
e
[
_i
] = 
	`abs
(
sour˚
.e[_i])) \

540 

	)

541 
	#√g_2x32b
(
de°
, 
sour˚
) \

542 
	`f‹óch_ñemít
(2, (
de°
).
e
[
_i
] = -((
sour˚
).e[_i])) \

543 

	)

545 
	#shrq_«ºow_8x16b
(
de°
, 
sour˚
, 
shi·
) \

546 
	`f‹óch_ñemít
(8, \

548 
u32
 
ªsu…
 = ((
sour˚
).
e
[
_i
]Ë>> 
shi·
; \

549 if(
ªsu…
 > 0xFF) \

550 
ªsu…
 = 0xFF; \

551 (
de°
).
e
[
_i
] = 
ªsu…
; \

553 

	)

554 
	#mö_8x16b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

555 
	`f‹óch_ñemít
(8, \

557 
s32
 
ªsu…
 = (
sour˚_a
).
e
[
_i
]; \

558 if((
sour˚_b
).
e
[
_i
] < 
ªsu…
) \

559 
ªsu…
 = (
sour˚_b
).
e
[
_i
]; \

560 (
de°
).
e
[
_i
] = 
ªsu…
; \

562 

	)

563 
	#mö_8x8b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

564 
	`f‹óch_ñemít
(8, \

566 
u32
 
ªsu…
 = (
sour˚_a
).
e
[
_i
]; \

567 if((
sour˚_b
).
e
[
_i
] < 
ªsu…
) \

568 
ªsu…
 = (
sour˚_b
).
e
[
_i
]; \

569 (
de°
).
e
[
_i
] = 
ªsu…
; \

571 

	)

572 
	#mö_16x8b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

573 
	`f‹óch_ñemít
(16, \

575 
u32
 
ªsu…
 = (
sour˚_a
).
e
[
_i
]; \

576 if((
sour˚_b
).
e
[
_i
] < 
ªsu…
) \

577 
ªsu…
 = (
sour˚_b
).
e
[
_i
]; \

578 (
de°
).
e
[
_i
] = 
ªsu…
; \

580 

	)

581 
	#max_8x16b
(
de°
, 
sour˚_a
, 
sour˚_b
) \

582 
	`f‹óch_ñemít
(8, \

584 
s32
 
ªsu…
 = (
sour˚_a
).
e
[
_i
]; \

585 if((
sour˚_b
).
e
[
_i
] > 
ªsu…
) \

586 
ªsu…
 = (
sour˚_b
).
e
[
_i
]; \

587 (
de°
).
e
[
_i
] = 
ªsu…
; \

589 

	)

590 
	#b¶_8x16b
(
de°_mask
, 
sour˚_a
, 
sour˚_b
) \

591 
	`f‹óch_ñemít
(8, 
de°_mask
.
e
[
_i
] = ((
sour˚_a
).e[_i] & dest_mask.e[_i]) | \

592 ((
sour˚_b
).
e
[
_i
] & ~(
de°_mask
.e[_i]))) \

593 

	)

594 
	#bif_8x16b
(
de°
, 
sour˚
, 
mask
) \

595 
	`f‹óch_ñemít
(8, 
de°
.
e
[
_i
] = ((
sour˚
).e[_i] & ~(
mask
.e[_i])) | \

596 ((
de°
).
e
[
_i
] & 
mask
.e[_i])) \

597 

	)

598 
	#b¶_4x32b
(
de°_mask
, 
sour˚_a
, 
sour˚_b
) \

599 
	`f‹óch_ñemít
(4, 
de°_mask
.
e
[
_i
] = ((
sour˚_a
).e[_i] & dest_mask.e[_i]) | \

600 ((
sour˚_b
).
e
[
_i
] & ~(
de°_mask
.e[_i]))) \

601 

	)

602 
	#bô_4x16b
(
de°
, 
sour˚
, 
mask
) \

603 
	`f‹óch_ñemít
(4, 
de°
.
e
[
_i
] = ((
sour˚
).e[_i] & 
mask
.e[_i]) | \

604 ((
de°
).
e
[
_i
] & ~(
mask
.e[_i]))) \

605 

	)

	@plugins/gpu_neon/psx_gpu_if.c

11 
	~<°dio.h
>

12 
	~<sys/mm™.h
>

14 c⁄° 
cmd_Àngths
[256];

15 
	#comm™d_Àngths
 
cmd_Àngths


	)

17 *
	gex_ªgs
;

18 
	göôülized
;

20 
	#PCSX


	)

21 
	#SET_Ex
(
r
, 
v
) \

22 
ex_ªgs
[
r
] = 
v


	)

24 
	~"psx_gpu/psx_gpu.c
"

25 
	~"psx_gpu/psx_gpu_∑r£.c
"

26 
	~"../gpulib/gpu.h
"

28 
psx_gpu_°ru˘
 
egpu
 
__©åibuã__
((
Æig√d
(256)));

30 
	$do_cmd_li°
(
uöt32_t
 *
li°
, 
cou¡
, *
œ°_cmd
)

32 
ªt
;

34 i‡(
gpu
.
°©e
.
íh™˚mít_a˘ive
)

35 
ªt
 = 
	`gpu_∑r£_íh™˚d
(&
egpu
, 
li°
, 
cou¡
 * 4, (
u32
 *)
œ°_cmd
);

37 
ªt
 = 
	`gpu_∑r£
(&
egpu
, 
li°
, 
cou¡
 * 4, (
u32
 *)
œ°_cmd
);

39 
ex_ªgs
[1] &= ~0x1ff;

40 
ex_ªgs
[1] |
egpu
.
ãxtuª_£âögs
 & 0x1ff;

41  
ªt
;

42 
	}
}

44 
	#ENHANCEMENT_BUF_SIZE
 (1024 * 1024 * 2 * 4 + 4096 * 2)

	)

46 
uöt16_t
 *
	$gë_íh™˚mít_bu„r
(*
x
, *
y
, *
w
, *
h
,

47 *
vøm_h
)

49 
uöt16_t
 *
ªt
 = 
	`£À˘_íh™˚mít_buf_±r
(&
egpu
, *
x
);

51 *
x
 *= 2;

52 *
y
 *= 2;

53 *
w
 = *w * 2;

54 *
h
 = *h * 2;

55 *
vøm_h
 = 1024;

56  
ªt
;

57 
	}
}

59 
	$m≠_íh™˚mít_buf„r
()

64 
egpu
.
íh™˚mít_buf_±r
 = 
gpu
.
	`mm≠
(
ENHANCEMENT_BUF_SIZE
);

65 i‡(
egpu
.
íh™˚mít_buf_±r
 =
NULL
) {

66 
	`Ârötf
(
°dîr
, "failedÅo mapÉnhancement buffer\n");

67 
gpu
.
gë_íh™˚mít_bu„r
 = 
NULL
;

70 
egpu
.
íh™˚mít_buf_±r
 += 4096 / 2;

71 
gpu
.
gë_íh™˚mít_bu„r
 = get_enhancement_bufer;

73 
	}
}

75 
	$ªndîî_öô
()

77 i‡(
gpu
.
vøm
 !
NULL
) {

78 
	`öôülize_psx_gpu
(&
egpu
, 
gpu
.
vøm
);

79 
öôülized
 = 1;

82 i‡(
gpu
.
mm≠
 !
NULL
 && 
egpu
.
íh™˚mít_buf_±r
 == NULL)

83 
	`m≠_íh™˚mít_buf„r
();

85 
ex_ªgs
 = 
gpu
.ex_regs;

87 
	}
}

89 
	$ªndîî_föish
()

91 i‡(
egpu
.
íh™˚mít_buf_±r
 !
NULL
) {

92 
egpu
.
íh™˚mít_buf_±r
 -= 4096 / 2;

93 
gpu
.
	`munm≠
(
egpu
.
íh™˚mít_buf_±r
, 
ENHANCEMENT_BUF_SIZE
);

95 
egpu
.
íh™˚mít_buf_±r
 = 
NULL
;

96 
egpu
.
íh™˚mít_cuºít_buf_±r
 = 
NULL
;

97 
öôülized
 = 0;

98 
	}
}

100 
__©åibuã__
((
noölöe
)) 

101 
	$sync_íh™˚mít_buf„rs
(
x
, 
y
, 
w
, 
h
)

103 c⁄° 
°ï_x
 = 1024 / (
egpu
.
íh™˚mít_buf_by_x16
);

104 
u16
 *
§c
, *
d°
;

105 
w1
, 
fb_ödex
;

107 
w
 +
x
 & (
°ï_x
 - 1);

108 
x
 &~(
°ï_x
 - 1);

109 
w
 = (w + 
°ï_x
 - 1) & ~(step_x - 1);

110 i‡(
y
 + 
h
 > 512)

111 
h
 = 512 - 
y
;

113 
w
 > 0) {

114 
fb_ödex
 = 
egpu
.
íh™˚mít_buf_by_x16
[
x
 / 
°ï_x
];

115 
w1
 = 0; 
w
 > 0; w1++, w -
°ï_x
)

116 i‡(
fb_ödex
 !
egpu
.
íh™˚mít_buf_by_x16
[
x
 / 
°ï_x
 + 
w1
])

119 
§c
 = 
gpu
.
vøm
 + 
y
 * 1024 + 
x
;

120 
d°
 = 
	`£À˘_íh™˚mít_buf_±r
(&
egpu
, 
x
);

121 
d°
 +(
y
 * 1024 + 
x
) * 2;

122 
	`sˇÀ2x_tûes8
(
d°
, 
§c
, 
w1
 * 
°ï_x
 / 8, 
h
);

124 
x
 +
w1
 * 
°ï_x
;

126 
	}
}

128 
	$ªndîî_sync_ecmds
(
uöt32_t
 *
ecmds
)

130 
	`gpu_∑r£
(&
egpu
, 
ecmds
 + 1, 6 * 4, 
NULL
);

131 
	}
}

133 
	$ªndîî_upd©e_ˇches
(
x
, 
y
, 
w
, 
h
)

135 
	`upd©e_ãxtuª_ˇche_ªgi⁄
(&
egpu
, 
x
, 
y
, x + 
w
 - 1, y + 
h
 - 1);

136 i‡(
gpu
.
°©e
.
íh™˚mít_a˘ive
 && !gpu.
°©us
.
rgb24
)

137 
	`sync_íh™˚mít_buf„rs
(
x
, 
y
, 
w
, 
h
);

138 
	}
}

140 
	$ªndîî_Êush_queues
()

142 
	`Êush_ªndî_block_buf„r
(&
egpu
);

143 
	}
}

145 
	$ªndîî_£t_öãæa˚
(
íabÀ
, 
is_odd
)

147 
egpu
.
ªndî_mode
 &~(
RENDER_INTERLACE_ENABLED
|
RENDER_INTERLACE_ODD
);

148 i‡(
íabÀ
)

149 
egpu
.
ªndî_mode
 |
RENDER_INTERLACE_ENABLED
;

150 i‡(
is_odd
)

151 
egpu
.
ªndî_mode
 |
RENDER_INTERLACE_ODD
;

152 
	}
}

154 
	$ªndîî_nŸify_ªs_ch™ge
()

157 i‡(
egpu
.
íh™˚mít_x_thªshﬁd
 !
gpu
.
s¸ìn
.
hªs
)

159 
egpu
.
íh™˚mít_x_thªshﬁd
 = 
gpu
.
s¸ìn
.
hªs
;

160 
	`upd©e_íh™˚mít_buf_èbÀ_‰om_hªs
(&
egpu
);

162 
	}
}

164 
	~"../../‰⁄ãnd/∂ugö_lib.h
"

166 
	$ªndîî_£t_c⁄fig
(c⁄° 
ª¨med_cbs
 *
cbs
)

168 
íh™˚mít_was_⁄
;

170 
dißbÀ_maö_ªndî
 = 
cbs
->
gpu_√⁄
.
íh™˚mít_no_maö
;

171 i‡(
egpu
.
íh™˚mít_buf_±r
 !
NULL
 && 
cbs
->
gpu_√⁄
.
íh™˚mít_íabÀ


172 && !
íh™˚mít_was_⁄
)

174 
	`sync_íh™˚mít_buf„rs
(0, 0, 1024, 512);

176 
íh™˚mít_was_⁄
 = 
cbs
->
gpu_√⁄
.
íh™˚mít_íabÀ
;

178 i‡(!
öôülized
) {

179 
	`öôülize_psx_gpu
(&
egpu
, 
gpu
.
vøm
);

180 
öôülized
 = 1;

183 i‡(
gpu
.
mm≠
 !
NULL
 && 
egpu
.
íh™˚mít_buf_±r
 == NULL)

184 
	`m≠_íh™˚mít_buf„r
();

185 i‡(
cbs
->
∂_£t_gpu_ˇps
)

186 
cbs
->
	`∂_£t_gpu_ˇps
(
GPU_CAP_SUPPORTS_2X
);

187 
	}
}

	@plugins/gpu_unai/debug.h

	@plugins/gpu_unai/gpu.cpp

21 
	~"p‹t.h
"

22 
	~"gpu.h
"

23 
	~"¥ofûî.h
"

24 
	~"debug.h
"

26 
	gskùCou¡
 = 2;

27 
	gskCou¡
 = 0;

28 
	glöesI¡îœ˚
 = 0;

29 
	glöesI¡îœ˚_u£r
 = 0;

31 
boﬁ
 
	gisSkù
 = 
Ál£
;

32 
boﬁ
 
	gwasSkù
 = 
Ál£
;

33 
boﬁ
 
	gskùFøme
 = 
Ál£
;

34 
boﬁ
 
	gÆt_Âs
 = 
Ál£
;

35 
boﬁ
 
	gshow_Âs
 = 
Ál£
;

37 
boﬁ
 
	gisPAL
 = 
Ál£
;

38 
boﬁ
 
	g¥ogªssI¡îœ˚_Êag
 = 
Ál£
;

39 
boﬁ
 
	g¥ogªssI¡îœ˚
 = 
Ál£
;

40 
boﬁ
 
	g‰ameLimô
 = 
Ál£
;

42 
boﬁ
 
	glight
 = 
åue
;

43 
boﬁ
 
	gbÀnd
 = 
åue
;

44 
boﬁ
 
	gFømeToRód
 = 
Ál£
;

45 
boﬁ
 
	gFømeToWrôe
 = 
Ál£
;

46 
boﬁ
 
	gfb_dúty
 = 
Ál£
;

48 
boﬁ
 
	gíabÀAbbeyHack
 = 
Ál£
;

50 
u8
 
	gBLEND_MODE
;

51 
u8
 
	gTEXT_MODE
;

52 
u8
 
	gMaskög
;

54 
u16
 
	gPixñMSB
;

55 
u16
 
	gPixñD©a
;

63 
s32
 
	gpx
,
	gpy
;

64 
s32
 
	gx_íd
,
	gy_íd
;

65 
u16
* 
	gpvøm
;

67 
u32
 
	gGP0
;

68 
s32
 
	gPackëCou¡
;

69 
s32
 
	gPackëIndex
;

73 
u32
 
	gDi•œyAªa
 [6];

77 
u32
 
	gTextuªWödow
 [4];

78 
u32
 
	gDøwögAªa
 [4];

79 
u32
 
	gDøwögOff£t
 [2];

84 
u16
* 
	gTBA
;

85 
u16
* 
	gCBA
;

89 
s32
 
	gu4
, 
	gdu4
;

90 
s32
 
	gv4
, 
	gdv4
;

91 
s32
 
	gr4
, 
	gdr4
;

92 
s32
 
	gg4
, 
	gdg4
;

93 
s32
 
	gb4
, 
	gdb4
;

94 
u32
 
	glInc
;

95 
u32
 
	gtInc
, 
	gtMsk
;

97 
GPUPackë
 
	gPackëBuf„r
;

99 
u16
 
	gGPU_FømeBuf„r
[(
FRAME_BUFFER_SIZE
+512*1024)/2] 
__©åibuã__
((
Æig√d
(2048)));

100 
u32
 
	gGPU_GP1
;

104 
	~"gpu_ö√r.h
"

108 
	#GPU_RGB16
(
rgb
Ë(((‘gb)&0xF80000)>>9)|((‘gb)&0xF800)>>6)|((‘gb)&0xF8)>>3))

	)

110 
	#GPU_EXPANDSIGN
(
x
Ë(((
s32
)(x)<<21)>>21)

	)

112 
	#CHKMAX_X
 1024

	)

113 
	#CHKMAX_Y
 512

	)

115 
	#GPU_SWAP
(
a
,
b
,
t
Ë{—)=◊);◊)=(b);(b)=—);}

	)

119 
	~"gpu_ø°î_image.h
"

123 
	~"gpu_ø°î_löe.h
"

127 
	~"gpu_ø°î_pﬁyg⁄.h
"

131 
	~"gpu_ø°î_•rôe.h
"

135 
	~"gpu_comm™d.h
"

138 
INLINE
 
	$gpuRe£t
()

140 
GPU_GP1
 = 0x14802000;

141 
TextuªWödow
[0] = 0;

142 
TextuªWödow
[1] = 0;

143 
TextuªWödow
[2] = 255;

144 
TextuªWödow
[3] = 255;

145 
DøwögAªa
[2] = 256;

146 
DøwögAªa
[3] = 240;

147 
Di•œyAªa
[2] = 256;

148 
Di•œyAªa
[3] = 240;

149 
Di•œyAªa
[5] = 240;

150 
	}
}

153 
boﬁ
 
	$GPU_öô
()

155 
	`gpuRe£t
();

158 
i
=1;i<=(1<<
TABLE_BITS
);++i)

160 
v
 = 1.0 / (
i
);

161 #ifde‡
GPU_TABLE_10_BITS


162 
v
 *= (0xffffffff>>1);

164 
v
 *= (0x80000000);

166 
s_övTabÀ
[
i
-1]=
	`s32
(
v
);

169 
	}
}

172 
	$GPU_shutdown
()

174 
	}
}

177 
	$GPU_‰ìze
(
bWrôe
, 
GPUFªeze_t
* 
p2
)

179 i‡(!
p2
)  (0);

180 i‡(
p2
->
Vîsi⁄
 != 1)  (0);

182 i‡(
bWrôe
)

184 
p2
->
GPU_gp1
 = 
GPU_GP1
;

185 
	`mem£t
(
p2
->
C⁄åﬁ
, 0, (p2->Control));

187 
p2
->
C⁄åﬁ
[3] = (3 << 24Ë| ((
GPU_GP1
 >> 23) & 1);

188 
p2
->
C⁄åﬁ
[4] = (4 << 24Ë| ((
GPU_GP1
 >> 29) & 3);

189 
p2
->
C⁄åﬁ
[5] = (5 << 24Ë| (
Di•œyAªa
[0] | (DisplayArea[1] << 10));

190 
p2
->
C⁄åﬁ
[6] = (6 << 24) | (2560 << 12);

191 
p2
->
C⁄åﬁ
[7] = (7 << 24Ë| (
Di•œyAªa
[4] | (DisplayArea[5] << 10));

192 
p2
->
C⁄åﬁ
[8] = (8 << 24Ë| ((
GPU_GP1
 >> 17) & 0x3f) | ((GPU_GP1 >> 10) & 0x40);

193 
	`mem˝y
(
p2
->
FømeBuf„r
, (
u16
*)
GPU_FømeBuf„r
, 
FRAME_BUFFER_SIZE
);

198 
GPU_GP1
 = 
p2
->
GPU_gp1
;

199 
	`mem˝y
((
u16
*)
GPU_FømeBuf„r
, 
p2
->
FømeBuf„r
, 
FRAME_BUFFER_SIZE
);

200 
	`GPU_wrôeSètus
((5 << 24Ë| 
p2
->
C⁄åﬁ
[5]);

201 
	`GPU_wrôeSètus
((7 << 24Ë| 
p2
->
C⁄åﬁ
[7]);

202 
	`GPU_wrôeSètus
((8 << 24Ë| 
p2
->
C⁄åﬁ
[8]);

203 
	`gpuSëTextuª
(
GPU_GP1
);

207 
	}
}

213 
u8
 
	gPackëSize
[256] =

234 
INLINE
 
	$gpuSídPackë
()

236 #ifde‡
DEBUG_ANALYSIS


237 
dbg_™a˙t_GPU_£ndPackë
++;

239 
	`gpuSídPackëFun˘i⁄
(
PackëBuf„r
.
U4
[0]>>24);

240 
	}
}

243 
INLINE
 
	$gpuCheckPackë
(
u32
 
uD©a
)

245 i‡(
PackëCou¡
)

247 
PackëBuf„r
.
U4
[
PackëIndex
++] = 
uD©a
;

248 --
PackëCou¡
;

252 
PackëBuf„r
.
U4
[0] = 
uD©a
;

253 
PackëCou¡
 = 
PackëSize
[
uD©a
 >> 24];

254 
PackëIndex
 = 1;

256 i‡(!
PackëCou¡
Ë
	`gpuSídPackë
();

257 
	}
}

260 
	$GPU_wrôeD©aMem
(
u32
* 
dmaAddªss
, 
s32
 
dmaCou¡
)

262 #ifde‡
DEBUG_ANALYSIS


263 
dbg_™a˙t_GPU_wrôeD©aMem
++;

265 
	`pcsx4Æl_¥of_∑u£
(
PCSX4ALL_PROF_CPU
);

266 
	`pcsx4Æl_¥of_°¨t_wôh_∑u£
(
PCSX4ALL_PROF_GPU
,
PCSX4ALL_PROF_HW_WRITE
);

267 
u32
 
d©a
;

268 c⁄° 
u16
 *
VIDEO_END
=(
GPU_FømeBuf„r
+(
FRAME_BUFFER_SIZE
/2)-1);

269 
GPU_GP1
 &= ~0x14000000;

271 
dmaCou¡
)

273 i‡(
FømeToWrôe
)

275 
dmaCou¡
)

277 
dmaCou¡
--;

278 
d©a
 = *
dmaAddªss
++;

279 i‡((&
pvøm
[
px
])>(
VIDEO_END
))Övram-=512*1024;

280 
pvøm
[
px
] = 
d©a
;

281 i‡(++
px
>=
x_íd
)

283 
px
 = 0;

284 
pvøm
 += 1024;

285 i‡(++
py
>=
y_íd
)

287 
FømeToWrôe
 = 
Ál£
;

288 
GPU_GP1
 &= ~0x08000000;

292 i‡((&
pvøm
[
px
])>(
VIDEO_END
))Övram-=512*1024;

293 
pvøm
[
px
] = 
d©a
>>16;

294 i‡(++
px
>=
x_íd
)

296 
px
 = 0;

297 
pvøm
 += 1024;

298 i‡(++
py
>=
y_íd
)

300 
FømeToWrôe
 = 
Ál£
;

301 
GPU_GP1
 &= ~0x08000000;

309 
d©a
 = *
dmaAddªss
++;

310 
dmaCou¡
--;

311 
	`gpuCheckPackë
(
d©a
);

315 
GPU_GP1
 = (GPU_GP1 | 0x14000000) & ~0x60000000;

316 
fb_dúty
 = 
åue
;

317 
	`pcsx4Æl_¥of_íd_wôh_ªsume
(
PCSX4ALL_PROF_GPU
,
PCSX4ALL_PROF_HW_WRITE
);

318 
	`pcsx4Æl_¥of_ªsume
(
PCSX4ALL_PROF_CPU
);

319 
	}
}

321 
u32
 *
	glU£dAddr
[3];

322 
INLINE
 
	$CheckF‹EndÀssLo›
(
u32
 *
œddr
)

324 if(
œddr
==
lU£dAddr
[1])  1;

325 if(
œddr
==
lU£dAddr
[2])  1;

327 if(
œddr
<
lU£dAddr
[0])ÜUsedAddr[1]=laddr;

328 
lU£dAddr
[2]=
œddr
;

329 
lU£dAddr
[0]=
œddr
;

331 
	}
}

334 
	$GPU_dmaChaö
(
u32
* 
ba£Addr
, u32 
dmaVAddr
)

336 #ifde‡
DEBUG_ANALYSIS


337 
dbg_™a˙t_GPU_dmaChaö
++;

339 
	`pcsx4Æl_¥of_°¨t_wôh_∑u£
(
PCSX4ALL_PROF_GPU
,
PCSX4ALL_PROF_HW_WRITE
);

340 
u32
 
d©a
, *
addªss
, 
cou¡
, 
off£t
;

341 
DMAComm™dCou¡î
 = 0;

342 
dma_w‹ds
 = 0;

344 
GPU_GP1
 &= ~0x14000000;

345 
lU£dAddr
[0]ˆU£dAddr[1]ˆU£dAddr[2]=(
u32
*)0x1fffff;

346 
dmaVAddr
 &= 0x001FFFFF;

347 
dmaVAddr
 != 0x1FFFFF)

349 
addªss
 = (
ba£Addr
 + (
dmaVAddr
 >> 2));

350 if(
DMAComm™dCou¡î
++ > 2000000) ;

351 if(
	`CheckF‹EndÀssLo›
(
addªss
)) ;

352 
d©a
 = *
addªss
++;

353 
cou¡
 = (
d©a
 >> 24);

354 
off£t
 = 
d©a
 & 0x001FFFFF;

355 i‡(
dmaVAddr
 !
off£t
) dmaVAddr = offset;

356 
dmaVAddr
 = 0x1FFFFF;

358 if(
cou¡
>0Ë
	`GPU_wrôeD©aMem
(
addªss
,count);

359 
dma_w‹ds
 +1 + 
cou¡
;

361 
GPU_GP1
 = (GPU_GP1 | 0x14000000) & ~0x60000000;

362 
	`pcsx4Æl_¥of_íd_wôh_ªsume
(
PCSX4ALL_PROF_GPU
,
PCSX4ALL_PROF_HW_WRITE
);

364  
dma_w‹ds
;

365 
	}
}

368 
	$GPU_wrôeD©a
(
u32
 
d©a
)

370 c⁄° 
u16
 *
VIDEO_END
=(
GPU_FømeBuf„r
+(
FRAME_BUFFER_SIZE
/2)-1);

371 #ifde‡
DEBUG_ANALYSIS


372 
dbg_™a˙t_GPU_wrôeD©a
++;

374 
	`pcsx4Æl_¥of_∑u£
(
PCSX4ALL_PROF_CPU
);

375 
	`pcsx4Æl_¥of_°¨t_wôh_∑u£
(
PCSX4ALL_PROF_GPU
,
PCSX4ALL_PROF_HW_WRITE
);

376 
GPU_GP1
 &= ~0x14000000;

378 i‡(
FømeToWrôe
)

380 i‡((&
pvøm
[
px
])>(
VIDEO_END
))Övram-=512*1024;

381 
pvøm
[
px
]=(
u16
)
d©a
;

382 i‡(++
px
>=
x_íd
)

384 
px
 = 0;

385 
pvøm
 += 1024;

386 i‡(++
py
>=
y_íd
)

388 
FømeToWrôe
 = 
Ál£
;

389 
GPU_GP1
 &= ~0x08000000;

392 i‡(
FømeToWrôe
)

394 i‡((&
pvøm
[
px
])>(
VIDEO_END
))Övram-=512*1024;

395 
pvøm
[
px
]=
d©a
>>16;

396 i‡(++
px
>=
x_íd
)

398 
px
 = 0;

399 
pvøm
 += 1024;

400 i‡(++
py
>=
y_íd
)

402 
FømeToWrôe
 = 
Ál£
;

403 
GPU_GP1
 &= ~0x08000000;

410 
	`gpuCheckPackë
(
d©a
);

412 
GPU_GP1
 |= 0x14000000;

413 
fb_dúty
 = 
åue
;

414 
	`pcsx4Æl_¥of_íd_wôh_ªsume
(
PCSX4ALL_PROF_GPU
,
PCSX4ALL_PROF_HW_WRITE
);

415 
	`pcsx4Æl_¥of_ªsume
(
PCSX4ALL_PROF_CPU
);

417 
	}
}

421 
	$GPU_ªadD©aMem
(
u32
* 
dmaAddªss
, 
s32
 
dmaCou¡
)

423 c⁄° 
u16
 *
VIDEO_END
=(
GPU_FømeBuf„r
+(
FRAME_BUFFER_SIZE
/2)-1);

424 #ifde‡
DEBUG_ANALYSIS


425 
dbg_™a˙t_GPU_ªadD©aMem
++;

427 if(!
FømeToRód
) ;

429 
	`pcsx4Æl_¥of_°¨t_wôh_∑u£
(
PCSX4ALL_PROF_GPU
,
PCSX4ALL_PROF_HW_WRITE
);

430 
GPU_GP1
 &= ~0x14000000;

433 i‡((&
pvøm
[
px
])>(
VIDEO_END
))Övram-=512*1024;

435 
u32
 
d©a
 = 
pvøm
[
px
];

437 i‡(++
px
>=
x_íd
)

439 
px
 = 0;

440 
pvøm
 += 1024;

443 i‡((&
pvøm
[
px
])>(
VIDEO_END
))Övram-=512*1024;

445 
d©a
 |(
u32
)(
pvøm
[
px
])<<16;

447 *
dmaAddªss
++ = 
d©a
;

449 i‡(++
px
>=
x_íd
)

451 
px
 = 0;

452 
pvøm
 += 1024;

453 i‡(++
py
>=
y_íd
)

455 
FømeToRód
 = 
Ál£
;

456 
GPU_GP1
 &= ~0x08000000;

460 } --
dmaCou¡
);

462 
GPU_GP1
 = (GPU_GP1 | 0x14000000) & ~0x60000000;

463 
	`pcsx4Æl_¥of_íd_wôh_ªsume
(
PCSX4ALL_PROF_GPU
,
PCSX4ALL_PROF_HW_WRITE
);

464 
	}
}

469 
u32
 
	$GPU_ªadD©a
()

471 c⁄° 
u16
 *
VIDEO_END
=(
GPU_FømeBuf„r
+(
FRAME_BUFFER_SIZE
/2)-1);

472 #ifde‡
DEBUG_ANALYSIS


473 
dbg_™a˙t_GPU_ªadD©a
++;

475 
	`pcsx4Æl_¥of_∑u£
(
PCSX4ALL_PROF_CPU
);

476 
	`pcsx4Æl_¥of_°¨t_wôh_∑u£
(
PCSX4ALL_PROF_GPU
,
PCSX4ALL_PROF_HW_READ
);

477 
GPU_GP1
 &= ~0x14000000;

478 i‡(
FømeToRód
)

480 i‡((&
pvøm
[
px
])>(
VIDEO_END
))Övram-=512*1024;

481 
GP0
 = 
pvøm
[
px
];

482 i‡(++
px
>=
x_íd
)

484 
px
 = 0;

485 
pvøm
 += 1024;

486 i‡(++
py
>=
y_íd
)

488 
FømeToRód
 = 
Ál£
;

489 
GPU_GP1
 &= ~0x08000000;

492 i‡((&
pvøm
[
px
])>(
VIDEO_END
))Övram-=512*1024;

493 
GP0
 |
pvøm
[
px
]<<16;

494 i‡(++
px
>=
x_íd
)

496 
px
 = 0;

497 
pvøm
 +=1024;

498 i‡(++
py
>=
y_íd
)

500 
FømeToRód
 = 
Ál£
;

501 
GPU_GP1
 &= ~0x08000000;

506 
GPU_GP1
 |= 0x14000000;

508 
	`pcsx4Æl_¥of_íd_wôh_ªsume
(
PCSX4ALL_PROF_GPU
,
PCSX4ALL_PROF_HW_READ
);

509 
	`pcsx4Æl_¥of_ªsume
(
PCSX4ALL_PROF_CPU
);

510  (
GP0
);

511 
	}
}

514 
u32
 
	$GPU_ªadSètus
()

516 #ifde‡
DEBUG_ANALYSIS


517 
dbg_™a˙t_GPU_ªadSètus
++;

519  
GPU_GP1
;

520 
	}
}

523 
	$GPU_wrôeSètus
(
u32
 
d©a
)

525 #ifde‡
DEBUG_ANALYSIS


526 
dbg_™a˙t_GPU_wrôeSètus
++;

528 
	`pcsx4Æl_¥of_∑u£
(
PCSX4ALL_PROF_CPU
);

529 
	`pcsx4Æl_¥of_°¨t_wôh_∑u£
(
PCSX4ALL_PROF_GPU
,
PCSX4ALL_PROF_HW_WRITE
);

530 
d©a
 >> 24) {

532 
	`gpuRe£t
();

535 
GPU_GP1
 &= ~0x08000000;

536 
PackëCou¡
 = 0; 
FømeToRód
 = 
FømeToWrôe
 = 
Ál£
;

539 
GPU_GP1
 &= ~0x08000000;

540 
PackëCou¡
 = 0; 
FømeToRód
 = 
FømeToWrôe
 = 
Ál£
;

543 
GPU_GP1
 = (GPU_GP1 & ~0x00800000Ë| ((
d©a
 & 1) << 23);

546 i‡(
d©a
 == 0x04000000)

547 
PackëCou¡
 = 0;

548 
GPU_GP1
 = (GPU_GP1 & ~0x60000000Ë| ((
d©a
 & 3) << 29);

551 
Di•œyAªa
[0] = (
d©a
 & 0x000003FF);

552 
Di•œyAªa
[1] = ((
d©a
 & 0x0007FC00)>>10);

553 
fb_dúty
 = 
åue
;

554 
wasSkù
 = 
isSkù
;

555 i‡(
isSkù
)

556 
isSkù
 = 
Ál£
;

558 
isSkù
 = 
skùFøme
;

561 
Di•œyAªa
[4] = 
d©a
 & 0x000003FF;

562 
Di•œyAªa
[5] = (
d©a
 & 0x000FFC00) >> 10;

563 
fb_dúty
 = 
åue
;

567 
GPU_GP1
 = (GPU_GP1 & ~0x007F0000Ë| ((
d©a
 & 0x3F) << 17) | ((data & 0x40) << 10);

568 
u32
 
H‹iz⁄èlResﬁuti⁄
[8] = { 256, 368, 320, 384, 512, 512, 640, 640 };

569 
Di•œyAªa
[2] = 
H‹iz⁄èlResﬁuti⁄
[(
GPU_GP1
 >> 16) & 7];

570 
u32
 
VîtiˇlResﬁuti⁄
[4] = { 240, 480, 256, 480 };

571 
Di•œyAªa
[3] = 
VîtiˇlResﬁuti⁄
[(
GPU_GP1
 >> 19) & 3];

572 
isPAL
 = (
d©a
 & 0x08Ë? 
åue
 : 
Ál£
;

574 
fb_dúty
 = 
åue
;

577 
d©a
 & 0xffff) {

581 
GP0
 = (
DøwögAªa
[1] << 10) | DrawingArea[0];

584 
GP0
 = ((
DøwögAªa
[3]-1) << 10) | (DrawingArea[2]-1);

588 
GP0
 = (
DøwögOff£t
[1] << 11) | DrawingOffset[0];

591 
GP0
 = 2;

594 
GP0
 = 0;

598 
	`pcsx4Æl_¥of_íd_wôh_ªsume
(
PCSX4ALL_PROF_GPU
,
PCSX4ALL_PROF_HW_WRITE
);

599 
	`pcsx4Æl_¥of_ªsume
(
PCSX4ALL_PROF_CPU
);

600 
	}
}

602 #i‚de‡
REARMED


605 
	~"gpu_blô.h
"

607 
INLINE
 
	$gpuVideoOuçut
()

609 
s16
 
ﬁd_ªs_h‹z
, 
ﬁd_ªs_vît
, 
ﬁd_rgb24
;

610 
s16
 
h0
, 
x0
, 
y0
, 
w0
, 
h1
;

612 
x0
 = 
Di•œyAªa
[0];

613 
y0
 = 
Di•œyAªa
[1];

615 
w0
 = 
Di•œyAªa
[2];

616 
h0
 = 
Di•œyAªa
[3];

618 
h1
 = 
Di•œyAªa
[5] - DisplayArea[4];

619 i‡(
h0
 =480Ë
h1
 = 
	`Mö2
(h1*2,480);

621 
u16
* 
de°_s¸ìn16
 = 
SCREEN
;

622 
u16
* 
§c_s¸ìn16
 = &((u16*)
GPU_FømeBuf„r
)[
	`FRAME_OFFSET
(
x0
,
y0
)];

623 
u32
 
isRGB24
 = (
GPU_GP1
 & 0x00200000 ? 32 : 0);

626 if–(
w0
 !
ﬁd_ªs_h‹z
 || 
h1
 !
ﬁd_ªs_vît
 || (
s16
)
isRGB24
 !
ﬁd_rgb24
) )

629 
ﬁd_ªs_h‹z
 = 
w0
;

630 
ﬁd_ªs_vît
 = 
h1
;

631 
ﬁd_rgb24
 = (
s16
)
isRGB24
;

633 
	`video_˛ór
();

637 
sizeShi·
 = 1;

638 if(
h0
==256Ëh0 = 240; if(h0==480Ë
sizeShi·
 = 2;

639 if(
h1
>
h0
Ë{ 
§c_s¸ìn16
 +((h1-h0)>>
sizeShi·
)*1024; h1 = h0; }

640 if(
h1
<
h0
Ë
de°_s¸ìn16
 +((h0-h1)>>
sizeShi·
)*
VIDEO_WIDTH
;

643 
öcY
 = (
h0
==480) ? 2 : 1;

644 
h0
=(h0==480 ? 2048 : 1024);

647 c⁄° 
li
=
löesI¡îœ˚
;

648 
boﬁ
 
pi
=
¥ogªssI¡îœ˚
;

649 
boﬁ
 
pif
=
¥ogªssI¡îœ˚_Êag
;

650  
w0
 )

653 
y1
=
y0
+
h1
; y0<y1; y0+=
öcY
)

655 if(–0 =(
y0
&
li
ËË&& ((!
pi
Ë|| (
pif
=!pif))Ë
	`GPU_BlôWWDWW
–
§c_s¸ìn16
, 
de°_s¸ìn16
, 
isRGB24
);

656 
de°_s¸ìn16
 +
VIDEO_WIDTH
;

657 
§c_s¸ìn16
 +
h0
;

661 
y1
=
y0
+
h1
; y0<y1; y0+=
öcY
)

663 if(–0 =(
y0
&
li
ËË&& ((!
pi
Ë|| (
pif
=!pif))Ë
	`GPU_BlôWWWWWWWWS
–
§c_s¸ìn16
, 
de°_s¸ìn16
, 
isRGB24
, 4);

664 
de°_s¸ìn16
 +
VIDEO_WIDTH
;

665 
§c_s¸ìn16
 +
h0
;

669 
y1
=
y0
+
h1
; y0<y1; y0+=
öcY
)

671 if(–0 =(
y0
&
li
ËË&& ((!
pi
Ë|| (
pif
=!pif))Ë
	`GPU_BlôWW
–
§c_s¸ìn16
, 
de°_s¸ìn16
, 
isRGB24
);

672 
de°_s¸ìn16
 +
VIDEO_WIDTH
;

673 
§c_s¸ìn16
 +
h0
;

677 
y1
=
y0
+
h1
; y0<y1; y0+=
öcY
)

679 if(–0 =(
y0
&
li
ËË&& ((!
pi
Ë|| (
pif
=!pif))Ë
	`GPU_BlôWWWWWS
–
§c_s¸ìn16
, 
de°_s¸ìn16
, 
isRGB24
);

680 
de°_s¸ìn16
 +
VIDEO_WIDTH
;

681 
§c_s¸ìn16
 +
h0
;

685 
y1
=
y0
+
h1
; y0<y1; y0+=
öcY
)

687 if(–0 =(
y0
&
li
ËË&& ((!
pi
Ë|| (
pif
=!pif))Ë
	`GPU_BlôWWSWWSWS
–
§c_s¸ìn16
, 
de°_s¸ìn16
, 
isRGB24
);

688 
de°_s¸ìn16
 +
VIDEO_WIDTH
;

689 
§c_s¸ìn16
 +
h0
;

693 
y1
=
y0
+
h1
; y0<y1; y0+=
öcY
)

695 if(–0 =(
y0
&
li
ËË&& ((!
pi
Ë|| (
pif
=!pif))Ë
	`GPU_BlôWS
–
§c_s¸ìn16
, 
de°_s¸ìn16
, 
isRGB24
);

696 
de°_s¸ìn16
 +
VIDEO_WIDTH
;

697 
§c_s¸ìn16
 +
h0
;

701 
¥ogªssI¡îœ˚_Êag
=!progressInterlace_flag;

703 
	`video_Êù
();

704 
	}
}

707 
	$GPU_upd©eLa˚
()

709 #ifde‡ 
ENABLE_GPU_LOG_SUPPORT


710 
	`Ârötf
(
°dout
,"GPU_updateLace()\n");

712 #ifde‡
DEBUG_ANALYSIS


713 
dbg_™a˙t_GPU_upd©eLa˚
++;

715 
	`pcsx4Æl_¥of_°¨t_wôh_∑u£
(
PCSX4ALL_PROF_GPU
,
PCSX4ALL_PROF_COUNTERS
);

716 #ifde‡
PROFILER_PCSX4ALL


717 
pcsx4Æl_¥of_‰ames
++;

719 #ifde‡
DEBUG_FRAME


720 if(
	`isdbg_‰ame
())

722 
∑s£d
=0;

723 i‡(!
∑s£d
Ë
	`dbg_íabÀ
();

724 
	`pcsx4Æl_exô
();

725 
∑s£d
++;

730 c⁄° 
skùTabÀ
[12][12] =

747 
GPU_GP1
 ^= 0x80000000;

750 i‡((!
skùFøme
Ë&& (!
isSkù
Ë&& (
fb_dúty
Ë&& (!(((
GPU_GP1
&0x08000000))||((GPU_GP1&0x00800000)))))

752 
	`gpuVideoOuçut
();

754 i‡(
Di•œyAªa
[3] == 480)

756 i‡(
löesI¡îœ˚_u£r
Ë
löesI¡îœ˚
 = 3;

757 
löesI¡îœ˚
 = 1;

759 i‡(
löesI¡îœ˚
 !
löesI¡îœ˚_u£r
)

761 
löesI¡îœ˚
 = 
löesI¡îœ˚_u£r
;

762 
	`video_˛ór
();

767 i‡(
‰ameLimô
)

769 
√xt
=
	`gë_ticks
();

770 i‡(!
skùFøme
)

772 
now
=
	`gë_ticks
();

773 i‡(
now
<
√xt
Ë
	`waô_ticks
(next-now);

775 
√xt
+=(
isPAL
?(1000000/50):(()(1000000.0/59.94)));

779 i‡(
show_Âs
)

781 
u32
 
ªÆ_Âs
=0;

782 
u32
 
¥ev
=
	`gë_ticks
();

783 
msg
[32]="FPS=000/00 SPD=000%";

784 
u32
 
now
=
	`gë_ticks
();

785 
ªÆ_Âs
++;

786 i‡((
now
-
¥ev
)>=1000000)

788 
u32
 
ex≥˘ed_Âs
=(
isPAL
?50:60);

789 
	`•rötf
(
msg
,"FPS=%3d/%2d SPD=%3d%%",((
ªÆ_Âs
*(12-
skùCou¡
))/12),((
ex≥˘ed_Âs
*(12-skipCount))/12),((real_fps*100)/expected_fps));

790 
¥ev
=
now
;

791 
ªÆ_Âs
=0;

793 
	`p‹t_¥ötf
(5,5,
msg
);

797 i‡(!
Æt_Âs
)

800 
skùFøme
=
skùTabÀ
[
skùCou¡
][
skCou¡
];

801 
skCou¡
--; if (skCount<0) skCount=11;

802 
isSkù
=
skùFøme
;

807 i‡(!
isSkù
)

809 
skùFøme
=
skùTabÀ
[
skùCou¡
][
skCou¡
];

810 
skCou¡
--; if (skCount<0) skCount=11;

811 
isSkù
=
åue
;

814 
fb_dúty
=
Ál£
;

816 
	`pcsx4Æl_¥of_íd_wôh_ªsume
(
PCSX4ALL_PROF_GPU
,
PCSX4ALL_PROF_COUNTERS
);

817 
	}
}

821 
	~"../../‰⁄ãnd/∂ugö_lib.h
"

825 c⁄° 
ª¨med_cbs
 *
cbs
;

826 
s16
 
ﬁd_ªs_h‹z
, 
ﬁd_ªs_vît
, 
ﬁd_rgb24
;

828 
blô
()

830 
u16
 *
ba£
 = (u16 *)
GPU_FømeBuf„r
;

831 
s16
 
isRGB24
 = (
GPU_GP1
 & 0x00200000) ? 1 : 0;

832 
s16
 
h0
, 
x0
, 
y0
, 
w0
, 
h1
;

834 
x0
 = 
Di•œyAªa
[0] & ~1;

835 
y0
 = 
Di•œyAªa
[1];

836 
ba£
 +
FRAME_OFFSET
(
x0
, 
y0
);

838 
w0
 = 
Di•œyAªa
[2];

839 
h0
 = 
Di•œyAªa
[3];

841 
h1
 = 
Di•œyAªa
[5] - DisplayArea[4];

842 i‡(
h0
 =480Ë
h1
 = 
Mö2
(h1*2,480);

844 i‡(
h1
 <= 0)

847 i‡(
w0
 !
ﬁd_ªs_h‹z
 || 
h1
 !
ﬁd_ªs_vît
 || 
isRGB24
 !
ﬁd_rgb24
)

849 
ﬁd_ªs_h‹z
 = 
w0
;

850 
ﬁd_ªs_vît
 = 
h1
;

851 
ﬁd_rgb24
 = (
s16
)
isRGB24
;

852 
cbs
->
∂_vout_£t_mode
(
w0
, 
h1
, w0, h1, 
isRGB24
 ? 24 : 16);

855 
cbs
->
∂_vout_Êù
(
ba£
, 1024, 
isRGB24
, 
w0
, 
h1
);

858 
GPU_upd©eLa˚
()

861 
GPU_GP1
 ^= 0x80000000;

863 i‡(!
fb_dúty
 || (
GPU_GP1
&0x08800000))

866 i‡(!
wasSkù
) {

867 
blô
();

868 
fb_dúty
 = 
Ál£
;

869 
skCou¡
 = 0;

872 
skCou¡
++;

873 i‡(
skCou¡
 >= 8)

874 
wasSkù
 = 
isSkù
 = 0;

877 
skùFøme
 = 
cbs
->
fskù_advi˚
 || cbs->
‰ameskù
 == 1;

880 
GPU›í
(*, *, *)

882 
cbs
->
∂_vout_›í
();

886 
GPU˛o£
()

888 
cbs
->
∂_vout_˛o£
();

892 
GPU‰ìze
(
ulGëFªezeD©a
, 
GPUFªeze_t
* 
p2
)

894 i‡(
ulGëFªezeD©a
 > 1)

897  
GPU_‰ìze
(
ulGëFªezeD©a
, 
p2
);

900 
GPUª¨medCÆlbacks
(c⁄° 
ª¨med_cbs
 *
cbs_
)

902 
íabÀAbbeyHack
 = 
cbs_
->
gpu_u«i
.
abe_hack
;

903 
light
 = !
cbs_
->
gpu_u«i
.
no_light
;

904 
bÀnd
 = !
cbs_
->
gpu_u«i
.
no_bÀnd
;

905 i‡(
cbs_
->
∂_vout_£t_øw_vøm
)

906 
cbs_
->
∂_vout_£t_øw_vøm
((*)
GPU_FømeBuf„r
);

908 
cbs
 = 
cbs_
;

909 i‡(
cbs
->
∂_£t_gpu_ˇps
)

910 
cbs
->
∂_£t_gpu_ˇps
(0);

	@plugins/gpu_unai/gpu.h

21 #i‚de‡
NEW_GPU_H


22 
	#NEW_GPU_H


	)

26 
	#FRAME_BUFFER_SIZE
 (1024*512*2)

	)

27 
	#FRAME_WIDTH
 1024

	)

28 
	#FRAME_HEIGHT
 512

	)

29 
	#FRAME_OFFSET
(
x
,
y
Ë(((y)<<10)+(x))

	)

31 
	#VIDEO_WIDTH
 320

	)

33 
	ts8
;

34 sig√d 
	ts16
;

35 sig√d 
	ts32
;

36 sig√d 
	ts64
;

38 
	tu8
;

39 
	tu16
;

40 
	tu32
;

41 
	tu64
;

43 
	~"gpu_fixedpoöt.h
"

47 
skùCou¡
;

48 
boﬁ
 
íabÀAbbeyHack
;

49 
boﬁ
 
show_Âs
;

50 
boﬁ
 
Æt_Âs
;

54 
löesI¡îœ˚_u£r
;

55 
boﬁ
 
¥ogªssI¡îœ˚
;

57 
boﬁ
 
light
;

58 
boﬁ
 
bÀnd
;

61 
u32
 
	mVîsi⁄
;

62 
u32
 
	mGPU_gp1
;

63 
u32
 
	mC⁄åﬁ
[256];

64 
	mFømeBuf„r
[1024*512*2];

65 } 
	tGPUFªeze_t
;

67 
	sGPUPackë


71 
u32
 
	mU4
[16];

72 
s32
 
	mS4
[16];

73 
u16
 
	mU2
[32];

74 
s16
 
	mS2
[32];

75 
u8
 
	mU1
[64];

76 
s8
 
	mS1
[64];

	@plugins/gpu_unai/gpu_arm.h

1 #ifde‡
__˝lu•lus


5 
døw_•r16_fuŒ
(
u16
 *
d
, *
s
, u16 *
∑l
, 
löes
);

7 #ifde‡
__˝lu•lus


	@plugins/gpu_unai/gpu_blit.h

21 #i‚de‡
_INNER_BLIT_H_


22 
	#_INNER_BLIT_H_


	)

24 #i‚de‡
USE_BGR15


25 
	#RGB24
(
R
,
G
,
B
Ë(((((R)&0xF8)<<8)|(((G)&0xFC)<<3)|(((B)&0xF8)>>3)))

	)

26 
	#RGB16X2
(
C
Ë(((C)&(0x1f001f<<10))>>10Ë| (((C)&(0x1f001f<<5))<<1Ë| (((C)&(0x1f001f<<0))<<11)

	)

27 
	#RGB16
(
C
Ë(((C)&(0x1f<<10))>>10Ë| (((C)&(0x1f<<5))<<1Ë| (((C)&(0x1f<<0))<<11)

	)

29 
	#RGB24
(
R
,
G
,
B
Ë((((R)&0xF8)>>3)|(((G)&0xF8)<<2)|(((B)&0xF8)<<7))

	)

35 
INLINE
 
	$GPU_BlôWW
(c⁄° * 
§c
, 
u16
* 
d°16
, 
u32
 
isRGB24
)

37 
u32
 
uCou¡
;

38 if(
isRGB24
 == 0)

40 #i‚de‡
USE_BGR15


41 
uCou¡
 = 20;

42 c⁄° 
u32
* 
§c32
 = (c⁄° u32*Ë
§c
;

43 
u32
* 
d°32
 = (u32*)(*Ë
d°16
;

45 
d°32
[0] = 
	`RGB16X2
(
§c32
[0]);

46 
d°32
[1] = 
	`RGB16X2
(
§c32
[1]);

47 
d°32
[2] = 
	`RGB16X2
(
§c32
[2]);

48 
d°32
[3] = 
	`RGB16X2
(
§c32
[3]);

49 
d°32
[4] = 
	`RGB16X2
(
§c32
[4]);

50 
d°32
[5] = 
	`RGB16X2
(
§c32
[5]);

51 
d°32
[6] = 
	`RGB16X2
(
§c32
[6]);

52 
d°32
[7] = 
	`RGB16X2
(
§c32
[7]);

53 
d°32
 += 8;

54 
§c32
 += 8;

55 }--
uCou¡
);

57 
	`mem˝y
(
d°16
,
§c
,640);

62 
uCou¡
 = 20;

63 c⁄° 
u8
* 
§c8
 = (c⁄° u8*)
§c
;

65 
d°16
[ 0] = 
	`RGB24
(
§c8
[ 0], src8[ 1], src8[ 2] );

66 
d°16
[ 1] = 
	`RGB24
(
§c8
[ 3], src8[ 4], src8[ 5] );

67 
d°16
[ 2] = 
	`RGB24
(
§c8
[ 6], src8[ 7], src8[ 8] );

68 
d°16
[ 3] = 
	`RGB24
(
§c8
[ 9], src8[10], src8[11] );

69 
d°16
[ 4] = 
	`RGB24
(
§c8
[12], src8[13], src8[14] );

70 
d°16
[ 5] = 
	`RGB24
(
§c8
[15], src8[16], src8[17] );

71 
d°16
[ 6] = 
	`RGB24
(
§c8
[18], src8[19], src8[20] );

72 
d°16
[ 7] = 
	`RGB24
(
§c8
[21], src8[22], src8[23] );

74 
d°16
[ 8] = 
	`RGB24
(
§c8
[24], src8[25], src8[26] );

75 
d°16
[ 9] = 
	`RGB24
(
§c8
[27], src8[28], src8[29] );

76 
d°16
[10] = 
	`RGB24
(
§c8
[30], src8[31], src8[32] );

77 
d°16
[11] = 
	`RGB24
(
§c8
[33], src8[34], src8[35] );

78 
d°16
[12] = 
	`RGB24
(
§c8
[36], src8[37], src8[38] );

79 
d°16
[13] = 
	`RGB24
(
§c8
[39], src8[40], src8[41] );

80 
d°16
[14] = 
	`RGB24
(
§c8
[42], src8[43], src8[44] );

81 
d°16
[15] = 
	`RGB24
(
§c8
[45], src8[46], src8[47] );

82 
d°16
 += 16;

83 
§c8
 += 48;

84 }--
uCou¡
);

86 
	}
}

88 
INLINE
 
	$GPU_BlôWWSWWSWS
(c⁄° * 
§c
, 
u16
* 
d°16
, 
u32
 
isRGB24
)

90 
u32
 
uCou¡
;

91 if(
isRGB24
 == 0)

93 #i‚de‡
USE_BGR15


94 
uCou¡
 = 32;

95 c⁄° 
u16
* 
§c16
 = (c⁄° u16*Ë
§c
;

97 
d°16
[ 0] = 
	`RGB16
(
§c16
[0]);

98 
d°16
[ 1] = 
	`RGB16
(
§c16
[1]);

99 
d°16
[ 2] = 
	`RGB16
(
§c16
[3]);

100 
d°16
[ 3] = 
	`RGB16
(
§c16
[4]);

101 
d°16
[ 4] = 
	`RGB16
(
§c16
[6]);

102 
d°16
[ 5] = 
	`RGB16
(
§c16
[8]);

103 
d°16
[ 6] = 
	`RGB16
(
§c16
[9]);

104 
d°16
[ 7] = 
	`RGB16
(
§c16
[11]);

105 
d°16
[ 8] = 
	`RGB16
(
§c16
[12]);

106 
d°16
[ 9] = 
	`RGB16
(
§c16
[14]);

107 
d°16
 += 10;

108 
§c16
 += 16;

109 }--
uCou¡
);

111 
uCou¡
 = 64;

112 c⁄° 
u16
* 
§c16
 = (c⁄° u16*Ë
§c
;

114 *
d°16
++ = *
§c16
++;

115 *
d°16
++ = *
§c16
;

116 
§c16
+=2;

117 *
d°16
++ = *
§c16
++;

118 *
d°16
++ = *
§c16
;

119 
§c16
+=2;

120 *
d°16
++ = *
§c16
;

121 
§c16
+=2;

122 }--
uCou¡
);

127 
uCou¡
 = 32;

128 c⁄° 
u8
* 
§c8
 = (c⁄° u8*)
§c
;

130 
d°16
[ 0] = 
	`RGB24
(
§c8
[ 0], src8[ 1], src8[ 2] );

131 
d°16
[ 1] = 
	`RGB24
(
§c8
[ 3], src8[ 4], src8[ 5] );

132 
d°16
[ 2] = 
	`RGB24
(
§c8
[ 9], src8[10], src8[11] );

133 
d°16
[ 3] = 
	`RGB24
(
§c8
[12], src8[13], src8[14] );

134 
d°16
[ 4] = 
	`RGB24
(
§c8
[18], src8[19], src8[20] );

136 
d°16
[ 5] = 
	`RGB24
(
§c8
[24], src8[25], src8[26] );

137 
d°16
[ 6] = 
	`RGB24
(
§c8
[27], src8[28], src8[29] );

138 
d°16
[ 7] = 
	`RGB24
(
§c8
[33], src8[34], src8[35] );

139 
d°16
[ 8] = 
	`RGB24
(
§c8
[36], src8[37], src8[38] );

140 
d°16
[ 9] = 
	`RGB24
(
§c8
[42], src8[43], src8[44] );

142 
d°16
 += 10;

143 
§c8
 += 48;

144 }--
uCou¡
);

146 
	}
}

148 
INLINE
 
	$GPU_BlôWWWWWS
(c⁄° * 
§c
, 
u16
* 
d°16
, 
u32
 
isRGB24
)

150 
u32
 
uCou¡
;

151 if(
isRGB24
 == 0)

153 #i‚de‡
USE_BGR15


154 
uCou¡
 = 32;

155 c⁄° 
u16
* 
§c16
 = (c⁄° u16*Ë
§c
;

157 
d°16
[ 0] = 
	`RGB16
(
§c16
[0]);

158 
d°16
[ 1] = 
	`RGB16
(
§c16
[1]);

159 
d°16
[ 2] = 
	`RGB16
(
§c16
[2]);

160 
d°16
[ 3] = 
	`RGB16
(
§c16
[3]);

161 
d°16
[ 4] = 
	`RGB16
(
§c16
[4]);

162 
d°16
[ 5] = 
	`RGB16
(
§c16
[6]);

163 
d°16
[ 6] = 
	`RGB16
(
§c16
[7]);

164 
d°16
[ 7] = 
	`RGB16
(
§c16
[8]);

165 
d°16
[ 8] = 
	`RGB16
(
§c16
[9]);

166 
d°16
[ 9] = 
	`RGB16
(
§c16
[10]);

167 
d°16
 += 10;

168 
§c16
 += 12;

169 }--
uCou¡
);

171 
uCou¡
 = 64;

172 c⁄° 
u16
* 
§c16
 = (c⁄° u16*Ë
§c
;

174 *
d°16
++ = *
§c16
++;

175 *
d°16
++ = *
§c16
++;

176 *
d°16
++ = *
§c16
++;

177 *
d°16
++ = *
§c16
++;

178 *
d°16
++ = *
§c16
;

179 
§c16
+=2;

180 }--
uCou¡
);

185 
uCou¡
 = 32;

186 c⁄° 
u8
* 
§c8
 = (c⁄° u8*)
§c
;

188 
d°16
[0] = 
	`RGB24
(
§c8
[ 0], src8[ 1], src8[ 2] );

189 
d°16
[1] = 
	`RGB24
(
§c8
[ 3], src8[ 4], src8[ 5] );

190 
d°16
[2] = 
	`RGB24
(
§c8
[ 6], src8[ 7], src8[ 8] );

191 
d°16
[3] = 
	`RGB24
(
§c8
[ 9], src8[10], src8[11] );

192 
d°16
[4] = 
	`RGB24
(
§c8
[12], src8[13], src8[14] );

193 
d°16
[5] = 
	`RGB24
(
§c8
[18], src8[19], src8[20] );

194 
d°16
[6] = 
	`RGB24
(
§c8
[21], src8[22], src8[23] );

195 
d°16
[7] = 
	`RGB24
(
§c8
[24], src8[25], src8[26] );

196 
d°16
[8] = 
	`RGB24
(
§c8
[27], src8[28], src8[29] );

197 
d°16
[9] = 
	`RGB24
(
§c8
[30], src8[31], src8[32] );

198 
d°16
 += 10;

199 
§c8
 += 36;

200 }--
uCou¡
);

202 
	}
}

204 
INLINE
 
	$GPU_BlôWWWWWWWWS
(c⁄° * 
§c
, 
u16
* 
d°16
, 
u32
 
isRGB24
, u32 
uClù_§c
)

206 
u32
 
uCou¡
;

207 if(
isRGB24
 == 0)

209 #i‚de‡
USE_BGR15


210 
uCou¡
 = 20;

211 c⁄° 
u16
* 
§c16
 = ((c⁄° u16*Ë
§c
Ë+ 
uClù_§c
;

213 
d°16
[ 0] = 
	`RGB16
(
§c16
[0]);

214 
d°16
[ 1] = 
	`RGB16
(
§c16
[1]);

215 
d°16
[ 2] = 
	`RGB16
(
§c16
[2]);

216 
d°16
[ 3] = 
	`RGB16
(
§c16
[3]);

217 
d°16
[ 4] = 
	`RGB16
(
§c16
[4]);

218 
d°16
[ 5] = 
	`RGB16
(
§c16
[5]);

219 
d°16
[ 6] = 
	`RGB16
(
§c16
[6]);

220 
d°16
[ 7] = 
	`RGB16
(
§c16
[7]);

222 
d°16
[ 8] = 
	`RGB16
(
§c16
[9]);

223 
d°16
[ 9] = 
	`RGB16
(
§c16
[10]);

224 
d°16
[10] = 
	`RGB16
(
§c16
[11]);

225 
d°16
[11] = 
	`RGB16
(
§c16
[12]);

226 
d°16
[12] = 
	`RGB16
(
§c16
[13]);

227 
d°16
[13] = 
	`RGB16
(
§c16
[14]);

228 
d°16
[14] = 
	`RGB16
(
§c16
[15]);

229 
d°16
[15] = 
	`RGB16
(
§c16
[16]);

230 
d°16
 += 16;

231 
§c16
 += 18;

232 }--
uCou¡
);

234 
uCou¡
 = 40;

235 c⁄° 
u16
* 
§c16
 = ((c⁄° u16*Ë
§c
Ë+ 
uClù_§c
;

237 *
d°16
++ = *
§c16
++;

238 *
d°16
++ = *
§c16
++;

239 *
d°16
++ = *
§c16
++;

240 *
d°16
++ = *
§c16
++;

241 *
d°16
++ = *
§c16
++;

242 *
d°16
++ = *
§c16
++;

243 *
d°16
++ = *
§c16
++;

244 *
d°16
++ = *
§c16
;

245 
§c16
+=2;

246 }--
uCou¡
);

251 
uCou¡
 = 20;

252 c⁄° 
u8
* 
§c8
 = (c⁄° u8*)
§c
 + (
uClù_§c
<<1) + uClip_src;

254 
d°16
[ 0] = 
	`RGB24
(
§c8
[ 0], src8[ 1], src8[ 2] );

255 
d°16
[ 1] = 
	`RGB24
(
§c8
[ 3], src8[ 4], src8[ 5] );

256 
d°16
[ 2] = 
	`RGB24
(
§c8
[ 6], src8[ 7], src8[ 8] );

257 
d°16
[ 3] = 
	`RGB24
(
§c8
[ 9], src8[10], src8[11] );

258 
d°16
[ 4] = 
	`RGB24
(
§c8
[12], src8[13], src8[14] );

259 
d°16
[ 5] = 
	`RGB24
(
§c8
[15], src8[16], src8[17] );

260 
d°16
[ 6] = 
	`RGB24
(
§c8
[18], src8[19], src8[20] );

261 
d°16
[ 7] = 
	`RGB24
(
§c8
[21], src8[22], src8[23] );

263 
d°16
[ 8] = 
	`RGB24
(
§c8
[27], src8[28], src8[29] );

264 
d°16
[ 9] = 
	`RGB24
(
§c8
[30], src8[31], src8[32] );

265 
d°16
[10] = 
	`RGB24
(
§c8
[33], src8[34], src8[35] );

266 
d°16
[11] = 
	`RGB24
(
§c8
[36], src8[37], src8[38] );

267 
d°16
[12] = 
	`RGB24
(
§c8
[39], src8[40], src8[41] );

268 
d°16
[13] = 
	`RGB24
(
§c8
[42], src8[43], src8[44] );

269 
d°16
[14] = 
	`RGB24
(
§c8
[45], src8[46], src8[47] );

270 
d°16
[15] = 
	`RGB24
(
§c8
[48], src8[49], src8[50] );

271 
d°16
 += 16;

272 
§c8
 += 54;

273 }--
uCou¡
);

275 
	}
}

277 
INLINE
 
	$GPU_BlôWWDWW
(c⁄° * 
§c
, 
u16
* 
d°16
, 
u32
 
isRGB24
)

279 
u32
 
uCou¡
;

280 if(
isRGB24
 == 0)

282 #i‚de‡
USE_BGR15


283 
uCou¡
 = 32;

284 c⁄° 
u16
* 
§c16
 = (c⁄° u16*Ë
§c
;

286 
d°16
[ 0] = 
	`RGB16
(
§c16
[0]);

287 
d°16
[ 1] = 
	`RGB16
(
§c16
[1]);

288 
d°16
[ 2] = dst16[1];

289 
d°16
[ 3] = 
	`RGB16
(
§c16
[2]);

290 
d°16
[ 4] = 
	`RGB16
(
§c16
[3]);

291 
d°16
[ 5] = 
	`RGB16
(
§c16
[4]);

292 
d°16
[ 6] = 
	`RGB16
(
§c16
[5]);

293 
d°16
[ 7] = dst16[6];

294 
d°16
[ 8] = 
	`RGB16
(
§c16
[6]);

295 
d°16
[ 9] = 
	`RGB16
(
§c16
[7]);

296 
d°16
 += 10;

297 
§c16
 += 8;

298 }--
uCou¡
);

300 
uCou¡
 = 64;

301 c⁄° 
u16
* 
§c16
 = (c⁄° u16*Ë
§c
;

303 *
d°16
++ = *
§c16
++;

304 *
d°16
++ = *
§c16
;

305 *
d°16
++ = *
§c16
++;

306 *
d°16
++ = *
§c16
++;

307 *
d°16
++ = *
§c16
++;

308 }--
uCou¡
);

313 
uCou¡
 = 32;

314 c⁄° 
u8
* 
§c8
 = (c⁄° u8*)
§c
;

316 
d°16
[ 0] = 
	`RGB24
(
§c8
[0], src8[ 1], src8[ 2] );

317 
d°16
[ 1] = 
	`RGB24
(
§c8
[3], src8[ 4], src8[ 5] );

318 
d°16
[ 2] = dst16[1];

319 
d°16
[ 3] = 
	`RGB24
(
§c8
[6], src8[ 7], src8[ 8] );

320 
d°16
[ 4] = 
	`RGB24
(
§c8
[9], src8[10], src8[11] );

322 
d°16
[ 5] = 
	`RGB24
(
§c8
[12], src8[13], src8[14] );

323 
d°16
[ 6] = 
	`RGB24
(
§c8
[15], src8[16], src8[17] );

324 
d°16
[ 7] = dst16[6];

325 
d°16
[ 8] = 
	`RGB24
(
§c8
[18], src8[19], src8[20] );

326 
d°16
[ 9] = 
	`RGB24
(
§c8
[21], src8[22], src8[23] );

327 
d°16
 += 10;

328 
§c8
 += 24;

329 }--
uCou¡
);

331 
	}
}

334 
INLINE
 
	$GPU_BlôWS
(c⁄° * 
§c
, 
u16
* 
d°16
, 
u32
 
isRGB24
)

336 
u32
 
uCou¡
;

337 if(
isRGB24
 == 0)

339 #i‚de‡
USE_BGR15


340 
uCou¡
 = 20;

341 c⁄° 
u16
* 
§c16
 = (c⁄° u16*Ë
§c
;

343 
d°16
[ 0] = 
	`RGB16
(
§c16
[0]);

344 
d°16
[ 1] = 
	`RGB16
(
§c16
[2]);

345 
d°16
[ 2] = 
	`RGB16
(
§c16
[4]);

346 
d°16
[ 3] = 
	`RGB16
(
§c16
[6]);

348 
d°16
[ 4] = 
	`RGB16
(
§c16
[8]);

349 
d°16
[ 5] = 
	`RGB16
(
§c16
[10]);

350 
d°16
[ 6] = 
	`RGB16
(
§c16
[12]);

351 
d°16
[ 7] = 
	`RGB16
(
§c16
[14]);

353 
d°16
[ 8] = 
	`RGB16
(
§c16
[16]);

354 
d°16
[ 9] = 
	`RGB16
(
§c16
[18]);

355 
d°16
[10] = 
	`RGB16
(
§c16
[20]);

356 
d°16
[11] = 
	`RGB16
(
§c16
[22]);

358 
d°16
[12] = 
	`RGB16
(
§c16
[24]);

359 
d°16
[13] = 
	`RGB16
(
§c16
[26]);

360 
d°16
[14] = 
	`RGB16
(
§c16
[28]);

361 
d°16
[15] = 
	`RGB16
(
§c16
[30]);

363 
d°16
 += 16;

364 
§c16
 += 32;

365 }--
uCou¡
);

367 
uCou¡
 = 320;

368 c⁄° 
u16
* 
§c16
 = (c⁄° u16*Ë
§c
;

370 *
d°16
++ = *
§c16
; src16+=2;

371 }--
uCou¡
);

376 
uCou¡
 = 20;

377 c⁄° 
u8
* 
§c8
 = (c⁄° u8*Ë
§c
;

379 
d°16
[ 0] = 
	`RGB24
(
§c8
[ 0], src8[ 1], src8[ 2] );

380 
d°16
[ 1] = 
	`RGB24
(
§c8
[ 6], src8[ 7], src8[ 8] );

381 
d°16
[ 2] = 
	`RGB24
(
§c8
[12], src8[13], src8[14] );

382 
d°16
[ 3] = 
	`RGB24
(
§c8
[18], src8[19], src8[20] );

384 
d°16
[ 4] = 
	`RGB24
(
§c8
[24], src8[25], src8[26] );

385 
d°16
[ 5] = 
	`RGB24
(
§c8
[30], src8[31], src8[32] );

386 
d°16
[ 6] = 
	`RGB24
(
§c8
[36], src8[37], src8[38] );

387 
d°16
[ 7] = 
	`RGB24
(
§c8
[42], src8[43], src8[44] );

389 
d°16
[ 8] = 
	`RGB24
(
§c8
[48], src8[49], src8[50] );

390 
d°16
[ 9] = 
	`RGB24
(
§c8
[54], src8[55], src8[56] );

391 
d°16
[10] = 
	`RGB24
(
§c8
[60], src8[61], src8[62] );

392 
d°16
[11] = 
	`RGB24
(
§c8
[66], src8[67], src8[68] );

394 
d°16
[12] = 
	`RGB24
(
§c8
[72], src8[73], src8[74] );

395 
d°16
[13] = 
	`RGB24
(
§c8
[78], src8[79], src8[80] );

396 
d°16
[14] = 
	`RGB24
(
§c8
[84], src8[85], src8[86] );

397 
d°16
[15] = 
	`RGB24
(
§c8
[90], src8[91], src8[92] );

399 
d°16
 += 16;

400 
§c8
 += 96;

401 }--
uCou¡
);

403 
	}
}

	@plugins/gpu_unai/gpu_command.h

22 
INLINE
 
	$gpuSëTextuª
(
u16
 
çage
)

24 
u32
 
ç
;

25 
u32
 
tx
, 
ty
;

26 
GPU_GP1
 = (GPU_GP1 & ~0x1FFË| (
çage
 & 0x1FF);

28 
TextuªWödow
[0]&= ~TextureWindow[2];

29 
TextuªWödow
[1]&= ~TextureWindow[3];

31 
ç
 = (
çage
 >> 7) & 3;

32 
tx
 = (
çage
 & 0x0F) << 6;

33 
ty
 = (
çage
 & 0x10) << 4;

34 i‡(
ç
 == 3)Åp = 2;

36 
tx
 +(
TextuªWödow
[0] >> (2 - 
ç
));

37 
ty
 +
TextuªWödow
[1];

39 
BLEND_MODE
 = (((
çage
>>5)&0x3) ) << 3;

40 
TEXT_MODE
 = (((
çage
>>7)&0x3) + 1 ) << 5;

42 
TBA
 = &((
u16
*)
GPU_FømeBuf„r
)[
	`FRAME_OFFSET
(
tx
, 
ty
)];

44 
	}
}

47 
INLINE
 
	$gpuSëCLUT
(
u16
 
˛ut
)

49 
CBA
 = &((
u16
*)
GPU_FømeBuf„r
)[(
˛ut
 & 0x7FFF) << 4];

50 
	}
}

52 #ifde‡ 
ENABLE_GPU_NULL_SUPPORT


53 
	#NULL_GPU
(Ë

	)

55 
	#NULL_GPU
()

	)

58 #ifde‡ 
ENABLE_GPU_LOG_SUPPORT


59 
	#DO_LOG
(
ex¥
Ë
¥ötf
 
	)
expr

61 
	#DO_LOG
(
ex¥
Ë{}

	)

64 
	#BÀndög
 (((
PRIM
&0x2)&&(
bÀnd
))?(PRIM&0x2):0)

	)

65 
	#BÀndög_Mode
 (((
PRIM
&0x2)&&(
bÀnd
))?
BLEND_MODE
:0)

	)

66 
	#Lightög
 (((~
PRIM
)&0x1)&&(
light
))

	)

68 
	$gpuSídPackëFun˘i⁄
(c⁄° 
PRIM
)

72 
PRIM
)

75 
	`NULL_GPU
();

76 
	`gpuCÀ¨Image
();

77 
	`DO_LOG
(("gpuCÀ¨Image(0x%x)\n",
PRIM
));

83 i‡(!
isSkù
)

85 
	`NULL_GPU
();

86 
	`gpuDøwF3
(
gpuPﬁyS∑nDrivîs
 [
BÀndög_Mode
 | 
Maskög
 | 
BÀndög
 | 
PixñMSB
]);

87 
	`DO_LOG
(("gpuDøwF3(0x%x)\n",
PRIM
));

94 i‡(!
isSkù
)

96 
	`NULL_GPU
();

97 
	`gpuSëCLUT
 (
PackëBuf„r
.
U4
[2] >> 16);

98 
	`gpuSëTextuª
 (
PackëBuf„r
.
U4
[4] >> 16);

99 i‡((
PackëBuf„r
.
U1
[0]>0x5F) && (PacketBuffer.U1[1]>0x5F) && (PacketBuffer.U1[2]>0x5F))

100 
	`gpuDøwFT3
(
gpuPﬁyS∑nDrivîs
 [
BÀndög_Mode
 | 
TEXT_MODE
 | 
Maskög
 | 
BÀndög
 | 
PixñMSB
]);

102 
	`gpuDøwFT3
(
gpuPﬁyS∑nDrivîs
 [
BÀndög_Mode
 | 
TEXT_MODE
 | 
Maskög
 | 
BÀndög
 | 
Lightög
 | 
PixñMSB
]);

103 
	`DO_LOG
(("gpuDøwFT3(0x%x)\n",
PRIM
));

110 i‡(!
isSkù
)

112 
	`NULL_GPU
();

113 c⁄° 
PP
 
gpuPﬁyS∑nDrivî
 = 
gpuPﬁyS∑nDrivîs
 [
BÀndög_Mode
 | 
Maskög
 | 
BÀndög
 | 
PixñMSB
];

115 
	`gpuDøwF3
(
gpuPﬁyS∑nDrivî
);

116 
PackëBuf„r
.
U4
[1] = PacketBuffer.U4[4];

118 
	`gpuDøwF3
(
gpuPﬁyS∑nDrivî
);

119 
	`DO_LOG
(("gpuDøwF4(0x%x)\n",
PRIM
));

126 i‡(!
isSkù
)

128 
	`NULL_GPU
();

129 
	`gpuSëCLUT
 (
PackëBuf„r
.
U4
[2] >> 16);

130 
	`gpuSëTextuª
 (
PackëBuf„r
.
U4
[4] >> 16);

131 
PP
 
gpuPﬁyS∑nDrivî
;

132 i‡((
PackëBuf„r
.
U1
[0]>0x5F) && (PacketBuffer.U1[1]>0x5F) && (PacketBuffer.U1[2]>0x5F))

133 
gpuPﬁyS∑nDrivî
 = 
gpuPﬁyS∑nDrivîs
 [
BÀndög_Mode
 | 
TEXT_MODE
 | 
Maskög
 | 
BÀndög
 | 
PixñMSB
];

135 
gpuPﬁyS∑nDrivî
 = 
gpuPﬁyS∑nDrivîs
 [
BÀndög_Mode
 | 
TEXT_MODE
 | 
Maskög
 | 
BÀndög
 | 
Lightög
 | 
PixñMSB
];

137 
	`gpuDøwFT3
(
gpuPﬁyS∑nDrivî
);

138 
PackëBuf„r
.
U4
[1] = PacketBuffer.U4[7];

139 
PackëBuf„r
.
U4
[2] = PacketBuffer.U4[8];

141 
	`gpuDøwFT3
(
gpuPﬁyS∑nDrivî
);

142 
	`DO_LOG
(("gpuDøwFT4(0x%x)\n",
PRIM
));

149 i‡(!
isSkù
)

151 
	`NULL_GPU
();

152 
	`gpuDøwG3
(
gpuPﬁyS∑nDrivîs
 [
BÀndög_Mode
 | 
Maskög
 | 
BÀndög
 | 129 | 
PixñMSB
]);

153 
	`DO_LOG
(("gpuDøwG3(0x%x)\n",
PRIM
));

160 i‡(!
isSkù
)

162 
	`NULL_GPU
();

163 
	`gpuSëCLUT
 (
PackëBuf„r
.
U4
[2] >> 16);

164 
	`gpuSëTextuª
 (
PackëBuf„r
.
U4
[5] >> 16);

165 
	`gpuDøwGT3
(
gpuPﬁyS∑nDrivîs
 [
BÀndög_Mode
 | 
TEXT_MODE
 | 
Maskög
 | 
BÀndög
 | ((
Lightög
)?129:0Ë| 
PixñMSB
]);

166 
	`DO_LOG
(("gpuDøwGT3(0x%x)\n",
PRIM
));

173 i‡(!
isSkù
)

175 
	`NULL_GPU
();

176 c⁄° 
PP
 
gpuPﬁyS∑nDrivî
 = 
gpuPﬁyS∑nDrivîs
 [
BÀndög_Mode
 | 
Maskög
 | 
BÀndög
 | 129 | 
PixñMSB
];

178 
	`gpuDøwG3
(
gpuPﬁyS∑nDrivî
);

179 
PackëBuf„r
.
U4
[0] = PacketBuffer.U4[6];

180 
PackëBuf„r
.
U4
[1] = PacketBuffer.U4[7];

182 
	`gpuDøwG3
(
gpuPﬁyS∑nDrivî
);

183 
	`DO_LOG
(("gpuDøwG4(0x%x)\n",
PRIM
));

190 i‡(!
isSkù
)

192 
	`NULL_GPU
();

193 
	`gpuSëCLUT
 (
PackëBuf„r
.
U4
[2] >> 16);

194 
	`gpuSëTextuª
 (
PackëBuf„r
.
U4
[5] >> 16);

195 c⁄° 
PP
 
gpuPﬁyS∑nDrivî
 = 
gpuPﬁyS∑nDrivîs
 [
BÀndög_Mode
 | 
TEXT_MODE
 | 
Maskög
 | 
BÀndög
 | ((
Lightög
)?129:0Ë| 
PixñMSB
];

197 
	`gpuDøwGT3
(
gpuPﬁyS∑nDrivî
);

198 
PackëBuf„r
.
U4
[0] = PacketBuffer.U4[9];

199 
PackëBuf„r
.
U4
[1] = PacketBuffer.U4[10];

200 
PackëBuf„r
.
U4
[2] = PacketBuffer.U4[11];

202 
	`gpuDøwGT3
(
gpuPﬁyS∑nDrivî
);

203 
	`DO_LOG
(("gpuDøwGT4(0x%x)\n",
PRIM
));

210 i‡(!
isSkù
)

212 
	`NULL_GPU
();

213 
	`gpuDøwLF
(
gpuPixñDrivîs
 [ (
BÀndög_Mode
 | 
Maskög
 | 
BÀndög
 | (
PixñMSB
>>3)) >> 1]);

214 
	`DO_LOG
(("gpuDøwLF(0x%x)\n",
PRIM
));

225 i‡(!
isSkù
)

227 
	`NULL_GPU
();

228 
	`gpuDøwLF
(
gpuPixñDrivîs
 [ (
BÀndög_Mode
 | 
Maskög
 | 
BÀndög
 | (
PixñMSB
>>3)) >> 1]);

229 
	`DO_LOG
(("gpuDøwLF(0x%x)\n",
PRIM
));

231 i‡((
PackëBuf„r
.
U4
[3] & 0xF000F000) != 0x50005000)

233 
PackëBuf„r
.
U4
[1] = PacketBuffer.U4[2];

234 
PackëBuf„r
.
U4
[2] = PacketBuffer.U4[3];

235 
PackëCou¡
 = 1;

236 
PackëIndex
 = 3;

243 i‡(!
isSkù
)

245 
	`NULL_GPU
();

246 
	`gpuDøwLG
(
gpuPixñDrivîs
 [ (
BÀndög_Mode
 | 
Maskög
 | 
BÀndög
 | (
PixñMSB
>>3)) >> 1]);

247 
	`DO_LOG
(("gpuDøwLG(0x%x)\n",
PRIM
));

258 i‡(!
isSkù
)

260 
	`NULL_GPU
();

261 
	`gpuDøwLG
(
gpuPixñDrivîs
 [ (
BÀndög_Mode
 | 
Maskög
 | 
BÀndög
 | (
PixñMSB
>>3)) >> 1]);

262 
	`DO_LOG
(("gpuDøwLG(0x%x)\n",
PRIM
));

264 i‡((
PackëBuf„r
.
U4
[4] & 0xF000F000) != 0x50005000)

266 
PackëBuf„r
.
U1
[3 + (2 * 4)] = PacketBuffer.U1[3 + (0 * 4)];

267 
PackëBuf„r
.
U4
[0] = PacketBuffer.U4[2];

268 
PackëBuf„r
.
U4
[1] = PacketBuffer.U4[3];

269 
PackëBuf„r
.
U4
[2] = PacketBuffer.U4[4];

270 
PackëCou¡
 = 2;

271 
PackëIndex
 = 3;

278 i‡(!
isSkù
)

280 
	`NULL_GPU
();

281 
	`gpuDøwT
(
gpuTûeS∑nDrivîs
 [
BÀndög_Mode
 | 
Maskög
 | 
BÀndög
 | (
PixñMSB
>>3)]);

282 
	`DO_LOG
(("gpuDøwT(0x%x)\n",
PRIM
));

289 i‡(!
isSkù
)

291 
	`NULL_GPU
();

292 
	`gpuSëCLUT
 (
PackëBuf„r
.
U4
[2] >> 16);

293 
	`gpuSëTextuª
 (
GPU_GP1
);

294 i‡((
PackëBuf„r
.
U1
[0]>0x5F) && (PacketBuffer.U1[1]>0x5F) && (PacketBuffer.U1[2]>0x5F))

295 
	`gpuDøwS
(
gpuS¥ôeS∑nDrivîs
 [
BÀndög_Mode
 | 
TEXT_MODE
 | 
Maskög
 | 
BÀndög
 | (
íabÀAbbeyHack
<<7Ë| 
PixñMSB
]);

297 
	`gpuDøwS
(
gpuS¥ôeS∑nDrivîs
 [
BÀndög_Mode
 | 
TEXT_MODE
 | 
Maskög
 | 
BÀndög
 | 
Lightög
 | (
íabÀAbbeyHack
<<7Ë| 
PixñMSB
]);

298 
	`DO_LOG
(("gpuDøwS(0x%x)\n",
PRIM
));

305 i‡(!
isSkù
)

307 
	`NULL_GPU
();

308 
PackëBuf„r
.
U4
[2] = 0x00010001;

309 
	`gpuDøwT
(
gpuTûeS∑nDrivîs
 [
BÀndög_Mode
 | 
Maskög
 | 
BÀndög
 | (
PixñMSB
>>3)]);

310 
	`DO_LOG
(("gpuDøwT(0x%x)\n",
PRIM
));

317 i‡(!
isSkù
)

319 
	`NULL_GPU
();

320 
PackëBuf„r
.
U4
[2] = 0x00080008;

321 
	`gpuDøwT
(
gpuTûeS∑nDrivîs
 [
BÀndög_Mode
 | 
Maskög
 | 
BÀndög
 | (
PixñMSB
>>3)]);

322 
	`DO_LOG
(("gpuDøwT(0x%x)\n",
PRIM
));

329 i‡(!
isSkù
)

331 
	`NULL_GPU
();

332 
PackëBuf„r
.
U4
[3] = 0x00080008;

333 
	`gpuSëCLUT
 (
PackëBuf„r
.
U4
[2] >> 16);

334 
	`gpuSëTextuª
 (
GPU_GP1
);

335 i‡((
PackëBuf„r
.
U1
[0]>0x5F) && (PacketBuffer.U1[1]>0x5F) && (PacketBuffer.U1[2]>0x5F))

336 
	`gpuDøwS
(
gpuS¥ôeS∑nDrivîs
 [
BÀndög_Mode
 | 
TEXT_MODE
 | 
Maskög
 | 
BÀndög
 | (
íabÀAbbeyHack
<<7Ë| 
PixñMSB
]);

338 
	`gpuDøwS
(
gpuS¥ôeS∑nDrivîs
 [
BÀndög_Mode
 | 
TEXT_MODE
 | 
Maskög
 | 
BÀndög
 | 
Lightög
 | (
íabÀAbbeyHack
<<7Ë| 
PixñMSB
]);

339 
	`DO_LOG
(("gpuDøwS(0x%x)\n",
PRIM
));

346 i‡(!
isSkù
)

348 
	`NULL_GPU
();

349 
PackëBuf„r
.
U4
[2] = 0x00100010;

350 
	`gpuDøwT
(
gpuTûeS∑nDrivîs
 [
BÀndög_Mode
 | 
Maskög
 | 
BÀndög
 | (
PixñMSB
>>3)]);

351 
	`DO_LOG
(("gpuDøwT(0x%x)\n",
PRIM
));

356 #ifde‡
__¨m__


357 i‡((
GPU_GP1
 & 0x180Ë=0 && (
Maskög
 | 
PixñMSB
) == 0)

359 
	`gpuSëCLUT
 (
PackëBuf„r
.
U4
[2] >> 16);

360 
	`gpuSëTextuª
 (
GPU_GP1
);

361 
	`gpuDøwS16
();

368 i‡(!
isSkù
)

370 
	`NULL_GPU
();

371 
PackëBuf„r
.
U4
[3] = 0x00100010;

372 
	`gpuSëCLUT
 (
PackëBuf„r
.
U4
[2] >> 16);

373 
	`gpuSëTextuª
 (
GPU_GP1
);

374 i‡((
PackëBuf„r
.
U1
[0]>0x5F) && (PacketBuffer.U1[1]>0x5F) && (PacketBuffer.U1[2]>0x5F))

375 
	`gpuDøwS
(
gpuS¥ôeS∑nDrivîs
 [
BÀndög_Mode
 | 
TEXT_MODE
 | 
Maskög
 | 
BÀndög
 | (
íabÀAbbeyHack
<<7Ë| 
PixñMSB
]);

377 
	`gpuDøwS
(
gpuS¥ôeS∑nDrivîs
 [
BÀndög_Mode
 | 
TEXT_MODE
 | 
Maskög
 | 
BÀndög
 | 
Lightög
 | (
íabÀAbbeyHack
<<7Ë| 
PixñMSB
]);

378 
	`DO_LOG
(("gpuDøwS(0x%x)\n",
PRIM
));

382 
	`gpuMoveImage
();

383 
	`DO_LOG
(("gpuMoveImage(0x%x)\n",
PRIM
));

386 
	`gpuLﬂdImage
();

387 #i‚de‡
isSkù


388 i‡(
Æt_Âs
Ë
isSkù
=
Ál£
;

390 
	`DO_LOG
(("gpuLﬂdImage(0x%x)\n",
PRIM
));

393 
	`gpuSt‹eImage
();

394 
	`DO_LOG
(("gpuSt‹eImage(0x%x)\n",
PRIM
));

398 c⁄° 
u32
 
ãmp
 = 
PackëBuf„r
.
U4
[0];

399 
GPU_GP1
 = (GPU_GP1 & ~0x000007FFË| (
ãmp
 & 0x000007FF);

400 
	`gpuSëTextuª
(
ãmp
);

401 
	`DO_LOG
(("gpuSëTextuª(0x%x)\n",
PRIM
));

406 c⁄° 
u8
 
TextuªMask
[32] = {

410 c⁄° 
u32
 
ãmp
 = 
PackëBuf„r
.
U4
[0];

411 
TextuªWödow
[0] = ((
ãmp
 >> 10) & 0x1F) << 3;

412 
TextuªWödow
[1] = ((
ãmp
 >> 15) & 0x1F) << 3;

413 
TextuªWödow
[2] = 
TextuªMask
[(
ãmp
 >> 0) & 0x1F];

414 
TextuªWödow
[3] = 
TextuªMask
[(
ãmp
 >> 5) & 0x1F];

415 
	`gpuSëTextuª
(
GPU_GP1
);

417 
	`DO_LOG
(("TextuªWödow(0x%x)\n",
PRIM
));

422 c⁄° 
u32
 
ãmp
 = 
PackëBuf„r
.
U4
[0];

423 
DøwögAªa
[0] = 
ãmp
 & 0x3FF;

424 
DøwögAªa
[1] = (
ãmp
 >> 10) & 0x3FF;

426 
	`DO_LOG
(("DøwögAªa_Pos(0x%x)\n",
PRIM
));

431 c⁄° 
u32
 
ãmp
 = 
PackëBuf„r
.
U4
[0];

432 
DøwögAªa
[2] = (
ãmp
 & 0x3FF) + 1;

433 
DøwögAªa
[3] = ((
ãmp
 >> 10) & 0x3FF) + 1;

435 
	`DO_LOG
(("DøwögAªa_Size(0x%x)\n",
PRIM
));

440 c⁄° 
u32
 
ãmp
 = 
PackëBuf„r
.
U4
[0];

441 
DøwögOff£t
[0] = ((
s32
)
ãmp
<<(32-11))>>(32-11);

442 
DøwögOff£t
[1] = ((
s32
)
ãmp
<<(32-22))>>(32-11);

444 
	`DO_LOG
(("DøwögOff£t(0x%x)\n",
PRIM
));

449 c⁄° 
u32
 
ãmp
 = 
PackëBuf„r
.
U4
[0];

451 
Maskög
 = (
ãmp
 & 0x2) << 1;

452 
PixñMSB
 =(
ãmp
 & 0x1) << 8;

453 
	`DO_LOG
(("SëMask(0x%x)\n",
PRIM
));

457 
	}
}

	@plugins/gpu_unai/gpu_fixedpoint.h

21 #i‚de‡
FIXED_H


22 
	#FIXED_H


	)

24 
	~"¨m_„©uªs.h
"

26 
s32
 
	tfixed
;

28 #ifde‡
GPU_TABLE_10_BITS


29 
	#TABLE_BITS
 10

	)

31 
	#TABLE_BITS
 16

	)

34 
	#FIXED_BITS
 16

	)

36 
	#fixed_ZERO
 ((
fixed
)0)

	)

37 
	#fixed_ONE
 ((
fixed
)1<<
FIXED_BITS
)

	)

38 
	#fixed_TWO
 ((
fixed
)2<<
FIXED_BITS
)

	)

39 
	#fixed_HALF
 ((
fixed
)((1<<
FIXED_BITS
)>>1))

	)

42 
s32
 
	gs_övTabÀ
[(1<<
TABLE_BITS
)];

44 
INLINE
 
fixed
 
	$i2x
(c⁄° 
_x
Ë{  ((_x)<<
FIXED_BITS
); 
	}
}

45 
INLINE
 
fixed
 
	$x2i
(c⁄° 
fixed
 
_x
Ë{  ((_x)>>
FIXED_BITS
); 
	}
}

60 #ifde‡
HAVE_ARMV5


61 
INLINE
 
u32
 
	$Log2
(
u32
 
x
Ë{ u32 
ªs
; 
	`asm
("˛z %0,%1" : "Ù" (ªsË: "r" (x));  32-ªs; 
	}
}

63 
INLINE
 
u32
 
	$Log2
(
u32
 
x
Ë{ u32 
i
 = 0;  ; x > 0; ++i, x >>1);  i - 1; 
	}
}

66 #ifde‡
GPU_TABLE_10_BITS


67 
INLINE
 
	$xInv
 (c⁄° 
fixed
 
_b
, 
s32
& 
iFa˘‹_
, s32& 
iShi·_
)

69 
u32
 
uD
 = (
_b
<0) ? -_b : _b ;

70 
u32
 
uLog
 = 
	`Log2
(
uD
);

71 
uLog
 = uLog>(
TABLE_BITS
-1) ? uLog-(TABLE_BITS-1) : 0;

72 
u32
 
uDí
 = 
uD
>>
uLog
;

73 
iFa˘‹_
 = 
s_övTabÀ
[
uDí
];

74 
iFa˘‹_
 = (
_b
<0) ? -iFactor_ :iFactor_;

75 
iShi·_
 = 15+
uLog
;

76 
	}
}

78 
INLINE
 
	$xInv
 (c⁄° 
fixed
 
_b
, 
s32
& 
iFa˘‹_
, s32& 
iShi·_
)

80 
u32
 
uD
 = (
_b
<0) ? -_b : _b;

81 if(
uD
>1)

83 
u32
 
uLog
 = 
	`Log2
(
uD
);

84 
uLog
 = uLog>(
TABLE_BITS
-1) ? uLog-(TABLE_BITS-1) : 0;

85 
u32
 
uDí
 = (
uD
>>
uLog
)-1;

86 
iFa˘‹_
 = 
s_övTabÀ
[
uDí
];

87 
iFa˘‹_
 = (
_b
<0) ? -iFactor_ :iFactor_;

88 
iShi·_
 = 15+
uLog
;

92 
iFa˘‹_
=
_b
;

93 
iShi·_
 = 0;

95 
	}
}

98 
INLINE
 
fixed
 
	$xInvMulx
 (c⁄° 
fixed
 
_a
, c⁄° 
s32
 
_iFa˘
, c⁄° s32 
_iShi·
)

100 #ifde‡
__¨m__


101 
s64
 
ªs
;

102 
	`asm
 ("smuŒ %Q0, %R0, %1, %2" : "=&r" (
ªs
Ë: "r"(
_a
Ë, "r"(
_iFa˘
));

103  
	`fixed
(
ªs
>>
_iShi·
);

105  
	`fixed
–((
s64
)(
_a
)*(s64)(
_iFa˘
))>>(
_iShi·
) );

107 
	}
}

109 
INLINE
 
fixed
 
	$xLoDivx
 (c⁄° 
fixed
 
_a
, c⁄° fixed 
_b
)

111 
s32
 
iFa˘
, 
iShi·
;

112 
	`xInv
(
_b
, 
iFa˘
, 
iShi·
);

113  
	`xInvMulx
(
_a
, 
iFa˘
, 
iShi·
);

114 
	}
}

117 
	gãm∂©e
<
ty≥«me
 
	gT
>

118 
INLINE
 
T
 
	$Mö2
 (c⁄° 
T
 
_a
, c⁄° T 
_b
Ë{  (_a<_b)?_a:_b; 
	}
}

120 
	gãm∂©e
<
ty≥«me
 
	gT
>

121 
INLINE
 
T
 
	$Mö3
 (c⁄° 
T
 
_a
, c⁄° T 
_b
, c⁄° T 
_c
Ë{  
	`Mö2
(Mö2(_a,_b),_c); 
	}
}

124 
	gãm∂©e
<
ty≥«me
 
	gT
>

125 
INLINE
 
T
 
	$Max2
 (c⁄° 
T
 
_a
, c⁄° T 
_b
Ë{  (_a>_b)?_a:_b; 
	}
}

127 
	gãm∂©e
<
ty≥«me
 
	gT
>

128 
INLINE
 
T
 
	$Max3
 (c⁄° 
T
 
_a
, c⁄° T 
_b
, c⁄° T 
_c
Ë{  
	`Max2
(Max2(_a,_b),_c); 
	}
}

	@plugins/gpu_unai/gpu_inner.h

26 
	#L
 ((
CF
>>0)&1)

	)

27 
	#B
 ((
CF
>>1)&1)

	)

28 
	#M
 ((
CF
>>2)&1)

	)

29 
	#BM
 ((
CF
>>3)&3)

	)

30 
	#TM
 ((
CF
>>5)&3)

	)

31 
	#G
 ((
CF
>>7)&1)

	)

33 
	#AH
 ((
CF
>>7)&1)

	)

35 
	#MB
 ((
CF
>>8)&1)

	)

37 
	~"gpu_ö√r_bÀnd.h
"

38 
	~"gpu_ö√r_light.h
"

42 
	gãm∂©e
<c⁄° 
	gCF
>

43 
INLINE
 
	$gpuPixñFn
(
u16
 *
pixñ
,c⁄° u16 
d©a
)

45 i‡((!
M
)&&(!
B
))

47 if(
MB
Ë{ *
pixñ
 = 
d©a
 | 0x8000; }

48 { *
pixñ
 = 
d©a
; }

50 i‡((
M
)&&(!
B
))

52 i‡(!(*
pixñ
&0x8000))

54 if(
MB
Ë{ *
pixñ
 = 
d©a
 | 0x8000; }

55 { *
pixñ
 = 
d©a
; }

60 
u16
 
uD°
 = *
pixñ
;

61 if(
M
Ë{ i‡(
uD°
&0x8000) ; }

62 
u16
 
uSrc
 = 
d©a
;

63 
u32
 
uMsk
; i‡(
BM
==0) uMsk=0x7BDE;

64 i‡(
BM
==0Ë
	`gpuBÀndög00
(
uSrc
, 
uD°
);

65 i‡(
BM
==1Ë
	`gpuBÀndög01
(
uSrc
, 
uD°
);

66 i‡(
BM
==2Ë
	`gpuBÀndög02
(
uSrc
, 
uD°
);

67 i‡(
BM
==3Ë
	`gpuBÀndög03
(
uSrc
, 
uD°
);

68 if(
MB
Ë{ *
pixñ
 = 
uSrc
 | 0x8000; }

69 { *
pixñ
 = 
uSrc
; }

71 
	}
}

76 (*
	tPD
)(
	tu16
 *
	tpixñ
,c⁄° u16 
	td©a
);

77 c⁄° 
PD
 
gpuPixñDrivîs
[32] =

79 
gpuPixñFn
<0x00<<1>,gpuPixelFn<0x01<<1>,gpuPixelFn<0x02<<1>,gpuPixelFn<0x03<<1>,

80 
NULL
,
gpuPixñFn
<0x05<<1>,NULL,gpuPixelFn<0x07<<1>,

81 
NULL
,
gpuPixñFn
<0x09<<1>,NULL,gpuPixelFn<0x0B<<1>,

82 
NULL
,
gpuPixñFn
<0x0D<<1>,NULL,gpuPixelFn<0x0F<<1>,

84 
gpuPixñFn
<(0x00<<1)|256>,gpuPixelFn<(0x01<<1)|256>,gpuPixelFn<(0x02<<1)|256>,gpuPixelFn<(0x03<<1)|256>,

85 
NULL
,
gpuPixñFn
<(0x05<<1)|256>,NULL,gpuPixelFn<(0x07<<1)|256>,

86 
NULL
,
gpuPixñFn
<(0x09<<1)|256>,NULL,gpuPixelFn<(0x0B<<1)|256>,

87 
NULL
,
gpuPixñFn
<(0x0D<<1)|256>,NULL,gpuPixelFn<(0x0F<<1)|256>

88 
	}
};

93 
	gãm∂©e
<c⁄° 
	gCF
>

94 
INLINE
 
	$gpuTûeS∑nFn
(
u16
 *
pD°
, 
u32
 
cou¡
, u16 
d©a
)

96 i‡((!
M
)&&(!
B
))

98 i‡(
MB
Ë{ 
d©a
 = data | 0x8000; }

99 dÿ{ *
pD°
++ = 
d©a
; } --
cou¡
);

101 i‡((
M
)&&(!
B
))

103 i‡(
MB
Ë{ 
d©a
 = data | 0x8000; }

104 dÿ{ i‡(!(*
pD°
&0x8000)Ë{ *pD° = 
d©a
; }ÖD°++; } --
cou¡
);

108 
u16
 
uSrc
;

109 
u16
 
uD°
;

110 
u32
 
uMsk
; i‡(
BM
==0) uMsk=0x7BDE;

114 
uD°
 = *
pD°
;

115 if(
M
Ë{ i‡(
uD°
&0x8000Ë
ídtûe
; }

116 
uSrc
 = 
d©a
;

119 i‡(
BM
==0Ë
	`gpuBÀndög00
(
uSrc
, 
uD°
);

120 i‡(
BM
==1Ë
	`gpuBÀndög01
(
uSrc
, 
uD°
);

121 i‡(
BM
==2Ë
	`gpuBÀndög02
(
uSrc
, 
uD°
);

122 i‡(
BM
==3Ë
	`gpuBÀndög03
(
uSrc
, 
uD°
);

124 i‡(
MB
Ë{ *
pD°
 = 
uSrc
 | 0x8000; }

125 { *
pD°
 = 
uSrc
; }

126 
ídtûe
: 
pD°
++;

128 --
cou¡
);

130 
	}
}

134 (*
	tPT
)(
	tu16
 *
	tpD°
, 
	tu32
 
	tcou¡
, u16 
	td©a
);

135 c⁄° 
PT
 
gpuTûeS∑nDrivîs
[64] =

137 
gpuTûeS∑nFn
<0x00>,
NULL
,gpuTileSpanFn<0x02>,NULL, gpuTileSpanFn<0x04>,NULL,gpuTileSpanFn<0x06>,NULL, NULL,NULL,gpuTileSpanFn<0x0A>,NULL, NULL,NULL,gpuTileSpanFn<0x0E>,NULL,

138 
NULL
,NULL,
gpuTûeS∑nFn
<0x12>,NULL, NULL,NULL,gpuTileSpanFn<0x16>,NULL, NULL,NULL,gpuTileSpanFn<0x1A>,NULL, NULL,NULL,gpuTileSpanFn<0x1E>,NULL,

140 
gpuTûeS∑nFn
<0x100>,
NULL
,gpuTileSpanFn<0x102>,NULL, gpuTileSpanFn<0x104>,NULL,gpuTileSpanFn<0x106>,NULL, NULL,NULL,gpuTileSpanFn<0x10A>,NULL, NULL,NULL,gpuTileSpanFn<0x10E>,NULL,

141 
NULL
,NULL,
gpuTûeS∑nFn
<0x112>,NULL, NULL,NULL,gpuTileSpanFn<0x116>,NULL, NULL,NULL,gpuTileSpanFn<0x11A>,NULL, NULL,NULL,gpuTileSpanFn<0x11E>,NULL,

142 
	}
};

147 
	gãm∂©e
<c⁄° 
	gCF
>

148 
INLINE
 
	$gpuS¥ôeS∑nFn
(
u16
 *
pD°
, 
u32
 
cou¡
, u32 
u0
, c⁄° u32 
mask
)

150 
u16
 
uSrc
;

151 
u16
 
uD°
;

152 c⁄° 
u16
* 
pTxt
 = 
TBA
+(
u0
&~0x1ff); u0=u0&0x1ff;

153 c⁄° 
u16
 *
_CBA
; if(
TM
!=3Ë_CBA=
CBA
;

154 
u32
 
lCﬁ
; if(
L
Ë{ÜCﬁ = ((u32)(
b4
<< 2)&(0x03ff)Ë| ((u32)(
g4
<<13)&(0x07ff<<10)Ë| ((u32)(
r4
<<24)&(0x07ff<<21)); }

155 
u8
 
rgb
; i‡(
TM
==1Ërgb = ((u8*)
pTxt
)[
u0
>>1];

156 
u32
 
uMsk
; i‡((
B
)&&(
BM
==0)) uMsk=0x7BDE;

161 if(
M
Ë{ 
uD°
 = *
pD°
; i‡(uD°&0x8000Ë{ 
u0
=(u0+1)&
mask
; 
íd•rôe
; } }

164 i‡(
TM
==1Ë{ i‡(!(
u0
&1)Ë
rgb
 = ((
u8
*)
pTxt
)[u0>>1]; 
uSrc
 = 
_CBA
[‘gb>>((u0&1)<<2))&0xf]; u0=(u0+1)&
mask
; }

165 i‡(
TM
==2Ë{ 
uSrc
 = 
_CBA
[((
u8
*)
pTxt
)[
u0
]]; u0=(u0+1)&
mask
; }

166 i‡(
TM
==3Ë{ 
uSrc
 = 
pTxt
[
u0
]; u0=(u0+1)&
mask
; }

167 if(!
AH
Ë{ i‡(!
uSrc
Ë
íd•rôe
; }

170 if(
B
)

172 if(
uSrc
&0x8000)

175 if(
L
Ë{ 
	`gpuLightögTXT
(
uSrc
, 
lCﬁ
); }

177 if(!
M
Ë{ 
uD°
 = *
pD°
; }

178 i‡(
BM
==0Ë
	`gpuBÀndög00
(
uSrc
, 
uD°
);

179 i‡(
BM
==1Ë
	`gpuBÀndög01
(
uSrc
, 
uD°
);

180 i‡(
BM
==2Ë
	`gpuBÀndög02
(
uSrc
, 
uD°
);

181 i‡(
BM
==3Ë
	`gpuBÀndög03
(
uSrc
, 
uD°
);

186 if(
L
Ë{ 
	`gpuLightögTXT
(
uSrc
, 
lCﬁ
); }

192 if(
L
Ë{ 
	`gpuLightögTXT
(
uSrc
, 
lCﬁ
); } 

193 { if(!
MB
Ë
uSrc
&= 0x7fff; }

196 i‡(
MB
Ë{ *
pD°
 = 
uSrc
 | 0x8000; }

197 { *
pD°
 = 
uSrc
; }

199 
íd•rôe
: 
pD°
++;

201 --
cou¡
);

202 
	}
}

207 (*
	tPS
)(
	tu16
 *
	tpD°
, 
	tu32
 
	tcou¡
, u32 
	tu0
, c⁄° u32 
	tmask
);

208 c⁄° 
PS
 
gpuS¥ôeS∑nDrivîs
[512] =

210 
NULL
,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,

211 
NULL
,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,

212 
gpuS¥ôeS∑nFn
<0x20>,gpuS¥ôeS∑nFn<0x21>,gpuS¥ôeS∑nFn<0x22>,gpuS¥ôeS∑nFn<0x23>, gpuS¥ôeS∑nFn<0x24>,gpuS¥ôeS∑nFn<0x25>,gpuS¥ôeS∑nFn<0x26>,gpuS¥ôeS∑nFn<0x27>, 
NULL
,NULL,gpuSpriteSpanFn<0x2A>,gpuSpriteSpanFn<0x2B>, NULL,NULL,gpuSpriteSpanFn<0x2E>,gpuSpriteSpanFn<0x2F>,

213 
NULL
,NULL,
gpuS¥ôeS∑nFn
<0x32>,gpuSpriteSpanFn<0x33>, NULL,NULL,gpuSpriteSpanFn<0x36>,gpuSpriteSpanFn<0x37>, NULL,NULL,gpuSpriteSpanFn<0x3A>,gpuSpriteSpanFn<0x3B>, NULL,NULL,gpuSpriteSpanFn<0x3E>,gpuSpriteSpanFn<0x3F>,

214 
gpuS¥ôeS∑nFn
<0x40>,gpuS¥ôeS∑nFn<0x41>,gpuS¥ôeS∑nFn<0x42>,gpuS¥ôeS∑nFn<0x43>, gpuS¥ôeS∑nFn<0x44>,gpuS¥ôeS∑nFn<0x45>,gpuS¥ôeS∑nFn<0x46>,gpuS¥ôeS∑nFn<0x47>, 
NULL
,NULL,gpuSpriteSpanFn<0x4A>,gpuSpriteSpanFn<0x4B>, NULL,NULL,gpuSpriteSpanFn<0x4E>,gpuSpriteSpanFn<0x4F>,

215 
NULL
,NULL,
gpuS¥ôeS∑nFn
<0x52>,gpuSpriteSpanFn<0x53>, NULL,NULL,gpuSpriteSpanFn<0x56>,gpuSpriteSpanFn<0x57>, NULL,NULL,gpuSpriteSpanFn<0x5A>,gpuSpriteSpanFn<0x5B>, NULL,NULL,gpuSpriteSpanFn<0x5E>,gpuSpriteSpanFn<0x5F>,

216 
gpuS¥ôeS∑nFn
<0x60>,gpuS¥ôeS∑nFn<0x61>,gpuS¥ôeS∑nFn<0x62>,gpuS¥ôeS∑nFn<0x63>, gpuS¥ôeS∑nFn<0x64>,gpuS¥ôeS∑nFn<0x65>,gpuS¥ôeS∑nFn<0x66>,gpuS¥ôeS∑nFn<0x67>, 
NULL
,NULL,gpuSpriteSpanFn<0x6A>,gpuSpriteSpanFn<0x6B>, NULL,NULL,gpuSpriteSpanFn<0x6E>,gpuSpriteSpanFn<0x6F>,

217 
NULL
,NULL,
gpuS¥ôeS∑nFn
<0x72>,gpuSpriteSpanFn<0x73>, NULL,NULL,gpuSpriteSpanFn<0x76>,gpuSpriteSpanFn<0x77>, NULL,NULL,gpuSpriteSpanFn<0x7A>,gpuSpriteSpanFn<0x7B>, NULL,NULL,gpuSpriteSpanFn<0x7E>,gpuSpriteSpanFn<0x7F>,

219 
NULL
,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,

220 
NULL
,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,

221 
gpuS¥ôeS∑nFn
<0xa0>,gpuS¥ôeS∑nFn<0xa1>,gpuS¥ôeS∑nFn<0xa2>,gpuS¥ôeS∑nFn<0xa3>, gpuS¥ôeS∑nFn<0xa4>,gpuS¥ôeS∑nFn<0xa5>,gpuS¥ôeS∑nFn<0xa6>,gpuS¥ôeS∑nFn<0xa7>, 
NULL
,NULL,gpuSpriteSpanFn<0xaA>,gpuSpriteSpanFn<0xaB>, NULL,NULL,gpuSpriteSpanFn<0xaE>,gpuSpriteSpanFn<0xaF>,

222 
NULL
,NULL,
gpuS¥ôeS∑nFn
<0xb2>,gpuSpriteSpanFn<0xb3>, NULL,NULL,gpuSpriteSpanFn<0xb6>,gpuSpriteSpanFn<0xb7>, NULL,NULL,gpuSpriteSpanFn<0xbA>,gpuSpriteSpanFn<0xbB>, NULL,NULL,gpuSpriteSpanFn<0xbE>,gpuSpriteSpanFn<0xbF>,

223 
gpuS¥ôeS∑nFn
<0xc0>,gpuS¥ôeS∑nFn<0xc1>,gpuS¥ôeS∑nFn<0xc2>,gpuS¥ôeS∑nFn<0xc3>, gpuS¥ôeS∑nFn<0xc4>,gpuS¥ôeS∑nFn<0xc5>,gpuS¥ôeS∑nFn<0xc6>,gpuS¥ôeS∑nFn<0xc7>, 
NULL
,NULL,gpuSpriteSpanFn<0xcA>,gpuSpriteSpanFn<0xcB>, NULL,NULL,gpuSpriteSpanFn<0xcE>,gpuSpriteSpanFn<0xcF>,

224 
NULL
,NULL,
gpuS¥ôeS∑nFn
<0xd2>,gpuSpriteSpanFn<0xd3>, NULL,NULL,gpuSpriteSpanFn<0xd6>,gpuSpriteSpanFn<0xd7>, NULL,NULL,gpuSpriteSpanFn<0xdA>,gpuSpriteSpanFn<0xdB>, NULL,NULL,gpuSpriteSpanFn<0xdE>,gpuSpriteSpanFn<0xdF>,

225 
gpuS¥ôeS∑nFn
<0xe0>,gpuS¥ôeS∑nFn<0xe1>,gpuS¥ôeS∑nFn<0xe2>,gpuS¥ôeS∑nFn<0xe3>, gpuS¥ôeS∑nFn<0xe4>,gpuS¥ôeS∑nFn<0xe5>,gpuS¥ôeS∑nFn<0xe6>,gpuS¥ôeS∑nFn<0xe7>, 
NULL
,NULL,gpuSpriteSpanFn<0xeA>,gpuSpriteSpanFn<0xeB>, NULL,NULL,gpuSpriteSpanFn<0xeE>,gpuSpriteSpanFn<0xeF>,

226 
NULL
,NULL,
gpuS¥ôeS∑nFn
<0xf2>,gpuSpriteSpanFn<0xf3>, NULL,NULL,gpuSpriteSpanFn<0xf6>,gpuSpriteSpanFn<0xf7>, NULL,NULL,gpuSpriteSpanFn<0xfA>,gpuSpriteSpanFn<0xfB>, NULL,NULL,gpuSpriteSpanFn<0xfE>,gpuSpriteSpanFn<0xfF>,

228 
NULL
,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,

229 
NULL
,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,

230 
gpuS¥ôeS∑nFn
<0x120>,gpuS¥ôeS∑nFn<0x121>,gpuS¥ôeS∑nFn<0x122>,gpuS¥ôeS∑nFn<0x123>, gpuS¥ôeS∑nFn<0x124>,gpuS¥ôeS∑nFn<0x125>,gpuS¥ôeS∑nFn<0x126>,gpuS¥ôeS∑nFn<0x127>, 
NULL
,NULL,gpuSpriteSpanFn<0x12A>,gpuSpriteSpanFn<0x12B>, NULL,NULL,gpuSpriteSpanFn<0x12E>,gpuSpriteSpanFn<0x12F>,

231 
NULL
,NULL,
gpuS¥ôeS∑nFn
<0x132>,gpuSpriteSpanFn<0x133>, NULL,NULL,gpuSpriteSpanFn<0x136>,gpuSpriteSpanFn<0x137>, NULL,NULL,gpuSpriteSpanFn<0x13A>,gpuSpriteSpanFn<0x13B>, NULL,NULL,gpuSpriteSpanFn<0x13E>,gpuSpriteSpanFn<0x13F>,

232 
gpuS¥ôeS∑nFn
<0x140>,gpuS¥ôeS∑nFn<0x141>,gpuS¥ôeS∑nFn<0x142>,gpuS¥ôeS∑nFn<0x143>, gpuS¥ôeS∑nFn<0x144>,gpuS¥ôeS∑nFn<0x145>,gpuS¥ôeS∑nFn<0x146>,gpuS¥ôeS∑nFn<0x147>, 
NULL
,NULL,gpuSpriteSpanFn<0x14A>,gpuSpriteSpanFn<0x14B>, NULL,NULL,gpuSpriteSpanFn<0x14E>,gpuSpriteSpanFn<0x14F>,

233 
NULL
,NULL,
gpuS¥ôeS∑nFn
<0x152>,gpuSpriteSpanFn<0x153>, NULL,NULL,gpuSpriteSpanFn<0x156>,gpuSpriteSpanFn<0x157>, NULL,NULL,gpuSpriteSpanFn<0x15A>,gpuSpriteSpanFn<0x15B>, NULL,NULL,gpuSpriteSpanFn<0x15E>,gpuSpriteSpanFn<0x15F>,

234 
gpuS¥ôeS∑nFn
<0x160>,gpuS¥ôeS∑nFn<0x161>,gpuS¥ôeS∑nFn<0x162>,gpuS¥ôeS∑nFn<0x163>, gpuS¥ôeS∑nFn<0x164>,gpuS¥ôeS∑nFn<0x165>,gpuS¥ôeS∑nFn<0x166>,gpuS¥ôeS∑nFn<0x167>, 
NULL
,NULL,gpuSpriteSpanFn<0x16A>,gpuSpriteSpanFn<0x16B>, NULL,NULL,gpuSpriteSpanFn<0x16E>,gpuSpriteSpanFn<0x16F>,

235 
NULL
,NULL,
gpuS¥ôeS∑nFn
<0x172>,gpuSpriteSpanFn<0x173>, NULL,NULL,gpuSpriteSpanFn<0x176>,gpuSpriteSpanFn<0x177>, NULL,NULL,gpuSpriteSpanFn<0x17A>,gpuSpriteSpanFn<0x17B>, NULL,NULL,gpuSpriteSpanFn<0x17E>,gpuSpriteSpanFn<0x17F>,

237 
NULL
,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,

238 
NULL
,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,

239 
gpuS¥ôeS∑nFn
<0x1a0>,gpuS¥ôeS∑nFn<0x1a1>,gpuS¥ôeS∑nFn<0x1a2>,gpuS¥ôeS∑nFn<0x1a3>, gpuS¥ôeS∑nFn<0x1a4>,gpuS¥ôeS∑nFn<0x1a5>,gpuS¥ôeS∑nFn<0x1a6>,gpuS¥ôeS∑nFn<0x1a7>, 
NULL
,NULL,gpuSpriteSpanFn<0x1aA>,gpuSpriteSpanFn<0x1aB>, NULL,NULL,gpuSpriteSpanFn<0x1aE>,gpuSpriteSpanFn<0x1aF>,

240 
NULL
,NULL,
gpuS¥ôeS∑nFn
<0x1b2>,gpuSpriteSpanFn<0x1b3>, NULL,NULL,gpuSpriteSpanFn<0x1b6>,gpuSpriteSpanFn<0x1b7>, NULL,NULL,gpuSpriteSpanFn<0x1bA>,gpuSpriteSpanFn<0x1bB>, NULL,NULL,gpuSpriteSpanFn<0x1bE>,gpuSpriteSpanFn<0x1bF>,

241 
gpuS¥ôeS∑nFn
<0x1c0>,gpuS¥ôeS∑nFn<0x1c1>,gpuS¥ôeS∑nFn<0x1c2>,gpuS¥ôeS∑nFn<0x1c3>, gpuS¥ôeS∑nFn<0x1c4>,gpuS¥ôeS∑nFn<0x1c5>,gpuS¥ôeS∑nFn<0x1c6>,gpuS¥ôeS∑nFn<0x1c7>, 
NULL
,NULL,gpuSpriteSpanFn<0x1cA>,gpuSpriteSpanFn<0x1cB>, NULL,NULL,gpuSpriteSpanFn<0x1cE>,gpuSpriteSpanFn<0x1cF>,

242 
NULL
,NULL,
gpuS¥ôeS∑nFn
<0x1d2>,gpuSpriteSpanFn<0x1d3>, NULL,NULL,gpuSpriteSpanFn<0x1d6>,gpuSpriteSpanFn<0x1d7>, NULL,NULL,gpuSpriteSpanFn<0x1dA>,gpuSpriteSpanFn<0x1dB>, NULL,NULL,gpuSpriteSpanFn<0x1dE>,gpuSpriteSpanFn<0x1dF>,

243 
gpuS¥ôeS∑nFn
<0x1e0>,gpuS¥ôeS∑nFn<0x1e1>,gpuS¥ôeS∑nFn<0x1e2>,gpuS¥ôeS∑nFn<0x1e3>, gpuS¥ôeS∑nFn<0x1e4>,gpuS¥ôeS∑nFn<0x1e5>,gpuS¥ôeS∑nFn<0x1e6>,gpuS¥ôeS∑nFn<0x1e7>, 
NULL
,NULL,gpuSpriteSpanFn<0x1eA>,gpuSpriteSpanFn<0x1eB>, NULL,NULL,gpuSpriteSpanFn<0x1eE>,gpuSpriteSpanFn<0x1eF>,

244 
NULL
,NULL,
gpuS¥ôeS∑nFn
<0x1f2>,gpuSpriteSpanFn<0x1f3>, NULL,NULL,gpuSpriteSpanFn<0x1f6>,gpuSpriteSpanFn<0x1f7>, NULL,NULL,gpuSpriteSpanFn<0x1fA>,gpuSpriteSpanFn<0x1fB>, NULL,NULL,gpuSpriteSpanFn<0x1fE>,gpuSpriteSpanFn<0x1fF>

245 
	}
};

249 
	gãm∂©e
<c⁄° 
	gCF
>

250 
INLINE
 
	$gpuPﬁyS∑nFn
(
u16
 *
pD°
, 
u32
 
cou¡
)

252 i‡(!
TM
)

255 i‡(!
G
)

258 
u16
 
d©a
;

259 i‡(
L
Ë{ 
u32
 
lCﬁ
=((u32)(
b4
<< 2)&(0x03ff)Ë| ((u32)(
g4
<<13)&(0x07ff<<10)Ë| ((u32)(
r4
<<24)&(0x07ff<<21)); 
	`gpuLightögRGB
(
d©a
,lCol); }

260 
d©a
=
PixñD©a
;

261 i‡((!
M
)&&(!
B
))

263 i‡(
MB
Ë{ 
d©a
 = data | 0x8000; }

264 dÿ{ *
pD°
++ = 
d©a
; } --
cou¡
);

266 i‡((
M
)&&(!
B
))

268 i‡(
MB
Ë{ 
d©a
 = data | 0x8000; }

269 dÿ{ i‡(!(*
pD°
&0x8000)Ë{ *pD° = 
d©a
; }ÖD°++; } --
cou¡
);

273 
u16
 
uSrc
;

274 
u16
 
uD°
;

275 
u32
 
uMsk
; i‡(
BM
==0) uMsk=0x7BDE;

279 
uD°
 = *
pD°
;

280 if(
M
Ë{ i‡(
uD°
&0x8000Ë
ídtûe
; }

281 
uSrc
 = 
d©a
;

283 i‡(
BM
==0Ë
	`gpuBÀndög00
(
uSrc
, 
uD°
);

284 i‡(
BM
==1Ë
	`gpuBÀndög01
(
uSrc
, 
uD°
);

285 i‡(
BM
==2Ë
	`gpuBÀndög02
(
uSrc
, 
uD°
);

286 i‡(
BM
==3Ë
	`gpuBÀndög03
(
uSrc
, 
uD°
);

287 i‡(
MB
Ë{ *
pD°
 = 
uSrc
 | 0x8000; }

288 { *
pD°
 = 
uSrc
; }

289 
ídtûe
: 
pD°
++;

291 --
cou¡
);

297 
u16
 
uD°
;

298 
u16
 
uSrc
;

299 
u32
 
löc
=
lInc
;

300 
u32
 
lCﬁ
=((u32)(
b4
>>14)&(0x03ff)Ë| ((u32)(
g4
>>3)&(0x07ff<<10)Ë| ((u32)(
r4
<<8)&(0x07ff<<21));

301 
u32
 
uMsk
; i‡((
B
)&&(
BM
==0)) uMsk=0x7BDE;

305 if(
M
Ë{ 
uD°
 = *
pD°
; i‡(uD°&0x8000Ë
ídgou
; }

307 if(
B
)

310 
	`gpuLightögRGB
(
uSrc
,
lCﬁ
);

311 if(!
M
Ë{ 
uD°
 = *
pD°
; }

312 i‡(
BM
==0Ë
	`gpuBÀndög00
(
uSrc
, 
uD°
);

313 i‡(
BM
==1Ë
	`gpuBÀndög01
(
uSrc
, 
uD°
);

314 i‡(
BM
==2Ë
	`gpuBÀndög02
(
uSrc
, 
uD°
);

315 i‡(
BM
==3Ë
	`gpuBÀndög03
(
uSrc
, 
uD°
);

320 
	`gpuLightögRGB
(
uSrc
,
lCﬁ
);

322 i‡(
MB
Ë{ *
pD°
 = 
uSrc
 | 0x8000; }

323 { *
pD°
 = 
uSrc
; }

324 
ídgou
: 
pD°
++; 
lCﬁ
=÷Cﬁ+
löc
);

326 --
cou¡
);

332 
u16
 
uD°
;

333 
u16
 
uSrc
;

334 
u32
 
löc
; i‡(
L
&&
G
Ëlöc=
lInc
;

335 
u32
 
töc
=
tInc
;

336 
u32
 
tmsk
=
tMsk
;

337 
u32
 
tC‹
 = ((u32)–
u4
<<7)&0x7fff0000Ë| ((u32)–
v4
>>9)&0x00007fff);ÅC‹&
tmsk
;

338 c⁄° 
u16
* 
_TBA
=
TBA
;

339 c⁄° 
u16
* 
_CBA
; i‡(
TM
!=3Ë_CBA=
CBA
;

340 
u32
 
lCﬁ
;

341 if(
L
 && !
G
Ë{ 
lCﬁ
 = ((
u32
)(
b4
<< 2)&(0x03ff)Ë| ((u32)(
g4
<<13)&(0x07ff<<10)Ë| ((u32)(
r4
<<24)&(0x07ff<<21)); }

342 if(
L
 && 
G
Ë{ 
lCﬁ
 = ((
u32
)(
b4
>>14)&(0x03ff)Ë| ((u32)(
g4
>>3)&(0x07ff<<10)Ë| ((u32)(
r4
<<8)&(0x07ff<<21)); }

343 
u32
 
uMsk
; i‡((
B
)&&(
BM
==0)) uMsk=0x7BDE;

347 if(
M
Ë{ 
uD°
 = *
pD°
; i‡(uD°&0x8000Ë
ídpﬁy
; }

349 i‡(
TM
==1Ë{ 
u32
 
tu
=(
tC‹
>>23); u32 
tv
=—C‹<<4)&(0xff<<11); 
u8
 
rgb
=((u8*)
_TBA
)[tv+—u>>1)]; 
uSrc
=
_CBA
[‘gb>>(—u&1)<<2))&0xf]; if(!uSrcË
ídpﬁy
; }

350 i‡(
TM
==2Ë{ 
uSrc
 = 
_CBA
[(((
u8
*)
_TBA
)[(
tC‹
>>23)+(—C‹<<4)&(0xff<<11))])]; if(!uSrcË
ídpﬁy
; }

351 i‡(
TM
==3Ë{ 
uSrc
 = 
_TBA
[(
tC‹
>>23)+(—C‹<<3)&(0xff<<10))]; if(!uSrcË
ídpﬁy
; }

353 if(
B
)

355 i‡(
uSrc
&0x8000)

358 if(
L
Ë
	`gpuLightögTXT
(
uSrc
, 
lCﬁ
);

359 if(!
M
Ë{ 
uD°
 = *
pD°
; }

360 i‡(
BM
==0Ë
	`gpuBÀndög00
(
uSrc
, 
uD°
);

361 i‡(
BM
==1Ë
	`gpuBÀndög01
(
uSrc
, 
uD°
);

362 i‡(
BM
==2Ë
	`gpuBÀndög02
(
uSrc
, 
uD°
);

363 i‡(
BM
==3Ë
	`gpuBÀndög03
(
uSrc
, 
uD°
);

368 if(
L
Ë
	`gpuLightögTXT
(
uSrc
, 
lCﬁ
);

374 if(
L
Ë{ 
	`gpuLightögTXT
(
uSrc
, 
lCﬁ
); } if(!
MB
) { uSrc&= 0x7fff; }

376 i‡(
MB
Ë{ *
pD°
 = 
uSrc
 | 0x8000; }

377 { *
pD°
 = 
uSrc
; }

378 
ídpﬁy
: 
pD°
++;

379 
tC‹
=—C‹+
töc
)&
tmsk
;

380 i‡(
L
&&
G
Ë
lCﬁ
=÷Cﬁ+
löc
);

382 --
cou¡
);

384 
	}
}

387 
	$gpuPﬁyS∑nFn_NULL_
(
u16
 *
pD°
, 
u32
 
cou¡
)

389 
	}
}

395 (*
	tPP
)(
	tu16
 *
	tpD°
, 
	tu32
 
	tcou¡
);

396 c⁄° 
PP
 
gpuPﬁyS∑nDrivîs
[512] =

398 
gpuPﬁyS∑nFn
<0x00>,gpuPﬁyS∑nFn<0x01>,gpuPﬁyS∑nFn<0x02>,gpuPﬁyS∑nFn<0x03>, gpuPﬁyS∑nFn<0x04>,gpuPﬁyS∑nFn<0x05>,gpuPﬁyS∑nFn<0x06>,gpuPﬁyS∑nFn<0x07>, 
gpuPﬁyS∑nFn_NULL_
,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x0A>,gpuPolySpanFn<0x0B>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x0E>,gpuPolySpanFn<0x0F>,

399 
gpuPﬁyS∑nFn_NULL_
,gpuPﬁyS∑nFn_NULL_,
gpuPﬁyS∑nFn
<0x12>,gpuPolySpanFn<0x13>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x16>,gpuPolySpanFn<0x17>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x1A>,gpuPolySpanFn<0x1B>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x1E>,gpuPolySpanFn<0x1F>,

400 
gpuPﬁyS∑nFn
<0x20>,gpuPﬁyS∑nFn<0x21>,gpuPﬁyS∑nFn<0x22>,gpuPﬁyS∑nFn<0x23>, gpuPﬁyS∑nFn<0x24>,gpuPﬁyS∑nFn<0x25>,gpuPﬁyS∑nFn<0x26>,gpuPﬁyS∑nFn<0x27>, 
gpuPﬁyS∑nFn_NULL_
,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x2A>,gpuPolySpanFn<0x2B>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x2E>,gpuPolySpanFn<0x2F>,

401 
gpuPﬁyS∑nFn_NULL_
,gpuPﬁyS∑nFn_NULL_,
gpuPﬁyS∑nFn
<0x32>,gpuPolySpanFn<0x33>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x36>,gpuPolySpanFn<0x37>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x3A>,gpuPolySpanFn<0x3B>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x3E>,gpuPolySpanFn<0x3F>,

402 
gpuPﬁyS∑nFn
<0x40>,gpuPﬁyS∑nFn<0x41>,gpuPﬁyS∑nFn<0x42>,gpuPﬁyS∑nFn<0x43>, gpuPﬁyS∑nFn<0x44>,gpuPﬁyS∑nFn<0x45>,gpuPﬁyS∑nFn<0x46>,gpuPﬁyS∑nFn<0x47>, 
gpuPﬁyS∑nFn_NULL_
,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x4A>,gpuPolySpanFn<0x4B>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x4E>,gpuPolySpanFn<0x4F>,

403 
gpuPﬁyS∑nFn_NULL_
,gpuPﬁyS∑nFn_NULL_,
gpuPﬁyS∑nFn
<0x52>,gpuPolySpanFn<0x53>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x56>,gpuPolySpanFn<0x57>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x5A>,gpuPolySpanFn<0x5B>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x5E>,gpuPolySpanFn<0x5F>,

404 
gpuPﬁyS∑nFn
<0x60>,gpuPﬁyS∑nFn<0x61>,gpuPﬁyS∑nFn<0x62>,gpuPﬁyS∑nFn<0x63>, gpuPﬁyS∑nFn<0x64>,gpuPﬁyS∑nFn<0x65>,gpuPﬁyS∑nFn<0x66>,gpuPﬁyS∑nFn<0x67>, 
gpuPﬁyS∑nFn_NULL_
,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x6A>,gpuPolySpanFn<0x6B>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x6E>,gpuPolySpanFn<0x6F>,

405 
gpuPﬁyS∑nFn_NULL_
,gpuPﬁyS∑nFn_NULL_,
gpuPﬁyS∑nFn
<0x72>,gpuPolySpanFn<0x73>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x76>,gpuPolySpanFn<0x77>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x7A>,gpuPolySpanFn<0x7B>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x7E>,gpuPolySpanFn<0x7F>,

407 
gpuPﬁyS∑nFn_NULL_
,
gpuPﬁyS∑nFn
<0x81>,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x83>, gpuPolySpanFn_NULL_,gpuPolySpanFn<0x85>,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x87>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x8B>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x8F>,

408 
gpuPﬁyS∑nFn_NULL_
,gpuPﬁyS∑nFn_NULL_,gpuPﬁyS∑nFn_NULL_,
gpuPﬁyS∑nFn
<0x93>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x97>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x9B>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x9F>,

409 
gpuPﬁyS∑nFn_NULL_
,
gpuPﬁyS∑nFn
<0xa1>,gpuPolySpanFn_NULL_,gpuPolySpanFn<0xa3>, gpuPolySpanFn_NULL_,gpuPolySpanFn<0xa5>,gpuPolySpanFn_NULL_,gpuPolySpanFn<0xa7>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0xaB>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0xaF>,

410 
gpuPﬁyS∑nFn_NULL_
,gpuPﬁyS∑nFn_NULL_,gpuPﬁyS∑nFn_NULL_,
gpuPﬁyS∑nFn
<0xb3>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0xb7>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0xbB>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0xbF>,

411 
gpuPﬁyS∑nFn_NULL_
,
gpuPﬁyS∑nFn
<0xc1>,gpuPolySpanFn_NULL_,gpuPolySpanFn<0xc3>, gpuPolySpanFn_NULL_,gpuPolySpanFn<0xc5>,gpuPolySpanFn_NULL_,gpuPolySpanFn<0xc7>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0xcB>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0xcF>,

412 
gpuPﬁyS∑nFn_NULL_
,gpuPﬁyS∑nFn_NULL_,gpuPﬁyS∑nFn_NULL_,
gpuPﬁyS∑nFn
<0xd3>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0xd7>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0xdB>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0xdF>,

413 
gpuPﬁyS∑nFn_NULL_
,
gpuPﬁyS∑nFn
<0xe1>,gpuPolySpanFn_NULL_,gpuPolySpanFn<0xe3>, gpuPolySpanFn_NULL_,gpuPolySpanFn<0xe5>,gpuPolySpanFn_NULL_,gpuPolySpanFn<0xe7>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0xeB>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0xeF>,

414 
gpuPﬁyS∑nFn_NULL_
,gpuPﬁyS∑nFn_NULL_,gpuPﬁyS∑nFn_NULL_,
gpuPﬁyS∑nFn
<0xf3>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0xf7>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0xfB>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0xfF>,

416 
gpuPﬁyS∑nFn
<0x100>,gpuPﬁyS∑nFn<0x101>,gpuPﬁyS∑nFn<0x102>,gpuPﬁyS∑nFn<0x103>, gpuPﬁyS∑nFn<0x104>,gpuPﬁyS∑nFn<0x105>,gpuPﬁyS∑nFn<0x106>,gpuPﬁyS∑nFn<0x107>, 
gpuPﬁyS∑nFn_NULL_
,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x10A>,gpuPolySpanFn<0x10B>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x10E>,gpuPolySpanFn<0x10F>,

417 
gpuPﬁyS∑nFn_NULL_
, gpuPﬁyS∑nFn_NULL_, 
gpuPﬁyS∑nFn
<0x112>,gpuPolySpanFn<0x113>, gpuPolySpanFn_NULL_, gpuPolySpanFn_NULL_, gpuPolySpanFn<0x116>,gpuPolySpanFn<0x117>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x11A>,gpuPolySpanFn<0x11B>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x11E>,gpuPolySpanFn<0x11F>,

418 
gpuPﬁyS∑nFn
<0x120>,gpuPﬁyS∑nFn<0x121>,gpuPﬁyS∑nFn<0x122>,gpuPﬁyS∑nFn<0x123>, gpuPﬁyS∑nFn<0x124>,gpuPﬁyS∑nFn<0x125>,gpuPﬁyS∑nFn<0x126>,gpuPﬁyS∑nFn<0x127>, 
gpuPﬁyS∑nFn_NULL_
,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x12A>,gpuPolySpanFn<0x12B>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x12E>,gpuPolySpanFn<0x12F>,

419 
gpuPﬁyS∑nFn_NULL_
, gpuPﬁyS∑nFn_NULL_, 
gpuPﬁyS∑nFn
<0x132>,gpuPolySpanFn<0x133>, gpuPolySpanFn_NULL_, gpuPolySpanFn_NULL_, gpuPolySpanFn<0x136>,gpuPolySpanFn<0x137>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x13A>,gpuPolySpanFn<0x13B>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x13E>,gpuPolySpanFn<0x13F>,

420 
gpuPﬁyS∑nFn
<0x140>,gpuPﬁyS∑nFn<0x141>,gpuPﬁyS∑nFn<0x142>,gpuPﬁyS∑nFn<0x143>, gpuPﬁyS∑nFn<0x144>,gpuPﬁyS∑nFn<0x145>,gpuPﬁyS∑nFn<0x146>,gpuPﬁyS∑nFn<0x147>, 
gpuPﬁyS∑nFn_NULL_
,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x14A>,gpuPolySpanFn<0x14B>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x14E>,gpuPolySpanFn<0x14F>,

421 
gpuPﬁyS∑nFn_NULL_
, gpuPﬁyS∑nFn_NULL_, 
gpuPﬁyS∑nFn
<0x152>,gpuPolySpanFn<0x153>, gpuPolySpanFn_NULL_, gpuPolySpanFn_NULL_, gpuPolySpanFn<0x156>,gpuPolySpanFn<0x157>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x15A>,gpuPolySpanFn<0x15B>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x15E>,gpuPolySpanFn<0x15F>,

422 
gpuPﬁyS∑nFn
<0x160>,gpuPﬁyS∑nFn<0x161>,gpuPﬁyS∑nFn<0x162>,gpuPﬁyS∑nFn<0x163>, gpuPﬁyS∑nFn<0x164>,gpuPﬁyS∑nFn<0x165>,gpuPﬁyS∑nFn<0x166>,gpuPﬁyS∑nFn<0x167>, 
gpuPﬁyS∑nFn_NULL_
,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x16A>,gpuPolySpanFn<0x16B>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x16E>,gpuPolySpanFn<0x16F>,

423 
gpuPﬁyS∑nFn_NULL_
, gpuPﬁyS∑nFn_NULL_, 
gpuPﬁyS∑nFn
<0x172>,gpuPolySpanFn<0x173>, gpuPolySpanFn_NULL_, gpuPolySpanFn_NULL_, gpuPolySpanFn<0x176>,gpuPolySpanFn<0x177>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x17A>,gpuPolySpanFn<0x17B>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x17E>,gpuPolySpanFn<0x17F>,

425 
gpuPﬁyS∑nFn_NULL_
,
gpuPﬁyS∑nFn
<0x181>,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x183>, gpuPolySpanFn_NULL_,gpuPolySpanFn<0x185>,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x187>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x18B>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x18F>,

426 
gpuPﬁyS∑nFn_NULL_
,gpuPﬁyS∑nFn_NULL_, gpuPﬁyS∑nFn_NULL_,
gpuPﬁyS∑nFn
<0x193>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_, gpuPolySpanFn_NULL_,gpuPolySpanFn<0x197>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x19B>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x19F>,

427 
gpuPﬁyS∑nFn_NULL_
,
gpuPﬁyS∑nFn
<0x1a1>,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x1a3>, gpuPolySpanFn_NULL_,gpuPolySpanFn<0x1a5>,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x1a7>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x1aB>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x1aF>,

428 
gpuPﬁyS∑nFn_NULL_
,gpuPﬁyS∑nFn_NULL_, gpuPﬁyS∑nFn_NULL_,
gpuPﬁyS∑nFn
<0x1b3>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_, gpuPolySpanFn_NULL_,gpuPolySpanFn<0x1b7>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x1bB>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x1bF>,

429 
gpuPﬁyS∑nFn_NULL_
,
gpuPﬁyS∑nFn
<0x1c1>,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x1c3>, gpuPolySpanFn_NULL_,gpuPolySpanFn<0x1c5>,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x1c7>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x1cB>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x1cF>,

430 
gpuPﬁyS∑nFn_NULL_
,gpuPﬁyS∑nFn_NULL_, gpuPﬁyS∑nFn_NULL_,
gpuPﬁyS∑nFn
<0x1d3>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_, gpuPolySpanFn_NULL_,gpuPolySpanFn<0x1d7>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x1dB>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x1dF>,

431 
gpuPﬁyS∑nFn_NULL_
,
gpuPﬁyS∑nFn
<0x1e1>,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x1e3>, gpuPolySpanFn_NULL_,gpuPolySpanFn<0x1e5>,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x1e7>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x1eB>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x1eF>,

432 
gpuPﬁyS∑nFn_NULL_
,gpuPﬁyS∑nFn_NULL_, gpuPﬁyS∑nFn_NULL_,
gpuPﬁyS∑nFn
<0x1f3>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_, gpuPolySpanFn_NULL_,gpuPolySpanFn<0x1f7>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x1fB>, gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn_NULL_,gpuPolySpanFn<0x1fF>

433 
	}
};

	@plugins/gpu_unai/gpu_inner_blend.h

21 #i‚de‡
_OP_BLEND_H_


22 
	#_OP_BLEND_H_


	)

26 #ifde‡
__¨m__


27 
	#gpuBÀndög00
(
uSrc
,
uD°
) \

29 
	`asm
 ("and %[src], %[src], %[msk]\n" \

33 : [
§c
] "=&r" (
uSrc
), [
d°
] "=&r" (
uD°
Ë: "0" (uSrc), "1" (uD°), [
msk
] "r" (
uMsk
)); \

34 }

	)

36 
	#gpuBÀndög00
(
uSrc
,
uD°
) \

38 
uSrc
 = (((
uD°
 & 
uMsk
) + (uSrc & uMsk)) >> 1); \

39 }

	)

43 #ifde‡
__¨m__


44 
	#gpuBÀndög01
(
uSrc
,
uD°
) \

46 
u32
 
°
,
dt
,
out
; \

47 
	`asm
 ("and %[dt], %[dst], #0x7C00\n" \

64 : [
§c
] "Ù" (
uSrc
), [
°
] "=&r" (°), [
dt
] "=&r" (dt), [
out
] "=&r" (out) \

65 : [
d°
] "r" (
uD°
), "0" (
uSrc
) : "cc"); \

66 }

	)

68 
	#gpuBÀndög01
(
uSrc
,
uD°
) \

70 
u16
 
º
, 
gg
, 
bb
; \

71 
bb
 = (
uD°
 & 0x7C00Ë+ (
uSrc
 & 0x7C00); if (bb > 0x7C00) bb = 0x7C00; \

72 
gg
 = (
uD°
 & 0x03E0Ë+ (
uSrc
 & 0x03E0); i‡(gg > 0x03E0Ëgg = 0x03E0; 
bb
 |= gg; \

73 
º
 = (
uD°
 & 0x001FË+ (
uSrc
 & 0x001F); i‡‘∏> 0x001FËº = 0x001F; 
bb
 |=Ñr; \

74 
uSrc
 = 
bb
; \

75 }

	)

79 #ifde‡
__¨m__


80 
	#gpuBÀndög02
(
uSrc
,
uD°
) \

82 
u32
 
°
,
dt
,
out
; \

83 
	`asm
 ("and %[dt], %[dst], #0x7C00\n" \

96 : [
§c
] "Ù" (
uSrc
), [
°
] "=&r" (°), [
dt
] "=&r" (dt), [
out
] "=&r" (out) \

97 : [
d°
] "r" (
uD°
), "0" (
uSrc
) : "cc"); \

98 }

	)

100 
	$bã°
(
s
, 
d
)

102 
	`gpuBÀndög02
(
s
, 
d
);

103  
s
;

104 
	}
}

106 
	#gpuBÀndög02
(
uSrc
,
uD°
) \

108 
s32
 
º
, 
gg
, 
bb
; \

109 
bb
 = (
uD°
 & 0x7C00Ë- (
uSrc
 & 0x7C00); if (bb < 0) bb = 0; \

110 
gg
 = (
uD°
 & 0x03E0Ë- (
uSrc
 & 0x03E0); i‡(gg > 0Ë
bb
 |= gg; \

111 
º
 = (
uD°
 & 0x001FË- (
uSrc
 & 0x001F); i‡‘∏> 0Ë
bb
 |=Ñr; \

112 
uSrc
 = 
bb
; \

113 }

	)

117 #ifde‡
__¨m__


118 
	#gpuBÀndög03
(
uSrc
,
uD°
) \

120 
u32
 
°
,
dt
,
out
; \

121 
	`asm
 ("mov %[src], %[src],Üsr #2 \n" \

139 : [
§c
] "Ù" (
uSrc
), [
°
] "=&r" (°), [
dt
] "=&r" (dt), [
out
] "=&r" (out) \

140 : [
d°
] "r" (
uD°
), "0" (
uSrc
) : "cc"); \

141 }

	)

143 
	#gpuBÀndög03
(
uSrc
,
uD°
) \

145 
u16
 
º
, 
gg
, 
bb
; \

146 
uSrc
 >>= 2; \

147 
bb
 = (
uD°
 & 0x7C00Ë+ (
uSrc
 & 0x1C00); if (bb > 0x7C00) bb = 0x7C00; \

148 
gg
 = (
uD°
 & 0x03E0Ë+ (
uSrc
 & 0x00E0); i‡(gg > 0x03E0Ëgg = 0x03E0; 
bb
 |= gg; \

149 
º
 = (
uD°
 & 0x001FË+ (
uSrc
 & 0x0007); i‡‘∏> 0x001FËº = 0x001F; 
bb
 |=Ñr; \

150 
uSrc
 = 
bb
; \

151 }

	)

	@plugins/gpu_unai/gpu_inner_light.h

21 #i‚de‡
_OP_LIGHT_H_


22 
	#_OP_LIGHT_H_


	)

26 #ifde‡
__¨m__


27 
	#gpuLightögRGB
(
uSrc
,
lCﬁ
) \

29 
u32
 
cb
,
cg
; \

30 
	`asm
 ("and %[cb], %[lCol], #0x7C00/32 \n" \

35 : [
ªs
] "=&r" (
uSrc
), [
cb
] "=&r" (cb), [
cg
] "=&r" (cg) \

36 : [
lCﬁ
] "r" (lCol)); \

37 }

	)

39 
	#gpuLightögRGB
(
uSrc
,
lCﬁ
ËuSrc=(÷Cﬁ<<5)&0x7C00Ë| (÷Cﬁ>>11)&0x3E0Ë| (lCﬁ>>27)

	)

42 
INLINE
 
	$gpuLightögTXT
(
u16
 &
uSrc
, 
u32
 &
lCﬁ
)

45 c⁄° 
u8
 
_gpuLôT
[32*32] = {

79 
uSrc
 = (
_gpuLôT
[((uSrc&0x7C00)>>5)|((
lCﬁ
>>5)&0x1f)]<<10)|(_gpuLitT[(uSrc&0x03E0)|((lCol>>16)&0x1f)]<<5)|(_gpuLitT[((uSrc&0x001F)<<5)|(lCol>>27)]);

80 
	}
}

	@plugins/gpu_unai/gpu_raster_image.h

22 
INLINE
 
	$gpuLﬂdImage
()

24 
u16
 
x0
, 
y0
, 
w0
, 
h0
;

25 
x0
 = 
PackëBuf„r
.
U2
[2] & 1023;

26 
y0
 = 
PackëBuf„r
.
U2
[3] & 511;

27 
w0
 = 
PackëBuf„r
.
U2
[4];

28 
h0
 = 
PackëBuf„r
.
U2
[5];

30 i‡((
y0
 + 
h0
Ë> 
FRAME_HEIGHT
)

32 
h0
 = 
FRAME_HEIGHT
 - 
y0
;

35 
FømeToWrôe
 = ((
w0
)&&(
h0
));

37 
px
 = 0;

38 
py
 = 0;

39 
x_íd
 = 
w0
;

40 
y_íd
 = 
h0
;

41 
pvøm
 = &((
u16
*)
GPU_FømeBuf„r
)[
x0
+(
y0
*1024)];

43 
GPU_GP1
 |= 0x08000000;

44 
	}
}

47 
INLINE
 
	$gpuSt‹eImage
()

49 
u16
 
x0
, 
y0
, 
w0
, 
h0
;

50 
x0
 = 
PackëBuf„r
.
U2
[2] & 1023;

51 
y0
 = 
PackëBuf„r
.
U2
[3] & 511;

52 
w0
 = 
PackëBuf„r
.
U2
[4];

53 
h0
 = 
PackëBuf„r
.
U2
[5];

55 i‡((
y0
 + 
h0
Ë> 
FRAME_HEIGHT
)

57 
h0
 = 
FRAME_HEIGHT
 - 
y0
;

59 
FømeToRód
 = ((
w0
)&&(
h0
));

61 
px
 = 0;

62 
py
 = 0;

63 
x_íd
 = 
w0
;

64 
y_íd
 = 
h0
;

65 
pvøm
 = &((
u16
*)
GPU_FømeBuf„r
)[
x0
+(
y0
*1024)];

67 
GPU_GP1
 |= 0x08000000;

68 
	}
}

70 
INLINE
 
	$gpuMoveImage
()

72 
u32
 
x0
, 
y0
, 
x1
, 
y1
;

73 
s32
 
w0
, 
h0
;

74 
x0
 = 
PackëBuf„r
.
U2
[2] & 1023;

75 
y0
 = 
PackëBuf„r
.
U2
[3] & 511;

76 
x1
 = 
PackëBuf„r
.
U2
[4] & 1023;

77 
y1
 = 
PackëBuf„r
.
U2
[5] & 511;

78 
w0
 = 
PackëBuf„r
.
U2
[6];

79 
h0
 = 
PackëBuf„r
.
U2
[7];

81 if–(
x0
==
x1
Ë&& (
y0
==
y1
) ) ;

82 i‡((
w0
<=0Ë|| (
h0
<=0)) ;

84 i‡(((
y0
+
h0
)>512)||((
x0
+
w0
)>1024)||((
y1
+h0)>512)||((
x1
+w0)>1024))

86 
u16
 *
psxVuw
=
GPU_FømeBuf„r
;

87 
s32
 
i
,
j
;

88 
j
=0;j<
h0
;j++)

89 
i
=0;i<
w0
;i++)

90 
psxVuw
 [(1024*((
y1
+
j
)&511))+((
x1
+
i
)&0x3ff)]=

91 
psxVuw
[(1024*((
y0
+
j
)&511))+((
x0
+
i
)&0x3ff)];

93 i‡((
x0
&1)||(
x1
&1))

95 
u16
 *
ÕD°
, *
ÕSrc
;

96 
ÕD°
 = 
ÕSrc
 = (
u16
*)
GPU_FømeBuf„r
;

97 
ÕSrc
 +
	`FRAME_OFFSET
(
x0
, 
y0
);

98 
ÕD°
 +
	`FRAME_OFFSET
(
x1
, 
y1
);

99 
x1
 = 
FRAME_WIDTH
 - 
w0
;

101 
x0
=
w0
;

102 dÿ{ *
ÕD°
++ = *
ÕSrc
++; } --
x0
);

103 
ÕD°
 +
x1
;

104 
ÕSrc
 +
x1
;

105 } --
h0
);

109 
u32
 *
ÕD°
, *
ÕSrc
;

110 
ÕD°
 = 
ÕSrc
 = (
u32
*)(*)
GPU_FømeBuf„r
;

111 
ÕSrc
 +((
	`FRAME_OFFSET
(
x0
, 
y0
))>>1);

112 
ÕD°
 +((
	`FRAME_OFFSET
(
x1
, 
y1
))>>1);

113 i‡(
w0
&1)

115 
x1
 = (
FRAME_WIDTH
 - 
w0
 +1)>>1;

116 
w0
>>=1;

117 i‡(!
w0
) {

119 *((
u16
*)
ÕD°
Ë*((u16*)
ÕSrc
);

120 
ÕD°
 +
x1
;

121 
ÕSrc
 +
x1
;

122 } --
h0
);

125 
x0
=
w0
;

126 dÿ{ *
ÕD°
++ = *
ÕSrc
++; } --
x0
);

127 *((
u16
*)
ÕD°
Ë*((u16*)
ÕSrc
);

128 
ÕD°
 +
x1
;

129 
ÕSrc
 +
x1
;

130 } --
h0
);

134 
x1
 = (
FRAME_WIDTH
 - 
w0
)>>1;

135 
w0
>>=1;

137 
x0
=
w0
;

138 dÿ{ *
ÕD°
++ = *
ÕSrc
++; } --
x0
);

139 
ÕD°
 +
x1
;

140 
ÕSrc
 +
x1
;

141 } --
h0
);

144 
	}
}

146 
INLINE
 
	$gpuCÀ¨Image
()

148 
s32
 
x0
, 
y0
, 
w0
, 
h0
;

149 
x0
 = 
PackëBuf„r
.
S2
[2];

150 
y0
 = 
PackëBuf„r
.
S2
[3];

151 
w0
 = 
PackëBuf„r
.
S2
[4] & 0x3ff;

152 
h0
 = 
PackëBuf„r
.
S2
[5] & 0x3ff;

154 
w0
 +
x0
;

155 i‡(
x0
 < 0) x0 = 0;

156 i‡(
w0
 > 
FRAME_WIDTH
) w0 = FRAME_WIDTH;

157 
w0
 -
x0
;

158 i‡(
w0
 <= 0) ;

159 
h0
 +
y0
;

160 i‡(
y0
 < 0) y0 = 0;

161 i‡(
h0
 > 
FRAME_HEIGHT
) h0 = FRAME_HEIGHT;

162 
h0
 -
y0
;

163 i‡(
h0
 <= 0) ;

165 i‡(
x0
&1)

167 
u16
* 
pixñ
 = (u16*)
GPU_FømeBuf„r
 + 
	`FRAME_OFFSET
(
x0
, 
y0
);

168 
u16
 
rgb
 = 
	`GPU_RGB16
(
PackëBuf„r
.
S4
[0]);

169 
y0
 = 
FRAME_WIDTH
 - 
w0
;

171 
x0
=
w0
;

172 dÿ{ *
pixñ
++ = 
rgb
; } --
x0
);

173 
pixñ
 +
y0
;

174 } --
h0
);

178 
u32
* 
pixñ
 = (u32*)(*)
GPU_FømeBuf„r
 + ((
	`FRAME_OFFSET
(
x0
, 
y0
))>>1);

179 
u32
 
rgb
 = 
	`GPU_RGB16
(
PackëBuf„r
.
S4
[0]);

180 
rgb
 |= (rgb<<16);

181 i‡(
w0
&1)

183 
y0
 = (
FRAME_WIDTH
 - 
w0
 +1)>>1;

184 
w0
>>=1;

186 
x0
=
w0
;

187 dÿ{ *
pixñ
++ = 
rgb
; } --
x0
);

188 *((
u16
*)
pixñ
Ë(u16)
rgb
;

189 
pixñ
 +
y0
;

190 } --
h0
);

194 
y0
 = (
FRAME_WIDTH
 - 
w0
)>>1;

195 
w0
>>=1;

197 
x0
=
w0
;

198 dÿ{ *
pixñ
++ = 
rgb
; } --
x0
);

199 
pixñ
 +
y0
;

200 } --
h0
);

203 
	}
}

	@plugins/gpu_unai/gpu_raster_line.h

21 
	#GPU_TESTRANGE
(
x
Ë{ if((
u32
)(x+1024Ë> 2047Ë; }

	)

26 
	#GPU_DIGITS
 16

	)

27 
	#GPU_DIGITSC
 (
GPU_DIGITS
+3)

	)

29 
INLINE
 
s32
 
	$GPU_DIV
(
s32
 
rs
, s32 
π
)

31  
π
 ? (
rs
 /Ñt) : (0);

32 
	}
}

35 
	$gpuDøwLF
(c⁄° 
PD
 
gpuPixñDrivî
)

37 
s32
 
ãmp
;

38 
s32
 
xmö
, 
xmax
;

39 
s32
 
ymö
, 
ymax
;

40 
s32
 
x0
, 
x1
, 
dx
;

41 
s32
 
y0
, 
y1
, 
dy
;

43 
x0
 = 
PackëBuf„r
.
S2
[2] + 
DøwögOff£t
[0]; 
	`GPU_TESTRANGE
(x0);

44 
y0
 = 
PackëBuf„r
.
S2
[3] + 
DøwögOff£t
[1]; 
	`GPU_TESTRANGE
(y0);

45 
x1
 = 
PackëBuf„r
.
S2
[4] + 
DøwögOff£t
[0]; 
	`GPU_TESTRANGE
(x1);

46 
y1
 = 
PackëBuf„r
.
S2
[5] + 
DøwögOff£t
[1]; 
	`GPU_TESTRANGE
(y1);

48 
xmö
 = 
DøwögAªa
[0]; 
xmax
 = DrawingArea[2];

49 
ymö
 = 
DøwögAªa
[1]; 
ymax
 = DrawingArea[3];

50 c⁄° 
u16
 
pixñd©a
 = 
	`GPU_RGB16
(
PackëBuf„r
.
U4
[0]);

52 
dy
 = (
y1
 - 
y0
);

53 i‡(
dy
 < 0) dy = -dy;

54 
dx
 = (
x1
 - 
x0
);

55 i‡(
dx
 < 0) dx = -dx;

56 i‡(
dx
 > 
dy
) {

57 i‡(
x0
 > 
x1
) {

58 
	`GPU_SWAP
(
x0
, 
x1
, 
ãmp
);

59 
	`GPU_SWAP
(
y0
, 
y1
, 
ãmp
);

61 
y1
 = 
	`GPU_DIV
((y1 - 
y0
Ë<< 
GPU_DIGITS
, 
dx
);

62 
y0
 <<
GPU_DIGITS
;

63 
ãmp
 = 
xmö
 - 
x0
;

64 i‡(
ãmp
 > 0) {

65 
x0
 = 
xmö
;

66 
y0
 +(
y1
 * 
ãmp
);

68 i‡(
x1
 > 
xmax
) x1 = xmax;

69 
x1
 -
x0
;

70 i‡(
x1
 < 0) x1 = 0;

72 c⁄° 
li
=
löesI¡îœ˚
;

73 ; 
x1
; x1--) {

74 
ãmp
 = 
y0
 >> 
GPU_DIGITS
;

75 if–0 =(
ãmp
&
li
) ) {

76 i‡((
u32
Ë(
ãmp
 - 
ymö
Ë< (u32Ë(
ymax
 - ymin)) {

77 
	`gpuPixñDrivî
(&((
u16
*)
GPU_FømeBuf„r
)[
	`FRAME_OFFSET
(
x0
, 
ãmp
)],
pixñd©a
);

80 
x0
++;

81 
y0
 +
y1
;

83 } i‡(
dy
) {

84 i‡(
y0
 > 
y1
) {

85 
	`GPU_SWAP
(
x0
, 
x1
, 
ãmp
);

86 
	`GPU_SWAP
(
y0
, 
y1
, 
ãmp
);

88 
x1
 = 
	`GPU_DIV
((x1 - 
x0
Ë<< 
GPU_DIGITS
, 
dy
);

89 
x0
 <<
GPU_DIGITS
;

90 
ãmp
 = 
ymö
 - 
y0
;

91 i‡(
ãmp
 > 0) {

92 
y0
 = 
ymö
;

93 
x0
 +(
x1
 * 
ãmp
);

95 i‡(
y1
 > 
ymax
) y1 = ymax;

96 
y1
 -
y0
;

97 i‡(
y1
 < 0) y1 = 0;

99 c⁄° 
li
=
löesI¡îœ˚
;

100 ; 
y1
; y1--) {

101 if–0 =(
y0
&
li
) ) {

102 
ãmp
 = 
x0
 >> 
GPU_DIGITS
;

103 i‡((
u32
Ë(
ãmp
 - 
xmö
Ë< (u32Ë(
xmax
 - xmin)) {

104 
	`gpuPixñDrivî
(&((
u16
*)
GPU_FømeBuf„r
)[
	`FRAME_OFFSET
(
ãmp
, 
y0
)],
pixñd©a
);

107 
y0
++;

108 
x0
 +
x1
;

112 if–0 =(
y0
&
löesI¡îœ˚
) ) {

113 i‡((
u32
Ë(
x0
 - 
xmö
Ë< (u32Ë(
xmax
 - xmin)) {

114 i‡((
u32
Ë(
y0
 - 
ymö
Ë< (u32Ë(
ymax
 - ymin)) {

115 
	`gpuPixñDrivî
(&((
u16
*)
GPU_FømeBuf„r
)[
	`FRAME_OFFSET
(
x0
, 
y0
)],
pixñd©a
);

120 
	}
}

127 
	$gpuDøwLG
(c⁄° 
PD
 
gpuPixñDrivî
)

129 
s32
 
ãmp
;

130 
s32
 
xmö
, 
xmax
;

131 
s32
 
ymö
, 
ymax
;

132 
s32
 
x0
, 
x1
, 
dx
;

133 
s32
 
y0
, 
y1
, 
dy
;

134 
s32
 
r0
, 
r1
;

135 
s32
 
g0
, 
g1
;

136 
s32
 
b0
, 
b1
;

138 
x0
 = 
PackëBuf„r
.
S2
[2] + 
DøwögOff£t
[0]; 
	`GPU_TESTRANGE
(x0);

139 
y0
 = 
PackëBuf„r
.
S2
[3] + 
DøwögOff£t
[1]; 
	`GPU_TESTRANGE
(y0);

140 
x1
 = 
PackëBuf„r
.
S2
[6] + 
DøwögOff£t
[0]; 
	`GPU_TESTRANGE
(x1);

141 
y1
 = 
PackëBuf„r
.
S2
[7] + 
DøwögOff£t
[1]; 
	`GPU_TESTRANGE
(y1);

143 
r0
 = 
PackëBuf„r
.
U1
[0]; 
g0
 = PackëBuf„r.U1[1]; 
b0
 = PacketBuffer.U1[2];

144 
r1
 = 
PackëBuf„r
.
U1
[8]; 
g1
 = PackëBuf„r.U1[9]; 
b1
 = PacketBuffer.U1[10];

146 
xmö
 = 
DøwögAªa
[0]; 
xmax
 = DrawingArea[2];

147 
ymö
 = 
DøwögAªa
[1]; 
ymax
 = DrawingArea[3];

149 
dy
 = (
y1
 - 
y0
);

150 i‡(
dy
 < 0)

151 
dy
 = -dy;

152 
dx
 = (
x1
 - 
x0
);

153 i‡(
dx
 < 0)

154 
dx
 = -dx;

155 i‡(
dx
 > 
dy
) {

156 i‡(
x0
 > 
x1
) {

157 
	`GPU_SWAP
(
x0
, 
x1
, 
ãmp
);

158 
	`GPU_SWAP
(
y0
, 
y1
, 
ãmp
);

159 
	`GPU_SWAP
(
r0
, 
r1
, 
ãmp
);

160 
	`GPU_SWAP
(
g0
, 
g1
, 
ãmp
);

161 
	`GPU_SWAP
(
b0
, 
b1
, 
ãmp
);

163 
y1
 = 
	`GPU_DIV
((y1 - 
y0
Ë<< 
GPU_DIGITS
, 
dx
);

164 
r1
 = 
	`GPU_DIV
(‘1 - 
r0
Ë<< 
GPU_DIGITS
, 
dx
);

165 
g1
 = 
	`GPU_DIV
((g1 - 
g0
Ë<< 
GPU_DIGITS
, 
dx
);

166 
b1
 = 
	`GPU_DIV
((b1 - 
b0
Ë<< 
GPU_DIGITS
, 
dx
);

167 
y0
 <<
GPU_DIGITS
;

168 
r0
 <<
GPU_DIGITS
;

169 
g0
 <<
GPU_DIGITS
;

170 
b0
 <<
GPU_DIGITS
;

171 
ãmp
 = 
xmö
 - 
x0
;

172 i‡(
ãmp
 > 0) {

173 
x0
 = 
xmö
;

174 
y0
 +(
y1
 * 
ãmp
);

175 
r0
 +(
r1
 * 
ãmp
);

176 
g0
 +(
g1
 * 
ãmp
);

177 
b0
 +(
b1
 * 
ãmp
);

179 i‡(
x1
 > 
xmax
) x1 = xmax;

180 
x1
 -
x0
;

181 i‡(
x1
 < 0) x1 = 0;

183 c⁄° 
li
=
löesI¡îœ˚
;

184 ; 
x1
; x1--) {

185 
ãmp
 = 
y0
 >> 
GPU_DIGITS
;

186 if–0 =(
ãmp
&
li
) ) {

187 i‡((
u32
Ë(
ãmp
 - 
ymö
Ë< (u32Ë(
ymax
 - ymin)) {

188 
	`gpuPixñDrivî
 (

189 &((
u16
*)
GPU_FømeBuf„r
)[
	`FRAME_OFFSET
(
x0
, 
ãmp
)],

190 (((
b0
>>
GPU_DIGITSC
)&0x1F)<<10Ë| (((
g0
>>GPU_DIGITSC)&0x1F)<< 5Ë| ((
r0
>>GPU_DIGITSC)&0x1F)

194 
x0
++;

195 
y0
 +
y1
;

196 
r0
 +
r1
;

197 
g0
 +
g1
;

198 
b0
 +
b1
;

200 } i‡(
dy
) {

201 i‡(
y0
 > 
y1
) {

202 
	`GPU_SWAP
(
x0
, 
x1
, 
ãmp
);

203 
	`GPU_SWAP
(
y0
, 
y1
, 
ãmp
);

204 
	`GPU_SWAP
(
r0
, 
r1
, 
ãmp
);

205 
	`GPU_SWAP
(
g0
, 
g1
, 
ãmp
);

206 
	`GPU_SWAP
(
b0
, 
b1
, 
ãmp
);

208 
x1
 = 
	`GPU_DIV
((x1 - 
x0
Ë<< 
GPU_DIGITS
, 
dy
);

209 
r1
 = 
	`GPU_DIV
(‘1 - 
r0
Ë<< 
GPU_DIGITS
, 
dy
);

210 
g1
 = 
	`GPU_DIV
((g1 - 
g0
Ë<< 
GPU_DIGITS
, 
dy
);

211 
b1
 = 
	`GPU_DIV
((b1 - 
b0
Ë<< 
GPU_DIGITS
, 
dy
);

212 
x0
 <<
GPU_DIGITS
;

213 
r0
 <<
GPU_DIGITS
;

214 
g0
 <<
GPU_DIGITS
;

215 
b0
 <<
GPU_DIGITS
;

216 
ãmp
 = 
ymö
 - 
y0
;

217 i‡(
ãmp
 > 0) {

218 
y0
 = 
ymö
;

219 
x0
 +(
x1
 * 
ãmp
);

220 
r0
 +(
r1
 * 
ãmp
);

221 
g0
 +(
g1
 * 
ãmp
);

222 
b0
 +(
b1
 * 
ãmp
);

224 i‡(
y1
 > 
ymax
) y1 = ymax;

225 
y1
 -
y0
;

226 i‡(
y1
 < 0) y1 = 0;

228 c⁄° 
li
=
löesI¡îœ˚
;

229 ; 
y1
; y1--) {

230 if–0 =(
y0
&
li
) ) {

231 
ãmp
 = 
x0
 >> 
GPU_DIGITS
;

232 i‡((
u32
Ë(
ãmp
 - 
xmö
Ë< (u32Ë(
xmax
 - xmin)) {

233 
	`gpuPixñDrivî
 (

234 &((
u16
*)
GPU_FømeBuf„r
)[
	`FRAME_OFFSET
(
ãmp
, 
y0
)],

235 (((
b0
>>
GPU_DIGITSC
)&0x1F)<<10Ë| (((
g0
>>GPU_DIGITSC)&0x1F)<< 5Ë| ((
r0
>>GPU_DIGITSC)&0x1F)

239 
y0
++;

240 
x0
 +
x1
;

241 
r0
 +
r1
;

242 
g0
 +
g1
;

243 
b0
 +
b1
;

246 if–0 =(
y0
&
löesI¡îœ˚
) ) {

247 i‡((
u32
Ë(
x0
 - 
xmö
Ë< (u32Ë(
xmax
 - xmin)) {

248 i‡((
u32
Ë(
y0
 - 
ymö
Ë< (u32Ë(
ymax
 - ymin)) {

249 
	`gpuPixñDrivî
 (

250 &((
u16
*)
GPU_FømeBuf„r
)[
	`FRAME_OFFSET
(
x0
, 
y0
)],

251 (((
b0
>>
GPU_DIGITSC
)&0x1F)<<10Ë| (((
g0
>>GPU_DIGITSC)&0x1F)<< 5Ë| ((
r0
>>GPU_DIGITSC)&0x1F)

257 
	}
}

	@plugins/gpu_unai/gpu_raster_polygon.h

21 
	#GPU_TESTRANGE3
() \

23 if(
x0
<0Ë{ if((
x1
-x0)>
CHKMAX_X
Ë; if((
x2
-x0)>CHKMAX_X) ; } \

24 if(
x1
<0Ë{ if((
x0
-x1)>
CHKMAX_X
Ë; if((
x2
-x1)>CHKMAX_X) ; } \

25 if(
x2
<0Ë{ if((
x0
-x2)>
CHKMAX_X
Ë; if((
x1
-x2)>CHKMAX_X) ; } \

26 if(
y0
<0Ë{ if((
y1
-y0)>
CHKMAX_Y
Ë; if((
y2
-y0)>CHKMAX_Y) ; } \

27 if(
y1
<0Ë{ if((
y0
-y1)>
CHKMAX_Y
Ë; if((
y2
-y1)>CHKMAX_Y) ; } \

28 if(
y2
<0Ë{ if((
y0
-y2)>
CHKMAX_Y
Ë; if((
y1
-y2)>CHKMAX_Y) ; } \

29 }

	)

35 
	$gpuDøwF3
(c⁄° 
PP
 
gpuPﬁyS∑nDrivî
)

37 c⁄° 
li
=
löesI¡îœ˚
;

38 
s32
 
ãmp
;

39 
s32
 
xa
, 
xb
, 
xmö
, 
xmax
;

40 
s32
 
ya
, 
yb
, 
ymö
, 
ymax
;

41 
s32
 
x0
, 
x1
, 
x2
, 
x3
, 
dx3
=0, 
x4
, 
dx4
=0, 
dx
;

42 
s32
 
y0
, 
y1
, 
y2
;

44 
x0
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[2]);

45 
y0
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[3]);

46 
x1
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[4]);

47 
y1
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[5]);

48 
x2
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[6]);

49 
y2
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[7]);

51 
	`GPU_TESTRANGE3
();

53 
x0
 +
DøwögOff£t
[0]; 
x1
 +DøwögOff£t[0]; 
x2
 += DrawingOffset[0];

54 
y0
 +
DøwögOff£t
[1]; 
y1
 +DøwögOff£t[1]; 
y2
 += DrawingOffset[1];

56 
xmö
 = 
DøwögAªa
[0]; 
xmax
 = DrawingArea[2];

57 
ymö
 = 
DøwögAªa
[1]; 
ymax
 = DrawingArea[3];

60 
rx0
 = 
	`Max2
(
xmö
,
	`Mö3
(
x0
,
x1
,
x2
));

61 
ry0
 = 
	`Max2
(
ymö
,
	`Mö3
(
y0
,
y1
,
y2
));

62 
rx1
 = 
	`Mö2
(
xmax
,
	`Max3
(
x0
,
x1
,
x2
));

63 
ry1
 = 
	`Mö2
(
ymax
,
	`Max3
(
y0
,
y1
,
y2
));

64 if–
rx0
>=
rx1
 || 
ry0
>=
ry1
) ;

67 
PixñD©a
 = 
	`GPU_RGB16
(
PackëBuf„r
.
U4
[0]);

69 i‡(
y0
 >
y1
)

71 if–
y0
!=
y1
 || 
x0
>
x1
 )

73 
	`GPU_SWAP
(
x0
, 
x1
, 
ãmp
);

74 
	`GPU_SWAP
(
y0
, 
y1
, 
ãmp
);

77 i‡(
y1
 >
y2
)

79 if–
y1
!=
y2
 || 
x1
>
x2
 )

81 
	`GPU_SWAP
(
x1
, 
x2
, 
ãmp
);

82 
	`GPU_SWAP
(
y1
, 
y2
, 
ãmp
);

85 i‡(
y0
 >
y1
)

87 if–
y0
!=
y1
 || 
x0
>
x1
 )

89 
	`GPU_SWAP
(
x0
, 
x1
, 
ãmp
);

90 
	`GPU_SWAP
(
y0
, 
y1
, 
ãmp
);

94 
ya
 = 
y2
 - 
y0
;

95 
yb
 = 
y2
 - 
y1
;

96 
dx
 =(
x2
 - 
x1
Ë* 
ya
 - (x2 - 
x0
Ë* 
yb
;

98 
s32
 
lo›0
 = 2;Üoop0; --loop0)

100 i‡(
lo›0
 == 2)

102 
ya
 = 
y0
;

103 
yb
 = 
y1
;

104 
x3
 = 
	`i2x
(
x0
);

105 
x4
 = 
y0
!=
y1
 ? 
x3
 : 
	`i2x
(
x1
);

106 i‡(
dx
 < 0)

108 
dx3
 = 
	`xLoDivx
((
x2
 - 
x0
), (
y2
 - 
y0
));

109 
dx4
 = 
	`xLoDivx
((
x1
 - 
x0
), (
y1
 - 
y0
));

113 
dx3
 = 
	`xLoDivx
((
x1
 - 
x0
), (
y1
 - 
y0
));

114 
dx4
 = 
	`xLoDivx
((
x2
 - 
x0
), (
y2
 - 
y0
));

119 
ya
 = 
y1
;

120 
yb
 = 
y2
;

121 i‡(
dx
 < 0)

123 
x4
 = 
	`i2x
(
x1
);

124 
x3
 = 
	`i2x
(
x0
Ë+ (
dx3
 * (
y1
 - 
y0
));

125 
dx4
 = 
	`xLoDivx
((
x2
 - 
x1
), (
y2
 - 
y1
));

129 
x3
 = 
	`i2x
(
x1
);

130 
x4
 = 
	`i2x
(
x0
Ë+ (
dx4
 * (
y1
 - 
y0
));

131 
dx3
 = 
	`xLoDivx
((
x2
 - 
x1
), (
y2
 - 
y1
));

135 
ãmp
 = 
ymö
 - 
ya
;

136 i‡(
ãmp
 > 0)

138 
ya
 = 
ymö
;

139 
x3
 +
dx3
*
ãmp
;

140 
x4
 +
dx4
*
ãmp
;

142 i‡(
yb
 > 
ymax
) yb = ymax;

143 i‡(
ya
>=
yb
) ;

145 
x3
+
fixed_HALF
;

146 
x4
+
fixed_HALF
;

148 
u16
* 
PixñBa£
 = &((u16*)
GPU_FømeBuf„r
)[
	`FRAME_OFFSET
(0, 
ya
)];

150 ;
ya
<
yb
;++ya, 
PixñBa£
 +
FRAME_WIDTH
, 
x3
+=
dx3
, 
x4
+=
dx4
)

152 i‡(
ya
&
li
) ;

153 
xa
 = 
	`x2i
(
x3
);

154 
xb
 = 
	`x2i
(
x4
);

155 if–(
xa
>
xmax
Ë|| (
xb
<
xmö
) ) ;

156 if(
xa
 < 
xmö
) xa = xmin;

157 if(
xb
 > 
xmax
) xb = xmax;

158 
xb
-=
xa
;

159 if(
xb
>0Ë
	`gpuPﬁyS∑nDrivî
(
PixñBa£
 + 
xa
,xb);

162 
	}
}

168 
	$gpuDøwFT3
(c⁄° 
PP
 
gpuPﬁyS∑nDrivî
)

170 c⁄° 
li
=
löesI¡îœ˚
;

171 
s32
 
ãmp
;

172 
s32
 
xa
, 
xb
, 
xmö
, 
xmax
;

173 
s32
 
ya
, 
yb
, 
ymö
, 
ymax
;

174 
s32
 
x0
, 
x1
, 
x2
, 
x3
, 
dx3
=0, 
x4
, 
dx4
=0, 
dx
;

175 
s32
 
y0
, 
y1
, 
y2
;

176 
s32
 
u0
, 
u1
, 
u2
, 
u3
, 
du3
=0;

177 
s32
 
v0
, 
v1
, 
v2
, 
v3
, 
dv3
=0;

179 
x0
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[2] );

180 
y0
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[3] );

181 
x1
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[6] );

182 
y1
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[7] );

183 
x2
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[10]);

184 
y2
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[11]);

186 
	`GPU_TESTRANGE3
();

188 
x0
 +
DøwögOff£t
[0]; 
x1
 +DøwögOff£t[0]; 
x2
 += DrawingOffset[0];

189 
y0
 +
DøwögOff£t
[1]; 
y1
 +DøwögOff£t[1]; 
y2
 += DrawingOffset[1];

191 
xmö
 = 
DøwögAªa
[0]; 
xmax
 = DrawingArea[2];

192 
ymö
 = 
DøwögAªa
[1]; 
ymax
 = DrawingArea[3];

195 
rx0
 = 
	`Max2
(
xmö
,
	`Mö3
(
x0
,
x1
,
x2
));

196 
ry0
 = 
	`Max2
(
ymö
,
	`Mö3
(
y0
,
y1
,
y2
));

197 
rx1
 = 
	`Mö2
(
xmax
,
	`Max3
(
x0
,
x1
,
x2
));

198 
ry1
 = 
	`Mö2
(
ymax
,
	`Max3
(
y0
,
y1
,
y2
));

199 if–
rx0
>=
rx1
 || 
ry0
>=
ry1
) ;

202 
u0
 = 
PackëBuf„r
.
U1
[8]; 
v0
 = PacketBuffer.U1[9];

203 
u1
 = 
PackëBuf„r
.
U1
[16]; 
v1
 = PacketBuffer.U1[17];

204 
u2
 = 
PackëBuf„r
.
U1
[24]; 
v2
 = PacketBuffer.U1[25];

206 
r4
 = 
	`s32
(
PackëBuf„r
.
U1
[0]);

207 
g4
 = 
	`s32
(
PackëBuf„r
.
U1
[1]);

208 
b4
 = 
	`s32
(
PackëBuf„r
.
U1
[2]);

209 
dr4
 = 
dg4
 = 
db4
 = 0;

211 i‡(
y0
 >
y1
)

213 if–
y0
!=
y1
 || 
x0
>
x1
 )

215 
	`GPU_SWAP
(
x0
, 
x1
, 
ãmp
);

216 
	`GPU_SWAP
(
y0
, 
y1
, 
ãmp
);

217 
	`GPU_SWAP
(
u0
, 
u1
, 
ãmp
);

218 
	`GPU_SWAP
(
v0
, 
v1
, 
ãmp
);

221 i‡(
y1
 >
y2
)

223 if–
y1
!=
y2
 || 
x1
>
x2
 )

225 
	`GPU_SWAP
(
x1
, 
x2
, 
ãmp
);

226 
	`GPU_SWAP
(
y1
, 
y2
, 
ãmp
);

227 
	`GPU_SWAP
(
u1
, 
u2
, 
ãmp
);

228 
	`GPU_SWAP
(
v1
, 
v2
, 
ãmp
);

231 i‡(
y0
 >
y1
)

233 if–
y0
!=
y1
 || 
x0
>
x1
 )

235 
	`GPU_SWAP
(
x0
, 
x1
, 
ãmp
);

236 
	`GPU_SWAP
(
y0
, 
y1
, 
ãmp
);

237 
	`GPU_SWAP
(
u0
, 
u1
, 
ãmp
);

238 
	`GPU_SWAP
(
v0
, 
v1
, 
ãmp
);

242 
ya
 = 
y2
 - 
y0
;

243 
yb
 = 
y2
 - 
y1
;

244 
dx
 = (
x2
 - 
x1
Ë* 
ya
 - (x2 - 
x0
Ë* 
yb
;

245 
du4
 = (
u2
 - 
u1
Ë* 
ya
 - (u2 - 
u0
Ë* 
yb
;

246 
dv4
 = (
v2
 - 
v1
Ë* 
ya
 - (v2 - 
v0
Ë* 
yb
;

248 
s32
 
iF
,
iS
;

249 
	`xInv
–
dx
, 
iF
, 
iS
);

250 
du4
 = 
	`xInvMulx
–du4, 
iF
, 
iS
);

251 
dv4
 = 
	`xInvMulx
–dv4, 
iF
, 
iS
);

252 
tInc
 = ((
u32
)(
du4
<<7)&0x7fff0000Ë| ((u32)(
dv4
>>9)&0x00007fff);

253 
tMsk
 = (
TextuªWödow
[2]<<23) | (TextureWindow[3]<<7) | 0x00ff00ff;

255 
s32
 
lo›0
 = 2;Üoop0; --loop0)

257 i‡(
lo›0
 == 2)

259 
ya
 = 
y0
;

260 
yb
 = 
y1
;

261 
u3
 = 
	`i2x
(
u0
);

262 
v3
 = 
	`i2x
(
v0
);

263 
x3
 = 
	`i2x
(
x0
);

264 
x4
 = 
y0
!=
y1
 ? 
x3
 : 
	`i2x
(
x1
);

265 i‡(
dx
 < 0)

267 
	`xInv
–(
y2
 - 
y0
), 
iF
, 
iS
);

268 
dx3
 = 
	`xInvMulx
–(
x2
 - 
x0
), 
iF
, 
iS
);

269 
du3
 = 
	`xInvMulx
–(
u2
 - 
u0
), 
iF
, 
iS
);

270 
dv3
 = 
	`xInvMulx
–(
v2
 - 
v0
), 
iF
, 
iS
);

271 
dx4
 = 
	`xLoDivx
 ( (
x1
 - 
x0
), (
y1
 - 
y0
));

275 
	`xInv
–(
y1
 - 
y0
), 
iF
, 
iS
);

276 
dx3
 = 
	`xInvMulx
–(
x1
 - 
x0
), 
iF
, 
iS
);

277 
du3
 = 
	`xInvMulx
–(
u1
 - 
u0
), 
iF
, 
iS
);

278 
dv3
 = 
	`xInvMulx
–(
v1
 - 
v0
), 
iF
, 
iS
);

279 
dx4
 = 
	`xLoDivx
 ( (
x2
 - 
x0
), (
y2
 - 
y0
));

284 
ya
 = 
y1
;

285 
yb
 = 
y2
;

286 i‡(
dx
 < 0)

288 
ãmp
 = 
y1
 - 
y0
;

289 
u3
 = 
	`i2x
(
u0
Ë+ (
du3
 * 
ãmp
);

290 
v3
 = 
	`i2x
(
v0
Ë+ (
dv3
 * 
ãmp
);

291 
x3
 = 
	`i2x
(
x0
Ë+ (
dx3
 * 
ãmp
);

292 
x4
 = 
	`i2x
(
x1
);

293 
dx4
 = 
	`xLoDivx
((
x2
 - 
x1
), (
y2
 - 
y1
));

297 
u3
 = 
	`i2x
(
u1
);

298 
v3
 = 
	`i2x
(
v1
);

299 
x3
 = 
	`i2x
(
x1
);

300 
x4
 = 
	`i2x
(
x0
Ë+ (
dx4
 * (
y1
 - 
y0
));

301 
	`xInv
–(
y2
 - 
y1
), 
iF
, 
iS
);

302 
dx3
 = 
	`xInvMulx
–(
x2
 - 
x1
), 
iF
, 
iS
);

303 
du3
 = 
	`xInvMulx
–(
u2
 - 
u1
), 
iF
, 
iS
);

304 
dv3
 = 
	`xInvMulx
–(
v2
 - 
v1
), 
iF
, 
iS
);

308 
ãmp
 = 
ymö
 - 
ya
;

309 i‡(
ãmp
 > 0)

311 
ya
 = 
ymö
;

312 
x3
 +
dx3
*
ãmp
;

313 
x4
 +
dx4
*
ãmp
;

314 
u3
 +
du3
*
ãmp
;

315 
v3
 +
dv3
*
ãmp
;

317 i‡(
yb
 > 
ymax
) yb = ymax;

318 i‡(
ya
>=
yb
) ;

320 
x3
+
fixed_HALF
;

321 
x4
+
fixed_HALF
;

322 
u3
+
fixed_HALF
;

323 
v4
+
fixed_HALF
;

325 
u16
* 
PixñBa£
 = &((u16*)
GPU_FømeBuf„r
)[
	`FRAME_OFFSET
(0, 
ya
)];

327 ;
ya
<
yb
;++ya, 
PixñBa£
 +
FRAME_WIDTH
, 
x3
+=
dx3
, 
x4
+=
dx4
, 
u3
+=
du3
, 
v3
+=
dv3
)

329 i‡(
ya
&
li
) ;

330 
xa
 = 
	`x2i
(
x3
);

331 
xb
 = 
	`x2i
(
x4
);

332 if–(
xa
>
xmax
Ë|| (
xb
<
xmö
) ) ;

334 
ãmp
 = 
xmö
 - 
xa
;

335 if(
ãmp
 > 0)

337 
xa
 = 
xmö
;

338 
u4
 = 
u3
 + 
du4
*
ãmp
;

339 
v4
 = 
v3
 + 
dv4
*
ãmp
;

343 
u4
 = 
u3
;

344 
v4
 = 
v3
;

346 if(
xb
 > 
xmax
) xb = xmax;

347 
xb
-=
xa
;

348 if(
xb
>0Ë
	`gpuPﬁyS∑nDrivî
(
PixñBa£
 + 
xa
,xb);

351 
	}
}

357 
	$gpuDøwG3
(c⁄° 
PP
 
gpuPﬁyS∑nDrivî
)

359 c⁄° 
li
=
löesI¡îœ˚
;

360 
s32
 
ãmp
;

361 
s32
 
xa
, 
xb
, 
xmö
, 
xmax
;

362 
s32
 
ya
, 
yb
, 
ymö
, 
ymax
;

363 
s32
 
x0
, 
x1
, 
x2
, 
x3
, 
dx3
=0, 
x4
, 
dx4
=0, 
dx
;

364 
s32
 
y0
, 
y1
, 
y2
;

365 
s32
 
r0
, 
r1
, 
r2
, 
r3
, 
dr3
=0;

366 
s32
 
g0
, 
g1
, 
g2
, 
g3
, 
dg3
=0;

367 
s32
 
b0
, 
b1
, 
b2
, 
b3
, 
db3
=0;

369 
x0
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[2] );

370 
y0
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[3] );

371 
x1
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[6] );

372 
y1
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[7] );

373 
x2
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[10]);

374 
y2
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[11]);

376 
	`GPU_TESTRANGE3
();

378 
x0
 +
DøwögOff£t
[0]; 
x1
 +DøwögOff£t[0]; 
x2
 += DrawingOffset[0];

379 
y0
 +
DøwögOff£t
[1]; 
y1
 +DøwögOff£t[1]; 
y2
 += DrawingOffset[1];

381 
xmö
 = 
DøwögAªa
[0]; 
xmax
 = DrawingArea[2];

382 
ymö
 = 
DøwögAªa
[1]; 
ymax
 = DrawingArea[3];

385 
rx0
 = 
	`Max2
(
xmö
,
	`Mö3
(
x0
,
x1
,
x2
));

386 
ry0
 = 
	`Max2
(
ymö
,
	`Mö3
(
y0
,
y1
,
y2
));

387 
rx1
 = 
	`Mö2
(
xmax
,
	`Max3
(
x0
,
x1
,
x2
));

388 
ry1
 = 
	`Mö2
(
ymax
,
	`Max3
(
y0
,
y1
,
y2
));

389 if–
rx0
>=
rx1
 || 
ry0
>=
ry1
) ;

392 
r0
 = 
PackëBuf„r
.
U1
[0]; 
g0
 = PackëBuf„r.U1[1]; 
b0
 = PacketBuffer.U1[2];

393 
r1
 = 
PackëBuf„r
.
U1
[8]; 
g1
 = PackëBuf„r.U1[9]; 
b1
 = PacketBuffer.U1[10];

394 
r2
 = 
PackëBuf„r
.
U1
[16]; 
g2
 = PackëBuf„r.U1[17]; 
b2
 = PacketBuffer.U1[18];

396 i‡(
y0
 >
y1
)

398 if–
y0
!=
y1
 || 
x0
>
x1
 )

400 
	`GPU_SWAP
(
x0
, 
x1
, 
ãmp
); GPU_SWAP(
y0
, 
y1
,Åemp);

401 
	`GPU_SWAP
(
r0
, 
r1
, 
ãmp
); GPU_SWAP(
g0
, 
g1
,Åemp); GPU_SWAP(
b0
, 
b1
,Åemp);

404 i‡(
y1
 >
y2
)

406 if–
y1
!=
y2
 || 
x1
>
x2
 )

408 
	`GPU_SWAP
(
x1
, 
x2
, 
ãmp
); GPU_SWAP(
y1
, 
y2
,Åemp);

409 
	`GPU_SWAP
(
r1
, 
r2
, 
ãmp
); GPU_SWAP(
g1
, 
g2
,Åemp); GPU_SWAP(
b1
, 
b2
,Åemp);

412 i‡(
y0
 >
y1
)

414 if–
y0
!=
y1
 || 
x0
>
x1
 )

416 
	`GPU_SWAP
(
x0
, 
x1
, 
ãmp
); GPU_SWAP(
y0
, 
y1
,Åemp);

417 
	`GPU_SWAP
(
r0
, 
r1
, 
ãmp
); GPU_SWAP(
g0
, 
g1
,Åemp); GPU_SWAP(
b0
, 
b1
,Åemp);

421 
ya
 = 
y2
 - 
y0
;

422 
yb
 = 
y2
 - 
y1
;

423 
dx
 = (
x2
 - 
x1
Ë* 
ya
 - (x2 - 
x0
Ë* 
yb
;

424 
dr4
 = (
r2
 - 
r1
Ë* 
ya
 - (r2 - 
r0
Ë* 
yb
;

425 
dg4
 = (
g2
 - 
g1
Ë* 
ya
 - (g2 - 
g0
Ë* 
yb
;

426 
db4
 = (
b2
 - 
b1
Ë* 
ya
 - (b2 - 
b0
Ë* 
yb
;

428 
s32
 
iF
,
iS
;

429 
	`xInv
–
dx
, 
iF
, 
iS
);

430 
dr4
 = 
	`xInvMulx
–dr4, 
iF
, 
iS
);

431 
dg4
 = 
	`xInvMulx
–dg4, 
iF
, 
iS
);

432 
db4
 = 
	`xInvMulx
–db4, 
iF
, 
iS
);

433 
u32
 
dr
 = (u32)(
dr4
<< 8)&(0xffffffff<<21); if(dr4<0) dr+= 1<<21;

434 
u32
 
dg
 = (u32)(
dg4
>> 3)&(0xffffffff<<10); if(dg4<0) dg+= 1<<10;

435 
u32
 
db
 = (u32)(
db4
>>14)&(0xffffffff ); if(db4<0) db+= 1<< 0;

436 
lInc
 = 
db
 + 
dg
 + 
dr
;

438 
s32
 
lo›0
 = 2;Üoop0; --loop0)

440 i‡(
lo›0
 == 2)

442 
ya
 = 
y0
;

443 
yb
 = 
y1
;

444 
r3
 = 
	`i2x
(
r0
);

445 
g3
 = 
	`i2x
(
g0
);

446 
b3
 = 
	`i2x
(
b0
);

447 
x3
 = 
	`i2x
(
x0
);

448 
x4
 = 
y0
!=
y1
 ? 
x3
 : 
	`i2x
(
x1
);

449 i‡(
dx
 < 0)

451 
	`xInv
–(
y2
 - 
y0
), 
iF
, 
iS
);

452 
dx3
 = 
	`xInvMulx
–(
x2
 - 
x0
), 
iF
, 
iS
);

453 
dr3
 = 
	`xInvMulx
–(
r2
 - 
r0
), 
iF
, 
iS
);

454 
dg3
 = 
	`xInvMulx
–(
g2
 - 
g0
), 
iF
, 
iS
);

455 
db3
 = 
	`xInvMulx
–(
b2
 - 
b0
), 
iF
, 
iS
);

456 
dx4
 = 
	`xLoDivx
 ( (
x1
 - 
x0
), (
y1
 - 
y0
));

460 
	`xInv
–(
y1
 - 
y0
), 
iF
, 
iS
);

461 
dx3
 = 
	`xInvMulx
–(
x1
 - 
x0
), 
iF
, 
iS
);

462 
dr3
 = 
	`xInvMulx
–(
r1
 - 
r0
), 
iF
, 
iS
);

463 
dg3
 = 
	`xInvMulx
–(
g1
 - 
g0
), 
iF
, 
iS
);

464 
db3
 = 
	`xInvMulx
–(
b1
 - 
b0
), 
iF
, 
iS
);

465 
dx4
 = 
	`xLoDivx
 ( (
x2
 - 
x0
), (
y2
 - 
y0
));

470 
ya
 = 
y1
;

471 
yb
 = 
y2
;

472 i‡(
dx
 < 0)

474 
ãmp
 = 
y1
 - 
y0
;

475 
r3
 = 
	`i2x
(
r0
Ë+ (
dr3
 * 
ãmp
);

476 
g3
 = 
	`i2x
(
g0
Ë+ (
dg3
 * 
ãmp
);

477 
b3
 = 
	`i2x
(
b0
Ë+ (
db3
 * 
ãmp
);

478 
x3
 = 
	`i2x
(
x0
Ë+ (
dx3
 * 
ãmp
);

479 
x4
 = 
	`i2x
(
x1
);

480 
dx4
 = 
	`xLoDivx
((
x2
 - 
x1
), (
y2
 - 
y1
));

484 
r3
 = 
	`i2x
(
r1
);

485 
g3
 = 
	`i2x
(
g1
);

486 
b3
 = 
	`i2x
(
b1
);

487 
x3
 = 
	`i2x
(
x1
);

488 
x4
 = 
	`i2x
(
x0
Ë+ (
dx4
 * (
y1
 - 
y0
));

490 
	`xInv
–(
y2
 - 
y1
), 
iF
, 
iS
);

491 
dx3
 = 
	`xInvMulx
–(
x2
 - 
x1
), 
iF
, 
iS
);

492 
dr3
 = 
	`xInvMulx
–(
r2
 - 
r1
), 
iF
, 
iS
);

493 
dg3
 = 
	`xInvMulx
–(
g2
 - 
g1
), 
iF
, 
iS
);

494 
db3
 = 
	`xInvMulx
–(
b2
 - 
b1
), 
iF
, 
iS
);

498 
ãmp
 = 
ymö
 - 
ya
;

499 i‡(
ãmp
 > 0)

501 
ya
 = 
ymö
;

502 
x3
 +
dx3
*
ãmp
; 
x4
 +
dx4
*temp;

503 
r3
 +
dr3
*
ãmp
; 
g3
 +
dg3
*ãmp; 
b3
 +
db3
*temp;

505 i‡(
yb
 > 
ymax
) yb = ymax;

506 i‡(
ya
>=
yb
) ;

508 
x3
+
fixed_HALF
; 
x4
+= fixed_HALF;

509 
r3
+
fixed_HALF
; 
g3
+fixed_HALF; 
b3
+= fixed_HALF;

511 
u16
* 
PixñBa£
 = &((u16*)
GPU_FømeBuf„r
)[
	`FRAME_OFFSET
(0, 
ya
)];

513 ;
ya
<
yb
;++ya, 
PixñBa£
 +
FRAME_WIDTH
, 
x3
+=
dx3
, 
x4
+=
dx4
, 
r3
+=
dr3
, 
g3
+=
dg3
, 
b3
+=
db3
)

515 i‡(
ya
&
li
) ;

516 
xa
 = 
	`x2i
(
x3
);

517 
xb
 = 
	`x2i
(
x4
);

518 if–(
xa
>
xmax
Ë|| (
xb
<
xmö
) ) ;

520 
ãmp
 = 
xmö
 - 
xa
;

521 if(
ãmp
 > 0)

523 
xa
 = 
xmö
;

524 
r4
 = 
r3
 + 
dr4
*
ãmp
; 
g4
 = 
g3
 + 
dg4
*ãmp; 
b4
 = 
b3
 + 
db4
*temp;

528 
r4
 = 
r3
; 
g4
 = 
g3
; 
b4
 = 
b3
;

530 if(
xb
 > 
xmax
) xb = xmax;

531 
xb
-=
xa
;

532 if(
xb
>0Ë
	`gpuPﬁyS∑nDrivî
(
PixñBa£
 + 
xa
,xb);

535 
	}
}

541 
	$gpuDøwGT3
(c⁄° 
PP
 
gpuPﬁyS∑nDrivî
)

543 c⁄° 
li
=
löesI¡îœ˚
;

544 
s32
 
ãmp
;

545 
s32
 
xa
, 
xb
, 
xmö
, 
xmax
;

546 
s32
 
ya
, 
yb
, 
ymö
, 
ymax
;

547 
s32
 
x0
, 
x1
, 
x2
, 
x3
, 
dx3
=0, 
x4
, 
dx4
=0, 
dx
;

548 
s32
 
y0
, 
y1
, 
y2
;

549 
s32
 
u0
, 
u1
, 
u2
, 
u3
, 
du3
=0;

550 
s32
 
v0
, 
v1
, 
v2
, 
v3
, 
dv3
=0;

551 
s32
 
r0
, 
r1
, 
r2
, 
r3
, 
dr3
=0;

552 
s32
 
g0
, 
g1
, 
g2
, 
g3
, 
dg3
=0;

553 
s32
 
b0
, 
b1
, 
b2
, 
b3
, 
db3
=0;

555 
x0
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[2] );

556 
y0
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[3] );

557 
x1
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[8] );

558 
y1
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[9] );

559 
x2
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[14]);

560 
y2
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[15]);

562 
	`GPU_TESTRANGE3
();

564 
x0
 +
DøwögOff£t
[0]; 
x1
 +DøwögOff£t[0]; 
x2
 += DrawingOffset[0];

565 
y0
 +
DøwögOff£t
[1]; 
y1
 +DøwögOff£t[1]; 
y2
 += DrawingOffset[1];

567 
xmö
 = 
DøwögAªa
[0]; 
xmax
 = DrawingArea[2];

568 
ymö
 = 
DøwögAªa
[1]; 
ymax
 = DrawingArea[3];

571 
rx0
 = 
	`Max2
(
xmö
,
	`Mö3
(
x0
,
x1
,
x2
));

572 
ry0
 = 
	`Max2
(
ymö
,
	`Mö3
(
y0
,
y1
,
y2
));

573 
rx1
 = 
	`Mö2
(
xmax
,
	`Max3
(
x0
,
x1
,
x2
));

574 
ry1
 = 
	`Mö2
(
ymax
,
	`Max3
(
y0
,
y1
,
y2
));

575 if–
rx0
>=
rx1
 || 
ry0
>=
ry1
) ;

578 
r0
 = 
PackëBuf„r
.
U1
[0]; 
g0
 = PackëBuf„r.U1[1]; 
b0
 = PacketBuffer.U1[2];

579 
u0
 = 
PackëBuf„r
.
U1
[8]; 
v0
 = PacketBuffer.U1[9];

580 
r1
 = 
PackëBuf„r
.
U1
[12]; 
g1
 = PackëBuf„r.U1[13]; 
b1
 = PacketBuffer.U1[14];

581 
u1
 = 
PackëBuf„r
.
U1
[20]; 
v1
 = PacketBuffer.U1[21];

582 
r2
 = 
PackëBuf„r
.
U1
[24]; 
g2
 = PackëBuf„r.U1[25]; 
b2
 = PacketBuffer.U1[26];

583 
u2
 = 
PackëBuf„r
.
U1
[32]; 
v2
 = PacketBuffer.U1[33];

585 i‡(
y0
 >
y1
)

587 if–
y0
!=
y1
 || 
x0
>
x1
 )

589 
	`GPU_SWAP
(
x0
, 
x1
, 
ãmp
); GPU_SWAP(
y0
, 
y1
,Åemp);

590 
	`GPU_SWAP
(
u0
, 
u1
, 
ãmp
); GPU_SWAP(
v0
, 
v1
,Åemp);

591 
	`GPU_SWAP
(
r0
, 
r1
, 
ãmp
); GPU_SWAP(
g0
, 
g1
,Åemp); GPU_SWAP(
b0
, 
b1
,Åemp);

594 i‡(
y1
 >
y2
)

596 if–
y1
!=
y2
 || 
x1
>
x2
 )

598 
	`GPU_SWAP
(
x1
, 
x2
, 
ãmp
); GPU_SWAP(
y1
, 
y2
,Åemp);

599 
	`GPU_SWAP
(
u1
, 
u2
, 
ãmp
); GPU_SWAP(
v1
, 
v2
,Åemp);

600 
	`GPU_SWAP
(
r1
, 
r2
, 
ãmp
); GPU_SWAP(
g1
, 
g2
,Åemp); GPU_SWAP(
b1
, 
b2
,Åemp);

603 i‡(
y0
 >
y1
)

605 if–
y0
!=
y1
 || 
x0
>
x1
 )

607 
	`GPU_SWAP
(
x0
, 
x1
, 
ãmp
); GPU_SWAP(
y0
, 
y1
,Åemp);

608 
	`GPU_SWAP
(
u0
, 
u1
, 
ãmp
); GPU_SWAP(
v0
, 
v1
,Åemp);

609 
	`GPU_SWAP
(
r0
, 
r1
, 
ãmp
); GPU_SWAP(
g0
, 
g1
,Åemp); GPU_SWAP(
b0
, 
b1
,Åemp);

613 
ya
 = 
y2
 - 
y0
;

614 
yb
 = 
y2
 - 
y1
;

615 
dx
 = (
x2
 - 
x1
Ë* 
ya
 - (x2 - 
x0
Ë* 
yb
;

616 
du4
 = (
u2
 - 
u1
Ë* 
ya
 - (u2 - 
u0
Ë* 
yb
;

617 
dv4
 = (
v2
 - 
v1
Ë* 
ya
 - (v2 - 
v0
Ë* 
yb
;

618 
dr4
 = (
r2
 - 
r1
Ë* 
ya
 - (r2 - 
r0
Ë* 
yb
;

619 
dg4
 = (
g2
 - 
g1
Ë* 
ya
 - (g2 - 
g0
Ë* 
yb
;

620 
db4
 = (
b2
 - 
b1
Ë* 
ya
 - (b2 - 
b0
Ë* 
yb
;

622 
s32
 
iF
,
iS
;

624 
	`xInv
–
dx
, 
iF
, 
iS
);

625 
du4
 = 
	`xInvMulx
–du4, 
iF
, 
iS
);

626 
dv4
 = 
	`xInvMulx
–dv4, 
iF
, 
iS
);

627 
dr4
 = 
	`xInvMulx
–dr4, 
iF
, 
iS
);

628 
dg4
 = 
	`xInvMulx
–dg4, 
iF
, 
iS
);

629 
db4
 = 
	`xInvMulx
–db4, 
iF
, 
iS
);

630 
u32
 
dr
 = (u32)(
dr4
<< 8)&(0xffffffff<<21); if(dr4<0) dr+= 1<<21;

631 
u32
 
dg
 = (u32)(
dg4
>> 3)&(0xffffffff<<10); if(dg4<0) dg+= 1<<10;

632 
u32
 
db
 = (u32)(
db4
>>14)&(0xffffffff ); if(db4<0) db+= 1<< 0;

633 
lInc
 = 
db
 + 
dg
 + 
dr
;

634 
tInc
 = ((
u32
)(
du4
<<7)&0x7fff0000Ë| ((u32)(
dv4
>>9)&0x00007fff);

635 
tMsk
 = (
TextuªWödow
[2]<<23) | (TextureWindow[3]<<7) | 0x00ff00ff;

637 
s32
 
lo›0
 = 2;Üoop0; --loop0)

639 i‡(
lo›0
 == 2)

641 
ya
 = 
y0
;

642 
yb
 = 
y1
;

643 
u3
 = 
	`i2x
(
u0
);

644 
v3
 = 
	`i2x
(
v0
);

645 
r3
 = 
	`i2x
(
r0
);

646 
g3
 = 
	`i2x
(
g0
);

647 
b3
 = 
	`i2x
(
b0
);

648 
x3
 = 
	`i2x
(
x0
);

649 
x4
 = 
y0
!=
y1
 ? 
x3
 : 
	`i2x
(
x1
);

650 i‡(
dx
 < 0)

652 
	`xInv
–(
y2
 - 
y0
), 
iF
, 
iS
);

653 
dx3
 = 
	`xInvMulx
–(
x2
 - 
x0
), 
iF
, 
iS
);

654 
du3
 = 
	`xInvMulx
–(
u2
 - 
u0
), 
iF
, 
iS
);

655 
dv3
 = 
	`xInvMulx
–(
v2
 - 
v0
), 
iF
, 
iS
);

656 
dr3
 = 
	`xInvMulx
–(
r2
 - 
r0
), 
iF
, 
iS
);

657 
dg3
 = 
	`xInvMulx
–(
g2
 - 
g0
), 
iF
, 
iS
);

658 
db3
 = 
	`xInvMulx
–(
b2
 - 
b0
), 
iF
, 
iS
);

659 
dx4
 = 
	`xLoDivx
 ( (
x1
 - 
x0
), (
y1
 - 
y0
));

663 
	`xInv
–(
y1
 - 
y0
), 
iF
, 
iS
);

664 
dx3
 = 
	`xInvMulx
–(
x1
 - 
x0
), 
iF
, 
iS
);

665 
du3
 = 
	`xInvMulx
–(
u1
 - 
u0
), 
iF
, 
iS
);

666 
dv3
 = 
	`xInvMulx
–(
v1
 - 
v0
), 
iF
, 
iS
);

667 
dr3
 = 
	`xInvMulx
–(
r1
 - 
r0
), 
iF
, 
iS
);

668 
dg3
 = 
	`xInvMulx
–(
g1
 - 
g0
), 
iF
, 
iS
);

669 
db3
 = 
	`xInvMulx
–(
b1
 - 
b0
), 
iF
, 
iS
);

670 
dx4
 = 
	`xLoDivx
 ( (
x2
 - 
x0
), (
y2
 - 
y0
));

675 
ya
 = 
y1
;

676 
yb
 = 
y2
;

677 i‡(
dx
 < 0)

679 
ãmp
 = 
y1
 - 
y0
;

680 
u3
 = 
	`i2x
(
u0
Ë+ (
du3
 * 
ãmp
);

681 
v3
 = 
	`i2x
(
v0
Ë+ (
dv3
 * 
ãmp
);

682 
r3
 = 
	`i2x
(
r0
Ë+ (
dr3
 * 
ãmp
);

683 
g3
 = 
	`i2x
(
g0
Ë+ (
dg3
 * 
ãmp
);

684 
b3
 = 
	`i2x
(
b0
Ë+ (
db3
 * 
ãmp
);

685 
x3
 = 
	`i2x
(
x0
Ë+ (
dx3
 * 
ãmp
);

686 
x4
 = 
	`i2x
(
x1
);

687 
dx4
 = 
	`xLoDivx
((
x2
 - 
x1
), (
y2
 - 
y1
));

691 
u3
 = 
	`i2x
(
u1
);

692 
v3
 = 
	`i2x
(
v1
);

693 
r3
 = 
	`i2x
(
r1
);

694 
g3
 = 
	`i2x
(
g1
);

695 
b3
 = 
	`i2x
(
b1
);

696 
x3
 = 
	`i2x
(
x1
);

697 
x4
 = 
	`i2x
(
x0
Ë+ (
dx4
 * (
y1
 - 
y0
));

699 
	`xInv
–(
y2
 - 
y1
), 
iF
, 
iS
);

700 
dx3
 = 
	`xInvMulx
–(
x2
 - 
x1
), 
iF
, 
iS
);

701 
du3
 = 
	`xInvMulx
–(
u2
 - 
u1
), 
iF
, 
iS
);

702 
dv3
 = 
	`xInvMulx
–(
v2
 - 
v1
), 
iF
, 
iS
);

703 
dr3
 = 
	`xInvMulx
–(
r2
 - 
r1
), 
iF
, 
iS
);

704 
dg3
 = 
	`xInvMulx
–(
g2
 - 
g1
), 
iF
, 
iS
);

705 
db3
 = 
	`xInvMulx
–(
b2
 - 
b1
), 
iF
, 
iS
);

709 
ãmp
 = 
ymö
 - 
ya
;

710 i‡(
ãmp
 > 0)

712 
ya
 = 
ymö
;

713 
x3
 +
dx3
*
ãmp
; 
x4
 +
dx4
*temp;

714 
u3
 +
du3
*
ãmp
; 
v3
 +
dv3
*temp;

715 
r3
 +
dr3
*
ãmp
; 
g3
 +
dg3
*ãmp; 
b3
 +
db3
*temp;

717 i‡(
yb
 > 
ymax
) yb = ymax;

718 i‡(
ya
>=
yb
) ;

720 
x3
+
fixed_HALF
; 
x4
+= fixed_HALF;

721 
u3
+
fixed_HALF
; 
v4
+= fixed_HALF;

722 
r3
+
fixed_HALF
; 
g3
+fixed_HALF; 
b3
+= fixed_HALF;

723 
u16
* 
PixñBa£
 = &((u16*)
GPU_FømeBuf„r
)[
	`FRAME_OFFSET
(0, 
ya
)];

725 ;
ya
<
yb
;++ya, 
PixñBa£
 +
FRAME_WIDTH
, 
x3
+=
dx3
, 
x4
+=
dx4
, 
u3
+=
du3
, 
v3
+=
dv3
, 
r3
+=
dr3
, 
g3
+=
dg3
, 
b3
+=
db3
)

727 i‡(
ya
&
li
) ;

728 
xa
 = 
	`x2i
(
x3
);

729 
xb
 = 
	`x2i
(
x4
);

730 if–(
xa
>
xmax
Ë|| (
xb
<
xmö
)) ;

732 
ãmp
 = 
xmö
 - 
xa
;

733 if(
ãmp
 > 0)

735 
xa
 = 
xmö
;

736 
u4
 = 
u3
 + 
du4
*
ãmp
; 
v4
 = 
v3
 + 
dv4
*temp;

737 
r4
 = 
r3
 + 
dr4
*
ãmp
; 
g4
 = 
g3
 + 
dg4
*ãmp; 
b4
 = 
b3
 + 
db4
*temp;

741 
u4
 = 
u3
; 
v4
 = 
v3
;

742 
r4
 = 
r3
; 
g4
 = 
g3
; 
b4
 = 
b3
;

744 if(
xb
 > 
xmax
) xb = xmax;

745 
xb
-=
xa
;

746 if(
xb
>0Ë
	`gpuPﬁyS∑nDrivî
(
PixñBa£
 + 
xa
,xb);

749 
	}
}

	@plugins/gpu_unai/gpu_raster_sprite.h

25 
	$gpuDøwS
(c⁄° 
PS
 
gpuS¥ôeS∑nDrivî
)

27 
s32
 
x0
, 
x1
;

28 
s32
 
y0
, 
y1
;

29 
s32
 
u0
;

30 
s32
 
v0
;

32 
x1
 = 
x0
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[2]Ë+ 
DøwögOff£t
[0];

33 
y1
 = 
y0
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[3]Ë+ 
DøwögOff£t
[1];

34 
x1
+
PackëBuf„r
.
S2
[6];

35 
y1
+
PackëBuf„r
.
S2
[7];

38 
s32
 
xmö
, 
xmax
;

39 
s32
 
ymö
, 
ymax
;

40 
xmö
 = 
DøwögAªa
[0]; 
xmax
 = DrawingArea[2];

41 
ymö
 = 
DøwögAªa
[1]; 
ymax
 = DrawingArea[3];

44 
rx0
 = 
	`Max2
(
xmö
,
	`Mö2
(
x0
,
x1
));

45 
ry0
 = 
	`Max2
(
ymö
,
	`Mö2
(
y0
,
y1
));

46 
rx1
 = 
	`Mö2
(
xmax
,
	`Max2
(
x0
,
x1
));

47 
ry1
 = 
	`Mö2
(
ymax
,
	`Max2
(
y0
,
y1
));

48 if–
rx0
>=
rx1
 || 
ry0
>=
ry1
) ;

51 
u0
 = 
PackëBuf„r
.
U1
[8];

52 
v0
 = 
PackëBuf„r
.
U1
[9];

54 
r4
 = 
	`s32
(
PackëBuf„r
.
U1
[0]);

55 
g4
 = 
	`s32
(
PackëBuf„r
.
U1
[1]);

56 
b4
 = 
	`s32
(
PackëBuf„r
.
U1
[2]);

59 
s32
 
ãmp
;

60 
ãmp
 = 
ymö
 - 
y0
;

61 i‡(
ãmp
 > 0Ë{ 
y0
 = 
ymö
; 
v0
 +=Åemp; }

62 i‡(
y1
 > 
ymax
) y1 = ymax;

63 i‡(
y1
 <
y0
) ;

65 
ãmp
 = 
xmö
 - 
x0
;

66 i‡(
ãmp
 > 0Ë{ 
x0
 = 
xmö
; 
u0
 +=Åemp; }

67 i‡(
x1
 > 
xmax
) x1 = xmax;

68 
x1
 -
x0
;

69 i‡(
x1
 <= 0) ;

74 
u16
 *
Pixñ
 = &((u16*)
GPU_FømeBuf„r
)[
	`FRAME_OFFSET
(
x0
, 
y0
)];

75 c⁄° 
li
=
löesI¡îœ˚
;

76 c⁄° 
u32
 
masku
=
TextuªWödow
[2];

77 c⁄° 
u32
 
maskv
=
TextuªWödow
[3];

79 ;
y0
<
y1
;++y0) {

80 if–0 =(
y0
&
li
ËË
	`gpuS¥ôeS∑nDrivî
(
Pixñ
,
x1
,
	`FRAME_OFFSET
(
u0
,
v0
),
masku
);

81 
Pixñ
 +
FRAME_WIDTH
;

82 
v0
 = (v0+1)&
maskv
;

85 
	}
}

87 #ifde‡
__¨m__


88 
	~"gpu_¨m.h
"

90 
	$gpuDøwS16
()

92 
s32
 
x0
, 
y0
;

93 
s32
 
u0
, 
v0
;

94 
s32
 
xmö
, 
xmax
;

95 
s32
 
ymö
, 
ymax
;

96 
u32
 
h
 = 16;

98 
x0
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[2]Ë+ 
DøwögOff£t
[0];

99 
y0
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[3]Ë+ 
DøwögOff£t
[1];

101 
xmö
 = 
DøwögAªa
[0]; 
xmax
 = DrawingArea[2];

102 
ymö
 = 
DøwögAªa
[1]; 
ymax
 = DrawingArea[3];

103 
u0
 = 
PackëBuf„r
.
U1
[8];

104 
v0
 = 
PackëBuf„r
.
U1
[9];

106 i‡(
x0
 > 
xmax
 - 16 || x0 < 
xmö
 ||

107 ((
u0
 | 
v0
Ë& 15Ë|| !(
TextuªWödow
[2] & TextureWindow[3] & 8)) {

109 
PackëBuf„r
.
U4
[3] = 0x00100010;

110 
	`gpuDøwS
(
gpuS¥ôeS∑nFn
<0x20>);

114 i‡(
y0
 >
ymax
 || y0 <
ymö
 - 16)

116 i‡(
y0
 < 
ymö
) {

117 
h
 -
ymö
 - 
y0
;

118 
v0
 +
ymö
 - 
y0
;

119 
y0
 = 
ymö
;

121 i‡(
ymax
 - 
y0
 < 16)

122 
h
 = 
ymax
 - 
y0
;

124 
	`døw_•r16_fuŒ
(&
GPU_FømeBuf„r
[
	`FRAME_OFFSET
(
x0
, 
y0
)], &
TBA
[FRAME_OFFSET(
u0
/4, 
v0
)], 
CBA
, 
h
);

125 
	}
}

129 
	$gpuDøwT
(c⁄° 
PT
 
gpuTûeS∑nDrivî
)

131 
s32
 
x0
, 
y0
;

132 
s32
 
x1
, 
y1
;

134 
x1
 = 
x0
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[2]Ë+ 
DøwögOff£t
[0];

135 
y1
 = 
y0
 = 
	`GPU_EXPANDSIGN
(
PackëBuf„r
.
S2
[3]Ë+ 
DøwögOff£t
[1];

136 
x1
+
PackëBuf„r
.
S2
[4];

137 
y1
+
PackëBuf„r
.
S2
[5];

140 
s32
 
xmö
, 
xmax
;

141 
s32
 
ymö
, 
ymax
;

142 
xmö
 = 
DøwögAªa
[0]; 
xmax
 = DrawingArea[2];

143 
ymö
 = 
DøwögAªa
[1]; 
ymax
 = DrawingArea[3];

146 
rx0
 = 
	`Max2
(
xmö
,
	`Mö2
(
x0
,
x1
));

147 
ry0
 = 
	`Max2
(
ymö
,
	`Mö2
(
y0
,
y1
));

148 
rx1
 = 
	`Mö2
(
xmax
,
	`Max2
(
x0
,
x1
));

149 
ry1
 = 
	`Mö2
(
ymax
,
	`Max2
(
y0
,
y1
));

150 if(
rx0
>=
rx1
 || 
ry0
>=
ry1
) ;

153 i‡(
y0
 < 
ymö
) y0 = ymin;

154 i‡(
y1
 > 
ymax
) y1 = ymax;

155 i‡(
y1
 <
y0
) ;

157 i‡(
x0
 < 
xmö
) x0 = xmin;

158 i‡(
x1
 > 
xmax
) x1 = xmax;

159 
x1
 -
x0
;

160 i‡(
x1
 <= 0) ;

164 
u16
 *
Pixñ
 = &((u16*)
GPU_FømeBuf„r
)[
	`FRAME_OFFSET
(
x0
, 
y0
)];

165 c⁄° 
u16
 
D©a
 = 
	`GPU_RGB16
(
PackëBuf„r
.
U4
[0]);

166 c⁄° 
li
=
löesI¡îœ˚
;

168 ; 
y0
<
y1
; ++y0)

170 if–0 =(
y0
&
li
ËË
	`gpuTûeS∑nDrivî
(
Pixñ
,
x1
,
D©a
);

171 
Pixñ
 +
FRAME_WIDTH
;

174 
	}
}

	@plugins/gpu_unai/gpulib_if.cpp

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

25 
	~"../gpulib/gpu.h
"

27 
	#u8
 
uöt8_t


	)

28 
	#s8
 
öt8_t


	)

29 
	#u16
 
uöt16_t


	)

30 
	#s16
 
öt16_t


	)

31 
	#u32
 
uöt32_t


	)

32 
	#s32
 
öt32_t


	)

33 
	#s64
 
öt64_t


	)

35 
	#INLINE
 

	)

37 
	#FRAME_BUFFER_SIZE
 (1024*512*2)

	)

38 
	#FRAME_WIDTH
 1024

	)

39 
	#FRAME_HEIGHT
 512

	)

40 
	#FRAME_OFFSET
(
x
,
y
Ë(((y)<<10)+(x))

	)

42 
	#isSkù
 0

	)

43 
	#Æt_Âs
 0

	)

44 
	glöesI¡îœ˚
;

45 
	gf‹˚_öãæa˚
;

47 
boﬁ
 
	glight
 = 
åue
;

48 
boﬁ
 
	gbÀnd
 = 
åue
;

49 
boﬁ
 
	gFømeToRód
 = 
Ál£
;

50 
boﬁ
 
	gFømeToWrôe
 = 
Ál£
;

52 
boﬁ
 
	gíabÀAbbeyHack
 = 
Ál£
;

54 
u8
 
	gBLEND_MODE
;

55 
u8
 
	gTEXT_MODE
;

56 
u8
 
	gMaskög
;

58 
u16
 
	gPixñMSB
;

59 
u16
 
	gPixñD©a
;

66 
s32
 
	gpx
,
	gpy
;

67 
s32
 
	gx_íd
,
	gy_íd
;

68 
u16
* 
	gpvøm
;

70 
s32
 
	gPackëCou¡
;

71 
s32
 
	gPackëIndex
;

74 
u32
 
	gTextuªWödow
 [4];

75 
u32
 
	gDøwögAªa
 [4];

76 
u32
 
	gDøwögOff£t
 [2];

78 
u16
* 
	gTBA
;

79 
u16
* 
	gCBA
;

82 
s32
 
	gu4
, 
	gdu4
;

83 
s32
 
	gv4
, 
	gdv4
;

84 
s32
 
	gr4
, 
	gdr4
;

85 
s32
 
	gg4
, 
	gdg4
;

86 
s32
 
	gb4
, 
	gdb4
;

87 
u32
 
	glInc
;

88 
u32
 
	gtInc
, 
	gtMsk
;

90 
	uGPUPackë


92 
u32
 
	mU4
[16];

93 
s32
 
	mS4
[16];

94 
u16
 
	mU2
[32];

95 
s16
 
	mS2
[32];

96 
u8
 
	mU1
[64];

97 
s8
 
	mS1
[64];

100 
GPUPackë
 
	gPackëBuf„r
;

101 
u16
 *
	gGPU_FømeBuf„r
;

102 
u32
 
	gGPU_GP1
;

106 
	~"../gpu_u«i/gpu_fixedpoöt.h
"

109 
	~"../gpu_u«i/gpu_ö√r.h
"

112 
	#GPU_RGB16
(
rgb
Ë(((‘gb)&0xF80000)>>9)|((‘gb)&0xF800)>>6)|((‘gb)&0xF8)>>3))

	)

114 
	#GPU_EXPANDSIGN
(
x
Ë(((
s32
)(x)<<21)>>21)

	)

116 
	#CHKMAX_X
 1024

	)

117 
	#CHKMAX_Y
 512

	)

119 
	#GPU_SWAP
(
a
,
b
,
t
Ë{—)=◊);◊)=(b);(b)=—);}

	)

122 
	~"../gpu_u«i/gpu_ø°î_image.h
"

125 
	~"../gpu_u«i/gpu_ø°î_löe.h
"

128 
	~"../gpu_u«i/gpu_ø°î_pﬁyg⁄.h
"

131 
	~"../gpu_u«i/gpu_ø°î_•rôe.h
"

134 
	~"../gpu_u«i/gpu_comm™d.h
"

138 
	$ªndîî_öô
()

140 
GPU_FømeBuf„r
 = (
u16
 *)
gpu
.
vøm
;

143 
i
=1;i<=(1<<
TABLE_BITS
);++i)

145 
v
 = 1.0 / (
i
);

146 #ifde‡
GPU_TABLE_10_BITS


147 
v
 *= (0xffffffff>>1);

149 
v
 *= (0x80000000);

151 
s_övTabÀ
[
i
-1]=
	`s32
(
v
);

155 
	}
}

157 
	$ªndîî_föish
()

159 
	}
}

161 
	$ªndîî_nŸify_ªs_ch™ge
()

163 
	}
}

165 c⁄° 
cmd_Àngths
[256];

167 
	$do_cmd_li°
(*
li°
, 
li°_Àn
, *
œ°_cmd
)

169 
cmd
 = 0, 
Àn
, 
i
;

170 *
li°_°¨t
 = 
li°
;

171 *
li°_íd
 = 
li°
 + 
li°_Àn
;

173 
löesI¡îœ˚
 = 
f‹˚_öãæa˚
;

174 #i‚de‡
__ARM_ARCH_7A__


175 
löesI¡îœ˚
 |
gpu
.
°©us
.
öãæa˚
;

178 ; 
li°
 < 
li°_íd
;Üi° +1 + 
Àn
)

180 
cmd
 = *
li°
 >> 24;

181 
Àn
 = 
cmd_Àngths
[
cmd
];

182 i‡(
li°
 + 1 + 
Àn
 > 
li°_íd
) {

183 
cmd
 = -1;

187 
	#PRIM
 
cmd


	)

188 
PackëBuf„r
.
U4
[0] = 
li°
[0];

189 
i
 = 1; i <
Àn
; i++)

190 
PackëBuf„r
.
U4
[
i
] = 
li°
[i];

192 
cmd
)

195 
	`gpuCÀ¨Image
();

202 
	`gpuDøwF3
(
gpuPﬁyS∑nDrivîs
 [
BÀndög_Mode
 | 
Maskög
 | 
BÀndög
 | 
PixñMSB
]);

209 
	`gpuSëCLUT
 (
PackëBuf„r
.
U4
[2] >> 16);

210 
	`gpuSëTextuª
(
PackëBuf„r
.
U4
[4] >> 16);

211 i‡((
PackëBuf„r
.
U1
[0]>0x5F) && (PacketBuffer.U1[1]>0x5F) && (PacketBuffer.U1[2]>0x5F))

212 
	`gpuDøwFT3
(
gpuPﬁyS∑nDrivîs
 [
BÀndög_Mode
 | 
TEXT_MODE
 | 
Maskög
 | 
BÀndög
 | 
PixñMSB
]);

214 
	`gpuDøwFT3
(
gpuPﬁyS∑nDrivîs
 [
BÀndög_Mode
 | 
TEXT_MODE
 | 
Maskög
 | 
BÀndög
 | 
Lightög
 | 
PixñMSB
]);

221 c⁄° 
PP
 
gpuPﬁyS∑nDrivî
 = 
gpuPﬁyS∑nDrivîs
 [
BÀndög_Mode
 | 
Maskög
 | 
BÀndög
 | 
PixñMSB
];

222 
	`gpuDøwF3
(
gpuPﬁyS∑nDrivî
);

223 
PackëBuf„r
.
U4
[1] = PacketBuffer.U4[4];

224 
	`gpuDøwF3
(
gpuPﬁyS∑nDrivî
);

232 
	`gpuSëCLUT
 (
PackëBuf„r
.
U4
[2] >> 16);

233 
	`gpuSëTextuª
(
PackëBuf„r
.
U4
[4] >> 16);

234 
PP
 
gpuPﬁyS∑nDrivî
;

235 i‡((
PackëBuf„r
.
U1
[0]>0x5F) && (PacketBuffer.U1[1]>0x5F) && (PacketBuffer.U1[2]>0x5F))

236 
gpuPﬁyS∑nDrivî
 = 
gpuPﬁyS∑nDrivîs
 [
BÀndög_Mode
 | 
TEXT_MODE
 | 
Maskög
 | 
BÀndög
 | 
PixñMSB
];

238 
gpuPﬁyS∑nDrivî
 = 
gpuPﬁyS∑nDrivîs
 [
BÀndög_Mode
 | 
TEXT_MODE
 | 
Maskög
 | 
BÀndög
 | 
Lightög
 | 
PixñMSB
];

239 
	`gpuDøwFT3
(
gpuPﬁyS∑nDrivî
);

240 
PackëBuf„r
.
U4
[1] = PacketBuffer.U4[7];

241 
PackëBuf„r
.
U4
[2] = PacketBuffer.U4[8];

242 
	`gpuDøwFT3
(
gpuPﬁyS∑nDrivî
);

250 
	`gpuDøwG3
(
gpuPﬁyS∑nDrivîs
 [
BÀndög_Mode
 | 
Maskög
 | 
BÀndög
 | 129 | 
PixñMSB
]);

257 
	`gpuSëCLUT
 (
PackëBuf„r
.
U4
[2] >> 16);

258 
	`gpuSëTextuª
 (
PackëBuf„r
.
U4
[5] >> 16);

259 
	`gpuDøwGT3
(
gpuPﬁyS∑nDrivîs
 [
BÀndög_Mode
 | 
TEXT_MODE
 | 
Maskög
 | 
BÀndög
 | ((
Lightög
)?129:0Ë| 
PixñMSB
]);

266 c⁄° 
PP
 
gpuPﬁyS∑nDrivî
 = 
gpuPﬁyS∑nDrivîs
 [
BÀndög_Mode
 | 
Maskög
 | 
BÀndög
 | 129 | 
PixñMSB
];

267 
	`gpuDøwG3
(
gpuPﬁyS∑nDrivî
);

268 
PackëBuf„r
.
U4
[0] = PacketBuffer.U4[6];

269 
PackëBuf„r
.
U4
[1] = PacketBuffer.U4[7];

270 
	`gpuDøwG3
(
gpuPﬁyS∑nDrivî
);

278 
	`gpuSëCLUT
 (
PackëBuf„r
.
U4
[2] >> 16);

279 
	`gpuSëTextuª
 (
PackëBuf„r
.
U4
[5] >> 16);

280 c⁄° 
PP
 
gpuPﬁyS∑nDrivî
 = 
gpuPﬁyS∑nDrivîs
 [
BÀndög_Mode
 | 
TEXT_MODE
 | 
Maskög
 | 
BÀndög
 | ((
Lightög
)?129:0Ë| 
PixñMSB
];

281 
	`gpuDøwGT3
(
gpuPﬁyS∑nDrivî
);

282 
PackëBuf„r
.
U4
[0] = PacketBuffer.U4[9];

283 
PackëBuf„r
.
U4
[1] = PacketBuffer.U4[10];

284 
PackëBuf„r
.
U4
[2] = PacketBuffer.U4[11];

285 
	`gpuDøwGT3
(
gpuPﬁyS∑nDrivî
);

293 
	`gpuDøwLF
(
gpuPixñDrivîs
 [ (
BÀndög_Mode
 | 
Maskög
 | 
BÀndög
 | (
PixñMSB
>>3)) >> 1]);

298 
u32
 
num_vîãxes
 = 1;

299 
u32
 *
li°_posôi⁄
 = &(
li°
[2]);

301 
	`gpuDøwLF
(
gpuPixñDrivîs
 [ (
BÀndög_Mode
 | 
Maskög
 | 
BÀndög
 | (
PixñMSB
>>3)) >> 1]);

305 
PackëBuf„r
.
U4
[1] = PacketBuffer.U4[2];

306 
PackëBuf„r
.
U4
[2] = *
li°_posôi⁄
++;

307 
	`gpuDøwLF
(
gpuPixñDrivîs
 [ (
BÀndög_Mode
 | 
Maskög
 | 
BÀndög
 | (
PixñMSB
>>3)) >> 1]);

309 
num_vîãxes
++;

310 if(
li°_posôi⁄
 >
li°_íd
) {

311 
cmd
 = -1;

312 
bªaklo›
;

314 if((*
li°_posôi⁄
 & 0xf000f000) == 0x50005000)

318 
Àn
 +(
num_vîãxes
 - 2);

326 
	`gpuDøwLG
(
gpuPixñDrivîs
 [ (
BÀndög_Mode
 | 
Maskög
 | 
BÀndög
 | (
PixñMSB
>>3)) >> 1]);

331 
u32
 
num_vîãxes
 = 1;

332 
u32
 *
li°_posôi⁄
 = &(
li°
[2]);

334 
	`gpuDøwLG
(
gpuPixñDrivîs
 [ (
BÀndög_Mode
 | 
Maskög
 | 
BÀndög
 | (
PixñMSB
>>3)) >> 1]);

338 
PackëBuf„r
.
U4
[0] = PacketBuffer.U4[2];

339 
PackëBuf„r
.
U4
[1] = PacketBuffer.U4[3];

340 
PackëBuf„r
.
U4
[2] = *
li°_posôi⁄
++;

341 
PackëBuf„r
.
U4
[3] = *
li°_posôi⁄
++;

342 
	`gpuDøwLG
(
gpuPixñDrivîs
 [ (
BÀndög_Mode
 | 
Maskög
 | 
BÀndög
 | (
PixñMSB
>>3)) >> 1]);

344 
num_vîãxes
++;

345 if(
li°_posôi⁄
 >
li°_íd
) {

346 
cmd
 = -1;

347 
bªaklo›
;

349 if((*
li°_posôi⁄
 & 0xf000f000) == 0x50005000)

353 
Àn
 +(
num_vîãxes
 - 2) * 2;

361 
	`gpuDøwT
(
gpuTûeS∑nDrivîs
 [
BÀndög_Mode
 | 
Maskög
 | 
BÀndög
 | (
PixñMSB
>>3)]);

368 
	`gpuSëCLUT
 (
PackëBuf„r
.
U4
[2] >> 16);

369 
	`gpuSëTextuª
 (
GPU_GP1
);

370 i‡((
PackëBuf„r
.
U1
[0]>0x5F) && (PacketBuffer.U1[1]>0x5F) && (PacketBuffer.U1[2]>0x5F))

371 
	`gpuDøwS
(
gpuS¥ôeS∑nDrivîs
 [
BÀndög_Mode
 | 
TEXT_MODE
 | 
Maskög
 | 
BÀndög
 | (
íabÀAbbeyHack
<<7Ë| 
PixñMSB
]);

373 
	`gpuDøwS
(
gpuS¥ôeS∑nDrivîs
 [
BÀndög_Mode
 | 
TEXT_MODE
 | 
Maskög
 | 
BÀndög
 | 
Lightög
 | (
íabÀAbbeyHack
<<7Ë| 
PixñMSB
]);

380 
PackëBuf„r
.
U4
[2] = 0x00010001;

381 
	`gpuDøwT
(
gpuTûeS∑nDrivîs
 [
BÀndög_Mode
 | 
Maskög
 | 
BÀndög
 | (
PixñMSB
>>3)]);

388 
PackëBuf„r
.
U4
[2] = 0x00080008;

389 
	`gpuDøwT
(
gpuTûeS∑nDrivîs
 [
BÀndög_Mode
 | 
Maskög
 | 
BÀndög
 | (
PixñMSB
>>3)]);

396 
PackëBuf„r
.
U4
[3] = 0x00080008;

397 
	`gpuSëCLUT
 (
PackëBuf„r
.
U4
[2] >> 16);

398 
	`gpuSëTextuª
 (
GPU_GP1
);

399 i‡((
PackëBuf„r
.
U1
[0]>0x5F) && (PacketBuffer.U1[1]>0x5F) && (PacketBuffer.U1[2]>0x5F))

400 
	`gpuDøwS
(
gpuS¥ôeS∑nDrivîs
 [
BÀndög_Mode
 | 
TEXT_MODE
 | 
Maskög
 | 
BÀndög
 | (
íabÀAbbeyHack
<<7Ë| 
PixñMSB
]);

402 
	`gpuDøwS
(
gpuS¥ôeS∑nDrivîs
 [
BÀndög_Mode
 | 
TEXT_MODE
 | 
Maskög
 | 
BÀndög
 | 
Lightög
 | (
íabÀAbbeyHack
<<7Ë| 
PixñMSB
]);

409 
PackëBuf„r
.
U4
[2] = 0x00100010;

410 
	`gpuDøwT
(
gpuTûeS∑nDrivîs
 [
BÀndög_Mode
 | 
Maskög
 | 
BÀndög
 | (
PixñMSB
>>3)]);

415 #ifde‡
__¨m__


416 i‡((
GPU_GP1
 & 0x180Ë=0 && (
Maskög
 | 
PixñMSB
) == 0)

418 
	`gpuSëCLUT
 (
PackëBuf„r
.
U4
[2] >> 16);

419 
	`gpuSëTextuª
 (
GPU_GP1
);

420 
	`gpuDøwS16
();

427 
PackëBuf„r
.
U4
[3] = 0x00100010;

428 
	`gpuSëCLUT
 (
PackëBuf„r
.
U4
[2] >> 16);

429 
	`gpuSëTextuª
 (
GPU_GP1
);

430 i‡((
PackëBuf„r
.
U1
[0]>0x5F) && (PacketBuffer.U1[1]>0x5F) && (PacketBuffer.U1[2]>0x5F))

431 
	`gpuDøwS
(
gpuS¥ôeS∑nDrivîs
 [
BÀndög_Mode
 | 
TEXT_MODE
 | 
Maskög
 | 
BÀndög
 | (
íabÀAbbeyHack
<<7Ë| 
PixñMSB
]);

433 
	`gpuDøwS
(
gpuS¥ôeS∑nDrivîs
 [
BÀndög_Mode
 | 
TEXT_MODE
 | 
Maskög
 | 
BÀndög
 | 
Lightög
 | (
íabÀAbbeyHack
<<7Ë| 
PixñMSB
]);

437 
	`gpuMoveImage
();

439 #ifde‡
TEST


442 
u32
 
lﬂd_width
 = 
li°
[2] & 0xffff;

443 
u32
 
lﬂd_height
 = 
li°
[2] >> 16;

444 
u32
 
lﬂd_size
 = 
lﬂd_width
 * 
lﬂd_height
;

446 
Àn
 +
lﬂd_size
 / 2;

454 
bªaklo›
;

457 c⁄° 
u32
 
ãmp
 = 
PackëBuf„r
.
U4
[0];

458 
GPU_GP1
 = (GPU_GP1 & ~0x000007FFË| (
ãmp
 & 0x000007FF);

459 
	`gpuSëTextuª
(
ãmp
);

460 
gpu
.
ex_ªgs
[1] = 
ãmp
;

464 c⁄° 
u8
 
TextuªMask
[32] = {

468 c⁄° 
u32
 
ãmp
 = 
PackëBuf„r
.
U4
[0];

469 
TextuªWödow
[0] = ((
ãmp
 >> 10) & 0x1F) << 3;

470 
TextuªWödow
[1] = ((
ãmp
 >> 15) & 0x1F) << 3;

471 
TextuªWödow
[2] = 
TextuªMask
[(
ãmp
 >> 0) & 0x1F];

472 
TextuªWödow
[3] = 
TextuªMask
[(
ãmp
 >> 5) & 0x1F];

473 
	`gpuSëTextuª
(
GPU_GP1
);

474 
gpu
.
ex_ªgs
[2] = 
ãmp
;

478 c⁄° 
u32
 
ãmp
 = 
PackëBuf„r
.
U4
[0];

479 
DøwögAªa
[0] = 
ãmp
 & 0x3FF;

480 
DøwögAªa
[1] = (
ãmp
 >> 10) & 0x3FF;

481 
gpu
.
ex_ªgs
[3] = 
ãmp
;

485 c⁄° 
u32
 
ãmp
 = 
PackëBuf„r
.
U4
[0];

486 
DøwögAªa
[2] = (
ãmp
 & 0x3FF) + 1;

487 
DøwögAªa
[3] = ((
ãmp
 >> 10) & 0x3FF) + 1;

488 
gpu
.
ex_ªgs
[4] = 
ãmp
;

492 c⁄° 
u32
 
ãmp
 = 
PackëBuf„r
.
U4
[0];

493 
DøwögOff£t
[0] = ((
s32
)
ãmp
<<(32-11))>>(32-11);

494 
DøwögOff£t
[1] = ((
s32
)
ãmp
<<(32-22))>>(32-11);

495 
gpu
.
ex_ªgs
[5] = 
ãmp
;

499 c⁄° 
u32
 
ãmp
 = 
PackëBuf„r
.
U4
[0];

500 
Maskög
 = (
ãmp
 & 0x2) << 1;

501 
PixñMSB
 =(
ãmp
 & 0x1) << 8;

502 
gpu
.
ex_ªgs
[6] = 
ãmp
;

508 
bªaklo›
:

509 
gpu
.
ex_ªgs
[1] &= ~0x1ff;

510 
gpu
.
ex_ªgs
[1] |
GPU_GP1
 & 0x1ff;

512 *
œ°_cmd
 = 
cmd
;

513  
li°
 - 
li°_°¨t
;

514 
	}
}

516 
	$ªndîî_sync_ecmds
(
uöt32_t
 *
ecmds
)

518 
dummy
;

519 
	`do_cmd_li°
(&
ecmds
[1], 6, &
dummy
);

520 
	}
}

522 
	$ªndîî_upd©e_ˇches
(
x
, 
y
, 
w
, 
h
)

524 
	}
}

526 
	$ªndîî_Êush_queues
()

528 
	}
}

530 
	$ªndîî_£t_öãæa˚
(
íabÀ
, 
is_odd
)

532 
	}
}

534 #i‚de‡
TEST


536 
	~"../../‰⁄ãnd/∂ugö_lib.h
"

538 
	$ªndîî_£t_c⁄fig
(c⁄° 
ª¨med_cbs
 *
cbs
)

540 
f‹˚_öãæa˚
 = 
cbs
->
gpu_u«i
.
löeskù
;

541 
íabÀAbbeyHack
 = 
cbs
->
gpu_u«i
.
abe_hack
;

542 
light
 = !
cbs
->
gpu_u«i
.
no_light
;

543 
bÀnd
 = !
cbs
->
gpu_u«i
.
no_bÀnd
;

545 
GPU_FømeBuf„r
 = (
u16
 *)
gpu
.
vøm
;

546 
	}
}

	@plugins/gpu_unai/port.h

1 
	~<°ddef.h
>

2 
	~<°rög.h
>

4 
	#INLINE
 
ölöe


	)

6 
	#GPU_öô
 
GPUöô


	)

7 
	#GPU_shutdown
 
GPUshutdown


	)

9 
	#GPU_wrôeD©aMem
 
GPUwrôeD©aMem


	)

10 
	#GPU_dmaChaö
 
GPUdmaChaö


	)

11 
	#GPU_wrôeD©a
 
GPUwrôeD©a


	)

12 
	#GPU_ªadD©aMem
 
GPUªadD©aMem


	)

13 
	#GPU_ªadD©a
 
GPUªadD©a


	)

14 
	#GPU_ªadSètus
 
GPUªadSètus


	)

15 
	#GPU_wrôeSètus
 
GPUwrôeSètus


	)

16 
	#GPU_upd©eLa˚
 
GPUupd©eLa˚


	)

20 
	#u32
 

	)

21 
	#s32
 sig√d 

	)

23 
boﬁ
 
GPUöô
();

24 
GPUshutdown
();

25 
GPUwrôeD©aMem
(
u32
* 
dmaAddªss
, 
s32
 
dmaCou¡
);

26 
GPUdmaChaö
(
u32
* 
ba£Addr
, u32 
dmaVAddr
);

27 
GPUwrôeD©a
(
u32
 
d©a
);

28 
GPUªadD©aMem
(
u32
* 
dmaAddªss
, 
s32
 
dmaCou¡
);

29 
u32
 
GPUªadD©a
();

30 
u32
 
GPUªadSètus
();

31 
GPUwrôeSètus
(
u32
 
d©a
);

33 #unde‡
u32


34 #unde‡
s32


	@plugins/gpu_unai/profiler.h

1 
	#pcsx4Æl_¥of_∑u£
(...)

	)

2 
	#pcsx4Æl_¥of_°¨t_wôh_∑u£
(...)

	)

3 
	#pcsx4Æl_¥of_íd_wôh_ªsume
(...)

	)

4 
	#pcsx4Æl_¥of_ªsume
(...)

	)

	@plugins/gpulib/gpu.c

11 
	~<°dio.h
>

12 
	~<°rög.h
>

13 
	~"gpu.h
"

15 
	#ARRAY_SIZE
(
x
Ë((xË/ ((x)[0]))

	)

16 #ifde‡
__GNUC__


17 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
((x), 0)

	)

18 
	#¥ñﬂd
 
__buûtö_¥e„tch


	)

19 
	#noölöe
 
	`__©åibuã__
((
noölöe
))

	)

21 
	#u∆ikñy
(
x
)

	)

22 
	#¥ñﬂd
(...)

	)

23 
	#noölöe


	)

26 
	#gpu_log
(
fmt
, ...) \

27 
	`¥ötf
("%d:%03d: " 
fmt
, *
gpu
.
°©e
.
‰ame_cou¡
, *gpu.°©e.
h˙t
, ##
__VA_ARGS__
)

	)

30 
	#log_io
(...)

	)

32 
	#log_™omÆy
(...)

	)

34 
psx_gpu
 
	ggpu
;

36 
noölöe
 
do_cmd_buf„r
(
uöt32_t
 *
d©a
, 
cou¡
);

37 
föish_vøm_å™s„r
(
is_ªad
);

39 
noölöe
 
	$do_cmd_ª£t
()

41 i‡(
	`u∆ikñy
(
gpu
.
cmd_Àn
 > 0))

42 
	`do_cmd_buf„r
(
gpu
.
cmd_buf„r
, gpu.
cmd_Àn
);

43 
gpu
.
cmd_Àn
 = 0;

45 i‡(
	`u∆ikñy
(
gpu
.
dma
.
h
 > 0))

46 
	`föish_vøm_å™s„r
(
gpu
.
dma_°¨t
.
is_ªad
);

47 
gpu
.
dma
.
h
 = 0;

48 
	}
}

50 
noölöe
 
	$do_ª£t
()

52 
i
;

54 
	`do_cmd_ª£t
();

56 
	`mem£t
(
gpu
.
ªgs
, 0, (gpu.regs));

57 
i
 = 0; i < (
gpu
.
ex_ªgs
) / (gpu.ex_regs[0]); i++)

58 
gpu
.
ex_ªgs
[
i
] = (0xe0 + i) << 24;

59 
gpu
.
°©us
.
ªg
 = 0x14802000;

60 
gpu
.
gp0
 = 0;

61 
gpu
.
ªgs
[3] = 1;

62 
gpu
.
s¸ìn
.
hªs
 = gpu.s¸ìn.
w
 = 256;

63 
gpu
.
s¸ìn
.
vªs
 = gpu.s¸ìn.
h
 = 240;

64 
	}
}

66 
noölöe
 
	$upd©e_width
()

68 
sw
 = 
gpu
.
s¸ìn
.
x2
 - gpu.s¸ìn.
x1
;

69 i‡(
sw
 <= 0 || sw >= 2560)

71 
gpu
.
s¸ìn
.
w
 = gpu.s¸ìn.
hªs
;

73 
gpu
.
s¸ìn
.
w
 = 
sw
 * gpu.s¸ìn.
hªs
 / 2560;

74 
	}
}

76 
noölöe
 
	$upd©e_height
()

79 
sh
 = 
gpu
.
s¸ìn
.
y2
 - gpu.s¸ìn.
y1
;

80 i‡(
gpu
.
°©us
.
dheight
)

81 
sh
 *= 2;

82 i‡(
sh
 <0 || sh > 
gpu
.
s¸ìn
.
vªs
)

83 
sh
 = 
gpu
.
s¸ìn
.
vªs
;

85 
gpu
.
s¸ìn
.
h
 = 
sh
;

86 
	}
}

88 
noölöe
 
	$decide_‰ameskù
()

90 i‡(
gpu
.
‰ameskù
.
a˘ive
)

91 
gpu
.
‰ameskù
.
˙t
++;

93 
gpu
.
‰ameskù
.
˙t
 = 0;

94 
gpu
.
‰ameskù
.
‰ame_ªady
 = 1;

97 i‡(!
gpu
.
‰ameskù
.
a˘ive
 && *gpu.‰ameskù.
advi˚
)

98 
gpu
.
‰ameskù
.
a˘ive
 = 1;

99 i‡(
gpu
.
‰ameskù
.
£t
 > 0 && gpu.‰ameskù.
˙t
 < gpu.frameskip.set)

100 
gpu
.
‰ameskù
.
a˘ive
 = 1;

102 
gpu
.
‰ameskù
.
a˘ive
 = 0;

104 i‡(!
gpu
.
‰ameskù
.
a˘ive
 && gpu.‰ameskù.
≥ndög_fûl
[0] != 0) {

105 
dummy
;

106 
	`do_cmd_li°
(
gpu
.
‰ameskù
.
≥ndög_fûl
, 3, &
dummy
);

107 
gpu
.
‰ameskù
.
≥ndög_fûl
[0] = 0;

109 
	}
}

111 
noölöe
 
	$decide_‰ameskù_Ælow
(
uöt32_t
 
cmd_e3
)

115 
uöt32_t
 
x
 = 
cmd_e3
 & 0x3ff;

116 
uöt32_t
 
y
 = (
cmd_e3
 >> 10) & 0x3ff;

117 
gpu
.
‰ameskù
.
Ælow
 = gpu.
°©us
.
öãæa˚
 ||

118 (
uöt32_t
)(
x
 - 
gpu
.
s¸ìn
.xË>(uöt32_t)gpu.s¸ìn.
w
 ||

119 (
uöt32_t
)(
y
 - 
gpu
.
s¸ìn
.yË>(uöt32_t)gpu.s¸ìn.
h
;

120  
gpu
.
‰ameskù
.
Ælow
;

121 
	}
}

123 
noölöe
 
	$gë_gpu_öfo
(
uöt32_t
 
d©a
)

125 
d©a
 & 0x0f) {

130 
gpu
.
gp0
 = gpu.
ex_ªgs
[
d©a
 & 7] & 0xfffff;

133 
gpu
.
gp0
 = gpu.
ex_ªgs
[5] & 0xfffff;

136 
gpu
.
gp0
 = 2;

139 
gpu
.
gp0
 = 0;

142 
	}
}

145 
	#VRAM_SIZE
 (1024 * 512 * 2 * 2)

	)

147 
	$m≠_vøm
()

149 
gpu
.
vøm
 = gpu.
	`mm≠
(
VRAM_SIZE
);

150 i‡(
gpu
.
vøm
 !
NULL
) {

151 
gpu
.
vøm
 += 4096 / 2;

155 
	`Ârötf
(
°dîr
, "couldÇot map vram,Éxpect crashes\n");

158 
	}
}

160 
	$GPUöô
()

162 
ªt
;

163 
ªt
 = 
	`vout_öô
();

164 
ªt
 |
	`ªndîî_öô
();

166 
gpu
.
°©e
.
‰ame_cou¡
 = &gpu.
zîo
;

167 
gpu
.
°©e
.
h˙t
 = &gpu.
zîo
;

168 
gpu
.
‰ameskù
.
a˘ive
 = 0;

169 
gpu
.
cmd_Àn
 = 0;

170 
	`do_ª£t
();

172 i‡(
gpu
.
mm≠
 !
NULL
) {

173 i‡(
	`m≠_vøm
() != 0)

174 
ªt
 = -1;

176  
ªt
;

177 
	}
}

179 
	$GPUshutdown
()

181 
ªt
;

183 
	`ªndîî_föish
();

184 
ªt
 = 
	`vout_föish
();

185 i‡(
gpu
.
vøm
 !
NULL
) {

186 
gpu
.
vøm
 -= 4096 / 2;

187 
gpu
.
	`munm≠
(gpu.
vøm
, 
VRAM_SIZE
);

189 
gpu
.
vøm
 = 
NULL
;

191  
ªt
;

192 
	}
}

194 
	$GPUwrôeSètus
(
uöt32_t
 
d©a
)

196 c⁄° 
hªs
[8] = { 256, 368, 320, 384, 512, 512, 640, 640 };

197 c⁄° 
vªs
[4] = { 240, 480, 256, 480 };

198 
uöt32_t
 
cmd
 = 
d©a
 >> 24;

200 i‡(
cmd
 < 
	`ARRAY_SIZE
(
gpu
.
ªgs
)) {

201 i‡(
cmd
 > 1 && cmd !5 && 
gpu
.
ªgs
[cmd] =
d©a
)

203 
gpu
.
ªgs
[
cmd
] = 
d©a
;

206 
gpu
.
°©e
.
fb_dúty
 = 1;

208 
cmd
) {

210 
	`do_ª£t
();

213 
	`do_cmd_ª£t
();

216 
gpu
.
°©us
.
bœnkög
 = 
d©a
 & 1;

219 
gpu
.
°©us
.
dma
 = 
d©a
 & 3;

222 
gpu
.
s¸ìn
.
x
 = 
d©a
 & 0x3ff;

223 
gpu
.
s¸ìn
.
y
 = (
d©a
 >> 10) & 0x1ff;

224 i‡(
gpu
.
‰ameskù
.
£t
) {

225 
	`decide_‰ameskù_Ælow
(
gpu
.
ex_ªgs
[3]);

226 i‡(
gpu
.
‰ameskù
.
œ°_Êù_‰ame
 !*gpu.
°©e
.
‰ame_cou¡
) {

227 
	`decide_‰ameskù
();

228 
gpu
.
‰ameskù
.
œ°_Êù_‰ame
 = *gpu.
°©e
.
‰ame_cou¡
;

233 
gpu
.
s¸ìn
.
x1
 = 
d©a
 & 0xfff;

234 
gpu
.
s¸ìn
.
x2
 = (
d©a
 >> 12) & 0xfff;

235 
	`upd©e_width
();

238 
gpu
.
s¸ìn
.
y1
 = 
d©a
 & 0x3ff;

239 
gpu
.
s¸ìn
.
y2
 = (
d©a
 >> 10) & 0x3ff;

240 
	`upd©e_height
();

243 
gpu
.
°©us
.
ªg
 = (gpu.°©us.ªg & ~0x7f0000Ë| ((
d©a
 & 0x3F) << 17) | ((data & 0x40) << 10);

244 
gpu
.
s¸ìn
.
hªs
 = hªs[(gpu.
°©us
.
ªg
 >> 16) & 7];

245 
gpu
.
s¸ìn
.
vªs
 = vªs[(gpu.
°©us
.
ªg
 >> 19) & 3];

246 
	`upd©e_width
();

247 
	`upd©e_height
();

248 
	`ªndîî_nŸify_ªs_ch™ge
();

251 i‡((
cmd
 & 0xf0) == 0x10)

252 
	`gë_gpu_öfo
(
d©a
);

256 #ifde‡
GPUwrôeSètus_ext


257 
	`GPUwrôeSètus_ext
(
d©a
);

259 
	}
}

261 c⁄° 
	gcmd_Àngths
[256] =

281 
	#VRAM_MEM_XY
(
x
, 
y
Ë&
gpu
.
vøm
[(yË* 1024 + (x)]

	)

283 
ölöe
 
	$do_vøm_löe
(
x
, 
y
, 
uöt16_t
 *
mem
, 
l
, 
is_ªad
)

285 
uöt16_t
 *
vøm
 = 
	`VRAM_MEM_XY
(
x
, 
y
);

286 i‡(
is_ªad
)

287 
	`mem˝y
(
mem
, 
vøm
, 
l
 * 2);

289 
	`mem˝y
(
vøm
, 
mem
, 
l
 * 2);

290 
	}
}

292 
	$do_vøm_io
(
uöt32_t
 *
d©a
, 
cou¡
, 
is_ªad
)

294 
cou¡_öôül
 = 
cou¡
;

295 
uöt16_t
 *
sd©a
 = (uöt16_à*)
d©a
;

296 
x
 = 
gpu
.
dma
.x, 
y
 = gpu.dma.y;

297 
w
 = 
gpu
.
dma
.w, 
h
 = gpu.dma.h;

298 
o
 = 
gpu
.
dma
.
off£t
;

299 
l
;

300 
cou¡
 *= 2;

302 i‡(
gpu
.
dma
.
off£t
) {

303 
l
 = 
w
 - 
gpu
.
dma
.
off£t
;

304 i‡(
cou¡
 < 
l
)

305 
l
 = 
cou¡
;

307 
	`do_vøm_löe
(
x
 + 
o
, 
y
, 
sd©a
, 
l
, 
is_ªad
);

309 i‡(
o
 + 
l
 < 
w
)

310 
o
 +
l
;

312 
o
 = 0;

313 
y
++;

314 
h
--;

316 
sd©a
 +
l
;

317 
cou¡
 -
l
;

320 ; 
h
 > 0 && 
cou¡
 >
w
; 
sd©a
 +w, cou¡ -w, 
y
++, h--) {

321 
y
 &= 511;

322 
	`do_vøm_löe
(
x
, 
y
, 
sd©a
, 
w
, 
is_ªad
);

325 i‡(
h
 > 0) {

326 i‡(
cou¡
 > 0) {

327 
y
 &= 511;

328 
	`do_vøm_löe
(
x
, 
y
, 
sd©a
, 
cou¡
, 
is_ªad
);

329 
o
 = 
cou¡
;

330 
cou¡
 = 0;

334 
	`föish_vøm_å™s„r
(
is_ªad
);

335 
gpu
.
dma
.
y
 = y;

336 
gpu
.
dma
.
h
 = h;

337 
gpu
.
dma
.
off£t
 = 
o
;

339  
cou¡_öôül
 - 
cou¡
 / 2;

340 
	}
}

342 
	$°¨t_vøm_å™s„r
(
uöt32_t
 
pos_w‹d
, uöt32_à
size_w‹d
, 
is_ªad
)

344 i‡(
gpu
.
dma
.
h
)

345 
	`log_™omÆy
("start_vram_transfer while old unfinished\n");

347 
gpu
.
dma
.
x
 = 
pos_w‹d
 & 0x3ff;

348 
gpu
.
dma
.
y
 = (
pos_w‹d
 >> 16) & 0x1ff;

349 
gpu
.
dma
.
w
 = ((
size_w‹d
 - 1) & 0x3ff) + 1;

350 
gpu
.
dma
.
h
 = (((
size_w‹d
 >> 16) - 1) & 0x1ff) + 1;

351 
gpu
.
dma
.
off£t
 = 0;

352 
gpu
.
dma
.
is_ªad
 = is_read;

353 
gpu
.
dma_°¨t
 = gpu.
dma
;

355 
	`ªndîî_Êush_queues
();

356 i‡(
is_ªad
) {

357 
gpu
.
°©us
.
img
 = 1;

359 
	`mem˝y
(&
gpu
.
gp0
, 
	`VRAM_MEM_XY
(gpu.
dma
.
x
, gpu.dma.
y
), 4);

360 
gpu
.
°©e
.
œ°_vøm_ªad_‰ame
 = *gpu.°©e.
‰ame_cou¡
;

363 
	`log_io
("°¨t_vøm_å™s„∏%¯(%d, %dË%dx%d\n", 
is_ªad
 ? 'r' : 'w',

364 
gpu
.
dma
.
x
, gpu.dma.
y
, gpu.dma.
w
, gpu.dma.
h
);

365 
	}
}

367 
	$föish_vøm_å™s„r
(
is_ªad
)

369 i‡(
is_ªad
)

370 
gpu
.
°©us
.
img
 = 0;

372 
	`ªndîî_upd©e_ˇches
(
gpu
.
dma_°¨t
.
x
, gpu.dma_°¨t.
y
,

373 
gpu
.
dma_°¨t
.
w
, gpu.dma_°¨t.
h
);

374 
	}
}

376 
noölöe
 
	$do_cmd_li°_skù
(
uöt32_t
 *
d©a
, 
cou¡
, *
œ°_cmd
)

378 
cmd
 = 0, 
pos
 = 0, 
Àn
, 
dummy
, 
v
;

379 
skù
 = 1;

381 
gpu
.
‰ameskù
.
≥ndög_fûl
[0] = 0;

383 
pos
 < 
cou¡
 && 
skù
) {

384 
uöt32_t
 *
li°
 = 
d©a
 + 
pos
;

385 
cmd
 = 
li°
[0] >> 24;

386 
Àn
 = 1 + 
cmd_Àngths
[
cmd
];

388 
cmd
) {

390 i‡((
li°
[2] & 0x3ffË> 
gpu
.
s¸ìn
.
w
 || (÷i°[2] >> 16Ë& 0x1ffË> gpu.s¸ìn.
h
)

392 
	`do_cmd_li°
(
li°
, 3, &
dummy
);

394 
	`mem˝y
(
gpu
.
‰ameskù
.
≥ndög_fûl
, 
li°
, 3 * 4);

400 
gpu
.
ex_ªgs
[1] &= ~0x1ff;

401 
gpu
.
ex_ªgs
[1] |
li°
[4 + ((
cmd
 >> 4) & 1)] & 0x1ff;

404 
v
 = 3; 
pos
 + v < 
cou¡
; v++)

406 i‡((
li°
[
v
] & 0xf000f000) == 0x50005000)

409 
Àn
 +
v
 - 3;

412 
v
 = 4; 
pos
 + v < 
cou¡
; v += 2)

414 i‡((
li°
[
v
] & 0xf000f000) == 0x50005000)

417 
Àn
 +
v
 - 4;

420 i‡(
cmd
 == 0xe3)

421 
skù
 = 
	`decide_‰ameskù_Ælow
(
li°
[0]);

422 i‡((
cmd
 & 0xf8) == 0xe0)

423 
gpu
.
ex_ªgs
[
cmd
 & 7] = 
li°
[0];

427 i‡(
pos
 + 
Àn
 > 
cou¡
) {

428 
cmd
 = -1;

431 i‡(0xa0 <
cmd
 && cmd <= 0xdf)

434 
pos
 +
Àn
;

437 
	`ªndîî_sync_ecmds
(
gpu
.
ex_ªgs
);

438 *
œ°_cmd
 = 
cmd
;

439  
pos
;

440 
	}
}

442 
noölöe
 
	$do_cmd_buf„r
(
uöt32_t
 *
d©a
, 
cou¡
)

444 
cmd
, 
pos
;

445 
uöt32_t
 
ﬁd_e3
 = 
gpu
.
ex_ªgs
[3];

446 
vøm_dúty
 = 0;

449 
pos
 = 0;Öo†< 
cou¡
; )

451 i‡(
gpu
.
dma
.
h
 && !gpu.
dma_°¨t
.
is_ªad
) {

452 
vøm_dúty
 = 1;

453 
pos
 +
	`do_vøm_io
(
d©a
 +Öos, 
cou¡
 -Öos, 0);

454 i‡(
pos
 =
cou¡
)

458 
cmd
 = 
d©a
[
pos
] >> 24;

459 i‡(0xa0 <
cmd
 && cmd <= 0xdf) {

461 
	`°¨t_vøm_å™s„r
(
d©a
[
pos
 + 1], d©a[po†+ 2], (
cmd
 & 0xe0) == 0xc0);

462 
pos
 += 3;

467 i‡(
gpu
.
‰ameskù
.
a˘ive
 && (gpu.‰ameskù.
Ælow
 || ((
d©a
[
pos
] >> 24) & 0xf0) == 0xe0))

468 
pos
 +
	`do_cmd_li°_skù
(
d©a
 +Öos, 
cou¡
 -Öos, &
cmd
);

470 
pos
 +
	`do_cmd_li°
(
d©a
 +Öos, 
cou¡
 -Öos, &
cmd
);

471 
vøm_dúty
 = 1;

474 i‡(
cmd
 == -1)

479 
gpu
.
°©us
.
ªg
 &= ~0x1fff;

480 
gpu
.
°©us
.
ªg
 |gpu.
ex_ªgs
[1] & 0x7ff;

481 
gpu
.
°©us
.
ªg
 |(gpu.
ex_ªgs
[6] & 3) << 11;

483 
gpu
.
°©e
.
fb_dúty
 |
vøm_dúty
;

485 i‡(
ﬁd_e3
 !
gpu
.
ex_ªgs
[3])

486 
	`decide_‰ameskù_Ælow
(
gpu
.
ex_ªgs
[3]);

488  
cou¡
 - 
pos
;

489 
	}
}

491 
	$Êush_cmd_buf„r
()

493 
À·
 = 
	`do_cmd_buf„r
(
gpu
.
cmd_buf„r
, gpu.
cmd_Àn
);

494 i‡(
À·
 > 0)

495 
	`memmove
(
gpu
.
cmd_buf„r
, gpu.cmd_buf„∏+ gpu.
cmd_Àn
 - 
À·
,Üeft * 4);

496 
gpu
.
cmd_Àn
 = 
À·
;

497 
	}
}

499 
	$GPUwrôeD©aMem
(
uöt32_t
 *
mem
, 
cou¡
)

501 
À·
;

503 
	`log_io
("gpu_dma_wrôê%∞%d\n", 
mem
, 
cou¡
);

505 i‡(
	`u∆ikñy
(
gpu
.
cmd_Àn
 > 0))

506 
	`Êush_cmd_buf„r
();

508 
À·
 = 
	`do_cmd_buf„r
(
mem
, 
cou¡
);

509 i‡(
À·
)

510 
	`log_™omÆy
("GPUwrôeD©aMem: disˇrded %d/%d w‹ds\n", 
À·
, 
cou¡
);

511 
	}
}

513 
	$GPUwrôeD©a
(
uöt32_t
 
d©a
)

515 
	`log_io
("gpu_wrôê%08x\n", 
d©a
);

516 
gpu
.
cmd_buf„r
[gpu.
cmd_Àn
++] = 
d©a
;

517 i‡(
gpu
.
cmd_Àn
 >
CMD_BUFFER_LEN
)

518 
	`Êush_cmd_buf„r
();

519 
	}
}

521 
	$GPUdmaChaö
(
uöt32_t
 *
ømba£
, uöt32_à
°¨t_addr
)

523 
uöt32_t
 
addr
, *
li°
, 
ld_addr
 = 0;

524 
Àn
, 
À·
, 
cou¡
;

525 
˝u_cy˛es
 = 0;

527 
	`¥ñﬂd
(
ømba£
 + (
°¨t_addr
 & 0x1fffff) / 4);

529 i‡(
	`u∆ikñy
(
gpu
.
cmd_Àn
 > 0))

530 
	`Êush_cmd_buf„r
();

532 
	`log_io
("gpu_dma_chain\n");

533 
addr
 = 
°¨t_addr
 & 0xffffff;

534 
cou¡
 = 0; (
addr
 & 0x800000) == 0; count++)

536 
li°
 = 
ømba£
 + (
addr
 & 0x1fffff) / 4;

537 
Àn
 = 
li°
[0] >> 24;

538 
addr
 = 
li°
[0] & 0xffffff;

539 
	`¥ñﬂd
(
ømba£
 + (
addr
 & 0x1fffff) / 4);

541 
˝u_cy˛es
 += 10;

542 i‡(
Àn
 > 0)

543 
˝u_cy˛es
 +5 + 
Àn
;

545 
	`log_io
(".chaö %08x #%d\n", (
li°
 - 
ømba£
Ë* 4, 
Àn
);

547 i‡(
Àn
) {

548 
À·
 = 
	`do_cmd_buf„r
(
li°
 + 1, 
Àn
);

549 i‡(
À·
)

550 
	`log_™omÆy
("GPUdmaChaö: disˇrded %d/%d w‹ds\n", 
À·
, 
Àn
);

553 
	#LD_THRESHOLD
 (8*1024)

	)

554 i‡(
cou¡
 >
LD_THRESHOLD
) {

555 i‡(
cou¡
 =
LD_THRESHOLD
) {

556 
ld_addr
 = 
addr
;

563 
li°
[0] |= 0x800000;

567 i‡(
ld_addr
 != 0) {

569 
cou¡
 -
LD_THRESHOLD
 + 2;

570 
addr
 = 
ld_addr
 & 0x1fffff;

571 
cou¡
-- > 0) {

572 
li°
 = 
ømba£
 + 
addr
 / 4;

573 
addr
 = 
li°
[0] & 0x1fffff;

574 
li°
[0] &= ~0x800000;

578 
gpu
.
°©e
.
œ°_li°
.
‰ame
 = *gpu.°©e.
‰ame_cou¡
;

579 
gpu
.
°©e
.
œ°_li°
.
h˙t
 = *gpu.state.hcnt;

580 
gpu
.
°©e
.
œ°_li°
.
cy˛es
 = 
˝u_cy˛es
;

581 
gpu
.
°©e
.
œ°_li°
.
addr
 = 
°¨t_addr
;

583  
˝u_cy˛es
;

584 
	}
}

586 
	$GPUªadD©aMem
(
uöt32_t
 *
mem
, 
cou¡
)

588 
	`log_io
("gpu_dma_ªad %∞%d\n", 
mem
, 
cou¡
);

590 i‡(
	`u∆ikñy
(
gpu
.
cmd_Àn
 > 0))

591 
	`Êush_cmd_buf„r
();

593 i‡(
gpu
.
dma
.
h
)

594 
	`do_vøm_io
(
mem
, 
cou¡
, 1);

595 
	}
}

597 
uöt32_t
 
	$GPUªadD©a
()

599 
uöt32_t
 
ªt
;

601 i‡(
	`u∆ikñy
(
gpu
.
cmd_Àn
 > 0))

602 
	`Êush_cmd_buf„r
();

604 
ªt
 = 
gpu
.
gp0
;

605 i‡(
gpu
.
dma
.
h
)

606 
	`do_vøm_io
(&
ªt
, 1, 1);

608 
	`log_io
("gpu_ªad %08x\n", 
ªt
);

609  
ªt
;

610 
	}
}

612 
uöt32_t
 
	$GPUªadSètus
()

614 
uöt32_t
 
ªt
;

616 i‡(
	`u∆ikñy
(
gpu
.
cmd_Àn
 > 0))

617 
	`Êush_cmd_buf„r
();

619 
ªt
 = 
gpu
.
°©us
.
ªg
;

620 
	`log_io
("gpu_ªad_°©u†%08x\n", 
ªt
);

621  
ªt
;

622 
	}
}

624 
	sGPUFªeze


626 
uöt32_t
 
	mulFªezeVîsi⁄
;

627 
uöt32_t
 
	mulSètus
;

628 
uöt32_t
 
	mulC⁄åﬁ
[256];

629 
	mpsxVRam
[1024*1024*2];

632 
	$GPU‰ìze
(
uöt32_t
 
ty≥
, 
GPUFªeze
 *
‰ìze
)

634 
i
;

636 
ty≥
) {

638 i‡(
gpu
.
cmd_Àn
 > 0)

639 
	`Êush_cmd_buf„r
();

640 
	`mem˝y
(
‰ìze
->
psxVRam
, 
gpu
.
vøm
, 1024 * 512 * 2);

641 
	`mem˝y
(
‰ìze
->
ulC⁄åﬁ
, 
gpu
.
ªgs
, (gpu.regs));

642 
	`mem˝y
(
‰ìze
->
ulC⁄åﬁ
 + 0xe0, 
gpu
.
ex_ªgs
, (gpu.ex_regs));

643 
‰ìze
->
ulSètus
 = 
gpu
.
°©us
.
ªg
;

646 
	`mem˝y
(
gpu
.
vøm
, 
‰ìze
->
psxVRam
, 1024 * 512 * 2);

647 
	`mem˝y
(
gpu
.
ªgs
, 
‰ìze
->
ulC⁄åﬁ
, (gpu.regs));

648 
	`mem˝y
(
gpu
.
ex_ªgs
, 
‰ìze
->
ulC⁄åﬁ
 + 0xe0, (gpu.ex_regs));

649 
gpu
.
°©us
.
ªg
 = 
‰ìze
->
ulSètus
;

650 
gpu
.
cmd_Àn
 = 0;

651 
i
 = 8; i > 0; i--) {

652 
gpu
.
ªgs
[
i
] ^= 1;

653 
	`GPUwrôeSètus
((
i
 << 24Ë| (
gpu
.
ªgs
[i] ^ 1));

655 
	`ªndîî_sync_ecmds
(
gpu
.
ex_ªgs
);

656 
	`ªndîî_upd©e_ˇches
(0, 0, 1024, 512);

661 
	}
}

663 
	$GPUupd©eLa˚
()

665 i‡(
gpu
.
cmd_Àn
 > 0)

666 
	`Êush_cmd_buf„r
();

667 
	`ªndîî_Êush_queues
();

669 i‡(
gpu
.
°©us
.
bœnkög
) {

670 i‡(!
gpu
.
°©e
.
bœnked
) {

671 
	`vout_bœnk
();

672 
gpu
.
°©e
.
bœnked
 = 1;

673 
gpu
.
°©e
.
fb_dúty
 = 1;

678 i‡(!
gpu
.
°©e
.
fb_dúty
)

681 i‡(
gpu
.
‰ameskù
.
£t
) {

682 i‡(!
gpu
.
‰ameskù
.
‰ame_ªady
) {

683 i‡(*
gpu
.
°©e
.
‰ame_cou¡
 - gpu.
‰ameskù
.
œ°_Êù_‰ame
 < 9)

685 
gpu
.
‰ameskù
.
a˘ive
 = 0;

687 
gpu
.
‰ameskù
.
‰ame_ªady
 = 0;

690 
	`vout_upd©e
();

691 
gpu
.
°©e
.
fb_dúty
 = 0;

692 
gpu
.
°©e
.
bœnked
 = 0;

693 
	}
}

695 
	$GPUvBœnk
(
is_vbœnk
, 
lcf
)

697 
öãæa˚
 = 
gpu
.
°©e
.
Ælow_öãæa˚


698 && 
gpu
.
°©us
.
öãæa˚
 && gpu.°©us.
dheight
;

701 i‡(
gpu
.
°©e
.
Ælow_öãæa˚
 == 2

702 && *
gpu
.
°©e
.
‰ame_cou¡
 - gpu.°©e.
œ°_vøm_ªad_‰ame
 > 1)

704 
öãæa˚
 = 0;

706 i‡(
öãæa˚
 || i¡îœ˚ !
gpu
.
°©e
.
ﬁd_öãæa˚
) {

707 
gpu
.
°©e
.
ﬁd_öãæa˚
 = 
öãæa˚
;

709 i‡(
gpu
.
cmd_Àn
 > 0)

710 
	`Êush_cmd_buf„r
();

711 
	`ªndîî_Êush_queues
();

712 
	`ªndîî_£t_öãæa˚
(
öãæa˚
, !
lcf
);

714 
	}
}

716 
	~"../../‰⁄ãnd/∂ugö_lib.h
"

718 
	$GPUª¨medCÆlbacks
(c⁄° 
ª¨med_cbs
 *
cbs
)

720 
gpu
.
‰ameskù
.
£t
 = 
cbs
->frameskip;

721 
gpu
.
‰ameskù
.
advi˚
 = &
cbs
->
fskù_advi˚
;

722 
gpu
.
‰ameskù
.
a˘ive
 = 0;

723 
gpu
.
‰ameskù
.
‰ame_ªady
 = 1;

724 
gpu
.
°©e
.
h˙t
 = 
cbs
->
gpu_h˙t
;

725 
gpu
.
°©e
.
‰ame_cou¡
 = 
cbs
->
gpu_‰ame_cou¡
;

726 
gpu
.
°©e
.
Ælow_öãæa˚
 = 
cbs
->
gpu_√⁄
.allow_interlace;

727 
gpu
.
°©e
.
íh™˚mít_íabÀ
 = 
cbs
->
gpu_√⁄
.enhancement_enable;

729 
gpu
.
mm≠
 = 
cbs
->mmap;

730 
gpu
.
munm≠
 = 
cbs
->munmap;

733 i‡(
gpu
.
vøm
 =
NULL
)

734 
	`m≠_vøm
();

736 i‡(
cbs
->
∂_vout_£t_øw_vøm
)

737 
cbs
->
	`∂_vout_£t_øw_vøm
(
gpu
.
vøm
);

738 
	`ªndîî_£t_c⁄fig
(
cbs
);

739 
	`vout_£t_c⁄fig
(
cbs
);

740 
	}
}

	@plugins/gpulib/gpu.h

11 
	~<°döt.h
>

13 #ifde‡
__˝lu•lus


17 
	#CMD_BUFFER_LEN
 1024

	)

19 
	spsx_gpu
 {

20 
uöt32_t
 
cmd_buf„r
[
CMD_BUFFER_LEN
];

21 
uöt32_t
 
ªgs
[16];

22 
uöt16_t
 *
vøm
;

24 
uöt32_t
 
ªg
;

26 
uöt32_t
 
tx
:4;

27 
uöt32_t
 
ty
:1;

28 
uöt32_t
 
abr
:2;

29 
uöt32_t
 
ç
:2;

30 
uöt32_t
 
dtd
:1;

31 
uöt32_t
 
d„
:1;

32 
uöt32_t
 
md
:1;

33 
uöt32_t
 
me
:1;

34 
uöt32_t
 
unkn
:3;

35 
uöt32_t
 
width1
:1;

36 
uöt32_t
 
width0
:2;

37 
uöt32_t
 
dheight
:1;

38 
uöt32_t
 
video
:1;

39 
uöt32_t
 
rgb24
:1;

40 
uöt32_t
 
öãæa˚
:1;

41 
uöt32_t
 
bœnkög
:1;

42 
uöt32_t
 
unkn2
:2;

43 
uöt32_t
 
busy
:1;

44 
uöt32_t
 
img
:1;

45 
uöt32_t
 
com
:1;

46 
uöt32_t
 
dma
:2;

47 
uöt32_t
 
lcf
:1;

49 } 
°©us
;

50 
uöt32_t
 
gp0
;

51 
uöt32_t
 
ex_ªgs
[8];

53 
hªs
, 
vªs
;

54 
x
, 
y
, 
w
, 
h
;

55 
x1
, 
x2
;

56 
y1
, 
y2
;

57 } 
s¸ìn
;

59 
x
, 
y
, 
w
, 
h
;

60 
off£t
, 
is_ªad
;

61 } 
dma
, 
dma_°¨t
;

62 
cmd_Àn
;

63 
uöt32_t
 
zîo
;

65 
uöt32_t
 
fb_dúty
:1;

66 
uöt32_t
 
ﬁd_öãæa˚
:1;

67 
uöt32_t
 
Ælow_öãæa˚
:2;

68 
uöt32_t
 
bœnked
:1;

69 
uöt32_t
 
íh™˚mít_íabÀ
:1;

70 
uöt32_t
 
íh™˚mít_a˘ive
:1;

71 
uöt32_t
 *
‰ame_cou¡
;

72 
uöt32_t
 *
h˙t
;

74 
uöt32_t
 
addr
;

75 
uöt32_t
 
cy˛es
;

76 
uöt32_t
 
‰ame
;

77 
uöt32_t
 
h˙t
;

78 } 
œ°_li°
;

79 
uöt32_t
 
œ°_vøm_ªad_‰ame
;

80 } 
°©e
;

82 
öt32_t
 
£t
:3;

83 
öt32_t
 
˙t
:3;

84 
uöt32_t
 
a˘ive
:1;

85 
uöt32_t
 
Ælow
:1;

86 
uöt32_t
 
‰ame_ªady
:1;

87 c⁄° *
advi˚
;

88 
uöt32_t
 
œ°_Êù_‰ame
;

89 
uöt32_t
 
≥ndög_fûl
[3];

90 } 
‰ameskù
;

91 
uöt16_t
 *(*
gë_íh™˚mít_bu„r
)

92 (*
x
, *
y
, *
w
, *
h
, *
vøm_h
);

93 *(*
mm≠
)(
size
);

94 (*
munm≠
)(*
±r
, 
size
);

97 
psx_gpu
 
gpu
;

99 c⁄° 
cmd_Àngths
[256];

101 
do_cmd_li°
(
uöt32_t
 *
li°
, 
cou¡
, *
œ°_cmd
);

103 
	gª¨med_cbs
;

105 
ªndîî_öô
();

106 
ªndîî_föish
();

107 
ªndîî_sync_ecmds
(
uöt32_t
 * 
ecmds
);

108 
ªndîî_upd©e_ˇches
(
x
, 
y
, 
w
, 
h
);

109 
ªndîî_Êush_queues
();

110 
ªndîî_£t_öãæa˚
(
íabÀ
, 
is_odd
);

111 
ªndîî_£t_c⁄fig
(c⁄° 
ª¨med_cbs
 *
c⁄fig
);

112 
ªndîî_nŸify_ªs_ch™ge
();

114 
vout_öô
();

115 
vout_föish
();

116 
vout_upd©e
();

117 
vout_bœnk
();

118 
vout_£t_c⁄fig
(c⁄° 
ª¨med_cbs
 *
c⁄fig
);

121 
	gGPUFªeze
;

123 
GPUöô
();

124 
GPUshutdown
();

125 
GPUwrôeD©aMem
(
uöt32_t
 *
mem
, 
cou¡
);

126 
GPUdmaChaö
(
uöt32_t
 *
ømba£
, uöt32_à
addr
);

127 
GPUwrôeD©a
(
uöt32_t
 
d©a
);

128 
GPUªadD©aMem
(
uöt32_t
 *
mem
, 
cou¡
);

129 
uöt32_t
 
GPUªadD©a
();

130 
uöt32_t
 
GPUªadSètus
();

131 
GPUwrôeSètus
(
uöt32_t
 
d©a
);

132 
GPU‰ìze
(
uöt32_t
 
ty≥
, 
GPUFªeze
 *
‰ìze
);

133 
GPUupd©eLa˚
();

134 
GPU›í
(**
dpy
);

135 
GPU˛o£
();

136 
GPUvBœnk
(
is_vbœnk
, 
lcf
);

137 
GPUª¨medCÆlbacks
(c⁄° 
ª¨med_cbs
 *
cbs_
);

139 #ifde‡
__˝lu•lus


	@plugins/gpulib/test.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~"gpu.h
"

6 
ölöe
 
	$p˙t_gë
()

8 
vÆ
;

9 #ifde‡
__ARM_ARCH_7A__


10 
asm
 vﬁ©ûe("mr¯p15, 0, %0, c9, c13, 0" : "Ù"(
vÆ
));

12 
vÆ
 = 0;

14  
vÆ
;

15 
	}
}

17 
ölöe
 
	$p˙t_öô
()

19 #ifde‡
__ARM_ARCH_7A__


20 
v
;

21 
asm
 vﬁ©ûe("mr¯p15, 0, %0, c9, c12, 0" : "Ù"(
v
));

22 
v
 |= 5;

23 
v
 &= ~8;

24 
asm
 vﬁ©ûe("m¸Ö15, 0, %0, c9, c12, 0" :: "r"(
v
));

26 
asm
 volatile("mcrÖ15, 0, %0, c9, c12, 1" :: "r"(1<<31));

28 
	}
}

30 c⁄° 
	gcmd_Àngths
[256] =

50 
psx_gpu
 
gpu
 
__©åibuã__
((
Æig√d
(64)));

54 
uöt16_t
 
	mvøm
[1024 * 512];

55 
uöt32_t
 
	mgpu_ªgi°î
[15];

56 
uöt32_t
 
	m°©us
;

57 } 
	tgpu_dump_°ru˘
;

59 
gpu_dump_°ru˘
 
	g°©e
;

61 
	$maö
(
¨gc
, *
¨gv
[])

63 
°¨t_cy˛es
;

64 
uöt32_t
 *
li°
;

65 
size
, 
dummy
;

66 
FILE
 *
°©e_fûe
;

67 
FILE
 *
li°_fûe
;

68 
FILE
 *
out_fûe
;

70 i‡(
¨gc
 != 3 &&árgc != 4)

72 
	`¥ötf
("ußge:\n%†<°©e> <li°> [vøm_out]\n", 
¨gv
[0]);

76 
°©e_fûe
 = 
	`f›í
(
¨gv
[1], "rb");

77 
	`‰ód
(&
°©e
, 1, (
gpu_dump_°ru˘
), 
°©e_fûe
);

78 
	`f˛o£
(
°©e_fûe
);

80 
li°_fûe
 = 
	`f›í
(
¨gv
[2], "rb");

81 
	`f£ek
(
li°_fûe
, 0, 
SEEK_END
);

82 
size
 = 
	`·ñl
(
li°_fûe
);

83 
	`f£ek
(
li°_fûe
, 0, 
SEEK_SET
);

85 
li°
 = (
uöt32_t
 *)
	`mÆloc
(
size
);

86 
	`‰ód
(
li°
, 1, 
size
, 
li°_fûe
);

87 
	`f˛o£
(
li°_fûe
);

89 
	`p˙t_öô
();

90 
	`ªndîî_öô
();

91 
	`mem˝y
(
gpu
.
vøm
, 
°©e
.vram, (gpu.vram));

92 i‡((
°©e
.
gpu_ªgi°î
[8] & 0x24) == 0x24)

93 
	`ªndîî_£t_öãæa˚
(1, !(
°©e
.
°©us
 >> 31));

95 
°¨t_cy˛es
 = 
	`p˙t_gë
();

97 
	`do_cmd_li°
(
li°
, 
size
 / 4, &
dummy
);

98 
	`ªndîî_Êush_queues
();

100 
	`¥ötf
("%u\n", 
	`p˙t_gë
(Ë- 
°¨t_cy˛es
);

102 i‡(
¨gc
 >= 4) {

103 
out_fûe
 = 
	`f›í
(
¨gv
[3], "wb");

104 
	`fwrôe
(
gpu
.
vøm
, 1, (gpu.vøm), 
out_fûe
);

105 
	`f˛o£
(
out_fûe
);

109 
	}
}

	@plugins/gpulib/vout_pl.c

12 
	~<°rög.h
>

13 
	~"gpu.h
"

14 
	~"../../‰⁄ãnd/∂ugö_lib.h
"

16 c⁄° 
ª¨med_cbs
 *
	gcbs
;

18 
	$vout_öô
()

21 
	}
}

23 
	$vout_föish
()

26 
	}
}

28 
	$check_mode_ch™ge
(
f‹˚
)

30 
uöt32_t
 
ﬁd_°©us
;

31 
ﬁd_h
;

32 
w
 = 
gpu
.
s¸ìn
.
hªs
;

33 
h
 = 
gpu
.
s¸ìn
.h;

34 
w_out
 = 
w
;

35 
h_out
 = 
h
;

37 
gpu
.
°©e
.
íh™˚mít_a˘ive
 =

38 
gpu
.
gë_íh™˚mít_bu„r
 !
NULL
 && gpu.
°©e
.
íh™˚mít_íabÀ


39 && 
w
 <512 && 
h
 <256 && !
gpu
.
°©us
.
rgb24
;

41 i‡(
gpu
.
°©e
.
íh™˚mít_a˘ive
) {

42 
w_out
 *= 2;

43 
h_out
 *= 2;

47 i‡(
f‹˚
 || (
gpu
.
°©us
.
ªg
 ^ 
ﬁd_°©us
Ë& ((7<<16)|(1<<21)Ë|| 
h
 !
ﬁd_h
)

49 
ﬁd_°©us
 = 
gpu
.
°©us
.
ªg
;

50 
ﬁd_h
 = 
h
;

52 
cbs
->
	`∂_vout_£t_mode
(
w_out
, 
h_out
, 
w
, 
h
, 
gpu
.
°©us
.
rgb24
 ? 24 : 16);

54 
	}
}

56 
	$vout_upd©e
()

58 
x
 = 
gpu
.
s¸ìn
.x & ~1;

59 
y
 = 
gpu
.
s¸ìn
.y;

60 
w
 = 
gpu
.
s¸ìn
.w;

61 
h
 = 
gpu
.
s¸ìn
.h;

62 
uöt16_t
 *
vøm
 = 
gpu
.vram;

63 
vøm_h
 = 512;

65 i‡(
w
 =0 || 
h
 == 0)

68 
	`check_mode_ch™ge
(0);

69 i‡(
gpu
.
°©e
.
íh™˚mít_a˘ive
)

70 
vøm
 = 
gpu
.
	`gë_íh™˚mít_bu„r
(&
x
, &
y
, &
w
, &
h
, &
vøm_h
);

72 i‡(
y
 + 
h
 > 
vøm_h
) {

73 i‡(
y
 + 
h
 - 
vøm_h
 > h / 2) {

75 
h
 -
vøm_h
 - 
y
;

76 
y
 = 0;

80 
h
 = 
vøm_h
 - 
y
;

83 
vøm
 +
y
 * 1024 + 
x
;

85 
cbs
->
	`∂_vout_Êù
(
vøm
, 1024, 
gpu
.
°©us
.
rgb24
, 
w
, 
h
);

86 
	}
}

88 
	$vout_bœnk
()

90 
w
 = 
gpu
.
s¸ìn
.
hªs
;

91 
h
 = 
gpu
.
s¸ìn
.h;

93 
	`check_mode_ch™ge
(0);

94 i‡(
gpu
.
°©e
.
íh™˚mít_a˘ive
) {

95 
w
 *= 2;

96 
h
 *= 2;

98 
cbs
->
	`∂_vout_Êù
(
NULL
, 1024, 
gpu
.
°©us
.
rgb24
, 
w
, 
h
);

99 
	}
}

101 
	$GPU›í
(**
unu£d
)

103 
gpu
.
‰ameskù
.
a˘ive
 = 0;

104 
gpu
.
‰ameskù
.
‰ame_ªady
 = 1;

106 
cbs
->
	`∂_vout_›í
();

107 
	`check_mode_ch™ge
(1);

108 
	`vout_upd©e
();

110 
	}
}

112 
	$GPU˛o£
()

114 
cbs
->
	`∂_vout_˛o£
();

116 
	}
}

118 
	$vout_£t_c⁄fig
(c⁄° 
ª¨med_cbs
 *
cbs_
)

120 
cbs
 = 
cbs_
;

121 
	}
}

	@plugins/gpulib/vout_sdl.c

11 
	~<°dio.h
>

12 
	~<SDL.h
>

13 
	~<SDL_syswm.h
>

14 
	~"gpu.h
"

16 
SDL_SurÁ˚
 *
	gs¸ìn
;

17 
Di•œy
 *
	gx11_di•œy
;

19 
	$vout_öô
()

21 
SDL_SysWMöfo
 
wmöfo
;

22 
ªt
;

24 
ªt
 = 
	`SDL_Inô
(
SDL_INIT_VIDEO
);

25 i‡(
ªt
 != 0) {

26 
	`Ârötf
(
°dîr
, "SDL_Inô faûed: %s\n", 
	`SDL_GëEº‹
());

27  
ªt
;

30 
s¸ìn
 = 
	`SDL_SëVideoMode
(1024, 512, 32, 0);

31 i‡(
s¸ìn
 =
NULL
) {

32 
	`Ârötf
(
°dîr
, "SDL_SëVideoModêÁûed: %s\n", 
	`SDL_GëEº‹
());

33 
	`SDL_Quô
();

37 
	`SDL_VERSION
(&
wmöfo
.
vîsi⁄
);

38 
ªt
 = 
	`SDL_GëWMInfo
(&
wmöfo
);

39 i‡(
ªt
 == 1)

40 
x11_di•œy
 = 
wmöfo
.
öfo
.
x11
.
di•œy
;

43 
	}
}

45 
	$vout_föish
()

47 
	`SDL_Quô
();

49 
	}
}

51 
	$vout_upd©e
()

53 
uöt32_t
 *
d
;

54 
i
;

56 
	`SDL_LockSurÁ˚
(
s¸ìn
);

57 i‡(
gpu
.
°©us
.
rgb24
)

59 
uöt8_t
 *
s
;

60 
y
;

61 
y
 = 0; y < 512; y++) {

62 
s
 = (
uöt8_t
 *)
gpu
.
vøm
 + 
y
 * 2*1024;

63 
d
 = (
uöt32_t
 *)
s¸ìn
->
pixñs
 + 
y
 * 1024;

64 
i
 = 0; i < 1024 * 2 / 3; i++, 
s
 += 3)

65 
d
[
i
] = (
s
[0] << 16) | (s[1] << 8) | s[2];

70 
uöt16_t
 *
s
 = 
gpu
.
vøm
;

71 
d
 = (
uöt32_t
 *)
s¸ìn
->
pixñs
;

72 
i
 = 0; i < 1024 * 512; i++)

73 
d
[
i
] = (((
uöt32_t
)
s
[i] << 19) & 0xf80000) | ((s[i] << 6) & 0xf800) |

74 ((
s
[
i
] >> 7) & 0xf8);

76 
	`SDL_U∆ockSurÁ˚
(
s¸ìn
);

77 
	`SDL_Upd©eRe˘
(
s¸ìn
, 0, 0, 1024, 512);

78 
	}
}

80 
	$vout_bœnk
()

82 
	}
}

84 
	$GPU›í
(**
dpy
)

86 *
dpy
 = 
x11_di•œy
;

88 
	}
}

90 
	$GPU˛o£
()

93 
	}
}

95 
	$vout_£t_c⁄fig
(c⁄° 
ª¨med_cbs
 *
cbs
)

97 
	}
}

	@plugins/spunull/register.h

1 
	#H_SPUúqAddr
 0x0da4

	)

2 
	#H_SPUaddr
 0x0da6

	)

3 
	#H_SPUd©a
 0x0da8

	)

4 
	#H_SPU˘æ
 0x0dØ

	)

5 
	#H_SPU°©
 0x0d´

	)

6 
	#H_SPU⁄1
 0x0d88

	)

7 
	#H_SPU⁄2
 0x0d8a

	)

8 
	#H_SPUoff1
 0x0d8c

	)

9 
	#H_SPUoff2
 0x0d8e

	)

10 
	#H_FMod1
 0x0d90

	)

11 
	#H_FMod2
 0x0d92

	)

12 
	#H_Noi£1
 0x0d94

	)

13 
	#H_Noi£2
 0x0d96

	)

14 
	#H_RVB⁄1
 0x0d98

	)

15 
	#H_RVB⁄2
 0x0d9a

	)

16 
	#H_SPUIsOn1
 0x0d9c

	)

17 
	#H_SPUIsOn2
 0x0d9e

	)

18 
	#H_CDLe·
 0x0db0

	)

19 
	#H_CDRight
 0x0db2

	)

20 
	#H_Revîb
 0x0dc0

	)

22 
	#H_SPUPôch0
 0x0c04

	)

23 
	#H_SPUPôch1
 0x0c14

	)

24 
	#H_SPUPôch2
 0x0c24

	)

25 
	#H_SPUPôch3
 0x0c34

	)

26 
	#H_SPUPôch4
 0x0c44

	)

27 
	#H_SPUPôch5
 0x0c54

	)

28 
	#H_SPUPôch6
 0x0c64

	)

29 
	#H_SPUPôch7
 0x0c74

	)

30 
	#H_SPUPôch8
 0x0c84

	)

31 
	#H_SPUPôch9
 0x0c94

	)

32 
	#H_SPUPôch10
 0x0ˇ4

	)

33 
	#H_SPUPôch11
 0x0cb4

	)

34 
	#H_SPUPôch12
 0x0cc4

	)

35 
	#H_SPUPôch13
 0x0cd4

	)

36 
	#H_SPUPôch14
 0x0˚4

	)

37 
	#H_SPUPôch15
 0x0cf4

	)

38 
	#H_SPUPôch16
 0x0d04

	)

39 
	#H_SPUPôch17
 0x0d14

	)

40 
	#H_SPUPôch18
 0x0d24

	)

41 
	#H_SPUPôch19
 0x0d34

	)

42 
	#H_SPUPôch20
 0x0d44

	)

43 
	#H_SPUPôch21
 0x0d54

	)

44 
	#H_SPUPôch22
 0x0d64

	)

45 
	#H_SPUPôch23
 0x0d74

	)

47 
	#H_SPUSèπAdr0
 0x0c06

	)

48 
	#H_SPUSèπAdr1
 0x0c16

	)

49 
	#H_SPUSèπAdr2
 0x0c26

	)

50 
	#H_SPUSèπAdr3
 0x0c36

	)

51 
	#H_SPUSèπAdr4
 0x0c46

	)

52 
	#H_SPUSèπAdr5
 0x0c56

	)

53 
	#H_SPUSèπAdr6
 0x0c66

	)

54 
	#H_SPUSèπAdr7
 0x0c76

	)

55 
	#H_SPUSèπAdr8
 0x0c86

	)

56 
	#H_SPUSèπAdr9
 0x0c96

	)

57 
	#H_SPUSèπAdr10
 0x0ˇ6

	)

58 
	#H_SPUSèπAdr11
 0x0cb6

	)

59 
	#H_SPUSèπAdr12
 0x0cc6

	)

60 
	#H_SPUSèπAdr13
 0x0cd6

	)

61 
	#H_SPUSèπAdr14
 0x0˚6

	)

62 
	#H_SPUSèπAdr15
 0x0cf6

	)

63 
	#H_SPUSèπAdr16
 0x0d06

	)

64 
	#H_SPUSèπAdr17
 0x0d16

	)

65 
	#H_SPUSèπAdr18
 0x0d26

	)

66 
	#H_SPUSèπAdr19
 0x0d36

	)

67 
	#H_SPUSèπAdr20
 0x0d46

	)

68 
	#H_SPUSèπAdr21
 0x0d56

	)

69 
	#H_SPUSèπAdr22
 0x0d66

	)

70 
	#H_SPUSèπAdr23
 0x0d76

	)

72 
	#H_SPULo›Adr0
 0x0c0e

	)

73 
	#H_SPULo›Adr1
 0x0c1e

	)

74 
	#H_SPULo›Adr2
 0x0c2e

	)

75 
	#H_SPULo›Adr3
 0x0c3e

	)

76 
	#H_SPULo›Adr4
 0x0c4e

	)

77 
	#H_SPULo›Adr5
 0x0c5e

	)

78 
	#H_SPULo›Adr6
 0x0c6e

	)

79 
	#H_SPULo›Adr7
 0x0c7e

	)

80 
	#H_SPULo›Adr8
 0x0c8e

	)

81 
	#H_SPULo›Adr9
 0x0c9e

	)

82 
	#H_SPULo›Adr10
 0x0ˇe

	)

83 
	#H_SPULo›Adr11
 0x0cbe

	)

84 
	#H_SPULo›Adr12
 0x0c˚

	)

85 
	#H_SPULo›Adr13
 0x0cde

	)

86 
	#H_SPULo›Adr14
 0x0˚e

	)

87 
	#H_SPULo›Adr15
 0x0c„

	)

88 
	#H_SPULo›Adr16
 0x0d0e

	)

89 
	#H_SPULo›Adr17
 0x0d1e

	)

90 
	#H_SPULo›Adr18
 0x0d2e

	)

91 
	#H_SPULo›Adr19
 0x0d3e

	)

92 
	#H_SPULo›Adr20
 0x0d4e

	)

93 
	#H_SPULo›Adr21
 0x0d5e

	)

94 
	#H_SPULo›Adr22
 0x0d6e

	)

95 
	#H_SPULo›Adr23
 0x0d7e

	)

97 
	#H_SPU_ADSRLevñ0
 0x0c08

	)

98 
	#H_SPU_ADSRLevñ1
 0x0c18

	)

99 
	#H_SPU_ADSRLevñ2
 0x0c28

	)

100 
	#H_SPU_ADSRLevñ3
 0x0c38

	)

101 
	#H_SPU_ADSRLevñ4
 0x0c48

	)

102 
	#H_SPU_ADSRLevñ5
 0x0c58

	)

103 
	#H_SPU_ADSRLevñ6
 0x0c68

	)

104 
	#H_SPU_ADSRLevñ7
 0x0c78

	)

105 
	#H_SPU_ADSRLevñ8
 0x0c88

	)

106 
	#H_SPU_ADSRLevñ9
 0x0c98

	)

107 
	#H_SPU_ADSRLevñ10
 0x0ˇ8

	)

108 
	#H_SPU_ADSRLevñ11
 0x0cb8

	)

109 
	#H_SPU_ADSRLevñ12
 0x0cc8

	)

110 
	#H_SPU_ADSRLevñ13
 0x0cd8

	)

111 
	#H_SPU_ADSRLevñ14
 0x0˚8

	)

112 
	#H_SPU_ADSRLevñ15
 0x0cf8

	)

113 
	#H_SPU_ADSRLevñ16
 0x0d08

	)

114 
	#H_SPU_ADSRLevñ17
 0x0d18

	)

115 
	#H_SPU_ADSRLevñ18
 0x0d28

	)

116 
	#H_SPU_ADSRLevñ19
 0x0d38

	)

117 
	#H_SPU_ADSRLevñ20
 0x0d48

	)

118 
	#H_SPU_ADSRLevñ21
 0x0d58

	)

119 
	#H_SPU_ADSRLevñ22
 0x0d68

	)

120 
	#H_SPU_ADSRLevñ23
 0x0d78

	)

	@plugins/spunull/spunull.c

3 
	#PSE_LT_SPU
 4

	)

4 
	#PSE_SPU_ERR_SUCCESS
 0

	)

5 
	#PSE_SPU_ERR
 -60

	)

6 
	#PSE_SPU_ERR_NOTCONFIGURED
 
PSE_SPU_ERR
 -1

	)

7 
	#PSE_SPU_ERR_INIT
 
PSE_SPU_ERR
 -2

	)

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~"xa.h
"

25 
	~"ªgi°î.h
"

27 #unde‡
CALLBACK


28 
	#CALLBACK


	)

34 c⁄° 
	gvîsi⁄
 = 1;

35 c⁄° 
	gªvisi⁄
 = 1;

36 c⁄° 
	gbuûd
 = 1;

37 * 
	glibøryName
 = "Pete's Null Audio Driver";

38 * 
	glibøryInfo
 = "Pete's Null Audio Driver V1.1\nCoded by Pete Bernert\n";

42 
	gªgAªa
[10000];

43 
	g•uMem
[256*1024];

44 * 
	g•uMemC
;

45 * 
	gpSpuIrq
=0;

47 
	g•uCål
, 
	g•uSèt
, 
	g•uIrq
=0;

48 
	g•uAddr
=0xffffffff;

49 * 
	gpC⁄figFûe
=0;

55 (
CALLBACK
 *
úqCÆlback
)()=0;

56 (
CALLBACK
 *
cddavCÆlback
)(,)=0;

62 
CALLBACK
 
	$SPUwrôeRegi°î
(
ªg
, 
vÆ
, 
cy˛es
)

64 
r
=
ªg
&0xfff;

65 
ªgAªa
[(
r
-0xc00)>>1] = 
vÆ
;

67 if(
r
>=0x0c00 &&Ñ<0x0d80)

70 
r
&0x0f)

105 
r
)

108 
H_SPUaddr
:

109 
•uAddr
 = (Ë
vÆ
<<3;

112 
H_SPUd©a
:

113 
•uMem
[
•uAddr
>>1] = 
vÆ
;

114 
•uAddr
+=2;

115 if(
•uAddr
>0x7ffff) spuAddr=0;

118 
H_SPU˘æ
:

119 
•uCål
=
vÆ
;

122 
H_SPU°©
:

123 
•uSèt
=
vÆ
 & 0xf800;

126 
H_SPUúqAddr
:

127 
•uIrq
 = 
vÆ
;

128 
pSpuIrq
=
•uMemC
+((Ë
vÆ
<<3);

131 
H_SPU⁄1
:

135 
H_SPU⁄2
:

139 
H_SPUoff1
:

143 
H_SPUoff2
:

147 
H_CDLe·
:

148 if(
cddavCÆlback
Ë
	`cddavCÆlback
(0,
vÆ
);

150 
H_CDRight
:

151 if(
cddavCÆlback
Ë
	`cddavCÆlback
(1,
vÆ
);

154 
H_FMod1
:

158 
H_FMod2
:

162 
H_Noi£1
:

166 
H_Noi£2
:

170 
H_RVB⁄1
:

174 
H_RVB⁄2
:

178 
H_Revîb
:

181 
	}
}

185 
CALLBACK
 
	$SPUªadRegi°î
(
ªg
)

187 
r
=
ªg
&0xfff;

189 if(
r
>=0x0c00 &&Ñ<0x0d80)

191 
r
&0x0f)

196 
ad§_dummy_vﬁ
=0;

197 
ad§_dummy_vﬁ
=!adsr_dummy_vol;

198  
ad§_dummy_vﬁ
;

209 
r
)

211 
H_SPU˘æ
:

212  
•uCål
;

214 
H_SPU°©
:

215  
•uSèt
;

217 
H_SPUaddr
:

218  ()(
•uAddr
>>3);

220 
H_SPUd©a
:

222 
s
=
•uMem
[
•uAddr
>>1];

223 
•uAddr
+=2;

224 if(
•uAddr
>0x7ffff) spuAddr=0;

225  
s
;

228 
H_SPUúqAddr
:

229  
•uIrq
;

231  
ªgAªa
[(
r
-0xc00)>>1];

232 
	}
}

236 
CALLBACK
 
	$SPUªadDMA
()

238 
s
=
•uMem
[
•uAddr
>>1];

239 
•uAddr
+=2;

240 if(
•uAddr
>0x7ffff) spuAddr=0;

241  
s
;

242 
	}
}

246 
CALLBACK
 
	$SPUwrôeDMA
(
vÆ
)

248 
•uMem
[
•uAddr
>>1] = 
vÆ
;

249 
•uAddr
+=2;

250 if(
•uAddr
>0x7ffff) spuAddr=0;

251 
	}
}

255 
CALLBACK
 
	$SPUwrôeDMAMem
(* 
pusPSXMem
,
iSize
,
cy˛es
)

257 
i
;

258 
i
=0;i<
iSize
;i++)

260 
•uMem
[
•uAddr
>>1] = *
pusPSXMem
++;

261 
•uAddr
+=2;

262 if(
•uAddr
>0x7ffff) spuAddr=0;

264 
	}
}

268 
CALLBACK
 
	$SPUªadDMAMem
(* 
pusPSXMem
,
iSize
,
cy˛es
)

270 
i
;

271 
i
=0;i<
iSize
;i++)

273 *
pusPSXMem
++=
•uMem
[
•uAddr
>>1];

274 
•uAddr
+=2;

275 if(
•uAddr
>0x7ffff) spuAddr=0;

277 
	}
}

283 
CALLBACK
 
	$SPU∂ayADPCMch™√l
(
xa_decode_t
 *
x≠
)

285 
	}
}

293 
CALLBACK
 
	$SPUöô
()

295 
•uMemC
=(*)
•uMem
;

297 
	}
}

301 
	gbSPUIsO≥n
=0;

303 
CALLBACK
 
	$SPU›í
()

305 if(
bSPUIsO≥n
)  0;

307 
bSPUIsO≥n
=1;

311  
PSE_SPU_ERR_SUCCESS
;

312 
	}
}

316 
	$SPU£tC⁄figFûe
(* 
pCfg
)

318 
pC⁄figFûe
=
pCfg
;

319 
	}
}

323 
CALLBACK
 
	$SPU˛o£
()

325 if(!
bSPUIsO≥n
)  0;

326 
bSPUIsO≥n
=0;

328 
	}
}

332 
CALLBACK
 
	$SPUshutdown
()

335 
	}
}

341 
CALLBACK
 
	$SPUã°
()

344 
	}
}

346 
	$SPUasync
(
cy˛e
, 
Êags
)

348 
	}
}

350 
	$SPU∂ayCDDAch™√l
(*
pcm
, 
nbyãs
)

353 
	}
}

359 
CALLBACK
 
SPUªgi°îCÆlback
((CALLBACK *
ˇŒback
)())

361 
úqCÆlback
 = 
ˇŒback
;

362 
	}
}

364 
CALLBACK
 
SPUªgi°îCDDAVﬁume
((CALLBACK *
CDDAVˇŒback
)(,))

366 
cddavCÆlback
 = 
CDDAVˇŒback
;

367 
	}
}

371 * 
CALLBACK
 
	$PSEgëLibName
()

373  
libøryName
;

374 
	}
}

378 
CALLBACK
 
	$PSEgëLibTy≥
()

380  
PSE_LT_SPU
;

381 
	}
}

385 
CALLBACK
 
	$PSEgëLibVîsi⁄
()

387  
vîsi⁄
<<16|
ªvisi⁄
<<8|
buûd
;

388 
	}
}

391 * 
	$SPUgëLibInfos
()

393  
libøryInfo
;

394 
	}
}

400 
	mszSPUName
[8];

401 
	mulFªezeVîsi⁄
;

402 
	mulFªezeSize
;

403 
	mcSPUP‹t
[0x200];

404 
	mcSPURam
[0x80000];

405 
xa_decode_t
 
	mxaS
;

406 } 
	tSPUFªeze_t
;

410 
	mFutuª
[256];

412 } 
	tSPUNULLFªeze_t
;

416 
CALLBACK
 
	$SPU‰ìze
(
ulFªezeMode
,
SPUFªeze_t
 * 
pF
,
cy˛es
)

418 
i
;

420 if(!
pF
)  0;

422 if(
ulFªezeMode
)

424 if(
ulFªezeMode
==1)

425 
	`mem£t
(
pF
,0,(
SPUFªeze_t
)+(
SPUNULLFªeze_t
));

427 
	`°r˝y
(
pF
->
szSPUName
,"PBNUL");

428 
pF
->
ulFªezeVîsi⁄
=1;

429 
pF
->
ulFªezeSize
=(
SPUFªeze_t
)+(
SPUNULLFªeze_t
);

431 if(
ulFªezeMode
==2)  1;

433 
	`mem˝y
(
pF
->
cSPURam
,
•uMem
,0x80000);

434 
	`mem˝y
(
pF
->
cSPUP‹t
,
ªgAªa
,0x200);

436 
	`mem£t
(&
pF
->
xaS
,0,(
xa_decode_t
));

440 if(
ulFªezeMode
!=0)  0;

442 
	`mem˝y
(
•uMem
,
pF
->
cSPURam
,0x80000);

443 
	`mem˝y
(
ªgAªa
,
pF
->
cSPUP‹t
,0x200);

445 
i
=0;i<0x100;i++)

447 if(
i
!=
H_SPU⁄1
-0xc00 && i!=
H_SPU⁄2
-0xc00)

448 
	`SPUwrôeRegi°î
(0x1f801c00+
i
*2,
ªgAªa
[i],
cy˛es
);

450 
	`SPUwrôeRegi°î
(
H_SPU⁄1
,
ªgAªa
[(H_SPU⁄1-0xc00)/2],
cy˛es
);

451 
	`SPUwrôeRegi°î
(
H_SPU⁄2
,
ªgAªa
[(H_SPU⁄2-0xc00)/2],
cy˛es
);

454 
	}
}

462 
CALLBACK
 
	$SPUc⁄figuª
()

465 
	}
}

467 
CALLBACK
 
	$SPUabout
()

469 
	}
}

476 
CALLBACK
 
	$SPUgëO√
(
vÆ
)

478 if(
•uAddr
!=0xffffffff)

480  
	`SPUªadDMA
();

482 if(
vÆ
>=512*1024) val=512*1024-1;

483  
•uMem
[
vÆ
>>1];

484 
	}
}

486 
CALLBACK
 
	$SPUputO√
(
vÆ
,
d©a
)

488 if(
•uAddr
!=0xffffffff)

490 
	`SPUwrôeDMA
(
d©a
);

493 if(
vÆ
>=512*1024) val=512*1024-1;

494 
•uMem
[
vÆ
>>1] = 
d©a
;

495 
	}
}

497 
CALLBACK
 
	$SPU∂aySam∂e
(
ch
)

499 
	}
}

501 
CALLBACK
 
	$SPU£tAddr
(
ch
, 
waddr
)

504 
	}
}

506 
CALLBACK
 
	$SPU£tPôch
(
ch
, 
pôch
)

509 
	}
}

511 
CALLBACK
 
	$SPU£tVﬁumeL
(
ch
, 
vﬁ
)

514 
	}
}

516 
CALLBACK
 
	$SPU£tVﬁumeR
(
ch
, 
vﬁ
)

519 
	}
}

521 
CALLBACK
 
	$SPU°¨tCh™√ls1
(
ch™√ls
)

524 
	}
}

526 
CALLBACK
 
	$SPU°¨tCh™√ls2
(
ch™√ls
)

529 
	}
}

531 
CALLBACK
 
	$SPU°›Ch™√ls1
(
ch™√ls
)

534 
	}
}

536 
CALLBACK
 
	$SPU°›Ch™√ls2
(
ch™√ls
)

539 
	}
}

	@plugins/spunull/xa.h

8 
	my0
, 
	my1
;

9 } 
	tADPCM_Decode_t
;

13 
	m‰eq
;

14 
	mnbôs
;

15 
	m°îeo
;

16 
	mnßm∂es
;

17 
ADPCM_Decode_t
 
	mÀ·
, 
	mright
;

18 
	mpcm
[16384];

19 } 
	txa_decode_t
;

	@tools/psxcimg.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<zlib.h
>

6 
	#CD_FRAMESIZE_RAW
 2352

	)

8 
	szèb_íåy
 {

9 
	moff£t
;

10 
	msize
;

11 } 
__©åibuã__
((
∑cked
));

13 
	$maö
(
¨gc
, *
¨gv
[])

15 
outbuf
[
CD_FRAMESIZE_RAW
 * 2];

16 
öbuf
[
CD_FRAMESIZE_RAW
];

17 
zèb_íåy
 *
zèbÀ
;

18 *
out_ba£«me
, *
out_‚ame
, *
out_t‚ame
;

19 
FILE
 *
fö
, *
fout
;

20 
ö_byãs
, 
out_byãs
;

21 
s
, 
tŸÆ_£˘‹s
;

22 
ªt
, 
Àn
;

24 i‡(
¨gc
 < 2) {

25 
	`Ârötf
(
°dîr
, "ußge:\n%†<cd_img> [out_ba£«me]\n", 
¨gv
[0]);

29 
fö
 = 
	`f›í
(
¨gv
[1], "rb");

30 i‡(
fö
 =
NULL
) {

31 
	`Ârötf
(
°dîr
, "f›í %s: ", 
¨gv
[1]);

32 
	`≥º‹
(
NULL
);

36 i‡(
¨gv
[2] !
NULL
)

37 
out_ba£«me
 = 
¨gv
[2];

39 
out_ba£«me
 = 
¨gv
[1];

41 
Àn
 = 
	`°æí
(
out_ba£«me
) + 3;

42 
out_‚ame
 = 
	`mÆloc
(
Àn
);

43 i‡(
out_‚ame
 =
NULL
) {

44 
	`Ârötf
(
°dîr
, "OOM\n");

47 
	`¢¥ötf
(
out_‚ame
, 
Àn
, "%s.Z", 
out_ba£«me
);

49 
fout
 = 
	`f›í
(
out_‚ame
, "wb");

50 i‡(
fout
 =
NULL
) {

51 
	`Ârötf
(
°dîr
, "f›í %s: ", 
out_‚ame
);

52 
	`≥º‹
(
NULL
);

56 i‡(
	`f£ek
(
fö
, 0, 
SEEK_END
) != 0) {

57 
	`Ârötf
(
°dîr
, "fseek failed: ");

58 
	`≥º‹
(
NULL
);

62 
ö_byãs
 = 
	`·ñl
(
fö
);

63 i‡(
ö_byãs
 % 
CD_FRAMESIZE_RAW
) {

64 
	`Ârötf
(
°dîr
, "warning: input size %ld isÇot "

65 "mu…ùÀ o‡£˘‹ size\n", 
ö_byãs
);

67 
tŸÆ_£˘‹s
 = 
ö_byãs
 / 
CD_FRAMESIZE_RAW
;

68 
	`f£ek
(
fö
, 0, 
SEEK_SET
);

70 
zèbÀ
 = 
	`ˇŒoc
(
tŸÆ_£˘‹s
, (ztable[0]));

71 i‡(
zèbÀ
 =
NULL
) {

72 
	`Ârötf
(
°dîr
, "OOM\n");

76 
out_byãs
 = 0;

77 
s
 = 0; s < 
tŸÆ_£˘‹s
; s++) {

78 
uL⁄gf
 
de°_Àn
 = (
outbuf
);

80 
ªt
 = 
	`‰ód
(
öbuf
, 1, (öbuf), 
fö
);

81 i‡(
ªt
 !(
öbuf
)) {

82 
	`¥ötf
("\n");

83 
	`Ârötf
(
°dîr
, "‰ódÑëu∫ed %d\n", 
ªt
);

87 
ªt
 = 
	`com¥ess2
(
outbuf
, &
de°_Àn
, 
öbuf
, (inbuf), 9);

88 i‡(
ªt
 !
Z_OK
) {

89 
	`¥ötf
("\n");

90 
	`Ârötf
(
°dîr
, "com¥ess2 faûed: %d\n", 
ªt
);

94 
ªt
 = 
	`fwrôe
(
outbuf
, 1, 
de°_Àn
, 
fout
);

95 i‡(
ªt
 !
de°_Àn
) {

96 
	`¥ötf
("\n");

97 
	`Ârötf
(
°dîr
, "fwrôêªtu∫ed %d\n", 
ªt
);

101 
zèbÀ
[
s
].
off£t
 = 
out_byãs
;

102 
zèbÀ
[
s
].
size
 = 
de°_Àn
;

103 
out_byãs
 +
de°_Àn
;

106 i‡((
s
 & 0x1ff) == 0) {

107 
	`¥ötf
("\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b");

108 
	`¥ötf
("%3ld%% %ld/%ld", 
s
 * 100 / 
tŸÆ_£˘‹s
, s,Åotal_sectors);

109 
	`fÊush
(
°dout
);

113 
	`f˛o£
(
fö
);

114 
	`f˛o£
(
fout
);

117 
Àn
 = 
	`°æí
(
out_‚ame
) + 7;

118 
out_t‚ame
 = 
	`mÆloc
(
Àn
);

119 i‡(
out_t‚ame
 =
NULL
) {

120 
	`¥ötf
("\n");

121 
	`Ârötf
(
°dîr
, "OOM\n");

124 
	`¢¥ötf
(
out_t‚ame
, 
Àn
, "%s.èbÀ", 
out_‚ame
);

126 
fout
 = 
	`f›í
(
out_t‚ame
, "wb");

127 i‡(
fout
 =
NULL
) {

128 
	`Ârötf
(
°dîr
, "f›í %s: ", 
out_t‚ame
);

129 
	`≥º‹
(
NULL
);

133 
ªt
 = 
	`fwrôe
(
zèbÀ
, (zèbÀ[0]), 
tŸÆ_£˘‹s
, 
fout
);

134 i‡(
ªt
 !
tŸÆ_£˘‹s
) {

135 
	`¥ötf
("\n");

136 
	`Ârötf
(
°dîr
, "fwrôêªtu∫ed %d\n", 
ªt
);

139 
	`f˛o£
(
fout
);

141 
	`¥ötf
("\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b");

142 
	`¥ötf
("%3ld%% %ld/%ld\n", 
s
 * 100 / 
tŸÆ_£˘‹s
, s,Åotal_sectors);

143 
	`¥ötf
("%ld byã†‰om %ld (%.1f%%)\n", 
out_byãs
, 
ö_byãs
,

144 ()
out_byãs
 * 100.0 / 
ö_byãs
);

147 
	}
}

	@/usr/include/EGL/egl.h

30 #i‚de‡
__egl_h_


31 
	#__egl_h_


	)

36 
	~<EGL/egÕœtf‹m.h
>

38 #ifde‡
__˝lu•lus


44 
	tEGLBoﬁón
;

45 
	tEGLíum
;

46 *
	tEGLC⁄fig
;

47 *
	tEGLC⁄ãxt
;

48 *
	tEGLDi•œy
;

49 *
	tEGLSurÁ˚
;

50 *
	tEGLClõ¡Buf„r
;

53 
	#EGL_VERSION_1_0
 1

	)

54 
	#EGL_VERSION_1_1
 1

	)

55 
	#EGL_VERSION_1_2
 1

	)

56 
	#EGL_VERSION_1_3
 1

	)

57 
	#EGL_VERSION_1_4
 1

	)

64 
	#EGL_FALSE
 0

	)

65 
	#EGL_TRUE
 1

	)

68 
	#EGL_DEFAULT_DISPLAY
 ((
EGLN©iveDi•œyTy≥
)0)

	)

69 
	#EGL_NO_CONTEXT
 ((
EGLC⁄ãxt
)0)

	)

70 
	#EGL_NO_DISPLAY
 ((
EGLDi•œy
)0)

	)

71 
	#EGL_NO_SURFACE
 ((
EGLSurÁ˚
)0)

	)

74 
	#EGL_DONT_CARE
 ((
EGLöt
)-1)

	)

77 
	#EGL_SUCCESS
 0x3000

	)

78 
	#EGL_NOT_INITIALIZED
 0x3001

	)

79 
	#EGL_BAD_ACCESS
 0x3002

	)

80 
	#EGL_BAD_ALLOC
 0x3003

	)

81 
	#EGL_BAD_ATTRIBUTE
 0x3004

	)

82 
	#EGL_BAD_CONFIG
 0x3005

	)

83 
	#EGL_BAD_CONTEXT
 0x3006

	)

84 
	#EGL_BAD_CURRENT_SURFACE
 0x3007

	)

85 
	#EGL_BAD_DISPLAY
 0x3008

	)

86 
	#EGL_BAD_MATCH
 0x3009

	)

87 
	#EGL_BAD_NATIVE_PIXMAP
 0x300A

	)

88 
	#EGL_BAD_NATIVE_WINDOW
 0x300B

	)

89 
	#EGL_BAD_PARAMETER
 0x300C

	)

90 
	#EGL_BAD_SURFACE
 0x300D

	)

91 
	#EGL_CONTEXT_LOST
 0x300E

	)

96 
	#EGL_BUFFER_SIZE
 0x3020

	)

97 
	#EGL_ALPHA_SIZE
 0x3021

	)

98 
	#EGL_BLUE_SIZE
 0x3022

	)

99 
	#EGL_GREEN_SIZE
 0x3023

	)

100 
	#EGL_RED_SIZE
 0x3024

	)

101 
	#EGL_DEPTH_SIZE
 0x3025

	)

102 
	#EGL_STENCIL_SIZE
 0x3026

	)

103 
	#EGL_CONFIG_CAVEAT
 0x3027

	)

104 
	#EGL_CONFIG_ID
 0x3028

	)

105 
	#EGL_LEVEL
 0x3029

	)

106 
	#EGL_MAX_PBUFFER_HEIGHT
 0x302A

	)

107 
	#EGL_MAX_PBUFFER_PIXELS
 0x302B

	)

108 
	#EGL_MAX_PBUFFER_WIDTH
 0x302C

	)

109 
	#EGL_NATIVE_RENDERABLE
 0x302D

	)

110 
	#EGL_NATIVE_VISUAL_ID
 0x302E

	)

111 
	#EGL_NATIVE_VISUAL_TYPE
 0x302F

	)

112 
	#EGL_SAMPLES
 0x3031

	)

113 
	#EGL_SAMPLE_BUFFERS
 0x3032

	)

114 
	#EGL_SURFACE_TYPE
 0x3033

	)

115 
	#EGL_TRANSPARENT_TYPE
 0x3034

	)

116 
	#EGL_TRANSPARENT_BLUE_VALUE
 0x3035

	)

117 
	#EGL_TRANSPARENT_GREEN_VALUE
 0x3036

	)

118 
	#EGL_TRANSPARENT_RED_VALUE
 0x3037

	)

119 
	#EGL_NONE
 0x3038

	)

120 
	#EGL_BIND_TO_TEXTURE_RGB
 0x3039

	)

121 
	#EGL_BIND_TO_TEXTURE_RGBA
 0x303A

	)

122 
	#EGL_MIN_SWAP_INTERVAL
 0x303B

	)

123 
	#EGL_MAX_SWAP_INTERVAL
 0x303C

	)

124 
	#EGL_LUMINANCE_SIZE
 0x303D

	)

125 
	#EGL_ALPHA_MASK_SIZE
 0x303E

	)

126 
	#EGL_COLOR_BUFFER_TYPE
 0x303F

	)

127 
	#EGL_RENDERABLE_TYPE
 0x3040

	)

128 
	#EGL_MATCH_NATIVE_PIXMAP
 0x3041

	)

129 
	#EGL_CONFORMANT
 0x3042

	)

134 
	#EGL_SLOW_CONFIG
 0x3050

	)

135 
	#EGL_NON_CONFORMANT_CONFIG
 0x3051

	)

136 
	#EGL_TRANSPARENT_RGB
 0x3052

	)

137 
	#EGL_RGB_BUFFER
 0x308E

	)

138 
	#EGL_LUMINANCE_BUFFER
 0x308F

	)

141 
	#EGL_NO_TEXTURE
 0x305C

	)

142 
	#EGL_TEXTURE_RGB
 0x305D

	)

143 
	#EGL_TEXTURE_RGBA
 0x305E

	)

144 
	#EGL_TEXTURE_2D
 0x305F

	)

147 
	#EGL_PBUFFER_BIT
 0x0001

	)

148 
	#EGL_PIXMAP_BIT
 0x0002

	)

149 
	#EGL_WINDOW_BIT
 0x0004

	)

150 
	#EGL_VG_COLORSPACE_LINEAR_BIT
 0x0020

	)

151 
	#EGL_VG_ALPHA_FORMAT_PRE_BIT
 0x0040

	)

152 
	#EGL_MULTISAMPLE_RESOLVE_BOX_BIT
 0x0200

	)

153 
	#EGL_SWAP_BEHAVIOR_PRESERVED_BIT
 0x0400

	)

155 
	#EGL_OPENGL_ES_BIT
 0x0001

	)

156 
	#EGL_OPENVG_BIT
 0x0002

	)

157 
	#EGL_OPENGL_ES2_BIT
 0x0004

	)

158 
	#EGL_OPENGL_BIT
 0x0008

	)

161 
	#EGL_VENDOR
 0x3053

	)

162 
	#EGL_VERSION
 0x3054

	)

163 
	#EGL_EXTENSIONS
 0x3055

	)

164 
	#EGL_CLIENT_APIS
 0x308D

	)

167 
	#EGL_HEIGHT
 0x3056

	)

168 
	#EGL_WIDTH
 0x3057

	)

169 
	#EGL_LARGEST_PBUFFER
 0x3058

	)

170 
	#EGL_TEXTURE_FORMAT
 0x3080

	)

171 
	#EGL_TEXTURE_TARGET
 0x3081

	)

172 
	#EGL_MIPMAP_TEXTURE
 0x3082

	)

173 
	#EGL_MIPMAP_LEVEL
 0x3083

	)

174 
	#EGL_RENDER_BUFFER
 0x3086

	)

175 
	#EGL_VG_COLORSPACE
 0x3087

	)

176 
	#EGL_VG_ALPHA_FORMAT
 0x3088

	)

177 
	#EGL_HORIZONTAL_RESOLUTION
 0x3090

	)

178 
	#EGL_VERTICAL_RESOLUTION
 0x3091

	)

179 
	#EGL_PIXEL_ASPECT_RATIO
 0x3092

	)

180 
	#EGL_SWAP_BEHAVIOR
 0x3093

	)

181 
	#EGL_MULTISAMPLE_RESOLVE
 0x3099

	)

184 
	#EGL_BACK_BUFFER
 0x3084

	)

185 
	#EGL_SINGLE_BUFFER
 0x3085

	)

188 
	#EGL_VG_COLORSPACE_sRGB
 0x3089

	)

189 
	#EGL_VG_COLORSPACE_LINEAR
 0x308A

	)

192 
	#EGL_VG_ALPHA_FORMAT_NONPRE
 0x308B

	)

193 
	#EGL_VG_ALPHA_FORMAT_PRE
 0x308C

	)

198 
	#EGL_DISPLAY_SCALING
 10000

	)

201 
	#EGL_UNKNOWN
 ((
EGLöt
)-1)

	)

204 
	#EGL_BUFFER_PRESERVED
 0x3094

	)

205 
	#EGL_BUFFER_DESTROYED
 0x3095

	)

208 
	#EGL_OPENVG_IMAGE
 0x3096

	)

211 
	#EGL_CONTEXT_CLIENT_TYPE
 0x3097

	)

214 
	#EGL_CONTEXT_CLIENT_VERSION
 0x3098

	)

217 
	#EGL_MULTISAMPLE_RESOLVE_DEFAULT
 0x309A

	)

218 
	#EGL_MULTISAMPLE_RESOLVE_BOX
 0x309B

	)

221 
	#EGL_OPENGL_ES_API
 0x30A0

	)

222 
	#EGL_OPENVG_API
 0x30A1

	)

223 
	#EGL_OPENGL_API
 0x30A2

	)

226 
	#EGL_DRAW
 0x3059

	)

227 
	#EGL_READ
 0x305A

	)

230 
	#EGL_CORE_NATIVE_ENGINE
 0x305B

	)

233 
	#EGL_COLORSPACE
 
EGL_VG_COLORSPACE


	)

234 
	#EGL_ALPHA_FORMAT
 
EGL_VG_ALPHA_FORMAT


	)

235 
	#EGL_COLORSPACE_sRGB
 
EGL_VG_COLORSPACE_sRGB


	)

236 
	#EGL_COLORSPACE_LINEAR
 
EGL_VG_COLORSPACE_LINEAR


	)

237 
	#EGL_ALPHA_FORMAT_NONPRE
 
EGL_VG_ALPHA_FORMAT_NONPRE


	)

238 
	#EGL_ALPHA_FORMAT_PRE
 
EGL_VG_ALPHA_FORMAT_PRE


	)

249 
EGLAPI
 
EGLöt
 
EGLAPIENTRY
 
eglGëEº‹
();

251 
EGLAPI
 
EGLDi•œy
 
EGLAPIENTRY
 
eglGëDi•œy
(
EGLN©iveDi•œyTy≥
 
di•œy_id
);

252 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglInôülize
(
EGLDi•œy
 
dpy
, 
EGLöt
 *
maj‹
, EGLöà*
mö‹
);

253 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglTîmö©e
(
EGLDi•œy
 
dpy
);

255 
EGLAPI
 c⁄° * 
EGLAPIENTRY
 
eglQuîySåög
(
EGLDi•œy
 
dpy
, 
EGLöt
 
«me
);

257 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglGëC⁄figs
(
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 *
c⁄figs
,

258 
EGLöt
 
c⁄fig_size
, EGLöà*
num_c⁄fig
);

259 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglChoo£C⁄fig
(
EGLDi•œy
 
dpy
, c⁄° 
EGLöt
 *
©åib_li°
,

260 
EGLC⁄fig
 *
c⁄figs
, 
EGLöt
 
c⁄fig_size
,

261 
EGLöt
 *
num_c⁄fig
);

262 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglGëC⁄figAârib
(
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
,

263 
EGLöt
 
©åibuã
, EGLöà*
vÆue
);

265 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
eglCª©eWödowSurÁ˚
(
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
,

266 
EGLN©iveWödowTy≥
 
wö
,

267 c⁄° 
EGLöt
 *
©åib_li°
);

268 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
eglCª©ePbuf„rSurÁ˚
(
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
,

269 c⁄° 
EGLöt
 *
©åib_li°
);

270 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
eglCª©ePixm≠SurÁ˚
(
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
,

271 
EGLN©ivePixm≠Ty≥
 
pixm≠
,

272 c⁄° 
EGLöt
 *
©åib_li°
);

273 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglDe°roySurÁ˚
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
);

274 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglQuîySurÁ˚
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
,

275 
EGLöt
 
©åibuã
, EGLöà*
vÆue
);

277 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglBödAPI
(
EGLíum
 
≠i
);

278 
EGLAPI
 
EGLíum
 
EGLAPIENTRY
 
eglQuîyAPI
();

280 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglWaôClõ¡
();

282 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglRñó£Thªad
();

284 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
eglCª©ePbuf„rFromClõ¡Buf„r
(

285 
EGLDi•œy
 
dpy
, 
EGLíum
 
bu·y≥
, 
EGLClõ¡Buf„r
 
buf„r
,

286 
EGLC⁄fig
 
c⁄fig
, c⁄° 
EGLöt
 *
©åib_li°
);

288 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglSurÁ˚Aârib
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
,

289 
EGLöt
 
©åibuã
, EGLöà
vÆue
);

290 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglBödTexImage
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
, 
EGLöt
 
buf„r
);

291 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglRñó£TexImage
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
, 
EGLöt
 
buf„r
);

294 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglSw≠I¡îvÆ
(
EGLDi•œy
 
dpy
, 
EGLöt
 
öãrvÆ
);

297 
EGLAPI
 
EGLC⁄ãxt
 
EGLAPIENTRY
 
eglCª©eC⁄ãxt
(
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
,

298 
EGLC⁄ãxt
 
sh¨e_c⁄ãxt
,

299 c⁄° 
EGLöt
 *
©åib_li°
);

300 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglDe°royC⁄ãxt
(
EGLDi•œy
 
dpy
, 
EGLC⁄ãxt
 
˘x
);

301 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglMakeCuºít
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
døw
,

302 
EGLSurÁ˚
 
ªad
, 
EGLC⁄ãxt
 
˘x
);

304 
EGLAPI
 
EGLC⁄ãxt
 
EGLAPIENTRY
 
eglGëCuºítC⁄ãxt
();

305 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
eglGëCuºítSurÁ˚
(
EGLöt
 
ªaddøw
);

306 
EGLAPI
 
EGLDi•œy
 
EGLAPIENTRY
 
eglGëCuºítDi•œy
();

307 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglQuîyC⁄ãxt
(
EGLDi•œy
 
dpy
, 
EGLC⁄ãxt
 
˘x
,

308 
EGLöt
 
©åibuã
, EGLöà*
vÆue
);

310 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglWaôGL
();

311 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglWaôN©ive
(
EGLöt
 
ígöe
);

312 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglSw≠Buf„rs
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
);

313 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglC›yBuf„rs
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
,

314 
EGLN©ivePixm≠Ty≥
 
èrgë
);

319 (*
__eglMu°Ca°ToPr›îFun˘i⁄PoöãrTy≥
)();

322 
EGLAPI
 
__eglMu°Ca°ToPr›îFun˘i⁄PoöãrTy≥
 
EGLAPIENTRY


323 
eglGëProcAddªss
(c⁄° *
¥o˙ame
);

325 #ifde‡
__˝lu•lus


	@/usr/include/GLES/gl.h

1 #i‚de‡
__gl_h_


2 
	#__gl_h_


	)

6 
	~<GLES/gÕœtf‹m.h
>

8 #ifde‡
__˝lu•lus


17 
	tGLvoid
;

18 
	tGLch¨
;

19 
	tGLíum
;

20 
	tGLboﬁón
;

21 
	tGLbôfõld
;

22 
khr⁄os_öt8_t
 
	tGLbyã
;

23 
	tGLsh‹t
;

24 
	tGLöt
;

25 
	tGLsizei
;

26 
khr⁄os_uöt8_t
 
	tGLubyã
;

27 
	tGLush‹t
;

28 
	tGLuöt
;

29 
khr⁄os_Êﬂt_t
 
	tGLÊﬂt
;

30 
khr⁄os_Êﬂt_t
 
	tGL˛ampf
;

31 
khr⁄os_öt32_t
 
	tGLfixed
;

32 
khr⁄os_öt32_t
 
	tGL˛ampx
;

34 
khr⁄os_öçå_t
 
	tGLöçå
;

35 
khr⁄os_ssize_t
 
	tGLsizeùå
;

41 
	#GL_VERSION_ES_CM_1_0
 1

	)

42 
	#GL_VERSION_ES_CL_1_0
 1

	)

43 
	#GL_VERSION_ES_CM_1_1
 1

	)

44 
	#GL_VERSION_ES_CL_1_1
 1

	)

47 
	#GL_DEPTH_BUFFER_BIT
 0x00000100

	)

48 
	#GL_STENCIL_BUFFER_BIT
 0x00000400

	)

49 
	#GL_COLOR_BUFFER_BIT
 0x00004000

	)

52 
	#GL_FALSE
 0

	)

53 
	#GL_TRUE
 1

	)

56 
	#GL_POINTS
 0x0000

	)

57 
	#GL_LINES
 0x0001

	)

58 
	#GL_LINE_LOOP
 0x0002

	)

59 
	#GL_LINE_STRIP
 0x0003

	)

60 
	#GL_TRIANGLES
 0x0004

	)

61 
	#GL_TRIANGLE_STRIP
 0x0005

	)

62 
	#GL_TRIANGLE_FAN
 0x0006

	)

65 
	#GL_NEVER
 0x0200

	)

66 
	#GL_LESS
 0x0201

	)

67 
	#GL_EQUAL
 0x0202

	)

68 
	#GL_LEQUAL
 0x0203

	)

69 
	#GL_GREATER
 0x0204

	)

70 
	#GL_NOTEQUAL
 0x0205

	)

71 
	#GL_GEQUAL
 0x0206

	)

72 
	#GL_ALWAYS
 0x0207

	)

75 
	#GL_ZERO
 0

	)

76 
	#GL_ONE
 1

	)

77 
	#GL_SRC_COLOR
 0x0300

	)

78 
	#GL_ONE_MINUS_SRC_COLOR
 0x0301

	)

79 
	#GL_SRC_ALPHA
 0x0302

	)

80 
	#GL_ONE_MINUS_SRC_ALPHA
 0x0303

	)

81 
	#GL_DST_ALPHA
 0x0304

	)

82 
	#GL_ONE_MINUS_DST_ALPHA
 0x0305

	)

87 
	#GL_DST_COLOR
 0x0306

	)

88 
	#GL_ONE_MINUS_DST_COLOR
 0x0307

	)

89 
	#GL_SRC_ALPHA_SATURATE
 0x0308

	)

96 
	#GL_CLIP_PLANE0
 0x3000

	)

97 
	#GL_CLIP_PLANE1
 0x3001

	)

98 
	#GL_CLIP_PLANE2
 0x3002

	)

99 
	#GL_CLIP_PLANE3
 0x3003

	)

100 
	#GL_CLIP_PLANE4
 0x3004

	)

101 
	#GL_CLIP_PLANE5
 0x3005

	)

115 
	#GL_FRONT
 0x0404

	)

116 
	#GL_BACK
 0x0405

	)

117 
	#GL_FRONT_AND_BACK
 0x0408

	)

130 
	#GL_FOG
 0x0B60

	)

131 
	#GL_LIGHTING
 0x0B50

	)

132 
	#GL_TEXTURE_2D
 0x0DE1

	)

133 
	#GL_CULL_FACE
 0x0B44

	)

134 
	#GL_ALPHA_TEST
 0x0BC0

	)

135 
	#GL_BLEND
 0x0BE2

	)

136 
	#GL_COLOR_LOGIC_OP
 0x0BF2

	)

137 
	#GL_DITHER
 0x0BD0

	)

138 
	#GL_STENCIL_TEST
 0x0B90

	)

139 
	#GL_DEPTH_TEST
 0x0B71

	)

148 
	#GL_POINT_SMOOTH
 0x0B10

	)

149 
	#GL_LINE_SMOOTH
 0x0B20

	)

150 
	#GL_SCISSOR_TEST
 0x0C11

	)

151 
	#GL_COLOR_MATERIAL
 0x0B57

	)

152 
	#GL_NORMALIZE
 0x0BA1

	)

153 
	#GL_RESCALE_NORMAL
 0x803A

	)

154 
	#GL_POLYGON_OFFSET_FILL
 0x8037

	)

155 
	#GL_VERTEX_ARRAY
 0x8074

	)

156 
	#GL_NORMAL_ARRAY
 0x8075

	)

157 
	#GL_COLOR_ARRAY
 0x8076

	)

158 
	#GL_TEXTURE_COORD_ARRAY
 0x8078

	)

159 
	#GL_MULTISAMPLE
 0x809D

	)

160 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

161 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

162 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

165 
	#GL_NO_ERROR
 0

	)

166 
	#GL_INVALID_ENUM
 0x0500

	)

167 
	#GL_INVALID_VALUE
 0x0501

	)

168 
	#GL_INVALID_OPERATION
 0x0502

	)

169 
	#GL_STACK_OVERFLOW
 0x0503

	)

170 
	#GL_STACK_UNDERFLOW
 0x0504

	)

171 
	#GL_OUT_OF_MEMORY
 0x0505

	)

175 
	#GL_EXP
 0x0800

	)

176 
	#GL_EXP2
 0x0801

	)

179 
	#GL_FOG_DENSITY
 0x0B62

	)

180 
	#GL_FOG_START
 0x0B63

	)

181 
	#GL_FOG_END
 0x0B64

	)

182 
	#GL_FOG_MODE
 0x0B65

	)

183 
	#GL_FOG_COLOR
 0x0B66

	)

186 
	#GL_CW
 0x0900

	)

187 
	#GL_CCW
 0x0901

	)

190 
	#GL_CURRENT_COLOR
 0x0B00

	)

191 
	#GL_CURRENT_NORMAL
 0x0B02

	)

192 
	#GL_CURRENT_TEXTURE_COORDS
 0x0B03

	)

193 
	#GL_POINT_SIZE
 0x0B11

	)

194 
	#GL_POINT_SIZE_MIN
 0x8126

	)

195 
	#GL_POINT_SIZE_MAX
 0x8127

	)

196 
	#GL_POINT_FADE_THRESHOLD_SIZE
 0x8128

	)

197 
	#GL_POINT_DISTANCE_ATTENUATION
 0x8129

	)

198 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

199 
	#GL_LINE_WIDTH
 0x0B21

	)

200 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

201 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

202 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

203 
	#GL_CULL_FACE_MODE
 0x0B45

	)

204 
	#GL_FRONT_FACE
 0x0B46

	)

205 
	#GL_SHADE_MODEL
 0x0B54

	)

206 
	#GL_DEPTH_RANGE
 0x0B70

	)

207 
	#GL_DEPTH_WRITEMASK
 0x0B72

	)

208 
	#GL_DEPTH_CLEAR_VALUE
 0x0B73

	)

209 
	#GL_DEPTH_FUNC
 0x0B74

	)

210 
	#GL_STENCIL_CLEAR_VALUE
 0x0B91

	)

211 
	#GL_STENCIL_FUNC
 0x0B92

	)

212 
	#GL_STENCIL_VALUE_MASK
 0x0B93

	)

213 
	#GL_STENCIL_FAIL
 0x0B94

	)

214 
	#GL_STENCIL_PASS_DEPTH_FAIL
 0x0B95

	)

215 
	#GL_STENCIL_PASS_DEPTH_PASS
 0x0B96

	)

216 
	#GL_STENCIL_REF
 0x0B97

	)

217 
	#GL_STENCIL_WRITEMASK
 0x0B98

	)

218 
	#GL_MATRIX_MODE
 0x0BA0

	)

219 
	#GL_VIEWPORT
 0x0BA2

	)

220 
	#GL_MODELVIEW_STACK_DEPTH
 0x0BA3

	)

221 
	#GL_PROJECTION_STACK_DEPTH
 0x0BA4

	)

222 
	#GL_TEXTURE_STACK_DEPTH
 0x0BA5

	)

223 
	#GL_MODELVIEW_MATRIX
 0x0BA6

	)

224 
	#GL_PROJECTION_MATRIX
 0x0BA7

	)

225 
	#GL_TEXTURE_MATRIX
 0x0BA8

	)

226 
	#GL_ALPHA_TEST_FUNC
 0x0BC1

	)

227 
	#GL_ALPHA_TEST_REF
 0x0BC2

	)

228 
	#GL_BLEND_DST
 0x0BE0

	)

229 
	#GL_BLEND_SRC
 0x0BE1

	)

230 
	#GL_LOGIC_OP_MODE
 0x0BF0

	)

231 
	#GL_SCISSOR_BOX
 0x0C10

	)

232 
	#GL_SCISSOR_TEST
 0x0C11

	)

233 
	#GL_COLOR_CLEAR_VALUE
 0x0C22

	)

234 
	#GL_COLOR_WRITEMASK
 0x0C23

	)

235 
	#GL_UNPACK_ALIGNMENT
 0x0CF5

	)

236 
	#GL_PACK_ALIGNMENT
 0x0D05

	)

237 
	#GL_MAX_LIGHTS
 0x0D31

	)

238 
	#GL_MAX_CLIP_PLANES
 0x0D32

	)

239 
	#GL_MAX_TEXTURE_SIZE
 0x0D33

	)

240 
	#GL_MAX_MODELVIEW_STACK_DEPTH
 0x0D36

	)

241 
	#GL_MAX_PROJECTION_STACK_DEPTH
 0x0D38

	)

242 
	#GL_MAX_TEXTURE_STACK_DEPTH
 0x0D39

	)

243 
	#GL_MAX_VIEWPORT_DIMS
 0x0D3A

	)

244 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

245 
	#GL_SUBPIXEL_BITS
 0x0D50

	)

246 
	#GL_RED_BITS
 0x0D52

	)

247 
	#GL_GREEN_BITS
 0x0D53

	)

248 
	#GL_BLUE_BITS
 0x0D54

	)

249 
	#GL_ALPHA_BITS
 0x0D55

	)

250 
	#GL_DEPTH_BITS
 0x0D56

	)

251 
	#GL_STENCIL_BITS
 0x0D57

	)

252 
	#GL_POLYGON_OFFSET_UNITS
 0x2A00

	)

253 
	#GL_POLYGON_OFFSET_FILL
 0x8037

	)

254 
	#GL_POLYGON_OFFSET_FACTOR
 0x8038

	)

255 
	#GL_TEXTURE_BINDING_2D
 0x8069

	)

256 
	#GL_VERTEX_ARRAY_SIZE
 0x807A

	)

257 
	#GL_VERTEX_ARRAY_TYPE
 0x807B

	)

258 
	#GL_VERTEX_ARRAY_STRIDE
 0x807C

	)

259 
	#GL_NORMAL_ARRAY_TYPE
 0x807E

	)

260 
	#GL_NORMAL_ARRAY_STRIDE
 0x807F

	)

261 
	#GL_COLOR_ARRAY_SIZE
 0x8081

	)

262 
	#GL_COLOR_ARRAY_TYPE
 0x8082

	)

263 
	#GL_COLOR_ARRAY_STRIDE
 0x8083

	)

264 
	#GL_TEXTURE_COORD_ARRAY_SIZE
 0x8088

	)

265 
	#GL_TEXTURE_COORD_ARRAY_TYPE
 0x8089

	)

266 
	#GL_TEXTURE_COORD_ARRAY_STRIDE
 0x808A

	)

267 
	#GL_VERTEX_ARRAY_POINTER
 0x808E

	)

268 
	#GL_NORMAL_ARRAY_POINTER
 0x808F

	)

269 
	#GL_COLOR_ARRAY_POINTER
 0x8090

	)

270 
	#GL_TEXTURE_COORD_ARRAY_POINTER
 0x8092

	)

271 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

272 
	#GL_SAMPLES
 0x80A9

	)

273 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

274 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

282 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

283 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

286 
	#GL_DONT_CARE
 0x1100

	)

287 
	#GL_FASTEST
 0x1101

	)

288 
	#GL_NICEST
 0x1102

	)

291 
	#GL_PERSPECTIVE_CORRECTION_HINT
 0x0C50

	)

292 
	#GL_POINT_SMOOTH_HINT
 0x0C51

	)

293 
	#GL_LINE_SMOOTH_HINT
 0x0C52

	)

294 
	#GL_FOG_HINT
 0x0C54

	)

295 
	#GL_GENERATE_MIPMAP_HINT
 0x8192

	)

298 
	#GL_LIGHT_MODEL_AMBIENT
 0x0B53

	)

299 
	#GL_LIGHT_MODEL_TWO_SIDE
 0x0B52

	)

302 
	#GL_AMBIENT
 0x1200

	)

303 
	#GL_DIFFUSE
 0x1201

	)

304 
	#GL_SPECULAR
 0x1202

	)

305 
	#GL_POSITION
 0x1203

	)

306 
	#GL_SPOT_DIRECTION
 0x1204

	)

307 
	#GL_SPOT_EXPONENT
 0x1205

	)

308 
	#GL_SPOT_CUTOFF
 0x1206

	)

309 
	#GL_CONSTANT_ATTENUATION
 0x1207

	)

310 
	#GL_LINEAR_ATTENUATION
 0x1208

	)

311 
	#GL_QUADRATIC_ATTENUATION
 0x1209

	)

314 
	#GL_BYTE
 0x1400

	)

315 
	#GL_UNSIGNED_BYTE
 0x1401

	)

316 
	#GL_SHORT
 0x1402

	)

317 
	#GL_UNSIGNED_SHORT
 0x1403

	)

318 
	#GL_FLOAT
 0x1406

	)

319 
	#GL_FIXED
 0x140C

	)

322 
	#GL_CLEAR
 0x1500

	)

323 
	#GL_AND
 0x1501

	)

324 
	#GL_AND_REVERSE
 0x1502

	)

325 
	#GL_COPY
 0x1503

	)

326 
	#GL_AND_INVERTED
 0x1504

	)

327 
	#GL_NOOP
 0x1505

	)

328 
	#GL_XOR
 0x1506

	)

329 
	#GL_OR
 0x1507

	)

330 
	#GL_NOR
 0x1508

	)

331 
	#GL_EQUIV
 0x1509

	)

332 
	#GL_INVERT
 0x150A

	)

333 
	#GL_OR_REVERSE
 0x150B

	)

334 
	#GL_COPY_INVERTED
 0x150C

	)

335 
	#GL_OR_INVERTED
 0x150D

	)

336 
	#GL_NAND
 0x150E

	)

337 
	#GL_SET
 0x150F

	)

343 
	#GL_EMISSION
 0x1600

	)

344 
	#GL_SHININESS
 0x1601

	)

345 
	#GL_AMBIENT_AND_DIFFUSE
 0x1602

	)

351 
	#GL_MODELVIEW
 0x1700

	)

352 
	#GL_PROJECTION
 0x1701

	)

353 
	#GL_TEXTURE
 0x1702

	)

362 
	#GL_ALPHA
 0x1906

	)

363 
	#GL_RGB
 0x1907

	)

364 
	#GL_RGBA
 0x1908

	)

365 
	#GL_LUMINANCE
 0x1909

	)

366 
	#GL_LUMINANCE_ALPHA
 0x190A

	)

369 
	#GL_UNPACK_ALIGNMENT
 0x0CF5

	)

370 
	#GL_PACK_ALIGNMENT
 0x0D05

	)

374 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

375 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

376 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

379 
	#GL_FLAT
 0x1D00

	)

380 
	#GL_SMOOTH
 0x1D01

	)

394 
	#GL_KEEP
 0x1E00

	)

395 
	#GL_REPLACE
 0x1E01

	)

396 
	#GL_INCR
 0x1E02

	)

397 
	#GL_DECR
 0x1E03

	)

401 
	#GL_VENDOR
 0x1F00

	)

402 
	#GL_RENDERER
 0x1F01

	)

403 
	#GL_VERSION
 0x1F02

	)

404 
	#GL_EXTENSIONS
 0x1F03

	)

413 
	#GL_MODULATE
 0x2100

	)

414 
	#GL_DECAL
 0x2101

	)

416 
	#GL_ADD
 0x0104

	)

420 
	#GL_TEXTURE_ENV_MODE
 0x2200

	)

421 
	#GL_TEXTURE_ENV_COLOR
 0x2201

	)

424 
	#GL_TEXTURE_ENV
 0x2300

	)

427 
	#GL_NEAREST
 0x2600

	)

428 
	#GL_LINEAR
 0x2601

	)

433 
	#GL_NEAREST_MIPMAP_NEAREST
 0x2700

	)

434 
	#GL_LINEAR_MIPMAP_NEAREST
 0x2701

	)

435 
	#GL_NEAREST_MIPMAP_LINEAR
 0x2702

	)

436 
	#GL_LINEAR_MIPMAP_LINEAR
 0x2703

	)

439 
	#GL_TEXTURE_MAG_FILTER
 0x2800

	)

440 
	#GL_TEXTURE_MIN_FILTER
 0x2801

	)

441 
	#GL_TEXTURE_WRAP_S
 0x2802

	)

442 
	#GL_TEXTURE_WRAP_T
 0x2803

	)

443 
	#GL_GENERATE_MIPMAP
 0x8191

	)

449 
	#GL_TEXTURE0
 0x84C0

	)

450 
	#GL_TEXTURE1
 0x84C1

	)

451 
	#GL_TEXTURE2
 0x84C2

	)

452 
	#GL_TEXTURE3
 0x84C3

	)

453 
	#GL_TEXTURE4
 0x84C4

	)

454 
	#GL_TEXTURE5
 0x84C5

	)

455 
	#GL_TEXTURE6
 0x84C6

	)

456 
	#GL_TEXTURE7
 0x84C7

	)

457 
	#GL_TEXTURE8
 0x84C8

	)

458 
	#GL_TEXTURE9
 0x84C9

	)

459 
	#GL_TEXTURE10
 0x84CA

	)

460 
	#GL_TEXTURE11
 0x84CB

	)

461 
	#GL_TEXTURE12
 0x84CC

	)

462 
	#GL_TEXTURE13
 0x84CD

	)

463 
	#GL_TEXTURE14
 0x84CE

	)

464 
	#GL_TEXTURE15
 0x84CF

	)

465 
	#GL_TEXTURE16
 0x84D0

	)

466 
	#GL_TEXTURE17
 0x84D1

	)

467 
	#GL_TEXTURE18
 0x84D2

	)

468 
	#GL_TEXTURE19
 0x84D3

	)

469 
	#GL_TEXTURE20
 0x84D4

	)

470 
	#GL_TEXTURE21
 0x84D5

	)

471 
	#GL_TEXTURE22
 0x84D6

	)

472 
	#GL_TEXTURE23
 0x84D7

	)

473 
	#GL_TEXTURE24
 0x84D8

	)

474 
	#GL_TEXTURE25
 0x84D9

	)

475 
	#GL_TEXTURE26
 0x84DA

	)

476 
	#GL_TEXTURE27
 0x84DB

	)

477 
	#GL_TEXTURE28
 0x84DC

	)

478 
	#GL_TEXTURE29
 0x84DD

	)

479 
	#GL_TEXTURE30
 0x84DE

	)

480 
	#GL_TEXTURE31
 0x84DF

	)

481 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

482 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

485 
	#GL_REPEAT
 0x2901

	)

486 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

495 
	#GL_LIGHT0
 0x4000

	)

496 
	#GL_LIGHT1
 0x4001

	)

497 
	#GL_LIGHT2
 0x4002

	)

498 
	#GL_LIGHT3
 0x4003

	)

499 
	#GL_LIGHT4
 0x4004

	)

500 
	#GL_LIGHT5
 0x4005

	)

501 
	#GL_LIGHT6
 0x4006

	)

502 
	#GL_LIGHT7
 0x4007

	)

505 
	#GL_ARRAY_BUFFER
 0x8892

	)

506 
	#GL_ELEMENT_ARRAY_BUFFER
 0x8893

	)

508 
	#GL_ARRAY_BUFFER_BINDING
 0x8894

	)

509 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING
 0x8895

	)

510 
	#GL_VERTEX_ARRAY_BUFFER_BINDING
 0x8896

	)

511 
	#GL_NORMAL_ARRAY_BUFFER_BINDING
 0x8897

	)

512 
	#GL_COLOR_ARRAY_BUFFER_BINDING
 0x8898

	)

513 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
 0x889A

	)

515 
	#GL_STATIC_DRAW
 0x88E4

	)

516 
	#GL_DYNAMIC_DRAW
 0x88E8

	)

518 
	#GL_BUFFER_SIZE
 0x8764

	)

519 
	#GL_BUFFER_USAGE
 0x8765

	)

522 
	#GL_SUBTRACT
 0x84E7

	)

523 
	#GL_COMBINE
 0x8570

	)

524 
	#GL_COMBINE_RGB
 0x8571

	)

525 
	#GL_COMBINE_ALPHA
 0x8572

	)

526 
	#GL_RGB_SCALE
 0x8573

	)

527 
	#GL_ADD_SIGNED
 0x8574

	)

528 
	#GL_INTERPOLATE
 0x8575

	)

529 
	#GL_CONSTANT
 0x8576

	)

530 
	#GL_PRIMARY_COLOR
 0x8577

	)

531 
	#GL_PREVIOUS
 0x8578

	)

532 
	#GL_OPERAND0_RGB
 0x8590

	)

533 
	#GL_OPERAND1_RGB
 0x8591

	)

534 
	#GL_OPERAND2_RGB
 0x8592

	)

535 
	#GL_OPERAND0_ALPHA
 0x8598

	)

536 
	#GL_OPERAND1_ALPHA
 0x8599

	)

537 
	#GL_OPERAND2_ALPHA
 0x859A

	)

539 
	#GL_ALPHA_SCALE
 0x0D1C

	)

541 
	#GL_SRC0_RGB
 0x8580

	)

542 
	#GL_SRC1_RGB
 0x8581

	)

543 
	#GL_SRC2_RGB
 0x8582

	)

544 
	#GL_SRC0_ALPHA
 0x8588

	)

545 
	#GL_SRC1_ALPHA
 0x8589

	)

546 
	#GL_SRC2_ALPHA
 0x858A

	)

548 
	#GL_DOT3_RGB
 0x86AE

	)

549 
	#GL_DOT3_RGBA
 0x86AF

	)

556 #i‚de‡
GL_OES_ªad_f‹m©


557 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE_OES
 0x8B9A

	)

558 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
 0x8B9B

	)

562 #i‚de‡
GL_OES_com¥es£d_∑Àâed_ãxtuª


563 
	#GL_PALETTE4_RGB8_OES
 0x8B90

	)

564 
	#GL_PALETTE4_RGBA8_OES
 0x8B91

	)

565 
	#GL_PALETTE4_R5_G6_B5_OES
 0x8B92

	)

566 
	#GL_PALETTE4_RGBA4_OES
 0x8B93

	)

567 
	#GL_PALETTE4_RGB5_A1_OES
 0x8B94

	)

568 
	#GL_PALETTE8_RGB8_OES
 0x8B95

	)

569 
	#GL_PALETTE8_RGBA8_OES
 0x8B96

	)

570 
	#GL_PALETTE8_R5_G6_B5_OES
 0x8B97

	)

571 
	#GL_PALETTE8_RGBA4_OES
 0x8B98

	)

572 
	#GL_PALETTE8_RGB5_A1_OES
 0x8B99

	)

576 #i‚de‡
GL_OES_poöt_size_¨øy


577 
	#GL_POINT_SIZE_ARRAY_OES
 0x8B9C

	)

578 
	#GL_POINT_SIZE_ARRAY_TYPE_OES
 0x898A

	)

579 
	#GL_POINT_SIZE_ARRAY_STRIDE_OES
 0x898B

	)

580 
	#GL_POINT_SIZE_ARRAY_POINTER_OES
 0x898C

	)

581 
	#GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES
 0x8B9F

	)

585 #i‚de‡
GL_OES_poöt_•rôe


586 
	#GL_POINT_SPRITE_OES
 0x8861

	)

587 
	#GL_COORD_REPLACE_OES
 0x8862

	)

593 
GL_API
 
GL_APIENTRY
 
glAÕhaFunc
 (
GLíum
 
func
, 
GL˛ampf
 
ªf
);

594 
GL_API
 
GL_APIENTRY
 
glCÀ¨Cﬁ‹
 (
GL˛ampf
 
ªd
, GL˛amp‡
gªí
, GL˛amp‡
blue
, GL˛amp‡
Æpha
);

595 
GL_API
 
GL_APIENTRY
 
glCÀ¨Dïthf
 (
GL˛ampf
 
dïth
);

596 
GL_API
 
GL_APIENTRY
 
glClùPœ√f
 (
GLíum
 
∂™e
, c⁄° 
GLÊﬂt
 *
equ©i⁄
);

597 
GL_API
 
GL_APIENTRY
 
glCﬁ‹4f
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
);

598 
GL_API
 
GL_APIENTRY
 
glDïthR™gef
 (
GL˛ampf
 
zNór
, GL˛amp‡
zF¨
);

599 
GL_API
 
GL_APIENTRY
 
glFogf
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

600 
GL_API
 
GL_APIENTRY
 
glFogfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

601 
GL_API
 
GL_APIENTRY
 
glFru°umf
 (
GLÊﬂt
 
À·
, GLÊﬂà
right
, GLÊﬂà
bŸtom
, GLÊﬂà
t›
, GLÊﬂà
zNór
, GLÊﬂà
zF¨
);

602 
GL_API
 
GL_APIENTRY
 
glGëClùPœ√f
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
eqn
[4]);

603 
GL_API
 
GL_APIENTRY
 
glGëFlﬂtv
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

604 
GL_API
 
GL_APIENTRY
 
glGëLightfv
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

605 
GL_API
 
GL_APIENTRY
 
glGëM©îülfv
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

606 
GL_API
 
GL_APIENTRY
 
glGëTexEnvfv
 (
GLíum
 
ív
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

607 
GL_API
 
GL_APIENTRY
 
glGëTexP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

608 
GL_API
 
GL_APIENTRY
 
glLightModñf
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

609 
GL_API
 
GL_APIENTRY
 
glLightModñfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

610 
GL_API
 
GL_APIENTRY
 
glLightf
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

611 
GL_API
 
GL_APIENTRY
 
glLightfv
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

612 
GL_API
 
GL_APIENTRY
 
glLöeWidth
 (
GLÊﬂt
 
width
);

613 
GL_API
 
GL_APIENTRY
 
glLﬂdM©rixf
 (c⁄° 
GLÊﬂt
 *
m
);

614 
GL_API
 
GL_APIENTRY
 
glM©îülf
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

615 
GL_API
 
GL_APIENTRY
 
glM©îülfv
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

616 
GL_API
 
GL_APIENTRY
 
glMu…M©rixf
 (c⁄° 
GLÊﬂt
 *
m
);

617 
GL_API
 
GL_APIENTRY
 
glMu…iTexCo‹d4f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

618 
GL_API
 
GL_APIENTRY
 
glN‹mÆ3f
 (
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
);

619 
GL_API
 
GL_APIENTRY
 
glOπhof
 (
GLÊﬂt
 
À·
, GLÊﬂà
right
, GLÊﬂà
bŸtom
, GLÊﬂà
t›
, GLÊﬂà
zNór
, GLÊﬂà
zF¨
);

620 
GL_API
 
GL_APIENTRY
 
glPoötP¨amëîf
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

621 
GL_API
 
GL_APIENTRY
 
glPoötP¨amëîfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

622 
GL_API
 
GL_APIENTRY
 
glPoötSize
 (
GLÊﬂt
 
size
);

623 
GL_API
 
GL_APIENTRY
 
glPﬁyg⁄Off£t
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
);

624 
GL_API
 
GL_APIENTRY
 
glRŸ©ef
 (
GLÊﬂt
 
™gÀ
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

625 
GL_API
 
GL_APIENTRY
 
glSˇÀf
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

626 
GL_API
 
GL_APIENTRY
 
glTexEnvf
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

627 
GL_API
 
GL_APIENTRY
 
glTexEnvfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

628 
GL_API
 
GL_APIENTRY
 
glTexP¨amëîf
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

629 
GL_API
 
GL_APIENTRY
 
glTexP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

630 
GL_API
 
GL_APIENTRY
 
glTøn¶©ef
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

633 
GL_API
 
GL_APIENTRY
 
glA˘iveTextuª
 (
GLíum
 
ãxtuª
);

634 
GL_API
 
GL_APIENTRY
 
glAÕhaFuncx
 (
GLíum
 
func
, 
GL˛ampx
 
ªf
);

635 
GL_API
 
GL_APIENTRY
 
glBödBuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
);

636 
GL_API
 
GL_APIENTRY
 
glBödTextuª
 (
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
);

637 
GL_API
 
GL_APIENTRY
 
glBÀndFunc
 (
GLíum
 
sÁ˘‹
, GLíum 
dÁ˘‹
);

638 
GL_API
 
GL_APIENTRY
 
glBuf„rD©a
 (
GLíum
 
èrgë
, 
GLsizeùå
 
size
, c⁄° 
GLvoid
 *
d©a
, GLíum 
ußge
);

639 
GL_API
 
GL_APIENTRY
 
glBuf„rSubD©a
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° 
GLvoid
 *
d©a
);

640 
GL_API
 
GL_APIENTRY
 
glCÀ¨
 (
GLbôfõld
 
mask
);

641 
GL_API
 
GL_APIENTRY
 
glCÀ¨Cﬁ‹x
 (
GL˛ampx
 
ªd
, GL˛ampx 
gªí
, GL˛ampx 
blue
, GL˛ampx 
Æpha
);

642 
GL_API
 
GL_APIENTRY
 
glCÀ¨Dïthx
 (
GL˛ampx
 
dïth
);

643 
GL_API
 
GL_APIENTRY
 
glCÀ¨Sãncû
 (
GLöt
 
s
);

644 
GL_API
 
GL_APIENTRY
 
glClõ¡A˘iveTextuª
 (
GLíum
 
ãxtuª
);

645 
GL_API
 
GL_APIENTRY
 
glClùPœ√x
 (
GLíum
 
∂™e
, c⁄° 
GLfixed
 *
equ©i⁄
);

646 
GL_API
 
GL_APIENTRY
 
glCﬁ‹4ub
 (
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
, GLubyã 
Æpha
);

647 
GL_API
 
GL_APIENTRY
 
glCﬁ‹4x
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

648 
GL_API
 
GL_APIENTRY
 
glCﬁ‹Mask
 (
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
);

649 
GL_API
 
GL_APIENTRY
 
glCﬁ‹Poöãr
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

650 
GL_API
 
GL_APIENTRY
 
glCom¥es£dTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

651 
GL_API
 
GL_APIENTRY
 
glCom¥es£dTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
);

652 
GL_API
 
GL_APIENTRY
 
glC›yTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

653 
GL_API
 
GL_APIENTRY
 
glC›yTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

654 
GL_API
 
GL_APIENTRY
 
glCuŒFa˚
 (
GLíum
 
mode
);

655 
GL_API
 
GL_APIENTRY
 
glDñëeBuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
buf„rs
);

656 
GL_API
 
GL_APIENTRY
 
glDñëeTextuªs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
);

657 
GL_API
 
GL_APIENTRY
 
glDïthFunc
 (
GLíum
 
func
);

658 
GL_API
 
GL_APIENTRY
 
glDïthMask
 (
GLboﬁón
 
Êag
);

659 
GL_API
 
GL_APIENTRY
 
glDïthR™gex
 (
GL˛ampx
 
zNór
, GL˛ampx 
zF¨
);

660 
GL_API
 
GL_APIENTRY
 
glDißbÀ
 (
GLíum
 
ˇp
);

661 
GL_API
 
GL_APIENTRY
 
glDißbÀClõ¡Sèã
 (
GLíum
 
¨øy
);

662 
GL_API
 
GL_APIENTRY
 
glDøwAºays
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

663 
GL_API
 
GL_APIENTRY
 
glDøwEÀmíts
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
);

664 
GL_API
 
GL_APIENTRY
 
glE«bÀ
 (
GLíum
 
ˇp
);

665 
GL_API
 
GL_APIENTRY
 
glE«bÀClõ¡Sèã
 (
GLíum
 
¨øy
);

666 
GL_API
 
GL_APIENTRY
 
glFöish
 ();

667 
GL_API
 
GL_APIENTRY
 
glFlush
 ();

668 
GL_API
 
GL_APIENTRY
 
glFogx
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

669 
GL_API
 
GL_APIENTRY
 
glFogxv
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

670 
GL_API
 
GL_APIENTRY
 
glFr⁄tFa˚
 (
GLíum
 
mode
);

671 
GL_API
 
GL_APIENTRY
 
glFru°umx
 (
GLfixed
 
À·
, GLfixed 
right
, GLfixed 
bŸtom
, GLfixed 
t›
, GLfixed 
zNór
, GLfixed 
zF¨
);

672 
GL_API
 
GL_APIENTRY
 
glGëBoﬁónv
 (
GLíum
 
≤ame
, 
GLboﬁón
 *
∑øms
);

673 
GL_API
 
GL_APIENTRY
 
glGëBuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

674 
GL_API
 
GL_APIENTRY
 
glGëClùPœ√x
 (
GLíum
 
≤ame
, 
GLfixed
 
eqn
[4]);

675 
GL_API
 
GL_APIENTRY
 
glGíBuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
buf„rs
);

676 
GL_API
 
GL_APIENTRY
 
glGíTextuªs
 (
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
);

677 
GL_API
 
GLíum
 
GL_APIENTRY
 
glGëEº‹
 ();

678 
GL_API
 
GL_APIENTRY
 
glGëFixedv
 (
GLíum
 
≤ame
, 
GLfixed
 *
∑øms
);

679 
GL_API
 
GL_APIENTRY
 
glGëI¡egîv
 (
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

680 
GL_API
 
GL_APIENTRY
 
glGëLightxv
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

681 
GL_API
 
GL_APIENTRY
 
glGëM©îülxv
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

682 
GL_API
 
GL_APIENTRY
 
glGëPoöãrv
 (
GLíum
 
≤ame
, 
GLvoid
 **
∑øms
);

683 
GL_API
 c⁄° 
GLubyã
 * 
GL_APIENTRY
 
glGëSåög
 (
GLíum
 
«me
);

684 
GL_API
 
GL_APIENTRY
 
glGëTexEnviv
 (
GLíum
 
ív
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

685 
GL_API
 
GL_APIENTRY
 
glGëTexEnvxv
 (
GLíum
 
ív
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

686 
GL_API
 
GL_APIENTRY
 
glGëTexP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

687 
GL_API
 
GL_APIENTRY
 
glGëTexP¨amëîxv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

688 
GL_API
 
GL_APIENTRY
 
glHöt
 (
GLíum
 
èrgë
, GLíum 
mode
);

689 
GL_API
 
GLboﬁón
 
GL_APIENTRY
 
glIsBuf„r
 (
GLuöt
 
buf„r
);

690 
GL_API
 
GLboﬁón
 
GL_APIENTRY
 
glIsE«bÀd
 (
GLíum
 
ˇp
);

691 
GL_API
 
GLboﬁón
 
GL_APIENTRY
 
glIsTextuª
 (
GLuöt
 
ãxtuª
);

692 
GL_API
 
GL_APIENTRY
 
glLightModñx
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

693 
GL_API
 
GL_APIENTRY
 
glLightModñxv
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

694 
GL_API
 
GL_APIENTRY
 
glLightx
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

695 
GL_API
 
GL_APIENTRY
 
glLightxv
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

696 
GL_API
 
GL_APIENTRY
 
glLöeWidthx
 (
GLfixed
 
width
);

697 
GL_API
 
GL_APIENTRY
 
glLﬂdIdítôy
 ();

698 
GL_API
 
GL_APIENTRY
 
glLﬂdM©rixx
 (c⁄° 
GLfixed
 *
m
);

699 
GL_API
 
GL_APIENTRY
 
glLogicOp
 (
GLíum
 
›code
);

700 
GL_API
 
GL_APIENTRY
 
glM©îülx
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

701 
GL_API
 
GL_APIENTRY
 
glM©îülxv
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

702 
GL_API
 
GL_APIENTRY
 
glM©rixMode
 (
GLíum
 
mode
);

703 
GL_API
 
GL_APIENTRY
 
glMu…M©rixx
 (c⁄° 
GLfixed
 *
m
);

704 
GL_API
 
GL_APIENTRY
 
glMu…iTexCo‹d4x
 (
GLíum
 
èrgë
, 
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
, GLfixed 
q
);

705 
GL_API
 
GL_APIENTRY
 
glN‹mÆ3x
 (
GLfixed
 
nx
, GLfixed 
ny
, GLfixed 
nz
);

706 
GL_API
 
GL_APIENTRY
 
glN‹mÆPoöãr
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

707 
GL_API
 
GL_APIENTRY
 
glOπhox
 (
GLfixed
 
À·
, GLfixed 
right
, GLfixed 
bŸtom
, GLfixed 
t›
, GLfixed 
zNór
, GLfixed 
zF¨
);

708 
GL_API
 
GL_APIENTRY
 
glPixñSt‹ei
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

709 
GL_API
 
GL_APIENTRY
 
glPoötP¨amëîx
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

710 
GL_API
 
GL_APIENTRY
 
glPoötP¨amëîxv
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

711 
GL_API
 
GL_APIENTRY
 
glPoötSizex
 (
GLfixed
 
size
);

712 
GL_API
 
GL_APIENTRY
 
glPﬁyg⁄Off£tx
 (
GLfixed
 
Á˘‹
, GLfixed 
unôs
);

713 
GL_API
 
GL_APIENTRY
 
glP›M©rix
 ();

714 
GL_API
 
GL_APIENTRY
 
glPushM©rix
 ();

715 
GL_API
 
GL_APIENTRY
 
glRódPixñs
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
pixñs
);

716 
GL_API
 
GL_APIENTRY
 
glRŸ©ex
 (
GLfixed
 
™gÀ
, GLfixed 
x
, GLfixed 
y
, GLfixed 
z
);

717 
GL_API
 
GL_APIENTRY
 
glSam∂eCovîage
 (
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
);

718 
GL_API
 
GL_APIENTRY
 
glSam∂eCovîagex
 (
GL˛ampx
 
vÆue
, 
GLboﬁón
 
övît
);

719 
GL_API
 
GL_APIENTRY
 
glSˇÀx
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

720 
GL_API
 
GL_APIENTRY
 
glSciss‹
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

721 
GL_API
 
GL_APIENTRY
 
glShadeModñ
 (
GLíum
 
mode
);

722 
GL_API
 
GL_APIENTRY
 
glSãncûFunc
 (
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

723 
GL_API
 
GL_APIENTRY
 
glSãncûMask
 (
GLuöt
 
mask
);

724 
GL_API
 
GL_APIENTRY
 
glSãncûOp
 (
GLíum
 
Áû
, GLíum 
zÁû
, GLíum 
z∑ss
);

725 
GL_API
 
GL_APIENTRY
 
glTexCo‹dPoöãr
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

726 
GL_API
 
GL_APIENTRY
 
glTexEnvi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

727 
GL_API
 
GL_APIENTRY
 
glTexEnvx
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

728 
GL_API
 
GL_APIENTRY
 
glTexEnviv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

729 
GL_API
 
GL_APIENTRY
 
glTexEnvxv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

730 
GL_API
 
GL_APIENTRY
 
glTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

731 
GL_API
 
GL_APIENTRY
 
glTexP¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

732 
GL_API
 
GL_APIENTRY
 
glTexP¨amëîx
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

733 
GL_API
 
GL_APIENTRY
 
glTexP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

734 
GL_API
 
GL_APIENTRY
 
glTexP¨amëîxv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

735 
GL_API
 
GL_APIENTRY
 
glTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

736 
GL_API
 
GL_APIENTRY
 
glTøn¶©ex
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

737 
GL_API
 
GL_APIENTRY
 
glVîãxPoöãr
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

738 
GL_API
 
GL_APIENTRY
 
glVõwp‹t
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

745 #i‚de‡
GL_OES_ªad_f‹m©


746 
	#GL_OES_ªad_f‹m©
 1

	)

750 #i‚de‡
GL_OES_com¥es£d_∑Àâed_ãxtuª


751 
	#GL_OES_com¥es£d_∑Àâed_ãxtuª
 1

	)

755 #i‚de‡
GL_OES_poöt_size_¨øy


756 
	#GL_OES_poöt_size_¨øy
 1

	)

757 
GL_API
 
GL_APIENTRY
 
glPoötSizePoöãrOES
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

761 #i‚de‡
GL_OES_poöt_•rôe


762 
	#GL_OES_poöt_•rôe
 1

	)

765 #ifde‡
__˝lu•lus


	@/usr/include/GLES/glext.h

1 #i‚de‡
__gÀxt_h_


2 
	#__gÀxt_h_


	)

6 #ifde‡
__˝lu•lus


15 #i‚de‡
GL_APIENTRYP


16 
	#GL_APIENTRYP
 
GL_APIENTRY
*

	)

24 #i‚de‡
GL_OES_bÀnd_equ©i⁄_£∑øã


26 
	#GL_BLEND_EQUATION_RGB_OES
 0x8009

	)

27 
	#GL_BLEND_EQUATION_ALPHA_OES
 0x883D

	)

31 #i‚de‡
GL_OES_bÀnd_func_£∑øã


32 
	#GL_BLEND_DST_RGB_OES
 0x80C8

	)

33 
	#GL_BLEND_SRC_RGB_OES
 0x80C9

	)

34 
	#GL_BLEND_DST_ALPHA_OES
 0x80CA

	)

35 
	#GL_BLEND_SRC_ALPHA_OES
 0x80CB

	)

39 #i‚de‡
GL_OES_bÀnd_subåa˘


40 
	#GL_BLEND_EQUATION_OES
 0x8009

	)

41 
	#GL_FUNC_ADD_OES
 0x8006

	)

42 
	#GL_FUNC_SUBTRACT_OES
 0x800A

	)

43 
	#GL_FUNC_REVERSE_SUBTRACT_OES
 0x800B

	)

47 #i‚de‡
GL_OES_com¥es£d_ETC1_RGB8_ãxtuª


48 
	#GL_ETC1_RGB8_OES
 0x8D64

	)

52 #i‚de‡
GL_OES_dïth24


53 
	#GL_DEPTH_COMPONENT24_OES
 0x81A6

	)

57 #i‚de‡
GL_OES_dïth32


58 
	#GL_DEPTH_COMPONENT32_OES
 0x81A7

	)

62 #i‚de‡
GL_OES_døw_ãxtuª


63 
	#GL_TEXTURE_CROP_RECT_OES
 0x8B9D

	)

67 #i‚de‡
GL_OES_EGL_image


68 * 
	tGLeglImageOES
;

72 #i‚de‡
GL_OES_EGL_image_exã∫Æ


74 
	#GL_TEXTURE_EXTERNAL_OES
 0x8D65

	)

75 
	#GL_TEXTURE_BINDING_EXTERNAL_OES
 0x8D67

	)

76 
	#GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES
 0x8D68

	)

80 #i‚de‡
GL_OES_ñemít_ödex_uöt


81 
	#GL_UNSIGNED_INT
 0x1405

	)

85 #i‚de‡
GL_OES_fixed_poöt


86 
	#GL_FIXED_OES
 0x140C

	)

90 #i‚de‡
GL_OES_‰amebuf„r_obje˘


91 
	#GL_NONE_OES
 0

	)

92 
	#GL_FRAMEBUFFER_OES
 0x8D40

	)

93 
	#GL_RENDERBUFFER_OES
 0x8D41

	)

94 
	#GL_RGBA4_OES
 0x8056

	)

95 
	#GL_RGB5_A1_OES
 0x8057

	)

96 
	#GL_RGB565_OES
 0x8D62

	)

97 
	#GL_DEPTH_COMPONENT16_OES
 0x81A5

	)

98 
	#GL_RENDERBUFFER_WIDTH_OES
 0x8D42

	)

99 
	#GL_RENDERBUFFER_HEIGHT_OES
 0x8D43

	)

100 
	#GL_RENDERBUFFER_INTERNAL_FORMAT_OES
 0x8D44

	)

101 
	#GL_RENDERBUFFER_RED_SIZE_OES
 0x8D50

	)

102 
	#GL_RENDERBUFFER_GREEN_SIZE_OES
 0x8D51

	)

103 
	#GL_RENDERBUFFER_BLUE_SIZE_OES
 0x8D52

	)

104 
	#GL_RENDERBUFFER_ALPHA_SIZE_OES
 0x8D53

	)

105 
	#GL_RENDERBUFFER_DEPTH_SIZE_OES
 0x8D54

	)

106 
	#GL_RENDERBUFFER_STENCIL_SIZE_OES
 0x8D55

	)

107 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES
 0x8CD0

	)

108 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES
 0x8CD1

	)

109 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES
 0x8CD2

	)

110 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES
 0x8CD3

	)

111 
	#GL_COLOR_ATTACHMENT0_OES
 0x8CE0

	)

112 
	#GL_DEPTH_ATTACHMENT_OES
 0x8D00

	)

113 
	#GL_STENCIL_ATTACHMENT_OES
 0x8D20

	)

114 
	#GL_FRAMEBUFFER_COMPLETE_OES
 0x8CD5

	)

115 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES
 0x8CD6

	)

116 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES
 0x8CD7

	)

117 
	#GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES
 0x8CD9

	)

118 
	#GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES
 0x8CDA

	)

119 
	#GL_FRAMEBUFFER_UNSUPPORTED_OES
 0x8CDD

	)

120 
	#GL_FRAMEBUFFER_BINDING_OES
 0x8CA6

	)

121 
	#GL_RENDERBUFFER_BINDING_OES
 0x8CA7

	)

122 
	#GL_MAX_RENDERBUFFER_SIZE_OES
 0x84E8

	)

123 
	#GL_INVALID_FRAMEBUFFER_OPERATION_OES
 0x0506

	)

127 #i‚de‡
GL_OES_m≠buf„r


128 
	#GL_WRITE_ONLY_OES
 0x88B9

	)

129 
	#GL_BUFFER_ACCESS_OES
 0x88BB

	)

130 
	#GL_BUFFER_MAPPED_OES
 0x88BC

	)

131 
	#GL_BUFFER_MAP_POINTER_OES
 0x88BD

	)

135 #i‚de‡
GL_OES_m©rix_gë


136 
	#GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES
 0x898D

	)

137 
	#GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES
 0x898E

	)

138 
	#GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES
 0x898F

	)

142 #i‚de‡
GL_OES_m©rix_∑Àâe


143 
	#GL_MAX_VERTEX_UNITS_OES
 0x86A4

	)

144 
	#GL_MAX_PALETTE_MATRICES_OES
 0x8842

	)

145 
	#GL_MATRIX_PALETTE_OES
 0x8840

	)

146 
	#GL_MATRIX_INDEX_ARRAY_OES
 0x8844

	)

147 
	#GL_WEIGHT_ARRAY_OES
 0x86AD

	)

148 
	#GL_CURRENT_PALETTE_MATRIX_OES
 0x8843

	)

149 
	#GL_MATRIX_INDEX_ARRAY_SIZE_OES
 0x8846

	)

150 
	#GL_MATRIX_INDEX_ARRAY_TYPE_OES
 0x8847

	)

151 
	#GL_MATRIX_INDEX_ARRAY_STRIDE_OES
 0x8848

	)

152 
	#GL_MATRIX_INDEX_ARRAY_POINTER_OES
 0x8849

	)

153 
	#GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES
 0x8B9E

	)

154 
	#GL_WEIGHT_ARRAY_SIZE_OES
 0x86AB

	)

155 
	#GL_WEIGHT_ARRAY_TYPE_OES
 0x86A9

	)

156 
	#GL_WEIGHT_ARRAY_STRIDE_OES
 0x86AA

	)

157 
	#GL_WEIGHT_ARRAY_POINTER_OES
 0x86AC

	)

158 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING_OES
 0x889E

	)

162 #i‚de‡
GL_OES_∑cked_dïth_°ícû


163 
	#GL_DEPTH_STENCIL_OES
 0x84F9

	)

164 
	#GL_UNSIGNED_INT_24_8_OES
 0x84FA

	)

165 
	#GL_DEPTH24_STENCIL8_OES
 0x88F0

	)

172 #i‚de‡
GL_OES_rgb8_rgba8


173 
	#GL_RGB8_OES
 0x8051

	)

174 
	#GL_RGBA8_OES
 0x8058

	)

178 #i‚de‡
GL_OES_°ícû1


179 
	#GL_STENCIL_INDEX1_OES
 0x8D46

	)

183 #i‚de‡
GL_OES_°ícû4


184 
	#GL_STENCIL_INDEX4_OES
 0x8D47

	)

188 #i‚de‡
GL_OES_°ícû8


189 
	#GL_STENCIL_INDEX8_OES
 0x8D48

	)

193 #i‚de‡
GL_OES_°ícû_wøp


194 
	#GL_INCR_WRAP_OES
 0x8507

	)

195 
	#GL_DECR_WRAP_OES
 0x8508

	)

199 #i‚de‡
GL_OES_ãxtuª_cube_m≠


200 
	#GL_NORMAL_MAP_OES
 0x8511

	)

201 
	#GL_REFLECTION_MAP_OES
 0x8512

	)

202 
	#GL_TEXTURE_CUBE_MAP_OES
 0x8513

	)

203 
	#GL_TEXTURE_BINDING_CUBE_MAP_OES
 0x8514

	)

204 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES
 0x8515

	)

205 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES
 0x8516

	)

206 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES
 0x8517

	)

207 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES
 0x8518

	)

208 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES
 0x8519

	)

209 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES
 0x851A

	)

210 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES
 0x851C

	)

211 
	#GL_TEXTURE_GEN_MODE_OES
 0x2500

	)

212 
	#GL_TEXTURE_GEN_STR_OES
 0x8D60

	)

216 #i‚de‡
GL_OES_ãxtuª_múr‹ed_ª≥©


217 
	#GL_MIRRORED_REPEAT_OES
 0x8370

	)

221 #i‚de‡
GL_OES_vîãx_¨øy_obje˘


222 
	#GL_VERTEX_ARRAY_BINDING_OES
 0x85B5

	)

230 #i‚de‡
GL_AMD_com¥es£d_3DC_ãxtuª


231 
	#GL_3DC_X_AMD
 0x87F9

	)

232 
	#GL_3DC_XY_AMD
 0x87FA

	)

236 #i‚de‡
GL_AMD_com¥es£d_ATC_ãxtuª


237 
	#GL_ATC_RGB_AMD
 0x8C92

	)

238 
	#GL_ATC_RGBA_EXPLICIT_ALPHA_AMD
 0x8C93

	)

239 
	#GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD
 0x87EE

	)

250 #i‚de‡
GL_APPLE_‰amebuf„r_mu…ißm∂e


251 
	#GL_RENDERBUFFER_SAMPLES_APPLE
 0x8CAB

	)

252 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE
 0x8D56

	)

253 
	#GL_MAX_SAMPLES_APPLE
 0x8D57

	)

254 
	#GL_READ_FRAMEBUFFER_APPLE
 0x8CA8

	)

255 
	#GL_DRAW_FRAMEBUFFER_APPLE
 0x8CA9

	)

256 
	#GL_DRAW_FRAMEBUFFER_BINDING_APPLE
 0x8CA6

	)

257 
	#GL_READ_FRAMEBUFFER_BINDING_APPLE
 0x8CAA

	)

261 #i‚de‡
GL_APPLE_sync


270 
khr⁄os_öt64_t
 
	tGLöt64
;

271 
khr⁄os_uöt64_t
 
	tGLuöt64
;

272 
__GLsync
 *
	tGLsync
;

274 
	#GL_SYNC_OBJECT_APPLE
 0x8A53

	)

275 
	#GL_MAX_SERVER_WAIT_TIMEOUT_APPLE
 0x9111

	)

276 
	#GL_OBJECT_TYPE_APPLE
 0x9112

	)

277 
	#GL_SYNC_CONDITION_APPLE
 0x9113

	)

278 
	#GL_SYNC_STATUS_APPLE
 0x9114

	)

279 
	#GL_SYNC_FLAGS_APPLE
 0x9115

	)

280 
	#GL_SYNC_FENCE_APPLE
 0x9116

	)

281 
	#GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE
 0x9117

	)

282 
	#GL_UNSIGNALED_APPLE
 0x9118

	)

283 
	#GL_SIGNALED_APPLE
 0x9119

	)

284 
	#GL_ALREADY_SIGNALED_APPLE
 0x911A

	)

285 
	#GL_TIMEOUT_EXPIRED_APPLE
 0x911B

	)

286 
	#GL_CONDITION_SATISFIED_APPLE
 0x911C

	)

287 
	#GL_WAIT_FAILED_APPLE
 0x911D

	)

288 
	#GL_SYNC_FLUSH_COMMANDS_BIT_APPLE
 0x00000001

	)

289 
	#GL_TIMEOUT_IGNORED_APPLE
 0xFFFFFFFFFFFFFFFFuŒ

	)

296 #i‚de‡
GL_APPLE_ãxtuª_f‹m©_BGRA8888


297 
	#GL_BGRA_EXT
 0x80E1

	)

301 #i‚de‡
GL_APPLE_ãxtuª_max_Àvñ


302 
	#GL_TEXTURE_MAX_LEVEL_APPLE
 0x813D

	)

317 #i‚de‡
GL_EXT_bÀnd_mömax


318 
	#GL_MIN_EXT
 0x8007

	)

319 
	#GL_MAX_EXT
 0x8008

	)

323 #i‚de‡
GL_EXT_disˇrd_‰amebuf„r


324 
	#GL_COLOR_EXT
 0x1800

	)

325 
	#GL_DEPTH_EXT
 0x1801

	)

326 
	#GL_STENCIL_EXT
 0x1802

	)

330 #i‚de‡
GL_EXT_m≠_buf„r_ønge


331 
	#GL_MAP_READ_BIT_EXT
 0x0001

	)

332 
	#GL_MAP_WRITE_BIT_EXT
 0x0002

	)

333 
	#GL_MAP_INVALIDATE_RANGE_BIT_EXT
 0x0004

	)

334 
	#GL_MAP_INVALIDATE_BUFFER_BIT_EXT
 0x0008

	)

335 
	#GL_MAP_FLUSH_EXPLICIT_BIT_EXT
 0x0010

	)

336 
	#GL_MAP_UNSYNCHRONIZED_BIT_EXT
 0x0020

	)

340 #i‚de‡
GL_EXT_mu…ißm∂ed_ªndî_to_ãxtuª


341 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT
 0x8D6C

	)

343 
	#GL_RENDERBUFFER_SAMPLES_EXT
 0x8CAB

	)

344 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
 0x8D56

	)

345 
	#GL_MAX_SAMPLES_EXT
 0x8D57

	)

352 #i‚de‡
GL_EXT_ªad_f‹m©_bgø


353 
	#GL_BGRA_EXT
 0x80E1

	)

354 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT
 0x8365

	)

355 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT
 0x8366

	)

359 #i‚de‡
GL_EXT_robu°√ss


361 
	#GL_GUILTY_CONTEXT_RESET_EXT
 0x8253

	)

362 
	#GL_INNOCENT_CONTEXT_RESET_EXT
 0x8254

	)

363 
	#GL_UNKNOWN_CONTEXT_RESET_EXT
 0x8255

	)

364 
	#GL_CONTEXT_ROBUST_ACCESS_EXT
 0x90F3

	)

365 
	#GL_RESET_NOTIFICATION_STRATEGY_EXT
 0x8256

	)

366 
	#GL_LOSE_CONTEXT_ON_RESET_EXT
 0x8252

	)

367 
	#GL_NO_RESET_NOTIFICATION_EXT
 0x8261

	)

371 #i‚de‡
GL_EXT_sRGB


372 
	#GL_SRGB_EXT
 0x8C40

	)

373 
	#GL_SRGB_ALPHA_EXT
 0x8C42

	)

374 
	#GL_SRGB8_ALPHA8_EXT
 0x8C43

	)

375 
	#GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT
 0x8210

	)

379 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_dxt1


380 
	#GL_COMPRESSED_RGB_S3TC_DXT1_EXT
 0x83F0

	)

381 
	#GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
 0x83F1

	)

385 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


386 
	#GL_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FE

	)

387 
	#GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FF

	)

391 #i‚de‡
GL_EXT_ãxtuª_f‹m©_BGRA8888


392 
	#GL_BGRA_EXT
 0x80E1

	)

396 #i‚de‡
GL_EXT_ãxtuª_lod_büs


397 
	#GL_MAX_TEXTURE_LOD_BIAS_EXT
 0x84FD

	)

398 
	#GL_TEXTURE_FILTER_CONTROL_EXT
 0x8500

	)

399 
	#GL_TEXTURE_LOD_BIAS_EXT
 0x8501

	)

403 #i‚de‡
GL_EXT_ãxtuª_°‹age


404 
	#GL_TEXTURE_IMMUTABLE_FORMAT_EXT
 0x912F

	)

405 
	#GL_ALPHA8_EXT
 0x803C

	)

406 
	#GL_LUMINANCE8_EXT
 0x8040

	)

407 
	#GL_LUMINANCE8_ALPHA8_EXT
 0x8045

	)

408 
	#GL_RGBA32F_EXT
 0x8814

	)

409 
	#GL_RGB32F_EXT
 0x8815

	)

410 
	#GL_ALPHA32F_EXT
 0x8816

	)

411 
	#GL_LUMINANCE32F_EXT
 0x8818

	)

412 
	#GL_LUMINANCE_ALPHA32F_EXT
 0x8819

	)

414 
	#GL_RGB16F_EXT
 0x881B

	)

415 
	#GL_ALPHA16F_EXT
 0x881C

	)

416 
	#GL_LUMINANCE16F_EXT
 0x881E

	)

417 
	#GL_LUMINANCE_ALPHA16F_EXT
 0x881F

	)

418 
	#GL_RGB10_A2_EXT
 0x8059

	)

419 
	#GL_RGB10_EXT
 0x8052

	)

420 
	#GL_BGRA8_EXT
 0x93A1

	)

428 #i‚de‡
GL_IMG_ªad_f‹m©


429 
	#GL_BGRA_IMG
 0x80E1

	)

430 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG
 0x8365

	)

434 #i‚de‡
GL_IMG_ãxtuª_com¥essi⁄_pvπc


435 
	#GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG
 0x8C00

	)

436 
	#GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG
 0x8C01

	)

437 
	#GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG
 0x8C02

	)

438 
	#GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
 0x8C03

	)

442 #i‚de‡
GL_IMG_ãxtuª_ív_íh™˚d_fixed_fun˘i⁄


443 
	#GL_MODULATE_COLOR_IMG
 0x8C04

	)

444 
	#GL_RECIP_ADD_SIGNED_ALPHA_IMG
 0x8C05

	)

445 
	#GL_TEXTURE_ALPHA_MODULATE_IMG
 0x8C06

	)

446 
	#GL_FACTOR_ALPHA_MODULATE_IMG
 0x8C07

	)

447 
	#GL_FRAGMENT_ALPHA_MODULATE_IMG
 0x8C08

	)

448 
	#GL_ADD_BLEND_IMG
 0x8C09

	)

449 
	#GL_DOT3_RGBA_IMG
 0x86AF

	)

453 #i‚de‡
GL_IMG_u£r_˛ù_∂™e


454 
	#GL_CLIP_PLANE0_IMG
 0x3000

	)

455 
	#GL_CLIP_PLANE1_IMG
 0x3001

	)

456 
	#GL_CLIP_PLANE2_IMG
 0x3002

	)

457 
	#GL_CLIP_PLANE3_IMG
 0x3003

	)

458 
	#GL_CLIP_PLANE4_IMG
 0x3004

	)

459 
	#GL_CLIP_PLANE5_IMG
 0x3005

	)

460 
	#GL_MAX_CLIP_PLANES_IMG
 0x0D32

	)

464 #i‚de‡
GL_IMG_mu…ißm∂ed_ªndî_to_ãxtuª


465 
	#GL_RENDERBUFFER_SAMPLES_IMG
 0x9133

	)

466 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG
 0x9134

	)

467 
	#GL_MAX_SAMPLES_IMG
 0x9135

	)

468 
	#GL_TEXTURE_SAMPLES_IMG
 0x9136

	)

476 #i‚de‡
GL_NV_„n˚


477 
	#GL_ALL_COMPLETED_NV
 0x84F2

	)

478 
	#GL_FENCE_STATUS_NV
 0x84F3

	)

479 
	#GL_FENCE_CONDITION_NV
 0x84F4

	)

490 #i‚de‡
GL_QCOM_exãnded_gë


491 
	#GL_TEXTURE_WIDTH_QCOM
 0x8BD2

	)

492 
	#GL_TEXTURE_HEIGHT_QCOM
 0x8BD3

	)

493 
	#GL_TEXTURE_DEPTH_QCOM
 0x8BD4

	)

494 
	#GL_TEXTURE_INTERNAL_FORMAT_QCOM
 0x8BD5

	)

495 
	#GL_TEXTURE_FORMAT_QCOM
 0x8BD6

	)

496 
	#GL_TEXTURE_TYPE_QCOM
 0x8BD7

	)

497 
	#GL_TEXTURE_IMAGE_VALID_QCOM
 0x8BD8

	)

498 
	#GL_TEXTURE_NUM_LEVELS_QCOM
 0x8BD9

	)

499 
	#GL_TEXTURE_TARGET_QCOM
 0x8BDA

	)

500 
	#GL_TEXTURE_OBJECT_VALID_QCOM
 0x8BDB

	)

501 
	#GL_STATE_RESTORE
 0x8BDC

	)

508 #i‚de‡
GL_QCOM_≥rfm⁄_globÆ_mode


509 
	#GL_PERFMON_GLOBAL_MODE_QCOM
 0x8FA0

	)

513 #i‚de‡
GL_QCOM_wrôe⁄ly_ªndîög


514 
	#GL_WRITEONLY_RENDERING_QCOM
 0x8823

	)

518 #i‚de‡
GL_QCOM_tûed_ªndîög


519 
	#GL_COLOR_BUFFER_BIT0_QCOM
 0x00000001

	)

520 
	#GL_COLOR_BUFFER_BIT1_QCOM
 0x00000002

	)

521 
	#GL_COLOR_BUFFER_BIT2_QCOM
 0x00000004

	)

522 
	#GL_COLOR_BUFFER_BIT3_QCOM
 0x00000008

	)

523 
	#GL_COLOR_BUFFER_BIT4_QCOM
 0x00000010

	)

524 
	#GL_COLOR_BUFFER_BIT5_QCOM
 0x00000020

	)

525 
	#GL_COLOR_BUFFER_BIT6_QCOM
 0x00000040

	)

526 
	#GL_COLOR_BUFFER_BIT7_QCOM
 0x00000080

	)

527 
	#GL_DEPTH_BUFFER_BIT0_QCOM
 0x00000100

	)

528 
	#GL_DEPTH_BUFFER_BIT1_QCOM
 0x00000200

	)

529 
	#GL_DEPTH_BUFFER_BIT2_QCOM
 0x00000400

	)

530 
	#GL_DEPTH_BUFFER_BIT3_QCOM
 0x00000800

	)

531 
	#GL_DEPTH_BUFFER_BIT4_QCOM
 0x00001000

	)

532 
	#GL_DEPTH_BUFFER_BIT5_QCOM
 0x00002000

	)

533 
	#GL_DEPTH_BUFFER_BIT6_QCOM
 0x00004000

	)

534 
	#GL_DEPTH_BUFFER_BIT7_QCOM
 0x00008000

	)

535 
	#GL_STENCIL_BUFFER_BIT0_QCOM
 0x00010000

	)

536 
	#GL_STENCIL_BUFFER_BIT1_QCOM
 0x00020000

	)

537 
	#GL_STENCIL_BUFFER_BIT2_QCOM
 0x00040000

	)

538 
	#GL_STENCIL_BUFFER_BIT3_QCOM
 0x00080000

	)

539 
	#GL_STENCIL_BUFFER_BIT4_QCOM
 0x00100000

	)

540 
	#GL_STENCIL_BUFFER_BIT5_QCOM
 0x00200000

	)

541 
	#GL_STENCIL_BUFFER_BIT6_QCOM
 0x00400000

	)

542 
	#GL_STENCIL_BUFFER_BIT7_QCOM
 0x00800000

	)

543 
	#GL_MULTISAMPLE_BUFFER_BIT0_QCOM
 0x01000000

	)

544 
	#GL_MULTISAMPLE_BUFFER_BIT1_QCOM
 0x02000000

	)

545 
	#GL_MULTISAMPLE_BUFFER_BIT2_QCOM
 0x04000000

	)

546 
	#GL_MULTISAMPLE_BUFFER_BIT3_QCOM
 0x08000000

	)

547 
	#GL_MULTISAMPLE_BUFFER_BIT4_QCOM
 0x10000000

	)

548 
	#GL_MULTISAMPLE_BUFFER_BIT5_QCOM
 0x20000000

	)

549 
	#GL_MULTISAMPLE_BUFFER_BIT6_QCOM
 0x40000000

	)

550 
	#GL_MULTISAMPLE_BUFFER_BIT7_QCOM
 0x80000000

	)

562 #i‚de‡
GL_OES_bÀnd_equ©i⁄_£∑øã


563 
	#GL_OES_bÀnd_equ©i⁄_£∑øã
 1

	)

564 #ifde‡
GL_GLEXT_PROTOTYPES


565 
GL_API
 
GL_APIENTRY
 
glBÀndEqu©i⁄Sï¨©eOES
 (
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

567 (
	tGL_APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEOESPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

571 #i‚de‡
GL_OES_bÀnd_func_£∑øã


572 
	#GL_OES_bÀnd_func_£∑øã
 1

	)

573 #ifde‡
GL_GLEXT_PROTOTYPES


574 
GL_API
 
GL_APIENTRY
 
	`glBÀndFuncSï¨©eOES
 (
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

576 (
	tGL_APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEOESPROC
Ë(
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

580 #i‚de‡
GL_OES_bÀnd_subåa˘


581 
	#GL_OES_bÀnd_subåa˘
 1

	)

582 #ifde‡
GL_GLEXT_PROTOTYPES


583 
GL_API
 
GL_APIENTRY
 
	`glBÀndEqu©i⁄OES
 (
GLíum
 
mode
);

585 (
	tGL_APIENTRYP
 
	tPFNGLBLENDEQUATIONOESPROC
Ë(
	tGLíum
 
	tmode
);

589 #i‚de‡
GL_OES_byã_co‹dö©es


590 
	#GL_OES_byã_co‹dö©es
 1

	)

594 #i‚de‡
GL_OES_com¥es£d_ETC1_RGB8_ãxtuª


595 
	#GL_OES_com¥es£d_ETC1_RGB8_ãxtuª
 1

	)

599 #i‚de‡
GL_OES_dïth24


600 
	#GL_OES_dïth24
 1

	)

604 #i‚de‡
GL_OES_dïth32


605 
	#GL_OES_dïth32
 1

	)

609 #i‚de‡
GL_OES_døw_ãxtuª


610 
	#GL_OES_døw_ãxtuª
 1

	)

611 #ifde‡
GL_GLEXT_PROTOTYPES


612 
GL_API
 
GL_APIENTRY
 
	`glDøwTexsOES
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
width
, GLsh‹à
height
);

613 
GL_API
 
GL_APIENTRY
 
	`glDøwTexiOES
 (
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
width
, GLöà
height
);

614 
GL_API
 
GL_APIENTRY
 
	`glDøwTexxOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
, GLfixed 
width
, GLfixed 
height
);

615 
GL_API
 
GL_APIENTRY
 
	`glDøwTexsvOES
 (c⁄° 
GLsh‹t
 *
co‹ds
);

616 
GL_API
 
GL_APIENTRY
 
	`glDøwTexivOES
 (c⁄° 
GLöt
 *
co‹ds
);

617 
GL_API
 
GL_APIENTRY
 
	`glDøwTexxvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

618 
GL_API
 
GL_APIENTRY
 
	`glDøwTexfOES
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
width
, GLÊﬂà
height
);

619 
GL_API
 
GL_APIENTRY
 
	`glDøwTexfvOES
 (c⁄° 
GLÊﬂt
 *
co‹ds
);

621 (
	tGL_APIENTRYP
 
	tPFNGLDRAWTEXSOESPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	twidth
, GLsh‹à
	theight
);

622 (
	tGL_APIENTRYP
 
	tPFNGLDRAWTEXIOESPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	twidth
, GLöà
	theight
);

623 (
	tGL_APIENTRYP
 
	tPFNGLDRAWTEXXOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
, GLfixed 
	twidth
, GLfixed 
	theight
);

624 (
	tGL_APIENTRYP
 
	tPFNGLDRAWTEXSVOESPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

625 (
	tGL_APIENTRYP
 
	tPFNGLDRAWTEXIVOESPROC
Ë(c⁄° 
	tGLöt
 *
	tco‹ds
);

626 (
	tGL_APIENTRYP
 
	tPFNGLDRAWTEXXVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

627 (
	tGL_APIENTRYP
 
	tPFNGLDRAWTEXFOESPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	twidth
, GLÊﬂà
	theight
);

628 (
	tGL_APIENTRYP
 
	tPFNGLDRAWTEXFVOESPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

632 #i‚de‡
GL_OES_EGL_image


633 
	#GL_OES_EGL_image
 1

	)

634 #ifde‡
GL_GLEXT_PROTOTYPES


635 
GL_API
 
GL_APIENTRY
 
	`glEGLImageT¨gëTextuª2DOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

636 
GL_API
 
GL_APIENTRY
 
	`glEGLImageT¨gëRídîbuf„rSt‹ageOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

638 (
	tGL_APIENTRYP
 
	tPFNGLEGLIMAGETARGETTEXTURE2DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

639 (
	tGL_APIENTRYP
 
	tPFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

643 #i‚de‡
GL_OES_EGL_image_exã∫Æ


644 
	#GL_OES_EGL_image_exã∫Æ
 1

	)

649 #i‚de‡
GL_OES_ñemít_ödex_uöt


650 
	#GL_OES_ñemít_ödex_uöt
 1

	)

654 #i‚de‡
GL_OES_exãnded_m©rix_∑Àâe


655 
	#GL_OES_exãnded_m©rix_∑Àâe
 1

	)

659 #i‚de‡
GL_OES_fbo_ªndî_mùm≠


660 
	#GL_OES_fbo_ªndî_mùm≠
 1

	)

664 #i‚de‡
GL_OES_fixed_poöt


665 
	#GL_OES_fixed_poöt
 1

	)

666 #ifde‡
GL_GLEXT_PROTOTYPES


667 
GL_API
 
GL_APIENTRY
 
	`glAÕhaFuncxOES
 (
GLíum
 
func
, 
GL˛ampx
 
ªf
);

668 
GL_API
 
GL_APIENTRY
 
	`glCÀ¨Cﬁ‹xOES
 (
GL˛ampx
 
ªd
, GL˛ampx 
gªí
, GL˛ampx 
blue
, GL˛ampx 
Æpha
);

669 
GL_API
 
GL_APIENTRY
 
	`glCÀ¨DïthxOES
 (
GL˛ampx
 
dïth
);

670 
GL_API
 
GL_APIENTRY
 
	`glClùPœ√xOES
 (
GLíum
 
∂™e
, c⁄° 
GLfixed
 *
equ©i⁄
);

671 
GL_API
 
GL_APIENTRY
 
	`glCﬁ‹4xOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

672 
GL_API
 
GL_APIENTRY
 
	`glDïthR™gexOES
 (
GL˛ampx
 
zNór
, GL˛ampx 
zF¨
);

673 
GL_API
 
GL_APIENTRY
 
	`glFogxOES
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

674 
GL_API
 
GL_APIENTRY
 
	`glFogxvOES
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

675 
GL_API
 
GL_APIENTRY
 
	`glFru°umxOES
 (
GLfixed
 
À·
, GLfixed 
right
, GLfixed 
bŸtom
, GLfixed 
t›
, GLfixed 
zNór
, GLfixed 
zF¨
);

676 
GL_API
 
GL_APIENTRY
 
	`glGëClùPœ√xOES
 (
GLíum
 
≤ame
, 
GLfixed
 
eqn
[4]);

677 
GL_API
 
GL_APIENTRY
 
	`glGëFixedvOES
 (
GLíum
 
≤ame
, 
GLfixed
 *
∑øms
);

678 
GL_API
 
GL_APIENTRY
 
	`glGëLightxvOES
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

679 
GL_API
 
GL_APIENTRY
 
	`glGëM©îülxvOES
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

680 
GL_API
 
GL_APIENTRY
 
	`glGëTexEnvxvOES
 (
GLíum
 
ív
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

681 
GL_API
 
GL_APIENTRY
 
	`glGëTexP¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

682 
GL_API
 
GL_APIENTRY
 
	`glLightModñxOES
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

683 
GL_API
 
GL_APIENTRY
 
	`glLightModñxvOES
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

684 
GL_API
 
GL_APIENTRY
 
	`glLightxOES
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

685 
GL_API
 
GL_APIENTRY
 
	`glLightxvOES
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

686 
GL_API
 
GL_APIENTRY
 
	`glLöeWidthxOES
 (
GLfixed
 
width
);

687 
GL_API
 
GL_APIENTRY
 
	`glLﬂdM©rixxOES
 (c⁄° 
GLfixed
 *
m
);

688 
GL_API
 
GL_APIENTRY
 
	`glM©îülxOES
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

689 
GL_API
 
GL_APIENTRY
 
	`glM©îülxvOES
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

690 
GL_API
 
GL_APIENTRY
 
	`glMu…M©rixxOES
 (c⁄° 
GLfixed
 *
m
);

691 
GL_API
 
GL_APIENTRY
 
	`glMu…iTexCo‹d4xOES
 (
GLíum
 
èrgë
, 
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
, GLfixed 
q
);

692 
GL_API
 
GL_APIENTRY
 
	`glN‹mÆ3xOES
 (
GLfixed
 
nx
, GLfixed 
ny
, GLfixed 
nz
);

693 
GL_API
 
GL_APIENTRY
 
	`glOπhoxOES
 (
GLfixed
 
À·
, GLfixed 
right
, GLfixed 
bŸtom
, GLfixed 
t›
, GLfixed 
zNór
, GLfixed 
zF¨
);

694 
GL_API
 
GL_APIENTRY
 
	`glPoötP¨amëîxOES
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

695 
GL_API
 
GL_APIENTRY
 
	`glPoötP¨amëîxvOES
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

696 
GL_API
 
GL_APIENTRY
 
	`glPoötSizexOES
 (
GLfixed
 
size
);

697 
GL_API
 
GL_APIENTRY
 
	`glPﬁyg⁄Off£txOES
 (
GLfixed
 
Á˘‹
, GLfixed 
unôs
);

698 
GL_API
 
GL_APIENTRY
 
	`glRŸ©exOES
 (
GLfixed
 
™gÀ
, GLfixed 
x
, GLfixed 
y
, GLfixed 
z
);

699 
GL_API
 
GL_APIENTRY
 
	`glSam∂eCovîagexOES
 (
GL˛ampx
 
vÆue
, 
GLboﬁón
 
övît
);

700 
GL_API
 
GL_APIENTRY
 
	`glSˇÀxOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

701 
GL_API
 
GL_APIENTRY
 
	`glTexEnvxOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

702 
GL_API
 
GL_APIENTRY
 
	`glTexEnvxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

703 
GL_API
 
GL_APIENTRY
 
	`glTexP¨amëîxOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

704 
GL_API
 
GL_APIENTRY
 
	`glTexP¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

705 
GL_API
 
GL_APIENTRY
 
	`glTøn¶©exOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

707 (
	tGL_APIENTRYP
 
	tPFNGLALPHAFUNCXOESPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGL˛ampx
 
	tªf
);

708 (
	tGL_APIENTRYP
 
	tPFNGLCLEARCOLORXOESPROC
Ë(
	tGL˛ampx
 
	tªd
, GL˛ampx 
	tgªí
, GL˛ampx 
	tblue
, GL˛ampx 
	tÆpha
);

709 (
	tGL_APIENTRYP
 
	tPFNGLCLEARDEPTHXOESPROC
Ë(
	tGL˛ampx
 
	tdïth
);

710 (
	tGL_APIENTRYP
 
	tPFNGLCLIPPLANEXOESPROC
Ë(
	tGLíum
 
	t∂™e
, c⁄° 
	tGLfixed
 *
	tequ©i⁄
);

711 (
	tGL_APIENTRYP
 
	tPFNGLCOLOR4XOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
, GLfixed 
	tÆpha
);

712 (
	tGL_APIENTRYP
 
	tPFNGLDEPTHRANGEXOESPROC
Ë(
	tGL˛ampx
 
	tzNór
, GL˛ampx 
	tzF¨
);

713 (
	tGL_APIENTRYP
 
	tPFNGLFOGXOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

714 (
	tGL_APIENTRYP
 
	tPFNGLFOGXVOESPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

715 (
	tGL_APIENTRYP
 
	tPFNGLFRUSTUMXOESPROC
Ë(
	tGLfixed
 
	tÀ·
, GLfixed 
	tright
, GLfixed 
	tbŸtom
, GLfixed 
	tt›
, GLfixed 
	tzNór
, GLfixed 
	tzF¨
);

716 (
	tGL_APIENTRYP
 
	tPFNGLGETCLIPPLANEXOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	teqn
[4]);

717 (
	tGL_APIENTRYP
 
	tPFNGLGETFIXEDVOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

718 (
	tGL_APIENTRYP
 
	tPFNGLGETLIGHTXVOESPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

719 (
	tGL_APIENTRYP
 
	tPFNGLGETMATERIALXVOESPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

720 (
	tGL_APIENTRYP
 
	tPFNGLGETTEXENVXVOESPROC
Ë(
	tGLíum
 
	tív
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

721 (
	tGL_APIENTRYP
 
	tPFNGLGETTEXPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

722 (
	tGL_APIENTRYP
 
	tPFNGLLIGHTMODELXOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

723 (
	tGL_APIENTRYP
 
	tPFNGLLIGHTMODELXVOESPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

724 (
	tGL_APIENTRYP
 
	tPFNGLLIGHTXOESPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

725 (
	tGL_APIENTRYP
 
	tPFNGLLIGHTXVOESPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

726 (
	tGL_APIENTRYP
 
	tPFNGLLINEWIDTHXOESPROC
Ë(
	tGLfixed
 
	twidth
);

727 (
	tGL_APIENTRYP
 
	tPFNGLLOADMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

728 (
	tGL_APIENTRYP
 
	tPFNGLMATERIALXOESPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

729 (
	tGL_APIENTRYP
 
	tPFNGLMATERIALXVOESPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

730 (
	tGL_APIENTRYP
 
	tPFNGLMULTMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

731 (
	tGL_APIENTRYP
 
	tPFNGLMULTITEXCOORD4XOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLfixed
 
	ts
, GLfixed 
	tt
, GLfixed 
	tr
, GLfixed 
	tq
);

732 (
	tGL_APIENTRYP
 
	tPFNGLNORMAL3XOESPROC
Ë(
	tGLfixed
 
	tnx
, GLfixed 
	tny
, GLfixed 
	tnz
);

733 (
	tGL_APIENTRYP
 
	tPFNGLORTHOXOESPROC
Ë(
	tGLfixed
 
	tÀ·
, GLfixed 
	tright
, GLfixed 
	tbŸtom
, GLfixed 
	tt›
, GLfixed 
	tzNór
, GLfixed 
	tzF¨
);

734 (
	tGL_APIENTRYP
 
	tPFNGLPOINTPARAMETERXOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

735 (
	tGL_APIENTRYP
 
	tPFNGLPOINTPARAMETERXVOESPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

736 (
	tGL_APIENTRYP
 
	tPFNGLPOINTSIZEXOESPROC
Ë(
	tGLfixed
 
	tsize
);

737 (
	tGL_APIENTRYP
 
	tPFNGLPOLYGONOFFSETXOESPROC
Ë(
	tGLfixed
 
	tÁ˘‹
, GLfixed 
	tunôs
);

738 (
	tGL_APIENTRYP
 
	tPFNGLROTATEXOESPROC
Ë(
	tGLfixed
 
	t™gÀ
, GLfixed 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

739 (
	tGL_APIENTRYP
 
	tPFNGLSAMPLECOVERAGEXOESPROC
Ë(
	tGL˛ampx
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

740 (
	tGL_APIENTRYP
 
	tPFNGLSCALEXOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

741 (
	tGL_APIENTRYP
 
	tPFNGLTEXENVXOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

742 (
	tGL_APIENTRYP
 
	tPFNGLTEXENVXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

743 (
	tGL_APIENTRYP
 
	tPFNGLTEXPARAMETERXOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

744 (
	tGL_APIENTRYP
 
	tPFNGLTEXPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

745 (
	tGL_APIENTRYP
 
	tPFNGLTRANSLATEXOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

749 #i‚de‡
GL_OES_‰amebuf„r_obje˘


750 
	#GL_OES_‰amebuf„r_obje˘
 1

	)

751 #ifde‡
GL_GLEXT_PROTOTYPES


752 
GL_API
 
GLboﬁón
 
GL_APIENTRY
 
	`glIsRídîbuf„rOES
 (
GLuöt
 
ªndîbuf„r
);

753 
GL_API
 
GL_APIENTRY
 
	`glBödRídîbuf„rOES
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

754 
GL_API
 
GL_APIENTRY
 
	`glDñëeRídîbuf„rsOES
 (
GLsizei
 
n
, c⁄° 
GLuöt
* 
ªndîbuf„rs
);

755 
GL_API
 
GL_APIENTRY
 
	`glGíRídîbuf„rsOES
 (
GLsizei
 
n
, 
GLuöt
* 
ªndîbuf„rs
);

756 
GL_API
 
GL_APIENTRY
 
	`glRídîbuf„rSt‹ageOES
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

757 
GL_API
 
GL_APIENTRY
 
	`glGëRídîbuf„rP¨amëîivOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
* 
∑øms
);

758 
GL_API
 
GLboﬁón
 
GL_APIENTRY
 
	`glIsFømebuf„rOES
 (
GLuöt
 
‰amebuf„r
);

759 
GL_API
 
GL_APIENTRY
 
	`glBödFømebuf„rOES
 (
GLíum
 
èrgë
, 
GLuöt
 
‰amebuf„r
);

760 
GL_API
 
GL_APIENTRY
 
	`glDñëeFømebuf„rsOES
 (
GLsizei
 
n
, c⁄° 
GLuöt
* 
‰amebuf„rs
);

761 
GL_API
 
GL_APIENTRY
 
	`glGíFømebuf„rsOES
 (
GLsizei
 
n
, 
GLuöt
* 
‰amebuf„rs
);

762 
GL_API
 
GLíum
 
GL_APIENTRY
 
	`glCheckFømebuf„rSètusOES
 (GLíum 
èrgë
);

763 
GL_API
 
GL_APIENTRY
 
	`glFømebuf„rRídîbuf„rOES
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, 
GLuöt
 
ªndîbuf„r
);

764 
GL_API
 
GL_APIENTRY
 
	`glFømebuf„rTextuª2DOES
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

765 
GL_API
 
GL_APIENTRY
 
	`glGëFømebuf„rAâachmítP¨amëîivOES
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
≤ame
, 
GLöt
* 
∑øms
);

766 
GL_API
 
GL_APIENTRY
 
	`glGíî©eMùm≠OES
 (
GLíum
 
èrgë
);

768 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLISRENDERBUFFEROESPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

769 (
	tGL_APIENTRYP
 
	tPFNGLBINDRENDERBUFFEROESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

770 (
	tGL_APIENTRYP
 
	tPFNGLDELETERENDERBUFFERSOESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tªndîbuf„rs
);

771 (
	tGL_APIENTRYP
 
	tPFNGLGENRENDERBUFFERSOESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tªndîbuf„rs
);

772 (
	tGL_APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

773 (
	tGL_APIENTRYP
 
	tPFNGLGETRENDERBUFFERPARAMETERIVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

774 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLISFRAMEBUFFEROESPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

775 (
	tGL_APIENTRYP
 
	tPFNGLBINDFRAMEBUFFEROESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

776 (
	tGL_APIENTRYP
 
	tPFNGLDELETEFRAMEBUFFERSOESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	t‰amebuf„rs
);

777 (
	tGL_APIENTRYP
 
	tPFNGLGENFRAMEBUFFERSOESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	t‰amebuf„rs
);

778 
	$GLíum
 (
	tGL_APIENTRYP
 
	tPFNGLCHECKFRAMEBUFFERSTATUSOESPROC
Ë(
	tGLíum
 
	tèrgë
);

779 (
	tGL_APIENTRYP
 
	tPFNGLFRAMEBUFFERRENDERBUFFEROESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

780 (
	tGL_APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

781 (
	tGL_APIENTRYP
 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

782 (
	tGL_APIENTRYP
 
	tPFNGLGENERATEMIPMAPOESPROC
Ë(
	tGLíum
 
	tèrgë
);

786 #i‚de‡
GL_OES_m≠buf„r


787 
	#GL_OES_m≠buf„r
 1

	)

788 #ifde‡
GL_GLEXT_PROTOTYPES


789 
GL_API
 * 
GL_APIENTRY
 
	`glM≠Buf„rOES
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

790 
GL_API
 
GLboﬁón
 
GL_APIENTRY
 
	`glUnm≠Buf„rOES
 (
GLíum
 
èrgë
);

791 
GL_API
 
GL_APIENTRY
 
	`glGëBuf„rPoöãrvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLvoid
 ** 
∑øms
);

793 * (
	tGL_APIENTRYP
 
	tPFNGLMAPBUFFEROESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

794 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLUNMAPBUFFEROESPROC
Ë(
	tGLíum
 
	tèrgë
);

795 (
	tGL_APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
 ** 
	t∑øms
);

799 #i‚de‡
GL_OES_m©rix_gë


800 
	#GL_OES_m©rix_gë
 1

	)

804 #i‚de‡
GL_OES_m©rix_∑Àâe


805 
	#GL_OES_m©rix_∑Àâe
 1

	)

806 #ifde‡
GL_GLEXT_PROTOTYPES


807 
GL_API
 
GL_APIENTRY
 
	`glCuºítPÆëãM©rixOES
 (
GLuöt
 
m©rix∑Àâeödex
);

808 
GL_API
 
GL_APIENTRY
 
	`glLﬂdPÆëãFromModñVõwM©rixOES
 ();

809 
GL_API
 
GL_APIENTRY
 
	`glM©rixIndexPoöãrOES
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

810 
GL_API
 
GL_APIENTRY
 
	`glWeightPoöãrOES
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

812 (
	tGL_APIENTRYP
 
	tPFNGLCURRENTPALETTEMATRIXOESPROC
Ë(
	tGLuöt
 
	tm©rix∑Àâeödex
);

813 (
	tGL_APIENTRYP
 
	tPFNGLLOADPALETTEFROMMODELVIEWMATRIXOESPROC
) ();

814 (
	tGL_APIENTRYP
 
	tPFNGLMATRIXINDEXPOINTEROESPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

815 (
	tGL_APIENTRYP
 
	tPFNGLWEIGHTPOINTEROESPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

819 #i‚de‡
GL_OES_∑cked_dïth_°ícû


820 
	#GL_OES_∑cked_dïth_°ícû
 1

	)

824 #i‚de‡
GL_OES_ªquúed_öã∫Æf‹m©


825 
	#GL_OES_ªquúed_öã∫Æf‹m©
 1

	)

829 #i‚de‡
GL_OES_quîy_m©rix


830 
	#GL_OES_quîy_m©rix
 1

	)

831 #ifde‡
GL_GLEXT_PROTOTYPES


832 
GL_API
 
GLbôfõld
 
GL_APIENTRY
 
	`glQuîyM©rixxOES
 (
GLfixed
 
m™tisß
[16], 
GLöt
 
exp⁄ít
[16]);

834 
	$GLbôfõld
 (
	tGL_APIENTRYP
 
	tPFNGLQUERYMATRIXXOESPROC
Ë(
	tGLfixed
 
	tm™tisß
[16], 
	tGLöt
 
	texp⁄ít
[16]);

838 #i‚de‡
GL_OES_rgb8_rgba8


839 
	#GL_OES_rgb8_rgba8
 1

	)

843 #i‚de‡
GL_OES_sögÀ_¥ecisi⁄


844 
	#GL_OES_sögÀ_¥ecisi⁄
 1

	)

845 #ifde‡
GL_GLEXT_PROTOTYPES


846 
GL_API
 
GL_APIENTRY
 
	`glDïthR™gefOES
 (
GL˛ampf
 
zNór
, GL˛amp‡
zF¨
);

847 
GL_API
 
GL_APIENTRY
 
	`glFru°umfOES
 (
GLÊﬂt
 
À·
, GLÊﬂà
right
, GLÊﬂà
bŸtom
, GLÊﬂà
t›
, GLÊﬂà
zNór
, GLÊﬂà
zF¨
);

848 
GL_API
 
GL_APIENTRY
 
	`glOπhofOES
 (
GLÊﬂt
 
À·
, GLÊﬂà
right
, GLÊﬂà
bŸtom
, GLÊﬂà
t›
, GLÊﬂà
zNór
, GLÊﬂà
zF¨
);

849 
GL_API
 
GL_APIENTRY
 
	`glClùPœ√fOES
 (
GLíum
 
∂™e
, c⁄° 
GLÊﬂt
 *
equ©i⁄
);

850 
GL_API
 
GL_APIENTRY
 
	`glGëClùPœ√fOES
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
eqn
[4]);

851 
GL_API
 
GL_APIENTRY
 
	`glCÀ¨DïthfOES
 (
GL˛ampf
 
dïth
);

853 (
	tGL_APIENTRYP
 
	tPFNGLDEPTHRANGEFOESPROC
Ë(
	tGL˛ampf
 
	tzNór
, GL˛amp‡
	tzF¨
);

854 (
	tGL_APIENTRYP
 
	tPFNGLFRUSTUMFOESPROC
Ë(
	tGLÊﬂt
 
	tÀ·
, GLÊﬂà
	tright
, GLÊﬂà
	tbŸtom
, GLÊﬂà
	tt›
, GLÊﬂà
	tzNór
, GLÊﬂà
	tzF¨
);

855 (
	tGL_APIENTRYP
 
	tPFNGLORTHOFOESPROC
Ë(
	tGLÊﬂt
 
	tÀ·
, GLÊﬂà
	tright
, GLÊﬂà
	tbŸtom
, GLÊﬂà
	tt›
, GLÊﬂà
	tzNór
, GLÊﬂà
	tzF¨
);

856 (
	tGL_APIENTRYP
 
	tPFNGLCLIPPLANEFOESPROC
Ë(
	tGLíum
 
	t∂™e
, c⁄° 
	tGLÊﬂt
 *
	tequ©i⁄
);

857 (
	tGL_APIENTRYP
 
	tPFNGLGETCLIPPLANEFOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	teqn
[4]);

858 (
	tGL_APIENTRYP
 
	tPFNGLCLEARDEPTHFOESPROC
Ë(
	tGL˛ampf
 
	tdïth
);

862 #i‚de‡
GL_OES_°ícû1


863 
	#GL_OES_°ícû1
 1

	)

867 #i‚de‡
GL_OES_°ícû4


868 
	#GL_OES_°ícû4
 1

	)

872 #i‚de‡
GL_OES_°ícû8


873 
	#GL_OES_°ícû8
 1

	)

877 #i‚de‡
GL_OES_°ícû_wøp


878 
	#GL_OES_°ícû_wøp
 1

	)

882 #i‚de‡
GL_OES_ãxtuª_cube_m≠


883 
	#GL_OES_ãxtuª_cube_m≠
 1

	)

884 #ifde‡
GL_GLEXT_PROTOTYPES


885 
GL_API
 
GL_APIENTRY
 
	`glTexGífOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

886 
GL_API
 
GL_APIENTRY
 
	`glTexGífvOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

887 
GL_API
 
GL_APIENTRY
 
	`glTexGíiOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

888 
GL_API
 
GL_APIENTRY
 
	`glTexGíivOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

889 
GL_API
 
GL_APIENTRY
 
	`glTexGíxOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

890 
GL_API
 
GL_APIENTRY
 
	`glTexGíxvOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

891 
GL_API
 
GL_APIENTRY
 
	`glGëTexGífvOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

892 
GL_API
 
GL_APIENTRY
 
	`glGëTexGíivOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

893 
GL_API
 
GL_APIENTRY
 
	`glGëTexGíxvOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

895 (
	tGL_APIENTRYP
 
	tPFNGLTEXGENFOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

896 (
	tGL_APIENTRYP
 
	tPFNGLTEXGENFVOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

897 (
	tGL_APIENTRYP
 
	tPFNGLTEXGENIOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

898 (
	tGL_APIENTRYP
 
	tPFNGLTEXGENIVOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

899 (
	tGL_APIENTRYP
 
	tPFNGLTEXGENXOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

900 (
	tGL_APIENTRYP
 
	tPFNGLTEXGENXVOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

901 (
	tGL_APIENTRYP
 
	tPFNGLGETTEXGENFVOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

902 (
	tGL_APIENTRYP
 
	tPFNGLGETTEXGENIVOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

903 (
	tGL_APIENTRYP
 
	tPFNGLGETTEXGENXVOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

907 #i‚de‡
GL_OES_ãxtuª_ív_¸ossb¨


908 
	#GL_OES_ãxtuª_ív_¸ossb¨
 1

	)

912 #i‚de‡
GL_OES_ãxtuª_múr‹ed_ª≥©


913 
	#GL_OES_ãxtuª_múr‹ed_ª≥©
 1

	)

917 #i‚de‡
GL_OES_vîãx_¨øy_obje˘


918 
	#GL_OES_vîãx_¨øy_obje˘
 1

	)

919 #ifde‡
GL_GLEXT_PROTOTYPES


920 
GL_API
 
GL_APIENTRY
 
	`glBödVîãxAºayOES
 (
GLuöt
 
¨øy
);

921 
GL_API
 
GL_APIENTRY
 
	`glDñëeVîãxAºaysOES
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¨øys
);

922 
GL_API
 
GL_APIENTRY
 
	`glGíVîãxAºaysOES
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

923 
GL_API
 
GLboﬁón
 
GL_APIENTRY
 
	`glIsVîãxAºayOES
 (
GLuöt
 
¨øy
);

925 (
	tGL_APIENTRYP
 
	tPFNGLBINDVERTEXARRAYOESPROC
Ë(
	tGLuöt
 
	t¨øy
);

926 (
	tGL_APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSOESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

927 (
	tGL_APIENTRYP
 
	tPFNGLGENVERTEXARRAYSOESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

928 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLISVERTEXARRAYOESPROC
Ë(
	tGLuöt
 
	t¨øy
);

936 #i‚de‡
GL_AMD_com¥es£d_3DC_ãxtuª


937 
	#GL_AMD_com¥es£d_3DC_ãxtuª
 1

	)

941 #i‚de‡
GL_AMD_com¥es£d_ATC_ãxtuª


942 
	#GL_AMD_com¥es£d_ATC_ãxtuª
 1

	)

950 #i‚de‡
GL_APPLE_c›y_ãxtuª_Àvñs


951 
	#GL_APPLE_c›y_ãxtuª_Àvñs
 1

	)

952 #ifde‡
GL_GLEXT_PROTOTYPES


953 
GL_API
 
GL_APIENTRY
 
	`glC›yTextuªLevñsAPPLE
 (
GLuöt
 
de°ö©i⁄Textuª
, GLuöà
sour˚Textuª
, 
GLöt
 
sour˚Ba£Levñ
, 
GLsizei
 
sour˚LevñCou¡
);

955 (
	tGL_APIENTRYP
 
	tPFNGLCOPYTEXTURELEVELSAPPLEPROC
Ë(
	tGLuöt
 
	tde°ö©i⁄Textuª
, GLuöà
	tsour˚Textuª
, 
	tGLöt
 
	tsour˚Ba£Levñ
, 
	tGLsizei
 
	tsour˚LevñCou¡
);

959 #i‚de‡
GL_APPLE_‰amebuf„r_mu…ißm∂e


960 
	#GL_APPLE_‰amebuf„r_mu…ißm∂e
 1

	)

961 #ifde‡
GL_GLEXT_PROTOTYPES


962 
GL_API
 
GL_APIENTRY
 
	`glRídîbuf„rSt‹ageMu…ißm∂eAPPLE
 (
GLíum
, 
GLsizei
, GLenum, GLsizei, GLsizei);

963 
GL_API
 
GL_APIENTRY
 
	`glResﬁveMu…ißm∂eFømebuf„rAPPLE
 ();

965 (
	tGL_APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

966 (
	tGL_APIENTRYP
 
	tPFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC
) ();

970 #i‚de‡
GL_APPLE_sync


971 
	#GL_APPLE_sync
 1

	)

972 #ifde‡
GL_GLEXT_PROTOTYPES


973 
GL_API
 
GLsync
 
GL_APIENTRY
 
	`glFí˚SyncAPPLE
 (
GLíum
 
c⁄dôi⁄
, 
GLbôfõld
 
Êags
);

974 
GL_API
 
GLboﬁón
 
GL_APIENTRY
 
	`glIsSyncAPPLE
 (
GLsync
 
sync
);

975 
GL_API
 
GL_APIENTRY
 
	`glDñëeSyncAPPLE
 (
GLsync
 
sync
);

976 
GL_API
 
GLíum
 
GL_APIENTRY
 
	`glClõ¡WaôSyncAPPLE
 (
GLsync
 
sync
, 
GLbôfõld
 
Êags
, 
GLuöt64
 
timeout
);

977 
GL_API
 
GL_APIENTRY
 
	`glWaôSyncAPPLE
 (
GLsync
 
sync
, 
GLbôfõld
 
Êags
, 
GLuöt64
 
timeout
);

978 
GL_API
 
GL_APIENTRY
 
	`glGëI¡egî64vAPPLE
 (
GLíum
 
≤ame
, 
GLöt64
 *
∑øms
);

979 
GL_API
 
GL_APIENTRY
 
	`glGëSyncivAPPLE
 (
GLsync
 
sync
, 
GLíum
 
≤ame
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
vÆues
);

981 
	$GLsync
 (
	tGL_APIENTRYP
 
	tPFNGLFENCESYNCAPPLEPROC
Ë(
	tGLíum
 
	tc⁄dôi⁄
, 
	tGLbôfõld
 
	tÊags
);

982 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLISSYNCAPPLEPROC
Ë(
	tGLsync
 
	tsync
);

983 (
	tGL_APIENTRYP
 
	tPFNGLDELETESYNCAPPLEPROC
Ë(
	tGLsync
 
	tsync
);

984 
	$GLíum
 (
	tGL_APIENTRYP
 
	tPFNGLCLIENTWAITSYNCAPPLEPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLbôfõld
 
	tÊags
, 
	tGLuöt64
 
	ttimeout
);

985 (
	tGL_APIENTRYP
 
	tPFNGLWAITSYNCAPPLEPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLbôfõld
 
	tÊags
, 
	tGLuöt64
 
	ttimeout
);

986 (
	tGL_APIENTRYP
 
	tPFNGLGETINTEGER64VAPPLEPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

987 (
	tGL_APIENTRYP
 
	tPFNGLGETSYNCIVAPPLEPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tvÆues
);

991 #i‚de‡
GL_APPLE_ãxtuª_2D_limôed_≈Ÿ


992 
	#GL_APPLE_ãxtuª_2D_limôed_≈Ÿ
 1

	)

996 #i‚de‡
GL_APPLE_ãxtuª_f‹m©_BGRA8888


997 
	#GL_APPLE_ãxtuª_f‹m©_BGRA8888
 1

	)

1001 #i‚de‡
GL_APPLE_ãxtuª_max_Àvñ


1002 
	#GL_APPLE_ãxtuª_max_Àvñ
 1

	)

1010 #i‚de‡
GL_ARM_rgba8


1011 
	#GL_ARM_rgba8
 1

	)

1019 #i‚de‡
GL_EXT_bÀnd_mömax


1020 
	#GL_EXT_bÀnd_mömax
 1

	)

1024 #i‚de‡
GL_EXT_disˇrd_‰amebuf„r


1025 
	#GL_EXT_disˇrd_‰amebuf„r
 1

	)

1026 #ifde‡
GL_GLEXT_PROTOTYPES


1027 
GL_API
 
GL_APIENTRY
 
	`glDisˇrdFømebuf„rEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
numAâachmíts
, c⁄° GLíum *
©èchmíts
);

1029 (
	tGL_APIENTRYP
 
	tPFNGLDISCARDFRAMEBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum *
	t©èchmíts
);

1033 #i‚de‡
GL_EXT_m≠_buf„r_ønge


1034 
	#GL_EXT_m≠_buf„r_ønge
 1

	)

1035 #ifde‡
GL_GLEXT_PROTOTYPES


1036 
GL_API
 
GL_APIENTRY
 *
	`glM≠Buf„rR™geEXT
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
, 
GLbôfõld
 
ac˚ss
);

1037 
GL_API
 
GL_APIENTRY
 
	`glFlushM≠≥dBuf„rR™geEXT
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

1039 * (
	tGL_APIENTRYP
 
	tPFNGLMAPBUFFERRANGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

1040 (
	tGL_APIENTRYP
 
	tPFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

1044 #i‚de‡
GL_EXT_mu…ißm∂ed_ªndî_to_ãxtuª


1045 
	#GL_EXT_mu…ißm∂ed_ªndî_to_ãxtuª
 1

	)

1046 #ifde‡
GL_GLEXT_PROTOTYPES


1047 
GL_API
 
GL_APIENTRY
 
	`glRídîbuf„rSt‹ageMu…ißm∂eEXT
 (
GLíum
, 
GLsizei
, GLenum, GLsizei, GLsizei);

1048 
GL_API
 
GL_APIENTRY
 
	`glFømebuf„rTextuª2DMu…ißm∂eEXT
 (
GLíum
, GLíum, GLíum, 
GLuöt
, 
GLöt
, 
GLsizei
);

1050 (
	tGL_APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

1051 (
	tGL_APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLsizei
 
	tßm∂es
);

1055 #i‚de‡
GL_EXT_mu…i_døw_¨øys


1056 
	#GL_EXT_mu…i_døw_¨øys
 1

	)

1057 #ifde‡
GL_GLEXT_PROTOTYPES


1058 
GL_API
 
GL_APIENTRY
 
	`glMu…iDøwAºaysEXT
 (
GLíum
, c⁄° 
GLöt
 *, c⁄° 
GLsizei
 *, GLsizei);

1059 
GL_API
 
GL_APIENTRY
 
	`glMu…iDøwEÀmítsEXT
 (
GLíum
, c⁄° 
GLsizei
 *, GLíum, c⁄° 
GLvoid
* *, GLsizei);

1061 (
	tGL_APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

1062 (
	tGL_APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

1066 #i‚de‡
GL_EXT_ªad_f‹m©_bgø


1067 
	#GL_EXT_ªad_f‹m©_bgø
 1

	)

1071 #i‚de‡
GL_EXT_robu°√ss


1072 
	#GL_EXT_robu°√ss
 1

	)

1073 #ifde‡
GL_GLEXT_PROTOTYPES


1074 
GL_API
 
GLíum
 
GL_APIENTRY
 
	`glGëGøphicsRe£tSètusEXT
 ();

1075 
GL_API
 
GL_APIENTRY
 
	`glRódnPixñsEXT
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, GLsizeò
bufSize
, *
d©a
);

1076 
GL_API
 
GL_APIENTRY
 
	`glGënUnif‹mfvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, *
∑øms
);

1077 
GL_API
 
GL_APIENTRY
 
	`glGënUnif‹mivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLöà*
∑øms
);

1079 
	$GLíum
 (
	tGL_APIENTRYP
 
	tPFNGLGETGRAPHICSRESETSTATUSEXTPROC
) ();

1080 (
	tGL_APIENTRYP
 
	tPFNGLREADNPIXELSEXTPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, GLsizeò
	tbufSize
, *
	td©a
);

1081 (
	tGL_APIENTRYP
 
	tPFNGLGETNUNIFORMFVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, *
	t∑øms
);

1082 (
	tGL_APIENTRYP
 
	tPFNGLGETNUNIFORMIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t∑øms
);

1086 #i‚de‡
GL_EXT_sRGB


1087 
	#GL_EXT_sRGB
 1

	)

1091 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_dxt1


1092 
	#GL_EXT_ãxtuª_com¥essi⁄_dxt1
 1

	)

1096 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


1097 
	#GL_EXT_ãxtuª_fûãr_™isŸr›ic
 1

	)

1101 #i‚de‡
GL_EXT_ãxtuª_f‹m©_BGRA8888


1102 
	#GL_EXT_ãxtuª_f‹m©_BGRA8888
 1

	)

1106 #i‚de‡
GL_EXT_ãxtuª_lod_büs


1107 
	#GL_EXT_ãxtuª_lod_büs
 1

	)

1111 #i‚de‡
GL_EXT_ãxtuª_°‹age


1112 
	#GL_EXT_ãxtuª_°‹age
 1

	)

1113 #ifde‡
GL_GLEXT_PROTOTYPES


1114 
GL_API
 
GL_APIENTRY
 
	`glTexSt‹age1DEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
);

1115 
GL_API
 
GL_APIENTRY
 
	`glTexSt‹age2DEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

1116 
GL_API
 
GL_APIENTRY
 
	`glTexSt‹age3DEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

1117 
GL_API
 
GL_APIENTRY
 
	`glTextuªSt‹age1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
);

1118 
GL_API
 
GL_APIENTRY
 
	`glTextuªSt‹age2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

1119 
GL_API
 
GL_APIENTRY
 
	`glTextuªSt‹age3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

1121 (
	tGL_APIENTRYP
 
	tPFNGLTEXSTORAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

1122 (
	tGL_APIENTRYP
 
	tPFNGLTEXSTORAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

1123 (
	tGL_APIENTRYP
 
	tPFNGLTEXSTORAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

1124 (
	tGL_APIENTRYP
 
	tPFNGLTEXTURESTORAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

1125 (
	tGL_APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

1126 (
	tGL_APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

1134 #i‚de‡
GL_IMG_ªad_f‹m©


1135 
	#GL_IMG_ªad_f‹m©
 1

	)

1139 #i‚de‡
GL_IMG_ãxtuª_com¥essi⁄_pvπc


1140 
	#GL_IMG_ãxtuª_com¥essi⁄_pvπc
 1

	)

1144 #i‚de‡
GL_IMG_ãxtuª_ív_íh™˚d_fixed_fun˘i⁄


1145 
	#GL_IMG_ãxtuª_ív_íh™˚d_fixed_fun˘i⁄
 1

	)

1149 #i‚de‡
GL_IMG_u£r_˛ù_∂™e


1150 
	#GL_IMG_u£r_˛ù_∂™e
 1

	)

1151 #ifde‡
GL_GLEXT_PROTOTYPES


1152 
GL_API
 
GL_APIENTRY
 
	`glClùPœ√fIMG
 (
GLíum
, c⁄° 
GLÊﬂt
 *);

1153 
GL_API
 
GL_APIENTRY
 
	`glClùPœ√xIMG
 (
GLíum
, c⁄° 
GLfixed
 *);

1155 (
	tGL_APIENTRYP
 
	tPFNGLCLIPPLANEFIMGPROC
Ë(
	tGLíum
 
	tp
, c⁄° 
	tGLÊﬂt
 *
	teqn
);

1156 (
	tGL_APIENTRYP
 
	tPFNGLCLIPPLANEXIMGPROC
Ë(
	tGLíum
 
	tp
, c⁄° 
	tGLfixed
 *
	teqn
);

1160 #i‚de‡
GL_IMG_mu…ißm∂ed_ªndî_to_ãxtuª


1161 
	#GL_IMG_mu…ißm∂ed_ªndî_to_ãxtuª
 1

	)

1162 #ifde‡
GL_GLEXT_PROTOTYPES


1163 
GL_API
 
GL_APIENTRY
 
	`glRídîbuf„rSt‹ageMu…ißm∂eIMG
 (
GLíum
, 
GLsizei
, GLenum, GLsizei, GLsizei);

1164 
GL_API
 
GL_APIENTRY
 
	`glFømebuf„rTextuª2DMu…ißm∂eIMG
 (
GLíum
, GLíum, GLíum, 
GLuöt
, 
GLöt
, 
GLsizei
);

1166 (
	tGL_APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

1167 (
	tGL_APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLsizei
 
	tßm∂es
);

1175 #i‚de‡
GL_NV_„n˚


1176 
	#GL_NV_„n˚
 1

	)

1177 #ifde‡
GL_GLEXT_PROTOTYPES


1178 
GL_API
 
GL_APIENTRY
 
	`glDñëeFí˚sNV
 (
GLsizei
, c⁄° 
GLuöt
 *);

1179 
GL_API
 
GL_APIENTRY
 
	`glGíFí˚sNV
 (
GLsizei
, 
GLuöt
 *);

1180 
GL_API
 
GLboﬁón
 
GL_APIENTRY
 
	`glIsFí˚NV
 (
GLuöt
);

1181 
GL_API
 
GLboﬁón
 
GL_APIENTRY
 
	`glTe°Fí˚NV
 (
GLuöt
);

1182 
GL_API
 
GL_APIENTRY
 
	`glGëFí˚ivNV
 (
GLuöt
, 
GLíum
, 
GLöt
 *);

1183 
GL_API
 
GL_APIENTRY
 
	`glFöishFí˚NV
 (
GLuöt
);

1184 
GL_API
 
GL_APIENTRY
 
	`glSëFí˚NV
 (
GLuöt
, 
GLíum
);

1186 (
	tGL_APIENTRYP
 
	tPFNGLDELETEFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

1187 (
	tGL_APIENTRYP
 
	tPFNGLGENFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

1188 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLISFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

1189 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLTESTFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

1190 (
	tGL_APIENTRYP
 
	tPFNGLGETFENCEIVNVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1191 (
	tGL_APIENTRYP
 
	tPFNGLFINISHFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

1192 (
	tGL_APIENTRYP
 
	tPFNGLSETFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	tc⁄dôi⁄
);

1200 #i‚de‡
GL_QCOM_drivî_c⁄åﬁ


1201 
	#GL_QCOM_drivî_c⁄åﬁ
 1

	)

1202 #ifde‡
GL_GLEXT_PROTOTYPES


1203 
GL_API
 
GL_APIENTRY
 
	`glGëDrivîC⁄åﬁsQCOM
 (
GLöt
 *
num
, 
GLsizei
 
size
, 
GLuöt
 *
drivîC⁄åﬁs
);

1204 
GL_API
 
GL_APIENTRY
 
	`glGëDrivîC⁄åﬁSåögQCOM
 (
GLuöt
 
drivîC⁄åﬁ
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
drivîC⁄åﬁSåög
);

1205 
GL_API
 
GL_APIENTRY
 
	`glE«bÀDrivîC⁄åﬁQCOM
 (
GLuöt
 
drivîC⁄åﬁ
);

1206 
GL_API
 
GL_APIENTRY
 
	`glDißbÀDrivîC⁄åﬁQCOM
 (
GLuöt
 
drivîC⁄åﬁ
);

1208 (
	tGL_APIENTRYP
 
	tPFNGLGETDRIVERCONTROLSQCOMPROC
Ë(
	tGLöt
 *
	tnum
, 
	tGLsizei
 
	tsize
, 
	tGLuöt
 *
	tdrivîC⁄åﬁs
);

1209 (
	tGL_APIENTRYP
 
	tPFNGLGETDRIVERCONTROLSTRINGQCOMPROC
Ë(
	tGLuöt
 
	tdrivîC⁄åﬁ
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tdrivîC⁄åﬁSåög
);

1210 (
	tGL_APIENTRYP
 
	tPFNGLENABLEDRIVERCONTROLQCOMPROC
Ë(
	tGLuöt
 
	tdrivîC⁄åﬁ
);

1211 (
	tGL_APIENTRYP
 
	tPFNGLDISABLEDRIVERCONTROLQCOMPROC
Ë(
	tGLuöt
 
	tdrivîC⁄åﬁ
);

1215 #i‚de‡
GL_QCOM_exãnded_gë


1216 
	#GL_QCOM_exãnded_gë
 1

	)

1217 #ifde‡
GL_GLEXT_PROTOTYPES


1218 
GL_API
 
GL_APIENTRY
 
	`glExtGëTextuªsQCOM
 (
GLuöt
 *
ãxtuªs
, 
GLöt
 
maxTextuªs
, GLöà*
numTextuªs
);

1219 
GL_API
 
GL_APIENTRY
 
	`glExtGëBuf„rsQCOM
 (
GLuöt
 *
buf„rs
, 
GLöt
 
maxBuf„rs
, GLöà*
numBuf„rs
);

1220 
GL_API
 
GL_APIENTRY
 
	`glExtGëRídîbuf„rsQCOM
 (
GLuöt
 *
ªndîbuf„rs
, 
GLöt
 
maxRídîbuf„rs
, GLöà*
numRídîbuf„rs
);

1221 
GL_API
 
GL_APIENTRY
 
	`glExtGëFømebuf„rsQCOM
 (
GLuöt
 *
‰amebuf„rs
, 
GLöt
 
maxFømebuf„rs
, GLöà*
numFømebuf„rs
);

1222 
GL_API
 
GL_APIENTRY
 
	`glExtGëTexLevñP¨amëîivQCOM
 (
GLuöt
 
ãxtuª
, 
GLíum
 
Á˚
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, GLöà*
∑øms
);

1223 
GL_API
 
GL_APIENTRY
 
	`glExtTexObje˘SèãOvîrideiQCOM
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

1224 
GL_API
 
GL_APIENTRY
 
	`glExtGëTexSubImageQCOM
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
ãxñs
);

1225 
GL_API
 
GL_APIENTRY
 
	`glExtGëBuf„rPoöãrvQCOM
 (
GLíum
 
èrgë
, 
GLvoid
 **
∑øms
);

1227 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETTEXTURESQCOMPROC
Ë(
	tGLuöt
 *
	tãxtuªs
, 
	tGLöt
 
	tmaxTextuªs
, GLöà*
	tnumTextuªs
);

1228 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETBUFFERSQCOMPROC
Ë(
	tGLuöt
 *
	tbuf„rs
, 
	tGLöt
 
	tmaxBuf„rs
, GLöà*
	tnumBuf„rs
);

1229 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETRENDERBUFFERSQCOMPROC
Ë(
	tGLuöt
 *
	tªndîbuf„rs
, 
	tGLöt
 
	tmaxRídîbuf„rs
, GLöà*
	tnumRídîbuf„rs
);

1230 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETFRAMEBUFFERSQCOMPROC
Ë(
	tGLuöt
 *
	t‰amebuf„rs
, 
	tGLöt
 
	tmaxFømebuf„rs
, GLöà*
	tnumFømebuf„rs
);

1231 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tÁ˚
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöà*
	t∑øms
);

1232 (
	tGL_APIENTRYP
 
	tPFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

1233 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETTEXSUBIMAGEQCOMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tãxñs
);

1234 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETBUFFERPOINTERVQCOMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLvoid
 **
	t∑øms
);

1238 #i‚de‡
GL_QCOM_exãnded_gë2


1239 
	#GL_QCOM_exãnded_gë2
 1

	)

1240 #ifde‡
GL_GLEXT_PROTOTYPES


1241 
GL_API
 
GL_APIENTRY
 
	`glExtGëShadîsQCOM
 (
GLuöt
 *
shadîs
, 
GLöt
 
maxShadîs
, GLöà*
numShadîs
);

1242 
GL_API
 
GL_APIENTRY
 
	`glExtGëProgømsQCOM
 (
GLuöt
 *
¥ogøms
, 
GLöt
 
maxProgøms
, GLöà*
numProgøms
);

1243 
GL_API
 
GLboﬁón
 
GL_APIENTRY
 
	`glExtIsProgømBö¨yQCOM
 (
GLuöt
 
¥ogøm
);

1244 
GL_API
 
GL_APIENTRY
 
	`glExtGëProgømBö¨ySour˚QCOM
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, 
GLch¨
 *
sour˚
, 
GLöt
 *
Àngth
);

1246 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETSHADERSQCOMPROC
Ë(
	tGLuöt
 *
	tshadîs
, 
	tGLöt
 
	tmaxShadîs
, GLöà*
	tnumShadîs
);

1247 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETPROGRAMSQCOMPROC
Ë(
	tGLuöt
 *
	t¥ogøms
, 
	tGLöt
 
	tmaxProgøms
, GLöà*
	tnumProgøms
);

1248 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLEXTISPROGRAMBINARYQCOMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

1249 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, 
	tGLch¨
 *
	tsour˚
, 
	tGLöt
 *
	tÀngth
);

1253 #i‚de‡
GL_QCOM_≥rfm⁄_globÆ_mode


1254 
	#GL_QCOM_≥rfm⁄_globÆ_mode
 1

	)

1258 #i‚de‡
GL_QCOM_wrôe⁄ly_ªndîög


1259 
	#GL_QCOM_wrôe⁄ly_ªndîög
 1

	)

1263 #i‚de‡
GL_QCOM_tûed_ªndîög


1264 
	#GL_QCOM_tûed_ªndîög
 1

	)

1265 #ifde‡
GL_GLEXT_PROTOTYPES


1266 
GL_API
 
GL_APIENTRY
 
	`glSèπTûögQCOM
 (
GLuöt
 
x
, GLuöà
y
, GLuöà
width
, GLuöà
height
, 
GLbôfõld
 
¥e£rveMask
);

1267 
GL_API
 
GL_APIENTRY
 
	`glEndTûögQCOM
 (
GLbôfõld
 
¥e£rveMask
);

1269 (
	tGL_APIENTRYP
 
	tPFNGLSTARTTILINGQCOMPROC
Ë(
	tGLuöt
 
	tx
, GLuöà
	ty
, GLuöà
	twidth
, GLuöà
	theight
, 
	tGLbôfõld
 
	t¥e£rveMask
);

1270 (
	tGL_APIENTRYP
 
	tPFNGLENDTILINGQCOMPROC
Ë(
	tGLbôfõld
 
	t¥e£rveMask
);

1273 #ifde‡
__˝lu•lus


1274 
	}
}

	@/usr/include/X11/XKBlib.h

27 #i‚de‡
_X11_XKBLIB_H_


28 
	#_X11_XKBLIB_H_


	)

30 
	~<X11/Xlib.h
>

31 
	~<X11/exãnsi⁄s/XKB°r.h
>

33 
	s_XkbAnyEvít
 {

34 
	mty≥
;

35 
	m£rül
;

36 
Boﬁ
 
	m£nd_evít
;

37 
Di•œy
 * 
	mdi•œy
;

38 
Time
 
	mtime
;

39 
	mxkb_ty≥
;

40 
	mdevi˚
;

41 } 
	tXkbAnyEvít
;

43 
	s_XkbNewKeybﬂrdNŸify
 {

44 
	mty≥
;

45 
	m£rül
;

46 
Boﬁ
 
	m£nd_evít
;

47 
Di•œy
 * 
	mdi•œy
;

48 
Time
 
	mtime
;

49 
	mxkb_ty≥
;

50 
	mdevi˚
;

51 
	mﬁd_devi˚
;

52 
	mmö_key_code
;

53 
	mmax_key_code
;

54 
	mﬁd_mö_key_code
;

55 
	mﬁd_max_key_code
;

56 
	mch™ged
;

57 
	mªq_maj‹
;

58 
	mªq_mö‹
;

59 } 
	tXkbNewKeybﬂrdNŸifyEvít
;

61 
	s_XkbM≠NŸifyEvít
 {

62 
	mty≥
;

63 
	m£rül
;

64 
Boﬁ
 
	m£nd_evít
;

65 
Di•œy
 * 
	mdi•œy
;

66 
Time
 
	mtime
;

67 
	mxkb_ty≥
;

68 
	mdevi˚
;

69 
	mch™ged
;

70 
	mÊags
;

71 
	mfú°_ty≥
;

72 
	mnum_ty≥s
;

73 
KeyCode
 
	mmö_key_code
;

74 
KeyCode
 
	mmax_key_code
;

75 
KeyCode
 
	mfú°_key_sym
;

76 
KeyCode
 
	mfú°_key_a˘
;

77 
KeyCode
 
	mfú°_key_behavi‹
;

78 
KeyCode
 
	mfú°_key_ex∂icô
;

79 
KeyCode
 
	mfú°_modm≠_key
;

80 
KeyCode
 
	mfú°_vmodm≠_key
;

81 
	mnum_key_syms
;

82 
	mnum_key_a˘s
;

83 
	mnum_key_behavi‹s
;

84 
	mnum_key_ex∂icô
;

85 
	mnum_modm≠_keys
;

86 
	mnum_vmodm≠_keys
;

87 
	mvmods
;

88 } 
	tXkbM≠NŸifyEvít
;

90 
	s_XkbSèãNŸifyEvít
 {

91 
	mty≥
;

92 
	m£rül
;

93 
Boﬁ
 
	m£nd_evít
;

94 
Di•œy
 * 
	mdi•œy
;

95 
Time
 
	mtime
;

96 
	mxkb_ty≥
;

97 
	mdevi˚
;

98 
	mch™ged
;

99 
	mgroup
;

100 
	mba£_group
;

101 
	mœtched_group
;

102 
	mlocked_group
;

103 
	mmods
;

104 
	mba£_mods
;

105 
	mœtched_mods
;

106 
	mlocked_mods
;

107 
	mcom∑t_°©e
;

108 
	mgøb_mods
;

109 
	mcom∑t_gøb_mods
;

110 
	mlookup_mods
;

111 
	mcom∑t_lookup_mods
;

112 
	m±r_buâ⁄s
;

113 
KeyCode
 
	mkeycode
;

114 
	mevít_ty≥
;

115 
	mªq_maj‹
;

116 
	mªq_mö‹
;

117 } 
	tXkbSèãNŸifyEvít
;

119 
	s_XkbC⁄åﬁsNŸify
 {

120 
	mty≥
;

121 
	m£rül
;

122 
Boﬁ
 
	m£nd_evít
;

123 
Di•œy
 * 
	mdi•œy
;

124 
Time
 
	mtime
;

125 
	mxkb_ty≥
;

126 
	mdevi˚
;

127 
	mch™ged_˘æs
;

128 
	míabÀd_˘æs
;

129 
	míabÀd_˘æ_ch™ges
;

130 
	mnum_groups
;

131 
KeyCode
 
	mkeycode
;

132 
	mevít_ty≥
;

133 
	mªq_maj‹
;

134 
	mªq_mö‹
;

135 } 
	tXkbC⁄åﬁsNŸifyEvít
;

137 
	s_XkbIndiˇt‹NŸify
 {

138 
	mty≥
;

139 
	m£rül
;

140 
Boﬁ
 
	m£nd_evít
;

141 
Di•œy
 * 
	mdi•œy
;

142 
Time
 
	mtime
;

143 
	mxkb_ty≥
;

144 
	mdevi˚
;

145 
	mch™ged
;

146 
	m°©e
;

147 } 
	tXkbIndiˇt‹NŸifyEvít
;

149 
	s_XkbNamesNŸify
 {

150 
	mty≥
;

151 
	m£rül
;

152 
Boﬁ
 
	m£nd_evít
;

153 
Di•œy
 * 
	mdi•œy
;

154 
Time
 
	mtime
;

155 
	mxkb_ty≥
;

156 
	mdevi˚
;

157 
	mch™ged
;

158 
	mfú°_ty≥
;

159 
	mnum_ty≥s
;

160 
	mfú°_lvl
;

161 
	mnum_lvls
;

162 
	mnum_Æü£s
;

163 
	mnum_ødio_groups
;

164 
	mch™ged_vmods
;

165 
	mch™ged_groups
;

166 
	mch™ged_ödiˇt‹s
;

167 
	mfú°_key
;

168 
	mnum_keys
;

169 } 
	tXkbNamesNŸifyEvít
;

171 
	s_XkbCom∑tM≠NŸify
 {

172 
	mty≥
;

173 
	m£rül
;

174 
Boﬁ
 
	m£nd_evít
;

175 
Di•œy
 * 
	mdi•œy
;

176 
Time
 
	mtime
;

177 
	mxkb_ty≥
;

178 
	mdevi˚
;

179 
	mch™ged_groups
;

180 
	mfú°_si
;

181 
	mnum_si
;

182 
	mnum_tŸÆ_si
;

183 } 
	tXkbCom∑tM≠NŸifyEvít
;

185 
	s_XkbBñlNŸify
 {

186 
	mty≥
;

187 
	m£rül
;

188 
Boﬁ
 
	m£nd_evít
;

189 
Di•œy
 * 
	mdi•œy
;

190 
Time
 
	mtime
;

191 
	mxkb_ty≥
;

192 
	mdevi˚
;

193 
	m≥r˚¡
;

194 
	mpôch
;

195 
	mduøti⁄
;

196 
	mbñl_˛ass
;

197 
	mbñl_id
;

198 
Atom
 
	m«me
;

199 
Wödow
 
	mwödow
;

200 
Boﬁ
 
	mevít_⁄ly
;

201 } 
	tXkbBñlNŸifyEvít
;

203 
	s_XkbA˘i⁄Mesßge
 {

204 
	mty≥
;

205 
	m£rül
;

206 
Boﬁ
 
	m£nd_evít
;

207 
Di•œy
 * 
	mdi•œy
;

208 
Time
 
	mtime
;

209 
	mxkb_ty≥
;

210 
	mdevi˚
;

211 
KeyCode
 
	mkeycode
;

212 
Boﬁ
 
	m¥ess
;

213 
Boﬁ
 
	mkey_evít_fﬁlows
;

214 
	mgroup
;

215 
	mmods
;

216 
	mmesßge
[
XkbA˘i⁄MesßgeLígth
+1];

218 } 
	tXkbA˘i⁄MesßgeEvít
;

220 
	s_XkbAc˚ssXNŸify
 {

221 
	mty≥
;

222 
	m£rül
;

223 
Boﬁ
 
	m£nd_evít
;

224 
Di•œy
 * 
	mdi•œy
;

225 
Time
 
	mtime
;

226 
	mxkb_ty≥
;

227 
	mdevi˚
;

228 
	mdëaû
;

229 
	mkeycode
;

230 
	msk_dñay
;

231 
	mdeboun˚_dñay
;

232 } 
	tXkbAc˚ssXNŸifyEvít
;

234 
	s_XkbExãnsi⁄Devi˚NŸify
 {

235 
	mty≥
;

236 
	m£rül
;

237 
Boﬁ
 
	m£nd_evít
;

238 
Di•œy
 * 
	mdi•œy
;

239 
Time
 
	mtime
;

240 
	mxkb_ty≥
;

241 
	mdevi˚
;

242 
	mªas⁄
;

243 
	msuµ‹ãd
;

244 
	munsuµ‹ãd
;

246 
	mfú°_bä
;

247 
	mnum_bäs
;

248 
	mÀds_deföed
;

249 
	mÀd_°©e
;

250 
	mÀd_˛ass
;

251 
	mÀd_id
;

252 } 
	tXkbExãnsi⁄Devi˚NŸifyEvít
;

254 
	u_XkbEvít
 {

255 
	mty≥
;

256 
XkbAnyEvít
 
	m™y
;

257 
XkbNewKeybﬂrdNŸifyEvít
 
	m√w_kbd
;

258 
XkbM≠NŸifyEvít
 
	mm≠
;

259 
XkbSèãNŸifyEvít
 
	m°©e
;

260 
XkbC⁄åﬁsNŸifyEvít
 
	m˘æs
;

261 
XkbIndiˇt‹NŸifyEvít
 
	mödiˇt‹s
;

262 
XkbNamesNŸifyEvít
 
	m«mes
;

263 
XkbCom∑tM≠NŸifyEvít
 
	mcom∑t
;

264 
XkbBñlNŸifyEvít
 
	mbñl
;

265 
XkbA˘i⁄MesßgeEvít
 
	mmesßge
;

266 
XkbAc˚ssXNŸifyEvít
 
	mac˚ssx
;

267 
XkbExãnsi⁄Devi˚NŸifyEvít
 
	mdevi˚
;

268 
XEvít
 
	mc‹e
;

269 } 
	tXkbEvít
;

271 
_XkbKbdDpySèã
 
	tXkbKbdDpySèãRec
,*
	tXkbKbdDpySèãPå
;

274 
	#XkbOD_Suc˚ss
 0

	)

275 
	#XkbOD_BadLibøryVîsi⁄
 1

	)

276 
	#XkbOD_C⁄√˘i⁄Refu£d
 2

	)

277 
	#XkbOD_N⁄XkbSîvî
 3

	)

278 
	#XkbOD_BadSîvîVîsi⁄
 4

	)

281 
	#XkbLC_F‹˚L©ö1Lookup
 (1<<0)

	)

282 
	#XkbLC_C⁄sumeLookupMods
 (1<<1)

	)

283 
	#XkbLC_AlwaysC⁄sumeShi·AndLock
 (1<<2)

	)

284 
	#XkbLC_Ign‹eNewKeybﬂrds
 (1<<3)

	)

285 
	#XkbLC_C⁄åﬁFÆlback
 (1<<4)

	)

286 
	#XkbLC_C⁄sumeKeysOnCompo£Faû
 (1<<29)

	)

287 
	#XkbLC_Compo£LED
 (1<<30)

	)

288 
	#XkbLC_BìpOnCompo£Faû
 (1<<31)

	)

290 
	#XkbLC_AŒCompo£C⁄åﬁs
 (0xc0000000)

	)

291 
	#XkbLC_AŒC⁄åﬁs
 (0xc000001f)

	)

293 
_XFUNCPROTOBEGIN


295 
Boﬁ
 
XkbIgn‹eExãnsi⁄
(

296 
Boﬁ


299 
Di•œy
 *
XkbO≥nDi•œy
(

308 
Boﬁ
 
XkbQuîyExãnsi⁄
(

309 
Di•œy
 * ,

317 
Boﬁ
 
XkbU£Exãnsi⁄
(

318 
Di•œy
 * ,

323 
Boﬁ
 
XkbLibøryVîsi⁄
(

328 
XkbSëXlibC⁄åﬁs
(

329 
Di•œy
* ,

334 
XkbGëXlibC⁄åﬁs
(

335 
Di•œy
*

338 
XkbXlibC⁄åﬁsIm∂emíãd
();

340 
	$Atom
 (*
	tXkbI¡înAtomFunc
)(

341 
	tDi•œy
 * ,

342 
	t_Xc⁄°
 * ,

343 
	tBoﬁ


346 * (*
	tXkbGëAtomNameFunc
)(

347 
	tDi•œy
 * ,

348 
	tAtom


351 
	`XkbSëAtomFuncs
(

352 
XkbI¡înAtomFunc
 ,

353 
XkbGëAtomNameFunc


356 
KeySym
 
	`XkbKeycodeToKeysym
(

357 
Di•œy
 * ,

358 #i‡
NìdWidePrŸŸy≥s


361 
KeyCode
 ,

367 
	`XkbKeysymToModifõrs
(

368 
Di•œy
 * ,

369 
KeySym


372 
Boﬁ
 
	`XkbLookupKeySym
(

373 
Di•œy
 * ,

374 
KeyCode
 ,

377 
KeySym
 *

380 
	`XkbLookupKeyBödög
(

381 
Di•œy
 * ,

382 
KeySym
 ,

389 
Boﬁ
 
	`XkbTøn¶©eKeyCode
(

390 
XkbDescPå
 ,

391 
KeyCode
 ,

394 
KeySym
 *

397 
	`XkbTøn¶©eKeySym
(

398 
Di•œy
 * ,

399 
KeySym
 * ,

406 
Boﬁ
 
	`XkbSëAutoRïótR©e
(

407 
Di•œy
 * ,

413 
Boﬁ
 
	`XkbGëAutoRïótR©e
(

414 
Di•œy
 * ,

420 
Boﬁ
 
	`XkbCh™geE«bÀdC⁄åﬁs
(

421 
Di•œy
 * ,

427 
Boﬁ
 
	`XkbDevi˚Bñl
(

428 
Di•œy
 * ,

429 
Wödow
 ,

434 
Atom


437 
Boﬁ
 
	`XkbF‹˚Devi˚Bñl
(

438 
Di•œy
 * ,

445 
Boﬁ
 
	`XkbDevi˚BñlEvít
(

446 
Di•œy
 * ,

447 
Wödow
 ,

452 
Atom


455 
Boﬁ
 
	`XkbBñl
(

456 
Di•œy
 * ,

457 
Wödow
 ,

459 
Atom


462 
Boﬁ
 
	`XkbF‹˚Bñl
(

463 
Di•œy
 * ,

467 
Boﬁ
 
	`XkbBñlEvít
(

468 
Di•œy
 * ,

469 
Wödow
 ,

471 
Atom


474 
Boﬁ
 
	`XkbSñe˘Evíts
(

475 
Di•œy
 * ,

481 
Boﬁ
 
	`XkbSñe˘EvítDëaûs
(

482 
Di•œy
 * ,

489 
	`XkbNŸeM≠Ch™ges
(

490 
XkbM≠Ch™gesPå
 ,

491 
XkbM≠NŸifyEvít
 * ,

495 
	`XkbNŸeNameCh™ges
(

496 
XkbNameCh™gesPå
 ,

497 
XkbNamesNŸifyEvít
 * ,

501 
Sètus
 
	`XkbGëIndiˇt‹Sèã
(

502 
Di•œy
 * ,

507 
Sètus
 
	`XkbGëDevi˚Indiˇt‹Sèã
(

508 
Di•œy
 * ,

515 
Sètus
 
	`XkbGëIndiˇt‹M≠
(

516 
Di•œy
 * ,

518 
XkbDescPå


521 
Boﬁ
 
	`XkbSëIndiˇt‹M≠
(

522 
Di•œy
 * ,

524 
XkbDescPå


527 
	#XkbNŸeIndiˇt‹M≠Ch™ges
(
o
,
n
,
w
) \

528 ((
o
)->
m≠_ch™ges
|=((
n
)->m≠_ch™ges&(
w
)))

	)

529 
	#XkbNŸeIndiˇt‹SèãCh™ges
(
o
,
n
,
w
)\

530 ((
o
)->
°©e_ch™ges
|=((
n
)->°©e_ch™ges&(
w
)))

	)

531 
	#XkbGëIndiˇt‹M≠Ch™ges
(
d
,
x
,
c
) \

532 (
	`XkbGëIndiˇt‹M≠
((
d
),(
c
)->
m≠_ch™ges
,
x
))

	)

533 
	#XkbCh™geIndiˇt‹M≠s
(
d
,
x
,
c
) \

534 (
	`XkbSëIndiˇt‹M≠
((
d
),(
c
)->
m≠_ch™ges
,
x
))

	)

536 
Boﬁ
 
	`XkbGëNamedIndiˇt‹
(

537 
Di•œy
 * ,

538 
Atom
 ,

540 
Boﬁ
 * ,

541 
XkbIndiˇt‹M≠På
 ,

542 
Boﬁ
 *

545 
Boﬁ
 
	`XkbGëNamedDevi˚Indiˇt‹
(

546 
Di•œy
 * ,

550 
Atom
 ,

552 
Boﬁ
 * ,

553 
XkbIndiˇt‹M≠På
 ,

554 
Boﬁ
 *

557 
Boﬁ
 
	`XkbSëNamedIndiˇt‹
(

558 
Di•œy
 * ,

559 
Atom
 ,

560 
Boﬁ
 ,

561 
Boﬁ
 ,

562 
Boﬁ
 ,

563 
XkbIndiˇt‹M≠På


566 
Boﬁ
 
	`XkbSëNamedDevi˚Indiˇt‹
(

567 
Di•œy
 * ,

571 
Atom
 ,

572 
Boﬁ
 ,

573 
Boﬁ
 ,

574 
Boﬁ
 ,

575 
XkbIndiˇt‹M≠På


578 
Boﬁ
 
	`XkbLockModifõrs
(

579 
Di•œy
 * ,

585 
Boﬁ
 
	`XkbL©chModifõrs
(

586 
Di•œy
 * ,

592 
Boﬁ
 
	`XkbLockGroup
(

593 
Di•œy
 * ,

598 
Boﬁ
 
	`XkbL©chGroup
(

599 
Di•œy
 * ,

604 
Boﬁ
 
	`XkbSëSîvîI¡î«lMods
(

605 
Di•œy
 * ,

613 
Boﬁ
 
	`XkbSëIgn‹eLockMods
(

614 
Di•œy
 * ,

623 
Boﬁ
 
	`XkbVútuÆModsToRól
(

624 
XkbDescPå
 ,

629 
Boﬁ
 
	`XkbCompuãEf„˘iveM≠
(

630 
XkbDescPå
 ,

631 
XkbKeyTy≥På
 ,

635 
Sètus
 
	`XkbInôC™⁄iˇlKeyTy≥s
(

636 
XkbDescPå
 ,

641 
XkbDescPå
 
	`XkbAŒocKeybﬂrd
(

645 
	`XkbFªeKeybﬂrd
(

646 
XkbDescPå
 ,

648 
Boﬁ


651 
Sètus
 
	`XkbAŒocClõ¡M≠
(

652 
XkbDescPå
 ,

657 
Sètus
 
	`XkbAŒocSîvîM≠
(

658 
XkbDescPå
 ,

663 
	`XkbFªeClõ¡M≠
(

664 
XkbDescPå
 ,

666 
Boﬁ


669 
	`XkbFªeSîvîM≠
(

670 
XkbDescPå
 ,

672 
Boﬁ


675 
XkbKeyTy≥På
 
	`XkbAddKeyTy≥
(

676 
XkbDescPå
 ,

677 
Atom
 ,

679 
Boﬁ
 ,

683 
Sètus
 
	`XkbAŒocIndiˇt‹M≠s
(

684 
XkbDescPå


687 
	`XkbFªeIndiˇt‹M≠s
(

688 
XkbDescPå


691 
XkbDescPå
 
	`XkbGëM≠
(

692 
Di•œy
 * ,

697 
Sètus
 
	`XkbGëUpd©edM≠
(

698 
Di•œy
 * ,

700 
XkbDescPå


703 
Sètus
 
	`XkbGëM≠Ch™ges
(

704 
Di•œy
 * ,

705 
XkbDescPå
 ,

706 
XkbM≠Ch™gesPå


710 
Sètus
 
	`XkbRe‰eshKeybﬂrdM≠pög
(

711 
XkbM≠NŸifyEvít
 *

714 
Sètus
 
	`XkbGëKeyTy≥s
(

715 
Di•œy
 * ,

718 
XkbDescPå


721 
Sètus
 
	`XkbGëKeySyms
(

722 
Di•œy
 * ,

725 
XkbDescPå


728 
Sètus
 
	`XkbGëKeyA˘i⁄s
(

729 
Di•œy
 * ,

732 
XkbDescPå


735 
Sètus
 
	`XkbGëKeyBehavi‹s
(

736 
Di•œy
 * ,

739 
XkbDescPå


742 
Sètus
 
	`XkbGëVútuÆMods
(

743 
Di•œy
 * ,

745 
XkbDescPå


748 
Sètus
 
	`XkbGëKeyEx∂icôComp⁄íts
(

749 
Di•œy
 * ,

752 
XkbDescPå


755 
Sètus
 
	`XkbGëKeyModifõrM≠
(

756 
Di•œy
 * ,

759 
XkbDescPå


762 
Sètus
 
	`XkbGëKeyVútuÆModM≠
(

763 
Di•œy
 * ,

766 
XkbDescPå


769 
Sètus
 
	`XkbAŒocC⁄åﬁs
(

770 
XkbDescPå
 ,

774 
	`XkbFªeC⁄åﬁs
(

775 
XkbDescPå
 ,

777 
Boﬁ


780 
Sètus
 
	`XkbGëC⁄åﬁs
(

781 
Di•œy
 * ,

783 
XkbDescPå


786 
Boﬁ
 
	`XkbSëC⁄åﬁs
(

787 
Di•œy
 * ,

789 
XkbDescPå


792 
	`XkbNŸeC⁄åﬁsCh™ges
(

793 
XkbC⁄åﬁsCh™gesPå
 ,

794 
XkbC⁄åﬁsNŸifyEvít
 * ,

798 
	#XkbGëC⁄åﬁsCh™ges
(
d
,
x
,
c
Ë
	`XkbGëC⁄åﬁs
(d,(c)->
ch™ged_˘æs
,x)

	)

799 
	#XkbCh™geC⁄åﬁs
(
d
,
x
,
c
Ë
	`XkbSëC⁄åﬁs
(d,(c)->
ch™ged_˘æs
,x)

	)

801 
Sètus
 
	`XkbAŒocCom∑tM≠
(

802 
XkbDescPå
 ,

807 
	`XkbFªeCom∑tM≠
(

808 
XkbDescPå
 ,

810 
Boﬁ


813 
Sètus
 
	`XkbGëCom∑tM≠
(

814 
Di•œy
 * ,

816 
XkbDescPå


819 
Boﬁ
 
	`XkbSëCom∑tM≠
(

820 
Di•œy
 * ,

822 
XkbDescPå
 ,

823 
Boﬁ


826 
XkbSymI¡î¥ëPå
 
	`XkbAddSymI¡î¥ë
(

827 
XkbDescPå
 ,

828 
XkbSymI¡î¥ëPå
 ,

829 
Boﬁ
 ,

830 
XkbCh™gesPå


833 
Sètus
 
	`XkbAŒocNames
(

834 
XkbDescPå
 ,

840 
Sètus
 
	`XkbGëNames
(

841 
Di•œy
 * ,

843 
XkbDescPå


846 
Boﬁ
 
	`XkbSëNames
(

847 
Di•œy
 * ,

851 
XkbDescPå


854 
Boﬁ
 
	`XkbCh™geNames
(

855 
Di•œy
 * ,

856 
XkbDescPå
 ,

857 
XkbNameCh™gesPå


860 
	`XkbFªeNames
(

861 
XkbDescPå
 ,

863 
Boﬁ


867 
Sètus
 
	`XkbGëSèã
(

868 
Di•œy
 * ,

870 
XkbSèãPå


873 
Boﬁ
 
	`XkbSëM≠
(

874 
Di•œy
 * ,

876 
XkbDescPå


879 
Boﬁ
 
	`XkbCh™geM≠
(

880 
Di•œy
* ,

881 
XkbDescPå
 ,

882 
XkbM≠Ch™gesPå


885 
Boﬁ
 
	`XkbSëDëe˘abÀAutoRïót
(

886 
Di•œy
 * ,

887 
Boﬁ
 ,

888 
Boﬁ
 *

891 
Boﬁ
 
	`XkbGëDëe˘abÀAutoRïót
(

892 
Di•œy
 * ,

893 
Boﬁ
 *

896 
Boﬁ
 
	`XkbSëAutoRe£tC⁄åﬁs
(

897 
Di•œy
 * ,

903 
Boﬁ
 
	`XkbGëAutoRe£tC⁄åﬁs
(

904 
Di•œy
 * ,

909 
Boﬁ
 
	`XkbSëPîClõ¡C⁄åﬁs
(

910 
Di•œy
 * ,

915 
Boﬁ
 
	`XkbGëPîClõ¡C⁄åﬁs
(

916 
Di•œy
 * ,

920 
Sètus
 
	`XkbC›yKeyTy≥
(

921 
XkbKeyTy≥På
 ,

922 
XkbKeyTy≥På


925 
Sètus
 
	`XkbC›yKeyTy≥s
(

926 
XkbKeyTy≥På
 ,

927 
XkbKeyTy≥På
 ,

931 
Sètus
 
	`XkbResizeKeyTy≥
(

932 
XkbDescPå
 ,

935 
Boﬁ
 ,

939 
KeySym
 *
	`XkbResizeKeySyms
(

940 
XkbDescPå
 ,

945 
XkbA˘i⁄
 *
	`XkbResizeKeyA˘i⁄s
(

946 
XkbDescPå
 ,

951 
Sètus
 
	`XkbCh™geTy≥sOfKey
(

952 
XkbDescPå
 ,

957 
XkbM≠Ch™gesPå


960 
Sètus
 
	`XkbCh™geKeycodeR™ge
(

961 
XkbDescPå
 ,

964 
XkbCh™gesPå


969 
XkbComp⁄ítLi°På
 
	`XkbLi°Comp⁄íts
(

970 
Di•œy
 * ,

972 
XkbComp⁄ítNamesPå
 ,

976 
	`XkbFªeComp⁄ítLi°
(

977 
XkbComp⁄ítLi°På


980 
XkbDescPå
 
	`XkbGëKeybﬂrd
(

981 
Di•œy
 * ,

986 
XkbDescPå
 
	`XkbGëKeybﬂrdByName
(

987 
Di•œy
 * ,

989 
XkbComp⁄ítNamesPå
 ,

992 
Boﬁ


997 
	`XkbKeyTy≥sF‹C‹eSymbﬁs
(

998 
XkbDescPå
 ,

1000 
KeySym
 * ,

1003 
KeySym
 *

1006 
Boﬁ
 
	`XkbAµlyCom∑tM≠ToKey
(

1007 
XkbDescPå
 ,

1008 
KeyCode
 ,

1009 
XkbCh™gesPå


1012 
Boﬁ
 
	`XkbUpd©eM≠FromC‹e
(

1013 
XkbDescPå
 ,

1014 
KeyCode
 ,

1017 
KeySym
 * ,

1018 
XkbCh™gesPå


1023 
XkbDevi˚LedInfoPå
 
	`XkbAddDevi˚LedInfo
(

1024 
XkbDevi˚InfoPå
 ,

1029 
Sètus
 
	`XkbResizeDevi˚Buâ⁄A˘i⁄s
(

1030 
XkbDevi˚InfoPå
 ,

1034 
XkbDevi˚InfoPå
 
	`XkbAŒocDevi˚Info
(

1040 
	`XkbFªeDevi˚Info
(

1041 
XkbDevi˚InfoPå
 ,

1043 
Boﬁ


1046 
	`XkbNŸeDevi˚Ch™ges
(

1047 
XkbDevi˚Ch™gesPå
 ,

1048 
XkbExãnsi⁄Devi˚NŸifyEvít
 * ,

1052 
XkbDevi˚InfoPå
 
	`XkbGëDevi˚Info
(

1053 
Di•œy
 * ,

1060 
Sètus
 
	`XkbGëDevi˚InfoCh™ges
(

1061 
Di•œy
 * ,

1062 
XkbDevi˚InfoPå
 ,

1063 
XkbDevi˚Ch™gesPå


1066 
Sètus
 
	`XkbGëDevi˚Buâ⁄A˘i⁄s
(

1067 
Di•œy
 * ,

1068 
XkbDevi˚InfoPå
 ,

1069 
Boﬁ
 ,

1074 
Sètus
 
	`XkbGëDevi˚LedInfo
(

1075 
Di•œy
 * ,

1076 
XkbDevi˚InfoPå
 ,

1082 
Boﬁ
 
	`XkbSëDevi˚Info
(

1083 
Di•œy
 * ,

1085 
XkbDevi˚InfoPå


1088 
Boﬁ
 
	`XkbCh™geDevi˚Info
(

1089 
Di•œy
* ,

1090 
XkbDevi˚InfoPå
 ,

1091 
XkbDevi˚Ch™gesPå


1094 
Boﬁ
 
	`XkbSëDevi˚LedInfo
(

1095 
Di•œy
 * ,

1096 
XkbDevi˚InfoPå
 ,

1102 
Boﬁ
 
	`XkbSëDevi˚Buâ⁄A˘i⁄s
(

1103 
Di•œy
 * ,

1104 
XkbDevi˚InfoPå
 ,

1111 
	`XkbToC⁄åﬁ
(

1117 
Boﬁ
 
	`XkbSëDebuggögFœgs
(

1118 
Di•œy
 * ,

1128 
Boﬁ
 
	`XkbAµlyVútuÆModCh™ges
(

1129 
XkbDescPå
 ,

1131 
XkbCh™gesPå


1134 
Boﬁ
 
	`XkbUpd©eA˘i⁄VútuÆMods
(

1135 
XkbDescPå
 ,

1136 
XkbA˘i⁄
 * ,

1140 
	`XkbUpd©eKeyTy≥VútuÆMods
(

1141 
XkbDescPå
 ,

1142 
XkbKeyTy≥På
 ,

1144 
XkbCh™gesPå


1147 
_XFUNCPROTOEND


	@/usr/include/X11/Xatom.h

1 #i‚de‡
XATOM_H


2 
	#XATOM_H
 1

	)

9 
	#XA_PRIMARY
 ((
Atom
Ë1)

	)

10 
	#XA_SECONDARY
 ((
Atom
Ë2)

	)

11 
	#XA_ARC
 ((
Atom
Ë3)

	)

12 
	#XA_ATOM
 ((
Atom
Ë4)

	)

13 
	#XA_BITMAP
 ((
Atom
Ë5)

	)

14 
	#XA_CARDINAL
 ((
Atom
Ë6)

	)

15 
	#XA_COLORMAP
 ((
Atom
Ë7)

	)

16 
	#XA_CURSOR
 ((
Atom
Ë8)

	)

17 
	#XA_CUT_BUFFER0
 ((
Atom
Ë9)

	)

18 
	#XA_CUT_BUFFER1
 ((
Atom
Ë10)

	)

19 
	#XA_CUT_BUFFER2
 ((
Atom
Ë11)

	)

20 
	#XA_CUT_BUFFER3
 ((
Atom
Ë12)

	)

21 
	#XA_CUT_BUFFER4
 ((
Atom
Ë13)

	)

22 
	#XA_CUT_BUFFER5
 ((
Atom
Ë14)

	)

23 
	#XA_CUT_BUFFER6
 ((
Atom
Ë15)

	)

24 
	#XA_CUT_BUFFER7
 ((
Atom
Ë16)

	)

25 
	#XA_DRAWABLE
 ((
Atom
Ë17)

	)

26 
	#XA_FONT
 ((
Atom
Ë18)

	)

27 
	#XA_INTEGER
 ((
Atom
Ë19)

	)

28 
	#XA_PIXMAP
 ((
Atom
Ë20)

	)

29 
	#XA_POINT
 ((
Atom
Ë21)

	)

30 
	#XA_RECTANGLE
 ((
Atom
Ë22)

	)

31 
	#XA_RESOURCE_MANAGER
 ((
Atom
Ë23)

	)

32 
	#XA_RGB_COLOR_MAP
 ((
Atom
Ë24)

	)

33 
	#XA_RGB_BEST_MAP
 ((
Atom
Ë25)

	)

34 
	#XA_RGB_BLUE_MAP
 ((
Atom
Ë26)

	)

35 
	#XA_RGB_DEFAULT_MAP
 ((
Atom
Ë27)

	)

36 
	#XA_RGB_GRAY_MAP
 ((
Atom
Ë28)

	)

37 
	#XA_RGB_GREEN_MAP
 ((
Atom
Ë29)

	)

38 
	#XA_RGB_RED_MAP
 ((
Atom
Ë30)

	)

39 
	#XA_STRING
 ((
Atom
Ë31)

	)

40 
	#XA_VISUALID
 ((
Atom
Ë32)

	)

41 
	#XA_WINDOW
 ((
Atom
Ë33)

	)

42 
	#XA_WM_COMMAND
 ((
Atom
Ë34)

	)

43 
	#XA_WM_HINTS
 ((
Atom
Ë35)

	)

44 
	#XA_WM_CLIENT_MACHINE
 ((
Atom
Ë36)

	)

45 
	#XA_WM_ICON_NAME
 ((
Atom
Ë37)

	)

46 
	#XA_WM_ICON_SIZE
 ((
Atom
Ë38)

	)

47 
	#XA_WM_NAME
 ((
Atom
Ë39)

	)

48 
	#XA_WM_NORMAL_HINTS
 ((
Atom
Ë40)

	)

49 
	#XA_WM_SIZE_HINTS
 ((
Atom
Ë41)

	)

50 
	#XA_WM_ZOOM_HINTS
 ((
Atom
Ë42)

	)

51 
	#XA_MIN_SPACE
 ((
Atom
Ë43)

	)

52 
	#XA_NORM_SPACE
 ((
Atom
Ë44)

	)

53 
	#XA_MAX_SPACE
 ((
Atom
Ë45)

	)

54 
	#XA_END_SPACE
 ((
Atom
Ë46)

	)

55 
	#XA_SUPERSCRIPT_X
 ((
Atom
Ë47)

	)

56 
	#XA_SUPERSCRIPT_Y
 ((
Atom
Ë48)

	)

57 
	#XA_SUBSCRIPT_X
 ((
Atom
Ë49)

	)

58 
	#XA_SUBSCRIPT_Y
 ((
Atom
Ë50)

	)

59 
	#XA_UNDERLINE_POSITION
 ((
Atom
Ë51)

	)

60 
	#XA_UNDERLINE_THICKNESS
 ((
Atom
Ë52)

	)

61 
	#XA_STRIKEOUT_ASCENT
 ((
Atom
Ë53)

	)

62 
	#XA_STRIKEOUT_DESCENT
 ((
Atom
Ë54)

	)

63 
	#XA_ITALIC_ANGLE
 ((
Atom
Ë55)

	)

64 
	#XA_X_HEIGHT
 ((
Atom
Ë56)

	)

65 
	#XA_QUAD_WIDTH
 ((
Atom
Ë57)

	)

66 
	#XA_WEIGHT
 ((
Atom
Ë58)

	)

67 
	#XA_POINT_SIZE
 ((
Atom
Ë59)

	)

68 
	#XA_RESOLUTION
 ((
Atom
Ë60)

	)

69 
	#XA_COPYRIGHT
 ((
Atom
Ë61)

	)

70 
	#XA_NOTICE
 ((
Atom
Ë62)

	)

71 
	#XA_FONT_NAME
 ((
Atom
Ë63)

	)

72 
	#XA_FAMILY_NAME
 ((
Atom
Ë64)

	)

73 
	#XA_FULL_NAME
 ((
Atom
Ë65)

	)

74 
	#XA_CAP_HEIGHT
 ((
Atom
Ë66)

	)

75 
	#XA_WM_CLASS
 ((
Atom
Ë67)

	)

76 
	#XA_WM_TRANSIENT_FOR
 ((
Atom
Ë68)

	)

78 
	#XA_LAST_PREDEFINED
 ((
Atom
Ë68)

	)

	@/usr/include/X11/Xlib.h

33 #i‚de‡
_X11_XLIB_H_


34 
	#_X11_XLIB_H_


	)

36 
	#XlibS≥cifiˇti⁄Rñó£
 6

	)

38 
	~<sys/ty≥s.h
>

40 #i‡
deföed
(
__SCO__
Ë|| deföed(
__UNIXWARE__
)

41 
	~<°döt.h
>

44 
	~<X11/X.h
>

47 
	~<X11/Xfun˝rŸo.h
>

48 
	~<X11/Xosdefs.h
>

50 #i‚de‡
X_WCHAR


51 
	~<°ddef.h
>

53 #ifde‡
__UNIXOS2__


54 
	~<°dlib.h
>

57 
	twch¨_t
;

61 #i‡
deföed
(
ISC
Ë&& deföed(
USE_XMBTOWC
)

62 
	#w˘omb
(
a
,
b
Ë
	`_Xw˘omb
◊,b)

	)

63 
	#mbÀn
(
a
,
b
Ë
	`_XmbÀn
◊,b)

	)

64 #i‚de‡
USE_XWCHAR_STRING


65 
	#mbtowc
(
a
,
b
,
c
Ë
	`_Xmbtowc
◊,b,c)

	)

70 
_XmbÀn
(

71 #ifde‡
ISC


72 c⁄° *
°r
,

73 
size_t
 
Àn


75 *
°r
,

76 
Àn


82 
	#X_HAVE_UTF8_STRING
 1

	)

87 #ifde‡
__˛™g__


88 #¥agm®
˛™g
 
dügno°ic
 
push


89 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpadded"

92 *
	tXPoöãr
;

94 
	#Boﬁ
 

	)

95 
	#Sètus
 

	)

96 
	#True
 1

	)

97 
	#FÆ£
 0

	)

99 
	#QueuedAÃódy
 0

	)

100 
	#QueuedA·îRódög
 1

	)

101 
	#QueuedA·îFlush
 2

	)

103 
	#C⁄√˘i⁄Numbî
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
fd
)

	)

104 
	#RoŸWödow
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ
)

	)

105 
	#DeÁu…S¸ìn
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
deÁu…_s¸ìn
)

	)

106 
	#DeÁu…RoŸWödow
(
dpy
Ë(
	`S¸ìnOfDi•œy
(dpy,
	`DeÁu…S¸ìn
(dpy))->
roŸ
)

	)

107 
	#DeÁu…VisuÆ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_visuÆ
)

	)

108 
	#DeÁu…GC
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
deÁu…_gc
)

	)

109 
	#BœckPixñ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
bœck_pixñ
)

	)

110 
	#WhôePixñ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
whôe_pixñ
)

	)

111 
	#AŒPœ√s
 (()~0L)

	)

112 
	#QLígth
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
qÀn
)

	)

113 
	#Di•œyWidth
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
width
)

	)

114 
	#Di•œyHeight
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
height
)

	)

115 
	#Di•œyWidthMM
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
mwidth
)

	)

116 
	#Di•œyHeightMM
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
mheight
)

	)

117 
	#Di•œyPœ√s
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_dïth
)

	)

118 
	#Di•œyCñls
(
dpy
, 
s¸
Ë(
	`DeÁu…VisuÆ
(dpy,s¸)->
m≠_íåõs
)

	)

119 
	#S¸ìnCou¡
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
ns¸ìns
)

	)

120 
	#SîvîVíd‹
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
víd‹
)

	)

121 
	#PrŸocﬁVîsi⁄
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
¥Ÿo_maj‹_vîsi⁄
)

	)

122 
	#PrŸocﬁRevisi⁄
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
¥Ÿo_mö‹_vîsi⁄
)

	)

123 
	#Víd‹Rñó£
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
ªÀa£
)

	)

124 
	#Di•œySåög
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
di•œy_«me
)

	)

125 
	#DeÁu…Dïth
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_dïth
)

	)

126 
	#DeÁu…Cﬁ‹m≠
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
cm≠
)

	)

127 
	#Bôm≠Unô
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
bôm≠_unô
)

	)

128 
	#Bôm≠BôOrdî
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
bôm≠_bô_‹dî
)

	)

129 
	#Bôm≠Pad
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
bôm≠_∑d
)

	)

130 
	#ImageByãOrdî
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
byã_‹dî
)

	)

131 
	#NextReque°
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
ªque°
 + 1)

	)

132 
	#La°KnownReque°Pro˚s£d
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
œ°_ªque°_ªad
)

	)

135 
	#S¸ìnOfDi•œy
(
dpy
, 
s¸
)(&((
_XPrivDi•œy
)dpy)->
s¸ìns
[s¸])

	)

136 
	#DeÁu…S¸ìnOfDi•œy
(
dpy
Ë
	`S¸ìnOfDi•œy
(dpy,
	`DeÁu…S¸ìn
(dpy))

	)

137 
	#Di•œyOfS¸ìn
(
s
Ë((s)->
di•œy
)

	)

138 
	#RoŸWödowOfS¸ìn
(
s
Ë((s)->
roŸ
)

	)

139 
	#BœckPixñOfS¸ìn
(
s
Ë((s)->
bœck_pixñ
)

	)

140 
	#WhôePixñOfS¸ìn
(
s
Ë((s)->
whôe_pixñ
)

	)

141 
	#DeÁu…Cﬁ‹m≠OfS¸ìn
(
s
)((s)->
cm≠
)

	)

142 
	#DeÁu…DïthOfS¸ìn
(
s
Ë((s)->
roŸ_dïth
)

	)

143 
	#DeÁu…GCOfS¸ìn
(
s
Ë((s)->
deÁu…_gc
)

	)

144 
	#DeÁu…VisuÆOfS¸ìn
(
s
)((s)->
roŸ_visuÆ
)

	)

145 
	#WidthOfS¸ìn
(
s
Ë((s)->
width
)

	)

146 
	#HeightOfS¸ìn
(
s
Ë((s)->
height
)

	)

147 
	#WidthMMOfS¸ìn
(
s
Ë((s)->
mwidth
)

	)

148 
	#HeightMMOfS¸ìn
(
s
Ë((s)->
mheight
)

	)

149 
	#Pœ√sOfS¸ìn
(
s
Ë((s)->
roŸ_dïth
)

	)

150 
	#CñlsOfS¸ìn
(
s
Ë(
	`DeÁu…VisuÆOfS¸ìn
((s))->
m≠_íåõs
)

	)

151 
	#MöCm≠sOfS¸ìn
(
s
Ë((s)->
mö_m≠s
)

	)

152 
	#MaxCm≠sOfS¸ìn
(
s
Ë((s)->
max_m≠s
)

	)

153 
	#D€sSaveUndîs
(
s
Ë((s)->
ßve_undîs
)

	)

154 
	#D€sBackögSt‹e
(
s
Ë((s)->
backög_°‹e
)

	)

155 
	#EvítMaskOfS¸ìn
(
s
Ë((s)->
roŸ_öput_mask
)

	)

160 
	s_XExtD©a
 {

161 
	mnumbî
;

162 
_XExtD©a
 *
	m√xt
;

163 (*
	m‰ì_¥iv©e
)(

164 
_XExtD©a
 *
	mexãnsi⁄


166 
XPoöãr
 
	m¥iv©e_d©a
;

167 } 
	tXExtD©a
;

173 
	mexãnsi⁄
;

174 
	mmaj‹_›code
;

175 
	mfú°_evít
;

176 
	mfú°_îr‹
;

177 } 
	tXExtCodes
;

184 
	mdïth
;

185 
	mbôs_≥r_pixñ
;

186 
	msˇ∆öe_∑d
;

187 } 
	tXPixm≠F‹m©VÆues
;

194 
	mfun˘i⁄
;

195 
	m∂™e_mask
;

196 
	mf‹eground
;

197 
	mbackground
;

198 
	mlöe_width
;

199 
	mlöe_°yÀ
;

200 
	mˇp_°yÀ
;

202 
	mjoö_°yÀ
;

203 
	mfûl_°yÀ
;

205 
	mfûl_ruÀ
;

206 
	m¨c_mode
;

207 
Pixm≠
 
	mtûe
;

208 
Pixm≠
 
	m°ù∂e
;

209 
	mts_x_‹igö
;

210 
	mts_y_‹igö
;

211 
F⁄t
 
	mf⁄t
;

212 
	msubwödow_mode
;

213 
Boﬁ
 
	mgøphics_exposuªs
;

214 
	m˛ù_x_‹igö
;

215 
	m˛ù_y_‹igö
;

216 
Pixm≠
 
	m˛ù_mask
;

217 
	mdash_off£t
;

218 
	mdashes
;

219 } 
	tXGCVÆues
;

226 
	g_XGC


227 #ifde‡
	tXLIB_ILLEGAL_ACCESS


229 
XExtD©a
 *
	gext_d©a
;

230 
GC⁄ãxt
 
	ggid
;

234 *
	tGC
;

240 
XExtD©a
 *
	mext_d©a
;

241 
VisuÆID
 
	mvisuÆid
;

242 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

243 
	mc_˛ass
;

245 
	m˛ass
;

247 
	mªd_mask
, 
	mgªí_mask
, 
	mblue_mask
;

248 
	mbôs_≥r_rgb
;

249 
	mm≠_íåõs
;

250 } 
	tVisuÆ
;

256 
	mdïth
;

257 
	mnvisuÆs
;

258 
VisuÆ
 *
	mvisuÆs
;

259 } 
	tDïth
;

267 
	g_XDi•œy
;

270 
XExtD©a
 *
	mext_d©a
;

271 
_XDi•œy
 *
	mdi•œy
;

272 
Wödow
 
	mroŸ
;

273 
	mwidth
, 
	mheight
;

274 
	mmwidth
, 
	mmheight
;

275 
	mndïths
;

276 
Dïth
 *
	mdïths
;

277 
	mroŸ_dïth
;

278 
VisuÆ
 *
	mroŸ_visuÆ
;

279 
GC
 
	mdeÁu…_gc
;

280 
Cﬁ‹m≠
 
	mcm≠
;

281 
	mwhôe_pixñ
;

282 
	mbœck_pixñ
;

283 
	mmax_m≠s
, 
	mmö_m≠s
;

284 
	mbackög_°‹e
;

285 
Boﬁ
 
	mßve_undîs
;

286 
	mroŸ_öput_mask
;

287 } 
	tS¸ìn
;

293 
XExtD©a
 *
	mext_d©a
;

294 
	mdïth
;

295 
	mbôs_≥r_pixñ
;

296 
	msˇ∆öe_∑d
;

297 } 
	tS¸ìnF‹m©
;

303 
Pixm≠
 
	mbackground_pixm≠
;

304 
	mbackground_pixñ
;

305 
Pixm≠
 
	mb‹dî_pixm≠
;

306 
	mb‹dî_pixñ
;

307 
	mbô_gøvôy
;

308 
	mwö_gøvôy
;

309 
	mbackög_°‹e
;

310 
	mbackög_∂™es
;

311 
	mbackög_pixñ
;

312 
Boﬁ
 
	mßve_undî
;

313 
	mevít_mask
;

314 
	mdo_nŸ_¥›ag©e_mask
;

315 
Boﬁ
 
	movîride_ªdúe˘
;

316 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

317 
Curs‹
 
	mcurs‹
;

318 } 
	tXSëWödowAâribuãs
;

321 
	mx
, 
	my
;

322 
	mwidth
, 
	mheight
;

323 
	mb‹dî_width
;

324 
	mdïth
;

325 
VisuÆ
 *
	mvisuÆ
;

326 
Wödow
 
	mroŸ
;

327 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

328 
	mc_˛ass
;

330 
	m˛ass
;

332 
	mbô_gøvôy
;

333 
	mwö_gøvôy
;

334 
	mbackög_°‹e
;

335 
	mbackög_∂™es
;

336 
	mbackög_pixñ
;

337 
Boﬁ
 
	mßve_undî
;

338 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

339 
Boﬁ
 
	mm≠_ö°ÆÀd
;

340 
	mm≠_°©e
;

341 
	mÆl_evít_masks
;

342 
	myour_evít_mask
;

343 
	mdo_nŸ_¥›ag©e_mask
;

344 
Boﬁ
 
	movîride_ªdúe˘
;

345 
S¸ìn
 *
	ms¸ìn
;

346 } 
	tXWödowAâribuãs
;

354 
	mÁmûy
;

355 
	mÀngth
;

356 *
	maddªss
;

357 } 
	tXHo°Addªss
;

363 
	mty≥Àngth
;

364 
	mvÆuñígth
;

365 *
	mty≥
;

366 *
	mvÆue
;

367 } 
	tXSîvîI¡î¥ëedAddªss
;

372 
	s_XImage
 {

373 
	mwidth
, 
	mheight
;

374 
	mxoff£t
;

375 
	mf‹m©
;

376 *
	md©a
;

377 
	mbyã_‹dî
;

378 
	mbôm≠_unô
;

379 
	mbôm≠_bô_‹dî
;

380 
	mbôm≠_∑d
;

381 
	mdïth
;

382 
	mbyãs_≥r_löe
;

383 
	mbôs_≥r_pixñ
;

384 
	mªd_mask
;

385 
	mgªí_mask
;

386 
	mblue_mask
;

387 
XPoöãr
 
	mobd©a
;

388 
	sfuncs
 {

389 
	m_XImage
 *(*
	m¸óã_image
)(

390 
	m_XDi•œy
* ,

391 
	mVisuÆ
* ,

400 (*
	mde°roy_image
Ë(
	m_XImage
 *);

401 (*
	mgë_pixñ
Ë(
	m_XImage
 *, , );

402 (*
	mput_pixñ
Ë(
	m_XImage
 *, , , );

403 
	m_XImage
 *(*
	msub_image
)(_XImage *, , , , );

404 (*
	madd_pixñ
Ë(
	m_XImage
 *, );

405 } 
	mf
;

406 } 
	tXImage
;

412 
	mx
, 
	my
;

413 
	mwidth
, 
	mheight
;

414 
	mb‹dî_width
;

415 
Wödow
 
	msiblög
;

416 
	m°ack_mode
;

417 } 
	tXWödowCh™ges
;

423 
	mpixñ
;

424 
	mªd
, 
	mgªí
, 
	mblue
;

425 
	mÊags
;

426 
	m∑d
;

427 } 
	tXCﬁ‹
;

435 
	mx1
, 
	my1
, 
	mx2
, 
	my2
;

436 } 
	tXSegmít
;

439 
	mx
, 
	my
;

440 } 
	tXPoöt
;

443 
	mx
, 
	my
;

444 
	mwidth
, 
	mheight
;

445 } 
	tXRe˘™gÀ
;

448 
	mx
, 
	my
;

449 
	mwidth
, 
	mheight
;

450 
	m™gÀ1
, 
	m™gÀ2
;

451 } 
	tXArc
;

457 
	mkey_˛ick_≥r˚¡
;

458 
	mbñl_≥r˚¡
;

459 
	mbñl_pôch
;

460 
	mbñl_duøti⁄
;

461 
	mÀd
;

462 
	mÀd_mode
;

463 
	mkey
;

464 
	mauto_ª≥©_mode
;

465 } 
	tXKeybﬂrdC⁄åﬁ
;

470 
	mkey_˛ick_≥r˚¡
;

471 
	mbñl_≥r˚¡
;

472 
	mbñl_pôch
, 
	mbñl_duøti⁄
;

473 
	mÀd_mask
;

474 
	mglobÆ_auto_ª≥©
;

475 
	mauto_ª≥©s
[32];

476 } 
	tXKeybﬂrdSèã
;

481 
Time
 
	mtime
;

482 
	mx
, 
	my
;

483 } 
	tXTimeCo‹d
;

488 
	mmax_key≥rmod
;

489 
KeyCode
 *
	mmodifõrm≠
;

490 } 
	tXModifõrKeym≠
;

498 #i‚de‡
XLIB_ILLEGAL_ACCESS


499 
_XDi•œy
 
	tDi•œy
;

502 
	g_XPriv©e
;

503 
	g_XrmHashBuckëRec
;

506 #ifde‡
XLIB_ILLEGAL_ACCESS


507 
	t_XDi•œy


510 
XExtD©a
 *
	gext_d©a
;

511 
_XPriv©e
 *
	g¥iv©e1
;

512 
	gfd
;

513 
	g¥iv©e2
;

514 
	g¥Ÿo_maj‹_vîsi⁄
;

515 
	g¥Ÿo_mö‹_vîsi⁄
;

516 *
	gvíd‹
;

517 
XID
 
	g¥iv©e3
;

518 
XID
 
	g¥iv©e4
;

519 
XID
 
	g¥iv©e5
;

520 
	g¥iv©e6
;

521 
XID
 (*
ªsour˚_Æloc
)(

522 
	g_XDi•œy
*

524 
	gbyã_‹dî
;

525 
	gbôm≠_unô
;

526 
	gbôm≠_∑d
;

527 
	gbôm≠_bô_‹dî
;

528 
	gnf‹m©s
;

529 
S¸ìnF‹m©
 *
	gpixm≠_f‹m©
;

530 
	g¥iv©e8
;

531 
	gªÀa£
;

532 
_XPriv©e
 *
	g¥iv©e9
, *
	g¥iv©e10
;

533 
	gqÀn
;

534 
	gœ°_ªque°_ªad
;

535 
	gªque°
;

536 
XPoöãr
 
	g¥iv©e11
;

537 
XPoöãr
 
	g¥iv©e12
;

538 
XPoöãr
 
	g¥iv©e13
;

539 
XPoöãr
 
	g¥iv©e14
;

540 
	gmax_ªque°_size
;

541 
_XrmHashBuckëRec
 *
	gdb
;

542 (*
	g¥iv©e15
)(

543 
	g_XDi•œy
*

545 *
	gdi•œy_«me
;

546 
	gdeÁu…_s¸ìn
;

547 
	gns¸ìns
;

548 
S¸ìn
 *
	gs¸ìns
;

549 
	gmŸi⁄_buf„r
;

550 
	g¥iv©e16
;

551 
	gmö_keycode
;

552 
	gmax_keycode
;

553 
XPoöãr
 
	g¥iv©e17
;

554 
XPoöãr
 
	g¥iv©e18
;

555 
	g¥iv©e19
;

556 *
	gxdeÁu…s
;

559 #ifde‡
	tXLIB_ILLEGAL_ACCESS


560 
	tDi•œy
,

562 *
	t_XPrivDi•œy
;

564 #unde‡
_XEVENT_


565 #i‚de‡
_XEVENT_


570 
	mty≥
;

571 
	m£rül
;

572 
Boﬁ
 
	m£nd_evít
;

573 
Di•œy
 *
	mdi•œy
;

574 
Wödow
 
	mwödow
;

575 
Wödow
 
	mroŸ
;

576 
Wödow
 
	msubwödow
;

577 
Time
 
	mtime
;

578 
	mx
, 
	my
;

579 
	mx_roŸ
, 
	my_roŸ
;

580 
	m°©e
;

581 
	mkeycode
;

582 
Boﬁ
 
	mßme_s¸ìn
;

583 } 
	tXKeyEvít
;

584 
XKeyEvít
 
	tXKeyPªs£dEvít
;

585 
XKeyEvít
 
	tXKeyRñó£dEvít
;

588 
	mty≥
;

589 
	m£rül
;

590 
Boﬁ
 
	m£nd_evít
;

591 
Di•œy
 *
	mdi•œy
;

592 
Wödow
 
	mwödow
;

593 
Wödow
 
	mroŸ
;

594 
Wödow
 
	msubwödow
;

595 
Time
 
	mtime
;

596 
	mx
, 
	my
;

597 
	mx_roŸ
, 
	my_roŸ
;

598 
	m°©e
;

599 
	mbuâ⁄
;

600 
Boﬁ
 
	mßme_s¸ìn
;

601 } 
	tXBuâ⁄Evít
;

602 
XBuâ⁄Evít
 
	tXBuâ⁄Pªs£dEvít
;

603 
XBuâ⁄Evít
 
	tXBuâ⁄Rñó£dEvít
;

606 
	mty≥
;

607 
	m£rül
;

608 
Boﬁ
 
	m£nd_evít
;

609 
Di•œy
 *
	mdi•œy
;

610 
Wödow
 
	mwödow
;

611 
Wödow
 
	mroŸ
;

612 
Wödow
 
	msubwödow
;

613 
Time
 
	mtime
;

614 
	mx
, 
	my
;

615 
	mx_roŸ
, 
	my_roŸ
;

616 
	m°©e
;

617 
	mis_höt
;

618 
Boﬁ
 
	mßme_s¸ìn
;

619 } 
	tXMŸi⁄Evít
;

620 
XMŸi⁄Evít
 
	tXPoöãrMovedEvít
;

623 
	mty≥
;

624 
	m£rül
;

625 
Boﬁ
 
	m£nd_evít
;

626 
Di•œy
 *
	mdi•œy
;

627 
Wödow
 
	mwödow
;

628 
Wödow
 
	mroŸ
;

629 
Wödow
 
	msubwödow
;

630 
Time
 
	mtime
;

631 
	mx
, 
	my
;

632 
	mx_roŸ
, 
	my_roŸ
;

633 
	mmode
;

634 
	mdëaû
;

639 
Boﬁ
 
	mßme_s¸ìn
;

640 
Boﬁ
 
	mfocus
;

641 
	m°©e
;

642 } 
	tXCrossögEvít
;

643 
XCrossögEvít
 
	tXE¡îWödowEvít
;

644 
XCrossögEvít
 
	tXLóveWödowEvít
;

647 
	mty≥
;

648 
	m£rül
;

649 
Boﬁ
 
	m£nd_evít
;

650 
Di•œy
 *
	mdi•œy
;

651 
Wödow
 
	mwödow
;

652 
	mmode
;

654 
	mdëaû
;

660 } 
	tXFocusCh™geEvít
;

661 
XFocusCh™geEvít
 
	tXFocusInEvít
;

662 
XFocusCh™geEvít
 
	tXFocusOutEvít
;

666 
	mty≥
;

667 
	m£rül
;

668 
Boﬁ
 
	m£nd_evít
;

669 
Di•œy
 *
	mdi•œy
;

670 
Wödow
 
	mwödow
;

671 
	mkey_ve˘‹
[32];

672 } 
	tXKeym≠Evít
;

675 
	mty≥
;

676 
	m£rül
;

677 
Boﬁ
 
	m£nd_evít
;

678 
Di•œy
 *
	mdi•œy
;

679 
Wödow
 
	mwödow
;

680 
	mx
, 
	my
;

681 
	mwidth
, 
	mheight
;

682 
	mcou¡
;

683 } 
	tXExpo£Evít
;

686 
	mty≥
;

687 
	m£rül
;

688 
Boﬁ
 
	m£nd_evít
;

689 
Di•œy
 *
	mdi•œy
;

690 
DøwabÀ
 
	mdøwabÀ
;

691 
	mx
, 
	my
;

692 
	mwidth
, 
	mheight
;

693 
	mcou¡
;

694 
	mmaj‹_code
;

695 
	mmö‹_code
;

696 } 
	tXGøphicsExpo£Evít
;

699 
	mty≥
;

700 
	m£rül
;

701 
Boﬁ
 
	m£nd_evít
;

702 
Di•œy
 *
	mdi•œy
;

703 
DøwabÀ
 
	mdøwabÀ
;

704 
	mmaj‹_code
;

705 
	mmö‹_code
;

706 } 
	tXNoExpo£Evít
;

709 
	mty≥
;

710 
	m£rül
;

711 
Boﬁ
 
	m£nd_evít
;

712 
Di•œy
 *
	mdi•œy
;

713 
Wödow
 
	mwödow
;

714 
	m°©e
;

715 } 
	tXVisibûôyEvít
;

718 
	mty≥
;

719 
	m£rül
;

720 
Boﬁ
 
	m£nd_evít
;

721 
Di•œy
 *
	mdi•œy
;

722 
Wödow
 
	m∑ª¡
;

723 
Wödow
 
	mwödow
;

724 
	mx
, 
	my
;

725 
	mwidth
, 
	mheight
;

726 
	mb‹dî_width
;

727 
Boﬁ
 
	movîride_ªdúe˘
;

728 } 
	tXCª©eWödowEvít
;

731 
	mty≥
;

732 
	m£rül
;

733 
Boﬁ
 
	m£nd_evít
;

734 
Di•œy
 *
	mdi•œy
;

735 
Wödow
 
	mevít
;

736 
Wödow
 
	mwödow
;

737 } 
	tXDe°royWödowEvít
;

740 
	mty≥
;

741 
	m£rül
;

742 
Boﬁ
 
	m£nd_evít
;

743 
Di•œy
 *
	mdi•œy
;

744 
Wödow
 
	mevít
;

745 
Wödow
 
	mwödow
;

746 
Boﬁ
 
	m‰om_c⁄figuª
;

747 } 
	tXUnm≠Evít
;

750 
	mty≥
;

751 
	m£rül
;

752 
Boﬁ
 
	m£nd_evít
;

753 
Di•œy
 *
	mdi•œy
;

754 
Wödow
 
	mevít
;

755 
Wödow
 
	mwödow
;

756 
Boﬁ
 
	movîride_ªdúe˘
;

757 } 
	tXM≠Evít
;

760 
	mty≥
;

761 
	m£rül
;

762 
Boﬁ
 
	m£nd_evít
;

763 
Di•œy
 *
	mdi•œy
;

764 
Wödow
 
	m∑ª¡
;

765 
Wödow
 
	mwödow
;

766 } 
	tXM≠Reque°Evít
;

769 
	mty≥
;

770 
	m£rül
;

771 
Boﬁ
 
	m£nd_evít
;

772 
Di•œy
 *
	mdi•œy
;

773 
Wödow
 
	mevít
;

774 
Wödow
 
	mwödow
;

775 
Wödow
 
	m∑ª¡
;

776 
	mx
, 
	my
;

777 
Boﬁ
 
	movîride_ªdúe˘
;

778 } 
	tXRï¨ítEvít
;

781 
	mty≥
;

782 
	m£rül
;

783 
Boﬁ
 
	m£nd_evít
;

784 
Di•œy
 *
	mdi•œy
;

785 
Wödow
 
	mevít
;

786 
Wödow
 
	mwödow
;

787 
	mx
, 
	my
;

788 
	mwidth
, 
	mheight
;

789 
	mb‹dî_width
;

790 
Wödow
 
	mabove
;

791 
Boﬁ
 
	movîride_ªdúe˘
;

792 } 
	tXC⁄figuªEvít
;

795 
	mty≥
;

796 
	m£rül
;

797 
Boﬁ
 
	m£nd_evít
;

798 
Di•œy
 *
	mdi•œy
;

799 
Wödow
 
	mevít
;

800 
Wödow
 
	mwödow
;

801 
	mx
, 
	my
;

802 } 
	tXGøvôyEvít
;

805 
	mty≥
;

806 
	m£rül
;

807 
Boﬁ
 
	m£nd_evít
;

808 
Di•œy
 *
	mdi•œy
;

809 
Wödow
 
	mwödow
;

810 
	mwidth
, 
	mheight
;

811 } 
	tXResizeReque°Evít
;

814 
	mty≥
;

815 
	m£rül
;

816 
Boﬁ
 
	m£nd_evít
;

817 
Di•œy
 *
	mdi•œy
;

818 
Wödow
 
	m∑ª¡
;

819 
Wödow
 
	mwödow
;

820 
	mx
, 
	my
;

821 
	mwidth
, 
	mheight
;

822 
	mb‹dî_width
;

823 
Wödow
 
	mabove
;

824 
	mdëaû
;

825 
	mvÆue_mask
;

826 } 
	tXC⁄figuªReque°Evít
;

829 
	mty≥
;

830 
	m£rül
;

831 
Boﬁ
 
	m£nd_evít
;

832 
Di•œy
 *
	mdi•œy
;

833 
Wödow
 
	mevít
;

834 
Wödow
 
	mwödow
;

835 
	m∂a˚
;

836 } 
	tXCúcuœãEvít
;

839 
	mty≥
;

840 
	m£rül
;

841 
Boﬁ
 
	m£nd_evít
;

842 
Di•œy
 *
	mdi•œy
;

843 
Wödow
 
	m∑ª¡
;

844 
Wödow
 
	mwödow
;

845 
	m∂a˚
;

846 } 
	tXCúcuœãReque°Evít
;

849 
	mty≥
;

850 
	m£rül
;

851 
Boﬁ
 
	m£nd_evít
;

852 
Di•œy
 *
	mdi•œy
;

853 
Wödow
 
	mwödow
;

854 
Atom
 
	m©om
;

855 
Time
 
	mtime
;

856 
	m°©e
;

857 } 
	tXPr›îtyEvít
;

860 
	mty≥
;

861 
	m£rül
;

862 
Boﬁ
 
	m£nd_evít
;

863 
Di•œy
 *
	mdi•œy
;

864 
Wödow
 
	mwödow
;

865 
Atom
 
	m£À˘i⁄
;

866 
Time
 
	mtime
;

867 } 
	tXSñe˘i⁄CÀ¨Evít
;

870 
	mty≥
;

871 
	m£rül
;

872 
Boﬁ
 
	m£nd_evít
;

873 
Di•œy
 *
	mdi•œy
;

874 
Wödow
 
	mow√r
;

875 
Wödow
 
	mªque°‹
;

876 
Atom
 
	m£À˘i⁄
;

877 
Atom
 
	mèrgë
;

878 
Atom
 
	m¥›îty
;

879 
Time
 
	mtime
;

880 } 
	tXSñe˘i⁄Reque°Evít
;

883 
	mty≥
;

884 
	m£rül
;

885 
Boﬁ
 
	m£nd_evít
;

886 
Di•œy
 *
	mdi•œy
;

887 
Wödow
 
	mªque°‹
;

888 
Atom
 
	m£À˘i⁄
;

889 
Atom
 
	mèrgë
;

890 
Atom
 
	m¥›îty
;

891 
Time
 
	mtime
;

892 } 
	tXSñe˘i⁄Evít
;

895 
	mty≥
;

896 
	m£rül
;

897 
Boﬁ
 
	m£nd_evít
;

898 
Di•œy
 *
	mdi•œy
;

899 
Wödow
 
	mwödow
;

900 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

901 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

902 
Boﬁ
 
	mc_√w
;

904 
Boﬁ
 
	m√w
;

906 
	m°©e
;

907 } 
	tXCﬁ‹m≠Evít
;

910 
	mty≥
;

911 
	m£rül
;

912 
Boﬁ
 
	m£nd_evít
;

913 
Di•œy
 *
	mdi•œy
;

914 
Wödow
 
	mwödow
;

915 
Atom
 
	mmesßge_ty≥
;

916 
	mf‹m©
;

918 
	mb
[20];

919 
	ms
[10];

920 
	ml
[5];

921 } 
	md©a
;

922 } 
	tXClõ¡MesßgeEvít
;

925 
	mty≥
;

926 
	m£rül
;

927 
Boﬁ
 
	m£nd_evít
;

928 
Di•œy
 *
	mdi•œy
;

929 
Wödow
 
	mwödow
;

930 
	mªque°
;

932 
	mfú°_keycode
;

933 
	mcou¡
;

934 } 
	tXM≠pögEvít
;

937 
	mty≥
;

938 
Di•œy
 *
	mdi•œy
;

939 
XID
 
	mªsour˚id
;

940 
	m£rül
;

941 
	mîr‹_code
;

942 
	mªque°_code
;

943 
	mmö‹_code
;

944 } 
	tXEº‹Evít
;

947 
	mty≥
;

948 
	m£rül
;

949 
Boﬁ
 
	m£nd_evít
;

950 
Di•œy
 *
	mdi•œy
;

951 
Wödow
 
	mwödow
;

952 } 
	tXAnyEvít
;

962 
	mty≥
;

963 
	m£rül
;

964 
Boﬁ
 
	m£nd_evít
;

965 
Di•œy
 *
	mdi•œy
;

966 
	mexãnsi⁄
;

967 
	mevty≥
;

968 } 
	tXGíîicEvít
;

971 
	mty≥
;

972 
	m£rül
;

973 
Boﬁ
 
	m£nd_evít
;

974 
Di•œy
 *
	mdi•œy
;

975 
	mexãnsi⁄
;

976 
	mevty≥
;

977 
	mcookõ
;

978 *
	md©a
;

979 } 
	tXGíîicEvítCookõ
;

985 
	u_XEvít
 {

986 
	mty≥
;

987 
XAnyEvít
 
	mx™y
;

988 
XKeyEvít
 
	mxkey
;

989 
XBuâ⁄Evít
 
	mxbuâ⁄
;

990 
XMŸi⁄Evít
 
	mxmŸi⁄
;

991 
XCrossögEvít
 
	mx¸ossög
;

992 
XFocusCh™geEvít
 
	mxfocus
;

993 
XExpo£Evít
 
	mxexpo£
;

994 
XGøphicsExpo£Evít
 
	mxgøphic£xpo£
;

995 
XNoExpo£Evít
 
	mxn€xpo£
;

996 
XVisibûôyEvít
 
	mxvisibûôy
;

997 
XCª©eWödowEvít
 
	mx¸óãwödow
;

998 
XDe°royWödowEvít
 
	mxde°roywödow
;

999 
XUnm≠Evít
 
	mxunm≠
;

1000 
XM≠Evít
 
	mxm≠
;

1001 
XM≠Reque°Evít
 
	mxm≠ªque°
;

1002 
XRï¨ítEvít
 
	mxª∑ª¡
;

1003 
XC⁄figuªEvít
 
	mxc⁄figuª
;

1004 
XGøvôyEvít
 
	mxgøvôy
;

1005 
XResizeReque°Evít
 
	mxªsizîeque°
;

1006 
XC⁄figuªReque°Evít
 
	mxc⁄figuªªque°
;

1007 
XCúcuœãEvít
 
	mxcúcuœã
;

1008 
XCúcuœãReque°Evít
 
	mxcúcuœãªque°
;

1009 
XPr›îtyEvít
 
	mx¥›îty
;

1010 
XSñe˘i⁄CÀ¨Evít
 
	mx£À˘i⁄˛ór
;

1011 
XSñe˘i⁄Reque°Evít
 
	mx£À˘i⁄ªque°
;

1012 
XSñe˘i⁄Evít
 
	mx£À˘i⁄
;

1013 
XCﬁ‹m≠Evít
 
	mxcﬁ‹m≠
;

1014 
XClõ¡MesßgeEvít
 
	mx˛õ¡
;

1015 
XM≠pögEvít
 
	mxm≠pög
;

1016 
XEº‹Evít
 
	mxîr‹
;

1017 
XKeym≠Evít
 
	mxkeym≠
;

1018 
XGíîicEvít
 
	mxgíîic
;

1019 
XGíîicEvítCookõ
 
	mxcookõ
;

1020 
	m∑d
[24];

1021 } 
	tXEvít
;

1024 
	#XAŒocID
(
dpy
Ë((*((
_XPrivDi•œy
)dpy)->
ªsour˚_Æloc
)((dpy)))

	)

1030 
	mlbórög
;

1031 
	mrbórög
;

1032 
	mwidth
;

1033 
	mas˚¡
;

1034 
	mdes˚¡
;

1035 
	m©åibuãs
;

1036 } 
	tXCh¨Såu˘
;

1043 
Atom
 
	m«me
;

1044 
	mˇrd32
;

1045 } 
	tXF⁄tPr›
;

1048 
XExtD©a
 *
	mext_d©a
;

1049 
F⁄t
 
	mfid
;

1050 
	mdúe˘i⁄
;

1051 
	mmö_ch¨_‹_byã2
;

1052 
	mmax_ch¨_‹_byã2
;

1053 
	mmö_byã1
;

1054 
	mmax_byã1
;

1055 
Boﬁ
 
	mÆl_ch¨s_exi°
;

1056 
	mdeÁu…_ch¨
;

1057 
	mn_¥›îtõs
;

1058 
XF⁄tPr›
 *
	m¥›îtõs
;

1059 
XCh¨Såu˘
 
	mmö_bounds
;

1060 
XCh¨Såu˘
 
	mmax_bounds
;

1061 
XCh¨Såu˘
 *
	m≥r_ch¨
;

1062 
	mas˚¡
;

1063 
	mdes˚¡
;

1064 } 
	tXF⁄tSåu˘
;

1070 *
	mch¨s
;

1071 
	mnch¨s
;

1072 
	mdñè
;

1073 
F⁄t
 
	mf⁄t
;

1074 } 
	tXTextIãm
;

1077 
	mbyã1
;

1078 
	mbyã2
;

1079 } 
	tXCh¨2b
;

1082 
XCh¨2b
 *
	mch¨s
;

1083 
	mnch¨s
;

1084 
	mdñè
;

1085 
F⁄t
 
	mf⁄t
;

1086 } 
	tXTextIãm16
;

1089 uni⁄ { 
Di•œy
 *
	mdi•œy
;

1090 
GC
 
	mgc
;

1091 
VisuÆ
 *
	mvisuÆ
;

1092 
S¸ìn
 *
	ms¸ìn
;

1093 
S¸ìnF‹m©
 *
	mpixm≠_f‹m©
;

1094 
XF⁄tSåu˘
 *
	mf⁄t
; } 
	tXED©aObje˘
;

1097 
XRe˘™gÀ
 
	mmax_ök_exã¡
;

1098 
XRe˘™gÀ
 
	mmax_logiˇl_exã¡
;

1099 } 
	tXF⁄tSëExã¡s
;

1105 
_XOM
 *
	tXOM
;

1106 
_XOC
 *
	tXOC
, *
	tXF⁄tSë
;

1109 *
	mch¨s
;

1110 
	mnch¨s
;

1111 
	mdñè
;

1112 
XF⁄tSë
 
	mf⁄t_£t
;

1113 } 
	tXmbTextIãm
;

1116 
wch¨_t
 *
	mch¨s
;

1117 
	mnch¨s
;

1118 
	mdñè
;

1119 
XF⁄tSë
 
	mf⁄t_£t
;

1120 } 
	tXwcTextIãm
;

1122 
	#XNRequúedCh¨Së
 "ªquúedCh¨Së"

	)

1123 
	#XNQuîyOrõ¡©i⁄
 "quîyOrõ¡©i⁄"

	)

1124 
	#XNBa£F⁄tName
 "ba£F⁄tName"

	)

1125 
	#XNOMAutom©ic
 "omAutom©ic"

	)

1126 
	#XNMissögCh¨Së
 "missögCh¨Së"

	)

1127 
	#XNDeÁu…Såög
 "deÁu…Såög"

	)

1128 
	#XNOrõ¡©i⁄
 "‹õ¡©i⁄"

	)

1129 
	#XNDúe˘i⁄ÆDïídítDøwög
 "dúe˘i⁄ÆDïídítDøwög"

	)

1130 
	#XNC⁄ãxtuÆDøwög
 "c⁄ãxtuÆDøwög"

	)

1131 
	#XNF⁄tInfo
 "f⁄tInfo"

	)

1134 
	mch¨£t_cou¡
;

1135 **
	mch¨£t_li°
;

1136 } 
	tXOMCh¨SëLi°
;

1139 
	mXOMOrõ¡©i⁄_LTR_TTB
,

1140 
	mXOMOrõ¡©i⁄_RTL_TTB
,

1141 
	mXOMOrõ¡©i⁄_TTB_LTR
,

1142 
	mXOMOrõ¡©i⁄_TTB_RTL
,

1143 
	mXOMOrõ¡©i⁄_C⁄ãxt


1144 } 
	tXOrõ¡©i⁄
;

1147 
	mnum_‹õ¡©i⁄
;

1148 
XOrõ¡©i⁄
 *
	m‹õ¡©i⁄
;

1149 } 
	tXOMOrõ¡©i⁄
;

1152 
	mnum_f⁄t
;

1153 
XF⁄tSåu˘
 **
	mf⁄t_°ru˘_li°
;

1154 **
	mf⁄t_«me_li°
;

1155 } 
	tXOMF⁄tInfo
;

1157 
_XIM
 *
	tXIM
;

1158 
_XIC
 *
	tXIC
;

1160 (*
	tXIMProc
)(

1161 
	tXIM
,

1162 
	tXPoöãr
,

1163 
	tXPoöãr


1166 
	$Boﬁ
 (*
	tXICProc
)(

1167 
	tXIC
,

1168 
	tXPoöãr
,

1169 
	tXPoöãr


1172 (*
	tXIDProc
)(

1173 
	tDi•œy
*,

1174 
	tXPoöãr
,

1175 
	tXPoöãr


1178 
	tXIMStyÀ
;

1181 
cou¡_°yÀs
;

1182 
XIMStyÀ
 *
suµ‹ãd_°yÀs
;

1183 } 
	tXIMStyÀs
;

1185 
	#XIMPªedôAªa
 0x0001L

	)

1186 
	#XIMPªedôCÆlbacks
 0x0002L

	)

1187 
	#XIMPªedôPosôi⁄
 0x0004L

	)

1188 
	#XIMPªedôNŸhög
 0x0008L

	)

1189 
	#XIMPªedôN⁄e
 0x0010L

	)

1190 
	#XIMSètusAªa
 0x0100L

	)

1191 
	#XIMSètusCÆlbacks
 0x0200L

	)

1192 
	#XIMSètusNŸhög
 0x0400L

	)

1193 
	#XIMSètusN⁄e
 0x0800L

	)

1195 
	#XNVaNe°edLi°
 "XNVaNe°edLi°"

	)

1196 
	#XNQuîyI≈utStyÀ
 "quîyI≈utStyÀ"

	)

1197 
	#XNClõ¡Wödow
 "˛õ¡Wödow"

	)

1198 
	#XNI≈utStyÀ
 "öputStyÀ"

	)

1199 
	#XNFocusWödow
 "focusWödow"

	)

1200 
	#XNResour˚Name
 "ªsour˚Name"

	)

1201 
	#XNResour˚Cœss
 "ªsour˚Cœss"

	)

1202 
	#XNGeomëryCÆlback
 "geomëryCÆlback"

	)

1203 
	#XNDe°royCÆlback
 "de°royCÆlback"

	)

1204 
	#XNFûãrEvíts
 "fûãrEvíts"

	)

1205 
	#XNPªedôSèπCÆlback
 "¥ìdôSèπCÆlback"

	)

1206 
	#XNPªedôD⁄eCÆlback
 "¥ìdôD⁄eCÆlback"

	)

1207 
	#XNPªedôDøwCÆlback
 "¥ìdôDøwCÆlback"

	)

1208 
	#XNPªedôC¨ëCÆlback
 "¥ìdôC¨ëCÆlback"

	)

1209 
	#XNPªedôSèãNŸifyCÆlback
 "¥ìdôSèãNŸifyCÆlback"

	)

1210 
	#XNPªedôAâribuãs
 "¥ìdôAâribuãs"

	)

1211 
	#XNSètusSèπCÆlback
 "°©usSèπCÆlback"

	)

1212 
	#XNSètusD⁄eCÆlback
 "°©usD⁄eCÆlback"

	)

1213 
	#XNSètusDøwCÆlback
 "°©usDøwCÆlback"

	)

1214 
	#XNSètusAâribuãs
 "°©usAâribuãs"

	)

1215 
	#XNAªa
 "¨ó"

	)

1216 
	#XNAªaNìded
 "¨óNìded"

	)

1217 
	#XNSpŸLoˇti⁄
 "•ŸLoˇti⁄"

	)

1218 
	#XNCﬁ‹m≠
 "cﬁ‹M≠"

	)

1219 
	#XNStdCﬁ‹m≠
 "°dCﬁ‹M≠"

	)

1220 
	#XNF‹eground
 "f‹eground"

	)

1221 
	#XNBackground
 "background"

	)

1222 
	#XNBackgroundPixm≠
 "backgroundPixm≠"

	)

1223 
	#XNF⁄tSë
 "f⁄tSë"

	)

1224 
	#XNLöeS∑˚
 "löeS∑˚"

	)

1225 
	#XNCurs‹
 "curs‹"

	)

1227 
	#XNQuîyIMVÆuesLi°
 "quîyIMVÆuesLi°"

	)

1228 
	#XNQuîyICVÆuesLi°
 "quîyICVÆuesLi°"

	)

1229 
	#XNVisibÀPosôi⁄
 "visibÀPosôi⁄"

	)

1230 
	#XNR6PªedôCÆlback
 "r6PªedôCÆlback"

	)

1231 
	#XNSåögC⁄vîsi⁄CÆlback
 "°rögC⁄vîsi⁄CÆlback"

	)

1232 
	#XNSåögC⁄vîsi⁄
 "°rögC⁄vîsi⁄"

	)

1233 
	#XNRe£tSèã
 "ª£tSèã"

	)

1234 
	#XNHŸKey
 "hŸKey"

	)

1235 
	#XNHŸKeySèã
 "hŸKeySèã"

	)

1236 
	#XNPªedôSèã
 "¥ìdôSèã"

	)

1237 
	#XNSï¨©‹ofNe°edLi°
 "£∑øt‹ofNe°edLi°"

	)

1239 
	#XBuf„rOvîÊow
 -1

	)

1240 
	#XLookupN⁄e
 1

	)

1241 
	#XLookupCh¨s
 2

	)

1242 
	#XLookupKeySym
 3

	)

1243 
	#XLookupBŸh
 4

	)

1245 *
	tXVaNe°edLi°
;

1248 
XPoöãr
 
˛õ¡_d©a
;

1249 
XIMProc
 
ˇŒback
;

1250 } 
	tXIMCÆlback
;

1253 
XPoöãr
 
˛õ¡_d©a
;

1254 
XICProc
 
ˇŒback
;

1255 } 
	tXICCÆlback
;

1257 
	tXIMFìdback
;

1259 
	#XIMRevî£
 1L

	)

1260 
	#XIMUndîlöe
 (1L<<1)

	)

1261 
	#XIMHighlight
 (1L<<2)

	)

1262 
	#XIMPrim¨y
 (1L<<5)

	)

1263 
	#XIMSec⁄d¨y
 (1L<<6)

	)

1264 
	#XIMTîtüry
 (1L<<7)

	)

1265 
	#XIMVisibÀToF‹w¨d
 (1L<<8)

	)

1266 
	#XIMVisibÀToBackw‹d
 (1L<<9)

	)

1267 
	#XIMVisibÀToCíãr
 (1L<<10)

	)

1269 
	s_XIMText
 {

1270 
Àngth
;

1271 
XIMFìdback
 *
„edback
;

1272 
Boﬁ
 
ícodög_is_wch¨
;

1274 *
mu…i_byã
;

1275 
wch¨_t
 *
wide_ch¨
;

1276 } 
°rög
;

1277 } 
	tXIMText
;

1279 
	tXIMPªedôSèã
;

1281 
	#XIMPªedôUnKnown
 0L

	)

1282 
	#XIMPªedôE«bÀ
 1L

	)

1283 
	#XIMPªedôDißbÀ
 (1L<<1)

	)

1285 
	s_XIMPªedôSèãNŸifyCÆlbackSåu˘
 {

1286 
XIMPªedôSèã
 
°©e
;

1287 } 
	tXIMPªedôSèãNŸifyCÆlbackSåu˘
;

1289 
	tXIMRe£tSèã
;

1291 
	#XIMInôülSèã
 1L

	)

1292 
	#XIMPª£rveSèã
 (1L<<1)

	)

1294 
	tXIMSåögC⁄vîsi⁄Fìdback
;

1296 
	#XIMSåögC⁄vîsi⁄Le·Edge
 (0x00000001)

	)

1297 
	#XIMSåögC⁄vîsi⁄RightEdge
 (0x00000002)

	)

1298 
	#XIMSåögC⁄vîsi⁄T›Edge
 (0x00000004)

	)

1299 
	#XIMSåögC⁄vîsi⁄BŸtomEdge
 (0x00000008)

	)

1300 
	#XIMSåögC⁄vîsi⁄C⁄˚Æed
 (0x00000010)

	)

1301 
	#XIMSåögC⁄vîsi⁄Wøµed
 (0x00000020)

	)

1303 
	s_XIMSåögC⁄vîsi⁄Text
 {

1304 
Àngth
;

1305 
XIMSåögC⁄vîsi⁄Fìdback
 *
„edback
;

1306 
Boﬁ
 
ícodög_is_wch¨
;

1308 *
mbs
;

1309 
wch¨_t
 *
wcs
;

1310 } 
°rög
;

1311 } 
	tXIMSåögC⁄vîsi⁄Text
;

1313 
	tXIMSåögC⁄vîsi⁄Posôi⁄
;

1315 
	tXIMSåögC⁄vîsi⁄Ty≥
;

1317 
	#XIMSåögC⁄vîsi⁄Buf„r
 (0x0001)

	)

1318 
	#XIMSåögC⁄vîsi⁄Löe
 (0x0002)

	)

1319 
	#XIMSåögC⁄vîsi⁄W‹d
 (0x0003)

	)

1320 
	#XIMSåögC⁄vîsi⁄Ch¨
 (0x0004)

	)

1322 
	tXIMSåögC⁄vîsi⁄O≥øti⁄
;

1324 
	#XIMSåögC⁄vîsi⁄Sub°ôuti⁄
 (0x0001)

	)

1325 
	#XIMSåögC⁄vîsi⁄RërõvÆ
 (0x0002)

	)

1328 
XIMF‹w¨dCh¨
, 
XIMBackw¨dCh¨
,

1329 
XIMF‹w¨dW‹d
, 
XIMBackw¨dW‹d
,

1330 
XIMC¨ëUp
, 
XIMC¨ëDown
,

1331 
XIMNextLöe
, 
XIMPªviousLöe
,

1332 
XIMLöeSèπ
, 
XIMLöeEnd
,

1333 
XIMAbsﬁuãPosôi⁄
,

1334 
XIMD⁄tCh™ge


1335 } 
	tXIMC¨ëDúe˘i⁄
;

1337 
	s_XIMSåögC⁄vîsi⁄CÆlbackSåu˘
 {

1338 
XIMSåögC⁄vîsi⁄Posôi⁄
 
posôi⁄
;

1339 
XIMC¨ëDúe˘i⁄
 
dúe˘i⁄
;

1340 
XIMSåögC⁄vîsi⁄O≥øti⁄
 
›î©i⁄
;

1341 
Á˘‹
;

1342 
XIMSåögC⁄vîsi⁄Text
 *
ãxt
;

1343 } 
	tXIMSåögC⁄vîsi⁄CÆlbackSåu˘
;

1345 
	s_XIMPªedôDøwCÆlbackSåu˘
 {

1346 
ˇªt
;

1347 
chg_fú°
;

1348 
chg_Àngth
;

1349 
XIMText
 *
ãxt
;

1350 } 
	tXIMPªedôDøwCÆlbackSåu˘
;

1353 
XIMIsInvisibÀ
,

1354 
XIMIsPrim¨y
,

1355 
XIMIsSec⁄d¨y


1356 } 
	tXIMC¨ëStyÀ
;

1358 
	s_XIMPªedôC¨ëCÆlbackSåu˘
 {

1359 
posôi⁄
;

1360 
XIMC¨ëDúe˘i⁄
 
dúe˘i⁄
;

1361 
XIMC¨ëStyÀ
 
°yÀ
;

1362 } 
	tXIMPªedôC¨ëCÆlbackSåu˘
;

1365 
XIMTextTy≥
,

1366 
XIMBôm≠Ty≥


1367 } 
	tXIMSètusD©aTy≥
;

1369 
	s_XIMSètusDøwCÆlbackSåu˘
 {

1370 
XIMSètusD©aTy≥
 
ty≥
;

1372 
XIMText
 *
ãxt
;

1373 
Pixm≠
 
bôm≠
;

1374 } 
d©a
;

1375 } 
	tXIMSètusDøwCÆlbackSåu˘
;

1377 
	s_XIMHŸKeyTriggî
 {

1378 
KeySym
 
keysym
;

1379 
modifõr
;

1380 
modifõr_mask
;

1381 } 
	tXIMHŸKeyTriggî
;

1383 
	s_XIMHŸKeyTriggîs
 {

1384 
num_hŸ_key
;

1385 
XIMHŸKeyTriggî
 *
key
;

1386 } 
	tXIMHŸKeyTriggîs
;

1388 
	tXIMHŸKeySèã
;

1390 
	#XIMHŸKeySèãON
 (0x0001L)

	)

1391 
	#XIMHŸKeySèãOFF
 (0x0002L)

	)

1394 
cou¡_vÆues
;

1395 **
suµ‹ãd_vÆues
;

1396 } 
	tXIMVÆuesLi°
;

1398 
_XFUNCPROTOBEGIN


1400 #i‡
	`deföed
(
WIN32
Ë&& !deföed(
_XLIBINT_
)

1401 
	#_Xdebug
 (*
_Xdebug_p
)

	)

1404 
_Xdebug
;

1406 
XF⁄tSåu˘
 *
	`XLﬂdQuîyF⁄t
(

1407 
Di•œy
* ,

1408 
_Xc⁄°
 *

1411 
XF⁄tSåu˘
 *
	`XQuîyF⁄t
(

1412 
Di•œy
* ,

1413 
XID


1417 
XTimeCo‹d
 *
	`XGëMŸi⁄Evíts
(

1418 
Di•œy
* ,

1419 
Wödow
 ,

1420 
Time
 ,

1421 
Time
 ,

1425 
XModifõrKeym≠
 *
	`XDñëeModifõrm≠E¡ry
(

1426 
XModifõrKeym≠
* ,

1427 #i‡
NìdWidePrŸŸy≥s


1430 
KeyCode
 ,

1435 
XModifõrKeym≠
 *
	`XGëModifõrM≠pög
(

1436 
Di•œy
*

1439 
XModifõrKeym≠
 *
	`XIn£πModifõrm≠E¡ry
(

1440 
XModifõrKeym≠
* ,

1441 #i‡
NìdWidePrŸŸy≥s


1444 
KeyCode
 ,

1449 
XModifõrKeym≠
 *
	`XNewModifõrm≠
(

1453 
XImage
 *
	`XCª©eImage
(

1454 
Di•œy
* ,

1455 
VisuÆ
* ,

1465 
Sètus
 
	`XInôImage
(

1466 
XImage
*

1468 
XImage
 *
	`XGëImage
(

1469 
Di•œy
* ,

1470 
DøwabÀ
 ,

1478 
XImage
 *
	`XGëSubImage
(

1479 
Di•œy
* ,

1480 
DøwabÀ
 ,

1487 
XImage
* ,

1495 
Di•œy
 *
	`XO≥nDi•œy
(

1496 
_Xc⁄°
 *

1499 
	`XrmInôülize
(

1503 *
	`XFëchByãs
(

1504 
Di•œy
* ,

1507 *
	`XFëchBuf„r
(

1508 
Di•œy
* ,

1512 *
	`XGëAtomName
(

1513 
Di•œy
* ,

1514 
Atom


1516 
Sètus
 
	`XGëAtomNames
(

1517 
Di•œy
* ,

1518 
Atom
* ,

1522 *
	`XGëDeÁu…
(

1523 
Di•œy
* ,

1524 
_Xc⁄°
 * ,

1525 
_Xc⁄°
 *

1527 *
	`XDi•œyName
(

1528 
_Xc⁄°
 *

1530 *
	`XKeysymToSåög
(

1531 
KeySym


1534 (*
	$XSynchr⁄ize
(

1535 
Di•œy
* ,

1536 
Boﬁ


1538 
Di•œy
*

1540 (*
	`XSëA·îFun˘i⁄
(

1541 
Di•œy
* ,

1543 
Di•œy
*

1546 
Di•œy
*

1548 
Atom
 
	`XI¡înAtom
(

1549 
Di•œy
* ,

1550 
_Xc⁄°
 * ,

1551 
Boﬁ


1553 
Sètus
 
	`XI¡înAtoms
(

1554 
Di•œy
* ,

1557 
Boﬁ
 ,

1558 
Atom
*

1560 
Cﬁ‹m≠
 
	`XC›yCﬁ‹m≠AndFªe
(

1561 
Di•œy
* ,

1562 
Cﬁ‹m≠


1564 
Cﬁ‹m≠
 
	`XCª©eCﬁ‹m≠
(

1565 
Di•œy
* ,

1566 
Wödow
 ,

1567 
VisuÆ
* ,

1570 
Curs‹
 
	`XCª©ePixm≠Curs‹
(

1571 
Di•œy
* ,

1572 
Pixm≠
 ,

1573 
Pixm≠
 ,

1574 
XCﬁ‹
* ,

1575 
XCﬁ‹
* ,

1579 
Curs‹
 
	`XCª©eGlyphCurs‹
(

1580 
Di•œy
* ,

1581 
F⁄t
 ,

1582 
F⁄t
 ,

1585 
XCﬁ‹
 
_Xc⁄°
 * ,

1586 
XCﬁ‹
 
_Xc⁄°
 *

1588 
Curs‹
 
	`XCª©eF⁄tCurs‹
(

1589 
Di•œy
* ,

1592 
F⁄t
 
	`XLﬂdF⁄t
(

1593 
Di•œy
* ,

1594 
_Xc⁄°
 *

1596 
GC
 
	`XCª©eGC
(

1597 
Di•œy
* ,

1598 
DøwabÀ
 ,

1600 
XGCVÆues
*

1602 
GC⁄ãxt
 
	`XGC⁄ãxtFromGC
(

1603 
GC


1605 
	`XFlushGC
(

1606 
Di•œy
* ,

1607 
GC


1609 
Pixm≠
 
	`XCª©ePixm≠
(

1610 
Di•œy
* ,

1611 
DøwabÀ
 ,

1616 
Pixm≠
 
	`XCª©eBôm≠FromD©a
(

1617 
Di•œy
* ,

1618 
DøwabÀ
 ,

1619 
_Xc⁄°
 * ,

1623 
Pixm≠
 
	`XCª©ePixm≠FromBôm≠D©a
(

1624 
Di•œy
* ,

1625 
DøwabÀ
 ,

1633 
Wödow
 
	`XCª©eSim∂eWödow
(

1634 
Di•œy
* ,

1635 
Wödow
 ,

1644 
Wödow
 
	`XGëSñe˘i⁄Ow√r
(

1645 
Di•œy
* ,

1646 
Atom


1648 
Wödow
 
	`XCª©eWödow
(

1649 
Di•œy
* ,

1650 
Wödow
 ,

1658 
VisuÆ
* ,

1660 
XSëWödowAâribuãs
*

1662 
Cﬁ‹m≠
 *
	`XLi°In°ÆÀdCﬁ‹m≠s
(

1663 
Di•œy
* ,

1664 
Wödow
 ,

1667 **
	`XLi°F⁄ts
(

1668 
Di•œy
* ,

1669 
_Xc⁄°
 * ,

1673 **
	`XLi°F⁄tsWôhInfo
(

1674 
Di•œy
* ,

1675 
_Xc⁄°
 * ,

1678 
XF⁄tSåu˘
**

1680 **
	`XGëF⁄tP©h
(

1681 
Di•œy
* ,

1684 **
	`XLi°Exãnsi⁄s
(

1685 
Di•œy
* ,

1688 
Atom
 *
	`XLi°Pr›îtõs
(

1689 
Di•œy
* ,

1690 
Wödow
 ,

1693 
XHo°Addªss
 *
	`XLi°Ho°s
(

1694 
Di•œy
* ,

1696 
Boﬁ
*

1698 
_X_DEPRECATED


1699 
KeySym
 
	`XKeycodeToKeysym
(

1700 
Di•œy
* ,

1701 #i‡
NìdWidePrŸŸy≥s


1704 
KeyCode
 ,

1708 
KeySym
 
	`XLookupKeysym
(

1709 
XKeyEvít
* ,

1712 
KeySym
 *
	`XGëKeybﬂrdM≠pög
(

1713 
Di•œy
* ,

1714 #i‡
NìdWidePrŸŸy≥s


1717 
KeyCode
 ,

1722 
KeySym
 
	`XSåögToKeysym
(

1723 
_Xc⁄°
 *

1725 
	`XMaxReque°Size
(

1726 
Di•œy
*

1728 
	`XExãndedMaxReque°Size
(

1729 
Di•œy
*

1731 *
	`XResour˚M™agîSåög
(

1732 
Di•œy
*

1734 *
	`XS¸ìnResour˚Såög
(

1735 
S¸ìn
*

1737 
	`XDi•œyMŸi⁄Buf„rSize
(

1738 
Di•œy
*

1740 
VisuÆID
 
	`XVisuÆIDFromVisuÆ
(

1741 
VisuÆ
*

1746 
Sètus
 
	`XInôThªads
(

1750 
	`XLockDi•œy
(

1751 
Di•œy
*

1754 
	`XU∆ockDi•œy
(

1755 
Di•œy
*

1760 
XExtCodes
 *
	`XInôExãnsi⁄
(

1761 
Di•œy
* ,

1762 
_Xc⁄°
 *

1765 
XExtCodes
 *
	`XAddExãnsi⁄
(

1766 
Di•œy
*

1768 
XExtD©a
 *
	`XFödOnExãnsi⁄Li°
(

1769 
XExtD©a
** ,

1772 
XExtD©a
 **
	`XEHódOfExãnsi⁄Li°
(

1773 
XED©aObje˘


1777 
Wödow
 
	`XRoŸWödow
(

1778 
Di•œy
* ,

1781 
Wödow
 
	`XDeÁu…RoŸWödow
(

1782 
Di•œy
*

1784 
Wödow
 
	`XRoŸWödowOfS¸ìn
(

1785 
S¸ìn
*

1787 
VisuÆ
 *
	`XDeÁu…VisuÆ
(

1788 
Di•œy
* ,

1791 
VisuÆ
 *
	`XDeÁu…VisuÆOfS¸ìn
(

1792 
S¸ìn
*

1794 
GC
 
	`XDeÁu…GC
(

1795 
Di•œy
* ,

1798 
GC
 
	`XDeÁu…GCOfS¸ìn
(

1799 
S¸ìn
*

1801 
	`XBœckPixñ
(

1802 
Di•œy
* ,

1805 
	`XWhôePixñ
(

1806 
Di•œy
* ,

1809 
	`XAŒPœ√s
(

1812 
	`XBœckPixñOfS¸ìn
(

1813 
S¸ìn
*

1815 
	`XWhôePixñOfS¸ìn
(

1816 
S¸ìn
*

1818 
	`XNextReque°
(

1819 
Di•œy
*

1821 
	`XLa°KnownReque°Pro˚s£d
(

1822 
Di•œy
*

1824 *
	`XSîvîVíd‹
(

1825 
Di•œy
*

1827 *
	`XDi•œySåög
(

1828 
Di•œy
*

1830 
Cﬁ‹m≠
 
	`XDeÁu…Cﬁ‹m≠
(

1831 
Di•œy
* ,

1834 
Cﬁ‹m≠
 
	`XDeÁu…Cﬁ‹m≠OfS¸ìn
(

1835 
S¸ìn
*

1837 
Di•œy
 *
	`XDi•œyOfS¸ìn
(

1838 
S¸ìn
*

1840 
S¸ìn
 *
	`XS¸ìnOfDi•œy
(

1841 
Di•œy
* ,

1844 
S¸ìn
 *
	`XDeÁu…S¸ìnOfDi•œy
(

1845 
Di•œy
*

1847 
	`XEvítMaskOfS¸ìn
(

1848 
S¸ìn
*

1851 
	`XS¸ìnNumbîOfS¸ìn
(

1852 
S¸ìn
*

1855 (*
	tXEº‹H™dÀr
) (

1856 
	tDi•œy
* ,

1857 
	tXEº‹Evít
*

1860 
XEº‹H™dÀr
 
	`XSëEº‹H™dÀr
 (

1861 
XEº‹H™dÀr


1865 (*
	tXIOEº‹H™dÀr
) (

1866 
	tDi•œy
*

1869 
XIOEº‹H™dÀr
 
	`XSëIOEº‹H™dÀr
 (

1870 
XIOEº‹H™dÀr


1874 
XPixm≠F‹m©VÆues
 *
	`XLi°Pixm≠F‹m©s
(

1875 
Di•œy
* ,

1878 *
	`XLi°Dïths
(

1879 
Di•œy
* ,

1886 
Sètus
 
	`XRec⁄figuªWMWödow
(

1887 
Di•œy
* ,

1888 
Wödow
 ,

1891 
XWödowCh™ges
*

1894 
Sètus
 
	`XGëWMPrŸocﬁs
(

1895 
Di•œy
* ,

1896 
Wödow
 ,

1897 
Atom
** ,

1900 
Sètus
 
	`XSëWMPrŸocﬁs
(

1901 
Di•œy
* ,

1902 
Wödow
 ,

1903 
Atom
* ,

1906 
Sètus
 
	`XIc⁄ifyWödow
(

1907 
Di•œy
* ,

1908 
Wödow
 ,

1911 
Sètus
 
	`XWôhdøwWödow
(

1912 
Di•œy
* ,

1913 
Wödow
 ,

1916 
Sètus
 
	`XGëComm™d
(

1917 
Di•œy
* ,

1918 
Wödow
 ,

1922 
Sètus
 
	`XGëWMCﬁ‹m≠Wödows
(

1923 
Di•œy
* ,

1924 
Wödow
 ,

1925 
Wödow
** ,

1928 
Sètus
 
	`XSëWMCﬁ‹m≠Wödows
(

1929 
Di•œy
* ,

1930 
Wödow
 ,

1931 
Wödow
* ,

1934 
	`XFªeSåögLi°
(

1937 
	`XSëTønsõ¡F‹Höt
(

1938 
Di•œy
* ,

1939 
Wödow
 ,

1940 
Wödow


1945 
	`XA˘iv©eS¸ìnSavî
(

1946 
Di•œy
*

1949 
	`XAddHo°
(

1950 
Di•œy
* ,

1951 
XHo°Addªss
*

1954 
	`XAddHo°s
(

1955 
Di•œy
* ,

1956 
XHo°Addªss
* ,

1960 
	`XAddToExãnsi⁄Li°
(

1961 
_XExtD©a
** ,

1962 
XExtD©a
*

1965 
	`XAddToSaveSë
(

1966 
Di•œy
* ,

1967 
Wödow


1970 
Sètus
 
	`XAŒocCﬁ‹
(

1971 
Di•œy
* ,

1972 
Cﬁ‹m≠
 ,

1973 
XCﬁ‹
*

1976 
Sètus
 
	`XAŒocCﬁ‹Cñls
(

1977 
Di•œy
* ,

1978 
Cﬁ‹m≠
 ,

1979 
Boﬁ
 ,

1986 
Sètus
 
	`XAŒocCﬁ‹Pœ√s
(

1987 
Di•œy
* ,

1988 
Cﬁ‹m≠
 ,

1989 
Boﬁ
 ,

2000 
Sètus
 
	`XAŒocNamedCﬁ‹
(

2001 
Di•œy
* ,

2002 
Cﬁ‹m≠
 ,

2003 
_Xc⁄°
 * ,

2004 
XCﬁ‹
* ,

2005 
XCﬁ‹
*

2008 
	`XAŒowEvíts
(

2009 
Di•œy
* ,

2011 
Time


2014 
	`XAutoRïótOff
(

2015 
Di•œy
*

2018 
	`XAutoRïótOn
(

2019 
Di•œy
*

2022 
	`XBñl
(

2023 
Di•œy
* ,

2027 
	`XBôm≠BôOrdî
(

2028 
Di•œy
*

2031 
	`XBôm≠Pad
(

2032 
Di•œy
*

2035 
	`XBôm≠Unô
(

2036 
Di•œy
*

2039 
	`XCñlsOfS¸ìn
(

2040 
S¸ìn
*

2043 
	`XCh™geA˘ivePoöãrGøb
(

2044 
Di•œy
* ,

2046 
Curs‹
 ,

2047 
Time


2050 
	`XCh™geGC
(

2051 
Di•œy
* ,

2052 
GC
 ,

2054 
XGCVÆues
*

2057 
	`XCh™geKeybﬂrdC⁄åﬁ
(

2058 
Di•œy
* ,

2060 
XKeybﬂrdC⁄åﬁ
*

2063 
	`XCh™geKeybﬂrdM≠pög
(

2064 
Di•œy
* ,

2067 
KeySym
* ,

2071 
	`XCh™gePoöãrC⁄åﬁ
(

2072 
Di•œy
* ,

2073 
Boﬁ
 ,

2074 
Boﬁ
 ,

2080 
	`XCh™gePr›îty
(

2081 
Di•œy
* ,

2082 
Wödow
 ,

2083 
Atom
 ,

2084 
Atom
 ,

2087 
_Xc⁄°
 * ,

2091 
	`XCh™geSaveSë
(

2092 
Di•œy
* ,

2093 
Wödow
 ,

2097 
	`XCh™geWödowAâribuãs
(

2098 
Di•œy
* ,

2099 
Wödow
 ,

2101 
XSëWödowAâribuãs
*

2104 
Boﬁ
 
	`XCheckIfEvít
(

2105 
Di•œy
* ,

2106 
XEvít
* ,

2107 
	$Boﬁ
 (*) (

2108 
Di•œy
* ,

2109 
XEvít
* ,

2110 
XPoöãr


2112 
XPoöãr


2115 
Boﬁ
 
	`XCheckMaskEvít
(

2116 
Di•œy
* ,

2118 
XEvít
*

2121 
Boﬁ
 
	`XCheckTy≥dEvít
(

2122 
Di•œy
* ,

2124 
XEvít
*

2127 
Boﬁ
 
	`XCheckTy≥dWödowEvít
(

2128 
Di•œy
* ,

2129 
Wödow
 ,

2131 
XEvít
*

2134 
Boﬁ
 
	`XCheckWödowEvít
(

2135 
Di•œy
* ,

2136 
Wödow
 ,

2138 
XEvít
*

2141 
	`XCúcuœãSubwödows
(

2142 
Di•œy
* ,

2143 
Wödow
 ,

2147 
	`XCúcuœãSubwödowsDown
(

2148 
Di•œy
* ,

2149 
Wödow


2152 
	`XCúcuœãSubwödowsUp
(

2153 
Di•œy
* ,

2154 
Wödow


2157 
	`XCÀ¨Aªa
(

2158 
Di•œy
* ,

2159 
Wödow
 ,

2164 
Boﬁ


2167 
	`XCÀ¨Wödow
(

2168 
Di•œy
* ,

2169 
Wödow


2172 
	`XClo£Di•œy
(

2173 
Di•œy
*

2176 
	`XC⁄figuªWödow
(

2177 
Di•œy
* ,

2178 
Wödow
 ,

2180 
XWödowCh™ges
*

2183 
	`XC⁄√˘i⁄Numbî
(

2184 
Di•œy
*

2187 
	`XC⁄vîtSñe˘i⁄
(

2188 
Di•œy
* ,

2189 
Atom
 ,

2190 
Atom
 ,

2191 
Atom
 ,

2192 
Wödow
 ,

2193 
Time


2196 
	`XC›yAªa
(

2197 
Di•œy
* ,

2198 
DøwabÀ
 ,

2199 
DøwabÀ
 ,

2200 
GC
 ,

2209 
	`XC›yGC
(

2210 
Di•œy
* ,

2211 
GC
 ,

2213 
GC


2216 
	`XC›yPœ√
(

2217 
Di•œy
* ,

2218 
DøwabÀ
 ,

2219 
DøwabÀ
 ,

2220 
GC
 ,

2230 
	`XDeÁu…Dïth
(

2231 
Di•œy
* ,

2235 
	`XDeÁu…DïthOfS¸ìn
(

2236 
S¸ìn
*

2239 
	`XDeÁu…S¸ìn
(

2240 
Di•œy
*

2243 
	`XDeföeCurs‹
(

2244 
Di•œy
* ,

2245 
Wödow
 ,

2246 
Curs‹


2249 
	`XDñëePr›îty
(

2250 
Di•œy
* ,

2251 
Wödow
 ,

2252 
Atom


2255 
	`XDe°royWödow
(

2256 
Di•œy
* ,

2257 
Wödow


2260 
	`XDe°roySubwödows
(

2261 
Di•œy
* ,

2262 
Wödow


2265 
	`XD€sBackögSt‹e
(

2266 
S¸ìn
*

2269 
Boﬁ
 
	`XD€sSaveUndîs
(

2270 
S¸ìn
*

2273 
	`XDißbÀAc˚ssC⁄åﬁ
(

2274 
Di•œy
*

2278 
	`XDi•œyCñls
(

2279 
Di•œy
* ,

2283 
	`XDi•œyHeight
(

2284 
Di•œy
* ,

2288 
	`XDi•œyHeightMM
(

2289 
Di•œy
* ,

2293 
	`XDi•œyKeycodes
(

2294 
Di•œy
* ,

2299 
	`XDi•œyPœ√s
(

2300 
Di•œy
* ,

2304 
	`XDi•œyWidth
(

2305 
Di•œy
* ,

2309 
	`XDi•œyWidthMM
(

2310 
Di•œy
* ,

2314 
	`XDøwArc
(

2315 
Di•œy
* ,

2316 
DøwabÀ
 ,

2317 
GC
 ,

2326 
	`XDøwArcs
(

2327 
Di•œy
* ,

2328 
DøwabÀ
 ,

2329 
GC
 ,

2330 
XArc
* ,

2334 
	`XDøwImageSåög
(

2335 
Di•œy
* ,

2336 
DøwabÀ
 ,

2337 
GC
 ,

2340 
_Xc⁄°
 * ,

2344 
	`XDøwImageSåög16
(

2345 
Di•œy
* ,

2346 
DøwabÀ
 ,

2347 
GC
 ,

2350 
_Xc⁄°
 
XCh¨2b
* ,

2354 
	`XDøwLöe
(

2355 
Di•œy
* ,

2356 
DøwabÀ
 ,

2357 
GC
 ,

2364 
	`XDøwLöes
(

2365 
Di•œy
* ,

2366 
DøwabÀ
 ,

2367 
GC
 ,

2368 
XPoöt
* ,

2373 
	`XDøwPoöt
(

2374 
Di•œy
* ,

2375 
DøwabÀ
 ,

2376 
GC
 ,

2381 
	`XDøwPoöts
(

2382 
Di•œy
* ,

2383 
DøwabÀ
 ,

2384 
GC
 ,

2385 
XPoöt
* ,

2390 
	`XDøwRe˘™gÀ
(

2391 
Di•œy
* ,

2392 
DøwabÀ
 ,

2393 
GC
 ,

2400 
	`XDøwRe˘™gÀs
(

2401 
Di•œy
* ,

2402 
DøwabÀ
 ,

2403 
GC
 ,

2404 
XRe˘™gÀ
* ,

2408 
	`XDøwSegmíts
(

2409 
Di•œy
* ,

2410 
DøwabÀ
 ,

2411 
GC
 ,

2412 
XSegmít
* ,

2416 
	`XDøwSåög
(

2417 
Di•œy
* ,

2418 
DøwabÀ
 ,

2419 
GC
 ,

2422 
_Xc⁄°
 * ,

2426 
	`XDøwSåög16
(

2427 
Di•œy
* ,

2428 
DøwabÀ
 ,

2429 
GC
 ,

2432 
_Xc⁄°
 
XCh¨2b
* ,

2436 
	`XDøwText
(

2437 
Di•œy
* ,

2438 
DøwabÀ
 ,

2439 
GC
 ,

2442 
XTextIãm
* ,

2446 
	`XDøwText16
(

2447 
Di•œy
* ,

2448 
DøwabÀ
 ,

2449 
GC
 ,

2452 
XTextIãm16
* ,

2456 
	`XE«bÀAc˚ssC⁄åﬁ
(

2457 
Di•œy
*

2460 
	`XEvítsQueued
(

2461 
Di•œy
* ,

2465 
Sètus
 
	`XFëchName
(

2466 
Di•œy
* ,

2467 
Wödow
 ,

2471 
	`XFûlArc
(

2472 
Di•œy
* ,

2473 
DøwabÀ
 ,

2474 
GC
 ,

2483 
	`XFûlArcs
(

2484 
Di•œy
* ,

2485 
DøwabÀ
 ,

2486 
GC
 ,

2487 
XArc
* ,

2491 
	`XFûlPﬁyg⁄
(

2492 
Di•œy
* ,

2493 
DøwabÀ
 ,

2494 
GC
 ,

2495 
XPoöt
* ,

2501 
	`XFûlRe˘™gÀ
(

2502 
Di•œy
* ,

2503 
DøwabÀ
 ,

2504 
GC
 ,

2511 
	`XFûlRe˘™gÀs
(

2512 
Di•œy
* ,

2513 
DøwabÀ
 ,

2514 
GC
 ,

2515 
XRe˘™gÀ
* ,

2519 
	`XFlush
(

2520 
Di•œy
*

2523 
	`XF‹˚S¸ìnSavî
(

2524 
Di•œy
* ,

2528 
	`XFªe
(

2532 
	`XFªeCﬁ‹m≠
(

2533 
Di•œy
* ,

2534 
Cﬁ‹m≠


2537 
	`XFªeCﬁ‹s
(

2538 
Di•œy
* ,

2539 
Cﬁ‹m≠
 ,

2545 
	`XFªeCurs‹
(

2546 
Di•œy
* ,

2547 
Curs‹


2550 
	`XFªeExãnsi⁄Li°
(

2554 
	`XFªeF⁄t
(

2555 
Di•œy
* ,

2556 
XF⁄tSåu˘
*

2559 
	`XFªeF⁄tInfo
(

2561 
XF⁄tSåu˘
* ,

2565 
	`XFªeF⁄tNames
(

2569 
	`XFªeF⁄tP©h
(

2573 
	`XFªeGC
(

2574 
Di•œy
* ,

2575 
GC


2578 
	`XFªeModifõrm≠
(

2579 
XModifõrKeym≠
*

2582 
	`XFªePixm≠
(

2583 
Di•œy
* ,

2584 
Pixm≠


2587 
	`XGeomëry
(

2588 
Di•œy
* ,

2590 
_Xc⁄°
 * ,

2591 
_Xc⁄°
 * ,

2603 
	`XGëEº‹D©aba£Text
(

2604 
Di•œy
* ,

2605 
_Xc⁄°
 * ,

2606 
_Xc⁄°
 * ,

2607 
_Xc⁄°
 * ,

2612 
	`XGëEº‹Text
(

2613 
Di•œy
* ,

2619 
Boﬁ
 
	`XGëF⁄tPr›îty
(

2620 
XF⁄tSåu˘
* ,

2621 
Atom
 ,

2625 
Sètus
 
	`XGëGCVÆues
(

2626 
Di•œy
* ,

2627 
GC
 ,

2629 
XGCVÆues
*

2632 
Sètus
 
	`XGëGeomëry
(

2633 
Di•œy
* ,

2634 
DøwabÀ
 ,

2635 
Wödow
* ,

2644 
Sètus
 
	`XGëIc⁄Name
(

2645 
Di•œy
* ,

2646 
Wödow
 ,

2650 
	`XGëI≈utFocus
(

2651 
Di•œy
* ,

2652 
Wödow
* ,

2656 
	`XGëKeybﬂrdC⁄åﬁ
(

2657 
Di•œy
* ,

2658 
XKeybﬂrdSèã
*

2661 
	`XGëPoöãrC⁄åﬁ
(

2662 
Di•œy
* ,

2668 
	`XGëPoöãrM≠pög
(

2669 
Di•œy
* ,

2674 
	`XGëS¸ìnSavî
(

2675 
Di•œy
* ,

2682 
Sètus
 
	`XGëTønsõ¡F‹Höt
(

2683 
Di•œy
* ,

2684 
Wödow
 ,

2685 
Wödow
*

2688 
	`XGëWödowPr›îty
(

2689 
Di•œy
* ,

2690 
Wödow
 ,

2691 
Atom
 ,

2694 
Boﬁ
 ,

2695 
Atom
 ,

2696 
Atom
* ,

2703 
Sètus
 
	`XGëWödowAâribuãs
(

2704 
Di•œy
* ,

2705 
Wödow
 ,

2706 
XWödowAâribuãs
*

2709 
	`XGøbBuâ⁄
(

2710 
Di•œy
* ,

2713 
Wödow
 ,

2714 
Boﬁ
 ,

2718 
Wödow
 ,

2719 
Curs‹


2722 
	`XGøbKey
(

2723 
Di•œy
* ,

2726 
Wödow
 ,

2727 
Boﬁ
 ,

2732 
	`XGøbKeybﬂrd
(

2733 
Di•œy
* ,

2734 
Wödow
 ,

2735 
Boﬁ
 ,

2738 
Time


2741 
	`XGøbPoöãr
(

2742 
Di•œy
* ,

2743 
Wödow
 ,

2744 
Boﬁ
 ,

2748 
Wödow
 ,

2749 
Curs‹
 ,

2750 
Time


2753 
	`XGøbSîvî
(

2754 
Di•œy
*

2757 
	`XHeightMMOfS¸ìn
(

2758 
S¸ìn
*

2761 
	`XHeightOfS¸ìn
(

2762 
S¸ìn
*

2765 
	`XIfEvít
(

2766 
Di•œy
* ,

2767 
XEvít
* ,

2768 
	$Boﬁ
 (*) (

2769 
Di•œy
* ,

2770 
XEvít
* ,

2771 
XPoöãr


2773 
XPoöãr


2776 
	`XImageByãOrdî
(

2777 
Di•œy
*

2780 
	`XIn°ÆlCﬁ‹m≠
(

2781 
Di•œy
* ,

2782 
Cﬁ‹m≠


2785 
KeyCode
 
	`XKeysymToKeycode
(

2786 
Di•œy
* ,

2787 
KeySym


2790 
	`XKûlClõ¡
(

2791 
Di•œy
* ,

2792 
XID


2795 
Sètus
 
	`XLookupCﬁ‹
(

2796 
Di•œy
* ,

2797 
Cﬁ‹m≠
 ,

2798 
_Xc⁄°
 * ,

2799 
XCﬁ‹
* ,

2800 
XCﬁ‹
*

2803 
	`XLowîWödow
(

2804 
Di•œy
* ,

2805 
Wödow


2808 
	`XM≠Rai£d
(

2809 
Di•œy
* ,

2810 
Wödow


2813 
	`XM≠Subwödows
(

2814 
Di•œy
* ,

2815 
Wödow


2818 
	`XM≠Wödow
(

2819 
Di•œy
* ,

2820 
Wödow


2823 
	`XMaskEvít
(

2824 
Di•œy
* ,

2826 
XEvít
*

2829 
	`XMaxCm≠sOfS¸ìn
(

2830 
S¸ìn
*

2833 
	`XMöCm≠sOfS¸ìn
(

2834 
S¸ìn
*

2837 
	`XMoveResizeWödow
(

2838 
Di•œy
* ,

2839 
Wödow
 ,

2846 
	`XMoveWödow
(

2847 
Di•œy
* ,

2848 
Wödow
 ,

2853 
	`XNextEvít
(

2854 
Di•œy
* ,

2855 
XEvít
*

2858 
	`XNoOp
(

2859 
Di•œy
*

2862 
Sètus
 
	`XP¨£Cﬁ‹
(

2863 
Di•œy
* ,

2864 
Cﬁ‹m≠
 ,

2865 
_Xc⁄°
 * ,

2866 
XCﬁ‹
*

2869 
	`XP¨£Geomëry
(

2870 
_Xc⁄°
 * ,

2877 
	`XPìkEvít
(

2878 
Di•œy
* ,

2879 
XEvít
*

2882 
	`XPìkIfEvít
(

2883 
Di•œy
* ,

2884 
XEvít
* ,

2885 
	$Boﬁ
 (*) (

2886 
Di•œy
* ,

2887 
XEvít
* ,

2888 
XPoöãr


2890 
XPoöãr


2893 
	`XPídög
(

2894 
Di•œy
*

2897 
	`XPœ√sOfS¸ìn
(

2898 
S¸ìn
*

2901 
	`XPrŸocﬁRevisi⁄
(

2902 
Di•œy
*

2905 
	`XPrŸocﬁVîsi⁄
(

2906 
Di•œy
*

2910 
	`XPutBackEvít
(

2911 
Di•œy
* ,

2912 
XEvít
*

2915 
	`XPutImage
(

2916 
Di•œy
* ,

2917 
DøwabÀ
 ,

2918 
GC
 ,

2919 
XImage
* ,

2928 
	`XQLígth
(

2929 
Di•œy
*

2932 
Sètus
 
	`XQuîyBe°Curs‹
(

2933 
Di•œy
* ,

2934 
DøwabÀ
 ,

2941 
Sètus
 
	`XQuîyBe°Size
(

2942 
Di•œy
* ,

2944 
DøwabÀ
 ,

2951 
Sètus
 
	`XQuîyBe°Stù∂e
(

2952 
Di•œy
* ,

2953 
DøwabÀ
 ,

2960 
Sètus
 
	`XQuîyBe°Tûe
(

2961 
Di•œy
* ,

2962 
DøwabÀ
 ,

2969 
	`XQuîyCﬁ‹
(

2970 
Di•œy
* ,

2971 
Cﬁ‹m≠
 ,

2972 
XCﬁ‹
*

2975 
	`XQuîyCﬁ‹s
(

2976 
Di•œy
* ,

2977 
Cﬁ‹m≠
 ,

2978 
XCﬁ‹
* ,

2982 
Boﬁ
 
	`XQuîyExãnsi⁄
(

2983 
Di•œy
* ,

2984 
_Xc⁄°
 * ,

2990 
	`XQuîyKeym≠
(

2991 
Di•œy
* ,

2995 
Boﬁ
 
	`XQuîyPoöãr
(

2996 
Di•œy
* ,

2997 
Wödow
 ,

2998 
Wödow
* ,

2999 
Wödow
* ,

3007 
	`XQuîyTextExã¡s
(

3008 
Di•œy
* ,

3009 
XID
 ,

3010 
_Xc⁄°
 * ,

3015 
XCh¨Såu˘
*

3018 
	`XQuîyTextExã¡s16
(

3019 
Di•œy
* ,

3020 
XID
 ,

3021 
_Xc⁄°
 
XCh¨2b
* ,

3026 
XCh¨Såu˘
*

3029 
Sètus
 
	`XQuîyTªe
(

3030 
Di•œy
* ,

3031 
Wödow
 ,

3032 
Wödow
* ,

3033 
Wödow
* ,

3034 
Wödow
** ,

3038 
	`XRai£Wödow
(

3039 
Di•œy
* ,

3040 
Wödow


3043 
	`XRódBôm≠Fûe
(

3044 
Di•œy
* ,

3045 
DøwabÀ
 ,

3046 
_Xc⁄°
 * ,

3049 
Pixm≠
* ,

3054 
	`XRódBôm≠FûeD©a
(

3055 
_Xc⁄°
 * ,

3063 
	`XRebödKeysym
(

3064 
Di•œy
* ,

3065 
KeySym
 ,

3066 
KeySym
* ,

3068 
_Xc⁄°
 * ,

3072 
	`XRecﬁ‹Curs‹
(

3073 
Di•œy
* ,

3074 
Curs‹
 ,

3075 
XCﬁ‹
* ,

3076 
XCﬁ‹
*

3079 
	`XRe‰eshKeybﬂrdM≠pög
(

3080 
XM≠pögEvít
*

3083 
	`XRemoveFromSaveSë
(

3084 
Di•œy
* ,

3085 
Wödow


3088 
	`XRemoveHo°
(

3089 
Di•œy
* ,

3090 
XHo°Addªss
*

3093 
	`XRemoveHo°s
(

3094 
Di•œy
* ,

3095 
XHo°Addªss
* ,

3099 
	`XRï¨ítWödow
(

3100 
Di•œy
* ,

3101 
Wödow
 ,

3102 
Wödow
 ,

3107 
	`XRe£tS¸ìnSavî
(

3108 
Di•œy
*

3111 
	`XResizeWödow
(

3112 
Di•œy
* ,

3113 
Wödow
 ,

3118 
	`XRe°ackWödows
(

3119 
Di•œy
* ,

3120 
Wödow
* ,

3124 
	`XRŸ©eBuf„rs
(

3125 
Di•œy
* ,

3129 
	`XRŸ©eWödowPr›îtõs
(

3130 
Di•œy
* ,

3131 
Wödow
 ,

3132 
Atom
* ,

3137 
	`XS¸ìnCou¡
(

3138 
Di•œy
*

3141 
	`XSñe˘I≈ut
(

3142 
Di•œy
* ,

3143 
Wödow
 ,

3147 
Sètus
 
	`XSídEvít
(

3148 
Di•œy
* ,

3149 
Wödow
 ,

3150 
Boﬁ
 ,

3152 
XEvít
*

3155 
	`XSëAc˚ssC⁄åﬁ
(

3156 
Di•œy
* ,

3160 
	`XSëArcMode
(

3161 
Di•œy
* ,

3162 
GC
 ,

3166 
	`XSëBackground
(

3167 
Di•œy
* ,

3168 
GC
 ,

3172 
	`XSëClùMask
(

3173 
Di•œy
* ,

3174 
GC
 ,

3175 
Pixm≠


3178 
	`XSëClùOrigö
(

3179 
Di•œy
* ,

3180 
GC
 ,

3185 
	`XSëClùRe˘™gÀs
(

3186 
Di•œy
* ,

3187 
GC
 ,

3190 
XRe˘™gÀ
* ,

3195 
	`XSëClo£DownMode
(

3196 
Di•œy
* ,

3200 
	`XSëComm™d
(

3201 
Di•œy
* ,

3202 
Wödow
 ,

3207 
	`XSëDashes
(

3208 
Di•œy
* ,

3209 
GC
 ,

3211 
_Xc⁄°
 * ,

3215 
	`XSëFûlRuÀ
(

3216 
Di•œy
* ,

3217 
GC
 ,

3221 
	`XSëFûlStyÀ
(

3222 
Di•œy
* ,

3223 
GC
 ,

3227 
	`XSëF⁄t
(

3228 
Di•œy
* ,

3229 
GC
 ,

3230 
F⁄t


3233 
	`XSëF⁄tP©h
(

3234 
Di•œy
* ,

3239 
	`XSëF‹eground
(

3240 
Di•œy
* ,

3241 
GC
 ,

3245 
	`XSëFun˘i⁄
(

3246 
Di•œy
* ,

3247 
GC
 ,

3251 
	`XSëGøphicsExposuªs
(

3252 
Di•œy
* ,

3253 
GC
 ,

3254 
Boﬁ


3257 
	`XSëIc⁄Name
(

3258 
Di•œy
* ,

3259 
Wödow
 ,

3260 
_Xc⁄°
 *

3263 
	`XSëI≈utFocus
(

3264 
Di•œy
* ,

3265 
Wödow
 ,

3267 
Time


3270 
	`XSëLöeAâribuãs
(

3271 
Di•œy
* ,

3272 
GC
 ,

3279 
	`XSëModifõrM≠pög
(

3280 
Di•œy
* ,

3281 
XModifõrKeym≠
*

3284 
	`XSëPœ√Mask
(

3285 
Di•œy
* ,

3286 
GC
 ,

3290 
	`XSëPoöãrM≠pög
(

3291 
Di•œy
* ,

3292 
_Xc⁄°
 * ,

3296 
	`XSëS¸ìnSavî
(

3297 
Di•œy
* ,

3304 
	`XSëSñe˘i⁄Ow√r
(

3305 
Di•œy
* ,

3306 
Atom
 ,

3307 
Wödow
 ,

3308 
Time


3311 
	`XSëSèã
(

3312 
Di•œy
* ,

3313 
GC
 ,

3320 
	`XSëStù∂e
(

3321 
Di•œy
* ,

3322 
GC
 ,

3323 
Pixm≠


3326 
	`XSëSubwödowMode
(

3327 
Di•œy
* ,

3328 
GC
 ,

3332 
	`XSëTSOrigö
(

3333 
Di•œy
* ,

3334 
GC
 ,

3339 
	`XSëTûe
(

3340 
Di•œy
* ,

3341 
GC
 ,

3342 
Pixm≠


3345 
	`XSëWödowBackground
(

3346 
Di•œy
* ,

3347 
Wödow
 ,

3351 
	`XSëWödowBackgroundPixm≠
(

3352 
Di•œy
* ,

3353 
Wödow
 ,

3354 
Pixm≠


3357 
	`XSëWödowB‹dî
(

3358 
Di•œy
* ,

3359 
Wödow
 ,

3363 
	`XSëWödowB‹dîPixm≠
(

3364 
Di•œy
* ,

3365 
Wödow
 ,

3366 
Pixm≠


3369 
	`XSëWödowB‹dîWidth
(

3370 
Di•œy
* ,

3371 
Wödow
 ,

3375 
	`XSëWödowCﬁ‹m≠
(

3376 
Di•œy
* ,

3377 
Wödow
 ,

3378 
Cﬁ‹m≠


3381 
	`XSt‹eBuf„r
(

3382 
Di•œy
* ,

3383 
_Xc⁄°
 * ,

3388 
	`XSt‹eByãs
(

3389 
Di•œy
* ,

3390 
_Xc⁄°
 * ,

3394 
	`XSt‹eCﬁ‹
(

3395 
Di•œy
* ,

3396 
Cﬁ‹m≠
 ,

3397 
XCﬁ‹
*

3400 
	`XSt‹eCﬁ‹s
(

3401 
Di•œy
* ,

3402 
Cﬁ‹m≠
 ,

3403 
XCﬁ‹
* ,

3407 
	`XSt‹eName
(

3408 
Di•œy
* ,

3409 
Wödow
 ,

3410 
_Xc⁄°
 *

3413 
	`XSt‹eNamedCﬁ‹
(

3414 
Di•œy
* ,

3415 
Cﬁ‹m≠
 ,

3416 
_Xc⁄°
 * ,

3421 
	`XSync
(

3422 
Di•œy
* ,

3423 
Boﬁ


3426 
	`XTextExã¡s
(

3427 
XF⁄tSåu˘
* ,

3428 
_Xc⁄°
 * ,

3433 
XCh¨Såu˘
*

3436 
	`XTextExã¡s16
(

3437 
XF⁄tSåu˘
* ,

3438 
_Xc⁄°
 
XCh¨2b
* ,

3443 
XCh¨Såu˘
*

3446 
	`XTextWidth
(

3447 
XF⁄tSåu˘
* ,

3448 
_Xc⁄°
 * ,

3452 
	`XTextWidth16
(

3453 
XF⁄tSåu˘
* ,

3454 
_Xc⁄°
 
XCh¨2b
* ,

3458 
Boﬁ
 
	`XTøn¶©eCo‹dö©es
(

3459 
Di•œy
* ,

3460 
Wödow
 ,

3461 
Wödow
 ,

3466 
Wödow
*

3469 
	`XUndeföeCurs‹
(

3470 
Di•œy
* ,

3471 
Wödow


3474 
	`XUngøbBuâ⁄
(

3475 
Di•œy
* ,

3478 
Wödow


3481 
	`XUngøbKey
(

3482 
Di•œy
* ,

3485 
Wödow


3488 
	`XUngøbKeybﬂrd
(

3489 
Di•œy
* ,

3490 
Time


3493 
	`XUngøbPoöãr
(

3494 
Di•œy
* ,

3495 
Time


3498 
	`XUngøbSîvî
(

3499 
Di•œy
*

3502 
	`XUnö°ÆlCﬁ‹m≠
(

3503 
Di•œy
* ,

3504 
Cﬁ‹m≠


3507 
	`XU∆ﬂdF⁄t
(

3508 
Di•œy
* ,

3509 
F⁄t


3512 
	`XUnm≠Subwödows
(

3513 
Di•œy
* ,

3514 
Wödow


3517 
	`XUnm≠Wödow
(

3518 
Di•œy
* ,

3519 
Wödow


3522 
	`XVíd‹Rñó£
(

3523 
Di•œy
*

3526 
	`XW¨pPoöãr
(

3527 
Di•œy
* ,

3528 
Wödow
 ,

3529 
Wödow
 ,

3538 
	`XWidthMMOfS¸ìn
(

3539 
S¸ìn
*

3542 
	`XWidthOfS¸ìn
(

3543 
S¸ìn
*

3546 
	`XWödowEvít
(

3547 
Di•œy
* ,

3548 
Wödow
 ,

3550 
XEvít
*

3553 
	`XWrôeBôm≠Fûe
(

3554 
Di•œy
* ,

3555 
_Xc⁄°
 * ,

3556 
Pixm≠
 ,

3563 
Boﬁ
 
	`XSuµ‹tsLoˇÀ
 ();

3565 *
	`XSëLoˇÀModifõrs
(

3569 
XOM
 
	`XO≥nOM
(

3570 
Di•œy
* ,

3571 
_XrmHashBuckëRec
* ,

3572 
_Xc⁄°
 * ,

3573 
_Xc⁄°
 *

3576 
Sètus
 
	`XClo£OM
(

3577 
XOM


3580 *
	$XSëOMVÆues
(

3581 
XOM
 ,

3583 Ë
	`_X_SENTINEL
(0);

3585 *
	$XGëOMVÆues
(

3586 
XOM
 ,

3588 Ë
	`_X_SENTINEL
(0);

3590 
Di•œy
 *
	`XDi•œyOfOM
(

3591 
XOM


3594 *
	`XLoˇÀOfOM
(

3595 
XOM


3598 
XOC
 
	$XCª©eOC
(

3599 
XOM
 ,

3601 Ë
	`_X_SENTINEL
(0);

3603 
	`XDe°royOC
(

3604 
XOC


3607 
XOM
 
	`XOMOfOC
(

3608 
XOC


3611 *
	$XSëOCVÆues
(

3612 
XOC
 ,

3614 Ë
	`_X_SENTINEL
(0);

3616 *
	$XGëOCVÆues
(

3617 
XOC
 ,

3619 Ë
	`_X_SENTINEL
(0);

3621 
XF⁄tSë
 
	`XCª©eF⁄tSë
(

3622 
Di•œy
* ,

3623 
_Xc⁄°
 * ,

3629 
	`XFªeF⁄tSë
(

3630 
Di•œy
* ,

3631 
XF⁄tSë


3634 
	`XF⁄tsOfF⁄tSë
(

3635 
XF⁄tSë
 ,

3636 
XF⁄tSåu˘
*** ,

3640 *
	`XBa£F⁄tNameLi°OfF⁄tSë
(

3641 
XF⁄tSë


3644 *
	`XLoˇÀOfF⁄tSë
(

3645 
XF⁄tSë


3648 
Boﬁ
 
	`XC⁄ãxtDïídítDøwög
(

3649 
XF⁄tSë


3652 
Boﬁ
 
	`XDúe˘i⁄ÆDïídítDøwög
(

3653 
XF⁄tSë


3656 
Boﬁ
 
	`XC⁄ãxtuÆDøwög
(

3657 
XF⁄tSë


3660 
XF⁄tSëExã¡s
 *
	`XExã¡sOfF⁄tSë
(

3661 
XF⁄tSë


3664 
	`XmbTextEsˇ≥mít
(

3665 
XF⁄tSë
 ,

3666 
_Xc⁄°
 * ,

3670 
	`XwcTextEsˇ≥mít
(

3671 
XF⁄tSë
 ,

3672 
_Xc⁄°
 
wch¨_t
* ,

3676 
	`Xutf8TextEsˇ≥mít
(

3677 
XF⁄tSë
 ,

3678 
_Xc⁄°
 * ,

3682 
	`XmbTextExã¡s
(

3683 
XF⁄tSë
 ,

3684 
_Xc⁄°
 * ,

3686 
XRe˘™gÀ
* ,

3687 
XRe˘™gÀ
*

3690 
	`XwcTextExã¡s
(

3691 
XF⁄tSë
 ,

3692 
_Xc⁄°
 
wch¨_t
* ,

3694 
XRe˘™gÀ
* ,

3695 
XRe˘™gÀ
*

3698 
	`Xutf8TextExã¡s
(

3699 
XF⁄tSë
 ,

3700 
_Xc⁄°
 * ,

3702 
XRe˘™gÀ
* ,

3703 
XRe˘™gÀ
*

3706 
Sètus
 
	`XmbTextPîCh¨Exã¡s
(

3707 
XF⁄tSë
 ,

3708 
_Xc⁄°
 * ,

3710 
XRe˘™gÀ
* ,

3711 
XRe˘™gÀ
* ,

3714 
XRe˘™gÀ
* ,

3715 
XRe˘™gÀ
*

3718 
Sètus
 
	`XwcTextPîCh¨Exã¡s
(

3719 
XF⁄tSë
 ,

3720 
_Xc⁄°
 
wch¨_t
* ,

3722 
XRe˘™gÀ
* ,

3723 
XRe˘™gÀ
* ,

3726 
XRe˘™gÀ
* ,

3727 
XRe˘™gÀ
*

3730 
Sètus
 
	`Xutf8TextPîCh¨Exã¡s
(

3731 
XF⁄tSë
 ,

3732 
_Xc⁄°
 * ,

3734 
XRe˘™gÀ
* ,

3735 
XRe˘™gÀ
* ,

3738 
XRe˘™gÀ
* ,

3739 
XRe˘™gÀ
*

3742 
	`XmbDøwText
(

3743 
Di•œy
* ,

3744 
DøwabÀ
 ,

3745 
GC
 ,

3748 
XmbTextIãm
* ,

3752 
	`XwcDøwText
(

3753 
Di•œy
* ,

3754 
DøwabÀ
 ,

3755 
GC
 ,

3758 
XwcTextIãm
* ,

3762 
	`Xutf8DøwText
(

3763 
Di•œy
* ,

3764 
DøwabÀ
 ,

3765 
GC
 ,

3768 
XmbTextIãm
* ,

3772 
	`XmbDøwSåög
(

3773 
Di•œy
* ,

3774 
DøwabÀ
 ,

3775 
XF⁄tSë
 ,

3776 
GC
 ,

3779 
_Xc⁄°
 * ,

3783 
	`XwcDøwSåög
(

3784 
Di•œy
* ,

3785 
DøwabÀ
 ,

3786 
XF⁄tSë
 ,

3787 
GC
 ,

3790 
_Xc⁄°
 
wch¨_t
* ,

3794 
	`Xutf8DøwSåög
(

3795 
Di•œy
* ,

3796 
DøwabÀ
 ,

3797 
XF⁄tSë
 ,

3798 
GC
 ,

3801 
_Xc⁄°
 * ,

3805 
	`XmbDøwImageSåög
(

3806 
Di•œy
* ,

3807 
DøwabÀ
 ,

3808 
XF⁄tSë
 ,

3809 
GC
 ,

3812 
_Xc⁄°
 * ,

3816 
	`XwcDøwImageSåög
(

3817 
Di•œy
* ,

3818 
DøwabÀ
 ,

3819 
XF⁄tSë
 ,

3820 
GC
 ,

3823 
_Xc⁄°
 
wch¨_t
* ,

3827 
	`Xutf8DøwImageSåög
(

3828 
Di•œy
* ,

3829 
DøwabÀ
 ,

3830 
XF⁄tSë
 ,

3831 
GC
 ,

3834 
_Xc⁄°
 * ,

3838 
XIM
 
	`XO≥nIM
(

3839 
Di•œy
* ,

3840 
_XrmHashBuckëRec
* ,

3845 
Sètus
 
	`XClo£IM
(

3846 
XIM


3849 *
	$XGëIMVÆues
(

3850 
XIM
 , ...

3851 Ë
	`_X_SENTINEL
(0);

3853 *
	$XSëIMVÆues
(

3854 
XIM
 , ...

3855 Ë
	`_X_SENTINEL
(0);

3857 
Di•œy
 *
	`XDi•œyOfIM
(

3858 
XIM


3861 *
	`XLoˇÀOfIM
(

3862 
XIM


3865 
XIC
 
	$XCª©eIC
(

3866 
XIM
 , ...

3867 Ë
	`_X_SENTINEL
(0);

3869 
	`XDe°royIC
(

3870 
XIC


3873 
	`XSëICFocus
(

3874 
XIC


3877 
	`XUn£tICFocus
(

3878 
XIC


3881 
wch¨_t
 *
	`XwcRe£tIC
(

3882 
XIC


3885 *
	`XmbRe£tIC
(

3886 
XIC


3889 *
	`Xutf8Re£tIC
(

3890 
XIC


3893 *
	$XSëICVÆues
(

3894 
XIC
 , ...

3895 Ë
	`_X_SENTINEL
(0);

3897 *
	$XGëICVÆues
(

3898 
XIC
 , ...

3899 Ë
	`_X_SENTINEL
(0);

3901 
XIM
 
	`XIMOfIC
(

3902 
XIC


3905 
Boﬁ
 
	`XFûãrEvít
(

3906 
XEvít
* ,

3907 
Wödow


3910 
	`XmbLookupSåög
(

3911 
XIC
 ,

3912 
XKeyPªs£dEvít
* ,

3915 
KeySym
* ,

3916 
Sètus
*

3919 
	`XwcLookupSåög
(

3920 
XIC
 ,

3921 
XKeyPªs£dEvít
* ,

3922 
wch¨_t
* ,

3924 
KeySym
* ,

3925 
Sètus
*

3928 
	`Xutf8LookupSåög
(

3929 
XIC
 ,

3930 
XKeyPªs£dEvít
* ,

3933 
KeySym
* ,

3934 
Sètus
*

3937 
XVaNe°edLi°
 
	$XVaCª©eNe°edLi°
(

3939 Ë
	`_X_SENTINEL
(0);

3943 
Boﬁ
 
	`XRegi°îIMIn°™tüãCÆlback
(

3944 
Di•œy
* ,

3945 
_XrmHashBuckëRec
* ,

3948 
XIDProc
 ,

3949 
XPoöãr


3952 
Boﬁ
 
	`XUƒegi°îIMIn°™tüãCÆlback
(

3953 
Di•œy
* ,

3954 
_XrmHashBuckëRec
* ,

3957 
XIDProc
 ,

3958 
XPoöãr


3961 (*
	tXC⁄√˘i⁄W©chProc
)(

3962 
	tDi•œy
* ,

3963 
	tXPoöãr
 ,

3965 
	tBoﬁ
 ,

3966 
	tXPoöãr
*

3970 
Sètus
 
	`XI¡î«lC⁄√˘i⁄Numbîs
(

3971 
Di•œy
* ,

3976 
	`XPro˚ssI¡î«lC⁄√˘i⁄
(

3977 
Di•œy
* ,

3981 
Sètus
 
	`XAddC⁄√˘i⁄W©ch
(

3982 
Di•œy
* ,

3983 
XC⁄√˘i⁄W©chProc
 ,

3984 
XPoöãr


3987 
	`XRemoveC⁄√˘i⁄W©ch
(

3988 
Di•œy
* ,

3989 
XC⁄√˘i⁄W©chProc
 ,

3990 
XPoöãr


3993 
	`XSëAuth‹iz©i⁄
(

4000 
	`_Xmbtowc
(

4001 
wch¨_t
 * ,

4002 #ifde‡
ISC


4004 
size_t


4011 
	`_Xw˘omb
(

4013 
wch¨_t


4016 
Boﬁ
 
	`XGëEvítD©a
(

4017 
Di•œy
* ,

4018 
XGíîicEvítCookõ
*

4021 
	`XFªeEvítD©a
(

4022 
Di•œy
* ,

4023 
XGíîicEvítCookõ
*

4026 #ifde‡
__˛™g__


4027 #¥agm®
˛™g
 
dügno°ic
 
p›


4030 
_XFUNCPROTOEND


	@/usr/include/X11/Xutil.h

49 #i‚de‡
_X11_XUTIL_H_


50 
	#_X11_XUTIL_H_


	)

53 
	~<X11/Xlib.h
>

54 
	~<X11/keysym.h
>

59 #ifde‡
__˛™g__


60 #¥agm®
˛™g
 
dügno°ic
 
push


61 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpadded"

68 
	#NoVÆue
 0x0000

	)

69 
	#XVÆue
 0x0001

	)

70 
	#YVÆue
 0x0002

	)

71 
	#WidthVÆue
 0x0004

	)

72 
	#HeightVÆue
 0x0008

	)

73 
	#AŒVÆues
 0x000F

	)

74 
	#XNeg©ive
 0x0010

	)

75 
	#YNeg©ive
 0x0020

	)

82 
	mÊags
;

83 
	mx
, 
	my
;

84 
	mwidth
, 
	mheight
;

85 
	mmö_width
, 
	mmö_height
;

86 
	mmax_width
, 
	mmax_height
;

87 
	mwidth_öc
, 
	mheight_öc
;

89 
	mx
;

90 
	my
;

91 } 
	mmö_a•e˘
, 
	mmax_a•e˘
;

92 
	mba£_width
, 
	mba£_height
;

93 
	mwö_gøvôy
;

94 } 
	tXSizeHöts
;

102 
	#USPosôi⁄
 (1L << 0Ë

	)

103 
	#USSize
 (1L << 1Ë

	)

105 
	#PPosôi⁄
 (1L << 2Ë

	)

106 
	#PSize
 (1L << 3Ë

	)

107 
	#PMöSize
 (1L << 4Ë

	)

108 
	#PMaxSize
 (1L << 5Ë

	)

109 
	#PResizeInc
 (1L << 6Ë

	)

110 
	#PA•e˘
 (1L << 7Ë

	)

111 
	#PBa£Size
 (1L << 8Ë

	)

112 
	#PWöGøvôy
 (1L << 9Ë

	)

115 
	#PAŒHöts
 (
PPosôi⁄
|
PSize
|
PMöSize
|
PMaxSize
|
PResizeInc
|
PA•e˘
)

	)

120 
	mÊags
;

121 
Boﬁ
 
	möput
;

123 
	möôül_°©e
;

124 
Pixm≠
 
	mic⁄_pixm≠
;

125 
Wödow
 
	mic⁄_wödow
;

126 
	mic⁄_x
, 
	mic⁄_y
;

127 
Pixm≠
 
	mic⁄_mask
;

128 
XID
 
	mwödow_group
;

130 } 
	tXWMHöts
;

134 
	#I≈utHöt
 (1L << 0)

	)

135 
	#SèãHöt
 (1L << 1)

	)

136 
	#Ic⁄Pixm≠Höt
 (1L << 2)

	)

137 
	#Ic⁄WödowHöt
 (1L << 3)

	)

138 
	#Ic⁄Posôi⁄Höt
 (1L << 4)

	)

139 
	#Ic⁄MaskHöt
 (1L << 5)

	)

140 
	#WödowGroupHöt
 (1L << 6)

	)

141 
	#AŒHöts
 (
I≈utHöt
|
SèãHöt
|
Ic⁄Pixm≠Höt
|
Ic⁄WödowHöt
| \

142 
Ic⁄Posôi⁄Höt
|
Ic⁄MaskHöt
|
WödowGroupHöt
)

	)

143 
	#XUrgícyHöt
 (1L << 8)

	)

146 
	#WôhdøwnSèã
 0

	)

147 
	#N‹mÆSèã
 1

	)

148 
	#Ic⁄icSèã
 3

	)

153 
	#D⁄tC¨eSèã
 0

	)

154 
	#ZoomSèã
 2

	)

155 
	#I«˘iveSèã
 4

	)

164 *
	mvÆue
;

165 
Atom
 
	mícodög
;

166 
	mf‹m©
;

167 
	mnôems
;

168 } 
	tXTextPr›îty
;

170 
	#XNoMem‹y
 -1

	)

171 
	#XLoˇÀNŸSuµ‹ãd
 -2

	)

172 
	#XC⁄vîãrNŸFound
 -3

	)

175 
	mXSåögStyÀ
,

176 
	mXCompoundTextStyÀ
,

177 
	mXTextStyÀ
,

178 
	mXStdICCTextStyÀ
,

180 
	mXUTF8SåögStyÀ


181 } 
	tXICCEncodögStyÀ
;

184 
	mmö_width
, 
	mmö_height
;

185 
	mmax_width
, 
	mmax_height
;

186 
	mwidth_öc
, 
	mheight_öc
;

187 } 
	tXIc⁄Size
;

190 *
	mªs_«me
;

191 *
	mªs_˛ass
;

192 } 
	tXCœssHöt
;

194 #ifde‡
XUTIL_DEFINE_FUNCTIONS


195 
XDe°royImage
(

196 
XImage
 *
ximage
);

197 
XGëPixñ
(

198 
XImage
 *
ximage
,

199 
x
, 
y
);

200 
XPutPixñ
(

201 
XImage
 *
ximage
,

202 
x
, 
y
,

203 
pixñ
);

204 
XImage
 *
XSubImage
(

205 
XImage
 *
ximage
,

206 
x
, 
y
,

207 
width
, 
height
);

208 
XAddPixñ
(

209 
XImage
 *
ximage
,

210 
vÆue
);

216 
	#XDe°royImage
(
ximage
) \

217 ((*((
ximage
)->
f
.
de°roy_image
))((ximage)))

	)

218 
	#XGëPixñ
(
ximage
, 
x
, 
y
) \

219 ((*((
ximage
)->
f
.
gë_pixñ
))((ximage), (
x
), (
y
)))

	)

220 
	#XPutPixñ
(
ximage
, 
x
, 
y
, 
pixñ
) \

221 ((*((
ximage
)->
f
.
put_pixñ
))((ximage), (
x
), (
y
), (
pixñ
)))

	)

222 
	#XSubImage
(
ximage
, 
x
, 
y
, 
width
, 
height
) \

223 ((*((
ximage
)->
f
.
sub_image
))((ximage), (
x
), (
y
), (
width
), (
height
)))

	)

224 
	#XAddPixñ
(
ximage
, 
vÆue
) \

225 ((*((
ximage
)->
f
.
add_pixñ
))((ximage), (
vÆue
)))

	)

231 
	s_XCompo£Sètus
 {

232 
XPoöãr
 
	mcompo£_±r
;

233 
	mch¨s_m©ched
;

234 } 
	tXCompo£Sètus
;

239 
	#IsKey∑dKey
(
keysym
) \

240 (((
KeySym
)(
keysym
Ë>
XK_KP_S∑˚
Ë&& ((KeySym)(keysymË<
XK_KP_EquÆ
))

	)

242 
	#IsPriv©eKey∑dKey
(
keysym
) \

243 (((
KeySym
)(
keysym
Ë>0x11000000Ë&& ((KeySym)(keysymË<0x1100FFFF))

	)

245 
	#IsCurs‹Key
(
keysym
) \

246 (((
KeySym
)(
keysym
Ë>
XK_Home
Ë&& ((KeySym)(keysymË< 
XK_Sñe˘
))

	)

248 
	#IsPFKey
(
keysym
) \

249 (((
KeySym
)(
keysym
Ë>
XK_KP_F1
Ë&& ((KeySym)(keysymË<
XK_KP_F4
))

	)

251 
	#IsFun˘i⁄Key
(
keysym
) \

252 (((
KeySym
)(
keysym
Ë>
XK_F1
Ë&& ((KeySym)(keysymË<
XK_F35
))

	)

254 
	#IsMiscFun˘i⁄Key
(
keysym
) \

255 (((
KeySym
)(
keysym
Ë>
XK_Sñe˘
Ë&& ((KeySym)(keysymË<
XK_Bªak
))

	)

257 #ifde‡
XK_XKB_KEYS


258 
	#IsModifõrKey
(
keysym
) \

259 ((((
KeySym
)(
keysym
Ë>
XK_Shi·_L
Ë&& ((KeySym)(keysymË<
XK_Hy≥r_R
)) \

260 || (((
KeySym
)(
keysym
Ë>
XK_ISO_Lock
) && \

261 ((
KeySym
)(
keysym
Ë<
XK_ISO_Levñ5_Lock
)) \

262 || ((
KeySym
)(
keysym
Ë=
XK_Mode_swôch
) \

263 || ((
KeySym
)(
keysym
Ë=
XK_Num_Lock
))

	)

265 
	#IsModifõrKey
(
keysym
) \

266 ((((
KeySym
)(
keysym
Ë>
XK_Shi·_L
Ë&& ((KeySym)(keysymË<
XK_Hy≥r_R
)) \

267 || ((
KeySym
)(
keysym
Ë=
XK_Mode_swôch
) \

268 || ((
KeySym
)(
keysym
Ë=
XK_Num_Lock
))

	)

273 
_XRegi⁄
 *
	tRegi⁄
;

277 
	#Re˘™gÀOut
 0

	)

278 
	#Re˘™gÀIn
 1

	)

279 
	#Re˘™gÀP¨t
 2

	)

288 
VisuÆ
 *
	mvisuÆ
;

289 
VisuÆID
 
	mvisuÆid
;

290 
	ms¸ìn
;

291 
	mdïth
;

292 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

293 
	mc_˛ass
;

295 
	m˛ass
;

297 
	mªd_mask
;

298 
	mgªí_mask
;

299 
	mblue_mask
;

300 
	mcﬁ‹m≠_size
;

301 
	mbôs_≥r_rgb
;

302 } 
	tXVisuÆInfo
;

304 
	#VisuÆNoMask
 0x0

	)

305 
	#VisuÆIDMask
 0x1

	)

306 
	#VisuÆS¸ìnMask
 0x2

	)

307 
	#VisuÆDïthMask
 0x4

	)

308 
	#VisuÆCœssMask
 0x8

	)

309 
	#VisuÆRedMaskMask
 0x10

	)

310 
	#VisuÆGªíMaskMask
 0x20

	)

311 
	#VisuÆBlueMaskMask
 0x40

	)

312 
	#VisuÆCﬁ‹m≠SizeMask
 0x80

	)

313 
	#VisuÆBôsPîRGBMask
 0x100

	)

314 
	#VisuÆAŒMask
 0x1FF

	)

321 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

322 
	mªd_max
;

323 
	mªd_mu…
;

324 
	mgªí_max
;

325 
	mgªí_mu…
;

326 
	mblue_max
;

327 
	mblue_mu…
;

328 
	mba£_pixñ
;

329 
VisuÆID
 
	mvisuÆid
;

330 
XID
 
	mkûlid
;

331 } 
	tXSènd¨dCﬁ‹m≠
;

333 
	#Rñó£ByFªeögCﬁ‹m≠
 ((
XID
Ë1LË

	)

339 
	#Bôm≠Suc˚ss
 0

	)

340 
	#Bôm≠O≥nFaûed
 1

	)

341 
	#Bôm≠FûeInvÆid
 2

	)

342 
	#Bôm≠NoMem‹y
 3

	)

353 
	#XCSUCCESS
 0

	)

354 
	#XCNOMEM
 1

	)

355 
	#XCNOENT
 2

	)

357 
	tXC⁄ãxt
;

359 
	#XUniqueC⁄ãxt
(Ë((
XC⁄ãxt
Ë
	`XrmUniqueQu¨k
())

	)

360 
	#XSåögToC⁄ãxt
(
°rög
Ë((
XC⁄ãxt
Ë
	`XrmSåögToQu¨k
(°rög))

	)

362 
_XFUNCPROTOBEGIN


366 
XCœssHöt
 *
XAŒocCœssHöt
 (

370 
XIc⁄Size
 *
XAŒocIc⁄Size
 (

374 
XSizeHöts
 *
XAŒocSizeHöts
 (

378 
XSènd¨dCﬁ‹m≠
 *
XAŒocSènd¨dCﬁ‹m≠
 (

382 
XWMHöts
 *
XAŒocWMHöts
 (

386 
XClùBox
(

387 
Regi⁄
 ,

388 
XRe˘™gÀ
*

391 
Regi⁄
 
XCª©eRegi⁄
(

395 c⁄° *
XDeÁu…Såög
 ();

397 
XDñëeC⁄ãxt
(

398 
Di•œy
* ,

399 
XID
 ,

400 
XC⁄ãxt


403 
XDe°royRegi⁄
(

404 
Regi⁄


407 
XEm±yRegi⁄
(

408 
Regi⁄


411 
XEquÆRegi⁄
(

412 
Regi⁄
 ,

413 
Regi⁄


416 
XFödC⁄ãxt
(

417 
Di•œy
* ,

418 
XID
 ,

419 
XC⁄ãxt
 ,

420 
XPoöãr
*

423 
Sètus
 
XGëCœssHöt
(

424 
Di•œy
* ,

425 
Wödow
 ,

426 
XCœssHöt
*

429 
Sètus
 
XGëIc⁄Sizes
(

430 
Di•œy
* ,

431 
Wödow
 ,

432 
XIc⁄Size
** ,

436 
Sètus
 
XGëN‹mÆHöts
(

437 
Di•œy
* ,

438 
Wödow
 ,

439 
XSizeHöts
*

442 
Sètus
 
XGëRGBCﬁ‹m≠s
(

443 
Di•œy
* ,

444 
Wödow
 ,

445 
XSènd¨dCﬁ‹m≠
** ,

447 
Atom


450 
Sètus
 
XGëSizeHöts
(

451 
Di•œy
* ,

452 
Wödow
 ,

453 
XSizeHöts
* ,

454 
Atom


457 
Sètus
 
XGëSènd¨dCﬁ‹m≠
(

458 
Di•œy
* ,

459 
Wödow
 ,

460 
XSènd¨dCﬁ‹m≠
* ,

461 
Atom


464 
Sètus
 
XGëTextPr›îty
(

465 
Di•œy
* ,

466 
Wödow
 ,

467 
XTextPr›îty
* ,

468 
Atom


471 
XVisuÆInfo
 *
XGëVisuÆInfo
(

472 
Di•œy
* ,

474 
XVisuÆInfo
* ,

478 
Sètus
 
XGëWMClõ¡Machöe
(

479 
Di•œy
* ,

480 
Wödow
 ,

481 
XTextPr›îty
*

484 
XWMHöts
 *
XGëWMHöts
(

485 
Di•œy
* ,

486 
Wödow


489 
Sètus
 
XGëWMIc⁄Name
(

490 
Di•œy
* ,

491 
Wödow
 ,

492 
XTextPr›îty
*

495 
Sètus
 
XGëWMName
(

496 
Di•œy
* ,

497 
Wödow
 ,

498 
XTextPr›îty
*

501 
Sètus
 
XGëWMN‹mÆHöts
(

502 
Di•œy
* ,

503 
Wödow
 ,

504 
XSizeHöts
* ,

508 
Sètus
 
XGëWMSizeHöts
(

509 
Di•œy
* ,

510 
Wödow
 ,

511 
XSizeHöts
* ,

513 
Atom


516 
Sètus
 
XGëZoomHöts
(

517 
Di•œy
* ,

518 
Wödow
 ,

519 
XSizeHöts
*

522 
XI¡î£˘Regi⁄
(

523 
Regi⁄
 ,

524 
Regi⁄
 ,

525 
Regi⁄


528 
XC⁄vîtCa£
(

529 
KeySym
 ,

530 
KeySym
* ,

531 
KeySym
*

534 
XLookupSåög
(

535 
XKeyEvít
* ,

538 
KeySym
* ,

539 
XCompo£Sètus
*

542 
Sètus
 
XM©chVisuÆInfo
(

543 
Di•œy
* ,

547 
XVisuÆInfo
*

550 
XOff£tRegi⁄
(

551 
Regi⁄
 ,

556 
Boﬁ
 
XPoötInRegi⁄
(

557 
Regi⁄
 ,

562 
Regi⁄
 
XPﬁyg⁄Regi⁄
(

563 
XPoöt
* ,

568 
XRe˘InRegi⁄
(

569 
Regi⁄
 ,

576 
XSaveC⁄ãxt
(

577 
Di•œy
* ,

578 
XID
 ,

579 
XC⁄ãxt
 ,

580 
_Xc⁄°
 *

583 
XSëCœssHöt
(

584 
Di•œy
* ,

585 
Wödow
 ,

586 
XCœssHöt
*

589 
XSëIc⁄Sizes
(

590 
Di•œy
* ,

591 
Wödow
 ,

592 
XIc⁄Size
* ,

596 
XSëN‹mÆHöts
(

597 
Di•œy
* ,

598 
Wödow
 ,

599 
XSizeHöts
*

602 
XSëRGBCﬁ‹m≠s
(

603 
Di•œy
* ,

604 
Wödow
 ,

605 
XSènd¨dCﬁ‹m≠
* ,

607 
Atom


610 
XSëSizeHöts
(

611 
Di•œy
* ,

612 
Wödow
 ,

613 
XSizeHöts
* ,

614 
Atom


617 
XSëSènd¨dPr›îtõs
(

618 
Di•œy
* ,

619 
Wödow
 ,

620 
_Xc⁄°
 * ,

621 
_Xc⁄°
 * ,

622 
Pixm≠
 ,

625 
XSizeHöts
*

628 
XSëTextPr›îty
(

629 
Di•œy
* ,

630 
Wödow
 ,

631 
XTextPr›îty
* ,

632 
Atom


635 
XSëWMClõ¡Machöe
(

636 
Di•œy
* ,

637 
Wödow
 ,

638 
XTextPr›îty
*

641 
XSëWMHöts
(

642 
Di•œy
* ,

643 
Wödow
 ,

644 
XWMHöts
*

647 
XSëWMIc⁄Name
(

648 
Di•œy
* ,

649 
Wödow
 ,

650 
XTextPr›îty
*

653 
XSëWMName
(

654 
Di•œy
* ,

655 
Wödow
 ,

656 
XTextPr›îty
*

659 
XSëWMN‹mÆHöts
(

660 
Di•œy
* ,

661 
Wödow
 ,

662 
XSizeHöts
*

665 
XSëWMPr›îtõs
(

666 
Di•œy
* ,

667 
Wödow
 ,

668 
XTextPr›îty
* ,

669 
XTextPr›îty
* ,

672 
XSizeHöts
* ,

673 
XWMHöts
* ,

674 
XCœssHöt
*

677 
XmbSëWMPr›îtõs
(

678 
Di•œy
* ,

679 
Wödow
 ,

680 
_Xc⁄°
 * ,

681 
_Xc⁄°
 * ,

684 
XSizeHöts
* ,

685 
XWMHöts
* ,

686 
XCœssHöt
*

689 
Xutf8SëWMPr›îtõs
(

690 
Di•œy
* ,

691 
Wödow
 ,

692 
_Xc⁄°
 * ,

693 
_Xc⁄°
 * ,

696 
XSizeHöts
* ,

697 
XWMHöts
* ,

698 
XCœssHöt
*

701 
XSëWMSizeHöts
(

702 
Di•œy
* ,

703 
Wödow
 ,

704 
XSizeHöts
* ,

705 
Atom


708 
XSëRegi⁄
(

709 
Di•œy
* ,

710 
GC
 ,

711 
Regi⁄


714 
XSëSènd¨dCﬁ‹m≠
(

715 
Di•œy
* ,

716 
Wödow
 ,

717 
XSènd¨dCﬁ‹m≠
* ,

718 
Atom


721 
XSëZoomHöts
(

722 
Di•œy
* ,

723 
Wödow
 ,

724 
XSizeHöts
*

727 
XShrökRegi⁄
(

728 
Regi⁄
 ,

733 
Sètus
 
XSåögLi°ToTextPr›îty
(

736 
XTextPr›îty
*

739 
XSubåa˘Regi⁄
(

740 
Regi⁄
 ,

741 
Regi⁄
 ,

742 
Regi⁄


745 
XmbTextLi°ToTextPr›îty
(

746 
Di•œy
* 
di•œy
,

747 ** 
li°
,

748 
cou¡
,

749 
XICCEncodögStyÀ
 
°yÀ
,

750 
XTextPr›îty
* 
ãxt_¥›_ªtu∫


753 
XwcTextLi°ToTextPr›îty
(

754 
Di•œy
* 
di•œy
,

755 
wch¨_t
** 
li°
,

756 
cou¡
,

757 
XICCEncodögStyÀ
 
°yÀ
,

758 
XTextPr›îty
* 
ãxt_¥›_ªtu∫


761 
Xutf8TextLi°ToTextPr›îty
(

762 
Di•œy
* 
di•œy
,

763 ** 
li°
,

764 
cou¡
,

765 
XICCEncodögStyÀ
 
°yÀ
,

766 
XTextPr›îty
* 
ãxt_¥›_ªtu∫


769 
XwcFªeSåögLi°
(

770 
wch¨_t
** 
li°


773 
Sètus
 
XTextPr›îtyToSåögLi°
(

774 
XTextPr›îty
* ,

779 
XmbTextPr›îtyToTextLi°
(

780 
Di•œy
* 
di•œy
,

781 c⁄° 
XTextPr›îty
* 
ãxt_¥›
,

782 *** 
li°_ªtu∫
,

783 * 
cou¡_ªtu∫


786 
XwcTextPr›îtyToTextLi°
(

787 
Di•œy
* 
di•œy
,

788 c⁄° 
XTextPr›îty
* 
ãxt_¥›
,

789 
wch¨_t
*** 
li°_ªtu∫
,

790 * 
cou¡_ªtu∫


793 
Xutf8TextPr›îtyToTextLi°
(

794 
Di•œy
* 
di•œy
,

795 c⁄° 
XTextPr›îty
* 
ãxt_¥›
,

796 *** 
li°_ªtu∫
,

797 * 
cou¡_ªtu∫


800 
XUni⁄Re˘WôhRegi⁄
(

801 
XRe˘™gÀ
* ,

802 
Regi⁄
 ,

803 
Regi⁄


806 
XUni⁄Regi⁄
(

807 
Regi⁄
 ,

808 
Regi⁄
 ,

809 
Regi⁄


812 
XWMGeomëry
(

813 
Di•œy
* ,

815 
_Xc⁄°
 * ,

816 
_Xc⁄°
 * ,

818 
XSizeHöts
* ,

826 
XX‹Regi⁄
(

827 
Regi⁄
 ,

828 
Regi⁄
 ,

829 
Regi⁄


832 #ifde‡
__˛™g__


833 #¥agm®
˛™g
 
dügno°ic
 
p›


836 
	g_XFUNCPROTOEND


	@/usr/include/X11/cursorfont.h

29 #i‚de‡
_X11_CURSORFONT_H_


30 
	#_X11_CURSORFONT_H_


	)

32 
	#XC_num_glyphs
 154

	)

33 
	#XC_X_curs‹
 0

	)

34 
	#XC_¨row
 2

	)

35 
	#XC_ba£d_¨row_down
 4

	)

36 
	#XC_ba£d_¨row_up
 6

	)

37 
	#XC_bﬂt
 8

	)

38 
	#XC_bogosôy
 10

	)

39 
	#XC_bŸtom_À·_c‹√r
 12

	)

40 
	#XC_bŸtom_right_c‹√r
 14

	)

41 
	#XC_bŸtom_side
 16

	)

42 
	#XC_bŸtom_ãe
 18

	)

43 
	#XC_box_•úÆ
 20

	)

44 
	#XC_˚¡î_±r
 22

	)

45 
	#XC_cú˛e
 24

	)

46 
	#XC_˛ock
 26

	)

47 
	#XC_cof„e_mug
 28

	)

48 
	#XC_¸oss
 30

	)

49 
	#XC_¸oss_ªvî£
 32

	)

50 
	#XC_¸osshaú
 34

	)

51 
	#XC_düm⁄d_¸oss
 36

	)

52 
	#XC_dŸ
 38

	)

53 
	#XC_dŸbox
 40

	)

54 
	#XC_doubÀ_¨row
 42

	)

55 
	#XC_dø·_œrge
 44

	)

56 
	#XC_dø·_smÆl
 46

	)

57 
	#XC_dø≥d_box
 48

	)

58 
	#XC_exch™ge
 50

	)

59 
	#XC_Êeur
 52

	)

60 
	#XC_gobbÀr
 54

	)

61 
	#XC_gumby
 56

	)

62 
	#XC_h™d1
 58

	)

63 
	#XC_h™d2
 60

	)

64 
	#XC_hóπ
 62

	)

65 
	#XC_ic⁄
 64

	)

66 
	#XC_ú⁄_¸oss
 66

	)

67 
	#XC_À·_±r
 68

	)

68 
	#XC_À·_side
 70

	)

69 
	#XC_À·_ãe
 72

	)

70 
	#XC_À·buâ⁄
 74

	)

71 
	#XC_Œ_™gÀ
 76

	)

72 
	#XC_Ã_™gÀ
 78

	)

73 
	#XC_m™
 80

	)

74 
	#XC_middÀbuâ⁄
 82

	)

75 
	#XC_mou£
 84

	)

76 
	#XC_≥ncû
 86

	)

77 
	#XC_pú©e
 88

	)

78 
	#XC_∂us
 90

	)

79 
	#XC_que°i⁄_¨row
 92

	)

80 
	#XC_right_±r
 94

	)

81 
	#XC_right_side
 96

	)

82 
	#XC_right_ãe
 98

	)

83 
	#XC_rightbuâ⁄
 100

	)

84 
	#XC_πl_logo
 102

	)

85 
	#XC_ßûbﬂt
 104

	)

86 
	#XC_sb_down_¨row
 106

	)

87 
	#XC_sb_h_doubÀ_¨row
 108

	)

88 
	#XC_sb_À·_¨row
 110

	)

89 
	#XC_sb_right_¨row
 112

	)

90 
	#XC_sb_up_¨row
 114

	)

91 
	#XC_sb_v_doubÀ_¨row
 116

	)

92 
	#XC_shuâÀ
 118

	)

93 
	#XC_sizög
 120

	)

94 
	#XC_•idî
 122

	)

95 
	#XC_•øyˇn
 124

	)

96 
	#XC_°¨
 126

	)

97 
	#XC_èrgë
 128

	)

98 
	#XC_t¸oss
 130

	)

99 
	#XC_t›_À·_¨row
 132

	)

100 
	#XC_t›_À·_c‹√r
 134

	)

101 
	#XC_t›_right_c‹√r
 136

	)

102 
	#XC_t›_side
 138

	)

103 
	#XC_t›_ãe
 140

	)

104 
	#XC_åek
 142

	)

105 
	#XC_ul_™gÀ
 144

	)

106 
	#XC_umbªŒa
 146

	)

107 
	#XC_ur_™gÀ
 148

	)

108 
	#XC_w©ch
 150

	)

109 
	#XC_xãrm
 152

	)

	@/usr/include/X11/extensions/XShm.h

29 #i‚de‡
_XSHM_H_


30 
	#_XSHM_H_


	)

32 
	~<X11/Xfun˝rŸo.h
>

33 
	~<X11/exãnsi⁄s/shm.h
>

35 #i‚de‡
_XSHM_SERVER_


36 
	tShmSeg
;

39 
	mty≥
;

40 
	m£rül
;

41 
Boﬁ
 
	m£nd_evít
;

42 
Di•œy
 *
	mdi•œy
;

43 
DøwabÀ
 
	mdøwabÀ
;

44 
	mmaj‹_code
;

45 
	mmö‹_code
;

46 
ShmSeg
 
	mshm£g
;

47 
	moff£t
;

48 } 
	tXShmCom∂ëi⁄Evít
;

51 
ShmSeg
 
	mshm£g
;

52 
	mshmid
;

53 *
	mshmaddr
;

54 
Boﬁ
 
	mªadO∆y
;

55 } 
	tXShmSegmítInfo
;

57 
_XFUNCPROTOBEGIN


59 
Boﬁ
 
XShmQuîyExãnsi⁄
(

60 
Di•œy
*

63 
XShmGëEvítBa£
(

64 
Di•œy
*

67 
Boﬁ
 
XShmQuîyVîsi⁄
(

68 
Di•œy
* ,

71 
Boﬁ
*

74 
XShmPixm≠F‹m©
(

75 
Di•œy
*

78 
Boﬁ
 
XShmAâach
(

79 
Di•œy
* ,

80 
XShmSegmítInfo
*

83 
Boﬁ
 
XShmDëach
(

84 
Di•œy
* ,

85 
XShmSegmítInfo
*

88 
Boﬁ
 
XShmPutImage
(

89 
Di•œy
* ,

90 
DøwabÀ
 ,

91 
GC
 ,

92 
XImage
* ,

99 
Boﬁ


102 
Boﬁ
 
XShmGëImage
(

103 
Di•œy
* ,

104 
DøwabÀ
 ,

105 
XImage
* ,

111 
XImage
 *
XShmCª©eImage
(

112 
Di•œy
* ,

113 
VisuÆ
* ,

117 
XShmSegmítInfo
* ,

122 
Pixm≠
 
XShmCª©ePixm≠
(

123 
Di•œy
* ,

124 
DøwabÀ
 ,

126 
XShmSegmítInfo
* ,

132 
	g_XFUNCPROTOEND


	@/usr/include/X11/keysym.h

49 
	#XK_MISCELLANY


	)

50 
	#XK_XKB_KEYS


	)

51 
	#XK_LATIN1


	)

52 
	#XK_LATIN2


	)

53 
	#XK_LATIN3


	)

54 
	#XK_LATIN4


	)

55 
	#XK_LATIN8


	)

56 
	#XK_LATIN9


	)

57 
	#XK_CAUCASUS


	)

58 
	#XK_GREEK


	)

59 
	#XK_KATAKANA


	)

60 
	#XK_ARABIC


	)

61 
	#XK_CYRILLIC


	)

62 
	#XK_HEBREW


	)

63 
	#XK_THAI


	)

64 
	#XK_KOREAN


	)

65 
	#XK_ARMENIAN


	)

66 
	#XK_GEORGIAN


	)

67 
	#XK_VIETNAMESE


	)

68 
	#XK_CURRENCY


	)

69 
	#XK_MATHEMATICAL


	)

70 
	#XK_BRAILLE


	)

71 
	#XK_SINHALA


	)

73 
	~<X11/keysymdef.h
>

	@/usr/include/alsa/asoundlib.h

28 #i‚de‡
__ASOUNDLIB_H


29 
	#__ASOUNDLIB_H


	)

31 
	~<uni°d.h
>

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<sys/ty≥s.h
>

35 
	~<°rög.h
>

36 
	~<f˙é.h
>

37 
	~<as£π.h
>

38 
	~<sys/pﬁl.h
>

39 
	~<î∫o.h
>

40 
	~<°d¨g.h
>

41 
	~<ídün.h
>

43 #i‚de‡
__GNUC__


44 
	#__ölöe__
 
ölöe


	)

47 
	~<Æß/asoundef.h
>

48 
	~<Æß/vîsi⁄.h
>

49 
	~<Æß/globÆ.h
>

50 
	~<Æß/öput.h
>

51 
	~<Æß/ouçut.h
>

52 
	~<Æß/îr‹.h
>

53 
	~<Æß/c⁄f.h
>

54 
	~<Æß/pcm.h
>

55 
	~<Æß/øwmidi.h
>

56 
	~<Æß/timî.h
>

57 
	~<Æß/hwdï.h
>

58 
	~<Æß/c⁄åﬁ.h
>

59 
	~<Æß/mixî.h
>

60 
	~<Æß/£q_evít.h
>

61 
	~<Æß/£q.h
>

62 
	~<Æß/£qmid.h
>

63 
	~<Æß/£q_midi_evít.h
>

	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


120 #unde‡
°©ic_as£π


121 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/dirent.h

22 #i‚def 
_DIRENT_H


23 
	#_DIRENT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifde‡
__USE_XOPEN


32 #i‚de‡
__öo_t_deföed


33 #i‚de‡
__USE_FILE_OFFSET64


34 
__öo_t
 
	töo_t
;

36 
__öo64_t
 
	töo_t
;

38 
	#__öo_t_deföed


	)

40 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


41 
__öo64_t
 
	töo64_t
;

42 
	#__öo64_t_deföed


	)

61 
	~<bôs/dúít.h
>

63 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


64 
	#d_öo
 
d_fûío


	)

81 #ifde‡
_DIRENT_HAVE_D_NAMLEN


82 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

83 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

85 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

86 #ifde‡
_DIRENT_HAVE_D_RECLEN


87 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

89 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

90 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

95 #ifde‡
__USE_BSD


99 
	mDT_UNKNOWN
 = 0,

100 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

101 
	mDT_FIFO
 = 1,

102 
	#DT_FIFO
 
DT_FIFO


	)

103 
	mDT_CHR
 = 2,

104 
	#DT_CHR
 
DT_CHR


	)

105 
	mDT_DIR
 = 4,

106 
	#DT_DIR
 
DT_DIR


	)

107 
	mDT_BLK
 = 6,

108 
	#DT_BLK
 
DT_BLK


	)

109 
	mDT_REG
 = 8,

110 
	#DT_REG
 
DT_REG


	)

111 
	mDT_LNK
 = 10,

112 
	#DT_LNK
 
DT_LNK


	)

113 
	mDT_SOCK
 = 12,

114 
	#DT_SOCK
 
DT_SOCK


	)

115 
	mDT_WHT
 = 14

116 
	#DT_WHT
 
DT_WHT


	)

120 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

121 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

127 
__dú°ªam
 
	tDIR
;

134 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

136 #ifde‡
__USE_XOPEN2K8


141 
DIR
 *
	`fd›ídú
 (
__fd
);

149 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

161 #i‚de‡
__USE_FILE_OFFSET64


162 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

164 #ifde‡
__REDIRECT


165 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

166 
	`__n⁄nuŒ
 ((1));

168 
	#ªaddú
 
ªaddú64


	)

172 #ifde‡
__USE_LARGEFILE64


173 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

176 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


182 #i‚de‡
__USE_FILE_OFFSET64


183 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

184 
dúít
 *
__ª°ri˘
 
__íåy
,

185 
dúít
 **
__ª°ri˘
 
__ªsu…
)

186 
	`__n⁄nuŒ
 ((1, 2, 3));

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
ªaddú_r
,

190 (
DIR
 *
__ª°ri˘
 
__dúp
,

191 
dúít
 *
__ª°ri˘
 
__íåy
,

192 
dúít
 **
__ª°ri˘
 
__ªsu…
),

193 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

195 
	#ªaddú_r
 
ªaddú64_r


	)

199 #ifde‡
__USE_LARGEFILE64


200 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

201 
dúít64
 *
__ª°ri˘
 
__íåy
,

202 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

203 
	`__n⁄nuŒ
 ((1, 2, 3));

208 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

210 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


211 
	~<bôs/ty≥s.h
>

214 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

220 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


223 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


226 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

229 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


230 #i‚de‡
MAXNAMLEN


232 
	~<bôs/posix1_lim.h
>

235 #ifde‡
NAME_MAX


236 
	#MAXNAMLEN
 
NAME_MAX


	)

238 
	#MAXNAMLEN
 255

	)

243 
	#__√ed_size_t


	)

244 
	~<°ddef.h
>

253 #i‚de‡
__USE_FILE_OFFSET64


254 
	`sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

255 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

256 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

257 (*
__cmp
Ë(c⁄° 
dúít
 **,

258 c⁄° 
dúít
 **))

259 
	`__n⁄nuŒ
 ((1, 2));

261 #ifde‡
__REDIRECT


262 
	`__REDIRECT
 (
sˇndú
,

263 (c⁄° *
__ª°ri˘
 
__dú
,

264 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

265 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

266 (*
__cmp
Ë(c⁄° 
dúít
 **,

267 c⁄° 
dúít
 **)),

268 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

270 
	#sˇndú
 
sˇndú64


	)

274 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


277 
	`sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

278 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

279 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

280 (*
__cmp
Ë(c⁄° 
dúít64
 **,

281 c⁄° 
dúít64
 **))

282 
	`__n⁄nuŒ
 ((1, 2));

285 #ifde‡
__USE_GNU


291 #i‚de‡
__USE_FILE_OFFSET64


292 
	`sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

293 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

294 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

295 (*
__cmp
Ë(c⁄° 
dúít
 **,

296 c⁄° 
dúít
 **))

297 
	`__n⁄nuŒ
 ((2, 3));

299 #ifde‡
__REDIRECT


300 
	`__REDIRECT
 (
sˇndú©
,

301 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

302 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

303 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

304 (*
__cmp
Ë(c⁄° 
dúít
 **,

305 c⁄° 
dúít
 **)),

306 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

308 
	#sˇndú©
 
sˇndú©64


	)

314 
	`sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

315 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

316 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

317 (*
__cmp
Ë(c⁄° 
dúít64
 **,

318 c⁄° 
dúít64
 **))

319 
	`__n⁄nuŒ
 ((2, 3));

323 #i‚de‡
__USE_FILE_OFFSET64


324 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

325 c⁄° 
dúít
 **
__e2
)

326 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

328 #ifde‡
__REDIRECT


329 
	`__REDIRECT_NTH
 (
Æphas‹t
,

330 (c⁄° 
dúít
 **
__e1
,

331 c⁄° 
dúít
 **
__e2
),

332 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

334 
	#Æphas‹t
 
Æphas‹t64


	)

338 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


339 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

340 c⁄° 
dúít64
 **
__e2
)

341 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

346 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


351 #i‚de‡
__USE_FILE_OFFSET64


352 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

353 
size_t
 
__nbyãs
,

354 
__off_t
 *
__ª°ri˘
 
__ba£p
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

357 #ifde‡
__REDIRECT


358 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

359 (
__fd
, *
__ª°ri˘
 
__buf
,

360 
size_t
 
__nbyãs
,

361 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

362 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

364 
	#gëdúíåõs
 
gëdúíåõs64


	)

368 #ifde‡
__USE_LARGEFILE64


369 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

370 
size_t
 
__nbyãs
,

371 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

372 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

376 #ifde‡
__USE_GNU


378 #i‚de‡
__USE_FILE_OFFSET64


379 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

380 c⁄° 
dúít
 **
__e2
)

381 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

383 #ifde‡
__REDIRECT


384 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

385 (c⁄° 
dúít
 **
__e1
,

386 c⁄° 
dúít
 **
__e2
),

387 
vîsi⁄s‹t64
)

388 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

390 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

394 #ifde‡
__USE_LARGEFILE64


395 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

396 c⁄° 
dúít64
 **
__e2
)

397 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

401 
__END_DECLS


	@/usr/include/dlfcn.h

19 #i‚def 
_DLFCN_H


20 
	#_DLFCN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<bôs/dlf˙.h
>

30 #ifde‡
__USE_GNU


35 
	#RTLD_NEXT
 ((*Ë-1l)

	)

40 
	#RTLD_DEFAULT
 ((*Ë0)

	)

44 
	tLmid_t
;

47 
	#LM_ID_BASE
 0

	)

48 
	#LM_ID_NEWLM
 -1

	)

52 
__BEGIN_DECLS


56 *
	$dl›í
 (c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

60 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

64 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

65 c⁄° *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

67 #ifde‡
__USE_GNU


69 *
	$dlm›í
 (
Lmid_t
 
__nsid
, c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

73 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

74 c⁄° *
__ª°ri˘
 
__«me
,

75 c⁄° *
__ª°ri˘
 
__vîsi⁄
)

76 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

82 *
	$dÀº‹
 (Ë
__THROW
;

85 #ifde‡
__USE_GNU


90 c⁄° *
dli_‚ame
;

91 *
dli_fba£
;

92 c⁄° *
dli_¢ame
;

93 *
dli_ßddr
;

94 } 
	tDl_öfo
;

98 
	$dœddr
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
)

99 
__THROW
 
	`__n⁄nuŒ
 ((2));

102 
	$dœddr1
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
,

103 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

111 
RTLD_DL_SYMENT
 = 1,

114 
RTLD_DL_LINKMAP
 = 2

123 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

124 
__ªque°
, *
__ª°ri˘
 
__¨g
)

125 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

131 
RTLD_DI_LMID
 = 1,

135 
RTLD_DI_LINKMAP
 = 2,

137 
RTLD_DI_CONFIGADDR
 = 3,

144 
RTLD_DI_SERINFO
 = 4,

145 
RTLD_DI_SERINFOSIZE
 = 5,

149 
RTLD_DI_ORIGIN
 = 6,

151 
RTLD_DI_PROFILENAME
 = 7,

152 
RTLD_DI_PROFILEOUT
 = 8,

157 
RTLD_DI_TLS_MODID
 = 9,

163 
RTLD_DI_TLS_DATA
 = 10,

165 
RTLD_DI_MAX
 = 10

173 *
dls_«me
;

174 
dls_Êags
;

175 } 
	tDl_£Ω©h
;

181 
size_t
 
dls_size
;

182 
dls_˙t
;

183 
Dl_£Ω©h
 
dls_£Ω©h
[1];

184 } 
	tDl_£röfo
;

188 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

40 #i‚de‡
__mode_t_deföed


41 
__mode_t
 
	tmode_t
;

42 
	#__mode_t_deföed


	)

45 #i‚de‡
__off_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__off_t
 
	toff_t
;

49 
__off64_t
 
	toff_t
;

51 
	#__off_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


55 
__off64_t
 
	toff64_t
;

56 
	#__off64_t_deföed


	)

59 #i‚de‡
__pid_t_deföed


60 
__pid_t
 
	tpid_t
;

61 
	#__pid_t_deföed


	)

65 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


66 
	#__√ed_time•ec


	)

67 
	~<time.h
>

68 
	~<bôs/°©.h
>

70 
	#S_IFMT
 
__S_IFMT


	)

71 
	#S_IFDIR
 
__S_IFDIR


	)

72 
	#S_IFCHR
 
__S_IFCHR


	)

73 
	#S_IFBLK
 
__S_IFBLK


	)

74 
	#S_IFREG
 
__S_IFREG


	)

75 #ifde‡
__S_IFIFO


76 
	#S_IFIFO
 
__S_IFIFO


	)

78 #ifde‡
__S_IFLNK


79 
	#S_IFLNK
 
__S_IFLNK


	)

81 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


82 
	#S_IFSOCK
 
__S_IFSOCK


	)

87 
	#S_ISUID
 
__S_ISUID


	)

88 
	#S_ISGID
 
__S_ISGID


	)

90 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


92 
	#S_ISVTX
 
__S_ISVTX


	)

95 
	#S_IRUSR
 
__S_IREAD


	)

96 
	#S_IWUSR
 
__S_IWRITE


	)

97 
	#S_IXUSR
 
__S_IEXEC


	)

99 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

101 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

102 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

103 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

105 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

107 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

108 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

109 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

111 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

114 #ifdef 
__USE_MISC


115 #i‚de‡
R_OK


118 
	#R_OK
 4

	)

119 
	#W_OK
 2

	)

120 
	#X_OK
 1

	)

121 
	#F_OK
 0

	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#SEEK_SET
 0

	)

128 
	#SEEK_CUR
 1

	)

129 
	#SEEK_END
 2

	)

137 
f˙é
 (
__fd
, 
__cmd
, ...);

145 #i‚de‡
__USE_FILE_OFFSET64


146 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

148 #ifde‡
__REDIRECT


149 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

150 
	`__n⁄nuŒ
 ((1));

152 
	#›í
 
›í64


	)

155 #ifde‡
__USE_LARGEFILE64


156 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

159 #ifde‡
__USE_ATFILE


169 #i‚de‡
__USE_FILE_OFFSET64


170 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

171 
	`__n⁄nuŒ
 ((2));

173 #ifde‡
__REDIRECT


174 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

175 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

177 
	#›í©
 
›í©64


	)

180 #ifde‡
__USE_LARGEFILE64


181 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

182 
	`__n⁄nuŒ
 ((2));

191 #i‚de‡
__USE_FILE_OFFSET64


192 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

194 #ifde‡
__REDIRECT


195 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

196 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

198 
	#¸ót
 
¸ót64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

205 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

206 && !
deföed
 
__USE_POSIX
))

215 
	#F_ULOCK
 0

	)

216 
	#F_LOCK
 1

	)

217 
	#F_TLOCK
 2

	)

218 
	#F_TEST
 3

	)

220 #i‚de‡
__USE_FILE_OFFSET64


221 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

223 #ifde‡
__REDIRECT


224 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

226 
	#lockf
 
lockf64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

234 #ifde‡
__USE_XOPEN2K


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

239 
__advi£
Ë
__THROW
;

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

243 
__off64_t
 
__Àn
, 
__advi£
),

244 
posix_Ádvi£64
);

246 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

249 #ifde‡
__USE_LARGEFILE64


250 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

251 
__advi£
Ë
__THROW
;

259 #i‚de‡
__USE_FILE_OFFSET64


260 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

264 
__off64_t
 
__Àn
),

265 
posix_ÁŒoˇã64
);

267 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

270 #ifde‡
__USE_LARGEFILE64


271 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

277 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

278 && 
deföed
 
__va_¨g_∑ck_Àn


279 
	~<bôs/f˙é2.h
>

282 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/libintl.h

20 #i‚de‡
_LIBINTL_H


21 
	#_LIBINTL_H
 1

	)

23 
	~<„©uªs.h
>

27 
	#__USE_GNU_GETTEXT
 1

	)

31 
	#__GNU_GETTEXT_SUPPORTED_REVISION
(
maj‹
) \

32 ((
maj‹
Ë=0 ? 1 : -1)

	)

34 
__BEGIN_DECLS


39 *
	$gëãxt
 (c⁄° *
__msgid
)

40 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (1);

44 *
	$dgëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid
)

45 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

46 *
	$__dgëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid
)

47 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

51 *
	$dcgëãxt
 (c⁄° *
__domaö«me
,

52 c⁄° *
__msgid
, 
__ˇãg‹y
)

53 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

54 *
	$__dcgëãxt
 (c⁄° *
__domaö«me
,

55 c⁄° *
__msgid
, 
__ˇãg‹y
)

56 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

61 *
	$ngëãxt
 (c⁄° *
__msgid1
, c⁄° *
__msgid2
,

62 
__n
)

63 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (1Ë
	`__©åibuã_f‹m©_¨g__
 (2);

67 *
	$dngëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid1
,

68 c⁄° *
__msgid2
, 
__n
)

69 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

73 *
	$d˙gëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid1
,

74 c⁄° *
__msgid2
, 
__n
,

75 
__ˇãg‹y
)

76 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

82 *
	$ãxtdomaö
 (c⁄° *
__domaö«me
Ë
__THROW
;

86 *
	$bödãxtdomaö
 (c⁄° *
__domaö«me
,

87 c⁄° *
__dú«me
Ë
__THROW
;

91 *
	$böd_ãxtdomaö_code£t
 (c⁄° *
__domaö«me
,

92 c⁄° *
__code£t
Ë
__THROW
;

96 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


99 
	#__√ed_NULL


	)

100 
	~<°ddef.h
>

103 
	~<loˇÀ.h
>

109 
	#gëãxt
(
msgid
Ë
	`dgëãxt
 (
NULL
, msgid)

	)

111 
	#dgëãxt
(
domaö«me
, 
msgid
) \

112 
	`dcgëãxt
 (
domaö«me
, 
msgid
, 
LC_MESSAGES
)

	)

114 
	#ngëãxt
(
msgid1
, 
msgid2
, 
n
Ë
	`dngëãxt
 (
NULL
, msgid1, msgid2,Ç)

	)

116 
	#dngëãxt
(
domaö«me
, 
msgid1
, 
msgid2
, 
n
) \

117 
	`d˙gëãxt
 (
domaö«me
, 
msgid1
, 
msgid2
, 
n
, 
LC_MESSAGES
)

	)

121 
__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/fb.h

1 #i‚de‡
_LINUX_FB_H


2 
	#_LINUX_FB_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/i2c.h
>

9 
	#FB_MAX
 32

	)

13 
	#FBIOGET_VSCREENINFO
 0x4600

	)

14 
	#FBIOPUT_VSCREENINFO
 0x4601

	)

15 
	#FBIOGET_FSCREENINFO
 0x4602

	)

16 
	#FBIOGETCMAP
 0x4604

	)

17 
	#FBIOPUTCMAP
 0x4605

	)

18 
	#FBIOPAN_DISPLAY
 0x4606

	)

19 
	#FBIO_CURSOR
 
	`_IOWR
('F', 0x08, 
fb_curs‹
)

	)

24 
	#FBIOGET_CON2FBMAP
 0x460F

	)

25 
	#FBIOPUT_CON2FBMAP
 0x4610

	)

26 
	#FBIOBLANK
 0x4611

	)

27 
	#FBIOGET_VBLANK
 
	`_IOR
('F', 0x12, 
fb_vbœnk
)

	)

28 
	#FBIO_ALLOC
 0x4613

	)

29 
	#FBIO_FREE
 0x4614

	)

30 
	#FBIOGET_GLYPH
 0x4615

	)

31 
	#FBIOGET_HWCINFO
 0x4616

	)

32 
	#FBIOPUT_MODEINFO
 0x4617

	)

33 
	#FBIOGET_DISPINFO
 0x4618

	)

34 
	#FBIO_WAITFORVSYNC
 
	`_IOW
('F', 0x20, 
__u32
)

	)

36 
	#FB_TYPE_PACKED_PIXELS
 0

	)

37 
	#FB_TYPE_PLANES
 1

	)

38 
	#FB_TYPE_INTERLEAVED_PLANES
 2

	)

39 
	#FB_TYPE_TEXT
 3

	)

40 
	#FB_TYPE_VGA_PLANES
 4

	)

41 
	#FB_TYPE_FOURCC
 5

	)

43 
	#FB_AUX_TEXT_MDA
 0

	)

44 
	#FB_AUX_TEXT_CGA
 1

	)

45 
	#FB_AUX_TEXT_S3_MMIO
 2

	)

46 
	#FB_AUX_TEXT_MGA_STEP16
 3

	)

47 
	#FB_AUX_TEXT_MGA_STEP8
 4

	)

48 
	#FB_AUX_TEXT_SVGA_GROUP
 8

	)

49 
	#FB_AUX_TEXT_SVGA_MASK
 7

	)

50 
	#FB_AUX_TEXT_SVGA_STEP2
 8

	)

51 
	#FB_AUX_TEXT_SVGA_STEP4
 9

	)

52 
	#FB_AUX_TEXT_SVGA_STEP8
 10

	)

53 
	#FB_AUX_TEXT_SVGA_STEP16
 11

	)

54 
	#FB_AUX_TEXT_SVGA_LAST
 15

	)

56 
	#FB_AUX_VGA_PLANES_VGA4
 0

	)

57 
	#FB_AUX_VGA_PLANES_CFB4
 1

	)

58 
	#FB_AUX_VGA_PLANES_CFB8
 2

	)

60 
	#FB_VISUAL_MONO01
 0

	)

61 
	#FB_VISUAL_MONO10
 1

	)

62 
	#FB_VISUAL_TRUECOLOR
 2

	)

63 
	#FB_VISUAL_PSEUDOCOLOR
 3

	)

64 
	#FB_VISUAL_DIRECTCOLOR
 4

	)

65 
	#FB_VISUAL_STATIC_PSEUDOCOLOR
 5

	)

66 
	#FB_VISUAL_FOURCC
 6

	)

68 
	#FB_ACCEL_NONE
 0

	)

69 
	#FB_ACCEL_ATARIBLITT
 1

	)

70 
	#FB_ACCEL_AMIGABLITT
 2

	)

71 
	#FB_ACCEL_S3_TRIO64
 3

	)

72 
	#FB_ACCEL_NCR_77C32BLT
 4

	)

73 
	#FB_ACCEL_S3_VIRGE
 5

	)

74 
	#FB_ACCEL_ATI_MACH64GX
 6

	)

75 
	#FB_ACCEL_DEC_TGA
 7

	)

76 
	#FB_ACCEL_ATI_MACH64CT
 8

	)

77 
	#FB_ACCEL_ATI_MACH64VT
 9

	)

78 
	#FB_ACCEL_ATI_MACH64GT
 10

	)

79 
	#FB_ACCEL_SUN_CREATOR
 11

	)

80 
	#FB_ACCEL_SUN_CGSIX
 12

	)

81 
	#FB_ACCEL_SUN_LEO
 13

	)

82 
	#FB_ACCEL_IMS_TWINTURBO
 14

	)

83 
	#FB_ACCEL_3DLABS_PERMEDIA2
 15

	)

84 
	#FB_ACCEL_MATROX_MGA2064W
 16

	)

85 
	#FB_ACCEL_MATROX_MGA1064SG
 17

	)

86 
	#FB_ACCEL_MATROX_MGA2164W
 18

	)

87 
	#FB_ACCEL_MATROX_MGA2164W_AGP
 19

	)

88 
	#FB_ACCEL_MATROX_MGAG100
 20

	)

89 
	#FB_ACCEL_MATROX_MGAG200
 21

	)

90 
	#FB_ACCEL_SUN_CG14
 22

	)

91 
	#FB_ACCEL_SUN_BWTWO
 23

	)

92 
	#FB_ACCEL_SUN_CGTHREE
 24

	)

93 
	#FB_ACCEL_SUN_TCX
 25

	)

94 
	#FB_ACCEL_MATROX_MGAG400
 26

	)

95 
	#FB_ACCEL_NV3
 27

	)

96 
	#FB_ACCEL_NV4
 28

	)

97 
	#FB_ACCEL_NV5
 29

	)

98 
	#FB_ACCEL_CT_6555x
 30

	)

99 
	#FB_ACCEL_3DFX_BANSHEE
 31

	)

100 
	#FB_ACCEL_ATI_RAGE128
 32

	)

101 
	#FB_ACCEL_IGS_CYBER2000
 33

	)

102 
	#FB_ACCEL_IGS_CYBER2010
 34

	)

103 
	#FB_ACCEL_IGS_CYBER5000
 35

	)

104 
	#FB_ACCEL_SIS_GLAMOUR
 36

	)

105 
	#FB_ACCEL_3DLABS_PERMEDIA3
 37

	)

106 
	#FB_ACCEL_ATI_RADEON
 38

	)

107 
	#FB_ACCEL_I810
 39

	)

108 
	#FB_ACCEL_SIS_GLAMOUR_2
 40

	)

109 
	#FB_ACCEL_SIS_XABRE
 41

	)

110 
	#FB_ACCEL_I830
 42

	)

111 
	#FB_ACCEL_NV_10
 43

	)

112 
	#FB_ACCEL_NV_20
 44

	)

113 
	#FB_ACCEL_NV_30
 45

	)

114 
	#FB_ACCEL_NV_40
 46

	)

115 
	#FB_ACCEL_XGI_VOLARI_V
 47

	)

116 
	#FB_ACCEL_XGI_VOLARI_Z
 48

	)

117 
	#FB_ACCEL_OMAP1610
 49

	)

118 
	#FB_ACCEL_TRIDENT_TGUI
 50

	)

119 
	#FB_ACCEL_TRIDENT_3DIMAGE
 51

	)

120 
	#FB_ACCEL_TRIDENT_BLADE3D
 52

	)

121 
	#FB_ACCEL_TRIDENT_BLADEXP
 53

	)

122 
	#FB_ACCEL_CIRRUS_ALPINE
 53

	)

123 
	#FB_ACCEL_NEOMAGIC_NM2070
 90

	)

124 
	#FB_ACCEL_NEOMAGIC_NM2090
 91

	)

125 
	#FB_ACCEL_NEOMAGIC_NM2093
 92

	)

126 
	#FB_ACCEL_NEOMAGIC_NM2097
 93

	)

127 
	#FB_ACCEL_NEOMAGIC_NM2160
 94

	)

128 
	#FB_ACCEL_NEOMAGIC_NM2200
 95

	)

129 
	#FB_ACCEL_NEOMAGIC_NM2230
 96

	)

130 
	#FB_ACCEL_NEOMAGIC_NM2360
 97

	)

131 
	#FB_ACCEL_NEOMAGIC_NM2380
 98

	)

132 
	#FB_ACCEL_PXA3XX
 99

	)

134 
	#FB_ACCEL_SAVAGE4
 0x80

	)

135 
	#FB_ACCEL_SAVAGE3D
 0x81

	)

136 
	#FB_ACCEL_SAVAGE3D_MV
 0x82

	)

137 
	#FB_ACCEL_SAVAGE2000
 0x83

	)

138 
	#FB_ACCEL_SAVAGE_MX_MV
 0x84

	)

139 
	#FB_ACCEL_SAVAGE_MX
 0x85

	)

140 
	#FB_ACCEL_SAVAGE_IX_MV
 0x86

	)

141 
	#FB_ACCEL_SAVAGE_IX
 0x87

	)

142 
	#FB_ACCEL_PROSAVAGE_PM
 0x88

	)

143 
	#FB_ACCEL_PROSAVAGE_KM
 0x89

	)

144 
	#FB_ACCEL_S3TWISTER_P
 0x8®

	)

145 
	#FB_ACCEL_S3TWISTER_K
 0x8b

	)

146 
	#FB_ACCEL_SUPERSAVAGE
 0x8¯

	)

147 
	#FB_ACCEL_PROSAVAGE_DDR
 0x8d

	)

148 
	#FB_ACCEL_PROSAVAGE_DDRK
 0x8ê

	)

150 
	#FB_ACCEL_PUV3_UNIGFX
 0xa0

	)

152 
	#FB_CAP_FOURCC
 1

	)

154 
	sfb_fix_s¸ìnöfo
 {

155 
	mid
[16];

156 
	msmem_°¨t
;

158 
__u32
 
	msmem_Àn
;

159 
__u32
 
	mty≥
;

160 
__u32
 
	mty≥_aux
;

161 
__u32
 
	mvisuÆ
;

162 
__u16
 
	mx∑n°ï
;

163 
__u16
 
	my∑n°ï
;

164 
__u16
 
	mywøp°ï
;

165 
__u32
 
	mlöe_Àngth
;

166 
	mmmio_°¨t
;

168 
__u32
 
	mmmio_Àn
;

169 
__u32
 
	mac˚l
;

171 
__u16
 
	mˇ∑bûôõs
;

172 
__u16
 
	mª£rved
[2];

185 
	sfb_bôfõld
 {

186 
__u32
 
	moff£t
;

187 
__u32
 
	mÀngth
;

188 
__u32
 
	mmsb_right
;

192 
	#FB_NONSTD_HAM
 1

	)

193 
	#FB_NONSTD_REV_PIX_IN_B
 2

	)

195 
	#FB_ACTIVATE_NOW
 0

	)

196 
	#FB_ACTIVATE_NXTOPEN
 1

	)

197 
	#FB_ACTIVATE_TEST
 2

	)

198 
	#FB_ACTIVATE_MASK
 15

	)

200 
	#FB_ACTIVATE_VBL
 16

	)

201 
	#FB_CHANGE_CMAP_VBL
 32

	)

202 
	#FB_ACTIVATE_ALL
 64

	)

203 
	#FB_ACTIVATE_FORCE
 128

	)

204 
	#FB_ACTIVATE_INV_MODE
 256

	)

206 
	#FB_ACCELF_TEXT
 1

	)

208 
	#FB_SYNC_HOR_HIGH_ACT
 1

	)

209 
	#FB_SYNC_VERT_HIGH_ACT
 2

	)

210 
	#FB_SYNC_EXT
 4

	)

211 
	#FB_SYNC_COMP_HIGH_ACT
 8

	)

212 
	#FB_SYNC_BROADCAST
 16

	)

215 
	#FB_SYNC_ON_GREEN
 32

	)

217 
	#FB_VMODE_NONINTERLACED
 0

	)

218 
	#FB_VMODE_INTERLACED
 1

	)

219 
	#FB_VMODE_DOUBLE
 2

	)

220 
	#FB_VMODE_ODD_FLD_FIRST
 4

	)

221 
	#FB_VMODE_MASK
 255

	)

223 
	#FB_VMODE_YWRAP
 256

	)

224 
	#FB_VMODE_SMOOTH_XPAN
 512

	)

225 
	#FB_VMODE_CONUPDATE
 512

	)

230 
	#FB_ROTATE_UR
 0

	)

231 
	#FB_ROTATE_CW
 1

	)

232 
	#FB_ROTATE_UD
 2

	)

233 
	#FB_ROTATE_CCW
 3

	)

235 
	#PICOS2KHZ
(
a
Ë(1000000000UL/◊))

	)

236 
	#KHZ2PICOS
(
a
Ë(1000000000UL/◊))

	)

238 
	sfb_v¨_s¸ìnöfo
 {

239 
__u32
 
	mxªs
;

240 
__u32
 
	myªs
;

241 
__u32
 
	mxªs_vútuÆ
;

242 
__u32
 
	myªs_vútuÆ
;

243 
__u32
 
	mxoff£t
;

244 
__u32
 
	myoff£t
;

246 
__u32
 
	mbôs_≥r_pixñ
;

247 
__u32
 
	mgøysˇÀ
;

249 
fb_bôfõld
 
	mªd
;

250 
fb_bôfõld
 
	mgªí
;

251 
fb_bôfõld
 
	mblue
;

252 
fb_bôfõld
 
	må™•
;

254 
__u32
 
	mn⁄°d
;

256 
__u32
 
	ma˘iv©e
;

258 
__u32
 
	mheight
;

259 
__u32
 
	mwidth
;

261 
__u32
 
	mac˚l_Êags
;

264 
__u32
 
	mpix˛ock
;

265 
__u32
 
	mÀ·_m¨gö
;

266 
__u32
 
	mright_m¨gö
;

267 
__u32
 
	muµî_m¨gö
;

268 
__u32
 
	mlowî_m¨gö
;

269 
__u32
 
	mhsync_Àn
;

270 
__u32
 
	mvsync_Àn
;

271 
__u32
 
	msync
;

272 
__u32
 
	mvmode
;

273 
__u32
 
	mrŸ©e
;

274 
__u32
 
	mcﬁ‹•a˚
;

275 
__u32
 
	mª£rved
[4];

278 
	sfb_cm≠
 {

279 
__u32
 
	m°¨t
;

280 
__u32
 
	mÀn
;

281 
__u16
 *
	mªd
;

282 
__u16
 *
	mgªí
;

283 
__u16
 *
	mblue
;

284 
__u16
 *
	må™•
;

287 
	sfb_c⁄2fbm≠
 {

288 
__u32
 
	mc⁄sﬁe
;

289 
__u32
 
	m‰amebuf„r
;

293 
	#VESA_NO_BLANKING
 0

	)

294 
	#VESA_VSYNC_SUSPEND
 1

	)

295 
	#VESA_HSYNC_SUSPEND
 2

	)

296 
	#VESA_POWERDOWN
 3

	)

301 
	mFB_BLANK_UNBLANK
 = 
VESA_NO_BLANKING
,

304 
	mFB_BLANK_NORMAL
 = 
VESA_NO_BLANKING
 + 1,

307 
	mFB_BLANK_VSYNC_SUSPEND
 = 
VESA_VSYNC_SUSPEND
 + 1,

310 
	mFB_BLANK_HSYNC_SUSPEND
 = 
VESA_HSYNC_SUSPEND
 + 1,

313 
	mFB_BLANK_POWERDOWN
 = 
VESA_POWERDOWN
 + 1

316 
	#FB_VBLANK_VBLANKING
 0x001

	)

317 
	#FB_VBLANK_HBLANKING
 0x002

	)

318 
	#FB_VBLANK_HAVE_VBLANK
 0x004

	)

319 
	#FB_VBLANK_HAVE_HBLANK
 0x008

	)

320 
	#FB_VBLANK_HAVE_COUNT
 0x010

	)

321 
	#FB_VBLANK_HAVE_VCOUNT
 0x020

	)

322 
	#FB_VBLANK_HAVE_HCOUNT
 0x040

	)

323 
	#FB_VBLANK_VSYNCING
 0x080

	)

324 
	#FB_VBLANK_HAVE_VSYNC
 0x100

	)

326 
	sfb_vbœnk
 {

327 
__u32
 
	mÊags
;

328 
__u32
 
	mcou¡
;

329 
__u32
 
	mvcou¡
;

330 
__u32
 
	mhcou¡
;

331 
__u32
 
	mª£rved
[4];

335 
	#ROP_COPY
 0

	)

336 
	#ROP_XOR
 1

	)

338 
	sfb_c›y¨ó
 {

339 
__u32
 
	mdx
;

340 
__u32
 
	mdy
;

341 
__u32
 
	mwidth
;

342 
__u32
 
	mheight
;

343 
__u32
 
	msx
;

344 
__u32
 
	msy
;

347 
	sfb_fûÃe˘
 {

348 
__u32
 
	mdx
;

349 
__u32
 
	mdy
;

350 
__u32
 
	mwidth
;

351 
__u32
 
	mheight
;

352 
__u32
 
	mcﬁ‹
;

353 
__u32
 
	mr›
;

356 
	sfb_image
 {

357 
__u32
 
	mdx
;

358 
__u32
 
	mdy
;

359 
__u32
 
	mwidth
;

360 
__u32
 
	mheight
;

361 
__u32
 
	mfg_cﬁ‹
;

362 
__u32
 
	mbg_cﬁ‹
;

363 
__u8
 
	mdïth
;

364 c⁄° *
	md©a
;

365 
fb_cm≠
 
	mcm≠
;

372 
	#FB_CUR_SETIMAGE
 0x01

	)

373 
	#FB_CUR_SETPOS
 0x02

	)

374 
	#FB_CUR_SETHOT
 0x04

	)

375 
	#FB_CUR_SETCMAP
 0x08

	)

376 
	#FB_CUR_SETSHAPE
 0x10

	)

377 
	#FB_CUR_SETSIZE
 0x20

	)

378 
	#FB_CUR_SETALL
 0xFF

	)

380 
	sfbcuΩos
 {

381 
__u16
 
	mx
, 
	my
;

384 
	sfb_curs‹
 {

385 
__u16
 
	m£t
;

386 
__u16
 
	míabÀ
;

387 
__u16
 
	mr›
;

388 c⁄° *
	mmask
;

389 
fbcuΩos
 
	mhŸ
;

390 
fb_image
 
	mimage
;

393 #ifde‡
CONFIG_FB_BACKLIGHT


395 
	#FB_BACKLIGHT_LEVELS
 128

	)

396 
	#FB_BACKLIGHT_MAX
 0xFF

	)

	@/usr/include/linux/fs.h

1 #i‚de‡
_LINUX_FS_H


2 
	#_LINUX_FS_H


	)

9 
	~<löux/limôs.h
>

10 
	~<löux/io˘l.h
>

11 
	~<löux/ty≥s.h
>

24 #unde‡
NR_OPEN


25 
	#INR_OPEN_CUR
 1024

	)

26 
	#INR_OPEN_MAX
 4096

	)

28 
	#BLOCK_SIZE_BITS
 10

	)

29 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

31 
	#SEEK_SET
 0

	)

32 
	#SEEK_CUR
 1

	)

33 
	#SEEK_END
 2

	)

34 
	#SEEK_DATA
 3

	)

35 
	#SEEK_HOLE
 4

	)

36 
	#SEEK_MAX
 
SEEK_HOLE


	)

38 
	#RENAME_NOREPLACE
 (1 << 0Ë

	)

39 
	#RENAME_EXCHANGE
 (1 << 1Ë

	)

41 
	sf°rim_ønge
 {

42 
__u64
 
	m°¨t
;

43 
__u64
 
	mÀn
;

44 
__u64
 
	mmöÀn
;

48 
	sfûes_°©_°ru˘
 {

49 
	mƒ_fûes
;

50 
	mƒ_‰ì_fûes
;

51 
	mmax_fûes
;

54 
	söodes_°©_t
 {

55 
	mƒ_öodes
;

56 
	mƒ_unu£d
;

57 
	mdummy
[5];

61 
	#NR_FILE
 8192

	)

67 
	#MS_RDONLY
 1

	)

68 
	#MS_NOSUID
 2

	)

69 
	#MS_NODEV
 4

	)

70 
	#MS_NOEXEC
 8

	)

71 
	#MS_SYNCHRONOUS
 16

	)

72 
	#MS_REMOUNT
 32

	)

73 
	#MS_MANDLOCK
 64

	)

74 
	#MS_DIRSYNC
 128

	)

75 
	#MS_NOATIME
 1024

	)

76 
	#MS_NODIRATIME
 2048

	)

77 
	#MS_BIND
 4096

	)

78 
	#MS_MOVE
 8192

	)

79 
	#MS_REC
 16384

	)

80 
	#MS_VERBOSE
 32768

	)

82 
	#MS_SILENT
 32768

	)

83 
	#MS_POSIXACL
 (1<<16Ë

	)

84 
	#MS_UNBINDABLE
 (1<<17Ë

	)

85 
	#MS_PRIVATE
 (1<<18Ë

	)

86 
	#MS_SLAVE
 (1<<19Ë

	)

87 
	#MS_SHARED
 (1<<20Ë

	)

88 
	#MS_RELATIME
 (1<<21Ë

	)

89 
	#MS_KERNMOUNT
 (1<<22Ë

	)

90 
	#MS_I_VERSION
 (1<<23Ë

	)

91 
	#MS_STRICTATIME
 (1<<24Ë

	)

94 
	#MS_NOSEC
 (1<<28)

	)

95 
	#MS_BORN
 (1<<29)

	)

96 
	#MS_ACTIVE
 (1<<30)

	)

97 
	#MS_NOUSER
 (1<<31)

	)

102 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
)

	)

107 
	#MS_MGC_VAL
 0xC0ED0000

	)

108 
	#MS_MGC_MSK
 0xffff0000

	)

113 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

114 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

115 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

116 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

117 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

118 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

119 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

120 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

121 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

122 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

123 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

124 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

126 
	#BLKPG
 
	`_IO
(0x12,105)

	)

130 
	#BLKELVGET
 
	`_IOR
(0x12,106,
size_t
)

	)

131 
	#BLKELVSET
 
	`_IOW
(0x12,107,
size_t
)

	)

136 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

137 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

138 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

139 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

140 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

141 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

142 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

143 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

144 
	#BLKIOMIN
 
	`_IO
(0x12,120)

	)

145 
	#BLKIOOPT
 
	`_IO
(0x12,121)

	)

146 
	#BLKALIGNOFF
 
	`_IO
(0x12,122)

	)

147 
	#BLKPBSZGET
 
	`_IO
(0x12,123)

	)

148 
	#BLKDISCARDZEROES
 
	`_IO
(0x12,124)

	)

149 
	#BLKSECDISCARD
 
	`_IO
(0x12,125)

	)

150 
	#BLKROTATIONAL
 
	`_IO
(0x12,126)

	)

151 
	#BLKZEROOUT
 
	`_IO
(0x12,127)

	)

153 
	#BMAP_IOCTL
 1

	)

154 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

155 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

156 
	#FIFREEZE
 
	`_IOWR
('X', 119, Ë

	)

157 
	#FITHAW
 
	`_IOWR
('X', 120, Ë

	)

158 
	#FITRIM
 
	`_IOWR
('X', 121, 
f°rim_ønge
Ë

	)

160 
	#FS_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

161 
	#FS_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

162 
	#FS_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

163 
	#FS_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

164 
	#FS_IOC_FIEMAP
 
	`_IOWR
('f', 11, 
fõm≠
)

	)

165 
	#FS_IOC32_GETFLAGS
 
	`_IOR
('f', 1, )

	)

166 
	#FS_IOC32_SETFLAGS
 
	`_IOW
('f', 2, )

	)

167 
	#FS_IOC32_GETVERSION
 
	`_IOR
('v', 1, )

	)

168 
	#FS_IOC32_SETVERSION
 
	`_IOW
('v', 2, )

	)

173 
	#FS_SECRM_FL
 0x00000001

	)

174 
	#FS_UNRM_FL
 0x00000002

	)

175 
	#FS_COMPR_FL
 0x00000004

	)

176 
	#FS_SYNC_FL
 0x00000008

	)

177 
	#FS_IMMUTABLE_FL
 0x00000010

	)

178 
	#FS_APPEND_FL
 0x00000020

	)

179 
	#FS_NODUMP_FL
 0x00000040

	)

180 
	#FS_NOATIME_FL
 0x00000080

	)

182 
	#FS_DIRTY_FL
 0x00000100

	)

183 
	#FS_COMPRBLK_FL
 0x00000200

	)

184 
	#FS_NOCOMP_FL
 0x00000400

	)

185 
	#FS_ECOMPR_FL
 0x00000800

	)

187 
	#FS_BTREE_FL
 0x00001000

	)

188 
	#FS_INDEX_FL
 0x00001000

	)

189 
	#FS_IMAGIC_FL
 0x00002000

	)

190 
	#FS_JOURNAL_DATA_FL
 0x00004000

	)

191 
	#FS_NOTAIL_FL
 0x00008000

	)

192 
	#FS_DIRSYNC_FL
 0x00010000

	)

193 
	#FS_TOPDIR_FL
 0x00020000

	)

194 
	#FS_EXTENT_FL
 0x00080000

	)

195 
	#FS_DIRECTIO_FL
 0x00100000

	)

196 
	#FS_NOCOW_FL
 0x00800000

	)

197 
	#FS_RESERVED_FL
 0x80000000

	)

199 
	#FS_FL_USER_VISIBLE
 0x0003DFFF

	)

200 
	#FS_FL_USER_MODIFIABLE
 0x000380FF

	)

203 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

204 
	#SYNC_FILE_RANGE_WRITE
 2

	)

205 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

	@/usr/include/linux/input.h

8 #i‚de‡
_INPUT_H


9 
	#_INPUT_H


	)

12 
	~<sys/time.h
>

13 
	~<sys/io˘l.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<löux/ty≥s.h
>

22 
	söput_evít
 {

23 
timevÆ
 
	mtime
;

24 
__u16
 
	mty≥
;

25 
__u16
 
	mcode
;

26 
__s32
 
	mvÆue
;

33 
	#EV_VERSION
 0x010001

	)

39 
	söput_id
 {

40 
__u16
 
	mbu°y≥
;

41 
__u16
 
	mvíd‹
;

42 
__u16
 
	m¥odu˘
;

43 
__u16
 
	mvîsi⁄
;

65 
	söput_absöfo
 {

66 
__s32
 
	mvÆue
;

67 
__s32
 
	mmöimum
;

68 
__s32
 
	mmaximum
;

69 
__s32
 
	mfuzz
;

70 
__s32
 
	mÊ©
;

71 
__s32
 
	mªsﬁuti⁄
;

89 
	söput_keym≠_íåy
 {

90 
	#INPUT_KEYMAP_BY_INDEX
 (1 << 0)

	)

91 
__u8
 
	mÊags
;

92 
__u8
 
	mÀn
;

93 
__u16
 
	mödex
;

94 
__u32
 
	mkeycode
;

95 
__u8
 
	msˇncode
[32];

98 
	#EVIOCGVERSION
 
	`_IOR
('E', 0x01, Ë

	)

99 
	#EVIOCGID
 
	`_IOR
('E', 0x02, 
öput_id
Ë

	)

100 
	#EVIOCGREP
 
	`_IOR
('E', 0x03, [2]Ë

	)

101 
	#EVIOCSREP
 
	`_IOW
('E', 0x03, [2]Ë

	)

103 
	#EVIOCGKEYCODE
 
	`_IOR
('E', 0x04, [2]Ë

	)

104 
	#EVIOCGKEYCODE_V2
 
	`_IOR
('E', 0x04, 
öput_keym≠_íåy
)

	)

105 
	#EVIOCSKEYCODE
 
	`_IOW
('E', 0x04, [2]Ë

	)

106 
	#EVIOCSKEYCODE_V2
 
	`_IOW
('E', 0x04, 
öput_keym≠_íåy
)

	)

108 
	#EVIOCGNAME
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x06,ÜíË

	)

109 
	#EVIOCGPHYS
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x07,ÜíË

	)

110 
	#EVIOCGUNIQ
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x08,ÜíË

	)

111 
	#EVIOCGPROP
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x09,ÜíË

	)

137 
	#EVIOCGMTSLOTS
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x0a,Üí)

	)

139 
	#EVIOCGKEY
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x18,ÜíË

	)

140 
	#EVIOCGLED
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x19,ÜíË

	)

141 
	#EVIOCGSND
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x1a,ÜíË

	)

142 
	#EVIOCGSW
(
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x1b,ÜíË

	)

144 
	#EVIOCGBIT
(
ev
,
Àn
Ë
	`_IOC
(
_IOC_READ
, 'E', 0x20 + (ev),ÜíË

	)

145 
	#EVIOCGABS
(
abs
Ë
	`_IOR
('E', 0x40 + (abs), 
öput_absöfo
Ë

	)

146 
	#EVIOCSABS
(
abs
Ë
	`_IOW
('E', 0xc0 + (abs), 
öput_absöfo
Ë

	)

148 
	#EVIOCSFF
 
	`_IOC
(
_IOC_WRITE
, 'E', 0x80, (
ff_ef„˘
)Ë

	)

149 
	#EVIOCRMFF
 
	`_IOW
('E', 0x81, Ë

	)

150 
	#EVIOCGEFFECTS
 
	`_IOR
('E', 0x84, Ë

	)

152 
	#EVIOCGRAB
 
	`_IOW
('E', 0x90, Ë

	)

153 
	#EVIOCREVOKE
 
	`_IOW
('E', 0x91, Ë

	)

155 
	#EVIOCSCLOCKID
 
	`_IOW
('E', 0xa0, Ë

	)

161 
	#INPUT_PROP_POINTER
 0x00

	)

162 
	#INPUT_PROP_DIRECT
 0x01

	)

163 
	#INPUT_PROP_BUTTONPAD
 0x02

	)

164 
	#INPUT_PROP_SEMI_MT
 0x03

	)

165 
	#INPUT_PROP_TOPBUTTONPAD
 0x04

	)

167 
	#INPUT_PROP_MAX
 0x1f

	)

168 
	#INPUT_PROP_CNT
 (
INPUT_PROP_MAX
 + 1)

	)

174 
	#EV_SYN
 0x00

	)

175 
	#EV_KEY
 0x01

	)

176 
	#EV_REL
 0x02

	)

177 
	#EV_ABS
 0x03

	)

178 
	#EV_MSC
 0x04

	)

179 
	#EV_SW
 0x05

	)

180 
	#EV_LED
 0x11

	)

181 
	#EV_SND
 0x12

	)

182 
	#EV_REP
 0x14

	)

183 
	#EV_FF
 0x15

	)

184 
	#EV_PWR
 0x16

	)

185 
	#EV_FF_STATUS
 0x17

	)

186 
	#EV_MAX
 0x1f

	)

187 
	#EV_CNT
 (
EV_MAX
+1)

	)

193 
	#SYN_REPORT
 0

	)

194 
	#SYN_CONFIG
 1

	)

195 
	#SYN_MT_REPORT
 2

	)

196 
	#SYN_DROPPED
 3

	)

197 
	#SYN_MAX
 0xf

	)

198 
	#SYN_CNT
 (
SYN_MAX
+1)

	)

211 
	#KEY_RESERVED
 0

	)

212 
	#KEY_ESC
 1

	)

213 
	#KEY_1
 2

	)

214 
	#KEY_2
 3

	)

215 
	#KEY_3
 4

	)

216 
	#KEY_4
 5

	)

217 
	#KEY_5
 6

	)

218 
	#KEY_6
 7

	)

219 
	#KEY_7
 8

	)

220 
	#KEY_8
 9

	)

221 
	#KEY_9
 10

	)

222 
	#KEY_0
 11

	)

223 
	#KEY_MINUS
 12

	)

224 
	#KEY_EQUAL
 13

	)

225 
	#KEY_BACKSPACE
 14

	)

226 
	#KEY_TAB
 15

	)

227 
	#KEY_Q
 16

	)

228 
	#KEY_W
 17

	)

229 
	#KEY_E
 18

	)

230 
	#KEY_R
 19

	)

231 
	#KEY_T
 20

	)

232 
	#KEY_Y
 21

	)

233 
	#KEY_U
 22

	)

234 
	#KEY_I
 23

	)

235 
	#KEY_O
 24

	)

236 
	#KEY_P
 25

	)

237 
	#KEY_LEFTBRACE
 26

	)

238 
	#KEY_RIGHTBRACE
 27

	)

239 
	#KEY_ENTER
 28

	)

240 
	#KEY_LEFTCTRL
 29

	)

241 
	#KEY_A
 30

	)

242 
	#KEY_S
 31

	)

243 
	#KEY_D
 32

	)

244 
	#KEY_F
 33

	)

245 
	#KEY_G
 34

	)

246 
	#KEY_H
 35

	)

247 
	#KEY_J
 36

	)

248 
	#KEY_K
 37

	)

249 
	#KEY_L
 38

	)

250 
	#KEY_SEMICOLON
 39

	)

251 
	#KEY_APOSTROPHE
 40

	)

252 
	#KEY_GRAVE
 41

	)

253 
	#KEY_LEFTSHIFT
 42

	)

254 
	#KEY_BACKSLASH
 43

	)

255 
	#KEY_Z
 44

	)

256 
	#KEY_X
 45

	)

257 
	#KEY_C
 46

	)

258 
	#KEY_V
 47

	)

259 
	#KEY_B
 48

	)

260 
	#KEY_N
 49

	)

261 
	#KEY_M
 50

	)

262 
	#KEY_COMMA
 51

	)

263 
	#KEY_DOT
 52

	)

264 
	#KEY_SLASH
 53

	)

265 
	#KEY_RIGHTSHIFT
 54

	)

266 
	#KEY_KPASTERISK
 55

	)

267 
	#KEY_LEFTALT
 56

	)

268 
	#KEY_SPACE
 57

	)

269 
	#KEY_CAPSLOCK
 58

	)

270 
	#KEY_F1
 59

	)

271 
	#KEY_F2
 60

	)

272 
	#KEY_F3
 61

	)

273 
	#KEY_F4
 62

	)

274 
	#KEY_F5
 63

	)

275 
	#KEY_F6
 64

	)

276 
	#KEY_F7
 65

	)

277 
	#KEY_F8
 66

	)

278 
	#KEY_F9
 67

	)

279 
	#KEY_F10
 68

	)

280 
	#KEY_NUMLOCK
 69

	)

281 
	#KEY_SCROLLLOCK
 70

	)

282 
	#KEY_KP7
 71

	)

283 
	#KEY_KP8
 72

	)

284 
	#KEY_KP9
 73

	)

285 
	#KEY_KPMINUS
 74

	)

286 
	#KEY_KP4
 75

	)

287 
	#KEY_KP5
 76

	)

288 
	#KEY_KP6
 77

	)

289 
	#KEY_KPPLUS
 78

	)

290 
	#KEY_KP1
 79

	)

291 
	#KEY_KP2
 80

	)

292 
	#KEY_KP3
 81

	)

293 
	#KEY_KP0
 82

	)

294 
	#KEY_KPDOT
 83

	)

296 
	#KEY_ZENKAKUHANKAKU
 85

	)

297 
	#KEY_102ND
 86

	)

298 
	#KEY_F11
 87

	)

299 
	#KEY_F12
 88

	)

300 
	#KEY_RO
 89

	)

301 
	#KEY_KATAKANA
 90

	)

302 
	#KEY_HIRAGANA
 91

	)

303 
	#KEY_HENKAN
 92

	)

304 
	#KEY_KATAKANAHIRAGANA
 93

	)

305 
	#KEY_MUHENKAN
 94

	)

306 
	#KEY_KPJPCOMMA
 95

	)

307 
	#KEY_KPENTER
 96

	)

308 
	#KEY_RIGHTCTRL
 97

	)

309 
	#KEY_KPSLASH
 98

	)

310 
	#KEY_SYSRQ
 99

	)

311 
	#KEY_RIGHTALT
 100

	)

312 
	#KEY_LINEFEED
 101

	)

313 
	#KEY_HOME
 102

	)

314 
	#KEY_UP
 103

	)

315 
	#KEY_PAGEUP
 104

	)

316 
	#KEY_LEFT
 105

	)

317 
	#KEY_RIGHT
 106

	)

318 
	#KEY_END
 107

	)

319 
	#KEY_DOWN
 108

	)

320 
	#KEY_PAGEDOWN
 109

	)

321 
	#KEY_INSERT
 110

	)

322 
	#KEY_DELETE
 111

	)

323 
	#KEY_MACRO
 112

	)

324 
	#KEY_MUTE
 113

	)

325 
	#KEY_VOLUMEDOWN
 114

	)

326 
	#KEY_VOLUMEUP
 115

	)

327 
	#KEY_POWER
 116

	)

328 
	#KEY_KPEQUAL
 117

	)

329 
	#KEY_KPPLUSMINUS
 118

	)

330 
	#KEY_PAUSE
 119

	)

331 
	#KEY_SCALE
 120

	)

333 
	#KEY_KPCOMMA
 121

	)

334 
	#KEY_HANGEUL
 122

	)

335 
	#KEY_HANGUEL
 
KEY_HANGEUL


	)

336 
	#KEY_HANJA
 123

	)

337 
	#KEY_YEN
 124

	)

338 
	#KEY_LEFTMETA
 125

	)

339 
	#KEY_RIGHTMETA
 126

	)

340 
	#KEY_COMPOSE
 127

	)

342 
	#KEY_STOP
 128

	)

343 
	#KEY_AGAIN
 129

	)

344 
	#KEY_PROPS
 130

	)

345 
	#KEY_UNDO
 131

	)

346 
	#KEY_FRONT
 132

	)

347 
	#KEY_COPY
 133

	)

348 
	#KEY_OPEN
 134

	)

349 
	#KEY_PASTE
 135

	)

350 
	#KEY_FIND
 136

	)

351 
	#KEY_CUT
 137

	)

352 
	#KEY_HELP
 138

	)

353 
	#KEY_MENU
 139

	)

354 
	#KEY_CALC
 140

	)

355 
	#KEY_SETUP
 141

	)

356 
	#KEY_SLEEP
 142

	)

357 
	#KEY_WAKEUP
 143

	)

358 
	#KEY_FILE
 144

	)

359 
	#KEY_SENDFILE
 145

	)

360 
	#KEY_DELETEFILE
 146

	)

361 
	#KEY_XFER
 147

	)

362 
	#KEY_PROG1
 148

	)

363 
	#KEY_PROG2
 149

	)

364 
	#KEY_WWW
 150

	)

365 
	#KEY_MSDOS
 151

	)

366 
	#KEY_COFFEE
 152

	)

367 
	#KEY_SCREENLOCK
 
KEY_COFFEE


	)

368 
	#KEY_DIRECTION
 153

	)

369 
	#KEY_CYCLEWINDOWS
 154

	)

370 
	#KEY_MAIL
 155

	)

371 
	#KEY_BOOKMARKS
 156

	)

372 
	#KEY_COMPUTER
 157

	)

373 
	#KEY_BACK
 158

	)

374 
	#KEY_FORWARD
 159

	)

375 
	#KEY_CLOSECD
 160

	)

376 
	#KEY_EJECTCD
 161

	)

377 
	#KEY_EJECTCLOSECD
 162

	)

378 
	#KEY_NEXTSONG
 163

	)

379 
	#KEY_PLAYPAUSE
 164

	)

380 
	#KEY_PREVIOUSSONG
 165

	)

381 
	#KEY_STOPCD
 166

	)

382 
	#KEY_RECORD
 167

	)

383 
	#KEY_REWIND
 168

	)

384 
	#KEY_PHONE
 169

	)

385 
	#KEY_ISO
 170

	)

386 
	#KEY_CONFIG
 171

	)

387 
	#KEY_HOMEPAGE
 172

	)

388 
	#KEY_REFRESH
 173

	)

389 
	#KEY_EXIT
 174

	)

390 
	#KEY_MOVE
 175

	)

391 
	#KEY_EDIT
 176

	)

392 
	#KEY_SCROLLUP
 177

	)

393 
	#KEY_SCROLLDOWN
 178

	)

394 
	#KEY_KPLEFTPAREN
 179

	)

395 
	#KEY_KPRIGHTPAREN
 180

	)

396 
	#KEY_NEW
 181

	)

397 
	#KEY_REDO
 182

	)

399 
	#KEY_F13
 183

	)

400 
	#KEY_F14
 184

	)

401 
	#KEY_F15
 185

	)

402 
	#KEY_F16
 186

	)

403 
	#KEY_F17
 187

	)

404 
	#KEY_F18
 188

	)

405 
	#KEY_F19
 189

	)

406 
	#KEY_F20
 190

	)

407 
	#KEY_F21
 191

	)

408 
	#KEY_F22
 192

	)

409 
	#KEY_F23
 193

	)

410 
	#KEY_F24
 194

	)

412 
	#KEY_PLAYCD
 200

	)

413 
	#KEY_PAUSECD
 201

	)

414 
	#KEY_PROG3
 202

	)

415 
	#KEY_PROG4
 203

	)

416 
	#KEY_DASHBOARD
 204

	)

417 
	#KEY_SUSPEND
 205

	)

418 
	#KEY_CLOSE
 206

	)

419 
	#KEY_PLAY
 207

	)

420 
	#KEY_FASTFORWARD
 208

	)

421 
	#KEY_BASSBOOST
 209

	)

422 
	#KEY_PRINT
 210

	)

423 
	#KEY_HP
 211

	)

424 
	#KEY_CAMERA
 212

	)

425 
	#KEY_SOUND
 213

	)

426 
	#KEY_QUESTION
 214

	)

427 
	#KEY_EMAIL
 215

	)

428 
	#KEY_CHAT
 216

	)

429 
	#KEY_SEARCH
 217

	)

430 
	#KEY_CONNECT
 218

	)

431 
	#KEY_FINANCE
 219

	)

432 
	#KEY_SPORT
 220

	)

433 
	#KEY_SHOP
 221

	)

434 
	#KEY_ALTERASE
 222

	)

435 
	#KEY_CANCEL
 223

	)

436 
	#KEY_BRIGHTNESSDOWN
 224

	)

437 
	#KEY_BRIGHTNESSUP
 225

	)

438 
	#KEY_MEDIA
 226

	)

440 
	#KEY_SWITCHVIDEOMODE
 227

	)

442 
	#KEY_KBDILLUMTOGGLE
 228

	)

443 
	#KEY_KBDILLUMDOWN
 229

	)

444 
	#KEY_KBDILLUMUP
 230

	)

446 
	#KEY_SEND
 231

	)

447 
	#KEY_REPLY
 232

	)

448 
	#KEY_FORWARDMAIL
 233

	)

449 
	#KEY_SAVE
 234

	)

450 
	#KEY_DOCUMENTS
 235

	)

452 
	#KEY_BATTERY
 236

	)

454 
	#KEY_BLUETOOTH
 237

	)

455 
	#KEY_WLAN
 238

	)

456 
	#KEY_UWB
 239

	)

458 
	#KEY_UNKNOWN
 240

	)

460 
	#KEY_VIDEO_NEXT
 241

	)

461 
	#KEY_VIDEO_PREV
 242

	)

462 
	#KEY_BRIGHTNESS_CYCLE
 243

	)

463 
	#KEY_BRIGHTNESS_AUTO
 244

	)

466 
	#KEY_BRIGHTNESS_ZERO
 
KEY_BRIGHTNESS_AUTO


	)

467 
	#KEY_DISPLAY_OFF
 245

	)

469 
	#KEY_WWAN
 246

	)

470 
	#KEY_WIMAX
 
KEY_WWAN


	)

471 
	#KEY_RFKILL
 247

	)

473 
	#KEY_MICMUTE
 248

	)

477 
	#BTN_MISC
 0x100

	)

478 
	#BTN_0
 0x100

	)

479 
	#BTN_1
 0x101

	)

480 
	#BTN_2
 0x102

	)

481 
	#BTN_3
 0x103

	)

482 
	#BTN_4
 0x104

	)

483 
	#BTN_5
 0x105

	)

484 
	#BTN_6
 0x106

	)

485 
	#BTN_7
 0x107

	)

486 
	#BTN_8
 0x108

	)

487 
	#BTN_9
 0x109

	)

489 
	#BTN_MOUSE
 0x110

	)

490 
	#BTN_LEFT
 0x110

	)

491 
	#BTN_RIGHT
 0x111

	)

492 
	#BTN_MIDDLE
 0x112

	)

493 
	#BTN_SIDE
 0x113

	)

494 
	#BTN_EXTRA
 0x114

	)

495 
	#BTN_FORWARD
 0x115

	)

496 
	#BTN_BACK
 0x116

	)

497 
	#BTN_TASK
 0x117

	)

499 
	#BTN_JOYSTICK
 0x120

	)

500 
	#BTN_TRIGGER
 0x120

	)

501 
	#BTN_THUMB
 0x121

	)

502 
	#BTN_THUMB2
 0x122

	)

503 
	#BTN_TOP
 0x123

	)

504 
	#BTN_TOP2
 0x124

	)

505 
	#BTN_PINKIE
 0x125

	)

506 
	#BTN_BASE
 0x126

	)

507 
	#BTN_BASE2
 0x127

	)

508 
	#BTN_BASE3
 0x128

	)

509 
	#BTN_BASE4
 0x129

	)

510 
	#BTN_BASE5
 0x12a

	)

511 
	#BTN_BASE6
 0x12b

	)

512 
	#BTN_DEAD
 0x12f

	)

514 
	#BTN_GAMEPAD
 0x130

	)

515 
	#BTN_SOUTH
 0x130

	)

516 
	#BTN_A
 
BTN_SOUTH


	)

517 
	#BTN_EAST
 0x131

	)

518 
	#BTN_B
 
BTN_EAST


	)

519 
	#BTN_C
 0x132

	)

520 
	#BTN_NORTH
 0x133

	)

521 
	#BTN_X
 
BTN_NORTH


	)

522 
	#BTN_WEST
 0x134

	)

523 
	#BTN_Y
 
BTN_WEST


	)

524 
	#BTN_Z
 0x135

	)

525 
	#BTN_TL
 0x136

	)

526 
	#BTN_TR
 0x137

	)

527 
	#BTN_TL2
 0x138

	)

528 
	#BTN_TR2
 0x139

	)

529 
	#BTN_SELECT
 0x13a

	)

530 
	#BTN_START
 0x13b

	)

531 
	#BTN_MODE
 0x13c

	)

532 
	#BTN_THUMBL
 0x13d

	)

533 
	#BTN_THUMBR
 0x13e

	)

535 
	#BTN_DIGI
 0x140

	)

536 
	#BTN_TOOL_PEN
 0x140

	)

537 
	#BTN_TOOL_RUBBER
 0x141

	)

538 
	#BTN_TOOL_BRUSH
 0x142

	)

539 
	#BTN_TOOL_PENCIL
 0x143

	)

540 
	#BTN_TOOL_AIRBRUSH
 0x144

	)

541 
	#BTN_TOOL_FINGER
 0x145

	)

542 
	#BTN_TOOL_MOUSE
 0x146

	)

543 
	#BTN_TOOL_LENS
 0x147

	)

544 
	#BTN_TOOL_QUINTTAP
 0x148

	)

545 
	#BTN_TOUCH
 0x14a

	)

546 
	#BTN_STYLUS
 0x14b

	)

547 
	#BTN_STYLUS2
 0x14c

	)

548 
	#BTN_TOOL_DOUBLETAP
 0x14d

	)

549 
	#BTN_TOOL_TRIPLETAP
 0x14e

	)

550 
	#BTN_TOOL_QUADTAP
 0x14‡

	)

552 
	#BTN_WHEEL
 0x150

	)

553 
	#BTN_GEAR_DOWN
 0x150

	)

554 
	#BTN_GEAR_UP
 0x151

	)

556 
	#KEY_OK
 0x160

	)

557 
	#KEY_SELECT
 0x161

	)

558 
	#KEY_GOTO
 0x162

	)

559 
	#KEY_CLEAR
 0x163

	)

560 
	#KEY_POWER2
 0x164

	)

561 
	#KEY_OPTION
 0x165

	)

562 
	#KEY_INFO
 0x166

	)

563 
	#KEY_TIME
 0x167

	)

564 
	#KEY_VENDOR
 0x168

	)

565 
	#KEY_ARCHIVE
 0x169

	)

566 
	#KEY_PROGRAM
 0x16®

	)

567 
	#KEY_CHANNEL
 0x16b

	)

568 
	#KEY_FAVORITES
 0x16c

	)

569 
	#KEY_EPG
 0x16d

	)

570 
	#KEY_PVR
 0x16ê

	)

571 
	#KEY_MHP
 0x16f

	)

572 
	#KEY_LANGUAGE
 0x170

	)

573 
	#KEY_TITLE
 0x171

	)

574 
	#KEY_SUBTITLE
 0x172

	)

575 
	#KEY_ANGLE
 0x173

	)

576 
	#KEY_ZOOM
 0x174

	)

577 
	#KEY_MODE
 0x175

	)

578 
	#KEY_KEYBOARD
 0x176

	)

579 
	#KEY_SCREEN
 0x177

	)

580 
	#KEY_PC
 0x178

	)

581 
	#KEY_TV
 0x179

	)

582 
	#KEY_TV2
 0x17®

	)

583 
	#KEY_VCR
 0x17b

	)

584 
	#KEY_VCR2
 0x17¯

	)

585 
	#KEY_SAT
 0x17d

	)

586 
	#KEY_SAT2
 0x17e

	)

587 
	#KEY_CD
 0x17‡

	)

588 
	#KEY_TAPE
 0x180

	)

589 
	#KEY_RADIO
 0x181

	)

590 
	#KEY_TUNER
 0x182

	)

591 
	#KEY_PLAYER
 0x183

	)

592 
	#KEY_TEXT
 0x184

	)

593 
	#KEY_DVD
 0x185

	)

594 
	#KEY_AUX
 0x186

	)

595 
	#KEY_MP3
 0x187

	)

596 
	#KEY_AUDIO
 0x188

	)

597 
	#KEY_VIDEO
 0x189

	)

598 
	#KEY_DIRECTORY
 0x18a

	)

599 
	#KEY_LIST
 0x18b

	)

600 
	#KEY_MEMO
 0x18¯

	)

601 
	#KEY_CALENDAR
 0x18d

	)

602 
	#KEY_RED
 0x18e

	)

603 
	#KEY_GREEN
 0x18f

	)

604 
	#KEY_YELLOW
 0x190

	)

605 
	#KEY_BLUE
 0x191

	)

606 
	#KEY_CHANNELUP
 0x192

	)

607 
	#KEY_CHANNELDOWN
 0x193

	)

608 
	#KEY_FIRST
 0x194

	)

609 
	#KEY_LAST
 0x195

	)

610 
	#KEY_AB
 0x196

	)

611 
	#KEY_NEXT
 0x197

	)

612 
	#KEY_RESTART
 0x198

	)

613 
	#KEY_SLOW
 0x199

	)

614 
	#KEY_SHUFFLE
 0x19a

	)

615 
	#KEY_BREAK
 0x19b

	)

616 
	#KEY_PREVIOUS
 0x19c

	)

617 
	#KEY_DIGITS
 0x19d

	)

618 
	#KEY_TEEN
 0x19e

	)

619 
	#KEY_TWEN
 0x19f

	)

620 
	#KEY_VIDEOPHONE
 0x1a0

	)

621 
	#KEY_GAMES
 0x1a1

	)

622 
	#KEY_ZOOMIN
 0x1a2

	)

623 
	#KEY_ZOOMOUT
 0x1a3

	)

624 
	#KEY_ZOOMRESET
 0x1a4

	)

625 
	#KEY_WORDPROCESSOR
 0x1a5

	)

626 
	#KEY_EDITOR
 0x1a6

	)

627 
	#KEY_SPREADSHEET
 0x1a7

	)

628 
	#KEY_GRAPHICSEDITOR
 0x1a8

	)

629 
	#KEY_PRESENTATION
 0x1a9

	)

630 
	#KEY_DATABASE
 0x1Ø

	)

631 
	#KEY_NEWS
 0x1ab

	)

632 
	#KEY_VOICEMAIL
 0x1a¯

	)

633 
	#KEY_ADDRESSBOOK
 0x1ad

	)

634 
	#KEY_MESSENGER
 0x1´

	)

635 
	#KEY_DISPLAYTOGGLE
 0x1a‡

	)

636 
	#KEY_BRIGHTNESS_TOGGLE
 
KEY_DISPLAYTOGGLE


	)

637 
	#KEY_SPELLCHECK
 0x1b0

	)

638 
	#KEY_LOGOFF
 0x1b1

	)

640 
	#KEY_DOLLAR
 0x1b2

	)

641 
	#KEY_EURO
 0x1b3

	)

643 
	#KEY_FRAMEBACK
 0x1b4

	)

644 
	#KEY_FRAMEFORWARD
 0x1b5

	)

645 
	#KEY_CONTEXT_MENU
 0x1b6

	)

646 
	#KEY_MEDIA_REPEAT
 0x1b7

	)

647 
	#KEY_10CHANNELSUP
 0x1b8

	)

648 
	#KEY_10CHANNELSDOWN
 0x1b9

	)

649 
	#KEY_IMAGES
 0x1b®

	)

651 
	#KEY_DEL_EOL
 0x1c0

	)

652 
	#KEY_DEL_EOS
 0x1c1

	)

653 
	#KEY_INS_LINE
 0x1c2

	)

654 
	#KEY_DEL_LINE
 0x1c3

	)

656 
	#KEY_FN
 0x1d0

	)

657 
	#KEY_FN_ESC
 0x1d1

	)

658 
	#KEY_FN_F1
 0x1d2

	)

659 
	#KEY_FN_F2
 0x1d3

	)

660 
	#KEY_FN_F3
 0x1d4

	)

661 
	#KEY_FN_F4
 0x1d5

	)

662 
	#KEY_FN_F5
 0x1d6

	)

663 
	#KEY_FN_F6
 0x1d7

	)

664 
	#KEY_FN_F7
 0x1d8

	)

665 
	#KEY_FN_F8
 0x1d9

	)

666 
	#KEY_FN_F9
 0x1da

	)

667 
	#KEY_FN_F10
 0x1db

	)

668 
	#KEY_FN_F11
 0x1dc

	)

669 
	#KEY_FN_F12
 0x1dd

	)

670 
	#KEY_FN_1
 0x1de

	)

671 
	#KEY_FN_2
 0x1df

	)

672 
	#KEY_FN_D
 0x1e0

	)

673 
	#KEY_FN_E
 0x1e1

	)

674 
	#KEY_FN_F
 0x1e2

	)

675 
	#KEY_FN_S
 0x1e3

	)

676 
	#KEY_FN_B
 0x1e4

	)

678 
	#KEY_BRL_DOT1
 0x1f1

	)

679 
	#KEY_BRL_DOT2
 0x1f2

	)

680 
	#KEY_BRL_DOT3
 0x1f3

	)

681 
	#KEY_BRL_DOT4
 0x1f4

	)

682 
	#KEY_BRL_DOT5
 0x1f5

	)

683 
	#KEY_BRL_DOT6
 0x1f6

	)

684 
	#KEY_BRL_DOT7
 0x1f7

	)

685 
	#KEY_BRL_DOT8
 0x1f8

	)

686 
	#KEY_BRL_DOT9
 0x1f9

	)

687 
	#KEY_BRL_DOT10
 0x1Á

	)

689 
	#KEY_NUMERIC_0
 0x200

	)

690 
	#KEY_NUMERIC_1
 0x201

	)

691 
	#KEY_NUMERIC_2
 0x202

	)

692 
	#KEY_NUMERIC_3
 0x203

	)

693 
	#KEY_NUMERIC_4
 0x204

	)

694 
	#KEY_NUMERIC_5
 0x205

	)

695 
	#KEY_NUMERIC_6
 0x206

	)

696 
	#KEY_NUMERIC_7
 0x207

	)

697 
	#KEY_NUMERIC_8
 0x208

	)

698 
	#KEY_NUMERIC_9
 0x209

	)

699 
	#KEY_NUMERIC_STAR
 0x20a

	)

700 
	#KEY_NUMERIC_POUND
 0x20b

	)

702 
	#KEY_CAMERA_FOCUS
 0x210

	)

703 
	#KEY_WPS_BUTTON
 0x211

	)

705 
	#KEY_TOUCHPAD_TOGGLE
 0x212

	)

706 
	#KEY_TOUCHPAD_ON
 0x213

	)

707 
	#KEY_TOUCHPAD_OFF
 0x214

	)

709 
	#KEY_CAMERA_ZOOMIN
 0x215

	)

710 
	#KEY_CAMERA_ZOOMOUT
 0x216

	)

711 
	#KEY_CAMERA_UP
 0x217

	)

712 
	#KEY_CAMERA_DOWN
 0x218

	)

713 
	#KEY_CAMERA_LEFT
 0x219

	)

714 
	#KEY_CAMERA_RIGHT
 0x21a

	)

716 
	#KEY_ATTENDANT_ON
 0x21b

	)

717 
	#KEY_ATTENDANT_OFF
 0x21c

	)

718 
	#KEY_ATTENDANT_TOGGLE
 0x21d

	)

719 
	#KEY_LIGHTS_TOGGLE
 0x21ê

	)

721 
	#BTN_DPAD_UP
 0x220

	)

722 
	#BTN_DPAD_DOWN
 0x221

	)

723 
	#BTN_DPAD_LEFT
 0x222

	)

724 
	#BTN_DPAD_RIGHT
 0x223

	)

726 
	#KEY_ALS_TOGGLE
 0x230

	)

728 
	#KEY_BUTTONCONFIG
 0x240

	)

729 
	#KEY_TASKMANAGER
 0x241

	)

730 
	#KEY_JOURNAL
 0x242

	)

731 
	#KEY_CONTROLPANEL
 0x243

	)

732 
	#KEY_APPSELECT
 0x244

	)

733 
	#KEY_SCREENSAVER
 0x245

	)

734 
	#KEY_VOICECOMMAND
 0x246

	)

736 
	#KEY_BRIGHTNESS_MIN
 0x250

	)

737 
	#KEY_BRIGHTNESS_MAX
 0x251

	)

739 
	#KEY_KBDINPUTASSIST_PREV
 0x260

	)

740 
	#KEY_KBDINPUTASSIST_NEXT
 0x261

	)

741 
	#KEY_KBDINPUTASSIST_PREVGROUP
 0x262

	)

742 
	#KEY_KBDINPUTASSIST_NEXTGROUP
 0x263

	)

743 
	#KEY_KBDINPUTASSIST_ACCEPT
 0x264

	)

744 
	#KEY_KBDINPUTASSIST_CANCEL
 0x265

	)

746 
	#BTN_TRIGGER_HAPPY
 0x2c0

	)

747 
	#BTN_TRIGGER_HAPPY1
 0x2c0

	)

748 
	#BTN_TRIGGER_HAPPY2
 0x2c1

	)

749 
	#BTN_TRIGGER_HAPPY3
 0x2c2

	)

750 
	#BTN_TRIGGER_HAPPY4
 0x2c3

	)

751 
	#BTN_TRIGGER_HAPPY5
 0x2c4

	)

752 
	#BTN_TRIGGER_HAPPY6
 0x2c5

	)

753 
	#BTN_TRIGGER_HAPPY7
 0x2c6

	)

754 
	#BTN_TRIGGER_HAPPY8
 0x2c7

	)

755 
	#BTN_TRIGGER_HAPPY9
 0x2c8

	)

756 
	#BTN_TRIGGER_HAPPY10
 0x2c9

	)

757 
	#BTN_TRIGGER_HAPPY11
 0x2ˇ

	)

758 
	#BTN_TRIGGER_HAPPY12
 0x2cb

	)

759 
	#BTN_TRIGGER_HAPPY13
 0x2cc

	)

760 
	#BTN_TRIGGER_HAPPY14
 0x2cd

	)

761 
	#BTN_TRIGGER_HAPPY15
 0x2˚

	)

762 
	#BTN_TRIGGER_HAPPY16
 0x2cf

	)

763 
	#BTN_TRIGGER_HAPPY17
 0x2d0

	)

764 
	#BTN_TRIGGER_HAPPY18
 0x2d1

	)

765 
	#BTN_TRIGGER_HAPPY19
 0x2d2

	)

766 
	#BTN_TRIGGER_HAPPY20
 0x2d3

	)

767 
	#BTN_TRIGGER_HAPPY21
 0x2d4

	)

768 
	#BTN_TRIGGER_HAPPY22
 0x2d5

	)

769 
	#BTN_TRIGGER_HAPPY23
 0x2d6

	)

770 
	#BTN_TRIGGER_HAPPY24
 0x2d7

	)

771 
	#BTN_TRIGGER_HAPPY25
 0x2d8

	)

772 
	#BTN_TRIGGER_HAPPY26
 0x2d9

	)

773 
	#BTN_TRIGGER_HAPPY27
 0x2da

	)

774 
	#BTN_TRIGGER_HAPPY28
 0x2db

	)

775 
	#BTN_TRIGGER_HAPPY29
 0x2dc

	)

776 
	#BTN_TRIGGER_HAPPY30
 0x2dd

	)

777 
	#BTN_TRIGGER_HAPPY31
 0x2de

	)

778 
	#BTN_TRIGGER_HAPPY32
 0x2df

	)

779 
	#BTN_TRIGGER_HAPPY33
 0x2e0

	)

780 
	#BTN_TRIGGER_HAPPY34
 0x2e1

	)

781 
	#BTN_TRIGGER_HAPPY35
 0x2e2

	)

782 
	#BTN_TRIGGER_HAPPY36
 0x2e3

	)

783 
	#BTN_TRIGGER_HAPPY37
 0x2e4

	)

784 
	#BTN_TRIGGER_HAPPY38
 0x2e5

	)

785 
	#BTN_TRIGGER_HAPPY39
 0x2e6

	)

786 
	#BTN_TRIGGER_HAPPY40
 0x2e7

	)

789 
	#KEY_MIN_INTERESTING
 
KEY_MUTE


	)

790 
	#KEY_MAX
 0x2ff

	)

791 
	#KEY_CNT
 (
KEY_MAX
+1)

	)

797 
	#REL_X
 0x00

	)

798 
	#REL_Y
 0x01

	)

799 
	#REL_Z
 0x02

	)

800 
	#REL_RX
 0x03

	)

801 
	#REL_RY
 0x04

	)

802 
	#REL_RZ
 0x05

	)

803 
	#REL_HWHEEL
 0x06

	)

804 
	#REL_DIAL
 0x07

	)

805 
	#REL_WHEEL
 0x08

	)

806 
	#REL_MISC
 0x09

	)

807 
	#REL_MAX
 0x0f

	)

808 
	#REL_CNT
 (
REL_MAX
+1)

	)

814 
	#ABS_X
 0x00

	)

815 
	#ABS_Y
 0x01

	)

816 
	#ABS_Z
 0x02

	)

817 
	#ABS_RX
 0x03

	)

818 
	#ABS_RY
 0x04

	)

819 
	#ABS_RZ
 0x05

	)

820 
	#ABS_THROTTLE
 0x06

	)

821 
	#ABS_RUDDER
 0x07

	)

822 
	#ABS_WHEEL
 0x08

	)

823 
	#ABS_GAS
 0x09

	)

824 
	#ABS_BRAKE
 0x0a

	)

825 
	#ABS_HAT0X
 0x10

	)

826 
	#ABS_HAT0Y
 0x11

	)

827 
	#ABS_HAT1X
 0x12

	)

828 
	#ABS_HAT1Y
 0x13

	)

829 
	#ABS_HAT2X
 0x14

	)

830 
	#ABS_HAT2Y
 0x15

	)

831 
	#ABS_HAT3X
 0x16

	)

832 
	#ABS_HAT3Y
 0x17

	)

833 
	#ABS_PRESSURE
 0x18

	)

834 
	#ABS_DISTANCE
 0x19

	)

835 
	#ABS_TILT_X
 0x1a

	)

836 
	#ABS_TILT_Y
 0x1b

	)

837 
	#ABS_TOOL_WIDTH
 0x1c

	)

839 
	#ABS_VOLUME
 0x20

	)

841 
	#ABS_MISC
 0x28

	)

843 
	#ABS_MT_SLOT
 0x2‡

	)

844 
	#ABS_MT_TOUCH_MAJOR
 0x30

	)

845 
	#ABS_MT_TOUCH_MINOR
 0x31

	)

846 
	#ABS_MT_WIDTH_MAJOR
 0x32

	)

847 
	#ABS_MT_WIDTH_MINOR
 0x33

	)

848 
	#ABS_MT_ORIENTATION
 0x34

	)

849 
	#ABS_MT_POSITION_X
 0x35

	)

850 
	#ABS_MT_POSITION_Y
 0x36

	)

851 
	#ABS_MT_TOOL_TYPE
 0x37

	)

852 
	#ABS_MT_BLOB_ID
 0x38

	)

853 
	#ABS_MT_TRACKING_ID
 0x39

	)

854 
	#ABS_MT_PRESSURE
 0x3®

	)

855 
	#ABS_MT_DISTANCE
 0x3b

	)

856 
	#ABS_MT_TOOL_X
 0x3¯

	)

857 
	#ABS_MT_TOOL_Y
 0x3d

	)

860 
	#ABS_MAX
 0x3f

	)

861 
	#ABS_CNT
 (
ABS_MAX
+1)

	)

867 
	#SW_LID
 0x00

	)

868 
	#SW_TABLET_MODE
 0x01

	)

869 
	#SW_HEADPHONE_INSERT
 0x02

	)

870 
	#SW_RFKILL_ALL
 0x03

	)

872 
	#SW_RADIO
 
SW_RFKILL_ALL


	)

873 
	#SW_MICROPHONE_INSERT
 0x04

	)

874 
	#SW_DOCK
 0x05

	)

875 
	#SW_LINEOUT_INSERT
 0x06

	)

876 
	#SW_JACK_PHYSICAL_INSERT
 0x07

	)

877 
	#SW_VIDEOOUT_INSERT
 0x08

	)

878 
	#SW_CAMERA_LENS_COVER
 0x09

	)

879 
	#SW_KEYPAD_SLIDE
 0x0®

	)

880 
	#SW_FRONT_PROXIMITY
 0x0b

	)

881 
	#SW_ROTATE_LOCK
 0x0¯

	)

882 
	#SW_LINEIN_INSERT
 0x0d

	)

883 
	#SW_MUTE_DEVICE
 0x0ê

	)

884 
	#SW_MAX
 0x0f

	)

885 
	#SW_CNT
 (
SW_MAX
+1)

	)

891 
	#MSC_SERIAL
 0x00

	)

892 
	#MSC_PULSELED
 0x01

	)

893 
	#MSC_GESTURE
 0x02

	)

894 
	#MSC_RAW
 0x03

	)

895 
	#MSC_SCAN
 0x04

	)

896 
	#MSC_TIMESTAMP
 0x05

	)

897 
	#MSC_MAX
 0x07

	)

898 
	#MSC_CNT
 (
MSC_MAX
+1)

	)

904 
	#LED_NUML
 0x00

	)

905 
	#LED_CAPSL
 0x01

	)

906 
	#LED_SCROLLL
 0x02

	)

907 
	#LED_COMPOSE
 0x03

	)

908 
	#LED_KANA
 0x04

	)

909 
	#LED_SLEEP
 0x05

	)

910 
	#LED_SUSPEND
 0x06

	)

911 
	#LED_MUTE
 0x07

	)

912 
	#LED_MISC
 0x08

	)

913 
	#LED_MAIL
 0x09

	)

914 
	#LED_CHARGING
 0x0a

	)

915 
	#LED_MAX
 0x0f

	)

916 
	#LED_CNT
 (
LED_MAX
+1)

	)

922 
	#REP_DELAY
 0x00

	)

923 
	#REP_PERIOD
 0x01

	)

924 
	#REP_MAX
 0x01

	)

925 
	#REP_CNT
 (
REP_MAX
+1)

	)

931 
	#SND_CLICK
 0x00

	)

932 
	#SND_BELL
 0x01

	)

933 
	#SND_TONE
 0x02

	)

934 
	#SND_MAX
 0x07

	)

935 
	#SND_CNT
 (
SND_MAX
+1)

	)

941 
	#ID_BUS
 0

	)

942 
	#ID_VENDOR
 1

	)

943 
	#ID_PRODUCT
 2

	)

944 
	#ID_VERSION
 3

	)

946 
	#BUS_PCI
 0x01

	)

947 
	#BUS_ISAPNP
 0x02

	)

948 
	#BUS_USB
 0x03

	)

949 
	#BUS_HIL
 0x04

	)

950 
	#BUS_BLUETOOTH
 0x05

	)

951 
	#BUS_VIRTUAL
 0x06

	)

953 
	#BUS_ISA
 0x10

	)

954 
	#BUS_I8042
 0x11

	)

955 
	#BUS_XTKBD
 0x12

	)

956 
	#BUS_RS232
 0x13

	)

957 
	#BUS_GAMEPORT
 0x14

	)

958 
	#BUS_PARPORT
 0x15

	)

959 
	#BUS_AMIGA
 0x16

	)

960 
	#BUS_ADB
 0x17

	)

961 
	#BUS_I2C
 0x18

	)

962 
	#BUS_HOST
 0x19

	)

963 
	#BUS_GSC
 0x1A

	)

964 
	#BUS_ATARI
 0x1B

	)

965 
	#BUS_SPI
 0x1C

	)

970 
	#MT_TOOL_FINGER
 0

	)

971 
	#MT_TOOL_PEN
 1

	)

972 
	#MT_TOOL_MAX
 1

	)

977 
	#FF_STATUS_STOPPED
 0x00

	)

978 
	#FF_STATUS_PLAYING
 0x01

	)

979 
	#FF_STATUS_MAX
 0x01

	)

996 
	sff_ª∂ay
 {

997 
__u16
 
	mÀngth
;

998 
__u16
 
	mdñay
;

1006 
	sff_åiggî
 {

1007 
__u16
 
	mbuâ⁄
;

1008 
__u16
 
	möãrvÆ
;

1023 
	sff_ívñ›e
 {

1024 
__u16
 
	m©èck_Àngth
;

1025 
__u16
 
	m©èck_Àvñ
;

1026 
__u16
 
	mÁde_Àngth
;

1027 
__u16
 
	mÁde_Àvñ
;

1035 
	sff_c⁄°™t_ef„˘
 {

1036 
__s16
 
	mÀvñ
;

1037 
ff_ívñ›e
 
	mívñ›e
;

1046 
	sff_ømp_ef„˘
 {

1047 
__s16
 
	m°¨t_Àvñ
;

1048 
__s16
 
	míd_Àvñ
;

1049 
ff_ívñ›e
 
	mívñ›e
;

1062 
	sff_c⁄dôi⁄_ef„˘
 {

1063 
__u16
 
	mright_ßtuøti⁄
;

1064 
__u16
 
	mÀ·_ßtuøti⁄
;

1066 
__s16
 
	mright_c€ff
;

1067 
__s16
 
	mÀ·_c€ff
;

1069 
__u16
 
	mdódb™d
;

1070 
__s16
 
	m˚¡î
;

1091 
	sff_≥riodic_ef„˘
 {

1092 
__u16
 
	mwavef‹m
;

1093 
__u16
 
	m≥riod
;

1094 
__s16
 
	mmagnôude
;

1095 
__s16
 
	moff£t
;

1096 
__u16
 
	mpha£
;

1098 
ff_ívñ›e
 
	mívñ›e
;

1100 
__u32
 
	mcu°om_Àn
;

1101 
__s16
 *
	mcu°om_d©a
;

1112 
	sff_rumbÀ_ef„˘
 {

1113 
__u16
 
	m°r⁄g_magnôude
;

1114 
__u16
 
	mwók_magnôude
;

1140 
	sff_ef„˘
 {

1141 
__u16
 
	mty≥
;

1142 
__s16
 
	mid
;

1143 
__u16
 
	mdúe˘i⁄
;

1144 
ff_åiggî
 
	måiggî
;

1145 
ff_ª∂ay
 
	mª∂ay
;

1148 
ff_c⁄°™t_ef„˘
 
	mc⁄°™t
;

1149 
ff_ømp_ef„˘
 
	mømp
;

1150 
ff_≥riodic_ef„˘
 
	m≥riodic
;

1151 
ff_c⁄dôi⁄_ef„˘
 
	mc⁄dôi⁄
[2];

1152 
ff_rumbÀ_ef„˘
 
	mrumbÀ
;

1153 } 
	mu
;

1160 
	#FF_RUMBLE
 0x50

	)

1161 
	#FF_PERIODIC
 0x51

	)

1162 
	#FF_CONSTANT
 0x52

	)

1163 
	#FF_SPRING
 0x53

	)

1164 
	#FF_FRICTION
 0x54

	)

1165 
	#FF_DAMPER
 0x55

	)

1166 
	#FF_INERTIA
 0x56

	)

1167 
	#FF_RAMP
 0x57

	)

1169 
	#FF_EFFECT_MIN
 
FF_RUMBLE


	)

1170 
	#FF_EFFECT_MAX
 
FF_RAMP


	)

1176 
	#FF_SQUARE
 0x58

	)

1177 
	#FF_TRIANGLE
 0x59

	)

1178 
	#FF_SINE
 0x5a

	)

1179 
	#FF_SAW_UP
 0x5b

	)

1180 
	#FF_SAW_DOWN
 0x5c

	)

1181 
	#FF_CUSTOM
 0x5d

	)

1183 
	#FF_WAVEFORM_MIN
 
FF_SQUARE


	)

1184 
	#FF_WAVEFORM_MAX
 
FF_CUSTOM


	)

1190 
	#FF_GAIN
 0x60

	)

1191 
	#FF_AUTOCENTER
 0x61

	)

1193 
	#FF_MAX
 0x7f

	)

1194 
	#FF_CNT
 (
FF_MAX
+1)

	)

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/kd.h

1 #i‚de‡
_LINUX_KD_H


2 
	#_LINUX_KD_H


	)

3 
	~<löux/ty≥s.h
>

8 
	#GIO_FONT
 0x4B60

	)

9 
	#PIO_FONT
 0x4B61

	)

11 
	#GIO_FONTX
 0x4B6B

	)

12 
	#PIO_FONTX
 0x4B6C

	)

13 
	sc⁄sﬁef⁄tdesc
 {

14 
	mch¨cou¡
;

15 
	mch¨height
;

16 *
	mch¨d©a
;

19 
	#PIO_FONTRESET
 0x4B6D

	)

21 
	#GIO_CMAP
 0x4B70

	)

22 
	#PIO_CMAP
 0x4B71

	)

24 
	#KIOCSOUND
 0x4B2F

	)

25 
	#KDMKTONE
 0x4B30

	)

27 
	#KDGETLED
 0x4B31

	)

28 
	#KDSETLED
 0x4B32

	)

29 
	#LED_SCR
 0x01

	)

30 
	#LED_NUM
 0x02

	)

31 
	#LED_CAP
 0x04

	)

33 
	#KDGKBTYPE
 0x4B33

	)

34 
	#KB_84
 0x01

	)

35 
	#KB_101
 0x02

	)

36 
	#KB_OTHER
 0x03

	)

38 
	#KDADDIO
 0x4B34

	)

39 
	#KDDELIO
 0x4B35

	)

40 
	#KDENABIO
 0x4B36

	)

41 
	#KDDISABIO
 0x4B37

	)

43 
	#KDSETMODE
 0x4B3A

	)

44 
	#KD_TEXT
 0x00

	)

45 
	#KD_GRAPHICS
 0x01

	)

46 
	#KD_TEXT0
 0x02

	)

47 
	#KD_TEXT1
 0x03

	)

48 
	#KDGETMODE
 0x4B3B

	)

50 
	#KDMAPDISP
 0x4B3C

	)

51 
	#KDUNMAPDISP
 0x4B3D

	)

53 
	ts¸nm≠_t
;

54 
	#E_TABSZ
 256

	)

55 
	#GIO_SCRNMAP
 0x4B40

	)

56 
	#PIO_SCRNMAP
 0x4B41

	)

57 
	#GIO_UNISCRNMAP
 0x4B69

	)

58 
	#PIO_UNISCRNMAP
 0x4B6A

	)

60 
	#GIO_UNIMAP
 0x4B66

	)

61 
	sunùaú
 {

62 
	municode
;

63 
	mf⁄ços
;

65 
	sunim≠desc
 {

66 
	míåy_˘
;

67 
unùaú
 *
	míåõs
;

69 
	#PIO_UNIMAP
 0x4B67

	)

70 
	#PIO_UNIMAPCLR
 0x4B68

	)

71 
	sunim≠öô
 {

72 
	madvi£d_hashsize
;

73 
	madvi£d_hash°ï
;

74 
	madvi£d_hashÀvñ
;

77 
	#UNI_DIRECT_BASE
 0xF000

	)

78 
	#UNI_DIRECT_MASK
 0x01FF

	)

80 
	#K_RAW
 0x00

	)

81 
	#K_XLATE
 0x01

	)

82 
	#K_MEDIUMRAW
 0x02

	)

83 
	#K_UNICODE
 0x03

	)

84 
	#K_OFF
 0x04

	)

85 
	#KDGKBMODE
 0x4B44

	)

86 
	#KDSKBMODE
 0x4B45

	)

88 
	#K_METABIT
 0x03

	)

89 
	#K_ESCPREFIX
 0x04

	)

90 
	#KDGKBMETA
 0x4B62

	)

91 
	#KDSKBMETA
 0x4B63

	)

93 
	#K_SCROLLLOCK
 0x01

	)

94 
	#K_NUMLOCK
 0x02

	)

95 
	#K_CAPSLOCK
 0x04

	)

96 
	#KDGKBLED
 0x4B64

	)

97 
	#KDSKBLED
 0x4B65

	)

99 
	skbíåy
 {

100 
	mkb_èbÀ
;

101 
	mkb_ödex
;

102 
	mkb_vÆue
;

104 
	#K_NORMTAB
 0x00

	)

105 
	#K_SHIFTTAB
 0x01

	)

106 
	#K_ALTTAB
 0x02

	)

107 
	#K_ALTSHIFTTAB
 0x03

	)

109 
	#KDGKBENT
 0x4B46

	)

110 
	#KDSKBENT
 0x4B47

	)

112 
	skb£¡ry
 {

113 
	mkb_func
;

114 
	mkb_°rög
[512];

116 
	#KDGKBSENT
 0x4B48

	)

117 
	#KDSKBSENT
 0x4B49

	)

119 
	skbdü¸
 {

120 
	mdü¸
, 
	mba£
, 
	mªsu…
;

122 
	skbdü¸s
 {

123 
	mkb_˙t
;

124 
kbdü¸
 
	mkbdü¸
[256];

126 
	#KDGKBDIACR
 0x4B4A

	)

127 
	#KDSKBDIACR
 0x4B4B

	)

129 
	skbdü¸uc
 {

130 
	mdü¸
, 
	mba£
, 
	mªsu…
;

132 
	skbdü¸suc
 {

133 
	mkb_˙t
;

134 
kbdü¸uc
 
	mkbdü¸uc
[256];

136 
	#KDGKBDIACRUC
 0x4BFA

	)

137 
	#KDSKBDIACRUC
 0x4BFB

	)

139 
	skbkeycode
 {

140 
	msˇncode
, 
	mkeycode
;

142 
	#KDGETKEYCODE
 0x4B4C

	)

143 
	#KDSETKEYCODE
 0x4B4D

	)

145 
	#KDSIGACCEPT
 0x4B4E

	)

147 
	skbd_ª≥©
 {

148 
	mdñay
;

149 
	m≥riod
;

153 
	#KDKBDREP
 0x4B52

	)

156 
	#KDFONTOP
 0x4B72

	)

158 
	sc⁄sﬁe_f⁄t_›
 {

159 
	m›
;

160 
	mÊags
;

161 
	mwidth
, 
	mheight
;

162 
	mch¨cou¡
;

163 *
	md©a
;

166 
	sc⁄sﬁe_f⁄t
 {

167 
	mwidth
, 
	mheight
;

168 
	mch¨cou¡
;

169 *
	md©a
;

172 
	#KD_FONT_OP_SET
 0

	)

173 
	#KD_FONT_OP_GET
 1

	)

174 
	#KD_FONT_OP_SET_DEFAULT
 2

	)

175 
	#KD_FONT_OP_COPY
 3

	)

177 
	#KD_FONT_FLAG_DONT_RECALC
 1

	)

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

4 
	~<löux/sysöfo.h
>

9 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

10 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

	@/usr/include/linux/matroxfb.h

1 #i‚de‡
__LINUX_MATROXFB_H__


2 
	#__LINUX_MATROXFB_H__


	)

4 
	~<asm/io˘l.h
>

5 
	~<löux/ty≥s.h
>

6 
	~<löux/videodev2.h
>

7 
	~<löux/fb.h
>

9 
	sm©roxioc_ouçut_mode
 {

10 
__u32
 
	mouçut
;

11 
	#MATROXFB_OUTPUT_PRIMARY
 0x0000

	)

12 
	#MATROXFB_OUTPUT_SECONDARY
 0x0001

	)

13 
	#MATROXFB_OUTPUT_DFP
 0x0002

	)

14 
__u32
 
	mmode
;

15 
	#MATROXFB_OUTPUT_MODE_PAL
 0x0001

	)

16 
	#MATROXFB_OUTPUT_MODE_NTSC
 0x0002

	)

17 
	#MATROXFB_OUTPUT_MODE_MONITOR
 0x0080

	)

19 
	#MATROXFB_SET_OUTPUT_MODE
 
	`_IOW
('n',0xFA,
size_t
)

	)

20 
	#MATROXFB_GET_OUTPUT_MODE
 
	`_IOWR
('n',0xFA,
size_t
)

	)

23 
	#MATROXFB_OUTPUT_CONN_PRIMARY
 (1 << 
MATROXFB_OUTPUT_PRIMARY
)

	)

24 
	#MATROXFB_OUTPUT_CONN_SECONDARY
 (1 << 
MATROXFB_OUTPUT_SECONDARY
)

	)

25 
	#MATROXFB_OUTPUT_CONN_DFP
 (1 << 
MATROXFB_OUTPUT_DFP
)

	)

27 
	#MATROXFB_SET_OUTPUT_CONNECTION
 
	`_IOW
('n',0xF8,
size_t
)

	)

29 
	#MATROXFB_GET_OUTPUT_CONNECTION
 
	`_IOR
('n',0xF8,
size_t
)

	)

31 
	#MATROXFB_GET_AVAILABLE_OUTPUTS
 
	`_IOR
('n',0xF9,
size_t
)

	)

33 
	#MATROXFB_GET_ALL_OUTPUTS
 
	`_IOR
('n',0xFB,
size_t
)

	)

35 
	em©roxfb_˘æ_id
 {

36 
	mMATROXFB_CID_TESTOUT
 = 
V4L2_CID_PRIVATE_BASE
,

37 
	mMATROXFB_CID_DEFLICKER
,

38 
	mMATROXFB_CID_LAST


	@/usr/include/linux/omapfb.h

24 #i‚de‡
__LINUX_OMAPFB_H__


25 
	#__LINUX_OMAPFB_H__


	)

27 
	~<löux/fb.h
>

28 
	~<löux/io˘l.h
>

29 
	~<löux/ty≥s.h
>

33 
	#OMAP_IOW
(
num
, 
dty≥
Ë
	`_IOW
('O',Çum, dty≥)

	)

34 
	#OMAP_IOR
(
num
, 
dty≥
Ë
	`_IOR
('O',Çum, dty≥)

	)

35 
	#OMAP_IOWR
(
num
, 
dty≥
Ë
	`_IOWR
('O',Çum, dty≥)

	)

36 
	#OMAP_IO
(
num
Ë
	`_IO
('O',Çum)

	)

38 
	#OMAPFB_MIRROR
 
	`OMAP_IOW
(31, )

	)

39 
	#OMAPFB_SYNC_GFX
 
	`OMAP_IO
(37)

	)

40 
	#OMAPFB_VSYNC
 
	`OMAP_IO
(38)

	)

41 
	#OMAPFB_SET_UPDATE_MODE
 
	`OMAP_IOW
(40, )

	)

42 
	#OMAPFB_GET_CAPS
 
	`OMAP_IOR
(42, 
om≠fb_ˇps
)

	)

43 
	#OMAPFB_GET_UPDATE_MODE
 
	`OMAP_IOW
(43, )

	)

44 
	#OMAPFB_LCD_TEST
 
	`OMAP_IOW
(45, )

	)

45 
	#OMAPFB_CTRL_TEST
 
	`OMAP_IOW
(46, )

	)

46 
	#OMAPFB_UPDATE_WINDOW_OLD
 
	`OMAP_IOW
(47, 
om≠fb_upd©e_wödow_ﬁd
)

	)

47 
	#OMAPFB_SET_COLOR_KEY
 
	`OMAP_IOW
(50, 
om≠fb_cﬁ‹_key
)

	)

48 
	#OMAPFB_GET_COLOR_KEY
 
	`OMAP_IOW
(51, 
om≠fb_cﬁ‹_key
)

	)

49 
	#OMAPFB_SETUP_PLANE
 
	`OMAP_IOW
(52, 
om≠fb_∂™e_öfo
)

	)

50 
	#OMAPFB_QUERY_PLANE
 
	`OMAP_IOW
(53, 
om≠fb_∂™e_öfo
)

	)

51 
	#OMAPFB_UPDATE_WINDOW
 
	`OMAP_IOW
(54, 
om≠fb_upd©e_wödow
)

	)

52 
	#OMAPFB_SETUP_MEM
 
	`OMAP_IOW
(55, 
om≠fb_mem_öfo
)

	)

53 
	#OMAPFB_QUERY_MEM
 
	`OMAP_IOW
(56, 
om≠fb_mem_öfo
)

	)

54 
	#OMAPFB_WAITFORVSYNC
 
	`OMAP_IO
(57)

	)

55 
	#OMAPFB_MEMORY_READ
 
	`OMAP_IOR
(58, 
om≠fb_mem‹y_ªad
)

	)

56 
	#OMAPFB_GET_OVERLAY_COLORMODE
 
	`OMAP_IOR
(59, 
om≠fb_ovl_cﬁ‹mode
)

	)

57 
	#OMAPFB_WAITFORGO
 
	`OMAP_IO
(60)

	)

58 
	#OMAPFB_GET_VRAM_INFO
 
	`OMAP_IOR
(61, 
om≠fb_vøm_öfo
)

	)

59 
	#OMAPFB_SET_TEARSYNC
 
	`OMAP_IOW
(62, 
om≠fb_ã¨sync_öfo
)

	)

60 
	#OMAPFB_GET_DISPLAY_INFO
 
	`OMAP_IOR
(63, 
om≠fb_di•œy_öfo
)

	)

62 
	#OMAPFB_CAPS_GENERIC_MASK
 0x00000fff

	)

63 
	#OMAPFB_CAPS_LCDC_MASK
 0x00fff000

	)

64 
	#OMAPFB_CAPS_PANEL_MASK
 0xff000000

	)

66 
	#OMAPFB_CAPS_MANUAL_UPDATE
 0x00001000

	)

67 
	#OMAPFB_CAPS_TEARSYNC
 0x00002000

	)

68 
	#OMAPFB_CAPS_PLANE_RELOCATE_MEM
 0x00004000

	)

69 
	#OMAPFB_CAPS_PLANE_SCALE
 0x00008000

	)

70 
	#OMAPFB_CAPS_WINDOW_PIXEL_DOUBLE
 0x00010000

	)

71 
	#OMAPFB_CAPS_WINDOW_SCALE
 0x00020000

	)

72 
	#OMAPFB_CAPS_WINDOW_OVERLAY
 0x00040000

	)

73 
	#OMAPFB_CAPS_WINDOW_ROTATE
 0x00080000

	)

74 
	#OMAPFB_CAPS_SET_BACKLIGHT
 0x01000000

	)

77 
	#OMAPFB_FORMAT_MASK
 0x00ff

	)

78 
	#OMAPFB_FORMAT_FLAG_DOUBLE
 0x0100

	)

79 
	#OMAPFB_FORMAT_FLAG_TEARSYNC
 0x0200

	)

80 
	#OMAPFB_FORMAT_FLAG_FORCE_VSYNC
 0x0400

	)

81 
	#OMAPFB_FORMAT_FLAG_ENABLE_OVERLAY
 0x0800

	)

82 
	#OMAPFB_FORMAT_FLAG_DISABLE_OVERLAY
 0x1000

	)

84 
	#OMAPFB_MEMTYPE_SDRAM
 0

	)

85 
	#OMAPFB_MEMTYPE_SRAM
 1

	)

86 
	#OMAPFB_MEMTYPE_MAX
 1

	)

88 
	#OMAPFB_MEM_IDX_ENABLED
 0x80

	)

89 
	#OMAPFB_MEM_IDX_MASK
 0x7f

	)

91 
	eom≠fb_cﬁ‹_f‹m©
 {

92 
	mOMAPFB_COLOR_RGB565
 = 0,

93 
	mOMAPFB_COLOR_YUV422
,

94 
	mOMAPFB_COLOR_YUV420
,

95 
	mOMAPFB_COLOR_CLUT_8BPP
,

96 
	mOMAPFB_COLOR_CLUT_4BPP
,

97 
	mOMAPFB_COLOR_CLUT_2BPP
,

98 
	mOMAPFB_COLOR_CLUT_1BPP
,

99 
	mOMAPFB_COLOR_RGB444
,

100 
	mOMAPFB_COLOR_YUY422
,

102 
	mOMAPFB_COLOR_ARGB16
,

103 
	mOMAPFB_COLOR_RGB24U
,

104 
	mOMAPFB_COLOR_RGB24P
,

105 
	mOMAPFB_COLOR_ARGB32
,

106 
	mOMAPFB_COLOR_RGBA32
,

107 
	mOMAPFB_COLOR_RGBX32
,

110 
	som≠fb_upd©e_wödow
 {

111 
__u32
 
	mx
, 
	my
;

112 
__u32
 
	mwidth
, 
	mheight
;

113 
__u32
 
	mf‹m©
;

114 
__u32
 
	mout_x
, 
	mout_y
;

115 
__u32
 
	mout_width
, 
	mout_height
;

116 
__u32
 
	mª£rved
[8];

119 
	som≠fb_upd©e_wödow_ﬁd
 {

120 
__u32
 
	mx
, 
	my
;

121 
__u32
 
	mwidth
, 
	mheight
;

122 
__u32
 
	mf‹m©
;

125 
	eom≠fb_∂™e
 {

126 
	mOMAPFB_PLANE_GFX
 = 0,

127 
	mOMAPFB_PLANE_VID1
,

128 
	mOMAPFB_PLANE_VID2
,

131 
	eom≠fb_ch™√l_out
 {

132 
	mOMAPFB_CHANNEL_OUT_LCD
 = 0,

133 
	mOMAPFB_CHANNEL_OUT_DIGIT
,

136 
	som≠fb_∂™e_öfo
 {

137 
__u32
 
	mpos_x
;

138 
__u32
 
	mpos_y
;

139 
__u8
 
	míabÀd
;

140 
__u8
 
	mch™√l_out
;

141 
__u8
 
	mmúr‹
;

142 
__u8
 
	mmem_idx
;

143 
__u32
 
	mout_width
;

144 
__u32
 
	mout_height
;

145 
__u32
 
	mª£rved2
[12];

148 
	som≠fb_mem_öfo
 {

149 
__u32
 
	msize
;

150 
__u8
 
	mty≥
;

151 
__u8
 
	mª£rved
[3];

154 
	som≠fb_ˇps
 {

155 
__u32
 
	m˘æ
;

156 
__u32
 
	m∂™e_cﬁ‹
;

157 
__u32
 
	mwnd_cﬁ‹
;

160 
	eom≠fb_cﬁ‹_key_ty≥
 {

161 
	mOMAPFB_COLOR_KEY_DISABLED
 = 0,

162 
	mOMAPFB_COLOR_KEY_GFX_DST
,

163 
	mOMAPFB_COLOR_KEY_VID_SRC
,

166 
	som≠fb_cﬁ‹_key
 {

167 
__u8
 
	mch™√l_out
;

168 
__u32
 
	mbackground
;

169 
__u32
 
	må™s_key
;

170 
__u8
 
	mkey_ty≥
;

173 
	eom≠fb_upd©e_mode
 {

174 
	mOMAPFB_UPDATE_DISABLED
 = 0,

175 
	mOMAPFB_AUTO_UPDATE
,

176 
	mOMAPFB_MANUAL_UPDATE


179 
	som≠fb_mem‹y_ªad
 {

180 
__u16
 
	mx
;

181 
__u16
 
	my
;

182 
__u16
 
	mw
;

183 
__u16
 
	mh
;

184 
size_t
 
	mbuf„r_size
;

185 *
	mbuf„r
;

188 
	som≠fb_ovl_cﬁ‹mode
 {

189 
__u8
 
	movîœy_idx
;

190 
__u8
 
	mmode_idx
;

191 
__u32
 
	mbôs_≥r_pixñ
;

192 
__u32
 
	mn⁄°d
;

193 
fb_bôfõld
 
	mªd
;

194 
fb_bôfõld
 
	mgªí
;

195 
fb_bôfõld
 
	mblue
;

196 
fb_bôfõld
 
	må™•
;

199 
	som≠fb_vøm_öfo
 {

200 
__u32
 
	mtŸÆ
;

201 
__u32
 
	m‰ì
;

202 
__u32
 
	mœrge°_‰ì_block
;

203 
__u32
 
	mª£rved
[5];

206 
	som≠fb_ã¨sync_öfo
 {

207 
__u8
 
	míabÀd
;

208 
__u8
 
	mª£rved1
[3];

209 
__u16
 
	mlöe
;

210 
__u16
 
	mª£rved2
;

213 
	som≠fb_di•œy_öfo
 {

214 
__u16
 
	mxªs
;

215 
__u16
 
	myªs
;

216 
__u32
 
	mwidth
;

217 
__u32
 
	mheight
;

218 
__u32
 
	mª£rved
[5];

	@/usr/include/linux/soundcard.h

24 #i‚de‡
SOUNDCARD_H


25 
	#SOUNDCARD_H


	)

36 
	#SOUND_VERSION
 0x030802

	)

37 
	#OPEN_SOUND_SYSTEM


	)

40 
	~<löux/io˘l.h
>

43 
	~<ídün.h
>

49 
	#SNDCARD_ADLIB
 1

	)

50 
	#SNDCARD_SB
 2

	)

51 
	#SNDCARD_PAS
 3

	)

52 
	#SNDCARD_GUS
 4

	)

53 
	#SNDCARD_MPU401
 5

	)

54 
	#SNDCARD_SB16
 6

	)

55 
	#SNDCARD_SB16MIDI
 7

	)

56 
	#SNDCARD_UART6850
 8

	)

57 
	#SNDCARD_GUS16
 9

	)

58 
	#SNDCARD_MSS
 10

	)

59 
	#SNDCARD_PSS
 11

	)

60 
	#SNDCARD_SSCAPE
 12

	)

61 
	#SNDCARD_PSS_MPU
 13

	)

62 
	#SNDCARD_PSS_MSS
 14

	)

63 
	#SNDCARD_SSCAPE_MSS
 15

	)

64 
	#SNDCARD_TRXPRO
 16

	)

65 
	#SNDCARD_TRXPRO_SB
 17

	)

66 
	#SNDCARD_TRXPRO_MPU
 18

	)

67 
	#SNDCARD_MAD16
 19

	)

68 
	#SNDCARD_MAD16_MPU
 20

	)

69 
	#SNDCARD_CS4232
 21

	)

70 
	#SNDCARD_CS4232_MPU
 22

	)

71 
	#SNDCARD_MAUI
 23

	)

72 
	#SNDCARD_PSEUDO_MSS
 24

	)

73 
	#SNDCARD_GUSPNP
 25

	)

74 
	#SNDCARD_UART401
 26

	)

81 #i‚de‡
_SIOWR


82 #i‡
deföed
(
_IOWR
Ë&& (deföed(
_AIX
Ë|| (!deföed(
sun
Ë&& !deföed(
•¨c
Ë&& !deföed(
__•¨c__
Ë&& !deföed(
__INCio˘lh
Ë&& !deföed(
__Lynx__
)))

84 
	#SIOCPARM_MASK
 
IOCPARM_MASK


	)

85 
	#SIOC_VOID
 
IOC_VOID


	)

86 
	#SIOC_OUT
 
IOC_OUT


	)

87 
	#SIOC_IN
 
IOC_IN


	)

88 
	#SIOC_INOUT
 
IOC_INOUT


	)

89 
	#_SIOC_SIZE
 
_IOC_SIZE


	)

90 
	#_SIOC_DIR
 
_IOC_DIR


	)

91 
	#_SIOC_NONE
 
_IOC_NONE


	)

92 
	#_SIOC_READ
 
_IOC_READ


	)

93 
	#_SIOC_WRITE
 
_IOC_WRITE


	)

94 
	#_SIO
 
_IO


	)

95 
	#_SIOR
 
_IOR


	)

96 
	#_SIOW
 
_IOW


	)

97 
	#_SIOWR
 
_IOWR


	)

107 
	#SIOCPARM_MASK
 0x1ff‡

	)

108 
	#SIOC_VOID
 0x00000000

	)

109 
	#SIOC_OUT
 0x20000000

	)

110 
	#SIOC_IN
 0x40000000

	)

111 
	#SIOC_INOUT
 (
SIOC_IN
|
SIOC_OUT
)

	)

113 
	#_SIO
(
x
,
y
Ë(()(
SIOC_VOID
|(x<<8)|y))

	)

114 
	#_SIOR
(
x
,
y
,
t
Ë(()(
SIOC_OUT
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

115 
	#_SIOW
(
x
,
y
,
t
Ë(()(
SIOC_IN
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

117 
	#_SIOWR
(
x
,
y
,
t
Ë(()(
SIOC_INOUT
|((—)&
SIOCPARM_MASK
)<<16)|(x<<8)|y))

	)

118 
	#_SIOC_SIZE
(
x
Ë((x>>16)&
SIOCPARM_MASK
)

	)

119 
	#_SIOC_DIR
(
x
Ë(x & 0xf0000000)

	)

120 
	#_SIOC_NONE
 
SIOC_VOID


	)

121 
	#_SIOC_READ
 
SIOC_OUT


	)

122 
	#_SIOC_WRITE
 
SIOC_IN


	)

126 
	#SNDCTL_SEQ_RESET
 
	`_SIO
 ('Q', 0)

	)

127 
	#SNDCTL_SEQ_SYNC
 
	`_SIO
 ('Q', 1)

	)

128 
	#SNDCTL_SYNTH_INFO
 
	`_SIOWR
('Q', 2, 
sy¡h_öfo
)

	)

129 
	#SNDCTL_SEQ_CTRLRATE
 
	`_SIOWR
('Q', 3, Ë

	)

130 
	#SNDCTL_SEQ_GETOUTCOUNT
 
	`_SIOR
 ('Q', 4, )

	)

131 
	#SNDCTL_SEQ_GETINCOUNT
 
	`_SIOR
 ('Q', 5, )

	)

132 
	#SNDCTL_SEQ_PERCMODE
 
	`_SIOW
 ('Q', 6, )

	)

133 
	#SNDCTL_FM_LOAD_INSTR
 
	`_SIOW
 ('Q', 7, 
sbi_ö°rumít
Ë

	)

134 
	#SNDCTL_SEQ_TESTMIDI
 
	`_SIOW
 ('Q', 8, )

	)

135 
	#SNDCTL_SEQ_RESETSAMPLES
 
	`_SIOW
 ('Q', 9, )

	)

136 
	#SNDCTL_SEQ_NRSYNTHS
 
	`_SIOR
 ('Q',10, )

	)

137 
	#SNDCTL_SEQ_NRMIDIS
 
	`_SIOR
 ('Q',11, )

	)

138 
	#SNDCTL_MIDI_INFO
 
	`_SIOWR
('Q',12, 
midi_öfo
)

	)

139 
	#SNDCTL_SEQ_THRESHOLD
 
	`_SIOW
 ('Q',13, )

	)

140 
	#SNDCTL_SYNTH_MEMAVL
 
	`_SIOWR
('Q',14, Ë

	)

141 
	#SNDCTL_FM_4OP_ENABLE
 
	`_SIOW
 ('Q',15, Ë

	)

142 
	#SNDCTL_SEQ_PANIC
 
	`_SIO
 ('Q',17)

	)

143 
	#SNDCTL_SEQ_OUTOFBAND
 
	`_SIOW
 ('Q',18, 
£q_evít_ªc
)

	)

144 
	#SNDCTL_SEQ_GETTIME
 
	`_SIOR
 ('Q',19, )

	)

145 
	#SNDCTL_SYNTH_ID
 
	`_SIOWR
('Q',20, 
sy¡h_öfo
)

	)

146 
	#SNDCTL_SYNTH_CONTROL
 
	`_SIOWR
('Q',21, 
sy¡h_c⁄åﬁ
)

	)

147 
	#SNDCTL_SYNTH_REMOVESAMPLE
 
	`_SIOWR
('Q',22, 
ªmove_ßm∂e
)

	)

149 
	ssy¡h_c⁄åﬁ


151 
	mdevno
;

152 
	md©a
[4000];

153 }
	tsy¡h_c⁄åﬁ
;

155 
	sªmove_ßm∂e


157 
	mdevno
;

158 
	mb™kno
;

159 
	mö°∫o
;

160 } 
	tªmove_ßm∂e
;

162 
	s£q_evít_ªc
 {

163 
	m¨r
[8];

164 } 
	t£q_evít_ªc
;

166 
	#SNDCTL_TMR_TIMEBASE
 
	`_SIOWR
('T', 1, )

	)

167 
	#SNDCTL_TMR_START
 
	`_SIO
 ('T', 2)

	)

168 
	#SNDCTL_TMR_STOP
 
	`_SIO
 ('T', 3)

	)

169 
	#SNDCTL_TMR_CONTINUE
 
	`_SIO
 ('T', 4)

	)

170 
	#SNDCTL_TMR_TEMPO
 
	`_SIOWR
('T', 5, )

	)

171 
	#SNDCTL_TMR_SOURCE
 
	`_SIOWR
('T', 6, )

	)

172 
	#TMR_INTERNAL
 0x00000001

	)

173 
	#TMR_EXTERNAL
 0x00000002

	)

174 
	#TMR_MODE_MIDI
 0x00000010

	)

175 
	#TMR_MODE_FSK
 0x00000020

	)

176 
	#TMR_MODE_CLS
 0x00000040

	)

177 
	#TMR_MODE_SMPTE
 0x00000080

	)

178 
	#SNDCTL_TMR_METRONOME
 
	`_SIOW
 ('T', 7, )

	)

179 
	#SNDCTL_TMR_SELECT
 
	`_SIOW
 ('T', 8, )

	)

185 
	#_LINUX_PATCHKEY_H_INDIRECT


	)

186 
	~<löux/∑tchkey.h
>

187 #unde‡
_LINUX_PATCHKEY_H_INDIRECT


189 #i‡
deföed
(
__BYTE_ORDER
)

190 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


191 
	#AFMT_S16_NE
 
AFMT_S16_BE


	)

192 #ñi‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


193 
	#AFMT_S16_NE
 
AFMT_S16_LE


	)

209 
	s∑tch_öfo
 {

210 
	mkey
;

211 
	#WAVE_PATCH
 
	`_PATCHKEY
(0x04)

	)

212 
	#GUS_PATCH
 
WAVE_PATCH


	)

213 
	#WAVEFRONT_PATCH
 
	`_PATCHKEY
(0x06)

	)

215 
	mdevi˚_no
;

216 
	mö°r_no
;

218 
	mmode
;

223 
	#WAVE_16_BITS
 0x01

	)

224 
	#WAVE_UNSIGNED
 0x02

	)

225 
	#WAVE_LOOPING
 0x04

	)

226 
	#WAVE_BIDIR_LOOP
 0x08

	)

227 
	#WAVE_LOOP_BACK
 0x10

	)

228 
	#WAVE_SUSTAIN_ON
 0x20

	)

229 
	#WAVE_ENVELOPES
 0x40

	)

230 
	#WAVE_FAST_RELEASE
 0x80

	)

233 
	#WAVE_VIBRATO
 0x00010000

	)

234 
	#WAVE_TREMOLO
 0x00020000

	)

235 
	#WAVE_SCALE
 0x00040000

	)

236 
	#WAVE_FRACTIONS
 0x00080000

	)

238 
	#WAVE_ROM
 0x40000000

	)

239 
	#WAVE_MULAW
 0x20000000

	)

242 
	mÀn
;

243 
	mlo›_°¨t
, 
	mlo›_íd
;

261 
	mba£_‰eq
;

262 
	mba£_nŸe
;

263 
	mhigh_nŸe
;

264 
	mlow_nŸe
;

265 
	m∑¬ög
;

266 
	mdëunög
;

271 
	mív_øã
[ 6 ];

272 
	mív_off£t
[ 6 ];

280 
	måemﬁo_swìp
;

281 
	måemﬁo_øã
;

282 
	måemﬁo_dïth
;

284 
	mvibøto_swìp
;

285 
	mvibøto_øã
;

286 
	mvibøto_dïth
;

288 
	msˇÀ_‰equícy
;

289 
	msˇÀ_Á˘‹
;

291 
	mvﬁume
;

292 
	m‰a˘i⁄s
;

293 
	mª£rved1
;

294 
	m•¨e
[2];

295 
	md©a
[1];

298 
	ssy£x_öfo
 {

299 
	mkey
;

300 
	#SYSEX_PATCH
 
	`_PATCHKEY
(0x05)

	)

301 
	#MAUI_PATCH
 
	`_PATCHKEY
(0x06)

	)

302 
	mdevi˚_no
;

303 
	mÀn
;

304 
	md©a
[1];

327 
	#SEQ_NOTEOFF
 0

	)

328 
	#SEQ_FMNOTEOFF
 
SEQ_NOTEOFF


	)

329 
	#SEQ_NOTEON
 1

	)

330 
	#SEQ_FMNOTEON
 
SEQ_NOTEON


	)

331 
	#SEQ_WAIT
 
TMR_WAIT_ABS


	)

332 
	#SEQ_PGMCHANGE
 3

	)

333 
	#SEQ_FMPGMCHANGE
 
SEQ_PGMCHANGE


	)

334 
	#SEQ_SYNCTIMER
 
TMR_START


	)

335 
	#SEQ_MIDIPUTC
 5

	)

336 
	#SEQ_DRUMON
 6

	)

337 
	#SEQ_DRUMOFF
 7

	)

338 
	#SEQ_ECHO
 
TMR_ECHO


	)

339 
	#SEQ_AFTERTOUCH
 9

	)

340 
	#SEQ_CONTROLLER
 10

	)

354 
	#CTL_BANK_SELECT
 0x00

	)

355 
	#CTL_MODWHEEL
 0x01

	)

356 
	#CTL_BREATH
 0x02

	)

358 
	#CTL_FOOT
 0x04

	)

359 
	#CTL_PORTAMENTO_TIME
 0x05

	)

360 
	#CTL_DATA_ENTRY
 0x06

	)

361 
	#CTL_MAIN_VOLUME
 0x07

	)

362 
	#CTL_BALANCE
 0x08

	)

364 
	#CTL_PAN
 0x0a

	)

365 
	#CTL_EXPRESSION
 0x0b

	)

370 
	#CTL_GENERAL_PURPOSE1
 0x10

	)

371 
	#CTL_GENERAL_PURPOSE2
 0x11

	)

372 
	#CTL_GENERAL_PURPOSE3
 0x12

	)

373 
	#CTL_GENERAL_PURPOSE4
 0x13

	)

383 
	#CTL_DAMPER_PEDAL
 0x40

	)

384 
	#CTL_SUSTAIN
 0x40

	)

385 
	#CTL_HOLD
 0x40

	)

386 
	#CTL_PORTAMENTO
 0x41

	)

387 
	#CTL_SOSTENUTO
 0x42

	)

388 
	#CTL_SOFT_PEDAL
 0x43

	)

390 
	#CTL_HOLD2
 0x45

	)

393 
	#CTL_GENERAL_PURPOSE5
 0x50

	)

394 
	#CTL_GENERAL_PURPOSE6
 0x51

	)

395 
	#CTL_GENERAL_PURPOSE7
 0x52

	)

396 
	#CTL_GENERAL_PURPOSE8
 0x53

	)

398 
	#CTL_EXT_EFF_DEPTH
 0x5b

	)

399 
	#CTL_TREMOLO_DEPTH
 0x5c

	)

400 
	#CTL_CHORUS_DEPTH
 0x5d

	)

401 
	#CTL_DETUNE_DEPTH
 0x5e

	)

402 
	#CTL_CELESTE_DEPTH
 0x5ê

	)

403 
	#CTL_PHASER_DEPTH
 0x5f

	)

404 
	#CTL_DATA_INCREMENT
 0x60

	)

405 
	#CTL_DATA_DECREMENT
 0x61

	)

406 
	#CTL_NONREG_PARM_NUM_LSB
 0x62

	)

407 
	#CTL_NONREG_PARM_NUM_MSB
 0x63

	)

408 
	#CTL_REGIST_PARM_NUM_LSB
 0x64

	)

409 
	#CTL_REGIST_PARM_NUM_MSB
 0x65

	)

414 
	#CTRL_PITCH_BENDER
 255

	)

415 
	#CTRL_PITCH_BENDER_RANGE
 254

	)

416 
	#CTRL_EXPRESSION
 253

	)

417 
	#CTRL_MAIN_VOLUME
 252

	)

418 
	#SEQ_BALANCE
 11

	)

419 
	#SEQ_VOLMODE
 12

	)

425 
	#VOL_METHOD_ADAGIO
 1

	)

426 
	#VOL_METHOD_LINEAR
 2

	)

437 
	#SEQ_FULLSIZE
 0xfd

	)

458 
	#SEQ_PRIVATE
 0x„

	)

459 
	#SEQ_EXTENDED
 0xf‡

	)

465 
	tsbi_ö°r_d©a
[32];

467 
	ssbi_ö°rumít
 {

468 
	mkey
;

469 
	#FM_PATCH
 
	`_PATCHKEY
(0x01)

	)

470 
	#OPL3_PATCH
 
	`_PATCHKEY
(0x03)

	)

471 
	mdevi˚
;

472 
	mch™√l
;

473 
sbi_ö°r_d©a
 
	m›î©‹s
;

476 
	ssy¡h_öfo
 {

477 
	m«me
[30];

478 
	mdevi˚
;

479 
	msy¡h_ty≥
;

480 
	#SYNTH_TYPE_FM
 0

	)

481 
	#SYNTH_TYPE_SAMPLE
 1

	)

482 
	#SYNTH_TYPE_MIDI
 2

	)

484 
	msy¡h_subty≥
;

485 
	#FM_TYPE_ADLIB
 0x00

	)

486 
	#FM_TYPE_OPL3
 0x01

	)

487 
	#MIDI_TYPE_MPU401
 0x401

	)

489 
	#SAMPLE_TYPE_BASIC
 0x10

	)

490 
	#SAMPLE_TYPE_GUS
 
SAMPLE_TYPE_BASIC


	)

491 
	#SAMPLE_TYPE_WAVEFRONT
 0x11

	)

493 
	m≥rc_mode
;

494 
	mƒ_voi˚s
;

495 
	mƒ_drums
;

496 
	mö°r_b™k_size
;

497 
	mˇ∑bûôõs
;

498 
	#SYNTH_CAP_PERCMODE
 0x00000001

	)

499 
	#SYNTH_CAP_OPL3
 0x00000002

	)

500 
	#SYNTH_CAP_INPUT
 0x00000004

	)

501 
	mdummõs
[19];

504 
	ssound_timî_öfo
 {

505 
	m«me
[32];

506 
	mˇps
;

509 
	#MIDI_CAP_MPU401
 1

	)

511 
	smidi_öfo
 {

512 
	m«me
[30];

513 
	mdevi˚
;

514 
	mˇ∑bûôõs
;

515 
	mdev_ty≥
;

516 
	mdummõs
[18];

523 
	mcmd
;

524 
	mƒ_¨gs
, 
	mƒ_ªtu∫s
;

525 
	md©a
[30];

526 } 
	tmpu_comm™d_ªc
;

528 
	#SNDCTL_MIDI_PRETIME
 
	`_SIOWR
('m', 0, )

	)

529 
	#SNDCTL_MIDI_MPUMODE
 
	`_SIOWR
('m', 1, )

	)

530 
	#SNDCTL_MIDI_MPUCMD
 
	`_SIOWR
('m', 2, 
mpu_comm™d_ªc
)

	)

536 
	#SNDCTL_DSP_RESET
 
	`_SIO
 ('P', 0)

	)

537 
	#SNDCTL_DSP_SYNC
 
	`_SIO
 ('P', 1)

	)

538 
	#SNDCTL_DSP_SPEED
 
	`_SIOWR
('P', 2, )

	)

539 
	#SNDCTL_DSP_STEREO
 
	`_SIOWR
('P', 3, )

	)

540 
	#SNDCTL_DSP_GETBLKSIZE
 
	`_SIOWR
('P', 4, )

	)

541 
	#SNDCTL_DSP_SAMPLESIZE
 
SNDCTL_DSP_SETFMT


	)

542 
	#SNDCTL_DSP_CHANNELS
 
	`_SIOWR
('P', 6, )

	)

543 
	#SOUND_PCM_WRITE_CHANNELS
 
SNDCTL_DSP_CHANNELS


	)

544 
	#SOUND_PCM_WRITE_FILTER
 
	`_SIOWR
('P', 7, )

	)

545 
	#SNDCTL_DSP_POST
 
	`_SIO
 ('P', 8)

	)

546 
	#SNDCTL_DSP_SUBDIVIDE
 
	`_SIOWR
('P', 9, )

	)

547 
	#SNDCTL_DSP_SETFRAGMENT
 
	`_SIOWR
('P',10, )

	)

550 
	#SNDCTL_DSP_GETFMTS
 
	`_SIOR
 ('P',11, Ë

	)

551 
	#SNDCTL_DSP_SETFMT
 
	`_SIOWR
('P',5, Ë

	)

552 
	#AFMT_QUERY
 0x00000000

	)

553 
	#AFMT_MU_LAW
 0x00000001

	)

554 
	#AFMT_A_LAW
 0x00000002

	)

555 
	#AFMT_IMA_ADPCM
 0x00000004

	)

556 
	#AFMT_U8
 0x00000008

	)

557 
	#AFMT_S16_LE
 0x00000010

	)

558 
	#AFMT_S16_BE
 0x00000020

	)

559 
	#AFMT_S8
 0x00000040

	)

560 
	#AFMT_U16_LE
 0x00000080

	)

561 
	#AFMT_U16_BE
 0x00000100

	)

562 
	#AFMT_MPEG
 0x00000200

	)

563 
	#AFMT_AC3
 0x00000400

	)

568 
	saudio_buf_öfo
 {

569 
	m‰agmíts
;

570 
	m‰ag°ŸÆ
;

571 
	m‰agsize
;

573 
	mbyãs
;

575 } 
	taudio_buf_öfo
;

577 
	#SNDCTL_DSP_GETOSPACE
 
	`_SIOR
 ('P',12, 
audio_buf_öfo
)

	)

578 
	#SNDCTL_DSP_GETISPACE
 
	`_SIOR
 ('P',13, 
audio_buf_öfo
)

	)

579 
	#SNDCTL_DSP_NONBLOCK
 
	`_SIO
 ('P',14)

	)

580 
	#SNDCTL_DSP_GETCAPS
 
	`_SIOR
 ('P',15, )

	)

581 
	#DSP_CAP_REVISION
 0x000000f‡

	)

582 
	#DSP_CAP_DUPLEX
 0x00000100

	)

583 
	#DSP_CAP_REALTIME
 0x00000200

	)

584 
	#DSP_CAP_BATCH
 0x00000400

	)

588 
	#DSP_CAP_COPROC
 0x00000800

	)

591 
	#DSP_CAP_TRIGGER
 0x00001000

	)

592 
	#DSP_CAP_MMAP
 0x00002000

	)

593 
	#DSP_CAP_MULTI
 0x00004000

	)

594 
	#DSP_CAP_BIND
 0x00008000

	)

597 
	#SNDCTL_DSP_GETTRIGGER
 
	`_SIOR
 ('P',16, )

	)

598 
	#SNDCTL_DSP_SETTRIGGER
 
	`_SIOW
 ('P',16, )

	)

599 
	#PCM_ENABLE_INPUT
 0x00000001

	)

600 
	#PCM_ENABLE_OUTPUT
 0x00000002

	)

602 
	scou¡_öfo
 {

603 
	mbyãs
;

604 
	mblocks
;

605 
	m±r
;

606 } 
	tcou¡_öfo
;

608 
	#SNDCTL_DSP_GETIPTR
 
	`_SIOR
 ('P',17, 
cou¡_öfo
)

	)

609 
	#SNDCTL_DSP_GETOPTR
 
	`_SIOR
 ('P',18, 
cou¡_öfo
)

	)

611 
	sbuffmem_desc
 {

612 *
	mbuf„r
;

613 
	msize
;

614 } 
	tbuffmem_desc
;

615 
	#SNDCTL_DSP_MAPINBUF
 
	`_SIOR
 ('P', 19, 
buffmem_desc
)

	)

616 
	#SNDCTL_DSP_MAPOUTBUF
 
	`_SIOR
 ('P', 20, 
buffmem_desc
)

	)

617 
	#SNDCTL_DSP_SETSYNCRO
 
	`_SIO
 ('P', 21)

	)

618 
	#SNDCTL_DSP_SETDUPLEX
 
	`_SIO
 ('P', 22)

	)

619 
	#SNDCTL_DSP_GETODELAY
 
	`_SIOR
 ('P', 23, )

	)

621 
	#SNDCTL_DSP_GETCHANNELMASK
 
	`_SIOWR
('P', 64, )

	)

622 
	#SNDCTL_DSP_BIND_CHANNEL
 
	`_SIOWR
('P', 65, )

	)

623 
	#DSP_BIND_QUERY
 0x00000000

	)

624 
	#DSP_BIND_FRONT
 0x00000001

	)

625 
	#DSP_BIND_SURR
 0x00000002

	)

626 
	#DSP_BIND_CENTER_LFE
 0x00000004

	)

627 
	#DSP_BIND_HANDSET
 0x00000008

	)

628 
	#DSP_BIND_MIC
 0x00000010

	)

629 
	#DSP_BIND_MODEM1
 0x00000020

	)

630 
	#DSP_BIND_MODEM2
 0x00000040

	)

631 
	#DSP_BIND_I2S
 0x00000080

	)

632 
	#DSP_BIND_SPDIF
 0x00000100

	)

634 
	#SNDCTL_DSP_SETSPDIF
 
	`_SIOW
 ('P', 66, )

	)

635 
	#SNDCTL_DSP_GETSPDIF
 
	`_SIOR
 ('P', 67, )

	)

636 
	#SPDIF_PRO
 0x0001

	)

637 
	#SPDIF_N_AUD
 0x0002

	)

638 
	#SPDIF_COPY
 0x0004

	)

639 
	#SPDIF_PRE
 0x0008

	)

640 
	#SPDIF_CC
 0x07f0

	)

641 
	#SPDIF_L
 0x0800

	)

642 
	#SPDIF_DRS
 0x4000

	)

643 
	#SPDIF_V
 0x8000

	)

656 
	#SNDCTL_DSP_PROFILE
 
	`_SIOW
 ('P', 23, )

	)

657 
	#APF_NORMAL
 0

	)

658 
	#APF_NETWORK
 1

	)

659 
	#APF_CPUINTENS
 2

	)

661 
	#SOUND_PCM_READ_RATE
 
	`_SIOR
 ('P', 2, )

	)

662 
	#SOUND_PCM_READ_CHANNELS
 
	`_SIOR
 ('P', 6, )

	)

663 
	#SOUND_PCM_READ_BITS
 
	`_SIOR
 ('P', 5, )

	)

664 
	#SOUND_PCM_READ_FILTER
 
	`_SIOR
 ('P', 7, )

	)

667 
	#SOUND_PCM_WRITE_BITS
 
SNDCTL_DSP_SETFMT


	)

668 
	#SOUND_PCM_WRITE_RATE
 
SNDCTL_DSP_SPEED


	)

669 
	#SOUND_PCM_POST
 
SNDCTL_DSP_POST


	)

670 
	#SOUND_PCM_RESET
 
SNDCTL_DSP_RESET


	)

671 
	#SOUND_PCM_SYNC
 
SNDCTL_DSP_SYNC


	)

672 
	#SOUND_PCM_SUBDIVIDE
 
SNDCTL_DSP_SUBDIVIDE


	)

673 
	#SOUND_PCM_SETFRAGMENT
 
SNDCTL_DSP_SETFRAGMENT


	)

674 
	#SOUND_PCM_GETFMTS
 
SNDCTL_DSP_GETFMTS


	)

675 
	#SOUND_PCM_SETFMT
 
SNDCTL_DSP_SETFMT


	)

676 
	#SOUND_PCM_GETOSPACE
 
SNDCTL_DSP_GETOSPACE


	)

677 
	#SOUND_PCM_GETISPACE
 
SNDCTL_DSP_GETISPACE


	)

678 
	#SOUND_PCM_NONBLOCK
 
SNDCTL_DSP_NONBLOCK


	)

679 
	#SOUND_PCM_GETCAPS
 
SNDCTL_DSP_GETCAPS


	)

680 
	#SOUND_PCM_GETTRIGGER
 
SNDCTL_DSP_GETTRIGGER


	)

681 
	#SOUND_PCM_SETTRIGGER
 
SNDCTL_DSP_SETTRIGGER


	)

682 
	#SOUND_PCM_SETSYNCRO
 
SNDCTL_DSP_SETSYNCRO


	)

683 
	#SOUND_PCM_GETIPTR
 
SNDCTL_DSP_GETIPTR


	)

684 
	#SOUND_PCM_GETOPTR
 
SNDCTL_DSP_GETOPTR


	)

685 
	#SOUND_PCM_MAPINBUF
 
SNDCTL_DSP_MAPINBUF


	)

686 
	#SOUND_PCM_MAPOUTBUF
 
SNDCTL_DSP_MAPOUTBUF


	)

693 
	sc›r_buf„r
 {

694 
	mcomm™d
;

695 
	mÊags
;

696 
	#CPF_NONE
 0x0000

	)

697 
	#CPF_FIRST
 0x0001

	)

698 
	#CPF_LAST
 0x0002

	)

699 
	mÀn
;

700 
	moffs
;

702 
	md©a
[4000];

703 } 
	tc›r_buf„r
;

705 
	sc›r_debug_buf
 {

706 
	mcomm™d
;

707 
	m∑rm1
;

708 
	m∑rm2
;

709 
	mÊags
;

710 
	mÀn
;

711 } 
	tc›r_debug_buf
;

713 
	sc›r_msg
 {

714 
	mÀn
;

715 
	md©a
[4000];

716 } 
	tc›r_msg
;

718 
	#SNDCTL_COPR_RESET
 
	`_SIO
 ('C', 0)

	)

719 
	#SNDCTL_COPR_LOAD
 
	`_SIOWR
('C', 1, 
c›r_buf„r
)

	)

720 
	#SNDCTL_COPR_RDATA
 
	`_SIOWR
('C', 2, 
c›r_debug_buf
)

	)

721 
	#SNDCTL_COPR_RCODE
 
	`_SIOWR
('C', 3, 
c›r_debug_buf
)

	)

722 
	#SNDCTL_COPR_WDATA
 
	`_SIOW
 ('C', 4, 
c›r_debug_buf
)

	)

723 
	#SNDCTL_COPR_WCODE
 
	`_SIOW
 ('C', 5, 
c›r_debug_buf
)

	)

724 
	#SNDCTL_COPR_RUN
 
	`_SIOWR
('C', 6, 
c›r_debug_buf
)

	)

725 
	#SNDCTL_COPR_HALT
 
	`_SIOWR
('C', 7, 
c›r_debug_buf
)

	)

726 
	#SNDCTL_COPR_SENDMSG
 
	`_SIOWR
('C', 8, 
c›r_msg
)

	)

727 
	#SNDCTL_COPR_RCVMSG
 
	`_SIOR
 ('C', 9, 
c›r_msg
)

	)

742 
	#SOUND_MIXER_NRDEVICES
 25

	)

743 
	#SOUND_MIXER_VOLUME
 0

	)

744 
	#SOUND_MIXER_BASS
 1

	)

745 
	#SOUND_MIXER_TREBLE
 2

	)

746 
	#SOUND_MIXER_SYNTH
 3

	)

747 
	#SOUND_MIXER_PCM
 4

	)

748 
	#SOUND_MIXER_SPEAKER
 5

	)

749 
	#SOUND_MIXER_LINE
 6

	)

750 
	#SOUND_MIXER_MIC
 7

	)

751 
	#SOUND_MIXER_CD
 8

	)

752 
	#SOUND_MIXER_IMIX
 9

	)

753 
	#SOUND_MIXER_ALTPCM
 10

	)

754 
	#SOUND_MIXER_RECLEV
 11

	)

755 
	#SOUND_MIXER_IGAIN
 12

	)

756 
	#SOUND_MIXER_OGAIN
 13

	)

763 
	#SOUND_MIXER_LINE1
 14

	)

764 
	#SOUND_MIXER_LINE2
 15

	)

765 
	#SOUND_MIXER_LINE3
 16

	)

766 
	#SOUND_MIXER_DIGITAL1
 17

	)

767 
	#SOUND_MIXER_DIGITAL2
 18

	)

768 
	#SOUND_MIXER_DIGITAL3
 19

	)

769 
	#SOUND_MIXER_PHONEIN
 20

	)

770 
	#SOUND_MIXER_PHONEOUT
 21

	)

771 
	#SOUND_MIXER_VIDEO
 22

	)

772 
	#SOUND_MIXER_RADIO
 23

	)

773 
	#SOUND_MIXER_MONITOR
 24

	)

777 
	#SOUND_ONOFF_MIN
 28

	)

778 
	#SOUND_ONOFF_MAX
 30

	)

781 
	#SOUND_MIXER_NONE
 31

	)

787 
	#SOUND_MIXER_ENHANCE
 
SOUND_MIXER_NONE


	)

788 
	#SOUND_MIXER_MUTE
 
SOUND_MIXER_NONE


	)

789 
	#SOUND_MIXER_LOUD
 
SOUND_MIXER_NONE


	)

792 
	#SOUND_DEVICE_LABELS
 {"Vol ", "Bass ", "Trebl", "Synth", "Pcm ", "Spkr ", "Line ", \

795 "Ph⁄eIn", "Ph⁄eOut", "Video", "Radio", "M⁄ô‹"}

	)

797 
	#SOUND_DEVICE_NAMES
 {"vol", "bass", "treble", "synth", "pcm", "speaker", "line", \

800 "phö", "phout", "video", "ødio", "m⁄ô‹"}

	)

804 
	#SOUND_MIXER_RECSRC
 0xf‡

	)

805 
	#SOUND_MIXER_DEVMASK
 0x„

	)

806 
	#SOUND_MIXER_RECMASK
 0xfd

	)

807 
	#SOUND_MIXER_CAPS
 0xfc

	)

808 
	#SOUND_CAP_EXCL_INPUT
 0x00000001

	)

809 
	#SOUND_MIXER_STEREODEVS
 0xfb

	)

810 
	#SOUND_MIXER_OUTSRC
 0xÁ

	)

811 
	#SOUND_MIXER_OUTMASK
 0xf9

	)

815 
	#SOUND_MASK_VOLUME
 (1 << 
SOUND_MIXER_VOLUME
)

	)

816 
	#SOUND_MASK_BASS
 (1 << 
SOUND_MIXER_BASS
)

	)

817 
	#SOUND_MASK_TREBLE
 (1 << 
SOUND_MIXER_TREBLE
)

	)

818 
	#SOUND_MASK_SYNTH
 (1 << 
SOUND_MIXER_SYNTH
)

	)

819 
	#SOUND_MASK_PCM
 (1 << 
SOUND_MIXER_PCM
)

	)

820 
	#SOUND_MASK_SPEAKER
 (1 << 
SOUND_MIXER_SPEAKER
)

	)

821 
	#SOUND_MASK_LINE
 (1 << 
SOUND_MIXER_LINE
)

	)

822 
	#SOUND_MASK_MIC
 (1 << 
SOUND_MIXER_MIC
)

	)

823 
	#SOUND_MASK_CD
 (1 << 
SOUND_MIXER_CD
)

	)

824 
	#SOUND_MASK_IMIX
 (1 << 
SOUND_MIXER_IMIX
)

	)

825 
	#SOUND_MASK_ALTPCM
 (1 << 
SOUND_MIXER_ALTPCM
)

	)

826 
	#SOUND_MASK_RECLEV
 (1 << 
SOUND_MIXER_RECLEV
)

	)

827 
	#SOUND_MASK_IGAIN
 (1 << 
SOUND_MIXER_IGAIN
)

	)

828 
	#SOUND_MASK_OGAIN
 (1 << 
SOUND_MIXER_OGAIN
)

	)

829 
	#SOUND_MASK_LINE1
 (1 << 
SOUND_MIXER_LINE1
)

	)

830 
	#SOUND_MASK_LINE2
 (1 << 
SOUND_MIXER_LINE2
)

	)

831 
	#SOUND_MASK_LINE3
 (1 << 
SOUND_MIXER_LINE3
)

	)

832 
	#SOUND_MASK_DIGITAL1
 (1 << 
SOUND_MIXER_DIGITAL1
)

	)

833 
	#SOUND_MASK_DIGITAL2
 (1 << 
SOUND_MIXER_DIGITAL2
)

	)

834 
	#SOUND_MASK_DIGITAL3
 (1 << 
SOUND_MIXER_DIGITAL3
)

	)

835 
	#SOUND_MASK_PHONEIN
 (1 << 
SOUND_MIXER_PHONEIN
)

	)

836 
	#SOUND_MASK_PHONEOUT
 (1 << 
SOUND_MIXER_PHONEOUT
)

	)

837 
	#SOUND_MASK_RADIO
 (1 << 
SOUND_MIXER_RADIO
)

	)

838 
	#SOUND_MASK_VIDEO
 (1 << 
SOUND_MIXER_VIDEO
)

	)

839 
	#SOUND_MASK_MONITOR
 (1 << 
SOUND_MIXER_MONITOR
)

	)

842 
	#SOUND_MASK_MUTE
 (1 << 
SOUND_MIXER_MUTE
)

	)

843 
	#SOUND_MASK_ENHANCE
 (1 << 
SOUND_MIXER_ENHANCE
)

	)

844 
	#SOUND_MASK_LOUD
 (1 << 
SOUND_MIXER_LOUD
)

	)

846 
	#MIXER_READ
(
dev
Ë
	`_SIOR
('M', dev, )

	)

847 
	#SOUND_MIXER_READ_VOLUME
 
	`MIXER_READ
(
SOUND_MIXER_VOLUME
)

	)

848 
	#SOUND_MIXER_READ_BASS
 
	`MIXER_READ
(
SOUND_MIXER_BASS
)

	)

849 
	#SOUND_MIXER_READ_TREBLE
 
	`MIXER_READ
(
SOUND_MIXER_TREBLE
)

	)

850 
	#SOUND_MIXER_READ_SYNTH
 
	`MIXER_READ
(
SOUND_MIXER_SYNTH
)

	)

851 
	#SOUND_MIXER_READ_PCM
 
	`MIXER_READ
(
SOUND_MIXER_PCM
)

	)

852 
	#SOUND_MIXER_READ_SPEAKER
 
	`MIXER_READ
(
SOUND_MIXER_SPEAKER
)

	)

853 
	#SOUND_MIXER_READ_LINE
 
	`MIXER_READ
(
SOUND_MIXER_LINE
)

	)

854 
	#SOUND_MIXER_READ_MIC
 
	`MIXER_READ
(
SOUND_MIXER_MIC
)

	)

855 
	#SOUND_MIXER_READ_CD
 
	`MIXER_READ
(
SOUND_MIXER_CD
)

	)

856 
	#SOUND_MIXER_READ_IMIX
 
	`MIXER_READ
(
SOUND_MIXER_IMIX
)

	)

857 
	#SOUND_MIXER_READ_ALTPCM
 
	`MIXER_READ
(
SOUND_MIXER_ALTPCM
)

	)

858 
	#SOUND_MIXER_READ_RECLEV
 
	`MIXER_READ
(
SOUND_MIXER_RECLEV
)

	)

859 
	#SOUND_MIXER_READ_IGAIN
 
	`MIXER_READ
(
SOUND_MIXER_IGAIN
)

	)

860 
	#SOUND_MIXER_READ_OGAIN
 
	`MIXER_READ
(
SOUND_MIXER_OGAIN
)

	)

861 
	#SOUND_MIXER_READ_LINE1
 
	`MIXER_READ
(
SOUND_MIXER_LINE1
)

	)

862 
	#SOUND_MIXER_READ_LINE2
 
	`MIXER_READ
(
SOUND_MIXER_LINE2
)

	)

863 
	#SOUND_MIXER_READ_LINE3
 
	`MIXER_READ
(
SOUND_MIXER_LINE3
)

	)

866 
	#SOUND_MIXER_READ_MUTE
 
	`MIXER_READ
(
SOUND_MIXER_MUTE
)

	)

867 
	#SOUND_MIXER_READ_ENHANCE
 
	`MIXER_READ
(
SOUND_MIXER_ENHANCE
)

	)

868 
	#SOUND_MIXER_READ_LOUD
 
	`MIXER_READ
(
SOUND_MIXER_LOUD
)

	)

870 
	#SOUND_MIXER_READ_RECSRC
 
	`MIXER_READ
(
SOUND_MIXER_RECSRC
)

	)

871 
	#SOUND_MIXER_READ_DEVMASK
 
	`MIXER_READ
(
SOUND_MIXER_DEVMASK
)

	)

872 
	#SOUND_MIXER_READ_RECMASK
 
	`MIXER_READ
(
SOUND_MIXER_RECMASK
)

	)

873 
	#SOUND_MIXER_READ_STEREODEVS
 
	`MIXER_READ
(
SOUND_MIXER_STEREODEVS
)

	)

874 
	#SOUND_MIXER_READ_CAPS
 
	`MIXER_READ
(
SOUND_MIXER_CAPS
)

	)

876 
	#MIXER_WRITE
(
dev
Ë
	`_SIOWR
('M', dev, )

	)

877 
	#SOUND_MIXER_WRITE_VOLUME
 
	`MIXER_WRITE
(
SOUND_MIXER_VOLUME
)

	)

878 
	#SOUND_MIXER_WRITE_BASS
 
	`MIXER_WRITE
(
SOUND_MIXER_BASS
)

	)

879 
	#SOUND_MIXER_WRITE_TREBLE
 
	`MIXER_WRITE
(
SOUND_MIXER_TREBLE
)

	)

880 
	#SOUND_MIXER_WRITE_SYNTH
 
	`MIXER_WRITE
(
SOUND_MIXER_SYNTH
)

	)

881 
	#SOUND_MIXER_WRITE_PCM
 
	`MIXER_WRITE
(
SOUND_MIXER_PCM
)

	)

882 
	#SOUND_MIXER_WRITE_SPEAKER
 
	`MIXER_WRITE
(
SOUND_MIXER_SPEAKER
)

	)

883 
	#SOUND_MIXER_WRITE_LINE
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE
)

	)

884 
	#SOUND_MIXER_WRITE_MIC
 
	`MIXER_WRITE
(
SOUND_MIXER_MIC
)

	)

885 
	#SOUND_MIXER_WRITE_CD
 
	`MIXER_WRITE
(
SOUND_MIXER_CD
)

	)

886 
	#SOUND_MIXER_WRITE_IMIX
 
	`MIXER_WRITE
(
SOUND_MIXER_IMIX
)

	)

887 
	#SOUND_MIXER_WRITE_ALTPCM
 
	`MIXER_WRITE
(
SOUND_MIXER_ALTPCM
)

	)

888 
	#SOUND_MIXER_WRITE_RECLEV
 
	`MIXER_WRITE
(
SOUND_MIXER_RECLEV
)

	)

889 
	#SOUND_MIXER_WRITE_IGAIN
 
	`MIXER_WRITE
(
SOUND_MIXER_IGAIN
)

	)

890 
	#SOUND_MIXER_WRITE_OGAIN
 
	`MIXER_WRITE
(
SOUND_MIXER_OGAIN
)

	)

891 
	#SOUND_MIXER_WRITE_LINE1
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE1
)

	)

892 
	#SOUND_MIXER_WRITE_LINE2
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE2
)

	)

893 
	#SOUND_MIXER_WRITE_LINE3
 
	`MIXER_WRITE
(
SOUND_MIXER_LINE3
)

	)

896 
	#SOUND_MIXER_WRITE_MUTE
 
	`MIXER_WRITE
(
SOUND_MIXER_MUTE
)

	)

897 
	#SOUND_MIXER_WRITE_ENHANCE
 
	`MIXER_WRITE
(
SOUND_MIXER_ENHANCE
)

	)

898 
	#SOUND_MIXER_WRITE_LOUD
 
	`MIXER_WRITE
(
SOUND_MIXER_LOUD
)

	)

900 
	#SOUND_MIXER_WRITE_RECSRC
 
	`MIXER_WRITE
(
SOUND_MIXER_RECSRC
)

	)

902 
	smixî_öfo


904 
	mid
[16];

905 
	m«me
[32];

906 
	mmodify_cou¡î
;

907 
	mfûÀrs
[10];

908 } 
	tmixî_öfo
;

910 
	s_ﬁd_mixî_öfo


912 
	mid
[16];

913 
	m«me
[32];

914 } 
	t_ﬁd_mixî_öfo
;

916 
	#SOUND_MIXER_INFO
 
	`_SIOR
 ('M', 101, 
mixî_öfo
)

	)

917 
	#SOUND_OLD_MIXER_INFO
 
	`_SIOR
 ('M', 101, 
_ﬁd_mixî_öfo
)

	)

925 
	tmixî_ªc‹d
[128];

927 
	#SOUND_MIXER_ACCESS
 
	`_SIOWR
('M', 102, 
mixî_ªc‹d
)

	)

932 
	#SOUND_MIXER_AGC
 
	`_SIOWR
('M', 103, )

	)

933 
	#SOUND_MIXER_3DSE
 
	`_SIOWR
('M', 104, )

	)

939 
	#SOUND_MIXER_PRIVATE1
 
	`_SIOWR
('M', 111, )

	)

940 
	#SOUND_MIXER_PRIVATE2
 
	`_SIOWR
('M', 112, )

	)

941 
	#SOUND_MIXER_PRIVATE3
 
	`_SIOWR
('M', 113, )

	)

942 
	#SOUND_MIXER_PRIVATE4
 
	`_SIOWR
('M', 114, )

	)

943 
	#SOUND_MIXER_PRIVATE5
 
	`_SIOWR
('M', 115, )

	)

953 
	smixî_vﬁ_èbÀ
 {

954 
	mnum
;

955 
	m«me
[32];

956 
	mÀvñs
[32];

957 } 
	tmixî_vﬁ_èbÀ
;

959 
	#SOUND_MIXER_GETLEVELS
 
	`_SIOWR
('M', 116, 
mixî_vﬁ_èbÀ
)

	)

960 
	#SOUND_MIXER_SETLEVELS
 
	`_SIOWR
('M', 117, 
mixî_vﬁ_èbÀ
)

	)

968 
	#OSS_GETVERSION
 
	`_SIOR
 ('M', 118, )

	)

988 
	#EV_SEQ_LOCAL
 0x80

	)

989 
	#EV_TIMING
 0x81

	)

990 
	#EV_CHN_COMMON
 0x92

	)

991 
	#EV_CHN_VOICE
 0x93

	)

992 
	#EV_SYSEX
 0x94

	)

1002 
	#MIDI_NOTEOFF
 0x80

	)

1003 
	#MIDI_NOTEON
 0x90

	)

1004 
	#MIDI_KEY_PRESSURE
 0xA0

	)

1010 
	#MIDI_CTL_CHANGE
 0xB0

	)

1011 
	#MIDI_PGM_CHANGE
 0xC0

	)

1012 
	#MIDI_CHN_PRESSURE
 0xD0

	)

1013 
	#MIDI_PITCH_BEND
 0xE0

	)

1015 
	#MIDI_SYSTEM_PREFIX
 0xF0

	)

1020 
	#TMR_WAIT_REL
 1

	)

1021 
	#TMR_WAIT_ABS
 2

	)

1022 
	#TMR_STOP
 3

	)

1023 
	#TMR_START
 4

	)

1024 
	#TMR_CONTINUE
 5

	)

1025 
	#TMR_TEMPO
 6

	)

1026 
	#TMR_ECHO
 8

	)

1027 
	#TMR_CLOCK
 9

	)

1028 
	#TMR_SPP
 10

	)

1029 
	#TMR_TIMESIG
 11

	)

1034 
	#LOCL_STARTAUDIO
 1

	)

1052 
	#SEQ_DECLAREBUF
(Ë
	`SEQ_USE_EXTBUF
()

	)

1054 
£qbuf_dump
();

1056 
	#SEQ_PM_DEFINES
 
__foo_b¨___


	)

1058 
	#SEQ_LOAD_GMINSTR
(
dev
, 
ö°r
)

	)

1059 
	#SEQ_LOAD_GMDRUM
(
dev
, 
drum
)

	)

1061 
	#_SEQ_EXTERN
 

	)

1062 
	#SEQ_USE_EXTBUF
() \

1063 
_SEQ_EXTERN
 
_£qbuf
[]; \

1064 
_SEQ_EXTERN
 
_£qbuÊí
; _SEQ_EXTERN 
_£qbuÂå


	)

1066 #i‚de‡
USE_SIMPLE_MACROS


1086 
	#SEQ_DEFINEBUF
(
Àn
Ë
_£qbuf
[Àn]; 
_£qbuÊí
 =Üí;
_£qbuÂå
 = 0

	)

1087 
	#_SEQ_NEEDBUF
(
Àn
Ëi‡((
_£qbuÂå
+÷í)Ë> 
_£qbuÊí
Ë
	`£qbuf_dump
()

	)

1088 
	#_SEQ_ADVBUF
(
Àn
Ë
_£qbuÂå
 +
	)
len

1089 
	#SEQ_DUMPBUF
 
£qbuf_dump


	)

1105 
	#_SEQ_NEEDBUF
(
Àn
Ë

	)

1108 
	#SEQ_VOLUME_MODE
(
dev
, 
mode
Ë{
	`_SEQ_NEEDBUF
(8);\

1109 
_£qbuf
[
_£qbuÂå
] = 
SEQ_EXTENDED
;\

1110 
_£qbuf
[
_£qbuÂå
+1] = 
SEQ_VOLMODE
;\

1111 
_£qbuf
[
_£qbuÂå
+2] = (
dev
);\

1112 
_£qbuf
[
_£qbuÂå
+3] = (
mode
);\

1113 
_£qbuf
[
_£qbuÂå
+4] = 0;\

1114 
_£qbuf
[
_£qbuÂå
+5] = 0;\

1115 
_£qbuf
[
_£qbuÂå
+6] = 0;\

1116 
_£qbuf
[
_£qbuÂå
+7] = 0;\

1117 
	`_SEQ_ADVBUF
(8);}

	)

1123 
	#_CHN_VOICE
(
dev
, 
evít
, 
chn
, 
nŸe
, 
∑rm
) \

1124 {
	`_SEQ_NEEDBUF
(8);\

1125 
_£qbuf
[
_£qbuÂå
] = 
EV_CHN_VOICE
;\

1126 
_£qbuf
[
_£qbuÂå
+1] = (
dev
);\

1127 
_£qbuf
[
_£qbuÂå
+2] = (
evít
);\

1128 
_£qbuf
[
_£qbuÂå
+3] = (
chn
);\

1129 
_£qbuf
[
_£qbuÂå
+4] = (
nŸe
);\

1130 
_£qbuf
[
_£qbuÂå
+5] = (
∑rm
);\

1131 
_£qbuf
[
_£qbuÂå
+6] = (0);\

1132 
_£qbuf
[
_£qbuÂå
+7] = 0;\

1133 
	`_SEQ_ADVBUF
(8);}

	)

1135 
	#SEQ_START_NOTE
(
dev
, 
chn
, 
nŸe
, 
vﬁ
) \

1136 
	`_CHN_VOICE
(
dev
, 
MIDI_NOTEON
, 
chn
, 
nŸe
, 
vﬁ
)

	)

1138 
	#SEQ_STOP_NOTE
(
dev
, 
chn
, 
nŸe
, 
vﬁ
) \

1139 
	`_CHN_VOICE
(
dev
, 
MIDI_NOTEOFF
, 
chn
, 
nŸe
, 
vﬁ
)

	)

1141 
	#SEQ_KEY_PRESSURE
(
dev
, 
chn
, 
nŸe
, 
¥essuª
) \

1142 
	`_CHN_VOICE
(
dev
, 
MIDI_KEY_PRESSURE
, 
chn
, 
nŸe
, 
¥essuª
)

	)

1148 
	#_CHN_COMMON
(
dev
, 
evít
, 
chn
, 
p1
, 
p2
, 
w14
) \

1149 {
	`_SEQ_NEEDBUF
(8);\

1150 
_£qbuf
[
_£qbuÂå
] = 
EV_CHN_COMMON
;\

1151 
_£qbuf
[
_£qbuÂå
+1] = (
dev
);\

1152 
_£qbuf
[
_£qbuÂå
+2] = (
evít
);\

1153 
_£qbuf
[
_£qbuÂå
+3] = (
chn
);\

1154 
_£qbuf
[
_£qbuÂå
+4] = (
p1
);\

1155 
_£qbuf
[
_£qbuÂå
+5] = (
p2
);\

1156 *(*)&
_£qbuf
[
_£qbuÂå
+6] = (
w14
);\

1157 
	`_SEQ_ADVBUF
(8);}

	)

1173 
	#SEQ_SYSEX
(
dev
, 
buf
, 
Àn
) \

1174 {
ii
, 
Œ
=(
Àn
); \

1175 *
buÂ
=
buf
;\

1176 i‡(
Œ
>6)ll=6;\

1177 
	`_SEQ_NEEDBUF
(8);\

1178 
_£qbuf
[
_£qbuÂå
] = 
EV_SYSEX
;\

1179 
_£qbuf
[
_£qbuÂå
+1] = (
dev
);\

1180 
ii
=0;ii<
Œ
;ii++)\

1181 
_£qbuf
[
_£qbuÂå
+
ii
+2] = 
buÂ
[ii];\

1182 
ii
=
Œ
;ii<6;ii++)\

1183 
_£qbuf
[
_£qbuÂå
+
ii
+2] = 0xff;\

1184 
	`_SEQ_ADVBUF
(8);}

	)

1186 
	#SEQ_CHN_PRESSURE
(
dev
, 
chn
, 
¥essuª
) \

1187 
	`_CHN_COMMON
(
dev
, 
MIDI_CHN_PRESSURE
, 
chn
, 
¥essuª
, 0, 0)

	)

1189 
	#SEQ_SET_PATCH
 
SEQ_PGM_CHANGE


	)

1190 
	#SEQ_PGM_CHANGE
(
dev
, 
chn
, 
∑tch
) \

1191 
	`_CHN_COMMON
(
dev
, 
MIDI_PGM_CHANGE
, 
chn
, 
∑tch
, 0, 0)

	)

1193 
	#SEQ_CONTROL
(
dev
, 
chn
, 
c⁄åﬁÀr
, 
vÆue
) \

1194 
	`_CHN_COMMON
(
dev
, 
MIDI_CTL_CHANGE
, 
chn
, 
c⁄åﬁÀr
, 0, 
vÆue
)

	)

1196 
	#SEQ_BENDER
(
dev
, 
chn
, 
vÆue
) \

1197 
	`_CHN_COMMON
(
dev
, 
MIDI_PITCH_BEND
, 
chn
, 0, 0, 
vÆue
)

	)

1200 
	#SEQ_V2_X_CONTROL
(
dev
, 
voi˚
, 
c⁄åﬁÀr
, 
vÆue
Ë{
	`_SEQ_NEEDBUF
(8);\

1201 
_£qbuf
[
_£qbuÂå
] = 
SEQ_EXTENDED
;\

1202 
_£qbuf
[
_£qbuÂå
+1] = 
SEQ_CONTROLLER
;\

1203 
_£qbuf
[
_£qbuÂå
+2] = (
dev
);\

1204 
_£qbuf
[
_£qbuÂå
+3] = (
voi˚
);\

1205 
_£qbuf
[
_£qbuÂå
+4] = (
c⁄åﬁÀr
);\

1206 
_£qbuf
[
_£qbuÂå
+5] = ((
vÆue
)&0xff);\

1207 
_£qbuf
[
_£qbuÂå
+6] = ((
vÆue
>>8)&0xff);\

1208 
_£qbuf
[
_£qbuÂå
+7] = 0;\

1209 
	`_SEQ_ADVBUF
(8);}

	)

1214 
	#SEQ_PITCHBEND
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_V2_X_CONTROL
(dev, voi˚, 
CTRL_PITCH_BENDER
, vÆue)

	)

1215 
	#SEQ_BENDER_RANGE
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_V2_X_CONTROL
(dev, voi˚, 
CTRL_PITCH_BENDER_RANGE
, vÆue)

	)

1216 
	#SEQ_EXPRESSION
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_EXPRESSION
, vÆue*128)

	)

1217 
	#SEQ_MAIN_VOLUME
(
dev
, 
voi˚
, 
vÆue
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_MAIN_VOLUME
, (vÆue*16383)/100)

	)

1218 
	#SEQ_PANNING
(
dev
, 
voi˚
, 
pos
Ë
	`SEQ_CONTROL
(dev, voi˚, 
CTL_PAN
, (pos+128Ë/ 2)

	)

1224 
	#_TIMER_EVENT
(
ev
, 
∑rm
Ë{
	`_SEQ_NEEDBUF
(8);\

1225 
_£qbuf
[
_£qbuÂå
+0] = 
EV_TIMING
; \

1226 
_£qbuf
[
_£qbuÂå
+1] = (
ev
); \

1227 
_£qbuf
[
_£qbuÂå
+2] = 0;\

1228 
_£qbuf
[
_£qbuÂå
+3] = 0;\

1229 *(*)&
_£qbuf
[
_£qbuÂå
+4] = (
∑rm
); \

1230 
	`_SEQ_ADVBUF
(8);}

	)

1232 
	#SEQ_START_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_START
, 0)

	)

1233 
	#SEQ_STOP_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_STOP
, 0)

	)

1234 
	#SEQ_CONTINUE_TIMER
(Ë
	`_TIMER_EVENT
(
TMR_CONTINUE
, 0)

	)

1235 
	#SEQ_WAIT_TIME
(
ticks
Ë
	`_TIMER_EVENT
(
TMR_WAIT_ABS
,Åicks)

	)

1236 
	#SEQ_DELTA_TIME
(
ticks
Ë
	`_TIMER_EVENT
(
TMR_WAIT_REL
,Åicks)

	)

1237 
	#SEQ_ECHO_BACK
(
key
Ë
	`_TIMER_EVENT
(
TMR_ECHO
, key)

	)

1238 
	#SEQ_SET_TEMPO
(
vÆue
Ë
	`_TIMER_EVENT
(
TMR_TEMPO
, vÆue)

	)

1239 
	#SEQ_SONGPOS
(
pos
Ë
	`_TIMER_EVENT
(
TMR_SPP
,Öos)

	)

1240 
	#SEQ_TIME_SIGNATURE
(
sig
Ë
	`_TIMER_EVENT
(
TMR_TIMESIG
, sig)

	)

1246 
	#_LOCAL_EVENT
(
ev
, 
∑rm
Ë{
	`_SEQ_NEEDBUF
(8);\

1247 
_£qbuf
[
_£qbuÂå
+0] = 
EV_SEQ_LOCAL
; \

1248 
_£qbuf
[
_£qbuÂå
+1] = (
ev
); \

1249 
_£qbuf
[
_£qbuÂå
+2] = 0;\

1250 
_£qbuf
[
_£qbuÂå
+3] = 0;\

1251 *(*)&
_£qbuf
[
_£qbuÂå
+4] = (
∑rm
); \

1252 
	`_SEQ_ADVBUF
(8);}

	)

1254 
	#SEQ_PLAYAUDIO
(
devmask
Ë
	`_LOCAL_EVENT
(
LOCL_STARTAUDIO
, devmask)

	)

1259 
	#SEQ_MIDIOUT
(
devi˚
, 
byã
Ë{
	`_SEQ_NEEDBUF
(4);\

1260 
_£qbuf
[
_£qbuÂå
] = 
SEQ_MIDIPUTC
;\

1261 
_£qbuf
[
_£qbuÂå
+1] = (
byã
);\

1262 
_£qbuf
[
_£qbuÂå
+2] = (
devi˚
);\

1263 
_£qbuf
[
_£qbuÂå
+3] = 0;\

1264 
	`_SEQ_ADVBUF
(4);}

	)

1269 
	#SEQ_WRPATCH
(
∑tchx
, 
Àn
) \

1270 {i‡(
_£qbuÂå
Ë
	`SEQ_DUMPBUF
();\

1271 i‡(
	`wrôe
(
£qfd
, (*)(
∑tchx
), 
Àn
)==-1) \

1272 
	`≥º‹
("Wrôê∑tch: /dev/£quí˚r");}

	)

1273 
	#SEQ_WRPATCH2
(
∑tchx
, 
Àn
) \

1274 (
	`SEQ_DUMPBUF
(), 
	`wrôe
(
£qfd
, (*)(
∑tchx
), 
Àn
))

	)

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 200711

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

	@/usr/include/locale.h

22 #i‚def 
_LOCALE_H


23 
	#_LOCALE_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_NULL


	)

28 
	~<°ddef.h
>

29 
	~<bôs/loˇÀ.h
>

31 
	g__BEGIN_DECLS


35 
	#LC_CTYPE
 
__LC_CTYPE


	)

36 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

37 
	#LC_TIME
 
__LC_TIME


	)

38 
	#LC_COLLATE
 
__LC_COLLATE


	)

39 
	#LC_MONETARY
 
__LC_MONETARY


	)

40 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

41 
	#LC_ALL
 
__LC_ALL


	)

42 
	#LC_PAPER
 
__LC_PAPER


	)

43 
	#LC_NAME
 
__LC_NAME


	)

44 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

45 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

46 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

47 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

50 
__BEGIN_NAMESPACE_STD


53 
	slc⁄v


57 *
	mdecimÆ_poöt
;

58 *
	mthoußnds_£p
;

64 *
	mgroupög
;

70 *
	möt_cuº_symbﬁ
;

71 *
	mcuºícy_symbﬁ
;

72 *
	mm⁄_decimÆ_poöt
;

73 *
	mm⁄_thoußnds_£p
;

74 *
	mm⁄_groupög
;

75 *
	mposôive_sign
;

76 *
	m√g©ive_sign
;

77 
	möt_‰ac_digôs
;

78 
	m‰ac_digôs
;

80 
	mp_cs_¥e˚des
;

82 
	mp_£p_by_•a˚
;

84 
	mn_cs_¥e˚des
;

86 
	mn_£p_by_•a˚
;

93 
	mp_sign_po¢
;

94 
	mn_sign_po¢
;

95 #ifde‡
__USE_ISOC99


97 
	möt_p_cs_¥e˚des
;

99 
	möt_p_£p_by_•a˚
;

101 
	möt_n_cs_¥e˚des
;

103 
	möt_n_£p_by_•a˚
;

110 
	möt_p_sign_po¢
;

111 
	möt_n_sign_po¢
;

113 
	m__öt_p_cs_¥e˚des
;

114 
	m__öt_p_£p_by_•a˚
;

115 
	m__öt_n_cs_¥e˚des
;

116 
	m__öt_n_£p_by_•a˚
;

117 
	m__öt_p_sign_po¢
;

118 
	m__öt_n_sign_po¢
;

124 *
	$£éoˇÀ
 (
__ˇãg‹y
, c⁄° *
__loˇÀ
Ë
__THROW
;

127 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

129 
__END_NAMESPACE_STD


132 #ifdef 
__USE_XOPEN2K8


145 
	~<xloˇÀ.h
>

151 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, c⁄° *
__loˇÀ
,

152 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

158 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

159 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

160 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

161 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

162 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

163 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

164 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

165 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

166 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

167 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

168 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

169 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

170 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

171 | 
LC_NUMERIC_MASK
 \

172 | 
LC_TIME_MASK
 \

173 | 
LC_COLLATE_MASK
 \

174 | 
LC_MONETARY_MASK
 \

175 | 
LC_MESSAGES_MASK
 \

176 | 
LC_PAPER_MASK
 \

177 | 
LC_NAME_MASK
 \

178 | 
LC_ADDRESS_MASK
 \

179 | 
LC_TELEPHONE_MASK
 \

180 | 
LC_MEASUREMENT_MASK
 \

181 | 
LC_IDENTIFICATION_MASK
 \

182 )

	)

186 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

190 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

197 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

201 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

205 
__END_DECLS


	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

41 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

42 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

49 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

50 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

53 
	$‰ì
 (*
__±r
Ë
__THROW
;

56 
	$c‰ì
 (*
__±r
Ë
__THROW
;

59 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

60 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

63 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

67 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

71 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

74 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

75 
__THROW
 
__©åibuã_mÆloc__
;

79 
	smÆlöfo


81 
¨ía
;

82 
‹dblks
;

83 
smblks
;

84 
hblks
;

85 
hblkhd
;

86 
usmblks
;

87 
fsmblks
;

88 
u‹dblks
;

89 
f‹dblks
;

90 
kìpco°
;

94 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

97 #i‚de‡
M_MXFAST


98 
	#M_MXFAST
 1

	)

100 #i‚de‡
M_NLBLKS


101 
	#M_NLBLKS
 2

	)

103 #i‚de‡
M_GRAIN


104 
	#M_GRAIN
 3

	)

106 #i‚de‡
M_KEEP


107 
	#M_KEEP
 4

	)

111 
	#M_TRIM_THRESHOLD
 -1

	)

112 
	#M_TOP_PAD
 -2

	)

113 
	#M_MMAP_THRESHOLD
 -3

	)

114 
	#M_MMAP_MAX
 -4

	)

115 
	#M_CHECK_ACTION
 -5

	)

116 
	#M_PERTURB
 -6

	)

117 
	#M_ARENA_TEST
 -7

	)

118 
	#M_ARENA_MAX
 -8

	)

121 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

125 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

129 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

132 
	$mÆloc_°©s
 (Ë
__THROW
;

135 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

138 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

142 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

147 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

148 
__MALLOC_DEPRECATED
;

150 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

152 
__MALLOC_DEPRECATED
;

153 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
)(
size_t
 
__size
,

155 
__MALLOC_DEPRECATED
;

156 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
)(*
__±r
,

157 
size_t
 
__size
,

159 
__MALLOC_DEPRECATED
;

160 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
)(
size_t
 
__Æignmít
,

161 
size_t
 
__size
,

163 
__MALLOC_DEPRECATED
;

164 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

167 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

170 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


32 
	~<bôs/huge_vÆ.h
>

33 #ifde‡
__USE_ISOC99


34 
	~<bôs/huge_vÆf.h
>

35 
	~<bôs/huge_vÆl.h
>

38 
	~<bôs/öf.h
>

41 
	~<bôs/«n.h
>

45 
	~<bôs/m©hdef.h
>

52 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

53 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

54 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

56 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

57 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

58 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

59 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

61 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

62 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

63 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

65 
	#_MdoubÀ_
 

	)

66 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

67 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

68 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

69 
	~<bôs/m©hˇŒs.h
>

70 #unde‡
_MdoubÀ_


71 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


72 #unde‡
_MdoubÀ_END_NAMESPACE


73 #unde‡
__MATH_PRECNAME


75 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


81 #i‚de‡
_MÊﬂt_


82 
	#_MÊﬂt_
 

	)

84 
	#_MdoubÀ_
 
_MÊﬂt_


	)

85 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

86 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

87 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

88 
	~<bôs/m©hˇŒs.h
>

89 #unde‡
_MdoubÀ_


90 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


91 #unde‡
_MdoubÀ_END_NAMESPACE


92 #unde‡
__MATH_PRECNAME


94 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

95 || 
deföed
 
__LDBL_COMPAT


96 #ifde‡
__LDBL_COMPAT


98 #ifde‡
__USE_ISOC99


99 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

100 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

101 #ifde‡
__REDIRECT_NTH


102 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

103 
__∆dbl_√xâow¨df
)

104 
	`__©åibuã__
 ((
__c⁄°__
));

105 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

106 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

107 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

108 (
__x
, 
__y
),

109 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

113 #unde‡
__MATHDECL_1


114 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

115 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

116 
¨gs
, 
Æüs
)

	)

117 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

118 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

124 #i‚de‡
_Ml⁄g_doubÀ_


125 
	#_Ml⁄g_doubÀ_
 

	)

127 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

128 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

129 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

130 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

131 
	#__MATH_DECLARE_LDOUBLE
 1

	)

132 
	~<bôs/m©hˇŒs.h
>

133 #unde‡
_MdoubÀ_


134 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


135 #unde‡
_MdoubÀ_END_NAMESPACE


136 #unde‡
__MATH_PRECNAME


141 #unde‡
__MATHDECL_1


142 #unde‡
__MATHDECL


143 #unde‡
__MATHCALL


146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


148 
signgam
;

153 #ifde‡
__USE_ISOC99


191 
FP_NAN
 =

192 
	#FP_NAN
 0

	)

193 
FP_NAN
,

194 
FP_INFINITE
 =

195 
	#FP_INFINITE
 1

	)

196 
FP_INFINITE
,

197 
FP_ZERO
 =

198 
	#FP_ZERO
 2

	)

199 
FP_ZERO
,

200 
FP_SUBNORMAL
 =

201 
	#FP_SUBNORMAL
 3

	)

202 
FP_SUBNORMAL
,

203 
FP_NORMAL
 =

204 
	#FP_NORMAL
 4

	)

205 
FP_NORMAL


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
	#Â˛assify
(
x
) \

211 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

213 
	#Â˛assify
(
x
) \

214 ( (
x
) ==  () \

215 ? 
	`__Â˛assifyf
 (
x
) \

216 :  (
x
) ==  () \

217 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

221 #ifde‡
__NO_LONG_DOUBLE_MATH


222 
	#signbô
(
x
) \

223 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

225 
	#signbô
(
x
) \

226 ( (
x
) ==  () \

227 ? 
	`__signbôf
 (
x
) \

228 :  (
x
) ==  () \

229 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

233 #ifde‡
__NO_LONG_DOUBLE_MATH


234 
	#isföôe
(
x
) \

235 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

237 
	#isföôe
(
x
) \

238 ( (
x
) ==  () \

239 ? 
	`__föôef
 (
x
) \

240 :  (
x
) ==  () \

241 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

245 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

249 #ifde‡
__NO_LONG_DOUBLE_MATH


250 
	#i¢™
(
x
) \

251 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

253 
	#i¢™
(
x
) \

254 ( (
x
) ==  () \

255 ? 
	`__i¢™f
 (
x
) \

256 :  (
x
) ==  () \

257 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

261 #ifde‡
__NO_LONG_DOUBLE_MATH


262 
	#isöf
(
x
) \

263 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

265 
	#isöf
(
x
) \

266 ( (
x
) ==  () \

267 ? 
	`__isöff
 (
x
) \

268 :  (
x
) ==  () \

269 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

273 
	#MATH_ERRNO
 1

	)

274 
	#MATH_ERREXCEPT
 2

	)

279 #i‚de‡
__FAST_MATH__


280 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

285 #ifde‡
__USE_GNU


287 #ifde‡
__NO_LONG_DOUBLE_MATH


288 
	#issig«lög
(
x
) \

289 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

291 
	#issig«lög
(
x
) \

292 ( (
x
) ==  () \

293 ? 
	`__issig«lögf
 (
x
) \

294 :  (
x
) ==  () \

295 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

299 #ifdef 
__USE_MISC


303 
_IEEE_
 = -1,

304 
_SVID_
,

305 
_XOPEN_
,

306 
_POSIX_
,

307 
_ISOC_


308 } 
	t_LIB_VERSION_TYPE
;

313 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

317 #ifde‡
__USE_SVID


323 #ifde‡
__˝lu•lus


324 
__ex˚±i⁄


326 
ex˚±i⁄


329 
ty≥
;

330 *
«me
;

331 
¨g1
;

332 
¨g2
;

333 
ªtvÆ
;

334 
	}
};

336 #ifde‡
__˝lu•lus


337 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

339 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

342 
	#X_TLOSS
 1.41484755040568800000e+16

	)

345 
	#DOMAIN
 1

	)

346 
	#SING
 2

	)

347 
	#OVERFLOW
 3

	)

348 
	#UNDERFLOW
 4

	)

349 
	#TLOSS
 5

	)

350 
	#PLOSS
 6

	)

353 
	#HUGE
 3.40282347e+38F

	)

357 #ifde‡
__USE_XOPEN


359 
	#MAXFLOAT
 3.40282347e+38F

	)

366 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


367 
	#M_E
 2.7182818284590452354

	)

368 
	#M_LOG2E
 1.4426950408889634074

	)

369 
	#M_LOG10E
 0.43429448190325182765

	)

370 
	#M_LN2
 0.69314718055994530942

	)

371 
	#M_LN10
 2.30258509299404568402

	)

372 
	#M_PI
 3.14159265358979323846

	)

373 
	#M_PI_2
 1.57079632679489661923

	)

374 
	#M_PI_4
 0.78539816339744830962

	)

375 
	#M_1_PI
 0.31830988618379067154

	)

376 
	#M_2_PI
 0.63661977236758134308

	)

377 
	#M_2_SQRTPI
 1.12837916709551257390

	)

378 
	#M_SQRT2
 1.41421356237309504880

	)

379 
	#M_SQRT1_2
 0.70710678118654752440

	)

385 #ifde‡
__USE_GNU


386 
	#M_El
 2.718281828459045235360287471352662498L

	)

387 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

388 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

389 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

390 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

391 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

392 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

393 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

394 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

395 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

396 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

397 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

398 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

405 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


406 
	#__NO_MATH_INLINES
 1

	)

409 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

416 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

417 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

418 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

419 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

420 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

421 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

425 #ifde‡
__USE_EXTERN_INLINES


426 
	~<bôs/m©hölöe.h
>

431 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

432 
	~<bôs/m©h-föôe.h
>

435 #ifde‡
__USE_ISOC99


439 #i‚de‡
isgª©î


440 
	#isgª©î
(
x
, 
y
) \

441 (
__exãnsi⁄__
 \

442 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

443 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

447 #i‚de‡
isgª©îequÆ


448 
	#isgª©îequÆ
(
x
, 
y
) \

449 (
__exãnsi⁄__
 \

450 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

451 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

455 #i‚de‡
i¶ess


456 
	#i¶ess
(
x
, 
y
) \

457 (
__exãnsi⁄__
 \

458 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

459 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

463 #i‚de‡
i¶es£quÆ


464 
	#i¶es£quÆ
(
x
, 
y
) \

465 (
__exãnsi⁄__
 \

466 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

467 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

471 #i‚de‡
i¶essgª©î


472 
	#i¶essgª©î
(
x
, 
y
) \

473 (
__exãnsi⁄__
 \

474 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

475 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

479 #i‚de‡
isun‹dîed


480 
	#isun‹dîed
(
u
, 
v
) \

481 (
__exãnsi⁄__
 \

482 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

483 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

488 
	g__END_DECLS


	@/usr/include/menu.h

35 #i‚de‡
ETI_MENU


36 
	#ETI_MENU


	)

38 #ifde‡
AMIGA


39 
	#TEXT
 
TEXT_ncur£s


	)

42 
	~<cur£s.h
>

43 
	~<ëi.h
>

45 #ifde‡
__˝lu•lus


49 
	tMíu_O±i⁄s
;

50 
	tIãm_O±i⁄s
;

53 
	#O_ONEVALUE
 (0x01)

	)

54 
	#O_SHOWDESC
 (0x02)

	)

55 
	#O_ROWMAJOR
 (0x04)

	)

56 
	#O_IGNORECASE
 (0x08)

	)

57 
	#O_SHOWMATCH
 (0x10)

	)

58 
	#O_NONCYCLIC
 (0x20)

	)

61 
	#O_SELECTABLE
 (0x01)

	)

65 c⁄° * 
°r
;

66 
Àngth
;

67 } 
	tTEXT
;

69 
	sègITEM


71 
TEXT
 
«me
;

72 
TEXT
 
des¸ùti⁄
;

73 
ègMENU
 *
imíu
;

74 *
u£Ωå
;

75 
Iãm_O±i⁄s
 
›t
;

76 
ödex
;

77 
y
;

78 
x
;

79 
boﬁ
 
vÆue
;

81 
ègITEM
 *
À·
;

82 
ègITEM
 *
right
;

83 
ègITEM
 *
up
;

84 
ègITEM
 *
down
;

86 } 
	tITEM
;

88 (*
Míu_Hook
)(
	tègMENU
 *);

90 
	sègMENU


92 
height
;

93 
width
;

94 
rows
;

95 
cﬁs
;

96 
‰ows
;

97 
fcﬁs
;

98 
¨ows
;

99 
«mñí
;

100 
des˛í
;

101 
m¨kÀn
;

102 
ôemÀn
;

103 
•c_desc
;

104 
•c_cﬁs
;

105 
•c_rows
;

106 *
∑âîn
;

107 
pödex
;

108 
WINDOW
 *
wö
;

109 
WINDOW
 *
sub
;

110 
WINDOW
 *
u£rwö
;

111 
WINDOW
 *
u£rsub
;

112 
ITEM
 **
ôems
;

113 
nôems
;

114 
ITEM
 *
curôem
;

115 
t›row
;

116 
chty≥
 
f‹e
;

117 
chty≥
 
back
;

118 
chty≥
 
gªy
;

119 
∑d
;

121 
Míu_Hook
 
míuöô
;

122 
Míu_Hook
 
míuãrm
;

123 
Míu_Hook
 
ôemöô
;

124 
Míu_Hook
 
ôemãrm
;

126 *
u£Ωå
;

127 *
m¨k
;

129 
Míu_O±i⁄s
 
›t
;

130 
°©us
;

132 } 
	tMENU
;

137 
	#REQ_LEFT_ITEM
 (
KEY_MAX
 + 1)

	)

138 
	#REQ_RIGHT_ITEM
 (
KEY_MAX
 + 2)

	)

139 
	#REQ_UP_ITEM
 (
KEY_MAX
 + 3)

	)

140 
	#REQ_DOWN_ITEM
 (
KEY_MAX
 + 4)

	)

141 
	#REQ_SCR_ULINE
 (
KEY_MAX
 + 5)

	)

142 
	#REQ_SCR_DLINE
 (
KEY_MAX
 + 6)

	)

143 
	#REQ_SCR_DPAGE
 (
KEY_MAX
 + 7)

	)

144 
	#REQ_SCR_UPAGE
 (
KEY_MAX
 + 8)

	)

145 
	#REQ_FIRST_ITEM
 (
KEY_MAX
 + 9)

	)

146 
	#REQ_LAST_ITEM
 (
KEY_MAX
 + 10)

	)

147 
	#REQ_NEXT_ITEM
 (
KEY_MAX
 + 11)

	)

148 
	#REQ_PREV_ITEM
 (
KEY_MAX
 + 12)

	)

149 
	#REQ_TOGGLE_ITEM
 (
KEY_MAX
 + 13)

	)

150 
	#REQ_CLEAR_PATTERN
 (
KEY_MAX
 + 14)

	)

151 
	#REQ_BACK_PATTERN
 (
KEY_MAX
 + 15)

	)

152 
	#REQ_NEXT_MATCH
 (
KEY_MAX
 + 16)

	)

153 
	#REQ_PREV_MATCH
 (
KEY_MAX
 + 17)

	)

155 
	#MIN_MENU_COMMAND
 (
KEY_MAX
 + 1)

	)

156 
	#MAX_MENU_COMMAND
 (
KEY_MAX
 + 17)

	)

162 #i‡
deföed
(
MAX_COMMAND
)

163 #i‡(
MAX_MENU_COMMAND
 > 
MAX_COMMAND
)

164 #îr‹ 
Somëhög
 
is
 
wr⁄g
 -- 
MAX_MENU_COMMAND
 i†
gª©î
 
th™
 
MAX_COMMAND


165 #ñi‡(
MAX_COMMAND
 !(
KEY_MAX
 + 128))

166 #îr‹ 
Somëhög
 
is
 
wr⁄g
 -- 
MAX_COMMAND
 i†
Æªady
 
öc⁄si°íéy
 
deföed
.

169 
	#MAX_COMMAND
 (
KEY_MAX
 + 128)

	)

175 
NCURSES_EXPORT
(
ITEM
 **Ë
míu_ôems
 (c⁄° 
MENU
 *);

176 
NCURSES_EXPORT
(
ITEM
 *Ë
cuºít_ôem
 (c⁄° 
MENU
 *);

177 
NCURSES_EXPORT
(
ITEM
 *Ë
√w_ôem
 (const *,const *);

179 
NCURSES_EXPORT
(
MENU
 *Ë
√w_míu
 (
ITEM
 **);

181 
NCURSES_EXPORT
(
Iãm_O±i⁄s
Ë
ôem_›ts
 (c⁄° 
ITEM
 *);

182 
NCURSES_EXPORT
(
Míu_O±i⁄s
Ë
míu_›ts
 (c⁄° 
MENU
 *);

184 
NCURSES_EXPORT
(
Míu_Hook
Ë
ôem_öô
 (c⁄° 
MENU
 *);

185 
NCURSES_EXPORT
(
Míu_Hook
Ë
ôem_ãrm
 (c⁄° 
MENU
 *);

186 
NCURSES_EXPORT
(
Míu_Hook
Ë
míu_öô
 (c⁄° 
MENU
 *);

187 
NCURSES_EXPORT
(
Míu_Hook
Ë
míu_ãrm
 (c⁄° 
MENU
 *);

189 
NCURSES_EXPORT
(
WINDOW
 *Ë
míu_sub
 (c⁄° 
MENU
 *);

190 
NCURSES_EXPORT
(
WINDOW
 *Ë
míu_wö
 (c⁄° 
MENU
 *);

192 
NCURSES_EXPORT
(c⁄° *Ë
ôem_des¸ùti⁄
 (c⁄° 
ITEM
 *);

193 
NCURSES_EXPORT
(c⁄° *Ë
ôem_«me
 (c⁄° 
ITEM
 *);

194 
NCURSES_EXPORT
(c⁄° *Ë
míu_m¨k
 (c⁄° 
MENU
 *);

195 
NCURSES_EXPORT
(c⁄° *Ë
míu_ªque°_«me
 ();

197 
NCURSES_EXPORT
(*Ë
míu_∑âîn
 (c⁄° 
MENU
 *);

199 
NCURSES_EXPORT
(*Ë
míu_u£Ωå
 (c⁄° 
MENU
 *);

200 
NCURSES_EXPORT
(*Ë
ôem_u£Ωå
 (c⁄° 
ITEM
 *);

202 
NCURSES_EXPORT
(
chty≥
Ë
míu_back
 (c⁄° 
MENU
 *);

203 
NCURSES_EXPORT
(
chty≥
Ë
míu_f‹e
 (c⁄° 
MENU
 *);

204 
NCURSES_EXPORT
(
chty≥
Ë
míu_gªy
 (c⁄° 
MENU
 *);

206 
NCURSES_EXPORT
(Ë
‰ì_ôem
 (
ITEM
 *);

207 
NCURSES_EXPORT
(Ë
‰ì_míu
 (
MENU
 *);

208 
NCURSES_EXPORT
(Ë
ôem_cou¡
 (c⁄° 
MENU
 *);

209 
NCURSES_EXPORT
(Ë
ôem_ödex
 (c⁄° 
ITEM
 *);

210 
NCURSES_EXPORT
(Ë
ôem_›ts_off
 (
ITEM
 *,
Iãm_O±i⁄s
);

211 
NCURSES_EXPORT
(Ë
ôem_›ts_⁄
 (
ITEM
 *,
Iãm_O±i⁄s
);

212 
NCURSES_EXPORT
(Ë
míu_drivî
 (
MENU
 *,);

213 
NCURSES_EXPORT
(Ë
míu_›ts_off
 (
MENU
 *,
Míu_O±i⁄s
);

214 
NCURSES_EXPORT
(Ë
míu_›ts_⁄
 (
MENU
 *,
Míu_O±i⁄s
);

215 
NCURSES_EXPORT
(Ë
míu_∑d
 (c⁄° 
MENU
 *);

216 
NCURSES_EXPORT
(Ë
pos_míu_curs‹
 (c⁄° 
MENU
 *);

217 
NCURSES_EXPORT
(Ë
po°_míu
 (
MENU
 *);

218 
NCURSES_EXPORT
(Ë
sˇÀ_míu
 (c⁄° 
MENU
 *,*,*);

219 
NCURSES_EXPORT
(Ë
£t_cuºít_ôem
 (
MENU
 *
míu
,
ITEM
 *
ôem
);

220 
NCURSES_EXPORT
(Ë
£t_ôem_öô
 (
MENU
 *, 
Míu_Hook
);

221 
NCURSES_EXPORT
(Ë
£t_ôem_›ts
 (
ITEM
 *,
Iãm_O±i⁄s
);

222 
NCURSES_EXPORT
(Ë
£t_ôem_ãrm
 (
MENU
 *, 
Míu_Hook
);

223 
NCURSES_EXPORT
(Ë
£t_ôem_u£Ωå
 (
ITEM
 *, *);

224 
NCURSES_EXPORT
(Ë
£t_ôem_vÆue
 (
ITEM
 *,
boﬁ
);

225 
NCURSES_EXPORT
(Ë
£t_míu_back
 (
MENU
 *,
chty≥
);

226 
NCURSES_EXPORT
(Ë
£t_míu_f‹e
 (
MENU
 *,
chty≥
);

227 
NCURSES_EXPORT
(Ë
£t_míu_f‹m©
 (
MENU
 *,,);

228 
NCURSES_EXPORT
(Ë
£t_míu_gªy
 (
MENU
 *,
chty≥
);

229 
NCURSES_EXPORT
(Ë
£t_míu_öô
 (
MENU
 *, 
Míu_Hook
);

230 
NCURSES_EXPORT
(Ë
£t_míu_ôems
 (
MENU
 *,
ITEM
 **);

231 
NCURSES_EXPORT
(Ë
£t_míu_m¨k
 (
MENU
 *, const *);

232 
NCURSES_EXPORT
(Ë
£t_míu_›ts
 (
MENU
 *,
Míu_O±i⁄s
);

233 
NCURSES_EXPORT
(Ë
£t_míu_∑d
 (
MENU
 *,);

234 
NCURSES_EXPORT
(Ë
£t_míu_∑âîn
 (
MENU
 *,const *);

235 
NCURSES_EXPORT
(Ë
£t_míu_sub
 (
MENU
 *,
WINDOW
 *);

236 
NCURSES_EXPORT
(Ë
£t_míu_ãrm
 (
MENU
 *, 
Míu_Hook
);

237 
NCURSES_EXPORT
(Ë
£t_míu_u£Ωå
 (
MENU
 *,*);

238 
NCURSES_EXPORT
(Ë
£t_míu_wö
 (
MENU
 *,
WINDOW
 *);

239 
NCURSES_EXPORT
(Ë
£t_t›_row
 (
MENU
 *,);

240 
NCURSES_EXPORT
(Ë
t›_row
 (c⁄° 
MENU
 *);

241 
NCURSES_EXPORT
(Ë
u≈o°_míu
 (
MENU
 *);

242 
NCURSES_EXPORT
(Ë
míu_ªque°_by_«me
 (const *);

243 
NCURSES_EXPORT
(Ë
£t_míu_•acög
 (
MENU
 *,,,);

244 
NCURSES_EXPORT
(Ë
míu_•acög
 (c⁄° 
MENU
 *,*,*,*);

247 
NCURSES_EXPORT
(
boﬁ
Ë
ôem_vÆue
 (c⁄° 
ITEM
 *);

248 
NCURSES_EXPORT
(
boﬁ
Ë
ôem_visibÀ
 (c⁄° 
ITEM
 *);

250 
NCURSES_EXPORT
(Ë
míu_f‹m©
 (c⁄° 
MENU
 *,*,*);

252 #i‡
NCURSES_SP_FUNCS


253 
NCURSES_EXPORT
(
MENU
 *Ë
NCURSES_SP_NAME
(
√w_míu
Ë(
SCREEN
*, 
ITEM
 **);

256 #ifde‡
__˝lu•lus


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_RAW
 = 255,

89 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

90 
	mIPPROTO_MAX


96 #i‚de‡
__USE_KERNEL_IPV6_DEFS


99 
	mIPPROTO_HOPOPTS
 = 0,

100 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

101 
	mIPPROTO_ROUTING
 = 43,

102 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

103 
	mIPPROTO_FRAGMENT
 = 44,

104 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

105 
	mIPPROTO_ICMPV6
 = 58,

106 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

107 
	mIPPROTO_NONE
 = 59,

108 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

109 
	mIPPROTO_DSTOPTS
 = 60,

110 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

111 
	mIPPROTO_MH
 = 135

112 
	#IPPROTO_MH
 
IPPROTO_MH


	)

117 
uöt16_t
 
	tö_p‹t_t
;

122 
	mIPPORT_ECHO
 = 7,

123 
	mIPPORT_DISCARD
 = 9,

124 
	mIPPORT_SYSTAT
 = 11,

125 
	mIPPORT_DAYTIME
 = 13,

126 
	mIPPORT_NETSTAT
 = 15,

127 
	mIPPORT_FTP
 = 21,

128 
	mIPPORT_TELNET
 = 23,

129 
	mIPPORT_SMTP
 = 25,

130 
	mIPPORT_TIMESERVER
 = 37,

131 
	mIPPORT_NAMESERVER
 = 42,

132 
	mIPPORT_WHOIS
 = 43,

133 
	mIPPORT_MTP
 = 57,

135 
	mIPPORT_TFTP
 = 69,

136 
	mIPPORT_RJE
 = 77,

137 
	mIPPORT_FINGER
 = 79,

138 
	mIPPORT_TTYLINK
 = 87,

139 
	mIPPORT_SUPDUP
 = 95,

142 
	mIPPORT_EXECSERVER
 = 512,

143 
	mIPPORT_LOGINSERVER
 = 513,

144 
	mIPPORT_CMDSERVER
 = 514,

145 
	mIPPORT_EFSSERVER
 = 520,

148 
	mIPPORT_BIFFUDP
 = 512,

149 
	mIPPORT_WHOSERVER
 = 513,

150 
	mIPPORT_ROUTESERVER
 = 520,

153 
	mIPPORT_RESERVED
 = 1024,

156 
	mIPPORT_USERRESERVED
 = 5000

164 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

165 
	#IN_CLASSA_NET
 0xff000000

	)

166 
	#IN_CLASSA_NSHIFT
 24

	)

167 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

168 
	#IN_CLASSA_MAX
 128

	)

170 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

171 
	#IN_CLASSB_NET
 0xffff0000

	)

172 
	#IN_CLASSB_NSHIFT
 16

	)

173 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

174 
	#IN_CLASSB_MAX
 65536

	)

176 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

177 
	#IN_CLASSC_NET
 0xffffff00

	)

178 
	#IN_CLASSC_NSHIFT
 8

	)

179 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

181 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

182 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

184 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

185 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

188 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

190 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

192 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

195 
	#IN_LOOPBACKNET
 127

	)

197 #i‚de‡
INADDR_LOOPBACK


198 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

202 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

203 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

204 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

205 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

207 #i‚de‡
__USE_KERNEL_IPV6_DEFS


209 
	sö6_addr


213 
uöt8_t
 
	m__u6_addr8
[16];

214 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


215 
uöt16_t
 
	m__u6_addr16
[8];

216 
uöt32_t
 
	m__u6_addr32
[4];

218 } 
	m__ö6_u
;

219 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

220 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


221 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

222 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

227 c⁄° 
ö6_addr
 
ö6addr_™y
;

228 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

229 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

230 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

232 
	#INET_ADDRSTRLEN
 16

	)

233 
	#INET6_ADDRSTRLEN
 46

	)

237 
	ssockaddr_ö


239 
__SOCKADDR_COMMON
 (
sö_
);

240 
ö_p‹t_t
 
	msö_p‹t
;

241 
ö_addr
 
	msö_addr
;

244 
	msö_zîo
[ (
sockaddr
) -

245 
__SOCKADDR_COMMON_SIZE
 -

246  (
ö_p‹t_t
) -

247  (
ö_addr
)];

250 #i‚de‡
__USE_KERNEL_IPV6_DEFS


252 
	ssockaddr_ö6


254 
__SOCKADDR_COMMON
 (
sö6_
);

255 
ö_p‹t_t
 
	msö6_p‹t
;

256 
uöt32_t
 
	msö6_Êowöfo
;

257 
ö6_addr
 
	msö6_addr
;

258 
uöt32_t
 
	msö6_sc›e_id
;

262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


264 
	sù_mªq


267 
ö_addr
 
	mimr_mu…üddr
;

270 
ö_addr
 
	mimr_öãrÁ˚
;

273 
	sù_mªq_sour˚


276 
ö_addr
 
	mimr_mu…üddr
;

279 
ö_addr
 
	mimr_öãrÁ˚
;

282 
ö_addr
 
	mimr_sour˚addr
;

286 #i‚de‡
__USE_KERNEL_IPV6_DEFS


288 
	sùv6_mªq


291 
ö6_addr
 
	mùv6mr_mu…üddr
;

294 
	mùv6mr_öãrÁ˚
;

298 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


300 
	sgroup_ªq


303 
uöt32_t
 
	mgr_öãrÁ˚
;

306 
sockaddr_°‹age
 
	mgr_group
;

309 
	sgroup_sour˚_ªq


312 
uöt32_t
 
	mg§_öãrÁ˚
;

315 
sockaddr_°‹age
 
	mg§_group
;

318 
sockaddr_°‹age
 
	mg§_sour˚
;

323 
	sù_msfûãr


326 
ö_addr
 
	mimsf_mu…üddr
;

329 
ö_addr
 
	mimsf_öãrÁ˚
;

332 
uöt32_t
 
	mimsf_fmode
;

335 
uöt32_t
 
	mimsf_num§c
;

337 
ö_addr
 
	mimsf_¶i°
[1];

340 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

341 -  (
ö_addr
) \

342 + (
num§c
Ë*  (
ö_addr
))

	)

344 
	sgroup_fûãr


347 
uöt32_t
 
	mgf_öãrÁ˚
;

350 
sockaddr_°‹age
 
	mgf_group
;

353 
uöt32_t
 
	mgf_fmode
;

356 
uöt32_t
 
	mgf_num§c
;

358 
sockaddr_°‹age
 
	mgf_¶i°
[1];

361 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

362 -  (
sockaddr_°‹age
) \

363 + ((
num§c
) \

364 *  (
sockaddr_°‹age
)))

	)

374 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

375 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

376 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

382 
	~<ídün.h
>

385 
	~<bôs/byãsw≠.h
>

387 #ifde‡
__OPTIMIZE__


391 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


394 
	#¡ohl
(
x
Ë(x)

	)

395 
	#¡ohs
(
x
Ë(x)

	)

396 
	#ht⁄l
(
x
Ë(x)

	)

397 
	#ht⁄s
(
x
Ë(x)

	)

399 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


400 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

401 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

402 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

408 #ifde‡
__GNUC__


409 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

410 (
__exãnsi⁄__
 \

411 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

412 
__a
->
s6_addr32
[0] == 0 \

413 && 
__a
->
s6_addr32
[1] == 0 \

414 && 
__a
->
s6_addr32
[2] == 0 \

415 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

417 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

418 (
__exãnsi⁄__
 \

419 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

420 
__a
->
s6_addr32
[0] == 0 \

421 && 
__a
->
s6_addr32
[1] == 0 \

422 && 
__a
->
s6_addr32
[2] == 0 \

423 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

425 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

426 (
__exãnsi⁄__
 \

427 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

428 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

430 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

431 (
__exãnsi⁄__
 \

432 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

433 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

435 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

436 (
__exãnsi⁄__
 \

437 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

438 
__a
->
s6_addr32
[0] == 0 \

439 && 
__a
->
s6_addr32
[1] == 0 \

440 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

442 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

443 (
__exãnsi⁄__
 \

444 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

445 
__a
->
s6_addr32
[0] == 0 \

446 && 
__a
->
s6_addr32
[1] == 0 \

447 && 
__a
->
s6_addr32
[2] == 0 \

448 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

450 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

451 (
__exãnsi⁄__
 \

452 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

453 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

454 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

455 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

456 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

457 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

459 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

460 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

461 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

462 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

465 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

466 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

467 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

468 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

471 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

472 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

473 =
	`ht⁄l
 (0x„800000))

	)

475 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

476 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

477 =
	`ht⁄l
 (0x„c00000))

	)

479 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

480 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

481 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

482 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

484 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

485 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

486 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

487 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

488 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

490 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

491 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

492 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

493 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

497 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

499 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


501 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

504 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

505 
__THROW
;

509 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

510 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

511 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

513 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

514 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

515 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

517 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

518 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

519 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

521 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

522 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

523 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

525 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

526 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

527 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

530 #ifde‡
__USE_GNU


531 
cmsghdr
;

534 
	sö6_pktöfo


536 
ö6_addr
 
ùi6_addr
;

537 
ùi6_ifödex
;

541 
	sù6_mtuöfo


543 
sockaddr_ö6
 
ù6m_addr
;

544 
uöt32_t
 
ù6m_mtu
;

549 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

550 
__THROW
 
__©åibuã_dïªˇãd__
;

551 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

552 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

553 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

554 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

555 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

557 
__mu…x
, 
__∂usy
)

558 
__THROW
 
__©åibuã_dïªˇãd__
;

559 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

560 
uöt8_t
 **
__çåp
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
, 
__ty≥
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

568 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

569 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

570 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

571 **
__d©abuÂ
Ë
__THROW
;

572 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

573 
__THROW
;

574 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

575 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

576 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

577 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

578 **
__d©abuÂ
Ë
__THROW
;

579 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

583 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

587 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

588 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

589 
__£gmíts
Ë
__THROW
;

590 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

591 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

592 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

593 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

594 
__THROW
;

600 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

601 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

602 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

603 
__THROW
;

606 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

607 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

608 
uöt32_t
 
__num§c
,

609 c⁄° 
ö_addr
 *
__¶i°
)

610 
__THROW
;

614 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

615 c⁄° 
sockaddr
 *
__group
,

616 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

617 
uöt32_t
 *
__num§c
,

618 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

621 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

622 c⁄° 
sockaddr
 *
__group
,

623 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

624 
uöt32_t
 
__num§c
,

625 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

628 
__END_DECLS


	@/usr/include/png.h

482 #i‚de‡
PNG_H


483 
	#PNG_H


	)

492 
	#PNG_LIBPNG_VER_STRING
 "1.2.50"

	)

493 
	#PNG_HEADER_VERSION_STRING
 \

494 "Üib≤g vîsi⁄ 1.2.50 - July 10, 2012\n"

	)

496 
	#PNG_LIBPNG_VER_SONUM
 0

	)

497 
	#PNG_LIBPNG_VER_DLLNUM
 13

	)

500 
	#PNG_LIBPNG_VER_MAJOR
 1

	)

501 
	#PNG_LIBPNG_VER_MINOR
 2

	)

502 
	#PNG_LIBPNG_VER_RELEASE
 50

	)

507 
	#PNG_LIBPNG_VER_BUILD
 0

	)

510 
	#PNG_LIBPNG_BUILD_ALPHA
 1

	)

511 
	#PNG_LIBPNG_BUILD_BETA
 2

	)

512 
	#PNG_LIBPNG_BUILD_RC
 3

	)

513 
	#PNG_LIBPNG_BUILD_STABLE
 4

	)

514 
	#PNG_LIBPNG_BUILD_RELEASE_STATUS_MASK
 7

	)

517 
	#PNG_LIBPNG_BUILD_PATCH
 8

	)

519 
	#PNG_LIBPNG_BUILD_PRIVATE
 16

	)

521 
	#PNG_LIBPNG_BUILD_SPECIAL
 32

	)

524 
	#PNG_LIBPNG_BUILD_BASE_TYPE
 
PNG_LIBPNG_BUILD_STABLE


	)

532 
	#PNG_LIBPNG_VER
 10250

	)

534 #i‚de‡
PNG_VERSION_INFO_ONLY


536 
	~"zlib.h
"

540 
	~"≤gc⁄f.h
"

555 #ifde‡
PNG_USER_PRIVATEBUILD


556 
	#PNG_LIBPNG_BUILD_TYPE
 \

557 (
PNG_LIBPNG_BUILD_BASE_TYPE
 | 
PNG_LIBPNG_BUILD_PRIVATE
)

	)

559 #ifde‡
PNG_LIBPNG_SPECIALBUILD


560 
	#PNG_LIBPNG_BUILD_TYPE
 \

561 (
PNG_LIBPNG_BUILD_BASE_TYPE
 | 
PNG_LIBPNG_BUILD_SPECIAL
)

	)

563 
	#PNG_LIBPNG_BUILD_TYPE
 (
PNG_LIBPNG_BUILD_BASE_TYPE
)

	)

567 #i‚de‡
PNG_VERSION_INFO_ONLY


570 #ifde‡
__˝lu•lus


580 #i‚de‡
PNG_NO_TYPECAST_NULL


581 
	#öt_p_NULL
 (*)
NULL


	)

582 
	#≤g_byãp_NULL
 (
≤g_byãp
)
NULL


	)

583 
	#≤g_byãµ_NULL
 (
≤g_byãµ
)
NULL


	)

584 
	#≤g_doubÀp_NULL
 (
≤g_doubÀp
)
NULL


	)

585 
	#≤g_îr‹_±r_NULL
 (
≤g_îr‹_±r
)
NULL


	)

586 
	#≤g_Êush_±r_NULL
 (
≤g_Êush_±r
)
NULL


	)

587 
	#≤g_‰ì_±r_NULL
 (
≤g_‰ì_±r
)
NULL


	)

588 
	#≤g_öf›p_NULL
 (
≤g_öf›p
)
NULL


	)

589 
	#≤g_mÆloc_±r_NULL
 (
≤g_mÆloc_±r
)
NULL


	)

590 
	#≤g_ªad_°©us_±r_NULL
 (
≤g_ªad_°©us_±r
)
NULL


	)

591 
	#≤g_rw_±r_NULL
 (
≤g_rw_±r
)
NULL


	)

592 
	#≤g_°ru˘p_NULL
 (
≤g_°ru˘p
)
NULL


	)

593 
	#≤g_uöt_16p_NULL
 (
≤g_uöt_16p
)
NULL


	)

594 
	#≤g_voidp_NULL
 (
≤g_voidp
)
NULL


	)

595 
	#≤g_wrôe_°©us_±r_NULL
 (
≤g_wrôe_°©us_±r
)
NULL


	)

597 
	#öt_p_NULL
 
NULL


	)

598 
	#≤g_byãp_NULL
 
NULL


	)

599 
	#≤g_byãµ_NULL
 
NULL


	)

600 
	#≤g_doubÀp_NULL
 
NULL


	)

601 
	#≤g_îr‹_±r_NULL
 
NULL


	)

602 
	#≤g_Êush_±r_NULL
 
NULL


	)

603 
	#≤g_‰ì_±r_NULL
 
NULL


	)

604 
	#≤g_öf›p_NULL
 
NULL


	)

605 
	#≤g_mÆloc_±r_NULL
 
NULL


	)

606 
	#≤g_ªad_°©us_±r_NULL
 
NULL


	)

607 
	#≤g_rw_±r_NULL
 
NULL


	)

608 
	#≤g_°ru˘p_NULL
 
NULL


	)

609 
	#≤g_uöt_16p_NULL
 
NULL


	)

610 
	#≤g_voidp_NULL
 
NULL


	)

611 
	#≤g_wrôe_°©us_±r_NULL
 
NULL


	)

615 #i‡!
deföed
(
PNG_NO_EXTERN
Ë|| deföed(
PNG_ALWAYS_EXTERN
)

619 #ifde‡
PNG_USE_GLOBAL_ARRAYS


620 
PNG_EXPORT_VAR
 (
PNG_CONST
 Ë
≤g_lib≤g_vî
[18];

623 
	#≤g_lib≤g_vî
 
	`≤g_gë_hódî_vî
(
NULL
)

	)

626 #ifde‡
PNG_USE_GLOBAL_ARRAYS


629 
PNG_EXPORT_VAR
 (
PNG_CONST
 
FARDATA
Ë
≤g_∑ss_°¨t
[7];

630 
PNG_EXPORT_VAR
 (
PNG_CONST
 
FARDATA
Ë
≤g_∑ss_öc
[7];

631 
PNG_EXPORT_VAR
 (
PNG_CONST
 
FARDATA
Ë
≤g_∑ss_y°¨t
[7];

632 
PNG_EXPORT_VAR
 (
PNG_CONST
 
FARDATA
Ë
≤g_∑ss_yöc
[7];

633 
PNG_EXPORT_VAR
 (
PNG_CONST
 
FARDATA
Ë
≤g_∑ss_mask
[7];

634 
PNG_EXPORT_VAR
 (
PNG_CONST
 
FARDATA
Ë
≤g_∑ss_d•_mask
[7];

646 
	s≤g_cﬁ‹_°ru˘


648 
≤g_byã
 
ªd
;

649 
≤g_byã
 
gªí
;

650 
≤g_byã
 
blue
;

651 } 
	t≤g_cﬁ‹
;

652 
≤g_cﬁ‹
 
	tFAR
 * 
	t≤g_cﬁ‹p
;

653 
≤g_cﬁ‹
 
	tFAR
 * FAR * 
	t≤g_cﬁ‹µ
;

655 
	s≤g_cﬁ‹_16_°ru˘


657 
≤g_byã
 
ödex
;

658 
≤g_uöt_16
 
ªd
;

659 
≤g_uöt_16
 
gªí
;

660 
≤g_uöt_16
 
blue
;

661 
≤g_uöt_16
 
gøy
;

662 } 
	t≤g_cﬁ‹_16
;

663 
≤g_cﬁ‹_16
 
	tFAR
 * 
	t≤g_cﬁ‹_16p
;

664 
≤g_cﬁ‹_16
 
	tFAR
 * FAR * 
	t≤g_cﬁ‹_16µ
;

666 
	s≤g_cﬁ‹_8_°ru˘


668 
≤g_byã
 
ªd
;

669 
≤g_byã
 
gªí
;

670 
≤g_byã
 
blue
;

671 
≤g_byã
 
gøy
;

672 
≤g_byã
 
Æpha
;

673 } 
	t≤g_cﬁ‹_8
;

674 
≤g_cﬁ‹_8
 
	tFAR
 * 
	t≤g_cﬁ‹_8p
;

675 
≤g_cﬁ‹_8
 
	tFAR
 * FAR * 
	t≤g_cﬁ‹_8µ
;

681 
	s≤g_sPLT_íåy_°ru˘


683 
≤g_uöt_16
 
ªd
;

684 
≤g_uöt_16
 
gªí
;

685 
≤g_uöt_16
 
blue
;

686 
≤g_uöt_16
 
Æpha
;

687 
≤g_uöt_16
 
‰equícy
;

688 } 
	t≤g_sPLT_íåy
;

689 
≤g_sPLT_íåy
 
	tFAR
 * 
	t≤g_sPLT_íåyp
;

690 
≤g_sPLT_íåy
 
	tFAR
 * FAR * 
	t≤g_sPLT_íåyµ
;

697 
	s≤g_sPLT_°ru˘


699 
≤g_ch¨p
 
«me
;

700 
≤g_byã
 
dïth
;

701 
≤g_sPLT_íåyp
 
íåõs
;

702 
≤g_öt_32
 
√¡rõs
;

703 } 
	t≤g_sPLT_t
;

704 
≤g_sPLT_t
 
	tFAR
 * 
	t≤g_sPLT_ç
;

705 
≤g_sPLT_t
 
	tFAR
 * FAR * 
	t≤g_sPLT_çp
;

707 #ifde‡
PNG_TEXT_SUPPORTED


716 
	s≤g_ãxt_°ru˘


718 
com¥essi⁄
;

723 
≤g_ch¨p
 
key
;

724 
≤g_ch¨p
 
ãxt
;

726 
≤g_size_t
 
ãxt_Àngth
;

727 #ifde‡
PNG_iTXt_SUPPORTED


728 
≤g_size_t
 
ôxt_Àngth
;

729 
≤g_ch¨p
 
œng
;

731 
≤g_ch¨p
 
œng_key
;

734 } 
	t≤g_ãxt
;

735 
≤g_ãxt
 
	tFAR
 * 
	t≤g_ãxç
;

736 
≤g_ãxt
 
	tFAR
 * FAR * 
	t≤g_ãxçp
;

742 
	#PNG_TEXT_COMPRESSION_NONE_WR
 -3

	)

743 
	#PNG_TEXT_COMPRESSION_zTXt_WR
 -2

	)

744 
	#PNG_TEXT_COMPRESSION_NONE
 -1

	)

745 
	#PNG_TEXT_COMPRESSION_zTXt
 0

	)

746 
	#PNG_ITXT_COMPRESSION_NONE
 1

	)

747 
	#PNG_ITXT_COMPRESSION_zTXt
 2

	)

748 
	#PNG_TEXT_COMPRESSION_LAST
 3

	)

756 
	s≤g_time_°ru˘


758 
≤g_uöt_16
 
yór
;

759 
≤g_byã
 
m⁄th
;

760 
≤g_byã
 
day
;

761 
≤g_byã
 
hour
;

762 
≤g_byã
 
möuã
;

763 
≤g_byã
 
£c⁄d
;

764 } 
	t≤g_time
;

765 
≤g_time
 
	tFAR
 * 
	t≤g_timï
;

766 
≤g_time
 
	tFAR
 * FAR * 
	t≤g_timïp
;

768 #i‡
deföed
(
PNG_UNKNOWN_CHUNKS_SUPPORTED
) || \

769 
deföed
(
PNG_HANDLE_AS_UNKNOWN_SUPPORTED
)

775 
	#PNG_CHUNK_NAME_LENGTH
 5

	)

776 
	s≤g_unknown_chunk_t


778 
≤g_byã
 
«me
[
PNG_CHUNK_NAME_LENGTH
];

779 
≤g_byã
 *
d©a
;

780 
≤g_size_t
 
size
;

783 
≤g_byã
 
loˇti⁄
;

785 
	t≤g_unknown_chunk
;

786 
≤g_unknown_chunk
 
	tFAR
 * 
	t≤g_unknown_chunkp
;

787 
≤g_unknown_chunk
 
	tFAR
 * FAR * 
	t≤g_unknown_chunkµ
;

829 
	s≤g_öfo_°ru˘


832 
≤g_uöt_32
 
width
 
PNG_DEPSTRUCT
;

833 
≤g_uöt_32
 
height
 
PNG_DEPSTRUCT
;

834 
≤g_uöt_32
 
vÆid
 
PNG_DEPSTRUCT
;

835 
≤g_uöt_32
 
rowbyãs
 
PNG_DEPSTRUCT
;

836 
≤g_cﬁ‹p
 
∑Àâe
 
PNG_DEPSTRUCT
;

837 
≤g_uöt_16
 
num_∑Àâe
 
PNG_DEPSTRUCT
;

838 
≤g_uöt_16
 
num_å™s
 
PNG_DEPSTRUCT
;

839 
≤g_byã
 
bô_dïth
 
PNG_DEPSTRUCT
;

840 
≤g_byã
 
cﬁ‹_ty≥
 
PNG_DEPSTRUCT
;

842 
≤g_byã
 
com¥essi⁄_ty≥
 
PNG_DEPSTRUCT
;

843 
≤g_byã
 
fûãr_ty≥
 
PNG_DEPSTRUCT
;

844 
≤g_byã
 
öãæa˚_ty≥
 
PNG_DEPSTRUCT
;

847 
≤g_byã
 
ch™√ls
 
PNG_DEPSTRUCT
;

848 
≤g_byã
 
pixñ_dïth
 
PNG_DEPSTRUCT
;

849 
≤g_byã
 
•¨e_byã
 
PNG_DEPSTRUCT
;

850 
≤g_byã
 
sig«tuª
[8] 
PNG_DEPSTRUCT
;

858 #i‡
deföed
(
PNG_gAMA_SUPPORTED
Ë&& deföed(
PNG_FLOATING_POINT_SUPPORTED
)

863 
gamma
 
PNG_DEPSTRUCT
;

866 #ifde‡
PNG_sRGB_SUPPORTED


869 
≤g_byã
 
§gb_öã¡
 
PNG_DEPSTRUCT
;

872 #ifde‡
PNG_TEXT_SUPPORTED


881 
num_ãxt
 
PNG_DEPSTRUCT
;

882 
max_ãxt
 
PNG_DEPSTRUCT
;

883 
≤g_ãxç
 
ãxt
 
PNG_DEPSTRUCT
;

886 #ifde‡
PNG_tIME_SUPPORTED


890 
≤g_time
 
mod_time
 
PNG_DEPSTRUCT
;

893 #ifde‡
PNG_sBIT_SUPPORTED


900 
≤g_cﬁ‹_8
 
sig_bô
 
PNG_DEPSTRUCT
;

903 #i‡
deföed
(
PNG_tRNS_SUPPORTED
Ë|| deföed(
PNG_READ_EXPAND_SUPPORTED
) || \

904 
deföed
(
PNG_READ_BACKGROUND_SUPPORTED
)

914 
≤g_byãp
 
å™s
 
PNG_DEPSTRUCT
;

915 
≤g_cﬁ‹_16
 
å™s_vÆues
 
PNG_DEPSTRUCT
;

918 #i‡
deföed
(
PNG_bKGD_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
)

925 
≤g_cﬁ‹_16
 
background
 
PNG_DEPSTRUCT
;

928 #ifde‡
PNG_oFFs_SUPPORTED


934 
≤g_öt_32
 
x_off£t
 
PNG_DEPSTRUCT
;

935 
≤g_öt_32
 
y_off£t
 
PNG_DEPSTRUCT
;

936 
≤g_byã
 
off£t_unô_ty≥
 
PNG_DEPSTRUCT
;

939 #ifde‡
PNG_pHYs_SUPPORTED


944 
≤g_uöt_32
 
x_pixñs_≥r_unô
 
PNG_DEPSTRUCT
;

945 
≤g_uöt_32
 
y_pixñs_≥r_unô
 
PNG_DEPSTRUCT
;

946 
≤g_byã
 
phys_unô_ty≥
 
PNG_DEPSTRUCT
;

949 #ifde‡
PNG_hIST_SUPPORTED


956 
≤g_uöt_16p
 
hi°
 
PNG_DEPSTRUCT
;

959 #ifde‡
PNG_cHRM_SUPPORTED


966 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


967 
x_whôe
 
PNG_DEPSTRUCT
;

968 
y_whôe
 
PNG_DEPSTRUCT
;

969 
x_ªd
 
PNG_DEPSTRUCT
;

970 
y_ªd
 
PNG_DEPSTRUCT
;

971 
x_gªí
 
PNG_DEPSTRUCT
;

972 
y_gªí
 
PNG_DEPSTRUCT
;

973 
x_blue
 
PNG_DEPSTRUCT
;

974 
y_blue
 
PNG_DEPSTRUCT
;

978 #ifde‡
PNG_pCAL_SUPPORTED


990 
≤g_ch¨p
 
pˇl_puΩo£
 
PNG_DEPSTRUCT
;

991 
≤g_öt_32
 
pˇl_X0
 
PNG_DEPSTRUCT
;

992 
≤g_öt_32
 
pˇl_X1
 
PNG_DEPSTRUCT
;

993 
≤g_ch¨p
 
pˇl_unôs
 
PNG_DEPSTRUCT
;

994 
≤g_ch¨µ
 
pˇl_∑øms
 
PNG_DEPSTRUCT
;

995 
≤g_byã
 
pˇl_ty≥
 
PNG_DEPSTRUCT
;

996 
≤g_byã
 
pˇl_≈¨ams
 
PNG_DEPSTRUCT
;

1000 #ifde‡
PNG_FREE_ME_SUPPORTED


1001 
≤g_uöt_32
 
‰ì_me
 
PNG_DEPSTRUCT
;

1004 #i‡
deföed
(
PNG_UNKNOWN_CHUNKS_SUPPORTED
) || \

1005 
deföed
(
PNG_HANDLE_AS_UNKNOWN_SUPPORTED
)

1007 
≤g_unknown_chunkp
 
unknown_chunks
 
PNG_DEPSTRUCT
;

1008 
≤g_size_t
 
unknown_chunks_num
 
PNG_DEPSTRUCT
;

1011 #ifde‡
PNG_iCCP_SUPPORTED


1013 
≤g_ch¨p
 
ic˝_«me
 
PNG_DEPSTRUCT
;

1014 
≤g_ch¨p
 
ic˝_¥ofûe
 
PNG_DEPSTRUCT
;

1016 
≤g_uöt_32
 
ic˝_¥oÊí
 
PNG_DEPSTRUCT
;

1017 
≤g_byã
 
ic˝_com¥essi⁄
 
PNG_DEPSTRUCT
;

1020 #ifde‡
PNG_sPLT_SUPPORTED


1022 
≤g_sPLT_ç
 
•…_∑Àâes
 
PNG_DEPSTRUCT
;

1023 
≤g_uöt_32
 
•…_∑Àâes_num
 
PNG_DEPSTRUCT
;

1026 #ifde‡
PNG_sCAL_SUPPORTED


1034 
≤g_byã
 
sˇl_unô
 
PNG_DEPSTRUCT
;

1035 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1036 
sˇl_pixñ_width
 
PNG_DEPSTRUCT
;

1037 
sˇl_pixñ_height
 
PNG_DEPSTRUCT
;

1039 #ifde‡
PNG_FIXED_POINT_SUPPORTED


1040 
≤g_ch¨p
 
sˇl_s_width
 
PNG_DEPSTRUCT
;

1041 
≤g_ch¨p
 
sˇl_s_height
 
PNG_DEPSTRUCT
;

1045 #ifde‡
PNG_INFO_IMAGE_SUPPORTED


1048 
≤g_byãµ
 
row_poöãrs
 
PNG_DEPSTRUCT
;

1051 #i‡
deföed
(
PNG_FIXED_POINT_SUPPORTED
Ë&& deföed(
PNG_gAMA_SUPPORTED
)

1052 
≤g_fixed_poöt
 
öt_gamma
 
PNG_DEPSTRUCT
;

1055 #i‡
deföed
(
PNG_cHRM_SUPPORTED
Ë&& deföed(
PNG_FIXED_POINT_SUPPORTED
)

1056 
≤g_fixed_poöt
 
öt_x_whôe
 
PNG_DEPSTRUCT
;

1057 
≤g_fixed_poöt
 
öt_y_whôe
 
PNG_DEPSTRUCT
;

1058 
≤g_fixed_poöt
 
öt_x_ªd
 
PNG_DEPSTRUCT
;

1059 
≤g_fixed_poöt
 
öt_y_ªd
 
PNG_DEPSTRUCT
;

1060 
≤g_fixed_poöt
 
öt_x_gªí
 
PNG_DEPSTRUCT
;

1061 
≤g_fixed_poöt
 
öt_y_gªí
 
PNG_DEPSTRUCT
;

1062 
≤g_fixed_poöt
 
öt_x_blue
 
PNG_DEPSTRUCT
;

1063 
≤g_fixed_poöt
 
öt_y_blue
 
PNG_DEPSTRUCT
;

1066 } 
	t≤g_öfo
;

1068 
≤g_öfo
 
	tFAR
 * 
	t≤g_öf›
;

1069 
≤g_öfo
 
	tFAR
 * FAR * 
	t≤g_öf›p
;

1072 
	#PNG_UINT_31_MAX
 ((
≤g_uöt_32
)0x7fffffffL)

	)

1073 
	#PNG_UINT_32_MAX
 ((
≤g_uöt_32
)(-1))

	)

1074 
	#PNG_SIZE_MAX
 ((
≤g_size_t
)(-1))

	)

1075 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

1077 
	#PNG_MAX_UINT
 
PNG_UINT_31_MAX


	)

1082 
	#PNG_COLOR_MASK_PALETTE
 1

	)

1083 
	#PNG_COLOR_MASK_COLOR
 2

	)

1084 
	#PNG_COLOR_MASK_ALPHA
 4

	)

1087 
	#PNG_COLOR_TYPE_GRAY
 0

	)

1088 
	#PNG_COLOR_TYPE_PALETTE
 (
PNG_COLOR_MASK_COLOR
 | 
PNG_COLOR_MASK_PALETTE
)

	)

1089 
	#PNG_COLOR_TYPE_RGB
 (
PNG_COLOR_MASK_COLOR
)

	)

1090 
	#PNG_COLOR_TYPE_RGB_ALPHA
 (
PNG_COLOR_MASK_COLOR
 | 
PNG_COLOR_MASK_ALPHA
)

	)

1091 
	#PNG_COLOR_TYPE_GRAY_ALPHA
 (
PNG_COLOR_MASK_ALPHA
)

	)

1093 
	#PNG_COLOR_TYPE_RGBA
 
PNG_COLOR_TYPE_RGB_ALPHA


	)

1094 
	#PNG_COLOR_TYPE_GA
 
PNG_COLOR_TYPE_GRAY_ALPHA


	)

1097 
	#PNG_COMPRESSION_TYPE_BASE
 0

	)

1098 
	#PNG_COMPRESSION_TYPE_DEFAULT
 
PNG_COMPRESSION_TYPE_BASE


	)

1101 
	#PNG_FILTER_TYPE_BASE
 0

	)

1102 
	#PNG_INTRAPIXEL_DIFFERENCING
 64

	)

1103 
	#PNG_FILTER_TYPE_DEFAULT
 
PNG_FILTER_TYPE_BASE


	)

1106 
	#PNG_INTERLACE_NONE
 0

	)

1107 
	#PNG_INTERLACE_ADAM7
 1

	)

1108 
	#PNG_INTERLACE_LAST
 2

	)

1111 
	#PNG_OFFSET_PIXEL
 0

	)

1112 
	#PNG_OFFSET_MICROMETER
 1

	)

1113 
	#PNG_OFFSET_LAST
 2

	)

1116 
	#PNG_EQUATION_LINEAR
 0

	)

1117 
	#PNG_EQUATION_BASE_E
 1

	)

1118 
	#PNG_EQUATION_ARBITRARY
 2

	)

1119 
	#PNG_EQUATION_HYPERBOLIC
 3

	)

1120 
	#PNG_EQUATION_LAST
 4

	)

1123 
	#PNG_SCALE_UNKNOWN
 0

	)

1124 
	#PNG_SCALE_METER
 1

	)

1125 
	#PNG_SCALE_RADIAN
 2

	)

1126 
	#PNG_SCALE_LAST
 3

	)

1129 
	#PNG_RESOLUTION_UNKNOWN
 0

	)

1130 
	#PNG_RESOLUTION_METER
 1

	)

1131 
	#PNG_RESOLUTION_LAST
 2

	)

1134 
	#PNG_sRGB_INTENT_PERCEPTUAL
 0

	)

1135 
	#PNG_sRGB_INTENT_RELATIVE
 1

	)

1136 
	#PNG_sRGB_INTENT_SATURATION
 2

	)

1137 
	#PNG_sRGB_INTENT_ABSOLUTE
 3

	)

1138 
	#PNG_sRGB_INTENT_LAST
 4

	)

1141 
	#PNG_KEYWORD_MAX_LENGTH
 79

	)

1144 
	#PNG_MAX_PALETTE_LENGTH
 256

	)

1151 
	#PNG_INFO_gAMA
 0x0001

	)

1152 
	#PNG_INFO_sBIT
 0x0002

	)

1153 
	#PNG_INFO_cHRM
 0x0004

	)

1154 
	#PNG_INFO_PLTE
 0x0008

	)

1155 
	#PNG_INFO_tRNS
 0x0010

	)

1156 
	#PNG_INFO_bKGD
 0x0020

	)

1157 
	#PNG_INFO_hIST
 0x0040

	)

1158 
	#PNG_INFO_pHYs
 0x0080

	)

1159 
	#PNG_INFO_oFFs
 0x0100

	)

1160 
	#PNG_INFO_tIME
 0x0200

	)

1161 
	#PNG_INFO_pCAL
 0x0400

	)

1162 
	#PNG_INFO_sRGB
 0x0800

	)

1163 
	#PNG_INFO_iCCP
 0x1000

	)

1164 
	#PNG_INFO_sPLT
 0x2000

	)

1165 
	#PNG_INFO_sCAL
 0x4000

	)

1166 
	#PNG_INFO_IDAT
 0x8000L

	)

1172 
	s≤g_row_öfo_°ru˘


1174 
≤g_uöt_32
 
width
;

1175 
≤g_uöt_32
 
rowbyãs
;

1176 
≤g_byã
 
cﬁ‹_ty≥
;

1177 
≤g_byã
 
bô_dïth
;

1178 
≤g_byã
 
ch™√ls
;

1179 
≤g_byã
 
pixñ_dïth
;

1180 } 
	t≤g_row_öfo
;

1182 
≤g_row_öfo
 
	tFAR
 * 
	t≤g_row_öf›
;

1183 
≤g_row_öfo
 
	tFAR
 * FAR * 
	t≤g_row_öf›p
;

1191 
≤g_°ru˘_def
 
	t≤g_°ru˘
;

1192 
≤g_°ru˘
 
	tFAR
 * 
	t≤g_°ru˘p
;

1194 (
PNGAPI
 *
	t≤g_îr‹_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_c⁄°_ch¨p
));

1195 (
PNGAPI
 *
	t≤g_rw_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_byãp
, 
	t≤g_size_t
));

1196 (
PNGAPI
 *
	t≤g_Êush_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
));

1197 (
PNGAPI
 *
	t≤g_ªad_°©us_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_uöt_32
,

1199 (
PNGAPI
 *
	t≤g_wrôe_°©us_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_uöt_32
,

1202 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


1203 (
PNGAPI
 *
	t≤g_¥ogªssive_öfo_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_öf›
));

1204 (
PNGAPI
 *
	t≤g_¥ogªssive_íd_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_öf›
));

1205 (
PNGAPI
 *
	t≤g_¥ogªssive_row_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_byãp
,

1206 
	t≤g_uöt_32
, ));

1209 #i‡
deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
) || \

1210 
deföed
(
PNG_WRITE_USER_TRANSFORM_SUPPORTED
) || \

1211 
deföed
(
PNG_LEGACY_SUPPORTED
)

1212 (
PNGAPI
 *
	t≤g_u£r_å™sf‹m_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
,

1213 
	t≤g_row_öf›
, 
	t≤g_byãp
));

1216 #ifde‡
PNG_USER_CHUNKS_SUPPORTED


1217 (
PNGAPI
 *
	t≤g_u£r_chunk_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_unknown_chunkp
));

1219 #ifde‡
PNG_UNKNOWN_CHUNKS_SUPPORTED


1220 (
PNGAPI
 *
	t≤g_unknown_chunk_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
));

1224 
	#PNG_TRANSFORM_IDENTITY
 0x0000

	)

1225 
	#PNG_TRANSFORM_STRIP_16
 0x0001

	)

1226 
	#PNG_TRANSFORM_STRIP_ALPHA
 0x0002

	)

1227 
	#PNG_TRANSFORM_PACKING
 0x0004

	)

1228 
	#PNG_TRANSFORM_PACKSWAP
 0x0008

	)

1229 
	#PNG_TRANSFORM_EXPAND
 0x0010

	)

1230 
	#PNG_TRANSFORM_INVERT_MONO
 0x0020

	)

1231 
	#PNG_TRANSFORM_SHIFT
 0x0040

	)

1232 
	#PNG_TRANSFORM_BGR
 0x0080

	)

1233 
	#PNG_TRANSFORM_SWAP_ALPHA
 0x0100

	)

1234 
	#PNG_TRANSFORM_SWAP_ENDIAN
 0x0200

	)

1235 
	#PNG_TRANSFORM_INVERT_ALPHA
 0x0400

	)

1236 
	#PNG_TRANSFORM_STRIP_FILLER
 0x0800

	)

1238 
	#PNG_TRANSFORM_STRIP_FILLER_BEFORE
 0x0800

	)

1239 
	#PNG_TRANSFORM_STRIP_FILLER_AFTER
 0x1000

	)

1241 
	#PNG_TRANSFORM_GRAY_TO_RGB
 0x2000

	)

1244 
	#PNG_FLAG_MNG_EMPTY_PLTE
 0x01

	)

1245 
	#PNG_FLAG_MNG_FILTER_64
 0x04

	)

1246 
	#PNG_ALL_MNG_FEATURES
 0x05

	)

1248 
≤g_voidp
 (*
	t≤g_mÆloc_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_size_t
));

1249 (*
≤g_‰ì_±r
Ë
	tPNGARG
((
	t≤g_°ru˘p
, 
	t≤g_voidp
));

1258 
	s≤g_°ru˘_def


1260 #ifde‡
PNG_SETJMP_SUPPORTED


1261 
jmp_buf
 
jmpbuf
;

1263 
≤g_îr‹_±r
 
îr‹_‚
 
PNG_DEPSTRUCT
;

1264 
≤g_îr‹_±r
 
w¨nög_‚
 
PNG_DEPSTRUCT
;

1265 
≤g_voidp
 
îr‹_±r
 
PNG_DEPSTRUCT
;

1266 
≤g_rw_±r
 
wrôe_d©a_‚
 
PNG_DEPSTRUCT
;

1267 
≤g_rw_±r
 
ªad_d©a_‚
 
PNG_DEPSTRUCT
;

1268 
≤g_voidp
 
io_±r
 
PNG_DEPSTRUCT
;

1270 #ifde‡
PNG_READ_USER_TRANSFORM_SUPPORTED


1271 
≤g_u£r_å™sf‹m_±r
 
ªad_u£r_å™sf‹m_‚
 
PNG_DEPSTRUCT
;

1274 #ifde‡
PNG_WRITE_USER_TRANSFORM_SUPPORTED


1275 
≤g_u£r_å™sf‹m_±r
 
wrôe_u£r_å™sf‹m_‚
 
PNG_DEPSTRUCT
;

1279 #ifde‡
PNG_USER_TRANSFORM_PTR_SUPPORTED


1280 #i‡
deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
) || \

1281 
deföed
(
PNG_WRITE_USER_TRANSFORM_SUPPORTED
)

1282 
≤g_voidp
 
u£r_å™sf‹m_±r
 
PNG_DEPSTRUCT
;

1283 
≤g_byã
 
u£r_å™sf‹m_dïth
 
PNG_DEPSTRUCT
;

1284 
≤g_byã
 
u£r_å™sf‹m_ch™√ls
 
PNG_DEPSTRUCT
;

1288 
≤g_uöt_32
 
mode
 
PNG_DEPSTRUCT
;

1289 
≤g_uöt_32
 
Êags
 
PNG_DEPSTRUCT
;

1290 
≤g_uöt_32
 
å™sf‹m©i⁄s
 
PNG_DEPSTRUCT
;

1292 
z_°ªam
 
z°ªam
 
PNG_DEPSTRUCT
;

1293 
≤g_byãp
 
zbuf
 
PNG_DEPSTRUCT
;

1294 
≤g_size_t
 
zbuf_size
 
PNG_DEPSTRUCT
;

1295 
zlib_Àvñ
 
PNG_DEPSTRUCT
;

1296 
zlib_mëhod
 
PNG_DEPSTRUCT
;

1297 
zlib_wödow_bôs
 
PNG_DEPSTRUCT
;

1298 
zlib_mem_Àvñ
 
PNG_DEPSTRUCT
;

1299 
zlib_°øãgy
 
PNG_DEPSTRUCT
;

1301 
≤g_uöt_32
 
width
 
PNG_DEPSTRUCT
;

1302 
≤g_uöt_32
 
height
 
PNG_DEPSTRUCT
;

1303 
≤g_uöt_32
 
num_rows
 
PNG_DEPSTRUCT
;

1304 
≤g_uöt_32
 
u§_width
 
PNG_DEPSTRUCT
;

1305 
≤g_uöt_32
 
rowbyãs
 
PNG_DEPSTRUCT
;

1307 
≤g_size_t
 
úowbyãs
 
PNG_DEPSTRUCT
;

1310 #ifde‡
PNG_USER_LIMITS_SUPPORTED


1314 
≤g_uöt_32
 
u£r_chunk_ˇche_max
 
PNG_DEPSTRUCT
;

1316 
≤g_uöt_32
 
iwidth
 
PNG_DEPSTRUCT
;

1317 
≤g_uöt_32
 
row_numbî
 
PNG_DEPSTRUCT
;

1318 
≤g_byãp
 
¥ev_row
 
PNG_DEPSTRUCT
;

1319 
≤g_byãp
 
row_buf
 
PNG_DEPSTRUCT
;

1320 #i‚de‡
PNG_NO_WRITE_FILTER


1321 
≤g_byãp
 
sub_row
 
PNG_DEPSTRUCT
;

1322 
≤g_byãp
 
up_row
 
PNG_DEPSTRUCT
;

1323 
≤g_byãp
 
avg_row
 
PNG_DEPSTRUCT
;

1324 
≤g_byãp
 
∑ëh_row
 
PNG_DEPSTRUCT
;

1326 
≤g_row_öfo
 
row_öfo
 
PNG_DEPSTRUCT
;

1328 
≤g_uöt_32
 
id©_size
 
PNG_DEPSTRUCT
;

1329 
≤g_uöt_32
 
¸c
 
PNG_DEPSTRUCT
;

1330 
≤g_cﬁ‹p
 
∑Àâe
 
PNG_DEPSTRUCT
;

1331 
≤g_uöt_16
 
num_∑Àâe
 
PNG_DEPSTRUCT
;

1332 
≤g_uöt_16
 
num_å™s
 
PNG_DEPSTRUCT
;

1333 
≤g_byã
 
chunk_«me
[5] 
PNG_DEPSTRUCT
;

1334 
≤g_byã
 
com¥essi⁄
 
PNG_DEPSTRUCT
;

1335 
≤g_byã
 
fûãr
 
PNG_DEPSTRUCT
;

1336 
≤g_byã
 
öãæa˚d
 
PNG_DEPSTRUCT
;

1337 
≤g_byã
 
∑ss
 
PNG_DEPSTRUCT
;

1338 
≤g_byã
 
do_fûãr
 
PNG_DEPSTRUCT
;

1339 
≤g_byã
 
cﬁ‹_ty≥
 
PNG_DEPSTRUCT
;

1340 
≤g_byã
 
bô_dïth
 
PNG_DEPSTRUCT
;

1341 
≤g_byã
 
u§_bô_dïth
 
PNG_DEPSTRUCT
;

1342 
≤g_byã
 
pixñ_dïth
 
PNG_DEPSTRUCT
;

1343 
≤g_byã
 
ch™√ls
 
PNG_DEPSTRUCT
;

1344 
≤g_byã
 
u§_ch™√ls
 
PNG_DEPSTRUCT
;

1345 
≤g_byã
 
sig_byãs
 
PNG_DEPSTRUCT
;

1347 #i‡
deföed
(
PNG_READ_FILLER_SUPPORTED
Ë|| deföed(
PNG_WRITE_FILLER_SUPPORTED
)

1348 #ifde‡
PNG_LEGACY_SUPPORTED


1349 
≤g_byã
 
fûÀr
 
PNG_DEPSTRUCT
;

1351 
≤g_uöt_16
 
fûÀr
 
PNG_DEPSTRUCT
;

1355 #ifde‡
PNG_bKGD_SUPPORTED


1356 
≤g_byã
 
background_gamma_ty≥
 
PNG_DEPSTRUCT
;

1357 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1358 
background_gamma
 
PNG_DEPSTRUCT
;

1360 
≤g_cﬁ‹_16
 
background
 
PNG_DEPSTRUCT
;

1361 #ifde‡
PNG_READ_GAMMA_SUPPORTED


1362 
≤g_cﬁ‹_16
 
background_1
 
PNG_DEPSTRUCT
;

1366 #ifde‡
PNG_WRITE_FLUSH_SUPPORTED


1367 
≤g_Êush_±r
 
ouçut_Êush_‚
 
PNG_DEPSTRUCT
;

1368 
≤g_uöt_32
 
Êush_di°
 
PNG_DEPSTRUCT
;

1369 
≤g_uöt_32
 
Êush_rows
 
PNG_DEPSTRUCT
;

1372 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
)

1373 
gamma_shi·
 
PNG_DEPSTRUCT
;

1374 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1375 
gamma
 
PNG_DEPSTRUCT
;

1376 
s¸ìn_gamma
 
PNG_DEPSTRUCT
;

1380 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
)

1381 
≤g_byãp
 
gamma_èbÀ
 
PNG_DEPSTRUCT
;

1382 
≤g_byãp
 
gamma_‰om_1
 
PNG_DEPSTRUCT
;

1383 
≤g_byãp
 
gamma_to_1
 
PNG_DEPSTRUCT
;

1384 
≤g_uöt_16µ
 
gamma_16_èbÀ
 
PNG_DEPSTRUCT
;

1385 
≤g_uöt_16µ
 
gamma_16_‰om_1
 
PNG_DEPSTRUCT
;

1386 
≤g_uöt_16µ
 
gamma_16_to_1
 
PNG_DEPSTRUCT
;

1389 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
Ë|| deföed(
PNG_sBIT_SUPPORTED
)

1390 
≤g_cﬁ‹_8
 
sig_bô
 
PNG_DEPSTRUCT
;

1393 #i‡
deföed
(
PNG_READ_SHIFT_SUPPORTED
Ë|| deföed(
PNG_WRITE_SHIFT_SUPPORTED
)

1394 
≤g_cﬁ‹_8
 
shi·
 
PNG_DEPSTRUCT
;

1397 #i‡
deföed
(
PNG_tRNS_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
) \

1398 || 
deföed
(
PNG_READ_EXPAND_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
)

1399 
≤g_byãp
 
å™s
 
PNG_DEPSTRUCT
;

1400 
≤g_cﬁ‹_16
 
å™s_vÆues
 
PNG_DEPSTRUCT
;

1403 
≤g_ªad_°©us_±r
 
ªad_row_‚
 
PNG_DEPSTRUCT
;

1404 
≤g_wrôe_°©us_±r
 
wrôe_row_‚
 
PNG_DEPSTRUCT
;

1405 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


1406 
≤g_¥ogªssive_öfo_±r
 
öfo_‚
 
PNG_DEPSTRUCT
;

1407 
≤g_¥ogªssive_row_±r
 
row_‚
 
PNG_DEPSTRUCT
;

1408 
≤g_¥ogªssive_íd_±r
 
íd_‚
 
PNG_DEPSTRUCT
;

1409 
≤g_byãp
 
ßve_buf„r_±r
 
PNG_DEPSTRUCT
;

1410 
≤g_byãp
 
ßve_buf„r
 
PNG_DEPSTRUCT
;

1411 
≤g_byãp
 
cuºít_buf„r_±r
 
PNG_DEPSTRUCT
;

1412 
≤g_byãp
 
cuºít_buf„r
 
PNG_DEPSTRUCT
;

1413 
≤g_uöt_32
 
push_Àngth
 
PNG_DEPSTRUCT
;

1414 
≤g_uöt_32
 
skù_Àngth
 
PNG_DEPSTRUCT
;

1415 
≤g_size_t
 
ßve_buf„r_size
 
PNG_DEPSTRUCT
;

1416 
≤g_size_t
 
ßve_buf„r_max
 
PNG_DEPSTRUCT
;

1417 
≤g_size_t
 
buf„r_size
 
PNG_DEPSTRUCT
;

1418 
≤g_size_t
 
cuºít_buf„r_size
 
PNG_DEPSTRUCT
;

1419 
¥o˚ss_mode
 
PNG_DEPSTRUCT
;

1420 
cur_∑Àâe
 
PNG_DEPSTRUCT
;

1422 #ifde‡
PNG_TEXT_SUPPORTED


1423 
≤g_size_t
 
cuºít_ãxt_size
 
PNG_DEPSTRUCT
;

1424 
≤g_size_t
 
cuºít_ãxt_À·
 
PNG_DEPSTRUCT
;

1425 
≤g_ch¨p
 
cuºít_ãxt
 
PNG_DEPSTRUCT
;

1426 
≤g_ch¨p
 
cuºít_ãxt_±r
 
PNG_DEPSTRUCT
;

1430 #i‡
deföed
(
__TURBOC__
Ë&& !deföed(
_Wödows
Ë&& !deföed(
__FLAT__
)

1432 
≤g_byãµ
 
off£t_èbÀ_±r
 
PNG_DEPSTRUCT
;

1433 
≤g_byãp
 
off£t_èbÀ
 
PNG_DEPSTRUCT
;

1434 
≤g_uöt_16
 
off£t_èbÀ_numbî
 
PNG_DEPSTRUCT
;

1435 
≤g_uöt_16
 
off£t_èbÀ_cou¡
 
PNG_DEPSTRUCT
;

1436 
≤g_uöt_16
 
off£t_èbÀ_cou¡_‰ì
 
PNG_DEPSTRUCT
;

1439 #ifde‡
PNG_READ_DITHER_SUPPORTED


1440 
≤g_byãp
 
∑Àâe_lookup
 
PNG_DEPSTRUCT
;

1441 
≤g_byãp
 
dôhî_ödex
 
PNG_DEPSTRUCT
;

1444 #i‡
deföed
(
PNG_READ_DITHER_SUPPORTED
Ë|| deföed(
PNG_hIST_SUPPORTED
)

1445 
≤g_uöt_16p
 
hi°
 
PNG_DEPSTRUCT
;

1448 #ifde‡
PNG_WRITE_WEIGHTED_FILTER_SUPPORTED


1449 
≤g_byã
 
heuri°ic_mëhod
 
PNG_DEPSTRUCT
;

1450 
≤g_byã
 
num_¥ev_fûãrs
 
PNG_DEPSTRUCT
;

1451 
≤g_byãp
 
¥ev_fûãrs
 
PNG_DEPSTRUCT
;

1452 
≤g_uöt_16p
 
fûãr_weights
 
PNG_DEPSTRUCT
;

1453 
≤g_uöt_16p
 
öv_fûãr_weights
 
PNG_DEPSTRUCT
;

1454 
≤g_uöt_16p
 
fûãr_co°s
 
PNG_DEPSTRUCT
;

1455 
≤g_uöt_16p
 
öv_fûãr_co°s
 
PNG_DEPSTRUCT
;

1458 #ifde‡
PNG_TIME_RFC1123_SUPPORTED


1459 
≤g_ch¨p
 
time_buf„r
 
PNG_DEPSTRUCT
;

1464 #ifde‡
PNG_FREE_ME_SUPPORTED


1465 
≤g_uöt_32
 
‰ì_me
 
PNG_DEPSTRUCT
;

1468 #ifde‡
PNG_USER_CHUNKS_SUPPORTED


1469 
≤g_voidp
 
u£r_chunk_±r
 
PNG_DEPSTRUCT
;

1470 
≤g_u£r_chunk_±r
 
ªad_u£r_chunk_‚
 
PNG_DEPSTRUCT
;

1473 #ifde‡
PNG_HANDLE_AS_UNKNOWN_SUPPORTED


1474 
num_chunk_li°
 
PNG_DEPSTRUCT
;

1475 
≤g_byãp
 
chunk_li°
 
PNG_DEPSTRUCT
;

1479 #ifde‡
PNG_READ_RGB_TO_GRAY_SUPPORTED


1480 
≤g_byã
 
rgb_to_gøy_°©us
 
PNG_DEPSTRUCT
;

1482 
≤g_uöt_16
 
rgb_to_gøy_ªd_c€ff
 
PNG_DEPSTRUCT
;

1483 
≤g_uöt_16
 
rgb_to_gøy_gªí_c€ff
 
PNG_DEPSTRUCT
;

1484 
≤g_uöt_16
 
rgb_to_gøy_blue_c€ff
 
PNG_DEPSTRUCT
;

1488 #i‡
deföed
(
PNG_MNG_FEATURES_SUPPORTED
) || \

1489 
deföed
(
PNG_READ_EMPTY_PLTE_SUPPORTED
) || \

1490 
deföed
(
PNG_WRITE_EMPTY_PLTE_SUPPORTED
)

1492 #ifde‡
PNG_1_0_X


1493 
≤g_byã
 
mng_„©uªs_≥rmôãd
 
PNG_DEPSTRUCT
;

1495 
≤g_uöt_32
 
mng_„©uªs_≥rmôãd
 
PNG_DEPSTRUCT
;

1500 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
)

1501 
≤g_fixed_poöt
 
öt_gamma
 
PNG_DEPSTRUCT
;

1505 #ifde‡
PNG_MNG_FEATURES_SUPPORTED


1506 
≤g_byã
 
fûãr_ty≥
 
PNG_DEPSTRUCT
;

1509 #ifde‡
PNG_1_0_X


1511 
≤g_uöt_32
 
row_buf_size
 
PNG_DEPSTRUCT
;

1515 #ifde‡
PNG_ASSEMBLER_CODE_SUPPORTED


1516 #i‚de‡
PNG_1_0_X


1517 #ifde‡
PNG_MMX_CODE_SUPPORTED


1518 
≤g_byã
 
mmx_bôdïth_thªshﬁd
 
PNG_DEPSTRUCT
;

1519 
≤g_uöt_32
 
mmx_rowbyãs_thªshﬁd
 
PNG_DEPSTRUCT
;

1521 
≤g_uöt_32
 
asm_Êags
 
PNG_DEPSTRUCT
;

1526 #ifde‡
PNG_USER_MEM_SUPPORTED


1527 
≤g_voidp
 
mem_±r
 
PNG_DEPSTRUCT
;

1528 
≤g_mÆloc_±r
 
mÆloc_‚
 
PNG_DEPSTRUCT
;

1529 
≤g_‰ì_±r
 
‰ì_‚
 
PNG_DEPSTRUCT
;

1533 
≤g_byãp
 
big_row_buf
 
PNG_DEPSTRUCT
;

1535 #ifde‡
PNG_READ_DITHER_SUPPORTED


1537 
≤g_byãp
 
dôhî_s‹t
 
PNG_DEPSTRUCT
;

1538 
≤g_byãp
 
ödex_to_∑Àâe
 
PNG_DEPSTRUCT
;

1540 
≤g_byãp
 
∑Àâe_to_ödex
 
PNG_DEPSTRUCT
;

1545 
≤g_byã
 
com¥essi⁄_ty≥
 
PNG_DEPSTRUCT
;

1547 #ifde‡
PNG_USER_LIMITS_SUPPORTED


1548 
≤g_uöt_32
 
u£r_width_max
 
PNG_DEPSTRUCT
;

1549 
≤g_uöt_32
 
u£r_height_max
 
PNG_DEPSTRUCT
;

1553 #ifde‡
PNG_UNKNOWN_CHUNKS_SUPPORTED


1555 
≤g_unknown_chunk
 
unknown_chunk
 
PNG_DEPSTRUCT
;

1559 
≤g_uöt_32
 
ﬁd_big_row_buf_size
 
PNG_DEPSTRUCT
;

1560 
≤g_uöt_32
 
ﬁd_¥ev_row_size
 
PNG_DEPSTRUCT
;

1563 
≤g_ch¨p
 
chunkd©a
 
PNG_DEPSTRUCT
;

1572 
≤g_°ru˘p
 
	tvîsi⁄_1_2_50
;

1574 
≤g_°ru˘
 
	tFAR
 * FAR * 
	t≤g_°ru˘µ
;

1583 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_ac˚ss_vîsi⁄_numbî
Ë
PNGARG
(());

1588 
PNG_EXPORT
(,
≤g_£t_sig_byãs
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1589 
num_byãs
));

1596 
PNG_EXPORT
(,
≤g_sig_cmp
Ë
PNGARG
((
≤g_byãp
 
sig
, 
≤g_size_t
 
°¨t
,

1597 
≤g_size_t
 
num_to_check
));

1602 
PNG_EXPORT
(,
≤g_check_sig
Ë
PNGARG
((
≤g_byãp
 
sig
, 
num
)Ë
PNG_DEPRECATED
;

1605 
PNG_EXPORT
(
≤g_°ru˘p
,
≤g_¸óã_ªad_°ru˘
)

1606 
PNGARG
((
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_voidp
 
îr‹_±r
,

1607 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨n_‚
)Ë
PNG_ALLOCATED
;

1610 
PNG_EXPORT
(
≤g_°ru˘p
,
≤g_¸óã_wrôe_°ru˘
)

1611 
PNGARG
((
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_voidp
 
îr‹_±r
,

1612 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨n_‚
)Ë
PNG_ALLOCATED
;

1614 #ifde‡
PNG_WRITE_SUPPORTED


1615 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_com¥essi⁄_buf„r_size
)

1616 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1619 #ifde‡
PNG_WRITE_SUPPORTED


1620 
PNG_EXPORT
(,
≤g_£t_com¥essi⁄_buf„r_size
)

1621 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_uöt_32
 
size
));

1625 
PNG_EXPORT
(,
≤g_ª£t_z°ªam
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1628 #ifde‡
PNG_USER_MEM_SUPPORTED


1629 
PNG_EXPORT
(
≤g_°ru˘p
,
≤g_¸óã_ªad_°ru˘_2
)

1630 
PNGARG
((
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_voidp
 
îr‹_±r
,

1631 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨n_‚
, 
≤g_voidp
 
mem_±r
,

1632 
≤g_mÆloc_±r
 
mÆloc_‚
, 
≤g_‰ì_±r
 
‰ì_‚
)Ë
PNG_ALLOCATED
;

1633 
PNG_EXPORT
(
≤g_°ru˘p
,
≤g_¸óã_wrôe_°ru˘_2
)

1634 
PNGARG
((
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_voidp
 
îr‹_±r
,

1635 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨n_‚
, 
≤g_voidp
 
mem_±r
,

1636 
≤g_mÆloc_±r
 
mÆloc_‚
, 
≤g_‰ì_±r
 
‰ì_‚
)Ë
PNG_ALLOCATED
;

1640 
PNG_EXPORT
(,
≤g_wrôe_chunk
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1641 
≤g_byãp
 
chunk_«me
,Öng_byã∞
d©a
, 
≤g_size_t
 
Àngth
));

1644 
PNG_EXPORT
(,
≤g_wrôe_chunk_°¨t
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1645 
≤g_byãp
 
chunk_«me
, 
≤g_uöt_32
 
Àngth
));

1648 
PNG_EXPORT
(,
≤g_wrôe_chunk_d©a
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1649 
≤g_byãp
 
d©a
, 
≤g_size_t
 
Àngth
));

1652 
PNG_EXPORT
(,
≤g_wrôe_chunk_íd
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1655 
PNG_EXPORT
(
≤g_öf›
,
≤g_¸óã_öfo_°ru˘
)

1656 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
PNG_ALLOCATED
;

1658 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

1660 
PNG_EXPORT
(,
≤g_öfo_öô
Ë
PNGARG
((
≤g_öf›
 
öfo_±r
))

1661 
PNG_DEPRECATED
;

1662 #unde‡
≤g_öfo_öô


1663 
	#≤g_öfo_öô
(
öfo_±r
Ë
	`≤g_öfo_öô_3
(&info_ptr,\

1664 
	`≤g_sizeof
(
≤g_öfo
));

	)

1667 
PNG_EXPORT
(,
≤g_öfo_öô_3
Ë
PNGARG
((
≤g_öf›p
 
öfo_±r
,

1668 
≤g_size_t
 
≤g_öfo_°ru˘_size
));

1671 
PNG_EXPORT
(,
≤g_wrôe_öfo_bef‹e_PLTE
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1672 
≤g_öf›
 
öfo_±r
));

1673 
PNG_EXPORT
(,
≤g_wrôe_öfo
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1674 
≤g_öf›
 
öfo_±r
));

1676 #ifde‡
PNG_SEQUENTIAL_READ_SUPPORTED


1678 
PNG_EXPORT
(,
≤g_ªad_öfo
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1679 
≤g_öf›
 
öfo_±r
));

1682 #ifde‡
PNG_TIME_RFC1123_SUPPORTED


1683 
PNG_EXPORT
(
≤g_ch¨p
,
≤g_c⁄vît_to_rfc1123
)

1684 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_timï
 
±ime
));

1687 #ifde‡
PNG_CONVERT_tIME_SUPPORTED


1689 
PNG_EXPORT
(,
≤g_c⁄vît_‰om_°ru˘_tm
Ë
PNGARG
((
≤g_timï
 
±ime
,

1690 
tm
 
FAR
 * 
âime
));

1693 
PNG_EXPORT
(,
≤g_c⁄vît_‰om_time_t
Ë
PNGARG
((
≤g_timï
 
±ime
,

1694 
time_t
 
âime
));

1697 #ifde‡
PNG_READ_EXPAND_SUPPORTED


1699 
PNG_EXPORT
(,
≤g_£t_ex∑nd
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1700 #i‚de‡
PNG_1_0_X


1701 
PNG_EXPORT
(,
≤g_£t_ex∑nd_gøy_1_2_4_to_8
Ë
PNGARG
((
≤g_°ru˘p


1702 
≤g_±r
));

1704 
PNG_EXPORT
(,
≤g_£t_∑Àâe_to_rgb
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1705 
PNG_EXPORT
(,
≤g_£t_tRNS_to_Æpha
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1706 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

1708 
PNG_EXPORT
(,
≤g_£t_gøy_1_2_4_to_8
Ë
PNGARG
((
≤g_°ru˘p


1709 
≤g_±r
)Ë
PNG_DEPRECATED
;

1713 #i‡
deföed
(
PNG_READ_BGR_SUPPORTED
Ë|| deföed(
PNG_WRITE_BGR_SUPPORTED
)

1715 
PNG_EXPORT
(,
≤g_£t_bgr
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1718 #ifde‡
PNG_READ_GRAY_TO_RGB_SUPPORTED


1720 
PNG_EXPORT
(,
≤g_£t_gøy_to_rgb
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1723 #ifde‡
PNG_READ_RGB_TO_GRAY_SUPPORTED


1725 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1726 
PNG_EXPORT
(,
≤g_£t_rgb_to_gøy
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1727 
îr‹_a˘i⁄
, 
ªd
, 
gªí
 ));

1729 
PNG_EXPORT
(,
≤g_£t_rgb_to_gøy_fixed
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1730 
îr‹_a˘i⁄
, 
≤g_fixed_poöt
 
ªd
,Öng_fixed_poöà
gªí
 ));

1731 
PNG_EXPORT
(
≤g_byã
,
≤g_gë_rgb_to_gøy_°©us
Ë
PNGARG
((
≤g_°ru˘p


1732 
≤g_±r
));

1735 
PNG_EXPORT
(,
≤g_buûd_gøysˇÀ_∑Àâe
Ë
PNGARG
((
bô_dïth
,

1736 
≤g_cﬁ‹p
 
∑Àâe
));

1738 #ifde‡
PNG_READ_STRIP_ALPHA_SUPPORTED


1739 
PNG_EXPORT
(,
≤g_£t_°rù_Æpha
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1742 #i‡
deföed
(
PNG_READ_SWAP_ALPHA_SUPPORTED
) || \

1743 
deföed
(
PNG_WRITE_SWAP_ALPHA_SUPPORTED
)

1744 
PNG_EXPORT
(,
≤g_£t_sw≠_Æpha
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1747 #i‡
deföed
(
PNG_READ_INVERT_ALPHA_SUPPORTED
) || \

1748 
deföed
(
PNG_WRITE_INVERT_ALPHA_SUPPORTED
)

1749 
PNG_EXPORT
(,
≤g_£t_övît_Æpha
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1752 #i‡
deföed
(
PNG_READ_FILLER_SUPPORTED
Ë|| deföed(
PNG_WRITE_FILLER_SUPPORTED
)

1754 
PNG_EXPORT
(,
≤g_£t_fûÀr
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1755 
≤g_uöt_32
 
fûÀr
, 
Êags
));

1757 
	#PNG_FILLER_BEFORE
 0

	)

1758 
	#PNG_FILLER_AFTER
 1

	)

1760 #i‚de‡
PNG_1_0_X


1761 
PNG_EXPORT
(,
≤g_£t_add_Æpha
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1762 
≤g_uöt_32
 
fûÀr
, 
Êags
));

1766 #i‡
deföed
(
PNG_READ_SWAP_SUPPORTED
Ë|| deföed(
PNG_WRITE_SWAP_SUPPORTED
)

1768 
PNG_EXPORT
(,
≤g_£t_sw≠
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1771 #i‡
deföed
(
PNG_READ_PACK_SUPPORTED
Ë|| deföed(
PNG_WRITE_PACK_SUPPORTED
)

1773 
PNG_EXPORT
(,
≤g_£t_∑ckög
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1776 #i‡
deföed
(
PNG_READ_PACKSWAP_SUPPORTED
Ë|| deföed(
PNG_WRITE_PACKSWAP_SUPPORTED
)

1778 
PNG_EXPORT
(,
≤g_£t_∑cksw≠
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1781 #i‡
deföed
(
PNG_READ_SHIFT_SUPPORTED
Ë|| deföed(
PNG_WRITE_SHIFT_SUPPORTED
)

1783 
PNG_EXPORT
(,
≤g_£t_shi·
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1784 
≤g_cﬁ‹_8p
 
åue_bôs
));

1787 #i‡
deföed
(
PNG_READ_INTERLACING_SUPPORTED
) || \

1788 
deföed
(
PNG_WRITE_INTERLACING_SUPPORTED
)

1790 
PNG_EXPORT
(,
≤g_£t_öãæa˚_h™dlög
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1793 #i‡
deföed
(
PNG_READ_INVERT_SUPPORTED
Ë|| deföed(
PNG_WRITE_INVERT_SUPPORTED
)

1795 
PNG_EXPORT
(,
≤g_£t_övît_m⁄o
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1798 #ifde‡
PNG_READ_BACKGROUND_SUPPORTED


1800 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1801 
PNG_EXPORT
(,
≤g_£t_background
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1802 
≤g_cﬁ‹_16p
 
background_cﬁ‹
, 
background_gamma_code
,

1803 
√ed_ex∑nd
, 
background_gamma
));

1805 
	#PNG_BACKGROUND_GAMMA_UNKNOWN
 0

	)

1806 
	#PNG_BACKGROUND_GAMMA_SCREEN
 1

	)

1807 
	#PNG_BACKGROUND_GAMMA_FILE
 2

	)

1808 
	#PNG_BACKGROUND_GAMMA_UNIQUE
 3

	)

1811 #ifde‡
PNG_READ_16_TO_8_SUPPORTED


1813 
PNG_EXPORT
(,
≤g_£t_°rù_16
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1816 #ifde‡
PNG_READ_DITHER_SUPPORTED


1818 
PNG_EXPORT
(,
≤g_£t_dôhî
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1819 
≤g_cﬁ‹p
 
∑Àâe
, 
num_∑Àâe
, 
maximum_cﬁ‹s
,

1820 
≤g_uöt_16p
 
hi°ogøm
, 
fuŒ_dôhî
));

1823 #ifde‡
PNG_READ_GAMMA_SUPPORTED


1825 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1826 
PNG_EXPORT
(,
≤g_£t_gamma
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1827 
s¸ìn_gamma
, 
deÁu…_fûe_gamma
));

1831 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

1832 #i‡
deföed
(
PNG_READ_EMPTY_PLTE_SUPPORTED
) || \

1833 
deföed
(
PNG_WRITE_EMPTY_PLTE_SUPPORTED
)

1836 
PNG_EXPORT
(,
≤g_≥rmô_em±y_∂ã
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1837 
em±y_∂ã_≥rmôãd
)Ë
PNG_DEPRECATED
;

1841 #ifde‡
PNG_WRITE_FLUSH_SUPPORTED


1843 
PNG_EXPORT
(,
≤g_£t_Êush
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
ƒows
));

1845 
PNG_EXPORT
(,
≤g_wrôe_Êush
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1849 
PNG_EXPORT
(,
≤g_°¨t_ªad_image
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1852 
PNG_EXPORT
(,
≤g_ªad_upd©e_öfo
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1853 
≤g_öf›
 
öfo_±r
));

1855 #i‚de‡
PNG_NO_SEQUENTIAL_READ_SUPPORTED


1857 
PNG_EXPORT
(,
≤g_ªad_rows
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1858 
≤g_byãµ
 
row
,Öng_byãµ 
di•œy_row
, 
≤g_uöt_32
 
num_rows
));

1861 #i‚de‡
PNG_NO_SEQUENTIAL_READ_SUPPORTED


1863 
PNG_EXPORT
(,
≤g_ªad_row
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1864 
≤g_byãp
 
row
,

1865 
≤g_byãp
 
di•œy_row
));

1868 #i‚de‡
PNG_NO_SEQUENTIAL_READ_SUPPORTED


1870 
PNG_EXPORT
(,
≤g_ªad_image
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1871 
≤g_byãµ
 
image
));

1875 
PNG_EXPORT
(,
≤g_wrôe_row
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1876 
≤g_byãp
 
row
));

1879 
PNG_EXPORT
(,
≤g_wrôe_rows
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1880 
≤g_byãµ
 
row
, 
≤g_uöt_32
 
num_rows
));

1883 
PNG_EXPORT
(,
≤g_wrôe_image
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1884 
≤g_byãµ
 
image
));

1887 
PNG_EXPORT
(,
≤g_wrôe_íd
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1888 
≤g_öf›
 
öfo_±r
));

1890 #i‚de‡
PNG_NO_SEQUENTIAL_READ_SUPPORTED


1892 
PNG_EXPORT
(,
≤g_ªad_íd
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1893 
≤g_öf›
 
öfo_±r
));

1897 
PNG_EXPORT
(,
≤g_de°roy_öfo_°ru˘
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1898 
≤g_öf›p
 
öfo_±r_±r
));

1901 
PNG_EXPORT
(,
≤g_de°roy_ªad_°ru˘
Ë
PNGARG
((
≤g_°ru˘µ


1902 
≤g_±r_±r
, 
≤g_öf›p
 
öfo_±r_±r
,Öng_öf›∞
íd_öfo_±r_±r
));

1906 
PNG_EXPORT
(,
≤g_ªad_de°roy
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

1907 
≤g_öf›
 
íd_öfo_±r
));

1910 
PNG_EXPORT
(,
≤g_de°roy_wrôe_°ru˘
)

1911 
PNGARG
((
≤g_°ru˘µ
 
≤g_±r_±r
, 
≤g_öf›p
 
öfo_±r_±r
));

1915 
PNG_EXPORT
(,
≤g_wrôe_de°roy
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

1918 
PNG_EXPORT
(,
≤g_£t_¸c_a˘i⁄
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

1919 
¸ô_a˘i⁄
, 
™cû_a˘i⁄
));

1930 
	#PNG_CRC_DEFAULT
 0

	)

1931 
	#PNG_CRC_ERROR_QUIT
 1

	)

1932 
	#PNG_CRC_WARN_DISCARD
 2

	)

1933 
	#PNG_CRC_WARN_USE
 3

	)

1934 
	#PNG_CRC_QUIET_USE
 4

	)

1935 
	#PNG_CRC_NO_CHANGE
 5

	)

1948 
PNG_EXPORT
(,
≤g_£t_fûãr
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
mëhod
,

1949 
fûãrs
));

1956 
	#PNG_NO_FILTERS
 0x00

	)

1957 
	#PNG_FILTER_NONE
 0x08

	)

1958 
	#PNG_FILTER_SUB
 0x10

	)

1959 
	#PNG_FILTER_UP
 0x20

	)

1960 
	#PNG_FILTER_AVG
 0x40

	)

1961 
	#PNG_FILTER_PAETH
 0x80

	)

1962 
	#PNG_ALL_FILTERS
 (
PNG_FILTER_NONE
 | 
PNG_FILTER_SUB
 | 
PNG_FILTER_UP
 | \

1963 
PNG_FILTER_AVG
 | 
PNG_FILTER_PAETH
)

	)

1968 
	#PNG_FILTER_VALUE_NONE
 0

	)

1969 
	#PNG_FILTER_VALUE_SUB
 1

	)

1970 
	#PNG_FILTER_VALUE_UP
 2

	)

1971 
	#PNG_FILTER_VALUE_AVG
 3

	)

1972 
	#PNG_FILTER_VALUE_PAETH
 4

	)

1973 
	#PNG_FILTER_VALUE_LAST
 5

	)

1975 #i‡
deföed
(
PNG_WRITE_WEIGHTED_FILTER_SUPPORTED
)

2004 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2005 
PNG_EXPORT
(,
≤g_£t_fûãr_heuri°ics
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2006 
heuri°ic_mëhod
, 
num_weights
, 
≤g_doubÀp
 
fûãr_weights
,

2007 
≤g_doubÀp
 
fûãr_co°s
));

2014 
	#PNG_FILTER_HEURISTIC_DEFAULT
 0

	)

2015 
	#PNG_FILTER_HEURISTIC_UNWEIGHTED
 1

	)

2016 
	#PNG_FILTER_HEURISTIC_WEIGHTED
 2

	)

2017 
	#PNG_FILTER_HEURISTIC_LAST
 3

	)

2026 
PNG_EXPORT
(,
≤g_£t_com¥essi⁄_Àvñ
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2027 
Àvñ
));

2029 
PNG_EXPORT
(,
≤g_£t_com¥essi⁄_mem_Àvñ
)

2030 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
mem_Àvñ
));

2032 
PNG_EXPORT
(,
≤g_£t_com¥essi⁄_°øãgy
)

2033 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
°øãgy
));

2035 
PNG_EXPORT
(,
≤g_£t_com¥essi⁄_wödow_bôs
)

2036 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
wödow_bôs
));

2038 
PNG_EXPORT
(,
≤g_£t_com¥essi⁄_mëhod
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2039 
mëhod
));

2050 #ifde‡
PNG_STDIO_SUPPORTED


2052 
PNG_EXPORT
(,
≤g_öô_io
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_FILE_p
 
Â
));

2063 
PNG_EXPORT
(,
≤g_£t_îr‹_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2064 
≤g_voidp
 
îr‹_±r
, 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨nög_‚
));

2067 
PNG_EXPORT
(
≤g_voidp
,
≤g_gë_îr‹_±r
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2079 
PNG_EXPORT
(,
≤g_£t_wrôe_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2080 
≤g_voidp
 
io_±r
, 
≤g_rw_±r
 
wrôe_d©a_‚
, 
≤g_Êush_±r
 
ouçut_Êush_‚
));

2083 
PNG_EXPORT
(,
≤g_£t_ªad_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2084 
≤g_voidp
 
io_±r
, 
≤g_rw_±r
 
ªad_d©a_‚
));

2087 
PNG_EXPORT
(
≤g_voidp
,
≤g_gë_io_±r
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2089 
PNG_EXPORT
(,
≤g_£t_ªad_°©us_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2090 
≤g_ªad_°©us_±r
 
ªad_row_‚
));

2092 
PNG_EXPORT
(,
≤g_£t_wrôe_°©us_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2093 
≤g_wrôe_°©us_±r
 
wrôe_row_‚
));

2095 #ifde‡
PNG_USER_MEM_SUPPORTED


2097 
PNG_EXPORT
(,
≤g_£t_mem_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2098 
≤g_voidp
 
mem_±r
, 
≤g_mÆloc_±r
 
mÆloc_‚
, 
≤g_‰ì_±r
 
‰ì_‚
));

2100 
PNG_EXPORT
(
≤g_voidp
,
≤g_gë_mem_±r
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2103 #i‡
deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
) || \

2104 
deföed
(
PNG_LEGACY_SUPPORTED
)

2105 
PNG_EXPORT
(,
≤g_£t_ªad_u£r_å™sf‹m_‚
Ë
PNGARG
((
≤g_°ru˘p


2106 
≤g_±r
, 
≤g_u£r_å™sf‹m_±r
 
ªad_u£r_å™sf‹m_‚
));

2109 #i‡
deföed
(
PNG_WRITE_USER_TRANSFORM_SUPPORTED
) || \

2110 
deföed
(
PNG_LEGACY_SUPPORTED
)

2111 
PNG_EXPORT
(,
≤g_£t_wrôe_u£r_å™sf‹m_‚
Ë
PNGARG
((
≤g_°ru˘p


2112 
≤g_±r
, 
≤g_u£r_å™sf‹m_±r
 
wrôe_u£r_å™sf‹m_‚
));

2115 #i‡
deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
) || \

2116 
deföed
(
PNG_WRITE_USER_TRANSFORM_SUPPORTED
) || \

2117 
deföed
(
PNG_LEGACY_SUPPORTED
)

2118 
PNG_EXPORT
(,
≤g_£t_u£r_å™sf‹m_öfo
Ë
PNGARG
((
≤g_°ru˘p


2119 
≤g_±r
, 
≤g_voidp
 
u£r_å™sf‹m_±r
, 
u£r_å™sf‹m_dïth
,

2120 
u£r_å™sf‹m_ch™√ls
));

2122 
PNG_EXPORT
(
≤g_voidp
,
≤g_gë_u£r_å™sf‹m_±r
)

2123 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2126 #ifde‡
PNG_USER_CHUNKS_SUPPORTED


2127 
PNG_EXPORT
(,
≤g_£t_ªad_u£r_chunk_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2128 
≤g_voidp
 
u£r_chunk_±r
, 
≤g_u£r_chunk_±r
 
ªad_u£r_chunk_‚
));

2129 
PNG_EXPORT
(
≤g_voidp
,
≤g_gë_u£r_chunk_±r
Ë
PNGARG
((
≤g_°ru˘p


2130 
≤g_±r
));

2133 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


2137 
PNG_EXPORT
(,
≤g_£t_¥ogªssive_ªad_‚
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2138 
≤g_voidp
 
¥ogªssive_±r
,

2139 
≤g_¥ogªssive_öfo_±r
 
öfo_‚
, 
≤g_¥ogªssive_row_±r
 
row_‚
,

2140 
≤g_¥ogªssive_íd_±r
 
íd_‚
));

2143 
PNG_EXPORT
(
≤g_voidp
,
≤g_gë_¥ogªssive_±r
)

2144 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2147 
PNG_EXPORT
(,
≤g_¥o˚ss_d©a
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2148 
≤g_öf›
 
öfo_±r
, 
≤g_byãp
 
buf„r
, 
≤g_size_t
 
buf„r_size
));

2153 
PNG_EXPORT
(,
≤g_¥ogªssive_comböe_row
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2154 
≤g_byãp
 
ﬁd_row
,Öng_byã∞
√w_row
));

2157 
PNG_EXPORT
(
≤g_voidp
,
≤g_mÆloc
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2158 
≤g_uöt_32
 
size
)Ë
PNG_ALLOCATED
;

2160 #ifde‡
PNG_1_0_X


2161 
	#≤g_mÆloc_w¨n
 
≤g_mÆloc


	)

2164 
PNG_EXPORT
(
≤g_voidp
,
≤g_mÆloc_w¨n
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2165 
≤g_uöt_32
 
size
)Ë
PNG_ALLOCATED
;

2169 
PNG_EXPORT
(,
≤g_‰ì
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_voidp
 
±r
));

2171 #ifde‡
PNG_1_0_X


2173 
PNG_EXPORT
(
voidpf
,
≤g_zÆloc
Ë
PNGARG
((voidp‡
≤g_±r
, 
uI¡
 
ôems
,

2174 
uI¡
 
size
));

2177 
PNG_EXPORT
(,
≤g_z‰ì
Ë
PNGARG
((
voidpf
 
≤g_±r
, voidp‡
±r
));

2181 
PNG_EXPORT
(,
≤g_‰ì_d©a
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2182 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
‰ì_me
, 
num
));

2183 #ifde‡
PNG_FREE_ME_SUPPORTED


2187 
PNG_EXPORT
(,
≤g_d©a_‰ìr
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2188 
≤g_öf›
 
öfo_±r
, 
‰ìr
, 
≤g_uöt_32
 
mask
));

2191 
	#PNG_DESTROY_WILL_FREE_DATA
 1

	)

2192 
	#PNG_SET_WILL_FREE_DATA
 1

	)

2193 
	#PNG_USER_WILL_FREE_DATA
 2

	)

2195 
	#PNG_FREE_HIST
 0x0008

	)

2196 
	#PNG_FREE_ICCP
 0x0010

	)

2197 
	#PNG_FREE_SPLT
 0x0020

	)

2198 
	#PNG_FREE_ROWS
 0x0040

	)

2199 
	#PNG_FREE_PCAL
 0x0080

	)

2200 
	#PNG_FREE_SCAL
 0x0100

	)

2201 
	#PNG_FREE_UNKN
 0x0200

	)

2202 
	#PNG_FREE_LIST
 0x0400

	)

2203 
	#PNG_FREE_PLTE
 0x1000

	)

2204 
	#PNG_FREE_TRNS
 0x2000

	)

2205 
	#PNG_FREE_TEXT
 0x4000

	)

2206 
	#PNG_FREE_ALL
 0x7fff

	)

2207 
	#PNG_FREE_MUL
 0x4220

	)

2209 #ifde‡
PNG_USER_MEM_SUPPORTED


2210 
PNG_EXPORT
(
≤g_voidp
,
≤g_mÆloc_deÁu…
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2211 
≤g_uöt_32
 
size
)Ë
PNG_ALLOCATED
;

2212 
PNG_EXPORT
(,
≤g_‰ì_deÁu…
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2213 
≤g_voidp
 
±r
));

2216 
PNG_EXPORT
(
≤g_voidp
,
≤g_mem˝y_check
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2217 
≤g_voidp
 
s1
,Öng_void∞
s2
, 
≤g_uöt_32
 
size
)Ë
PNG_DEPRECATED
;

2219 
PNG_EXPORT
(
≤g_voidp
,
≤g_mem£t_check
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2220 
≤g_voidp
 
s1
, 
vÆue
, 
≤g_uöt_32
 
size
)Ë
PNG_DEPRECATED
;

2222 #i‡
deföed
(
USE_FAR_KEYWORD
)

2223 *
≤g_Ár_to_√¨
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,
≤g_voidp
 
±r
,

2224 
check
));

2227 #i‚de‡
PNG_NO_ERROR_TEXT


2229 
PNG_EXPORT
(,
≤g_îr‹
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2230 
≤g_c⁄°_ch¨p
 
îr‹_mesßge
)Ë
PNG_NORETURN
;

2233 
PNG_EXPORT
(,
≤g_chunk_îr‹
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2234 
≤g_c⁄°_ch¨p
 
îr‹_mesßge
)Ë
PNG_NORETURN
;

2237 
PNG_EXPORT
(,
≤g_îr
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
PNG_NORETURN
;

2240 #i‚de‡
PNG_NO_WARNINGS


2242 
PNG_EXPORT
(,
≤g_w¨nög
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2243 
≤g_c⁄°_ch¨p
 
w¨nög_mesßge
));

2245 #ifde‡
PNG_READ_SUPPORTED


2247 
PNG_EXPORT
(,
≤g_chunk_w¨nög
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2248 
≤g_c⁄°_ch¨p
 
w¨nög_mesßge
));

2265 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_vÆid
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2266 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
Êag
));

2269 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_rowbyãs
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2270 
≤g_öf›
 
öfo_±r
));

2272 #ifde‡
PNG_INFO_IMAGE_SUPPORTED


2276 
PNG_EXPORT
(
≤g_byãµ
,
≤g_gë_rows
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2277 
≤g_öf›
 
öfo_±r
));

2281 
PNG_EXPORT
(,
≤g_£t_rows
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2282 
≤g_öf›
 
öfo_±r
, 
≤g_byãµ
 
row_poöãrs
));

2286 
PNG_EXPORT
(
≤g_byã
,
≤g_gë_ch™√ls
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2287 
≤g_öf›
 
öfo_±r
));

2289 #ifde‡
PNG_EASY_ACCESS_SUPPORTED


2291 
PNG_EXPORT
(
≤g_uöt_32
, 
≤g_gë_image_width
Ë
PNGARG
((
≤g_°ru˘p


2292 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2295 
PNG_EXPORT
(
≤g_uöt_32
, 
≤g_gë_image_height
Ë
PNGARG
((
≤g_°ru˘p


2296 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2299 
PNG_EXPORT
(
≤g_byã
, 
≤g_gë_bô_dïth
Ë
PNGARG
((
≤g_°ru˘p


2300 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2303 
PNG_EXPORT
(
≤g_byã
, 
≤g_gë_cﬁ‹_ty≥
Ë
PNGARG
((
≤g_°ru˘p


2304 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2307 
PNG_EXPORT
(
≤g_byã
, 
≤g_gë_fûãr_ty≥
Ë
PNGARG
((
≤g_°ru˘p


2308 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2311 
PNG_EXPORT
(
≤g_byã
, 
≤g_gë_öãæa˚_ty≥
Ë
PNGARG
((
≤g_°ru˘p


2312 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2315 
PNG_EXPORT
(
≤g_byã
, 
≤g_gë_com¥essi⁄_ty≥
Ë
PNGARG
((
≤g_°ru˘p


2316 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2319 
PNG_EXPORT
(
≤g_uöt_32
, 
≤g_gë_pixñs_≥r_mëî
Ë
PNGARG
((
≤g_°ru˘p


2320 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2321 
PNG_EXPORT
(
≤g_uöt_32
, 
≤g_gë_x_pixñs_≥r_mëî
Ë
PNGARG
((
≤g_°ru˘p


2322 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2323 
PNG_EXPORT
(
≤g_uöt_32
, 
≤g_gë_y_pixñs_≥r_mëî
Ë
PNGARG
((
≤g_°ru˘p


2324 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2327 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2328 
PNG_EXPORT
(, 
≤g_gë_pixñ_a•e˘_øtio
Ë
PNGARG
((
≤g_°ru˘p


2329 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2333 
PNG_EXPORT
(
≤g_öt_32
, 
≤g_gë_x_off£t_pixñs
Ë
PNGARG
((
≤g_°ru˘p


2334 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2335 
PNG_EXPORT
(
≤g_öt_32
, 
≤g_gë_y_off£t_pixñs
Ë
PNGARG
((
≤g_°ru˘p


2336 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2337 
PNG_EXPORT
(
≤g_öt_32
, 
≤g_gë_x_off£t_mi¸⁄s
Ë
PNGARG
((
≤g_°ru˘p


2338 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2339 
PNG_EXPORT
(
≤g_öt_32
, 
≤g_gë_y_off£t_mi¸⁄s
Ë
PNGARG
((
≤g_°ru˘p


2340 
≤g_±r
, 
≤g_öf›
 
öfo_±r
));

2345 
PNG_EXPORT
(
≤g_byãp
,
≤g_gë_sig«tuª
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2346 
≤g_öf›
 
öfo_±r
));

2348 #ifde‡
PNG_bKGD_SUPPORTED


2349 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_bKGD
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2350 
≤g_öf›
 
öfo_±r
, 
≤g_cﬁ‹_16p
 *
background
));

2353 #ifde‡
PNG_bKGD_SUPPORTED


2354 
PNG_EXPORT
(,
≤g_£t_bKGD
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2355 
≤g_öf›
 
öfo_±r
, 
≤g_cﬁ‹_16p
 
background
));

2358 #ifde‡
PNG_cHRM_SUPPORTED


2359 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2360 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_cHRM
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2361 
≤g_öf›
 
öfo_±r
, *
whôe_x
, *
whôe_y
, *
ªd_x
,

2362 *
ªd_y
, *
gªí_x
, *
gªí_y
, *
blue_x
,

2363 *
blue_y
));

2365 #ifde‡
PNG_FIXED_POINT_SUPPORTED


2366 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_cHRM_fixed
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2367 
≤g_öf›
 
öfo_±r
, 
≤g_fixed_poöt
 *
öt_whôe_x
,Öng_fixed_point

2368 *
öt_whôe_y
, 
≤g_fixed_poöt
 *
öt_ªd_x
,Öng_fixed_poöà*
öt_ªd_y
,

2369 
≤g_fixed_poöt
 *
öt_gªí_x
,Öng_fixed_poöà*
öt_gªí_y
,Öng_fixed_point

2370 *
öt_blue_x
, 
≤g_fixed_poöt
 *
öt_blue_y
));

2374 #ifde‡
PNG_cHRM_SUPPORTED


2375 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2376 
PNG_EXPORT
(,
≤g_£t_cHRM
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2377 
≤g_öf›
 
öfo_±r
, 
whôe_x
, 
whôe_y
, 
ªd_x
,

2378 
ªd_y
, 
gªí_x
, 
gªí_y
, 
blue_x
, 
blue_y
));

2380 #ifde‡
PNG_FIXED_POINT_SUPPORTED


2381 
PNG_EXPORT
(,
≤g_£t_cHRM_fixed
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2382 
≤g_öf›
 
öfo_±r
, 
≤g_fixed_poöt
 
öt_whôe_x
,Öng_fixed_poöà
öt_whôe_y
,

2383 
≤g_fixed_poöt
 
öt_ªd_x
,Öng_fixed_poöà
öt_ªd_y
,Öng_fixed_point

2384 
öt_gªí_x
, 
≤g_fixed_poöt
 
öt_gªí_y
,Öng_fixed_poöà
öt_blue_x
,

2385 
≤g_fixed_poöt
 
öt_blue_y
));

2389 #ifde‡
PNG_gAMA_SUPPORTED


2390 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2391 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_gAMA
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2392 
≤g_öf›
 
öfo_±r
, *
fûe_gamma
));

2394 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_gAMA_fixed
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2395 
≤g_öf›
 
öfo_±r
, 
≤g_fixed_poöt
 *
öt_fûe_gamma
));

2398 #ifde‡
PNG_gAMA_SUPPORTED


2399 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2400 
PNG_EXPORT
(,
≤g_£t_gAMA
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2401 
≤g_öf›
 
öfo_±r
, 
fûe_gamma
));

2403 
PNG_EXPORT
(,
≤g_£t_gAMA_fixed
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2404 
≤g_öf›
 
öfo_±r
, 
≤g_fixed_poöt
 
öt_fûe_gamma
));

2407 #ifde‡
PNG_hIST_SUPPORTED


2408 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_hIST
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2409 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_16p
 *
hi°
));

2412 #ifde‡
PNG_hIST_SUPPORTED


2413 
PNG_EXPORT
(,
≤g_£t_hIST
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2414 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_16p
 
hi°
));

2417 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_IHDR
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2418 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 *
width
,Öng_uöt_32 *
height
,

2419 *
bô_dïth
, *
cﬁ‹_ty≥
, *
öãæa˚_mëhod
,

2420 *
com¥essi⁄_mëhod
, *
fûãr_mëhod
));

2422 
PNG_EXPORT
(,
≤g_£t_IHDR
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2423 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
width
,Öng_uöt_32 
height
, 
bô_dïth
,

2424 
cﬁ‹_ty≥
, 
öãæa˚_mëhod
, 
com¥essi⁄_mëhod
,

2425 
fûãr_mëhod
));

2427 #ifde‡
PNG_oFFs_SUPPORTED


2428 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_oFFs
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2429 
≤g_öf›
 
öfo_±r
, 
≤g_öt_32
 *
off£t_x
,Öng_öt_32 *
off£t_y
,

2430 *
unô_ty≥
));

2433 #ifde‡
PNG_oFFs_SUPPORTED


2434 
PNG_EXPORT
(,
≤g_£t_oFFs
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2435 
≤g_öf›
 
öfo_±r
, 
≤g_öt_32
 
off£t_x
,Öng_öt_32 
off£t_y
,

2436 
unô_ty≥
));

2439 #ifde‡
PNG_pCAL_SUPPORTED


2440 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_pCAL
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2441 
≤g_öf›
 
öfo_±r
, 
≤g_ch¨p
 *
puΩo£
, 
≤g_öt_32
 *
X0
,Öng_öt_32 *
X1
,

2442 *
ty≥
, *
≈¨ams
, 
≤g_ch¨p
 *
unôs
, 
≤g_ch¨µ
 *
∑øms
));

2445 #ifde‡
PNG_pCAL_SUPPORTED


2446 
PNG_EXPORT
(,
≤g_£t_pCAL
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2447 
≤g_öf›
 
öfo_±r
, 
≤g_ch¨p
 
puΩo£
, 
≤g_öt_32
 
X0
,Öng_öt_32 
X1
,

2448 
ty≥
, 
≈¨ams
, 
≤g_ch¨p
 
unôs
, 
≤g_ch¨µ
 
∑øms
));

2451 #ifde‡
PNG_pHYs_SUPPORTED


2452 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_pHYs
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2453 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 *
ªs_x
,Öng_uöt_32 *
ªs_y
, *
unô_ty≥
));

2456 #ifde‡
PNG_pHYs_SUPPORTED


2457 
PNG_EXPORT
(,
≤g_£t_pHYs
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2458 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
ªs_x
,Öng_uöt_32 
ªs_y
, 
unô_ty≥
));

2461 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_PLTE
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2462 
≤g_öf›
 
öfo_±r
, 
≤g_cﬁ‹p
 *
∑Àâe
, *
num_∑Àâe
));

2464 
PNG_EXPORT
(,
≤g_£t_PLTE
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2465 
≤g_öf›
 
öfo_±r
, 
≤g_cﬁ‹p
 
∑Àâe
, 
num_∑Àâe
));

2467 #ifde‡
PNG_sBIT_SUPPORTED


2468 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_sBIT
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2469 
≤g_öf›
 
öfo_±r
, 
≤g_cﬁ‹_8p
 *
sig_bô
));

2472 #ifde‡
PNG_sBIT_SUPPORTED


2473 
PNG_EXPORT
(,
≤g_£t_sBIT
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2474 
≤g_öf›
 
öfo_±r
, 
≤g_cﬁ‹_8p
 
sig_bô
));

2477 #ifde‡
PNG_sRGB_SUPPORTED


2478 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_sRGB
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2479 
≤g_öf›
 
öfo_±r
, *
öã¡
));

2482 #ifde‡
PNG_sRGB_SUPPORTED


2483 
PNG_EXPORT
(,
≤g_£t_sRGB
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2484 
≤g_öf›
 
öfo_±r
, 
öã¡
));

2485 
PNG_EXPORT
(,
≤g_£t_sRGB_gAMA_™d_cHRM
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2486 
≤g_öf›
 
öfo_±r
, 
öã¡
));

2489 #ifde‡
PNG_iCCP_SUPPORTED


2490 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_iCCP
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2491 
≤g_öf›
 
öfo_±r
, 
≤g_ch¨µ
 
«me
, *
com¥essi⁄_ty≥
,

2492 
≤g_ch¨µ
 
¥ofûe
, 
≤g_uöt_32
 *
¥oÊí
));

2496 #ifde‡
PNG_iCCP_SUPPORTED


2497 
PNG_EXPORT
(,
≤g_£t_iCCP
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2498 
≤g_öf›
 
öfo_±r
, 
≤g_ch¨p
 
«me
, 
com¥essi⁄_ty≥
,

2499 
≤g_ch¨p
 
¥ofûe
, 
≤g_uöt_32
 
¥oÊí
));

2503 #ifde‡
PNG_sPLT_SUPPORTED


2504 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_sPLT
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2505 
≤g_öf›
 
öfo_±r
, 
≤g_sPLT_çp
 
íåõs
));

2508 #ifde‡
PNG_sPLT_SUPPORTED


2509 
PNG_EXPORT
(,
≤g_£t_sPLT
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2510 
≤g_öf›
 
öfo_±r
, 
≤g_sPLT_ç
 
íåõs
, 
√¡rõs
));

2513 #ifde‡
PNG_TEXT_SUPPORTED


2515 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_ãxt
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2516 
≤g_öf›
 
öfo_±r
, 
≤g_ãxç
 *
ãxt_±r
, *
num_ãxt
));

2527 #ifde‡
PNG_TEXT_SUPPORTED


2528 
PNG_EXPORT
(,
≤g_£t_ãxt
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2529 
≤g_öf›
 
öfo_±r
, 
≤g_ãxç
 
ãxt_±r
, 
num_ãxt
));

2532 #ifde‡
PNG_tIME_SUPPORTED


2533 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_tIME
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2534 
≤g_öf›
 
öfo_±r
, 
≤g_timï
 *
mod_time
));

2537 #ifde‡
PNG_tIME_SUPPORTED


2538 
PNG_EXPORT
(,
≤g_£t_tIME
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2539 
≤g_öf›
 
öfo_±r
, 
≤g_timï
 
mod_time
));

2542 #ifde‡
PNG_tRNS_SUPPORTED


2543 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_tRNS
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2544 
≤g_öf›
 
öfo_±r
, 
≤g_byãp
 *
å™s
, *
num_å™s
,

2545 
≤g_cﬁ‹_16p
 *
å™s_vÆues
));

2548 #ifde‡
PNG_tRNS_SUPPORTED


2549 
PNG_EXPORT
(,
≤g_£t_tRNS
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2550 
≤g_öf›
 
öfo_±r
, 
≤g_byãp
 
å™s
, 
num_å™s
,

2551 
≤g_cﬁ‹_16p
 
å™s_vÆues
));

2554 #ifde‡
PNG_tRNS_SUPPORTED


2557 #ifde‡
PNG_sCAL_SUPPORTED


2558 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2559 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_sCAL
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2560 
≤g_öf›
 
öfo_±r
, *
unô
, *
width
, *
height
));

2562 #ifde‡
PNG_FIXED_POINT_SUPPORTED


2563 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_sCAL_s
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2564 
≤g_öf›
 
öfo_±r
, *
unô
, 
≤g_ch¨µ
 
swidth
,Öng_ch¨µ 
sheight
));

2569 #ifde‡
PNG_sCAL_SUPPORTED


2570 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2571 
PNG_EXPORT
(,
≤g_£t_sCAL
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2572 
≤g_öf›
 
öfo_±r
, 
unô
, 
width
, 
height
));

2574 #ifde‡
PNG_FIXED_POINT_SUPPORTED


2575 
PNG_EXPORT
(,
≤g_£t_sCAL_s
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2576 
≤g_öf›
 
öfo_±r
, 
unô
, 
≤g_ch¨p
 
swidth
,Öng_ch¨∞
sheight
));

2581 #ifde‡
PNG_HANDLE_AS_UNKNOWN_SUPPORTED


2591 
PNG_EXPORT
(, 
≤g_£t_kìp_unknown_chunks
Ë
PNGARG
((
≤g_°ru˘p


2592 
≤g_±r
, 
kìp
, 
≤g_byãp
 
chunk_li°
, 
num_chunks
));

2593 
PNG_EXPORT
(,
≤g_h™dÀ_as_unknown
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp


2594 
chunk_«me
));

2596 #ifde‡
PNG_UNKNOWN_CHUNKS_SUPPORTED


2597 
PNG_EXPORT
(, 
≤g_£t_unknown_chunks
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2598 
≤g_öf›
 
öfo_±r
, 
≤g_unknown_chunkp
 
unknowns
, 
num_unknowns
));

2599 
PNG_EXPORT
(, 
≤g_£t_unknown_chunk_loˇti⁄
)

2600 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
, 
chunk
, 
loˇti⁄
));

2601 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_unknown_chunks
Ë
PNGARG
((
≤g_°ru˘p


2602 
≤g_±r
, 
≤g_öf›
 
öfo_±r
, 
≤g_unknown_chunkµ
 
íåõs
));

2609 
PNG_EXPORT
(, 
≤g_£t_övÆid
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2610 
≤g_öf›
 
öfo_±r
, 
mask
));

2612 #ifde‡
PNG_INFO_IMAGE_SUPPORTED


2614 
PNG_EXPORT
(, 
≤g_ªad_≤g
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2615 
≤g_öf›
 
öfo_±r
,

2616 
å™sf‹ms
,

2617 
≤g_voidp
 
∑øms
));

2618 
PNG_EXPORT
(, 
≤g_wrôe_≤g
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

2619 
≤g_öf›
 
öfo_±r
,

2620 
å™sf‹ms
,

2621 
≤g_voidp
 
∑øms
));

2629 #ifde‡
PNG_DEBUG


2630 #i‡(
PNG_DEBUG
 > 0)

2631 #i‡!
deföed
(
PNG_DEBUG_FILE
Ë&& deföed(
_MSC_VER
)

2632 
	~<¸tdbg.h
>

2633 #i‡(
PNG_DEBUG
 > 1)

2634 #i‚de‡
_DEBUG


2635 
	#_DEBUG


	)

2637 #i‚de‡
≤g_debug


2638 
	#≤g_debug
(
l
,
m
Ë
	`_RPT0
(
_CRT_WARN
,m 
PNG_STRING_NEWLINE
)

	)

2640 #i‚de‡
≤g_debug1


2641 
	#≤g_debug1
(
l
,
m
,
p1
Ë
	`_RPT1
(
_CRT_WARN
,m 
PNG_STRING_NEWLINE
,p1)

	)

2643 #i‚de‡
≤g_debug2


2644 
	#≤g_debug2
(
l
,
m
,
p1
,
p2
Ë
	`_RPT2
(
_CRT_WARN
,m 
PNG_STRING_NEWLINE
,p1,p2)

	)

2648 #i‚de‡
PNG_DEBUG_FILE


2649 
	#PNG_DEBUG_FILE
 
°dîr


	)

2652 #i‡(
PNG_DEBUG
 > 1)

2656 #ifde‡
__STDC__


2657 #i‚de‡
≤g_debug


2658 
	#≤g_debug
(
l
,
m
) \

2660 
num_èbs
=
l
; \

2661 
	`Ârötf
(
PNG_DEBUG_FILE
,"%s" 
m
 
PNG_STRING_NEWLINE
,(
num_èbs
==1 ? "\t" : \

2662 (
num_èbs
==2 ? "\t\t":(num_tabs>2 ? "\t\t\t":"")))); \

2663 }

	)

2665 #i‚de‡
≤g_debug1


2666 
	#≤g_debug1
(
l
,
m
,
p1
) \

2668 
num_èbs
=
l
; \

2669 
	`Ârötf
(
PNG_DEBUG_FILE
,"%s" 
m
 
PNG_STRING_NEWLINE
,(
num_èbs
==1 ? "\t" : \

2670 (
num_èbs
==2 ? "\t\t":“um_èbs>2 ? "\t\t\t":""))),
p1
); \

2671 }

	)

2673 #i‚de‡
≤g_debug2


2674 
	#≤g_debug2
(
l
,
m
,
p1
,
p2
) \

2676 
num_èbs
=
l
; \

2677 
	`Ârötf
(
PNG_DEBUG_FILE
,"%s" 
m
 
PNG_STRING_NEWLINE
,(
num_èbs
==1 ? "\t" : \

2678 (
num_èbs
==2 ? "\t\t":“um_èbs>2 ? "\t\t\t":""))),
p1
,
p2
); \

2679 }

	)

2682 #i‚de‡
≤g_debug


2683 
	#≤g_debug
(
l
,
m
) \

2685 
num_èbs
=
l
; \

2686 
f‹m©
[256]; \

2687 
	`¢¥ötf
(
f‹m©
,256,"%s%s%s",(
num_èbs
==1 ? "\t" : \

2688 (
num_èbs
==2 ? "\t\t":(num_tabs>2 ? "\t\t\t":""))), \

2689 
m
,
PNG_STRING_NEWLINE
); \

2690 
	`Ârötf
(
PNG_DEBUG_FILE
,
f‹m©
); \

2691 }

	)

2693 #i‚de‡
≤g_debug1


2694 
	#≤g_debug1
(
l
,
m
,
p1
) \

2696 
num_èbs
=
l
; \

2697 
f‹m©
[256]; \

2698 
	`¢¥ötf
(
f‹m©
,256,"%s%s%s",(
num_èbs
==1 ? "\t" : \

2699 (
num_èbs
==2 ? "\t\t":(num_tabs>2 ? "\t\t\t":""))), \

2700 
m
,
PNG_STRING_NEWLINE
); \

2701 
	`Ârötf
(
PNG_DEBUG_FILE
,
f‹m©
,
p1
); \

2702 }

	)

2704 #i‚de‡
≤g_debug2


2705 
	#≤g_debug2
(
l
,
m
,
p1
,
p2
) \

2707 
num_èbs
=
l
; \

2708 
f‹m©
[256]; \

2709 
	`¢¥ötf
(
f‹m©
,256,"%s%s%s",(
num_èbs
==1 ? "\t" : \

2710 (
num_èbs
==2 ? "\t\t":(num_tabs>2 ? "\t\t\t":""))), \

2711 
m
,
PNG_STRING_NEWLINE
); \

2712 
	`Ârötf
(
PNG_DEBUG_FILE
,
f‹m©
,
p1
,
p2
); \

2713 }

	)

2721 #i‚de‡
≤g_debug


2722 
	#≤g_debug
(
l
, 
m
)

	)

2724 #i‚de‡
≤g_debug1


2725 
	#≤g_debug1
(
l
, 
m
, 
p1
)

	)

2727 #i‚de‡
≤g_debug2


2728 
	#≤g_debug2
(
l
, 
m
, 
p1
, 
p2
)

	)

2731 
PNG_EXPORT
(
≤g_ch¨p
,
≤g_gë_c›yright
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2732 
PNG_EXPORT
(
≤g_ch¨p
,
≤g_gë_hódî_vî
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2733 
PNG_EXPORT
(
≤g_ch¨p
,
≤g_gë_hódî_vîsi⁄
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2734 
PNG_EXPORT
(
≤g_ch¨p
,
≤g_gë_lib≤g_vî
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2736 #ifde‡
PNG_MNG_FEATURES_SUPPORTED


2737 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_≥rmô_mng_„©uªs
Ë
PNGARG
((
≤g_°ru˘p


2738 
≤g_±r
, 
≤g_uöt_32
 
mng_„©uªs_≥rmôãd
));

2742 
	#PNG_HANDLE_CHUNK_AS_DEFAULT
 0

	)

2743 
	#PNG_HANDLE_CHUNK_NEVER
 1

	)

2744 
	#PNG_HANDLE_CHUNK_IF_SAFE
 2

	)

2745 
	#PNG_HANDLE_CHUNK_ALWAYS
 3

	)

2748 #ifde‡
PNG_ASSEMBLER_CODE_SUPPORTED


2749 #ifde‡
PNG_MMX_CODE_SUPPORTED


2750 
	#PNG_ASM_FLAG_MMX_SUPPORT_COMPILED
 0x01

	)

2751 
	#PNG_ASM_FLAG_MMX_SUPPORT_IN_CPU
 0x02

	)

2752 
	#PNG_ASM_FLAG_MMX_READ_COMBINE_ROW
 0x04

	)

2753 
	#PNG_ASM_FLAG_MMX_READ_INTERLACE
 0x08

	)

2754 
	#PNG_ASM_FLAG_MMX_READ_FILTER_SUB
 0x10

	)

2755 
	#PNG_ASM_FLAG_MMX_READ_FILTER_UP
 0x20

	)

2756 
	#PNG_ASM_FLAG_MMX_READ_FILTER_AVG
 0x40

	)

2757 
	#PNG_ASM_FLAG_MMX_READ_FILTER_PAETH
 0x80

	)

2758 
	#PNG_ASM_FLAGS_INITIALIZED
 0x80000000

	)

2760 
	#PNG_MMX_READ_FLAGS
 ( 
PNG_ASM_FLAG_MMX_READ_COMBINE_ROW
 \

2761 | 
PNG_ASM_FLAG_MMX_READ_INTERLACE
 \

2762 | 
PNG_ASM_FLAG_MMX_READ_FILTER_SUB
 \

2763 | 
PNG_ASM_FLAG_MMX_READ_FILTER_UP
 \

2764 | 
PNG_ASM_FLAG_MMX_READ_FILTER_AVG
 \

2765 | 
PNG_ASM_FLAG_MMX_READ_FILTER_PAETH
 )

	)

2766 
	#PNG_MMX_WRITE_FLAGS
 ( 0 )

	)

2768 
	#PNG_MMX_FLAGS
 ( 
PNG_ASM_FLAG_MMX_SUPPORT_COMPILED
 \

2769 | 
PNG_ASM_FLAG_MMX_SUPPORT_IN_CPU
 \

2770 | 
PNG_MMX_READ_FLAGS
 \

2771 | 
PNG_MMX_WRITE_FLAGS
 )

	)

2773 
	#PNG_SELECT_READ
 1

	)

2774 
	#PNG_SELECT_WRITE
 2

	)

2777 #i‚de‡
PNG_1_0_X


2779 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_mmx_Êagmask
)

2780 
PNGARG
((
Êag_£À˘
, *
compûîID
));

2783 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_asm_Êagmask
)

2784 
PNGARG
((
Êag_£À˘
));

2787 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_asm_Êags
)

2788 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2791 
PNG_EXPORT
(
≤g_byã
,
≤g_gë_mmx_bôdïth_thªshﬁd
)

2792 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2795 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_mmx_rowbyãs_thªshﬁd
)

2796 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

2799 
PNG_EXPORT
(,
≤g_£t_asm_Êags
)

2800 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_uöt_32
 
asm_Êags
));

2803 
PNG_EXPORT
(,
≤g_£t_mmx_thªshﬁds
)

2804 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byã
 
mmx_bôdïth_thªshﬁd
,

2805 
≤g_uöt_32
 
mmx_rowbyãs_thªshﬁd
));

2809 #i‚de‡
PNG_1_0_X


2811 
PNG_EXPORT
(,
≤g_mmx_suµ‹t
Ë
PNGARG
(());

2818 #ifde‡
PNG_ERROR_NUMBERS_SUPPORTED


2819 
PNG_EXPORT
(,
≤g_£t_°rù_îr‹_numbîs
Ë
PNGARG
((
≤g_°ru˘p


2820 
≤g_±r
, 
≤g_uöt_32
 
°rù_mode
));

2824 #ifde‡
PNG_SET_USER_LIMITS_SUPPORTED


2825 
PNG_EXPORT
(,
≤g_£t_u£r_limôs
Ë
PNGARG
((
≤g_°ru˘p


2826 
≤g_±r
, 
≤g_uöt_32
 
u£r_width_max
,Öng_uöt_32 
u£r_height_max
));

2827 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_u£r_width_max
Ë
PNGARG
((
≤g_°ru˘p


2828 
≤g_±r
));

2829 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_u£r_height_max
Ë
PNGARG
((
≤g_°ru˘p


2830 
≤g_±r
));

2836 #ifde‡
PNG_READ_COMPOSITE_NODIV_SUPPORTED


2851 
	#≤g_composôe
(
composôe
, 
fg
, 
Æpha
, 
bg
) \

2852 { 
≤g_uöt_16
 
ãmp
 = (≤g_uöt_16)(’ng_uöt_16)(
fg
Ë* (≤g_uöt_16)(
Æpha
) \

2853 + (
≤g_uöt_16
)(
bg
)*(png_uint_16)(255 - \

2854 (
≤g_uöt_16
)(
Æpha
)) + (png_uint_16)128); \

2855 (
composôe
Ë(
≤g_byã
)((
ãmp
 + (ãm∞>> 8)Ë>> 8); }

	)

2857 
	#≤g_composôe_16
(
composôe
, 
fg
, 
Æpha
, 
bg
) \

2858 { 
≤g_uöt_32
 
ãmp
 = (≤g_uöt_32)(’ng_uöt_32)(
fg
Ë* (≤g_uöt_32)(
Æpha
) \

2859 + (
≤g_uöt_32
)(
bg
)*(png_uint_32)(65535L - \

2860 (
≤g_uöt_32
)(
Æpha
)) + (png_uint_32)32768L); \

2861 (
composôe
Ë(
≤g_uöt_16
)((
ãmp
 + (ãm∞>> 16)Ë>> 16); }

	)

2865 
	#≤g_composôe
(
composôe
, 
fg
, 
Æpha
, 
bg
) \

2866 (
composôe
Ë(
≤g_byã
)(((
≤g_uöt_16
)(
fg
Ë* (≤g_uöt_16)(
Æpha
) + \

2867 (
≤g_uöt_16
)(
bg
Ë* (≤g_uöt_16)(255 - (≤g_uöt_16)(
Æpha
)) + \

2868 (
≤g_uöt_16
)127Ë/ 255)

	)

2870 
	#≤g_composôe_16
(
composôe
, 
fg
, 
Æpha
, 
bg
) \

2871 (
composôe
Ë(
≤g_uöt_16
)(((
≤g_uöt_32
)(
fg
Ë* (≤g_uöt_32)(
Æpha
) + \

2872 (
≤g_uöt_32
)(
bg
)*’ng_uöt_32)(65535L - (≤g_uöt_32)(
Æpha
)) + \

2873 (
≤g_uöt_32
)32767Ë/ (≤g_uöt_32)65535L)

	)

2885 #ifde‡
PNG_READ_BIG_ENDIAN_SUPPORTED


2886 
	#≤g_gë_uöt_32
(
buf
Ë–*((
≤g_uöt_32p
Ë(buf)))

	)

2887 
	#≤g_gë_uöt_16
(
buf
Ë–*((
≤g_uöt_16p
Ë(buf)))

	)

2888 
	#≤g_gë_öt_32
(
buf
Ë–*((
≤g_öt_32p
Ë(buf)))

	)

2890 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_uöt_32
Ë
PNGARG
((
≤g_byãp
 
buf
));

2891 
PNG_EXPORT
(
≤g_uöt_16
,
≤g_gë_uöt_16
Ë
PNGARG
((
≤g_byãp
 
buf
));

2892 
PNG_EXPORT
(
≤g_öt_32
,
≤g_gë_öt_32
Ë
PNGARG
((
≤g_byãp
 
buf
));

2894 
PNG_EXPORT
(
≤g_uöt_32
,
≤g_gë_uöt_31
)

2895 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
buf
));

2900 
PNG_EXPORT
(,
≤g_ßve_uöt_32
)

2901 
PNGARG
((
≤g_byãp
 
buf
, 
≤g_uöt_32
 
i
));

2902 
PNG_EXPORT
(,
≤g_ßve_öt_32
)

2903 
PNGARG
((
≤g_byãp
 
buf
, 
≤g_öt_32
 
i
));

2909 
PNG_EXPORT
(,
≤g_ßve_uöt_16
)

2910 
PNGARG
((
≤g_byãp
 
buf
, 
i
));

2925 
	#PNG_HAVE_IHDR
 0x01

	)

2926 
	#PNG_HAVE_PLTE
 0x02

	)

2927 
	#PNG_HAVE_IDAT
 0x04

	)

2928 
	#PNG_AFTER_IDAT
 0x08

	)

2929 
	#PNG_HAVE_IEND
 0x10

	)

2931 #ifde‡
PNG_INTERNAL


2936 
	#PNG_HAVE_gAMA
 0x20

	)

2937 
	#PNG_HAVE_cHRM
 0x40

	)

2938 
	#PNG_HAVE_sRGB
 0x80

	)

2939 
	#PNG_HAVE_CHUNK_HEADER
 0x100

	)

2940 
	#PNG_WROTE_tIME
 0x200

	)

2941 
	#PNG_WROTE_INFO_BEFORE_PLTE
 0x400

	)

2942 
	#PNG_BACKGROUND_IS_GRAY
 0x800

	)

2943 
	#PNG_HAVE_PNG_SIGNATURE
 0x1000

	)

2944 
	#PNG_HAVE_CHUNK_AFTER_IDAT
 0x2000

	)

2947 
	#PNG_BGR
 0x0001

	)

2948 
	#PNG_INTERLACE
 0x0002

	)

2949 
	#PNG_PACK
 0x0004

	)

2950 
	#PNG_SHIFT
 0x0008

	)

2951 
	#PNG_SWAP_BYTES
 0x0010

	)

2952 
	#PNG_INVERT_MONO
 0x0020

	)

2953 
	#PNG_DITHER
 0x0040

	)

2954 
	#PNG_BACKGROUND
 0x0080

	)

2955 
	#PNG_BACKGROUND_EXPAND
 0x0100

	)

2957 
	#PNG_16_TO_8
 0x0400

	)

2958 
	#PNG_RGBA
 0x0800

	)

2959 
	#PNG_EXPAND
 0x1000

	)

2960 
	#PNG_GAMMA
 0x2000

	)

2961 
	#PNG_GRAY_TO_RGB
 0x4000

	)

2962 
	#PNG_FILLER
 0x8000L

	)

2963 
	#PNG_PACKSWAP
 0x10000L

	)

2964 
	#PNG_SWAP_ALPHA
 0x20000L

	)

2965 
	#PNG_STRIP_ALPHA
 0x40000L

	)

2966 
	#PNG_INVERT_ALPHA
 0x80000L

	)

2967 
	#PNG_USER_TRANSFORM
 0x100000L

	)

2968 
	#PNG_RGB_TO_GRAY_ERR
 0x200000L

	)

2969 
	#PNG_RGB_TO_GRAY_WARN
 0x400000L

	)

2970 
	#PNG_RGB_TO_GRAY
 0x600000L

	)

2972 
	#PNG_ADD_ALPHA
 0x1000000L

	)

2973 
	#PNG_EXPAND_tRNS
 0x2000000L

	)

2974 
	#PNG_PREMULTIPLY_ALPHA
 0x4000000L

	)

2982 
	#PNG_STRUCT_PNG
 0x0001

	)

2983 
	#PNG_STRUCT_INFO
 0x0002

	)

2986 
	#PNG_WEIGHT_SHIFT
 8

	)

2987 
	#PNG_WEIGHT_FACTOR
 (1<<(
PNG_WEIGHT_SHIFT
))

	)

2988 
	#PNG_COST_SHIFT
 3

	)

2989 
	#PNG_COST_FACTOR
 (1<<(
PNG_COST_SHIFT
))

	)

2992 
	#PNG_FLAG_ZLIB_CUSTOM_STRATEGY
 0x0001

	)

2993 
	#PNG_FLAG_ZLIB_CUSTOM_LEVEL
 0x0002

	)

2994 
	#PNG_FLAG_ZLIB_CUSTOM_MEM_LEVEL
 0x0004

	)

2995 
	#PNG_FLAG_ZLIB_CUSTOM_WINDOW_BITS
 0x0008

	)

2996 
	#PNG_FLAG_ZLIB_CUSTOM_METHOD
 0x0010

	)

2997 
	#PNG_FLAG_ZLIB_FINISHED
 0x0020

	)

2998 
	#PNG_FLAG_ROW_INIT
 0x0040

	)

2999 
	#PNG_FLAG_FILLER_AFTER
 0x0080

	)

3000 
	#PNG_FLAG_CRC_ANCILLARY_USE
 0x0100

	)

3001 
	#PNG_FLAG_CRC_ANCILLARY_NOWARN
 0x0200

	)

3002 
	#PNG_FLAG_CRC_CRITICAL_USE
 0x0400

	)

3003 
	#PNG_FLAG_CRC_CRITICAL_IGNORE
 0x0800

	)

3004 
	#PNG_FLAG_FREE_PLTE
 0x1000

	)

3005 
	#PNG_FLAG_FREE_TRNS
 0x2000

	)

3006 
	#PNG_FLAG_FREE_HIST
 0x4000

	)

3007 
	#PNG_FLAG_KEEP_UNKNOWN_CHUNKS
 0x8000L

	)

3008 
	#PNG_FLAG_KEEP_UNSAFE_CHUNKS
 0x10000L

	)

3009 
	#PNG_FLAG_LIBRARY_MISMATCH
 0x20000L

	)

3010 
	#PNG_FLAG_STRIP_ERROR_NUMBERS
 0x40000L

	)

3011 
	#PNG_FLAG_STRIP_ERROR_TEXT
 0x80000L

	)

3012 
	#PNG_FLAG_MALLOC_NULL_MEM_OK
 0x100000L

	)

3013 
	#PNG_FLAG_ADD_ALPHA
 0x200000L

	)

3014 
	#PNG_FLAG_STRIP_ALPHA
 0x400000L

	)

3024 
	#PNG_FLAG_CRC_ANCILLARY_MASK
 (
PNG_FLAG_CRC_ANCILLARY_USE
 | \

3025 
PNG_FLAG_CRC_ANCILLARY_NOWARN
)

	)

3027 
	#PNG_FLAG_CRC_CRITICAL_MASK
 (
PNG_FLAG_CRC_CRITICAL_USE
 | \

3028 
PNG_FLAG_CRC_CRITICAL_IGNORE
)

	)

3030 
	#PNG_FLAG_CRC_MASK
 (
PNG_FLAG_CRC_ANCILLARY_MASK
 | \

3031 
PNG_FLAG_CRC_CRITICAL_MASK
)

	)

3035 
	#PNG_COLOR_DIST
(
c1
, 
c2
Ë(
	`abs
(()((c1).
ªd
) - ()((c2).red)) + \

3036 
	`abs
(()((
c1
).
gªí
Ë- ()((
c2
).green)) + \

3037 
	`abs
(()((
c1
).
blue
Ë- ()((
c2
).blue)))

	)

3040 
	#PNG_ROWBYTES
(
pixñ_bôs
, 
width
) \

3041 ((
pixñ_bôs
) >= 8 ? \

3042 ((
width
Ë* (((
≤g_uöt_32
)(
pixñ_bôs
)) >> 3)) : \

3043 (–((
width
Ë* ((
≤g_uöt_32
)(
pixñ_bôs
))Ë+ 7Ë>> 3Ë)

	)

3050 
	#PNG_OUT_OF_RANGE
(
vÆue
, 
idól
, 
dñè
) \

3051 –(
vÆue
Ë< (
idól
)-(
dñè
Ë|| (vÆueË> (idól)+(dñèË)

	)

3054 #i‡!
deföed
(
PNG_NO_EXTERN
Ë|| deföed(
PNG_ALWAYS_EXTERN
)

3056 #ifde‡
PNG_USE_GLOBAL_ARRAYS


3057 
PNG_EXPORT_VAR
 (
PNG_CONST
 
≤g_byã
 
FARDATA
Ë
	g≤g_sig
[8];

3066 
	#PNG_IHDR
 
≤g_byã
 
≤g_IHDR
[5] = { 73, 72, 68, 82, '\0'}

	)

3067 
	#PNG_IDAT
 
≤g_byã
 
≤g_IDAT
[5] = { 73, 68, 65, 84, '\0'}

	)

3068 
	#PNG_IEND
 
≤g_byã
 
≤g_IEND
[5] = { 73, 69, 78, 68, '\0'}

	)

3069 
	#PNG_PLTE
 
≤g_byã
 
≤g_PLTE
[5] = { 80, 76, 84, 69, '\0'}

	)

3070 
	#PNG_bKGD
 
≤g_byã
 
≤g_bKGD
[5] = { 98, 75, 71, 68, '\0'}

	)

3071 
	#PNG_cHRM
 
≤g_byã
 
≤g_cHRM
[5] = { 99, 72, 82, 77, '\0'}

	)

3072 
	#PNG_gAMA
 
≤g_byã
 
≤g_gAMA
[5] = {103, 65, 77, 65, '\0'}

	)

3073 
	#PNG_hIST
 
≤g_byã
 
≤g_hIST
[5] = {104, 73, 83, 84, '\0'}

	)

3074 
	#PNG_iCCP
 
≤g_byã
 
≤g_iCCP
[5] = {105, 67, 67, 80, '\0'}

	)

3075 
	#PNG_iTXt
 
≤g_byã
 
≤g_iTXt
[5] = {105, 84, 88, 116, '\0'}

	)

3076 
	#PNG_oFFs
 
≤g_byã
 
≤g_oFFs
[5] = {111, 70, 70, 115, '\0'}

	)

3077 
	#PNG_pCAL
 
≤g_byã
 
≤g_pCAL
[5] = {112, 67, 65, 76, '\0'}

	)

3078 
	#PNG_sCAL
 
≤g_byã
 
≤g_sCAL
[5] = {115, 67, 65, 76, '\0'}

	)

3079 
	#PNG_pHYs
 
≤g_byã
 
≤g_pHYs
[5] = {112, 72, 89, 115, '\0'}

	)

3080 
	#PNG_sBIT
 
≤g_byã
 
≤g_sBIT
[5] = {115, 66, 73, 84, '\0'}

	)

3081 
	#PNG_sPLT
 
≤g_byã
 
≤g_sPLT
[5] = {115, 80, 76, 84, '\0'}

	)

3082 
	#PNG_sRGB
 
≤g_byã
 
≤g_sRGB
[5] = {115, 82, 71, 66, '\0'}

	)

3083 
	#PNG_tEXt
 
≤g_byã
 
≤g_tEXt
[5] = {116, 69, 88, 116, '\0'}

	)

3084 
	#PNG_tIME
 
≤g_byã
 
≤g_tIME
[5] = {116, 73, 77, 69, '\0'}

	)

3085 
	#PNG_tRNS
 
≤g_byã
 
≤g_tRNS
[5] = {116, 82, 78, 83, '\0'}

	)

3086 
	#PNG_zTXt
 
≤g_byã
 
≤g_zTXt
[5] = {122, 84, 88, 116, '\0'}

	)

3088 #ifde‡
PNG_USE_GLOBAL_ARRAYS


3089 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_IHDR
[5];

3090 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_IDAT
[5];

3091 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_IEND
[5];

3092 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_PLTE
[5];

3093 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_bKGD
[5];

3094 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_cHRM
[5];

3095 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_gAMA
[5];

3096 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_hIST
[5];

3097 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_iCCP
[5];

3098 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_iTXt
[5];

3099 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_oFFs
[5];

3100 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_pCAL
[5];

3101 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_sCAL
[5];

3102 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_pHYs
[5];

3103 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_sBIT
[5];

3104 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_sPLT
[5];

3105 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_sRGB
[5];

3106 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_tEXt
[5];

3107 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_tIME
[5];

3108 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_tRNS
[5];

3109 
PNG_EXPORT_VAR
 (
≤g_byã
 
FARDATA
Ë
	g≤g_zTXt
[5];

3112 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

3116 
PNG_EXPORT
(,
≤g_ªad_öô
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
))

3117 
PNG_DEPRECATED
;

3118 #unde‡
≤g_ªad_öô


3119 
	#≤g_ªad_öô
(
≤g_±r
Ë
	`≤g_ªad_öô_3
(&png_ptr, \

3120 
PNG_LIBPNG_VER_STRING
, 
	`≤g_sizeof
(
≤g_°ru˘
));

	)

3123 
PNG_EXPORT
(,
≤g_ªad_öô_3
Ë
PNGARG
((
≤g_°ru˘µ
 
±r_±r
,

3124 
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_size_t
 
≤g_°ru˘_size
));

3125 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

3126 
PNG_EXPORT
(,
≤g_ªad_öô_2
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3127 
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_size_t
 
≤g_°ru˘_size
,Öng_size_t

3128 
≤g_öfo_size
));

3131 #i‡
deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

3135 
PNG_EXPORT
(,
≤g_wrôe_öô
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
))

3136 
PNG_DEPRECATED
;

3137 #unde‡
≤g_wrôe_öô


3138 
	#≤g_wrôe_öô
(
≤g_±r
Ë
	`≤g_wrôe_öô_3
(&png_ptr, \

3139 
PNG_LIBPNG_VER_STRING
, 
	`≤g_sizeof
(
≤g_°ru˘
));

	)

3142 
PNG_EXPORT
(,
≤g_wrôe_öô_3
Ë
PNGARG
((
≤g_°ru˘µ
 
±r_±r
,

3143 
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_size_t
 
≤g_°ru˘_size
));

3144 
PNG_EXPORT
(,
≤g_wrôe_öô_2
Ë
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3145 
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_size_t
 
≤g_°ru˘_size
,Öng_size_t

3146 
≤g_öfo_size
));

3149 
PNG_EXTERN
 
≤g_voidp
 
≤g_¸óã_°ru˘
 
PNGARG
((
ty≥
)Ë
	gPNG_PRIVATE
;

3152 
PNG_EXTERN
 
≤g_de°roy_°ru˘
 
PNGARG
((
≤g_voidp
 
°ru˘_±r
)Ë
	gPNG_PRIVATE
;

3154 
PNG_EXTERN
 
≤g_voidp
 
≤g_¸óã_°ru˘_2
 
PNGARG
((
ty≥
, 
≤g_mÆloc_±r


3155 
mÆloc_‚
, 
≤g_voidp
 
mem_±r
)Ë
	gPNG_PRIVATE
;

3156 
PNG_EXTERN
 
≤g_de°roy_°ru˘_2
 
PNGARG
((
≤g_voidp
 
°ru˘_±r
,

3157 
≤g_‰ì_±r
 
‰ì_‚
, 
≤g_voidp
 
mem_±r
)Ë
	gPNG_PRIVATE
;

3160 
PNG_EXTERN
 
≤g_öfo_de°roy
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3161 
≤g_öf›
 
öfo_±r
)Ë
	gPNG_PRIVATE
;

3163 #i‚de‡
PNG_1_0_X


3165 
PNG_EXTERN
 
voidpf
 
≤g_zÆloc
 
PNGARG
((voidp‡
≤g_±r
, 
uI¡
 
ôems
,

3166 
uI¡
 
size
)Ë
	gPNG_PRIVATE
;

3169 
PNG_EXTERN
 
≤g_z‰ì
 
PNGARG
((
voidpf
 
≤g_±r
, voidp‡
±r
)Ë
	gPNG_PRIVATE
;

3171 #ifde‡
PNG_SIZE_T


3173 
PNG_EXTERN
 
≤g_size_t
 
PNGAPI
 
≤g_c⁄vît_size
 
PNGARG
((
size_t
 
size
))

3174 
	gPNG_PRIVATE
;

3181 
PNG_EXTERN
 
PNGAPI
 
≤g_deÁu…_ªad_d©a
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3182 
≤g_byãp
 
d©a
, 
≤g_size_t
 
Àngth
)Ë
	gPNG_PRIVATE
;

3184 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


3185 
PNG_EXTERN
 
PNGAPI
 
≤g_push_fûl_buf„r
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3186 
≤g_byãp
 
buf„r
, 
≤g_size_t
 
Àngth
)Ë
	gPNG_PRIVATE
;

3189 
PNG_EXTERN
 
PNGAPI
 
≤g_deÁu…_wrôe_d©a
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3190 
≤g_byãp
 
d©a
, 
≤g_size_t
 
Àngth
)Ë
	gPNG_PRIVATE
;

3192 #ifde‡
PNG_WRITE_FLUSH_SUPPORTED


3193 #ifde‡
PNG_STDIO_SUPPORTED


3194 
PNG_EXTERN
 
PNGAPI
 
≤g_deÁu…_Êush
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
))

3195 
	gPNG_PRIVATE
;

3199 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


3200 
PNG_EXTERN
 
≤g_push_fûl_buf„r
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3201 
≤g_byãp
 
buf„r
, 
≤g_size_t
 
Àngth
)Ë
	gPNG_PRIVATE
;

3206 
PNG_EXTERN
 
≤g_ª£t_¸c
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3209 
PNG_EXTERN
 
≤g_wrôe_d©a
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
d©a
,

3210 
≤g_size_t
 
Àngth
)Ë
	gPNG_PRIVATE
;

3213 
PNG_EXTERN
 
≤g_ªad_d©a
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
d©a
,

3214 
≤g_size_t
 
Àngth
)Ë
	gPNG_PRIVATE
;

3217 
PNG_EXTERN
 
≤g_¸c_ªad
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
buf
,

3218 
≤g_size_t
 
Àngth
)Ë
	gPNG_PRIVATE
;

3221 #i‡
deföed
(
PNG_zTXt_SUPPORTED
Ë|| deföed(
PNG_iTXt_SUPPORTED
) || \

3222 
deföed
(
PNG_iCCP_SUPPORTED
Ë|| deföed(
PNG_sPLT_SUPPORTED
)

3223 
PNG_EXTERN
 
≤g_decom¥ess_chunk
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3224 
comp_ty≥
, 
≤g_size_t
 
chunkÀngth
,

3225 
≤g_size_t
 
¥efix_Àngth
,Öng_size_à*
d©a_Àngth
)Ë
	gPNG_PRIVATE
;

3229 
PNG_EXTERN
 
≤g_¸c_föish
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_uöt_32
 
skù
)

3230 
PNG_PRIVATE
);

3233 
PNG_EXTERN
 
≤g_¸c_îr‹
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3239 
PNG_EXTERN
 
≤g_ˇlcuœã_¸c
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
±r
,

3240 
≤g_size_t
 
Àngth
)Ë
	gPNG_PRIVATE
;

3242 #ifde‡
PNG_WRITE_FLUSH_SUPPORTED


3243 
PNG_EXTERN
 
≤g_Êush
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3247 
PNG_EXTERN
 
≤g_wrôe_sig
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3254 
PNG_EXTERN
 
≤g_wrôe_IHDR
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_uöt_32
 
width
,

3255 
≤g_uöt_32
 
height
,

3256 
bô_dïth
, 
cﬁ‹_ty≥
, 
com¥essi⁄_mëhod
, 
fûãr_mëhod
,

3257 
öãæa˚_mëhod
)Ë
	gPNG_PRIVATE
;

3259 
PNG_EXTERN
 
≤g_wrôe_PLTE
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_cﬁ‹p
 
∑Àâe
,

3260 
≤g_uöt_32
 
num_∑l
)Ë
	gPNG_PRIVATE
;

3262 
PNG_EXTERN
 
≤g_wrôe_IDAT
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
d©a
,

3263 
≤g_size_t
 
Àngth
)Ë
	gPNG_PRIVATE
;

3265 
PNG_EXTERN
 
≤g_wrôe_IEND
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3267 #ifde‡
PNG_WRITE_gAMA_SUPPORTED


3268 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


3269 
PNG_EXTERN
 
≤g_wrôe_gAMA
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
fûe_gamma
))

3270 
	gPNG_PRIVATE
;

3272 #ifde‡
PNG_FIXED_POINT_SUPPORTED


3273 
PNG_EXTERN
 
≤g_wrôe_gAMA_fixed
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3274 
≤g_fixed_poöt
 
fûe_gamma
)Ë
	gPNG_PRIVATE
;

3278 #ifde‡
PNG_WRITE_sBIT_SUPPORTED


3279 
PNG_EXTERN
 
≤g_wrôe_sBIT
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_cﬁ‹_8p
 
sbô
,

3280 
cﬁ‹_ty≥
)Ë
	gPNG_PRIVATE
;

3283 #ifde‡
PNG_WRITE_cHRM_SUPPORTED


3284 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


3285 
PNG_EXTERN
 
≤g_wrôe_cHRM
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3286 
whôe_x
, 
whôe_y
,

3287 
ªd_x
, 
ªd_y
, 
gªí_x
, 
gªí_y
,

3288 
blue_x
, 
blue_y
)Ë
	gPNG_PRIVATE
;

3290 #ifde‡
PNG_FIXED_POINT_SUPPORTED


3291 
PNG_EXTERN
 
≤g_wrôe_cHRM_fixed
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3292 
≤g_fixed_poöt
 
öt_whôe_x
,Öng_fixed_poöà
öt_whôe_y
,

3293 
≤g_fixed_poöt
 
öt_ªd_x
,Öng_fixed_poöà
öt_ªd_y
,Öng_fixed_point

3294 
öt_gªí_x
, 
≤g_fixed_poöt
 
öt_gªí_y
,Öng_fixed_poöà
öt_blue_x
,

3295 
≤g_fixed_poöt
 
öt_blue_y
)Ë
	gPNG_PRIVATE
;

3299 #ifde‡
PNG_WRITE_sRGB_SUPPORTED


3300 
PNG_EXTERN
 
≤g_wrôe_sRGB
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3301 
öã¡
)Ë
	gPNG_PRIVATE
;

3304 #ifde‡
PNG_WRITE_iCCP_SUPPORTED


3305 
PNG_EXTERN
 
≤g_wrôe_iCCP
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3306 
≤g_ch¨p
 
«me
, 
com¥essi⁄_ty≥
,

3307 
≤g_ch¨p
 
¥ofûe
, 
¥oÊí
)Ë
	gPNG_PRIVATE
;

3311 #ifde‡
PNG_WRITE_sPLT_SUPPORTED


3312 
PNG_EXTERN
 
≤g_wrôe_sPLT
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3313 
≤g_sPLT_ç
 
∑Àâe
)Ë
	gPNG_PRIVATE
;

3316 #ifde‡
PNG_WRITE_tRNS_SUPPORTED


3317 
PNG_EXTERN
 
≤g_wrôe_tRNS
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
å™s
,

3318 
≤g_cﬁ‹_16p
 
vÆues
, 
numbî
, 
cﬁ‹_ty≥
)Ë
	gPNG_PRIVATE
;

3321 #ifde‡
PNG_WRITE_bKGD_SUPPORTED


3322 
PNG_EXTERN
 
≤g_wrôe_bKGD
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3323 
≤g_cﬁ‹_16p
 
vÆues
, 
cﬁ‹_ty≥
)Ë
	gPNG_PRIVATE
;

3326 #ifde‡
PNG_WRITE_hIST_SUPPORTED


3327 
PNG_EXTERN
 
≤g_wrôe_hIST
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_uöt_16p
 
hi°
,

3328 
num_hi°
)Ë
	gPNG_PRIVATE
;

3331 #i‡
deföed
(
PNG_WRITE_TEXT_SUPPORTED
Ë|| deföed(
PNG_WRITE_pCAL_SUPPORTED
) || \

3332 
deföed
(
PNG_WRITE_iCCP_SUPPORTED
Ë|| deföed(
PNG_WRITE_sPLT_SUPPORTED
)

3333 
PNG_EXTERN
 
≤g_size_t
 
≤g_check_keyw‹d
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3334 
≤g_ch¨p
 
key
, 
≤g_ch¨µ
 
√w_key
)Ë
	gPNG_PRIVATE
;

3337 #ifde‡
PNG_WRITE_tEXt_SUPPORTED


3338 
PNG_EXTERN
 
≤g_wrôe_tEXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_ch¨p
 
key
,

3339 
≤g_ch¨p
 
ãxt
, 
≤g_size_t
 
ãxt_Àn
)Ë
	gPNG_PRIVATE
;

3342 #ifde‡
PNG_WRITE_zTXt_SUPPORTED


3343 
PNG_EXTERN
 
≤g_wrôe_zTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_ch¨p
 
key
,

3344 
≤g_ch¨p
 
ãxt
, 
≤g_size_t
 
ãxt_Àn
, 
com¥essi⁄
)Ë
	gPNG_PRIVATE
;

3347 #ifde‡
PNG_WRITE_iTXt_SUPPORTED


3348 
PNG_EXTERN
 
≤g_wrôe_iTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3349 
com¥essi⁄
, 
≤g_ch¨p
 
key
,Öng_ch¨∞
œng
,Öng_ch¨∞
œng_key
,

3350 
≤g_ch¨p
 
ãxt
)Ë
	gPNG_PRIVATE
;

3353 #ifde‡
PNG_TEXT_SUPPORTED


3354 
PNG_EXTERN
 
≤g_£t_ãxt_2
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3355 
≤g_öf›
 
öfo_±r
, 
≤g_ãxç
 
ãxt_±r
, 
num_ãxt
)Ë
	gPNG_PRIVATE
;

3358 #ifde‡
PNG_WRITE_oFFs_SUPPORTED


3359 
PNG_EXTERN
 
≤g_wrôe_oFFs
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3360 
≤g_öt_32
 
x_off£t
,Öng_öt_32 
y_off£t
, 
unô_ty≥
)Ë
	gPNG_PRIVATE
;

3363 #ifde‡
PNG_WRITE_pCAL_SUPPORTED


3364 
PNG_EXTERN
 
≤g_wrôe_pCAL
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_ch¨p
 
puΩo£
,

3365 
≤g_öt_32
 
X0
,Öng_öt_32 
X1
, 
ty≥
, 
≈¨ams
,

3366 
≤g_ch¨p
 
unôs
, 
≤g_ch¨µ
 
∑øms
)Ë
	gPNG_PRIVATE
;

3369 #ifde‡
PNG_WRITE_pHYs_SUPPORTED


3370 
PNG_EXTERN
 
≤g_wrôe_pHYs
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3371 
≤g_uöt_32
 
x_pixñs_≥r_unô
,Öng_uöt_32 
y_pixñs_≥r_unô
,

3372 
unô_ty≥
)Ë
	gPNG_PRIVATE
;

3375 #ifde‡
PNG_WRITE_tIME_SUPPORTED


3376 
PNG_EXTERN
 
≤g_wrôe_tIME
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3377 
≤g_timï
 
mod_time
)Ë
	gPNG_PRIVATE
;

3380 #ifde‡
PNG_WRITE_sCAL_SUPPORTED


3381 #i‡
deföed
(
PNG_FLOATING_POINT_SUPPORTED
Ë&& !deföed(
PNG_NO_STDIO
)

3382 
PNG_EXTERN
 
≤g_wrôe_sCAL
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3383 
unô
, 
width
, 
height
)Ë
	gPNG_PRIVATE
;

3385 #ifde‡
PNG_FIXED_POINT_SUPPORTED


3386 
PNG_EXTERN
 
≤g_wrôe_sCAL_s
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3387 
unô
, 
≤g_ch¨p
 
width
,Öng_ch¨∞
height
)Ë
	gPNG_PRIVATE
;

3393 
PNG_EXTERN
 
≤g_wrôe_föish_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3396 
PNG_EXTERN
 
≤g_wrôe_°¨t_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3398 #ifde‡
PNG_READ_GAMMA_SUPPORTED


3399 
PNG_EXTERN
 
≤g_buûd_gamma_èbÀ
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3403 
PNG_EXTERN
 
≤g_comböe_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
row
,

3404 
mask
)Ë
	gPNG_PRIVATE
;

3406 #ifde‡
PNG_READ_INTERLACING_SUPPORTED


3412 
PNG_EXTERN
 
≤g_do_ªad_öãæa˚
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3417 #ifde‡
PNG_WRITE_INTERLACING_SUPPORTED


3419 
PNG_EXTERN
 
≤g_do_wrôe_öãæa˚
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3420 
≤g_byãp
 
row
, 
∑ss
)Ë
	gPNG_PRIVATE
;

3424 
PNG_EXTERN
 
≤g_ªad_fûãr_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3425 
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,Öng_byã∞
¥ev_row
,

3426 
fûãr
)Ë
	gPNG_PRIVATE
;

3429 
PNG_EXTERN
 
≤g_wrôe_föd_fûãr
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3430 
≤g_row_öf›
 
row_öfo
)Ë
	gPNG_PRIVATE
;

3433 
PNG_EXTERN
 
≤g_wrôe_fûãªd_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3434 
≤g_byãp
 
fûãªd_row
)Ë
	gPNG_PRIVATE
;

3436 
PNG_EXTERN
 
≤g_ªad_föish_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
));

3439 
PNG_EXTERN
 
≤g_ªad_°¨t_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3441 
PNG_EXTERN
 
≤g_ªad_å™sf‹m_öfo
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3442 
≤g_öf›
 
öfo_±r
)Ë
	gPNG_PRIVATE
;

3445 #ifde‡
PNG_READ_FILLER_SUPPORTED


3446 
PNG_EXTERN
 
≤g_do_ªad_fûÀr
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3447 
≤g_byãp
 
row
, 
≤g_uöt_32
 
fûÀr
,Öng_uöt_32 
Êags
)Ë
	gPNG_PRIVATE
;

3450 #ifde‡
PNG_READ_SWAP_ALPHA_SUPPORTED


3451 
PNG_EXTERN
 
≤g_do_ªad_sw≠_Æpha
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3452 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3455 #ifde‡
PNG_WRITE_SWAP_ALPHA_SUPPORTED


3456 
PNG_EXTERN
 
≤g_do_wrôe_sw≠_Æpha
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3457 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3460 #ifde‡
PNG_READ_INVERT_ALPHA_SUPPORTED


3461 
PNG_EXTERN
 
≤g_do_ªad_övît_Æpha
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3462 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3465 #ifde‡
PNG_WRITE_INVERT_ALPHA_SUPPORTED


3466 
PNG_EXTERN
 
≤g_do_wrôe_övît_Æpha
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3467 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3470 #i‡
deföed
(
PNG_WRITE_FILLER_SUPPORTED
) || \

3471 
deföed
(
PNG_READ_STRIP_ALPHA_SUPPORTED
)

3472 
PNG_EXTERN
 
≤g_do_°rù_fûÀr
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3473 
≤g_byãp
 
row
, 
≤g_uöt_32
 
Êags
)Ë
	gPNG_PRIVATE
;

3476 #i‡
deföed
(
PNG_READ_SWAP_SUPPORTED
Ë|| deföed(
PNG_WRITE_SWAP_SUPPORTED
)

3477 
PNG_EXTERN
 
≤g_do_sw≠
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3478 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3481 #i‡
deföed
(
PNG_READ_PACKSWAP_SUPPORTED
Ë|| deföed(
PNG_WRITE_PACKSWAP_SUPPORTED
)

3482 
PNG_EXTERN
 
≤g_do_∑cksw≠
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3483 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3486 #ifde‡
PNG_READ_RGB_TO_GRAY_SUPPORTED


3487 
PNG_EXTERN
 
≤g_do_rgb_to_gøy
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_row_öf›


3488 
row_öfo
, 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3491 #ifde‡
PNG_READ_GRAY_TO_RGB_SUPPORTED


3492 
PNG_EXTERN
 
≤g_do_gøy_to_rgb
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3493 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3496 #ifde‡
PNG_READ_PACK_SUPPORTED


3497 
PNG_EXTERN
 
≤g_do_u≈ack
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3498 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3501 #ifde‡
PNG_READ_SHIFT_SUPPORTED


3502 
PNG_EXTERN
 
≤g_do_unshi·
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

3503 
≤g_cﬁ‹_8p
 
sig_bôs
)Ë
	gPNG_PRIVATE
;

3506 #i‡
deföed
(
PNG_READ_INVERT_SUPPORTED
Ë|| deföed(
PNG_WRITE_INVERT_SUPPORTED
)

3507 
PNG_EXTERN
 
≤g_do_övît
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3508 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3511 #ifde‡
PNG_READ_16_TO_8_SUPPORTED


3512 
PNG_EXTERN
 
≤g_do_ch›
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3513 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3516 #ifde‡
PNG_READ_DITHER_SUPPORTED


3517 
PNG_EXTERN
 
≤g_do_dôhî
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3518 
≤g_byãp
 
row
,Öng_byã∞
∑Àâe_lookup
,

3519 
≤g_byãp
 
dôhî_lookup
)Ë
	gPNG_PRIVATE
;

3521 #ifde‡
PNG_CORRECT_PALETTE_SUPPORTED


3522 
PNG_EXTERN
 
≤g_c‹ª˘_∑Àâe
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3523 
≤g_cﬁ‹p
 
∑Àâe
, 
num_∑Àâe
)Ë
	gPNG_PRIVATE
;

3527 #i‡
deföed
(
PNG_READ_BGR_SUPPORTED
Ë|| deföed(
PNG_WRITE_BGR_SUPPORTED
)

3528 
PNG_EXTERN
 
≤g_do_bgr
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3529 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3532 #ifde‡
PNG_WRITE_PACK_SUPPORTED


3533 
PNG_EXTERN
 
≤g_do_∑ck
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3534 
≤g_byãp
 
row
, 
≤g_uöt_32
 
bô_dïth
)Ë
	gPNG_PRIVATE
;

3537 #ifde‡
PNG_WRITE_SHIFT_SUPPORTED


3538 
PNG_EXTERN
 
≤g_do_shi·
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

3539 
≤g_cﬁ‹_8p
 
bô_dïth
)Ë
	gPNG_PRIVATE
;

3542 #ifde‡
PNG_READ_BACKGROUND_SUPPORTED


3543 #ifde‡
PNG_READ_GAMMA_SUPPORTED


3544 
PNG_EXTERN
 
≤g_do_background
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

3545 
≤g_cﬁ‹_16p
 
å™s_vÆues
,Öng_cﬁ‹_16∞
background
,

3546 
≤g_cﬁ‹_16p
 
background_1
,

3547 
≤g_byãp
 
gamma_èbÀ
,Öng_byã∞
gamma_‰om_1
,Öng_byã∞
gamma_to_1
,

3548 
≤g_uöt_16µ
 
gamma_16
,Öng_uöt_16µ 
gamma_16_‰om_1
,

3549 
≤g_uöt_16µ
 
gamma_16_to_1
, 
gamma_shi·
)Ë
	gPNG_PRIVATE
;

3551 
PNG_EXTERN
 
≤g_do_background
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

3552 
≤g_cﬁ‹_16p
 
å™s_vÆues
,Öng_cﬁ‹_16∞
background
)Ë
	gPNG_PRIVATE
;

3556 #ifde‡
PNG_READ_GAMMA_SUPPORTED


3557 
PNG_EXTERN
 
≤g_do_gamma
 
PNGARG
((
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

3558 
≤g_byãp
 
gamma_èbÀ
, 
≤g_uöt_16µ
 
gamma_16_èbÀ
,

3559 
gamma_shi·
)Ë
	gPNG_PRIVATE
;

3562 #ifde‡
PNG_READ_EXPAND_SUPPORTED


3563 
PNG_EXTERN
 
≤g_do_ex∑nd_∑Àâe
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3564 
≤g_byãp
 
row
, 
≤g_cﬁ‹p
 
∑Àâe
,Öng_byã∞
å™s
,

3565 
num_å™s
)Ë
	gPNG_PRIVATE
;

3566 
PNG_EXTERN
 
≤g_do_ex∑nd
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3567 
≤g_byãp
 
row
, 
≤g_cﬁ‹_16p
 
å™s_vÆue
)Ë
	gPNG_PRIVATE
;

3575 
PNG_EXTERN
 
≤g_h™dÀ_IHDR
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3576 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3577 
PNG_EXTERN
 
≤g_h™dÀ_PLTE
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3578 
≤g_uöt_32
 
Àngth
));

3579 
PNG_EXTERN
 
≤g_h™dÀ_IEND
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3580 
≤g_uöt_32
 
Àngth
));

3582 #ifde‡
PNG_READ_bKGD_SUPPORTED


3583 
PNG_EXTERN
 
≤g_h™dÀ_bKGD
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3584 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3587 #ifde‡
PNG_READ_cHRM_SUPPORTED


3588 
PNG_EXTERN
 
≤g_h™dÀ_cHRM
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3589 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3592 #ifde‡
PNG_READ_gAMA_SUPPORTED


3593 
PNG_EXTERN
 
≤g_h™dÀ_gAMA
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3594 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3597 #ifde‡
PNG_READ_hIST_SUPPORTED


3598 
PNG_EXTERN
 
≤g_h™dÀ_hIST
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3599 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3602 #ifde‡
PNG_READ_iCCP_SUPPORTED


3603 
≤g_h™dÀ_iCCP
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3604 
≤g_uöt_32
 
Àngth
));

3607 #ifde‡
PNG_READ_iTXt_SUPPORTED


3608 
PNG_EXTERN
 
≤g_h™dÀ_iTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3609 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3612 #ifde‡
PNG_READ_oFFs_SUPPORTED


3613 
PNG_EXTERN
 
≤g_h™dÀ_oFFs
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3614 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3617 #ifde‡
PNG_READ_pCAL_SUPPORTED


3618 
PNG_EXTERN
 
≤g_h™dÀ_pCAL
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3619 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3622 #ifde‡
PNG_READ_pHYs_SUPPORTED


3623 
PNG_EXTERN
 
≤g_h™dÀ_pHYs
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3624 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3627 #ifde‡
PNG_READ_sBIT_SUPPORTED


3628 
PNG_EXTERN
 
≤g_h™dÀ_sBIT
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3629 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3632 #ifde‡
PNG_READ_sCAL_SUPPORTED


3633 
PNG_EXTERN
 
≤g_h™dÀ_sCAL
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3634 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3637 #ifde‡
PNG_READ_sPLT_SUPPORTED


3638 
≤g_h™dÀ_sPLT
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3639 
≤g_uöt_32
 
Àngth
)Ë
PNG_PRIVATE
;

3642 #ifde‡
PNG_READ_sRGB_SUPPORTED


3643 
PNG_EXTERN
 
≤g_h™dÀ_sRGB
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3644 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3647 #ifde‡
PNG_READ_tEXt_SUPPORTED


3648 
PNG_EXTERN
 
≤g_h™dÀ_tEXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3649 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3652 #ifde‡
PNG_READ_tIME_SUPPORTED


3653 
PNG_EXTERN
 
≤g_h™dÀ_tIME
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3654 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3657 #ifde‡
PNG_READ_tRNS_SUPPORTED


3658 
PNG_EXTERN
 
≤g_h™dÀ_tRNS
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3659 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3662 #ifde‡
PNG_READ_zTXt_SUPPORTED


3663 
PNG_EXTERN
 
≤g_h™dÀ_zTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

3664 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3667 
PNG_EXTERN
 
≤g_h™dÀ_unknown
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3668 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3670 
PNG_EXTERN
 
≤g_check_chunk_«me
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3671 
≤g_byãp
 
chunk_«me
)Ë
	gPNG_PRIVATE
;

3674 
PNG_EXTERN
 
≤g_do_ªad_å™sf‹m©i⁄s


3675 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3676 
PNG_EXTERN
 
≤g_do_wrôe_å™sf‹m©i⁄s


3677 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3679 
PNG_EXTERN
 
≤g_öô_ªad_å™sf‹m©i⁄s


3680 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3682 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


3683 
PNG_EXTERN
 
≤g_push_ªad_chunk
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3684 
≤g_öf›
 
öfo_±r
)Ë
	gPNG_PRIVATE
;

3685 
PNG_EXTERN
 
≤g_push_ªad_sig
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3686 
≤g_öf›
 
öfo_±r
)Ë
	gPNG_PRIVATE
;

3687 
PNG_EXTERN
 
≤g_push_check_¸c
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3688 
PNG_EXTERN
 
≤g_push_¸c_skù
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3689 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3690 
PNG_EXTERN
 
≤g_push_¸c_föish
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3691 
PNG_EXTERN
 
≤g_push_ßve_buf„r
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3692 
PNG_EXTERN
 
≤g_push_ª°‹e_buf„r
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3693 
≤g_byãp
 
buf„r
, 
≤g_size_t
 
buf„r_Àngth
)Ë
	gPNG_PRIVATE
;

3694 
PNG_EXTERN
 
≤g_push_ªad_IDAT
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3695 
PNG_EXTERN
 
≤g_¥o˚ss_IDAT_d©a
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3696 
≤g_byãp
 
buf„r
, 
≤g_size_t
 
buf„r_Àngth
)Ë
	gPNG_PRIVATE
;

3697 
PNG_EXTERN
 
≤g_push_¥o˚ss_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3698 
PNG_EXTERN
 
≤g_push_h™dÀ_unknown
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3699 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3700 
PNG_EXTERN
 
≤g_push_have_öfo
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3701 
≤g_öf›
 
öfo_±r
)Ë
	gPNG_PRIVATE
;

3702 
PNG_EXTERN
 
≤g_push_have_íd
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3703 
≤g_öf›
 
öfo_±r
)Ë
	gPNG_PRIVATE
;

3704 
PNG_EXTERN
 
≤g_push_have_row
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3705 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3706 
PNG_EXTERN
 
≤g_push_ªad_íd
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3707 
≤g_öf›
 
öfo_±r
)Ë
	gPNG_PRIVATE
;

3708 
PNG_EXTERN
 
≤g_¥o˚ss_some_d©a
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3709 
≤g_öf›
 
öfo_±r
)Ë
	gPNG_PRIVATE
;

3710 
PNG_EXTERN
 
≤g_ªad_push_föish_row


3711 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3712 #ifde‡
PNG_READ_tEXt_SUPPORTED


3713 
PNG_EXTERN
 
≤g_push_h™dÀ_tEXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3714 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3715 
PNG_EXTERN
 
≤g_push_ªad_tEXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3716 
≤g_öf›
 
öfo_±r
)Ë
	gPNG_PRIVATE
;

3718 #ifde‡
PNG_READ_zTXt_SUPPORTED


3719 
PNG_EXTERN
 
≤g_push_h™dÀ_zTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3720 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3721 
PNG_EXTERN
 
≤g_push_ªad_zTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3722 
≤g_öf›
 
öfo_±r
)Ë
	gPNG_PRIVATE
;

3724 #ifde‡
PNG_READ_iTXt_SUPPORTED


3725 
PNG_EXTERN
 
≤g_push_h™dÀ_iTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3726 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)Ë
	gPNG_PRIVATE
;

3727 
PNG_EXTERN
 
≤g_push_ªad_iTXt
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3728 
≤g_öf›
 
öfo_±r
)Ë
	gPNG_PRIVATE
;

3733 #ifde‡
PNG_MNG_FEATURES_SUPPORTED


3734 
PNG_EXTERN
 
≤g_do_ªad_öå≠ixñ
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3735 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3736 
PNG_EXTERN
 
≤g_do_wrôe_öå≠ixñ
 
PNGARG
((
≤g_row_öf›
 
row_öfo
,

3737 
≤g_byãp
 
row
)Ë
	gPNG_PRIVATE
;

3740 #ifde‡
PNG_ASSEMBLER_CODE_SUPPORTED


3741 #ifde‡
PNG_MMX_CODE_SUPPORTED


3743 
PNG_EXTERN
 
≤g_öô_mmx_Êags
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3749 #i‡
deföed
(
PNG_INCH_CONVERSIONS
Ë&& deföed(
PNG_FLOATING_POINT_SUPPORTED
)

3750 
PNG_EXTERN
 
≤g_uöt_32
 
≤g_gë_pixñs_≥r_öch
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3751 
≤g_öf›
 
öfo_±r
));

3753 
PNG_EXTERN
 
≤g_uöt_32
 
≤g_gë_x_pixñs_≥r_öch
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3754 
≤g_öf›
 
öfo_±r
));

3756 
PNG_EXTERN
 
≤g_uöt_32
 
≤g_gë_y_pixñs_≥r_öch
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3757 
≤g_öf›
 
öfo_±r
));

3759 
PNG_EXTERN
 
≤g_gë_x_off£t_öches
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3760 
≤g_öf›
 
öfo_±r
));

3762 
PNG_EXTERN
 
≤g_gë_y_off£t_öches
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3763 
≤g_öf›
 
öfo_±r
));

3765 #ifde‡
PNG_pHYs_SUPPORTED


3766 
PNG_EXTERN
 
≤g_uöt_32
 
≤g_gë_pHYs_dpi
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3767 
≤g_öf›
 
öfo_±r
, 
≤g_uöt_32
 *
ªs_x
,Öng_uöt_32 *
ªs_y
, *
unô_ty≥
));

3772 
PNG_EXTERN
 
≤g_uöt_32
 
≤g_ªad_chunk_hódî


3773 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
)Ë
	gPNG_PRIVATE
;

3776 #ifde‡
PNG_cHRM_SUPPORTED


3777 
PNG_EXTERN
 
≤g_check_cHRM_fixed
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3778 
≤g_fixed_poöt
 
öt_whôe_x
,Öng_fixed_poöà
öt_whôe_y
,

3779 
≤g_fixed_poöt
 
öt_ªd_x
,Öng_fixed_poöà
öt_ªd_y
,Öng_fixed_point

3780 
öt_gªí_x
, 
≤g_fixed_poöt
 
öt_gªí_y
,Öng_fixed_poöà
öt_blue_x
,

3781 
≤g_fixed_poöt
 
öt_blue_y
)Ë
	gPNG_PRIVATE
;

3784 #ifde‡
PNG_cHRM_SUPPORTED


3785 #ifde‡
PNG_CHECK_cHRM_SUPPORTED


3787 
PNG_EXTERN
 
≤g_64bô_¥odu˘
 
PNGARG
((
v1
, 
v2
,

3788 *
hi_¥odu˘
, *
lo_¥odu˘
)Ë
	gPNG_PRIVATE
;

3793 
PNG_EXTERN
 
≤g_check_IHDR
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3794 
≤g_uöt_32
 
width
,Öng_uöt_32 
height
, 
bô_dïth
,

3795 
cﬁ‹_ty≥
, 
öãæa˚_ty≥
, 
com¥essi⁄_ty≥
,

3796 
fûãr_ty≥
)Ë
	gPNG_PRIVATE
;

3799 
PNG_EXTERN
 
≤g_voidp
 
≤g_ˇŒoc
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

3800 
≤g_uöt_32
 
size
));

3806 #ifde‡
__˝lu•lus


	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


86 #i‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 1

87 
	#__PTHREAD_SPINS
 0, 0

	)

88 #ñi‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 2

89 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

91 
	#__PTHREAD_SPINS
 0

	)

94 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


95 
	#PTHREAD_MUTEX_INITIALIZER
 \

96 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

97 #ifde‡
__USE_GNU


98 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

100 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

101 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

102 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

103 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

104 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

105 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

109 
	#PTHREAD_MUTEX_INITIALIZER
 \

110 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

111 #ifde‡
__USE_GNU


112 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

113 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

114 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

115 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

116 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

117 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

124 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


127 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

128 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

129 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

130 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


136 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


137 #i‡
__WORDSIZE
 == 64

138 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

143 
	#PTHREAD_RWLOCK_INITIALIZER
 \

144 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

145 #ifde‡
__USE_GNU


146 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


147 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

149 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

151 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


152 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

153 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

154 0, 0, 0, 0 } }

	)

156 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

157 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

158 0 } }

	)

168 
	mPTHREAD_INHERIT_SCHED
,

169 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

170 
	mPTHREAD_EXPLICIT_SCHED


171 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

178 
	mPTHREAD_SCOPE_SYSTEM
,

179 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

180 
	mPTHREAD_SCOPE_PROCESS


181 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

188 
	mPTHREAD_PROCESS_PRIVATE
,

189 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

190 
	mPTHREAD_PROCESS_SHARED


191 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

197 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

201 
	s_±hªad_˛ónup_buf„r


203 (*
	m__routöe
) (*);

204 *
	m__¨g
;

205 
	m__ˇn˚…y≥
;

206 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

212 
	mPTHREAD_CANCEL_ENABLE
,

213 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

214 
	mPTHREAD_CANCEL_DISABLE


215 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

219 
	mPTHREAD_CANCEL_DEFERRED
,

220 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

221 
	mPTHREAD_CANCEL_ASYNCHRONOUS


222 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

224 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

228 
	#PTHREAD_ONCE_INIT
 0

	)

231 #ifde‡
__USE_XOPEN2K


235 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

239 
__BEGIN_DECLS


244 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

245 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

246 *(*
__°¨t_routöe
) (*),

247 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

253 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

261 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

263 #ifde‡
__USE_GNU


266 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

274 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

275 c⁄° 
time•ec
 *
__ab°ime
);

282 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

286 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

289 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

290 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

298 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

301 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 *
__dëach°©e
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

311 
__dëach°©e
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

317 
size_t
 *
__gu¨dsize
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

322 
size_t
 
__gu¨dsize
)

323 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

328 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

333 c⁄° 
sched_∑øm
 *
__ª°ri˘


334 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

337 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


338 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

342 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

343 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


347 
__©å
, *
__ª°ri˘
 
__öhîô
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

352 
__öhîô
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

357 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

358 *
__ª°ri˘
 
__sc›e
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

362 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

363 
__THROW
 
	`__n⁄nuŒ
 ((1));

366 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


367 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

374 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

375 *
__°ackaddr
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

379 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


380 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

381 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

387 
size_t
 
__°acksize
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1));

390 #ifde‡
__USE_XOPEN2K


392 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

393 **
__ª°ri˘
 
__°ackaddr
,

394 
size_t
 *
__ª°ri˘
 
__°acksize
)

395 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

400 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

401 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

404 #ifde‡
__USE_GNU


407 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

408 
size_t
 
__˝u£tsize
,

409 c⁄° 
˝u_£t_t
 *
__˝u£t
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

414 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

415 
size_t
 
__˝u£tsize
,

416 
˝u_£t_t
 *
__˝u£t
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

420 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((1));

425 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

426 
__THROW
 
	`__n⁄nuŒ
 ((1));

431 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

441 c⁄° 
sched_∑øm
 *
__∑øm
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3));

445 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

446 *
__ª°ri˘
 
__pﬁicy
,

447 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

451 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

452 
__THROW
;

455 #ifde‡
__USE_GNU


457 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

458 
size_t
 
__buÊí
)

459 
__THROW
 
	`__n⁄nuŒ
 ((2));

462 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

463 
__THROW
 
	`__n⁄nuŒ
 ((2));

467 #ifde‡
__USE_UNIX98


469 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

472 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

475 #ifde‡
__USE_GNU


480 
	$±hªad_yõld
 (Ë
__THROW
;

485 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

486 c⁄° 
˝u_£t_t
 *
__˝u£t
)

487 
__THROW
 
	`__n⁄nuŒ
 ((3));

490 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

491 
˝u_£t_t
 *
__˝u£t
)

492 
__THROW
 
	`__n⁄nuŒ
 ((3));

505 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

506 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

517 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

521 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

524 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

529 
	`±hªad_ã°ˇn˚l
 ();

538 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

539 
__mask_was_ßved
;

540 } 
__ˇn˚l_jmp_buf
[1];

541 *
__∑d
[4];

542 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

545 #i‚de‡
__˛ónup_f˘_©åibuã


546 
	#__˛ónup_f˘_©åibuã


	)

551 
	s__±hªad_˛ónup_‰ame


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

559 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


560 #ifde‡
__˝lu•lus


562 ˛as†
	c__±hªad_˛ónup_˛ass


564 (*
__ˇn˚l_routöe
) (*);

565 *
__ˇn˚l_¨g
;

566 
__do_ô
;

567 
__ˇn˚l_ty≥
;

569 
public
:

570 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

571 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

572 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

573 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

574 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

575 &
__ˇn˚l_ty≥
); 
	}
}

576 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

586 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

588 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

592 
	#±hªad_˛ónup_p›
(
execuã
) \

593 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

594 } 0)

	)

596 #ifde‡
__USE_GNU


600 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

602 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

603 
__˛‰ame
.
	`__de„r
 ()

	)

608 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

609 
__˛‰ame
.
	`__ª°‹e
 (); \

610 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

611 } 0)

	)

618 
__exã∫_ölöe
 

619 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

621 i‡(
__‰ame
->
__do_ô
)

622 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

623 
	}
}

632 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

634 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

635 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

636 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

637 .
__do_ô
 = 1 };

	)

641 
	#±hªad_˛ónup_p›
(
execuã
) \

642 
__˛‰ame
.
__do_ô
 = (
execuã
); \

643 } 0)

	)

645 #ifde‡
__USE_GNU


649 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

651 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

652 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

653 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

654 .
__do_ô
 = 1 }; \

655 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

656 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

661 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

662 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

663 
__˛‰ame
.
__do_ô
 = (
execuã
); \

664 } 0)

	)

675 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

677 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

678 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

679 *
__ˇn˚l_¨g
 = (
¨g
); \

680 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

681 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

682 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

684 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

685 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

689 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

690 dÿ{

	)

691 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

692 
__˛ónup_f˘_©åibuã
;

696 
	#±hªad_˛ónup_p›
(
execuã
) \

699 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

700 i‡(
execuã
) \

701 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

702 } 0)

	)

703 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

704 
__˛ónup_f˘_©åibuã
;

706 #ifde‡
__USE_GNU


710 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

712 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

713 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

714 *
__ˇn˚l_¨g
 = (
¨g
); \

715 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

716 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

717 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

719 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

720 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

724 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

725 dÿ{

	)

726 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

727 
__˛ónup_f˘_©åibuã
;

732 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

735 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

736 i‡(
execuã
) \

737 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

738 
	}
} 0)

	)

739 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

740 
__˛ónup_f˘_©åibuã
;

744 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

745 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

746 #i‚de‡
SHARED


747 
	`__©åibuã__
 ((
__wók__
))

753 
__jmp_buf_èg
;

754 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

760 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

761 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

762 
__THROW
 
	`__n⁄nuŒ
 ((1));

765 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

766 
__THROW
 
	`__n⁄nuŒ
 ((1));

769 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

770 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

773 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

776 #ifde‡
__USE_XOPEN2K


778 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

779 c⁄° 
time•ec
 *
__ª°ri˘


780 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

784 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

785 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

789 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

790 
__ª°ri˘
 
__muãx
,

791 *
__ª°ri˘
 
__¥io˚ûög
)

792 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

796 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

797 
__¥io˚ûög
,

798 *
__ª°ri˘
 
__ﬁd_˚ûög
)

799 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

802 #ifde‡
__USE_XOPEN2K8


804 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

805 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 #ifde‡
__USE_GNU


807 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1));

817 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

821 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

826 
__ª°ri˘
 
__©å
,

827 *
__ª°ri˘
 
__psh¨ed
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

831 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

832 
__psh¨ed
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1));

835 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


837 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


838 
__©å
, *
__ª°ri˘
 
__köd
)

839 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

844 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

845 
__THROW
 
	`__n⁄nuŒ
 ((1));

849 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

850 
__ª°ri˘
 
__©å
,

851 *
__ª°ri˘
 
__¥Ÿocﬁ
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥Ÿocﬁ
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

862 
__ª°ri˘
 
__©å
,

863 *
__ª°ri˘
 
__¥io˚ûög
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

867 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

868 
__¥io˚ûög
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1));

871 #ifde‡
__USE_XOPEN2K


873 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

874 *
__robu°√ss
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

876 #ifde‡
__USE_GNU


877 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

878 *
__robu°√ss
)

879 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

883 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

884 
__robu°√ss
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #ifde‡
__USE_GNU


887 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

888 
__robu°√ss
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1));

894 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


899 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

900 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


901 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

904 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

905 
__THROW
 
	`__n⁄nuŒ
 ((1));

908 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

909 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

912 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

915 #ifde‡
__USE_XOPEN2K


917 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

918 c⁄° 
time•ec
 *
__ª°ri˘


919 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

923 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

924 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

927 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

930 #ifde‡
__USE_XOPEN2K


932 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

933 c⁄° 
time•ec
 *
__ª°ri˘


934 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

938 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

939 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

945 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

946 
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__psh¨ed
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__psh¨ed
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1));

964 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

965 
__ª°ri˘
 
__©å
,

966 *
__ª°ri˘
 
__¥ef
)

967 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

970 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

971 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

979 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

980 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

981 
__THROW
 
	`__n⁄nuŒ
 ((1));

984 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

985 
__THROW
 
	`__n⁄nuŒ
 ((1));

988 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

989 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

992 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

993 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

1002 
	`__n⁄nuŒ
 ((1, 2));

1011 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1012 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1013 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1014 
	`__n⁄nuŒ
 ((1, 2, 3));

1019 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1024 
__THROW
 
	`__n⁄nuŒ
 ((1));

1027 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 *
__ª°ri˘
 
__psh¨ed
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 #ifde‡
__USE_XOPEN2K


1038 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1039 
__ª°ri˘
 
__©å
,

1040 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1044 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1045 
__˛ockid_t
 
__˛ock_id
)

1046 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 #ifde‡
__USE_XOPEN2K


1055 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1056 
__THROW
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1060 
__THROW
 
	`__n⁄nuŒ
 ((1));

1063 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1064 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1068 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1072 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1079 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1080 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1081 
__©å
, 
__cou¡
)

1082 
__THROW
 
	`__n⁄nuŒ
 ((1));

1085 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1086 
__THROW
 
	`__n⁄nuŒ
 ((1));

1089 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1090 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1094 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1095 
__THROW
 
	`__n⁄nuŒ
 ((1));

1098 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1102 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1103 
__ª°ri˘
 
__©å
,

1104 *
__ª°ri˘
 
__psh¨ed
)

1105 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1108 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1109 
__psh¨ed
)

1110 
__THROW
 
	`__n⁄nuŒ
 ((1));

1122 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1123 (*
__de°r_fun˘i⁄
) (*))

1124 
__THROW
 
	`__n⁄nuŒ
 ((1));

1127 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1130 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1133 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1134 c⁄° *
__poöãr
Ë
__THROW
 ;

1137 #ifde‡
__USE_XOPEN2K


1139 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1140 
__˛ockid_t
 *
__˛ock_id
)

1141 
__THROW
 
	`__n⁄nuŒ
 ((2));

1156 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1157 (*
__∑ª¡
) (),

1158 (*
__chûd
Ë()Ë
__THROW
;

1161 #ifde‡
__USE_EXTERN_INLINES


1163 
__exã∫_ölöe
 

1164 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1166  
__thªad1
 =
__thªad2
;

1167 
	}
}

1170 
	g__END_DECLS


	@/usr/include/pulse/pulseaudio.h

1 #i‚de‡
fo›ul£audiohfoo


2 
	#fo›ul£audiohfoo


	)

26 
	~<pul£/maölo›-≠i.h
>

27 
	~<pul£/ßm∂e.h
>

28 
	~<pul£/f‹m©.h
>

29 
	~<pul£/def.h
>

30 
	~<pul£/c⁄ãxt.h
>

31 
	~<pul£/°ªam.h
>

32 
	~<pul£/öåo•e˘.h
>

33 
	~<pul£/subs¸ibe.h
>

34 
	~<pul£/sˇche.h
>

35 
	~<pul£/vîsi⁄.h
>

36 
	~<pul£/îr‹.h
>

37 
	~<pul£/›î©i⁄.h
>

38 
	~<pul£/ch™√lm≠.h
>

39 
	~<pul£/vﬁume.h
>

40 
	~<pul£/xmÆloc.h
>

41 
	~<pul£/utf8.h
>

42 
	~<pul£/thªad-maölo›.h
>

43 
	~<pul£/maölo›.h
>

44 
	~<pul£/maölo›-sig«l.h
>

45 
	~<pul£/utû.h
>

46 
	~<pul£/timevÆ.h
>

47 
	~<pul£/¥›li°.h
>

48 
	~<pul£/π˛ock.h
>

	@/usr/include/semaphore.h

18 #i‚de‡
_SEMAPHORE_H


19 
	#_SEMAPHORE_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 #ifde‡
__USE_XOPEN2K


24 
	#__√ed_time•ec


	)

25 
	~<time.h
>

29 
	~<bôs/£m≠h‹e.h
>

32 
__BEGIN_DECLS


36 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

37 
__THROW
;

39 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

42 
£m_t
 *
	$£m_›í
 (c⁄° *
__«me
, 
__oÊag
, ...Ë
__THROW
;

45 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

48 
	$£m_u∆ök
 (c⁄° *
__«me
Ë
__THROW
;

54 
	`£m_waô
 (
£m_t
 *
__£m
);

56 #ifde‡
__USE_XOPEN2K


61 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

62 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

66 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROWNL
;

69 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROWNL
;

72 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

73 
__THROW
;

76 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_BSD


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_SVID


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 #ifde‡
__USE_XOPEN2K


156 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

167 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

169 #ifde‡
__USE_XOPEN


170 #ifde‡
__GNUC__


171 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

174 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

179 #ifde‡
__USE_BSD


186 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

189 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

192 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

195 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 #ifde‡
__USE_MISC


200 
	#NSIG
 
_NSIG


	)

203 #ifde‡
__USE_GNU


204 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

208 #ifde‡
__USE_BSD


209 
__sigh™dÀr_t
 
	tsig_t
;

212 #ifde‡
__USE_POSIX


215 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

228 
__THROW
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__USE_GNU


232 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

235 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

236 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

239 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

240 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

245 
	~<bôs/siga˘i⁄.h
>

248 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

249 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

256 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

259 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

260 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

263 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

270 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

271 
	`__n⁄nuŒ
 ((1, 2));

273 #ifde‡
__USE_POSIX199309


278 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

279 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

286 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

287 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

288 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

289 
	`__n⁄nuŒ
 ((1));

293 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

294 
__THROW
;

299 #ifde‡
__USE_BSD


303 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

304 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

307 
	ssigvec


309 
__sigh™dÀr_t
 
sv_h™dÀr
;

310 
sv_mask
;

312 
sv_Êags
;

313 
	#sv_⁄°ack
 
sv_Êags


	)

317 
	#SV_ONSTACK
 (1 << 0)

	)

318 
	#SV_INTERRUPT
 (1 << 1)

	)

319 
	#SV_RESETHAND
 (1 << 2)

	)

327 
	$sigvec
 (
__sig
, c⁄° 
sigvec
 *
__vec
,

328 
sigvec
 *
__ovec
Ë
__THROW
;

332 
	~<bôs/sigc⁄ãxt.h
>

335 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

340 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


341 
	#__√ed_size_t


	)

342 
	~<°ddef.h
>

347 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

349 
	~<bôs/sig°ack.h
>

350 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


352 
	~<sys/uc⁄ãxt.h
>

358 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

359 
__THROW
 
__©åibuã_dïªˇãd__
;

363 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

364 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

368 #ifde‡
__USE_XOPEN_EXTENDED


372 
	$sighﬁd
 (
__sig
Ë
__THROW
;

375 
	$sigªl£
 (
__sig
Ë
__THROW
;

378 
	$sigign‹e
 (
__sig
Ë
__THROW
;

381 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

384 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


387 
	~<bôs/±hªadty≥s.h
>

388 
	~<bôs/sigthªad.h
>

395 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

397 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

401 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 
	#SIZE_MAX
 (4294967295U)

	)

267 #i‚de‡
WCHAR_MIN


269 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

270 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

274 
	#WINT_MIN
 (0u)

	)

275 
	#WINT_MAX
 (4294967295u)

	)

278 
	#INT8_C
(
c
Ë
	)
c

279 
	#INT16_C
(
c
Ë
	)
c

280 
	#INT32_C
(
c
Ë
	)
c

281 #i‡
__WORDSIZE
 == 64

282 
	#INT64_C
(
c
Ë¯## 
L


	)

284 
	#INT64_C
(
c
Ë¯## 
LL


	)

288 
	#UINT8_C
(
c
Ë
	)
c

289 
	#UINT16_C
(
c
Ë
	)
c

290 
	#UINT32_C
(
c
Ë¯## 
U


	)

291 #i‡
__WORDSIZE
 == 64

292 
	#UINT64_C
(
c
Ë¯## 
UL


	)

294 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

298 #i‡
__WORDSIZE
 == 64

299 
	#INTMAX_C
(
c
Ë¯## 
L


	)

300 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

302 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

303 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_BSD


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
) (const *, const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

759 #ifde‡
__USE_EXTERN_INLINES


760 
	~<bôs/°dlib-b£¨ch.h
>

765 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

766 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

767 #ifde‡
__USE_GNU


768 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

769 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

770 
	`__n⁄nuŒ
 ((1, 4));

775 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

777 
__END_NAMESPACE_STD


779 #ifde‡
__USE_ISOC99


780 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

785 
__BEGIN_NAMESPACE_STD


789 
div_t
 
	$div
 (
__numî
, 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

792 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

793 
__END_NAMESPACE_STD


795 #ifde‡
__USE_ISOC99


796 
__BEGIN_NAMESPACE_C99


797 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

798 
__díom
)

799 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

800 
__END_NAMESPACE_C99


804 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

805 || 
deföed
 
__USE_SVID


812 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

813 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

818 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

819 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

824 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

828 #ifde‡
__USE_MISC


830 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

831 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

833 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

834 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

835 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

836 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

842 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

843 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

844 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

846 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

847 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

853 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

854 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

855 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

856 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

860 
__BEGIN_NAMESPACE_STD


863 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

866 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

867 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

870 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

874 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

875 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

877 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

878 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

879 
__THROW
;

880 
__END_NAMESPACE_STD


883 #ifde‡
__USE_SVID


888 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


899 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

900 *c⁄° *
__ª°ri˘
 
__tokís
,

901 **
__ª°ri˘
 
__vÆuï
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

906 #ifde‡
__USE_XOPEN


908 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

914 #ifde‡
__USE_XOPEN2KXSI


916 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

919 #ifde‡
__USE_XOPEN


924 
	$gø¡±
 (
__fd
Ë
__THROW
;

928 
	$u∆ock±
 (
__fd
Ë
__THROW
;

933 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

936 #ifde‡
__USE_GNU


940 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

941 
__THROW
 
	`__n⁄nuŒ
 ((2));

944 
	`gë±
 ();

947 #ifde‡
__USE_BSD


951 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

955 
	~<bôs/°dlib-Êﬂt.h
>

958 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


959 
	~<bôs/°dlib.h
>

961 #ifde‡
__LDBL_COMPAT


962 
	~<bôs/°dlib-ldbl.h
>

966 #unde‡
__√ed_mÆloc_™d_ˇŒoc


968 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

39 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

40 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

47 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

51 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


58 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

59 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

69 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

73 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


76 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


91  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

99 
__END_NAMESPACE_STD


101 #ifde‡
__USE_GNU


104 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


105 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

108 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

110 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

111 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


116 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

118 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

133 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

141 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

151 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

154 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

155 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

156 
__THROW
 
	`__n⁄nuŒ
 ((2));

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_XOPEN2K8


163 
	~<xloˇÀ.h
>

166 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

169 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

170 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

173 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

174 || 
deföed
 
__USE_XOPEN2K8


176 *
	$°rdup
 (c⁄° *
__s
)

177 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_XOPEN2K8


184 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

185 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

188 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


190 
	#°rdu∑
(
s
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

196 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

197 
	}
}))

	)

200 
	#°∫du∑
(
s
, 
n
) \

201 (
__exãnsi⁄__
 \

203 c⁄° *
__ﬁd
 = (
s
); \

204 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

205 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

206 
__√w
[
__Àn
] = '\0'; \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 }))

	)

211 
	g__BEGIN_NAMESPACE_STD


213 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


216 *
°rchr
 (*
__s
, 
__c
)

217 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

219 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

221 #ifde‡
__OPTIMIZE__


222 
__exã∫_Æways_ölöe
 *

223 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


225  
__buûtö_°rchr
 (
__s
, 
__c
);

228 
__exã∫_Æways_ölöe
 const *

229 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


231  
__buûtö_°rchr
 (
__s
, 
__c
);

236 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

237 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


243 *
	`°ºchr
 (*
__s
, 
__c
)

244 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

246 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

248 #ifde‡
__OPTIMIZE__


249 
__exã∫_Æways_ölöe
 *

250 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


252  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

255 
__exã∫_Æways_ölöe
 const *

256 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


258  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

261 
	}
}

263 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 
__END_NAMESPACE_STD


268 #ifde‡
__USE_GNU


271 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


272 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

273 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

275 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

282 
__BEGIN_NAMESPACE_STD


285 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

290 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


295 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

296 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__OPTIMIZE__


301 
__exã∫_Æways_ölöe
 *

302 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


304  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

307 
__exã∫_Æways_ölöe
 const *

308 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


310  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

313 
	}
}

315 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

316 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


322 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

324 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 const *

335 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 c⁄° *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

370 c⁄° *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (c⁄° *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 const *

482 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (c⁄° *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 const *

510 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (c⁄° *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

530 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 c⁄° *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

24 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_BSD


26 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

36 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

39 
	g__BEGIN_DECLS


41 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


43 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

44 
__THROW
 
__©åibuã_puª__
;

47 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

50 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

53 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


56 *
	`ödex
 (*
__s
, 
__c
)

57 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

58 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

59 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

61 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


62 
__exã∫_Æways_ölöe
 *

63 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


65  
	`__buûtö_ödex
 (
__s
, 
__c
);

68 
__exã∫_Æways_ölöe
 const *

69 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


71  
	`__buûtö_ödex
 (
__s
, 
__c
);

74 
	}
}

76 *
	$ödex
 (c⁄° *
__s
, 
__c
)

77 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


84 *
	`rödex
 (*
__s
, 
__c
)

85 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

86 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

87 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

89 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


90 
__exã∫_Æways_ölöe
 *

91 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


93  
	`__buûtö_rödex
 (
__s
, 
__c
);

96 
__exã∫_Æways_ölöe
 const *

97 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


99  
	`__buûtö_rödex
 (
__s
, 
__c
);

102 
	}
}

104 *
	$rödex
 (c⁄° *
__s
, 
__c
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


112 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
;

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
;

123 #ifdef 
__USE_XOPEN2K8


127 
	~<xloˇÀ.h
>

131 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__loc
)

132 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

134 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

135 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

136 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

139 
__END_DECLS


	@/usr/include/termios.h

22 #i‚def 
_TERMIOS_H


23 
	#_TERMIOS_H
 1

	)

25 
	~<„©uªs.h
>

26 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


28 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__pid_t_deföed


30 
__pid_t
 
	tpid_t
;

31 
	#__pid_t_deföed


	)

35 
	g__BEGIN_DECLS


39 
	~<bôs/ãrmios.h
>

41 #ifde‡
__USE_BSD


44 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

48 
•ìd_t
 
	$cfgëo•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

51 
•ìd_t
 
	$cfgëi•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

54 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

57 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

59 #ifdef 
__USE_BSD


61 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

66 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

70 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

71 c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

74 #ifdef 
__USE_BSD


76 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

80 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

86 
	`tcdøö
 (
__fd
);

90 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

94 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

97 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


99 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

103 #ifde‡
__USE_BSD


104 
	~<sys/âydeÁu…s.h
>

107 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_BSD


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_BSD


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_BSD


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #i‡
deföed
 
__USE_BSD
 \

782 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

785 
	$ây¶Ÿ
 (Ë
__THROW
;

790 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

793 #ifde‡
__USE_ATFILE


796 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

797 c⁄° *
__to
, 
__Êags
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

801 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


803 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

810 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

814 #ifde‡
__USE_ATFILE


816 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

817 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

820 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

821 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

822 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

826 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

828 #ifde‡
__USE_ATFILE


830 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

831 
__THROW
 
	`__n⁄nuŒ
 ((2));

835 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

839 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

842 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

849 *
	`gëlogö
 ();

850 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


857 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

860 #ifdef 
__USE_BSD


862 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #ifdef 
__USE_POSIX2


870 
	#__√ed_gë›t


	)

871 
	~<gë›t.h
>

875 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


879 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

886 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

887 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

897 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

899 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

906 
	$vh™gup
 (Ë
__THROW
;

909 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

917 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

918 
size_t
 
__off£t
, 
__sˇÀ
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

925 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

929 *
	$gëu£rshñl
 (Ë
__THROW
;

930 
	$ídu£rshñl
 (Ë
__THROW
;

931 
	$£tu£rshñl
 (Ë
__THROW
;

937 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

941 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

944 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

948 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

956 
	`fsync
 (
__fd
);

959 #ifde‡
__USE_GNU


962 
	$syncfs
 (
__fd
Ë
__THROW
;

966 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


969 
	`gëho°id
 ();

972 
	$sync
 (Ë
__THROW
;

975 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


978 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

983 
	$gëdèbÀsize
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


992 #i‚de‡
__USE_FILE_OFFSET64


993 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

994 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

996 #ifde‡
__REDIRECT_NTH


997 
	`__REDIRECT_NTH
 (
åunˇã
,

998 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

999 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 
	#åunˇã
 
åunˇã64


	)

1004 #ifde‡
__USE_LARGEFILE64


1005 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1011 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX199309
 \

1012 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1015 #i‚de‡
__USE_FILE_OFFSET64


1016 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1020 
·runˇã64
Ë
__wur
;

1022 
	#·runˇã
 
·runˇã64


	)

1025 #ifde‡
__USE_LARGEFILE64


1026 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1032 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1033 || 
deföed
 
__USE_MISC


1037 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1043 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1047 #ifde‡
__USE_MISC


1058 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1063 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1075 
	#F_ULOCK
 0

	)

1076 
	#F_LOCK
 1

	)

1077 
	#F_TLOCK
 2

	)

1078 
	#F_TEST
 3

	)

1080 #i‚de‡
__USE_FILE_OFFSET64


1081 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1083 #ifde‡
__REDIRECT


1084 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1085 
lockf64
Ë
__wur
;

1087 
	#lockf
 
lockf64


	)

1090 #ifde‡
__USE_LARGEFILE64


1091 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__USE_GNU


1101 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1102 (
__exãnsi⁄__
 \

1103 ({ 
__ªsu…
; \

1104 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1105 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1106 
__ªsu…
; 
	}
}))

	)

1109 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1112 
fd©async
 (
__fûdes
);

1118 #ifdef 
__USE_XOPEN


1120 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1121 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1125 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1126 
__THROW
 
	`__n⁄nuŒ
 ((1));

1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1140 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1142 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1147 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1148 
	~<bôs/uni°d.h
>

1151 
__END_DECLS


	@/usr/include/zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.2.8"

	)

41 
	#ZLIB_VERNUM
 0x1280

	)

42 
	#ZLIB_VER_MAJOR
 1

	)

43 
	#ZLIB_VER_MINOR
 2

	)

44 
	#ZLIB_VER_REVISION
 8

	)

45 
	#ZLIB_VER_SUBREVISION
 0

	)

80 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

81 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

83 
öã∫Æ_°©e
;

85 
	sz_°ªam_s
 {

86 
z_c⁄°
 
Byãf
 *
√xt_ö
;

87 
uI¡
 
avaû_ö
;

88 
uL⁄g
 
tŸÆ_ö
;

90 
Byãf
 *
√xt_out
;

91 
uI¡
 
avaû_out
;

92 
uL⁄g
 
tŸÆ_out
;

94 
z_c⁄°
 *
msg
;

95 
öã∫Æ_°©e
 
FAR
 *
°©e
;

97 
Æloc_func
 
zÆloc
;

98 
‰ì_func
 
z‰ì
;

99 
voidpf
 
›aque
;

101 
d©a_ty≥
;

102 
uL⁄g
 
adÀr
;

103 
uL⁄g
 
ª£rved
;

104 } 
	tz_°ªam
;

106 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

112 
	sgz_hódî_s
 {

113 
ãxt
;

114 
uL⁄g
 
time
;

115 
xÊags
;

116 
os
;

117 
Byãf
 *
exåa
;

118 
uI¡
 
exåa_Àn
;

119 
uI¡
 
exåa_max
;

120 
Byãf
 *
«me
;

121 
uI¡
 
«me_max
;

122 
Byãf
 *
commít
;

123 
uI¡
 
comm_max
;

124 
h¸c
;

125 
d⁄e
;

127 } 
	tgz_hódî
;

129 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

164 
	#Z_NO_FLUSH
 0

	)

165 
	#Z_PARTIAL_FLUSH
 1

	)

166 
	#Z_SYNC_FLUSH
 2

	)

167 
	#Z_FULL_FLUSH
 3

	)

168 
	#Z_FINISH
 4

	)

169 
	#Z_BLOCK
 5

	)

170 
	#Z_TREES
 6

	)

173 
	#Z_OK
 0

	)

174 
	#Z_STREAM_END
 1

	)

175 
	#Z_NEED_DICT
 2

	)

176 
	#Z_ERRNO
 (-1)

	)

177 
	#Z_STREAM_ERROR
 (-2)

	)

178 
	#Z_DATA_ERROR
 (-3)

	)

179 
	#Z_MEM_ERROR
 (-4)

	)

180 
	#Z_BUF_ERROR
 (-5)

	)

181 
	#Z_VERSION_ERROR
 (-6)

	)

186 
	#Z_NO_COMPRESSION
 0

	)

187 
	#Z_BEST_SPEED
 1

	)

188 
	#Z_BEST_COMPRESSION
 9

	)

189 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

192 
	#Z_FILTERED
 1

	)

193 
	#Z_HUFFMAN_ONLY
 2

	)

194 
	#Z_RLE
 3

	)

195 
	#Z_FIXED
 4

	)

196 
	#Z_DEFAULT_STRATEGY
 0

	)

199 
	#Z_BINARY
 0

	)

200 
	#Z_TEXT
 1

	)

201 
	#Z_ASCII
 
Z_TEXT


	)

202 
	#Z_UNKNOWN
 2

	)

205 
	#Z_DEFLATED
 8

	)

208 
	#Z_NULL
 0

	)

210 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

216 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

246 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

353 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

392 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

508 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

587 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

588 c⁄° 
Byãf
 *
di˘i⁄¨y
,

589 
uI¡
 
di˘Lígth
));

631 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

632 
z_°ªamp
 
sour˚
));

649 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

660 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

661 
Àvñ
,

662 
°øãgy
));

681 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

682 
good_Àngth
,

683 
max_œzy
,

684 
ni˚_Àngth
,

685 
max_chaö
));

698 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

699 
uL⁄g
 
sour˚Lí
));

713 
ZEXTERN
 
ZEXPORT
 
deÊ©ePídög
 
OF
((
z_°ªamp
 
°rm
,

714 *
≥ndög
,

715 *
bôs
));

728 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

729 
bôs
,

730 
vÆue
));

745 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

746 
gz_hódîp
 
hód
));

819 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

820 c⁄° 
Byãf
 *
di˘i⁄¨y
,

821 
uI¡
 
di˘Lígth
));

842 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

843 
Byãf
 *
di˘i⁄¨y
,

844 
uI¡
 *
di˘Lígth
));

857 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

876 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

877 
z_°ªamp
 
sour˚
));

892 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

902 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t2
 
OF
((
z_°ªamp
 
°rm
,

903 
wödowBôs
));

914 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

915 
bôs
,

916 
vÆue
));

935 
ZEXTERN
 
ZEXPORT
 
öÊ©eM¨k
 
OF
((
z_°ªamp
 
°rm
));

963 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

964 
gz_hódîp
 
hód
));

1025 (*
ö_func
Ë
	tOF
((
	tFAR
 *,

1026 
	tz_c⁄°
 
	tFAR
 * FAR *));

1027 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

1029 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

1030 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

1031 
out_func
 
out
, 
FAR
 *
out_desc
));

1099 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

1107 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1148 #i‚de‡
Z_SOLO


1160 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1161 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1174 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1175 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1176 
Àvñ
));

1190 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1197 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1198 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1224 
gzFûe_s
 *
	tgzFûe
;

1264 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1287 
ZEXTERN
 
ZEXPORT
 
gzbuf„r
 
OF
((
gzFûe
 
fûe
, 
size
));

1304 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1313 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1341 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1342 
voidpc
 
buf
, 
Àn
));

1349 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
Z_ARG
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

1364 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1372 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1385 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1391 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1400 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1412 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1447 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1475 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1490 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1511 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1524 
ZEXTERN
 
ZEXPORT
 
gz˛o£_r
 
OF
((
gzFûe
 
fûe
));

1525 
ZEXTERN
 
ZEXPORT
 
gz˛o£_w
 
OF
((
gzFûe
 
fûe
));

1536 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1552 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1569 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1600 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1633 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1634 c⁄° *
vîsi⁄
, 
°ªam_size
));

1635 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1636 c⁄° *
vîsi⁄
, 
°ªam_size
));

1637 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1638 
wödowBôs
, 
memLevñ
,

1639 
°øãgy
, c⁄° *
vîsi⁄
,

1640 
°ªam_size
));

1641 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1642 c⁄° *
vîsi⁄
, 
°ªam_size
));

1643 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1644 
FAR
 *
wödow
,

1645 c⁄° *
vîsi⁄
,

1646 
°ªam_size
));

1647 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1648 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1649 
	#öÊ©eInô
(
°rm
) \

1650 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1651 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1652 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1653 (
°øãgy
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1654 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1655 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, \

1656 ()(
z_°ªam
))

	)

1657 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1658 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1659 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1661 #i‚de‡
Z_SOLO


1670 
	sgzFûe_s
 {

1671 
have
;

1672 *
√xt
;

1673 
z_off64_t
 
pos
;

1675 
ZEXTERN
 
ZEXPORT
 
gzgëc_
 
OF
((
gzFûe
 
fûe
));

1676 #ifde‡
Z_PREFIX_SET


1677 #unde‡
z_gzgëc


1678 
	#z_gzgëc
(
g
) \

1679 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: 
	`gzgëc
(g))

	)

1681 
	#gzgëc
(
g
) \

1682 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: 
	`gzgëc
(g))

	)

1691 #ifde‡
Z_LARGE64


1692 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1693 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off64_t, ));

1694 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1695 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1696 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1697 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1700 #i‡!
deföed
(
ZLIB_INTERNAL
Ë&& deföed(
Z_WANT64
)

1701 #ifde‡
Z_PREFIX_SET


1702 
	#z_gz›í
 
z_gz›í64


	)

1703 
	#z_gz£ek
 
z_gz£ek64


	)

1704 
	#z_gzãŒ
 
z_gzãŒ64


	)

1705 
	#z_gzoff£t
 
z_gzoff£t64


	)

1706 
	#z_adÀr32_comböe
 
z_adÀr32_comböe64


	)

1707 
	#z_¸c32_comböe
 
z_¸c32_comböe64


	)

1709 
	#gz›í
 
gz›í64


	)

1710 
	#gz£ek
 
gz£ek64


	)

1711 
	#gzãŒ
 
gzãŒ64


	)

1712 
	#gzoff£t
 
gzoff£t64


	)

1713 
	#adÀr32_comböe
 
adÀr32_comböe64


	)

1714 
	#¸c32_comböe
 
¸c32_comböe64


	)

1716 #i‚de‡
Z_LARGE64


1717 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1718 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off_t, ));

1719 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1720 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1721 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1722 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1725 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((const *, const *));

1726 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
, z_off_t, ));

1727 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
));

1728 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t
 
OF
((
gzFûe
));

1729 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1730 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1735 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1736 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1741 #i‡!
deföed
(
ZUTIL_H
Ë&& !deföed(
NO_DUMMY_DECL
)

1742 
	söã∫Æ_°©e
 {
dummy
;};

1746 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
(());

1747 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
));

1748 
ZEXTERN
 c⁄° 
z_¸c_t
 
FAR
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1749 
ZEXTERN
 
ZEXPORT
 
öÊ©eUndîmöe
 
OF
((
z_°ªamp
, ));

1750 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1751 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1752 #i‡
deföed
(
_WIN32
Ë&& !deföed(
Z_SOLO
)

1753 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í_w
 
OF
((c⁄° 
wch¨_t
 *
∑th
,

1754 c⁄° *
mode
));

1756 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

1757 #i‚de‡
Z_SOLO


1758 
ZEXTERN
 
ZEXPORTVA
 
gzv¥ötf
 
Z_ARG
((
gzFûe
 
fûe
,

1759 c⁄° *
f‹m©
,

1760 
va_li°
 
va
));

1764 #ifde‡
__˝lu•lus


	@/usr/include/EGL/eglplatform.h

1 #i‚de‡
__egÕœtf‹m_h_


2 
	#__egÕœtf‹m_h_


	)

37 
	~<KHR/khΩœtf‹m.h
>

49 #i‚de‡
EGLAPI


50 
	#EGLAPI
 
KHRONOS_APICALL


	)

53 #i‚de‡
EGLAPIENTRY


54 
	#EGLAPIENTRY
 
KHRONOS_APIENTRY


	)

56 
	#EGLAPIENTRYP
 
EGLAPIENTRY
*

	)

70 #i‡
deföed
(
_WIN32
Ë|| deföed(
__VC32__
Ë&& !deföed(
__CYGWIN__
Ë&& !deföed(
__SCITECH_SNAP__
)

71 #i‚de‡
WIN32_LEAN_AND_MEAN


72 
	#WIN32_LEAN_AND_MEAN
 1

	)

74 
	~<wödows.h
>

76 
HDC
 
	tEGLN©iveDi•œyTy≥
;

77 
HBITMAP
 
	tEGLN©ivePixm≠Ty≥
;

78 
HWND
 
	tEGLN©iveWödowTy≥
;

80 #ñi‡
deföed
(
__WINSCW__
Ë|| deföed(
__SYMBIAN32__
)

82 
	tEGLN©iveDi•œyTy≥
;

83 *
	tEGLN©iveWödowTy≥
;

84 *
	tEGLN©ivePixm≠Ty≥
;

86 #ñi‡
deföed
(
WL_EGL_PLATFORM
)

88 
wl_di•œy
 *
	tEGLN©iveDi•œyTy≥
;

89 
wl_egl_pixm≠
 *
	tEGLN©ivePixm≠Ty≥
;

90 
wl_egl_wödow
 *
	tEGLN©iveWödowTy≥
;

92 #ñi‡
deföed
(
__GBM__
)

94 
gbm_devi˚
 *
	tEGLN©iveDi•œyTy≥
;

95 
gbm_bo
 *
	tEGLN©ivePixm≠Ty≥
;

96 *
	tEGLN©iveWödowTy≥
;

98 #ñi‡
deföed
(
ANDROID
)

100 
	gAN©iveWödow
;

101 
	gegl_«tive_pixm≠_t
;

103 
AN©iveWödow
 *
	tEGLN©iveWödowTy≥
;

104 
egl_«tive_pixm≠_t
 *
	tEGLN©ivePixm≠Ty≥
;

105 *
	tEGLN©iveDi•œyTy≥
;

107 #ñi‡
deföed
(
__unix__
)

109 #ifde‡
MESA_EGL_NO_X11_HEADERS


111 *
	tEGLN©iveDi•œyTy≥
;

112 
khr⁄os_uöçå_t
 
	tEGLN©ivePixm≠Ty≥
;

113 
khr⁄os_uöçå_t
 
	tEGLN©iveWödowTy≥
;

118 
	~<X11/Xlib.h
>

119 
	~<X11/Xutû.h
>

121 
Di•œy
 *
	tEGLN©iveDi•œyTy≥
;

122 
Pixm≠
 
	tEGLN©ivePixm≠Ty≥
;

123 
Wödow
 
	tEGLN©iveWödowTy≥
;

132 
EGLN©iveDi•œyTy≥
 
	tN©iveDi•œyTy≥
;

133 
EGLN©ivePixm≠Ty≥
 
	tN©ivePixm≠Ty≥
;

134 
EGLN©iveWödowTy≥
 
	tN©iveWödowTy≥
;

144 
khr⁄os_öt32_t
 
	tEGLöt
;

	@/usr/include/GLES/glplatform.h

1 #i‚de‡
__gÕœtf‹m_h_


2 
	#__gÕœtf‹m_h_


	)

20 
	~<KHR/khΩœtf‹m.h
>

22 #i‚de‡
GL_API


23 
	#GL_API
 
KHRONOS_APICALL


	)

26 #i‚de‡
GL_APIENTRY


27 
	#GL_APIENTRY
 
KHRONOS_APIENTRY


	)

	@/usr/include/X11/X.h

3 #i‚de‡
X_H


4 
	#X_H


	)

53 
	#X_PROTOCOL
 11

	)

54 
	#X_PROTOCOL_REVISION
 0

	)

63 #i‚de‡
_XSERVER64


64 #i‚de‡
_XTYPEDEF_XID


65 
	#_XTYPEDEF_XID


	)

66 
	tXID
;

68 #i‚de‡
_XTYPEDEF_MASK


69 
	#_XTYPEDEF_MASK


	)

70 
	tMask
;

72 #i‚de‡
_XTYPEDEF_ATOM


73 
	#_XTYPEDEF_ATOM


	)

74 
	tAtom
;

76 
	tVisuÆID
;

77 
	tTime
;

79 
	~<X11/Xmd.h
>

80 #i‚de‡
_XTYPEDEF_XID


81 
	#_XTYPEDEF_XID


	)

82 
CARD32
 
	tXID
;

84 #i‚de‡
_XTYPEDEF_MASK


85 
	#_XTYPEDEF_MASK


	)

86 
CARD32
 
	tMask
;

88 #i‚de‡
_XTYPEDEF_ATOM


89 
	#_XTYPEDEF_ATOM


	)

90 
CARD32
 
	tAtom
;

92 
CARD32
 
	tVisuÆID
;

93 
CARD32
 
	tTime
;

96 
XID
 
	tWödow
;

97 
XID
 
	tDøwabÀ
;

98 #i‚de‡
_XTYPEDEF_FONT


99 
	#_XTYPEDEF_FONT


	)

100 
XID
 
	tF⁄t
;

102 
XID
 
	tPixm≠
;

103 
XID
 
	tCurs‹
;

104 
XID
 
	tCﬁ‹m≠
;

105 
XID
 
	tGC⁄ãxt
;

106 
XID
 
	tKeySym
;

108 
	tKeyCode
;

114 #i‚de‡
N⁄e


115 
	#N⁄e
 0L

	)

118 
	#P¨ítRñ©ive
 1L

	)

121 
	#C›yFromP¨ít
 0L

	)

126 
	#PoöãrWödow
 0L

	)

127 
	#I≈utFocus
 1L

	)

129 
	#PoöãrRoŸ
 1L

	)

131 
	#AnyPr›îtyTy≥
 0L

	)

133 
	#AnyKey
 0L

	)

135 
	#AnyBuâ⁄
 0L

	)

137 
	#AŒTemp‹¨y
 0L

	)

139 
	#CuºítTime
 0L

	)

141 
	#NoSymbﬁ
 0L

	)

150 
	#NoEvítMask
 0L

	)

151 
	#KeyPªssMask
 (1L<<0)

	)

152 
	#KeyRñó£Mask
 (1L<<1)

	)

153 
	#Buâ⁄PªssMask
 (1L<<2)

	)

154 
	#Buâ⁄Rñó£Mask
 (1L<<3)

	)

155 
	#E¡îWödowMask
 (1L<<4)

	)

156 
	#LóveWödowMask
 (1L<<5)

	)

157 
	#PoöãrMŸi⁄Mask
 (1L<<6)

	)

158 
	#PoöãrMŸi⁄HötMask
 (1L<<7)

	)

159 
	#Buâ⁄1MŸi⁄Mask
 (1L<<8)

	)

160 
	#Buâ⁄2MŸi⁄Mask
 (1L<<9)

	)

161 
	#Buâ⁄3MŸi⁄Mask
 (1L<<10)

	)

162 
	#Buâ⁄4MŸi⁄Mask
 (1L<<11)

	)

163 
	#Buâ⁄5MŸi⁄Mask
 (1L<<12)

	)

164 
	#Buâ⁄MŸi⁄Mask
 (1L<<13)

	)

165 
	#Keym≠SèãMask
 (1L<<14)

	)

166 
	#ExposuªMask
 (1L<<15)

	)

167 
	#VisibûôyCh™geMask
 (1L<<16)

	)

168 
	#Såu˘uªNŸifyMask
 (1L<<17)

	)

169 
	#ResizeRedúe˘Mask
 (1L<<18)

	)

170 
	#Sub°ru˘uªNŸifyMask
 (1L<<19)

	)

171 
	#Sub°ru˘uªRedúe˘Mask
 (1L<<20)

	)

172 
	#FocusCh™geMask
 (1L<<21)

	)

173 
	#Pr›îtyCh™geMask
 (1L<<22)

	)

174 
	#Cﬁ‹m≠Ch™geMask
 (1L<<23)

	)

175 
	#Ow√rGøbBuâ⁄Mask
 (1L<<24)

	)

181 
	#KeyPªss
 2

	)

182 
	#KeyRñó£
 3

	)

183 
	#Buâ⁄Pªss
 4

	)

184 
	#Buâ⁄Rñó£
 5

	)

185 
	#MŸi⁄NŸify
 6

	)

186 
	#E¡îNŸify
 7

	)

187 
	#LóveNŸify
 8

	)

188 
	#FocusIn
 9

	)

189 
	#FocusOut
 10

	)

190 
	#Keym≠NŸify
 11

	)

191 
	#Expo£
 12

	)

192 
	#GøphicsExpo£
 13

	)

193 
	#NoExpo£
 14

	)

194 
	#VisibûôyNŸify
 15

	)

195 
	#Cª©eNŸify
 16

	)

196 
	#De°royNŸify
 17

	)

197 
	#Unm≠NŸify
 18

	)

198 
	#M≠NŸify
 19

	)

199 
	#M≠Reque°
 20

	)

200 
	#Rï¨ítNŸify
 21

	)

201 
	#C⁄figuªNŸify
 22

	)

202 
	#C⁄figuªReque°
 23

	)

203 
	#GøvôyNŸify
 24

	)

204 
	#ResizeReque°
 25

	)

205 
	#CúcuœãNŸify
 26

	)

206 
	#CúcuœãReque°
 27

	)

207 
	#Pr›îtyNŸify
 28

	)

208 
	#Sñe˘i⁄CÀ¨
 29

	)

209 
	#Sñe˘i⁄Reque°
 30

	)

210 
	#Sñe˘i⁄NŸify
 31

	)

211 
	#Cﬁ‹m≠NŸify
 32

	)

212 
	#Clõ¡Mesßge
 33

	)

213 
	#M≠pögNŸify
 34

	)

214 
	#GíîicEvít
 35

	)

215 
	#LASTEvít
 36

	)

221 
	#Shi·Mask
 (1<<0)

	)

222 
	#LockMask
 (1<<1)

	)

223 
	#C⁄åﬁMask
 (1<<2)

	)

224 
	#Mod1Mask
 (1<<3)

	)

225 
	#Mod2Mask
 (1<<4)

	)

226 
	#Mod3Mask
 (1<<5)

	)

227 
	#Mod4Mask
 (1<<6)

	)

228 
	#Mod5Mask
 (1<<7)

	)

233 
	#Shi·M≠Index
 0

	)

234 
	#LockM≠Index
 1

	)

235 
	#C⁄åﬁM≠Index
 2

	)

236 
	#Mod1M≠Index
 3

	)

237 
	#Mod2M≠Index
 4

	)

238 
	#Mod3M≠Index
 5

	)

239 
	#Mod4M≠Index
 6

	)

240 
	#Mod5M≠Index
 7

	)

246 
	#Buâ⁄1Mask
 (1<<8)

	)

247 
	#Buâ⁄2Mask
 (1<<9)

	)

248 
	#Buâ⁄3Mask
 (1<<10)

	)

249 
	#Buâ⁄4Mask
 (1<<11)

	)

250 
	#Buâ⁄5Mask
 (1<<12)

	)

252 
	#AnyModifõr
 (1<<15Ë

	)

259 
	#Buâ⁄1
 1

	)

260 
	#Buâ⁄2
 2

	)

261 
	#Buâ⁄3
 3

	)

262 
	#Buâ⁄4
 4

	)

263 
	#Buâ⁄5
 5

	)

267 
	#NŸifyN‹mÆ
 0

	)

268 
	#NŸifyGøb
 1

	)

269 
	#NŸifyUngøb
 2

	)

270 
	#NŸifyWhûeGøbbed
 3

	)

272 
	#NŸifyHöt
 1

	)

276 
	#NŸifyAn˚°‹
 0

	)

277 
	#NŸifyVútuÆ
 1

	)

278 
	#NŸifyIn„ri‹
 2

	)

279 
	#NŸifyN⁄löór
 3

	)

280 
	#NŸifyN⁄löórVútuÆ
 4

	)

281 
	#NŸifyPoöãr
 5

	)

282 
	#NŸifyPoöãrRoŸ
 6

	)

283 
	#NŸifyDëaûN⁄e
 7

	)

287 
	#VisibûôyUnobscuªd
 0

	)

288 
	#VisibûôyP¨tüŒyObscuªd
 1

	)

289 
	#VisibûôyFuŒyObscuªd
 2

	)

293 
	#Pœ˚OnT›
 0

	)

294 
	#Pœ˚OnBŸtom
 1

	)

298 
	#FamûyI¡î√t
 0

	)

299 
	#FamûyDEC√t
 1

	)

300 
	#FamûyChaos
 2

	)

301 
	#FamûyI¡î√t6
 6

	)

304 
	#FamûySîvîI¡î¥ëed
 5

	)

308 
	#Pr›îtyNewVÆue
 0

	)

309 
	#Pr›îtyDñëe
 1

	)

313 
	#Cﬁ‹m≠Unö°ÆÀd
 0

	)

314 
	#Cﬁ‹m≠In°ÆÀd
 1

	)

318 
	#GøbModeSync
 0

	)

319 
	#GøbModeAsync
 1

	)

323 
	#GøbSuc˚ss
 0

	)

324 
	#AÃódyGøbbed
 1

	)

325 
	#GøbInvÆidTime
 2

	)

326 
	#GøbNŸVõwabÀ
 3

	)

327 
	#GøbFrozí
 4

	)

331 
	#AsyncPoöãr
 0

	)

332 
	#SyncPoöãr
 1

	)

333 
	#RïœyPoöãr
 2

	)

334 
	#AsyncKeybﬂrd
 3

	)

335 
	#SyncKeybﬂrd
 4

	)

336 
	#RïœyKeybﬂrd
 5

	)

337 
	#AsyncBŸh
 6

	)

338 
	#SyncBŸh
 7

	)

342 
	#RevîtToN⁄e
 ()
N⁄e


	)

343 
	#RevîtToPoöãrRoŸ
 ()
PoöãrRoŸ


	)

344 
	#RevîtToP¨ít
 2

	)

350 
	#Suc˚ss
 0

	)

351 
	#BadReque°
 1

	)

352 
	#BadVÆue
 2

	)

353 
	#BadWödow
 3

	)

354 
	#BadPixm≠
 4

	)

355 
	#BadAtom
 5

	)

356 
	#BadCurs‹
 6

	)

357 
	#BadF⁄t
 7

	)

358 
	#BadM©ch
 8

	)

359 
	#BadDøwabÀ
 9

	)

360 
	#BadAc˚ss
 10

	)

369 
	#BadAŒoc
 11

	)

370 
	#BadCﬁ‹
 12

	)

371 
	#BadGC
 13

	)

372 
	#BadIDChoi˚
 14

	)

373 
	#BadName
 15

	)

374 
	#BadLígth
 16

	)

375 
	#BadIm∂emíèti⁄
 17

	)

377 
	#Fú°Exãnsi⁄Eº‹
 128

	)

378 
	#La°Exãnsi⁄Eº‹
 255

	)

387 
	#I≈utOuçut
 1

	)

388 
	#I≈utO∆y
 2

	)

392 
	#CWBackPixm≠
 (1L<<0)

	)

393 
	#CWBackPixñ
 (1L<<1)

	)

394 
	#CWB‹dîPixm≠
 (1L<<2)

	)

395 
	#CWB‹dîPixñ
 (1L<<3)

	)

396 
	#CWBôGøvôy
 (1L<<4)

	)

397 
	#CWWöGøvôy
 (1L<<5)

	)

398 
	#CWBackögSt‹e
 (1L<<6)

	)

399 
	#CWBackögPœ√s
 (1L<<7)

	)

400 
	#CWBackögPixñ
 (1L<<8)

	)

401 
	#CWOvîrideRedúe˘
 (1L<<9)

	)

402 
	#CWSaveUndî
 (1L<<10)

	)

403 
	#CWEvítMask
 (1L<<11)

	)

404 
	#CWD⁄tPr›ag©e
 (1L<<12)

	)

405 
	#CWCﬁ‹m≠
 (1L<<13)

	)

406 
	#CWCurs‹
 (1L<<14)

	)

410 
	#CWX
 (1<<0)

	)

411 
	#CWY
 (1<<1)

	)

412 
	#CWWidth
 (1<<2)

	)

413 
	#CWHeight
 (1<<3)

	)

414 
	#CWB‹dîWidth
 (1<<4)

	)

415 
	#CWSiblög
 (1<<5)

	)

416 
	#CWSèckMode
 (1<<6)

	)

421 
	#F‹gëGøvôy
 0

	)

422 
	#N‹thWe°Gøvôy
 1

	)

423 
	#N‹thGøvôy
 2

	)

424 
	#N‹thEa°Gøvôy
 3

	)

425 
	#We°Gøvôy
 4

	)

426 
	#CíãrGøvôy
 5

	)

427 
	#Ea°Gøvôy
 6

	)

428 
	#SouthWe°Gøvôy
 7

	)

429 
	#SouthGøvôy
 8

	)

430 
	#SouthEa°Gøvôy
 9

	)

431 
	#SèticGøvôy
 10

	)

435 
	#Unm≠Gøvôy
 0

	)

439 
	#NŸU£ful
 0

	)

440 
	#WhíM≠≥d
 1

	)

441 
	#Always
 2

	)

445 
	#IsUnm≠≥d
 0

	)

446 
	#IsUnvõwabÀ
 1

	)

447 
	#IsVõwabÀ
 2

	)

451 
	#SëModeIn£π
 0

	)

452 
	#SëModeDñëe
 1

	)

456 
	#De°royAŒ
 0

	)

457 
	#RëaöPîm™ít
 1

	)

458 
	#RëaöTemp‹¨y
 2

	)

462 
	#Above
 0

	)

463 
	#Bñow
 1

	)

464 
	#T›If
 2

	)

465 
	#BŸtomIf
 3

	)

466 
	#Oµosôe
 4

	)

470 
	#Rai£Lowe°
 0

	)

471 
	#LowîHighe°
 1

	)

475 
	#Pr›ModeRïœ˚
 0

	)

476 
	#Pr›ModePª≥nd
 1

	)

477 
	#Pr›ModeAµíd
 2

	)

485 
	#GX˛ór
 0x0

	)

486 
	#GX™d
 0x1

	)

487 
	#GX™dRevî£
 0x2

	)

488 
	#GXc›y
 0x3

	)

489 
	#GX™dInvîãd
 0x4

	)

490 
	#GXno›
 0x5

	)

491 
	#GXx‹
 0x6

	)

492 
	#GX‹
 0x7

	)

493 
	#GXn‹
 0x8

	)

494 
	#GXequiv
 0x9

	)

495 
	#GXövît
 0x®

	)

496 
	#GX‹Revî£
 0xb

	)

497 
	#GXc›yInvîãd
 0x¯

	)

498 
	#GX‹Invîãd
 0xd

	)

499 
	#GX«nd
 0xê

	)

500 
	#GX£t
 0x‡

	)

504 
	#LöeSﬁid
 0

	)

505 
	#LöeOnOffDash
 1

	)

506 
	#LöeDoubÀDash
 2

	)

510 
	#C≠NŸLa°
 0

	)

511 
	#C≠Buâ
 1

	)

512 
	#C≠Round
 2

	)

513 
	#C≠Proje˘ög
 3

	)

517 
	#JoöMôî
 0

	)

518 
	#JoöRound
 1

	)

519 
	#JoöBevñ
 2

	)

523 
	#FûlSﬁid
 0

	)

524 
	#FûlTûed
 1

	)

525 
	#FûlStù∂ed
 2

	)

526 
	#FûlO∑queStù∂ed
 3

	)

530 
	#EvíOddRuÀ
 0

	)

531 
	#WödögRuÀ
 1

	)

535 
	#ClùByChûdªn
 0

	)

536 
	#In˛udeIn„ri‹s
 1

	)

540 
	#Uns‹ãd
 0

	)

541 
	#YS‹ãd
 1

	)

542 
	#YXS‹ãd
 2

	)

543 
	#YXB™ded
 3

	)

547 
	#Co‹dModeOrigö
 0

	)

548 
	#Co‹dModePªvious
 1

	)

552 
	#Com∂ex
 0

	)

553 
	#N⁄c⁄vex
 1

	)

554 
	#C⁄vex
 2

	)

558 
	#ArcCh‹d
 0

	)

559 
	#ArcPõSli˚
 1

	)

564 
	#GCFun˘i⁄
 (1L<<0)

	)

565 
	#GCPœ√Mask
 (1L<<1)

	)

566 
	#GCF‹eground
 (1L<<2)

	)

567 
	#GCBackground
 (1L<<3)

	)

568 
	#GCLöeWidth
 (1L<<4)

	)

569 
	#GCLöeStyÀ
 (1L<<5)

	)

570 
	#GCC≠StyÀ
 (1L<<6)

	)

571 
	#GCJoöStyÀ
 (1L<<7)

	)

572 
	#GCFûlStyÀ
 (1L<<8)

	)

573 
	#GCFûlRuÀ
 (1L<<9)

	)

574 
	#GCTûe
 (1L<<10)

	)

575 
	#GCStù∂e
 (1L<<11)

	)

576 
	#GCTûeStùXOrigö
 (1L<<12)

	)

577 
	#GCTûeStùYOrigö
 (1L<<13)

	)

578 
	#GCF⁄t
 (1L<<14)

	)

579 
	#GCSubwödowMode
 (1L<<15)

	)

580 
	#GCGøphicsExposuªs
 (1L<<16)

	)

581 
	#GCClùXOrigö
 (1L<<17)

	)

582 
	#GCClùYOrigö
 (1L<<18)

	)

583 
	#GCClùMask
 (1L<<19)

	)

584 
	#GCDashOff£t
 (1L<<20)

	)

585 
	#GCDashLi°
 (1L<<21)

	)

586 
	#GCArcMode
 (1L<<22)

	)

588 
	#GCLa°Bô
 22

	)

595 
	#F⁄tLe·ToRight
 0

	)

596 
	#F⁄tRightToLe·
 1

	)

598 
	#F⁄tCh™ge
 255

	)

606 
	#XYBôm≠
 0

	)

607 
	#XYPixm≠
 1

	)

608 
	#ZPixm≠
 2

	)

616 
	#AŒocN⁄e
 0

	)

617 
	#AŒocAŒ
 1

	)

622 
	#DoRed
 (1<<0)

	)

623 
	#DoGªí
 (1<<1)

	)

624 
	#DoBlue
 (1<<2)

	)

632 
	#Curs‹Sh≠e
 0

	)

633 
	#TûeSh≠e
 1

	)

634 
	#Stù∂eSh≠e
 2

	)

640 
	#AutoRïótModeOff
 0

	)

641 
	#AutoRïótModeOn
 1

	)

642 
	#AutoRïótModeDeÁu…
 2

	)

644 
	#LedModeOff
 0

	)

645 
	#LedModeOn
 1

	)

649 
	#KBKeyClickPî˚¡
 (1L<<0)

	)

650 
	#KBBñlPî˚¡
 (1L<<1)

	)

651 
	#KBBñlPôch
 (1L<<2)

	)

652 
	#KBBñlDuøti⁄
 (1L<<3)

	)

653 
	#KBLed
 (1L<<4)

	)

654 
	#KBLedMode
 (1L<<5)

	)

655 
	#KBKey
 (1L<<6)

	)

656 
	#KBAutoRïótMode
 (1L<<7)

	)

658 
	#M≠pögSuc˚ss
 0

	)

659 
	#M≠pögBusy
 1

	)

660 
	#M≠pögFaûed
 2

	)

662 
	#M≠pögModifõr
 0

	)

663 
	#M≠pögKeybﬂrd
 1

	)

664 
	#M≠pögPoöãr
 2

	)

670 
	#D⁄tPª„rBœnkög
 0

	)

671 
	#Pª„rBœnkög
 1

	)

672 
	#DeÁu…Bœnkög
 2

	)

674 
	#DißbÀS¸ìnSavî
 0

	)

675 
	#DißbÀS¸ìnI¡îvÆ
 0

	)

677 
	#D⁄tAŒowExposuªs
 0

	)

678 
	#AŒowExposuªs
 1

	)

679 
	#DeÁu…Exposuªs
 2

	)

683 
	#S¸ìnSavîRe£t
 0

	)

684 
	#S¸ìnSavîA˘ive
 1

	)

692 
	#Ho°In£π
 0

	)

693 
	#Ho°Dñëe
 1

	)

697 
	#E«bÀAc˚ss
 1

	)

698 
	#DißbÀAc˚ss
 0

	)

704 
	#SèticGøy
 0

	)

705 
	#GøySˇÀ
 1

	)

706 
	#SèticCﬁ‹
 2

	)

707 
	#P£udoCﬁ‹
 3

	)

708 
	#TrueCﬁ‹
 4

	)

709 
	#Dúe˘Cﬁ‹
 5

	)

714 
	#LSBFú°
 0

	)

715 
	#MSBFú°
 1

	)

	@/usr/include/X11/Xfuncproto.h

30 #i‚de‡
_XFUNCPROTO_H_


31 
	#_XFUNCPROTO_H_


	)

33 #i‚de‡
NìdFun˘i⁄PrŸŸy≥s


34 
	#NìdFun˘i⁄PrŸŸy≥s
 1

	)

37 #i‚de‡
NìdV¨¨gsPrŸŸy≥s


38 
	#NìdV¨¨gsPrŸŸy≥s
 1

	)

41 #i‡
NìdFun˘i⁄PrŸŸy≥s


43 #i‚de‡
NìdNe°edPrŸŸy≥s


44 
	#NìdNe°edPrŸŸy≥s
 1

	)

47 #i‚de‡
_Xc⁄°


48 
	#_Xc⁄°
 c⁄°

	)

52 #i‚de‡
NARROWPROTO


53 
	#NARROWPROTO


	)

55 #i‚de‡
FUNCPROTO


56 
	#FUNCPROTO
 15

	)

59 #i‚de‡
NìdWidePrŸŸy≥s


60 #ifde‡
NARROWPROTO


61 
	#NìdWidePrŸŸy≥s
 0

	)

63 
	#NìdWidePrŸŸy≥s
 1

	)

69 #i‚de‡
_XFUNCPROTOBEGIN


70 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

71 
	#_XFUNCPROTOBEGIN
 "C" {

	)

72 
	#_XFUNCPROTOEND
 }

	)

74 
	#_XFUNCPROTOBEGIN


	)

75 
	#_XFUNCPROTOEND


	)

80 #i‡
deföed
(
__GNUC__
) && (__GNUC__ >= 4)

81 
	#_X_SENTINEL
(
x
Ë
	`__©åibuã__
 ((
	`__£¡öñ__
(x)))

	)

83 
	#_X_SENTINEL
(
x
)

	)

87 #i‡
deföed
(
__GNUC__
Ë&& (__GNUC__ >4Ë&& !deföed(
__CYGWIN__
Ë&& !deföed(
__MINGW32__
)

88 
	#_X_EXPORT
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

89 
	#_X_HIDDEN
 
	`__©åibuã__
((
	`visibûôy
("hiddí")))

	)

90 
	#_X_INTERNAL
 
	`__©åibuã__
((
	`visibûôy
("öã∫Æ")))

	)

91 #ñi‡
deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x550)

92 
	#_X_EXPORT
 
__globÆ


	)

93 
	#_X_HIDDEN
 
__hiddí


	)

94 
	#_X_INTERNAL
 
__hiddí


	)

96 
	#_X_EXPORT


	)

97 
	#_X_HIDDEN


	)

98 
	#_X_INTERNAL


	)

103 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 303)

104 
	#_X_LIKELY
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

105 
	#_X_UNLIKELY
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

107 
	#_X_LIKELY
(
x
Ë(x)

	)

108 
	#_X_UNLIKELY
(
x
Ë(x)

	)

113 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 403)

114 
	#_X_COLD
 
	`__©åibuã__
((
__cﬁd__
))

	)

116 
	#_X_COLD


	)

120 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 301)

121 
	#_X_DEPRECATED
 
	`__©åibuã__
((
dïªˇãd
))

	)

123 
	#_X_DEPRECATED


	)

127 #i‡(
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 205)) \

128 || (
deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x590))

129 
	#_X_NORETURN
 
	`__©åibuã
((
n‹ëu∫
))

	)

131 
	#_X_NORETURN


	)

135 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 203)

136 
	#_X_ATTRIBUTE_PRINTF
(
x
,
y
Ë
	`__©åibuã__
((
	`__f‹m©__
(
__¥ötf__
,x,y)))

	)

138 
	#_X_ATTRIBUTE_PRINTF
(
x
,
y
)

	)

144 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 303)

145 
	#_X_NONNULL
(
¨gs
...Ë
	`__©åibuã__
((
	`n⁄nuŒ
◊rgs)))

	)

146 #ñi‡
deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L)

147 
	#_X_NONNULL
(...Ë

	)

151 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 205)

152 
	#_X_UNUSED
 
	`__©åibuã__
((
__unu£d__
))

	)

154 
	#_X_UNUSED


	)

160 #i‡
deföed
(
ölöe
) || \

161 (
deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L)) || \

162 (
deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x550))

163 
	#_X_INLINE
 
ölöe


	)

164 #ñi‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

165 
	#_X_INLINE
 
__ölöe__


	)

167 
	#_X_INLINE


	)

172 #i‚de‡
_X_RESTRICT_KYWD


173 #i‡
deföed
(
ª°ri˘
) || \

174 (
deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L) \

175 && !
	$deföed
(
__˝lu•lus
))

176 
	#_X_RESTRICT_KYWD
 
ª°ri˘


	)

177 #ñi‡
	`deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

178 
	#_X_RESTRICT_KYWD
 
__ª°ri˘__


	)

180 
	#_X_RESTRICT_KYWD


	)

	@/usr/include/X11/Xosdefs.h

27 #i‚de‡
_XOSDEFS_H_


28 
	#_XOSDEFS_H_


	)

37 #ifde‡
_SCO_DS


38 #i‚de‡
__SCO__


39 
	#__SCO__


	)

43 #ifde‡
__i386__


44 #ifde‡
SYSV


45 #i‡!
deföed
(
__SCO__
) && \

46 !
deföed
(
__UNIXWARE__
Ë&& !
	$deföed
(
__sun
)

47 #i‡!
	`deföed
(
_POSIX_SOURCE
)

48 
	#X_NOT_POSIX


	)

54 #ifde‡
__sun


58 #i‡
	`deföed
(
__SVR4
Ë&& !deföed(
SVR4
)

59 
	#SVR4
 1

	)

61 #ifde‡
SVR4


63 
	#X_POSIX_C_SOURCE
 199300L

	)

67 #ifde‡
WIN32


68 #i‚de‡
_POSIX_


69 
	#X_NOT_POSIX


	)

74 #ifde‡
__APPLE__


75 
	#NULL_NOT_ZERO


	)

82 #i‡
	`deföed
(
_XOPEN_SOURCE
Ë|| deföed(
_POSIX_SOURCE
Ë|| deföed(
_POSIX_C_SOURCE
)

83 #i‚de‡
_DARWIN_C_SOURCE


84 
	#_DARWIN_C_SOURCE


	)

90 #ifde‡
__GNU__


91 #i‚de‡
PATH_MAX


92 
	#PATH_MAX
 4096

	)

94 #i‚de‡
MAXPATHLEN


95 
	#MAXPATHLEN
 4096

	)

99 #i‡
	`deföed
(
__SCO__
Ë|| deföed(
__UNIXWARE__
)

100 #i‚de‡
PATH_MAX


101 
	#PATH_MAX
 1024

	)

103 #i‚de‡
MAXPATHLEN


104 
	#MAXPATHLEN
 1024

	)

108 #i‡
	`deföed
(
__O≥nBSD__
Ë|| deföed(
__NëBSD__
Ë|| deföed(
__FªeBSD__
) \

109 || 
	`deföed
(
__APPLE__
Ë|| 
	$deföed
(
__Døg⁄Fly__
)

110 #i‚de‡
CSRG_BASED


111 
	#CSRG_BASED


	)

	@/usr/include/X11/extensions/XKBstr.h

27 #i‚de‡
_XKBSTR_H_


28 
	#_XKBSTR_H_


	)

30 
	~<X11/exãnsi⁄s/XKB.h
>

32 
	#XkbCh¨ToI¡
(
v
Ë((v)&0x80?()((v)|(~0xff)):()((v)&0x7f))

	)

33 
	#XkbI¡To2Ch¨s
(
i
,
h
,
l
Ë(((h)=((i>>8)&0xff)),(÷)=((i)&0xff)))

	)

35 #i‡
deföed
(
WORD64
Ë&& deföed(
UNSIGNEDBITFIELDS
)

36 
	#Xkb2Ch¨sToI¡
(
h
,
l
) ((h)&0x80?()(((h)<<8)|(l)|(~0xffff)):\

37 ()(((
h
)<<8)|(
l
)&0x7fff))

	)

39 
	#Xkb2Ch¨sToI¡
(
h
,
l
Ë(()(((h)<<8)|÷)))

	)

46 
	s_XkbSèãRec
 {

47 
	mgroup
;

48 
	mlocked_group
;

49 
	mba£_group
;

50 
	mœtched_group
;

51 
	mmods
;

52 
	mba£_mods
;

53 
	mœtched_mods
;

54 
	mlocked_mods
;

55 
	mcom∑t_°©e
;

56 
	mgøb_mods
;

57 
	mcom∑t_gøb_mods
;

58 
	mlookup_mods
;

59 
	mcom∑t_lookup_mods
;

60 
	m±r_buâ⁄s
;

61 } 
	tXkbSèãRec
,*
	tXkbSèãPå
;

62 
	#XkbModLocks
(
s
Ë((s)->
locked_mods
)

	)

63 
	#XkbSèãMods
(
s
Ë((s)->
ba£_mods
|(s)->
œtched_mods
|
	`XkbModLocks
(s))

	)

64 
	#XkbGroupLock
(
s
Ë((s)->
locked_group
)

	)

65 
	#XkbSèãGroup
(
s
Ë((s)->
ba£_group
+(s)->
œtched_group
+
	`XkbGroupLock
(s))

	)

66 
	#XkbSèãFõldFromRec
(
s
Ë
	`XkbBuûdC‹eSèã
((s)->
lookup_mods
,(s)->
group
)

	)

67 
	#XkbGøbSèãFromRec
(
s
Ë
	`XkbBuûdC‹eSèã
((s)->
gøb_mods
,(s)->
group
)

	)

69 
	s_XkbMods
 {

70 
	mmask
;

71 
	mªÆ_mods
;

72 
	mvmods
;

73 } 
	tXkbModsRec
,*
	tXkbModsPå
;

75 
	s_XkbKTM≠E¡ry
 {

76 
Boﬁ
 
	ma˘ive
;

77 
	mÀvñ
;

78 
XkbModsRec
 
	mmods
;

79 } 
	tXkbKTM≠E¡ryRec
,*
	tXkbKTM≠E¡ryPå
;

81 
	s_XkbKeyTy≥
 {

82 
XkbModsRec
 
	mmods
;

83 
	mnum_Àvñs
;

84 
	mm≠_cou¡
;

85 
XkbKTM≠E¡ryPå
 
	mm≠
;

86 
XkbModsPå
 
	m¥e£rve
;

87 
Atom
 
	m«me
;

88 
Atom
 * 
	mÀvñ_«mes
;

89 } 
	tXkbKeyTy≥Rec
, *
	tXkbKeyTy≥På
;

91 
	#XkbNumGroups
(
g
Ë((g)&0x0f)

	)

92 
	#XkbOutOfR™geGroupInfo
(
g
Ë((g)&0xf0)

	)

93 
	#XkbOutOfR™geGroupA˘i⁄
(
g
Ë((g)&0xc0)

	)

94 
	#XkbOutOfR™geGroupNumbî
(
g
Ë(((g)&0x30)>>4)

	)

95 
	#XkbSëGroupInfo
(
g
,
w
,
n
Ë(((w)&0xc0)|((“)&3)<<4)|((g)&0x0f))

	)

96 
	#XkbSëNumGroups
(
g
,
n
Ë(((g)&0xf0)|(“)&0x0f))

	)

102 
	s_XkbBehavi‹
 {

103 
	mty≥
;

104 
	md©a
;

105 } 
	tXkbBehavi‹
;

107 
	#XkbAnyA˘i⁄D©aSize
 7

	)

108 
	s_XkbAnyA˘i⁄
 {

109 
	mty≥
;

110 
	md©a
[
XkbAnyA˘i⁄D©aSize
];

111 } 
	tXkbAnyA˘i⁄
;

113 
	s_XkbModA˘i⁄
 {

114 
	mty≥
;

115 
	mÊags
;

116 
	mmask
;

117 
	mªÆ_mods
;

118 
	mvmods1
;

119 
	mvmods2
;

120 } 
	tXkbModA˘i⁄
;

121 
	#XkbModA˘i⁄VMods
(
a
) \

122 (()(((
a
)->
vmods1
<<8)|(◊)->
vmods2
)))

	)

123 
	#XkbSëModA˘i⁄VMods
(
a
,
v
) \

124 (((
a
)->
vmods1
=(((
v
)>>8)&0xff)),◊)->
vmods2
=((v)&0xff))

	)

126 
	s_XkbGroupA˘i⁄
 {

127 
	mty≥
;

128 
	mÊags
;

129 
	mgroup_XXX
;

130 } 
	tXkbGroupA˘i⁄
;

131 
	#XkbSAGroup
(
a
Ë(
	`XkbCh¨ToI¡
(◊)->
group_XXX
))

	)

132 
	#XkbSASëGroup
(
a
,
g
Ë(◊)->
group_XXX
=(g))

	)

134 
	s_XkbISOA˘i⁄
 {

135 
	mty≥
;

136 
	mÊags
;

137 
	mmask
;

138 
	mªÆ_mods
;

139 
	mgroup_XXX
;

140 
	maf„˘
;

141 
	mvmods1
;

142 
	mvmods2
;

143 } 
	tXkbISOA˘i⁄
;

145 
	s_XkbPåA˘i⁄
 {

146 
	mty≥
;

147 
	mÊags
;

148 
	mhigh_XXX
;

149 
	mlow_XXX
;

150 
	mhigh_YYY
;

151 
	mlow_YYY
;

152 } 
	tXkbPåA˘i⁄
;

153 
	#XkbPåA˘i⁄X
(
a
Ë(
	`Xkb2Ch¨sToI¡
(◊)->
high_XXX
,◊)->
low_XXX
))

	)

154 
	#XkbPåA˘i⁄Y
(
a
Ë(
	`Xkb2Ch¨sToI¡
(◊)->
high_YYY
,◊)->
low_YYY
))

	)

155 
	#XkbSëPåA˘i⁄X
(
a
,
x
Ë(
	`XkbI¡To2Ch¨s
(x,◊)->
high_XXX
,◊)->
low_XXX
))

	)

156 
	#XkbSëPåA˘i⁄Y
(
a
,
y
Ë(
	`XkbI¡To2Ch¨s
(y,◊)->
high_YYY
,◊)->
low_YYY
))

	)

158 
	s_XkbPåBäA˘i⁄
 {

159 
	mty≥
;

160 
	mÊags
;

161 
	mcou¡
;

162 
	mbuâ⁄
;

163 } 
	tXkbPåBäA˘i⁄
;

165 
	s_XkbPåDÊtA˘i⁄
 {

166 
	mty≥
;

167 
	mÊags
;

168 
	maf„˘
;

169 
	mvÆueXXX
;

170 } 
	tXkbPåDÊtA˘i⁄
;

171 
	#XkbSAPåDÊtVÆue
(
a
Ë(
	`XkbCh¨ToI¡
(◊)->
vÆueXXX
))

	)

172 
	#XkbSASëPåDÊtVÆue
(
a
,
c
Ë(◊)->
vÆueXXX
((c)&0xff))

	)

174 
	s_XkbSwôchS¸ìnA˘i⁄
 {

175 
	mty≥
;

176 
	mÊags
;

177 
	ms¸ìnXXX
;

178 } 
	tXkbSwôchS¸ìnA˘i⁄
;

179 
	#XkbSAS¸ìn
(
a
Ë(
	`XkbCh¨ToI¡
(◊)->
s¸ìnXXX
))

	)

180 
	#XkbSASëS¸ìn
(
a
,
s
Ë(◊)->
s¸ìnXXX
((s)&0xff))

	)

182 
	s_XkbCålsA˘i⁄
 {

183 
	mty≥
;

184 
	mÊags
;

185 
	m˘æs3
;

186 
	m˘æs2
;

187 
	m˘æs1
;

188 
	m˘æs0
;

189 } 
	tXkbCålsA˘i⁄
;

190 
	#XkbA˘i⁄SëCåls
(
a
,
c
Ë((◊)->
˘æs3
=(((c)>>24)&0xff)),\

191 ((
a
)->
˘æs2
=(((
c
)>>16)&0xff)),\

192 ((
a
)->
˘æs1
=(((
c
)>>8)&0xff)),\

193 ((
a
)->
˘æs0
=((
c
)&0xff)))

	)

194 
	#XkbA˘i⁄Cåls
(
a
Ë(((()◊)->
˘æs3
)<<24)|\

195 ((()(
a
)->
˘æs2
)<<16)|\

196 ((()(
a
)->
˘æs1
)<<8)|\

197 (()((
a
)->
˘æs0
)))

	)

199 
	s_XkbMesßgeA˘i⁄
 {

200 
	mty≥
;

201 
	mÊags
;

202 
	mmesßge
[6];

203 } 
	tXkbMesßgeA˘i⁄
;

205 
	s_XkbRedúe˘KeyA˘i⁄
 {

206 
	mty≥
;

207 
	m√w_key
;

208 
	mmods_mask
;

209 
	mmods
;

210 
	mvmods_mask0
;

211 
	mvmods_mask1
;

212 
	mvmods0
;

213 
	mvmods1
;

214 } 
	tXkbRedúe˘KeyA˘i⁄
;

216 
	#XkbSARedúe˘VMods
(
a
Ë(((()◊)->
vmods1
)<<8)|\

217 (()(
a
)->
vmods0
))

	)

218 
	#XkbSARedúe˘SëVMods
(
a
,
m
Ë((◊)->
vmods_mask1
=(((m)>>8)&0xff)),\

219 ((
a
)->
vmods_mask0
=((
m
)&0xff)))

	)

220 
	#XkbSARedúe˘VModsMask
(
a
Ë(((()◊)->
vmods_mask1
)<<8)|\

221 (()(
a
)->
vmods_mask0
))

	)

222 
	#XkbSARedúe˘SëVModsMask
(
a
,
m
Ë((◊)->
vmods_mask1
=(((m)>>8)&0xff)),\

223 ((
a
)->
vmods_mask0
=((
m
)&0xff)))

	)

225 
	s_XkbDevi˚BäA˘i⁄
 {

226 
	mty≥
;

227 
	mÊags
;

228 
	mcou¡
;

229 
	mbuâ⁄
;

230 
	mdevi˚
;

231 } 
	tXkbDevi˚BäA˘i⁄
;

233 
	s_XkbDevi˚VÆu©‹A˘i⁄
 {

234 
	mty≥
;

235 
	mdevi˚
;

236 
	mv1_wh©
;

237 
	mv1_ndx
;

238 
	mv1_vÆue
;

239 
	mv2_wh©
;

240 
	mv2_ndx
;

241 
	mv2_vÆue
;

242 } 
	tXkbDevi˚VÆu©‹A˘i⁄
;

244 
	u_XkbA˘i⁄
 {

245 
XkbAnyA˘i⁄
 
	m™y
;

246 
XkbModA˘i⁄
 
	mmods
;

247 
XkbGroupA˘i⁄
 
	mgroup
;

248 
XkbISOA˘i⁄
 
	miso
;

249 
XkbPåA˘i⁄
 
	m±r
;

250 
XkbPåBäA˘i⁄
 
	mbä
;

251 
XkbPåDÊtA˘i⁄
 
	mdÊt
;

252 
XkbSwôchS¸ìnA˘i⁄
 
	ms¸ìn
;

253 
XkbCålsA˘i⁄
 
	m˘æs
;

254 
XkbMesßgeA˘i⁄
 
	mmsg
;

255 
XkbRedúe˘KeyA˘i⁄
 
	mªdúe˘
;

256 
XkbDevi˚BäA˘i⁄
 
	mdevbä
;

257 
XkbDevi˚VÆu©‹A˘i⁄
 
	mdevvÆ
;

258 
	mty≥
;

259 } 
	tXkbA˘i⁄
;

261 
	s_XkbC⁄åﬁs
 {

262 
	mmk_dÊt_bä
;

263 
	mnum_groups
;

264 
	mgroups_wøp
;

265 
XkbModsRec
 
	möã∫Æ
;

266 
XkbModsRec
 
	mign‹e_lock
;

267 
	míabÀd_˘æs
;

268 
	mª≥©_dñay
;

269 
	mª≥©_öãrvÆ
;

270 
	m¶ow_keys_dñay
;

271 
	mdeboun˚_dñay
;

272 
	mmk_dñay
;

273 
	mmk_öãrvÆ
;

274 
	mmk_time_to_max
;

275 
	mmk_max_•ìd
;

276 
	mmk_curve
;

277 
	max_›ti⁄s
;

278 
	max_timeout
;

279 
	maxt_›ts_mask
;

280 
	maxt_›ts_vÆues
;

281 
	maxt_˘æs_mask
;

282 
	maxt_˘æs_vÆues
;

283 
	m≥r_key_ª≥©
[
XkbPîKeyBôAºaySize
];

284 } 
	tXkbC⁄åﬁsRec
, *
	tXkbC⁄åﬁsPå
;

286 
	#XkbAX_AnyFìdback
(
c
Ë((c)->
íabÀd_˘æs
&
XkbAc˚ssXFìdbackMask
)

	)

287 
	#XkbAX_NìdO±i⁄
(
c
,
w
Ë((c)->
ax_›ti⁄s
&(w))

	)

288 
	#XkbAX_NìdFìdback
(
c
,
w
Ë(
	`XkbAX_AnyFìdback
(c)&&
	`XkbAX_NìdO±i⁄
(c,w))

	)

290 
	s_XkbSîvîM≠Rec
 {

291 
	mnum_a˘s
;

292 
	msize_a˘s
;

293 
XkbA˘i⁄
 *
	ma˘s
;

295 
XkbBehavi‹
 *
	mbehavi‹s
;

296 *
	mkey_a˘s
;

297 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

299 *
	mc_ex∂icô
;

301 *
	mex∂icô
;

303 
	mvmods
[
XkbNumVútuÆMods
];

304 *
	mvmodm≠
;

305 } 
	tXkbSîvîM≠Rec
, *
	tXkbSîvîM≠På
;

307 
	#XkbSMKeyA˘i⁄sPå
(
m
,
k
Ë(&(m)->
a˘s
[(m)->
key_a˘s
[k]])

	)

313 
	s_XkbSymM≠Rec
 {

314 
	mkt_ödex
[
XkbNumKbdGroups
];

315 
	mgroup_öfo
;

316 
	mwidth
;

317 
	moff£t
;

318 } 
	tXkbSymM≠Rec
, *
	tXkbSymM≠På
;

320 
	s_XkbClõ¡M≠Rec
 {

321 
	msize_ty≥s
;

322 
	mnum_ty≥s
;

323 
XkbKeyTy≥På
 
	mty≥s
;

325 
	msize_syms
;

326 
	mnum_syms
;

327 
KeySym
 *
	msyms
;

328 
XkbSymM≠På
 
	mkey_sym_m≠
;

330 *
	mmodm≠
;

331 } 
	tXkbClõ¡M≠Rec
, *
	tXkbClõ¡M≠På
;

333 
	#XkbCMKeyGroupInfo
(
m
,
k
Ë((m)->
key_sym_m≠
[k].
group_öfo
)

	)

334 
	#XkbCMKeyNumGroups
(
m
,
k
Ë(
	`XkbNumGroups
((m)->
key_sym_m≠
[k].
group_öfo
))

	)

335 
	#XkbCMKeyGroupWidth
(
m
,
k
,
g
Ë(
	`XkbCMKeyTy≥
(m,k,g)->
num_Àvñs
)

	)

336 
	#XkbCMKeyGroupsWidth
(
m
,
k
Ë((m)->
key_sym_m≠
[k].
width
)

	)

337 
	#XkbCMKeyTy≥Index
(
m
,
k
,
g
Ë((m)->
key_sym_m≠
[k].
kt_ödex
[g&0x3])

	)

338 
	#XkbCMKeyTy≥
(
m
,
k
,
g
Ë(&(m)->
ty≥s
[
	`XkbCMKeyTy≥Index
(m,k,g)])

	)

339 
	#XkbCMKeyNumSyms
(
m
,
k
Ë(
	`XkbCMKeyGroupsWidth
(m,k)*
	`XkbCMKeyNumGroups
(m,k))

	)

340 
	#XkbCMKeySymsOff£t
(
m
,
k
Ë((m)->
key_sym_m≠
[k].
off£t
)

	)

341 
	#XkbCMKeySymsPå
(
m
,
k
Ë(&(m)->
syms
[
	`XkbCMKeySymsOff£t
(m,k)])

	)

347 
	s_XkbSymI¡î¥ëRec
 {

348 
KeySym
 
	msym
;

349 
	mÊags
;

350 
	mm©ch
;

351 
	mmods
;

352 
	mvútuÆ_mod
;

353 
XkbAnyA˘i⁄
 
	ma˘
;

354 } 
	tXkbSymI¡î¥ëRec
,*
	tXkbSymI¡î¥ëPå
;

356 
	s_XkbCom∑tM≠Rec
 {

357 
XkbSymI¡î¥ëPå
 
	msym_öãΩªt
;

358 
XkbModsRec
 
	mgroups
[
XkbNumKbdGroups
];

359 
	mnum_si
;

360 
	msize_si
;

361 } 
	tXkbCom∑tM≠Rec
, *
	tXkbCom∑tM≠På
;

363 
	s_XkbIndiˇt‹M≠Rec
 {

364 
	mÊags
;

365 
	mwhich_groups
;

366 
	mgroups
;

367 
	mwhich_mods
;

368 
XkbModsRec
 
	mmods
;

369 
	m˘æs
;

370 } 
	tXkbIndiˇt‹M≠Rec
, *
	tXkbIndiˇt‹M≠På
;

372 
	#XkbIM_IsAuto
(
i
Ë((((i)->
Êags
&
XkbIM_NoAutom©ic
)==0)&&\

373 (((
i
)->
which_groups
&&(i)->
groups
)||\

374 ((
i
)->
which_mods
&&(i)->
mods
.
mask
)||\

375 ((
i
)->
˘æs
)))

	)

376 
	#XkbIM_InU£
(
i
Ë(((i)->
Êags
)||((i)->
which_groups
)||\

377 ((
i
)->
which_mods
)||((i)->
˘æs
))

	)

380 
	s_XkbIndiˇt‹Rec
 {

381 
	mphys_ödiˇt‹s
;

382 
XkbIndiˇt‹M≠Rec
 
	mm≠s
[
XkbNumIndiˇt‹s
];

383 } 
	tXkbIndiˇt‹Rec
,*
	tXkbIndiˇt‹På
;

385 
	s_XkbKeyNameRec
 {

386 
	m«me
[
XkbKeyNameLígth
];

387 } 
	tXkbKeyNameRec
,*
	tXkbKeyNamePå
;

389 
	s_XkbKeyAlüsRec
 {

390 
	mªÆ
[
XkbKeyNameLígth
];

391 
	mÆüs
[
XkbKeyNameLígth
];

392 } 
	tXkbKeyAlüsRec
,*
	tXkbKeyAlüsPå
;

397 
	s_XkbNamesRec
 {

398 
Atom
 
	mkeycodes
;

399 
Atom
 
	mgeomëry
;

400 
Atom
 
	msymbﬁs
;

401 
Atom
 
	mty≥s
;

402 
Atom
 
	mcom∑t
;

403 
Atom
 
	mvmods
[
XkbNumVútuÆMods
];

404 
Atom
 
	mödiˇt‹s
[
XkbNumIndiˇt‹s
];

405 
Atom
 
	mgroups
[
XkbNumKbdGroups
];

406 
XkbKeyNamePå
 
	mkeys
;

407 
XkbKeyAlüsPå
 
	mkey_Æü£s
;

408 
Atom
 *
	mødio_groups
;

409 
Atom
 
	mphys_symbﬁs
;

411 
	mnum_keys
;

412 
	mnum_key_Æü£s
;

413 
	mnum_rg
;

414 } 
	tXkbNamesRec
,*
	tXkbNamesPå
;

416 
_XkbGeomëry
 *
	tXkbGeomëryPå
;

420 
	s_XkbDesc
 {

421 
_XDi•œy
 * 
	mdpy
;

422 
	mÊags
;

423 
	mdevi˚_•ec
;

424 
KeyCode
 
	mmö_key_code
;

425 
KeyCode
 
	mmax_key_code
;

427 
XkbC⁄åﬁsPå
 
	m˘æs
;

428 
XkbSîvîM≠På
 
	m£rvî
;

429 
XkbClõ¡M≠På
 
	mm≠
;

430 
XkbIndiˇt‹På
 
	mödiˇt‹s
;

431 
XkbNamesPå
 
	m«mes
;

432 
XkbCom∑tM≠På
 
	mcom∑t
;

433 
XkbGeomëryPå
 
	mgeom
;

434 } 
	tXkbDescRec
, *
	tXkbDescPå
;

435 
	#XkbKeyKeyTy≥Index
(
d
,
k
,
g
Ë(
	`XkbCMKeyTy≥Index
((d)->
m≠
,k,g))

	)

436 
	#XkbKeyKeyTy≥
(
d
,
k
,
g
Ë(
	`XkbCMKeyTy≥
((d)->
m≠
,k,g))

	)

437 
	#XkbKeyGroupWidth
(
d
,
k
,
g
Ë(
	`XkbCMKeyGroupWidth
((d)->
m≠
,k,g))

	)

438 
	#XkbKeyGroupsWidth
(
d
,
k
Ë(
	`XkbCMKeyGroupsWidth
((d)->
m≠
,k))

	)

439 
	#XkbKeyGroupInfo
(
d
,
k
Ë(
	`XkbCMKeyGroupInfo
((d)->
m≠
,(k)))

	)

440 
	#XkbKeyNumGroups
(
d
,
k
Ë(
	`XkbCMKeyNumGroups
((d)->
m≠
,(k)))

	)

441 
	#XkbKeyNumSyms
(
d
,
k
Ë(
	`XkbCMKeyNumSyms
((d)->
m≠
,(k)))

	)

442 
	#XkbKeySymsPå
(
d
,
k
Ë(
	`XkbCMKeySymsPå
((d)->
m≠
,(k)))

	)

443 
	#XkbKeySym
(
d
,
k
,
n
Ë(
	`XkbKeySymsPå
(d,k)[n])

	)

444 
	#XkbKeySymE¡ry
(
d
,
k
,
¶
,
g
) \

445 (
	`XkbKeySym
(
d
,
k
,((
	`XkbKeyGroupsWidth
(d,k)*(
g
))+(
¶
))))

	)

446 
	#XkbKeyA˘i⁄
(
d
,
k
,
n
) \

447 (
	`XkbKeyHasA˘i⁄s
(
d
,
k
)?&
	`XkbKeyA˘i⁄sPå
(d,k)[
n
]:
NULL
)

	)

448 
	#XkbKeyA˘i⁄E¡ry
(
d
,
k
,
¶
,
g
) \

449 (
	`XkbKeyHasA˘i⁄s
(
d
,
k
)?\

450 
	`XkbKeyA˘i⁄
(
d
,
k
,((
	`XkbKeyGroupsWidth
(d,k)*(
g
))+(
¶
))):
NULL
)

	)

452 
	#XkbKeyHasA˘i⁄s
(
d
,
k
Ë((d)->
£rvî
->
key_a˘s
[k]!=0)

	)

453 
	#XkbKeyNumA˘i⁄s
(
d
,
k
Ë(
	`XkbKeyHasA˘i⁄s
(d,k)?
	`XkbKeyNumSyms
(d,k):1)

	)

454 
	#XkbKeyA˘i⁄sPå
(
d
,
k
Ë(
	`XkbSMKeyA˘i⁄sPå
((d)->
£rvî
,k))

	)

455 
	#XkbKeycodeInR™ge
(
d
,
k
Ë(((k)>=(d)->
mö_key_code
)&&\

456 ((
k
)<=(
d
)->
max_key_code
))

	)

457 
	#XkbNumKeys
(
d
Ë((d)->
max_key_code
-(d)->
mö_key_code
+1)

	)

464 
	s_XkbM≠Ch™ges
 {

465 
	mch™ged
;

466 
KeyCode
 
	mmö_key_code
;

467 
KeyCode
 
	mmax_key_code
;

468 
	mfú°_ty≥
;

469 
	mnum_ty≥s
;

470 
KeyCode
 
	mfú°_key_sym
;

471 
	mnum_key_syms
;

472 
KeyCode
 
	mfú°_key_a˘
;

473 
	mnum_key_a˘s
;

474 
KeyCode
 
	mfú°_key_behavi‹
;

475 
	mnum_key_behavi‹s
;

476 
KeyCode
 
	mfú°_key_ex∂icô
;

477 
	mnum_key_ex∂icô
;

478 
KeyCode
 
	mfú°_modm≠_key
;

479 
	mnum_modm≠_keys
;

480 
KeyCode
 
	mfú°_vmodm≠_key
;

481 
	mnum_vmodm≠_keys
;

482 
	m∑d
;

483 
	mvmods
;

484 } 
	tXkbM≠Ch™gesRec
,*
	tXkbM≠Ch™gesPå
;

486 
	s_XkbC⁄åﬁsCh™ges
 {

487 
	mch™ged_˘æs
;

488 
	míabÀd_˘æs_ch™ges
;

489 
Boﬁ
 
	mnum_groups_ch™ged
;

490 } 
	tXkbC⁄åﬁsCh™gesRec
,*
	tXkbC⁄åﬁsCh™gesPå
;

492 
	s_XkbIndiˇt‹Ch™ges
 {

493 
	m°©e_ch™ges
;

494 
	mm≠_ch™ges
;

495 } 
	tXkbIndiˇt‹Ch™gesRec
,*
	tXkbIndiˇt‹Ch™gesPå
;

497 
	s_XkbNameCh™ges
 {

498 
	mch™ged
;

499 
	mfú°_ty≥
;

500 
	mnum_ty≥s
;

501 
	mfú°_lvl
;

502 
	mnum_lvls
;

503 
	mnum_Æü£s
;

504 
	mnum_rg
;

505 
	mfú°_key
;

506 
	mnum_keys
;

507 
	mch™ged_vmods
;

508 
	mch™ged_ödiˇt‹s
;

509 
	mch™ged_groups
;

510 } 
	tXkbNameCh™gesRec
,*
	tXkbNameCh™gesPå
;

512 
	s_XkbCom∑tCh™ges
 {

513 
	mch™ged_groups
;

514 
	mfú°_si
;

515 
	mnum_si
;

516 } 
	tXkbCom∑tCh™gesRec
,*
	tXkbCom∑tCh™gesPå
;

518 
	s_XkbCh™ges
 {

519 
	mdevi˚_•ec
;

520 
	m°©e_ch™ges
;

521 
XkbM≠Ch™gesRec
 
	mm≠
;

522 
XkbC⁄åﬁsCh™gesRec
 
	m˘æs
;

523 
XkbIndiˇt‹Ch™gesRec
 
	mödiˇt‹s
;

524 
XkbNameCh™gesRec
 
	m«mes
;

525 
XkbCom∑tCh™gesRec
 
	mcom∑t
;

526 } 
	tXkbCh™gesRec
, *
	tXkbCh™gesPå
;

533 
	s_XkbComp⁄ítNames
 {

534 * 
	mkeym≠
;

535 * 
	mkeycodes
;

536 * 
	mty≥s
;

537 * 
	mcom∑t
;

538 * 
	msymbﬁs
;

539 * 
	mgeomëry
;

540 } 
	tXkbComp⁄ítNamesRec
, *
	tXkbComp⁄ítNamesPå
;

542 
	s_XkbComp⁄ítName
 {

543 
	mÊags
;

544 * 
	m«me
;

545 } 
	tXkbComp⁄ítNameRec
,*
	tXkbComp⁄ítNamePå
;

547 
	s_XkbComp⁄ítLi°
 {

548 
	mnum_keym≠s
;

549 
	mnum_keycodes
;

550 
	mnum_ty≥s
;

551 
	mnum_com∑t
;

552 
	mnum_symbﬁs
;

553 
	mnum_geomëry
;

554 
XkbComp⁄ítNamePå
 
	mkeym≠s
;

555 
XkbComp⁄ítNamePå
 
	mkeycodes
;

556 
XkbComp⁄ítNamePå
 
	mty≥s
;

557 
XkbComp⁄ítNamePå
 
	mcom∑t
;

558 
XkbComp⁄ítNamePå
 
	msymbﬁs
;

559 
XkbComp⁄ítNamePå
 
	mgeomëry
;

560 } 
	tXkbComp⁄ítLi°Rec
, *
	tXkbComp⁄ítLi°På
;

566 
	s_XkbDevi˚LedInfo
 {

567 
	mÀd_˛ass
;

568 
	mÀd_id
;

569 
	mphys_ödiˇt‹s
;

570 
	mm≠s_¥e£¡
;

571 
	m«mes_¥e£¡
;

572 
	m°©e
;

573 
Atom
 
	m«mes
[
XkbNumIndiˇt‹s
];

574 
XkbIndiˇt‹M≠Rec
 
	mm≠s
[
XkbNumIndiˇt‹s
];

575 } 
	tXkbDevi˚LedInfoRec
,*
	tXkbDevi˚LedInfoPå
;

577 
	s_XkbDevi˚Info
 {

578 * 
	m«me
;

579 
Atom
 
	mty≥
;

580 
	mdevi˚_•ec
;

581 
Boﬁ
 
	mhas_own_°©e
;

582 
	msuµ‹ãd
;

583 
	munsuµ‹ãd
;

585 
	mnum_bäs
;

586 
XkbA˘i⁄
 * 
	mbä_a˘s
;

588 
	msz_Àds
;

589 
	mnum_Àds
;

590 
	mdÊt_kbd_fb
;

591 
	mdÊt_Àd_fb
;

592 
XkbDevi˚LedInfoPå
 
	mÀds
;

593 } 
	tXkbDevi˚InfoRec
,*
	tXkbDevi˚InfoPå
;

595 
	#XkbXI_DevHasBäA˘s
(
d
Ë(((d)->
num_bäs
>0)&&((d)->
bä_a˘s
!=
NULL
))

	)

596 
	#XkbXI_LegÆDevBä
(
d
,
b
Ë(
	`XkbXI_DevHasBäA˘s
(d)&&((b)<(d)->
num_bäs
))

	)

597 
	#XkbXI_DevHasLeds
(
d
Ë(((d)->
num_Àds
>0)&&((d)->
Àds
!=
NULL
))

	)

599 
	s_XkbDevi˚LedCh™ges
 {

600 
	mÀd_˛ass
;

601 
	mÀd_id
;

602 
	mdeföed
;

603 
_XkbDevi˚LedCh™ges
 *
	m√xt
;

604 } 
	tXkbDevi˚LedCh™gesRec
,*
	tXkbDevi˚LedCh™gesPå
;

606 
	s_XkbDevi˚Ch™ges
 {

607 
	mch™ged
;

608 
	mfú°_bä
;

609 
	mnum_bäs
;

610 
XkbDevi˚LedCh™gesRec
 
	mÀds
;

611 } 
	tXkbDevi˚Ch™gesRec
,*
	tXkbDevi˚Ch™gesPå
;

	@/usr/include/X11/extensions/shm.h

29 #i‚de‡
_SHM_H_


30 
	#_SHM_H_


	)

32 
	#SHMNAME
 "MIT-SHM"

	)

34 
	#SHM_MAJOR_VERSION
 1

	)

35 
	#SHM_MINOR_VERSION
 2

	)

37 
	#ShmCom∂ëi⁄
 0

	)

38 
	#ShmNumbîEvíts
 (
ShmCom∂ëi⁄
 + 1)

	)

40 
	#BadShmSeg
 0

	)

41 
	#ShmNumbîEº‹s
 (
BadShmSeg
 + 1)

	)

	@/usr/include/X11/keysymdef.h

115 
	#XK_VoidSymbﬁ
 0xfffff‡

	)

117 #ifde‡
XK_MISCELLANY


124 
	#XK_BackS∑˚
 0xff08

	)

125 
	#XK_Tab
 0xff09

	)

126 
	#XK_Löe„ed
 0xff0®

	)

127 
	#XK_CÀ¨
 0xff0b

	)

128 
	#XK_Rëu∫
 0xff0d

	)

129 
	#XK_Pau£
 0xff13

	)

130 
	#XK_S¸ﬁl_Lock
 0xff14

	)

131 
	#XK_Sys_Req
 0xff15

	)

132 
	#XK_Esˇ≥
 0xff1b

	)

133 
	#XK_Dñëe
 0xfff‡

	)

139 
	#XK_Mu…i_key
 0xff20

	)

140 
	#XK_Codeöput
 0xff37

	)

141 
	#XK_SögÀC™did©e
 0xff3c

	)

142 
	#XK_Mu…ùÀC™did©e
 0xff3d

	)

143 
	#XK_PªviousC™did©e
 0xff3e

	)

147 
	#XK_K™ji
 0xff21

	)

148 
	#XK_Muhík™
 0xff22

	)

149 
	#XK_Hík™_Mode
 0xff23

	)

150 
	#XK_Hík™
 0xff23

	)

151 
	#XK_Romaji
 0xff24

	)

152 
	#XK_Húag™a
 0xff25

	)

153 
	#XK_K©ak™a
 0xff26

	)

154 
	#XK_Húag™a_K©ak™a
 0xff27

	)

155 
	#XK_Zíkaku
 0xff28

	)

156 
	#XK_H™kaku
 0xff29

	)

157 
	#XK_Zíkaku_H™kaku
 0xff2®

	)

158 
	#XK_Touroku
 0xff2b

	)

159 
	#XK_Massyo
 0xff2¯

	)

160 
	#XK_K™a_Lock
 0xff2d

	)

161 
	#XK_K™a_Shi·
 0xff2ê

	)

162 
	#XK_Eisu_Shi·
 0xff2‡

	)

163 
	#XK_Eisu_toggÀ
 0xff30

	)

164 
	#XK_K™ji_B™gou
 0xff37

	)

165 
	#XK_Zí_Koho
 0xff3d

	)

166 
	#XK_M´_Koho
 0xff3ê

	)

172 
	#XK_Home
 0xff50

	)

173 
	#XK_Le·
 0xff51

	)

174 
	#XK_Up
 0xff52

	)

175 
	#XK_Right
 0xff53

	)

176 
	#XK_Down
 0xff54

	)

177 
	#XK_Pri‹
 0xff55

	)

178 
	#XK_Page_Up
 0xff55

	)

179 
	#XK_Next
 0xff56

	)

180 
	#XK_Page_Down
 0xff56

	)

181 
	#XK_End
 0xff57

	)

182 
	#XK_Begö
 0xff58

	)

187 
	#XK_Sñe˘
 0xff60

	)

188 
	#XK_Pröt
 0xff61

	)

189 
	#XK_Execuã
 0xff62

	)

190 
	#XK_In£π
 0xff63

	)

191 
	#XK_Undo
 0xff65

	)

192 
	#XK_Redo
 0xff66

	)

193 
	#XK_Míu
 0xff67

	)

194 
	#XK_Föd
 0xff68

	)

195 
	#XK_C™˚l
 0xff69

	)

196 
	#XK_Hñp
 0xff6®

	)

197 
	#XK_Bªak
 0xff6b

	)

198 
	#XK_Mode_swôch
 0xff7ê

	)

199 
	#XK_s¸ùt_swôch
 0xff7ê

	)

200 
	#XK_Num_Lock
 0xff7f

	)

204 
	#XK_KP_S∑˚
 0xff80

	)

205 
	#XK_KP_Tab
 0xff89

	)

206 
	#XK_KP_E¡î
 0xff8d

	)

207 
	#XK_KP_F1
 0xff91

	)

208 
	#XK_KP_F2
 0xff92

	)

209 
	#XK_KP_F3
 0xff93

	)

210 
	#XK_KP_F4
 0xff94

	)

211 
	#XK_KP_Home
 0xff95

	)

212 
	#XK_KP_Le·
 0xff96

	)

213 
	#XK_KP_Up
 0xff97

	)

214 
	#XK_KP_Right
 0xff98

	)

215 
	#XK_KP_Down
 0xff99

	)

216 
	#XK_KP_Pri‹
 0xff9a

	)

217 
	#XK_KP_Page_Up
 0xff9a

	)

218 
	#XK_KP_Next
 0xff9b

	)

219 
	#XK_KP_Page_Down
 0xff9b

	)

220 
	#XK_KP_End
 0xff9c

	)

221 
	#XK_KP_Begö
 0xff9d

	)

222 
	#XK_KP_In£π
 0xff9e

	)

223 
	#XK_KP_Dñëe
 0xff9f

	)

224 
	#XK_KP_EquÆ
 0xffbd

	)

225 
	#XK_KP_Mu…ùly
 0xfÁa

	)

226 
	#XK_KP_Add
 0xfÁb

	)

227 
	#XK_KP_Sï¨©‹
 0xfÁ¯

	)

228 
	#XK_KP_Subåa˘
 0xfÁd

	)

229 
	#XK_KP_DecimÆ
 0xfÁe

	)

230 
	#XK_KP_Divide
 0xfÁf

	)

232 
	#XK_KP_0
 0xffb0

	)

233 
	#XK_KP_1
 0xffb1

	)

234 
	#XK_KP_2
 0xffb2

	)

235 
	#XK_KP_3
 0xffb3

	)

236 
	#XK_KP_4
 0xffb4

	)

237 
	#XK_KP_5
 0xffb5

	)

238 
	#XK_KP_6
 0xffb6

	)

239 
	#XK_KP_7
 0xffb7

	)

240 
	#XK_KP_8
 0xffb8

	)

241 
	#XK_KP_9
 0xffb9

	)

252 
	#XK_F1
 0xffbe

	)

253 
	#XK_F2
 0xffbf

	)

254 
	#XK_F3
 0xffc0

	)

255 
	#XK_F4
 0xffc1

	)

256 
	#XK_F5
 0xffc2

	)

257 
	#XK_F6
 0xffc3

	)

258 
	#XK_F7
 0xffc4

	)

259 
	#XK_F8
 0xffc5

	)

260 
	#XK_F9
 0xffc6

	)

261 
	#XK_F10
 0xffc7

	)

262 
	#XK_F11
 0xffc8

	)

263 
	#XK_L1
 0xffc8

	)

264 
	#XK_F12
 0xffc9

	)

265 
	#XK_L2
 0xffc9

	)

266 
	#XK_F13
 0xffˇ

	)

267 
	#XK_L3
 0xffˇ

	)

268 
	#XK_F14
 0xffcb

	)

269 
	#XK_L4
 0xffcb

	)

270 
	#XK_F15
 0xffcc

	)

271 
	#XK_L5
 0xffcc

	)

272 
	#XK_F16
 0xffcd

	)

273 
	#XK_L6
 0xffcd

	)

274 
	#XK_F17
 0xff˚

	)

275 
	#XK_L7
 0xff˚

	)

276 
	#XK_F18
 0xffcf

	)

277 
	#XK_L8
 0xffcf

	)

278 
	#XK_F19
 0xffd0

	)

279 
	#XK_L9
 0xffd0

	)

280 
	#XK_F20
 0xffd1

	)

281 
	#XK_L10
 0xffd1

	)

282 
	#XK_F21
 0xffd2

	)

283 
	#XK_R1
 0xffd2

	)

284 
	#XK_F22
 0xffd3

	)

285 
	#XK_R2
 0xffd3

	)

286 
	#XK_F23
 0xffd4

	)

287 
	#XK_R3
 0xffd4

	)

288 
	#XK_F24
 0xffd5

	)

289 
	#XK_R4
 0xffd5

	)

290 
	#XK_F25
 0xffd6

	)

291 
	#XK_R5
 0xffd6

	)

292 
	#XK_F26
 0xffd7

	)

293 
	#XK_R6
 0xffd7

	)

294 
	#XK_F27
 0xffd8

	)

295 
	#XK_R7
 0xffd8

	)

296 
	#XK_F28
 0xffd9

	)

297 
	#XK_R8
 0xffd9

	)

298 
	#XK_F29
 0xffda

	)

299 
	#XK_R9
 0xffda

	)

300 
	#XK_F30
 0xffdb

	)

301 
	#XK_R10
 0xffdb

	)

302 
	#XK_F31
 0xffdc

	)

303 
	#XK_R11
 0xffdc

	)

304 
	#XK_F32
 0xffdd

	)

305 
	#XK_R12
 0xffdd

	)

306 
	#XK_F33
 0xffde

	)

307 
	#XK_R13
 0xffde

	)

308 
	#XK_F34
 0xffdf

	)

309 
	#XK_R14
 0xffdf

	)

310 
	#XK_F35
 0xf„0

	)

311 
	#XK_R15
 0xf„0

	)

315 
	#XK_Shi·_L
 0xf„1

	)

316 
	#XK_Shi·_R
 0xf„2

	)

317 
	#XK_C⁄åﬁ_L
 0xf„3

	)

318 
	#XK_C⁄åﬁ_R
 0xf„4

	)

319 
	#XK_C≠s_Lock
 0xf„5

	)

320 
	#XK_Shi·_Lock
 0xf„6

	)

322 
	#XK_Mëa_L
 0xf„7

	)

323 
	#XK_Mëa_R
 0xf„8

	)

324 
	#XK_A…_L
 0xf„9

	)

325 
	#XK_A…_R
 0xf„®

	)

326 
	#XK_Su≥r_L
 0xf„b

	)

327 
	#XK_Su≥r_R
 0xf„¯

	)

328 
	#XK_Hy≥r_L
 0xf„d

	)

329 
	#XK_Hy≥r_R
 0xf„ê

	)

338 #ifde‡
XK_XKB_KEYS


339 
	#XK_ISO_Lock
 0x„01

	)

340 
	#XK_ISO_Levñ2_L©ch
 0x„02

	)

341 
	#XK_ISO_Levñ3_Shi·
 0x„03

	)

342 
	#XK_ISO_Levñ3_L©ch
 0x„04

	)

343 
	#XK_ISO_Levñ3_Lock
 0x„05

	)

344 
	#XK_ISO_Levñ5_Shi·
 0x„11

	)

345 
	#XK_ISO_Levñ5_L©ch
 0x„12

	)

346 
	#XK_ISO_Levñ5_Lock
 0x„13

	)

347 
	#XK_ISO_Group_Shi·
 0xff7ê

	)

348 
	#XK_ISO_Group_L©ch
 0x„06

	)

349 
	#XK_ISO_Group_Lock
 0x„07

	)

350 
	#XK_ISO_Next_Group
 0x„08

	)

351 
	#XK_ISO_Next_Group_Lock
 0x„09

	)

352 
	#XK_ISO_Pªv_Group
 0x„0a

	)

353 
	#XK_ISO_Pªv_Group_Lock
 0x„0b

	)

354 
	#XK_ISO_Fú°_Group
 0x„0c

	)

355 
	#XK_ISO_Fú°_Group_Lock
 0x„0d

	)

356 
	#XK_ISO_La°_Group
 0x„0e

	)

357 
	#XK_ISO_La°_Group_Lock
 0x„0f

	)

359 
	#XK_ISO_Le·_Tab
 0x„20

	)

360 
	#XK_ISO_Move_Löe_Up
 0x„21

	)

361 
	#XK_ISO_Move_Löe_Down
 0x„22

	)

362 
	#XK_ISO_P¨tül_Löe_Up
 0x„23

	)

363 
	#XK_ISO_P¨tül_Löe_Down
 0x„24

	)

364 
	#XK_ISO_P¨tül_S∑˚_Le·
 0x„25

	)

365 
	#XK_ISO_P¨tül_S∑˚_Right
 0x„26

	)

366 
	#XK_ISO_Së_M¨gö_Le·
 0x„27

	)

367 
	#XK_ISO_Së_M¨gö_Right
 0x„28

	)

368 
	#XK_ISO_Rñó£_M¨gö_Le·
 0x„29

	)

369 
	#XK_ISO_Rñó£_M¨gö_Right
 0x„2a

	)

370 
	#XK_ISO_Rñó£_BŸh_M¨gös
 0x„2b

	)

371 
	#XK_ISO_Fa°_Curs‹_Le·
 0x„2c

	)

372 
	#XK_ISO_Fa°_Curs‹_Right
 0x„2d

	)

373 
	#XK_ISO_Fa°_Curs‹_Up
 0x„2e

	)

374 
	#XK_ISO_Fa°_Curs‹_Down
 0x„2f

	)

375 
	#XK_ISO_C⁄töuous_Undîlöe
 0x„30

	)

376 
	#XK_ISO_Disc⁄töuous_Undîlöe
 0x„31

	)

377 
	#XK_ISO_Emphasize
 0x„32

	)

378 
	#XK_ISO_Cíãr_Obje˘
 0x„33

	)

379 
	#XK_ISO_E¡î
 0x„34

	)

381 
	#XK_dód_gøve
 0x„50

	)

382 
	#XK_dód_acuã
 0x„51

	)

383 
	#XK_dód_cúcumÊex
 0x„52

	)

384 
	#XK_dód_tûde
 0x„53

	)

385 
	#XK_dód_≥ri•omíi
 0x„53

	)

386 
	#XK_dód_ma¸⁄
 0x„54

	)

387 
	#XK_dód_bªve
 0x„55

	)

388 
	#XK_dód_abovedŸ
 0x„56

	)

389 
	#XK_dód_düîesis
 0x„57

	)

390 
	#XK_dód_abovîög
 0x„58

	)

391 
	#XK_dód_doubÀacuã
 0x„59

	)

392 
	#XK_dód_ˇr⁄
 0x„5a

	)

393 
	#XK_dód_˚dûœ
 0x„5b

	)

394 
	#XK_dód_og⁄ek
 0x„5c

	)

395 
	#XK_dód_iŸa
 0x„5d

	)

396 
	#XK_dód_voi˚d_sound
 0x„5e

	)

397 
	#XK_dód_£mivoi˚d_sound
 0x„5f

	)

398 
	#XK_dód_bñowdŸ
 0x„60

	)

399 
	#XK_dód_hook
 0x„61

	)

400 
	#XK_dód_h‹n
 0x„62

	)

401 
	#XK_dód_°roke
 0x„63

	)

402 
	#XK_dód_abovecomma
 0x„64

	)

403 
	#XK_dód_psûi
 0x„64

	)

404 
	#XK_dód_abovîevî£dcomma
 0x„65

	)

405 
	#XK_dód_dasü
 0x„65

	)

406 
	#XK_dód_doubÀgøve
 0x„66

	)

407 
	#XK_dód_bñowrög
 0x„67

	)

408 
	#XK_dód_bñowma¸⁄
 0x„68

	)

409 
	#XK_dód_bñowcúcumÊex
 0x„69

	)

410 
	#XK_dód_bñowtûde
 0x„6a

	)

411 
	#XK_dód_bñowbªve
 0x„6b

	)

412 
	#XK_dód_bñowdüîesis
 0x„6c

	)

413 
	#XK_dód_övîãdbªve
 0x„6d

	)

414 
	#XK_dód_bñowcomma
 0x„6e

	)

415 
	#XK_dód_cuºícy
 0x„6f

	)

418 
	#XK_dód_lowlöe
 0x„90

	)

419 
	#XK_dód_abovevîtiˇŒöe
 0x„91

	)

420 
	#XK_dód_bñowvîtiˇŒöe
 0x„92

	)

421 
	#XK_dód_l⁄gsﬁidusovîœy
 0x„93

	)

424 
	#XK_dód_a
 0x„80

	)

425 
	#XK_dód_A
 0x„81

	)

426 
	#XK_dód_e
 0x„82

	)

427 
	#XK_dód_E
 0x„83

	)

428 
	#XK_dód_i
 0x„84

	)

429 
	#XK_dód_I
 0x„85

	)

430 
	#XK_dód_o
 0x„86

	)

431 
	#XK_dód_O
 0x„87

	)

432 
	#XK_dód_u
 0x„88

	)

433 
	#XK_dód_U
 0x„89

	)

434 
	#XK_dód_smÆl_schwa
 0x„8a

	)

435 
	#XK_dód_ˇpôÆ_schwa
 0x„8b

	)

437 
	#XK_dód_gªek
 0x„8c

	)

439 
	#XK_Fú°_VútuÆ_S¸ìn
 0x„d0

	)

440 
	#XK_Pªv_VútuÆ_S¸ìn
 0x„d1

	)

441 
	#XK_Next_VútuÆ_S¸ìn
 0x„d2

	)

442 
	#XK_La°_VútuÆ_S¸ìn
 0x„d4

	)

443 
	#XK_Tîmö©e_Sîvî
 0x„d5

	)

445 
	#XK_Ac˚ssX_E«bÀ
 0x„70

	)

446 
	#XK_Ac˚ssX_Fìdback_E«bÀ
 0x„71

	)

447 
	#XK_RïótKeys_E«bÀ
 0x„72

	)

448 
	#XK_SlowKeys_E«bÀ
 0x„73

	)

449 
	#XK_Boun˚Keys_E«bÀ
 0x„74

	)

450 
	#XK_StickyKeys_E«bÀ
 0x„75

	)

451 
	#XK_Mou£Keys_E«bÀ
 0x„76

	)

452 
	#XK_Mou£Keys_Ac˚l_E«bÀ
 0x„77

	)

453 
	#XK_Ovîœy1_E«bÀ
 0x„78

	)

454 
	#XK_Ovîœy2_E«bÀ
 0x„79

	)

455 
	#XK_AudibÀBñl_E«bÀ
 0x„7a

	)

457 
	#XK_Poöãr_Le·
 0x„e0

	)

458 
	#XK_Poöãr_Right
 0x„e1

	)

459 
	#XK_Poöãr_Up
 0x„e2

	)

460 
	#XK_Poöãr_Down
 0x„e3

	)

461 
	#XK_Poöãr_UpLe·
 0x„e4

	)

462 
	#XK_Poöãr_UpRight
 0x„e5

	)

463 
	#XK_Poöãr_DownLe·
 0x„e6

	)

464 
	#XK_Poöãr_DownRight
 0x„e7

	)

465 
	#XK_Poöãr_Buâ⁄_DÊt
 0x„e8

	)

466 
	#XK_Poöãr_Buâ⁄1
 0x„e9

	)

467 
	#XK_Poöãr_Buâ⁄2
 0x„ó

	)

468 
	#XK_Poöãr_Buâ⁄3
 0x„eb

	)

469 
	#XK_Poöãr_Buâ⁄4
 0x„ec

	)

470 
	#XK_Poöãr_Buâ⁄5
 0x„ed

	)

471 
	#XK_Poöãr_DblClick_DÊt
 0x„ì

	)

472 
	#XK_Poöãr_DblClick1
 0x„ef

	)

473 
	#XK_Poöãr_DblClick2
 0x„f0

	)

474 
	#XK_Poöãr_DblClick3
 0x„f1

	)

475 
	#XK_Poöãr_DblClick4
 0x„f2

	)

476 
	#XK_Poöãr_DblClick5
 0x„f3

	)

477 
	#XK_Poöãr_Døg_DÊt
 0x„f4

	)

478 
	#XK_Poöãr_Døg1
 0x„f5

	)

479 
	#XK_Poöãr_Døg2
 0x„f6

	)

480 
	#XK_Poöãr_Døg3
 0x„f7

	)

481 
	#XK_Poöãr_Døg4
 0x„f8

	)

482 
	#XK_Poöãr_Døg5
 0x„fd

	)

484 
	#XK_Poöãr_E«bÀKeys
 0x„f9

	)

485 
	#XK_Poöãr_Ac˚Àøã
 0x„Á

	)

486 
	#XK_Poöãr_DÊtBäNext
 0x„fb

	)

487 
	#XK_Poöãr_DÊtBäPªv
 0x„fc

	)

491 
	#XK_ch
 0x„a0

	)

492 
	#XK_Ch
 0x„a1

	)

493 
	#XK_CH
 0x„a2

	)

494 
	#XK_c_h
 0x„a3

	)

495 
	#XK_C_h
 0x„a4

	)

496 
	#XK_C_H
 0x„a5

	)

505 #ifde‡
XK_3270


506 
	#XK_3270_Du∂iˇã
 0xfd01

	)

507 
	#XK_3270_FõldM¨k
 0xfd02

	)

508 
	#XK_3270_Right2
 0xfd03

	)

509 
	#XK_3270_Le·2
 0xfd04

	)

510 
	#XK_3270_BackTab
 0xfd05

	)

511 
	#XK_3270_Eø£EOF
 0xfd06

	)

512 
	#XK_3270_Eø£I≈ut
 0xfd07

	)

513 
	#XK_3270_Re£t
 0xfd08

	)

514 
	#XK_3270_Quô
 0xfd09

	)

515 
	#XK_3270_PA1
 0xfd0a

	)

516 
	#XK_3270_PA2
 0xfd0b

	)

517 
	#XK_3270_PA3
 0xfd0c

	)

518 
	#XK_3270_Te°
 0xfd0d

	)

519 
	#XK_3270_Aân
 0xfd0e

	)

520 
	#XK_3270_Curs‹Blök
 0xfd0f

	)

521 
	#XK_3270_A…Curs‹
 0xfd10

	)

522 
	#XK_3270_KeyClick
 0xfd11

	)

523 
	#XK_3270_Jump
 0xfd12

	)

524 
	#XK_3270_Idít
 0xfd13

	)

525 
	#XK_3270_RuÀ
 0xfd14

	)

526 
	#XK_3270_C›y
 0xfd15

	)

527 
	#XK_3270_Pœy
 0xfd16

	)

528 
	#XK_3270_Sëup
 0xfd17

	)

529 
	#XK_3270_Rec‹d
 0xfd18

	)

530 
	#XK_3270_Ch™geS¸ìn
 0xfd19

	)

531 
	#XK_3270_DñëeW‹d
 0xfd1a

	)

532 
	#XK_3270_ExSñe˘
 0xfd1b

	)

533 
	#XK_3270_Curs‹Sñe˘
 0xfd1c

	)

534 
	#XK_3270_PrötS¸ìn
 0xfd1d

	)

535 
	#XK_3270_E¡î
 0xfd1e

	)

543 #ifde‡
XK_LATIN1


544 
	#XK_•a˚
 0x0020

	)

545 
	#XK_ex˛am
 0x0021

	)

546 
	#XK_quŸedbl
 0x0022

	)

547 
	#XK_numbîsign
 0x0023

	)

548 
	#XK_dﬁœr
 0x0024

	)

549 
	#XK_≥r˚¡
 0x0025

	)

550 
	#XK_am≥rßnd
 0x0026

	)

551 
	#XK_≠o°r›he
 0x0027

	)

552 
	#XK_quŸîight
 0x0027

	)

553 
	#XK_∑ª∆e·
 0x0028

	)

554 
	#XK_∑ªƒight
 0x0029

	)

555 
	#XK_a°îisk
 0x002®

	)

556 
	#XK_∂us
 0x002b

	)

557 
	#XK_comma
 0x002¯

	)

558 
	#XK_möus
 0x002d

	)

559 
	#XK_≥riod
 0x002ê

	)

560 
	#XK_¶ash
 0x002‡

	)

561 
	#XK_0
 0x0030

	)

562 
	#XK_1
 0x0031

	)

563 
	#XK_2
 0x0032

	)

564 
	#XK_3
 0x0033

	)

565 
	#XK_4
 0x0034

	)

566 
	#XK_5
 0x0035

	)

567 
	#XK_6
 0x0036

	)

568 
	#XK_7
 0x0037

	)

569 
	#XK_8
 0x0038

	)

570 
	#XK_9
 0x0039

	)

571 
	#XK_cﬁ⁄
 0x003®

	)

572 
	#XK_£micﬁ⁄
 0x003b

	)

573 
	#XK_Àss
 0x003¯

	)

574 
	#XK_equÆ
 0x003d

	)

575 
	#XK_gª©î
 0x003ê

	)

576 
	#XK_que°i⁄
 0x003‡

	)

577 
	#XK_©
 0x0040

	)

578 
	#XK_A
 0x0041

	)

579 
	#XK_B
 0x0042

	)

580 
	#XK_C
 0x0043

	)

581 
	#XK_D
 0x0044

	)

582 
	#XK_E
 0x0045

	)

583 
	#XK_F
 0x0046

	)

584 
	#XK_G
 0x0047

	)

585 
	#XK_H
 0x0048

	)

586 
	#XK_I
 0x0049

	)

587 
	#XK_J
 0x004®

	)

588 
	#XK_K
 0x004b

	)

589 
	#XK_L
 0x004¯

	)

590 
	#XK_M
 0x004d

	)

591 
	#XK_N
 0x004ê

	)

592 
	#XK_O
 0x004‡

	)

593 
	#XK_P
 0x0050

	)

594 
	#XK_Q
 0x0051

	)

595 
	#XK_R
 0x0052

	)

596 
	#XK_S
 0x0053

	)

597 
	#XK_T
 0x0054

	)

598 
	#XK_U
 0x0055

	)

599 
	#XK_V
 0x0056

	)

600 
	#XK_W
 0x0057

	)

601 
	#XK_X
 0x0058

	)

602 
	#XK_Y
 0x0059

	)

603 
	#XK_Z
 0x005®

	)

604 
	#XK_bøckëÀ·
 0x005b

	)

605 
	#XK_back¶ash
 0x005¯

	)

606 
	#XK_bøckëright
 0x005d

	)

607 
	#XK_asciicúcum
 0x005ê

	)

608 
	#XK_undîsc‹e
 0x005‡

	)

609 
	#XK_gøve
 0x0060

	)

610 
	#XK_quŸñe·
 0x0060

	)

611 
	#XK_a
 0x0061

	)

612 
	#XK_b
 0x0062

	)

613 
	#XK_c
 0x0063

	)

614 
	#XK_d
 0x0064

	)

615 
	#XK_e
 0x0065

	)

616 
	#XK_f
 0x0066

	)

617 
	#XK_g
 0x0067

	)

618 
	#XK_h
 0x0068

	)

619 
	#XK_i
 0x0069

	)

620 
	#XK_j
 0x006®

	)

621 
	#XK_k
 0x006b

	)

622 
	#XK_l
 0x006¯

	)

623 
	#XK_m
 0x006d

	)

624 
	#XK_n
 0x006ê

	)

625 
	#XK_o
 0x006‡

	)

626 
	#XK_p
 0x0070

	)

627 
	#XK_q
 0x0071

	)

628 
	#XK_r
 0x0072

	)

629 
	#XK_s
 0x0073

	)

630 
	#XK_t
 0x0074

	)

631 
	#XK_u
 0x0075

	)

632 
	#XK_v
 0x0076

	)

633 
	#XK_w
 0x0077

	)

634 
	#XK_x
 0x0078

	)

635 
	#XK_y
 0x0079

	)

636 
	#XK_z
 0x007®

	)

637 
	#XK_bø˚À·
 0x007b

	)

638 
	#XK_b¨
 0x007¯

	)

639 
	#XK_bø˚right
 0x007d

	)

640 
	#XK_asciôûde
 0x007ê

	)

642 
	#XK_nobªak•a˚
 0x00a0

	)

643 
	#XK_ex˛amdown
 0x00a1

	)

644 
	#XK_˚¡
 0x00a2

	)

645 
	#XK_°îlög
 0x00a3

	)

646 
	#XK_cuºícy
 0x00a4

	)

647 
	#XK_yí
 0x00a5

	)

648 
	#XK_brokíb¨
 0x00a6

	)

649 
	#XK_£˘i⁄
 0x00a7

	)

650 
	#XK_düîesis
 0x00a8

	)

651 
	#XK_c›yright
 0x00a9

	)

652 
	#XK_‹d„mööe
 0x00Ø

	)

653 
	#XK_guûÀmŸÀ·
 0x00ab

	)

654 
	#XK_nŸsign
 0x00a¯

	)

655 
	#XK_hyphí
 0x00ad

	)

656 
	#XK_ªgi°îed
 0x00´

	)

657 
	#XK_ma¸⁄
 0x00a‡

	)

658 
	#XK_degªe
 0x00b0

	)

659 
	#XK_∂usmöus
 0x00b1

	)

660 
	#XK_twosu≥ri‹
 0x00b2

	)

661 
	#XK_thªesu≥ri‹
 0x00b3

	)

662 
	#XK_acuã
 0x00b4

	)

663 
	#XK_mu
 0x00b5

	)

664 
	#XK_∑øgøph
 0x00b6

	)

665 
	#XK_≥riod˚¡îed
 0x00b7

	)

666 
	#XK_˚dûœ
 0x00b8

	)

667 
	#XK_⁄esu≥ri‹
 0x00b9

	)

668 
	#XK_masculöe
 0x00b®

	)

669 
	#XK_guûÀmŸright
 0x00bb

	)

670 
	#XK_⁄equ¨ãr
 0x00b¯

	)

671 
	#XK_⁄ehÆf
 0x00bd

	)

672 
	#XK_thªequ¨ãrs
 0x00bê

	)

673 
	#XK_que°i⁄down
 0x00b‡

	)

674 
	#XK_Agøve
 0x00c0

	)

675 
	#XK_Aacuã
 0x00c1

	)

676 
	#XK_AcúcumÊex
 0x00c2

	)

677 
	#XK_Atûde
 0x00c3

	)

678 
	#XK_Adüîesis
 0x00c4

	)

679 
	#XK_Arög
 0x00c5

	)

680 
	#XK_AE
 0x00c6

	)

681 
	#XK_C˚dûœ
 0x00c7

	)

682 
	#XK_Egøve
 0x00c8

	)

683 
	#XK_Eacuã
 0x00c9

	)

684 
	#XK_EcúcumÊex
 0x00ˇ

	)

685 
	#XK_Edüîesis
 0x00cb

	)

686 
	#XK_Igøve
 0x00c¯

	)

687 
	#XK_Iacuã
 0x00cd

	)

688 
	#XK_IcúcumÊex
 0x00˚

	)

689 
	#XK_Idüîesis
 0x00c‡

	)

690 
	#XK_ETH
 0x00d0

	)

691 
	#XK_Eth
 0x00d0

	)

692 
	#XK_Ntûde
 0x00d1

	)

693 
	#XK_Ogøve
 0x00d2

	)

694 
	#XK_Oacuã
 0x00d3

	)

695 
	#XK_OcúcumÊex
 0x00d4

	)

696 
	#XK_Otûde
 0x00d5

	)

697 
	#XK_Odüîesis
 0x00d6

	)

698 
	#XK_mu…ùly
 0x00d7

	)

699 
	#XK_O¶ash
 0x00d8

	)

700 
	#XK_Ooblique
 0x00d8

	)

701 
	#XK_Ugøve
 0x00d9

	)

702 
	#XK_Uacuã
 0x00d®

	)

703 
	#XK_UcúcumÊex
 0x00db

	)

704 
	#XK_Udüîesis
 0x00d¯

	)

705 
	#XK_Yacuã
 0x00dd

	)

706 
	#XK_THORN
 0x00dê

	)

707 
	#XK_Th‹n
 0x00dê

	)

708 
	#XK_ssh¨p
 0x00d‡

	)

709 
	#XK_agøve
 0x00e0

	)

710 
	#XK_Øcuã
 0x00e1

	)

711 
	#XK_acúcumÊex
 0x00e2

	)

712 
	#XK_©ûde
 0x00e3

	)

713 
	#XK_adüîesis
 0x00e4

	)

714 
	#XK_¨ög
 0x00e5

	)

715 
	#XK_´
 0x00e6

	)

716 
	#XK_c˚dûœ
 0x00e7

	)

717 
	#XK_egøve
 0x00e8

	)

718 
	#XK_ócuã
 0x00e9

	)

719 
	#XK_ecúcumÊex
 0x00ó

	)

720 
	#XK_edüîesis
 0x00eb

	)

721 
	#XK_igøve
 0x00e¯

	)

722 
	#XK_ücuã
 0x00ed

	)

723 
	#XK_icúcumÊex
 0x00ì

	)

724 
	#XK_idüîesis
 0x00e‡

	)

725 
	#XK_ëh
 0x00f0

	)

726 
	#XK_¡ûde
 0x00f1

	)

727 
	#XK_ogøve
 0x00f2

	)

728 
	#XK_ﬂcuã
 0x00f3

	)

729 
	#XK_ocúcumÊex
 0x00f4

	)

730 
	#XK_Ÿûde
 0x00f5

	)

731 
	#XK_odüîesis
 0x00f6

	)

732 
	#XK_divisi⁄
 0x00f7

	)

733 
	#XK_o¶ash
 0x00f8

	)

734 
	#XK_ooblique
 0x00f8

	)

735 
	#XK_ugøve
 0x00f9

	)

736 
	#XK_uacuã
 0x00Á

	)

737 
	#XK_ucúcumÊex
 0x00fb

	)

738 
	#XK_udüîesis
 0x00f¯

	)

739 
	#XK_yacuã
 0x00fd

	)

740 
	#XK_th‹n
 0x00„

	)

741 
	#XK_ydüîesis
 0x00f‡

	)

749 #ifde‡
XK_LATIN2


750 
	#XK_Aog⁄ek
 0x01a1

	)

751 
	#XK_bªve
 0x01a2

	)

752 
	#XK_L°roke
 0x01a3

	)

753 
	#XK_Lˇr⁄
 0x01a5

	)

754 
	#XK_Sacuã
 0x01a6

	)

755 
	#XK_Sˇr⁄
 0x01a9

	)

756 
	#XK_S˚dûœ
 0x01Ø

	)

757 
	#XK_Tˇr⁄
 0x01ab

	)

758 
	#XK_Zacuã
 0x01a¯

	)

759 
	#XK_Zˇr⁄
 0x01´

	)

760 
	#XK_ZabovedŸ
 0x01a‡

	)

761 
	#XK_aog⁄ek
 0x01b1

	)

762 
	#XK_og⁄ek
 0x01b2

	)

763 
	#XK_l°roke
 0x01b3

	)

764 
	#XK_lˇr⁄
 0x01b5

	)

765 
	#XK_ßcuã
 0x01b6

	)

766 
	#XK_ˇr⁄
 0x01b7

	)

767 
	#XK_sˇr⁄
 0x01b9

	)

768 
	#XK_s˚dûœ
 0x01b®

	)

769 
	#XK_tˇr⁄
 0x01bb

	)

770 
	#XK_zacuã
 0x01b¯

	)

771 
	#XK_doubÀacuã
 0x01bd

	)

772 
	#XK_zˇr⁄
 0x01bê

	)

773 
	#XK_zabovedŸ
 0x01b‡

	)

774 
	#XK_Racuã
 0x01c0

	)

775 
	#XK_Abªve
 0x01c3

	)

776 
	#XK_Lacuã
 0x01c5

	)

777 
	#XK_Cacuã
 0x01c6

	)

778 
	#XK_Cˇr⁄
 0x01c8

	)

779 
	#XK_Eog⁄ek
 0x01ˇ

	)

780 
	#XK_Eˇr⁄
 0x01c¯

	)

781 
	#XK_Dˇr⁄
 0x01c‡

	)

782 
	#XK_D°roke
 0x01d0

	)

783 
	#XK_Nacuã
 0x01d1

	)

784 
	#XK_Nˇr⁄
 0x01d2

	)

785 
	#XK_OdoubÀacuã
 0x01d5

	)

786 
	#XK_Rˇr⁄
 0x01d8

	)

787 
	#XK_Urög
 0x01d9

	)

788 
	#XK_UdoubÀacuã
 0x01db

	)

789 
	#XK_T˚dûœ
 0x01dê

	)

790 
	#XK_øcuã
 0x01e0

	)

791 
	#XK_abªve
 0x01e3

	)

792 
	#XK_œcuã
 0x01e5

	)

793 
	#XK_ˇcuã
 0x01e6

	)

794 
	#XK_cˇr⁄
 0x01e8

	)

795 
	#XK_eog⁄ek
 0x01ó

	)

796 
	#XK_eˇr⁄
 0x01e¯

	)

797 
	#XK_dˇr⁄
 0x01e‡

	)

798 
	#XK_d°roke
 0x01f0

	)

799 
	#XK_«cuã
 0x01f1

	)

800 
	#XK_nˇr⁄
 0x01f2

	)

801 
	#XK_odoubÀacuã
 0x01f5

	)

802 
	#XK_rˇr⁄
 0x01f8

	)

803 
	#XK_urög
 0x01f9

	)

804 
	#XK_udoubÀacuã
 0x01fb

	)

805 
	#XK_t˚dûœ
 0x01„

	)

806 
	#XK_abovedŸ
 0x01f‡

	)

814 #ifde‡
XK_LATIN3


815 
	#XK_H°roke
 0x02a1

	)

816 
	#XK_HcúcumÊex
 0x02a6

	)

817 
	#XK_IabovedŸ
 0x02a9

	)

818 
	#XK_Gbªve
 0x02ab

	)

819 
	#XK_JcúcumÊex
 0x02a¯

	)

820 
	#XK_h°roke
 0x02b1

	)

821 
	#XK_hcúcumÊex
 0x02b6

	)

822 
	#XK_idŸÀss
 0x02b9

	)

823 
	#XK_gbªve
 0x02bb

	)

824 
	#XK_jcúcumÊex
 0x02b¯

	)

825 
	#XK_CabovedŸ
 0x02c5

	)

826 
	#XK_CcúcumÊex
 0x02c6

	)

827 
	#XK_GabovedŸ
 0x02d5

	)

828 
	#XK_GcúcumÊex
 0x02d8

	)

829 
	#XK_Ubªve
 0x02dd

	)

830 
	#XK_ScúcumÊex
 0x02dê

	)

831 
	#XK_ˇbovedŸ
 0x02e5

	)

832 
	#XK_ccúcumÊex
 0x02e6

	)

833 
	#XK_gabovedŸ
 0x02f5

	)

834 
	#XK_gcúcumÊex
 0x02f8

	)

835 
	#XK_ubªve
 0x02fd

	)

836 
	#XK_scúcumÊex
 0x02„

	)

845 #ifde‡
XK_LATIN4


846 
	#XK_kø
 0x03a2

	)

847 
	#XK_k≠∑
 0x03a2

	)

848 
	#XK_R˚dûœ
 0x03a3

	)

849 
	#XK_Itûde
 0x03a5

	)

850 
	#XK_L˚dûœ
 0x03a6

	)

851 
	#XK_Ema¸⁄
 0x03Ø

	)

852 
	#XK_G˚dûœ
 0x03ab

	)

853 
	#XK_T¶ash
 0x03a¯

	)

854 
	#XK_r˚dûœ
 0x03b3

	)

855 
	#XK_ôûde
 0x03b5

	)

856 
	#XK_l˚dûœ
 0x03b6

	)

857 
	#XK_ema¸⁄
 0x03b®

	)

858 
	#XK_g˚dûœ
 0x03bb

	)

859 
	#XK_t¶ash
 0x03b¯

	)

860 
	#XK_ENG
 0x03bd

	)

861 
	#XK_íg
 0x03b‡

	)

862 
	#XK_Ama¸⁄
 0x03c0

	)

863 
	#XK_Iog⁄ek
 0x03c7

	)

864 
	#XK_EabovedŸ
 0x03c¯

	)

865 
	#XK_Ima¸⁄
 0x03c‡

	)

866 
	#XK_N˚dûœ
 0x03d1

	)

867 
	#XK_Oma¸⁄
 0x03d2

	)

868 
	#XK_K˚dûœ
 0x03d3

	)

869 
	#XK_Uog⁄ek
 0x03d9

	)

870 
	#XK_Utûde
 0x03dd

	)

871 
	#XK_Uma¸⁄
 0x03dê

	)

872 
	#XK_ama¸⁄
 0x03e0

	)

873 
	#XK_iog⁄ek
 0x03e7

	)

874 
	#XK_óbovedŸ
 0x03e¯

	)

875 
	#XK_ima¸⁄
 0x03e‡

	)

876 
	#XK_n˚dûœ
 0x03f1

	)

877 
	#XK_oma¸⁄
 0x03f2

	)

878 
	#XK_k˚dûœ
 0x03f3

	)

879 
	#XK_uog⁄ek
 0x03f9

	)

880 
	#XK_utûde
 0x03fd

	)

881 
	#XK_uma¸⁄
 0x03„

	)

887 #ifde‡
XK_LATIN8


888 
	#XK_WcúcumÊex
 0x1000174

	)

889 
	#XK_wcúcumÊex
 0x1000175

	)

890 
	#XK_YcúcumÊex
 0x1000176

	)

891 
	#XK_ycúcumÊex
 0x1000177

	)

892 
	#XK_BabovedŸ
 0x1001e02

	)

893 
	#XK_babovedŸ
 0x1001e03

	)

894 
	#XK_DabovedŸ
 0x1001e0®

	)

895 
	#XK_dabovedŸ
 0x1001e0b

	)

896 
	#XK_FabovedŸ
 0x1001e1ê

	)

897 
	#XK_ÁbovedŸ
 0x1001e1‡

	)

898 
	#XK_MabovedŸ
 0x1001e40

	)

899 
	#XK_mabovedŸ
 0x1001e41

	)

900 
	#XK_PabovedŸ
 0x1001e56

	)

901 
	#XK_∑bovedŸ
 0x1001e57

	)

902 
	#XK_SabovedŸ
 0x1001e60

	)

903 
	#XK_ßbovedŸ
 0x1001e61

	)

904 
	#XK_TabovedŸ
 0x1001e6®

	)

905 
	#XK_èbovedŸ
 0x1001e6b

	)

906 
	#XK_Wgøve
 0x1001e80

	)

907 
	#XK_wgøve
 0x1001e81

	)

908 
	#XK_Wacuã
 0x1001e82

	)

909 
	#XK_wacuã
 0x1001e83

	)

910 
	#XK_Wdüîesis
 0x1001e84

	)

911 
	#XK_wdüîesis
 0x1001e85

	)

912 
	#XK_Ygøve
 0x1001ef2

	)

913 
	#XK_ygøve
 0x1001ef3

	)

921 #ifde‡
XK_LATIN9


922 
	#XK_OE
 0x13b¯

	)

923 
	#XK_€
 0x13bd

	)

924 
	#XK_Ydüîesis
 0x13bê

	)

932 #ifde‡
XK_KATAKANA


933 
	#XK_ovîlöe
 0x047ê

	)

934 
	#XK_k™a_fuŒ°›
 0x04a1

	)

935 
	#XK_k™a_›íögbøckë
 0x04a2

	)

936 
	#XK_k™a_˛osögbøckë
 0x04a3

	)

937 
	#XK_k™a_comma
 0x04a4

	)

938 
	#XK_k™a_c⁄jun˘ive
 0x04a5

	)

939 
	#XK_k™a_middÀdŸ
 0x04a5

	)

940 
	#XK_k™a_WO
 0x04a6

	)

941 
	#XK_k™a_a
 0x04a7

	)

942 
	#XK_k™a_i
 0x04a8

	)

943 
	#XK_k™a_u
 0x04a9

	)

944 
	#XK_k™a_e
 0x04Ø

	)

945 
	#XK_k™a_o
 0x04ab

	)

946 
	#XK_k™a_ya
 0x04a¯

	)

947 
	#XK_k™a_yu
 0x04ad

	)

948 
	#XK_k™a_yo
 0x04´

	)

949 
	#XK_k™a_tsu
 0x04a‡

	)

950 
	#XK_k™a_tu
 0x04a‡

	)

951 
	#XK_¥ﬁ⁄gedsound
 0x04b0

	)

952 
	#XK_k™a_A
 0x04b1

	)

953 
	#XK_k™a_I
 0x04b2

	)

954 
	#XK_k™a_U
 0x04b3

	)

955 
	#XK_k™a_E
 0x04b4

	)

956 
	#XK_k™a_O
 0x04b5

	)

957 
	#XK_k™a_KA
 0x04b6

	)

958 
	#XK_k™a_KI
 0x04b7

	)

959 
	#XK_k™a_KU
 0x04b8

	)

960 
	#XK_k™a_KE
 0x04b9

	)

961 
	#XK_k™a_KO
 0x04b®

	)

962 
	#XK_k™a_SA
 0x04bb

	)

963 
	#XK_k™a_SHI
 0x04b¯

	)

964 
	#XK_k™a_SU
 0x04bd

	)

965 
	#XK_k™a_SE
 0x04bê

	)

966 
	#XK_k™a_SO
 0x04b‡

	)

967 
	#XK_k™a_TA
 0x04c0

	)

968 
	#XK_k™a_CHI
 0x04c1

	)

969 
	#XK_k™a_TI
 0x04c1

	)

970 
	#XK_k™a_TSU
 0x04c2

	)

971 
	#XK_k™a_TU
 0x04c2

	)

972 
	#XK_k™a_TE
 0x04c3

	)

973 
	#XK_k™a_TO
 0x04c4

	)

974 
	#XK_k™a_NA
 0x04c5

	)

975 
	#XK_k™a_NI
 0x04c6

	)

976 
	#XK_k™a_NU
 0x04c7

	)

977 
	#XK_k™a_NE
 0x04c8

	)

978 
	#XK_k™a_NO
 0x04c9

	)

979 
	#XK_k™a_HA
 0x04ˇ

	)

980 
	#XK_k™a_HI
 0x04cb

	)

981 
	#XK_k™a_FU
 0x04c¯

	)

982 
	#XK_k™a_HU
 0x04c¯

	)

983 
	#XK_k™a_HE
 0x04cd

	)

984 
	#XK_k™a_HO
 0x04˚

	)

985 
	#XK_k™a_MA
 0x04c‡

	)

986 
	#XK_k™a_MI
 0x04d0

	)

987 
	#XK_k™a_MU
 0x04d1

	)

988 
	#XK_k™a_ME
 0x04d2

	)

989 
	#XK_k™a_MO
 0x04d3

	)

990 
	#XK_k™a_YA
 0x04d4

	)

991 
	#XK_k™a_YU
 0x04d5

	)

992 
	#XK_k™a_YO
 0x04d6

	)

993 
	#XK_k™a_RA
 0x04d7

	)

994 
	#XK_k™a_RI
 0x04d8

	)

995 
	#XK_k™a_RU
 0x04d9

	)

996 
	#XK_k™a_RE
 0x04d®

	)

997 
	#XK_k™a_RO
 0x04db

	)

998 
	#XK_k™a_WA
 0x04d¯

	)

999 
	#XK_k™a_N
 0x04dd

	)

1000 
	#XK_voi˚dsound
 0x04dê

	)

1001 
	#XK_£mivoi˚dsound
 0x04d‡

	)

1002 
	#XK_k™a_swôch
 0xff7ê

	)

1010 #ifde‡
XK_ARABIC


1011 
	#XK_F¨si_0
 0x10006f0

	)

1012 
	#XK_F¨si_1
 0x10006f1

	)

1013 
	#XK_F¨si_2
 0x10006f2

	)

1014 
	#XK_F¨si_3
 0x10006f3

	)

1015 
	#XK_F¨si_4
 0x10006f4

	)

1016 
	#XK_F¨si_5
 0x10006f5

	)

1017 
	#XK_F¨si_6
 0x10006f6

	)

1018 
	#XK_F¨si_7
 0x10006f7

	)

1019 
	#XK_F¨si_8
 0x10006f8

	)

1020 
	#XK_F¨si_9
 0x10006f9

	)

1021 
	#XK_Aøbic_≥r˚¡
 0x100066®

	)

1022 
	#XK_Aøbic_su≥rs¸ùt_Æef
 0x1000670

	)

1023 
	#XK_Aøbic_âeh
 0x1000679

	)

1024 
	#XK_Aøbic_≥h
 0x100067ê

	)

1025 
	#XK_Aøbic_tcheh
 0x1000686

	)

1026 
	#XK_Aøbic_ddÆ
 0x1000688

	)

1027 
	#XK_Aøbic_ºeh
 0x1000691

	)

1028 
	#XK_Aøbic_comma
 0x05a¯

	)

1029 
	#XK_Aøbic_fuŒ°›
 0x10006d4

	)

1030 
	#XK_Aøbic_0
 0x1000660

	)

1031 
	#XK_Aøbic_1
 0x1000661

	)

1032 
	#XK_Aøbic_2
 0x1000662

	)

1033 
	#XK_Aøbic_3
 0x1000663

	)

1034 
	#XK_Aøbic_4
 0x1000664

	)

1035 
	#XK_Aøbic_5
 0x1000665

	)

1036 
	#XK_Aøbic_6
 0x1000666

	)

1037 
	#XK_Aøbic_7
 0x1000667

	)

1038 
	#XK_Aøbic_8
 0x1000668

	)

1039 
	#XK_Aøbic_9
 0x1000669

	)

1040 
	#XK_Aøbic_£micﬁ⁄
 0x05bb

	)

1041 
	#XK_Aøbic_que°i⁄_m¨k
 0x05b‡

	)

1042 
	#XK_Aøbic_hamza
 0x05c1

	)

1043 
	#XK_Aøbic_madda⁄Æef
 0x05c2

	)

1044 
	#XK_Aøbic_hamza⁄Æef
 0x05c3

	)

1045 
	#XK_Aøbic_hamza⁄waw
 0x05c4

	)

1046 
	#XK_Aøbic_hamzaundîÆef
 0x05c5

	)

1047 
	#XK_Aøbic_hamza⁄yeh
 0x05c6

	)

1048 
	#XK_Aøbic_Æef
 0x05c7

	)

1049 
	#XK_Aøbic_beh
 0x05c8

	)

1050 
	#XK_Aøbic_ãhm¨buè
 0x05c9

	)

1051 
	#XK_Aøbic_ãh
 0x05ˇ

	)

1052 
	#XK_Aøbic_theh
 0x05cb

	)

1053 
	#XK_Aøbic_jìm
 0x05c¯

	)

1054 
	#XK_Aøbic_hah
 0x05cd

	)

1055 
	#XK_Aøbic_khah
 0x05˚

	)

1056 
	#XK_Aøbic_dÆ
 0x05c‡

	)

1057 
	#XK_Aøbic_thÆ
 0x05d0

	)

1058 
	#XK_Aøbic_ø
 0x05d1

	)

1059 
	#XK_Aøbic_zaö
 0x05d2

	)

1060 
	#XK_Aøbic_£í
 0x05d3

	)

1061 
	#XK_Aøbic_shìn
 0x05d4

	)

1062 
	#XK_Aøbic_ßd
 0x05d5

	)

1063 
	#XK_Aøbic_dad
 0x05d6

	)

1064 
	#XK_Aøbic_èh
 0x05d7

	)

1065 
	#XK_Aøbic_zah
 0x05d8

	)

1066 
	#XK_Aøbic_aö
 0x05d9

	)

1067 
	#XK_Aøbic_ghaö
 0x05d®

	)

1068 
	#XK_Aøbic_ètwìl
 0x05e0

	)

1069 
	#XK_Aøbic_„h
 0x05e1

	)

1070 
	#XK_Aøbic_qaf
 0x05e2

	)

1071 
	#XK_Aøbic_kaf
 0x05e3

	)

1072 
	#XK_Aøbic_œm
 0x05e4

	)

1073 
	#XK_Aøbic_mìm
 0x05e5

	)

1074 
	#XK_Aøbic_no⁄
 0x05e6

	)

1075 
	#XK_Aøbic_ha
 0x05e7

	)

1076 
	#XK_Aøbic_heh
 0x05e7

	)

1077 
	#XK_Aøbic_waw
 0x05e8

	)

1078 
	#XK_Aøbic_Æefmaksuø
 0x05e9

	)

1079 
	#XK_Aøbic_yeh
 0x05ó

	)

1080 
	#XK_Aøbic_Áth©™
 0x05eb

	)

1081 
	#XK_Aøbic_damm©™
 0x05e¯

	)

1082 
	#XK_Aøbic_ka§©™
 0x05ed

	)

1083 
	#XK_Aøbic_Átha
 0x05ì

	)

1084 
	#XK_Aøbic_damma
 0x05e‡

	)

1085 
	#XK_Aøbic_ka§a
 0x05f0

	)

1086 
	#XK_Aøbic_shadda
 0x05f1

	)

1087 
	#XK_Aøbic_sukun
 0x05f2

	)

1088 
	#XK_Aøbic_madda_above
 0x1000653

	)

1089 
	#XK_Aøbic_hamza_above
 0x1000654

	)

1090 
	#XK_Aøbic_hamza_bñow
 0x1000655

	)

1091 
	#XK_Aøbic_jeh
 0x1000698

	)

1092 
	#XK_Aøbic_veh
 0x10006a4

	)

1093 
	#XK_Aøbic_keheh
 0x10006a9

	)

1094 
	#XK_Aøbic_gaf
 0x10006a‡

	)

1095 
	#XK_Aøbic_no⁄_ghu¬a
 0x10006b®

	)

1096 
	#XK_Aøbic_heh_dﬂchashmì
 0x10006bê

	)

1097 
	#XK_F¨si_yeh
 0x10006c¯

	)

1098 
	#XK_Aøbic_Ársi_yeh
 0x10006c¯

	)

1099 
	#XK_Aøbic_yeh_b¨ì
 0x10006d2

	)

1100 
	#XK_Aøbic_heh_gﬂl
 0x10006c1

	)

1101 
	#XK_Aøbic_swôch
 0xff7ê

	)

1108 #ifde‡
XK_CYRILLIC


1109 
	#XK_Cyrûlic_GHE_b¨
 0x1000492

	)

1110 
	#XK_Cyrûlic_ghe_b¨
 0x1000493

	)

1111 
	#XK_Cyrûlic_ZHE_des˚ndî
 0x1000496

	)

1112 
	#XK_Cyrûlic_zhe_des˚ndî
 0x1000497

	)

1113 
	#XK_Cyrûlic_KA_des˚ndî
 0x100049®

	)

1114 
	#XK_Cyrûlic_ka_des˚ndî
 0x100049b

	)

1115 
	#XK_Cyrûlic_KA_vît°roke
 0x100049¯

	)

1116 
	#XK_Cyrûlic_ka_vît°roke
 0x100049d

	)

1117 
	#XK_Cyrûlic_EN_des˚ndî
 0x10004a2

	)

1118 
	#XK_Cyrûlic_í_des˚ndî
 0x10004a3

	)

1119 
	#XK_Cyrûlic_U_°øight
 0x10004´

	)

1120 
	#XK_Cyrûlic_u_°øight
 0x10004a‡

	)

1121 
	#XK_Cyrûlic_U_°øight_b¨
 0x10004b0

	)

1122 
	#XK_Cyrûlic_u_°øight_b¨
 0x10004b1

	)

1123 
	#XK_Cyrûlic_HA_des˚ndî
 0x10004b2

	)

1124 
	#XK_Cyrûlic_ha_des˚ndî
 0x10004b3

	)

1125 
	#XK_Cyrûlic_CHE_des˚ndî
 0x10004b6

	)

1126 
	#XK_Cyrûlic_che_des˚ndî
 0x10004b7

	)

1127 
	#XK_Cyrûlic_CHE_vît°roke
 0x10004b8

	)

1128 
	#XK_Cyrûlic_che_vît°roke
 0x10004b9

	)

1129 
	#XK_Cyrûlic_SHHA
 0x10004b®

	)

1130 
	#XK_Cyrûlic_shha
 0x10004bb

	)

1132 
	#XK_Cyrûlic_SCHWA
 0x10004d8

	)

1133 
	#XK_Cyrûlic_schwa
 0x10004d9

	)

1134 
	#XK_Cyrûlic_I_ma¸⁄
 0x10004e2

	)

1135 
	#XK_Cyrûlic_i_ma¸⁄
 0x10004e3

	)

1136 
	#XK_Cyrûlic_O_b¨
 0x10004e8

	)

1137 
	#XK_Cyrûlic_o_b¨
 0x10004e9

	)

1138 
	#XK_Cyrûlic_U_ma¸⁄
 0x10004ì

	)

1139 
	#XK_Cyrûlic_u_ma¸⁄
 0x10004e‡

	)

1141 
	#XK_Sîbün_dje
 0x06a1

	)

1142 
	#XK_Ma˚d⁄ü_gje
 0x06a2

	)

1143 
	#XK_Cyrûlic_io
 0x06a3

	)

1144 
	#XK_Ukøöün_õ
 0x06a4

	)

1145 
	#XK_Ukønün_je
 0x06a4

	)

1146 
	#XK_Ma˚d⁄ü_d£
 0x06a5

	)

1147 
	#XK_Ukøöün_i
 0x06a6

	)

1148 
	#XK_Ukønün_i
 0x06a6

	)

1149 
	#XK_Ukøöün_yi
 0x06a7

	)

1150 
	#XK_Ukønün_yi
 0x06a7

	)

1151 
	#XK_Cyrûlic_je
 0x06a8

	)

1152 
	#XK_Sîbün_je
 0x06a8

	)

1153 
	#XK_Cyrûlic_lje
 0x06a9

	)

1154 
	#XK_Sîbün_lje
 0x06a9

	)

1155 
	#XK_Cyrûlic_nje
 0x06Ø

	)

1156 
	#XK_Sîbün_nje
 0x06Ø

	)

1157 
	#XK_Sîbün_tshe
 0x06ab

	)

1158 
	#XK_Ma˚d⁄ü_kje
 0x06a¯

	)

1159 
	#XK_Ukøöün_ghe_wôh_u±u∫
 0x06ad

	)

1160 
	#XK_Byñ‹ussün_sh‹tu
 0x06´

	)

1161 
	#XK_Cyrûlic_dzhe
 0x06a‡

	)

1162 
	#XK_Sîbün_dze
 0x06a‡

	)

1163 
	#XK_numîosign
 0x06b0

	)

1164 
	#XK_Sîbün_DJE
 0x06b1

	)

1165 
	#XK_Ma˚d⁄ü_GJE
 0x06b2

	)

1166 
	#XK_Cyrûlic_IO
 0x06b3

	)

1167 
	#XK_Ukøöün_IE
 0x06b4

	)

1168 
	#XK_Ukønün_JE
 0x06b4

	)

1169 
	#XK_Ma˚d⁄ü_DSE
 0x06b5

	)

1170 
	#XK_Ukøöün_I
 0x06b6

	)

1171 
	#XK_Ukønün_I
 0x06b6

	)

1172 
	#XK_Ukøöün_YI
 0x06b7

	)

1173 
	#XK_Ukønün_YI
 0x06b7

	)

1174 
	#XK_Cyrûlic_JE
 0x06b8

	)

1175 
	#XK_Sîbün_JE
 0x06b8

	)

1176 
	#XK_Cyrûlic_LJE
 0x06b9

	)

1177 
	#XK_Sîbün_LJE
 0x06b9

	)

1178 
	#XK_Cyrûlic_NJE
 0x06b®

	)

1179 
	#XK_Sîbün_NJE
 0x06b®

	)

1180 
	#XK_Sîbün_TSHE
 0x06bb

	)

1181 
	#XK_Ma˚d⁄ü_KJE
 0x06b¯

	)

1182 
	#XK_Ukøöün_GHE_WITH_UPTURN
 0x06bd

	)

1183 
	#XK_Byñ‹ussün_SHORTU
 0x06bê

	)

1184 
	#XK_Cyrûlic_DZHE
 0x06b‡

	)

1185 
	#XK_Sîbün_DZE
 0x06b‡

	)

1186 
	#XK_Cyrûlic_yu
 0x06c0

	)

1187 
	#XK_Cyrûlic_a
 0x06c1

	)

1188 
	#XK_Cyrûlic_be
 0x06c2

	)

1189 
	#XK_Cyrûlic_t£
 0x06c3

	)

1190 
	#XK_Cyrûlic_de
 0x06c4

	)

1191 
	#XK_Cyrûlic_õ
 0x06c5

	)

1192 
	#XK_Cyrûlic_ef
 0x06c6

	)

1193 
	#XK_Cyrûlic_ghe
 0x06c7

	)

1194 
	#XK_Cyrûlic_ha
 0x06c8

	)

1195 
	#XK_Cyrûlic_i
 0x06c9

	)

1196 
	#XK_Cyrûlic_sh‹ti
 0x06ˇ

	)

1197 
	#XK_Cyrûlic_ka
 0x06cb

	)

1198 
	#XK_Cyrûlic_ñ
 0x06c¯

	)

1199 
	#XK_Cyrûlic_em
 0x06cd

	)

1200 
	#XK_Cyrûlic_í
 0x06˚

	)

1201 
	#XK_Cyrûlic_o
 0x06c‡

	)

1202 
	#XK_Cyrûlic_≥
 0x06d0

	)

1203 
	#XK_Cyrûlic_ya
 0x06d1

	)

1204 
	#XK_Cyrûlic_î
 0x06d2

	)

1205 
	#XK_Cyrûlic_es
 0x06d3

	)

1206 
	#XK_Cyrûlic_ã
 0x06d4

	)

1207 
	#XK_Cyrûlic_u
 0x06d5

	)

1208 
	#XK_Cyrûlic_zhe
 0x06d6

	)

1209 
	#XK_Cyrûlic_ve
 0x06d7

	)

1210 
	#XK_Cyrûlic_so·sign
 0x06d8

	)

1211 
	#XK_Cyrûlic_yîu
 0x06d9

	)

1212 
	#XK_Cyrûlic_ze
 0x06d®

	)

1213 
	#XK_Cyrûlic_sha
 0x06db

	)

1214 
	#XK_Cyrûlic_e
 0x06d¯

	)

1215 
	#XK_Cyrûlic_shcha
 0x06dd

	)

1216 
	#XK_Cyrûlic_che
 0x06dê

	)

1217 
	#XK_Cyrûlic_h¨dsign
 0x06d‡

	)

1218 
	#XK_Cyrûlic_YU
 0x06e0

	)

1219 
	#XK_Cyrûlic_A
 0x06e1

	)

1220 
	#XK_Cyrûlic_BE
 0x06e2

	)

1221 
	#XK_Cyrûlic_TSE
 0x06e3

	)

1222 
	#XK_Cyrûlic_DE
 0x06e4

	)

1223 
	#XK_Cyrûlic_IE
 0x06e5

	)

1224 
	#XK_Cyrûlic_EF
 0x06e6

	)

1225 
	#XK_Cyrûlic_GHE
 0x06e7

	)

1226 
	#XK_Cyrûlic_HA
 0x06e8

	)

1227 
	#XK_Cyrûlic_I
 0x06e9

	)

1228 
	#XK_Cyrûlic_SHORTI
 0x06ó

	)

1229 
	#XK_Cyrûlic_KA
 0x06eb

	)

1230 
	#XK_Cyrûlic_EL
 0x06e¯

	)

1231 
	#XK_Cyrûlic_EM
 0x06ed

	)

1232 
	#XK_Cyrûlic_EN
 0x06ì

	)

1233 
	#XK_Cyrûlic_O
 0x06e‡

	)

1234 
	#XK_Cyrûlic_PE
 0x06f0

	)

1235 
	#XK_Cyrûlic_YA
 0x06f1

	)

1236 
	#XK_Cyrûlic_ER
 0x06f2

	)

1237 
	#XK_Cyrûlic_ES
 0x06f3

	)

1238 
	#XK_Cyrûlic_TE
 0x06f4

	)

1239 
	#XK_Cyrûlic_U
 0x06f5

	)

1240 
	#XK_Cyrûlic_ZHE
 0x06f6

	)

1241 
	#XK_Cyrûlic_VE
 0x06f7

	)

1242 
	#XK_Cyrûlic_SOFTSIGN
 0x06f8

	)

1243 
	#XK_Cyrûlic_YERU
 0x06f9

	)

1244 
	#XK_Cyrûlic_ZE
 0x06Á

	)

1245 
	#XK_Cyrûlic_SHA
 0x06fb

	)

1246 
	#XK_Cyrûlic_E
 0x06f¯

	)

1247 
	#XK_Cyrûlic_SHCHA
 0x06fd

	)

1248 
	#XK_Cyrûlic_CHE
 0x06„

	)

1249 
	#XK_Cyrûlic_HARDSIGN
 0x06f‡

	)

1258 #ifde‡
XK_GREEK


1259 
	#XK_Gªek_ALPHAac˚¡
 0x07a1

	)

1260 
	#XK_Gªek_EPSILONac˚¡
 0x07a2

	)

1261 
	#XK_Gªek_ETAac˚¡
 0x07a3

	)

1262 
	#XK_Gªek_IOTAac˚¡
 0x07a4

	)

1263 
	#XK_Gªek_IOTAdõªsis
 0x07a5

	)

1264 
	#XK_Gªek_IOTAdüîesis
 0x07a5

	)

1265 
	#XK_Gªek_OMICRONac˚¡
 0x07a7

	)

1266 
	#XK_Gªek_UPSILONac˚¡
 0x07a8

	)

1267 
	#XK_Gªek_UPSILONdõªsis
 0x07a9

	)

1268 
	#XK_Gªek_OMEGAac˚¡
 0x07ab

	)

1269 
	#XK_Gªek_ac˚¡dõªsis
 0x07´

	)

1270 
	#XK_Gªek_h‹izb¨
 0x07a‡

	)

1271 
	#XK_Gªek_ÆphØc˚¡
 0x07b1

	)

1272 
	#XK_Gªek_ïsû⁄ac˚¡
 0x07b2

	)

1273 
	#XK_Gªek_ëØc˚¡
 0x07b3

	)

1274 
	#XK_Gªek_iŸØc˚¡
 0x07b4

	)

1275 
	#XK_Gªek_iŸadõªsis
 0x07b5

	)

1276 
	#XK_Gªek_iŸØc˚¡dõªsis
 0x07b6

	)

1277 
	#XK_Gªek_omi¸⁄ac˚¡
 0x07b7

	)

1278 
	#XK_Gªek_upsû⁄ac˚¡
 0x07b8

	)

1279 
	#XK_Gªek_upsû⁄dõªsis
 0x07b9

	)

1280 
	#XK_Gªek_upsû⁄ac˚¡dõªsis
 0x07b®

	)

1281 
	#XK_Gªek_omegØc˚¡
 0x07bb

	)

1282 
	#XK_Gªek_ALPHA
 0x07c1

	)

1283 
	#XK_Gªek_BETA
 0x07c2

	)

1284 
	#XK_Gªek_GAMMA
 0x07c3

	)

1285 
	#XK_Gªek_DELTA
 0x07c4

	)

1286 
	#XK_Gªek_EPSILON
 0x07c5

	)

1287 
	#XK_Gªek_ZETA
 0x07c6

	)

1288 
	#XK_Gªek_ETA
 0x07c7

	)

1289 
	#XK_Gªek_THETA
 0x07c8

	)

1290 
	#XK_Gªek_IOTA
 0x07c9

	)

1291 
	#XK_Gªek_KAPPA
 0x07ˇ

	)

1292 
	#XK_Gªek_LAMDA
 0x07cb

	)

1293 
	#XK_Gªek_LAMBDA
 0x07cb

	)

1294 
	#XK_Gªek_MU
 0x07c¯

	)

1295 
	#XK_Gªek_NU
 0x07cd

	)

1296 
	#XK_Gªek_XI
 0x07˚

	)

1297 
	#XK_Gªek_OMICRON
 0x07c‡

	)

1298 
	#XK_Gªek_PI
 0x07d0

	)

1299 
	#XK_Gªek_RHO
 0x07d1

	)

1300 
	#XK_Gªek_SIGMA
 0x07d2

	)

1301 
	#XK_Gªek_TAU
 0x07d4

	)

1302 
	#XK_Gªek_UPSILON
 0x07d5

	)

1303 
	#XK_Gªek_PHI
 0x07d6

	)

1304 
	#XK_Gªek_CHI
 0x07d7

	)

1305 
	#XK_Gªek_PSI
 0x07d8

	)

1306 
	#XK_Gªek_OMEGA
 0x07d9

	)

1307 
	#XK_Gªek_Æpha
 0x07e1

	)

1308 
	#XK_Gªek_bëa
 0x07e2

	)

1309 
	#XK_Gªek_gamma
 0x07e3

	)

1310 
	#XK_Gªek_dñè
 0x07e4

	)

1311 
	#XK_Gªek_ïsû⁄
 0x07e5

	)

1312 
	#XK_Gªek_zëa
 0x07e6

	)

1313 
	#XK_Gªek_ëa
 0x07e7

	)

1314 
	#XK_Gªek_thëa
 0x07e8

	)

1315 
	#XK_Gªek_iŸa
 0x07e9

	)

1316 
	#XK_Gªek_k≠∑
 0x07ó

	)

1317 
	#XK_Gªek_œmda
 0x07eb

	)

1318 
	#XK_Gªek_œmbda
 0x07eb

	)

1319 
	#XK_Gªek_mu
 0x07e¯

	)

1320 
	#XK_Gªek_nu
 0x07ed

	)

1321 
	#XK_Gªek_xi
 0x07ì

	)

1322 
	#XK_Gªek_omi¸⁄
 0x07e‡

	)

1323 
	#XK_Gªek_pi
 0x07f0

	)

1324 
	#XK_Gªek_rho
 0x07f1

	)

1325 
	#XK_Gªek_sigma
 0x07f2

	)

1326 
	#XK_Gªek_föÆsmÆlsigma
 0x07f3

	)

1327 
	#XK_Gªek_èu
 0x07f4

	)

1328 
	#XK_Gªek_upsû⁄
 0x07f5

	)

1329 
	#XK_Gªek_phi
 0x07f6

	)

1330 
	#XK_Gªek_chi
 0x07f7

	)

1331 
	#XK_Gªek_psi
 0x07f8

	)

1332 
	#XK_Gªek_omega
 0x07f9

	)

1333 
	#XK_Gªek_swôch
 0xff7ê

	)

1342 #ifde‡
XK_TECHNICAL


1343 
	#XK_À·ødiˇl
 0x08a1

	)

1344 
	#XK_t›À·ødiˇl
 0x08a2

	)

1345 
	#XK_h‹izc⁄√˘‹
 0x08a3

	)

1346 
	#XK_t›öãgøl
 0x08a4

	)

1347 
	#XK_bŸöãgøl
 0x08a5

	)

1348 
	#XK_vîtc⁄√˘‹
 0x08a6

	)

1349 
	#XK_t›À·sqbøckë
 0x08a7

	)

1350 
	#XK_bŸÀ·sqbøckë
 0x08a8

	)

1351 
	#XK_t›rightsqbøckë
 0x08a9

	)

1352 
	#XK_bŸrightsqbøckë
 0x08Ø

	)

1353 
	#XK_t›À·∑ªns
 0x08ab

	)

1354 
	#XK_bŸÀ·∑ªns
 0x08a¯

	)

1355 
	#XK_t›righç¨ís
 0x08ad

	)

1356 
	#XK_bŸrighç¨ís
 0x08´

	)

1357 
	#XK_À·middÀcuæybø˚
 0x08a‡

	)

1358 
	#XK_rightmiddÀcuæybø˚
 0x08b0

	)

1359 
	#XK_t›À·summ©i⁄
 0x08b1

	)

1360 
	#XK_bŸÀ·summ©i⁄
 0x08b2

	)

1361 
	#XK_t›vîtsumm©i⁄c⁄√˘‹
 0x08b3

	)

1362 
	#XK_bŸvîtsumm©i⁄c⁄√˘‹
 0x08b4

	)

1363 
	#XK_t›rightsumm©i⁄
 0x08b5

	)

1364 
	#XK_bŸrightsumm©i⁄
 0x08b6

	)

1365 
	#XK_rightmiddÀsumm©i⁄
 0x08b7

	)

1366 
	#XK_Às°h™equÆ
 0x08b¯

	)

1367 
	#XK_nŸequÆ
 0x08bd

	)

1368 
	#XK_gª©îth™equÆ
 0x08bê

	)

1369 
	#XK_öãgøl
 0x08b‡

	)

1370 
	#XK_thîef‹e
 0x08c0

	)

1371 
	#XK_v¨üti⁄
 0x08c1

	)

1372 
	#XK_öföôy
 0x08c2

	)

1373 
	#XK_«bœ
 0x08c5

	)

1374 
	#XK_≠¥oxim©e
 0x08c8

	)

1375 
	#XK_simû¨equÆ
 0x08c9

	)

1376 
	#XK_if⁄lyif
 0x08cd

	)

1377 
	#XK_im∂õs
 0x08˚

	)

1378 
	#XK_idítiˇl
 0x08c‡

	)

1379 
	#XK_ødiˇl
 0x08d6

	)

1380 
	#XK_ö˛udedö
 0x08d®

	)

1381 
	#XK_ö˛udes
 0x08db

	)

1382 
	#XK_öãr£˘i⁄
 0x08d¯

	)

1383 
	#XK_uni⁄
 0x08dd

	)

1384 
	#XK_logiˇœnd
 0x08dê

	)

1385 
	#XK_logiˇl‹
 0x08d‡

	)

1386 
	#XK_∑πüldîiv©ive
 0x08e‡

	)

1387 
	#XK_fun˘i⁄
 0x08f6

	)

1388 
	#XK_À·¨row
 0x08fb

	)

1389 
	#XK_u∑ºow
 0x08f¯

	)

1390 
	#XK_righèºow
 0x08fd

	)

1391 
	#XK_dow«ºow
 0x08„

	)

1400 #ifde‡
XK_SPECIAL


1401 
	#XK_bœnk
 0x09df

	)

1402 
	#XK_sﬁiddüm⁄d
 0x09e0

	)

1403 
	#XK_checkîbﬂrd
 0x09e1

	)

1404 
	#XK_ht
 0x09e2

	)

1405 
	#XK_ff
 0x09e3

	)

1406 
	#XK_¸
 0x09e4

	)

1407 
	#XK_lf
 0x09e5

	)

1408 
	#XK_∆
 0x09e8

	)

1409 
	#XK_vt
 0x09e9

	)

1410 
	#XK_lowrightc‹√r
 0x09ó

	)

1411 
	#XK_u¥ightc‹√r
 0x09eb

	)

1412 
	#XK_u∂e·c‹√r
 0x09e¯

	)

1413 
	#XK_lowÀ·c‹√r
 0x09ed

	)

1414 
	#XK_¸ossöglöes
 0x09ì

	)

1415 
	#XK_h‹izlöesˇn1
 0x09e‡

	)

1416 
	#XK_h‹izlöesˇn3
 0x09f0

	)

1417 
	#XK_h‹izlöesˇn5
 0x09f1

	)

1418 
	#XK_h‹izlöesˇn7
 0x09f2

	)

1419 
	#XK_h‹izlöesˇn9
 0x09f3

	)

1420 
	#XK_À·t
 0x09f4

	)

1421 
	#XK_righâ
 0x09f5

	)

1422 
	#XK_bŸt
 0x09f6

	)

1423 
	#XK_t›t
 0x09f7

	)

1424 
	#XK_vîtb¨
 0x09f8

	)

1434 #ifde‡
XK_PUBLISHING


1435 
	#XK_em•a˚
 0x0Ø1

	)

1436 
	#XK_í•a˚
 0x0Ø2

	)

1437 
	#XK_em3•a˚
 0x0Ø3

	)

1438 
	#XK_em4•a˚
 0x0Ø4

	)

1439 
	#XK_digô•a˚
 0x0Ø5

	)

1440 
	#XK_pun˘•a˚
 0x0Ø6

	)

1441 
	#XK_thö•a˚
 0x0Ø7

	)

1442 
	#XK_haú•a˚
 0x0Ø8

	)

1443 
	#XK_emdash
 0x0Ø9

	)

1444 
	#XK_ídash
 0x0Ø®

	)

1445 
	#XK_signifbœnk
 0x0Ø¯

	)

1446 
	#XK_ñlùsis
 0x0Øê

	)

1447 
	#XK_doubba£löedŸ
 0x0Ø‡

	)

1448 
	#XK_⁄ëhúd
 0x0ab0

	)

1449 
	#XK_twŸhúds
 0x0ab1

	)

1450 
	#XK_⁄efi·h
 0x0ab2

	)

1451 
	#XK_twofi·hs
 0x0ab3

	)

1452 
	#XK_thªefi·hs
 0x0ab4

	)

1453 
	#XK_fourfi·hs
 0x0ab5

	)

1454 
	#XK_⁄esixth
 0x0ab6

	)

1455 
	#XK_fivesixths
 0x0ab7

	)

1456 
	#XK_ˇªof
 0x0ab8

	)

1457 
	#XK_figdash
 0x0abb

	)

1458 
	#XK_À·™gÀbøckë
 0x0ab¯

	)

1459 
	#XK_decimÆpoöt
 0x0abd

	)

1460 
	#XK_righèngÀbøckë
 0x0abê

	)

1461 
	#XK_m¨kî
 0x0abf

	)

1462 
	#XK_⁄ìighth
 0x0ac3

	)

1463 
	#XK_thªìighths
 0x0ac4

	)

1464 
	#XK_fivìighths
 0x0ac5

	)

1465 
	#XK_£víeighths
 0x0ac6

	)

1466 
	#XK_åadem¨k
 0x0ac9

	)

1467 
	#XK_sig«tuªm¨k
 0x0aˇ

	)

1468 
	#XK_åadem¨köcú˛e
 0x0acb

	)

1469 
	#XK_À·›íåüngÀ
 0x0ac¯

	)

1470 
	#XK_right›íåüngÀ
 0x0acd

	)

1471 
	#XK_em›ícú˛e
 0x0a˚

	)

1472 
	#XK_em›íª˘™gÀ
 0x0ac‡

	)

1473 
	#XK_À·sögÀquŸem¨k
 0x0ad0

	)

1474 
	#XK_rightsögÀquŸem¨k
 0x0ad1

	)

1475 
	#XK_À·doubÀquŸem¨k
 0x0ad2

	)

1476 
	#XK_rightdoubÀquŸem¨k
 0x0ad3

	)

1477 
	#XK_¥es¸ùti⁄
 0x0ad4

	)

1478 
	#XK_≥rmûÀ
 0x0ad5

	)

1479 
	#XK_möuãs
 0x0ad6

	)

1480 
	#XK_£c⁄ds
 0x0ad7

	)

1481 
	#XK_œtö¸oss
 0x0ad9

	)

1482 
	#XK_hexagøm
 0x0ada

	)

1483 
	#XK_fûÀdª˘buŒë
 0x0adb

	)

1484 
	#XK_fûÀdÀ·åibuŒë
 0x0ad¯

	)

1485 
	#XK_fûÀdrighâribuŒë
 0x0add

	)

1486 
	#XK_emfûÀdcú˛e
 0x0adê

	)

1487 
	#XK_emfûÀdª˘
 0x0ad‡

	)

1488 
	#XK_í›ícúcbuŒë
 0x0´0

	)

1489 
	#XK_í›ísqu¨ebuŒë
 0x0´1

	)

1490 
	#XK_›íª˘buŒë
 0x0´2

	)

1491 
	#XK_›íåibuŒëup
 0x0´3

	)

1492 
	#XK_›íåibuŒëdown
 0x0´4

	)

1493 
	#XK_›í°¨
 0x0´5

	)

1494 
	#XK_ífûÀdcúcbuŒë
 0x0´6

	)

1495 
	#XK_ífûÀdsqbuŒë
 0x0´7

	)

1496 
	#XK_fûÀdåibuŒëup
 0x0´8

	)

1497 
	#XK_fûÀdåibuŒëdown
 0x0´9

	)

1498 
	#XK_À·poöãr
 0x0´®

	)

1499 
	#XK_righçoöãr
 0x0´b

	)

1500 
	#XK_˛ub
 0x0´¯

	)

1501 
	#XK_düm⁄d
 0x0´d

	)

1502 
	#XK_hóπ
 0x0´ê

	)

1503 
	#XK_mÆã£¸oss
 0x0af0

	)

1504 
	#XK_daggî
 0x0af1

	)

1505 
	#XK_doubÀdaggî
 0x0af2

	)

1506 
	#XK_checkm¨k
 0x0af3

	)

1507 
	#XK_bÆlŸ¸oss
 0x0af4

	)

1508 
	#XK_musiˇlsh¨p
 0x0af5

	)

1509 
	#XK_musiˇlÊ©
 0x0af6

	)

1510 
	#XK_mÆesymbﬁ
 0x0af7

	)

1511 
	#XK_„mÆesymbﬁ
 0x0af8

	)

1512 
	#XK_ãÀph⁄e
 0x0af9

	)

1513 
	#XK_ãÀph⁄îec‹dî
 0x0aÁ

	)

1514 
	#XK_ph⁄ogøphc›yright
 0x0afb

	)

1515 
	#XK_ˇªt
 0x0af¯

	)

1516 
	#XK_sögÀlowquŸem¨k
 0x0afd

	)

1517 
	#XK_doubÀlowquŸem¨k
 0x0a„

	)

1518 
	#XK_curs‹
 0x0aff

	)

1526 #ifde‡
XK_APL


1527 
	#XK_À·ˇªt
 0x0ba3

	)

1528 
	#XK_rightˇªt
 0x0ba6

	)

1529 
	#XK_downˇªt
 0x0ba8

	)

1530 
	#XK_upˇªt
 0x0ba9

	)

1531 
	#XK_ovîb¨
 0x0bc0

	)

1532 
	#XK_dow¡ack
 0x0bc2

	)

1533 
	#XK_upsh€
 0x0bc3

	)

1534 
	#XK_down°ûe
 0x0bc4

	)

1535 
	#XK_undîb¨
 0x0bc6

	)

1536 
	#XK_jŸ
 0x0bˇ

	)

1537 
	#XK_quad
 0x0bc¯

	)

1538 
	#XK_u±ack
 0x0b˚

	)

1539 
	#XK_cú˛e
 0x0bc‡

	)

1540 
	#XK_up°ûe
 0x0bd3

	)

1541 
	#XK_downsh€
 0x0bd6

	)

1542 
	#XK_rightsh€
 0x0bd8

	)

1543 
	#XK_À·sh€
 0x0bd®

	)

1544 
	#XK_À·èck
 0x0bd¯

	)

1545 
	#XK_righâack
 0x0bf¯

	)

1553 #ifde‡
XK_HEBREW


1554 
	#XK_hebªw_doubÀlowlöe
 0x0cd‡

	)

1555 
	#XK_hebªw_Æïh
 0x0˚0

	)

1556 
	#XK_hebªw_bë
 0x0˚1

	)

1557 
	#XK_hebªw_bëh
 0x0˚1

	)

1558 
	#XK_hebªw_gimñ
 0x0˚2

	)

1559 
	#XK_hebªw_gimmñ
 0x0˚2

	)

1560 
	#XK_hebªw_dÆë
 0x0˚3

	)

1561 
	#XK_hebªw_dÆëh
 0x0˚3

	)

1562 
	#XK_hebªw_he
 0x0˚4

	)

1563 
	#XK_hebªw_waw
 0x0˚5

	)

1564 
	#XK_hebªw_zaö
 0x0˚6

	)

1565 
	#XK_hebªw_zayö
 0x0˚6

	)

1566 
	#XK_hebªw_chë
 0x0˚7

	)

1567 
	#XK_hebªw_hë
 0x0˚7

	)

1568 
	#XK_hebªw_ãt
 0x0˚8

	)

1569 
	#XK_hebªw_ãth
 0x0˚8

	)

1570 
	#XK_hebªw_yod
 0x0˚9

	)

1571 
	#XK_hebªw_föÆk≠h
 0x0˚®

	)

1572 
	#XK_hebªw_k≠h
 0x0˚b

	)

1573 
	#XK_hebªw_œmed
 0x0˚¯

	)

1574 
	#XK_hebªw_föÆmem
 0x0˚d

	)

1575 
	#XK_hebªw_mem
 0x0˚ê

	)

1576 
	#XK_hebªw_föÆnun
 0x0˚‡

	)

1577 
	#XK_hebªw_nun
 0x0cf0

	)

1578 
	#XK_hebªw_ßmech
 0x0cf1

	)

1579 
	#XK_hebªw_ßmekh
 0x0cf1

	)

1580 
	#XK_hebªw_ayö
 0x0cf2

	)

1581 
	#XK_hebªw_föÆ≥
 0x0cf3

	)

1582 
	#XK_hebªw_≥
 0x0cf4

	)

1583 
	#XK_hebªw_föÆzade
 0x0cf5

	)

1584 
	#XK_hebªw_föÆzadi
 0x0cf5

	)

1585 
	#XK_hebªw_zade
 0x0cf6

	)

1586 
	#XK_hebªw_zadi
 0x0cf6

	)

1587 
	#XK_hebªw_q›h
 0x0cf7

	)

1588 
	#XK_hebªw_kuf
 0x0cf7

	)

1589 
	#XK_hebªw_ªsh
 0x0cf8

	)

1590 
	#XK_hebªw_shö
 0x0cf9

	)

1591 
	#XK_hebªw_èw
 0x0cÁ

	)

1592 
	#XK_hebªw_èf
 0x0cÁ

	)

1593 
	#XK_Hebªw_swôch
 0xff7ê

	)

1601 #ifde‡
XK_THAI


1602 
	#XK_Thai_kokai
 0x0da1

	)

1603 
	#XK_Thai_khokhai
 0x0da2

	)

1604 
	#XK_Thai_khokhu©
 0x0da3

	)

1605 
	#XK_Thai_khokhwai
 0x0da4

	)

1606 
	#XK_Thai_khokh⁄
 0x0da5

	)

1607 
	#XK_Thai_kh‹akh™g
 0x0da6

	)

1608 
	#XK_Thai_ng⁄gu
 0x0da7

	)

1609 
	#XK_Thai_choch™
 0x0da8

	)

1610 
	#XK_Thai_chochög
 0x0da9

	)

1611 
	#XK_Thai_choch™g
 0x0dØ

	)

1612 
	#XK_Thai_soso
 0x0dab

	)

1613 
	#XK_Thai_choch€
 0x0da¯

	)

1614 
	#XK_Thai_yoyög
 0x0dad

	)

1615 
	#XK_Thai_dochada
 0x0d´

	)

1616 
	#XK_Thai_t›©ak
 0x0da‡

	)

1617 
	#XK_Thai_thŸh™
 0x0db0

	)

1618 
	#XK_Thai_th⁄™gm⁄tho
 0x0db1

	)

1619 
	#XK_Thai_th›huthao
 0x0db2

	)

1620 
	#XK_Thai_n⁄í
 0x0db3

	)

1621 
	#XK_Thai_dodek
 0x0db4

	)

1622 
	#XK_Thai_tŸao
 0x0db5

	)

1623 
	#XK_Thai_thŸhung
 0x0db6

	)

1624 
	#XK_Thai_thŸhah™
 0x0db7

	)

1625 
	#XK_Thai_thŸh⁄g
 0x0db8

	)

1626 
	#XK_Thai_n⁄u
 0x0db9

	)

1627 
	#XK_Thai_bobaimai
 0x0db®

	)

1628 
	#XK_Thai_p›œ
 0x0dbb

	)

1629 
	#XK_Thai_ph›hung
 0x0db¯

	)

1630 
	#XK_Thai_foÁ
 0x0dbd

	)

1631 
	#XK_Thai_ph›h™
 0x0dbê

	)

1632 
	#XK_Thai_foÁn
 0x0db‡

	)

1633 
	#XK_Thai_phoßmphao
 0x0dc0

	)

1634 
	#XK_Thai_moma
 0x0dc1

	)

1635 
	#XK_Thai_yoyak
 0x0dc2

	)

1636 
	#XK_Thai_r‹ua
 0x0dc3

	)

1637 
	#XK_Thai_ru
 0x0dc4

	)

1638 
	#XK_Thai_lﬁög
 0x0dc5

	)

1639 
	#XK_Thai_lu
 0x0dc6

	)

1640 
	#XK_Thai_wow´n
 0x0dc7

	)

1641 
	#XK_Thai_soßœ
 0x0dc8

	)

1642 
	#XK_Thai_s‹usi
 0x0dc9

	)

1643 
	#XK_Thai_sosua
 0x0dˇ

	)

1644 
	#XK_Thai_hohù
 0x0dcb

	)

1645 
	#XK_Thai_lochuœ
 0x0dc¯

	)

1646 
	#XK_Thai_ﬂng
 0x0dcd

	)

1647 
	#XK_Thai_h⁄okhuk
 0x0d˚

	)

1648 
	#XK_Thai_∑iy™noi
 0x0dc‡

	)

1649 
	#XK_Thai_ßøa
 0x0dd0

	)

1650 
	#XK_Thai_maih™ak©
 0x0dd1

	)

1651 
	#XK_Thai_ßøØ
 0x0dd2

	)

1652 
	#XK_Thai_ßøam
 0x0dd3

	)

1653 
	#XK_Thai_ßøi
 0x0dd4

	)

1654 
	#XK_Thai_ßøii
 0x0dd5

	)

1655 
	#XK_Thai_ßøue
 0x0dd6

	)

1656 
	#XK_Thai_ßøuì
 0x0dd7

	)

1657 
	#XK_Thai_ßøu
 0x0dd8

	)

1658 
	#XK_Thai_ßøuu
 0x0dd9

	)

1659 
	#XK_Thai_phöthu
 0x0dd®

	)

1660 
	#XK_Thai_maih™ak©_maôho
 0x0dde

	)

1661 
	#XK_Thai_baht
 0x0dd‡

	)

1662 
	#XK_Thai_ßøe
 0x0de0

	)

1663 
	#XK_Thai_ßø´
 0x0de1

	)

1664 
	#XK_Thai_ßøo
 0x0de2

	)

1665 
	#XK_Thai_ßøaimaimu™
 0x0de3

	)

1666 
	#XK_Thai_ßøaimaimÆai
 0x0de4

	)

1667 
	#XK_Thai_œkkh™gyao
 0x0de5

	)

1668 
	#XK_Thai_maiyamok
 0x0de6

	)

1669 
	#XK_Thai_maôaikhu
 0x0de7

	)

1670 
	#XK_Thai_maõk
 0x0de8

	)

1671 
	#XK_Thai_maôho
 0x0de9

	)

1672 
	#XK_Thai_maôri
 0x0dó

	)

1673 
	#XK_Thai_maich©èwa
 0x0deb

	)

1674 
	#XK_Thai_th™thakh©
 0x0de¯

	)

1675 
	#XK_Thai_nikhahô
 0x0ded

	)

1676 
	#XK_Thai_Àksun
 0x0df0

	)

1677 
	#XK_Thai_Àknung
 0x0df1

	)

1678 
	#XK_Thai_Àks⁄g
 0x0df2

	)

1679 
	#XK_Thai_Àkßm
 0x0df3

	)

1680 
	#XK_Thai_Àksi
 0x0df4

	)

1681 
	#XK_Thai_Àkha
 0x0df5

	)

1682 
	#XK_Thai_Àkhok
 0x0df6

	)

1683 
	#XK_Thai_Àkchë
 0x0df7

	)

1684 
	#XK_Thai_Àk∑ë
 0x0df8

	)

1685 
	#XK_Thai_Àkkao
 0x0df9

	)

1693 #ifde‡
XK_KOREAN


1695 
	#XK_H™gul
 0xff31

	)

1696 
	#XK_H™gul_Sèπ
 0xff32

	)

1697 
	#XK_H™gul_End
 0xff33

	)

1698 
	#XK_H™gul_H™ja
 0xff34

	)

1699 
	#XK_H™gul_Jamo
 0xff35

	)

1700 
	#XK_H™gul_Romaja
 0xff36

	)

1701 
	#XK_H™gul_Codeöput
 0xff37

	)

1702 
	#XK_H™gul_Je⁄ja
 0xff38

	)

1703 
	#XK_H™gul_B™ja
 0xff39

	)

1704 
	#XK_H™gul_PªH™ja
 0xff3®

	)

1705 
	#XK_H™gul_Po°H™ja
 0xff3b

	)

1706 
	#XK_H™gul_SögÀC™did©e
 0xff3¯

	)

1707 
	#XK_H™gul_Mu…ùÀC™did©e
 0xff3d

	)

1708 
	#XK_H™gul_PªviousC™did©e
 0xff3ê

	)

1709 
	#XK_H™gul_S≥cül
 0xff3‡

	)

1710 
	#XK_H™gul_swôch
 0xff7ê

	)

1713 
	#XK_H™gul_Kiyeog
 0x0ó1

	)

1714 
	#XK_H™gul_SßngKiyeog
 0x0ó2

	)

1715 
	#XK_H™gul_KiyeogSios
 0x0ó3

	)

1716 
	#XK_H™gul_Nõun
 0x0ó4

	)

1717 
	#XK_H™gul_NõunJõuj
 0x0ó5

	)

1718 
	#XK_H™gul_NõunHõuh
 0x0ó6

	)

1719 
	#XK_H™gul_Dikeud
 0x0ó7

	)

1720 
	#XK_H™gul_SßngDikeud
 0x0ó8

	)

1721 
	#XK_H™gul_Rõul
 0x0ó9

	)

1722 
	#XK_H™gul_RõulKiyeog
 0x0óa

	)

1723 
	#XK_H™gul_RõulMõum
 0x0ób

	)

1724 
	#XK_H™gul_RõulPõub
 0x0óc

	)

1725 
	#XK_H™gul_RõulSios
 0x0ód

	)

1726 
	#XK_H™gul_RõulTõut
 0x0óe

	)

1727 
	#XK_H™gul_RõulPhõuf
 0x0óf

	)

1728 
	#XK_H™gul_RõulHõuh
 0x0eb0

	)

1729 
	#XK_H™gul_Mõum
 0x0eb1

	)

1730 
	#XK_H™gul_Põub
 0x0eb2

	)

1731 
	#XK_H™gul_SßngPõub
 0x0eb3

	)

1732 
	#XK_H™gul_PõubSios
 0x0eb4

	)

1733 
	#XK_H™gul_Sios
 0x0eb5

	)

1734 
	#XK_H™gul_SßngSios
 0x0eb6

	)

1735 
	#XK_H™gul_Ieung
 0x0eb7

	)

1736 
	#XK_H™gul_Jõuj
 0x0eb8

	)

1737 
	#XK_H™gul_SßngJõuj
 0x0eb9

	)

1738 
	#XK_H™gul_Cõuc
 0x0eba

	)

1739 
	#XK_H™gul_Khõuq
 0x0ebb

	)

1740 
	#XK_H™gul_Tõut
 0x0ebc

	)

1741 
	#XK_H™gul_Phõuf
 0x0ebd

	)

1742 
	#XK_H™gul_Hõuh
 0x0ebe

	)

1745 
	#XK_H™gul_A
 0x0ebf

	)

1746 
	#XK_H™gul_AE
 0x0ec0

	)

1747 
	#XK_H™gul_YA
 0x0ec1

	)

1748 
	#XK_H™gul_YAE
 0x0ec2

	)

1749 
	#XK_H™gul_EO
 0x0ec3

	)

1750 
	#XK_H™gul_E
 0x0ec4

	)

1751 
	#XK_H™gul_YEO
 0x0ec5

	)

1752 
	#XK_H™gul_YE
 0x0ec6

	)

1753 
	#XK_H™gul_O
 0x0ec7

	)

1754 
	#XK_H™gul_WA
 0x0ec8

	)

1755 
	#XK_H™gul_WAE
 0x0ec9

	)

1756 
	#XK_H™gul_OE
 0x0eˇ

	)

1757 
	#XK_H™gul_YO
 0x0ecb

	)

1758 
	#XK_H™gul_U
 0x0ecc

	)

1759 
	#XK_H™gul_WEO
 0x0ecd

	)

1760 
	#XK_H™gul_WE
 0x0e˚

	)

1761 
	#XK_H™gul_WI
 0x0ecf

	)

1762 
	#XK_H™gul_YU
 0x0ed0

	)

1763 
	#XK_H™gul_EU
 0x0ed1

	)

1764 
	#XK_H™gul_YI
 0x0ed2

	)

1765 
	#XK_H™gul_I
 0x0ed3

	)

1768 
	#XK_H™gul_J_Kiyeog
 0x0ed4

	)

1769 
	#XK_H™gul_J_SßngKiyeog
 0x0ed5

	)

1770 
	#XK_H™gul_J_KiyeogSios
 0x0ed6

	)

1771 
	#XK_H™gul_J_Nõun
 0x0ed7

	)

1772 
	#XK_H™gul_J_NõunJõuj
 0x0ed8

	)

1773 
	#XK_H™gul_J_NõunHõuh
 0x0ed9

	)

1774 
	#XK_H™gul_J_Dikeud
 0x0eda

	)

1775 
	#XK_H™gul_J_Rõul
 0x0edb

	)

1776 
	#XK_H™gul_J_RõulKiyeog
 0x0edc

	)

1777 
	#XK_H™gul_J_RõulMõum
 0x0edd

	)

1778 
	#XK_H™gul_J_RõulPõub
 0x0ede

	)

1779 
	#XK_H™gul_J_RõulSios
 0x0edf

	)

1780 
	#XK_H™gul_J_RõulTõut
 0x0ì0

	)

1781 
	#XK_H™gul_J_RõulPhõuf
 0x0ì1

	)

1782 
	#XK_H™gul_J_RõulHõuh
 0x0ì2

	)

1783 
	#XK_H™gul_J_Mõum
 0x0ì3

	)

1784 
	#XK_H™gul_J_Põub
 0x0ì4

	)

1785 
	#XK_H™gul_J_PõubSios
 0x0ì5

	)

1786 
	#XK_H™gul_J_Sios
 0x0ì6

	)

1787 
	#XK_H™gul_J_SßngSios
 0x0ì7

	)

1788 
	#XK_H™gul_J_Ieung
 0x0ì8

	)

1789 
	#XK_H™gul_J_Jõuj
 0x0ì9

	)

1790 
	#XK_H™gul_J_Cõuc
 0x0ìa

	)

1791 
	#XK_H™gul_J_Khõuq
 0x0ìb

	)

1792 
	#XK_H™gul_J_Tõut
 0x0ìc

	)

1793 
	#XK_H™gul_J_Phõuf
 0x0ìd

	)

1794 
	#XK_H™gul_J_Hõuh
 0x0ìe

	)

1797 
	#XK_H™gul_RõulYe‹öHõuh
 0x0ìf

	)

1798 
	#XK_H™gul_Sunkye⁄geumMõum
 0x0ef0

	)

1799 
	#XK_H™gul_Sunkye⁄geumPõub
 0x0ef1

	)

1800 
	#XK_H™gul_P™Sios
 0x0ef2

	)

1801 
	#XK_H™gul_KkogjiDÆröIeung
 0x0ef3

	)

1802 
	#XK_H™gul_Sunkye⁄geumPhõuf
 0x0ef4

	)

1803 
	#XK_H™gul_Ye‹öHõuh
 0x0ef5

	)

1806 
	#XK_H™gul_AøeA
 0x0ef6

	)

1807 
	#XK_H™gul_AøeAE
 0x0ef7

	)

1810 
	#XK_H™gul_J_P™Sios
 0x0ef8

	)

1811 
	#XK_H™gul_J_KkogjiDÆröIeung
 0x0ef9

	)

1812 
	#XK_H™gul_J_Ye‹öHõuh
 0x0eÁ

	)

1815 
	#XK_K‹ón_W⁄
 0x0ef‡

	)

1823 #ifde‡
XK_ARMENIAN


1824 
	#XK_Armíün_lig©uª_ew
 0x1000587

	)

1825 
	#XK_Armíün_fuŒ_°›
 0x1000589

	)

1826 
	#XK_Armíün_vîjakë
 0x1000589

	)

1827 
	#XK_Armíün_£∑øti⁄_m¨k
 0x100055d

	)

1828 
	#XK_Armíün_but
 0x100055d

	)

1829 
	#XK_Armíün_hyphí
 0x100058®

	)

1830 
	#XK_Armíün_yíèm«
 0x100058®

	)

1831 
	#XK_Armíün_ex˛am
 0x100055¯

	)

1832 
	#XK_Armíün_am™ak
 0x100055¯

	)

1833 
	#XK_Armíün_ac˚¡
 0x100055b

	)

1834 
	#XK_Armíün_shesht
 0x100055b

	)

1835 
	#XK_Armíün_que°i⁄
 0x100055ê

	)

1836 
	#XK_Armíün_∑ruyk
 0x100055ê

	)

1837 
	#XK_Armíün_AYB
 0x1000531

	)

1838 
	#XK_Armíün_ayb
 0x1000561

	)

1839 
	#XK_Armíün_BEN
 0x1000532

	)

1840 
	#XK_Armíün_bí
 0x1000562

	)

1841 
	#XK_Armíün_GIM
 0x1000533

	)

1842 
	#XK_Armíün_gim
 0x1000563

	)

1843 
	#XK_Armíün_DA
 0x1000534

	)

1844 
	#XK_Armíün_da
 0x1000564

	)

1845 
	#XK_Armíün_YECH
 0x1000535

	)

1846 
	#XK_Armíün_yech
 0x1000565

	)

1847 
	#XK_Armíün_ZA
 0x1000536

	)

1848 
	#XK_Armíün_za
 0x1000566

	)

1849 
	#XK_Armíün_E
 0x1000537

	)

1850 
	#XK_Armíün_e
 0x1000567

	)

1851 
	#XK_Armíün_AT
 0x1000538

	)

1852 
	#XK_Armíün_©
 0x1000568

	)

1853 
	#XK_Armíün_TO
 0x1000539

	)

1854 
	#XK_Armíün_to
 0x1000569

	)

1855 
	#XK_Armíün_ZHE
 0x100053®

	)

1856 
	#XK_Armíün_zhe
 0x100056®

	)

1857 
	#XK_Armíün_INI
 0x100053b

	)

1858 
	#XK_Armíün_öi
 0x100056b

	)

1859 
	#XK_Armíün_LYUN
 0x100053¯

	)

1860 
	#XK_Armíün_lyun
 0x100056¯

	)

1861 
	#XK_Armíün_KHE
 0x100053d

	)

1862 
	#XK_Armíün_khe
 0x100056d

	)

1863 
	#XK_Armíün_TSA
 0x100053ê

	)

1864 
	#XK_Armíün_tß
 0x100056ê

	)

1865 
	#XK_Armíün_KEN
 0x100053‡

	)

1866 
	#XK_Armíün_kí
 0x100056‡

	)

1867 
	#XK_Armíün_HO
 0x1000540

	)

1868 
	#XK_Armíün_ho
 0x1000570

	)

1869 
	#XK_Armíün_DZA
 0x1000541

	)

1870 
	#XK_Armíün_dza
 0x1000571

	)

1871 
	#XK_Armíün_GHAT
 0x1000542

	)

1872 
	#XK_Armíün_gh©
 0x1000572

	)

1873 
	#XK_Armíün_TCHE
 0x1000543

	)

1874 
	#XK_Armíün_tche
 0x1000573

	)

1875 
	#XK_Armíün_MEN
 0x1000544

	)

1876 
	#XK_Armíün_mí
 0x1000574

	)

1877 
	#XK_Armíün_HI
 0x1000545

	)

1878 
	#XK_Armíün_hi
 0x1000575

	)

1879 
	#XK_Armíün_NU
 0x1000546

	)

1880 
	#XK_Armíün_nu
 0x1000576

	)

1881 
	#XK_Armíün_SHA
 0x1000547

	)

1882 
	#XK_Armíün_sha
 0x1000577

	)

1883 
	#XK_Armíün_VO
 0x1000548

	)

1884 
	#XK_Armíün_vo
 0x1000578

	)

1885 
	#XK_Armíün_CHA
 0x1000549

	)

1886 
	#XK_Armíün_cha
 0x1000579

	)

1887 
	#XK_Armíün_PE
 0x100054®

	)

1888 
	#XK_Armíün_≥
 0x100057®

	)

1889 
	#XK_Armíün_JE
 0x100054b

	)

1890 
	#XK_Armíün_je
 0x100057b

	)

1891 
	#XK_Armíün_RA
 0x100054¯

	)

1892 
	#XK_Armíün_ø
 0x100057¯

	)

1893 
	#XK_Armíün_SE
 0x100054d

	)

1894 
	#XK_Armíün_£
 0x100057d

	)

1895 
	#XK_Armíün_VEV
 0x100054ê

	)

1896 
	#XK_Armíün_vev
 0x100057ê

	)

1897 
	#XK_Armíün_TYUN
 0x100054‡

	)

1898 
	#XK_Armíün_tyun
 0x100057‡

	)

1899 
	#XK_Armíün_RE
 0x1000550

	)

1900 
	#XK_Armíün_ª
 0x1000580

	)

1901 
	#XK_Armíün_TSO
 0x1000551

	)

1902 
	#XK_Armíün_tso
 0x1000581

	)

1903 
	#XK_Armíün_VYUN
 0x1000552

	)

1904 
	#XK_Armíün_vyun
 0x1000582

	)

1905 
	#XK_Armíün_PYUR
 0x1000553

	)

1906 
	#XK_Armíün_pyur
 0x1000583

	)

1907 
	#XK_Armíün_KE
 0x1000554

	)

1908 
	#XK_Armíün_ke
 0x1000584

	)

1909 
	#XK_Armíün_O
 0x1000555

	)

1910 
	#XK_Armíün_o
 0x1000585

	)

1911 
	#XK_Armíün_FE
 0x1000556

	)

1912 
	#XK_Armíün_„
 0x1000586

	)

1913 
	#XK_Armíün_≠o°r›he
 0x100055®

	)

1920 #ifde‡
XK_GEORGIAN


1921 
	#XK_Ge‹gün_™
 0x10010d0

	)

1922 
	#XK_Ge‹gün_b™
 0x10010d1

	)

1923 
	#XK_Ge‹gün_g™
 0x10010d2

	)

1924 
	#XK_Ge‹gün_d⁄
 0x10010d3

	)

1925 
	#XK_Ge‹gün_í
 0x10010d4

	)

1926 
	#XK_Ge‹gün_vö
 0x10010d5

	)

1927 
	#XK_Ge‹gün_zí
 0x10010d6

	)

1928 
	#XK_Ge‹gün_èn
 0x10010d7

	)

1929 
	#XK_Ge‹gün_ö
 0x10010d8

	)

1930 
	#XK_Ge‹gün_k™
 0x10010d9

	)

1931 
	#XK_Ge‹gün_œs
 0x10010d®

	)

1932 
	#XK_Ge‹gün_m™
 0x10010db

	)

1933 
	#XK_Ge‹gün_«r
 0x10010d¯

	)

1934 
	#XK_Ge‹gün_⁄
 0x10010dd

	)

1935 
	#XK_Ge‹gün_∑r
 0x10010dê

	)

1936 
	#XK_Ge‹gün_zh¨
 0x10010d‡

	)

1937 
	#XK_Ge‹gün_øe
 0x10010e0

	)

1938 
	#XK_Ge‹gün_ßn
 0x10010e1

	)

1939 
	#XK_Ge‹gün_èr
 0x10010e2

	)

1940 
	#XK_Ge‹gün_un
 0x10010e3

	)

1941 
	#XK_Ge‹gün_ph¨
 0x10010e4

	)

1942 
	#XK_Ge‹gün_kh¨
 0x10010e5

	)

1943 
	#XK_Ge‹gün_gh™
 0x10010e6

	)

1944 
	#XK_Ge‹gün_q¨
 0x10010e7

	)

1945 
	#XK_Ge‹gün_shö
 0x10010e8

	)

1946 
	#XK_Ge‹gün_chö
 0x10010e9

	)

1947 
	#XK_Ge‹gün_ˇn
 0x10010ó

	)

1948 
	#XK_Ge‹gün_jû
 0x10010eb

	)

1949 
	#XK_Ge‹gün_cû
 0x10010e¯

	)

1950 
	#XK_Ge‹gün_ch¨
 0x10010ed

	)

1951 
	#XK_Ge‹gün_x™
 0x10010ì

	)

1952 
	#XK_Ge‹gün_jh™
 0x10010e‡

	)

1953 
	#XK_Ge‹gün_h´
 0x10010f0

	)

1954 
	#XK_Ge‹gün_he
 0x10010f1

	)

1955 
	#XK_Ge‹gün_hõ
 0x10010f2

	)

1956 
	#XK_Ge‹gün_we
 0x10010f3

	)

1957 
	#XK_Ge‹gün_h¨
 0x10010f4

	)

1958 
	#XK_Ge‹gün_h€
 0x10010f5

	)

1959 
	#XK_Ge‹gün_fi
 0x10010f6

	)

1966 #ifde‡
XK_CAUCASUS


1968 
	#XK_XabovedŸ
 0x1001e8®

	)

1969 
	#XK_Ibªve
 0x100012¯

	)

1970 
	#XK_Z°roke
 0x10001b5

	)

1971 
	#XK_Gˇr⁄
 0x10001e6

	)

1972 
	#XK_Oˇr⁄
 0x10001d1

	)

1973 
	#XK_Ob¨ªd
 0x100019‡

	)

1974 
	#XK_xabovedŸ
 0x1001e8b

	)

1975 
	#XK_ibªve
 0x100012d

	)

1976 
	#XK_z°roke
 0x10001b6

	)

1977 
	#XK_gˇr⁄
 0x10001e7

	)

1978 
	#XK_oˇr⁄
 0x10001d2

	)

1979 
	#XK_ob¨ªd
 0x1000275

	)

1980 
	#XK_SCHWA
 0x100018‡

	)

1981 
	#XK_schwa
 0x1000259

	)

1982 
	#XK_EZH
 0x10001b7

	)

1983 
	#XK_ezh
 0x1000292

	)

1986 
	#XK_LbñowdŸ
 0x1001e36

	)

1987 
	#XK_lbñowdŸ
 0x1001e37

	)

1994 #ifde‡
XK_VIETNAMESE


1995 
	#XK_AbñowdŸ
 0x1001ó0

	)

1996 
	#XK_abñowdŸ
 0x1001ó1

	)

1997 
	#XK_Ahook
 0x1001ó2

	)

1998 
	#XK_ahook
 0x1001ó3

	)

1999 
	#XK_AcúcumÊexacuã
 0x1001ó4

	)

2000 
	#XK_acúcumÊexacuã
 0x1001ó5

	)

2001 
	#XK_AcúcumÊexgøve
 0x1001ó6

	)

2002 
	#XK_acúcumÊexgøve
 0x1001ó7

	)

2003 
	#XK_AcúcumÊexhook
 0x1001ó8

	)

2004 
	#XK_acúcumÊexhook
 0x1001ó9

	)

2005 
	#XK_AcúcumÊextûde
 0x1001ó®

	)

2006 
	#XK_acúcumÊextûde
 0x1001ób

	)

2007 
	#XK_AcúcumÊexbñowdŸ
 0x1001ó¯

	)

2008 
	#XK_acúcumÊexbñowdŸ
 0x1001ód

	)

2009 
	#XK_Abªvócuã
 0x1001óê

	)

2010 
	#XK_abªvócuã
 0x1001ó‡

	)

2011 
	#XK_Abªvegøve
 0x1001eb0

	)

2012 
	#XK_abªvegøve
 0x1001eb1

	)

2013 
	#XK_Abªvehook
 0x1001eb2

	)

2014 
	#XK_abªvehook
 0x1001eb3

	)

2015 
	#XK_Abªvëûde
 0x1001eb4

	)

2016 
	#XK_abªvëûde
 0x1001eb5

	)

2017 
	#XK_AbªvebñowdŸ
 0x1001eb6

	)

2018 
	#XK_abªvebñowdŸ
 0x1001eb7

	)

2019 
	#XK_EbñowdŸ
 0x1001eb8

	)

2020 
	#XK_ebñowdŸ
 0x1001eb9

	)

2021 
	#XK_Ehook
 0x1001eb®

	)

2022 
	#XK_ehook
 0x1001ebb

	)

2023 
	#XK_Etûde
 0x1001eb¯

	)

2024 
	#XK_ëûde
 0x1001ebd

	)

2025 
	#XK_EcúcumÊexacuã
 0x1001ebê

	)

2026 
	#XK_ecúcumÊexacuã
 0x1001eb‡

	)

2027 
	#XK_EcúcumÊexgøve
 0x1001ec0

	)

2028 
	#XK_ecúcumÊexgøve
 0x1001ec1

	)

2029 
	#XK_EcúcumÊexhook
 0x1001ec2

	)

2030 
	#XK_ecúcumÊexhook
 0x1001ec3

	)

2031 
	#XK_EcúcumÊextûde
 0x1001ec4

	)

2032 
	#XK_ecúcumÊextûde
 0x1001ec5

	)

2033 
	#XK_EcúcumÊexbñowdŸ
 0x1001ec6

	)

2034 
	#XK_ecúcumÊexbñowdŸ
 0x1001ec7

	)

2035 
	#XK_Ihook
 0x1001ec8

	)

2036 
	#XK_ihook
 0x1001ec9

	)

2037 
	#XK_IbñowdŸ
 0x1001eˇ

	)

2038 
	#XK_ibñowdŸ
 0x1001ecb

	)

2039 
	#XK_ObñowdŸ
 0x1001ec¯

	)

2040 
	#XK_obñowdŸ
 0x1001ecd

	)

2041 
	#XK_Ohook
 0x1001e˚

	)

2042 
	#XK_ohook
 0x1001ec‡

	)

2043 
	#XK_OcúcumÊexacuã
 0x1001ed0

	)

2044 
	#XK_ocúcumÊexacuã
 0x1001ed1

	)

2045 
	#XK_OcúcumÊexgøve
 0x1001ed2

	)

2046 
	#XK_ocúcumÊexgøve
 0x1001ed3

	)

2047 
	#XK_OcúcumÊexhook
 0x1001ed4

	)

2048 
	#XK_ocúcumÊexhook
 0x1001ed5

	)

2049 
	#XK_OcúcumÊextûde
 0x1001ed6

	)

2050 
	#XK_ocúcumÊextûde
 0x1001ed7

	)

2051 
	#XK_OcúcumÊexbñowdŸ
 0x1001ed8

	)

2052 
	#XK_ocúcumÊexbñowdŸ
 0x1001ed9

	)

2053 
	#XK_Oh‹«cuã
 0x1001ed®

	)

2054 
	#XK_oh‹«cuã
 0x1001edb

	)

2055 
	#XK_Oh‹ngøve
 0x1001ed¯

	)

2056 
	#XK_oh‹ngøve
 0x1001edd

	)

2057 
	#XK_Oh‹nhook
 0x1001edê

	)

2058 
	#XK_oh‹nhook
 0x1001ed‡

	)

2059 
	#XK_Oh‹¡ûde
 0x1001ì0

	)

2060 
	#XK_oh‹¡ûde
 0x1001ì1

	)

2061 
	#XK_Oh‹nbñowdŸ
 0x1001ì2

	)

2062 
	#XK_oh‹nbñowdŸ
 0x1001ì3

	)

2063 
	#XK_UbñowdŸ
 0x1001ì4

	)

2064 
	#XK_ubñowdŸ
 0x1001ì5

	)

2065 
	#XK_Uhook
 0x1001ì6

	)

2066 
	#XK_uhook
 0x1001ì7

	)

2067 
	#XK_Uh‹«cuã
 0x1001ì8

	)

2068 
	#XK_uh‹«cuã
 0x1001ì9

	)

2069 
	#XK_Uh‹ngøve
 0x1001ì®

	)

2070 
	#XK_uh‹ngøve
 0x1001ìb

	)

2071 
	#XK_Uh‹nhook
 0x1001ì¯

	)

2072 
	#XK_uh‹nhook
 0x1001ìd

	)

2073 
	#XK_Uh‹¡ûde
 0x1001ìê

	)

2074 
	#XK_uh‹¡ûde
 0x1001ì‡

	)

2075 
	#XK_Uh‹nbñowdŸ
 0x1001ef0

	)

2076 
	#XK_uh‹nbñowdŸ
 0x1001ef1

	)

2077 
	#XK_YbñowdŸ
 0x1001ef4

	)

2078 
	#XK_ybñowdŸ
 0x1001ef5

	)

2079 
	#XK_Yhook
 0x1001ef6

	)

2080 
	#XK_yhook
 0x1001ef7

	)

2081 
	#XK_Ytûde
 0x1001ef8

	)

2082 
	#XK_ytûde
 0x1001ef9

	)

2083 
	#XK_Oh‹n
 0x10001a0

	)

2084 
	#XK_oh‹n
 0x10001a1

	)

2085 
	#XK_Uh‹n
 0x10001a‡

	)

2086 
	#XK_uh‹n
 0x10001b0

	)

2090 #ifde‡
XK_CURRENCY


2091 
	#XK_EcuSign
 0x10020a0

	)

2092 
	#XK_Cﬁ⁄Sign
 0x10020a1

	)

2093 
	#XK_CruzeúoSign
 0x10020a2

	)

2094 
	#XK_FFøncSign
 0x10020a3

	)

2095 
	#XK_LúaSign
 0x10020a4

	)

2096 
	#XK_MûlSign
 0x10020a5

	)

2097 
	#XK_NaúaSign
 0x10020a6

	)

2098 
	#XK_Pe£èSign
 0x10020a7

	)

2099 
	#XK_Ru≥eSign
 0x10020a8

	)

2100 
	#XK_W⁄Sign
 0x10020a9

	)

2101 
	#XK_NewSheqñSign
 0x10020Ø

	)

2102 
	#XK_D⁄gSign
 0x10020ab

	)

2103 
	#XK_EuroSign
 0x20a¯

	)

2106 #ifde‡
XK_MATHEMATICAL


2108 
	#XK_zîosu≥ri‹
 0x1002070

	)

2109 
	#XK_foursu≥ri‹
 0x1002074

	)

2110 
	#XK_fivesu≥ri‹
 0x1002075

	)

2111 
	#XK_sixsu≥ri‹
 0x1002076

	)

2112 
	#XK_£vísu≥ri‹
 0x1002077

	)

2113 
	#XK_eightsu≥ri‹
 0x1002078

	)

2114 
	#XK_nöesu≥ri‹
 0x1002079

	)

2115 
	#XK_zîosubs¸ùt
 0x1002080

	)

2116 
	#XK_⁄esubs¸ùt
 0x1002081

	)

2117 
	#XK_twosubs¸ùt
 0x1002082

	)

2118 
	#XK_thªesubs¸ùt
 0x1002083

	)

2119 
	#XK_foursubs¸ùt
 0x1002084

	)

2120 
	#XK_fivesubs¸ùt
 0x1002085

	)

2121 
	#XK_sixsubs¸ùt
 0x1002086

	)

2122 
	#XK_£vísubs¸ùt
 0x1002087

	)

2123 
	#XK_eightsubs¸ùt
 0x1002088

	)

2124 
	#XK_nöesubs¸ùt
 0x1002089

	)

2125 
	#XK_∑πdif„ª¡ül
 0x1002202

	)

2126 
	#XK_em±y£t
 0x1002205

	)

2127 
	#XK_ñemítof
 0x1002208

	)

2128 
	#XK_nŸñemítof
 0x1002209

	)

2129 
	#XK_c⁄èößs
 0x100220B

	)

2130 
	#XK_squ¨îoŸ
 0x100221A

	)

2131 
	#XK_cubîoŸ
 0x100221B

	)

2132 
	#XK_fouπhroŸ
 0x100221C

	)

2133 
	#XK_döãgøl
 0x100222C

	)

2134 
	#XK_töãgøl
 0x100222D

	)

2135 
	#XK_beˇu£
 0x1002235

	)

2136 
	#XK_≠¥oxeq
 0x1002248

	)

2137 
	#XK_nŸ≠¥oxeq
 0x1002247

	)

2138 
	#XK_nŸidítiˇl
 0x1002262

	)

2139 
	#XK_°ri˘eq
 0x1002263

	)

2142 #ifde‡
XK_BRAILLE


2143 
	#XK_bøûÀ_dŸ_1
 0xfff1

	)

2144 
	#XK_bøûÀ_dŸ_2
 0xfff2

	)

2145 
	#XK_bøûÀ_dŸ_3
 0xfff3

	)

2146 
	#XK_bøûÀ_dŸ_4
 0xfff4

	)

2147 
	#XK_bøûÀ_dŸ_5
 0xfff5

	)

2148 
	#XK_bøûÀ_dŸ_6
 0xfff6

	)

2149 
	#XK_bøûÀ_dŸ_7
 0xfff7

	)

2150 
	#XK_bøûÀ_dŸ_8
 0xfff8

	)

2151 
	#XK_bøûÀ_dŸ_9
 0xfff9

	)

2152 
	#XK_bøûÀ_dŸ_10
 0xffÁ

	)

2153 
	#XK_bøûÀ_bœnk
 0x1002800

	)

2154 
	#XK_bøûÀ_dŸs_1
 0x1002801

	)

2155 
	#XK_bøûÀ_dŸs_2
 0x1002802

	)

2156 
	#XK_bøûÀ_dŸs_12
 0x1002803

	)

2157 
	#XK_bøûÀ_dŸs_3
 0x1002804

	)

2158 
	#XK_bøûÀ_dŸs_13
 0x1002805

	)

2159 
	#XK_bøûÀ_dŸs_23
 0x1002806

	)

2160 
	#XK_bøûÀ_dŸs_123
 0x1002807

	)

2161 
	#XK_bøûÀ_dŸs_4
 0x1002808

	)

2162 
	#XK_bøûÀ_dŸs_14
 0x1002809

	)

2163 
	#XK_bøûÀ_dŸs_24
 0x100280®

	)

2164 
	#XK_bøûÀ_dŸs_124
 0x100280b

	)

2165 
	#XK_bøûÀ_dŸs_34
 0x100280¯

	)

2166 
	#XK_bøûÀ_dŸs_134
 0x100280d

	)

2167 
	#XK_bøûÀ_dŸs_234
 0x100280ê

	)

2168 
	#XK_bøûÀ_dŸs_1234
 0x100280‡

	)

2169 
	#XK_bøûÀ_dŸs_5
 0x1002810

	)

2170 
	#XK_bøûÀ_dŸs_15
 0x1002811

	)

2171 
	#XK_bøûÀ_dŸs_25
 0x1002812

	)

2172 
	#XK_bøûÀ_dŸs_125
 0x1002813

	)

2173 
	#XK_bøûÀ_dŸs_35
 0x1002814

	)

2174 
	#XK_bøûÀ_dŸs_135
 0x1002815

	)

2175 
	#XK_bøûÀ_dŸs_235
 0x1002816

	)

2176 
	#XK_bøûÀ_dŸs_1235
 0x1002817

	)

2177 
	#XK_bøûÀ_dŸs_45
 0x1002818

	)

2178 
	#XK_bøûÀ_dŸs_145
 0x1002819

	)

2179 
	#XK_bøûÀ_dŸs_245
 0x100281®

	)

2180 
	#XK_bøûÀ_dŸs_1245
 0x100281b

	)

2181 
	#XK_bøûÀ_dŸs_345
 0x100281¯

	)

2182 
	#XK_bøûÀ_dŸs_1345
 0x100281d

	)

2183 
	#XK_bøûÀ_dŸs_2345
 0x100281ê

	)

2184 
	#XK_bøûÀ_dŸs_12345
 0x100281‡

	)

2185 
	#XK_bøûÀ_dŸs_6
 0x1002820

	)

2186 
	#XK_bøûÀ_dŸs_16
 0x1002821

	)

2187 
	#XK_bøûÀ_dŸs_26
 0x1002822

	)

2188 
	#XK_bøûÀ_dŸs_126
 0x1002823

	)

2189 
	#XK_bøûÀ_dŸs_36
 0x1002824

	)

2190 
	#XK_bøûÀ_dŸs_136
 0x1002825

	)

2191 
	#XK_bøûÀ_dŸs_236
 0x1002826

	)

2192 
	#XK_bøûÀ_dŸs_1236
 0x1002827

	)

2193 
	#XK_bøûÀ_dŸs_46
 0x1002828

	)

2194 
	#XK_bøûÀ_dŸs_146
 0x1002829

	)

2195 
	#XK_bøûÀ_dŸs_246
 0x100282®

	)

2196 
	#XK_bøûÀ_dŸs_1246
 0x100282b

	)

2197 
	#XK_bøûÀ_dŸs_346
 0x100282¯

	)

2198 
	#XK_bøûÀ_dŸs_1346
 0x100282d

	)

2199 
	#XK_bøûÀ_dŸs_2346
 0x100282ê

	)

2200 
	#XK_bøûÀ_dŸs_12346
 0x100282‡

	)

2201 
	#XK_bøûÀ_dŸs_56
 0x1002830

	)

2202 
	#XK_bøûÀ_dŸs_156
 0x1002831

	)

2203 
	#XK_bøûÀ_dŸs_256
 0x1002832

	)

2204 
	#XK_bøûÀ_dŸs_1256
 0x1002833

	)

2205 
	#XK_bøûÀ_dŸs_356
 0x1002834

	)

2206 
	#XK_bøûÀ_dŸs_1356
 0x1002835

	)

2207 
	#XK_bøûÀ_dŸs_2356
 0x1002836

	)

2208 
	#XK_bøûÀ_dŸs_12356
 0x1002837

	)

2209 
	#XK_bøûÀ_dŸs_456
 0x1002838

	)

2210 
	#XK_bøûÀ_dŸs_1456
 0x1002839

	)

2211 
	#XK_bøûÀ_dŸs_2456
 0x100283®

	)

2212 
	#XK_bøûÀ_dŸs_12456
 0x100283b

	)

2213 
	#XK_bøûÀ_dŸs_3456
 0x100283¯

	)

2214 
	#XK_bøûÀ_dŸs_13456
 0x100283d

	)

2215 
	#XK_bøûÀ_dŸs_23456
 0x100283ê

	)

2216 
	#XK_bøûÀ_dŸs_123456
 0x100283‡

	)

2217 
	#XK_bøûÀ_dŸs_7
 0x1002840

	)

2218 
	#XK_bøûÀ_dŸs_17
 0x1002841

	)

2219 
	#XK_bøûÀ_dŸs_27
 0x1002842

	)

2220 
	#XK_bøûÀ_dŸs_127
 0x1002843

	)

2221 
	#XK_bøûÀ_dŸs_37
 0x1002844

	)

2222 
	#XK_bøûÀ_dŸs_137
 0x1002845

	)

2223 
	#XK_bøûÀ_dŸs_237
 0x1002846

	)

2224 
	#XK_bøûÀ_dŸs_1237
 0x1002847

	)

2225 
	#XK_bøûÀ_dŸs_47
 0x1002848

	)

2226 
	#XK_bøûÀ_dŸs_147
 0x1002849

	)

2227 
	#XK_bøûÀ_dŸs_247
 0x100284®

	)

2228 
	#XK_bøûÀ_dŸs_1247
 0x100284b

	)

2229 
	#XK_bøûÀ_dŸs_347
 0x100284¯

	)

2230 
	#XK_bøûÀ_dŸs_1347
 0x100284d

	)

2231 
	#XK_bøûÀ_dŸs_2347
 0x100284ê

	)

2232 
	#XK_bøûÀ_dŸs_12347
 0x100284‡

	)

2233 
	#XK_bøûÀ_dŸs_57
 0x1002850

	)

2234 
	#XK_bøûÀ_dŸs_157
 0x1002851

	)

2235 
	#XK_bøûÀ_dŸs_257
 0x1002852

	)

2236 
	#XK_bøûÀ_dŸs_1257
 0x1002853

	)

2237 
	#XK_bøûÀ_dŸs_357
 0x1002854

	)

2238 
	#XK_bøûÀ_dŸs_1357
 0x1002855

	)

2239 
	#XK_bøûÀ_dŸs_2357
 0x1002856

	)

2240 
	#XK_bøûÀ_dŸs_12357
 0x1002857

	)

2241 
	#XK_bøûÀ_dŸs_457
 0x1002858

	)

2242 
	#XK_bøûÀ_dŸs_1457
 0x1002859

	)

2243 
	#XK_bøûÀ_dŸs_2457
 0x100285®

	)

2244 
	#XK_bøûÀ_dŸs_12457
 0x100285b

	)

2245 
	#XK_bøûÀ_dŸs_3457
 0x100285¯

	)

2246 
	#XK_bøûÀ_dŸs_13457
 0x100285d

	)

2247 
	#XK_bøûÀ_dŸs_23457
 0x100285ê

	)

2248 
	#XK_bøûÀ_dŸs_123457
 0x100285‡

	)

2249 
	#XK_bøûÀ_dŸs_67
 0x1002860

	)

2250 
	#XK_bøûÀ_dŸs_167
 0x1002861

	)

2251 
	#XK_bøûÀ_dŸs_267
 0x1002862

	)

2252 
	#XK_bøûÀ_dŸs_1267
 0x1002863

	)

2253 
	#XK_bøûÀ_dŸs_367
 0x1002864

	)

2254 
	#XK_bøûÀ_dŸs_1367
 0x1002865

	)

2255 
	#XK_bøûÀ_dŸs_2367
 0x1002866

	)

2256 
	#XK_bøûÀ_dŸs_12367
 0x1002867

	)

2257 
	#XK_bøûÀ_dŸs_467
 0x1002868

	)

2258 
	#XK_bøûÀ_dŸs_1467
 0x1002869

	)

2259 
	#XK_bøûÀ_dŸs_2467
 0x100286®

	)

2260 
	#XK_bøûÀ_dŸs_12467
 0x100286b

	)

2261 
	#XK_bøûÀ_dŸs_3467
 0x100286¯

	)

2262 
	#XK_bøûÀ_dŸs_13467
 0x100286d

	)

2263 
	#XK_bøûÀ_dŸs_23467
 0x100286ê

	)

2264 
	#XK_bøûÀ_dŸs_123467
 0x100286‡

	)

2265 
	#XK_bøûÀ_dŸs_567
 0x1002870

	)

2266 
	#XK_bøûÀ_dŸs_1567
 0x1002871

	)

2267 
	#XK_bøûÀ_dŸs_2567
 0x1002872

	)

2268 
	#XK_bøûÀ_dŸs_12567
 0x1002873

	)

2269 
	#XK_bøûÀ_dŸs_3567
 0x1002874

	)

2270 
	#XK_bøûÀ_dŸs_13567
 0x1002875

	)

2271 
	#XK_bøûÀ_dŸs_23567
 0x1002876

	)

2272 
	#XK_bøûÀ_dŸs_123567
 0x1002877

	)

2273 
	#XK_bøûÀ_dŸs_4567
 0x1002878

	)

2274 
	#XK_bøûÀ_dŸs_14567
 0x1002879

	)

2275 
	#XK_bøûÀ_dŸs_24567
 0x100287®

	)

2276 
	#XK_bøûÀ_dŸs_124567
 0x100287b

	)

2277 
	#XK_bøûÀ_dŸs_34567
 0x100287¯

	)

2278 
	#XK_bøûÀ_dŸs_134567
 0x100287d

	)

2279 
	#XK_bøûÀ_dŸs_234567
 0x100287ê

	)

2280 
	#XK_bøûÀ_dŸs_1234567
 0x100287‡

	)

2281 
	#XK_bøûÀ_dŸs_8
 0x1002880

	)

2282 
	#XK_bøûÀ_dŸs_18
 0x1002881

	)

2283 
	#XK_bøûÀ_dŸs_28
 0x1002882

	)

2284 
	#XK_bøûÀ_dŸs_128
 0x1002883

	)

2285 
	#XK_bøûÀ_dŸs_38
 0x1002884

	)

2286 
	#XK_bøûÀ_dŸs_138
 0x1002885

	)

2287 
	#XK_bøûÀ_dŸs_238
 0x1002886

	)

2288 
	#XK_bøûÀ_dŸs_1238
 0x1002887

	)

2289 
	#XK_bøûÀ_dŸs_48
 0x1002888

	)

2290 
	#XK_bøûÀ_dŸs_148
 0x1002889

	)

2291 
	#XK_bøûÀ_dŸs_248
 0x100288®

	)

2292 
	#XK_bøûÀ_dŸs_1248
 0x100288b

	)

2293 
	#XK_bøûÀ_dŸs_348
 0x100288¯

	)

2294 
	#XK_bøûÀ_dŸs_1348
 0x100288d

	)

2295 
	#XK_bøûÀ_dŸs_2348
 0x100288ê

	)

2296 
	#XK_bøûÀ_dŸs_12348
 0x100288‡

	)

2297 
	#XK_bøûÀ_dŸs_58
 0x1002890

	)

2298 
	#XK_bøûÀ_dŸs_158
 0x1002891

	)

2299 
	#XK_bøûÀ_dŸs_258
 0x1002892

	)

2300 
	#XK_bøûÀ_dŸs_1258
 0x1002893

	)

2301 
	#XK_bøûÀ_dŸs_358
 0x1002894

	)

2302 
	#XK_bøûÀ_dŸs_1358
 0x1002895

	)

2303 
	#XK_bøûÀ_dŸs_2358
 0x1002896

	)

2304 
	#XK_bøûÀ_dŸs_12358
 0x1002897

	)

2305 
	#XK_bøûÀ_dŸs_458
 0x1002898

	)

2306 
	#XK_bøûÀ_dŸs_1458
 0x1002899

	)

2307 
	#XK_bøûÀ_dŸs_2458
 0x100289®

	)

2308 
	#XK_bøûÀ_dŸs_12458
 0x100289b

	)

2309 
	#XK_bøûÀ_dŸs_3458
 0x100289¯

	)

2310 
	#XK_bøûÀ_dŸs_13458
 0x100289d

	)

2311 
	#XK_bøûÀ_dŸs_23458
 0x100289ê

	)

2312 
	#XK_bøûÀ_dŸs_123458
 0x100289‡

	)

2313 
	#XK_bøûÀ_dŸs_68
 0x10028a0

	)

2314 
	#XK_bøûÀ_dŸs_168
 0x10028a1

	)

2315 
	#XK_bøûÀ_dŸs_268
 0x10028a2

	)

2316 
	#XK_bøûÀ_dŸs_1268
 0x10028a3

	)

2317 
	#XK_bøûÀ_dŸs_368
 0x10028a4

	)

2318 
	#XK_bøûÀ_dŸs_1368
 0x10028a5

	)

2319 
	#XK_bøûÀ_dŸs_2368
 0x10028a6

	)

2320 
	#XK_bøûÀ_dŸs_12368
 0x10028a7

	)

2321 
	#XK_bøûÀ_dŸs_468
 0x10028a8

	)

2322 
	#XK_bøûÀ_dŸs_1468
 0x10028a9

	)

2323 
	#XK_bøûÀ_dŸs_2468
 0x10028Ø

	)

2324 
	#XK_bøûÀ_dŸs_12468
 0x10028ab

	)

2325 
	#XK_bøûÀ_dŸs_3468
 0x10028a¯

	)

2326 
	#XK_bøûÀ_dŸs_13468
 0x10028ad

	)

2327 
	#XK_bøûÀ_dŸs_23468
 0x10028´

	)

2328 
	#XK_bøûÀ_dŸs_123468
 0x10028a‡

	)

2329 
	#XK_bøûÀ_dŸs_568
 0x10028b0

	)

2330 
	#XK_bøûÀ_dŸs_1568
 0x10028b1

	)

2331 
	#XK_bøûÀ_dŸs_2568
 0x10028b2

	)

2332 
	#XK_bøûÀ_dŸs_12568
 0x10028b3

	)

2333 
	#XK_bøûÀ_dŸs_3568
 0x10028b4

	)

2334 
	#XK_bøûÀ_dŸs_13568
 0x10028b5

	)

2335 
	#XK_bøûÀ_dŸs_23568
 0x10028b6

	)

2336 
	#XK_bøûÀ_dŸs_123568
 0x10028b7

	)

2337 
	#XK_bøûÀ_dŸs_4568
 0x10028b8

	)

2338 
	#XK_bøûÀ_dŸs_14568
 0x10028b9

	)

2339 
	#XK_bøûÀ_dŸs_24568
 0x10028b®

	)

2340 
	#XK_bøûÀ_dŸs_124568
 0x10028bb

	)

2341 
	#XK_bøûÀ_dŸs_34568
 0x10028b¯

	)

2342 
	#XK_bøûÀ_dŸs_134568
 0x10028bd

	)

2343 
	#XK_bøûÀ_dŸs_234568
 0x10028bê

	)

2344 
	#XK_bøûÀ_dŸs_1234568
 0x10028b‡

	)

2345 
	#XK_bøûÀ_dŸs_78
 0x10028c0

	)

2346 
	#XK_bøûÀ_dŸs_178
 0x10028c1

	)

2347 
	#XK_bøûÀ_dŸs_278
 0x10028c2

	)

2348 
	#XK_bøûÀ_dŸs_1278
 0x10028c3

	)

2349 
	#XK_bøûÀ_dŸs_378
 0x10028c4

	)

2350 
	#XK_bøûÀ_dŸs_1378
 0x10028c5

	)

2351 
	#XK_bøûÀ_dŸs_2378
 0x10028c6

	)

2352 
	#XK_bøûÀ_dŸs_12378
 0x10028c7

	)

2353 
	#XK_bøûÀ_dŸs_478
 0x10028c8

	)

2354 
	#XK_bøûÀ_dŸs_1478
 0x10028c9

	)

2355 
	#XK_bøûÀ_dŸs_2478
 0x10028ˇ

	)

2356 
	#XK_bøûÀ_dŸs_12478
 0x10028cb

	)

2357 
	#XK_bøûÀ_dŸs_3478
 0x10028c¯

	)

2358 
	#XK_bøûÀ_dŸs_13478
 0x10028cd

	)

2359 
	#XK_bøûÀ_dŸs_23478
 0x10028˚

	)

2360 
	#XK_bøûÀ_dŸs_123478
 0x10028c‡

	)

2361 
	#XK_bøûÀ_dŸs_578
 0x10028d0

	)

2362 
	#XK_bøûÀ_dŸs_1578
 0x10028d1

	)

2363 
	#XK_bøûÀ_dŸs_2578
 0x10028d2

	)

2364 
	#XK_bøûÀ_dŸs_12578
 0x10028d3

	)

2365 
	#XK_bøûÀ_dŸs_3578
 0x10028d4

	)

2366 
	#XK_bøûÀ_dŸs_13578
 0x10028d5

	)

2367 
	#XK_bøûÀ_dŸs_23578
 0x10028d6

	)

2368 
	#XK_bøûÀ_dŸs_123578
 0x10028d7

	)

2369 
	#XK_bøûÀ_dŸs_4578
 0x10028d8

	)

2370 
	#XK_bøûÀ_dŸs_14578
 0x10028d9

	)

2371 
	#XK_bøûÀ_dŸs_24578
 0x10028d®

	)

2372 
	#XK_bøûÀ_dŸs_124578
 0x10028db

	)

2373 
	#XK_bøûÀ_dŸs_34578
 0x10028d¯

	)

2374 
	#XK_bøûÀ_dŸs_134578
 0x10028dd

	)

2375 
	#XK_bøûÀ_dŸs_234578
 0x10028dê

	)

2376 
	#XK_bøûÀ_dŸs_1234578
 0x10028d‡

	)

2377 
	#XK_bøûÀ_dŸs_678
 0x10028e0

	)

2378 
	#XK_bøûÀ_dŸs_1678
 0x10028e1

	)

2379 
	#XK_bøûÀ_dŸs_2678
 0x10028e2

	)

2380 
	#XK_bøûÀ_dŸs_12678
 0x10028e3

	)

2381 
	#XK_bøûÀ_dŸs_3678
 0x10028e4

	)

2382 
	#XK_bøûÀ_dŸs_13678
 0x10028e5

	)

2383 
	#XK_bøûÀ_dŸs_23678
 0x10028e6

	)

2384 
	#XK_bøûÀ_dŸs_123678
 0x10028e7

	)

2385 
	#XK_bøûÀ_dŸs_4678
 0x10028e8

	)

2386 
	#XK_bøûÀ_dŸs_14678
 0x10028e9

	)

2387 
	#XK_bøûÀ_dŸs_24678
 0x10028ó

	)

2388 
	#XK_bøûÀ_dŸs_124678
 0x10028eb

	)

2389 
	#XK_bøûÀ_dŸs_34678
 0x10028e¯

	)

2390 
	#XK_bøûÀ_dŸs_134678
 0x10028ed

	)

2391 
	#XK_bøûÀ_dŸs_234678
 0x10028ì

	)

2392 
	#XK_bøûÀ_dŸs_1234678
 0x10028e‡

	)

2393 
	#XK_bøûÀ_dŸs_5678
 0x10028f0

	)

2394 
	#XK_bøûÀ_dŸs_15678
 0x10028f1

	)

2395 
	#XK_bøûÀ_dŸs_25678
 0x10028f2

	)

2396 
	#XK_bøûÀ_dŸs_125678
 0x10028f3

	)

2397 
	#XK_bøûÀ_dŸs_35678
 0x10028f4

	)

2398 
	#XK_bøûÀ_dŸs_135678
 0x10028f5

	)

2399 
	#XK_bøûÀ_dŸs_235678
 0x10028f6

	)

2400 
	#XK_bøûÀ_dŸs_1235678
 0x10028f7

	)

2401 
	#XK_bøûÀ_dŸs_45678
 0x10028f8

	)

2402 
	#XK_bøûÀ_dŸs_145678
 0x10028f9

	)

2403 
	#XK_bøûÀ_dŸs_245678
 0x10028Á

	)

2404 
	#XK_bøûÀ_dŸs_1245678
 0x10028fb

	)

2405 
	#XK_bøûÀ_dŸs_345678
 0x10028f¯

	)

2406 
	#XK_bøûÀ_dŸs_1345678
 0x10028fd

	)

2407 
	#XK_bøûÀ_dŸs_2345678
 0x10028„

	)

2408 
	#XK_bøûÀ_dŸs_12345678
 0x10028f‡

	)

2416 #ifde‡
XK_SINHALA


2417 
	#XK_Söh_ng
 0x1000d82

	)

2418 
	#XK_Söh_h2
 0x1000d83

	)

2419 
	#XK_Söh_a
 0x1000d85

	)

2420 
	#XK_Söh_Ø
 0x1000d86

	)

2421 
	#XK_Söh_´
 0x1000d87

	)

2422 
	#XK_Söh_´e
 0x1000d88

	)

2423 
	#XK_Söh_i
 0x1000d89

	)

2424 
	#XK_Söh_ii
 0x1000d8®

	)

2425 
	#XK_Söh_u
 0x1000d8b

	)

2426 
	#XK_Söh_uu
 0x1000d8¯

	)

2427 
	#XK_Söh_ri
 0x1000d8d

	)

2428 
	#XK_Söh_rii
 0x1000d8ê

	)

2429 
	#XK_Söh_lu
 0x1000d8‡

	)

2430 
	#XK_Söh_luu
 0x1000d90

	)

2431 
	#XK_Söh_e
 0x1000d91

	)

2432 
	#XK_Söh_ì
 0x1000d92

	)

2433 
	#XK_Söh_ai
 0x1000d93

	)

2434 
	#XK_Söh_o
 0x1000d94

	)

2435 
	#XK_Söh_oo
 0x1000d95

	)

2436 
	#XK_Söh_au
 0x1000d96

	)

2437 
	#XK_Söh_ka
 0x1000d9®

	)

2438 
	#XK_Söh_kha
 0x1000d9b

	)

2439 
	#XK_Söh_ga
 0x1000d9¯

	)

2440 
	#XK_Söh_gha
 0x1000d9d

	)

2441 
	#XK_Söh_ng2
 0x1000d9ê

	)

2442 
	#XK_Söh_nga
 0x1000d9‡

	)

2443 
	#XK_Söh_ˇ
 0x1000da0

	)

2444 
	#XK_Söh_cha
 0x1000da1

	)

2445 
	#XK_Söh_ja
 0x1000da2

	)

2446 
	#XK_Söh_jha
 0x1000da3

	)

2447 
	#XK_Söh_nya
 0x1000da4

	)

2448 
	#XK_Söh_jnya
 0x1000da5

	)

2449 
	#XK_Söh_nja
 0x1000da6

	)

2450 
	#XK_Söh_âa
 0x1000da7

	)

2451 
	#XK_Söh_âha
 0x1000da8

	)

2452 
	#XK_Söh_dda
 0x1000da9

	)

2453 
	#XK_Söh_ddha
 0x1000dØ

	)

2454 
	#XK_Söh_¬a
 0x1000dab

	)

2455 
	#XK_Söh_ndda
 0x1000da¯

	)

2456 
	#XK_Söh_tha
 0x1000dad

	)

2457 
	#XK_Söh_thha
 0x1000d´

	)

2458 
	#XK_Söh_dha
 0x1000da‡

	)

2459 
	#XK_Söh_dhha
 0x1000db0

	)

2460 
	#XK_Söh_«
 0x1000db1

	)

2461 
	#XK_Söh_ndha
 0x1000db3

	)

2462 
	#XK_Söh_∑
 0x1000db4

	)

2463 
	#XK_Söh_pha
 0x1000db5

	)

2464 
	#XK_Söh_ba
 0x1000db6

	)

2465 
	#XK_Söh_bha
 0x1000db7

	)

2466 
	#XK_Söh_ma
 0x1000db8

	)

2467 
	#XK_Söh_mba
 0x1000db9

	)

2468 
	#XK_Söh_ya
 0x1000db®

	)

2469 
	#XK_Söh_ø
 0x1000dbb

	)

2470 
	#XK_Söh_œ
 0x1000dbd

	)

2471 
	#XK_Söh_va
 0x1000dc0

	)

2472 
	#XK_Söh_sha
 0x1000dc1

	)

2473 
	#XK_Söh_ssha
 0x1000dc2

	)

2474 
	#XK_Söh_ß
 0x1000dc3

	)

2475 
	#XK_Söh_ha
 0x1000dc4

	)

2476 
	#XK_Söh_Œa
 0x1000dc5

	)

2477 
	#XK_Söh_Á
 0x1000dc6

	)

2478 
	#XK_Söh_Æ
 0x1000dˇ

	)

2479 
	#XK_Söh_Ø2
 0x1000dc‡

	)

2480 
	#XK_Söh_´2
 0x1000dd0

	)

2481 
	#XK_Söh_´e2
 0x1000dd1

	)

2482 
	#XK_Söh_i2
 0x1000dd2

	)

2483 
	#XK_Söh_ii2
 0x1000dd3

	)

2484 
	#XK_Söh_u2
 0x1000dd4

	)

2485 
	#XK_Söh_uu2
 0x1000dd6

	)

2486 
	#XK_Söh_ru2
 0x1000dd8

	)

2487 
	#XK_Söh_e2
 0x1000dd9

	)

2488 
	#XK_Söh_ì2
 0x1000dd®

	)

2489 
	#XK_Söh_ai2
 0x1000ddb

	)

2490 
	#XK_Söh_o2
 0x1000dd¯

	)

2491 
	#XK_Söh_oo2
 0x1000ddd

	)

2492 
	#XK_Söh_au2
 0x1000ddê

	)

2493 
	#XK_Söh_lu2
 0x1000dd‡

	)

2494 
	#XK_Söh_ruu2
 0x1000df2

	)

2495 
	#XK_Söh_luu2
 0x1000df3

	)

2496 
	#XK_Söh_kunddÆiya
 0x1000df4

	)

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/alsa/asoundef.h

28 #i‚de‡
__ALSA_ASOUNDEF_H


29 
	#__ALSA_ASOUNDEF_H


	)

31 #ifde‡
__˝lu•lus


41 
	#IEC958_AES0_PROFESSIONAL
 (1<<0Ë

	)

42 
	#IEC958_AES0_NONAUDIO
 (1<<1Ë

	)

43 
	#IEC958_AES0_PRO_EMPHASIS
 (7<<2Ë

	)

44 
	#IEC958_AES0_PRO_EMPHASIS_NOTID
 (0<<2Ë

	)

45 
	#IEC958_AES0_PRO_EMPHASIS_NONE
 (1<<2Ë

	)

46 
	#IEC958_AES0_PRO_EMPHASIS_5015
 (3<<2Ë

	)

47 
	#IEC958_AES0_PRO_EMPHASIS_CCITT
 (7<<2Ë

	)

48 
	#IEC958_AES0_PRO_FREQ_UNLOCKED
 (1<<5Ë

	)

49 
	#IEC958_AES0_PRO_FS
 (3<<6Ë

	)

50 
	#IEC958_AES0_PRO_FS_NOTID
 (0<<6Ë

	)

51 
	#IEC958_AES0_PRO_FS_44100
 (1<<6Ë

	)

52 
	#IEC958_AES0_PRO_FS_48000
 (2<<6Ë

	)

53 
	#IEC958_AES0_PRO_FS_32000
 (3<<6Ë

	)

54 
	#IEC958_AES0_CON_NOT_COPYRIGHT
 (1<<2Ë

	)

55 
	#IEC958_AES0_CON_EMPHASIS
 (7<<3Ë

	)

56 
	#IEC958_AES0_CON_EMPHASIS_NONE
 (0<<3Ë

	)

57 
	#IEC958_AES0_CON_EMPHASIS_5015
 (1<<3Ë

	)

58 
	#IEC958_AES0_CON_MODE
 (3<<6Ë

	)

59 
	#IEC958_AES1_PRO_MODE
 (15<<0Ë

	)

60 
	#IEC958_AES1_PRO_MODE_NOTID
 (0<<0Ë

	)

61 
	#IEC958_AES1_PRO_MODE_STEREOPHONIC
 (2<<0Ë

	)

62 
	#IEC958_AES1_PRO_MODE_SINGLE
 (4<<0Ë

	)

63 
	#IEC958_AES1_PRO_MODE_TWO
 (8<<0Ë

	)

64 
	#IEC958_AES1_PRO_MODE_PRIMARY
 (12<<0Ë

	)

65 
	#IEC958_AES1_PRO_MODE_BYTE3
 (15<<0Ë

	)

66 
	#IEC958_AES1_PRO_USERBITS
 (15<<4Ë

	)

67 
	#IEC958_AES1_PRO_USERBITS_NOTID
 (0<<4Ë

	)

68 
	#IEC958_AES1_PRO_USERBITS_192
 (8<<4Ë

	)

69 
	#IEC958_AES1_PRO_USERBITS_UDEF
 (12<<4Ë

	)

70 
	#IEC958_AES1_CON_CATEGORY
 0x7‡

	)

71 
	#IEC958_AES1_CON_GENERAL
 0x00

	)

72 
	#IEC958_AES1_CON_LASEROPT_MASK
 0x07

	)

73 
	#IEC958_AES1_CON_LASEROPT_ID
 0x01

	)

74 
	#IEC958_AES1_CON_IEC908_CD
 (
IEC958_AES1_CON_LASEROPT_ID
|0x00Ë

	)

75 
	#IEC958_AES1_CON_NON_IEC908_CD
 (
IEC958_AES1_CON_LASEROPT_ID
|0x08Ë

	)

76 
	#IEC958_AES1_CON_MINI_DISC
 (
IEC958_AES1_CON_LASEROPT_ID
|0x48Ë

	)

77 
	#IEC958_AES1_CON_DVD
 (
IEC958_AES1_CON_LASEROPT_ID
|0x18Ë

	)

78 
	#IEC958_AES1_CON_LASTEROPT_OTHER
 (
IEC958_AES1_CON_LASEROPT_ID
|0x78Ë

	)

79 
	#IEC958_AES1_CON_DIGDIGCONV_MASK
 0x07

	)

80 
	#IEC958_AES1_CON_DIGDIGCONV_ID
 0x02

	)

81 
	#IEC958_AES1_CON_PCM_CODER
 (
IEC958_AES1_CON_DIGDIGCONV_ID
|0x00Ë

	)

82 
	#IEC958_AES1_CON_MIXER
 (
IEC958_AES1_CON_DIGDIGCONV_ID
|0x10Ë

	)

83 
	#IEC958_AES1_CON_RATE_CONVERTER
 (
IEC958_AES1_CON_DIGDIGCONV_ID
|0x18Ë

	)

84 
	#IEC958_AES1_CON_SAMPLER
 (
IEC958_AES1_CON_DIGDIGCONV_ID
|0x20Ë

	)

85 
	#IEC958_AES1_CON_DSP
 (
IEC958_AES1_CON_DIGDIGCONV_ID
|0x28Ë

	)

86 
	#IEC958_AES1_CON_DIGDIGCONV_OTHER
 (
IEC958_AES1_CON_DIGDIGCONV_ID
|0x78Ë

	)

87 
	#IEC958_AES1_CON_MAGNETIC_MASK
 0x07

	)

88 
	#IEC958_AES1_CON_MAGNETIC_ID
 0x03

	)

89 
	#IEC958_AES1_CON_DAT
 (
IEC958_AES1_CON_MAGNETIC_ID
|0x00Ë

	)

90 
	#IEC958_AES1_CON_VCR
 (
IEC958_AES1_CON_MAGNETIC_ID
|0x08Ë

	)

91 
	#IEC958_AES1_CON_DCC
 (
IEC958_AES1_CON_MAGNETIC_ID
|0x40Ë

	)

92 
	#IEC958_AES1_CON_MAGNETIC_DISC
 (
IEC958_AES1_CON_MAGNETIC_ID
|0x18Ë

	)

93 
	#IEC958_AES1_CON_MAGNETIC_OTHER
 (
IEC958_AES1_CON_MAGNETIC_ID
|0x78Ë

	)

94 
	#IEC958_AES1_CON_BROADCAST1_MASK
 0x07

	)

95 
	#IEC958_AES1_CON_BROADCAST1_ID
 0x04

	)

96 
	#IEC958_AES1_CON_DAB_JAPAN
 (
IEC958_AES1_CON_BROADCAST1_ID
|0x00Ë

	)

97 
	#IEC958_AES1_CON_DAB_EUROPE
 (
IEC958_AES1_CON_BROADCAST1_ID
|0x08Ë

	)

98 
	#IEC958_AES1_CON_DAB_USA
 (
IEC958_AES1_CON_BROADCAST1_ID
|0x60Ë

	)

99 
	#IEC958_AES1_CON_SOFTWARE
 (
IEC958_AES1_CON_BROADCAST1_ID
|0x40Ë

	)

100 
	#IEC958_AES1_CON_IEC62105
 (
IEC958_AES1_CON_BROADCAST1_ID
|0x20Ë

	)

101 
	#IEC958_AES1_CON_BROADCAST1_OTHER
 (
IEC958_AES1_CON_BROADCAST1_ID
|0x78Ë

	)

102 
	#IEC958_AES1_CON_BROADCAST2_MASK
 0x0‡

	)

103 
	#IEC958_AES1_CON_BROADCAST2_ID
 0x0ê

	)

104 
	#IEC958_AES1_CON_MUSICAL_MASK
 0x07

	)

105 
	#IEC958_AES1_CON_MUSICAL_ID
 0x05

	)

106 
	#IEC958_AES1_CON_SYNTHESIZER
 (
IEC958_AES1_CON_MUSICAL_ID
|0x00Ë

	)

107 
	#IEC958_AES1_CON_MICROPHONE
 (
IEC958_AES1_CON_MUSICAL_ID
|0x08Ë

	)

108 
	#IEC958_AES1_CON_MUSICAL_OTHER
 (
IEC958_AES1_CON_MUSICAL_ID
|0x78Ë

	)

109 
	#IEC958_AES1_CON_ADC_MASK
 0x1‡

	)

110 
	#IEC958_AES1_CON_ADC_ID
 0x06

	)

111 
	#IEC958_AES1_CON_ADC
 (
IEC958_AES1_CON_ADC_ID
|0x00Ë

	)

112 
	#IEC958_AES1_CON_ADC_OTHER
 (
IEC958_AES1_CON_ADC_ID
|0x60Ë

	)

113 
	#IEC958_AES1_CON_ADC_COPYRIGHT_MASK
 0x1‡

	)

114 
	#IEC958_AES1_CON_ADC_COPYRIGHT_ID
 0x16

	)

115 
	#IEC958_AES1_CON_ADC_COPYRIGHT
 (
IEC958_AES1_CON_ADC_COPYRIGHT_ID
|0x00Ë

	)

116 
	#IEC958_AES1_CON_ADC_COPYRIGHT_OTHER
 (
IEC958_AES1_CON_ADC_COPYRIGHT_ID
|0x60Ë

	)

117 
	#IEC958_AES1_CON_SOLIDMEM_MASK
 0x0‡

	)

118 
	#IEC958_AES1_CON_SOLIDMEM_ID
 0x08

	)

119 
	#IEC958_AES1_CON_SOLIDMEM_DIGITAL_RECORDER_PLAYER
 (
IEC958_AES1_CON_SOLIDMEM_ID
|0x00Ë

	)

120 
	#IEC958_AES1_CON_SOLIDMEM_OTHER
 (
IEC958_AES1_CON_SOLIDMEM_ID
|0x70Ë

	)

121 
	#IEC958_AES1_CON_EXPERIMENTAL
 0x40

	)

122 
	#IEC958_AES1_CON_ORIGINAL
 (1<<7Ë

	)

123 
	#IEC958_AES2_PRO_SBITS
 (7<<0Ë

	)

124 
	#IEC958_AES2_PRO_SBITS_20
 (2<<0Ë

	)

125 
	#IEC958_AES2_PRO_SBITS_24
 (4<<0Ë

	)

126 
	#IEC958_AES2_PRO_SBITS_UDEF
 (6<<0Ë

	)

127 
	#IEC958_AES2_PRO_WORDLEN
 (7<<3Ë

	)

128 
	#IEC958_AES2_PRO_WORDLEN_NOTID
 (0<<3Ë

	)

129 
	#IEC958_AES2_PRO_WORDLEN_22_18
 (2<<3Ë

	)

130 
	#IEC958_AES2_PRO_WORDLEN_23_19
 (4<<3Ë

	)

131 
	#IEC958_AES2_PRO_WORDLEN_24_20
 (5<<3Ë

	)

132 
	#IEC958_AES2_PRO_WORDLEN_20_16
 (6<<3Ë

	)

133 
	#IEC958_AES2_CON_SOURCE
 (15<<0Ë

	)

134 
	#IEC958_AES2_CON_SOURCE_UNSPEC
 (0<<0Ë

	)

135 
	#IEC958_AES2_CON_CHANNEL
 (15<<4Ë

	)

136 
	#IEC958_AES2_CON_CHANNEL_UNSPEC
 (0<<4Ë

	)

137 
	#IEC958_AES3_CON_FS
 (15<<0Ë

	)

138 
	#IEC958_AES3_CON_FS_44100
 (0<<0Ë

	)

139 
	#IEC958_AES3_CON_FS_NOTID
 (1<<0Ë

	)

140 
	#IEC958_AES3_CON_FS_48000
 (2<<0Ë

	)

141 
	#IEC958_AES3_CON_FS_32000
 (3<<0Ë

	)

142 
	#IEC958_AES3_CON_FS_22050
 (4<<0Ë

	)

143 
	#IEC958_AES3_CON_FS_24000
 (6<<0Ë

	)

144 
	#IEC958_AES3_CON_FS_88200
 (8<<0Ë

	)

145 
	#IEC958_AES3_CON_FS_768000
 (9<<0Ë

	)

146 
	#IEC958_AES3_CON_FS_96000
 (10<<0Ë

	)

147 
	#IEC958_AES3_CON_FS_176400
 (12<<0Ë

	)

148 
	#IEC958_AES3_CON_FS_192000
 (14<<0Ë

	)

149 
	#IEC958_AES3_CON_CLOCK
 (3<<4Ë

	)

150 
	#IEC958_AES3_CON_CLOCK_1000PPM
 (0<<4Ë

	)

151 
	#IEC958_AES3_CON_CLOCK_50PPM
 (1<<4Ë

	)

152 
	#IEC958_AES3_CON_CLOCK_VARIABLE
 (2<<4Ë

	)

153 
	#IEC958_AES4_CON_MAX_WORDLEN_24
 (1<<0Ë

	)

154 
	#IEC958_AES4_CON_WORDLEN
 (7<<1Ë

	)

155 
	#IEC958_AES4_CON_WORDLEN_NOTID
 (0<<1Ë

	)

156 
	#IEC958_AES4_CON_WORDLEN_20_16
 (1<<1Ë

	)

157 
	#IEC958_AES4_CON_WORDLEN_22_18
 (2<<1Ë

	)

158 
	#IEC958_AES4_CON_WORDLEN_23_19
 (4<<1Ë

	)

159 
	#IEC958_AES4_CON_WORDLEN_24_20
 (5<<1Ë

	)

160 
	#IEC958_AES4_CON_WORDLEN_21_17
 (6<<1Ë

	)

161 
	#IEC958_AES4_CON_ORIGFS
 (15<<4Ë

	)

162 
	#IEC958_AES4_CON_ORIGFS_NOTID
 (0<<4Ë

	)

163 
	#IEC958_AES4_CON_ORIGFS_192000
 (1<<4Ë

	)

164 
	#IEC958_AES4_CON_ORIGFS_12000
 (2<<4Ë

	)

165 
	#IEC958_AES4_CON_ORIGFS_176400
 (3<<4Ë

	)

166 
	#IEC958_AES4_CON_ORIGFS_96000
 (5<<4Ë

	)

167 
	#IEC958_AES4_CON_ORIGFS_8000
 (6<<4Ë

	)

168 
	#IEC958_AES4_CON_ORIGFS_88200
 (7<<4Ë

	)

169 
	#IEC958_AES4_CON_ORIGFS_16000
 (8<<4Ë

	)

170 
	#IEC958_AES4_CON_ORIGFS_24000
 (9<<4Ë

	)

171 
	#IEC958_AES4_CON_ORIGFS_11025
 (10<<4Ë

	)

172 
	#IEC958_AES4_CON_ORIGFS_22050
 (11<<4Ë

	)

173 
	#IEC958_AES4_CON_ORIGFS_32000
 (12<<4Ë

	)

174 
	#IEC958_AES4_CON_ORIGFS_48000
 (13<<4Ë

	)

175 
	#IEC958_AES4_CON_ORIGFS_44100
 (15<<4Ë

	)

176 
	#IEC958_AES5_CON_CGMSA
 (3<<0Ë

	)

177 
	#IEC958_AES5_CON_CGMSA_COPYFREELY
 (0<<0Ë

	)

178 
	#IEC958_AES5_CON_CGMSA_COPYONCE
 (1<<0Ë

	)

179 
	#IEC958_AES5_CON_CGMSA_COPYNOMORE
 (2<<0Ë

	)

180 
	#IEC958_AES5_CON_CGMSA_COPYNEVER
 (3<<0Ë

	)

190 
	#MIDI_CHANNELS
 16

	)

191 
	#MIDI_GM_DRUM_CHANNEL
 (10-1Ë

	)

199 
	#MIDI_CMD_NOTE_OFF
 0x80

	)

200 
	#MIDI_CMD_NOTE_ON
 0x90

	)

201 
	#MIDI_CMD_NOTE_PRESSURE
 0xa0

	)

202 
	#MIDI_CMD_CONTROL
 0xb0

	)

203 
	#MIDI_CMD_PGM_CHANGE
 0xc0

	)

204 
	#MIDI_CMD_CHANNEL_PRESSURE
 0xd0

	)

205 
	#MIDI_CMD_BENDER
 0xe0

	)

207 
	#MIDI_CMD_COMMON_SYSEX
 0xf0

	)

208 
	#MIDI_CMD_COMMON_MTC_QUARTER
 0xf1

	)

209 
	#MIDI_CMD_COMMON_SONG_POS
 0xf2

	)

210 
	#MIDI_CMD_COMMON_SONG_SELECT
 0xf3

	)

211 
	#MIDI_CMD_COMMON_TUNE_REQUEST
 0xf6

	)

212 
	#MIDI_CMD_COMMON_SYSEX_END
 0xf7

	)

213 
	#MIDI_CMD_COMMON_CLOCK
 0xf8

	)

214 
	#MIDI_CMD_COMMON_START
 0xÁ

	)

215 
	#MIDI_CMD_COMMON_CONTINUE
 0xfb

	)

216 
	#MIDI_CMD_COMMON_STOP
 0xf¯

	)

217 
	#MIDI_CMD_COMMON_SENSING
 0x„

	)

218 
	#MIDI_CMD_COMMON_RESET
 0xf‡

	)

228 
	#MIDI_CTL_MSB_BANK
 0x00

	)

229 
	#MIDI_CTL_MSB_MODWHEEL
 0x01

	)

230 
	#MIDI_CTL_MSB_BREATH
 0x02

	)

231 
	#MIDI_CTL_MSB_FOOT
 0x04

	)

232 
	#MIDI_CTL_MSB_PORTAMENTO_TIME
 0x05

	)

233 
	#MIDI_CTL_MSB_DATA_ENTRY
 0x06

	)

234 
	#MIDI_CTL_MSB_MAIN_VOLUME
 0x07

	)

235 
	#MIDI_CTL_MSB_BALANCE
 0x08

	)

236 
	#MIDI_CTL_MSB_PAN
 0x0®

	)

237 
	#MIDI_CTL_MSB_EXPRESSION
 0x0b

	)

238 
	#MIDI_CTL_MSB_EFFECT1
 0x0¯

	)

239 
	#MIDI_CTL_MSB_EFFECT2
 0x0d

	)

240 
	#MIDI_CTL_MSB_GENERAL_PURPOSE1
 0x10

	)

241 
	#MIDI_CTL_MSB_GENERAL_PURPOSE2
 0x11

	)

242 
	#MIDI_CTL_MSB_GENERAL_PURPOSE3
 0x12

	)

243 
	#MIDI_CTL_MSB_GENERAL_PURPOSE4
 0x13

	)

244 
	#MIDI_CTL_LSB_BANK
 0x20

	)

245 
	#MIDI_CTL_LSB_MODWHEEL
 0x21

	)

246 
	#MIDI_CTL_LSB_BREATH
 0x22

	)

247 
	#MIDI_CTL_LSB_FOOT
 0x24

	)

248 
	#MIDI_CTL_LSB_PORTAMENTO_TIME
 0x25

	)

249 
	#MIDI_CTL_LSB_DATA_ENTRY
 0x26

	)

250 
	#MIDI_CTL_LSB_MAIN_VOLUME
 0x27

	)

251 
	#MIDI_CTL_LSB_BALANCE
 0x28

	)

252 
	#MIDI_CTL_LSB_PAN
 0x2®

	)

253 
	#MIDI_CTL_LSB_EXPRESSION
 0x2b

	)

254 
	#MIDI_CTL_LSB_EFFECT1
 0x2¯

	)

255 
	#MIDI_CTL_LSB_EFFECT2
 0x2d

	)

256 
	#MIDI_CTL_LSB_GENERAL_PURPOSE1
 0x30

	)

257 
	#MIDI_CTL_LSB_GENERAL_PURPOSE2
 0x31

	)

258 
	#MIDI_CTL_LSB_GENERAL_PURPOSE3
 0x32

	)

259 
	#MIDI_CTL_LSB_GENERAL_PURPOSE4
 0x33

	)

260 
	#MIDI_CTL_SUSTAIN
 0x40

	)

261 
	#MIDI_CTL_PORTAMENTO
 0x41

	)

262 
	#MIDI_CTL_SOSTENUTO
 0x42

	)

263 
	#MIDI_CTL_SUSTENUTO
 0x42

	)

264 
	#MIDI_CTL_SOFT_PEDAL
 0x43

	)

265 
	#MIDI_CTL_LEGATO_FOOTSWITCH
 0x44

	)

266 
	#MIDI_CTL_HOLD2
 0x45

	)

267 
	#MIDI_CTL_SC1_SOUND_VARIATION
 0x46

	)

268 
	#MIDI_CTL_SC2_TIMBRE
 0x47

	)

269 
	#MIDI_CTL_SC3_RELEASE_TIME
 0x48

	)

270 
	#MIDI_CTL_SC4_ATTACK_TIME
 0x49

	)

271 
	#MIDI_CTL_SC5_BRIGHTNESS
 0x4®

	)

272 
	#MIDI_CTL_SC6
 0x4b

	)

273 
	#MIDI_CTL_SC7
 0x4¯

	)

274 
	#MIDI_CTL_SC8
 0x4d

	)

275 
	#MIDI_CTL_SC9
 0x4ê

	)

276 
	#MIDI_CTL_SC10
 0x4‡

	)

277 
	#MIDI_CTL_GENERAL_PURPOSE5
 0x50

	)

278 
	#MIDI_CTL_GENERAL_PURPOSE6
 0x51

	)

279 
	#MIDI_CTL_GENERAL_PURPOSE7
 0x52

	)

280 
	#MIDI_CTL_GENERAL_PURPOSE8
 0x53

	)

281 
	#MIDI_CTL_PORTAMENTO_CONTROL
 0x54

	)

282 
	#MIDI_CTL_E1_REVERB_DEPTH
 0x5b

	)

283 
	#MIDI_CTL_E2_TREMOLO_DEPTH
 0x5¯

	)

284 
	#MIDI_CTL_E3_CHORUS_DEPTH
 0x5d

	)

285 
	#MIDI_CTL_E4_DETUNE_DEPTH
 0x5ê

	)

286 
	#MIDI_CTL_E5_PHASER_DEPTH
 0x5‡

	)

287 
	#MIDI_CTL_DATA_INCREMENT
 0x60

	)

288 
	#MIDI_CTL_DATA_DECREMENT
 0x61

	)

289 
	#MIDI_CTL_NONREG_PARM_NUM_LSB
 0x62

	)

290 
	#MIDI_CTL_NONREG_PARM_NUM_MSB
 0x63

	)

291 
	#MIDI_CTL_REGIST_PARM_NUM_LSB
 0x64

	)

292 
	#MIDI_CTL_REGIST_PARM_NUM_MSB
 0x65

	)

293 
	#MIDI_CTL_ALL_SOUNDS_OFF
 0x78

	)

294 
	#MIDI_CTL_RESET_CONTROLLERS
 0x79

	)

295 
	#MIDI_CTL_LOCAL_CONTROL_SWITCH
 0x7®

	)

296 
	#MIDI_CTL_ALL_NOTES_OFF
 0x7b

	)

297 
	#MIDI_CTL_OMNI_OFF
 0x7¯

	)

298 
	#MIDI_CTL_OMNI_ON
 0x7d

	)

299 
	#MIDI_CTL_MONO1
 0x7ê

	)

300 
	#MIDI_CTL_MONO2
 0x7‡

	)

306 #ifde‡
__˝lu•lus


	@/usr/include/alsa/conf.h

28 #i‚de‡
__ALSA_CONF_H


29 
	#__ALSA_CONF_H


	)

31 #ifde‡
__˝lu•lus


43 
	#SND_CONFIG_DLSYM_VERSION_EVALUATE
 
_dlsym_c⁄fig_evÆu©e_001


	)

45 
	#SND_CONFIG_DLSYM_VERSION_HOOK
 
_dlsym_c⁄fig_hook_001


	)

48 
	e_¢d_c⁄fig_ty≥
 {

50 
SND_CONFIG_TYPE_INTEGER
,

52 
SND_CONFIG_TYPE_INTEGER64
,

54 
SND_CONFIG_TYPE_REAL
,

56 
SND_CONFIG_TYPE_STRING
,

58 
SND_CONFIG_TYPE_POINTER
,

60 
SND_CONFIG_TYPE_COMPOUND
 = 1024

61 } 
	t¢d_c⁄fig_ty≥_t
;

69 
_¢d_c⁄fig
 
	t¢d_c⁄fig_t
;

77 
_¢d_c⁄fig_ôî©‹
 *
	t¢d_c⁄fig_ôî©‹_t
;

83 
_¢d_c⁄fig_upd©e
 
	t¢d_c⁄fig_upd©e_t
;

85 
¢d_c⁄fig_t
 *
¢d_c⁄fig
;

87 
¢d_c⁄fig_t›
(
¢d_c⁄fig_t
 **
c⁄fig
);

89 
¢d_c⁄fig_lﬂd
(
¢d_c⁄fig_t
 *
c⁄fig
, 
¢d_öput_t
 *
ö
);

90 
¢d_c⁄fig_lﬂd_ovîride
(
¢d_c⁄fig_t
 *
c⁄fig
, 
¢d_öput_t
 *
ö
);

91 
¢d_c⁄fig_ßve
(
¢d_c⁄fig_t
 *
c⁄fig
, 
¢d_ouçut_t
 *
out
);

92 
¢d_c⁄fig_upd©e
();

93 
¢d_c⁄fig_upd©e_r
(
¢d_c⁄fig_t
 **
t›
, 
¢d_c⁄fig_upd©e_t
 **
upd©e
, c⁄° *
∑th
);

94 
¢d_c⁄fig_upd©e_‰ì
(
¢d_c⁄fig_upd©e_t
 *
upd©e
);

95 
¢d_c⁄fig_upd©e_‰ì_globÆ
();

97 
¢d_c⁄fig_£¨ch
(
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° *
key
,

98 
¢d_c⁄fig_t
 **
ªsu…
);

99 
¢d_c⁄fig_£¨chv
(
¢d_c⁄fig_t
 *
c⁄fig
,

100 
¢d_c⁄fig_t
 **
ªsu…
, ...);

101 
¢d_c⁄fig_£¨ch_deföôi⁄
(
¢d_c⁄fig_t
 *
c⁄fig
,

102 c⁄° *
ba£
, c⁄° *
key
,

103 
¢d_c⁄fig_t
 **
ªsu…
);

105 
¢d_c⁄fig_ex∑nd
(
¢d_c⁄fig_t
 *
c⁄fig
, snd_c⁄fig_à*
roŸ
,

106 c⁄° *
¨gs
, 
¢d_c⁄fig_t
 *
¥iv©e_d©a
,

107 
¢d_c⁄fig_t
 **
ªsu…
);

108 
¢d_c⁄fig_evÆu©e
(
¢d_c⁄fig_t
 *
c⁄fig
, snd_c⁄fig_à*
roŸ
,

109 
¢d_c⁄fig_t
 *
¥iv©e_d©a
, snd_c⁄fig_à**
ªsu…
);

111 
¢d_c⁄fig_add
(
¢d_c⁄fig_t
 *
c⁄fig
, snd_c⁄fig_à*
Àaf
);

112 
¢d_c⁄fig_dñëe
(
¢d_c⁄fig_t
 *
c⁄fig
);

113 
¢d_c⁄fig_dñëe_compound_membîs
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
);

114 
¢d_c⁄fig_c›y
(
¢d_c⁄fig_t
 **
d°
, snd_c⁄fig_à*
§c
);

116 
¢d_c⁄fig_make
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
,

117 
¢d_c⁄fig_ty≥_t
 
ty≥
);

118 
¢d_c⁄fig_make_öãgî
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
);

119 
¢d_c⁄fig_make_öãgî64
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
);

120 
¢d_c⁄fig_make_ªÆ
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
);

121 
¢d_c⁄fig_make_°rög
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
);

122 
¢d_c⁄fig_make_poöãr
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
);

123 
¢d_c⁄fig_make_compound
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
, 
joö
);

125 
¢d_c⁄fig_imake_öãgî
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
, c⁄° 
vÆue
);

126 
¢d_c⁄fig_imake_öãgî64
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
, c⁄° 
vÆue
);

127 
¢d_c⁄fig_imake_ªÆ
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
, c⁄° 
vÆue
);

128 
¢d_c⁄fig_imake_°rög
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
, c⁄° *
ascii
);

129 
¢d_c⁄fig_imake_poöãr
(
¢d_c⁄fig_t
 **
c⁄fig
, c⁄° *
key
, c⁄° *
±r
);

131 
¢d_c⁄fig_ty≥_t
 
¢d_c⁄fig_gë_ty≥
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
);

133 
¢d_c⁄fig_£t_id
(
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° *
id
);

134 
¢d_c⁄fig_£t_öãgî
(
¢d_c⁄fig_t
 *
c⁄fig
, 
vÆue
);

135 
¢d_c⁄fig_£t_öãgî64
(
¢d_c⁄fig_t
 *
c⁄fig
, 
vÆue
);

136 
¢d_c⁄fig_£t_ªÆ
(
¢d_c⁄fig_t
 *
c⁄fig
, 
vÆue
);

137 
¢d_c⁄fig_£t_°rög
(
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° *
vÆue
);

138 
¢d_c⁄fig_£t_ascii
(
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° *
ascii
);

139 
¢d_c⁄fig_£t_poöãr
(
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° *
±r
);

140 
¢d_c⁄fig_gë_id
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° **
vÆue
);

141 
¢d_c⁄fig_gë_öãgî
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, *
vÆue
);

142 
¢d_c⁄fig_gë_öãgî64
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, *
vÆue
);

143 
¢d_c⁄fig_gë_ªÆ
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, *
vÆue
);

144 
¢d_c⁄fig_gë_úól
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, *
vÆue
);

145 
¢d_c⁄fig_gë_°rög
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° **
vÆue
);

146 
¢d_c⁄fig_gë_ascii
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, **
vÆue
);

147 
¢d_c⁄fig_gë_poöãr
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° **
vÆue
);

148 
¢d_c⁄fig_ã°_id
(c⁄° 
¢d_c⁄fig_t
 *
c⁄fig
, c⁄° *
id
);

150 
¢d_c⁄fig_ôî©‹_t
 
¢d_c⁄fig_ôî©‹_fú°
(c⁄° 
¢d_c⁄fig_t
 *
node
);

151 
¢d_c⁄fig_ôî©‹_t
 
¢d_c⁄fig_ôî©‹_√xt
(c⁄° snd_c⁄fig_ôî©‹_à
ôî©‹
);

152 
¢d_c⁄fig_ôî©‹_t
 
¢d_c⁄fig_ôî©‹_íd
(c⁄° 
¢d_c⁄fig_t
 *
node
);

153 
¢d_c⁄fig_t
 *
¢d_c⁄fig_ôî©‹_íåy
(c⁄° 
¢d_c⁄fig_ôî©‹_t
 
ôî©‹
);

172 
	#¢d_c⁄fig_f‹_óch
(
pos
, 
√xt
, 
node
) \

173 
pos
 = 
	`¢d_c⁄fig_ôî©‹_fú°
(
node
), 
√xt
 = 
	`¢d_c⁄fig_ôî©‹_√xt
’os);Öo†!
	`¢d_c⁄fig_ôî©‹_íd
“ode);Öo†√xt,Çexà¢d_c⁄fig_ôî©‹_√xt’os))

	)

177 
¢d_c⁄fig_gë_boﬁ_ascii
(c⁄° *
ascii
);

178 
¢d_c⁄fig_gë_boﬁ
(c⁄° 
¢d_c⁄fig_t
 *
c⁄f
);

179 
¢d_c⁄fig_gë_˘l_iÁ˚_ascii
(c⁄° *
ascii
);

180 
¢d_c⁄fig_gë_˘l_iÁ˚
(c⁄° 
¢d_c⁄fig_t
 *
c⁄f
);

187 
¢d_dev«me
 
	t¢d_dev«me_t
;

192 
	s¢d_dev«me
 {

193 *
	g«me
;

194 *
	gcommít
;

195 
¢d_dev«me_t
 *
	g√xt
;

198 
¢d_«mes_li°
(c⁄° *
iÁ˚
, 
¢d_dev«me_t
 **
li°
);

199 
¢d_«mes_li°_‰ì
(
¢d_dev«me_t
 *
li°
);

203 #ifde‡
__˝lu•lus


	@/usr/include/alsa/control.h

28 #i‚de‡
__ALSA_CONTROL_H


29 
	#__ALSA_CONTROL_H


	)

31 #ifde‡
__˝lu•lus


43 
	#SND_CONTROL_DLSYM_VERSION
 
_dlsym_c⁄åﬁ_001


	)

46 
	s¢d_´s_õc958
 {

47 
°©us
[24];

48 
subcode
[147];

49 
∑d
;

50 
dig_sub‰ame
[4];

51 } 
	t¢d_´s_õc958_t
;

54 
_¢d_˘l_ˇrd_öfo
 
	t¢d_˘l_ˇrd_öfo_t
;

57 
_¢d_˘l_ñem_id
 
	t¢d_˘l_ñem_id_t
;

60 
_¢d_˘l_ñem_li°
 
	t¢d_˘l_ñem_li°_t
;

63 
_¢d_˘l_ñem_öfo
 
	t¢d_˘l_ñem_öfo_t
;

66 
_¢d_˘l_ñem_vÆue
 
	t¢d_˘l_ñem_vÆue_t
;

69 
_¢d_˘l_evít
 
	t¢d_˘l_evít_t
;

72 
	e_¢d_˘l_ñem_ty≥
 {

74 
SND_CTL_ELEM_TYPE_NONE
 = 0,

76 
SND_CTL_ELEM_TYPE_BOOLEAN
,

78 
SND_CTL_ELEM_TYPE_INTEGER
,

80 
SND_CTL_ELEM_TYPE_ENUMERATED
,

82 
SND_CTL_ELEM_TYPE_BYTES
,

84 
SND_CTL_ELEM_TYPE_IEC958
,

86 
SND_CTL_ELEM_TYPE_INTEGER64
,

87 
SND_CTL_ELEM_TYPE_LAST
 = 
SND_CTL_ELEM_TYPE_INTEGER64


88 } 
	t¢d_˘l_ñem_ty≥_t
;

91 
	e_¢d_˘l_ñem_iÁ˚
 {

93 
SND_CTL_ELEM_IFACE_CARD
 = 0,

95 
SND_CTL_ELEM_IFACE_HWDEP
,

97 
SND_CTL_ELEM_IFACE_MIXER
,

99 
SND_CTL_ELEM_IFACE_PCM
,

101 
SND_CTL_ELEM_IFACE_RAWMIDI
,

103 
SND_CTL_ELEM_IFACE_TIMER
,

105 
SND_CTL_ELEM_IFACE_SEQUENCER
,

106 
SND_CTL_ELEM_IFACE_LAST
 = 
SND_CTL_ELEM_IFACE_SEQUENCER


107 } 
	t¢d_˘l_ñem_iÁ˚_t
;

110 
	e_¢d_˘l_evít_ty≥
 {

112 
SND_CTL_EVENT_ELEM
 = 0,

113 
SND_CTL_EVENT_LAST
 = 
SND_CTL_EVENT_ELEM


114 }
	t¢d_˘l_evít_ty≥_t
;

118 
	#SND_CTL_EVENT_MASK_REMOVE
 (~0U)

	)

120 
	#SND_CTL_EVENT_MASK_VALUE
 (1<<0)

	)

122 
	#SND_CTL_EVENT_MASK_INFO
 (1<<1)

	)

124 
	#SND_CTL_EVENT_MASK_ADD
 (1<<2)

	)

126 
	#SND_CTL_EVENT_MASK_TLV
 (1<<3)

	)

129 
	#SND_CTL_NAME_NONE
 ""

	)

131 
	#SND_CTL_NAME_PLAYBACK
 "Pœyback "

	)

133 
	#SND_CTL_NAME_CAPTURE
 "C≠tuª "

	)

136 
	#SND_CTL_NAME_IEC958_NONE
 ""

	)

138 
	#SND_CTL_NAME_IEC958_SWITCH
 "Swôch"

	)

140 
	#SND_CTL_NAME_IEC958_VOLUME
 "Vﬁume"

	)

142 
	#SND_CTL_NAME_IEC958_DEFAULT
 "DeÁu…"

	)

144 
	#SND_CTL_NAME_IEC958_MASK
 "Mask"

	)

146 
	#SND_CTL_NAME_IEC958_CON_MASK
 "C⁄ Mask"

	)

148 
	#SND_CTL_NAME_IEC958_PRO_MASK
 "PrÿMask"

	)

150 
	#SND_CTL_NAME_IEC958_PCM_STREAM
 "PCM Såóm"

	)

152 
	#SND_CTL_NAME_IEC958
(
ex∂
,
dúe˘i⁄
,
wh©
Ë"IEC958 "Éx∂ 
SND_CTL_NAME_
##dúe˘i⁄ 
SND_CTL_NAME_IEC958_
##
	)
what

155 
	#SND_CTL_POWER_MASK
 0xff00

	)

157 
	#SND_CTL_POWER_D0
 0x0000

	)

159 
	#SND_CTL_POWER_D1
 0x0100

	)

161 
	#SND_CTL_POWER_D2
 0x0200

	)

163 
	#SND_CTL_POWER_D3
 0x0300

	)

165 
	#SND_CTL_POWER_D3hŸ
 (
SND_CTL_POWER_D3
|0x0000)

	)

167 
	#SND_CTL_POWER_D3cﬁd
 (
SND_CTL_POWER_D3
|0x0001)

	)

170 
	#SND_CTL_TLVT_CONTAINER
 0x0000

	)

172 
	#SND_CTL_TLVT_DB_SCALE
 0x0001

	)

174 
	#SND_CTL_TLVT_DB_LINEAR
 0x0002

	)

176 
	#SND_CTL_TLVT_DB_RANGE
 0x0003

	)

178 
	#SND_CTL_TLVT_DB_MINMAX
 0x0004

	)

180 
	#SND_CTL_TLVT_DB_MINMAX_MUTE
 0x0005

	)

183 
	#SND_CTL_TLV_DB_GAIN_MUTE
 -9999999

	)

186 
	#SND_CTL_TLVT_CHMAP_FIXED
 0x00101

	)

188 
	#SND_CTL_TLVT_CHMAP_VAR
 0x00102

	)

190 
	#SND_CTL_TLVT_CHMAP_PAIRED
 0x00103

	)

193 
	e_¢d_˘l_ty≥
 {

195 
SND_CTL_TYPE_HW
,

197 
SND_CTL_TYPE_SHM
,

199 
SND_CTL_TYPE_INET
,

201 
SND_CTL_TYPE_EXT


202 } 
	t¢d_˘l_ty≥_t
;

205 
	#SND_CTL_NONBLOCK
 0x0001

	)

208 
	#SND_CTL_ASYNC
 0x0002

	)

211 
	#SND_CTL_READONLY
 0x0004

	)

214 
_¢d_˘l
 
	t¢d_˘l_t
;

217 
	#SND_SCTL_NOFREE
 0x0001

	)

220 
_¢d_s˘l
 
	t¢d_s˘l_t
;

222 
¢d_ˇrd_lﬂd
(
ˇrd
);

223 
¢d_ˇrd_√xt
(*
ˇrd
);

224 
¢d_ˇrd_gë_ödex
(c⁄° *
«me
);

225 
¢d_ˇrd_gë_«me
(
ˇrd
, **
«me
);

226 
¢d_ˇrd_gë_l⁄g«me
(
ˇrd
, **
«me
);

228 
¢d_devi˚_«me_höt
(
ˇrd
, c⁄° *
iÁ˚
, ***
höts
);

229 
¢d_devi˚_«me_‰ì_höt
(**
höts
);

230 *
¢d_devi˚_«me_gë_höt
(c⁄° *
höt
, c⁄° *
id
);

232 
¢d_˘l_›í
(
¢d_˘l_t
 **
˘l
, c⁄° *
«me
, 
mode
);

233 
¢d_˘l_›í_lc⁄f
(
¢d_˘l_t
 **
˘l
, c⁄° *
«me
, 
mode
, 
¢d_c⁄fig_t
 *
lc⁄f
);

234 
¢d_˘l_›í_ÁŒback
(
¢d_˘l_t
 **
˘l
, 
¢d_c⁄fig_t
 *
roŸ
, c⁄° *
«me
, c⁄° *
‹ig_«me
, 
mode
);

235 
¢d_˘l_˛o£
(
¢d_˘l_t
 *
˘l
);

236 
¢d_˘l_n⁄block
(
¢d_˘l_t
 *
˘l
, 
n⁄block
);

237 
__ölöe__
 
¢d_˘l_ab‹t
(
¢d_˘l_t
 *
˘l
Ë{  
¢d_˘l_n⁄block
(ctl, 2); }

238 
¢d_async_add_˘l_h™dÀr
(
¢d_async_h™dÀr_t
 **
h™dÀr
, 
¢d_˘l_t
 *
˘l
,

239 
¢d_async_ˇŒback_t
 
ˇŒback
, *
¥iv©e_d©a
);

240 
¢d_˘l_t
 *
¢d_async_h™dÀr_gë_˘l
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

241 
¢d_˘l_pﬁl_des¸ùt‹s_cou¡
(
¢d_˘l_t
 *
˘l
);

242 
¢d_˘l_pﬁl_des¸ùt‹s
(
¢d_˘l_t
 *
˘l
, 
pﬁlfd
 *
pfds
, 
•a˚
);

243 
¢d_˘l_pﬁl_des¸ùt‹s_ªvíts
(
¢d_˘l_t
 *
˘l
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

244 
¢d_˘l_subs¸ibe_evíts
(
¢d_˘l_t
 *
˘l
, 
subs¸ibe
);

245 
¢d_˘l_ˇrd_öfo
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ˇrd_öfo_t
 *
öfo
);

246 
¢d_˘l_ñem_li°
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_li°_t
 *
li°
);

247 
¢d_˘l_ñem_öfo
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_öfo_t
 *
öfo
);

248 
¢d_˘l_ñem_ªad
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_vÆue_t
 *
vÆue
);

249 
¢d_˘l_ñem_wrôe
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_vÆue_t
 *
vÆue
);

250 
¢d_˘l_ñem_lock
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_id_t
 *
id
);

251 
¢d_˘l_ñem_u∆ock
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_id_t
 *
id
);

252 
¢d_˘l_ñem_év_ªad
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
,

253 *
év
, 
év_size
);

254 
¢d_˘l_ñem_év_wrôe
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
,

255 c⁄° *
év
);

256 
¢d_˘l_ñem_év_comm™d
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
,

257 c⁄° *
év
);

258 #ifde‡
__ALSA_HWDEP_H


259 
¢d_˘l_hwdï_√xt_devi˚
(
¢d_˘l_t
 *
˘l
, * 
devi˚
);

260 
¢d_˘l_hwdï_öfo
(
¢d_˘l_t
 *
˘l
, 
¢d_hwdï_öfo_t
 * 
öfo
);

262 #ifde‡
__ALSA_PCM_H


263 
¢d_˘l_pcm_√xt_devi˚
(
¢d_˘l_t
 *
˘l
, *
devi˚
);

264 
¢d_˘l_pcm_öfo
(
¢d_˘l_t
 *
˘l
, 
¢d_pcm_öfo_t
 * 
öfo
);

265 
¢d_˘l_pcm_¥e„r_subdevi˚
(
¢d_˘l_t
 *
˘l
, 
subdev
);

267 #ifde‡
__ALSA_RAWMIDI_H


268 
¢d_˘l_øwmidi_√xt_devi˚
(
¢d_˘l_t
 *
˘l
, * 
devi˚
);

269 
¢d_˘l_øwmidi_öfo
(
¢d_˘l_t
 *
˘l
, 
¢d_øwmidi_öfo_t
 * 
öfo
);

270 
¢d_˘l_øwmidi_¥e„r_subdevi˚
(
¢d_˘l_t
 *
˘l
, 
subdev
);

272 
¢d_˘l_£t_powî_°©e
(
¢d_˘l_t
 *
˘l
, 
°©e
);

273 
¢d_˘l_gë_powî_°©e
(
¢d_˘l_t
 *
˘l
, *
°©e
);

275 
¢d_˘l_ªad
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_evít_t
 *
evít
);

276 
¢d_˘l_waô
(
¢d_˘l_t
 *
˘l
, 
timeout
);

277 c⁄° *
¢d_˘l_«me
(
¢d_˘l_t
 *
˘l
);

278 
¢d_˘l_ty≥_t
 
¢d_˘l_ty≥
(
¢d_˘l_t
 *
˘l
);

280 c⁄° *
¢d_˘l_ñem_ty≥_«me
(
¢d_˘l_ñem_ty≥_t
 
ty≥
);

281 c⁄° *
¢d_˘l_ñem_iÁ˚_«me
(
¢d_˘l_ñem_iÁ˚_t
 
iÁ˚
);

282 c⁄° *
¢d_˘l_evít_ty≥_«me
(
¢d_˘l_evít_ty≥_t
 
ty≥
);

284 
¢d_˘l_evít_ñem_gë_mask
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

285 
¢d_˘l_evít_ñem_gë_numid
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

286 
¢d_˘l_evít_ñem_gë_id
(c⁄° 
¢d_˘l_evít_t
 *
obj
, 
¢d_˘l_ñem_id_t
 *
±r
);

287 
¢d_˘l_ñem_iÁ˚_t
 
¢d_˘l_evít_ñem_gë_öãrÁ˚
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

288 
¢d_˘l_evít_ñem_gë_devi˚
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

289 
¢d_˘l_evít_ñem_gë_subdevi˚
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

290 c⁄° *
¢d_˘l_evít_ñem_gë_«me
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

291 
¢d_˘l_evít_ñem_gë_ödex
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

293 
¢d_˘l_ñem_li°_Æloc_•a˚
(
¢d_˘l_ñem_li°_t
 *
obj
, 
íåõs
);

294 
¢d_˘l_ñem_li°_‰ì_•a˚
(
¢d_˘l_ñem_li°_t
 *
obj
);

296 *
¢d_˘l_ascii_ñem_id_gë
(
¢d_˘l_ñem_id_t
 *
id
);

297 
¢d_˘l_ascii_ñem_id_∑r£
(
¢d_˘l_ñem_id_t
 *
d°
, c⁄° *
°r
);

298 
¢d_˘l_ascii_vÆue_∑r£
(
¢d_˘l_t
 *
h™dÀ
,

299 
¢d_˘l_ñem_vÆue_t
 *
d°
,

300 
¢d_˘l_ñem_öfo_t
 *
öfo
,

301 c⁄° *
vÆue
);

303 
size_t
 
¢d_˘l_ñem_id_sizeof
();

308 
	#¢d_˘l_ñem_id_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_˘l_ñem_id
)

	)

309 
¢d_˘l_ñem_id_mÆloc
(
¢d_˘l_ñem_id_t
 **
±r
);

310 
¢d_˘l_ñem_id_‰ì
(
¢d_˘l_ñem_id_t
 *
obj
);

311 
¢d_˘l_ñem_id_˛ór
(
¢d_˘l_ñem_id_t
 *
obj
);

312 
¢d_˘l_ñem_id_c›y
(
¢d_˘l_ñem_id_t
 *
d°
, c⁄° snd_˘l_ñem_id_à*
§c
);

313 
¢d_˘l_ñem_id_gë_numid
(c⁄° 
¢d_˘l_ñem_id_t
 *
obj
);

314 
¢d_˘l_ñem_iÁ˚_t
 
¢d_˘l_ñem_id_gë_öãrÁ˚
(c⁄° 
¢d_˘l_ñem_id_t
 *
obj
);

315 
¢d_˘l_ñem_id_gë_devi˚
(c⁄° 
¢d_˘l_ñem_id_t
 *
obj
);

316 
¢d_˘l_ñem_id_gë_subdevi˚
(c⁄° 
¢d_˘l_ñem_id_t
 *
obj
);

317 c⁄° *
¢d_˘l_ñem_id_gë_«me
(c⁄° 
¢d_˘l_ñem_id_t
 *
obj
);

318 
¢d_˘l_ñem_id_gë_ödex
(c⁄° 
¢d_˘l_ñem_id_t
 *
obj
);

319 
¢d_˘l_ñem_id_£t_numid
(
¢d_˘l_ñem_id_t
 *
obj
, 
vÆ
);

320 
¢d_˘l_ñem_id_£t_öãrÁ˚
(
¢d_˘l_ñem_id_t
 *
obj
, 
¢d_˘l_ñem_iÁ˚_t
 
vÆ
);

321 
¢d_˘l_ñem_id_£t_devi˚
(
¢d_˘l_ñem_id_t
 *
obj
, 
vÆ
);

322 
¢d_˘l_ñem_id_£t_subdevi˚
(
¢d_˘l_ñem_id_t
 *
obj
, 
vÆ
);

323 
¢d_˘l_ñem_id_£t_«me
(
¢d_˘l_ñem_id_t
 *
obj
, c⁄° *
vÆ
);

324 
¢d_˘l_ñem_id_£t_ödex
(
¢d_˘l_ñem_id_t
 *
obj
, 
vÆ
);

326 
size_t
 
¢d_˘l_ˇrd_öfo_sizeof
();

331 
	#¢d_˘l_ˇrd_öfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_˘l_ˇrd_öfo
)

	)

332 
¢d_˘l_ˇrd_öfo_mÆloc
(
¢d_˘l_ˇrd_öfo_t
 **
±r
);

333 
¢d_˘l_ˇrd_öfo_‰ì
(
¢d_˘l_ˇrd_öfo_t
 *
obj
);

334 
¢d_˘l_ˇrd_öfo_˛ór
(
¢d_˘l_ˇrd_öfo_t
 *
obj
);

335 
¢d_˘l_ˇrd_öfo_c›y
(
¢d_˘l_ˇrd_öfo_t
 *
d°
, c⁄° snd_˘l_ˇrd_öfo_à*
§c
);

336 
¢d_˘l_ˇrd_öfo_gë_ˇrd
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

337 c⁄° *
¢d_˘l_ˇrd_öfo_gë_id
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

338 c⁄° *
¢d_˘l_ˇrd_öfo_gë_drivî
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

339 c⁄° *
¢d_˘l_ˇrd_öfo_gë_«me
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

340 c⁄° *
¢d_˘l_ˇrd_öfo_gë_l⁄g«me
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

341 c⁄° *
¢d_˘l_ˇrd_öfo_gë_mixî«me
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

342 c⁄° *
¢d_˘l_ˇrd_öfo_gë_comp⁄íts
(c⁄° 
¢d_˘l_ˇrd_öfo_t
 *
obj
);

344 
size_t
 
¢d_˘l_evít_sizeof
();

349 
	#¢d_˘l_evít_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_˘l_evít
)

	)

350 
¢d_˘l_evít_mÆloc
(
¢d_˘l_evít_t
 **
±r
);

351 
¢d_˘l_evít_‰ì
(
¢d_˘l_evít_t
 *
obj
);

352 
¢d_˘l_evít_˛ór
(
¢d_˘l_evít_t
 *
obj
);

353 
¢d_˘l_evít_c›y
(
¢d_˘l_evít_t
 *
d°
, c⁄° snd_˘l_evít_à*
§c
);

354 
¢d_˘l_evít_ty≥_t
 
¢d_˘l_evít_gë_ty≥
(c⁄° 
¢d_˘l_evít_t
 *
obj
);

356 
size_t
 
¢d_˘l_ñem_li°_sizeof
();

361 
	#¢d_˘l_ñem_li°_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_˘l_ñem_li°
)

	)

362 
¢d_˘l_ñem_li°_mÆloc
(
¢d_˘l_ñem_li°_t
 **
±r
);

363 
¢d_˘l_ñem_li°_‰ì
(
¢d_˘l_ñem_li°_t
 *
obj
);

364 
¢d_˘l_ñem_li°_˛ór
(
¢d_˘l_ñem_li°_t
 *
obj
);

365 
¢d_˘l_ñem_li°_c›y
(
¢d_˘l_ñem_li°_t
 *
d°
, c⁄° snd_˘l_ñem_li°_à*
§c
);

366 
¢d_˘l_ñem_li°_£t_off£t
(
¢d_˘l_ñem_li°_t
 *
obj
, 
vÆ
);

367 
¢d_˘l_ñem_li°_gë_u£d
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
);

368 
¢d_˘l_ñem_li°_gë_cou¡
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
);

369 
¢d_˘l_ñem_li°_gë_id
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
, 
¢d_˘l_ñem_id_t
 *
±r
);

370 
¢d_˘l_ñem_li°_gë_numid
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
);

371 
¢d_˘l_ñem_iÁ˚_t
 
¢d_˘l_ñem_li°_gë_öãrÁ˚
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
);

372 
¢d_˘l_ñem_li°_gë_devi˚
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
);

373 
¢d_˘l_ñem_li°_gë_subdevi˚
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
);

374 c⁄° *
¢d_˘l_ñem_li°_gë_«me
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
);

375 
¢d_˘l_ñem_li°_gë_ödex
(c⁄° 
¢d_˘l_ñem_li°_t
 *
obj
, 
idx
);

377 
size_t
 
¢d_˘l_ñem_öfo_sizeof
();

382 
	#¢d_˘l_ñem_öfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_˘l_ñem_öfo
)

	)

383 
¢d_˘l_ñem_öfo_mÆloc
(
¢d_˘l_ñem_öfo_t
 **
±r
);

384 
¢d_˘l_ñem_öfo_‰ì
(
¢d_˘l_ñem_öfo_t
 *
obj
);

385 
¢d_˘l_ñem_öfo_˛ór
(
¢d_˘l_ñem_öfo_t
 *
obj
);

386 
¢d_˘l_ñem_öfo_c›y
(
¢d_˘l_ñem_öfo_t
 *
d°
, c⁄° snd_˘l_ñem_öfo_à*
§c
);

387 
¢d_˘l_ñem_ty≥_t
 
¢d_˘l_ñem_öfo_gë_ty≥
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

388 
¢d_˘l_ñem_öfo_is_ªadabÀ
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

389 
¢d_˘l_ñem_öfo_is_wrôabÀ
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

390 
¢d_˘l_ñem_öfo_is_vﬁ©ûe
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

391 
¢d_˘l_ñem_öfo_is_öa˘ive
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

392 
¢d_˘l_ñem_öfo_is_locked
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

393 
¢d_˘l_ñem_öfo_is_év_ªadabÀ
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

394 
¢d_˘l_ñem_öfo_is_év_wrôabÀ
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

395 
¢d_˘l_ñem_öfo_is_év_comm™dabÀ
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

396 
¢d_˘l_ñem_öfo_is_ow√r
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

397 
¢d_˘l_ñem_öfo_is_u£r
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

398 
pid_t
 
¢d_˘l_ñem_öfo_gë_ow√r
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

399 
¢d_˘l_ñem_öfo_gë_cou¡
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

400 
¢d_˘l_ñem_öfo_gë_mö
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

401 
¢d_˘l_ñem_öfo_gë_max
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

402 
¢d_˘l_ñem_öfo_gë_°ï
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

403 
¢d_˘l_ñem_öfo_gë_mö64
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

404 
¢d_˘l_ñem_öfo_gë_max64
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

405 
¢d_˘l_ñem_öfo_gë_°ï64
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

406 
¢d_˘l_ñem_öfo_gë_ôems
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

407 
¢d_˘l_ñem_öfo_£t_ôem
(
¢d_˘l_ñem_öfo_t
 *
obj
, 
vÆ
);

408 c⁄° *
¢d_˘l_ñem_öfo_gë_ôem_«me
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

409 
¢d_˘l_ñem_öfo_gë_dimísi⁄s
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

410 
¢d_˘l_ñem_öfo_gë_dimísi⁄
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
, 
idx
);

411 
¢d_˘l_ñem_öfo_gë_id
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
, 
¢d_˘l_ñem_id_t
 *
±r
);

412 
¢d_˘l_ñem_öfo_gë_numid
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

413 
¢d_˘l_ñem_iÁ˚_t
 
¢d_˘l_ñem_öfo_gë_öãrÁ˚
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

414 
¢d_˘l_ñem_öfo_gë_devi˚
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

415 
¢d_˘l_ñem_öfo_gë_subdevi˚
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

416 c⁄° *
¢d_˘l_ñem_öfo_gë_«me
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

417 
¢d_˘l_ñem_öfo_gë_ödex
(c⁄° 
¢d_˘l_ñem_öfo_t
 *
obj
);

418 
¢d_˘l_ñem_öfo_£t_id
(
¢d_˘l_ñem_öfo_t
 *
obj
, c⁄° 
¢d_˘l_ñem_id_t
 *
±r
);

419 
¢d_˘l_ñem_öfo_£t_numid
(
¢d_˘l_ñem_öfo_t
 *
obj
, 
vÆ
);

420 
¢d_˘l_ñem_öfo_£t_öãrÁ˚
(
¢d_˘l_ñem_öfo_t
 *
obj
, 
¢d_˘l_ñem_iÁ˚_t
 
vÆ
);

421 
¢d_˘l_ñem_öfo_£t_devi˚
(
¢d_˘l_ñem_öfo_t
 *
obj
, 
vÆ
);

422 
¢d_˘l_ñem_öfo_£t_subdevi˚
(
¢d_˘l_ñem_öfo_t
 *
obj
, 
vÆ
);

423 
¢d_˘l_ñem_öfo_£t_«me
(
¢d_˘l_ñem_öfo_t
 *
obj
, c⁄° *
vÆ
);

424 
¢d_˘l_ñem_öfo_£t_ödex
(
¢d_˘l_ñem_öfo_t
 *
obj
, 
vÆ
);

426 
¢d_˘l_ñem_add_öãgî
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
, 
cou¡
, 
imö
, 
imax
, 
i°ï
);

427 
¢d_˘l_ñem_add_öãgî64
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
, 
cou¡
, 
imö
, 
imax
, 
i°ï
);

428 
¢d_˘l_ñem_add_boﬁón
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
, 
cou¡
);

429 
¢d_˘l_ñem_add_íumî©ed
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
, 
cou¡
, 
ôems
, c⁄° *c⁄° 
«mes
[]);

430 
¢d_˘l_ñem_add_õc958
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
);

431 
¢d_˘l_ñem_ªmove
(
¢d_˘l_t
 *
˘l
, 
¢d_˘l_ñem_id_t
 *
id
);

433 
size_t
 
¢d_˘l_ñem_vÆue_sizeof
();

438 
	#¢d_˘l_ñem_vÆue_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_˘l_ñem_vÆue
)

	)

439 
¢d_˘l_ñem_vÆue_mÆloc
(
¢d_˘l_ñem_vÆue_t
 **
±r
);

440 
¢d_˘l_ñem_vÆue_‰ì
(
¢d_˘l_ñem_vÆue_t
 *
obj
);

441 
¢d_˘l_ñem_vÆue_˛ór
(
¢d_˘l_ñem_vÆue_t
 *
obj
);

442 
¢d_˘l_ñem_vÆue_c›y
(
¢d_˘l_ñem_vÆue_t
 *
d°
, c⁄° snd_˘l_ñem_vÆue_à*
§c
);

443 
¢d_˘l_ñem_vÆue_com∑ª
(
¢d_˘l_ñem_vÆue_t
 *
À·
, c⁄° snd_˘l_ñem_vÆue_à*
right
);

444 
¢d_˘l_ñem_vÆue_gë_id
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
¢d_˘l_ñem_id_t
 *
±r
);

445 
¢d_˘l_ñem_vÆue_gë_numid
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

446 
¢d_˘l_ñem_iÁ˚_t
 
¢d_˘l_ñem_vÆue_gë_öãrÁ˚
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

447 
¢d_˘l_ñem_vÆue_gë_devi˚
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

448 
¢d_˘l_ñem_vÆue_gë_subdevi˚
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

449 c⁄° *
¢d_˘l_ñem_vÆue_gë_«me
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

450 
¢d_˘l_ñem_vÆue_gë_ödex
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

451 
¢d_˘l_ñem_vÆue_£t_id
(
¢d_˘l_ñem_vÆue_t
 *
obj
, c⁄° 
¢d_˘l_ñem_id_t
 *
±r
);

452 
¢d_˘l_ñem_vÆue_£t_numid
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
vÆ
);

453 
¢d_˘l_ñem_vÆue_£t_öãrÁ˚
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
¢d_˘l_ñem_iÁ˚_t
 
vÆ
);

454 
¢d_˘l_ñem_vÆue_£t_devi˚
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
vÆ
);

455 
¢d_˘l_ñem_vÆue_£t_subdevi˚
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
vÆ
);

456 
¢d_˘l_ñem_vÆue_£t_«me
(
¢d_˘l_ñem_vÆue_t
 *
obj
, c⁄° *
vÆ
);

457 
¢d_˘l_ñem_vÆue_£t_ödex
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
vÆ
);

458 
¢d_˘l_ñem_vÆue_gë_boﬁón
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
);

459 
¢d_˘l_ñem_vÆue_gë_öãgî
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
);

460 
¢d_˘l_ñem_vÆue_gë_öãgî64
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
);

461 
¢d_˘l_ñem_vÆue_gë_íumî©ed
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
);

462 
¢d_˘l_ñem_vÆue_gë_byã
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
);

463 
¢d_˘l_ñem_vÆue_£t_boﬁón
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
, 
vÆ
);

464 
¢d_˘l_ñem_vÆue_£t_öãgî
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
, 
vÆ
);

465 
¢d_˘l_ñem_vÆue_£t_öãgî64
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
, 
vÆ
);

466 
¢d_˘l_ñem_vÆue_£t_íumî©ed
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
, 
vÆ
);

467 
¢d_˘l_ñem_vÆue_£t_byã
(
¢d_˘l_ñem_vÆue_t
 *
obj
, 
idx
, 
vÆ
);

468 
¢d_˘l_ñem_£t_byãs
(
¢d_˘l_ñem_vÆue_t
 *
obj
, *
d©a
, 
size_t
 
size
);

469 c⁄° * 
¢d_˘l_ñem_vÆue_gë_byãs
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
);

470 
¢d_˘l_ñem_vÆue_gë_õc958
(c⁄° 
¢d_˘l_ñem_vÆue_t
 *
obj
, 
¢d_´s_õc958_t
 *
±r
);

471 
¢d_˘l_ñem_vÆue_£t_õc958
(
¢d_˘l_ñem_vÆue_t
 *
obj
, c⁄° 
¢d_´s_õc958_t
 *
±r
);

473 
¢d_év_∑r£_dB_öfo
(*
év
, 
év_size
,

474 **
db_évp
);

475 
¢d_év_gë_dB_ønge
(*
év
, 
øngemö
, 
øngemax
,

476 *
mö
, *
max
);

477 
¢d_év_c⁄vît_to_dB
(*
év
, 
øngemö
, 
øngemax
,

478 
vﬁume
, *
db_gaö
);

479 
¢d_év_c⁄vît_‰om_dB
(*
év
, 
øngemö
, 
øngemax
,

480 
db_gaö
, *
vÆue
, 
xdú
);

481 
¢d_˘l_gë_dB_ønge
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
,

482 *
mö
, *
max
);

483 
¢d_˘l_c⁄vît_to_dB
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
,

484 
vﬁume
, *
db_gaö
);

485 
¢d_˘l_c⁄vît_‰om_dB
(
¢d_˘l_t
 *
˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
,

486 
db_gaö
, *
vÆue
, 
xdú
);

497 
_¢d_h˘l_ñem
 
	t¢d_h˘l_ñem_t
;

500 
_¢d_h˘l
 
	t¢d_h˘l_t
;

508 (*
¢d_h˘l_com∑ª_t
)(c⁄° 
	t¢d_h˘l_ñem_t
 *
	te1
,

509 c⁄° 
	t¢d_h˘l_ñem_t
 *
	te2
);

510 
¢d_h˘l_com∑ª_Á°
(c⁄° 
¢d_h˘l_ñem_t
 *
c1
,

511 c⁄° 
¢d_h˘l_ñem_t
 *
c2
);

519 (*
¢d_h˘l_ˇŒback_t
)(
	t¢d_h˘l_t
 *
	th˘l
,

520 
	tmask
,

521 
	t¢d_h˘l_ñem_t
 *
	tñem
);

528 (*
¢d_h˘l_ñem_ˇŒback_t
)(
	t¢d_h˘l_ñem_t
 *
	tñem
,

529 
	tmask
);

531 
¢d_h˘l_›í
(
¢d_h˘l_t
 **
h˘l
, c⁄° *
«me
, 
mode
);

532 
¢d_h˘l_›í_˘l
(
¢d_h˘l_t
 **
h˘Õ
, 
¢d_˘l_t
 *
˘l
);

533 
¢d_h˘l_˛o£
(
¢d_h˘l_t
 *
h˘l
);

534 
¢d_h˘l_n⁄block
(
¢d_h˘l_t
 *
h˘l
, 
n⁄block
);

535 
__ölöe__
 
¢d_h˘l_ab‹t
(
¢d_h˘l_t
 *
h˘l
Ë{  
¢d_h˘l_n⁄block
(hctl, 2); }

536 
¢d_h˘l_pﬁl_des¸ùt‹s_cou¡
(
¢d_h˘l_t
 *
h˘l
);

537 
¢d_h˘l_pﬁl_des¸ùt‹s
(
¢d_h˘l_t
 *
h˘l
, 
pﬁlfd
 *
pfds
, 
•a˚
);

538 
¢d_h˘l_pﬁl_des¸ùt‹s_ªvíts
(
¢d_h˘l_t
 *
˘l
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

539 
¢d_h˘l_gë_cou¡
(
¢d_h˘l_t
 *
h˘l
);

540 
¢d_h˘l_£t_com∑ª
(
¢d_h˘l_t
 *
h˘l
, 
¢d_h˘l_com∑ª_t
 
hs‹t
);

541 
¢d_h˘l_ñem_t
 *
¢d_h˘l_fú°_ñem
(
¢d_h˘l_t
 *
h˘l
);

542 
¢d_h˘l_ñem_t
 *
¢d_h˘l_œ°_ñem
(
¢d_h˘l_t
 *
h˘l
);

543 
¢d_h˘l_ñem_t
 *
¢d_h˘l_föd_ñem
(
¢d_h˘l_t
 *
h˘l
, c⁄° 
¢d_˘l_ñem_id_t
 *
id
);

544 
¢d_h˘l_£t_ˇŒback
(
¢d_h˘l_t
 *
h˘l
, 
¢d_h˘l_ˇŒback_t
 
ˇŒback
);

545 
¢d_h˘l_£t_ˇŒback_¥iv©e
(
¢d_h˘l_t
 *
h˘l
, *
d©a
);

546 *
¢d_h˘l_gë_ˇŒback_¥iv©e
(
¢d_h˘l_t
 *
h˘l
);

547 
¢d_h˘l_lﬂd
(
¢d_h˘l_t
 *
h˘l
);

548 
¢d_h˘l_‰ì
(
¢d_h˘l_t
 *
h˘l
);

549 
¢d_h˘l_h™dÀ_evíts
(
¢d_h˘l_t
 *
h˘l
);

550 c⁄° *
¢d_h˘l_«me
(
¢d_h˘l_t
 *
h˘l
);

551 
¢d_h˘l_waô
(
¢d_h˘l_t
 *
h˘l
, 
timeout
);

552 
¢d_˘l_t
 *
¢d_h˘l_˘l
(
¢d_h˘l_t
 *
h˘l
);

554 
¢d_h˘l_ñem_t
 *
¢d_h˘l_ñem_√xt
(¢d_h˘l_ñem_à*
ñem
);

555 
¢d_h˘l_ñem_t
 *
¢d_h˘l_ñem_¥ev
(¢d_h˘l_ñem_à*
ñem
);

556 
¢d_h˘l_ñem_öfo
(
¢d_h˘l_ñem_t
 *
ñem
, 
¢d_˘l_ñem_öfo_t
 * 
öfo
);

557 
¢d_h˘l_ñem_ªad
(
¢d_h˘l_ñem_t
 *
ñem
, 
¢d_˘l_ñem_vÆue_t
 * 
vÆue
);

558 
¢d_h˘l_ñem_wrôe
(
¢d_h˘l_ñem_t
 *
ñem
, 
¢d_˘l_ñem_vÆue_t
 * 
vÆue
);

559 
¢d_h˘l_ñem_év_ªad
(
¢d_h˘l_ñem_t
 *
ñem
, *
év
, 
év_size
);

560 
¢d_h˘l_ñem_év_wrôe
(
¢d_h˘l_ñem_t
 *
ñem
, c⁄° *
év
);

561 
¢d_h˘l_ñem_év_comm™d
(
¢d_h˘l_ñem_t
 *
ñem
, c⁄° *
év
);

563 
¢d_h˘l_t
 *
¢d_h˘l_ñem_gë_h˘l
(
¢d_h˘l_ñem_t
 *
ñem
);

565 
¢d_h˘l_ñem_gë_id
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
, 
¢d_˘l_ñem_id_t
 *
±r
);

566 
¢d_h˘l_ñem_gë_numid
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

567 
¢d_˘l_ñem_iÁ˚_t
 
¢d_h˘l_ñem_gë_öãrÁ˚
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

568 
¢d_h˘l_ñem_gë_devi˚
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

569 
¢d_h˘l_ñem_gë_subdevi˚
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

570 c⁄° *
¢d_h˘l_ñem_gë_«me
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

571 
¢d_h˘l_ñem_gë_ödex
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

572 
¢d_h˘l_ñem_£t_ˇŒback
(
¢d_h˘l_ñem_t
 *
obj
, 
¢d_h˘l_ñem_ˇŒback_t
 
vÆ
);

573 * 
¢d_h˘l_ñem_gë_ˇŒback_¥iv©e
(c⁄° 
¢d_h˘l_ñem_t
 *
obj
);

574 
¢d_h˘l_ñem_£t_ˇŒback_¥iv©e
(
¢d_h˘l_ñem_t
 *
obj
, * 
vÆ
);

587 
¢d_s˘l_buûd
(
¢d_s˘l_t
 **
˘l
, 
¢d_˘l_t
 *
h™dÀ
, 
¢d_c⁄fig_t
 *
c⁄fig
,

588 
¢d_c⁄fig_t
 *
¥iv©e_d©a
, 
mode
);

589 
¢d_s˘l_‰ì
(
¢d_s˘l_t
 *
h™dÀ
);

590 
¢d_s˘l_ö°Æl
(
¢d_s˘l_t
 *
h™dÀ
);

591 
¢d_s˘l_ªmove
(
¢d_s˘l_t
 *
h™dÀ
);

595 #ifde‡
__˝lu•lus


	@/usr/include/alsa/error.h

28 #i‚de‡
__ALSA_ERROR_H


29 
	#__ALSA_ERROR_H


	)

31 #ifde‡
__˝lu•lus


41 
	#SND_ERROR_BEGIN
 500000

	)

42 
	#SND_ERROR_INCOMPATIBLE_VERSION
 (
SND_ERROR_BEGIN
+0Ë

	)

43 
	#SND_ERROR_ALISP_NIL
 (
SND_ERROR_BEGIN
+1Ë

	)

45 c⁄° *
¢d_°ªº‹
(
î∫um
);

59 (*
¢d_lib_îr‹_h™dÀr_t
)(c⁄° *
	tfûe
, 
	tlöe
, c⁄° *
	tfun˘i⁄
, 
	tîr
, c⁄° *
	tfmt
, ...) ;

60 
¢d_lib_îr‹_h™dÀr_t
 
¢d_lib_îr‹
;

61 
¢d_lib_îr‹_£t_h™dÀr
(
¢d_lib_îr‹_h™dÀr_t
 
h™dÀr
);

63 #i‡
__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 > 95)

64 
	#SNDERR
(...Ë
	`¢d_lib_îr‹
(
__FILE__
, 
__LINE__
, 
__FUNCTION__
, 0, 
__VA_ARGS__
Ë

	)

65 
	#SYSERR
(...Ë
	`¢d_lib_îr‹
(
__FILE__
, 
__LINE__
, 
__FUNCTION__
, 
î∫o
, 
__VA_ARGS__
Ë

	)

67 
	#SNDERR
(
¨gs
...Ë
	`¢d_lib_îr‹
(
__FILE__
, 
__LINE__
, 
__FUNCTION__
, 0, ##¨gsË

	)

68 
	#SYSERR
(
¨gs
...Ë
	`¢d_lib_îr‹
(
__FILE__
, 
__LINE__
, 
__FUNCTION__
, 
î∫o
, ##¨gsË

	)

73 #ifde‡
__˝lu•lus


78 (*
	t¢d_loˇl_îr‹_h™dÀr_t
)(c⁄° *
	tfûe
, 
	tlöe
,

79 c⁄° *
	tfunc
, 
	tîr
,

80 c⁄° *
	tfmt
, 
	tva_li°
 
	t¨g
);

82 
¢d_loˇl_îr‹_h™dÀr_t
 
	`¢d_lib_îr‹_£t_loˇl
(¢d_loˇl_îr‹_h™dÀr_à
func
);

	@/usr/include/alsa/global.h

28 #i‚de‡
__ALSA_GLOBAL_H_


29 
	#__ALSA_GLOBAL_H_


	)

32 
	~<time.h
>

34 #ifde‡
__˝lu•lus


47 c⁄° *
¢d_asoundlib_vîsi⁄
();

49 #i‚de‡
ATTRIBUTE_UNUSED


51 
	#ATTRIBUTE_UNUSED
 
	`__©åibuã__
 ((
__unu£d__
))

	)

54 #ifde‡
PIC


57 
	#__SND_DLSYM_VERSION
(
«me
, 
vîsi⁄
Ë
_
 ##Çamê## 
	)
version

62 
	#SND_DLSYM_BUILD_VERSION
(
«me
, 
vîsi⁄
Ë
	`__SND_DLSYM_VERSION
“ame, vîsi⁄);

	)

66 
	s¢d_dlsym_lök
 {

67 
¢d_dlsym_lök
 *
√xt
;

68 c⁄° *
dlsym_«me
;

69 c⁄° *
dlsym_±r
;

72 
¢d_dlsym_lök
 *
¢d_dlsym_°¨t
;

75 
	#__SND_DLSYM_VERSION
(
¥efix
, 
«me
, 
vîsi⁄
Ë
_
 ##Öªfix ##Çamê## 
	)
version

80 
	#SND_DLSYM_BUILD_VERSION
(
«me
, 
vîsi⁄
) \

81 
¢d_dlsym_lök
 
	`__SND_DLSYM_VERSION
(
¢d_dlsym_
, 
«me
, 
vîsi⁄
); \

82 
	`__SND_DLSYM_VERSION
(
¢d_dlsym_c⁄°ru˘‹_
, 
«me
, 
vîsi⁄
Ë(Ë
	`__©åibuã__
 ((
c⁄°ru˘‹
)); \

83 
	`__SND_DLSYM_VERSION
(
¢d_dlsym_c⁄°ru˘‹_
, 
«me
, 
vîsi⁄
) () { \

84 
	`__SND_DLSYM_VERSION
(
¢d_dlsym_
, 
«me
, 
vîsi⁄
).
√xt
 = 
¢d_dlsym_°¨t
; \

85 
	`__SND_DLSYM_VERSION
(
¢d_dlsym_
, 
«me
, 
vîsi⁄
).
dlsym_«me
 = #name; \

86 
	`__SND_DLSYM_VERSION
(
¢d_dlsym_
, 
«me
, 
vîsi⁄
).
dlsym_±r
 = (*)&name; \

87 
¢d_dlsym_°¨t
 = &
	`__SND_DLSYM_VERSION
(
¢d_dlsym_
, 
«me
, 
vîsi⁄
); \

88 }

	)

92 #i‚de‡
__STRING


94 
	#__STRING
(
x
Ë#x

	)

98 
	#SND_DLSYM_VERSION
(
vîsi⁄
Ë
	`__STRING
(vîsi⁄)

	)

100 *
¢d_dl›í
(c⁄° *
fûe
, 
mode
);

101 *
¢d_dlsym
(*
h™dÀ
, c⁄° *
«me
, c⁄° *
vîsi⁄
);

102 
¢d_dl˛o£
(*
h™dÀ
);

106 
	#__¢d_Æloˇ
(
±r
,
ty≥
Ëdÿ{ *±∏—y≥##
_t
 *Ë
	`Æloˇ
—y≥##
	`_sizeof
()); 
	`mem£t
(*±r, 0,Åy≥##_sizeof()); } 0)

	)

114 
_¢d_async_h™dÀr
 
	t¢d_async_h™dÀr_t
;

121 (*
	g¢d_async_ˇŒback_t
)(
	t¢d_async_h™dÀr_t
 *
	th™dÀr
);

123 
¢d_async_add_h™dÀr
(
¢d_async_h™dÀr_t
 **
h™dÀr
, 
fd
,

124 
¢d_async_ˇŒback_t
 
ˇŒback
, *
¥iv©e_d©a
);

125 
¢d_async_dñ_h™dÀr
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

126 
¢d_async_h™dÀr_gë_fd
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

127 
¢d_async_h™dÀr_gë_signo
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

128 *
¢d_async_h™dÀr_gë_ˇŒback_¥iv©e
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

130 
¢d_shm_¨ó
 *
¢d_shm_¨ó_¸óã
(
shmid
, *
±r
);

131 
¢d_shm_¨ó
 *
¢d_shm_¨ó_sh¨e
(¢d_shm_¨ó *
¨ó
);

132 
¢d_shm_¨ó_de°roy
(
¢d_shm_¨ó
 *
¨ó
);

134 
¢d_u£r_fûe
(c⁄° *
fûe
, **
ªsu…
);

136 #ifde‡
__GLIBC__


137 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_POSIX_SOURCE
)

138 
	stimevÆ
 {

139 
time_t
 
	gtv_£c
;

140 
	gtv_u£c
;

143 
	stime•ec
 {

144 
time_t
 
	gtv_£c
;

145 
	gtv_n£c
;

151 
timevÆ
 
	t¢d_time°amp_t
;

153 
time•ec
 
	t¢d_htime°amp_t
;

157 #ifde‡
__˝lu•lus


	@/usr/include/alsa/hwdep.h

28 #i‚de‡
__ALSA_HWDEP_H


29 
	#__ALSA_HWDEP_H


	)

31 #ifde‡
__˝lu•lus


42 
	#SND_HWDEP_DLSYM_VERSION
 
_dlsym_hwdï_001


	)

45 
_¢d_hwdï_öfo
 
	t¢d_hwdï_öfo_t
;

48 
_¢d_hwdï_d•_°©us
 
	t¢d_hwdï_d•_°©us_t
;

51 
_¢d_hwdï_d•_image
 
	t¢d_hwdï_d•_image_t
;

54 
	e_¢d_hwdï_iÁ˚
 {

55 
SND_HWDEP_IFACE_OPL2
 = 0,

56 
SND_HWDEP_IFACE_OPL3
,

57 
SND_HWDEP_IFACE_OPL4
,

58 
SND_HWDEP_IFACE_SB16CSP
,

59 
SND_HWDEP_IFACE_EMU10K1
,

60 
SND_HWDEP_IFACE_YSS225
,

61 
SND_HWDEP_IFACE_ICS2115
,

62 
SND_HWDEP_IFACE_SSCAPE
,

63 
SND_HWDEP_IFACE_VX
,

64 
SND_HWDEP_IFACE_MIXART
,

65 
SND_HWDEP_IFACE_USX2Y
,

66 
SND_HWDEP_IFACE_EMUX_WAVETABLE
,

67 
SND_HWDEP_IFACE_BLUETOOTH
,

68 
SND_HWDEP_IFACE_USX2Y_PCM
,

69 
SND_HWDEP_IFACE_PCXHR
,

70 
SND_HWDEP_IFACE_SB_RC
,

72 
SND_HWDEP_IFACE_LAST
 = 
SND_HWDEP_IFACE_SB_RC


73 } 
	t¢d_hwdï_iÁ˚_t
;

76 
	#SND_HWDEP_OPEN_READ
 (
O_RDONLY
)

	)

78 
	#SND_HWDEP_OPEN_WRITE
 (
O_WRONLY
)

	)

80 
	#SND_HWDEP_OPEN_DUPLEX
 (
O_RDWR
)

	)

82 
	#SND_HWDEP_OPEN_NONBLOCK
 (
O_NONBLOCK
)

	)

85 
	e_¢d_hwdï_ty≥
 {

87 
SND_HWDEP_TYPE_HW
,

89 
SND_HWDEP_TYPE_SHM
,

91 
SND_HWDEP_TYPE_INET


92 } 
	t¢d_hwdï_ty≥_t
;

95 
_¢d_hwdï
 
	t¢d_hwdï_t
;

97 
¢d_hwdï_›í
(
¢d_hwdï_t
 **
hwdï
, c⁄° *
«me
, 
mode
);

98 
¢d_hwdï_˛o£
(
¢d_hwdï_t
 *
hwdï
);

99 
¢d_hwdï_pﬁl_des¸ùt‹s
(
¢d_hwdï_t
 *
hwdï
, 
pﬁlfd
 *
pfds
, 
•a˚
);

100 
¢d_hwdï_pﬁl_des¸ùt‹s_ªvíts
(
¢d_hwdï_t
 *
hwdï
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

101 
¢d_hwdï_n⁄block
(
¢d_hwdï_t
 *
hwdï
, 
n⁄block
);

102 
¢d_hwdï_öfo
(
¢d_hwdï_t
 *
hwdï
, 
¢d_hwdï_öfo_t
 * 
öfo
);

103 
¢d_hwdï_d•_°©us
(
¢d_hwdï_t
 *
hwdï
, 
¢d_hwdï_d•_°©us_t
 *
°©us
);

104 
¢d_hwdï_d•_lﬂd
(
¢d_hwdï_t
 *
hwdï
, 
¢d_hwdï_d•_image_t
 *
block
);

105 
¢d_hwdï_io˘l
(
¢d_hwdï_t
 *
hwdï
, 
ªque°
, * 
¨g
);

106 
ssize_t
 
¢d_hwdï_wrôe
(
¢d_hwdï_t
 *
hwdï
, c⁄° *
buf„r
, 
size_t
 
size
);

107 
ssize_t
 
¢d_hwdï_ªad
(
¢d_hwdï_t
 *
hwdï
, *
buf„r
, 
size_t
 
size
);

109 
size_t
 
¢d_hwdï_öfo_sizeof
();

111 
	#¢d_hwdï_öfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_hwdï_öfo
)

	)

112 
¢d_hwdï_öfo_mÆloc
(
¢d_hwdï_öfo_t
 **
±r
);

113 
¢d_hwdï_öfo_‰ì
(
¢d_hwdï_öfo_t
 *
obj
);

114 
¢d_hwdï_öfo_c›y
(
¢d_hwdï_öfo_t
 *
d°
, c⁄° snd_hwdï_öfo_à*
§c
);

116 
¢d_hwdï_öfo_gë_devi˚
(c⁄° 
¢d_hwdï_öfo_t
 *
obj
);

117 
¢d_hwdï_öfo_gë_ˇrd
(c⁄° 
¢d_hwdï_öfo_t
 *
obj
);

118 c⁄° *
¢d_hwdï_öfo_gë_id
(c⁄° 
¢d_hwdï_öfo_t
 *
obj
);

119 c⁄° *
¢d_hwdï_öfo_gë_«me
(c⁄° 
¢d_hwdï_öfo_t
 *
obj
);

120 
¢d_hwdï_iÁ˚_t
 
¢d_hwdï_öfo_gë_iÁ˚
(c⁄° 
¢d_hwdï_öfo_t
 *
obj
);

121 
¢d_hwdï_öfo_£t_devi˚
(
¢d_hwdï_öfo_t
 *
obj
, 
vÆ
);

123 
size_t
 
¢d_hwdï_d•_°©us_sizeof
();

125 
	#¢d_hwdï_d•_°©us_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_hwdï_d•_°©us
)

	)

126 
¢d_hwdï_d•_°©us_mÆloc
(
¢d_hwdï_d•_°©us_t
 **
±r
);

127 
¢d_hwdï_d•_°©us_‰ì
(
¢d_hwdï_d•_°©us_t
 *
obj
);

128 
¢d_hwdï_d•_°©us_c›y
(
¢d_hwdï_d•_°©us_t
 *
d°
, c⁄° snd_hwdï_d•_°©us_à*
§c
);

130 
¢d_hwdï_d•_°©us_gë_vîsi⁄
(c⁄° 
¢d_hwdï_d•_°©us_t
 *
obj
);

131 c⁄° *
¢d_hwdï_d•_°©us_gë_id
(c⁄° 
¢d_hwdï_d•_°©us_t
 *
obj
);

132 
¢d_hwdï_d•_°©us_gë_num_d•s
(c⁄° 
¢d_hwdï_d•_°©us_t
 *
obj
);

133 
¢d_hwdï_d•_°©us_gë_d•_lﬂded
(c⁄° 
¢d_hwdï_d•_°©us_t
 *
obj
);

134 
¢d_hwdï_d•_°©us_gë_chù_ªady
(c⁄° 
¢d_hwdï_d•_°©us_t
 *
obj
);

136 
size_t
 
¢d_hwdï_d•_image_sizeof
();

138 
	#¢d_hwdï_d•_image_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_hwdï_d•_image
)

	)

139 
¢d_hwdï_d•_image_mÆloc
(
¢d_hwdï_d•_image_t
 **
±r
);

140 
¢d_hwdï_d•_image_‰ì
(
¢d_hwdï_d•_image_t
 *
obj
);

141 
¢d_hwdï_d•_image_c›y
(
¢d_hwdï_d•_image_t
 *
d°
, c⁄° snd_hwdï_d•_image_à*
§c
);

143 
¢d_hwdï_d•_image_gë_ödex
(c⁄° 
¢d_hwdï_d•_image_t
 *
obj
);

144 c⁄° *
¢d_hwdï_d•_image_gë_«me
(c⁄° 
¢d_hwdï_d•_image_t
 *
obj
);

145 c⁄° *
¢d_hwdï_d•_image_gë_image
(c⁄° 
¢d_hwdï_d•_image_t
 *
obj
);

146 
size_t
 
¢d_hwdï_d•_image_gë_Àngth
(c⁄° 
¢d_hwdï_d•_image_t
 *
obj
);

148 
¢d_hwdï_d•_image_£t_ödex
(
¢d_hwdï_d•_image_t
 *
obj
, 
_ödex
);

149 
¢d_hwdï_d•_image_£t_«me
(
¢d_hwdï_d•_image_t
 *
obj
, c⁄° *
«me
);

150 
¢d_hwdï_d•_image_£t_image
(
¢d_hwdï_d•_image_t
 *
obj
, *
buf„r
);

151 
¢d_hwdï_d•_image_£t_Àngth
(
¢d_hwdï_d•_image_t
 *
obj
, 
size_t
 
Àngth
);

155 #ifde‡
__˝lu•lus


	@/usr/include/alsa/input.h

28 #i‚de‡
__ALSA_INPUT_H


29 
	#__ALSA_INPUT_H


	)

31 #ifde‡
__˝lu•lus


54 
_¢d_öput
 
	t¢d_öput_t
;

57 
	e_¢d_öput_ty≥
 {

59 
SND_INPUT_STDIO
,

61 
SND_INPUT_BUFFER


62 } 
	t¢d_öput_ty≥_t
;

64 
¢d_öput_°dio_›í
(
¢d_öput_t
 **
öpuç
, c⁄° *
fûe
, c⁄° *
mode
);

65 
¢d_öput_°dio_©èch
(
¢d_öput_t
 **
öpuç
, 
FILE
 *
Â
, 
_˛o£
);

66 
¢d_öput_buf„r_›í
(
¢d_öput_t
 **
öpuç
, c⁄° *
buf„r
, 
ssize_t
 
size
);

67 
¢d_öput_˛o£
(
¢d_öput_t
 *
öput
);

68 
¢d_öput_sˇnf
(
¢d_öput_t
 *
öput
, c⁄° *
f‹m©
, ...)

69 #i‚de‡
DOC_HIDDEN


70 
__©åibuã__
 ((
f‹m©
 (
sˇnf
, 2, 3)))

73 *
¢d_öput_gës
(
¢d_öput_t
 *
öput
, *
°r
, 
size_t
 
size
);

74 
¢d_öput_gëc
(
¢d_öput_t
 *
öput
);

75 
¢d_öput_ungëc
(
¢d_öput_t
 *
öput
, 
c
);

79 #ifde‡
__˝lu•lus


	@/usr/include/alsa/mixer.h

28 #i‚de‡
__ALSA_MIXER_H


29 
	#__ALSA_MIXER_H


	)

31 #ifde‡
__˝lu•lus


42 
_¢d_mixî
 
	t¢d_mixî_t
;

44 
_¢d_mixî_˛ass
 
	t¢d_mixî_˛ass_t
;

46 
_¢d_mixî_ñem
 
	t¢d_mixî_ñem_t
;

55 (*
¢d_mixî_ˇŒback_t
)(
	t¢d_mixî_t
 *
	t˘l
,

56 
	tmask
,

57 
	t¢d_mixî_ñem_t
 *
	tñem
);

65 (*
¢d_mixî_ñem_ˇŒback_t
)(
	t¢d_mixî_ñem_t
 *
	tñem
,

66 
	tmask
);

74 (*
¢d_mixî_com∑ª_t
)(c⁄° 
	t¢d_mixî_ñem_t
 *
	te1
,

75 c⁄° 
	t¢d_mixî_ñem_t
 *
	te2
);

85 (*
¢d_mixî_evít_t
)(
	t¢d_mixî_˛ass_t
 *
	t˛ass_
, 
	tmask
,

86 
	t¢d_h˘l_ñem_t
 *
	thñem
, 
	t¢d_mixî_ñem_t
 *
	tmñem
);

90 
	e_¢d_mixî_ñem_ty≥
 {

92 
SND_MIXER_ELEM_SIMPLE
,

93 
SND_MIXER_ELEM_LAST
 = 
SND_MIXER_ELEM_SIMPLE


94 } 
	t¢d_mixî_ñem_ty≥_t
;

96 
¢d_mixî_›í
(
¢d_mixî_t
 **
mixî
, 
mode
);

97 
¢d_mixî_˛o£
(
¢d_mixî_t
 *
mixî
);

98 
¢d_mixî_ñem_t
 *
¢d_mixî_fú°_ñem
(
¢d_mixî_t
 *
mixî
);

99 
¢d_mixî_ñem_t
 *
¢d_mixî_œ°_ñem
(
¢d_mixî_t
 *
mixî
);

100 
¢d_mixî_h™dÀ_evíts
(
¢d_mixî_t
 *
mixî
);

101 
¢d_mixî_©èch
(
¢d_mixî_t
 *
mixî
, c⁄° *
«me
);

102 
¢d_mixî_©èch_h˘l
(
¢d_mixî_t
 *
mixî
, 
¢d_h˘l_t
 *
h˘l
);

103 
¢d_mixî_dëach
(
¢d_mixî_t
 *
mixî
, c⁄° *
«me
);

104 
¢d_mixî_dëach_h˘l
(
¢d_mixî_t
 *
mixî
, 
¢d_h˘l_t
 *
h˘l
);

105 
¢d_mixî_gë_h˘l
(
¢d_mixî_t
 *
mixî
, c⁄° *
«me
, 
¢d_h˘l_t
 **
h˘l
);

106 
¢d_mixî_pﬁl_des¸ùt‹s_cou¡
(
¢d_mixî_t
 *
mixî
);

107 
¢d_mixî_pﬁl_des¸ùt‹s
(
¢d_mixî_t
 *
mixî
, 
pﬁlfd
 *
pfds
, 
•a˚
);

108 
¢d_mixî_pﬁl_des¸ùt‹s_ªvíts
(
¢d_mixî_t
 *
mixî
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

109 
¢d_mixî_lﬂd
(
¢d_mixî_t
 *
mixî
);

110 
¢d_mixî_‰ì
(
¢d_mixî_t
 *
mixî
);

111 
¢d_mixî_waô
(
¢d_mixî_t
 *
mixî
, 
timeout
);

112 
¢d_mixî_£t_com∑ª
(
¢d_mixî_t
 *
mixî
, 
¢d_mixî_com∑ª_t
 
ms‹t
);

113 
¢d_mixî_£t_ˇŒback
(
¢d_mixî_t
 *
obj
, 
¢d_mixî_ˇŒback_t
 
vÆ
);

114 * 
¢d_mixî_gë_ˇŒback_¥iv©e
(c⁄° 
¢d_mixî_t
 *
obj
);

115 
¢d_mixî_£t_ˇŒback_¥iv©e
(
¢d_mixî_t
 *
obj
, * 
vÆ
);

116 
¢d_mixî_gë_cou¡
(c⁄° 
¢d_mixî_t
 *
obj
);

117 
¢d_mixî_˛ass_uƒegi°î
(
¢d_mixî_˛ass_t
 *
˛ss
);

119 
¢d_mixî_ñem_t
 *
¢d_mixî_ñem_√xt
(¢d_mixî_ñem_à*
ñem
);

120 
¢d_mixî_ñem_t
 *
¢d_mixî_ñem_¥ev
(¢d_mixî_ñem_à*
ñem
);

121 
¢d_mixî_ñem_£t_ˇŒback
(
¢d_mixî_ñem_t
 *
obj
, 
¢d_mixî_ñem_ˇŒback_t
 
vÆ
);

122 * 
¢d_mixî_ñem_gë_ˇŒback_¥iv©e
(c⁄° 
¢d_mixî_ñem_t
 *
obj
);

123 
¢d_mixî_ñem_£t_ˇŒback_¥iv©e
(
¢d_mixî_ñem_t
 *
obj
, * 
vÆ
);

124 
¢d_mixî_ñem_ty≥_t
 
¢d_mixî_ñem_gë_ty≥
(c⁄° 
¢d_mixî_ñem_t
 *
obj
);

126 
¢d_mixî_˛ass_ªgi°î
(
¢d_mixî_˛ass_t
 *
˛ass_
, 
¢d_mixî_t
 *
mixî
);

127 
¢d_mixî_ñem_√w
(
¢d_mixî_ñem_t
 **
ñem
,

128 
¢d_mixî_ñem_ty≥_t
 
ty≥
,

129 
com∑ª_weight
,

130 *
¥iv©e_d©a
,

131 (*
¥iv©e_‰ì
)(
¢d_mixî_ñem_t
 *
ñem
));

132 
¢d_mixî_ñem_add
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_˛ass_t
 *
˛ass_
);

133 
¢d_mixî_ñem_ªmove
(
¢d_mixî_ñem_t
 *
ñem
);

134 
¢d_mixî_ñem_‰ì
(
¢d_mixî_ñem_t
 *
ñem
);

135 
¢d_mixî_ñem_öfo
(
¢d_mixî_ñem_t
 *
ñem
);

136 
¢d_mixî_ñem_vÆue
(
¢d_mixî_ñem_t
 *
ñem
);

137 
¢d_mixî_ñem_©èch
(
¢d_mixî_ñem_t
 *
mñem
, 
¢d_h˘l_ñem_t
 *
hñem
);

138 
¢d_mixî_ñem_dëach
(
¢d_mixî_ñem_t
 *
mñem
, 
¢d_h˘l_ñem_t
 *
hñem
);

139 
¢d_mixî_ñem_em±y
(
¢d_mixî_ñem_t
 *
mñem
);

140 *
¢d_mixî_ñem_gë_¥iv©e
(c⁄° 
¢d_mixî_ñem_t
 *
mñem
);

142 
size_t
 
¢d_mixî_˛ass_sizeof
();

147 
	#¢d_mixî_˛ass_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_mixî_˛ass
)

	)

148 
¢d_mixî_˛ass_mÆloc
(
¢d_mixî_˛ass_t
 **
±r
);

149 
¢d_mixî_˛ass_‰ì
(
¢d_mixî_˛ass_t
 *
obj
);

150 
¢d_mixî_˛ass_c›y
(
¢d_mixî_˛ass_t
 *
d°
, c⁄° snd_mixî_˛ass_à*
§c
);

151 
¢d_mixî_t
 *
¢d_mixî_˛ass_gë_mixî
(c⁄° 
¢d_mixî_˛ass_t
 *
˛ass_
);

152 
¢d_mixî_evít_t
 
¢d_mixî_˛ass_gë_evít
(c⁄° 
¢d_mixî_˛ass_t
 *
˛ass_
);

153 *
¢d_mixî_˛ass_gë_¥iv©e
(c⁄° 
¢d_mixî_˛ass_t
 *
˛ass_
);

154 
¢d_mixî_com∑ª_t
 
¢d_mixî_˛ass_gë_com∑ª
(c⁄° 
¢d_mixî_˛ass_t
 *
˛ass_
);

155 
¢d_mixî_˛ass_£t_evít
(
¢d_mixî_˛ass_t
 *
˛ass_
, 
¢d_mixî_evít_t
 
evít
);

156 
¢d_mixî_˛ass_£t_¥iv©e
(
¢d_mixî_˛ass_t
 *
˛ass_
, *
¥iv©e_d©a
);

157 
¢d_mixî_˛ass_£t_¥iv©e_‰ì
(
¢d_mixî_˛ass_t
 *
˛ass_
, (*
¥iv©e_‰ì
)(snd_mixer_class_t *));

158 
¢d_mixî_˛ass_£t_com∑ª
(
¢d_mixî_˛ass_t
 *
˛ass_
, 
¢d_mixî_com∑ª_t
 
com∑ª
);

170 
	e_¢d_mixî_£Àm_ch™√l_id
 {

172 
SND_MIXER_SCHN_UNKNOWN
 = -1,

174 
SND_MIXER_SCHN_FRONT_LEFT
 = 0,

176 
SND_MIXER_SCHN_FRONT_RIGHT
,

178 
SND_MIXER_SCHN_REAR_LEFT
,

180 
SND_MIXER_SCHN_REAR_RIGHT
,

182 
SND_MIXER_SCHN_FRONT_CENTER
,

184 
SND_MIXER_SCHN_WOOFER
,

186 
SND_MIXER_SCHN_SIDE_LEFT
,

188 
SND_MIXER_SCHN_SIDE_RIGHT
,

190 
SND_MIXER_SCHN_REAR_CENTER
,

191 
SND_MIXER_SCHN_LAST
 = 31,

193 
SND_MIXER_SCHN_MONO
 = 
SND_MIXER_SCHN_FRONT_LEFT


194 } 
	t¢d_mixî_£Àm_ch™√l_id_t
;

197 
	e¢d_mixî_£Àm_ªg›t_ab°ø˘
 {

199 
SND_MIXER_SABSTRACT_NONE
 = 0,

201 
SND_MIXER_SABSTRACT_BASIC
,

205 
	s¢d_mixî_£Àm_ªg›t
 {

207 
vî
;

209 
¢d_mixî_£Àm_ªg›t_ab°ø˘
 
ab°ø˘
;

211 c⁄° *
devi˚
;

213 
¢d_pcm_t
 *
∂ayback_pcm
;

215 
¢d_pcm_t
 *
ˇ±uª_pcm
;

219 
_¢d_mixî_£Àm_id
 
	t¢d_mixî_£Àm_id_t
;

221 c⁄° *
¢d_mixî_£Àm_ch™√l_«me
(
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
);

223 
¢d_mixî_£Àm_ªgi°î
(
¢d_mixî_t
 *
mixî
,

224 
¢d_mixî_£Àm_ªg›t
 *
›ti⁄s
,

225 
¢d_mixî_˛ass_t
 **
˛as•
);

226 
¢d_mixî_£Àm_gë_id
(
¢d_mixî_ñem_t
 *
ñemít
,

227 
¢d_mixî_£Àm_id_t
 *
id
);

228 c⁄° *
¢d_mixî_£Àm_gë_«me
(
¢d_mixî_ñem_t
 *
ñem
);

229 
¢d_mixî_£Àm_gë_ödex
(
¢d_mixî_ñem_t
 *
ñem
);

230 
¢d_mixî_ñem_t
 *
¢d_mixî_föd_£Àm
(
¢d_mixî_t
 *
mixî
,

231 c⁄° 
¢d_mixî_£Àm_id_t
 *
id
);

233 
¢d_mixî_£Àm_is_a˘ive
(
¢d_mixî_ñem_t
 *
ñem
);

234 
¢d_mixî_£Àm_is_∂ayback_m⁄o
(
¢d_mixî_ñem_t
 *
ñem
);

235 
¢d_mixî_£Àm_has_∂ayback_ch™√l
(
¢d_mixî_ñem_t
 *
obj
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
);

236 
¢d_mixî_£Àm_is_ˇ±uª_m⁄o
(
¢d_mixî_ñem_t
 *
ñem
);

237 
¢d_mixî_£Àm_has_ˇ±uª_ch™√l
(
¢d_mixî_ñem_t
 *
obj
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
);

238 
¢d_mixî_£Àm_gë_ˇ±uª_group
(
¢d_mixî_ñem_t
 *
ñem
);

239 
¢d_mixî_£Àm_has_comm⁄_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
);

240 
¢d_mixî_£Àm_has_∂ayback_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
);

241 
¢d_mixî_£Àm_has_∂ayback_vﬁume_joöed
(
¢d_mixî_ñem_t
 *
ñem
);

242 
¢d_mixî_£Àm_has_ˇ±uª_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
);

243 
¢d_mixî_£Àm_has_ˇ±uª_vﬁume_joöed
(
¢d_mixî_ñem_t
 *
ñem
);

244 
¢d_mixî_£Àm_has_comm⁄_swôch
(
¢d_mixî_ñem_t
 *
ñem
);

245 
¢d_mixî_£Àm_has_∂ayback_swôch
(
¢d_mixî_ñem_t
 *
ñem
);

246 
¢d_mixî_£Àm_has_∂ayback_swôch_joöed
(
¢d_mixî_ñem_t
 *
ñem
);

247 
¢d_mixî_£Àm_has_ˇ±uª_swôch
(
¢d_mixî_ñem_t
 *
ñem
);

248 
¢d_mixî_£Àm_has_ˇ±uª_swôch_joöed
(
¢d_mixî_ñem_t
 *
ñem
);

249 
¢d_mixî_£Àm_has_ˇ±uª_swôch_ex˛usive
(
¢d_mixî_ñem_t
 *
ñem
);

251 
¢d_mixî_£Àm_ask_∂ayback_vﬁ_dB
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
, *
dBvÆue
);

252 
¢d_mixî_£Àm_ask_ˇ±uª_vﬁ_dB
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
, *
dBvÆue
);

253 
¢d_mixî_£Àm_ask_∂ayback_dB_vﬁ
(
¢d_mixî_ñem_t
 *
ñem
, 
dBvÆue
, 
dú
, *
vÆue
);

254 
¢d_mixî_£Àm_ask_ˇ±uª_dB_vﬁ
(
¢d_mixî_ñem_t
 *
ñem
, 
dBvÆue
, 
dú
, *
vÆue
);

255 
¢d_mixî_£Àm_gë_∂ayback_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
vÆue
);

256 
¢d_mixî_£Àm_gë_ˇ±uª_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
vÆue
);

257 
¢d_mixî_£Àm_gë_∂ayback_dB
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
vÆue
);

258 
¢d_mixî_£Àm_gë_ˇ±uª_dB
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
vÆue
);

259 
¢d_mixî_£Àm_gë_∂ayback_swôch
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
vÆue
);

260 
¢d_mixî_£Àm_gë_ˇ±uª_swôch
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
vÆue
);

261 
¢d_mixî_£Àm_£t_∂ayback_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
vÆue
);

262 
¢d_mixî_£Àm_£t_ˇ±uª_vﬁume
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
vÆue
);

263 
¢d_mixî_£Àm_£t_∂ayback_dB
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
vÆue
, 
dú
);

264 
¢d_mixî_£Àm_£t_ˇ±uª_dB
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
vÆue
, 
dú
);

265 
¢d_mixî_£Àm_£t_∂ayback_vﬁume_Æl
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
);

266 
¢d_mixî_£Àm_£t_ˇ±uª_vﬁume_Æl
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
);

267 
¢d_mixî_£Àm_£t_∂ayback_dB_Æl
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
, 
dú
);

268 
¢d_mixî_£Àm_£t_ˇ±uª_dB_Æl
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
, 
dú
);

269 
¢d_mixî_£Àm_£t_∂ayback_swôch
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
vÆue
);

270 
¢d_mixî_£Àm_£t_ˇ±uª_swôch
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
vÆue
);

271 
¢d_mixî_£Àm_£t_∂ayback_swôch_Æl
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
);

272 
¢d_mixî_£Àm_£t_ˇ±uª_swôch_Æl
(
¢d_mixî_ñem_t
 *
ñem
, 
vÆue
);

273 
¢d_mixî_£Àm_gë_∂ayback_vﬁume_ønge
(
¢d_mixî_ñem_t
 *
ñem
,

274 *
mö
, *
max
);

275 
¢d_mixî_£Àm_gë_∂ayback_dB_ønge
(
¢d_mixî_ñem_t
 *
ñem
,

276 *
mö
, *
max
);

277 
¢d_mixî_£Àm_£t_∂ayback_vﬁume_ønge
(
¢d_mixî_ñem_t
 *
ñem
,

278 
mö
, 
max
);

279 
¢d_mixî_£Àm_gë_ˇ±uª_vﬁume_ønge
(
¢d_mixî_ñem_t
 *
ñem
,

280 *
mö
, *
max
);

281 
¢d_mixî_£Àm_gë_ˇ±uª_dB_ønge
(
¢d_mixî_ñem_t
 *
ñem
,

282 *
mö
, *
max
);

283 
¢d_mixî_£Àm_£t_ˇ±uª_vﬁume_ønge
(
¢d_mixî_ñem_t
 *
ñem
,

284 
mö
, 
max
);

286 
¢d_mixî_£Àm_is_íumî©ed
(
¢d_mixî_ñem_t
 *
ñem
);

287 
¢d_mixî_£Àm_is_íum_∂ayback
(
¢d_mixî_ñem_t
 *
ñem
);

288 
¢d_mixî_£Àm_is_íum_ˇ±uª
(
¢d_mixî_ñem_t
 *
ñem
);

289 
¢d_mixî_£Àm_gë_íum_ôems
(
¢d_mixî_ñem_t
 *
ñem
);

290 
¢d_mixî_£Àm_gë_íum_ôem_«me
(
¢d_mixî_ñem_t
 *
ñem
, 
idx
, 
size_t
 
maxÀn
, *
°r
);

291 
¢d_mixî_£Àm_gë_íum_ôem
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, *
idxp
);

292 
¢d_mixî_£Àm_£t_íum_ôem
(
¢d_mixî_ñem_t
 *
ñem
, 
¢d_mixî_£Àm_ch™√l_id_t
 
ch™√l
, 
idx
);

294 
size_t
 
¢d_mixî_£Àm_id_sizeof
();

299 
	#¢d_mixî_£Àm_id_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_mixî_£Àm_id
)

	)

300 
¢d_mixî_£Àm_id_mÆloc
(
¢d_mixî_£Àm_id_t
 **
±r
);

301 
¢d_mixî_£Àm_id_‰ì
(
¢d_mixî_£Àm_id_t
 *
obj
);

302 
¢d_mixî_£Àm_id_c›y
(
¢d_mixî_£Àm_id_t
 *
d°
, c⁄° snd_mixî_£Àm_id_à*
§c
);

303 c⁄° *
¢d_mixî_£Àm_id_gë_«me
(c⁄° 
¢d_mixî_£Àm_id_t
 *
obj
);

304 
¢d_mixî_£Àm_id_gë_ödex
(c⁄° 
¢d_mixî_£Àm_id_t
 *
obj
);

305 
¢d_mixî_£Àm_id_£t_«me
(
¢d_mixî_£Àm_id_t
 *
obj
, c⁄° *
vÆ
);

306 
¢d_mixî_£Àm_id_£t_ödex
(
¢d_mixî_£Àm_id_t
 *
obj
, 
vÆ
);

312 #ifde‡
__˝lu•lus


	@/usr/include/alsa/output.h

28 #i‚de‡
__ALSA_OUTPUT_H


29 
	#__ALSA_OUTPUT_H


	)

31 #ifde‡
__˝lu•lus


54 
_¢d_ouçut
 
	t¢d_ouçut_t
;

57 
	e_¢d_ouçut_ty≥
 {

59 
SND_OUTPUT_STDIO
,

61 
SND_OUTPUT_BUFFER


62 } 
	t¢d_ouçut_ty≥_t
;

64 
¢d_ouçut_°dio_›í
(
¢d_ouçut_t
 **
ouçuç
, c⁄° *
fûe
, c⁄° *
mode
);

65 
¢d_ouçut_°dio_©èch
(
¢d_ouçut_t
 **
ouçuç
, 
FILE
 *
Â
, 
_˛o£
);

66 
¢d_ouçut_buf„r_›í
(
¢d_ouçut_t
 **
ouçuç
);

67 
size_t
 
¢d_ouçut_buf„r_°rög
(
¢d_ouçut_t
 *
ouçut
, **
buf
);

68 
¢d_ouçut_˛o£
(
¢d_ouçut_t
 *
ouçut
);

69 
¢d_ouçut_¥ötf
(
¢d_ouçut_t
 *
ouçut
, c⁄° *
f‹m©
, ...)

70 #i‚de‡
DOC_HIDDEN


71 
__©åibuã__
 ((
f‹m©
 (
¥ötf
, 2, 3)))

74 
¢d_ouçut_v¥ötf
(
¢d_ouçut_t
 *
ouçut
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
);

75 
¢d_ouçut_puts
(
¢d_ouçut_t
 *
ouçut
, c⁄° *
°r
);

76 
¢d_ouçut_putc
(
¢d_ouçut_t
 *
ouçut
, 
c
);

77 
¢d_ouçut_Êush
(
¢d_ouçut_t
 *
ouçut
);

81 #ifde‡
__˝lu•lus


	@/usr/include/alsa/pcm.h

29 #i‚de‡
__ALSA_PCM_H


30 
	#__ALSA_PCM_H


	)

32 #ifde‡
__˝lu•lus


43 
	#SND_PCM_DLSYM_VERSION
 
_dlsym_pcm_001


	)

46 
_¢d_pcm_öfo
 
	t¢d_pcm_öfo_t
;

62 
_¢d_pcm_hw_∑øms
 
	t¢d_pcm_hw_∑øms_t
;

65 
_¢d_pcm_sw_∑øms
 
	t¢d_pcm_sw_∑øms_t
;

67 
_¢d_pcm_°©us
 
	t¢d_pcm_°©us_t
;

69 
_¢d_pcm_ac˚ss_mask
 
	t¢d_pcm_ac˚ss_mask_t
;

71 
_¢d_pcm_f‹m©_mask
 
	t¢d_pcm_f‹m©_mask_t
;

73 
_¢d_pcm_subf‹m©_mask
 
	t¢d_pcm_subf‹m©_mask_t
;

76 
	e_¢d_pcm_˛ass
 {

79 
SND_PCM_CLASS_GENERIC
 = 0,

81 
SND_PCM_CLASS_MULTI
,

83 
SND_PCM_CLASS_MODEM
,

85 
SND_PCM_CLASS_DIGITIZER
,

86 
SND_PCM_CLASS_LAST
 = 
SND_PCM_CLASS_DIGITIZER


87 } 
	t¢d_pcm_˛ass_t
;

90 
	e_¢d_pcm_sub˛ass
 {

92 
SND_PCM_SUBCLASS_GENERIC_MIX
 = 0,

94 
SND_PCM_SUBCLASS_MULTI_MIX
,

95 
SND_PCM_SUBCLASS_LAST
 = 
SND_PCM_SUBCLASS_MULTI_MIX


96 } 
	t¢d_pcm_sub˛ass_t
;

99 
	e_¢d_pcm_°ªam
 {

101 
SND_PCM_STREAM_PLAYBACK
 = 0,

103 
SND_PCM_STREAM_CAPTURE
,

104 
SND_PCM_STREAM_LAST
 = 
SND_PCM_STREAM_CAPTURE


105 } 
	t¢d_pcm_°ªam_t
;

108 
	e_¢d_pcm_ac˚ss
 {

110 
SND_PCM_ACCESS_MMAP_INTERLEAVED
 = 0,

112 
SND_PCM_ACCESS_MMAP_NONINTERLEAVED
,

114 
SND_PCM_ACCESS_MMAP_COMPLEX
,

116 
SND_PCM_ACCESS_RW_INTERLEAVED
,

118 
SND_PCM_ACCESS_RW_NONINTERLEAVED
,

119 
SND_PCM_ACCESS_LAST
 = 
SND_PCM_ACCESS_RW_NONINTERLEAVED


120 } 
	t¢d_pcm_ac˚ss_t
;

123 
	e_¢d_pcm_f‹m©
 {

125 
SND_PCM_FORMAT_UNKNOWN
 = -1,

127 
SND_PCM_FORMAT_S8
 = 0,

129 
SND_PCM_FORMAT_U8
,

131 
SND_PCM_FORMAT_S16_LE
,

133 
SND_PCM_FORMAT_S16_BE
,

135 
SND_PCM_FORMAT_U16_LE
,

137 
SND_PCM_FORMAT_U16_BE
,

139 
SND_PCM_FORMAT_S24_LE
,

141 
SND_PCM_FORMAT_S24_BE
,

143 
SND_PCM_FORMAT_U24_LE
,

145 
SND_PCM_FORMAT_U24_BE
,

147 
SND_PCM_FORMAT_S32_LE
,

149 
SND_PCM_FORMAT_S32_BE
,

151 
SND_PCM_FORMAT_U32_LE
,

153 
SND_PCM_FORMAT_U32_BE
,

155 
SND_PCM_FORMAT_FLOAT_LE
,

157 
SND_PCM_FORMAT_FLOAT_BE
,

159 
SND_PCM_FORMAT_FLOAT64_LE
,

161 
SND_PCM_FORMAT_FLOAT64_BE
,

163 
SND_PCM_FORMAT_IEC958_SUBFRAME_LE
,

165 
SND_PCM_FORMAT_IEC958_SUBFRAME_BE
,

167 
SND_PCM_FORMAT_MU_LAW
,

169 
SND_PCM_FORMAT_A_LAW
,

171 
SND_PCM_FORMAT_IMA_ADPCM
,

173 
SND_PCM_FORMAT_MPEG
,

175 
SND_PCM_FORMAT_GSM
,

177 
SND_PCM_FORMAT_SPECIAL
 = 31,

179 
SND_PCM_FORMAT_S24_3LE
 = 32,

181 
SND_PCM_FORMAT_S24_3BE
,

183 
SND_PCM_FORMAT_U24_3LE
,

185 
SND_PCM_FORMAT_U24_3BE
,

187 
SND_PCM_FORMAT_S20_3LE
,

189 
SND_PCM_FORMAT_S20_3BE
,

191 
SND_PCM_FORMAT_U20_3LE
,

193 
SND_PCM_FORMAT_U20_3BE
,

195 
SND_PCM_FORMAT_S18_3LE
,

197 
SND_PCM_FORMAT_S18_3BE
,

199 
SND_PCM_FORMAT_U18_3LE
,

201 
SND_PCM_FORMAT_U18_3BE
,

203 
SND_PCM_FORMAT_G723_24
,

205 
SND_PCM_FORMAT_G723_24_1B
,

207 
SND_PCM_FORMAT_G723_40
,

209 
SND_PCM_FORMAT_G723_40_1B
,

211 
SND_PCM_FORMAT_DSD_U8
,

213 
SND_PCM_FORMAT_DSD_U16_LE
,

214 
SND_PCM_FORMAT_LAST
 = 
SND_PCM_FORMAT_DSD_U16_LE
,

216 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


218 
SND_PCM_FORMAT_S16
 = 
SND_PCM_FORMAT_S16_LE
,

220 
SND_PCM_FORMAT_U16
 = 
SND_PCM_FORMAT_U16_LE
,

222 
SND_PCM_FORMAT_S24
 = 
SND_PCM_FORMAT_S24_LE
,

224 
SND_PCM_FORMAT_U24
 = 
SND_PCM_FORMAT_U24_LE
,

226 
SND_PCM_FORMAT_S32
 = 
SND_PCM_FORMAT_S32_LE
,

228 
SND_PCM_FORMAT_U32
 = 
SND_PCM_FORMAT_U32_LE
,

230 
SND_PCM_FORMAT_FLOAT
 = 
SND_PCM_FORMAT_FLOAT_LE
,

232 
SND_PCM_FORMAT_FLOAT64
 = 
SND_PCM_FORMAT_FLOAT64_LE
,

234 
SND_PCM_FORMAT_IEC958_SUBFRAME
 = 
SND_PCM_FORMAT_IEC958_SUBFRAME_LE


235 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


237 
SND_PCM_FORMAT_S16
 = 
SND_PCM_FORMAT_S16_BE
,

239 
SND_PCM_FORMAT_U16
 = 
SND_PCM_FORMAT_U16_BE
,

241 
SND_PCM_FORMAT_S24
 = 
SND_PCM_FORMAT_S24_BE
,

243 
SND_PCM_FORMAT_U24
 = 
SND_PCM_FORMAT_U24_BE
,

245 
SND_PCM_FORMAT_S32
 = 
SND_PCM_FORMAT_S32_BE
,

247 
SND_PCM_FORMAT_U32
 = 
SND_PCM_FORMAT_U32_BE
,

249 
SND_PCM_FORMAT_FLOAT
 = 
SND_PCM_FORMAT_FLOAT_BE
,

251 
SND_PCM_FORMAT_FLOAT64
 = 
SND_PCM_FORMAT_FLOAT64_BE
,

253 
SND_PCM_FORMAT_IEC958_SUBFRAME
 = 
SND_PCM_FORMAT_IEC958_SUBFRAME_BE


257 } 
	t¢d_pcm_f‹m©_t
;

260 
	e_¢d_pcm_subf‹m©
 {

262 
SND_PCM_SUBFORMAT_STD
 = 0,

263 
SND_PCM_SUBFORMAT_LAST
 = 
SND_PCM_SUBFORMAT_STD


264 } 
	t¢d_pcm_subf‹m©_t
;

267 
	e_¢d_pcm_°©e
 {

269 
SND_PCM_STATE_OPEN
 = 0,

271 
SND_PCM_STATE_SETUP
,

273 
SND_PCM_STATE_PREPARED
,

275 
SND_PCM_STATE_RUNNING
,

277 
SND_PCM_STATE_XRUN
,

279 
SND_PCM_STATE_DRAINING
,

281 
SND_PCM_STATE_PAUSED
,

283 
SND_PCM_STATE_SUSPENDED
,

285 
SND_PCM_STATE_DISCONNECTED
,

286 
SND_PCM_STATE_LAST
 = 
SND_PCM_STATE_DISCONNECTED


287 } 
	t¢d_pcm_°©e_t
;

290 
	e_¢d_pcm_°¨t
 {

292 
SND_PCM_START_DATA
 = 0,

294 
SND_PCM_START_EXPLICIT
,

295 
SND_PCM_START_LAST
 = 
SND_PCM_START_EXPLICIT


296 } 
	t¢d_pcm_°¨t_t
;

299 
	e_¢d_pcm_xrun
 {

301 
SND_PCM_XRUN_NONE
 = 0,

303 
SND_PCM_XRUN_STOP
,

304 
SND_PCM_XRUN_LAST
 = 
SND_PCM_XRUN_STOP


305 } 
	t¢d_pcm_xrun_t
;

308 
	e_¢d_pcm_t°amp
 {

310 
SND_PCM_TSTAMP_NONE
 = 0,

312 
SND_PCM_TSTAMP_ENABLE
,

316 
SND_PCM_TSTAMP_MMAP
 = 
SND_PCM_TSTAMP_ENABLE
,

317 
SND_PCM_TSTAMP_LAST
 = 
SND_PCM_TSTAMP_ENABLE


318 } 
	t¢d_pcm_t°amp_t
;

321 
	t¢d_pcm_u‰ames_t
;

323 
	t¢d_pcm_s‰ames_t
;

326 
	#SND_PCM_NONBLOCK
 0x00000001

	)

328 
	#SND_PCM_ASYNC
 0x00000002

	)

330 
	#SND_PCM_ABORT
 0x00008000

	)

332 
	#SND_PCM_NO_AUTO_RESAMPLE
 0x00010000

	)

334 
	#SND_PCM_NO_AUTO_CHANNELS
 0x00020000

	)

336 
	#SND_PCM_NO_AUTO_FORMAT
 0x00040000

	)

338 
	#SND_PCM_NO_SOFTVOL
 0x00080000

	)

341 
_¢d_pcm
 
	t¢d_pcm_t
;

344 
	e_¢d_pcm_ty≥
 {

346 
SND_PCM_TYPE_HW
 = 0,

348 
SND_PCM_TYPE_HOOKS
,

351 
SND_PCM_TYPE_MULTI
,

353 
SND_PCM_TYPE_FILE
,

355 
SND_PCM_TYPE_NULL
,

357 
SND_PCM_TYPE_SHM
,

359 
SND_PCM_TYPE_INET
,

361 
SND_PCM_TYPE_COPY
,

363 
SND_PCM_TYPE_LINEAR
,

365 
SND_PCM_TYPE_ALAW
,

367 
SND_PCM_TYPE_MULAW
,

369 
SND_PCM_TYPE_ADPCM
,

371 
SND_PCM_TYPE_RATE
,

373 
SND_PCM_TYPE_ROUTE
,

375 
SND_PCM_TYPE_PLUG
,

377 
SND_PCM_TYPE_SHARE
,

379 
SND_PCM_TYPE_METER
,

381 
SND_PCM_TYPE_MIX
,

383 
SND_PCM_TYPE_DROUTE
,

385 
SND_PCM_TYPE_LBSERVER
,

387 
SND_PCM_TYPE_LINEAR_FLOAT
,

389 
SND_PCM_TYPE_LADSPA
,

391 
SND_PCM_TYPE_DMIX
,

393 
SND_PCM_TYPE_JACK
,

395 
SND_PCM_TYPE_DSNOOP
,

397 
SND_PCM_TYPE_DSHARE
,

399 
SND_PCM_TYPE_IEC958
,

401 
SND_PCM_TYPE_SOFTVOL
,

403 
SND_PCM_TYPE_IOPLUG
,

405 
SND_PCM_TYPE_EXTPLUG
,

407 
SND_PCM_TYPE_MMAP_EMUL
,

408 
SND_PCM_TYPE_LAST
 = 
SND_PCM_TYPE_MMAP_EMUL


412 
_¢d_pcm_ty≥
 
	t¢d_pcm_ty≥_t
;

415 
	s_¢d_pcm_ch™√l_¨ó
 {

417 *
addr
;

419 
fú°
;

421 
°ï
;

422 } 
	t¢d_pcm_ch™√l_¨ó_t
;

425 
	u_¢d_pcm_sync_id
 {

427 
id
[16];

429 
id16
[8];

431 
id32
[4];

432 } 
	t¢d_pcm_sync_id_t
;

435 
_¢d_pcm_sc›e
 
	t¢d_pcm_sc›e_t
;

437 
¢d_pcm_›í
(
¢d_pcm_t
 **
pcm
, c⁄° *
«me
,

438 
¢d_pcm_°ªam_t
 
°ªam
, 
mode
);

439 
¢d_pcm_›í_lc⁄f
(
¢d_pcm_t
 **
pcm
, c⁄° *
«me
,

440 
¢d_pcm_°ªam_t
 
°ªam
, 
mode
,

441 
¢d_c⁄fig_t
 *
lc⁄f
);

442 
¢d_pcm_›í_ÁŒback
(
¢d_pcm_t
 **
pcm
, 
¢d_c⁄fig_t
 *
roŸ
,

443 c⁄° *
«me
, c⁄° *
‹ig_«me
,

444 
¢d_pcm_°ªam_t
 
°ªam
, 
mode
);

446 
¢d_pcm_˛o£
(
¢d_pcm_t
 *
pcm
);

447 c⁄° *
¢d_pcm_«me
(
¢d_pcm_t
 *
pcm
);

448 
¢d_pcm_ty≥_t
 
¢d_pcm_ty≥
(
¢d_pcm_t
 *
pcm
);

449 
¢d_pcm_°ªam_t
 
¢d_pcm_°ªam
(
¢d_pcm_t
 *
pcm
);

450 
¢d_pcm_pﬁl_des¸ùt‹s_cou¡
(
¢d_pcm_t
 *
pcm
);

451 
¢d_pcm_pﬁl_des¸ùt‹s
(
¢d_pcm_t
 *
pcm
, 
pﬁlfd
 *
pfds
, 
•a˚
);

452 
¢d_pcm_pﬁl_des¸ùt‹s_ªvíts
(
¢d_pcm_t
 *
pcm
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

453 
¢d_pcm_n⁄block
(
¢d_pcm_t
 *
pcm
, 
n⁄block
);

454 
__ölöe__
 
¢d_pcm_ab‹t
(
¢d_pcm_t
 *
pcm
Ë{  
¢d_pcm_n⁄block
(pcm, 2); }

455 
¢d_async_add_pcm_h™dÀr
(
¢d_async_h™dÀr_t
 **
h™dÀr
, 
¢d_pcm_t
 *
pcm
,

456 
¢d_async_ˇŒback_t
 
ˇŒback
, *
¥iv©e_d©a
);

457 
¢d_pcm_t
 *
¢d_async_h™dÀr_gë_pcm
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

458 
¢d_pcm_öfo
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_öfo_t
 *
öfo
);

459 
¢d_pcm_hw_∑øms_cuºít
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

460 
¢d_pcm_hw_∑øms
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

461 
¢d_pcm_hw_‰ì
(
¢d_pcm_t
 *
pcm
);

462 
¢d_pcm_sw_∑øms_cuºít
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
);

463 
¢d_pcm_sw_∑øms
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
);

464 
¢d_pcm_¥ï¨e
(
¢d_pcm_t
 *
pcm
);

465 
¢d_pcm_ª£t
(
¢d_pcm_t
 *
pcm
);

466 
¢d_pcm_°©us
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_°©us_t
 *
°©us
);

467 
¢d_pcm_°¨t
(
¢d_pcm_t
 *
pcm
);

468 
¢d_pcm_dr›
(
¢d_pcm_t
 *
pcm
);

469 
¢d_pcm_døö
(
¢d_pcm_t
 *
pcm
);

470 
¢d_pcm_∑u£
(
¢d_pcm_t
 *
pcm
, 
íabÀ
);

471 
¢d_pcm_°©e_t
 
¢d_pcm_°©e
(
¢d_pcm_t
 *
pcm
);

472 
¢d_pcm_hwsync
(
¢d_pcm_t
 *
pcm
);

473 
¢d_pcm_dñay
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_s‰ames_t
 *
dñayp
);

474 
¢d_pcm_ªsume
(
¢d_pcm_t
 *
pcm
);

475 
¢d_pcm_htime°amp
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_u‰ames_t
 *
avaû
, 
¢d_htime°amp_t
 *
t°amp
);

476 
¢d_pcm_s‰ames_t
 
¢d_pcm_avaû
(
¢d_pcm_t
 *
pcm
);

477 
¢d_pcm_s‰ames_t
 
¢d_pcm_avaû_upd©e
(
¢d_pcm_t
 *
pcm
);

478 
¢d_pcm_avaû_dñay
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_s‰ames_t
 *
avaûp
, snd_pcm_s‰ames_à*
dñayp
);

479 
¢d_pcm_s‰ames_t
 
¢d_pcm_ªwödabÀ
(
¢d_pcm_t
 *
pcm
);

480 
¢d_pcm_s‰ames_t
 
¢d_pcm_ªwöd
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_u‰ames_t
 
‰ames
);

481 
¢d_pcm_s‰ames_t
 
¢d_pcm_f‹w¨dabÀ
(
¢d_pcm_t
 *
pcm
);

482 
¢d_pcm_s‰ames_t
 
¢d_pcm_f‹w¨d
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_u‰ames_t
 
‰ames
);

483 
¢d_pcm_s‰ames_t
 
¢d_pcm_wrôei
(
¢d_pcm_t
 *
pcm
, c⁄° *
buf„r
, 
¢d_pcm_u‰ames_t
 
size
);

484 
¢d_pcm_s‰ames_t
 
¢d_pcm_ªadi
(
¢d_pcm_t
 *
pcm
, *
buf„r
, 
¢d_pcm_u‰ames_t
 
size
);

485 
¢d_pcm_s‰ames_t
 
¢d_pcm_wrôí
(
¢d_pcm_t
 *
pcm
, **
bufs
, 
¢d_pcm_u‰ames_t
 
size
);

486 
¢d_pcm_s‰ames_t
 
¢d_pcm_ªadn
(
¢d_pcm_t
 *
pcm
, **
bufs
, 
¢d_pcm_u‰ames_t
 
size
);

487 
¢d_pcm_waô
(
¢d_pcm_t
 *
pcm
, 
timeout
);

489 
¢d_pcm_lök
(
¢d_pcm_t
 *
pcm1
, snd_pcm_à*
pcm2
);

490 
¢d_pcm_u∆ök
(
¢d_pcm_t
 *
pcm
);

493 
	#SND_CHMAP_API_VERSION
 ((1 << 16Ë| (0 << 8Ë| 1)

	)

496 
	e¢d_pcm_chm≠_ty≥
 {

497 
SND_CHMAP_TYPE_NONE
 = 0,

498 
SND_CHMAP_TYPE_FIXED
,

499 
SND_CHMAP_TYPE_VAR
,

500 
SND_CHMAP_TYPE_PAIRED
,

501 
SND_CHMAP_TYPE_LAST
 = 
SND_CHMAP_TYPE_PAIRED
,

505 
	e¢d_pcm_chm≠_posôi⁄
 {

506 
SND_CHMAP_UNKNOWN
 = 0,

507 
SND_CHMAP_NA
,

508 
SND_CHMAP_MONO
,

509 
SND_CHMAP_FL
,

510 
SND_CHMAP_FR
,

511 
SND_CHMAP_RL
,

512 
SND_CHMAP_RR
,

513 
SND_CHMAP_FC
,

514 
SND_CHMAP_LFE
,

515 
SND_CHMAP_SL
,

516 
SND_CHMAP_SR
,

517 
SND_CHMAP_RC
,

518 
SND_CHMAP_FLC
,

519 
SND_CHMAP_FRC
,

520 
SND_CHMAP_RLC
,

521 
SND_CHMAP_RRC
,

522 
SND_CHMAP_FLW
,

523 
SND_CHMAP_FRW
,

524 
SND_CHMAP_FLH
,

525 
SND_CHMAP_FCH
,

526 
SND_CHMAP_FRH
,

527 
SND_CHMAP_TC
,

528 
SND_CHMAP_TFL
,

529 
SND_CHMAP_TFR
,

530 
SND_CHMAP_TFC
,

531 
SND_CHMAP_TRL
,

532 
SND_CHMAP_TRR
,

533 
SND_CHMAP_TRC
,

534 
SND_CHMAP_TFLC
,

535 
SND_CHMAP_TFRC
,

536 
SND_CHMAP_TSL
,

537 
SND_CHMAP_TSR
,

538 
SND_CHMAP_LLFE
,

539 
SND_CHMAP_RLFE
,

540 
SND_CHMAP_BC
,

541 
SND_CHMAP_BLC
,

542 
SND_CHMAP_BRC
,

543 
SND_CHMAP_LAST
 = 
SND_CHMAP_BRC
,

547 
	#SND_CHMAP_POSITION_MASK
 0xffff

	)

550 
	#SND_CHMAP_PHASE_INVERSE
 (0x01 << 16)

	)

552 
	#SND_CHMAP_DRIVER_SPEC
 (0x02 << 16)

	)

555 
	s¢d_pcm_chm≠
 {

556 
ch™√ls
;

557 
pos
[0];

558 } 
	t¢d_pcm_chm≠_t
;

561 
	s¢d_pcm_chm≠_quîy
 {

562 
¢d_pcm_chm≠_ty≥
 
ty≥
;

563 
¢d_pcm_chm≠_t
 
m≠
;

564 } 
	t¢d_pcm_chm≠_quîy_t
;

567 
¢d_pcm_chm≠_quîy_t
 **
¢d_pcm_quîy_chm≠s
(
¢d_pcm_t
 *
pcm
);

568 
¢d_pcm_chm≠_quîy_t
 **
¢d_pcm_quîy_chm≠s_‰om_hw
(
ˇrd
, 
dev
,

569 
subdev
,

570 
¢d_pcm_°ªam_t
 
°ªam
);

571 
¢d_pcm_‰ì_chm≠s
(
¢d_pcm_chm≠_quîy_t
 **
m≠s
);

572 
¢d_pcm_chm≠_t
 *
¢d_pcm_gë_chm≠
(
¢d_pcm_t
 *
pcm
);

573 
¢d_pcm_£t_chm≠
(
¢d_pcm_t
 *
pcm
, c⁄° 
¢d_pcm_chm≠_t
 *
m≠
);

575 c⁄° *
¢d_pcm_chm≠_ty≥_«me
(
¢d_pcm_chm≠_ty≥
 
vÆ
);

576 c⁄° *
¢d_pcm_chm≠_«me
(
¢d_pcm_chm≠_posôi⁄
 
vÆ
);

577 c⁄° *
¢d_pcm_chm≠_l⁄g_«me
(
¢d_pcm_chm≠_posôi⁄
 
vÆ
);

578 
¢d_pcm_chm≠_¥öt
(c⁄° 
¢d_pcm_chm≠_t
 *
m≠
, 
size_t
 
maxÀn
, *
buf
);

579 
¢d_pcm_chm≠_‰om_°rög
(c⁄° *
°r
);

580 
¢d_pcm_chm≠_t
 *
¢d_pcm_chm≠_∑r£_°rög
(c⁄° *
°r
);

589 
¢d_pcm_ªcovî
(
¢d_pcm_t
 *
pcm
, 
îr
, 
sûít
);

590 
¢d_pcm_£t_∑øms
(
¢d_pcm_t
 *
pcm
,

591 
¢d_pcm_f‹m©_t
 
f‹m©
,

592 
¢d_pcm_ac˚ss_t
 
ac˚ss
,

593 
ch™√ls
,

594 
øã
,

595 
so·_ªßm∂e
,

596 
œãncy
);

597 
¢d_pcm_gë_∑øms
(
¢d_pcm_t
 *
pcm
,

598 
¢d_pcm_u‰ames_t
 *
buf„r_size
,

599 
¢d_pcm_u‰ames_t
 *
≥riod_size
);

610 
size_t
 
¢d_pcm_öfo_sizeof
();

615 
	#¢d_pcm_öfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_öfo
)

	)

616 
¢d_pcm_öfo_mÆloc
(
¢d_pcm_öfo_t
 **
±r
);

617 
¢d_pcm_öfo_‰ì
(
¢d_pcm_öfo_t
 *
obj
);

618 
¢d_pcm_öfo_c›y
(
¢d_pcm_öfo_t
 *
d°
, c⁄° snd_pcm_öfo_à*
§c
);

619 
¢d_pcm_öfo_gë_devi˚
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

620 
¢d_pcm_öfo_gë_subdevi˚
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

621 
¢d_pcm_°ªam_t
 
¢d_pcm_öfo_gë_°ªam
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

622 
¢d_pcm_öfo_gë_ˇrd
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

623 c⁄° *
¢d_pcm_öfo_gë_id
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

624 c⁄° *
¢d_pcm_öfo_gë_«me
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

625 c⁄° *
¢d_pcm_öfo_gë_subdevi˚_«me
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

626 
¢d_pcm_˛ass_t
 
¢d_pcm_öfo_gë_˛ass
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

627 
¢d_pcm_sub˛ass_t
 
¢d_pcm_öfo_gë_sub˛ass
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

628 
¢d_pcm_öfo_gë_subdevi˚s_cou¡
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

629 
¢d_pcm_öfo_gë_subdevi˚s_avaû
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

630 
¢d_pcm_sync_id_t
 
¢d_pcm_öfo_gë_sync
(c⁄° 
¢d_pcm_öfo_t
 *
obj
);

631 
¢d_pcm_öfo_£t_devi˚
(
¢d_pcm_öfo_t
 *
obj
, 
vÆ
);

632 
¢d_pcm_öfo_£t_subdevi˚
(
¢d_pcm_öfo_t
 *
obj
, 
vÆ
);

633 
¢d_pcm_öfo_£t_°ªam
(
¢d_pcm_öfo_t
 *
obj
, 
¢d_pcm_°ªam_t
 
vÆ
);

644 
¢d_pcm_hw_∑øms_™y
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

646 
¢d_pcm_hw_∑øms_ˇn_mm≠_ßm∂e_ªsﬁuti⁄
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

647 
¢d_pcm_hw_∑øms_is_doubÀ
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

648 
¢d_pcm_hw_∑øms_is_b©ch
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

649 
¢d_pcm_hw_∑øms_is_block_å™s„r
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

650 
¢d_pcm_hw_∑øms_is_m⁄Ÿ⁄ic
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

651 
¢d_pcm_hw_∑øms_ˇn_ovîønge
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

652 
¢d_pcm_hw_∑øms_ˇn_∑u£
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

653 
¢d_pcm_hw_∑øms_ˇn_ªsume
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

654 
¢d_pcm_hw_∑øms_is_hÆf_du∂ex
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

655 
¢d_pcm_hw_∑øms_is_joöt_du∂ex
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

656 
¢d_pcm_hw_∑øms_ˇn_sync_°¨t
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

657 
¢d_pcm_hw_∑øms_ˇn_dißbÀ_≥riod_wakeup
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

658 
¢d_pcm_hw_∑øms_suµ‹ts_audio_wÆl˛ock_ts
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

659 
¢d_pcm_hw_∑øms_gë_øã_numdí
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
,

660 *
øã_num
,

661 *
øã_dí
);

662 
¢d_pcm_hw_∑øms_gë_sbôs
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

663 
¢d_pcm_hw_∑øms_gë_fifo_size
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

666 
_¢d_pcm_hw_°øãgy
 
	t¢d_pcm_hw_°øãgy_t
;

669 
	s_¢d_pcm_hw_°øãgy_sim∂e_choi˚s_li°
 {

670 
vÆue
;

671 
bad√ss
;

672 } 
	t¢d_pcm_hw_°øãgy_sim∂e_choi˚s_li°_t
;

674 
¢d_pcm_hw_∑øms_°øãgy
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
,

675 c⁄° 
¢d_pcm_hw_°øãgy_t
 *
°øãgy
,

676 
bad√ss_mö
,

677 
bad√ss_max
);

679 
¢d_pcm_hw_°øãgy_‰ì
(
¢d_pcm_hw_°øãgy_t
 *
°øãgy
);

680 
¢d_pcm_hw_°øãgy_sim∂e
(
¢d_pcm_hw_°øãgy_t
 **
°øãgyp
,

681 
bad√ss_mö
,

682 
bad√ss_max
);

683 
¢d_pcm_hw_∑øms_åy_ex∂aö_Áûuª
(
¢d_pcm_t
 *
pcm
,

684 
¢d_pcm_hw_∑øms_t
 *
Áû
,

685 
¢d_pcm_hw_∑øms_t
 *
suc˚ss
,

686 
dïth
,

687 
¢d_ouçut_t
 *
out
);

691 
size_t
 
¢d_pcm_hw_∑øms_sizeof
();

696 
	#¢d_pcm_hw_∑øms_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_hw_∑øms
)

	)

697 
¢d_pcm_hw_∑øms_mÆloc
(
¢d_pcm_hw_∑øms_t
 **
±r
);

698 
¢d_pcm_hw_∑øms_‰ì
(
¢d_pcm_hw_∑øms_t
 *
obj
);

699 
¢d_pcm_hw_∑øms_c›y
(
¢d_pcm_hw_∑øms_t
 *
d°
, c⁄° snd_pcm_hw_∑øms_à*
§c
);

701 #i‡!
deföed
(
ALSA_LIBRARY_BUILD
Ë&& !deföed(
ALSA_PCM_OLD_HW_PARAMS_API
)

703 
¢d_pcm_hw_∑øms_gë_ac˚ss
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_t
 *
_ac˚ss
);

704 
¢d_pcm_hw_∑øms_ã°_ac˚ss
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_t
 
_ac˚ss
);

705 
¢d_pcm_hw_∑øms_£t_ac˚ss
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_t
 
_ac˚ss
);

706 
¢d_pcm_hw_∑øms_£t_ac˚ss_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_t
 *
_ac˚ss
);

707 
¢d_pcm_hw_∑øms_£t_ac˚ss_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_t
 *
_ac˚ss
);

708 
¢d_pcm_hw_∑øms_£t_ac˚ss_mask
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_mask_t
 *
mask
);

709 
¢d_pcm_hw_∑øms_gë_ac˚ss_mask
(
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_ac˚ss_mask_t
 *
mask
);

711 
¢d_pcm_hw_∑øms_gë_f‹m©
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_t
 *
vÆ
);

712 
¢d_pcm_hw_∑øms_ã°_f‹m©
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_t
 
vÆ
);

713 
¢d_pcm_hw_∑øms_£t_f‹m©
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_t
 
vÆ
);

714 
¢d_pcm_hw_∑øms_£t_f‹m©_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_t
 *
f‹m©
);

715 
¢d_pcm_hw_∑øms_£t_f‹m©_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_t
 *
f‹m©
);

716 
¢d_pcm_hw_∑øms_£t_f‹m©_mask
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_mask_t
 *
mask
);

717 
¢d_pcm_hw_∑øms_gë_f‹m©_mask
(
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_f‹m©_mask_t
 *
mask
);

719 
¢d_pcm_hw_∑øms_gë_subf‹m©
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_t
 *
subf‹m©
);

720 
¢d_pcm_hw_∑øms_ã°_subf‹m©
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_t
 
subf‹m©
);

721 
¢d_pcm_hw_∑øms_£t_subf‹m©
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_t
 
subf‹m©
);

722 
¢d_pcm_hw_∑øms_£t_subf‹m©_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_t
 *
subf‹m©
);

723 
¢d_pcm_hw_∑øms_£t_subf‹m©_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_t
 *
subf‹m©
);

724 
¢d_pcm_hw_∑øms_£t_subf‹m©_mask
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_mask_t
 *
mask
);

725 
¢d_pcm_hw_∑øms_gë_subf‹m©_mask
(
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_subf‹m©_mask_t
 *
mask
);

727 
¢d_pcm_hw_∑øms_gë_ch™√ls
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

728 
¢d_pcm_hw_∑øms_gë_ch™√ls_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

729 
¢d_pcm_hw_∑øms_gë_ch™√ls_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

730 
¢d_pcm_hw_∑øms_ã°_ch™√ls
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
);

731 
¢d_pcm_hw_∑øms_£t_ch™√ls
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
);

732 
¢d_pcm_hw_∑øms_£t_ch™√ls_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

733 
¢d_pcm_hw_∑øms_£t_ch™√ls_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

734 
¢d_pcm_hw_∑øms_£t_ch™√ls_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
mö
, *
max
);

735 
¢d_pcm_hw_∑øms_£t_ch™√ls_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

736 
¢d_pcm_hw_∑øms_£t_ch™√ls_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

737 
¢d_pcm_hw_∑øms_£t_ch™√ls_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

739 
¢d_pcm_hw_∑øms_gë_øã
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

740 
¢d_pcm_hw_∑øms_gë_øã_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

741 
¢d_pcm_hw_∑øms_gë_øã_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

742 
¢d_pcm_hw_∑øms_ã°_øã
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

743 
¢d_pcm_hw_∑øms_£t_øã
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

744 
¢d_pcm_hw_∑øms_£t_øã_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

745 
¢d_pcm_hw_∑øms_£t_øã_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

746 
¢d_pcm_hw_∑øms_£t_øã_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
mö
, *
mödú
, *
max
, *
maxdú
);

747 
¢d_pcm_hw_∑øms_£t_øã_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

748 
¢d_pcm_hw_∑øms_£t_øã_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

749 
¢d_pcm_hw_∑øms_£t_øã_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

750 
¢d_pcm_hw_∑øms_£t_øã_ªßm∂e
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
);

751 
¢d_pcm_hw_∑øms_gë_øã_ªßm∂e
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

752 
¢d_pcm_hw_∑øms_£t_exp‹t_buf„r
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
);

753 
¢d_pcm_hw_∑øms_gë_exp‹t_buf„r
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

754 
¢d_pcm_hw_∑øms_£t_≥riod_wakeup
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
);

755 
¢d_pcm_hw_∑øms_gë_≥riod_wakeup
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
);

757 
¢d_pcm_hw_∑øms_gë_≥riod_time
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

758 
¢d_pcm_hw_∑øms_gë_≥riod_time_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

759 
¢d_pcm_hw_∑øms_gë_≥riod_time_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

760 
¢d_pcm_hw_∑øms_ã°_≥riod_time
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

761 
¢d_pcm_hw_∑øms_£t_≥riod_time
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

762 
¢d_pcm_hw_∑øms_£t_≥riod_time_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

763 
¢d_pcm_hw_∑øms_£t_≥riod_time_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

764 
¢d_pcm_hw_∑øms_£t_≥riod_time_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
mö
, *
mödú
, *
max
, *
maxdú
);

765 
¢d_pcm_hw_∑øms_£t_≥riod_time_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

766 
¢d_pcm_hw_∑øms_£t_≥riod_time_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

767 
¢d_pcm_hw_∑øms_£t_≥riod_time_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

769 
¢d_pcm_hw_∑øms_gë_≥riod_size
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
‰ames
, *
dú
);

770 
¢d_pcm_hw_∑øms_gë_≥riod_size_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
‰ames
, *
dú
);

771 
¢d_pcm_hw_∑øms_gë_≥riod_size_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
‰ames
, *
dú
);

772 
¢d_pcm_hw_∑øms_ã°_≥riod_size
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
, 
dú
);

773 
¢d_pcm_hw_∑øms_£t_≥riod_size
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
, 
dú
);

774 
¢d_pcm_hw_∑øms_£t_≥riod_size_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
, *
dú
);

775 
¢d_pcm_hw_∑øms_£t_≥riod_size_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
, *
dú
);

776 
¢d_pcm_hw_∑øms_£t_≥riod_size_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
mö
, *
mödú
, snd_pcm_u‰ames_à*
max
, *
maxdú
);

777 
¢d_pcm_hw_∑øms_£t_≥riod_size_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
, *
dú
);

778 
¢d_pcm_hw_∑øms_£t_≥riod_size_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
, *
dú
);

779 
¢d_pcm_hw_∑øms_£t_≥riod_size_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
, *
dú
);

780 
¢d_pcm_hw_∑øms_£t_≥riod_size_öãgî
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

782 
¢d_pcm_hw_∑øms_gë_≥riods
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

783 
¢d_pcm_hw_∑øms_gë_≥riods_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

784 
¢d_pcm_hw_∑øms_gë_≥riods_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

785 
¢d_pcm_hw_∑øms_ã°_≥riods
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

786 
¢d_pcm_hw_∑øms_£t_≥riods
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

787 
¢d_pcm_hw_∑øms_£t_≥riods_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

788 
¢d_pcm_hw_∑øms_£t_≥riods_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

789 
¢d_pcm_hw_∑øms_£t_≥riods_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
mö
, *
mödú
, *
max
, *
maxdú
);

790 
¢d_pcm_hw_∑øms_£t_≥riods_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

791 
¢d_pcm_hw_∑øms_£t_≥riods_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

792 
¢d_pcm_hw_∑øms_£t_≥riods_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

793 
¢d_pcm_hw_∑øms_£t_≥riods_öãgî
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
);

795 
¢d_pcm_hw_∑øms_gë_buf„r_time
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

796 
¢d_pcm_hw_∑øms_gë_buf„r_time_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

797 
¢d_pcm_hw_∑øms_gë_buf„r_time_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

798 
¢d_pcm_hw_∑øms_ã°_buf„r_time
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

799 
¢d_pcm_hw_∑øms_£t_buf„r_time
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
);

800 
¢d_pcm_hw_∑øms_£t_buf„r_time_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

801 
¢d_pcm_hw_∑øms_£t_buf„r_time_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

802 
¢d_pcm_hw_∑øms_£t_buf„r_time_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
mö
, *
mödú
, *
max
, *
maxdú
);

803 
¢d_pcm_hw_∑øms_£t_buf„r_time_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

804 
¢d_pcm_hw_∑øms_£t_buf„r_time_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

805 
¢d_pcm_hw_∑øms_£t_buf„r_time_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
);

807 
¢d_pcm_hw_∑øms_gë_buf„r_size
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

808 
¢d_pcm_hw_∑øms_gë_buf„r_size_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

809 
¢d_pcm_hw_∑øms_gë_buf„r_size_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

810 
¢d_pcm_hw_∑øms_ã°_buf„r_size
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

811 
¢d_pcm_hw_∑øms_£t_buf„r_size
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

812 
¢d_pcm_hw_∑øms_£t_buf„r_size_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

813 
¢d_pcm_hw_∑øms_£t_buf„r_size_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

814 
¢d_pcm_hw_∑øms_£t_buf„r_size_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
mö
, snd_pcm_u‰ames_à*
max
);

815 
¢d_pcm_hw_∑øms_£t_buf„r_size_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

816 
¢d_pcm_hw_∑øms_£t_buf„r_size_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

817 
¢d_pcm_hw_∑øms_£t_buf„r_size_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

821 
¢d_pcm_hw_∑øms_gë_mö_Æign
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

832 
size_t
 
¢d_pcm_sw_∑øms_sizeof
();

837 
	#¢d_pcm_sw_∑øms_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_sw_∑øms
)

	)

838 
¢d_pcm_sw_∑øms_mÆloc
(
¢d_pcm_sw_∑øms_t
 **
±r
);

839 
¢d_pcm_sw_∑øms_‰ì
(
¢d_pcm_sw_∑øms_t
 *
obj
);

840 
¢d_pcm_sw_∑øms_c›y
(
¢d_pcm_sw_∑øms_t
 *
d°
, c⁄° snd_pcm_sw_∑øms_à*
§c
);

841 
¢d_pcm_sw_∑øms_gë_bound¨y
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

843 #i‡!
deföed
(
ALSA_LIBRARY_BUILD
Ë&& !deföed(
ALSA_PCM_OLD_SW_PARAMS_API
)

845 
¢d_pcm_sw_∑øms_£t_t°amp_mode
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_t°amp_t
 
vÆ
);

846 
¢d_pcm_sw_∑øms_gë_t°amp_mode
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_t°amp_t
 *
vÆ
);

847 
¢d_pcm_sw_∑øms_£t_avaû_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

848 
¢d_pcm_sw_∑øms_gë_avaû_mö
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

849 
¢d_pcm_sw_∑øms_£t_≥riod_evít
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
vÆ
);

850 
¢d_pcm_sw_∑øms_gë_≥riod_evít
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, *
vÆ
);

851 
¢d_pcm_sw_∑øms_£t_°¨t_thªshﬁd
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

852 
¢d_pcm_sw_∑øms_gë_°¨t_thªshﬁd
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑ømsm
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

853 
¢d_pcm_sw_∑øms_£t_°›_thªshﬁd
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

854 
¢d_pcm_sw_∑øms_gë_°›_thªshﬁd
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

855 
¢d_pcm_sw_∑øms_£t_sûí˚_thªshﬁd
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

856 
¢d_pcm_sw_∑øms_gë_sûí˚_thªshﬁd
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

857 
¢d_pcm_sw_∑øms_£t_sûí˚_size
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
);

858 
¢d_pcm_sw_∑øms_gë_sûí˚_size
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
);

865 #i‚de‡
ALSA_LIBRARY_BUILD


866 #i‡
deföed
(
ALSA_PCM_OLD_HW_PARAMS_API
Ë|| deföed(
ALSA_PCM_OLD_SW_PARAMS_API
)

867 
	~"pcm_ﬁd.h
"

878 
size_t
 
¢d_pcm_ac˚ss_mask_sizeof
();

883 
	#¢d_pcm_ac˚ss_mask_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_ac˚ss_mask
)

	)

884 
¢d_pcm_ac˚ss_mask_mÆloc
(
¢d_pcm_ac˚ss_mask_t
 **
±r
);

885 
¢d_pcm_ac˚ss_mask_‰ì
(
¢d_pcm_ac˚ss_mask_t
 *
obj
);

886 
¢d_pcm_ac˚ss_mask_c›y
(
¢d_pcm_ac˚ss_mask_t
 *
d°
, c⁄° snd_pcm_ac˚ss_mask_à*
§c
);

887 
¢d_pcm_ac˚ss_mask_n⁄e
(
¢d_pcm_ac˚ss_mask_t
 *
mask
);

888 
¢d_pcm_ac˚ss_mask_™y
(
¢d_pcm_ac˚ss_mask_t
 *
mask
);

889 
¢d_pcm_ac˚ss_mask_ã°
(c⁄° 
¢d_pcm_ac˚ss_mask_t
 *
mask
, 
¢d_pcm_ac˚ss_t
 
vÆ
);

890 
¢d_pcm_ac˚ss_mask_em±y
(c⁄° 
¢d_pcm_ac˚ss_mask_t
 *
mask
);

891 
¢d_pcm_ac˚ss_mask_£t
(
¢d_pcm_ac˚ss_mask_t
 *
mask
, 
¢d_pcm_ac˚ss_t
 
vÆ
);

892 
¢d_pcm_ac˚ss_mask_ª£t
(
¢d_pcm_ac˚ss_mask_t
 *
mask
, 
¢d_pcm_ac˚ss_t
 
vÆ
);

903 
size_t
 
¢d_pcm_f‹m©_mask_sizeof
();

908 
	#¢d_pcm_f‹m©_mask_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_f‹m©_mask
)

	)

909 
¢d_pcm_f‹m©_mask_mÆloc
(
¢d_pcm_f‹m©_mask_t
 **
±r
);

910 
¢d_pcm_f‹m©_mask_‰ì
(
¢d_pcm_f‹m©_mask_t
 *
obj
);

911 
¢d_pcm_f‹m©_mask_c›y
(
¢d_pcm_f‹m©_mask_t
 *
d°
, c⁄° snd_pcm_f‹m©_mask_à*
§c
);

912 
¢d_pcm_f‹m©_mask_n⁄e
(
¢d_pcm_f‹m©_mask_t
 *
mask
);

913 
¢d_pcm_f‹m©_mask_™y
(
¢d_pcm_f‹m©_mask_t
 *
mask
);

914 
¢d_pcm_f‹m©_mask_ã°
(c⁄° 
¢d_pcm_f‹m©_mask_t
 *
mask
, 
¢d_pcm_f‹m©_t
 
vÆ
);

915 
¢d_pcm_f‹m©_mask_em±y
(c⁄° 
¢d_pcm_f‹m©_mask_t
 *
mask
);

916 
¢d_pcm_f‹m©_mask_£t
(
¢d_pcm_f‹m©_mask_t
 *
mask
, 
¢d_pcm_f‹m©_t
 
vÆ
);

917 
¢d_pcm_f‹m©_mask_ª£t
(
¢d_pcm_f‹m©_mask_t
 *
mask
, 
¢d_pcm_f‹m©_t
 
vÆ
);

928 
size_t
 
¢d_pcm_subf‹m©_mask_sizeof
();

933 
	#¢d_pcm_subf‹m©_mask_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_subf‹m©_mask
)

	)

934 
¢d_pcm_subf‹m©_mask_mÆloc
(
¢d_pcm_subf‹m©_mask_t
 **
±r
);

935 
¢d_pcm_subf‹m©_mask_‰ì
(
¢d_pcm_subf‹m©_mask_t
 *
obj
);

936 
¢d_pcm_subf‹m©_mask_c›y
(
¢d_pcm_subf‹m©_mask_t
 *
d°
, c⁄° snd_pcm_subf‹m©_mask_à*
§c
);

937 
¢d_pcm_subf‹m©_mask_n⁄e
(
¢d_pcm_subf‹m©_mask_t
 *
mask
);

938 
¢d_pcm_subf‹m©_mask_™y
(
¢d_pcm_subf‹m©_mask_t
 *
mask
);

939 
¢d_pcm_subf‹m©_mask_ã°
(c⁄° 
¢d_pcm_subf‹m©_mask_t
 *
mask
, 
¢d_pcm_subf‹m©_t
 
vÆ
);

940 
¢d_pcm_subf‹m©_mask_em±y
(c⁄° 
¢d_pcm_subf‹m©_mask_t
 *
mask
);

941 
¢d_pcm_subf‹m©_mask_£t
(
¢d_pcm_subf‹m©_mask_t
 *
mask
, 
¢d_pcm_subf‹m©_t
 
vÆ
);

942 
¢d_pcm_subf‹m©_mask_ª£t
(
¢d_pcm_subf‹m©_mask_t
 *
mask
, 
¢d_pcm_subf‹m©_t
 
vÆ
);

953 
size_t
 
¢d_pcm_°©us_sizeof
();

958 
	#¢d_pcm_°©us_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_pcm_°©us
)

	)

959 
¢d_pcm_°©us_mÆloc
(
¢d_pcm_°©us_t
 **
±r
);

960 
¢d_pcm_°©us_‰ì
(
¢d_pcm_°©us_t
 *
obj
);

961 
¢d_pcm_°©us_c›y
(
¢d_pcm_°©us_t
 *
d°
, c⁄° snd_pcm_°©us_à*
§c
);

962 
¢d_pcm_°©e_t
 
¢d_pcm_°©us_gë_°©e
(c⁄° 
¢d_pcm_°©us_t
 *
obj
);

963 
¢d_pcm_°©us_gë_åiggî_t°amp
(c⁄° 
¢d_pcm_°©us_t
 *
obj
, 
¢d_time°amp_t
 *
±r
);

964 
¢d_pcm_°©us_gë_åiggî_ht°amp
(c⁄° 
¢d_pcm_°©us_t
 *
obj
, 
¢d_htime°amp_t
 *
±r
);

965 
¢d_pcm_°©us_gë_t°amp
(c⁄° 
¢d_pcm_°©us_t
 *
obj
, 
¢d_time°amp_t
 *
±r
);

966 
¢d_pcm_°©us_gë_ht°amp
(c⁄° 
¢d_pcm_°©us_t
 *
obj
, 
¢d_htime°amp_t
 *
±r
);

967 
¢d_pcm_°©us_gë_audio_ht°amp
(c⁄° 
¢d_pcm_°©us_t
 *
obj
, 
¢d_htime°amp_t
 *
±r
);

968 
¢d_pcm_s‰ames_t
 
¢d_pcm_°©us_gë_dñay
(c⁄° 
¢d_pcm_°©us_t
 *
obj
);

969 
¢d_pcm_u‰ames_t
 
¢d_pcm_°©us_gë_avaû
(c⁄° 
¢d_pcm_°©us_t
 *
obj
);

970 
¢d_pcm_u‰ames_t
 
¢d_pcm_°©us_gë_avaû_max
(c⁄° 
¢d_pcm_°©us_t
 *
obj
);

971 
¢d_pcm_u‰ames_t
 
¢d_pcm_°©us_gë_ovîønge
(c⁄° 
¢d_pcm_°©us_t
 *
obj
);

982 c⁄° *
¢d_pcm_ty≥_«me
(
¢d_pcm_ty≥_t
 
ty≥
);

983 c⁄° *
¢d_pcm_°ªam_«me
(c⁄° 
¢d_pcm_°ªam_t
 
°ªam
);

984 c⁄° *
¢d_pcm_ac˚ss_«me
(c⁄° 
¢d_pcm_ac˚ss_t
 
_ac˚ss
);

985 c⁄° *
¢d_pcm_f‹m©_«me
(c⁄° 
¢d_pcm_f‹m©_t
 
f‹m©
);

986 c⁄° *
¢d_pcm_f‹m©_des¸ùti⁄
(c⁄° 
¢d_pcm_f‹m©_t
 
f‹m©
);

987 c⁄° *
¢d_pcm_subf‹m©_«me
(c⁄° 
¢d_pcm_subf‹m©_t
 
subf‹m©
);

988 c⁄° *
¢d_pcm_subf‹m©_des¸ùti⁄
(c⁄° 
¢d_pcm_subf‹m©_t
 
subf‹m©
);

989 
¢d_pcm_f‹m©_t
 
¢d_pcm_f‹m©_vÆue
(c⁄° * 
«me
);

990 c⁄° *
¢d_pcm_t°amp_mode_«me
(c⁄° 
¢d_pcm_t°amp_t
 
mode
);

991 c⁄° *
¢d_pcm_°©e_«me
(c⁄° 
¢d_pcm_°©e_t
 
°©e
);

1002 
¢d_pcm_dump
(
¢d_pcm_t
 *
pcm
, 
¢d_ouçut_t
 *
out
);

1003 
¢d_pcm_dump_hw_£tup
(
¢d_pcm_t
 *
pcm
, 
¢d_ouçut_t
 *
out
);

1004 
¢d_pcm_dump_sw_£tup
(
¢d_pcm_t
 *
pcm
, 
¢d_ouçut_t
 *
out
);

1005 
¢d_pcm_dump_£tup
(
¢d_pcm_t
 *
pcm
, 
¢d_ouçut_t
 *
out
);

1006 
¢d_pcm_hw_∑øms_dump
(
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
¢d_ouçut_t
 *
out
);

1007 
¢d_pcm_sw_∑øms_dump
(
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_ouçut_t
 *
out
);

1008 
¢d_pcm_°©us_dump
(
¢d_pcm_°©us_t
 *
°©us
, 
¢d_ouçut_t
 *
out
);

1019 
¢d_pcm_mm≠_begö
(
¢d_pcm_t
 *
pcm
,

1020 c⁄° 
¢d_pcm_ch™√l_¨ó_t
 **
¨ós
,

1021 
¢d_pcm_u‰ames_t
 *
off£t
,

1022 
¢d_pcm_u‰ames_t
 *
‰ames
);

1023 
¢d_pcm_s‰ames_t
 
¢d_pcm_mm≠_commô
(
¢d_pcm_t
 *
pcm
,

1024 
¢d_pcm_u‰ames_t
 
off£t
,

1025 
¢d_pcm_u‰ames_t
 
‰ames
);

1026 
¢d_pcm_s‰ames_t
 
¢d_pcm_mm≠_wrôei
(
¢d_pcm_t
 *
pcm
, c⁄° *
buf„r
, 
¢d_pcm_u‰ames_t
 
size
);

1027 
¢d_pcm_s‰ames_t
 
¢d_pcm_mm≠_ªadi
(
¢d_pcm_t
 *
pcm
, *
buf„r
, 
¢d_pcm_u‰ames_t
 
size
);

1028 
¢d_pcm_s‰ames_t
 
¢d_pcm_mm≠_wrôí
(
¢d_pcm_t
 *
pcm
, **
bufs
, 
¢d_pcm_u‰ames_t
 
size
);

1029 
¢d_pcm_s‰ames_t
 
¢d_pcm_mm≠_ªadn
(
¢d_pcm_t
 *
pcm
, **
bufs
, 
¢d_pcm_u‰ames_t
 
size
);

1040 
¢d_pcm_f‹m©_sig√d
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1041 
¢d_pcm_f‹m©_unsig√d
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1042 
¢d_pcm_f‹m©_löór
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1043 
¢d_pcm_f‹m©_Êﬂt
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1044 
¢d_pcm_f‹m©_lôée_ídün
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1045 
¢d_pcm_f‹m©_big_ídün
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1046 
¢d_pcm_f‹m©_˝u_ídün
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1047 
¢d_pcm_f‹m©_width
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1048 
¢d_pcm_f‹m©_physiˇl_width
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1049 
¢d_pcm_f‹m©_t
 
¢d_pcm_buûd_löór_f‹m©
(
width
, 
pwidth
, 
unsignd
, 
big_ídün
);

1050 
ssize_t
 
¢d_pcm_f‹m©_size
(
¢d_pcm_f‹m©_t
 
f‹m©
, 
size_t
 
ßm∂es
);

1051 
u_öt8_t
 
¢d_pcm_f‹m©_sûí˚
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1052 
u_öt16_t
 
¢d_pcm_f‹m©_sûí˚_16
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1053 
u_öt32_t
 
¢d_pcm_f‹m©_sûí˚_32
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1054 
u_öt64_t
 
¢d_pcm_f‹m©_sûí˚_64
(
¢d_pcm_f‹m©_t
 
f‹m©
);

1055 
¢d_pcm_f‹m©_£t_sûí˚
(
¢d_pcm_f‹m©_t
 
f‹m©
, *
buf
, 
ßm∂es
);

1057 
¢d_pcm_s‰ames_t
 
¢d_pcm_byãs_to_‰ames
(
¢d_pcm_t
 *
pcm
, 
ssize_t
 
byãs
);

1058 
ssize_t
 
¢d_pcm_‰ames_to_byãs
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_s‰ames_t
 
‰ames
);

1059 
¢d_pcm_byãs_to_ßm∂es
(
¢d_pcm_t
 *
pcm
, 
ssize_t
 
byãs
);

1060 
ssize_t
 
¢d_pcm_ßm∂es_to_byãs
(
¢d_pcm_t
 *
pcm
, 
ßm∂es
);

1062 
¢d_pcm_¨ó_sûí˚
(c⁄° 
¢d_pcm_ch™√l_¨ó_t
 *
d°_ch™√l
, 
¢d_pcm_u‰ames_t
 
d°_off£t
,

1063 
ßm∂es
, 
¢d_pcm_f‹m©_t
 
f‹m©
);

1064 
¢d_pcm_¨ós_sûí˚
(c⁄° 
¢d_pcm_ch™√l_¨ó_t
 *
d°_ch™√ls
, 
¢d_pcm_u‰ames_t
 
d°_off£t
,

1065 
ch™√ls
, 
¢d_pcm_u‰ames_t
 
‰ames
, 
¢d_pcm_f‹m©_t
 
f‹m©
);

1066 
¢d_pcm_¨ó_c›y
(c⁄° 
¢d_pcm_ch™√l_¨ó_t
 *
d°_ch™√l
, 
¢d_pcm_u‰ames_t
 
d°_off£t
,

1067 c⁄° 
¢d_pcm_ch™√l_¨ó_t
 *
§c_ch™√l
, 
¢d_pcm_u‰ames_t
 
§c_off£t
,

1068 
ßm∂es
, 
¢d_pcm_f‹m©_t
 
f‹m©
);

1069 
¢d_pcm_¨ós_c›y
(c⁄° 
¢d_pcm_ch™√l_¨ó_t
 *
d°_ch™√ls
, 
¢d_pcm_u‰ames_t
 
d°_off£t
,

1070 c⁄° 
¢d_pcm_ch™√l_¨ó_t
 *
§c_ch™√ls
, 
¢d_pcm_u‰ames_t
 
§c_off£t
,

1071 
ch™√ls
, 
¢d_pcm_u‰ames_t
 
‰ames
, 
¢d_pcm_f‹m©_t
 
f‹m©
);

1083 
	e_¢d_pcm_hook_ty≥
 {

1084 
SND_PCM_HOOK_TYPE_HW_PARAMS
 = 0,

1085 
SND_PCM_HOOK_TYPE_HW_FREE
,

1086 
SND_PCM_HOOK_TYPE_CLOSE
,

1087 
SND_PCM_HOOK_TYPE_LAST
 = 
SND_PCM_HOOK_TYPE_CLOSE


1088 } 
	t¢d_pcm_hook_ty≥_t
;

1091 
_¢d_pcm_hook
 
	t¢d_pcm_hook_t
;

1093 (*
¢d_pcm_hook_func_t
)(
	t¢d_pcm_hook_t
 *
	thook
);

1094 
¢d_pcm_t
 *
¢d_pcm_hook_gë_pcm
(
¢d_pcm_hook_t
 *
hook
);

1095 *
¢d_pcm_hook_gë_¥iv©e
(
¢d_pcm_hook_t
 *
hook
);

1096 
¢d_pcm_hook_£t_¥iv©e
(
¢d_pcm_hook_t
 *
hook
, *
¥iv©e_d©a
);

1097 
¢d_pcm_hook_add
(
¢d_pcm_hook_t
 **
hookp
, 
¢d_pcm_t
 *
pcm
,

1098 
¢d_pcm_hook_ty≥_t
 
ty≥
,

1099 
¢d_pcm_hook_func_t
 
func
, *
¥iv©e_d©a
);

1100 
¢d_pcm_hook_ªmove
(
¢d_pcm_hook_t
 *
hook
);

1112 
	s_¢d_pcm_sc›e_›s
 {

1116 (*
íabÀ
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1120 (*
dißbÀ
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1124 (*
°¨t
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1128 (*
°›
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1132 (*
upd©e
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1136 (*
ª£t
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1140 (*
˛o£
)(
¢d_pcm_sc›e_t
 *
sc›e
);

1141 } 
	t¢d_pcm_sc›e_›s_t
;

1143 
¢d_pcm_u‰ames_t
 
¢d_pcm_mëî_gë_bufsize
(
¢d_pcm_t
 *
pcm
);

1144 
¢d_pcm_mëî_gë_ch™√ls
(
¢d_pcm_t
 *
pcm
);

1145 
¢d_pcm_mëî_gë_øã
(
¢d_pcm_t
 *
pcm
);

1146 
¢d_pcm_u‰ames_t
 
¢d_pcm_mëî_gë_now
(
¢d_pcm_t
 *
pcm
);

1147 
¢d_pcm_u‰ames_t
 
¢d_pcm_mëî_gë_bound¨y
(
¢d_pcm_t
 *
pcm
);

1148 
¢d_pcm_mëî_add_sc›e
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sc›e_t
 *
sc›e
);

1149 
¢d_pcm_sc›e_t
 *
¢d_pcm_mëî_£¨ch_sc›e
(
¢d_pcm_t
 *
pcm
, c⁄° *
«me
);

1150 
¢d_pcm_sc›e_mÆloc
(
¢d_pcm_sc›e_t
 **
±r
);

1151 
¢d_pcm_sc›e_£t_›s
(
¢d_pcm_sc›e_t
 *
sc›e
,

1152 c⁄° 
¢d_pcm_sc›e_›s_t
 *
vÆ
);

1153 
¢d_pcm_sc›e_£t_«me
(
¢d_pcm_sc›e_t
 *
sc›e
, c⁄° *
vÆ
);

1154 c⁄° *
¢d_pcm_sc›e_gë_«me
(
¢d_pcm_sc›e_t
 *
sc›e
);

1155 *
¢d_pcm_sc›e_gë_ˇŒback_¥iv©e
(
¢d_pcm_sc›e_t
 *
sc›e
);

1156 
¢d_pcm_sc›e_£t_ˇŒback_¥iv©e
(
¢d_pcm_sc›e_t
 *
sc›e
, *
vÆ
);

1157 
¢d_pcm_sc›e_s16_›í
(
¢d_pcm_t
 *
pcm
, c⁄° *
«me
,

1158 
¢d_pcm_sc›e_t
 **
sc›ï
);

1159 
öt16_t
 *
¢d_pcm_sc›e_s16_gë_ch™√l_buf„r
(
¢d_pcm_sc›e_t
 *
sc›e
,

1160 
ch™√l
);

1172 
	e_¢d_•cm_œãncy
 {

1175 
SND_SPCM_LATENCY_STANDARD
 = 0,

1178 
SND_SPCM_LATENCY_MEDIUM
,

1181 
SND_SPCM_LATENCY_REALTIME


1182 } 
	t¢d_•cm_œãncy_t
;

1185 
	e_¢d_•cm_xrun_ty≥
 {

1187 
SND_SPCM_XRUN_IGNORE
 = 0,

1189 
SND_SPCM_XRUN_STOP


1190 } 
	t¢d_•cm_xrun_ty≥_t
;

1193 
	e_¢d_•cm_du∂ex_ty≥
 {

1195 
SND_SPCM_DUPLEX_LIBERAL
 = 0,

1197 
SND_SPCM_DUPLEX_PEDANTIC


1198 } 
	t¢d_•cm_du∂ex_ty≥_t
;

1200 
¢d_•cm_öô
(
¢d_pcm_t
 *
pcm
,

1201 
øã
,

1202 
ch™√ls
,

1203 
¢d_pcm_f‹m©_t
 
f‹m©
,

1204 
¢d_pcm_subf‹m©_t
 
subf‹m©
,

1205 
¢d_•cm_œãncy_t
 
œãncy
,

1206 
¢d_pcm_ac˚ss_t
 
_ac˚ss
,

1207 
¢d_•cm_xrun_ty≥_t
 
xrun_ty≥
);

1209 
¢d_•cm_öô_du∂ex
(
¢d_pcm_t
 *
∂ayback_pcm
,

1210 
¢d_pcm_t
 *
ˇ±uª_pcm
,

1211 
øã
,

1212 
ch™√ls
,

1213 
¢d_pcm_f‹m©_t
 
f‹m©
,

1214 
¢d_pcm_subf‹m©_t
 
subf‹m©
,

1215 
¢d_•cm_œãncy_t
 
œãncy
,

1216 
¢d_pcm_ac˚ss_t
 
_ac˚ss
,

1217 
¢d_•cm_xrun_ty≥_t
 
xrun_ty≥
,

1218 
¢d_•cm_du∂ex_ty≥_t
 
du∂ex_ty≥
);

1220 
¢d_•cm_öô_gë_∑øms
(
¢d_pcm_t
 *
pcm
,

1221 *
øã
,

1222 
¢d_pcm_u‰ames_t
 *
buf„r_size
,

1223 
¢d_pcm_u‰ames_t
 *
≥riod_size
);

1235 c⁄° *
¢d_pcm_°¨t_mode_«me
(
¢d_pcm_°¨t_t
 
mode
Ë
__©åibuã__
((
dïªˇãd
));

1236 c⁄° *
¢d_pcm_xrun_mode_«me
(
¢d_pcm_xrun_t
 
mode
Ë
__©åibuã__
((
dïªˇãd
));

1237 
¢d_pcm_sw_∑øms_£t_°¨t_mode
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_°¨t_t
 
vÆ
Ë
__©åibuã__
((
dïªˇãd
));

1238 
¢d_pcm_°¨t_t
 
¢d_pcm_sw_∑øms_gë_°¨t_mode
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
Ë
__©åibuã__
((
dïªˇãd
));

1239 
¢d_pcm_sw_∑øms_£t_xrun_mode
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_xrun_t
 
vÆ
Ë
__©åibuã__
((
dïªˇãd
));

1240 
¢d_pcm_xrun_t
 
¢d_pcm_sw_∑øms_gë_xrun_mode
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
Ë
__©åibuã__
((
dïªˇãd
));

1241 #i‡!
deföed
(
ALSA_LIBRARY_BUILD
Ë&& !deföed(
ALSA_PCM_OLD_SW_PARAMS_API
)

1242 
¢d_pcm_sw_∑øms_£t_x„r_Æign
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 
vÆ
Ë
__©åibuã__
((
dïªˇãd
));

1243 
¢d_pcm_sw_∑øms_gë_x„r_Æign
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
¢d_pcm_u‰ames_t
 *
vÆ
Ë
__©åibuã__
((
dïªˇãd
));

1244 
¢d_pcm_sw_∑øms_£t_¶ìp_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_sw_∑øms_t
 *
∑øms
, 
vÆ
Ë
__©åibuã__
((
dïªˇãd
));

1245 
¢d_pcm_sw_∑øms_gë_¶ìp_mö
(c⁄° 
¢d_pcm_sw_∑øms_t
 *
∑øms
, *
vÆ
Ë
__©åibuã__
((
dïªˇãd
));

1247 #i‡!
deföed
(
ALSA_LIBRARY_BUILD
Ë&& !deföed(
ALSA_PCM_OLD_HW_PARAMS_API
)

1248 
¢d_pcm_hw_∑øms_gë_tick_time
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1249 
¢d_pcm_hw_∑øms_gë_tick_time_mö
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1250 
¢d_pcm_hw_∑øms_gë_tick_time_max
(c⁄° 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1251 
¢d_pcm_hw_∑øms_ã°_tick_time
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
Ë
__©åibuã__
((
dïªˇãd
));

1252 
¢d_pcm_hw_∑øms_£t_tick_time
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, 
vÆ
, 
dú
Ë
__©åibuã__
((
dïªˇãd
));

1253 
¢d_pcm_hw_∑øms_£t_tick_time_mö
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1254 
¢d_pcm_hw_∑øms_£t_tick_time_max
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1255 
¢d_pcm_hw_∑øms_£t_tick_time_mömax
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
mö
, *
mödú
, *
max
, *
maxdú
Ë
__©åibuã__
((
dïªˇãd
));

1256 
¢d_pcm_hw_∑øms_£t_tick_time_√¨
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1257 
¢d_pcm_hw_∑øms_£t_tick_time_fú°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1258 
¢d_pcm_hw_∑øms_£t_tick_time_œ°
(
¢d_pcm_t
 *
pcm
, 
¢d_pcm_hw_∑øms_t
 *
∑øms
, *
vÆ
, *
dú
Ë
__©åibuã__
((
dïªˇãd
));

1263 #ifde‡
__˝lu•lus


	@/usr/include/alsa/rawmidi.h

28 #i‚de‡
__ALSA_RAWMIDI_H


29 
	#__ALSA_RAWMIDI_H


	)

31 #ifde‡
__˝lu•lus


42 
	#SND_RAWMIDI_DLSYM_VERSION
 
_dlsym_øwmidi_001


	)

45 
_¢d_øwmidi_öfo
 
	t¢d_øwmidi_öfo_t
;

47 
_¢d_øwmidi_∑øms
 
	t¢d_øwmidi_∑øms_t
;

49 
_¢d_øwmidi_°©us
 
	t¢d_øwmidi_°©us_t
;

52 
	e_¢d_øwmidi_°ªam
 {

54 
SND_RAWMIDI_STREAM_OUTPUT
 = 0,

56 
SND_RAWMIDI_STREAM_INPUT
,

57 
SND_RAWMIDI_STREAM_LAST
 = 
SND_RAWMIDI_STREAM_INPUT


58 } 
	t¢d_øwmidi_°ªam_t
;

61 
	#SND_RAWMIDI_APPEND
 0x0001

	)

63 
	#SND_RAWMIDI_NONBLOCK
 0x0002

	)

65 
	#SND_RAWMIDI_SYNC
 0x0004

	)

68 
_¢d_øwmidi
 
	t¢d_øwmidi_t
;

71 
	e_¢d_øwmidi_ty≥
 {

73 
SND_RAWMIDI_TYPE_HW
,

75 
SND_RAWMIDI_TYPE_SHM
,

77 
SND_RAWMIDI_TYPE_INET
,

79 
SND_RAWMIDI_TYPE_VIRTUAL


80 } 
	t¢d_øwmidi_ty≥_t
;

82 
¢d_øwmidi_›í
(
¢d_øwmidi_t
 **
ö_rmidi
, snd_øwmidi_à**
out_rmidi
,

83 c⁄° *
«me
, 
mode
);

84 
¢d_øwmidi_›í_lc⁄f
(
¢d_øwmidi_t
 **
ö_rmidi
, snd_øwmidi_à**
out_rmidi
,

85 c⁄° *
«me
, 
mode
, 
¢d_c⁄fig_t
 *
lc⁄f
);

86 
¢d_øwmidi_˛o£
(
¢d_øwmidi_t
 *
rmidi
);

87 
¢d_øwmidi_pﬁl_des¸ùt‹s_cou¡
(
¢d_øwmidi_t
 *
rmidi
);

88 
¢d_øwmidi_pﬁl_des¸ùt‹s
(
¢d_øwmidi_t
 *
rmidi
, 
pﬁlfd
 *
pfds
, 
•a˚
);

89 
¢d_øwmidi_pﬁl_des¸ùt‹s_ªvíts
(
¢d_øwmidi_t
 *
øwmidi
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvít
);

90 
¢d_øwmidi_n⁄block
(
¢d_øwmidi_t
 *
rmidi
, 
n⁄block
);

91 
size_t
 
¢d_øwmidi_öfo_sizeof
();

96 
	#¢d_øwmidi_öfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_øwmidi_öfo
)

	)

97 
¢d_øwmidi_öfo_mÆloc
(
¢d_øwmidi_öfo_t
 **
±r
);

98 
¢d_øwmidi_öfo_‰ì
(
¢d_øwmidi_öfo_t
 *
obj
);

99 
¢d_øwmidi_öfo_c›y
(
¢d_øwmidi_öfo_t
 *
d°
, c⁄° snd_øwmidi_öfo_à*
§c
);

100 
¢d_øwmidi_öfo_gë_devi˚
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

101 
¢d_øwmidi_öfo_gë_subdevi˚
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

102 
¢d_øwmidi_°ªam_t
 
¢d_øwmidi_öfo_gë_°ªam
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

103 
¢d_øwmidi_öfo_gë_ˇrd
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

104 
¢d_øwmidi_öfo_gë_Êags
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

105 c⁄° *
¢d_øwmidi_öfo_gë_id
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

106 c⁄° *
¢d_øwmidi_öfo_gë_«me
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

107 c⁄° *
¢d_øwmidi_öfo_gë_subdevi˚_«me
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

108 
¢d_øwmidi_öfo_gë_subdevi˚s_cou¡
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

109 
¢d_øwmidi_öfo_gë_subdevi˚s_avaû
(c⁄° 
¢d_øwmidi_öfo_t
 *
obj
);

110 
¢d_øwmidi_öfo_£t_devi˚
(
¢d_øwmidi_öfo_t
 *
obj
, 
vÆ
);

111 
¢d_øwmidi_öfo_£t_subdevi˚
(
¢d_øwmidi_öfo_t
 *
obj
, 
vÆ
);

112 
¢d_øwmidi_öfo_£t_°ªam
(
¢d_øwmidi_öfo_t
 *
obj
, 
¢d_øwmidi_°ªam_t
 
vÆ
);

113 
¢d_øwmidi_öfo
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_öfo_t
 * 
öfo
);

114 
size_t
 
¢d_øwmidi_∑øms_sizeof
();

119 
	#¢d_øwmidi_∑øms_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_øwmidi_∑øms
)

	)

120 
¢d_øwmidi_∑øms_mÆloc
(
¢d_øwmidi_∑øms_t
 **
±r
);

121 
¢d_øwmidi_∑øms_‰ì
(
¢d_øwmidi_∑øms_t
 *
obj
);

122 
¢d_øwmidi_∑øms_c›y
(
¢d_øwmidi_∑øms_t
 *
d°
, c⁄° snd_øwmidi_∑øms_à*
§c
);

123 
¢d_øwmidi_∑øms_£t_buf„r_size
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_∑øms_t
 *
∑øms
, 
size_t
 
vÆ
);

124 
size_t
 
¢d_øwmidi_∑øms_gë_buf„r_size
(c⁄° 
¢d_øwmidi_∑øms_t
 *
∑øms
);

125 
¢d_øwmidi_∑øms_£t_avaû_mö
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_∑øms_t
 *
∑øms
, 
size_t
 
vÆ
);

126 
size_t
 
¢d_øwmidi_∑øms_gë_avaû_mö
(c⁄° 
¢d_øwmidi_∑øms_t
 *
∑øms
);

127 
¢d_øwmidi_∑øms_£t_no_a˘ive_£nsög
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_∑øms_t
 *
∑øms
, 
vÆ
);

128 
¢d_øwmidi_∑øms_gë_no_a˘ive_£nsög
(c⁄° 
¢d_øwmidi_∑øms_t
 *
∑øms
);

129 
¢d_øwmidi_∑øms
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_∑øms_t
 * 
∑øms
);

130 
¢d_øwmidi_∑øms_cuºít
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_∑øms_t
 *
∑øms
);

131 
size_t
 
¢d_øwmidi_°©us_sizeof
();

136 
	#¢d_øwmidi_°©us_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_øwmidi_°©us
)

	)

137 
¢d_øwmidi_°©us_mÆloc
(
¢d_øwmidi_°©us_t
 **
±r
);

138 
¢d_øwmidi_°©us_‰ì
(
¢d_øwmidi_°©us_t
 *
obj
);

139 
¢d_øwmidi_°©us_c›y
(
¢d_øwmidi_°©us_t
 *
d°
, c⁄° snd_øwmidi_°©us_à*
§c
);

140 
¢d_øwmidi_°©us_gë_t°amp
(c⁄° 
¢d_øwmidi_°©us_t
 *
obj
, 
¢d_htime°amp_t
 *
±r
);

141 
size_t
 
¢d_øwmidi_°©us_gë_avaû
(c⁄° 
¢d_øwmidi_°©us_t
 *
obj
);

142 
size_t
 
¢d_øwmidi_°©us_gë_xruns
(c⁄° 
¢d_øwmidi_°©us_t
 *
obj
);

143 
¢d_øwmidi_°©us
(
¢d_øwmidi_t
 *
rmidi
, 
¢d_øwmidi_°©us_t
 * 
°©us
);

144 
¢d_øwmidi_døö
(
¢d_øwmidi_t
 *
rmidi
);

145 
¢d_øwmidi_dr›
(
¢d_øwmidi_t
 *
rmidi
);

146 
ssize_t
 
¢d_øwmidi_wrôe
(
¢d_øwmidi_t
 *
rmidi
, c⁄° *
buf„r
, 
size_t
 
size
);

147 
ssize_t
 
¢d_øwmidi_ªad
(
¢d_øwmidi_t
 *
rmidi
, *
buf„r
, 
size_t
 
size
);

148 c⁄° *
¢d_øwmidi_«me
(
¢d_øwmidi_t
 *
rmidi
);

149 
¢d_øwmidi_ty≥_t
 
¢d_øwmidi_ty≥
(
¢d_øwmidi_t
 *
rmidi
);

150 
¢d_øwmidi_°ªam_t
 
¢d_øwmidi_°ªam
(
¢d_øwmidi_t
 *
øwmidi
);

154 #ifde‡
__˝lu•lus


	@/usr/include/alsa/seq.h

29 #i‚de‡
__ALSA_SEQ_H


30 
	#__ALSA_SEQ_H


	)

32 #ifde‡
__˝lu•lus


44 
	#SND_SEQ_DLSYM_VERSION
 
_dlsym_£q_001


	)

47 
_¢d_£q
 
	t¢d_£q_t
;

52 
	#SND_SEQ_OPEN_OUTPUT
 1

	)

53 
	#SND_SEQ_OPEN_INPUT
 2

	)

54 
	#SND_SEQ_OPEN_DUPLEX
 (
SND_SEQ_OPEN_OUTPUT
|
SND_SEQ_OPEN_INPUT
Ë

	)

59 
	#SND_SEQ_NONBLOCK
 0x0001

	)

62 
	e_¢d_£q_ty≥
 {

63 
SND_SEQ_TYPE_HW
,

64 
SND_SEQ_TYPE_SHM
,

65 
SND_SEQ_TYPE_INET


66 } 
	t¢d_£q_ty≥_t
;

69 
	#SND_SEQ_ADDRESS_UNKNOWN
 253

	)

70 
	#SND_SEQ_ADDRESS_SUBSCRIBERS
 254

	)

71 
	#SND_SEQ_ADDRESS_BROADCAST
 255

	)

74 
	#SND_SEQ_CLIENT_SYSTEM
 0

	)

78 
¢d_£q_›í
(
¢d_£q_t
 **
h™dÀ
, c⁄° *
«me
, 
°ªams
, 
mode
);

79 
¢d_£q_›í_lc⁄f
(
¢d_£q_t
 **
h™dÀ
, c⁄° *
«me
, 
°ªams
, 
mode
, 
¢d_c⁄fig_t
 *
lc⁄f
);

80 c⁄° *
¢d_£q_«me
(
¢d_£q_t
 *
£q
);

81 
¢d_£q_ty≥_t
 
¢d_£q_ty≥
(
¢d_£q_t
 *
£q
);

82 
¢d_£q_˛o£
(
¢d_£q_t
 *
h™dÀ
);

83 
¢d_£q_pﬁl_des¸ùt‹s_cou¡
(
¢d_£q_t
 *
h™dÀ
, 
evíts
);

84 
¢d_£q_pﬁl_des¸ùt‹s
(
¢d_£q_t
 *
h™dÀ
, 
pﬁlfd
 *
pfds
, 
•a˚
, 
evíts
);

85 
¢d_£q_pﬁl_des¸ùt‹s_ªvíts
(
¢d_£q_t
 *
£q
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

86 
¢d_£q_n⁄block
(
¢d_£q_t
 *
h™dÀ
, 
n⁄block
);

87 
¢d_£q_˛õ¡_id
(
¢d_£q_t
 *
h™dÀ
);

89 
size_t
 
¢d_£q_gë_ouçut_buf„r_size
(
¢d_£q_t
 *
h™dÀ
);

90 
size_t
 
¢d_£q_gë_öput_buf„r_size
(
¢d_£q_t
 *
h™dÀ
);

91 
¢d_£q_£t_ouçut_buf„r_size
(
¢d_£q_t
 *
h™dÀ
, 
size_t
 
size
);

92 
¢d_£q_£t_öput_buf„r_size
(
¢d_£q_t
 *
h™dÀ
, 
size_t
 
size
);

95 
_¢d_£q_sy°em_öfo
 
	t¢d_£q_sy°em_öfo_t
;

97 
size_t
 
¢d_£q_sy°em_öfo_sizeof
();

99 
	#¢d_£q_sy°em_öfo_Æloˇ
(
±r
) \

100 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_sy°em_öfo
)

	)

101 
¢d_£q_sy°em_öfo_mÆloc
(
¢d_£q_sy°em_öfo_t
 **
±r
);

102 
¢d_£q_sy°em_öfo_‰ì
(
¢d_£q_sy°em_öfo_t
 *
±r
);

103 
¢d_£q_sy°em_öfo_c›y
(
¢d_£q_sy°em_öfo_t
 *
d°
, c⁄° snd_£q_sy°em_öfo_à*
§c
);

105 
¢d_£q_sy°em_öfo_gë_queues
(c⁄° 
¢d_£q_sy°em_öfo_t
 *
öfo
);

106 
¢d_£q_sy°em_öfo_gë_˛õ¡s
(c⁄° 
¢d_£q_sy°em_öfo_t
 *
öfo
);

107 
¢d_£q_sy°em_öfo_gë_p‹ts
(c⁄° 
¢d_£q_sy°em_öfo_t
 *
öfo
);

108 
¢d_£q_sy°em_öfo_gë_ch™√ls
(c⁄° 
¢d_£q_sy°em_öfo_t
 *
öfo
);

109 
¢d_£q_sy°em_öfo_gë_cur_˛õ¡s
(c⁄° 
¢d_£q_sy°em_öfo_t
 *
öfo
);

110 
¢d_£q_sy°em_öfo_gë_cur_queues
(c⁄° 
¢d_£q_sy°em_öfo_t
 *
öfo
);

112 
¢d_£q_sy°em_öfo
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_sy°em_öfo_t
 *
öfo
);

125 
_¢d_£q_˛õ¡_öfo
 
	t¢d_£q_˛õ¡_öfo_t
;

128 
	e¢d_£q_˛õ¡_ty≥
 {

129 
SND_SEQ_USER_CLIENT
 = 1,

130 
SND_SEQ_KERNEL_CLIENT
 = 2

131 } 
	t¢d_£q_˛õ¡_ty≥_t
;

133 
size_t
 
¢d_£q_˛õ¡_öfo_sizeof
();

135 
	#¢d_£q_˛õ¡_öfo_Æloˇ
(
±r
) \

136 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_˛õ¡_öfo
)

	)

137 
¢d_£q_˛õ¡_öfo_mÆloc
(
¢d_£q_˛õ¡_öfo_t
 **
±r
);

138 
¢d_£q_˛õ¡_öfo_‰ì
(
¢d_£q_˛õ¡_öfo_t
 *
±r
);

139 
¢d_£q_˛õ¡_öfo_c›y
(
¢d_£q_˛õ¡_öfo_t
 *
d°
, c⁄° snd_£q_˛õ¡_öfo_à*
§c
);

141 
¢d_£q_˛õ¡_öfo_gë_˛õ¡
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

142 
¢d_£q_˛õ¡_ty≥_t
 
¢d_£q_˛õ¡_öfo_gë_ty≥
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

143 c⁄° *
¢d_£q_˛õ¡_öfo_gë_«me
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

144 
¢d_£q_˛õ¡_öfo_gë_brﬂdˇ°_fûãr
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

145 
¢d_£q_˛õ¡_öfo_gë_îr‹_boun˚
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

146 c⁄° *
¢d_£q_˛õ¡_öfo_gë_evít_fûãr
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

147 
¢d_£q_˛õ¡_öfo_gë_num_p‹ts
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

148 
¢d_£q_˛õ¡_öfo_gë_evít_lo°
(c⁄° 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

150 
¢d_£q_˛õ¡_öfo_£t_˛õ¡
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, 
˛õ¡
);

151 
¢d_£q_˛õ¡_öfo_£t_«me
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, c⁄° *
«me
);

152 
¢d_£q_˛õ¡_öfo_£t_brﬂdˇ°_fûãr
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, 
vÆ
);

153 
¢d_£q_˛õ¡_öfo_£t_îr‹_boun˚
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, 
vÆ
);

154 
¢d_£q_˛õ¡_öfo_£t_evít_fûãr
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, *
fûãr
);

156 
¢d_£q_˛õ¡_öfo_evít_fûãr_˛ór
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

157 
¢d_£q_˛õ¡_öfo_evít_fûãr_add
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, 
evít_ty≥
);

158 
¢d_£q_˛õ¡_öfo_evít_fûãr_dñ
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, 
evít_ty≥
);

159 
¢d_£q_˛õ¡_öfo_evít_fûãr_check
(
¢d_£q_˛õ¡_öfo_t
 *
öfo
, 
evít_ty≥
);

161 
¢d_£q_gë_˛õ¡_öfo
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

162 
¢d_£q_gë_™y_˛õ¡_öfo
(
¢d_£q_t
 *
h™dÀ
, 
˛õ¡
, 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

163 
¢d_£q_£t_˛õ¡_öfo
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

164 
¢d_£q_quîy_√xt_˛õ¡
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_˛õ¡_öfo_t
 *
öfo
);

170 
_¢d_£q_˛õ¡_poﬁ
 
	t¢d_£q_˛õ¡_poﬁ_t
;

172 
size_t
 
¢d_£q_˛õ¡_poﬁ_sizeof
();

174 
	#¢d_£q_˛õ¡_poﬁ_Æloˇ
(
±r
) \

175 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_˛õ¡_poﬁ
)

	)

176 
¢d_£q_˛õ¡_poﬁ_mÆloc
(
¢d_£q_˛õ¡_poﬁ_t
 **
±r
);

177 
¢d_£q_˛õ¡_poﬁ_‰ì
(
¢d_£q_˛õ¡_poﬁ_t
 *
±r
);

178 
¢d_£q_˛õ¡_poﬁ_c›y
(
¢d_£q_˛õ¡_poﬁ_t
 *
d°
, c⁄° snd_£q_˛õ¡_poﬁ_à*
§c
);

180 
¢d_£q_˛õ¡_poﬁ_gë_˛õ¡
(c⁄° 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

181 
size_t
 
¢d_£q_˛õ¡_poﬁ_gë_ouçut_poﬁ
(c⁄° 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

182 
size_t
 
¢d_£q_˛õ¡_poﬁ_gë_öput_poﬁ
(c⁄° 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

183 
size_t
 
¢d_£q_˛õ¡_poﬁ_gë_ouçut_room
(c⁄° 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

184 
size_t
 
¢d_£q_˛õ¡_poﬁ_gë_ouçut_‰ì
(c⁄° 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

185 
size_t
 
¢d_£q_˛õ¡_poﬁ_gë_öput_‰ì
(c⁄° 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

186 
¢d_£q_˛õ¡_poﬁ_£t_ouçut_poﬁ
(
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
, 
size_t
 
size
);

187 
¢d_£q_˛õ¡_poﬁ_£t_öput_poﬁ
(
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
, 
size_t
 
size
);

188 
¢d_£q_˛õ¡_poﬁ_£t_ouçut_room
(
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
, 
size_t
 
size
);

190 
¢d_£q_gë_˛õ¡_poﬁ
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

191 
¢d_£q_£t_˛õ¡_poﬁ
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_˛õ¡_poﬁ_t
 *
öfo
);

205 
_¢d_£q_p‹t_öfo
 
	t¢d_£q_p‹t_öfo_t
;

208 
	#SND_SEQ_PORT_SYSTEM_TIMER
 0

	)

209 
	#SND_SEQ_PORT_SYSTEM_ANNOUNCE
 1

	)

212 
	#SND_SEQ_PORT_CAP_READ
 (1<<0Ë

	)

213 
	#SND_SEQ_PORT_CAP_WRITE
 (1<<1Ë

	)

215 
	#SND_SEQ_PORT_CAP_SYNC_READ
 (1<<2Ë

	)

216 
	#SND_SEQ_PORT_CAP_SYNC_WRITE
 (1<<3Ë

	)

218 
	#SND_SEQ_PORT_CAP_DUPLEX
 (1<<4Ë

	)

220 
	#SND_SEQ_PORT_CAP_SUBS_READ
 (1<<5Ë

	)

221 
	#SND_SEQ_PORT_CAP_SUBS_WRITE
 (1<<6Ë

	)

222 
	#SND_SEQ_PORT_CAP_NO_EXPORT
 (1<<7Ë

	)

226 
	#SND_SEQ_PORT_TYPE_SPECIFIC
 (1<<0)

	)

228 
	#SND_SEQ_PORT_TYPE_MIDI_GENERIC
 (1<<1)

	)

230 
	#SND_SEQ_PORT_TYPE_MIDI_GM
 (1<<2)

	)

232 
	#SND_SEQ_PORT_TYPE_MIDI_GS
 (1<<3)

	)

234 
	#SND_SEQ_PORT_TYPE_MIDI_XG
 (1<<4)

	)

236 
	#SND_SEQ_PORT_TYPE_MIDI_MT32
 (1<<5)

	)

238 
	#SND_SEQ_PORT_TYPE_MIDI_GM2
 (1<<6)

	)

241 
	#SND_SEQ_PORT_TYPE_SYNTH
 (1<<10)

	)

244 
	#SND_SEQ_PORT_TYPE_DIRECT_SAMPLE
 (1<<11)

	)

247 
	#SND_SEQ_PORT_TYPE_SAMPLE
 (1<<12)

	)

249 
	#SND_SEQ_PORT_TYPE_HARDWARE
 (1<<16)

	)

251 
	#SND_SEQ_PORT_TYPE_SOFTWARE
 (1<<17)

	)

253 
	#SND_SEQ_PORT_TYPE_SYNTHESIZER
 (1<<18)

	)

256 
	#SND_SEQ_PORT_TYPE_PORT
 (1<<19)

	)

258 
	#SND_SEQ_PORT_TYPE_APPLICATION
 (1<<20)

	)

261 
size_t
 
¢d_£q_p‹t_öfo_sizeof
();

263 
	#¢d_£q_p‹t_öfo_Æloˇ
(
±r
) \

264 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_p‹t_öfo
)

	)

265 
¢d_£q_p‹t_öfo_mÆloc
(
¢d_£q_p‹t_öfo_t
 **
±r
);

266 
¢d_£q_p‹t_öfo_‰ì
(
¢d_£q_p‹t_öfo_t
 *
±r
);

267 
¢d_£q_p‹t_öfo_c›y
(
¢d_£q_p‹t_öfo_t
 *
d°
, c⁄° snd_£q_p‹t_öfo_à*
§c
);

269 
¢d_£q_p‹t_öfo_gë_˛õ¡
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

270 
¢d_£q_p‹t_öfo_gë_p‹t
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

271 c⁄° 
¢d_£q_addr_t
 *
¢d_£q_p‹t_öfo_gë_addr
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

272 c⁄° *
¢d_£q_p‹t_öfo_gë_«me
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

273 
¢d_£q_p‹t_öfo_gë_ˇ∑bûôy
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

274 
¢d_£q_p‹t_öfo_gë_ty≥
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

275 
¢d_£q_p‹t_öfo_gë_midi_ch™√ls
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

276 
¢d_£q_p‹t_öfo_gë_midi_voi˚s
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

277 
¢d_£q_p‹t_öfo_gë_sy¡h_voi˚s
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

278 
¢d_£q_p‹t_öfo_gë_ªad_u£
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

279 
¢d_£q_p‹t_öfo_gë_wrôe_u£
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

280 
¢d_£q_p‹t_öfo_gë_p‹t_•ecifõd
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

281 
¢d_£q_p‹t_öfo_gë_time°ampög
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

282 
¢d_£q_p‹t_öfo_gë_time°amp_ªÆ
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

283 
¢d_£q_p‹t_öfo_gë_time°amp_queue
(c⁄° 
¢d_£q_p‹t_öfo_t
 *
öfo
);

285 
¢d_£q_p‹t_öfo_£t_˛õ¡
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
˛õ¡
);

286 
¢d_£q_p‹t_öfo_£t_p‹t
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
p‹t
);

287 
¢d_£q_p‹t_öfo_£t_addr
(
¢d_£q_p‹t_öfo_t
 *
öfo
, c⁄° 
¢d_£q_addr_t
 *
addr
);

288 
¢d_£q_p‹t_öfo_£t_«me
(
¢d_£q_p‹t_öfo_t
 *
öfo
, c⁄° *
«me
);

289 
¢d_£q_p‹t_öfo_£t_ˇ∑bûôy
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
ˇ∑bûôy
);

290 
¢d_£q_p‹t_öfo_£t_ty≥
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
ty≥
);

291 
¢d_£q_p‹t_öfo_£t_midi_ch™√ls
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
ch™√ls
);

292 
¢d_£q_p‹t_öfo_£t_midi_voi˚s
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
voi˚s
);

293 
¢d_£q_p‹t_öfo_£t_sy¡h_voi˚s
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
voi˚s
);

294 
¢d_£q_p‹t_öfo_£t_p‹t_•ecifõd
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
vÆ
);

295 
¢d_£q_p‹t_öfo_£t_time°ampög
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
íabÀ
);

296 
¢d_£q_p‹t_öfo_£t_time°amp_ªÆ
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
ªÆtime
);

297 
¢d_£q_p‹t_öfo_£t_time°amp_queue
(
¢d_£q_p‹t_öfo_t
 *
öfo
, 
queue
);

299 
¢d_£q_¸óã_p‹t
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_p‹t_öfo_t
 *
öfo
);

300 
¢d_£q_dñëe_p‹t
(
¢d_£q_t
 *
h™dÀ
, 
p‹t
);

301 
¢d_£q_gë_p‹t_öfo
(
¢d_£q_t
 *
h™dÀ
, 
p‹t
, 
¢d_£q_p‹t_öfo_t
 *
öfo
);

302 
¢d_£q_gë_™y_p‹t_öfo
(
¢d_£q_t
 *
h™dÀ
, 
˛õ¡
, 
p‹t
, 
¢d_£q_p‹t_öfo_t
 *
öfo
);

303 
¢d_£q_£t_p‹t_öfo
(
¢d_£q_t
 *
h™dÀ
, 
p‹t
, 
¢d_£q_p‹t_öfo_t
 *
öfo
);

304 
¢d_£q_quîy_√xt_p‹t
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_p‹t_öfo_t
 *
öfo
);

317 
_¢d_£q_p‹t_subs¸ibe
 
	t¢d_£q_p‹t_subs¸ibe_t
;

319 
size_t
 
¢d_£q_p‹t_subs¸ibe_sizeof
();

321 
	#¢d_£q_p‹t_subs¸ibe_Æloˇ
(
±r
) \

322 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_p‹t_subs¸ibe
)

	)

323 
¢d_£q_p‹t_subs¸ibe_mÆloc
(
¢d_£q_p‹t_subs¸ibe_t
 **
±r
);

324 
¢d_£q_p‹t_subs¸ibe_‰ì
(
¢d_£q_p‹t_subs¸ibe_t
 *
±r
);

325 
¢d_£q_p‹t_subs¸ibe_c›y
(
¢d_£q_p‹t_subs¸ibe_t
 *
d°
, c⁄° snd_£q_p‹t_subs¸ibe_à*
§c
);

327 c⁄° 
¢d_£q_addr_t
 *
¢d_£q_p‹t_subs¸ibe_gë_£ndî
(c⁄° 
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
);

328 c⁄° 
¢d_£q_addr_t
 *
¢d_£q_p‹t_subs¸ibe_gë_de°
(c⁄° 
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
);

329 
¢d_£q_p‹t_subs¸ibe_gë_queue
(c⁄° 
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
);

330 
¢d_£q_p‹t_subs¸ibe_gë_ex˛usive
(c⁄° 
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
);

331 
¢d_£q_p‹t_subs¸ibe_gë_time_upd©e
(c⁄° 
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
);

332 
¢d_£q_p‹t_subs¸ibe_gë_time_ªÆ
(c⁄° 
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
);

334 
¢d_£q_p‹t_subs¸ibe_£t_£ndî
(
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
, c⁄° 
¢d_£q_addr_t
 *
addr
);

335 
¢d_£q_p‹t_subs¸ibe_£t_de°
(
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
, c⁄° 
¢d_£q_addr_t
 *
addr
);

336 
¢d_£q_p‹t_subs¸ibe_£t_queue
(
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
, 
q
);

337 
¢d_£q_p‹t_subs¸ibe_£t_ex˛usive
(
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
, 
vÆ
);

338 
¢d_£q_p‹t_subs¸ibe_£t_time_upd©e
(
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
, 
vÆ
);

339 
¢d_£q_p‹t_subs¸ibe_£t_time_ªÆ
(
¢d_£q_p‹t_subs¸ibe_t
 *
öfo
, 
vÆ
);

341 
¢d_£q_gë_p‹t_subs¸ùti⁄
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_p‹t_subs¸ibe_t
 *
sub
);

342 
¢d_£q_subs¸ibe_p‹t
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_p‹t_subs¸ibe_t
 *
sub
);

343 
¢d_£q_unsubs¸ibe_p‹t
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_p‹t_subs¸ibe_t
 *
sub
);

349 
_¢d_£q_quîy_subs¸ibe
 
	t¢d_£q_quîy_subs¸ibe_t
;

353 
SND_SEQ_QUERY_SUBS_READ
,

354 
SND_SEQ_QUERY_SUBS_WRITE


355 } 
	t¢d_£q_quîy_subs_ty≥_t
;

357 
size_t
 
¢d_£q_quîy_subs¸ibe_sizeof
();

359 
	#¢d_£q_quîy_subs¸ibe_Æloˇ
(
±r
) \

360 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_quîy_subs¸ibe
)

	)

361 
¢d_£q_quîy_subs¸ibe_mÆloc
(
¢d_£q_quîy_subs¸ibe_t
 **
±r
);

362 
¢d_£q_quîy_subs¸ibe_‰ì
(
¢d_£q_quîy_subs¸ibe_t
 *
±r
);

363 
¢d_£q_quîy_subs¸ibe_c›y
(
¢d_£q_quîy_subs¸ibe_t
 *
d°
, c⁄° snd_£q_quîy_subs¸ibe_à*
§c
);

365 
¢d_£q_quîy_subs¸ibe_gë_˛õ¡
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

366 
¢d_£q_quîy_subs¸ibe_gë_p‹t
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

367 c⁄° 
¢d_£q_addr_t
 *
¢d_£q_quîy_subs¸ibe_gë_roŸ
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

368 
¢d_£q_quîy_subs_ty≥_t
 
¢d_£q_quîy_subs¸ibe_gë_ty≥
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

369 
¢d_£q_quîy_subs¸ibe_gë_ödex
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

370 
¢d_£q_quîy_subs¸ibe_gë_num_subs
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

371 c⁄° 
¢d_£q_addr_t
 *
¢d_£q_quîy_subs¸ibe_gë_addr
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

372 
¢d_£q_quîy_subs¸ibe_gë_queue
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

373 
¢d_£q_quîy_subs¸ibe_gë_ex˛usive
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

374 
¢d_£q_quîy_subs¸ibe_gë_time_upd©e
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

375 
¢d_£q_quîy_subs¸ibe_gë_time_ªÆ
(c⁄° 
¢d_£q_quîy_subs¸ibe_t
 *
öfo
);

377 
¢d_£q_quîy_subs¸ibe_£t_˛õ¡
(
¢d_£q_quîy_subs¸ibe_t
 *
öfo
, 
˛õ¡
);

378 
¢d_£q_quîy_subs¸ibe_£t_p‹t
(
¢d_£q_quîy_subs¸ibe_t
 *
öfo
, 
p‹t
);

379 
¢d_£q_quîy_subs¸ibe_£t_roŸ
(
¢d_£q_quîy_subs¸ibe_t
 *
öfo
, c⁄° 
¢d_£q_addr_t
 *
addr
);

380 
¢d_£q_quîy_subs¸ibe_£t_ty≥
(
¢d_£q_quîy_subs¸ibe_t
 *
öfo
, 
¢d_£q_quîy_subs_ty≥_t
 
ty≥
);

381 
¢d_£q_quîy_subs¸ibe_£t_ödex
(
¢d_£q_quîy_subs¸ibe_t
 *
öfo
, 
_ödex
);

383 
¢d_£q_quîy_p‹t_subs¸ibîs
(
¢d_£q_t
 *
£q
, 
¢d_£q_quîy_subs¸ibe_t
 * 
subs
);

396 
_¢d_£q_queue_öfo
 
	t¢d_£q_queue_öfo_t
;

398 
_¢d_£q_queue_°©us
 
	t¢d_£q_queue_°©us_t
;

400 
_¢d_£q_queue_ãmpo
 
	t¢d_£q_queue_ãmpo_t
;

402 
_¢d_£q_queue_timî
 
	t¢d_£q_queue_timî_t
;

405 
	#SND_SEQ_QUEUE_DIRECT
 253

	)

407 
size_t
 
¢d_£q_queue_öfo_sizeof
();

409 
	#¢d_£q_queue_öfo_Æloˇ
(
±r
) \

410 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_queue_öfo
)

	)

411 
¢d_£q_queue_öfo_mÆloc
(
¢d_£q_queue_öfo_t
 **
±r
);

412 
¢d_£q_queue_öfo_‰ì
(
¢d_£q_queue_öfo_t
 *
±r
);

413 
¢d_£q_queue_öfo_c›y
(
¢d_£q_queue_öfo_t
 *
d°
, c⁄° snd_£q_queue_öfo_à*
§c
);

415 
¢d_£q_queue_öfo_gë_queue
(c⁄° 
¢d_£q_queue_öfo_t
 *
öfo
);

416 c⁄° *
¢d_£q_queue_öfo_gë_«me
(c⁄° 
¢d_£q_queue_öfo_t
 *
öfo
);

417 
¢d_£q_queue_öfo_gë_ow√r
(c⁄° 
¢d_£q_queue_öfo_t
 *
öfo
);

418 
¢d_£q_queue_öfo_gë_locked
(c⁄° 
¢d_£q_queue_öfo_t
 *
öfo
);

419 
¢d_£q_queue_öfo_gë_Êags
(c⁄° 
¢d_£q_queue_öfo_t
 *
öfo
);

421 
¢d_£q_queue_öfo_£t_«me
(
¢d_£q_queue_öfo_t
 *
öfo
, c⁄° *
«me
);

422 
¢d_£q_queue_öfo_£t_ow√r
(
¢d_£q_queue_öfo_t
 *
öfo
, 
ow√r
);

423 
¢d_£q_queue_öfo_£t_locked
(
¢d_£q_queue_öfo_t
 *
öfo
, 
locked
);

424 
¢d_£q_queue_öfo_£t_Êags
(
¢d_£q_queue_öfo_t
 *
öfo
, 
Êags
);

426 
¢d_£q_¸óã_queue
(
¢d_£q_t
 *
£q
, 
¢d_£q_queue_öfo_t
 *
öfo
);

427 
¢d_£q_Æloc_«med_queue
(
¢d_£q_t
 *
£q
, c⁄° *
«me
);

428 
¢d_£q_Æloc_queue
(
¢d_£q_t
 *
h™dÀ
);

429 
¢d_£q_‰ì_queue
(
¢d_£q_t
 *
h™dÀ
, 
q
);

430 
¢d_£q_gë_queue_öfo
(
¢d_£q_t
 *
£q
, 
q
, 
¢d_£q_queue_öfo_t
 *
öfo
);

431 
¢d_£q_£t_queue_öfo
(
¢d_£q_t
 *
£q
, 
q
, 
¢d_£q_queue_öfo_t
 *
öfo
);

432 
¢d_£q_quîy_«med_queue
(
¢d_£q_t
 *
£q
, c⁄° *
«me
);

434 
¢d_£q_gë_queue_ußge
(
¢d_£q_t
 *
h™dÀ
, 
q
);

435 
¢d_£q_£t_queue_ußge
(
¢d_£q_t
 *
h™dÀ
, 
q
, 
u£d
);

439 
size_t
 
¢d_£q_queue_°©us_sizeof
();

441 
	#¢d_£q_queue_°©us_Æloˇ
(
±r
) \

442 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_queue_°©us
)

	)

443 
¢d_£q_queue_°©us_mÆloc
(
¢d_£q_queue_°©us_t
 **
±r
);

444 
¢d_£q_queue_°©us_‰ì
(
¢d_£q_queue_°©us_t
 *
±r
);

445 
¢d_£q_queue_°©us_c›y
(
¢d_£q_queue_°©us_t
 *
d°
, c⁄° snd_£q_queue_°©us_à*
§c
);

447 
¢d_£q_queue_°©us_gë_queue
(c⁄° 
¢d_£q_queue_°©us_t
 *
öfo
);

448 
¢d_£q_queue_°©us_gë_evíts
(c⁄° 
¢d_£q_queue_°©us_t
 *
öfo
);

449 
¢d_£q_tick_time_t
 
¢d_£q_queue_°©us_gë_tick_time
(c⁄° 
¢d_£q_queue_°©us_t
 *
öfo
);

450 c⁄° 
¢d_£q_ªÆ_time_t
 *
¢d_£q_queue_°©us_gë_ªÆ_time
(c⁄° 
¢d_£q_queue_°©us_t
 *
öfo
);

451 
¢d_£q_queue_°©us_gë_°©us
(c⁄° 
¢d_£q_queue_°©us_t
 *
öfo
);

453 
¢d_£q_gë_queue_°©us
(
¢d_£q_t
 *
h™dÀ
, 
q
, 
¢d_£q_queue_°©us_t
 *
°©us
);

457 
size_t
 
¢d_£q_queue_ãmpo_sizeof
();

459 
	#¢d_£q_queue_ãmpo_Æloˇ
(
±r
) \

460 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_queue_ãmpo
)

	)

461 
¢d_£q_queue_ãmpo_mÆloc
(
¢d_£q_queue_ãmpo_t
 **
±r
);

462 
¢d_£q_queue_ãmpo_‰ì
(
¢d_£q_queue_ãmpo_t
 *
±r
);

463 
¢d_£q_queue_ãmpo_c›y
(
¢d_£q_queue_ãmpo_t
 *
d°
, c⁄° snd_£q_queue_ãmpo_à*
§c
);

465 
¢d_£q_queue_ãmpo_gë_queue
(c⁄° 
¢d_£q_queue_ãmpo_t
 *
öfo
);

466 
¢d_£q_queue_ãmpo_gë_ãmpo
(c⁄° 
¢d_£q_queue_ãmpo_t
 *
öfo
);

467 
¢d_£q_queue_ãmpo_gë_µq
(c⁄° 
¢d_£q_queue_ãmpo_t
 *
öfo
);

468 
¢d_£q_queue_ãmpo_gë_skew
(c⁄° 
¢d_£q_queue_ãmpo_t
 *
öfo
);

469 
¢d_£q_queue_ãmpo_gë_skew_ba£
(c⁄° 
¢d_£q_queue_ãmpo_t
 *
öfo
);

470 
¢d_£q_queue_ãmpo_£t_ãmpo
(
¢d_£q_queue_ãmpo_t
 *
öfo
, 
ãmpo
);

471 
¢d_£q_queue_ãmpo_£t_µq
(
¢d_£q_queue_ãmpo_t
 *
öfo
, 
µq
);

472 
¢d_£q_queue_ãmpo_£t_skew
(
¢d_£q_queue_ãmpo_t
 *
öfo
, 
skew
);

473 
¢d_£q_queue_ãmpo_£t_skew_ba£
(
¢d_£q_queue_ãmpo_t
 *
öfo
, 
ba£
);

475 
¢d_£q_gë_queue_ãmpo
(
¢d_£q_t
 *
h™dÀ
, 
q
, 
¢d_£q_queue_ãmpo_t
 *
ãmpo
);

476 
¢d_£q_£t_queue_ãmpo
(
¢d_£q_t
 *
h™dÀ
, 
q
, 
¢d_£q_queue_ãmpo_t
 *
ãmpo
);

483 
SND_SEQ_TIMER_ALSA
 = 0,

484 
SND_SEQ_TIMER_MIDI_CLOCK
 = 1,

485 
SND_SEQ_TIMER_MIDI_TICK
 = 2

486 } 
	t¢d_£q_queue_timî_ty≥_t
;

488 
size_t
 
¢d_£q_queue_timî_sizeof
();

490 
	#¢d_£q_queue_timî_Æloˇ
(
±r
) \

491 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_queue_timî
)

	)

492 
¢d_£q_queue_timî_mÆloc
(
¢d_£q_queue_timî_t
 **
±r
);

493 
¢d_£q_queue_timî_‰ì
(
¢d_£q_queue_timî_t
 *
±r
);

494 
¢d_£q_queue_timî_c›y
(
¢d_£q_queue_timî_t
 *
d°
, c⁄° snd_£q_queue_timî_à*
§c
);

496 
¢d_£q_queue_timî_gë_queue
(c⁄° 
¢d_£q_queue_timî_t
 *
öfo
);

497 
¢d_£q_queue_timî_ty≥_t
 
¢d_£q_queue_timî_gë_ty≥
(c⁄° 
¢d_£q_queue_timî_t
 *
öfo
);

498 c⁄° 
¢d_timî_id_t
 *
¢d_£q_queue_timî_gë_id
(c⁄° 
¢d_£q_queue_timî_t
 *
öfo
);

499 
¢d_£q_queue_timî_gë_ªsﬁuti⁄
(c⁄° 
¢d_£q_queue_timî_t
 *
öfo
);

501 
¢d_£q_queue_timî_£t_ty≥
(
¢d_£q_queue_timî_t
 *
öfo
, 
¢d_£q_queue_timî_ty≥_t
 
ty≥
);

502 
¢d_£q_queue_timî_£t_id
(
¢d_£q_queue_timî_t
 *
öfo
, c⁄° 
¢d_timî_id_t
 *
id
);

503 
¢d_£q_queue_timî_£t_ªsﬁuti⁄
(
¢d_£q_queue_timî_t
 *
öfo
, 
ªsﬁuti⁄
);

505 
¢d_£q_gë_queue_timî
(
¢d_£q_t
 *
h™dÀ
, 
q
, 
¢d_£q_queue_timî_t
 *
timî
);

506 
¢d_£q_£t_queue_timî
(
¢d_£q_t
 *
h™dÀ
, 
q
, 
¢d_£q_queue_timî_t
 *
timî
);

517 
¢d_£q_‰ì_evít
(
¢d_£q_evít_t
 *
ev
);

518 
ssize_t
 
¢d_£q_evít_Àngth
(
¢d_£q_evít_t
 *
ev
);

519 
¢d_£q_evít_ouçut
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_evít_t
 *
ev
);

520 
¢d_£q_evít_ouçut_buf„r
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_evít_t
 *
ev
);

521 
¢d_£q_evít_ouçut_dúe˘
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_evít_t
 *
ev
);

522 
¢d_£q_evít_öput
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_evít_t
 **
ev
);

523 
¢d_£q_evít_öput_≥ndög
(
¢d_£q_t
 *
£q
, 
„tch_£quí˚r
);

524 
¢d_£q_døö_ouçut
(
¢d_£q_t
 *
h™dÀ
);

525 
¢d_£q_evít_ouçut_≥ndög
(
¢d_£q_t
 *
£q
);

526 
¢d_£q_exåa˘_ouçut
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_evít_t
 **
ev
);

527 
¢d_£q_dr›_ouçut
(
¢d_£q_t
 *
h™dÀ
);

528 
¢d_£q_dr›_ouçut_buf„r
(
¢d_£q_t
 *
h™dÀ
);

529 
¢d_£q_dr›_öput
(
¢d_£q_t
 *
h™dÀ
);

530 
¢d_£q_dr›_öput_buf„r
(
¢d_£q_t
 *
h™dÀ
);

533 
_¢d_£q_ªmove_evíts
 
	t¢d_£q_ªmove_evíts_t
;

536 
	#SND_SEQ_REMOVE_INPUT
 (1<<0Ë

	)

537 
	#SND_SEQ_REMOVE_OUTPUT
 (1<<1Ë

	)

538 
	#SND_SEQ_REMOVE_DEST
 (1<<2Ë

	)

539 
	#SND_SEQ_REMOVE_DEST_CHANNEL
 (1<<3Ë

	)

540 
	#SND_SEQ_REMOVE_TIME_BEFORE
 (1<<4Ë

	)

541 
	#SND_SEQ_REMOVE_TIME_AFTER
 (1<<5Ë

	)

542 
	#SND_SEQ_REMOVE_TIME_TICK
 (1<<6Ë

	)

543 
	#SND_SEQ_REMOVE_EVENT_TYPE
 (1<<7Ë

	)

544 
	#SND_SEQ_REMOVE_IGNORE_OFF
 (1<<8Ë

	)

545 
	#SND_SEQ_REMOVE_TAG_MATCH
 (1<<9Ë

	)

547 
size_t
 
¢d_£q_ªmove_evíts_sizeof
();

549 
	#¢d_£q_ªmove_evíts_Æloˇ
(
±r
) \

550 
	`__¢d_Æloˇ
(
±r
, 
¢d_£q_ªmove_evíts
)

	)

551 
¢d_£q_ªmove_evíts_mÆloc
(
¢d_£q_ªmove_evíts_t
 **
±r
);

552 
¢d_£q_ªmove_evíts_‰ì
(
¢d_£q_ªmove_evíts_t
 *
±r
);

553 
¢d_£q_ªmove_evíts_c›y
(
¢d_£q_ªmove_evíts_t
 *
d°
, c⁄° snd_£q_ªmove_evíts_à*
§c
);

555 
¢d_£q_ªmove_evíts_gë_c⁄dôi⁄
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

556 
¢d_£q_ªmove_evíts_gë_queue
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

557 c⁄° 
¢d_£q_time°amp_t
 *
¢d_£q_ªmove_evíts_gë_time
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

558 c⁄° 
¢d_£q_addr_t
 *
¢d_£q_ªmove_evíts_gë_de°
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

559 
¢d_£q_ªmove_evíts_gë_ch™√l
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

560 
¢d_£q_ªmove_evíts_gë_evít_ty≥
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

561 
¢d_£q_ªmove_evíts_gë_èg
(c⁄° 
¢d_£q_ªmove_evíts_t
 *
öfo
);

563 
¢d_£q_ªmove_evíts_£t_c⁄dôi⁄
(
¢d_£q_ªmove_evíts_t
 *
öfo
, 
Êags
);

564 
¢d_£q_ªmove_evíts_£t_queue
(
¢d_£q_ªmove_evíts_t
 *
öfo
, 
queue
);

565 
¢d_£q_ªmove_evíts_£t_time
(
¢d_£q_ªmove_evíts_t
 *
öfo
, c⁄° 
¢d_£q_time°amp_t
 *
time
);

566 
¢d_£q_ªmove_evíts_£t_de°
(
¢d_£q_ªmove_evíts_t
 *
öfo
, c⁄° 
¢d_£q_addr_t
 *
addr
);

567 
¢d_£q_ªmove_evíts_£t_ch™√l
(
¢d_£q_ªmove_evíts_t
 *
öfo
, 
ch™√l
);

568 
¢d_£q_ªmove_evíts_£t_evít_ty≥
(
¢d_£q_ªmove_evíts_t
 *
öfo
, 
ty≥
);

569 
¢d_£q_ªmove_evíts_£t_èg
(
¢d_£q_ªmove_evíts_t
 *
öfo
, 
èg
);

571 
¢d_£q_ªmove_evíts
(
¢d_£q_t
 *
h™dÀ
, 
¢d_£q_ªmove_evíts_t
 *
öfo
);

582 
¢d_£q_£t_bô
(
ƒ
, *
¨øy
);

583 
¢d_£q_un£t_bô
(
ƒ
, *
¨øy
);

584 
¢d_£q_ch™ge_bô
(
ƒ
, *
¨øy
);

585 
¢d_£q_gë_bô
(
ƒ
, *
¨øy
);

599 
SND_SEQ_EVFLG_RESULT
,

600 
SND_SEQ_EVFLG_NOTE
,

601 
SND_SEQ_EVFLG_CONTROL
,

602 
SND_SEQ_EVFLG_QUEUE
,

603 
SND_SEQ_EVFLG_SYSTEM
,

604 
SND_SEQ_EVFLG_MESSAGE
,

605 
SND_SEQ_EVFLG_CONNECTION
,

606 
SND_SEQ_EVFLG_SAMPLE
,

607 
SND_SEQ_EVFLG_USERS
,

608 
SND_SEQ_EVFLG_INSTR
,

609 
SND_SEQ_EVFLG_QUOTE
,

610 
SND_SEQ_EVFLG_NONE
,

611 
SND_SEQ_EVFLG_RAW
,

612 
SND_SEQ_EVFLG_FIXED
,

613 
SND_SEQ_EVFLG_VARIABLE
,

614 
SND_SEQ_EVFLG_VARUSR


618 
SND_SEQ_EVFLG_NOTE_ONEARG
,

619 
SND_SEQ_EVFLG_NOTE_TWOARG


623 
SND_SEQ_EVFLG_QUEUE_NOARG
,

624 
SND_SEQ_EVFLG_QUEUE_TICK
,

625 
SND_SEQ_EVFLG_QUEUE_TIME
,

626 
SND_SEQ_EVFLG_QUEUE_VALUE


634 c⁄° 
¢d_£q_evít_ty≥s
[];

636 
	#_SND_SEQ_TYPE
(
x
Ë(1<<(x)Ë

	)

637 
	#_SND_SEQ_TYPE_OPT
(
x
Ë((x)<<24Ë

	)

640 
	#¢d_£q_ty≥_check
(
ev
,
x
Ë(
¢d_£q_evít_ty≥s
[”v)->
ty≥
] & 
	`_SND_SEQ_TYPE
(x))

	)

643 
	#¢d_£q_ev_is_ªsu…_ty≥
(
ev
) \

644 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_RESULT
)

	)

646 
	#¢d_£q_ev_is_nŸe_ty≥
(
ev
) \

647 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_NOTE
)

	)

649 
	#¢d_£q_ev_is_c⁄åﬁ_ty≥
(
ev
) \

650 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_CONTROL
)

	)

652 
	#¢d_£q_ev_is_ch™√l_ty≥
(
ev
) \

653 (
¢d_£q_evít_ty≥s
[(
ev
)->
ty≥
] & (
	`_SND_SEQ_TYPE
(
SND_SEQ_EVFLG_NOTE
Ë| _SND_SEQ_TYPE(
SND_SEQ_EVFLG_CONTROL
)))

	)

656 
	#¢d_£q_ev_is_queue_ty≥
(
ev
) \

657 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_QUEUE
)

	)

659 
	#¢d_£q_ev_is_mesßge_ty≥
(
ev
) \

660 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_MESSAGE
)

	)

662 
	#¢d_£q_ev_is_subs¸ibe_ty≥
(
ev
) \

663 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_CONNECTION
)

	)

665 
	#¢d_£q_ev_is_ßm∂e_ty≥
(
ev
) \

666 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_SAMPLE
)

	)

668 
	#¢d_£q_ev_is_u£r_ty≥
(
ev
) \

669 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_USERS
)

	)

671 
	#¢d_£q_ev_is_ö°r_ty≥
(
ev
) \

672 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_INSTR
)

	)

674 
	#¢d_£q_ev_is_fixed_ty≥
(
ev
) \

675 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_FIXED
)

	)

677 
	#¢d_£q_ev_is_v¨übÀ_ty≥
(
ev
) \

678 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_VARIABLE
)

	)

680 
	#¢d_£q_ev_is_v¨u§_ty≥
(
ev
) \

681 
	`¢d_£q_ty≥_check
(
ev
, 
SND_SEQ_EVFLG_VARUSR
)

	)

683 
	#¢d_£q_ev_is_ª£rved
(
ev
) \

684 (! 
¢d_£q_evít_ty≥s
[(
ev
)->
ty≥
])

	)

690 
	#¢d_£q_ev_is_¥i‹
(
ev
) \

691 (((
ev
)->
Êags
 & 
SND_SEQ_PRIORITY_MASK
Ë=
SND_SEQ_PRIORITY_HIGH
)

	)

694 
	#¢d_£q_ev_Àngth_ty≥
(
ev
) \

695 ((
ev
)->
Êags
 & 
SND_SEQ_EVENT_LENGTH_MASK
)

	)

697 
	#¢d_£q_ev_is_fixed
(
ev
) \

698 (
	`¢d_£q_ev_Àngth_ty≥
(
ev
Ë=
SND_SEQ_EVENT_LENGTH_FIXED
)

	)

700 
	#¢d_£q_ev_is_v¨übÀ
(
ev
) \

701 (
	`¢d_£q_ev_Àngth_ty≥
(
ev
Ë=
SND_SEQ_EVENT_LENGTH_VARIABLE
)

	)

703 
	#¢d_£q_ev_is_v¨u§
(
ev
) \

704 (
	`¢d_£q_ev_Àngth_ty≥
(
ev
Ë=
SND_SEQ_EVENT_LENGTH_VARUSR
)

	)

707 
	#¢d_£q_ev_time°amp_ty≥
(
ev
) \

708 ((
ev
)->
Êags
 & 
SND_SEQ_TIME_STAMP_MASK
)

	)

710 
	#¢d_£q_ev_is_tick
(
ev
) \

711 (
	`¢d_£q_ev_time°amp_ty≥
(
ev
Ë=
SND_SEQ_TIME_STAMP_TICK
)

	)

713 
	#¢d_£q_ev_is_ªÆ
(
ev
) \

714 (
	`¢d_£q_ev_time°amp_ty≥
(
ev
Ë=
SND_SEQ_TIME_STAMP_REAL
)

	)

717 
	#¢d_£q_ev_timemode_ty≥
(
ev
) \

718 ((
ev
)->
Êags
 & 
SND_SEQ_TIME_MODE_MASK
)

	)

720 
	#¢d_£q_ev_is_ab°ime
(
ev
) \

721 (
	`¢d_£q_ev_timemode_ty≥
(
ev
Ë=
SND_SEQ_TIME_MODE_ABS
)

	)

723 
	#¢d_£q_ev_is_ª…ime
(
ev
) \

724 (
	`¢d_£q_ev_timemode_ty≥
(
ev
Ë=
SND_SEQ_TIME_MODE_REL
)

	)

727 
	#¢d_£q_ev_is_dúe˘
(
ev
) \

728 ((
ev
)->
queue
 =
SND_SEQ_QUEUE_DIRECT
)

	)

732 #ifde‡
__˝lu•lus


	@/usr/include/alsa/seq_event.h

28 #i‚de‡
__ALSA_SEQ_EVENT_H


29 
	#__ALSA_SEQ_EVENT_H


	)

41 
	t¢d_£q_evít_ty≥_t
;

44 
	e¢d_£q_evít_ty≥
 {

46 
	mSND_SEQ_EVENT_SYSTEM
 = 0,

48 
	mSND_SEQ_EVENT_RESULT
,

51 
	mSND_SEQ_EVENT_NOTE
 = 5,

53 
	mSND_SEQ_EVENT_NOTEON
,

55 
	mSND_SEQ_EVENT_NOTEOFF
,

57 
	mSND_SEQ_EVENT_KEYPRESS
,

60 
	mSND_SEQ_EVENT_CONTROLLER
 = 10,

62 
	mSND_SEQ_EVENT_PGMCHANGE
,

64 
	mSND_SEQ_EVENT_CHANPRESS
,

66 
	mSND_SEQ_EVENT_PITCHBEND
,

68 
	mSND_SEQ_EVENT_CONTROL14
,

70 
	mSND_SEQ_EVENT_NONREGPARAM
,

72 
	mSND_SEQ_EVENT_REGPARAM
,

75 
	mSND_SEQ_EVENT_SONGPOS
 = 20,

77 
	mSND_SEQ_EVENT_SONGSEL
,

79 
	mSND_SEQ_EVENT_QFRAME
,

81 
	mSND_SEQ_EVENT_TIMESIGN
,

83 
	mSND_SEQ_EVENT_KEYSIGN
,

86 
	mSND_SEQ_EVENT_START
 = 30,

88 
	mSND_SEQ_EVENT_CONTINUE
,

90 
	mSND_SEQ_EVENT_STOP
,

92 
	mSND_SEQ_EVENT_SETPOS_TICK
,

94 
	mSND_SEQ_EVENT_SETPOS_TIME
,

96 
	mSND_SEQ_EVENT_TEMPO
,

98 
	mSND_SEQ_EVENT_CLOCK
,

100 
	mSND_SEQ_EVENT_TICK
,

102 
	mSND_SEQ_EVENT_QUEUE_SKEW
,

104 
	mSND_SEQ_EVENT_SYNC_POS
,

107 
	mSND_SEQ_EVENT_TUNE_REQUEST
 = 40,

109 
	mSND_SEQ_EVENT_RESET
,

111 
	mSND_SEQ_EVENT_SENSING
,

114 
	mSND_SEQ_EVENT_ECHO
 = 50,

116 
	mSND_SEQ_EVENT_OSS
,

119 
	mSND_SEQ_EVENT_CLIENT_START
 = 60,

121 
	mSND_SEQ_EVENT_CLIENT_EXIT
,

123 
	mSND_SEQ_EVENT_CLIENT_CHANGE
,

125 
	mSND_SEQ_EVENT_PORT_START
,

127 
	mSND_SEQ_EVENT_PORT_EXIT
,

129 
	mSND_SEQ_EVENT_PORT_CHANGE
,

132 
	mSND_SEQ_EVENT_PORT_SUBSCRIBED
,

134 
	mSND_SEQ_EVENT_PORT_UNSUBSCRIBED
,

137 
	mSND_SEQ_EVENT_USR0
 = 90,

139 
	mSND_SEQ_EVENT_USR1
,

141 
	mSND_SEQ_EVENT_USR2
,

143 
	mSND_SEQ_EVENT_USR3
,

145 
	mSND_SEQ_EVENT_USR4
,

147 
	mSND_SEQ_EVENT_USR5
,

149 
	mSND_SEQ_EVENT_USR6
,

151 
	mSND_SEQ_EVENT_USR7
,

153 
	mSND_SEQ_EVENT_USR8
,

155 
	mSND_SEQ_EVENT_USR9
,

158 
	mSND_SEQ_EVENT_SYSEX
 = 130,

160 
	mSND_SEQ_EVENT_BOUNCE
,

162 
	mSND_SEQ_EVENT_USR_VAR0
 = 135,

164 
	mSND_SEQ_EVENT_USR_VAR1
,

166 
	mSND_SEQ_EVENT_USR_VAR2
,

168 
	mSND_SEQ_EVENT_USR_VAR3
,

170 
	mSND_SEQ_EVENT_USR_VAR4
,

173 
	mSND_SEQ_EVENT_NONE
 = 255

178 
	s¢d_£q_addr
 {

179 
	m˛õ¡
;

180 
	mp‹t
;

181 } 
	t¢d_£q_addr_t
;

184 
	s¢d_£q_c⁄√˘
 {

185 
¢d_£q_addr_t
 
	m£ndî
;

186 
¢d_£q_addr_t
 
	mde°
;

187 } 
	t¢d_£q_c⁄√˘_t
;

191 
	s¢d_£q_ªÆ_time
 {

192 
	mtv_£c
;

193 
	mtv_n£c
;

194 } 
	t¢d_£q_ªÆ_time_t
;

197 
	t¢d_£q_tick_time_t
;

200 
	u¢d_£q_time°amp
 {

201 
¢d_£q_tick_time_t
 
	mtick
;

202 
¢d_£q_ªÆ_time
 
	mtime
;

203 } 
	t¢d_£q_time°amp_t
;

211 
	#SND_SEQ_TIME_STAMP_TICK
 (0<<0Ë

	)

212 
	#SND_SEQ_TIME_STAMP_REAL
 (1<<0Ë

	)

213 
	#SND_SEQ_TIME_STAMP_MASK
 (1<<0Ë

	)

215 
	#SND_SEQ_TIME_MODE_ABS
 (0<<1Ë

	)

216 
	#SND_SEQ_TIME_MODE_REL
 (1<<1Ë

	)

217 
	#SND_SEQ_TIME_MODE_MASK
 (1<<1Ë

	)

219 
	#SND_SEQ_EVENT_LENGTH_FIXED
 (0<<2Ë

	)

220 
	#SND_SEQ_EVENT_LENGTH_VARIABLE
 (1<<2Ë

	)

221 
	#SND_SEQ_EVENT_LENGTH_VARUSR
 (2<<2Ë

	)

222 
	#SND_SEQ_EVENT_LENGTH_MASK
 (3<<2Ë

	)

224 
	#SND_SEQ_PRIORITY_NORMAL
 (0<<4Ë

	)

225 
	#SND_SEQ_PRIORITY_HIGH
 (1<<4Ë

	)

226 
	#SND_SEQ_PRIORITY_MASK
 (1<<4Ë

	)

230 
	s¢d_£q_ev_nŸe
 {

231 
	mch™√l
;

232 
	mnŸe
;

233 
	mvñocôy
;

234 
	moff_vñocôy
;

235 
	mduøti⁄
;

236 } 
	t¢d_£q_ev_nŸe_t
;

239 
	s¢d_£q_ev_˘æ
 {

240 
	mch™√l
;

241 
	munu£d
[3];

242 
	m∑øm
;

243 sig√d 
	mvÆue
;

244 } 
	t¢d_£q_ev_˘æ_t
;

247 
	s¢d_£q_ev_øw8
 {

248 
	md
[12];

249 } 
	t¢d_£q_ev_øw8_t
;

252 
	s¢d_£q_ev_øw32
 {

253 
	md
[3];

254 } 
	t¢d_£q_ev_øw32_t
;

257 
	s¢d_£q_ev_ext
 {

258 
	mÀn
;

259 *
	m±r
;

260 } 
__©åibuã__
((
∑cked
));

262 
¢d_£q_ev_ext
 
	t¢d_£q_ev_ext_t
;

263 #ifde‡
DOC_HIDDEN


265 
¢d_£q_ev_ext
 
	t¢d_£q_ev_ext_t
;

269 
	s¢d_£q_ªsu…
 {

270 
	mevít
;

271 
	mªsu…
;

272 } 
	t¢d_£q_ªsu…_t
;

275 
	s¢d_£q_queue_skew
 {

276 
	mvÆue
;

277 
	mba£
;

278 } 
	t¢d_£q_queue_skew_t
;

281 
	s¢d_£q_ev_queue_c⁄åﬁ
 {

282 
	mqueue
;

283 
	munu£d
[3];

285 sig√d 
	mvÆue
;

286 
¢d_£q_time°amp_t
 
	mtime
;

287 
	mposôi⁄
;

288 
¢d_£q_queue_skew_t
 
	mskew
;

289 
	md32
[2];

290 
	md8
[8];

291 } 
	m∑øm
;

292 } 
	t¢d_£q_ev_queue_c⁄åﬁ_t
;

296 
	s¢d_£q_evít
 {

297 
¢d_£q_evít_ty≥_t
 
	mty≥
;

298 
	mÊags
;

299 
	mèg
;

301 
	mqueue
;

302 
¢d_£q_time°amp_t
 
	mtime
;

304 
¢d_£q_addr_t
 
	msour˚
;

305 
¢d_£q_addr_t
 
	mde°
;

308 
¢d_£q_ev_nŸe_t
 
	mnŸe
;

309 
¢d_£q_ev_˘æ_t
 
	mc⁄åﬁ
;

310 
¢d_£q_ev_øw8_t
 
	møw8
;

311 
¢d_£q_ev_øw32_t
 
	møw32
;

312 
¢d_£q_ev_ext_t
 
	mext
;

313 
¢d_£q_ev_queue_c⁄åﬁ_t
 
	mqueue
;

314 
¢d_£q_time°amp_t
 
	mtime
;

315 
¢d_£q_addr_t
 
	maddr
;

316 
¢d_£q_c⁄√˘_t
 
	mc⁄√˘
;

317 
¢d_£q_ªsu…_t
 
	mªsu…
;

318 } 
	md©a
;

319 } 
	t¢d_£q_evít_t
;

	@/usr/include/alsa/seq_midi_event.h

28 #i‚de‡
__ALSA_SEQ_MIDI_EVENT_H


29 
	#__ALSA_SEQ_MIDI_EVENT_H


	)

31 #ifde‡
__˝lu•lus


43 
¢d_midi_evít
 
	t¢d_midi_evít_t
;

45 
¢d_midi_evít_√w
(
size_t
 
bufsize
, 
¢d_midi_evít_t
 **
rdev
);

46 
¢d_midi_evít_ªsize_buf„r
(
¢d_midi_evít_t
 *
dev
, 
size_t
 
bufsize
);

47 
¢d_midi_evít_‰ì
(
¢d_midi_evít_t
 *
dev
);

48 
¢d_midi_evít_öô
(
¢d_midi_evít_t
 *
dev
);

49 
¢d_midi_evít_ª£t_ícode
(
¢d_midi_evít_t
 *
dev
);

50 
¢d_midi_evít_ª£t_decode
(
¢d_midi_evít_t
 *
dev
);

51 
¢d_midi_evít_no_°©us
(
¢d_midi_evít_t
 *
dev
, 
⁄
);

53 
¢d_midi_evít_ícode
(
¢d_midi_evít_t
 *
dev
, c⁄° *
buf
, 
cou¡
, 
¢d_£q_evít_t
 *
ev
);

54 
¢d_midi_evít_ícode_byã
(
¢d_midi_evít_t
 *
dev
, 
c
, 
¢d_£q_evít_t
 *
ev
);

56 
¢d_midi_evít_decode
(
¢d_midi_evít_t
 *
dev
, *
buf
, 
cou¡
, c⁄° 
¢d_£q_evít_t
 *
ev
);

60 #ifde‡
__˝lu•lus


	@/usr/include/alsa/seqmid.h

28 #i‚de‡
__ALSA_SEQMID_H


29 
	#__ALSA_SEQMID_H


	)

31 #ifde‡
__˝lu•lus


48 
	#¢d_£q_ev_˛ór
(
ev
) \

49 
	`mem£t
(
ev
, 0, (
¢d_£q_evít_t
))

	)

58 
	#¢d_£q_ev_£t_èg
(
ev
,
t
) \

59 ((
ev
)->
èg
 = (
t
))

	)

71 
	#¢d_£q_ev_£t_de°
(
ev
,
c
,
p
) \

72 ((
ev
)->
de°
.
˛õ¡
 = (
c
), (ev)->de°.
p‹t
 = (
p
))

	)

82 
	#¢d_£q_ev_£t_subs
(
ev
) \

83 ((
ev
)->
de°
.
˛õ¡
 = 
SND_SEQ_ADDRESS_SUBSCRIBERS
,\

84 (
ev
)->
de°
.
p‹t
 = 
SND_SEQ_ADDRESS_UNKNOWN
)

	)

94 
	#¢d_£q_ev_£t_brﬂdˇ°
(
ev
) \

95 ((
ev
)->
de°
.
˛õ¡
 = 
SND_SEQ_ADDRESS_BROADCAST
,\

96 (
ev
)->
de°
.
p‹t
 = 
SND_SEQ_ADDRESS_BROADCAST
)

	)

105 
	#¢d_£q_ev_£t_sour˚
(
ev
,
p
) \

106 ((
ev
)->
sour˚
.
p‹t
 = (
p
))

	)

117 
	#¢d_£q_ev_£t_dúe˘
(
ev
) \

118 ((
ev
)->
queue
 = 
SND_SEQ_QUEUE_DIRECT
)

	)

132 
	#¢d_£q_ev_scheduÀ_tick
(
ev
, 
q
, 
ªœtive
, 
âick
) \

133 ((
ev
)->
Êags
 &~(
SND_SEQ_TIME_STAMP_MASK
 | 
SND_SEQ_TIME_MODE_MASK
),\

134 (
ev
)->
Êags
 |
SND_SEQ_TIME_STAMP_TICK
,\

135 (
ev
)->
Êags
 |(
ªœtive
Ë? 
SND_SEQ_TIME_MODE_REL
 : 
SND_SEQ_TIME_MODE_ABS
,\

136 (
ev
)->
time
.
tick
 = (
âick
),\

137 (
ev
)->
queue
 = (
q
))

	)

151 
	#¢d_£q_ev_scheduÀ_ªÆ
(
ev
, 
q
, 
ªœtive
, 
πime
) \

152 ((
ev
)->
Êags
 &~(
SND_SEQ_TIME_STAMP_MASK
 | 
SND_SEQ_TIME_MODE_MASK
),\

153 (
ev
)->
Êags
 |
SND_SEQ_TIME_STAMP_REAL
,\

154 (
ev
)->
Êags
 |(
ªœtive
Ë? 
SND_SEQ_TIME_MODE_REL
 : 
SND_SEQ_TIME_MODE_ABS
,\

155 (
ev
)->
time
.timê*(
πime
),\

156 (
ev
)->
queue
 = (
q
))

	)

163 
	#¢d_£q_ev_£t_¥i‹ôy
(
ev
, 
high_¥i‹
) \

164 ((
ev
)->
Êags
 &~
SND_SEQ_PRIORITY_MASK
,\

165 (
ev
)->
Êags
 |(
high_¥i‹
Ë? 
SND_SEQ_PRIORITY_HIGH
 : 
SND_SEQ_PRIORITY_NORMAL
)

	)

175 
	#¢d_£q_ev_£t_fixed
(
ev
) \

176 ((
ev
)->
Êags
 &~
SND_SEQ_EVENT_LENGTH_MASK
,\

177 (
ev
)->
Êags
 |
SND_SEQ_EVENT_LENGTH_FIXED
)

	)

189 
	#¢d_£q_ev_£t_v¨übÀ
(
ev
, 
d©Æí
, 
d©≠å
) \

190 ((
ev
)->
Êags
 &~
SND_SEQ_EVENT_LENGTH_MASK
,\

191 (
ev
)->
Êags
 |
SND_SEQ_EVENT_LENGTH_VARIABLE
,\

192 (
ev
)->
d©a
.
ext
.
Àn
 = (
d©Æí
),\

193 (
ev
)->
d©a
.
ext
.
±r
 = (
d©≠å
))

	)

205 
	#¢d_£q_ev_£t_v¨u§
(
ev
, 
d©Æí
, 
d©≠å
) \

206 ((
ev
)->
Êags
 &~
SND_SEQ_EVENT_LENGTH_MASK
,\

207 (
ev
)->
Êags
 |
SND_SEQ_EVENT_LENGTH_VARUSR
,\

208 (
ev
)->
d©a
.
ext
.
Àn
 = (
d©Æí
),\

209 (
ev
)->
d©a
.
ext
.
±r
 = (
d©≠å
))

	)

218 
	#¢d_£q_ev_£t_queue_c⁄åﬁ
(
ev
, 
typ
, 
q
, 
vÆ
) \

219 ((
ev
)->
ty≥
 = (
typ
),\

220 
	`¢d_£q_ev_£t_de°
(
ev
, 
SND_SEQ_CLIENT_SYSTEM
, 
SND_SEQ_PORT_SYSTEM_TIMER
),\

221 (
ev
)->
d©a
.
queue
.queuê(
q
),\

222 (
ev
)->
d©a
.
queue
.
∑øm
.
vÆue
 = (
vÆ
))

	)

231 
	#¢d_£q_ev_£t_queue_°¨t
(
ev
, 
q
) \

232 
	`¢d_£q_ev_£t_queue_c⁄åﬁ
(
ev
, 
SND_SEQ_EVENT_START
, 
q
, 0)

	)

241 
	#¢d_£q_ev_£t_queue_°›
(
ev
, 
q
) \

242 
	`¢d_£q_ev_£t_queue_c⁄åﬁ
(
ev
, 
SND_SEQ_EVENT_STOP
, 
q
, 0)

	)

251 
	#¢d_£q_ev_£t_queue_c⁄töue
(
ev
, 
q
) \

252 
	`¢d_£q_ev_£t_queue_c⁄åﬁ
(
ev
, 
SND_SEQ_EVENT_CONTINUE
, 
q
, 0)

	)

260 
	#¢d_£q_ev_£t_queue_ãmpo
(
ev
, 
q
, 
vÆ
) \

261 
	`¢d_£q_ev_£t_queue_c⁄åﬁ
(
ev
, 
SND_SEQ_EVENT_TEMPO
, 
q
, 
vÆ
)

	)

269 
	#¢d_£q_ev_£t_queue_pos_ªÆ
(
ev
, 
q
, 
πime
) \

270 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_SETPOS_TIME
,\

271 
	`¢d_£q_ev_£t_de°
(
ev
, 
SND_SEQ_CLIENT_SYSTEM
, 
SND_SEQ_PORT_SYSTEM_TIMER
),\

272 (
ev
)->
d©a
.
queue
.queuê(
q
),\

273 (
ev
)->
d©a
.
queue
.
∑øm
.
time
.timê*(
πime
))

	)

281 
	#¢d_£q_ev_£t_queue_pos_tick
(
ev
, 
q
, 
âime
) \

282 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_SETPOS_TICK
,\

283 
	`¢d_£q_ev_£t_de°
(
ev
, 
SND_SEQ_CLIENT_SYSTEM
, 
SND_SEQ_PORT_SYSTEM_TIMER
),\

284 (
ev
)->
d©a
.
queue
.queuê(
q
),\

285 (
ev
)->
d©a
.
queue
.
∑øm
.
time
.
tick
 = (
âime
))

	)

288 
¢d_£q_c⁄åﬁ_queue
(
¢d_£q_t
 *
£q
, 
q
, 
ty≥
, 
vÆue
, 
¢d_£q_evít_t
 *
ev
);

296 
	#¢d_£q_°¨t_queue
(
£q
, 
q
, 
ev
) \

297 
	`¢d_£q_c⁄åﬁ_queue
(
£q
, 
q
, 
SND_SEQ_EVENT_START
, 0, 
ev
)

	)

305 
	#¢d_£q_°›_queue
(
£q
, 
q
, 
ev
) \

306 
	`¢d_£q_c⁄åﬁ_queue
(
£q
, 
q
, 
SND_SEQ_EVENT_STOP
, 0, 
ev
)

	)

314 
	#¢d_£q_c⁄töue_queue
(
£q
, 
q
, 
ev
) \

315 
	`¢d_£q_c⁄åﬁ_queue
(
£q
, 
q
, 
SND_SEQ_EVENT_CONTINUE
, 0, 
ev
)

	)

324 
	#¢d_£q_ch™ge_queue_ãmpo
(
£q
, 
q
, 
ãmpo
, 
ev
) \

325 
	`¢d_£q_c⁄åﬁ_queue
(
£q
, 
q
, 
SND_SEQ_EVENT_TEMPO
, 
ãmpo
, 
ev
)

	)

328 
¢d_£q_¸óã_sim∂e_p‹t
(
¢d_£q_t
 *
£q
, c⁄° *
«me
,

329 
ˇps
, 
ty≥
);

331 
¢d_£q_dñëe_sim∂e_p‹t
(
¢d_£q_t
 *
£q
, 
p‹t
);

336 
¢d_£q_c⁄√˘_‰om
(
¢d_£q_t
 *
£q
, 
my_p‹t
, 
§c_˛õ¡
, 
§c_p‹t
);

337 
¢d_£q_c⁄√˘_to
(
¢d_£q_t
 *
£q
, 
my_p‹t
, 
de°_˛õ¡
, 
de°_p‹t
);

338 
¢d_£q_disc⁄√˘_‰om
(
¢d_£q_t
 *
£q
, 
my_p‹t
, 
§c_˛õ¡
, 
§c_p‹t
);

339 
¢d_£q_disc⁄√˘_to
(
¢d_£q_t
 *
£q
, 
my_p‹t
, 
de°_˛õ¡
, 
de°_p‹t
);

344 
¢d_£q_£t_˛õ¡_«me
(
¢d_£q_t
 *
£q
, c⁄° *
«me
);

345 
¢d_£q_£t_˛õ¡_evít_fûãr
(
¢d_£q_t
 *
£q
, 
evít_ty≥
);

346 
¢d_£q_£t_˛õ¡_poﬁ_ouçut
(
¢d_£q_t
 *
£q
, 
size_t
 
size
);

347 
¢d_£q_£t_˛õ¡_poﬁ_ouçut_room
(
¢d_£q_t
 *
£q
, 
size_t
 
size
);

348 
¢d_£q_£t_˛õ¡_poﬁ_öput
(
¢d_£q_t
 *
£q
, 
size_t
 
size
);

350 
¢d_£q_sync_ouçut_queue
(
¢d_£q_t
 *
£q
);

355 
¢d_£q_∑r£_addªss
(
¢d_£q_t
 *
£q
, 
¢d_£q_addr_t
 *
addr
, c⁄° *
°r
);

360 
¢d_£q_ª£t_poﬁ_ouçut
(
¢d_£q_t
 *
£q
);

361 
¢d_£q_ª£t_poﬁ_öput
(
¢d_£q_t
 *
£q
);

371 
	#¢d_£q_ev_£t_nŸe
(
ev
, 
ch
, 
key
, 
vñ
, 
dur
) \

372 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_NOTE
,\

373 
	`¢d_£q_ev_£t_fixed
(
ev
),\

374 (
ev
)->
d©a
.
nŸe
.
ch™√l
 = (
ch
),\

375 (
ev
)->
d©a
.
nŸe
.nŸê(
key
),\

376 (
ev
)->
d©a
.
nŸe
.
vñocôy
 = (
vñ
),\

377 (
ev
)->
d©a
.
nŸe
.
duøti⁄
 = (
dur
))

	)

386 
	#¢d_£q_ev_£t_nŸe⁄
(
ev
, 
ch
, 
key
, 
vñ
) \

387 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_NOTEON
,\

388 
	`¢d_£q_ev_£t_fixed
(
ev
),\

389 (
ev
)->
d©a
.
nŸe
.
ch™√l
 = (
ch
),\

390 (
ev
)->
d©a
.
nŸe
.nŸê(
key
),\

391 (
ev
)->
d©a
.
nŸe
.
vñocôy
 = (
vñ
))

	)

400 
	#¢d_£q_ev_£t_nŸeoff
(
ev
, 
ch
, 
key
, 
vñ
) \

401 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_NOTEOFF
,\

402 
	`¢d_£q_ev_£t_fixed
(
ev
),\

403 (
ev
)->
d©a
.
nŸe
.
ch™√l
 = (
ch
),\

404 (
ev
)->
d©a
.
nŸe
.nŸê(
key
),\

405 (
ev
)->
d©a
.
nŸe
.
vñocôy
 = (
vñ
))

	)

414 
	#¢d_£q_ev_£t_key¥ess
(
ev
,
ch
,
key
,
vñ
) \

415 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_KEYPRESS
,\

416 
	`¢d_£q_ev_£t_fixed
(
ev
),\

417 (
ev
)->
d©a
.
nŸe
.
ch™√l
 = (
ch
),\

418 (
ev
)->
d©a
.
nŸe
.nŸê(
key
),\

419 (
ev
)->
d©a
.
nŸe
.
vñocôy
 = (
vñ
))

	)

428 
	#¢d_£q_ev_£t_c⁄åﬁÀr
(
ev
,
ch
,
cc
,
vÆ
) \

429 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_CONTROLLER
,\

430 
	`¢d_£q_ev_£t_fixed
(
ev
),\

431 (
ev
)->
d©a
.
c⁄åﬁ
.
ch™√l
 = (
ch
),\

432 (
ev
)->
d©a
.
c⁄åﬁ
.
∑øm
 = (
cc
),\

433 (
ev
)->
d©a
.
c⁄åﬁ
.
vÆue
 = (
vÆ
))

	)

441 
	#¢d_£q_ev_£t_pgmch™ge
(
ev
,
ch
,
vÆ
) \

442 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_PGMCHANGE
,\

443 
	`¢d_£q_ev_£t_fixed
(
ev
),\

444 (
ev
)->
d©a
.
c⁄åﬁ
.
ch™√l
 = (
ch
),\

445 (
ev
)->
d©a
.
c⁄åﬁ
.
vÆue
 = (
vÆ
))

	)

453 
	#¢d_£q_ev_£t_pôchbíd
(
ev
,
ch
,
vÆ
) \

454 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_PITCHBEND
,\

455 
	`¢d_£q_ev_£t_fixed
(
ev
),\

456 (
ev
)->
d©a
.
c⁄åﬁ
.
ch™√l
 = (
ch
),\

457 (
ev
)->
d©a
.
c⁄åﬁ
.
vÆue
 = (
vÆ
))

	)

465 
	#¢d_£q_ev_£t_ch™¥ess
(
ev
,
ch
,
vÆ
) \

466 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_CHANPRESS
,\

467 
	`¢d_£q_ev_£t_fixed
(
ev
),\

468 (
ev
)->
d©a
.
c⁄åﬁ
.
ch™√l
 = (
ch
),\

469 (
ev
)->
d©a
.
c⁄åﬁ
.
vÆue
 = (
vÆ
))

	)

479 
	#¢d_£q_ev_£t_sy£x
(
ev
,
d©Æí
,
d©≠å
) \

480 ((
ev
)->
ty≥
 = 
SND_SEQ_EVENT_SYSEX
,\

481 
	`¢d_£q_ev_£t_v¨übÀ
(
ev
, 
d©Æí
, 
d©≠å
))

	)

485 #ifde‡
__˝lu•lus


	@/usr/include/alsa/timer.h

28 #i‚de‡
__ALSA_TIMER_H


29 
	#__ALSA_TIMER_H


	)

31 #ifde‡
__˝lu•lus


42 
	#SND_TIMER_DLSYM_VERSION
 
_dlsym_timî_001


	)

44 
	#SND_TIMER_QUERY_DLSYM_VERSION
 
_dlsym_timî_quîy_001


	)

47 
_¢d_timî_id
 
	t¢d_timî_id_t
;

49 
_¢d_timî_göfo
 
	t¢d_timî_göfo_t
;

51 
_¢d_timî_g∑øms
 
	t¢d_timî_g∑øms_t
;

53 
_¢d_timî_g°©us
 
	t¢d_timî_g°©us_t
;

55 
_¢d_timî_öfo
 
	t¢d_timî_öfo_t
;

57 
_¢d_timî_∑øms
 
	t¢d_timî_∑øms_t
;

59 
_¢d_timî_°©us
 
	t¢d_timî_°©us_t
;

61 
	e_¢d_timî_˛ass
 {

62 
SND_TIMER_CLASS_NONE
 = -1,

63 
SND_TIMER_CLASS_SLAVE
 = 0,

64 
SND_TIMER_CLASS_GLOBAL
,

65 
SND_TIMER_CLASS_CARD
,

66 
SND_TIMER_CLASS_PCM
,

67 
SND_TIMER_CLASS_LAST
 = 
SND_TIMER_CLASS_PCM


68 } 
	t¢d_timî_˛ass_t
;

71 
	e_¢d_timî_¶ave_˛ass
 {

72 
SND_TIMER_SCLASS_NONE
 = 0,

73 
SND_TIMER_SCLASS_APPLICATION
,

74 
SND_TIMER_SCLASS_SEQUENCER
,

75 
SND_TIMER_SCLASS_OSS_SEQUENCER
,

76 
SND_TIMER_SCLASS_LAST
 = 
SND_TIMER_SCLASS_OSS_SEQUENCER


77 } 
	t¢d_timî_¶ave_˛ass_t
;

80 
	e_¢d_timî_evít
 {

81 
SND_TIMER_EVENT_RESOLUTION
 = 0,

82 
SND_TIMER_EVENT_TICK
,

83 
SND_TIMER_EVENT_START
,

84 
SND_TIMER_EVENT_STOP
,

85 
SND_TIMER_EVENT_CONTINUE
,

86 
SND_TIMER_EVENT_PAUSE
,

87 
SND_TIMER_EVENT_EARLY
,

88 
SND_TIMER_EVENT_SUSPEND
,

89 
SND_TIMER_EVENT_RESUME
,

91 
SND_TIMER_EVENT_MSTART
 = 
SND_TIMER_EVENT_START
 + 10,

92 
SND_TIMER_EVENT_MSTOP
 = 
SND_TIMER_EVENT_STOP
 + 10,

93 
SND_TIMER_EVENT_MCONTINUE
 = 
SND_TIMER_EVENT_CONTINUE
 + 10,

94 
SND_TIMER_EVENT_MPAUSE
 = 
SND_TIMER_EVENT_PAUSE
 + 10,

95 
SND_TIMER_EVENT_MSUSPEND
 = 
SND_TIMER_EVENT_SUSPEND
 + 10,

96 
SND_TIMER_EVENT_MRESUME
 = 
SND_TIMER_EVENT_RESUME
 + 10

97 } 
	t¢d_timî_evít_t
;

100 
	s_¢d_timî_ªad
 {

101 
ªsﬁuti⁄
;

102 
ticks
;

103 } 
	t¢d_timî_ªad_t
;

106 
	s_¢d_timî_åód
 {

107 
¢d_timî_evít_t
 
evít
;

108 
¢d_htime°amp_t
 
t°amp
;

109 
vÆ
;

110 } 
	t¢d_timî_åód_t
;

113 
	#SND_TIMER_GLOBAL_SYSTEM
 0

	)

115 
	#SND_TIMER_GLOBAL_RTC
 1

	)

117 
	#SND_TIMER_GLOBAL_HPET
 2

	)

119 
	#SND_TIMER_GLOBAL_HRTIMER
 3

	)

122 
	#SND_TIMER_OPEN_NONBLOCK
 (1<<0)

	)

124 
	#SND_TIMER_OPEN_TREAD
 (1<<1)

	)

127 
	e_¢d_timî_ty≥
 {

129 
SND_TIMER_TYPE_HW
 = 0,

131 
SND_TIMER_TYPE_SHM
,

133 
SND_TIMER_TYPE_INET


134 } 
	t¢d_timî_ty≥_t
;

137 
_¢d_timî_quîy
 
	t¢d_timî_quîy_t
;

139 
_¢d_timî
 
	t¢d_timî_t
;

142 
¢d_timî_quîy_›í
(
¢d_timî_quîy_t
 **
h™dÀ
, c⁄° *
«me
, 
mode
);

143 
¢d_timî_quîy_›í_lc⁄f
(
¢d_timî_quîy_t
 **
h™dÀ
, c⁄° *
«me
, 
mode
, 
¢d_c⁄fig_t
 *
lc⁄f
);

144 
¢d_timî_quîy_˛o£
(
¢d_timî_quîy_t
 *
h™dÀ
);

145 
¢d_timî_quîy_√xt_devi˚
(
¢d_timî_quîy_t
 *
h™dÀ
, 
¢d_timî_id_t
 *
tid
);

146 
¢d_timî_quîy_öfo
(
¢d_timî_quîy_t
 *
h™dÀ
, 
¢d_timî_göfo_t
 *
öfo
);

147 
¢d_timî_quîy_∑øms
(
¢d_timî_quîy_t
 *
h™dÀ
, 
¢d_timî_g∑øms_t
 *
∑øms
);

148 
¢d_timî_quîy_°©us
(
¢d_timî_quîy_t
 *
h™dÀ
, 
¢d_timî_g°©us_t
 *
°©us
);

150 
¢d_timî_›í
(
¢d_timî_t
 **
h™dÀ
, c⁄° *
«me
, 
mode
);

151 
¢d_timî_›í_lc⁄f
(
¢d_timî_t
 **
h™dÀ
, c⁄° *
«me
, 
mode
, 
¢d_c⁄fig_t
 *
lc⁄f
);

152 
¢d_timî_˛o£
(
¢d_timî_t
 *
h™dÀ
);

153 
¢d_async_add_timî_h™dÀr
(
¢d_async_h™dÀr_t
 **
h™dÀr
, 
¢d_timî_t
 *
timî
,

154 
¢d_async_ˇŒback_t
 
ˇŒback
, *
¥iv©e_d©a
);

155 
¢d_timî_t
 *
¢d_async_h™dÀr_gë_timî
(
¢d_async_h™dÀr_t
 *
h™dÀr
);

156 
¢d_timî_pﬁl_des¸ùt‹s_cou¡
(
¢d_timî_t
 *
h™dÀ
);

157 
¢d_timî_pﬁl_des¸ùt‹s
(
¢d_timî_t
 *
h™dÀ
, 
pﬁlfd
 *
pfds
, 
•a˚
);

158 
¢d_timî_pﬁl_des¸ùt‹s_ªvíts
(
¢d_timî_t
 *
timî
, 
pﬁlfd
 *
pfds
, 
nfds
, *
ªvíts
);

159 
¢d_timî_öfo
(
¢d_timî_t
 *
h™dÀ
, 
¢d_timî_öfo_t
 *
timî
);

160 
¢d_timî_∑øms
(
¢d_timî_t
 *
h™dÀ
, 
¢d_timî_∑øms_t
 *
∑øms
);

161 
¢d_timî_°©us
(
¢d_timî_t
 *
h™dÀ
, 
¢d_timî_°©us_t
 *
°©us
);

162 
¢d_timî_°¨t
(
¢d_timî_t
 *
h™dÀ
);

163 
¢d_timî_°›
(
¢d_timî_t
 *
h™dÀ
);

164 
¢d_timî_c⁄töue
(
¢d_timî_t
 *
h™dÀ
);

165 
ssize_t
 
¢d_timî_ªad
(
¢d_timî_t
 *
h™dÀ
, *
buf„r
, 
size_t
 
size
);

167 
size_t
 
¢d_timî_id_sizeof
();

169 
	#¢d_timî_id_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_timî_id
)

	)

170 
¢d_timî_id_mÆloc
(
¢d_timî_id_t
 **
±r
);

171 
¢d_timî_id_‰ì
(
¢d_timî_id_t
 *
obj
);

172 
¢d_timî_id_c›y
(
¢d_timî_id_t
 *
d°
, c⁄° snd_timî_id_à*
§c
);

174 
¢d_timî_id_£t_˛ass
(
¢d_timî_id_t
 *
id
, 
dev_˛ass
);

175 
¢d_timî_id_gë_˛ass
(
¢d_timî_id_t
 *
id
);

176 
¢d_timî_id_£t_s˛ass
(
¢d_timî_id_t
 *
id
, 
dev_s˛ass
);

177 
¢d_timî_id_gë_s˛ass
(
¢d_timî_id_t
 *
id
);

178 
¢d_timî_id_£t_ˇrd
(
¢d_timî_id_t
 *
id
, 
ˇrd
);

179 
¢d_timî_id_gë_ˇrd
(
¢d_timî_id_t
 *
id
);

180 
¢d_timî_id_£t_devi˚
(
¢d_timî_id_t
 *
id
, 
devi˚
);

181 
¢d_timî_id_gë_devi˚
(
¢d_timî_id_t
 *
id
);

182 
¢d_timî_id_£t_subdevi˚
(
¢d_timî_id_t
 *
id
, 
subdevi˚
);

183 
¢d_timî_id_gë_subdevi˚
(
¢d_timî_id_t
 *
id
);

185 
size_t
 
¢d_timî_göfo_sizeof
();

187 
	#¢d_timî_göfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_timî_göfo
)

	)

188 
¢d_timî_göfo_mÆloc
(
¢d_timî_göfo_t
 **
±r
);

189 
¢d_timî_göfo_‰ì
(
¢d_timî_göfo_t
 *
obj
);

190 
¢d_timî_göfo_c›y
(
¢d_timî_göfo_t
 *
d°
, c⁄° snd_timî_göfo_à*
§c
);

192 
¢d_timî_göfo_£t_tid
(
¢d_timî_göfo_t
 *
obj
, 
¢d_timî_id_t
 *
tid
);

193 
¢d_timî_id_t
 *
¢d_timî_göfo_gë_tid
(
¢d_timî_göfo_t
 *
obj
);

194 
¢d_timî_göfo_gë_Êags
(
¢d_timî_göfo_t
 *
obj
);

195 
¢d_timî_göfo_gë_ˇrd
(
¢d_timî_göfo_t
 *
obj
);

196 *
¢d_timî_göfo_gë_id
(
¢d_timî_göfo_t
 *
obj
);

197 *
¢d_timî_göfo_gë_«me
(
¢d_timî_göfo_t
 *
obj
);

198 
¢d_timî_göfo_gë_ªsﬁuti⁄
(
¢d_timî_göfo_t
 *
obj
);

199 
¢d_timî_göfo_gë_ªsﬁuti⁄_mö
(
¢d_timî_göfo_t
 *
obj
);

200 
¢d_timî_göfo_gë_ªsﬁuti⁄_max
(
¢d_timî_göfo_t
 *
obj
);

201 
¢d_timî_göfo_gë_˛õ¡s
(
¢d_timî_göfo_t
 *
obj
);

203 
size_t
 
¢d_timî_öfo_sizeof
();

205 
	#¢d_timî_öfo_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_timî_öfo
)

	)

206 
¢d_timî_öfo_mÆloc
(
¢d_timî_öfo_t
 **
±r
);

207 
¢d_timî_öfo_‰ì
(
¢d_timî_öfo_t
 *
obj
);

208 
¢d_timî_öfo_c›y
(
¢d_timî_öfo_t
 *
d°
, c⁄° snd_timî_öfo_à*
§c
);

210 
¢d_timî_öfo_is_¶ave
(
¢d_timî_öfo_t
 * 
öfo
);

211 
¢d_timî_öfo_gë_ˇrd
(
¢d_timî_öfo_t
 * 
öfo
);

212 c⁄° *
¢d_timî_öfo_gë_id
(
¢d_timî_öfo_t
 * 
öfo
);

213 c⁄° *
¢d_timî_öfo_gë_«me
(
¢d_timî_öfo_t
 * 
öfo
);

214 
¢d_timî_öfo_gë_ªsﬁuti⁄
(
¢d_timî_öfo_t
 * 
öfo
);

216 
size_t
 
¢d_timî_∑øms_sizeof
();

218 
	#¢d_timî_∑øms_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_timî_∑øms
)

	)

219 
¢d_timî_∑øms_mÆloc
(
¢d_timî_∑øms_t
 **
±r
);

220 
¢d_timî_∑øms_‰ì
(
¢d_timî_∑øms_t
 *
obj
);

221 
¢d_timî_∑øms_c›y
(
¢d_timî_∑øms_t
 *
d°
, c⁄° snd_timî_∑øms_à*
§c
);

223 
¢d_timî_∑øms_£t_auto_°¨t
(
¢d_timî_∑øms_t
 * 
∑øms
, 
auto_°¨t
);

224 
¢d_timî_∑øms_gë_auto_°¨t
(
¢d_timî_∑øms_t
 * 
∑øms
);

225 
¢d_timî_∑øms_£t_ex˛usive
(
¢d_timî_∑øms_t
 * 
∑øms
, 
ex˛usive
);

226 
¢d_timî_∑øms_gë_ex˛usive
(
¢d_timî_∑øms_t
 * 
∑øms
);

227 
¢d_timî_∑øms_£t_óæy_evít
(
¢d_timî_∑øms_t
 * 
∑øms
, 
óæy_evít
);

228 
¢d_timî_∑øms_gë_óæy_evít
(
¢d_timî_∑øms_t
 * 
∑øms
);

229 
¢d_timî_∑øms_£t_ticks
(
¢d_timî_∑øms_t
 * 
∑øms
, 
ticks
);

230 
¢d_timî_∑øms_gë_ticks
(
¢d_timî_∑øms_t
 * 
∑øms
);

231 
¢d_timî_∑øms_£t_queue_size
(
¢d_timî_∑øms_t
 * 
∑øms
, 
queue_size
);

232 
¢d_timî_∑øms_gë_queue_size
(
¢d_timî_∑øms_t
 * 
∑øms
);

233 
¢d_timî_∑øms_£t_fûãr
(
¢d_timî_∑øms_t
 * 
∑øms
, 
fûãr
);

234 
¢d_timî_∑øms_gë_fûãr
(
¢d_timî_∑øms_t
 * 
∑øms
);

236 
size_t
 
¢d_timî_°©us_sizeof
();

238 
	#¢d_timî_°©us_Æloˇ
(
±r
Ë
	`__¢d_Æloˇ
’å, 
¢d_timî_°©us
)

	)

239 
¢d_timî_°©us_mÆloc
(
¢d_timî_°©us_t
 **
±r
);

240 
¢d_timî_°©us_‰ì
(
¢d_timî_°©us_t
 *
obj
);

241 
¢d_timî_°©us_c›y
(
¢d_timî_°©us_t
 *
d°
, c⁄° snd_timî_°©us_à*
§c
);

243 
¢d_htime°amp_t
 
¢d_timî_°©us_gë_time°amp
(
¢d_timî_°©us_t
 * 
°©us
);

244 
¢d_timî_°©us_gë_ªsﬁuti⁄
(
¢d_timî_°©us_t
 * 
°©us
);

245 
¢d_timî_°©us_gë_lo°
(
¢d_timî_°©us_t
 * 
°©us
);

246 
¢d_timî_°©us_gë_ovîrun
(
¢d_timî_°©us_t
 * 
°©us
);

247 
¢d_timî_°©us_gë_queue
(
¢d_timî_°©us_t
 * 
°©us
);

250 
¢d_timî_öfo_gë_ticks
(
¢d_timî_öfo_t
 * 
öfo
);

254 #ifde‡
__˝lu•lus


	@/usr/include/alsa/version.h

5 
	#SND_LIB_MAJOR
 1

	)

6 
	#SND_LIB_MINOR
 0

	)

7 
	#SND_LIB_SUBMINOR
 28

	)

8 
	#SND_LIB_EXTRAVER
 1000000

	)

10 
	#SND_LIB_VERSION
 ((
SND_LIB_MAJOR
<<16)|\

11 (
SND_LIB_MINOR
<<8)|\

12 
SND_LIB_SUBMINOR
)

	)

14 
	#SND_LIB_VERSION_STR
 "1.0.28"

	)

	@/usr/include/curses.h

37 #i‚de‡
__NCURSES_H


38 
	#__NCURSES_H


	)

40 
	#CURSES
 1

	)

41 
	#CURSES_H
 1

	)

44 
	#NCURSES_VERSION_MAJOR
 5

	)

45 
	#NCURSES_VERSION_MINOR
 9

	)

46 
	#NCURSES_VERSION_PATCH
 20140913

	)

49 #unde‡
NCURSES_VERSION


50 
	#NCURSES_VERSION
 "5.9"

	)

55 
	#NCURSES_MOUSE_VERSION
 1

	)

60 
	~<ncur£s_dŒ.h
>

63 
	~<°döt.h
>

69 #i‚de‡
NCURSES_ENABLE_STDBOOL_H


70 
	#NCURSES_ENABLE_STDBOOL_H
 1

	)

77 #i‚de‡
NCURSES_ATTR_T


78 
	#NCURSES_ATTR_T
 

	)

85 #unde‡
NCURSES_CONST


86 
	#NCURSES_CONST
 c⁄°

	)

88 #unde‡
NCURSES_INLINE


89 
	#NCURSES_INLINE
 
ölöe


	)

100 #unde‡
NCURSES_COLOR_T


101 
	#NCURSES_COLOR_T
 

	)

103 #unde‡
NCURSES_PAIRS_T


104 
	#NCURSES_PAIRS_T
 

	)

109 #i‚de‡
NCURSES_OPAQUE


110 
	#NCURSES_OPAQUE
 0

	)

116 #i‚de‡
NCURSES_REENTRANT


117 
	#NCURSES_REENTRANT
 0

	)

123 #unde‡
NCURSES_INTEROP_FUNCS


124 
	#NCURSES_INTEROP_FUNCS
 0

	)

129 #unde‡
NCURSES_SIZE_T


130 
	#NCURSES_SIZE_T
 

	)

135 #unde‡
NCURSES_TPARM_VARARGS


136 
	#NCURSES_TPARM_VARARGS
 1

	)

142 #unde‡
NCURSES_TPARM_ARG


143 
	#NCURSES_TPARM_ARG
 

	)

150 #unde‡
NCURSES_CH_T


151 
	#NCURSES_CH_T
 
chty≥


	)

153 #i‡0 && 
deföed
(
_LP64
)

154 
	tchty≥
;

155 
	tmmask_t
;

157 
	tchty≥
;

158 
	tmmask_t
;

164 
	~<°dio.h
>

173 #i‚de‡
NCURSES_WIDECHAR


174 #i‡
deföed
(
_XOPEN_SOURCE_EXTENDED
Ë|| (deföed(
_XOPEN_SOURCE
) && (_XOPEN_SOURCE - 0 >= 500))

175 
	#NCURSES_WIDECHAR
 1

	)

177 
	#NCURSES_WIDECHAR
 0

	)

181 
	~<°d¨g.h
>

182 #i‡
NCURSES_WIDECHAR


183 
	~<°ddef.h
>

198 #unde‡
TRUE


199 
	#TRUE
 1

	)

201 #unde‡
FALSE


202 
	#FALSE
 0

	)

204 
	tNCURSES_BOOL
;

206 #i‡
deföed
(
__˝lu•lus
)

209 
	#NCURSES_BOOL
 
boﬁ


	)

213 #i‡
NCURSES_ENABLE_STDBOOL_H


214 
	~<°dboﬁ.h
>

216 
	#NCURSES_BOOL
 
boﬁ


	)

219 #unde‡
boﬁ


220 
	#boﬁ
 
NCURSES_BOOL


	)

225 #ifde‡
__˝lu•lus


227 
	#NCURSES_CAST
(
ty≥
,
vÆue
Ë
°©ic_ˇ°
<ty≥>(vÆue)

	)

229 
	#NCURSES_CAST
(
ty≥
,
vÆue
Ë—y≥)(vÆue)

	)

236 
	#WA_ATTRIBUTES
 
A_ATTRIBUTES


	)

237 
	#WA_NORMAL
 
A_NORMAL


	)

238 
	#WA_STANDOUT
 
A_STANDOUT


	)

239 
	#WA_UNDERLINE
 
A_UNDERLINE


	)

240 
	#WA_REVERSE
 
A_REVERSE


	)

241 
	#WA_BLINK
 
A_BLINK


	)

242 
	#WA_DIM
 
A_DIM


	)

243 
	#WA_BOLD
 
A_BOLD


	)

244 
	#WA_ALTCHARSET
 
A_ALTCHARSET


	)

245 
	#WA_INVIS
 
A_INVIS


	)

246 
	#WA_PROTECT
 
A_PROTECT


	)

247 
	#WA_HORIZONTAL
 
A_HORIZONTAL


	)

248 
	#WA_LEFT
 
A_LEFT


	)

249 
	#WA_LOW
 
A_LOW


	)

250 
	#WA_RIGHT
 
A_RIGHT


	)

251 
	#WA_TOP
 
A_TOP


	)

252 
	#WA_VERTICAL
 
A_VERTICAL


	)

255 
	#WA_ITALIC
 
A_ITALIC


	)

259 
	#COLOR_BLACK
 0

	)

260 
	#COLOR_RED
 1

	)

261 
	#COLOR_GREEN
 2

	)

262 
	#COLOR_YELLOW
 3

	)

263 
	#COLOR_BLUE
 4

	)

264 
	#COLOR_MAGENTA
 5

	)

265 
	#COLOR_CYAN
 6

	)

266 
	#COLOR_WHITE
 7

	)

270 #i‡0 || 
NCURSES_REENTRANT


271 
NCURSES_WRAPPED_VAR
(
chty≥
*, 
acs_m≠
);

272 
	#acs_m≠
 
	`NCURSES_PUBLIC_VAR
(
	`acs_m≠
())

	)

274 
NCURSES_EXPORT_VAR
(
chty≥
Ë
acs_m≠
[];

277 
	#NCURSES_ACS
(
c
Ë(
acs_m≠
[
	`NCURSES_CAST
(,(c))])

	)

280 
	#ACS_ULCORNER
 
	`NCURSES_ACS
('l'Ë

	)

281 
	#ACS_LLCORNER
 
	`NCURSES_ACS
('m'Ë

	)

282 
	#ACS_URCORNER
 
	`NCURSES_ACS
('k'Ë

	)

283 
	#ACS_LRCORNER
 
	`NCURSES_ACS
('j'Ë

	)

284 
	#ACS_LTEE
 
	`NCURSES_ACS
('t'Ë

	)

285 
	#ACS_RTEE
 
	`NCURSES_ACS
('u'Ë

	)

286 
	#ACS_BTEE
 
	`NCURSES_ACS
('v'Ë

	)

287 
	#ACS_TTEE
 
	`NCURSES_ACS
('w'Ë

	)

288 
	#ACS_HLINE
 
	`NCURSES_ACS
('q'Ë

	)

289 
	#ACS_VLINE
 
	`NCURSES_ACS
('x'Ë

	)

290 
	#ACS_PLUS
 
	`NCURSES_ACS
('n'Ë

	)

291 
	#ACS_S1
 
	`NCURSES_ACS
('o'Ë

	)

292 
	#ACS_S9
 
	`NCURSES_ACS
('s'Ë

	)

293 
	#ACS_DIAMOND
 
	`NCURSES_ACS
('`'Ë

	)

294 
	#ACS_CKBOARD
 
	`NCURSES_ACS
('a'Ë

	)

295 
	#ACS_DEGREE
 
	`NCURSES_ACS
('f'Ë

	)

296 
	#ACS_PLMINUS
 
	`NCURSES_ACS
('g'Ë

	)

297 
	#ACS_BULLET
 
	`NCURSES_ACS
('~'Ë

	)

299 
	#ACS_LARROW
 
	`NCURSES_ACS
(','Ë

	)

300 
	#ACS_RARROW
 
	`NCURSES_ACS
('+'Ë

	)

301 
	#ACS_DARROW
 
	`NCURSES_ACS
('.'Ë

	)

302 
	#ACS_UARROW
 
	`NCURSES_ACS
('-'Ë

	)

303 
	#ACS_BOARD
 
	`NCURSES_ACS
('h'Ë

	)

304 
	#ACS_LANTERN
 
	`NCURSES_ACS
('i'Ë

	)

305 
	#ACS_BLOCK
 
	`NCURSES_ACS
('0'Ë

	)

311 
	#ACS_S3
 
	`NCURSES_ACS
('p'Ë

	)

312 
	#ACS_S7
 
	`NCURSES_ACS
('r'Ë

	)

313 
	#ACS_LEQUAL
 
	`NCURSES_ACS
('y'Ë

	)

314 
	#ACS_GEQUAL
 
	`NCURSES_ACS
('z'Ë

	)

315 
	#ACS_PI
 
	`NCURSES_ACS
('{'Ë

	)

316 
	#ACS_NEQUAL
 
	`NCURSES_ACS
('|'Ë

	)

317 
	#ACS_STERLING
 
	`NCURSES_ACS
('}'Ë

	)

325 
	#ACS_BSSB
 
ACS_ULCORNER


	)

326 
	#ACS_SSBB
 
ACS_LLCORNER


	)

327 
	#ACS_BBSS
 
ACS_URCORNER


	)

328 
	#ACS_SBBS
 
ACS_LRCORNER


	)

329 
	#ACS_SBSS
 
ACS_RTEE


	)

330 
	#ACS_SSSB
 
ACS_LTEE


	)

331 
	#ACS_SSBS
 
ACS_BTEE


	)

332 
	#ACS_BSSS
 
ACS_TTEE


	)

333 
	#ACS_BSBS
 
ACS_HLINE


	)

334 
	#ACS_SBSB
 
ACS_VLINE


	)

335 
	#ACS_SSSS
 
ACS_PLUS


	)

337 #unde‡
ERR


338 
	#ERR
 (-1)

	)

340 #unde‡
OK


341 
	#OK
 (0)

	)

344 
	#_SUBWIN
 0x01

	)

345 
	#_ENDLINE
 0x02

	)

346 
	#_FULLWIN
 0x04

	)

347 
	#_SCROLLWIN
 0x08

	)

348 
	#_ISPAD
 0x10

	)

349 
	#_HASMOVED
 0x20

	)

350 
	#_WRAPPED
 0x40

	)

356 
	#_NOCHANGE
 -1

	)

362 
	#_NEWINDEX
 -1

	)

364 
s¸ìn
 
	tSCREEN
;

365 
_wö_°
 
	tWINDOW
;

367 
chty≥
 
	t©å_t
;

369 #i‡
NCURSES_WIDECHAR


372 #ifde‡
mbÀn


373 #unde‡
mbÀn


375 
	~<libutf8.h
>

379 
	~<wch¨.h
>

383 
	twch¨_t
;

387 
	twöt_t
;

396 
	#CCHARW_MAX
 5

	)

399 
©å_t
 
	g©å
;

400 
wch¨_t
 
	gch¨s
[
CCHARW_MAX
];

402 #unde‡
NCURSES_EXT_COLORS


403 
	#NCURSES_EXT_COLORS
 20140913

	)

404 
	gext_cﬁ‹
;

407 
	tcch¨_t
;

411 #i‡!
NCURSES_OPAQUE


412 
	gld©
;

414 
	s_wö_°


416 
NCURSES_SIZE_T
 
	g_cury
, 
	g_curx
;

419 
NCURSES_SIZE_T
 
	g_maxy
, 
	g_maxx
;

420 
NCURSES_SIZE_T
 
	g_begy
, 
	g_begx
;

422 
	g_Êags
;

425 
©å_t
 
	g_©ås
;

426 
chty≥
 
	g_bkgd
;

429 
boﬁ
 
	g_nŸimeout
;

430 
boﬁ
 
	g_˛ór
;

431 
boﬁ
 
	g_Àaveok
;

432 
boﬁ
 
	g_s¸ﬁl
;

433 
boﬁ
 
	g_idlok
;

434 
boﬁ
 
	g_idcok
;

435 
boﬁ
 
	g_immed
;

436 
boﬁ
 
	g_sync
;

437 
boﬁ
 
	g_u£_key∑d
;

438 
	g_dñay
;

440 
ld©
 *
	g_löe
;

443 
NCURSES_SIZE_T
 
	g_ªgt›
;

444 
NCURSES_SIZE_T
 
	g_ªgbŸtom
;

447 
	g_∑rx
;

448 
	g_∑ry
;

449 
WINDOW
 *
	g_∑ª¡
;

452 
	spd©


454 
NCURSES_SIZE_T
 
	g_∑d_y
, 
	g_∑d_x
;

455 
NCURSES_SIZE_T
 
	g_∑d_t›
, 
	g_∑d_À·
;

456 
NCURSES_SIZE_T
 
	g_∑d_bŸtom
, 
	g_∑d_right
;

457 } 
	g_∑d
;

459 
NCURSES_SIZE_T
 
	g_yoff£t
;

461 #i‡
NCURSES_WIDECHAR


462 
cch¨_t
 
	g_bkg∫d
;

464 
	g_cﬁ‹
;

474 #ifde‡
NCURSES_WGETCH_EVENTS


475 #i‡!
deföed
(
__BEOS__
Ë|| deföed(
__HAIKU__
)

477 
	#NCURSES_EVENT_VERSION
 1

	)

483 
	#_NC_EVENT_TIMEOUT_MSEC
 1

	)

484 
	#_NC_EVENT_FILE
 2

	)

485 
	#_NC_EVENT_FILE_READABLE
 2

	)

487 
	#_NC_EVENT_FILE_WRITABLE
 4

	)

488 
	#_NC_EVENT_FILE_EXCEPTION
 8

	)

493 
	gty≥
;

496 
	gtimeout_m£c
;

499 
	gÊags
;

500 
	gfd
;

501 
	gªsu…
;

502 } 
	g„v
;

503 } 
	gd©a
;

504 } 
	t_nc_evít
;

508 
	gcou¡
;

509 
	gªsu…_Êags
;

510 
_nc_evít
 *
	gevíts
[1];

511 } 
	t_nc_evíéi°
;

513 
NCURSES_EXPORT
(Ë
wgëch_evíts
 (
WINDOW
 *, 
_nc_evíéi°
 *);

514 
NCURSES_EXPORT
(Ë
wgën°r_evíts
 (
WINDOW
 *,*,,
_nc_evíéi°
 *);

526 #i‡!(
deföed
(
__GNUC__
Ë|| deföed(
__GNUG__
Ë|| deföed(
__©åibuã__
))

527 
	#__©åibuã__
(
p
Ë

	)

538 #i‚de‡
GCC_PRINTFLIKE


539 #i‡
deföed
(
GCC_PRINTF
Ë&& !deföed(
¥ötf
)

540 
	#GCC_PRINTFLIKE
(
fmt
,
v¨
Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
,fmt,v¨)))

	)

542 
	#GCC_PRINTFLIKE
(
fmt
,
v¨
Ë

	)

546 #i‚de‡
GCC_SCANFLIKE


547 #i‡
deföed
(
GCC_SCANF
Ë&& !deföed(
sˇnf
)

548 
	#GCC_SCANFLIKE
(
fmt
,
v¨
Ë
	`__©åibuã__
((
	`f‹m©
(
sˇnf
,fmt,v¨)))

	)

550 
	#GCC_SCANFLIKE
(
fmt
,
v¨
Ë

	)

554 #i‚def 
GCC_NORETURN


555 
	#GCC_NORETURN


	)

558 #i‚def 
GCC_UNUSED


559 
	#GCC_UNUSED


	)

566 (*
	gNCURSES_OUTC
)();

575 
NCURSES_EXPORT
(Ë
addch
 (c⁄° 
chty≥
);

576 
NCURSES_EXPORT
(Ë
addchn°r
 (c⁄° 
chty≥
 *, );

577 
NCURSES_EXPORT
(Ë
addch°r
 (c⁄° 
chty≥
 *);

578 
NCURSES_EXPORT
(Ë
addn°r
 (const *, );

579 
NCURSES_EXPORT
(Ë
add°r
 (const *);

580 
NCURSES_EXPORT
(Ë
©åoff
 (
NCURSES_ATTR_T
);

581 
NCURSES_EXPORT
(Ë
©å⁄
 (
NCURSES_ATTR_T
);

582 
NCURSES_EXPORT
(Ë
©å£t
 (
NCURSES_ATTR_T
);

583 
NCURSES_EXPORT
(Ë
©å_gë
 (
©å_t
 *, 
NCURSES_PAIRS_T
 *, *);

584 
NCURSES_EXPORT
(Ë
©å_off
 (
©å_t
, *);

585 
NCURSES_EXPORT
(Ë
©å_⁄
 (
©å_t
, *);

586 
NCURSES_EXPORT
(Ë
©å_£t
 (
©å_t
, 
NCURSES_PAIRS_T
, *);

587 
NCURSES_EXPORT
(Ë
baudøã
 ();

588 
NCURSES_EXPORT
(Ë
bìp
 ();

589 
NCURSES_EXPORT
(Ë
bkgd
 (
chty≥
);

590 
NCURSES_EXPORT
(Ë
bkgd£t
 (
chty≥
);

591 
NCURSES_EXPORT
(Ë
b‹dî
 (
chty≥
,chtype,chtype,chtype,chtype,chtype,chtype,chtype);

592 
NCURSES_EXPORT
(Ë
box
 (
WINDOW
 *, 
chty≥
, chtype);

593 
NCURSES_EXPORT
(
boﬁ
Ë
ˇn_ch™ge_cﬁ‹
 ();

594 
NCURSES_EXPORT
(Ë
cbªak
 ();

595 
NCURSES_EXPORT
(Ë
chg©
 (, 
©å_t
, 
NCURSES_PAIRS_T
, const *);

596 
NCURSES_EXPORT
(Ë
˛ór
 ();

597 
NCURSES_EXPORT
(Ë
˛órok
 (
WINDOW
 *,
boﬁ
);

598 
NCURSES_EXPORT
(Ë
˛πobŸ
 ();

599 
NCURSES_EXPORT
(Ë
˛π€ﬁ
 ();

600 
NCURSES_EXPORT
(Ë
cﬁ‹_c⁄ã¡
 (
NCURSES_COLOR_T
,NCURSES_COLOR_T*,NCURSES_COLOR_T*,NCURSES_COLOR_T*);

601 
NCURSES_EXPORT
(Ë
cﬁ‹_£t
 (
NCURSES_PAIRS_T
,*);

602 
NCURSES_EXPORT
(Ë
COLOR_PAIR
 ();

603 
NCURSES_EXPORT
(Ë
c›ywö
 (c⁄° 
WINDOW
*,WINDOW*,,,,,,,);

604 
NCURSES_EXPORT
(Ë
curs_£t
 ();

605 
NCURSES_EXPORT
(Ë
def_¥og_mode
 ();

606 
NCURSES_EXPORT
(Ë
def_shñl_mode
 ();

607 
NCURSES_EXPORT
(Ë
dñay_ouçut
 ();

608 
NCURSES_EXPORT
(Ë
dñch
 ();

609 
NCURSES_EXPORT
(Ë
dñs¸ìn
 (
SCREEN
 *);

610 
NCURSES_EXPORT
(Ë
dñwö
 (
WINDOW
 *);

611 
NCURSES_EXPORT
(Ë
dñëñn
 ();

612 
NCURSES_EXPORT
(
WINDOW
 *Ë
dîwö
 (WINDOW *,,,,);

613 
NCURSES_EXPORT
(Ë
doupd©e
 ();

614 
NCURSES_EXPORT
(
WINDOW
 *Ë
dupwö
 (WINDOW *);

615 
NCURSES_EXPORT
(Ë
echo
 ();

616 
NCURSES_EXPORT
(Ë
echoch¨
 (c⁄° 
chty≥
);

617 
NCURSES_EXPORT
(Ë
îa£
 ();

618 
NCURSES_EXPORT
(Ë
ídwö
 ();

619 
NCURSES_EXPORT
(Ë
îa£ch¨
 ();

620 
NCURSES_EXPORT
(Ë
fûãr
 ();

621 
NCURSES_EXPORT
(Ë
Êash
 ();

622 
NCURSES_EXPORT
(Ë
Êushöp
 ();

623 
NCURSES_EXPORT
(
chty≥
Ë
gëbkgd
 (
WINDOW
 *);

624 
NCURSES_EXPORT
(Ë
gëch
 ();

625 
NCURSES_EXPORT
(Ë
gën°r
 (*, );

626 
NCURSES_EXPORT
(Ë
gë°r
 (*);

627 
NCURSES_EXPORT
(
WINDOW
 *Ë
gëwö
 (
FILE
 *);

628 
NCURSES_EXPORT
(Ë
hÆfdñay
 ();

629 
NCURSES_EXPORT
(
boﬁ
Ë
has_cﬁ‹s
 ();

630 
NCURSES_EXPORT
(
boﬁ
Ë
has_ic
 ();

631 
NCURSES_EXPORT
(
boﬁ
Ë
has_û
 ();

632 
NCURSES_EXPORT
(Ë
hlöe
 (
chty≥
, );

633 
NCURSES_EXPORT
(Ë
idcok
 (
WINDOW
 *, 
boﬁ
);

634 
NCURSES_EXPORT
(Ë
idlok
 (
WINDOW
 *, 
boﬁ
);

635 
NCURSES_EXPORT
(Ë
immedok
 (
WINDOW
 *, 
boﬁ
);

636 
NCURSES_EXPORT
(
chty≥
Ë
öch
 ();

637 
NCURSES_EXPORT
(Ë
öchn°r
 (
chty≥
 *, );

638 
NCURSES_EXPORT
(Ë
öch°r
 (
chty≥
 *);

639 
NCURSES_EXPORT
(
WINDOW
 *Ë
öôs¸
 ();

640 
NCURSES_EXPORT
(Ë
öô_cﬁ‹
 (
NCURSES_COLOR_T
,NCURSES_COLOR_T,NCURSES_COLOR_T,NCURSES_COLOR_T);

641 
NCURSES_EXPORT
(Ë
öô_∑ú
 (
NCURSES_PAIRS_T
,
NCURSES_COLOR_T
,NCURSES_COLOR_T);

642 
NCURSES_EXPORT
(Ë
ön°r
 (*, );

643 
NCURSES_EXPORT
(Ë
ösch
 (
chty≥
);

644 
NCURSES_EXPORT
(Ë
ösdñ 
 ();

645 
NCURSES_EXPORT
(Ë
ö£π 
 ();

646 
NCURSES_EXPORT
(Ë
ö¢°r
 (const *, );

647 
NCURSES_EXPORT
(Ë
ös°r
 (const *);

648 
NCURSES_EXPORT
(Ë
ö°r
 (*);

649 
NCURSES_EXPORT
(Ë
öåÊush
 (
WINDOW
 *,
boﬁ
);

650 
NCURSES_EXPORT
(
boﬁ
Ë
i£ndwö
 ();

651 
NCURSES_EXPORT
(
boﬁ
Ë
is_löëouched
 (
WINDOW
 *,);

652 
NCURSES_EXPORT
(
boﬁ
Ë
is_wötouched
 (
WINDOW
 *);

653 
NCURSES_EXPORT
(
NCURSES_CONST
 *Ë
key«me
 ();

654 
NCURSES_EXPORT
(Ë
key∑d
 (
WINDOW
 *,
boﬁ
);

655 
NCURSES_EXPORT
(Ë
kûlch¨
 ();

656 
NCURSES_EXPORT
(Ë
Àaveok
 (
WINDOW
 *,
boﬁ
);

657 
NCURSES_EXPORT
(*Ë
l⁄g«me
 ();

658 
NCURSES_EXPORT
(Ë
mëa
 (
WINDOW
 *,
boﬁ
);

659 
NCURSES_EXPORT
(Ë
move
 (, );

660 
NCURSES_EXPORT
(Ë
mvaddch
 (, , c⁄° 
chty≥
);

661 
NCURSES_EXPORT
(Ë
mvaddchn°r
 (, , c⁄° 
chty≥
 *, );

662 
NCURSES_EXPORT
(Ë
mvaddch°r
 (, , c⁄° 
chty≥
 *);

663 
NCURSES_EXPORT
(Ë
mvaddn°r
 (, , const *, );

664 
NCURSES_EXPORT
(Ë
mvadd°r
 (, , const *);

665 
NCURSES_EXPORT
(Ë
mvchg©
 (, , , 
©å_t
, 
NCURSES_PAIRS_T
, const *);

666 
NCURSES_EXPORT
(Ë
mvcur
 (,,,);

667 
NCURSES_EXPORT
(Ë
mvdñch
 (, );

668 
NCURSES_EXPORT
(Ë
mvdîwö
 (
WINDOW
 *, , );

669 
NCURSES_EXPORT
(Ë
mvgëch
 (, );

670 
NCURSES_EXPORT
(Ë
mvgën°r
 (, , *, );

671 
NCURSES_EXPORT
(Ë
mvgë°r
 (, , *);

672 
NCURSES_EXPORT
(Ë
mvhlöe
 (, , 
chty≥
, );

673 
NCURSES_EXPORT
(
chty≥
Ë
mvöch
 (, );

674 
NCURSES_EXPORT
(Ë
mvöchn°r
 (, , 
chty≥
 *, );

675 
NCURSES_EXPORT
(Ë
mvöch°r
 (, , 
chty≥
 *);

676 
NCURSES_EXPORT
(Ë
mvön°r
 (, , *, );

677 
NCURSES_EXPORT
(Ë
mvösch
 (, , 
chty≥
);

678 
NCURSES_EXPORT
(Ë
mvö¢°r
 (, , const *, );

679 
NCURSES_EXPORT
(Ë
mvös°r
 (, , const *);

680 
NCURSES_EXPORT
(Ë
mvö°r
 (, , *);

681 
NCURSES_EXPORT
(Ë
mv¥ötw
 (,, const *,...)

682 
GCC_PRINTFLIKE
(3,4);

683 
NCURSES_EXPORT
(Ë
mvsˇnw
 (,, 
NCURSES_CONST
 *,...)

684 
GCC_SCANFLIKE
(3,4);

685 
NCURSES_EXPORT
(Ë
mvvlöe
 (, , 
chty≥
, );

686 
NCURSES_EXPORT
(Ë
mvwaddch
 (
WINDOW
 *, , , c⁄° 
chty≥
);

687 
NCURSES_EXPORT
(Ë
mvwaddchn°r
 (
WINDOW
 *, , , c⁄° 
chty≥
 *, );

688 
NCURSES_EXPORT
(Ë
mvwaddch°r
 (
WINDOW
 *, , , c⁄° 
chty≥
 *);

689 
NCURSES_EXPORT
(Ë
mvwaddn°r
 (
WINDOW
 *, , , const *, );

690 
NCURSES_EXPORT
(Ë
mvwadd°r
 (
WINDOW
 *, , , const *);

691 
NCURSES_EXPORT
(Ë
mvwchg©
 (
WINDOW
 *, , , , 
©å_t
, 
NCURSES_PAIRS_T
, const *);

692 
NCURSES_EXPORT
(Ë
mvwdñch
 (
WINDOW
 *, , );

693 
NCURSES_EXPORT
(Ë
mvwgëch
 (
WINDOW
 *, , );

694 
NCURSES_EXPORT
(Ë
mvwgën°r
 (
WINDOW
 *, , , *, );

695 
NCURSES_EXPORT
(Ë
mvwgë°r
 (
WINDOW
 *, , , *);

696 
NCURSES_EXPORT
(Ë
mvwhlöe
 (
WINDOW
 *, , , 
chty≥
, );

697 
NCURSES_EXPORT
(Ë
mvwö
 (
WINDOW
 *,,);

698 
NCURSES_EXPORT
(
chty≥
Ë
mvwöch
 (
WINDOW
 *, , );

699 
NCURSES_EXPORT
(Ë
mvwöchn°r
 (
WINDOW
 *, , , 
chty≥
 *, );

700 
NCURSES_EXPORT
(Ë
mvwöch°r
 (
WINDOW
 *, , , 
chty≥
 *);

701 
NCURSES_EXPORT
(Ë
mvwön°r
 (
WINDOW
 *, , , *, );

702 
NCURSES_EXPORT
(Ë
mvwösch
 (
WINDOW
 *, , , 
chty≥
);

703 
NCURSES_EXPORT
(Ë
mvwö¢°r
 (
WINDOW
 *, , , const *, );

704 
NCURSES_EXPORT
(Ë
mvwös°r
 (
WINDOW
 *, , , const *);

705 
NCURSES_EXPORT
(Ë
mvwö°r
 (
WINDOW
 *, , , *);

706 
NCURSES_EXPORT
(Ë
mvw¥ötw
 (
WINDOW
*,,, const *,...)

707 
GCC_PRINTFLIKE
(4,5);

708 
NCURSES_EXPORT
(Ë
mvwsˇnw
 (
WINDOW
 *,,, 
NCURSES_CONST
 *,...)

709 
GCC_SCANFLIKE
(4,5);

710 
NCURSES_EXPORT
(Ë
mvwvlöe
 (
WINDOW
 *,, , 
chty≥
, );

711 
NCURSES_EXPORT
(Ë
«pms
 ();

712 
NCURSES_EXPORT
(
WINDOW
 *Ë
√w∑d
 (,);

713 
NCURSES_EXPORT
(
SCREEN
 *Ë
√wãrm
 (
NCURSES_CONST
 *,
FILE
 *,FILE *);

714 
NCURSES_EXPORT
(
WINDOW
 *Ë
√wwö
 (,,,);

715 
NCURSES_EXPORT
(Ë
∆
 ();

716 
NCURSES_EXPORT
(Ë
nocbªak
 ();

717 
NCURSES_EXPORT
(Ë
nodñay
 (
WINDOW
 *,
boﬁ
);

718 
NCURSES_EXPORT
(Ë
n€cho
 ();

719 
NCURSES_EXPORT
(Ë
n⁄l
 ();

720 
NCURSES_EXPORT
(Ë
noqiÊush
 ();

721 
NCURSES_EXPORT
(Ë
n‹aw
 ();

722 
NCURSES_EXPORT
(Ë
nŸimeout
 (
WINDOW
 *,
boﬁ
);

723 
NCURSES_EXPORT
(Ë
ovîœy
 (c⁄° 
WINDOW
*,WINDOW *);

724 
NCURSES_EXPORT
(Ë
ovîwrôe
 (c⁄° 
WINDOW
*,WINDOW *);

725 
NCURSES_EXPORT
(Ë
∑ú_c⁄ã¡
 (
NCURSES_PAIRS_T
,
NCURSES_COLOR_T
*,NCURSES_COLOR_T*);

726 
NCURSES_EXPORT
(Ë
PAIR_NUMBER
 ();

727 
NCURSES_EXPORT
(Ë
≥choch¨
 (
WINDOW
 *, c⁄° 
chty≥
);

728 
NCURSES_EXPORT
(Ë
≤ouåe‰esh
 (
WINDOW
*,,,,,,);

729 
NCURSES_EXPORT
(Ë
¥e‰esh
 (
WINDOW
 *,,,,,,);

730 
NCURSES_EXPORT
(Ë
¥ötw
 (const *,...)

731 
GCC_PRINTFLIKE
(1,2);

732 
NCURSES_EXPORT
(Ë
putwö
 (
WINDOW
 *, 
FILE
 *);

733 
NCURSES_EXPORT
(Ë
qiÊush
 ();

734 
NCURSES_EXPORT
(Ë
øw
 ();

735 
NCURSES_EXPORT
(Ë
ªdøwwö
 (
WINDOW
 *);

736 
NCURSES_EXPORT
(Ë
ª‰esh
 ();

737 
NCURSES_EXPORT
(Ë
ª£ây
 ();

738 
NCURSES_EXPORT
(Ë
ª£t_¥og_mode
 ();

739 
NCURSES_EXPORT
(Ë
ª£t_shñl_mode
 ();

740 
NCURSES_EXPORT
(Ë
rùofÊöe
 (, (*)(
WINDOW
 *, ));

741 
NCURSES_EXPORT
(Ë
ßvëty
 ();

742 
NCURSES_EXPORT
(Ë
sˇnw
 (
NCURSES_CONST
 *,...)

743 
GCC_SCANFLIKE
(1,2);

744 
NCURSES_EXPORT
(Ë
s¸_dump
 (const *);

745 
NCURSES_EXPORT
(Ë
s¸_öô
 (const *);

746 
NCURSES_EXPORT
(Ë
s¸l
 ();

747 
NCURSES_EXPORT
(Ë
s¸ﬁl
 (
WINDOW
 *);

748 
NCURSES_EXPORT
(Ë
s¸ﬁlok
 (
WINDOW
 *,
boﬁ
);

749 
NCURSES_EXPORT
(Ë
s¸_ª°‹e
 (const *);

750 
NCURSES_EXPORT
(Ë
s¸_£t
 (const *);

751 
NCURSES_EXPORT
(Ë
£ts¸ªg
 (,);

752 
NCURSES_EXPORT
(
SCREEN
 *Ë
£t_ãrm
 (SCREEN *);

753 
NCURSES_EXPORT
(Ë
¶k_©åoff
 (c⁄° 
chty≥
);

754 
NCURSES_EXPORT
(Ë
¶k_©å_off
 (c⁄° 
©å_t
, *);

755 
NCURSES_EXPORT
(Ë
¶k_©å⁄
 (c⁄° 
chty≥
);

756 
NCURSES_EXPORT
(Ë
¶k_©å_⁄
 (
©å_t
,*);

757 
NCURSES_EXPORT
(Ë
¶k_©å£t
 (c⁄° 
chty≥
);

758 
NCURSES_EXPORT
(
©å_t
Ë
¶k_©å
 ();

759 
NCURSES_EXPORT
(Ë
¶k_©å_£t
 (c⁄° 
©å_t
,
NCURSES_PAIRS_T
,*);

760 
NCURSES_EXPORT
(Ë
¶k_˛ór
 ();

761 
NCURSES_EXPORT
(Ë
¶k_cﬁ‹
 (
NCURSES_PAIRS_T
);

762 
NCURSES_EXPORT
(Ë
¶k_öô
 ();

763 
NCURSES_EXPORT
(*Ë
¶k_œbñ
 ();

764 
NCURSES_EXPORT
(Ë
¶k_nouåe‰esh
 ();

765 
NCURSES_EXPORT
(Ë
¶k_ª‰esh
 ();

766 
NCURSES_EXPORT
(Ë
¶k_ª°‹e
 ();

767 
NCURSES_EXPORT
(Ë
¶k_£t
 (,const *,);

768 
NCURSES_EXPORT
(Ë
¶k_touch
 ();

769 
NCURSES_EXPORT
(Ë
°™dout
 ();

770 
NCURSES_EXPORT
(Ë
°™díd
 ();

771 
NCURSES_EXPORT
(Ë
°¨t_cﬁ‹
 ();

772 
NCURSES_EXPORT
(
WINDOW
 *Ë
sub∑d
 (WINDOW *, , , , );

773 
NCURSES_EXPORT
(
WINDOW
 *Ë
subwö
 (WINDOW *, , , , );

774 
NCURSES_EXPORT
(Ë
syncok
 (
WINDOW
 *, 
boﬁ
);

775 
NCURSES_EXPORT
(
chty≥
Ë
ãrm©ås
 ();

776 
NCURSES_EXPORT
(*Ë
ãrm«me
 ();

777 
NCURSES_EXPORT
(Ë
timeout
 ();

778 
NCURSES_EXPORT
(Ë
touchlöe
 (
WINDOW
 *, , );

779 
NCURSES_EXPORT
(Ë
touchwö
 (
WINDOW
 *);

780 
NCURSES_EXPORT
(Ë
ty≥ahód
 ();

781 
NCURSES_EXPORT
(Ë
ungëch
 ();

782 
NCURSES_EXPORT
(Ë
u¡ouchwö
 (
WINDOW
 *);

783 
NCURSES_EXPORT
(Ë
u£_ív
 (
boﬁ
);

784 
NCURSES_EXPORT
(Ë
u£_tio˘l
 (
boﬁ
);

785 
NCURSES_EXPORT
(Ë
vid©å
 (
chty≥
);

786 
NCURSES_EXPORT
(Ë
vidputs
 (
chty≥
, 
NCURSES_OUTC
);

787 
NCURSES_EXPORT
(Ë
vlöe
 (
chty≥
, );

788 
NCURSES_EXPORT
(Ë
vw¥ötw
 (
WINDOW
 *, c⁄° *,
va_li°
);

789 
NCURSES_EXPORT
(Ë
vw_¥ötw
 (
WINDOW
 *, c⁄° *,
va_li°
);

790 
NCURSES_EXPORT
(Ë
vwsˇnw
 (
WINDOW
 *, 
NCURSES_CONST
 *,
va_li°
);

791 
NCURSES_EXPORT
(Ë
vw_sˇnw
 (
WINDOW
 *, 
NCURSES_CONST
 *,
va_li°
);

792 
NCURSES_EXPORT
(Ë
waddch
 (
WINDOW
 *, c⁄° 
chty≥
);

793 
NCURSES_EXPORT
(Ë
waddchn°r
 (
WINDOW
 *,c⁄° 
chty≥
 *,);

794 
NCURSES_EXPORT
(Ë
waddch°r
 (
WINDOW
 *,c⁄° 
chty≥
 *);

795 
NCURSES_EXPORT
(Ë
waddn°r
 (
WINDOW
 *,const *,);

796 
NCURSES_EXPORT
(Ë
wadd°r
 (
WINDOW
 *,const *);

797 
NCURSES_EXPORT
(Ë
w©å⁄
 (
WINDOW
 *, );

798 
NCURSES_EXPORT
(Ë
w©åoff
 (
WINDOW
 *, );

799 
NCURSES_EXPORT
(Ë
w©å£t
 (
WINDOW
 *, );

800 
NCURSES_EXPORT
(Ë
w©å_gë
 (
WINDOW
 *, 
©å_t
 *, 
NCURSES_PAIRS_T
 *, *);

801 
NCURSES_EXPORT
(Ë
w©å_⁄
 (
WINDOW
 *, 
©å_t
, *);

802 
NCURSES_EXPORT
(Ë
w©å_off
 (
WINDOW
 *, 
©å_t
, *);

803 
NCURSES_EXPORT
(Ë
w©å_£t
 (
WINDOW
 *, 
©å_t
, 
NCURSES_PAIRS_T
, *);

804 
NCURSES_EXPORT
(Ë
wbkgd
 (
WINDOW
 *, 
chty≥
);

805 
NCURSES_EXPORT
(Ë
wbkgd£t
 (
WINDOW
 *,
chty≥
);

806 
NCURSES_EXPORT
(Ë
wb‹dî
 (
WINDOW
 *,
chty≥
,chtype,chtype,chtype,chtype,chtype,chtype,chtype);

807 
NCURSES_EXPORT
(Ë
wchg©
 (
WINDOW
 *, , 
©å_t
, 
NCURSES_PAIRS_T
, const *);

808 
NCURSES_EXPORT
(Ë
w˛ór
 (
WINDOW
 *);

809 
NCURSES_EXPORT
(Ë
w˛πobŸ
 (
WINDOW
 *);

810 
NCURSES_EXPORT
(Ë
w˛π€ﬁ
 (
WINDOW
 *);

811 
NCURSES_EXPORT
(Ë
wcﬁ‹_£t
 (
WINDOW
*,
NCURSES_PAIRS_T
,*);

812 
NCURSES_EXPORT
(Ë
wcursyncup
 (
WINDOW
 *);

813 
NCURSES_EXPORT
(Ë
wdñch
 (
WINDOW
 *);

814 
NCURSES_EXPORT
(Ë
wdñëñn
 (
WINDOW
 *);

815 
NCURSES_EXPORT
(Ë
wechoch¨
 (
WINDOW
 *, c⁄° 
chty≥
);

816 
NCURSES_EXPORT
(Ë
wîa£
 (
WINDOW
 *);

817 
NCURSES_EXPORT
(Ë
wgëch
 (
WINDOW
 *);

818 
NCURSES_EXPORT
(Ë
wgën°r
 (
WINDOW
 *,*,);

819 
NCURSES_EXPORT
(Ë
wgë°r
 (
WINDOW
 *, *);

820 
NCURSES_EXPORT
(Ë
whlöe
 (
WINDOW
 *, 
chty≥
, );

821 
NCURSES_EXPORT
(
chty≥
Ë
wöch
 (
WINDOW
 *);

822 
NCURSES_EXPORT
(Ë
wöchn°r
 (
WINDOW
 *, 
chty≥
 *, );

823 
NCURSES_EXPORT
(Ë
wöch°r
 (
WINDOW
 *, 
chty≥
 *);

824 
NCURSES_EXPORT
(Ë
wön°r
 (
WINDOW
 *, *, );

825 
NCURSES_EXPORT
(Ë
wösch
 (
WINDOW
 *, 
chty≥
);

826 
NCURSES_EXPORT
(Ë
wösdñ 
 (
WINDOW
 *,);

827 
NCURSES_EXPORT
(Ë
wö£π 
 (
WINDOW
 *);

828 
NCURSES_EXPORT
(Ë
wö¢°r
 (
WINDOW
 *, const *,);

829 
NCURSES_EXPORT
(Ë
wös°r
 (
WINDOW
 *, const *);

830 
NCURSES_EXPORT
(Ë
wö°r
 (
WINDOW
 *, *);

831 
NCURSES_EXPORT
(Ë
wmove
 (
WINDOW
 *,,);

832 
NCURSES_EXPORT
(Ë
wnouåe‰esh
 (
WINDOW
 *);

833 
NCURSES_EXPORT
(Ë
w¥ötw
 (
WINDOW
 *, const *,...)

834 
GCC_PRINTFLIKE
(2,3);

835 
NCURSES_EXPORT
(Ë
wªdøw 
 (
WINDOW
 *,,);

836 
NCURSES_EXPORT
(Ë
wª‰esh
 (
WINDOW
 *);

837 
NCURSES_EXPORT
(Ë
wsˇnw
 (
WINDOW
 *, 
NCURSES_CONST
 *,...)

838 
GCC_SCANFLIKE
(2,3);

839 
NCURSES_EXPORT
(Ë
ws¸l
 (
WINDOW
 *,);

840 
NCURSES_EXPORT
(Ë
w£ts¸ªg
 (
WINDOW
 *,,);

841 
NCURSES_EXPORT
(Ë
w°™dout
 (
WINDOW
 *);

842 
NCURSES_EXPORT
(Ë
w°™díd
 (
WINDOW
 *);

843 
NCURSES_EXPORT
(Ë
wsyncdown
 (
WINDOW
 *);

844 
NCURSES_EXPORT
(Ë
wsyncup
 (
WINDOW
 *);

845 
NCURSES_EXPORT
(Ë
wtimeout
 (
WINDOW
 *,);

846 
NCURSES_EXPORT
(Ë
wtouch 
 (
WINDOW
 *,,,);

847 
NCURSES_EXPORT
(Ë
wvlöe
 (
WINDOW
 *,
chty≥
,);

852 
NCURSES_EXPORT
(Ë
tigëÊag
 (
NCURSES_CONST
 *);

853 
NCURSES_EXPORT
(Ë
tigënum
 (
NCURSES_CONST
 *);

854 
NCURSES_EXPORT
(*Ë
tigë°r
 (
NCURSES_CONST
 *);

855 
NCURSES_EXPORT
(Ë
puç
 (const *);

857 #i‡
NCURSES_TPARM_VARARGS


858 
NCURSES_EXPORT
(*Ë
ç¨m
 (
NCURSES_CONST
 *, ...);

860 
NCURSES_EXPORT
(*Ë
ç¨m
 (
NCURSES_CONST
 *, 
NCURSES_TPARM_ARG
,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG);

861 
NCURSES_EXPORT
(*Ë
ç¨m_v¨¨gs
 (
NCURSES_CONST
 *, ...);

864 
NCURSES_EXPORT
(*Ë
tù¨m
 (const *, ...);

869 
NCURSES_EXPORT
(Ë
gë©ås
 (c⁄° 
WINDOW
 *);

870 
NCURSES_EXPORT
(Ë
gëcurx
 (c⁄° 
WINDOW
 *);

871 
NCURSES_EXPORT
(Ë
gëcury
 (c⁄° 
WINDOW
 *);

872 
NCURSES_EXPORT
(Ë
gëbegx
 (c⁄° 
WINDOW
 *);

873 
NCURSES_EXPORT
(Ë
gëbegy
 (c⁄° 
WINDOW
 *);

874 
NCURSES_EXPORT
(Ë
gëmaxx
 (c⁄° 
WINDOW
 *);

875 
NCURSES_EXPORT
(Ë
gëmaxy
 (c⁄° 
WINDOW
 *);

876 
NCURSES_EXPORT
(Ë
gë∑rx
 (c⁄° 
WINDOW
 *);

877 
NCURSES_EXPORT
(Ë
gë∑ry
 (c⁄° 
WINDOW
 *);

882 #i‡!
NCURSES_WIDECHAR


883 
	#vid_©å
(
a
,
∑ú
,
›ts
Ë
	`vid©å
◊)

	)

890 #unde‡
NCURSES_EXT_FUNCS


891 
	#NCURSES_EXT_FUNCS
 20140913

	)

892 (*
	gNCURSES_WINDOW_CB
)(
	tWINDOW
 *, *);

893 (*
	gNCURSES_SCREEN_CB
)(
	tSCREEN
 *, *);

894 
NCURSES_EXPORT
(
boﬁ
Ë
is_ãrm_ªsized
 (, );

895 
NCURSES_EXPORT
(*Ë
keybound
 (, );

896 
NCURSES_EXPORT
(c⁄° *Ë
cur£s_vîsi⁄
 ();

897 
NCURSES_EXPORT
(Ë
assume_deÁu…_cﬁ‹s
 (, );

898 
NCURSES_EXPORT
(Ë
deföe_key
 (const *, );

899 
NCURSES_EXPORT
(Ë
gë_escdñay
 ();

900 
NCURSES_EXPORT
(Ë
key_deföed
 (const *);

901 
NCURSES_EXPORT
(Ë
keyok
 (, 
boﬁ
);

902 
NCURSES_EXPORT
(Ë
ªsize_ãrm
 (, );

903 
NCURSES_EXPORT
(Ë
ªsizëîm
 (, );

904 
NCURSES_EXPORT
(Ë
£t_escdñay
 ();

905 
NCURSES_EXPORT
(Ë
£t_èbsize
 ();

906 
NCURSES_EXPORT
(Ë
u£_deÁu…_cﬁ‹s
 ();

907 
NCURSES_EXPORT
(Ë
u£_exãnded_«mes
 (
boﬁ
);

908 
NCURSES_EXPORT
(Ë
u£_Àgacy_codög
 ();

909 
NCURSES_EXPORT
(Ë
u£_s¸ìn
 (
SCREEN
 *, 
NCURSES_SCREEN_CB
, *);

910 
NCURSES_EXPORT
(Ë
u£_wödow
 (
WINDOW
 *, 
NCURSES_WINDOW_CB
, *);

911 
NCURSES_EXPORT
(Ë
wªsize
 (
WINDOW
 *, , );

912 
NCURSES_EXPORT
(Ë
nofûãr
();

918 
NCURSES_EXPORT
(
WINDOW
 *Ë
wgë∑ª¡
 (const WINDOW *);

919 
NCURSES_EXPORT
(
boﬁ
Ë
is_˛óªd
 (c⁄° 
WINDOW
 *);

920 
NCURSES_EXPORT
(
boﬁ
Ë
is_idcok
 (c⁄° 
WINDOW
 *);

921 
NCURSES_EXPORT
(
boﬁ
Ë
is_idlok
 (c⁄° 
WINDOW
 *);

922 
NCURSES_EXPORT
(
boﬁ
Ë
is_immedok
 (c⁄° 
WINDOW
 *);

923 
NCURSES_EXPORT
(
boﬁ
Ë
is_key∑d
 (c⁄° 
WINDOW
 *);

924 
NCURSES_EXPORT
(
boﬁ
Ë
is_Àaveok
 (c⁄° 
WINDOW
 *);

925 
NCURSES_EXPORT
(
boﬁ
Ë
is_nodñay
 (c⁄° 
WINDOW
 *);

926 
NCURSES_EXPORT
(
boﬁ
Ë
is_nŸimeout
 (c⁄° 
WINDOW
 *);

927 
NCURSES_EXPORT
(
boﬁ
Ë
is_∑d
 (c⁄° 
WINDOW
 *);

928 
NCURSES_EXPORT
(
boﬁ
Ë
is_s¸ﬁlok
 (c⁄° 
WINDOW
 *);

929 
NCURSES_EXPORT
(
boﬁ
Ë
is_subwö
 (c⁄° 
WINDOW
 *);

930 
NCURSES_EXPORT
(
boﬁ
Ë
is_syncok
 (c⁄° 
WINDOW
 *);

931 
NCURSES_EXPORT
(Ë
wgëdñay
 (c⁄° 
WINDOW
 *);

932 
NCURSES_EXPORT
(Ë
wgës¸ªg
 (c⁄° 
WINDOW
 *, *, *);

935 
	#cur£s_vîsi⁄
(Ë
NCURSES_VERSION


	)

943 #unde‡
NCURSES_SP_FUNCS


944 
	#NCURSES_SP_FUNCS
 20140913

	)

945 
	#NCURSES_SP_NAME
(
«me
Ë«me##
_•


	)

948 
	#NCURSES_SP_OUTC
 
	`NCURSES_SP_NAME
(
NCURSES_OUTC
)

	)

949 (*
	gNCURSES_SP_OUTC
)(
	tSCREEN
*, );

951 
NCURSES_EXPORT
(
SCREEN
 *Ë
√w_¥es¸
 ();

953 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
baudøã
Ë(
SCREEN
*);

954 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
bìp
Ë(
SCREEN
*);

955 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
ˇn_ch™ge_cﬁ‹
Ë(
SCREEN
*);

956 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
cbªak
Ë(
SCREEN
*);

957 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
curs_£t
Ë(
SCREEN
*, );

958 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
cﬁ‹_c⁄ã¡
Ë(
SCREEN
*, 
NCURSES_PAIRS_T
, 
NCURSES_COLOR_T
*, NCURSES_COLOR_T*, NCURSES_COLOR_T*);

959 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
def_¥og_mode
Ë(
SCREEN
*);

960 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
def_shñl_mode
Ë(
SCREEN
*);

961 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
dñay_ouçut
Ë(
SCREEN
*, );

962 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
doupd©e
Ë(
SCREEN
*);

963 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
echo
Ë(
SCREEN
*);

964 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ídwö
Ë(
SCREEN
*);

965 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
îa£ch¨
Ë(
SCREEN
*);

966 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
fûãr
Ë(
SCREEN
*);

967 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
Êash
Ë(
SCREEN
*);

968 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
Êushöp
Ë(
SCREEN
*);

969 
NCURSES_EXPORT
(
WINDOW
 *Ë
NCURSES_SP_NAME
(
gëwö
Ë(
SCREEN
*, 
FILE
 *);

970 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
hÆfdñay
Ë(
SCREEN
*, );

971 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
has_cﬁ‹s
Ë(
SCREEN
*);

972 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
has_ic
Ë(
SCREEN
*);

973 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
has_û
Ë(
SCREEN
*);

974 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
öô_cﬁ‹
Ë(
SCREEN
*, 
NCURSES_COLOR_T
, NCURSES_COLOR_T, NCURSES_COLOR_T, NCURSES_COLOR_T);

975 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
öô_∑ú
Ë(
SCREEN
*, 
NCURSES_PAIRS_T
, 
NCURSES_COLOR_T
, NCURSES_COLOR_T);

976 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
öåÊush
Ë(
SCREEN
*, 
WINDOW
*, 
boﬁ
);

977 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
i£ndwö
Ë(
SCREEN
*);

978 
NCURSES_EXPORT
(
NCURSES_CONST
 *Ë
NCURSES_SP_NAME
(
key«me
Ë(
SCREEN
*, );

979 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
kûlch¨
Ë(
SCREEN
*);

980 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
l⁄g«me
Ë(
SCREEN
*);

981 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
mvcur
Ë(
SCREEN
*, , , , );

982 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
«pms
Ë(
SCREEN
*, );

983 
NCURSES_EXPORT
(
WINDOW
 *Ë
NCURSES_SP_NAME
(
√w∑d
Ë(
SCREEN
*, , );

984 
NCURSES_EXPORT
(
SCREEN
 *Ë
NCURSES_SP_NAME
(
√wãrm
Ë(SCREEN*, 
NCURSES_CONST
 *, 
FILE
 *, FILE *);

985 
NCURSES_EXPORT
(
WINDOW
 *Ë
NCURSES_SP_NAME
(
√wwö
Ë(
SCREEN
*, , , , );

986 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
∆
Ë(
SCREEN
*);

987 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
nocbªak
Ë(
SCREEN
*);

988 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
n€cho
Ë(
SCREEN
*);

989 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
n⁄l
Ë(
SCREEN
*);

990 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
noqiÊush
Ë(
SCREEN
*);

991 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
n‹aw
Ë(
SCREEN
*);

992 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
∑ú_c⁄ã¡
Ë(
SCREEN
*, 
NCURSES_PAIRS_T
, 
NCURSES_COLOR_T
*, NCURSES_COLOR_T*);

993 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
qiÊush
Ë(
SCREEN
*);

994 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
øw
Ë(
SCREEN
*);

995 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ª£t_¥og_mode
Ë(
SCREEN
*);

996 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ª£t_shñl_mode
Ë(
SCREEN
*);

997 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ª£ây
Ë(
SCREEN
*);

998 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
rùofÊöe
Ë(
SCREEN
*, , (*)(
WINDOW
 *, ));

999 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ßvëty
Ë(
SCREEN
*);

1000 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
s¸_öô
Ë(
SCREEN
*, const *);

1001 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
s¸_ª°‹e
Ë(
SCREEN
*, const *);

1002 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
s¸_£t
Ë(
SCREEN
*, const *);

1003 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_©åoff
Ë(
SCREEN
*, c⁄° 
chty≥
);

1004 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_©å⁄
Ë(
SCREEN
*, c⁄° 
chty≥
);

1005 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_©å£t
Ë(
SCREEN
*, c⁄° 
chty≥
);

1006 
NCURSES_EXPORT
(
©å_t
Ë
NCURSES_SP_NAME
(
¶k_©å
Ë(
SCREEN
*);

1007 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_©å_£t
Ë(
SCREEN
*, c⁄° 
©å_t
, 
NCURSES_PAIRS_T
, *);

1008 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_˛ór
Ë(
SCREEN
*);

1009 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_cﬁ‹
Ë(
SCREEN
*, 
NCURSES_PAIRS_T
);

1010 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_öô
Ë(
SCREEN
*, );

1011 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
¶k_œbñ
Ë(
SCREEN
*, );

1012 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_nouåe‰esh
Ë(
SCREEN
*);

1013 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_ª‰esh
Ë(
SCREEN
*);

1014 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_ª°‹e
Ë(
SCREEN
*);

1015 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_£t
Ë(
SCREEN
*, , const *, );

1016 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_touch
Ë(
SCREEN
*);

1017 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
°¨t_cﬁ‹
Ë(
SCREEN
*);

1018 
NCURSES_EXPORT
(
chty≥
Ë
NCURSES_SP_NAME
(
ãrm©ås
Ë(
SCREEN
*);

1019 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
ãrm«me
Ë(
SCREEN
*);

1020 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ty≥ahód
Ë(
SCREEN
*, );

1021 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ungëch
Ë(
SCREEN
*, );

1022 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
u£_ív
Ë(
SCREEN
*, 
boﬁ
);

1023 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
u£_tio˘l
Ë(
SCREEN
*, 
boﬁ
);

1024 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
vid©å
Ë(
SCREEN
*, 
chty≥
);

1025 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
vidputs
Ë(
SCREEN
*, 
chty≥
, 
NCURSES_SP_OUTC
);

1027 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
keybound
Ë(
SCREEN
*, , );

1028 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
assume_deÁu…_cﬁ‹s
Ë(
SCREEN
*, , );

1029 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
deföe_key
Ë(
SCREEN
*, const *, );

1030 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
gë_escdñay
Ë(
SCREEN
*);

1031 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
is_ãrm_ªsized
Ë(
SCREEN
*, , );

1032 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
key_deföed
Ë(
SCREEN
*, const *);

1033 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
keyok
Ë(
SCREEN
*, , 
boﬁ
);

1034 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
nofûãr
Ë(
SCREEN
*);

1035 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ªsize_ãrm
Ë(
SCREEN
*, , );

1036 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ªsizëîm
Ë(
SCREEN
*, , );

1037 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
£t_escdñay
Ë(
SCREEN
*, );

1038 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
£t_èbsize
Ë(
SCREEN
*, );

1039 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
u£_deÁu…_cﬁ‹s
Ë(
SCREEN
*);

1040 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
u£_Àgacy_codög
Ë(
SCREEN
*, );

1043 #unde‡
NCURSES_SP_FUNCS


1044 
	#NCURSES_SP_FUNCS
 0

	)

1045 
	#NCURSES_SP_NAME
(
«me
Ë
	)
name

1046 
	#NCURSES_SP_OUTC
 
NCURSES_OUTC


	)

1051 
	#NCURSES_ATTR_SHIFT
 8

	)

1052 
	#NCURSES_BITS
(
mask
,
shi·
Ë(
	`NCURSES_CAST
(
chty≥
,(mask)Ë<< ((shi·Ë+ 
NCURSES_ATTR_SHIFT
))

	)

1054 
	#A_NORMAL
 (1UL - 1UL)

	)

1055 
	#A_ATTRIBUTES
 
	`NCURSES_BITS
(~(1UL - 1UL),0)

	)

1056 
	#A_CHARTEXT
 (
	`NCURSES_BITS
(1UL,0Ë- 1UL)

	)

1057 
	#A_COLOR
 
	`NCURSES_BITS
(((1ULË<< 8Ë- 1UL,0)

	)

1058 
	#A_STANDOUT
 
	`NCURSES_BITS
(1UL,8)

	)

1059 
	#A_UNDERLINE
 
	`NCURSES_BITS
(1UL,9)

	)

1060 
	#A_REVERSE
 
	`NCURSES_BITS
(1UL,10)

	)

1061 
	#A_BLINK
 
	`NCURSES_BITS
(1UL,11)

	)

1062 
	#A_DIM
 
	`NCURSES_BITS
(1UL,12)

	)

1063 
	#A_BOLD
 
	`NCURSES_BITS
(1UL,13)

	)

1064 
	#A_ALTCHARSET
 
	`NCURSES_BITS
(1UL,14)

	)

1065 
	#A_INVIS
 
	`NCURSES_BITS
(1UL,15)

	)

1066 
	#A_PROTECT
 
	`NCURSES_BITS
(1UL,16)

	)

1067 
	#A_HORIZONTAL
 
	`NCURSES_BITS
(1UL,17)

	)

1068 
	#A_LEFT
 
	`NCURSES_BITS
(1UL,18)

	)

1069 
	#A_LOW
 
	`NCURSES_BITS
(1UL,19)

	)

1070 
	#A_RIGHT
 
	`NCURSES_BITS
(1UL,20)

	)

1071 
	#A_TOP
 
	`NCURSES_BITS
(1UL,21)

	)

1072 
	#A_VERTICAL
 
	`NCURSES_BITS
(1UL,22)

	)

1075 
	#A_ITALIC
 
	`NCURSES_BITS
(1UL,23Ë

	)

1088 
	#gëyx
(
wö
,
y
,
x
Ë(y = 
	`gëcury
(wö), x = 
	`gëcurx
(wö))

	)

1089 
	#gëbegyx
(
wö
,
y
,
x
Ë(y = 
	`gëbegy
(wö), x = 
	`gëbegx
(wö))

	)

1090 
	#gëmaxyx
(
wö
,
y
,
x
Ë(y = 
	`gëmaxy
(wö), x = 
	`gëmaxx
(wö))

	)

1091 
	#gë∑ryx
(
wö
,
y
,
x
Ë(y = 
	`gë∑ry
(wö), x = 
	`gë∑rx
(wö))

	)

1093 
	#gësyx
(
y
,
x
Ëdÿ{ i‡(
√ws¸
) { \

1094 i‡(
	`is_Àaveok
(
√ws¸
)) \

1095 (
y
Ë(
x
) = -1; \

1097 
	`gëyx
(
√ws¸
,(
y
), (
x
)); \

1099 } 0)

	)

1101 
	#£tsyx
(
y
,
x
Ëdÿ{ i‡(
√ws¸
) { \

1102 i‡((
y
Ë=-1 && (
x
) == -1) \

1103 
	`Àaveok
(
√ws¸
, 
TRUE
); \

1105 
	`Àaveok
(
√ws¸
, 
FALSE
); \

1106 
	`wmove
(
√ws¸
, (
y
), (
x
)); \

1109 } 0)

	)

1111 #i‚de‡
NCURSES_NOMACROS


1117 
	#wgë°r
(
w
, 
s
Ë
	`wgën°r
(w, s, -1)

	)

1118 
	#gën°r
(
s
, 
n
Ë
	`wgën°r
(
°ds¸
, s, (n))

	)

1120 
	#£âîm
(
ãrm
Ë
	`£tu±îm
—îm, 1, (*)0)

	)

1122 
	#fixãrm
(Ë
	`ª£t_¥og_mode
()

	)

1123 
	#ª£âîm
(Ë
	`ª£t_shñl_mode
()

	)

1124 
	#ßvëîm
(Ë
	`def_¥og_mode
()

	)

1125 
	#¸mode
(Ë
	`cbªak
()

	)

1126 
	#no¸mode
(Ë
	`nocbªak
()

	)

1127 
	#gëtmode
()

	)

1130 #i‡!
NCURSES_OPAQUE


1131 
	#gë©ås
(
wö
Ë
	`NCURSES_CAST
(, (wöË? (wö)->
_©ås
 : 
A_NORMAL
)

	)

1132 
	#gëcurx
(
wö
Ë((wöË? (wö)->
_curx
 : 
ERR
)

	)

1133 
	#gëcury
(
wö
Ë((wöË? (wö)->
_cury
 : 
ERR
)

	)

1134 
	#gëbegx
(
wö
Ë((wöË? (wö)->
_begx
 : 
ERR
)

	)

1135 
	#gëbegy
(
wö
Ë((wöË? (wö)->
_begy
 : 
ERR
)

	)

1136 
	#gëmaxx
(
wö
Ë((wöË? ((wö)->
_maxx
 + 1Ë: 
ERR
)

	)

1137 
	#gëmaxy
(
wö
Ë((wöË? ((wö)->
_maxy
 + 1Ë: 
ERR
)

	)

1138 
	#gë∑rx
(
wö
Ë((wöË? (wö)->
_∑rx
 : 
ERR
)

	)

1139 
	#gë∑ry
(
wö
Ë((wöË? (wö)->
_∑ry
 : 
ERR
)

	)

1142 
	#w°™dout
(
wö
Ë(
	`w©å£t
(wö,
A_STANDOUT
))

	)

1143 
	#w°™díd
(
wö
Ë(
	`w©å£t
(wö,
A_NORMAL
))

	)

1145 
	#w©å⁄
(
wö
,
©
Ë
	`w©å_⁄
(wö, 
	`NCURSES_CAST
(
©å_t
,át), 
NULL
)

	)

1146 
	#w©åoff
(
wö
,
©
Ë
	`w©å_off
(wö, 
	`NCURSES_CAST
(
©å_t
,át), 
NULL
)

	)

1148 #i‡!
NCURSES_OPAQUE


1149 #i‡
NCURSES_WIDECHAR
 && 0

1150 
	#w©å£t
(
wö
,
©
) ((win) \

1151 ? ((
wö
)->
_cﬁ‹
 = 
	`NCURSES_CAST
(, 
	`PAIR_NUMBER
(
©
)), \

1152 (
wö
)->
_©ås
 = 
	`NCURSES_CAST
(
©å_t
, 
©
), \

1153 
OK
) \

1154 : 
ERR
)

	)

1156 
	#w©å£t
(
wö
,
©
) ((win) \

1157 ? ((
wö
)->
_©ås
 = 
	`NCURSES_CAST
(
©å_t
, 
©
), \

1158 
OK
) \

1159 : 
ERR
)

	)

1163 
	#s¸ﬁl
(
wö
Ë
	`ws¸l
(wö,1)

	)

1165 
	#touchwö
(
wö
Ë
	`wtouch 
((wö), 0, 
	`gëmaxy
(wö), 1)

	)

1166 
	#touchlöe
(
wö
, 
s
, 
c
Ë
	`wtouch 
((wö), s, c, 1)

	)

1167 
	#u¡ouchwö
(
wö
Ë
	`wtouch 
((wö), 0, 
	`gëmaxy
(wö), 0)

	)

1169 
	#box
(
wö
, 
v
, 
h
Ë
	`wb‹dî
(wö, v, v, h, h, 0, 0, 0, 0)

	)

1170 
	#b‹dî
(
ls
, 
rs
, 
ts
, 
bs
, 
é
, 
å
, 
bl
, 
br
Ë
	`wb‹dî
(
°ds¸
,Üs,Ñs,Ås, bs,Ål,År, bl, br)

	)

1171 
	#hlöe
(
ch
, 
n
Ë
	`whlöe
(
°ds¸
, ch, (n))

	)

1172 
	#vlöe
(
ch
, 
n
Ë
	`wvlöe
(
°ds¸
, ch, (n))

	)

1174 
	#wö°r
(
w
, 
s
Ë
	`wön°r
(w, s, -1)

	)

1175 
	#wöch°r
(
w
, 
s
Ë
	`wöchn°r
(w, s, -1)

	)

1176 
	#wös°r
(
w
, 
s
Ë
	`wö¢°r
(w, s, -1)

	)

1178 #i‡!
NCURSES_OPAQUE


1179 
	#ªdøwwö
(
wö
Ë
	`wªdøw 
(wö, 0, ((wöË? (wö)->
_maxy
+1 : -1))

	)

1182 
	#wadd°r
(
wö
,
°r
Ë
	`waddn°r
(wö,°r,-1)

	)

1183 
	#waddch°r
(
wö
,
°r
Ë
	`waddchn°r
(wö,°r,-1)

	)

1188 
	#COLOR_PAIR
(
n
Ë
	`NCURSES_BITS
(“), 0)

	)

1189 
	#PAIR_NUMBER
(
a
Ë(
	`NCURSES_CAST
(,((NCURSES_CAST(,◊)Ë& 
A_COLOR
Ë>> 
NCURSES_ATTR_SHIFT
)))

	)

1195 
	#addch
(
ch
Ë
	`waddch
(
°ds¸
,(ch))

	)

1196 
	#addchn°r
(
°r
,
n
Ë
	`waddchn°r
(
°ds¸
,(°r),“))

	)

1197 
	#addch°r
(
°r
Ë
	`waddch°r
(
°ds¸
,(°r))

	)

1198 
	#addn°r
(
°r
,
n
Ë
	`waddn°r
(
°ds¸
,(°r),“))

	)

1199 
	#add°r
(
°r
Ë
	`waddn°r
(
°ds¸
,(°r),-1)

	)

1200 
	#©åoff
(
©
Ë
	`w©åoff
(
°ds¸
,◊t))

	)

1201 
	#©å⁄
(
©
Ë
	`w©å⁄
(
°ds¸
,◊t))

	)

1202 
	#©å£t
(
©
Ë
	`w©å£t
(
°ds¸
,◊t))

	)

1203 
	#©å_gë
(
≠
,
˝
,
o
Ë
	`w©å_gë
(
°ds¸
,◊p),(˝),(o))

	)

1204 
	#©å_off
(
a
,
o
Ë
	`w©å_off
(
°ds¸
,◊),(o))

	)

1205 
	#©å_⁄
(
a
,
o
Ë
	`w©å_⁄
(
°ds¸
,◊),(o))

	)

1206 
	#©å_£t
(
a
,
c
,
o
Ë
	`w©å_£t
(
°ds¸
,◊),(c),(o))

	)

1207 
	#bkgd
(
ch
Ë
	`wbkgd
(
°ds¸
,(ch))

	)

1208 
	#bkgd£t
(
ch
Ë
	`wbkgd£t
(
°ds¸
,(ch))

	)

1209 
	#chg©
(
n
,
a
,
c
,
o
Ë
	`wchg©
(
°ds¸
,“),◊),(c),(o))

	)

1210 
	#˛ór
(Ë
	`w˛ór
(
°ds¸
)

	)

1211 
	#˛πobŸ
(Ë
	`w˛πobŸ
(
°ds¸
)

	)

1212 
	#˛π€ﬁ
(Ë
	`w˛π€ﬁ
(
°ds¸
)

	)

1213 
	#cﬁ‹_£t
(
c
,
o
Ë
	`wcﬁ‹_£t
(
°ds¸
,(c),(o))

	)

1214 
	#dñch
(Ë
	`wdñch
(
°ds¸
)

	)

1215 
	#dñëñn
(Ë
	`wösdñ 
(
°ds¸
,-1)

	)

1216 
	#echoch¨
(
c
Ë
	`wechoch¨
(
°ds¸
,(c))

	)

1217 
	#îa£
(Ë
	`wîa£
(
°ds¸
)

	)

1218 
	#gëch
(Ë
	`wgëch
(
°ds¸
)

	)

1219 
	#gë°r
(
°r
Ë
	`wgë°r
(
°ds¸
,(°r))

	)

1220 
	#öch
(Ë
	`wöch
(
°ds¸
)

	)

1221 
	#öchn°r
(
s
,
n
Ë
	`wöchn°r
(
°ds¸
,(s),“))

	)

1222 
	#öch°r
(
s
Ë
	`wöch°r
(
°ds¸
,(s))

	)

1223 
	#ön°r
(
s
,
n
Ë
	`wön°r
(
°ds¸
,(s),“))

	)

1224 
	#ösch
(
c
Ë
	`wösch
(
°ds¸
,(c))

	)

1225 
	#ösdñ 
(
n
Ë
	`wösdñ 
(
°ds¸
,“))

	)

1226 
	#ö£π 
(Ë
	`wösdñ 
(
°ds¸
,1)

	)

1227 
	#ö¢°r
(
s
,
n
Ë
	`wö¢°r
(
°ds¸
,(s),“))

	)

1228 
	#ös°r
(
s
Ë
	`wös°r
(
°ds¸
,(s))

	)

1229 
	#ö°r
(
s
Ë
	`wö°r
(
°ds¸
,(s))

	)

1230 
	#move
(
y
,
x
Ë
	`wmove
(
°ds¸
,(y),(x))

	)

1231 
	#ª‰esh
(Ë
	`wª‰esh
(
°ds¸
)

	)

1232 
	#s¸l
(
n
Ë
	`ws¸l
(
°ds¸
,“))

	)

1233 
	#£ts¸ªg
(
t
,
b
Ë
	`w£ts¸ªg
(
°ds¸
,—),(b))

	)

1234 
	#°™díd
(Ë
	`w°™díd
(
°ds¸
)

	)

1235 
	#°™dout
(Ë
	`w°™dout
(
°ds¸
)

	)

1236 
	#timeout
(
dñay
Ë
	`wtimeout
(
°ds¸
,(dñay))

	)

1237 
	#wdñëñn
(
wö
Ë
	`wösdñ 
(wö,-1)

	)

1238 
	#wö£π 
(
wö
Ë
	`wösdñ 
(wö,1)

	)

1244 
	#mvwaddch
(
wö
,
y
,
x
,
ch
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`waddch
((wö),(ch)))

	)

1245 
	#mvwaddchn°r
(
wö
,
y
,
x
,
°r
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`waddchn°r
((wö),(°r),“)))

	)

1246 
	#mvwaddch°r
(
wö
,
y
,
x
,
°r
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`waddchn°r
((wö),(°r),-1))

	)

1247 
	#mvwaddn°r
(
wö
,
y
,
x
,
°r
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`waddn°r
((wö),(°r),“)))

	)

1248 
	#mvwadd°r
(
wö
,
y
,
x
,
°r
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`waddn°r
((wö),(°r),-1))

	)

1249 
	#mvwdñch
(
wö
,
y
,
x
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wdñch
(wö))

	)

1250 
	#mvwchg©
(
wö
,
y
,
x
,
n
,
a
,
c
,
o
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wchg©
((wö),“),◊),(c),(o)))

	)

1251 
	#mvwgëch
(
wö
,
y
,
x
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wgëch
(wö))

	)

1252 
	#mvwgën°r
(
wö
,
y
,
x
,
°r
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wgën°r
((wö),(°r),“)))

	)

1253 
	#mvwgë°r
(
wö
,
y
,
x
,
°r
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wgë°r
((wö),(°r)))

	)

1254 
	#mvwhlöe
(
wö
,
y
,
x
,
c
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`whlöe
((wö),(c),“)))

	)

1255 
	#mvwöch
(
wö
,
y
,
x
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? 
	`NCURSES_CAST
(
chty≥
, ERRË: 
	`wöch
(wö))

	)

1256 
	#mvwöchn°r
(
wö
,
y
,
x
,
s
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wöchn°r
((wö),(s),“)))

	)

1257 
	#mvwöch°r
(
wö
,
y
,
x
,
s
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wöch°r
((wö),(s)))

	)

1258 
	#mvwön°r
(
wö
,
y
,
x
,
s
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wön°r
((wö),(s),“)))

	)

1259 
	#mvwösch
(
wö
,
y
,
x
,
c
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wösch
((wö),(c)))

	)

1260 
	#mvwö¢°r
(
wö
,
y
,
x
,
s
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wö¢°r
((wö),(s),“)))

	)

1261 
	#mvwös°r
(
wö
,
y
,
x
,
s
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wös°r
((wö),(s)))

	)

1262 
	#mvwö°r
(
wö
,
y
,
x
,
s
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wö°r
((wö),(s)))

	)

1263 
	#mvwvlöe
(
wö
,
y
,
x
,
c
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wvlöe
((wö),(c),“)))

	)

1265 
	#mvaddch
(
y
,
x
,
ch
Ë
	`mvwaddch
(
°ds¸
,(y),(x),(ch))

	)

1266 
	#mvaddchn°r
(
y
,
x
,
°r
,
n
Ë
	`mvwaddchn°r
(
°ds¸
,(y),(x),(°r),“))

	)

1267 
	#mvaddch°r
(
y
,
x
,
°r
Ë
	`mvwaddch°r
(
°ds¸
,(y),(x),(°r))

	)

1268 
	#mvaddn°r
(
y
,
x
,
°r
,
n
Ë
	`mvwaddn°r
(
°ds¸
,(y),(x),(°r),“))

	)

1269 
	#mvadd°r
(
y
,
x
,
°r
Ë
	`mvwadd°r
(
°ds¸
,(y),(x),(°r))

	)

1270 
	#mvchg©
(
y
,
x
,
n
,
a
,
c
,
o
Ë
	`mvwchg©
(
°ds¸
,(y),(x),“),◊),(c),(o))

	)

1271 
	#mvdñch
(
y
,
x
Ë
	`mvwdñch
(
°ds¸
,(y),(x))

	)

1272 
	#mvgëch
(
y
,
x
Ë
	`mvwgëch
(
°ds¸
,(y),(x))

	)

1273 
	#mvgën°r
(
y
,
x
,
°r
,
n
Ë
	`mvwgën°r
(
°ds¸
,(y),(x),(°r),“))

	)

1274 
	#mvgë°r
(
y
,
x
,
°r
Ë
	`mvwgë°r
(
°ds¸
,(y),(x),(°r))

	)

1275 
	#mvhlöe
(
y
,
x
,
c
,
n
Ë
	`mvwhlöe
(
°ds¸
,(y),(x),(c),“))

	)

1276 
	#mvöch
(
y
,
x
Ë
	`mvwöch
(
°ds¸
,(y),(x))

	)

1277 
	#mvöchn°r
(
y
,
x
,
s
,
n
Ë
	`mvwöchn°r
(
°ds¸
,(y),(x),(s),“))

	)

1278 
	#mvöch°r
(
y
,
x
,
s
Ë
	`mvwöch°r
(
°ds¸
,(y),(x),(s))

	)

1279 
	#mvön°r
(
y
,
x
,
s
,
n
Ë
	`mvwön°r
(
°ds¸
,(y),(x),(s),“))

	)

1280 
	#mvösch
(
y
,
x
,
c
Ë
	`mvwösch
(
°ds¸
,(y),(x),(c))

	)

1281 
	#mvö¢°r
(
y
,
x
,
s
,
n
Ë
	`mvwö¢°r
(
°ds¸
,(y),(x),(s),“))

	)

1282 
	#mvös°r
(
y
,
x
,
s
Ë
	`mvwös°r
(
°ds¸
,(y),(x),(s))

	)

1283 
	#mvö°r
(
y
,
x
,
s
Ë
	`mvwö°r
(
°ds¸
,(y),(x),(s))

	)

1284 
	#mvvlöe
(
y
,
x
,
c
,
n
Ë
	`mvwvlöe
(
°ds¸
,(y),(x),(c),“))

	)

1289 #i‡!
NCURSES_OPAQUE


1290 
	#gëbkgd
(
wö
Ë((wöË? ((wö)->
_bkgd
Ë: 0)

	)

1293 
	#¶k_©å_off
(
a
,
v
Ë((vË? 
ERR
 : 
	`¶k_©åoff
◊))

	)

1294 
	#¶k_©å_⁄
(
a
,
v
Ë((vË? 
ERR
 : 
	`¶k_©å⁄
◊))

	)

1296 #i‡!
NCURSES_OPAQUE


1297 #i‡
NCURSES_WIDECHAR
 && 0

1298 
	#w©å_£t
(
wö
,
a
,
p
,
›ts
) (((win) \

1299 ? ((
wö
)->
_©ås
 = ((
a
Ë& ~
A_COLOR
), \

1300 (
wö
)->
_cﬁ‹
 = (
p
)) \

1301 : 
OK
), \

1302 
OK
)

	)

1303 
	#w©å_gë
(
wö
,
a
,
p
,
›ts
Ë(()((◊Ë!(*)0Ë? (*◊Ë(wöË? (wö)->
_©ås
 : 0Ë: 
OK
), \

1304 ()(((
p
Ë!(*)0Ë? (*’Ë(
NCURSES_PAIRS_T
Ë((
wö
Ë? (wö)->
_cﬁ‹
 : 0)Ë: 
OK
), \

1305 
OK
)

	)

1307 
	#w©å_£t
(
wö
,
a
,
p
,
›ts
) (((win) \

1308 ? ((
wö
)->
_©ås
 = (((
a
Ë& ~
A_COLOR
Ë| (
©å_t
)
	`COLOR_PAIR
(
p
))) \

1309 : 
OK
), \

1310 
OK
)

	)

1311 
	#w©å_gë
(
wö
,
a
,
p
,
›ts
Ë(()((◊Ë!(*)0Ë? (*◊Ë(wöË? (wö)->
_©ås
 : 0Ë: 
OK
), \

1312 ()(((
p
Ë!(*)0Ë? (*’Ë(
NCURSES_PAIRS_T
Ë((
wö
Ë? 
	`PAIR_NUMBER
((wö)->
_©ås
Ë: 0)Ë: 
OK
), \

1313 
OK
)

	)

1323 
	#vw_¥ötw
 
vw¥ötw


	)

1324 
	#vw_sˇnw
 
vwsˇnw


	)

1330 
	#vssˇnf
(
a
,
b
,
c
Ë
	`_nc_vssˇnf
◊,b,c)

	)

1331 
NCURSES_EXPORT
(Ë
vssˇnf
(c⁄° *, c⁄° *, 
va_li°
);

1338 #i‡!
NCURSES_OPAQUE


1339 
	#is_˛óªd
(
wö
Ë((wöË? (wö)->
_˛ór
 : 
FALSE
)

	)

1340 
	#is_idcok
(
wö
Ë((wöË? (wö)->
_idcok
 : 
FALSE
)

	)

1341 
	#is_idlok
(
wö
Ë((wöË? (wö)->
_idlok
 : 
FALSE
)

	)

1342 
	#is_immedok
(
wö
Ë((wöË? (wö)->
_immed
 : 
FALSE
)

	)

1343 
	#is_key∑d
(
wö
Ë((wöË? (wö)->
_u£_key∑d
 : 
FALSE
)

	)

1344 
	#is_Àaveok
(
wö
Ë((wöË? (wö)->
_Àaveok
 : 
FALSE
)

	)

1345 
	#is_nodñay
(
wö
Ë((wöË? ((wö)->
_dñay
 =0Ë: 
FALSE
)

	)

1346 
	#is_nŸimeout
(
wö
Ë((wöË? (wö)->
_nŸimeout
 : 
FALSE
)

	)

1347 
	#is_∑d
(
wö
Ë((wöË? ((wö)->
_Êags
 & 
_ISPAD
Ë!0 : 
FALSE
)

	)

1348 
	#is_s¸ﬁlok
(
wö
Ë((wöË? (wö)->
_s¸ﬁl
 : 
FALSE
)

	)

1349 
	#is_subwö
(
wö
Ë((wöË? ((wö)->
_Êags
 & 
_SUBWIN
Ë!0 : 
FALSE
)

	)

1350 
	#is_syncok
(
wö
Ë((wöË? (wö)->
_sync
 : 
FALSE
)

	)

1351 
	#wgëdñay
(
wö
Ë((wöË? (wö)->
_dñay
 : 0)

	)

1352 
	#wgë∑ª¡
(
wö
Ë((wöË? (wö)->
_∑ª¡
 : 0)

	)

1353 
	#wgës¸ªg
(
wö
,
t
,
b
Ë((wöË? (*—Ë(wö)->
_ªgt›
, *(bË(wö)->
_ªgbŸtom
, 
OK
Ë: 
ERR
)

	)

1367 #i‡
NCURSES_REENTRANT


1369 
NCURSES_WRAPPED_VAR
(
WINDOW
 *, 
curs¸
);

1370 
NCURSES_WRAPPED_VAR
(
WINDOW
 *, 
√ws¸
);

1371 
NCURSES_WRAPPED_VAR
(
WINDOW
 *, 
°ds¸
);

1372 
NCURSES_WRAPPED_VAR
(*, 
âyty≥
);

1373 
NCURSES_WRAPPED_VAR
(, 
COLORS
);

1374 
NCURSES_WRAPPED_VAR
(, 
COLOR_PAIRS
);

1375 
NCURSES_WRAPPED_VAR
(, 
COLS
);

1376 
NCURSES_WRAPPED_VAR
(, 
ESCDELAY
);

1377 
NCURSES_WRAPPED_VAR
(, 
LINES
);

1378 
NCURSES_WRAPPED_VAR
(, 
TABSIZE
);

1380 
	#curs¸
 
	`NCURSES_PUBLIC_VAR
(
	`curs¸
())

	)

1381 
	#√ws¸
 
	`NCURSES_PUBLIC_VAR
(
	`√ws¸
())

	)

1382 
	#°ds¸
 
	`NCURSES_PUBLIC_VAR
(
	`°ds¸
())

	)

1383 
	#âyty≥
 
	`NCURSES_PUBLIC_VAR
(
	`âyty≥
())

	)

1384 
	#COLORS
 
	`NCURSES_PUBLIC_VAR
(
	`COLORS
())

	)

1385 
	#COLOR_PAIRS
 
	`NCURSES_PUBLIC_VAR
(
	`COLOR_PAIRS
())

	)

1386 
	#COLS
 
	`NCURSES_PUBLIC_VAR
(
	`COLS
())

	)

1387 
	#ESCDELAY
 
	`NCURSES_PUBLIC_VAR
(
	`ESCDELAY
())

	)

1388 
	#LINES
 
	`NCURSES_PUBLIC_VAR
(
	`LINES
())

	)

1389 
	#TABSIZE
 
	`NCURSES_PUBLIC_VAR
(
	`TABSIZE
())

	)

1393 
NCURSES_EXPORT_VAR
(
WINDOW
 *Ë
curs¸
;

1394 
NCURSES_EXPORT_VAR
(
WINDOW
 *Ë
√ws¸
;

1395 
NCURSES_EXPORT_VAR
(
WINDOW
 *Ë
°ds¸
;

1396 
NCURSES_EXPORT_VAR
(Ë
âyty≥
[];

1397 
NCURSES_EXPORT_VAR
(Ë
COLORS
;

1398 
NCURSES_EXPORT_VAR
(Ë
COLOR_PAIRS
;

1399 
NCURSES_EXPORT_VAR
(Ë
COLS
;

1400 
NCURSES_EXPORT_VAR
(Ë
ESCDELAY
;

1401 
NCURSES_EXPORT_VAR
(Ë
LINES
;

1402 
NCURSES_EXPORT_VAR
(Ë
TABSIZE
;

1418 
	#KEY_CODE_YES
 0400

	)

1419 
	#KEY_MIN
 0401

	)

1420 
	#KEY_BREAK
 0401

	)

1421 
	#KEY_SRESET
 0530

	)

1422 
	#KEY_RESET
 0531

	)

1426 
	#KEY_DOWN
 0402

	)

1427 
	#KEY_UP
 0403

	)

1428 
	#KEY_LEFT
 0404

	)

1429 
	#KEY_RIGHT
 0405

	)

1430 
	#KEY_HOME
 0406

	)

1431 
	#KEY_BACKSPACE
 0407

	)

1432 
	#KEY_F0
 0410

	)

1433 
	#KEY_F
(
n
Ë(
KEY_F0
+“)Ë

	)

1434 
	#KEY_DL
 0510

	)

1435 
	#KEY_IL
 0511

	)

1436 
	#KEY_DC
 0512

	)

1437 
	#KEY_IC
 0513

	)

1438 
	#KEY_EIC
 0514

	)

1439 
	#KEY_CLEAR
 0515

	)

1440 
	#KEY_EOS
 0516

	)

1441 
	#KEY_EOL
 0517

	)

1442 
	#KEY_SF
 0520

	)

1443 
	#KEY_SR
 0521

	)

1444 
	#KEY_NPAGE
 0522

	)

1445 
	#KEY_PPAGE
 0523

	)

1446 
	#KEY_STAB
 0524

	)

1447 
	#KEY_CTAB
 0525

	)

1448 
	#KEY_CATAB
 0526

	)

1449 
	#KEY_ENTER
 0527

	)

1450 
	#KEY_PRINT
 0532

	)

1451 
	#KEY_LL
 0533

	)

1452 
	#KEY_A1
 0534

	)

1453 
	#KEY_A3
 0535

	)

1454 
	#KEY_B2
 0536

	)

1455 
	#KEY_C1
 0537

	)

1456 
	#KEY_C3
 0540

	)

1457 
	#KEY_BTAB
 0541

	)

1458 
	#KEY_BEG
 0542

	)

1459 
	#KEY_CANCEL
 0543

	)

1460 
	#KEY_CLOSE
 0544

	)

1461 
	#KEY_COMMAND
 0545

	)

1462 
	#KEY_COPY
 0546

	)

1463 
	#KEY_CREATE
 0547

	)

1464 
	#KEY_END
 0550

	)

1465 
	#KEY_EXIT
 0551

	)

1466 
	#KEY_FIND
 0552

	)

1467 
	#KEY_HELP
 0553

	)

1468 
	#KEY_MARK
 0554

	)

1469 
	#KEY_MESSAGE
 0555

	)

1470 
	#KEY_MOVE
 0556

	)

1471 
	#KEY_NEXT
 0557

	)

1472 
	#KEY_OPEN
 0560

	)

1473 
	#KEY_OPTIONS
 0561

	)

1474 
	#KEY_PREVIOUS
 0562

	)

1475 
	#KEY_REDO
 0563

	)

1476 
	#KEY_REFERENCE
 0564

	)

1477 
	#KEY_REFRESH
 0565

	)

1478 
	#KEY_REPLACE
 0566

	)

1479 
	#KEY_RESTART
 0567

	)

1480 
	#KEY_RESUME
 0570

	)

1481 
	#KEY_SAVE
 0571

	)

1482 
	#KEY_SBEG
 0572

	)

1483 
	#KEY_SCANCEL
 0573

	)

1484 
	#KEY_SCOMMAND
 0574

	)

1485 
	#KEY_SCOPY
 0575

	)

1486 
	#KEY_SCREATE
 0576

	)

1487 
	#KEY_SDC
 0577

	)

1488 
	#KEY_SDL
 0600

	)

1489 
	#KEY_SELECT
 0601

	)

1490 
	#KEY_SEND
 0602

	)

1491 
	#KEY_SEOL
 0603

	)

1492 
	#KEY_SEXIT
 0604

	)

1493 
	#KEY_SFIND
 0605

	)

1494 
	#KEY_SHELP
 0606

	)

1495 
	#KEY_SHOME
 0607

	)

1496 
	#KEY_SIC
 0610

	)

1497 
	#KEY_SLEFT
 0611

	)

1498 
	#KEY_SMESSAGE
 0612

	)

1499 
	#KEY_SMOVE
 0613

	)

1500 
	#KEY_SNEXT
 0614

	)

1501 
	#KEY_SOPTIONS
 0615

	)

1502 
	#KEY_SPREVIOUS
 0616

	)

1503 
	#KEY_SPRINT
 0617

	)

1504 
	#KEY_SREDO
 0620

	)

1505 
	#KEY_SREPLACE
 0621

	)

1506 
	#KEY_SRIGHT
 0622

	)

1507 
	#KEY_SRSUME
 0623

	)

1508 
	#KEY_SSAVE
 0624

	)

1509 
	#KEY_SSUSPEND
 0625

	)

1510 
	#KEY_SUNDO
 0626

	)

1511 
	#KEY_SUSPEND
 0627

	)

1512 
	#KEY_UNDO
 0630

	)

1513 
	#KEY_MOUSE
 0631

	)

1514 
	#KEY_RESIZE
 0632

	)

1515 
	#KEY_EVENT
 0633

	)

1517 
	#KEY_MAX
 0777

	)

1527 #i‡
NCURSES_MOUSE_VERSION
 > 1

1528 
	#NCURSES_MOUSE_MASK
(
b
,
m
Ë((mË<< (((bË- 1Ë* 5))

	)

1530 
	#NCURSES_MOUSE_MASK
(
b
,
m
Ë((mË<< (((bË- 1Ë* 6))

	)

1533 
	#NCURSES_BUTTON_RELEASED
 001L

	)

1534 
	#NCURSES_BUTTON_PRESSED
 002L

	)

1535 
	#NCURSES_BUTTON_CLICKED
 004L

	)

1536 
	#NCURSES_DOUBLE_CLICKED
 010L

	)

1537 
	#NCURSES_TRIPLE_CLICKED
 020L

	)

1538 
	#NCURSES_RESERVED_EVENT
 040L

	)

1541 
	#BUTTON1_RELEASED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_BUTTON_RELEASED
)

	)

1542 
	#BUTTON1_PRESSED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_BUTTON_PRESSED
)

	)

1543 
	#BUTTON1_CLICKED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_BUTTON_CLICKED
)

	)

1544 
	#BUTTON1_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_DOUBLE_CLICKED
)

	)

1545 
	#BUTTON1_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_TRIPLE_CLICKED
)

	)

1547 
	#BUTTON2_RELEASED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_BUTTON_RELEASED
)

	)

1548 
	#BUTTON2_PRESSED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_BUTTON_PRESSED
)

	)

1549 
	#BUTTON2_CLICKED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_BUTTON_CLICKED
)

	)

1550 
	#BUTTON2_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_DOUBLE_CLICKED
)

	)

1551 
	#BUTTON2_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_TRIPLE_CLICKED
)

	)

1553 
	#BUTTON3_RELEASED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_BUTTON_RELEASED
)

	)

1554 
	#BUTTON3_PRESSED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_BUTTON_PRESSED
)

	)

1555 
	#BUTTON3_CLICKED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_BUTTON_CLICKED
)

	)

1556 
	#BUTTON3_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_DOUBLE_CLICKED
)

	)

1557 
	#BUTTON3_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_TRIPLE_CLICKED
)

	)

1559 
	#BUTTON4_RELEASED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_BUTTON_RELEASED
)

	)

1560 
	#BUTTON4_PRESSED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_BUTTON_PRESSED
)

	)

1561 
	#BUTTON4_CLICKED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_BUTTON_CLICKED
)

	)

1562 
	#BUTTON4_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_DOUBLE_CLICKED
)

	)

1563 
	#BUTTON4_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_TRIPLE_CLICKED
)

	)

1569 #i‡
NCURSES_MOUSE_VERSION
 > 1

1571 
	#BUTTON5_RELEASED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_BUTTON_RELEASED
)

	)

1572 
	#BUTTON5_PRESSED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_BUTTON_PRESSED
)

	)

1573 
	#BUTTON5_CLICKED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_BUTTON_CLICKED
)

	)

1574 
	#BUTTON5_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_DOUBLE_CLICKED
)

	)

1575 
	#BUTTON5_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_TRIPLE_CLICKED
)

	)

1577 
	#BUTTON_CTRL
 
	`NCURSES_MOUSE_MASK
(6, 0001L)

	)

1578 
	#BUTTON_SHIFT
 
	`NCURSES_MOUSE_MASK
(6, 0002L)

	)

1579 
	#BUTTON_ALT
 
	`NCURSES_MOUSE_MASK
(6, 0004L)

	)

1580 
	#REPORT_MOUSE_POSITION
 
	`NCURSES_MOUSE_MASK
(6, 0010L)

	)

1584 
	#BUTTON1_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_RESERVED_EVENT
)

	)

1585 
	#BUTTON2_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_RESERVED_EVENT
)

	)

1586 
	#BUTTON3_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_RESERVED_EVENT
)

	)

1587 
	#BUTTON4_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_RESERVED_EVENT
)

	)

1589 
	#BUTTON_CTRL
 
	`NCURSES_MOUSE_MASK
(5, 0001L)

	)

1590 
	#BUTTON_SHIFT
 
	`NCURSES_MOUSE_MASK
(5, 0002L)

	)

1591 
	#BUTTON_ALT
 
	`NCURSES_MOUSE_MASK
(5, 0004L)

	)

1592 
	#REPORT_MOUSE_POSITION
 
	`NCURSES_MOUSE_MASK
(5, 0010L)

	)

1596 
	#ALL_MOUSE_EVENTS
 (
REPORT_MOUSE_POSITION
 - 1)

	)

1599 
	#BUTTON_RELEASE
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 001))

	)

1600 
	#BUTTON_PRESS
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 002))

	)

1601 
	#BUTTON_CLICK
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 004))

	)

1602 
	#BUTTON_DOUBLE_CLICK
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 010))

	)

1603 
	#BUTTON_TRIPLE_CLICK
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 020))

	)

1604 
	#BUTTON_RESERVED_EVENT
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 040))

	)

1608 
	gid
;

1609 
	gx
, 
	gy
, 
	gz
;

1610 
mmask_t
 
	gb°©e
;

1612 
	tMEVENT
;

1614 
NCURSES_EXPORT
(
boﬁ
Ë
has_mou£
();

1615 
NCURSES_EXPORT
(Ë
gëmou£
 (
MEVENT
 *);

1616 
NCURSES_EXPORT
(Ë
ungëmou£
 (
MEVENT
 *);

1617 
NCURSES_EXPORT
(
mmask_t
Ë
mou£mask
 (mmask_t, mmask_t *);

1618 
NCURSES_EXPORT
(
boﬁ
Ë
wí˛o£
 (c⁄° 
WINDOW
 *, , );

1619 
NCURSES_EXPORT
(Ë
mou£öãrvÆ
 ();

1620 
NCURSES_EXPORT
(
boﬁ
Ë
wmou£_åafo
 (c⁄° 
WINDOW
*, *, *, bool);

1621 
NCURSES_EXPORT
(
boﬁ
Ë
mou£_åafo
 (*, *, bool);

1623 #i‡
NCURSES_SP_FUNCS


1624 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
has_mou£
Ë(
SCREEN
*);

1625 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
gëmou£
Ë(
SCREEN
*, 
MEVENT
 *);

1626 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ungëmou£
Ë(
SCREEN
*,
MEVENT
 *);

1627 
NCURSES_EXPORT
(
mmask_t
Ë
NCURSES_SP_NAME
(
mou£mask
Ë(
SCREEN
*, mmask_t, mmask_t *);

1628 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
mou£öãrvÆ
Ë(
SCREEN
*, );

1631 
	#mou£_åafo
(
y
,
x
,
to_s¸ìn
Ë
	`wmou£_åafo
(
°ds¸
,y,x,to_s¸ìn)

	)

1635 
NCURSES_EXPORT
(Ë
m˝röt
 (*, );

1636 
NCURSES_EXPORT
(Ë
has_key
 ();

1638 #i‡
NCURSES_SP_FUNCS


1639 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
has_key
Ë(
SCREEN
*, );

1640 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
m˝röt
Ë(
SCREEN
*, *, );

1645 
NCURSES_EXPORT
(Ë
_åa˚f
 (c⁄° *, ...Ë
GCC_PRINTFLIKE
(1,2);

1646 
NCURSES_EXPORT
(Ë
_åa˚dump
 (c⁄° *, 
WINDOW
 *);

1647 
NCURSES_EXPORT
(*Ë
_åa˚©å
 (
©å_t
);

1648 
NCURSES_EXPORT
(*Ë
_åa˚©å2
 (, 
chty≥
);

1649 
NCURSES_EXPORT
(*Ë
_nc_åa˚bôs
 ();

1650 
NCURSES_EXPORT
(*Ë
_åa˚ch¨
 ();

1651 
NCURSES_EXPORT
(*Ë
_åa˚chty≥
 (
chty≥
);

1652 
NCURSES_EXPORT
(*Ë
_åa˚chty≥2
 (, 
chty≥
);

1653 #i‡
NCURSES_WIDECHAR


1654 
	#_åa˚ch_t
 
_åa˚cch¨_t


	)

1655 
NCURSES_EXPORT
(*Ë
_åa˚cch¨_t
 (c⁄° 
cch¨_t
 *);

1656 
	#_åa˚ch_t2
 
_åa˚cch¨_t2


	)

1657 
NCURSES_EXPORT
(*Ë
_åa˚cch¨_t2
 (, c⁄° 
cch¨_t
 *);

1659 
	#_åa˚ch_t
 
_åa˚chty≥


	)

1660 
	#_åa˚ch_t2
 
_åa˚chty≥2


	)

1662 
NCURSES_EXPORT
(*Ë
_åa˚mou£
 (c⁄° 
MEVENT
 *);

1663 
NCURSES_EXPORT
(Ë
åa˚
 (const );

1666 
	#TRACE_DISABLE
 0x0000

	)

1667 
	#TRACE_TIMES
 0x0001

	)

1668 
	#TRACE_TPUTS
 0x0002

	)

1669 
	#TRACE_UPDATE
 0x0004

	)

1670 
	#TRACE_MOVE
 0x0008

	)

1671 
	#TRACE_CHARPUT
 0x0010

	)

1672 
	#TRACE_ORDINARY
 0x001F

	)

1673 
	#TRACE_CALLS
 0x0020

	)

1674 
	#TRACE_VIRTPUT
 0x0040

	)

1675 
	#TRACE_IEVENT
 0x0080

	)

1676 
	#TRACE_BITS
 0x0100

	)

1677 
	#TRACE_ICALLS
 0x0200

	)

1678 
	#TRACE_CCALLS
 0x0400

	)

1679 
	#TRACE_DATABASE
 0x0800

	)

1680 
	#TRACE_ATTRS
 0x1000

	)

1682 
	#TRACE_SHIFT
 13

	)

1683 
	#TRACE_MAXIMUM
 ((1 << 
TRACE_SHIFT
Ë- 1Ë

	)

1685 #i‡
deföed
(
TRACE
Ë|| deföed(
NCURSES_TEST
)

1686 
NCURSES_EXPORT_VAR
(Ë
_nc_›timize_íabÀ
;

1687 
NCURSES_EXPORT
(c⁄° *Ë
_nc_visbuf
 (const *);

1688 
	#OPTIMIZE_MVCUR
 0x01

	)

1689 
	#OPTIMIZE_HASHMAP
 0x02

	)

1690 
	#OPTIMIZE_SCROLL
 0x04

	)

1691 
	#OPTIMIZE_ALL
 0xf‡

	)

1694 
	~<un˘æ.h
>

1696 #ifde‡
__˝lu•lus


1698 #i‚de‡
NCURSES_NOMACROS


1701 #unde‡
box


1702 #unde‡
˛ór


1703 #unde‡
îa£


1704 #unde‡
move


1705 #unde‡
ª‰esh


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/eti.h

35 #i‚de‡
NCURSES_ETI_H_ö˛


36 
	#NCURSES_ETI_H_ö˛
 1

	)

38 
	#E_OK
 (0)

	)

39 
	#E_SYSTEM_ERROR
 (-1)

	)

40 
	#E_BAD_ARGUMENT
 (-2)

	)

41 
	#E_POSTED
 (-3)

	)

42 
	#E_CONNECTED
 (-4)

	)

43 
	#E_BAD_STATE
 (-5)

	)

44 
	#E_NO_ROOM
 (-6)

	)

45 
	#E_NOT_POSTED
 (-7)

	)

46 
	#E_UNKNOWN_COMMAND
 (-8)

	)

47 
	#E_NO_MATCH
 (-9)

	)

48 
	#E_NOT_SELECTABLE
 (-10)

	)

49 
	#E_NOT_CONNECTED
 (-11)

	)

50 
	#E_REQUEST_DENIED
 (-12)

	)

51 
	#E_INVALID_FIELD
 (-13)

	)

52 
	#E_CURRENT
 (-14)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

101 #unde‡
__USE_ISOC11


102 #unde‡
__USE_ISOC99


103 #unde‡
__USE_ISOC95


104 #unde‡
__USE_ISOCXX11


105 #unde‡
__USE_POSIX


106 #unde‡
__USE_POSIX2


107 #unde‡
__USE_POSIX199309


108 #unde‡
__USE_POSIX199506


109 #unde‡
__USE_XOPEN


110 #unde‡
__USE_XOPEN_EXTENDED


111 #unde‡
__USE_UNIX98


112 #unde‡
__USE_XOPEN2K


113 #unde‡
__USE_XOPEN2KXSI


114 #unde‡
__USE_XOPEN2K8


115 #unde‡
__USE_XOPEN2K8XSI


116 #unde‡
__USE_LARGEFILE


117 #unde‡
__USE_LARGEFILE64


118 #unde‡
__USE_FILE_OFFSET64


119 #unde‡
__USE_BSD


120 #unde‡
__USE_SVID


121 #unde‡
__USE_MISC


122 #unde‡
__USE_ATFILE


123 #unde‡
__USE_GNU


124 #unde‡
__USE_REENTRANT


125 #unde‡
__USE_FORTIFY_LEVEL


126 #unde‡
__KERNEL_STRICT_NAMES


130 #i‚de‡
_LOOSE_KERNEL_NAMES


131 
	#__KERNEL_STRICT_NAMES


	)

141 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


142 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

143 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

145 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

150 #ifde‡
_GNU_SOURCE


151 #unde‡
_ISOC95_SOURCE


152 
	#_ISOC95_SOURCE
 1

	)

153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_ISOC11_SOURCE


156 
	#_ISOC11_SOURCE
 1

	)

157 #unde‡
_POSIX_SOURCE


158 
	#_POSIX_SOURCE
 1

	)

159 #unde‡
_POSIX_C_SOURCE


160 
	#_POSIX_C_SOURCE
 200809L

	)

161 #unde‡
_XOPEN_SOURCE


162 
	#_XOPEN_SOURCE
 700

	)

163 #unde‡
_XOPEN_SOURCE_EXTENDED


164 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

165 #unde‡
_LARGEFILE64_SOURCE


166 
	#_LARGEFILE64_SOURCE
 1

	)

167 #unde‡
_DEFAULT_SOURCE


168 
	#_DEFAULT_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
 \

184 && !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
))

185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

187 #unde‡
_BSD_SOURCE


188 
	#_BSD_SOURCE
 1

	)

189 #unde‡
_SVID_SOURCE


190 
	#_SVID_SOURCE
 1

	)

194 #i‡(
deföed
 
_ISOC11_SOURCE
 \

195 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

196 
	#__USE_ISOC11
 1

	)

200 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

201 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

202 
	#__USE_ISOC99
 1

	)

206 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

207 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

208 
	#__USE_ISOC95
 1

	)

215 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

216 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

217 
	#__USE_ISOCXX11
 1

	)

223 #ifde‡
_DEFAULT_SOURCE


224 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


225 
	#__USE_POSIX_IMPLICITLY
 1

	)

227 #unde‡
_POSIX_SOURCE


228 
	#_POSIX_SOURCE
 1

	)

229 #unde‡
_POSIX_C_SOURCE


230 
	#_POSIX_C_SOURCE
 200809L

	)

232 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

233 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

234 
	#_POSIX_SOURCE
 1

	)

235 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

236 
	#_POSIX_C_SOURCE
 2

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

238 
	#_POSIX_C_SOURCE
 199506L

	)

239 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

240 
	#_POSIX_C_SOURCE
 200112L

	)

242 
	#_POSIX_C_SOURCE
 200809L

	)

244 
	#__USE_POSIX_IMPLICITLY
 1

	)

247 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


248 
	#__USE_POSIX
 1

	)

251 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


252 
	#__USE_POSIX2
 1

	)

255 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

256 
	#__USE_POSIX199309
 1

	)

259 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

260 
	#__USE_POSIX199506
 1

	)

263 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

264 
	#__USE_XOPEN2K
 1

	)

265 #unde‡
__USE_ISOC95


266 
	#__USE_ISOC95
 1

	)

267 #unde‡
__USE_ISOC99


268 
	#__USE_ISOC99
 1

	)

271 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

272 
	#__USE_XOPEN2K8
 1

	)

273 #unde‡
_ATFILE_SOURCE


274 
	#_ATFILE_SOURCE
 1

	)

277 #ifdef 
_XOPEN_SOURCE


278 
	#__USE_XOPEN
 1

	)

279 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

280 
	#__USE_XOPEN_EXTENDED
 1

	)

281 
	#__USE_UNIX98
 1

	)

282 #unde‡
_LARGEFILE_SOURCE


283 
	#_LARGEFILE_SOURCE
 1

	)

284 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

286 
	#__USE_XOPEN2K8
 1

	)

287 
	#__USE_XOPEN2K8XSI
 1

	)

289 
	#__USE_XOPEN2K
 1

	)

290 
	#__USE_XOPEN2KXSI
 1

	)

291 #unde‡
__USE_ISOC95


292 
	#__USE_ISOC95
 1

	)

293 #unde‡
__USE_ISOC99


294 
	#__USE_ISOC99
 1

	)

297 #ifde‡
_XOPEN_SOURCE_EXTENDED


298 
	#__USE_XOPEN_EXTENDED
 1

	)

303 #ifde‡
_LARGEFILE_SOURCE


304 
	#__USE_LARGEFILE
 1

	)

307 #ifde‡
_LARGEFILE64_SOURCE


308 
	#__USE_LARGEFILE64
 1

	)

311 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

312 
	#__USE_FILE_OFFSET64
 1

	)

315 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


316 
	#__USE_MISC
 1

	)

319 #ifdef 
_BSD_SOURCE


320 
	#__USE_BSD
 1

	)

323 #ifdef 
_SVID_SOURCE


324 
	#__USE_SVID
 1

	)

327 #ifdef 
_ATFILE_SOURCE


328 
	#__USE_ATFILE
 1

	)

331 #ifdef 
_GNU_SOURCE


332 
	#__USE_GNU
 1

	)

335 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


336 
	#__USE_REENTRANT
 1

	)

339 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

340 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

341 #i‡
_FORTIFY_SOURCE
 > 1

342 
	#__USE_FORTIFY_LEVEL
 2

	)

344 
	#__USE_FORTIFY_LEVEL
 1

	)

347 
	#__USE_FORTIFY_LEVEL
 0

	)

352 
	~<°dc-¥edef.h
>

360 #unde‡
__GNU_LIBRARY__


361 
	#__GNU_LIBRARY__
 6

	)

365 
	#__GLIBC__
 2

	)

366 
	#__GLIBC_MINOR__
 19

	)

368 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

369 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

372 #i‚de‡
__ASSEMBLER__


373 #i‚de‡
_SYS_CDEFS_H


374 
	~<sys/cdefs.h
>

379 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


380 
	#__USE_LARGEFILE
 1

	)

381 
	#__USE_LARGEFILE64
 1

	)

387 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

388 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

389 && 
deföed
 
	g__exã∫_ölöe


390 
	#__USE_EXTERN_INLINES
 1

	)

398 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


148 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

149 
	~<bôs/°dio-lock.h
>

154 
	t_IO_lock_t
;

160 
	s_IO_m¨kî
 {

161 
_IO_m¨kî
 *
	m_√xt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

169 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

170 
	mpublic
:

171 
°ªamm¨kî
(
°ªambuf
 *
sb
);

172 ~
°ªamm¨kî
();

173 
ßvög
(Ë{  
	m_•os
 == -2; }

174 
dñè
(
°ªamm¨kî
&);

175 
dñè
();

180 
	e__codecvt_ªsu…


182 
	m__codecvt_ok
,

183 
	m__codecvt_∑πül
,

184 
	m__codecvt_îr‹
,

185 
	m__codecvt_noc⁄v


188 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

194 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

195 
	m__mb°©e_t
 *,

196 c⁄° 
	mwch¨_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 **, *,

200 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

201 
	m__mb°©e_t
 *, *,

203 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

204 
	m__mb°©e_t
 *,

206 c⁄° **, 
	mwch¨_t
 *,

207 
	mwch¨_t
 *, wchar_t **);

208 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

211 c⁄° *, c⁄° *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

214 
_IO_ic⁄v_t
 
	m__cd_ö
;

215 
_IO_ic⁄v_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¨_t
 *
	m_IO_ªad_±r
;

222 
wch¨_t
 *
	m_IO_ªad_íd
;

223 
wch¨_t
 *
	m_IO_ªad_ba£
;

224 
wch¨_t
 *
	m_IO_wrôe_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_±r
;

226 
wch¨_t
 *
	m_IO_wrôe_íd
;

227 
wch¨_t
 *
	m_IO_buf_ba£
;

228 
wch¨_t
 *
	m_IO_buf_íd
;

230 
wch¨_t
 *
	m_IO_ßve_ba£
;

231 
wch¨_t
 *
	m_IO_backup_ba£
;

233 
wch¨_t
 *
	m_IO_ßve_íd
;

235 
__mb°©e_t
 
	m_IO_°©e
;

236 
__mb°©e_t
 
	m_IO_œ°_°©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¨_t
 
	m_sh‹tbuf
[1];

241 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

245 
	s_IO_FILE
 {

246 
	m_Êags
;

247 
	#_IO_fûe_Êags
 
_Êags


	)

251 * 
	m_IO_ªad_±r
;

252 * 
	m_IO_ªad_íd
;

253 * 
	m_IO_ªad_ba£
;

254 * 
	m_IO_wrôe_ba£
;

255 * 
	m_IO_wrôe_±r
;

256 * 
	m_IO_wrôe_íd
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_íd
;

260 *
	m_IO_ßve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_ßve_íd
;

264 
_IO_m¨kî
 *
	m_m¨kîs
;

266 
_IO_FILE
 *
	m_chaö
;

268 
	m_fûío
;

270 
	m_blksize
;

272 
	m_Êags2
;

274 
_IO_off_t
 
	m_ﬁd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cﬁumn
;

279 sig√d 
	m_vèbÀ_off£t
;

280 
	m_sh‹tbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifde‡
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com∂ëe


290 
_IO_FILE
 
	m_fûe
;

292 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_‰ìªs_li°
;

299 *
	m_‰ìªs_buf
;

300 
size_t
 
	m_‰ìªs_size
;

302 *
	m__∑d1
;

303 *
	m__∑d2
;

304 *
	m__∑d3
;

305 *
	m__∑d4
;

306 
size_t
 
	m__∑d5
;

308 
	m_mode
;

310 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

314 #i‚de‡
__˝lu•lus


315 
_IO_FILE
 
	t_IO_FILE
;

318 
	g_IO_FILE_∂us
;

320 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

323 #i‚de‡
_LIBC


324 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

325 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

326 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

328 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

329 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

338 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

346 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

358 
	t__io_˛o£_‚
 (*
	t__cookõ
);

361 #ifde‡
_GNU_SOURCE


363 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

364 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

365 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

366 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

371 
__io_ªad_‚
 *
	mªad
;

372 
__io_wrôe_‚
 *
	mwrôe
;

373 
__io_£ek_‚
 *
	m£ek
;

374 
__io_˛o£_‚
 *
	m˛o£
;

375 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

376 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

378 
	g_IO_cookõ_fûe
;

381 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

382 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

386 #ifde‡
__˝lu•lus


390 
__undîÊow
 (
_IO_FILE
 *);

391 
__uÊow
 (
_IO_FILE
 *);

392 
__ovîÊow
 (
_IO_FILE
 *, );

393 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


394 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

395 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

399 #i‡ 
__GNUC__
 >= 3

400 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

402 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

405 
	#_IO_gëc_u∆ocked
(
_Â
) \

406 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

407 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

408 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

409 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

410 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

411 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

412 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

413 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

414 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

415 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

417 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


418 
	#_IO_gëwc_u∆ocked
(
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

422 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

423 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

424 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

425 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

426 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

427 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

428 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

431 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

432 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

434 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

435 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

436 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

437 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

439 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

442 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

443 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

445 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

449 #ifde‡
_IO_MTSAFE_IO


450 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

451 
	#_IO_Êockfûe
(
_Â
) \

452 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

453 
	#_IO_fu∆ockfûe
(
_Â
) \

454 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

456 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

457 
	#_IO_Êockfûe
(
_Â
Ë

	)

458 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

459 
	#_IO_·rylockfûe
(
_Â
Ë

	)

460 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

464 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

465 
_IO_va_li°
, *
__ª°ri˘
);

466 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

467 
_IO_va_li°
);

468 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

469 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

471 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

472 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

474 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

476 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


477 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

478 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

479 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

480 #i‡
__GNUC__
 >= 2

483 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


484 
	~<shlib-com∑t.h
>

485 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

487 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

488 c⁄° 
_IO_°dö_u£d
;

489 
wók_exã∫
 (
_IO_°dö_u£d
);

492 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


493 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

497 
	#_IO_fwide
(
__Â
, 
__mode
) \

498 ({ 
__ªsu…
 = (
__mode
); \

499 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

501 i‡((
__Â
)->
_mode
 == 0) \

503 (
__Â
)->
_mode
 = -1; \

504 
__ªsu…
 = (
__Â
)->
_mode
; \

506 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

507 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

509 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

510 
__ªsu…
; })

	)

513 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

514 
_IO_va_li°
, *
__ª°ri˘
);

515 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

516 
_IO_va_li°
);

517 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

518 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

521 #ifde‡
__LDBL_COMPAT


522 
	~<bôs/libio-ldbl.h
>

525 #ifde‡
__˝lu•lus


	@/usr/include/linux/i2c.h

27 #i‚de‡
_LINUX_I2C_H


28 
	#_LINUX_I2C_H


	)

30 
	~<löux/ty≥s.h
>

68 
	si2c_msg
 {

69 
__u16
 
	maddr
;

70 
__u16
 
	mÊags
;

71 
	#I2C_M_TEN
 0x0010

	)

72 
	#I2C_M_RD
 0x0001

	)

73 
	#I2C_M_STOP
 0x8000

	)

74 
	#I2C_M_NOSTART
 0x4000

	)

75 
	#I2C_M_REV_DIR_ADDR
 0x2000

	)

76 
	#I2C_M_IGNORE_NAK
 0x1000

	)

77 
	#I2C_M_NO_RD_ACK
 0x0800

	)

78 
	#I2C_M_RECV_LEN
 0x0400

	)

79 
__u16
 
	mÀn
;

80 
__u8
 *
	mbuf
;

85 
	#I2C_FUNC_I2C
 0x00000001

	)

86 
	#I2C_FUNC_10BIT_ADDR
 0x00000002

	)

87 
	#I2C_FUNC_PROTOCOL_MANGLING
 0x00000004

	)

88 
	#I2C_FUNC_SMBUS_PEC
 0x00000008

	)

89 
	#I2C_FUNC_NOSTART
 0x00000010

	)

90 
	#I2C_FUNC_SMBUS_BLOCK_PROC_CALL
 0x00008000

	)

91 
	#I2C_FUNC_SMBUS_QUICK
 0x00010000

	)

92 
	#I2C_FUNC_SMBUS_READ_BYTE
 0x00020000

	)

93 
	#I2C_FUNC_SMBUS_WRITE_BYTE
 0x00040000

	)

94 
	#I2C_FUNC_SMBUS_READ_BYTE_DATA
 0x00080000

	)

95 
	#I2C_FUNC_SMBUS_WRITE_BYTE_DATA
 0x00100000

	)

96 
	#I2C_FUNC_SMBUS_READ_WORD_DATA
 0x00200000

	)

97 
	#I2C_FUNC_SMBUS_WRITE_WORD_DATA
 0x00400000

	)

98 
	#I2C_FUNC_SMBUS_PROC_CALL
 0x00800000

	)

99 
	#I2C_FUNC_SMBUS_READ_BLOCK_DATA
 0x01000000

	)

100 
	#I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 0x02000000

	)

101 
	#I2C_FUNC_SMBUS_READ_I2C_BLOCK
 0x04000000

	)

102 
	#I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
 0x08000000

	)

104 
	#I2C_FUNC_SMBUS_BYTE
 (
I2C_FUNC_SMBUS_READ_BYTE
 | \

105 
I2C_FUNC_SMBUS_WRITE_BYTE
)

	)

106 
	#I2C_FUNC_SMBUS_BYTE_DATA
 (
I2C_FUNC_SMBUS_READ_BYTE_DATA
 | \

107 
I2C_FUNC_SMBUS_WRITE_BYTE_DATA
)

	)

108 
	#I2C_FUNC_SMBUS_WORD_DATA
 (
I2C_FUNC_SMBUS_READ_WORD_DATA
 | \

109 
I2C_FUNC_SMBUS_WRITE_WORD_DATA
)

	)

110 
	#I2C_FUNC_SMBUS_BLOCK_DATA
 (
I2C_FUNC_SMBUS_READ_BLOCK_DATA
 | \

111 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
)

	)

112 
	#I2C_FUNC_SMBUS_I2C_BLOCK
 (
I2C_FUNC_SMBUS_READ_I2C_BLOCK
 | \

113 
I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
)

	)

115 
	#I2C_FUNC_SMBUS_EMUL
 (
I2C_FUNC_SMBUS_QUICK
 | \

116 
I2C_FUNC_SMBUS_BYTE
 | \

117 
I2C_FUNC_SMBUS_BYTE_DATA
 | \

118 
I2C_FUNC_SMBUS_WORD_DATA
 | \

119 
I2C_FUNC_SMBUS_PROC_CALL
 | \

120 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 | \

121 
I2C_FUNC_SMBUS_I2C_BLOCK
 | \

122 
I2C_FUNC_SMBUS_PEC
)

	)

127 
	#I2C_SMBUS_BLOCK_MAX
 32

	)

128 
	ui2c_smbus_d©a
 {

129 
__u8
 
	mbyã
;

130 
__u16
 
	mw‹d
;

131 
__u8
 
	mblock
[
I2C_SMBUS_BLOCK_MAX
 + 2];

136 
	#I2C_SMBUS_READ
 1

	)

137 
	#I2C_SMBUS_WRITE
 0

	)

141 
	#I2C_SMBUS_QUICK
 0

	)

142 
	#I2C_SMBUS_BYTE
 1

	)

143 
	#I2C_SMBUS_BYTE_DATA
 2

	)

144 
	#I2C_SMBUS_WORD_DATA
 3

	)

145 
	#I2C_SMBUS_PROC_CALL
 4

	)

146 
	#I2C_SMBUS_BLOCK_DATA
 5

	)

147 
	#I2C_SMBUS_I2C_BLOCK_BROKEN
 6

	)

148 
	#I2C_SMBUS_BLOCK_PROC_CALL
 7

	)

149 
	#I2C_SMBUS_I2C_BLOCK_DATA
 8

	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/patchkey.h

13 #i‚de‡
_LINUX_PATCHKEY_H_INDIRECT


17 #i‚de‡
_LINUX_PATCHKEY_H


18 
	#_LINUX_PATCHKEY_H


	)

21 
	~<ídün.h
>

23 #i‡
deföed
(
__BYTE_ORDER
)

24 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


25 
	#_PATCHKEY
(
id
Ë(0xfd00|id)

	)

26 #ñi‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


27 
	#_PATCHKEY
(
id
Ë((id<<8)|0x00fd)

	)

	@/usr/include/linux/sysinfo.h

1 #i‚de‡
_LINUX_SYSINFO_H


2 
	#_LINUX_SYSINFO_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#SI_LOAD_SHIFT
 16

	)

7 
	ssysöfo
 {

8 
__kî√l_l⁄g_t
 
	mu±ime
;

9 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

10 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

11 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

12 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

13 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

14 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

15 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

16 
__u16
 
	m¥ocs
;

17 
__u16
 
	m∑d
;

18 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

19 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

20 
__u32
 
	mmem_unô
;

21 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/linux/videodev2.h

56 #i‚de‡
__LINUX_VIDEODEV2_H


57 
	#__LINUX_VIDEODEV2_H


	)

59 
	~<sys/time.h
>

61 
	~<löux/io˘l.h
>

62 
	~<löux/ty≥s.h
>

63 
	~<löux/v4l2-comm⁄.h
>

64 
	~<löux/v4l2-c⁄åﬁs.h
>

70 
	#VIDEO_MAX_FRAME
 32

	)

71 
	#VIDEO_MAX_PLANES
 8

	)

78 
	#v4l2_fourcc
(
a
, 
b
, 
c
, 
d
)\

79 ((
__u32
)(
a
Ë| ((__u32)(
b
Ë<< 8Ë| ((__u32)(
c
Ë<< 16Ë| ((__u32)(
d
Ë<< 24))

	)

84 
	ev4l2_fõld
 {

85 
	mV4L2_FIELD_ANY
 = 0,

89 
	mV4L2_FIELD_NONE
 = 1,

90 
	mV4L2_FIELD_TOP
 = 2,

91 
	mV4L2_FIELD_BOTTOM
 = 3,

92 
	mV4L2_FIELD_INTERLACED
 = 4,

93 
	mV4L2_FIELD_SEQ_TB
 = 5,

95 
	mV4L2_FIELD_SEQ_BT
 = 6,

96 
	mV4L2_FIELD_ALTERNATE
 = 7,

98 
	mV4L2_FIELD_INTERLACED_TB
 = 8,

101 
	mV4L2_FIELD_INTERLACED_BT
 = 9,

105 
	#V4L2_FIELD_HAS_TOP
(
fõld
) \

106 ((
fõld
Ë=
V4L2_FIELD_TOP
 ||\

107 (
fõld
Ë=
V4L2_FIELD_INTERLACED
 ||\

108 (
fõld
Ë=
V4L2_FIELD_INTERLACED_TB
 ||\

109 (
fõld
Ë=
V4L2_FIELD_INTERLACED_BT
 ||\

110 (
fõld
Ë=
V4L2_FIELD_SEQ_TB
 ||\

111 (
fõld
Ë=
V4L2_FIELD_SEQ_BT
)

	)

112 
	#V4L2_FIELD_HAS_BOTTOM
(
fõld
) \

113 ((
fõld
Ë=
V4L2_FIELD_BOTTOM
 ||\

114 (
fõld
Ë=
V4L2_FIELD_INTERLACED
 ||\

115 (
fõld
Ë=
V4L2_FIELD_INTERLACED_TB
 ||\

116 (
fõld
Ë=
V4L2_FIELD_INTERLACED_BT
 ||\

117 (
fõld
Ë=
V4L2_FIELD_SEQ_TB
 ||\

118 (
fõld
Ë=
V4L2_FIELD_SEQ_BT
)

	)

119 
	#V4L2_FIELD_HAS_BOTH
(
fõld
) \

120 ((
fõld
Ë=
V4L2_FIELD_INTERLACED
 ||\

121 (
fõld
Ë=
V4L2_FIELD_INTERLACED_TB
 ||\

122 (
fõld
Ë=
V4L2_FIELD_INTERLACED_BT
 ||\

123 (
fõld
Ë=
V4L2_FIELD_SEQ_TB
 ||\

124 (
fõld
Ë=
V4L2_FIELD_SEQ_BT
)

	)

126 
	ev4l2_buf_ty≥
 {

127 
	mV4L2_BUF_TYPE_VIDEO_CAPTURE
 = 1,

128 
	mV4L2_BUF_TYPE_VIDEO_OUTPUT
 = 2,

129 
	mV4L2_BUF_TYPE_VIDEO_OVERLAY
 = 3,

130 
	mV4L2_BUF_TYPE_VBI_CAPTURE
 = 4,

131 
	mV4L2_BUF_TYPE_VBI_OUTPUT
 = 5,

132 
	mV4L2_BUF_TYPE_SLICED_VBI_CAPTURE
 = 6,

133 
	mV4L2_BUF_TYPE_SLICED_VBI_OUTPUT
 = 7,

136 
	mV4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY
 = 8,

138 
	mV4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE
 = 9,

139 
	mV4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE
 = 10,

140 
	mV4L2_BUF_TYPE_SDR_CAPTURE
 = 11,

142 
	mV4L2_BUF_TYPE_PRIVATE
 = 0x80,

145 
	#V4L2_TYPE_IS_MULTIPLANAR
(
ty≥
) \

146 ((
ty≥
Ë=
V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE
 \

147 || (
ty≥
Ë=
V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE
)

	)

149 
	#V4L2_TYPE_IS_OUTPUT
(
ty≥
) \

150 ((
ty≥
Ë=
V4L2_BUF_TYPE_VIDEO_OUTPUT
 \

151 || (
ty≥
Ë=
V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE
 \

152 || (
ty≥
Ë=
V4L2_BUF_TYPE_VIDEO_OVERLAY
 \

153 || (
ty≥
Ë=
V4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY
 \

154 || (
ty≥
Ë=
V4L2_BUF_TYPE_VBI_OUTPUT
 \

155 || (
ty≥
Ë=
V4L2_BUF_TYPE_SLICED_VBI_OUTPUT
)

	)

157 
	ev4l2_tu√r_ty≥
 {

158 
	mV4L2_TUNER_RADIO
 = 1,

159 
	mV4L2_TUNER_ANALOG_TV
 = 2,

160 
	mV4L2_TUNER_DIGITAL_TV
 = 3,

161 
	mV4L2_TUNER_ADC
 = 4,

162 
	mV4L2_TUNER_RF
 = 5,

165 
	ev4l2_mem‹y
 {

166 
	mV4L2_MEMORY_MMAP
 = 1,

167 
	mV4L2_MEMORY_USERPTR
 = 2,

168 
	mV4L2_MEMORY_OVERLAY
 = 3,

169 
	mV4L2_MEMORY_DMABUF
 = 4,

173 
	ev4l2_cﬁ‹•a˚
 {

175 
	mV4L2_COLORSPACE_SMPTE170M
 = 1,

178 
	mV4L2_COLORSPACE_SMPTE240M
 = 2,

181 
	mV4L2_COLORSPACE_REC709
 = 3,

184 
	mV4L2_COLORSPACE_BT878
 = 4,

187 
	mV4L2_COLORSPACE_470_SYSTEM_M
 = 5,

188 
	mV4L2_COLORSPACE_470_SYSTEM_BG
 = 6,

194 
	mV4L2_COLORSPACE_JPEG
 = 7,

197 
	mV4L2_COLORSPACE_SRGB
 = 8,

200 
	ev4l2_¥i‹ôy
 {

201 
	mV4L2_PRIORITY_UNSET
 = 0,

202 
	mV4L2_PRIORITY_BACKGROUND
 = 1,

203 
	mV4L2_PRIORITY_INTERACTIVE
 = 2,

204 
	mV4L2_PRIORITY_RECORD
 = 3,

205 
	mV4L2_PRIORITY_DEFAULT
 = 
V4L2_PRIORITY_INTERACTIVE
,

208 
	sv4l2_ª˘
 {

209 
__s32
 
	mÀ·
;

210 
__s32
 
	mt›
;

211 
__u32
 
	mwidth
;

212 
__u32
 
	mheight
;

215 
	sv4l2_‰a˘
 {

216 
__u32
 
	mnumî©‹
;

217 
__u32
 
	mdíomö©‹
;

231 
	sv4l2_ˇ∑bûôy
 {

232 
__u8
 
	mdrivî
[16];

233 
__u8
 
	mˇrd
[32];

234 
__u8
 
	mbus_öfo
[32];

235 
__u32
 
	mvîsi⁄
;

236 
__u32
 
	mˇ∑bûôõs
;

237 
__u32
 
	mdevi˚_ˇps
;

238 
__u32
 
	mª£rved
[3];

242 
	#V4L2_CAP_VIDEO_CAPTURE
 0x00000001

	)

243 
	#V4L2_CAP_VIDEO_OUTPUT
 0x00000002

	)

244 
	#V4L2_CAP_VIDEO_OVERLAY
 0x00000004

	)

245 
	#V4L2_CAP_VBI_CAPTURE
 0x00000010

	)

246 
	#V4L2_CAP_VBI_OUTPUT
 0x00000020

	)

247 
	#V4L2_CAP_SLICED_VBI_CAPTURE
 0x00000040

	)

248 
	#V4L2_CAP_SLICED_VBI_OUTPUT
 0x00000080

	)

249 
	#V4L2_CAP_RDS_CAPTURE
 0x00000100

	)

250 
	#V4L2_CAP_VIDEO_OUTPUT_OVERLAY
 0x00000200

	)

251 
	#V4L2_CAP_HW_FREQ_SEEK
 0x00000400

	)

252 
	#V4L2_CAP_RDS_OUTPUT
 0x00000800

	)

255 
	#V4L2_CAP_VIDEO_CAPTURE_MPLANE
 0x00001000

	)

257 
	#V4L2_CAP_VIDEO_OUTPUT_MPLANE
 0x00002000

	)

259 
	#V4L2_CAP_VIDEO_M2M_MPLANE
 0x00004000

	)

261 
	#V4L2_CAP_VIDEO_M2M
 0x00008000

	)

263 
	#V4L2_CAP_TUNER
 0x00010000

	)

264 
	#V4L2_CAP_AUDIO
 0x00020000

	)

265 
	#V4L2_CAP_RADIO
 0x00040000

	)

266 
	#V4L2_CAP_MODULATOR
 0x00080000

	)

268 
	#V4L2_CAP_SDR_CAPTURE
 0x00100000

	)

270 
	#V4L2_CAP_READWRITE
 0x01000000

	)

271 
	#V4L2_CAP_ASYNCIO
 0x02000000

	)

272 
	#V4L2_CAP_STREAMING
 0x04000000

	)

274 
	#V4L2_CAP_DEVICE_CAPS
 0x80000000

	)

279 
	sv4l2_pix_f‹m©
 {

280 
__u32
 
	mwidth
;

281 
__u32
 
	mheight
;

282 
__u32
 
	mpixñf‹m©
;

283 
__u32
 
	mfõld
;

284 
__u32
 
	mbyã•îlöe
;

285 
__u32
 
	msizeimage
;

286 
__u32
 
	mcﬁ‹•a˚
;

287 
__u32
 
	m¥iv
;

293 
	#V4L2_PIX_FMT_RGB332
 
	`v4l2_fourcc
('R', 'G', 'B', '1'Ë

	)

294 
	#V4L2_PIX_FMT_RGB444
 
	`v4l2_fourcc
('R', '4', '4', '4'Ë

	)

295 
	#V4L2_PIX_FMT_RGB555
 
	`v4l2_fourcc
('R', 'G', 'B', 'O'Ë

	)

296 
	#V4L2_PIX_FMT_RGB565
 
	`v4l2_fourcc
('R', 'G', 'B', 'P'Ë

	)

297 
	#V4L2_PIX_FMT_RGB555X
 
	`v4l2_fourcc
('R', 'G', 'B', 'Q'Ë

	)

298 
	#V4L2_PIX_FMT_RGB565X
 
	`v4l2_fourcc
('R', 'G', 'B', 'R'Ë

	)

299 
	#V4L2_PIX_FMT_BGR666
 
	`v4l2_fourcc
('B', 'G', 'R', 'H'Ë

	)

300 
	#V4L2_PIX_FMT_BGR24
 
	`v4l2_fourcc
('B', 'G', 'R', '3'Ë

	)

301 
	#V4L2_PIX_FMT_RGB24
 
	`v4l2_fourcc
('R', 'G', 'B', '3'Ë

	)

302 
	#V4L2_PIX_FMT_BGR32
 
	`v4l2_fourcc
('B', 'G', 'R', '4'Ë

	)

303 
	#V4L2_PIX_FMT_RGB32
 
	`v4l2_fourcc
('R', 'G', 'B', '4'Ë

	)

306 
	#V4L2_PIX_FMT_GREY
 
	`v4l2_fourcc
('G', 'R', 'E', 'Y'Ë

	)

307 
	#V4L2_PIX_FMT_Y4
 
	`v4l2_fourcc
('Y', '0', '4', ' 'Ë

	)

308 
	#V4L2_PIX_FMT_Y6
 
	`v4l2_fourcc
('Y', '0', '6', ' 'Ë

	)

309 
	#V4L2_PIX_FMT_Y10
 
	`v4l2_fourcc
('Y', '1', '0', ' 'Ë

	)

310 
	#V4L2_PIX_FMT_Y12
 
	`v4l2_fourcc
('Y', '1', '2', ' 'Ë

	)

311 
	#V4L2_PIX_FMT_Y16
 
	`v4l2_fourcc
('Y', '1', '6', ' 'Ë

	)

314 
	#V4L2_PIX_FMT_Y10BPACK
 
	`v4l2_fourcc
('Y', '1', '0', 'B'Ë

	)

317 
	#V4L2_PIX_FMT_PAL8
 
	`v4l2_fourcc
('P', 'A', 'L', '8'Ë

	)

320 
	#V4L2_PIX_FMT_UV8
 
	`v4l2_fourcc
('U', 'V', '8', ' 'Ë

	)

323 
	#V4L2_PIX_FMT_YVU410
 
	`v4l2_fourcc
('Y', 'V', 'U', '9'Ë

	)

324 
	#V4L2_PIX_FMT_YVU420
 
	`v4l2_fourcc
('Y', 'V', '1', '2'Ë

	)

325 
	#V4L2_PIX_FMT_YUYV
 
	`v4l2_fourcc
('Y', 'U', 'Y', 'V'Ë

	)

326 
	#V4L2_PIX_FMT_YYUV
 
	`v4l2_fourcc
('Y', 'Y', 'U', 'V'Ë

	)

327 
	#V4L2_PIX_FMT_YVYU
 
	`v4l2_fourcc
('Y', 'V', 'Y', 'U'Ë

	)

328 
	#V4L2_PIX_FMT_UYVY
 
	`v4l2_fourcc
('U', 'Y', 'V', 'Y'Ë

	)

329 
	#V4L2_PIX_FMT_VYUY
 
	`v4l2_fourcc
('V', 'Y', 'U', 'Y'Ë

	)

330 
	#V4L2_PIX_FMT_YUV422P
 
	`v4l2_fourcc
('4', '2', '2', 'P'Ë

	)

331 
	#V4L2_PIX_FMT_YUV411P
 
	`v4l2_fourcc
('4', '1', '1', 'P'Ë

	)

332 
	#V4L2_PIX_FMT_Y41P
 
	`v4l2_fourcc
('Y', '4', '1', 'P'Ë

	)

333 
	#V4L2_PIX_FMT_YUV444
 
	`v4l2_fourcc
('Y', '4', '4', '4'Ë

	)

334 
	#V4L2_PIX_FMT_YUV555
 
	`v4l2_fourcc
('Y', 'U', 'V', 'O'Ë

	)

335 
	#V4L2_PIX_FMT_YUV565
 
	`v4l2_fourcc
('Y', 'U', 'V', 'P'Ë

	)

336 
	#V4L2_PIX_FMT_YUV32
 
	`v4l2_fourcc
('Y', 'U', 'V', '4'Ë

	)

337 
	#V4L2_PIX_FMT_YUV410
 
	`v4l2_fourcc
('Y', 'U', 'V', '9'Ë

	)

338 
	#V4L2_PIX_FMT_YUV420
 
	`v4l2_fourcc
('Y', 'U', '1', '2'Ë

	)

339 
	#V4L2_PIX_FMT_HI240
 
	`v4l2_fourcc
('H', 'I', '2', '4'Ë

	)

340 
	#V4L2_PIX_FMT_HM12
 
	`v4l2_fourcc
('H', 'M', '1', '2'Ë

	)

341 
	#V4L2_PIX_FMT_M420
 
	`v4l2_fourcc
('M', '4', '2', '0'Ë

	)

344 
	#V4L2_PIX_FMT_NV12
 
	`v4l2_fourcc
('N', 'V', '1', '2'Ë

	)

345 
	#V4L2_PIX_FMT_NV21
 
	`v4l2_fourcc
('N', 'V', '2', '1'Ë

	)

346 
	#V4L2_PIX_FMT_NV16
 
	`v4l2_fourcc
('N', 'V', '1', '6'Ë

	)

347 
	#V4L2_PIX_FMT_NV61
 
	`v4l2_fourcc
('N', 'V', '6', '1'Ë

	)

348 
	#V4L2_PIX_FMT_NV24
 
	`v4l2_fourcc
('N', 'V', '2', '4'Ë

	)

349 
	#V4L2_PIX_FMT_NV42
 
	`v4l2_fourcc
('N', 'V', '4', '2'Ë

	)

352 
	#V4L2_PIX_FMT_NV12M
 
	`v4l2_fourcc
('N', 'M', '1', '2'Ë

	)

353 
	#V4L2_PIX_FMT_NV21M
 
	`v4l2_fourcc
('N', 'M', '2', '1'Ë

	)

354 
	#V4L2_PIX_FMT_NV16M
 
	`v4l2_fourcc
('N', 'M', '1', '6'Ë

	)

355 
	#V4L2_PIX_FMT_NV61M
 
	`v4l2_fourcc
('N', 'M', '6', '1'Ë

	)

356 
	#V4L2_PIX_FMT_NV12MT
 
	`v4l2_fourcc
('T', 'M', '1', '2'Ë

	)

357 
	#V4L2_PIX_FMT_NV12MT_16X16
 
	`v4l2_fourcc
('V', 'M', '1', '2'Ë

	)

360 
	#V4L2_PIX_FMT_YUV420M
 
	`v4l2_fourcc
('Y', 'M', '1', '2'Ë

	)

361 
	#V4L2_PIX_FMT_YVU420M
 
	`v4l2_fourcc
('Y', 'M', '2', '1'Ë

	)

364 
	#V4L2_PIX_FMT_SBGGR8
 
	`v4l2_fourcc
('B', 'A', '8', '1'Ë

	)

365 
	#V4L2_PIX_FMT_SGBRG8
 
	`v4l2_fourcc
('G', 'B', 'R', 'G'Ë

	)

366 
	#V4L2_PIX_FMT_SGRBG8
 
	`v4l2_fourcc
('G', 'R', 'B', 'G'Ë

	)

367 
	#V4L2_PIX_FMT_SRGGB8
 
	`v4l2_fourcc
('R', 'G', 'G', 'B'Ë

	)

368 
	#V4L2_PIX_FMT_SBGGR10
 
	`v4l2_fourcc
('B', 'G', '1', '0'Ë

	)

369 
	#V4L2_PIX_FMT_SGBRG10
 
	`v4l2_fourcc
('G', 'B', '1', '0'Ë

	)

370 
	#V4L2_PIX_FMT_SGRBG10
 
	`v4l2_fourcc
('B', 'A', '1', '0'Ë

	)

371 
	#V4L2_PIX_FMT_SRGGB10
 
	`v4l2_fourcc
('R', 'G', '1', '0'Ë

	)

372 
	#V4L2_PIX_FMT_SBGGR12
 
	`v4l2_fourcc
('B', 'G', '1', '2'Ë

	)

373 
	#V4L2_PIX_FMT_SGBRG12
 
	`v4l2_fourcc
('G', 'B', '1', '2'Ë

	)

374 
	#V4L2_PIX_FMT_SGRBG12
 
	`v4l2_fourcc
('B', 'A', '1', '2'Ë

	)

375 
	#V4L2_PIX_FMT_SRGGB12
 
	`v4l2_fourcc
('R', 'G', '1', '2'Ë

	)

377 
	#V4L2_PIX_FMT_SBGGR10ALAW8
 
	`v4l2_fourcc
('a', 'B', 'A', '8')

	)

378 
	#V4L2_PIX_FMT_SGBRG10ALAW8
 
	`v4l2_fourcc
('a', 'G', 'A', '8')

	)

379 
	#V4L2_PIX_FMT_SGRBG10ALAW8
 
	`v4l2_fourcc
('a', 'g', 'A', '8')

	)

380 
	#V4L2_PIX_FMT_SRGGB10ALAW8
 
	`v4l2_fourcc
('a', 'R', 'A', '8')

	)

382 
	#V4L2_PIX_FMT_SBGGR10DPCM8
 
	`v4l2_fourcc
('b', 'B', 'A', '8')

	)

383 
	#V4L2_PIX_FMT_SGBRG10DPCM8
 
	`v4l2_fourcc
('b', 'G', 'A', '8')

	)

384 
	#V4L2_PIX_FMT_SGRBG10DPCM8
 
	`v4l2_fourcc
('B', 'D', '1', '0')

	)

385 
	#V4L2_PIX_FMT_SRGGB10DPCM8
 
	`v4l2_fourcc
('b', 'R', 'A', '8')

	)

390 
	#V4L2_PIX_FMT_SBGGR16
 
	`v4l2_fourcc
('B', 'Y', 'R', '2'Ë

	)

393 
	#V4L2_PIX_FMT_MJPEG
 
	`v4l2_fourcc
('M', 'J', 'P', 'G'Ë

	)

394 
	#V4L2_PIX_FMT_JPEG
 
	`v4l2_fourcc
('J', 'P', 'E', 'G'Ë

	)

395 
	#V4L2_PIX_FMT_DV
 
	`v4l2_fourcc
('d', 'v', 's', 'd'Ë

	)

396 
	#V4L2_PIX_FMT_MPEG
 
	`v4l2_fourcc
('M', 'P', 'E', 'G'Ë

	)

397 
	#V4L2_PIX_FMT_H264
 
	`v4l2_fourcc
('H', '2', '6', '4'Ë

	)

398 
	#V4L2_PIX_FMT_H264_NO_SC
 
	`v4l2_fourcc
('A', 'V', 'C', '1'Ë

	)

399 
	#V4L2_PIX_FMT_H264_MVC
 
	`v4l2_fourcc
('M', '2', '6', '4'Ë

	)

400 
	#V4L2_PIX_FMT_H263
 
	`v4l2_fourcc
('H', '2', '6', '3'Ë

	)

401 
	#V4L2_PIX_FMT_MPEG1
 
	`v4l2_fourcc
('M', 'P', 'G', '1'Ë

	)

402 
	#V4L2_PIX_FMT_MPEG2
 
	`v4l2_fourcc
('M', 'P', 'G', '2'Ë

	)

403 
	#V4L2_PIX_FMT_MPEG4
 
	`v4l2_fourcc
('M', 'P', 'G', '4'Ë

	)

404 
	#V4L2_PIX_FMT_XVID
 
	`v4l2_fourcc
('X', 'V', 'I', 'D'Ë

	)

405 
	#V4L2_PIX_FMT_VC1_ANNEX_G
 
	`v4l2_fourcc
('V', 'C', '1', 'G'Ë

	)

406 
	#V4L2_PIX_FMT_VC1_ANNEX_L
 
	`v4l2_fourcc
('V', 'C', '1', 'L'Ë

	)

407 
	#V4L2_PIX_FMT_VP8
 
	`v4l2_fourcc
('V', 'P', '8', '0'Ë

	)

410 
	#V4L2_PIX_FMT_CPIA1
 
	`v4l2_fourcc
('C', 'P', 'I', 'A'Ë

	)

411 
	#V4L2_PIX_FMT_WNVA
 
	`v4l2_fourcc
('W', 'N', 'V', 'A'Ë

	)

412 
	#V4L2_PIX_FMT_SN9C10X
 
	`v4l2_fourcc
('S', '9', '1', '0'Ë

	)

413 
	#V4L2_PIX_FMT_SN9C20X_I420
 
	`v4l2_fourcc
('S', '9', '2', '0'Ë

	)

414 
	#V4L2_PIX_FMT_PWC1
 
	`v4l2_fourcc
('P', 'W', 'C', '1'Ë

	)

415 
	#V4L2_PIX_FMT_PWC2
 
	`v4l2_fourcc
('P', 'W', 'C', '2'Ë

	)

416 
	#V4L2_PIX_FMT_ET61X251
 
	`v4l2_fourcc
('E', '6', '2', '5'Ë

	)

417 
	#V4L2_PIX_FMT_SPCA501
 
	`v4l2_fourcc
('S', '5', '0', '1'Ë

	)

418 
	#V4L2_PIX_FMT_SPCA505
 
	`v4l2_fourcc
('S', '5', '0', '5'Ë

	)

419 
	#V4L2_PIX_FMT_SPCA508
 
	`v4l2_fourcc
('S', '5', '0', '8'Ë

	)

420 
	#V4L2_PIX_FMT_SPCA561
 
	`v4l2_fourcc
('S', '5', '6', '1'Ë

	)

421 
	#V4L2_PIX_FMT_PAC207
 
	`v4l2_fourcc
('P', '2', '0', '7'Ë

	)

422 
	#V4L2_PIX_FMT_MR97310A
 
	`v4l2_fourcc
('M', '3', '1', '0'Ë

	)

423 
	#V4L2_PIX_FMT_JL2005BCD
 
	`v4l2_fourcc
('J', 'L', '2', '0'Ë

	)

424 
	#V4L2_PIX_FMT_SN9C2028
 
	`v4l2_fourcc
('S', 'O', 'N', 'X'Ë

	)

425 
	#V4L2_PIX_FMT_SQ905C
 
	`v4l2_fourcc
('9', '0', '5', 'C'Ë

	)

426 
	#V4L2_PIX_FMT_PJPG
 
	`v4l2_fourcc
('P', 'J', 'P', 'G'Ë

	)

427 
	#V4L2_PIX_FMT_OV511
 
	`v4l2_fourcc
('O', '5', '1', '1'Ë

	)

428 
	#V4L2_PIX_FMT_OV518
 
	`v4l2_fourcc
('O', '5', '1', '8'Ë

	)

429 
	#V4L2_PIX_FMT_STV0680
 
	`v4l2_fourcc
('S', '6', '8', '0'Ë

	)

430 
	#V4L2_PIX_FMT_TM6000
 
	`v4l2_fourcc
('T', 'M', '6', '0'Ë

	)

431 
	#V4L2_PIX_FMT_CIT_YYVYUY
 
	`v4l2_fourcc
('C', 'I', 'T', 'V'Ë

	)

432 
	#V4L2_PIX_FMT_KONICA420
 
	`v4l2_fourcc
('K', 'O', 'N', 'I'Ë

	)

433 
	#V4L2_PIX_FMT_JPGL
 
	`v4l2_fourcc
('J', 'P', 'G', 'L'Ë

	)

434 
	#V4L2_PIX_FMT_SE401
 
	`v4l2_fourcc
('S', '4', '0', '1'Ë

	)

435 
	#V4L2_PIX_FMT_S5C_UYVY_JPG
 
	`v4l2_fourcc
('S', '5', 'C', 'I'Ë

	)

438 
	#V4L2_SDR_FMT_CU8
 
	`v4l2_fourcc
('C', 'U', '0', '8'Ë

	)

439 
	#V4L2_SDR_FMT_CU16LE
 
	`v4l2_fourcc
('C', 'U', '1', '6'Ë

	)

444 
	sv4l2_fmtdesc
 {

445 
__u32
 
	mödex
;

446 
__u32
 
	mty≥
;

447 
__u32
 
	mÊags
;

448 
__u8
 
	mdes¸ùti⁄
[32];

449 
__u32
 
	mpixñf‹m©
;

450 
__u32
 
	mª£rved
[4];

453 
	#V4L2_FMT_FLAG_COMPRESSED
 0x0001

	)

454 
	#V4L2_FMT_FLAG_EMULATED
 0x0002

	)

461 
	ev4l2_‰msizëy≥s
 {

462 
	mV4L2_FRMSIZE_TYPE_DISCRETE
 = 1,

463 
	mV4L2_FRMSIZE_TYPE_CONTINUOUS
 = 2,

464 
	mV4L2_FRMSIZE_TYPE_STEPWISE
 = 3,

467 
	sv4l2_‰msize_dis¸ëe
 {

468 
__u32
 
	mwidth
;

469 
__u32
 
	mheight
;

472 
	sv4l2_‰msize_°ïwi£
 {

473 
__u32
 
	mmö_width
;

474 
__u32
 
	mmax_width
;

475 
__u32
 
	m°ï_width
;

476 
__u32
 
	mmö_height
;

477 
__u32
 
	mmax_height
;

478 
__u32
 
	m°ï_height
;

481 
	sv4l2_‰msizìnum
 {

482 
__u32
 
	mödex
;

483 
__u32
 
	mpixñ_f‹m©
;

484 
__u32
 
	mty≥
;

487 
v4l2_‰msize_dis¸ëe
 
	mdis¸ëe
;

488 
v4l2_‰msize_°ïwi£
 
	m°ïwi£
;

491 
__u32
 
	mª£rved
[2];

497 
	ev4l2_‰mivÆty≥s
 {

498 
	mV4L2_FRMIVAL_TYPE_DISCRETE
 = 1,

499 
	mV4L2_FRMIVAL_TYPE_CONTINUOUS
 = 2,

500 
	mV4L2_FRMIVAL_TYPE_STEPWISE
 = 3,

503 
	sv4l2_‰mivÆ_°ïwi£
 {

504 
v4l2_‰a˘
 
	mmö
;

505 
v4l2_‰a˘
 
	mmax
;

506 
v4l2_‰a˘
 
	m°ï
;

509 
	sv4l2_‰mivÆíum
 {

510 
__u32
 
	mödex
;

511 
__u32
 
	mpixñ_f‹m©
;

512 
__u32
 
	mwidth
;

513 
__u32
 
	mheight
;

514 
__u32
 
	mty≥
;

517 
v4l2_‰a˘
 
	mdis¸ëe
;

518 
v4l2_‰mivÆ_°ïwi£
 
	m°ïwi£
;

521 
__u32
 
	mª£rved
[2];

528 
	sv4l2_timecode
 {

529 
__u32
 
	mty≥
;

530 
__u32
 
	mÊags
;

531 
__u8
 
	m‰ames
;

532 
__u8
 
	m£c⁄ds
;

533 
__u8
 
	mmöuãs
;

534 
__u8
 
	mhours
;

535 
__u8
 
	mu£rbôs
[4];

539 
	#V4L2_TC_TYPE_24FPS
 1

	)

540 
	#V4L2_TC_TYPE_25FPS
 2

	)

541 
	#V4L2_TC_TYPE_30FPS
 3

	)

542 
	#V4L2_TC_TYPE_50FPS
 4

	)

543 
	#V4L2_TC_TYPE_60FPS
 5

	)

546 
	#V4L2_TC_FLAG_DROPFRAME
 0x0001

	)

547 
	#V4L2_TC_FLAG_COLORFRAME
 0x0002

	)

548 
	#V4L2_TC_USERBITS_fõld
 0x000C

	)

549 
	#V4L2_TC_USERBITS_USERDEFINED
 0x0000

	)

550 
	#V4L2_TC_USERBITS_8BITCHARS
 0x0008

	)

553 
	sv4l2_j≥gcom¥essi⁄
 {

554 
	mquÆôy
;

556 
	mAPPn
;

558 
	mAPP_Àn
;

559 
	mAPP_d©a
[60];

561 
	mCOM_Àn
;

562 
	mCOM_d©a
[60];

564 
__u32
 
	mj≥g_m¨kîs
;

574 
	#V4L2_JPEG_MARKER_DHT
 (1<<3Ë

	)

575 
	#V4L2_JPEG_MARKER_DQT
 (1<<4Ë

	)

576 
	#V4L2_JPEG_MARKER_DRI
 (1<<5Ë

	)

577 
	#V4L2_JPEG_MARKER_COM
 (1<<6Ë

	)

578 
	#V4L2_JPEG_MARKER_APP
 (1<<7Ë

	)

585 
	sv4l2_ªque°buf„rs
 {

586 
__u32
 
	mcou¡
;

587 
__u32
 
	mty≥
;

588 
__u32
 
	mmem‹y
;

589 
__u32
 
	mª£rved
[2];

612 
	sv4l2_∂™e
 {

613 
__u32
 
	mbyãsu£d
;

614 
__u32
 
	mÀngth
;

616 
__u32
 
	mmem_off£t
;

617 
	mu£Ωå
;

618 
__s32
 
	mfd
;

619 } 
	mm
;

620 
__u32
 
	md©a_off£t
;

621 
__u32
 
	mª£rved
[11];

654 
	sv4l2_buf„r
 {

655 
__u32
 
	mödex
;

656 
__u32
 
	mty≥
;

657 
__u32
 
	mbyãsu£d
;

658 
__u32
 
	mÊags
;

659 
__u32
 
	mfõld
;

660 
timevÆ
 
	mtime°amp
;

661 
v4l2_timecode
 
	mtimecode
;

662 
__u32
 
	m£quí˚
;

665 
__u32
 
	mmem‹y
;

667 
__u32
 
	moff£t
;

668 
	mu£Ωå
;

669 
v4l2_∂™e
 *
	m∂™es
;

670 
__s32
 
	mfd
;

671 } 
	mm
;

672 
__u32
 
	mÀngth
;

673 
__u32
 
	mª£rved2
;

674 
__u32
 
	mª£rved
;

679 
	#V4L2_BUF_FLAG_MAPPED
 0x00000001

	)

681 
	#V4L2_BUF_FLAG_QUEUED
 0x00000002

	)

683 
	#V4L2_BUF_FLAG_DONE
 0x00000004

	)

685 
	#V4L2_BUF_FLAG_KEYFRAME
 0x00000008

	)

687 
	#V4L2_BUF_FLAG_PFRAME
 0x00000010

	)

689 
	#V4L2_BUF_FLAG_BFRAME
 0x00000020

	)

691 
	#V4L2_BUF_FLAG_ERROR
 0x00000040

	)

693 
	#V4L2_BUF_FLAG_TIMECODE
 0x00000100

	)

695 
	#V4L2_BUF_FLAG_PREPARED
 0x00000400

	)

697 
	#V4L2_BUF_FLAG_NO_CACHE_INVALIDATE
 0x00000800

	)

698 
	#V4L2_BUF_FLAG_NO_CACHE_CLEAN
 0x00001000

	)

700 
	#V4L2_BUF_FLAG_TIMESTAMP_MASK
 0x0000e000

	)

701 
	#V4L2_BUF_FLAG_TIMESTAMP_UNKNOWN
 0x00000000

	)

702 
	#V4L2_BUF_FLAG_TIMESTAMP_MONOTONIC
 0x00002000

	)

703 
	#V4L2_BUF_FLAG_TIMESTAMP_COPY
 0x00004000

	)

705 
	#V4L2_BUF_FLAG_TSTAMP_SRC_MASK
 0x00070000

	)

706 
	#V4L2_BUF_FLAG_TSTAMP_SRC_EOF
 0x00000000

	)

707 
	#V4L2_BUF_FLAG_TSTAMP_SRC_SOE
 0x00010000

	)

727 
	sv4l2_exp‹tbuf„r
 {

728 
__u32
 
	mty≥
;

729 
__u32
 
	mödex
;

730 
__u32
 
	m∂™e
;

731 
__u32
 
	mÊags
;

732 
__s32
 
	mfd
;

733 
__u32
 
	mª£rved
[11];

739 
	sv4l2_‰amebuf„r
 {

740 
__u32
 
	mˇ∑bûôy
;

741 
__u32
 
	mÊags
;

744 *
	mba£
;

745 
v4l2_pix_f‹m©
 
	mfmt
;

748 
	#V4L2_FBUF_CAP_EXTERNOVERLAY
 0x0001

	)

749 
	#V4L2_FBUF_CAP_CHROMAKEY
 0x0002

	)

750 
	#V4L2_FBUF_CAP_LIST_CLIPPING
 0x0004

	)

751 
	#V4L2_FBUF_CAP_BITMAP_CLIPPING
 0x0008

	)

752 
	#V4L2_FBUF_CAP_LOCAL_ALPHA
 0x0010

	)

753 
	#V4L2_FBUF_CAP_GLOBAL_ALPHA
 0x0020

	)

754 
	#V4L2_FBUF_CAP_LOCAL_INV_ALPHA
 0x0040

	)

755 
	#V4L2_FBUF_CAP_SRC_CHROMAKEY
 0x0080

	)

757 
	#V4L2_FBUF_FLAG_PRIMARY
 0x0001

	)

758 
	#V4L2_FBUF_FLAG_OVERLAY
 0x0002

	)

759 
	#V4L2_FBUF_FLAG_CHROMAKEY
 0x0004

	)

760 
	#V4L2_FBUF_FLAG_LOCAL_ALPHA
 0x0008

	)

761 
	#V4L2_FBUF_FLAG_GLOBAL_ALPHA
 0x0010

	)

762 
	#V4L2_FBUF_FLAG_LOCAL_INV_ALPHA
 0x0020

	)

763 
	#V4L2_FBUF_FLAG_SRC_CHROMAKEY
 0x0040

	)

765 
	sv4l2_˛ù
 {

766 
v4l2_ª˘
 
	mc
;

767 
v4l2_˛ù
 *
	m√xt
;

770 
	sv4l2_wödow
 {

771 
v4l2_ª˘
 
	mw
;

772 
__u32
 
	mfõld
;

773 
__u32
 
	mchromakey
;

774 
v4l2_˛ù
 *
	m˛ùs
;

775 
__u32
 
	m˛ùcou¡
;

776 *
	mbôm≠
;

777 
__u8
 
	mglobÆ_Æpha
;

783 
	sv4l2_ˇ±uª∑rm
 {

784 
__u32
 
	mˇ∑bûôy
;

785 
__u32
 
	mˇ±uªmode
;

786 
v4l2_‰a˘
 
	mtimïî‰ame
;

787 
__u32
 
	mexãndedmode
;

788 
__u32
 
	mªadbuf„rs
;

789 
__u32
 
	mª£rved
[4];

793 
	#V4L2_MODE_HIGHQUALITY
 0x0001

	)

794 
	#V4L2_CAP_TIMEPERFRAME
 0x1000

	)

796 
	sv4l2_ouçuç¨m
 {

797 
__u32
 
	mˇ∑bûôy
;

798 
__u32
 
	mouçutmode
;

799 
v4l2_‰a˘
 
	mtimïî‰ame
;

800 
__u32
 
	mexãndedmode
;

801 
__u32
 
	mwrôebuf„rs
;

802 
__u32
 
	mª£rved
[4];

808 
	sv4l2_¸›ˇp
 {

809 
__u32
 
	mty≥
;

810 
v4l2_ª˘
 
	mbounds
;

811 
v4l2_ª˘
 
	mde‰e˘
;

812 
v4l2_‰a˘
 
	mpixña•e˘
;

815 
	sv4l2_¸›
 {

816 
__u32
 
	mty≥
;

817 
v4l2_ª˘
 
	mc
;

833 
	sv4l2_£À˘i⁄
 {

834 
__u32
 
	mty≥
;

835 
__u32
 
	mèrgë
;

836 
__u32
 
	mÊags
;

837 
v4l2_ª˘
 
	mr
;

838 
__u32
 
	mª£rved
[9];

846 
__u64
 
	tv4l2_°d_id
;

849 
	#V4L2_STD_PAL_B
 ((
v4l2_°d_id
)0x00000001)

	)

850 
	#V4L2_STD_PAL_B1
 ((
v4l2_°d_id
)0x00000002)

	)

851 
	#V4L2_STD_PAL_G
 ((
v4l2_°d_id
)0x00000004)

	)

852 
	#V4L2_STD_PAL_H
 ((
v4l2_°d_id
)0x00000008)

	)

853 
	#V4L2_STD_PAL_I
 ((
v4l2_°d_id
)0x00000010)

	)

854 
	#V4L2_STD_PAL_D
 ((
v4l2_°d_id
)0x00000020)

	)

855 
	#V4L2_STD_PAL_D1
 ((
v4l2_°d_id
)0x00000040)

	)

856 
	#V4L2_STD_PAL_K
 ((
v4l2_°d_id
)0x00000080)

	)

858 
	#V4L2_STD_PAL_M
 ((
v4l2_°d_id
)0x00000100)

	)

859 
	#V4L2_STD_PAL_N
 ((
v4l2_°d_id
)0x00000200)

	)

860 
	#V4L2_STD_PAL_Nc
 ((
v4l2_°d_id
)0x00000400)

	)

861 
	#V4L2_STD_PAL_60
 ((
v4l2_°d_id
)0x00000800)

	)

863 
	#V4L2_STD_NTSC_M
 ((
v4l2_°d_id
)0x00001000Ë

	)

864 
	#V4L2_STD_NTSC_M_JP
 ((
v4l2_°d_id
)0x00002000Ë

	)

865 
	#V4L2_STD_NTSC_443
 ((
v4l2_°d_id
)0x00004000)

	)

866 
	#V4L2_STD_NTSC_M_KR
 ((
v4l2_°d_id
)0x00008000Ë

	)

868 
	#V4L2_STD_SECAM_B
 ((
v4l2_°d_id
)0x00010000)

	)

869 
	#V4L2_STD_SECAM_D
 ((
v4l2_°d_id
)0x00020000)

	)

870 
	#V4L2_STD_SECAM_G
 ((
v4l2_°d_id
)0x00040000)

	)

871 
	#V4L2_STD_SECAM_H
 ((
v4l2_°d_id
)0x00080000)

	)

872 
	#V4L2_STD_SECAM_K
 ((
v4l2_°d_id
)0x00100000)

	)

873 
	#V4L2_STD_SECAM_K1
 ((
v4l2_°d_id
)0x00200000)

	)

874 
	#V4L2_STD_SECAM_L
 ((
v4l2_°d_id
)0x00400000)

	)

875 
	#V4L2_STD_SECAM_LC
 ((
v4l2_°d_id
)0x00800000)

	)

878 
	#V4L2_STD_ATSC_8_VSB
 ((
v4l2_°d_id
)0x01000000)

	)

879 
	#V4L2_STD_ATSC_16_VSB
 ((
v4l2_°d_id
)0x02000000)

	)

899 
	#V4L2_STD_NTSC
 (
V4L2_STD_NTSC_M
 |\

900 
V4L2_STD_NTSC_M_JP
 |\

901 
V4L2_STD_NTSC_M_KR
)

	)

903 
	#V4L2_STD_SECAM_DK
 (
V4L2_STD_SECAM_D
 |\

904 
V4L2_STD_SECAM_K
 |\

905 
V4L2_STD_SECAM_K1
)

	)

907 
	#V4L2_STD_SECAM
 (
V4L2_STD_SECAM_B
 |\

908 
V4L2_STD_SECAM_G
 |\

909 
V4L2_STD_SECAM_H
 |\

910 
V4L2_STD_SECAM_DK
 |\

911 
V4L2_STD_SECAM_L
 |\

912 
V4L2_STD_SECAM_LC
)

	)

914 
	#V4L2_STD_PAL_BG
 (
V4L2_STD_PAL_B
 |\

915 
V4L2_STD_PAL_B1
 |\

916 
V4L2_STD_PAL_G
)

	)

917 
	#V4L2_STD_PAL_DK
 (
V4L2_STD_PAL_D
 |\

918 
V4L2_STD_PAL_D1
 |\

919 
V4L2_STD_PAL_K
)

	)

925 
	#V4L2_STD_PAL
 (
V4L2_STD_PAL_BG
 |\

926 
V4L2_STD_PAL_DK
 |\

927 
V4L2_STD_PAL_H
 |\

928 
V4L2_STD_PAL_I
)

	)

930 
	#V4L2_STD_B
 (
V4L2_STD_PAL_B
 |\

931 
V4L2_STD_PAL_B1
 |\

932 
V4L2_STD_SECAM_B
)

	)

933 
	#V4L2_STD_G
 (
V4L2_STD_PAL_G
 |\

934 
V4L2_STD_SECAM_G
)

	)

935 
	#V4L2_STD_H
 (
V4L2_STD_PAL_H
 |\

936 
V4L2_STD_SECAM_H
)

	)

937 
	#V4L2_STD_L
 (
V4L2_STD_SECAM_L
 |\

938 
V4L2_STD_SECAM_LC
)

	)

939 
	#V4L2_STD_GH
 (
V4L2_STD_G
 |\

940 
V4L2_STD_H
)

	)

941 
	#V4L2_STD_DK
 (
V4L2_STD_PAL_DK
 |\

942 
V4L2_STD_SECAM_DK
)

	)

943 
	#V4L2_STD_BG
 (
V4L2_STD_B
 |\

944 
V4L2_STD_G
)

	)

945 
	#V4L2_STD_MN
 (
V4L2_STD_PAL_M
 |\

946 
V4L2_STD_PAL_N
 |\

947 
V4L2_STD_PAL_Nc
 |\

948 
V4L2_STD_NTSC
)

	)

951 
	#V4L2_STD_MTS
 (
V4L2_STD_NTSC_M
 |\

952 
V4L2_STD_PAL_M
 |\

953 
V4L2_STD_PAL_N
 |\

954 
V4L2_STD_PAL_Nc
)

	)

957 
	#V4L2_STD_525_60
 (
V4L2_STD_PAL_M
 |\

958 
V4L2_STD_PAL_60
 |\

959 
V4L2_STD_NTSC
 |\

960 
V4L2_STD_NTSC_443
)

	)

962 
	#V4L2_STD_625_50
 (
V4L2_STD_PAL
 |\

963 
V4L2_STD_PAL_N
 |\

964 
V4L2_STD_PAL_Nc
 |\

965 
V4L2_STD_SECAM
)

	)

967 
	#V4L2_STD_ATSC
 (
V4L2_STD_ATSC_8_VSB
 |\

968 
V4L2_STD_ATSC_16_VSB
)

	)

970 
	#V4L2_STD_UNKNOWN
 0

	)

971 
	#V4L2_STD_ALL
 (
V4L2_STD_525_60
 |\

972 
V4L2_STD_625_50
)

	)

974 
	sv4l2_°™d¨d
 {

975 
__u32
 
	mödex
;

976 
v4l2_°d_id
 
	mid
;

977 
__u8
 
	m«me
[24];

978 
v4l2_‰a˘
 
	m‰amïîiod
;

979 
__u32
 
	m‰amñöes
;

980 
__u32
 
	mª£rved
[4];

1019 
	sv4l2_bt_timögs
 {

1020 
__u32
 
	mwidth
;

1021 
__u32
 
	mheight
;

1022 
__u32
 
	möãæa˚d
;

1023 
__u32
 
	mpﬁ¨ôõs
;

1024 
__u64
 
	mpixñ˛ock
;

1025 
__u32
 
	mh‰⁄ç‹ch
;

1026 
__u32
 
	mhsync
;

1027 
__u32
 
	mhbackp‹ch
;

1028 
__u32
 
	mv‰⁄ç‹ch
;

1029 
__u32
 
	mvsync
;

1030 
__u32
 
	mvbackp‹ch
;

1031 
__u32
 
	mû_v‰⁄ç‹ch
;

1032 
__u32
 
	mû_vsync
;

1033 
__u32
 
	mû_vbackp‹ch
;

1034 
__u32
 
	m°™d¨ds
;

1035 
__u32
 
	mÊags
;

1036 
__u32
 
	mª£rved
[14];

1037 } 
__©åibuã__
 ((
∑cked
));

1040 
	#V4L2_DV_PROGRESSIVE
 0

	)

1041 
	#V4L2_DV_INTERLACED
 1

	)

1044 
	#V4L2_DV_VSYNC_POS_POL
 0x00000001

	)

1045 
	#V4L2_DV_HSYNC_POS_POL
 0x00000002

	)

1048 
	#V4L2_DV_BT_STD_CEA861
 (1 << 0Ë

	)

1049 
	#V4L2_DV_BT_STD_DMT
 (1 << 1Ë

	)

1050 
	#V4L2_DV_BT_STD_CVT
 (1 << 2Ë

	)

1051 
	#V4L2_DV_BT_STD_GTF
 (1 << 3Ë

	)

1059 
	#V4L2_DV_FL_REDUCED_BLANKING
 (1 << 0)

	)

1063 
	#V4L2_DV_FL_CAN_REDUCE_FPS
 (1 << 1)

	)

1071 
	#V4L2_DV_FL_REDUCED_FPS
 (1 << 2)

	)

1076 
	#V4L2_DV_FL_HALF_LINE
 (1 << 3)

	)

1079 
	#V4L2_DV_BT_BLANKING_WIDTH
(
bt
) \

1080 ((
bt
)->
h‰⁄ç‹ch
 + (bt)->
hsync
 + (bt)->
hbackp‹ch
)

	)

1081 
	#V4L2_DV_BT_FRAME_WIDTH
(
bt
) \

1082 ((
bt
)->
width
 + 
	`V4L2_DV_BT_BLANKING_WIDTH
(bt))

	)

1083 
	#V4L2_DV_BT_BLANKING_HEIGHT
(
bt
) \

1084 ((
bt
)->
v‰⁄ç‹ch
 + (bt)->
vsync
 + (bt)->
vbackp‹ch
 + \

1085 (
bt
)->
û_v‰⁄ç‹ch
 + (bt)->
û_vsync
 + (bt)->
û_vbackp‹ch
)

	)

1086 
	#V4L2_DV_BT_FRAME_HEIGHT
(
bt
) \

1087 ((
bt
)->
height
 + 
	`V4L2_DV_BT_BLANKING_HEIGHT
(bt))

	)

1093 
	sv4l2_dv_timögs
 {

1094 
__u32
 
	mty≥
;

1096 
v4l2_bt_timögs
 
	mbt
;

1097 
__u32
 
	mª£rved
[32];

1099 } 
__©åibuã__
 ((
∑cked
));

1102 
	#V4L2_DV_BT_656_1120
 0

	)

1112 
	sv4l2_íum_dv_timögs
 {

1113 
__u32
 
	mödex
;

1114 
__u32
 
	m∑d
;

1115 
__u32
 
	mª£rved
[2];

1116 
v4l2_dv_timögs
 
	mtimögs
;

1130 
	sv4l2_bt_timögs_ˇp
 {

1131 
__u32
 
	mmö_width
;

1132 
__u32
 
	mmax_width
;

1133 
__u32
 
	mmö_height
;

1134 
__u32
 
	mmax_height
;

1135 
__u64
 
	mmö_pixñ˛ock
;

1136 
__u64
 
	mmax_pixñ˛ock
;

1137 
__u32
 
	m°™d¨ds
;

1138 
__u32
 
	mˇ∑bûôõs
;

1139 
__u32
 
	mª£rved
[16];

1140 } 
__©åibuã__
 ((
∑cked
));

1143 
	#V4L2_DV_BT_CAP_INTERLACED
 (1 << 0)

	)

1145 
	#V4L2_DV_BT_CAP_PROGRESSIVE
 (1 << 1)

	)

1147 
	#V4L2_DV_BT_CAP_REDUCED_BLANKING
 (1 << 2)

	)

1149 
	#V4L2_DV_BT_CAP_CUSTOM
 (1 << 3)

	)

1157 
	sv4l2_dv_timögs_ˇp
 {

1158 
__u32
 
	mty≥
;

1159 
__u32
 
	m∑d
;

1160 
__u32
 
	mª£rved
[2];

1162 
v4l2_bt_timögs_ˇp
 
	mbt
;

1163 
__u32
 
	møw_d©a
[32];

1171 
	sv4l2_öput
 {

1172 
__u32
 
	mödex
;

1173 
__u8
 
	m«me
[32];

1174 
__u32
 
	mty≥
;

1175 
__u32
 
	maudio£t
;

1176 
__u32
 
	mtu√r
;

1177 
v4l2_°d_id
 
	m°d
;

1178 
__u32
 
	m°©us
;

1179 
__u32
 
	mˇ∑bûôõs
;

1180 
__u32
 
	mª£rved
[3];

1184 
	#V4L2_INPUT_TYPE_TUNER
 1

	)

1185 
	#V4L2_INPUT_TYPE_CAMERA
 2

	)

1188 
	#V4L2_IN_ST_NO_POWER
 0x00000001

	)

1189 
	#V4L2_IN_ST_NO_SIGNAL
 0x00000002

	)

1190 
	#V4L2_IN_ST_NO_COLOR
 0x00000004

	)

1194 
	#V4L2_IN_ST_HFLIP
 0x00000010

	)

1195 
	#V4L2_IN_ST_VFLIP
 0x00000020

	)

1198 
	#V4L2_IN_ST_NO_H_LOCK
 0x00000100

	)

1199 
	#V4L2_IN_ST_COLOR_KILL
 0x00000200

	)

1202 
	#V4L2_IN_ST_NO_SYNC
 0x00010000

	)

1203 
	#V4L2_IN_ST_NO_EQU
 0x00020000

	)

1204 
	#V4L2_IN_ST_NO_CARRIER
 0x00040000

	)

1207 
	#V4L2_IN_ST_MACROVISION
 0x01000000

	)

1208 
	#V4L2_IN_ST_NO_ACCESS
 0x02000000

	)

1209 
	#V4L2_IN_ST_VTR
 0x04000000

	)

1212 
	#V4L2_IN_CAP_DV_TIMINGS
 0x00000002

	)

1213 
	#V4L2_IN_CAP_CUSTOM_TIMINGS
 
V4L2_IN_CAP_DV_TIMINGS


	)

1214 
	#V4L2_IN_CAP_STD
 0x00000004

	)

1219 
	sv4l2_ouçut
 {

1220 
__u32
 
	mödex
;

1221 
__u8
 
	m«me
[32];

1222 
__u32
 
	mty≥
;

1223 
__u32
 
	maudio£t
;

1224 
__u32
 
	mmoduœt‹
;

1225 
v4l2_°d_id
 
	m°d
;

1226 
__u32
 
	mˇ∑bûôõs
;

1227 
__u32
 
	mª£rved
[3];

1230 
	#V4L2_OUTPUT_TYPE_MODULATOR
 1

	)

1231 
	#V4L2_OUTPUT_TYPE_ANALOG
 2

	)

1232 
	#V4L2_OUTPUT_TYPE_ANALOGVGAOVERLAY
 3

	)

1235 
	#V4L2_OUT_CAP_DV_TIMINGS
 0x00000002

	)

1236 
	#V4L2_OUT_CAP_CUSTOM_TIMINGS
 
V4L2_OUT_CAP_DV_TIMINGS


	)

1237 
	#V4L2_OUT_CAP_STD
 0x00000004

	)

1242 
	sv4l2_c⁄åﬁ
 {

1243 
__u32
 
	mid
;

1244 
__s32
 
	mvÆue
;

1247 
	sv4l2_ext_c⁄åﬁ
 {

1248 
__u32
 
	mid
;

1249 
__u32
 
	msize
;

1250 
__u32
 
	mª£rved2
[1];

1252 
__s32
 
	mvÆue
;

1253 
__s64
 
	mvÆue64
;

1254 *
	m°rög
;

1256 } 
__©åibuã__
 ((
∑cked
));

1258 
	sv4l2_ext_c⁄åﬁs
 {

1259 
__u32
 
	m˘æ_˛ass
;

1260 
__u32
 
	mcou¡
;

1261 
__u32
 
	mîr‹_idx
;

1262 
__u32
 
	mª£rved
[2];

1263 
v4l2_ext_c⁄åﬁ
 *
	mc⁄åﬁs
;

1266 
	#V4L2_CTRL_ID_MASK
 (0x0fffffff)

	)

1267 
	#V4L2_CTRL_ID2CLASS
(
id
Ë((idË& 0x0fff0000UL)

	)

1268 
	#V4L2_CTRL_DRIVER_PRIV
(
id
Ë(((idË& 0xffffË>0x1000)

	)

1270 
	ev4l2_˘æ_ty≥
 {

1271 
	mV4L2_CTRL_TYPE_INTEGER
 = 1,

1272 
	mV4L2_CTRL_TYPE_BOOLEAN
 = 2,

1273 
	mV4L2_CTRL_TYPE_MENU
 = 3,

1274 
	mV4L2_CTRL_TYPE_BUTTON
 = 4,

1275 
	mV4L2_CTRL_TYPE_INTEGER64
 = 5,

1276 
	mV4L2_CTRL_TYPE_CTRL_CLASS
 = 6,

1277 
	mV4L2_CTRL_TYPE_STRING
 = 7,

1278 
	mV4L2_CTRL_TYPE_BITMASK
 = 8,

1279 
	mV4L2_CTRL_TYPE_INTEGER_MENU
 = 9,

1283 
	sv4l2_quîy˘æ
 {

1284 
__u32
 
	mid
;

1285 
__u32
 
	mty≥
;

1286 
__u8
 
	m«me
[32];

1287 
__s32
 
	mmöimum
;

1288 
__s32
 
	mmaximum
;

1289 
__s32
 
	m°ï
;

1290 
__s32
 
	mdeÁu…_vÆue
;

1291 
__u32
 
	mÊags
;

1292 
__u32
 
	mª£rved
[2];

1296 
	sv4l2_quîymíu
 {

1297 
__u32
 
	mid
;

1298 
__u32
 
	mödex
;

1300 
__u8
 
	m«me
[32];

1301 
__s64
 
	mvÆue
;

1303 
__u32
 
	mª£rved
;

1304 } 
__©åibuã__
 ((
∑cked
));

1307 
	#V4L2_CTRL_FLAG_DISABLED
 0x0001

	)

1308 
	#V4L2_CTRL_FLAG_GRABBED
 0x0002

	)

1309 
	#V4L2_CTRL_FLAG_READ_ONLY
 0x0004

	)

1310 
	#V4L2_CTRL_FLAG_UPDATE
 0x0008

	)

1311 
	#V4L2_CTRL_FLAG_INACTIVE
 0x0010

	)

1312 
	#V4L2_CTRL_FLAG_SLIDER
 0x0020

	)

1313 
	#V4L2_CTRL_FLAG_WRITE_ONLY
 0x0040

	)

1314 
	#V4L2_CTRL_FLAG_VOLATILE
 0x0080

	)

1317 
	#V4L2_CTRL_FLAG_NEXT_CTRL
 0x80000000

	)

1320 
	#V4L2_CID_MAX_CTRLS
 1024

	)

1322 
	#V4L2_CID_PRIVATE_BASE
 0x08000000

	)

1328 
	sv4l2_tu√r
 {

1329 
__u32
 
	mödex
;

1330 
__u8
 
	m«me
[32];

1331 
__u32
 
	mty≥
;

1332 
__u32
 
	mˇ∑bûôy
;

1333 
__u32
 
	møngñow
;

1334 
__u32
 
	møngehigh
;

1335 
__u32
 
	mrxsubch™s
;

1336 
__u32
 
	maudmode
;

1337 
__s32
 
	msig«l
;

1338 
__s32
 
	mafc
;

1339 
__u32
 
	mª£rved
[4];

1342 
	sv4l2_moduœt‹
 {

1343 
__u32
 
	mödex
;

1344 
__u8
 
	m«me
[32];

1345 
__u32
 
	mˇ∑bûôy
;

1346 
__u32
 
	møngñow
;

1347 
__u32
 
	møngehigh
;

1348 
__u32
 
	mtxsubch™s
;

1349 
__u32
 
	mª£rved
[4];

1353 
	#V4L2_TUNER_CAP_LOW
 0x0001

	)

1354 
	#V4L2_TUNER_CAP_NORM
 0x0002

	)

1355 
	#V4L2_TUNER_CAP_HWSEEK_BOUNDED
 0x0004

	)

1356 
	#V4L2_TUNER_CAP_HWSEEK_WRAP
 0x0008

	)

1357 
	#V4L2_TUNER_CAP_STEREO
 0x0010

	)

1358 
	#V4L2_TUNER_CAP_LANG2
 0x0020

	)

1359 
	#V4L2_TUNER_CAP_SAP
 0x0020

	)

1360 
	#V4L2_TUNER_CAP_LANG1
 0x0040

	)

1361 
	#V4L2_TUNER_CAP_RDS
 0x0080

	)

1362 
	#V4L2_TUNER_CAP_RDS_BLOCK_IO
 0x0100

	)

1363 
	#V4L2_TUNER_CAP_RDS_CONTROLS
 0x0200

	)

1364 
	#V4L2_TUNER_CAP_FREQ_BANDS
 0x0400

	)

1365 
	#V4L2_TUNER_CAP_HWSEEK_PROG_LIM
 0x0800

	)

1366 
	#V4L2_TUNER_CAP_1HZ
 0x1000

	)

1369 
	#V4L2_TUNER_SUB_MONO
 0x0001

	)

1370 
	#V4L2_TUNER_SUB_STEREO
 0x0002

	)

1371 
	#V4L2_TUNER_SUB_LANG2
 0x0004

	)

1372 
	#V4L2_TUNER_SUB_SAP
 0x0004

	)

1373 
	#V4L2_TUNER_SUB_LANG1
 0x0008

	)

1374 
	#V4L2_TUNER_SUB_RDS
 0x0010

	)

1377 
	#V4L2_TUNER_MODE_MONO
 0x0000

	)

1378 
	#V4L2_TUNER_MODE_STEREO
 0x0001

	)

1379 
	#V4L2_TUNER_MODE_LANG2
 0x0002

	)

1380 
	#V4L2_TUNER_MODE_SAP
 0x0002

	)

1381 
	#V4L2_TUNER_MODE_LANG1
 0x0003

	)

1382 
	#V4L2_TUNER_MODE_LANG1_LANG2
 0x0004

	)

1384 
	sv4l2_‰equícy
 {

1385 
__u32
 
	mtu√r
;

1386 
__u32
 
	mty≥
;

1387 
__u32
 
	m‰equícy
;

1388 
__u32
 
	mª£rved
[8];

1391 
	#V4L2_BAND_MODULATION_VSB
 (1 << 1)

	)

1392 
	#V4L2_BAND_MODULATION_FM
 (1 << 2)

	)

1393 
	#V4L2_BAND_MODULATION_AM
 (1 << 3)

	)

1395 
	sv4l2_‰equícy_b™d
 {

1396 
__u32
 
	mtu√r
;

1397 
__u32
 
	mty≥
;

1398 
__u32
 
	mödex
;

1399 
__u32
 
	mˇ∑bûôy
;

1400 
__u32
 
	møngñow
;

1401 
__u32
 
	møngehigh
;

1402 
__u32
 
	mmoduœti⁄
;

1403 
__u32
 
	mª£rved
[9];

1406 
	sv4l2_hw_‰eq_£ek
 {

1407 
__u32
 
	mtu√r
;

1408 
__u32
 
	mty≥
;

1409 
__u32
 
	m£ek_upw¨d
;

1410 
__u32
 
	mwøp_¨ound
;

1411 
__u32
 
	m•acög
;

1412 
__u32
 
	møngñow
;

1413 
__u32
 
	møngehigh
;

1414 
__u32
 
	mª£rved
[5];

1421 
	sv4l2_rds_d©a
 {

1422 
__u8
 
	mlsb
;

1423 
__u8
 
	mmsb
;

1424 
__u8
 
	mblock
;

1425 } 
__©åibuã__
 ((
∑cked
));

1427 
	#V4L2_RDS_BLOCK_MSK
 0x7

	)

1428 
	#V4L2_RDS_BLOCK_A
 0

	)

1429 
	#V4L2_RDS_BLOCK_B
 1

	)

1430 
	#V4L2_RDS_BLOCK_C
 2

	)

1431 
	#V4L2_RDS_BLOCK_D
 3

	)

1432 
	#V4L2_RDS_BLOCK_C_ALT
 4

	)

1433 
	#V4L2_RDS_BLOCK_INVALID
 7

	)

1435 
	#V4L2_RDS_BLOCK_CORRECTED
 0x40

	)

1436 
	#V4L2_RDS_BLOCK_ERROR
 0x80

	)

1441 
	sv4l2_audio
 {

1442 
__u32
 
	mödex
;

1443 
__u8
 
	m«me
[32];

1444 
__u32
 
	mˇ∑bûôy
;

1445 
__u32
 
	mmode
;

1446 
__u32
 
	mª£rved
[2];

1450 
	#V4L2_AUDCAP_STEREO
 0x00001

	)

1451 
	#V4L2_AUDCAP_AVL
 0x00002

	)

1454 
	#V4L2_AUDMODE_AVL
 0x00001

	)

1456 
	sv4l2_audioout
 {

1457 
__u32
 
	mödex
;

1458 
__u8
 
	m«me
[32];

1459 
__u32
 
	mˇ∑bûôy
;

1460 
__u32
 
	mmode
;

1461 
__u32
 
	mª£rved
[2];

1470 
	#V4L2_ENC_IDX_FRAME_I
 (0)

	)

1471 
	#V4L2_ENC_IDX_FRAME_P
 (1)

	)

1472 
	#V4L2_ENC_IDX_FRAME_B
 (2)

	)

1473 
	#V4L2_ENC_IDX_FRAME_MASK
 (0xf)

	)

1475 
	sv4l2_íc_idx_íåy
 {

1476 
__u64
 
	moff£t
;

1477 
__u64
 
	m±s
;

1478 
__u32
 
	mÀngth
;

1479 
__u32
 
	mÊags
;

1480 
__u32
 
	mª£rved
[2];

1483 
	#V4L2_ENC_IDX_ENTRIES
 (64)

	)

1484 
	sv4l2_íc_idx
 {

1485 
__u32
 
	míåõs
;

1486 
__u32
 
	míåõs_ˇp
;

1487 
__u32
 
	mª£rved
[4];

1488 
v4l2_íc_idx_íåy
 
	míåy
[
V4L2_ENC_IDX_ENTRIES
];

1492 
	#V4L2_ENC_CMD_START
 (0)

	)

1493 
	#V4L2_ENC_CMD_STOP
 (1)

	)

1494 
	#V4L2_ENC_CMD_PAUSE
 (2)

	)

1495 
	#V4L2_ENC_CMD_RESUME
 (3)

	)

1498 
	#V4L2_ENC_CMD_STOP_AT_GOP_END
 (1 << 0)

	)

1500 
	sv4l2_ícodî_cmd
 {

1501 
__u32
 
	mcmd
;

1502 
__u32
 
	mÊags
;

1505 
__u32
 
	md©a
[8];

1506 } 
	møw
;

1511 
	#V4L2_DEC_CMD_START
 (0)

	)

1512 
	#V4L2_DEC_CMD_STOP
 (1)

	)

1513 
	#V4L2_DEC_CMD_PAUSE
 (2)

	)

1514 
	#V4L2_DEC_CMD_RESUME
 (3)

	)

1517 
	#V4L2_DEC_CMD_START_MUTE_AUDIO
 (1 << 0)

	)

1520 
	#V4L2_DEC_CMD_PAUSE_TO_BLACK
 (1 << 0)

	)

1523 
	#V4L2_DEC_CMD_STOP_TO_BLACK
 (1 << 0)

	)

1524 
	#V4L2_DEC_CMD_STOP_IMMEDIATELY
 (1 << 1)

	)

1529 
	#V4L2_DEC_START_FMT_NONE
 (0)

	)

1531 
	#V4L2_DEC_START_FMT_GOP
 (1)

	)

1535 
	sv4l2_decodî_cmd
 {

1536 
__u32
 
	mcmd
;

1537 
__u32
 
	mÊags
;

1540 
__u64
 
	m±s
;

1541 } 
	m°›
;

1549 
__s32
 
	m•ìd
;

1550 
__u32
 
	mf‹m©
;

1551 } 
	m°¨t
;

1554 
__u32
 
	md©a
[16];

1555 } 
	møw
;

1568 
	sv4l2_vbi_f‹m©
 {

1569 
__u32
 
	mßm∂ög_øã
;

1570 
__u32
 
	moff£t
;

1571 
__u32
 
	mßm∂es_≥r_löe
;

1572 
__u32
 
	mßm∂e_f‹m©
;

1573 
__s32
 
	m°¨t
[2];

1574 
__u32
 
	mcou¡
[2];

1575 
__u32
 
	mÊags
;

1576 
__u32
 
	mª£rved
[2];

1580 
	#V4L2_VBI_UNSYNC
 (1 << 0)

	)

1581 
	#V4L2_VBI_INTERLACED
 (1 << 1)

	)

1590 
	sv4l2_¶i˚d_vbi_f‹m©
 {

1591 
__u16
 
	m£rvi˚_£t
;

1596 
__u16
 
	m£rvi˚_löes
[2][24];

1597 
__u32
 
	mio_size
;

1598 
__u32
 
	mª£rved
[2];

1603 
	#V4L2_SLICED_TELETEXT_B
 (0x0001)

	)

1605 
	#V4L2_SLICED_VPS
 (0x0400)

	)

1607 
	#V4L2_SLICED_CAPTION_525
 (0x1000)

	)

1609 
	#V4L2_SLICED_WSS_625
 (0x4000)

	)

1611 
	#V4L2_SLICED_VBI_525
 (
V4L2_SLICED_CAPTION_525
)

	)

1612 
	#V4L2_SLICED_VBI_625
 (
V4L2_SLICED_TELETEXT_B
 | 
V4L2_SLICED_VPS
 | 
V4L2_SLICED_WSS_625
)

	)

1614 
	sv4l2_¶i˚d_vbi_ˇp
 {

1615 
__u16
 
	m£rvi˚_£t
;

1620 
__u16
 
	m£rvi˚_löes
[2][24];

1621 
__u32
 
	mty≥
;

1622 
__u32
 
	mª£rved
[3];

1625 
	sv4l2_¶i˚d_vbi_d©a
 {

1626 
__u32
 
	mid
;

1627 
__u32
 
	mfõld
;

1628 
__u32
 
	mlöe
;

1629 
__u32
 
	mª£rved
;

1630 
__u8
 
	md©a
[48];

1650 
	#V4L2_MPEG_VBI_IVTV_TELETEXT_B
 (1)

	)

1651 
	#V4L2_MPEG_VBI_IVTV_CAPTION_525
 (4)

	)

1652 
	#V4L2_MPEG_VBI_IVTV_WSS_625
 (5)

	)

1653 
	#V4L2_MPEG_VBI_IVTV_VPS
 (7)

	)

1655 
	sv4l2_m≥g_vbi_ôv0_löe
 {

1656 
__u8
 
	mid
;

1657 
__u8
 
	md©a
[42];

1658 } 
__©åibuã__
 ((
∑cked
));

1660 
	sv4l2_m≥g_vbi_ôv0
 {

1661 
__À32
 
	mlöemask
[2];

1662 
v4l2_m≥g_vbi_ôv0_löe
 
	mlöe
[35];

1663 } 
__©åibuã__
 ((
∑cked
));

1665 
	sv4l2_m≥g_vbi_ITV0
 {

1666 
v4l2_m≥g_vbi_ôv0_löe
 
	mlöe
[36];

1667 } 
__©åibuã__
 ((
∑cked
));

1669 
	#V4L2_MPEG_VBI_IVTV_MAGIC0
 "ôv0"

	)

1670 
	#V4L2_MPEG_VBI_IVTV_MAGIC1
 "ITV0"

	)

1672 
	sv4l2_m≥g_vbi_fmt_ivtv
 {

1673 
__u8
 
	mmagic
[4];

1675 
v4l2_m≥g_vbi_ôv0
 
	môv0
;

1676 
v4l2_m≥g_vbi_ITV0
 
	mITV0
;

1678 } 
__©åibuã__
 ((
∑cked
));

1691 
	sv4l2_∂™e_pix_f‹m©
 {

1692 
__u32
 
	msizeimage
;

1693 
__u16
 
	mbyã•îlöe
;

1694 
__u16
 
	mª£rved
[7];

1695 } 
__©åibuã__
 ((
∑cked
));

1707 
	sv4l2_pix_f‹m©_m∂™e
 {

1708 
__u32
 
	mwidth
;

1709 
__u32
 
	mheight
;

1710 
__u32
 
	mpixñf‹m©
;

1711 
__u32
 
	mfõld
;

1712 
__u32
 
	mcﬁ‹•a˚
;

1714 
v4l2_∂™e_pix_f‹m©
 
	m∂™e_fmt
[
VIDEO_MAX_PLANES
];

1715 
__u8
 
	mnum_∂™es
;

1716 
__u8
 
	mª£rved
[11];

1717 } 
__©åibuã__
 ((
∑cked
));

1723 
	sv4l2_sdr_f‹m©
 {

1724 
__u32
 
	mpixñf‹m©
;

1725 
__u8
 
	mª£rved
[28];

1726 } 
__©åibuã__
 ((
∑cked
));

1738 
	sv4l2_f‹m©
 {

1739 
__u32
 
	mty≥
;

1741 
v4l2_pix_f‹m©
 
	mpix
;

1742 
v4l2_pix_f‹m©_m∂™e
 
	mpix_mp
;

1743 
v4l2_wödow
 
	mwö
;

1744 
v4l2_vbi_f‹m©
 
	mvbi
;

1745 
v4l2_¶i˚d_vbi_f‹m©
 
	m¶i˚d
;

1746 
v4l2_sdr_f‹m©
 
	msdr
;

1747 
__u8
 
	møw_d©a
[200];

1748 } 
	mfmt
;

1753 
	sv4l2_°ªam∑rm
 {

1754 
__u32
 
	mty≥
;

1756 
v4l2_ˇ±uª∑rm
 
	mˇ±uª
;

1757 
v4l2_ouçuç¨m
 
	mouçut
;

1758 
__u8
 
	møw_d©a
[200];

1759 } 
	m∑rm
;

1766 
	#V4L2_EVENT_ALL
 0

	)

1767 
	#V4L2_EVENT_VSYNC
 1

	)

1768 
	#V4L2_EVENT_EOS
 2

	)

1769 
	#V4L2_EVENT_CTRL
 3

	)

1770 
	#V4L2_EVENT_FRAME_SYNC
 4

	)

1771 
	#V4L2_EVENT_SOURCE_CHANGE
 5

	)

1772 
	#V4L2_EVENT_PRIVATE_START
 0x08000000

	)

1775 
	sv4l2_evít_vsync
 {

1777 
__u8
 
	mfõld
;

1778 } 
__©åibuã__
 ((
∑cked
));

1781 
	#V4L2_EVENT_CTRL_CH_VALUE
 (1 << 0)

	)

1782 
	#V4L2_EVENT_CTRL_CH_FLAGS
 (1 << 1)

	)

1783 
	#V4L2_EVENT_CTRL_CH_RANGE
 (1 << 2)

	)

1785 
	sv4l2_evít_˘æ
 {

1786 
__u32
 
	mch™ges
;

1787 
__u32
 
	mty≥
;

1789 
__s32
 
	mvÆue
;

1790 
__s64
 
	mvÆue64
;

1792 
__u32
 
	mÊags
;

1793 
__s32
 
	mmöimum
;

1794 
__s32
 
	mmaximum
;

1795 
__s32
 
	m°ï
;

1796 
__s32
 
	mdeÁu…_vÆue
;

1799 
	sv4l2_evít_‰ame_sync
 {

1800 
__u32
 
	m‰ame_£quí˚
;

1803 
	#V4L2_EVENT_SRC_CH_RESOLUTION
 (1 << 0)

	)

1805 
	sv4l2_evít_§c_ch™ge
 {

1806 
__u32
 
	mch™ges
;

1809 
	sv4l2_evít
 {

1810 
__u32
 
	mty≥
;

1812 
v4l2_evít_vsync
 
	mvsync
;

1813 
v4l2_evít_˘æ
 
	m˘æ
;

1814 
v4l2_evít_‰ame_sync
 
	m‰ame_sync
;

1815 
v4l2_evít_§c_ch™ge
 
	m§c_ch™ge
;

1816 
__u8
 
	md©a
[64];

1817 } 
	mu
;

1818 
__u32
 
	m≥ndög
;

1819 
__u32
 
	m£quí˚
;

1820 
time•ec
 
	mtime°amp
;

1821 
__u32
 
	mid
;

1822 
__u32
 
	mª£rved
[8];

1825 
	#V4L2_EVENT_SUB_FL_SEND_INITIAL
 (1 << 0)

	)

1826 
	#V4L2_EVENT_SUB_FL_ALLOW_FEEDBACK
 (1 << 1)

	)

1828 
	sv4l2_evít_subs¸ùti⁄
 {

1829 
__u32
 
	mty≥
;

1830 
__u32
 
	mid
;

1831 
__u32
 
	mÊags
;

1832 
__u32
 
	mª£rved
[5];

1844 
	#V4L2_CHIP_MATCH_BRIDGE
 0

	)

1845 
	#V4L2_CHIP_MATCH_SUBDEV
 4

	)

1848 
	#V4L2_CHIP_MATCH_HOST
 
V4L2_CHIP_MATCH_BRIDGE


	)

1849 
	#V4L2_CHIP_MATCH_I2C_DRIVER
 1

	)

1850 
	#V4L2_CHIP_MATCH_I2C_ADDR
 2

	)

1851 
	#V4L2_CHIP_MATCH_AC97
 3

	)

1853 
	sv4l2_dbg_m©ch
 {

1854 
__u32
 
	mty≥
;

1856 
__u32
 
	maddr
;

1857 
	m«me
[32];

1859 } 
__©åibuã__
 ((
∑cked
));

1861 
	sv4l2_dbg_ªgi°î
 {

1862 
v4l2_dbg_m©ch
 
	mm©ch
;

1863 
__u32
 
	msize
;

1864 
__u64
 
	mªg
;

1865 
__u64
 
	mvÆ
;

1866 } 
__©åibuã__
 ((
∑cked
));

1868 
	#V4L2_CHIP_FL_READABLE
 (1 << 0)

	)

1869 
	#V4L2_CHIP_FL_WRITABLE
 (1 << 1)

	)

1872 
	sv4l2_dbg_chù_öfo
 {

1873 
v4l2_dbg_m©ch
 
	mm©ch
;

1874 
	m«me
[32];

1875 
__u32
 
	mÊags
;

1876 
__u32
 
	mª£rved
[32];

1877 } 
__©åibuã__
 ((
∑cked
));

1888 
	sv4l2_¸óã_buf„rs
 {

1889 
__u32
 
	mödex
;

1890 
__u32
 
	mcou¡
;

1891 
__u32
 
	mmem‹y
;

1892 
v4l2_f‹m©
 
	mf‹m©
;

1893 
__u32
 
	mª£rved
[8];

1900 
	#VIDIOC_QUERYCAP
 
	`_IOR
('V', 0, 
v4l2_ˇ∑bûôy
)

	)

1901 
	#VIDIOC_RESERVED
 
	`_IO
('V', 1)

	)

1902 
	#VIDIOC_ENUM_FMT
 
	`_IOWR
('V', 2, 
v4l2_fmtdesc
)

	)

1903 
	#VIDIOC_G_FMT
 
	`_IOWR
('V', 4, 
v4l2_f‹m©
)

	)

1904 
	#VIDIOC_S_FMT
 
	`_IOWR
('V', 5, 
v4l2_f‹m©
)

	)

1905 
	#VIDIOC_REQBUFS
 
	`_IOWR
('V', 8, 
v4l2_ªque°buf„rs
)

	)

1906 
	#VIDIOC_QUERYBUF
 
	`_IOWR
('V', 9, 
v4l2_buf„r
)

	)

1907 
	#VIDIOC_G_FBUF
 
	`_IOR
('V', 10, 
v4l2_‰amebuf„r
)

	)

1908 
	#VIDIOC_S_FBUF
 
	`_IOW
('V', 11, 
v4l2_‰amebuf„r
)

	)

1909 
	#VIDIOC_OVERLAY
 
	`_IOW
('V', 14, )

	)

1910 
	#VIDIOC_QBUF
 
	`_IOWR
('V', 15, 
v4l2_buf„r
)

	)

1911 
	#VIDIOC_EXPBUF
 
	`_IOWR
('V', 16, 
v4l2_exp‹tbuf„r
)

	)

1912 
	#VIDIOC_DQBUF
 
	`_IOWR
('V', 17, 
v4l2_buf„r
)

	)

1913 
	#VIDIOC_STREAMON
 
	`_IOW
('V', 18, )

	)

1914 
	#VIDIOC_STREAMOFF
 
	`_IOW
('V', 19, )

	)

1915 
	#VIDIOC_G_PARM
 
	`_IOWR
('V', 21, 
v4l2_°ªam∑rm
)

	)

1916 
	#VIDIOC_S_PARM
 
	`_IOWR
('V', 22, 
v4l2_°ªam∑rm
)

	)

1917 
	#VIDIOC_G_STD
 
	`_IOR
('V', 23, 
v4l2_°d_id
)

	)

1918 
	#VIDIOC_S_STD
 
	`_IOW
('V', 24, 
v4l2_°d_id
)

	)

1919 
	#VIDIOC_ENUMSTD
 
	`_IOWR
('V', 25, 
v4l2_°™d¨d
)

	)

1920 
	#VIDIOC_ENUMINPUT
 
	`_IOWR
('V', 26, 
v4l2_öput
)

	)

1921 
	#VIDIOC_G_CTRL
 
	`_IOWR
('V', 27, 
v4l2_c⁄åﬁ
)

	)

1922 
	#VIDIOC_S_CTRL
 
	`_IOWR
('V', 28, 
v4l2_c⁄åﬁ
)

	)

1923 
	#VIDIOC_G_TUNER
 
	`_IOWR
('V', 29, 
v4l2_tu√r
)

	)

1924 
	#VIDIOC_S_TUNER
 
	`_IOW
('V', 30, 
v4l2_tu√r
)

	)

1925 
	#VIDIOC_G_AUDIO
 
	`_IOR
('V', 33, 
v4l2_audio
)

	)

1926 
	#VIDIOC_S_AUDIO
 
	`_IOW
('V', 34, 
v4l2_audio
)

	)

1927 
	#VIDIOC_QUERYCTRL
 
	`_IOWR
('V', 36, 
v4l2_quîy˘æ
)

	)

1928 
	#VIDIOC_QUERYMENU
 
	`_IOWR
('V', 37, 
v4l2_quîymíu
)

	)

1929 
	#VIDIOC_G_INPUT
 
	`_IOR
('V', 38, )

	)

1930 
	#VIDIOC_S_INPUT
 
	`_IOWR
('V', 39, )

	)

1931 
	#VIDIOC_G_EDID
 
	`_IOWR
('V', 40, 
v4l2_edid
)

	)

1932 
	#VIDIOC_S_EDID
 
	`_IOWR
('V', 41, 
v4l2_edid
)

	)

1933 
	#VIDIOC_G_OUTPUT
 
	`_IOR
('V', 46, )

	)

1934 
	#VIDIOC_S_OUTPUT
 
	`_IOWR
('V', 47, )

	)

1935 
	#VIDIOC_ENUMOUTPUT
 
	`_IOWR
('V', 48, 
v4l2_ouçut
)

	)

1936 
	#VIDIOC_G_AUDOUT
 
	`_IOR
('V', 49, 
v4l2_audioout
)

	)

1937 
	#VIDIOC_S_AUDOUT
 
	`_IOW
('V', 50, 
v4l2_audioout
)

	)

1938 
	#VIDIOC_G_MODULATOR
 
	`_IOWR
('V', 54, 
v4l2_moduœt‹
)

	)

1939 
	#VIDIOC_S_MODULATOR
 
	`_IOW
('V', 55, 
v4l2_moduœt‹
)

	)

1940 
	#VIDIOC_G_FREQUENCY
 
	`_IOWR
('V', 56, 
v4l2_‰equícy
)

	)

1941 
	#VIDIOC_S_FREQUENCY
 
	`_IOW
('V', 57, 
v4l2_‰equícy
)

	)

1942 
	#VIDIOC_CROPCAP
 
	`_IOWR
('V', 58, 
v4l2_¸›ˇp
)

	)

1943 
	#VIDIOC_G_CROP
 
	`_IOWR
('V', 59, 
v4l2_¸›
)

	)

1944 
	#VIDIOC_S_CROP
 
	`_IOW
('V', 60, 
v4l2_¸›
)

	)

1945 
	#VIDIOC_G_JPEGCOMP
 
	`_IOR
('V', 61, 
v4l2_j≥gcom¥essi⁄
)

	)

1946 
	#VIDIOC_S_JPEGCOMP
 
	`_IOW
('V', 62, 
v4l2_j≥gcom¥essi⁄
)

	)

1947 
	#VIDIOC_QUERYSTD
 
	`_IOR
('V', 63, 
v4l2_°d_id
)

	)

1948 
	#VIDIOC_TRY_FMT
 
	`_IOWR
('V', 64, 
v4l2_f‹m©
)

	)

1949 
	#VIDIOC_ENUMAUDIO
 
	`_IOWR
('V', 65, 
v4l2_audio
)

	)

1950 
	#VIDIOC_ENUMAUDOUT
 
	`_IOWR
('V', 66, 
v4l2_audioout
)

	)

1951 
	#VIDIOC_G_PRIORITY
 
	`_IOR
('V', 67, 
__u32
Ë

	)

1952 
	#VIDIOC_S_PRIORITY
 
	`_IOW
('V', 68, 
__u32
Ë

	)

1953 
	#VIDIOC_G_SLICED_VBI_CAP
 
	`_IOWR
('V', 69, 
v4l2_¶i˚d_vbi_ˇp
)

	)

1954 
	#VIDIOC_LOG_STATUS
 
	`_IO
('V', 70)

	)

1955 
	#VIDIOC_G_EXT_CTRLS
 
	`_IOWR
('V', 71, 
v4l2_ext_c⁄åﬁs
)

	)

1956 
	#VIDIOC_S_EXT_CTRLS
 
	`_IOWR
('V', 72, 
v4l2_ext_c⁄åﬁs
)

	)

1957 
	#VIDIOC_TRY_EXT_CTRLS
 
	`_IOWR
('V', 73, 
v4l2_ext_c⁄åﬁs
)

	)

1958 
	#VIDIOC_ENUM_FRAMESIZES
 
	`_IOWR
('V', 74, 
v4l2_‰msizìnum
)

	)

1959 
	#VIDIOC_ENUM_FRAMEINTERVALS
 
	`_IOWR
('V', 75, 
v4l2_‰mivÆíum
)

	)

1960 
	#VIDIOC_G_ENC_INDEX
 
	`_IOR
('V', 76, 
v4l2_íc_idx
)

	)

1961 
	#VIDIOC_ENCODER_CMD
 
	`_IOWR
('V', 77, 
v4l2_ícodî_cmd
)

	)

1962 
	#VIDIOC_TRY_ENCODER_CMD
 
	`_IOWR
('V', 78, 
v4l2_ícodî_cmd
)

	)

1967 
	#VIDIOC_DBG_S_REGISTER
 
	`_IOW
('V', 79, 
v4l2_dbg_ªgi°î
)

	)

1968 
	#VIDIOC_DBG_G_REGISTER
 
	`_IOWR
('V', 80, 
v4l2_dbg_ªgi°î
)

	)

1970 
	#VIDIOC_S_HW_FREQ_SEEK
 
	`_IOW
('V', 82, 
v4l2_hw_‰eq_£ek
)

	)

1972 
	#VIDIOC_S_DV_TIMINGS
 
	`_IOWR
('V', 87, 
v4l2_dv_timögs
)

	)

1973 
	#VIDIOC_G_DV_TIMINGS
 
	`_IOWR
('V', 88, 
v4l2_dv_timögs
)

	)

1974 
	#VIDIOC_DQEVENT
 
	`_IOR
('V', 89, 
v4l2_evít
)

	)

1975 
	#VIDIOC_SUBSCRIBE_EVENT
 
	`_IOW
('V', 90, 
v4l2_evít_subs¸ùti⁄
)

	)

1976 
	#VIDIOC_UNSUBSCRIBE_EVENT
 
	`_IOW
('V', 91, 
v4l2_evít_subs¸ùti⁄
)

	)

1980 
	#VIDIOC_CREATE_BUFS
 
	`_IOWR
('V', 92, 
v4l2_¸óã_buf„rs
)

	)

1981 
	#VIDIOC_PREPARE_BUF
 
	`_IOWR
('V', 93, 
v4l2_buf„r
)

	)

1984 
	#VIDIOC_G_SELECTION
 
	`_IOWR
('V', 94, 
v4l2_£À˘i⁄
)

	)

1985 
	#VIDIOC_S_SELECTION
 
	`_IOWR
('V', 95, 
v4l2_£À˘i⁄
)

	)

1989 
	#VIDIOC_DECODER_CMD
 
	`_IOWR
('V', 96, 
v4l2_decodî_cmd
)

	)

1990 
	#VIDIOC_TRY_DECODER_CMD
 
	`_IOWR
('V', 97, 
v4l2_decodî_cmd
)

	)

1994 
	#VIDIOC_ENUM_DV_TIMINGS
 
	`_IOWR
('V', 98, 
v4l2_íum_dv_timögs
)

	)

1995 
	#VIDIOC_QUERY_DV_TIMINGS
 
	`_IOR
('V', 99, 
v4l2_dv_timögs
)

	)

1996 
	#VIDIOC_DV_TIMINGS_CAP
 
	`_IOWR
('V', 100, 
v4l2_dv_timögs_ˇp
)

	)

2000 
	#VIDIOC_ENUM_FREQ_BANDS
 
	`_IOWR
('V', 101, 
v4l2_‰equícy_b™d
)

	)

2004 
	#VIDIOC_DBG_G_CHIP_INFO
 
	`_IOWR
('V', 102, 
v4l2_dbg_chù_öfo
)

	)

2009 
	#BASE_VIDIOC_PRIVATE
 192

	)

	@/usr/include/pngconf.h

20 #i‚de‡
PNGCONF_H


21 
	#PNGCONF_H


	)

23 
	#PNG_1_2_X


	)

29 #ifde‡
PNG_USER_CONFIG


30 #i‚de‡
PNG_USER_PRIVATEBUILD


31 
	#PNG_USER_PRIVATEBUILD


	)

33 
	~"≤gu§.h
"

37 #ifde‡
PNG_CONFIGURE_LIBPNG


38 #ifde‡
HAVE_CONFIG_H


39 
	~"c⁄fig.h
"

64 #ifde‡
__STDC__


65 #ifde‡
SPECIALBUILD


66 #¥agm®
mesßge
("PNG_LIBPNG_SPECIALBUILD (and deprecated SPECIALBUILD)\
Çow LIBPNGÑeserved macros. Use PNG_USER_PRIVATEBUILD instead.")

70 #ifde‡
PRIVATEBUILD


71 #¥agm®
mesßge
("PRIVATEBUILD is deprecated.\
 PNG_USER_PRIVATEBUILD instead.")

73 
	#PNG_USER_PRIVATEBUILD
 
PRIVATEBUILD


	)

77 #i‚de‡
PNG_VERSION_INFO_ONLY


83 #i‡!
deföed
(
PNG_NO_WARN_UNINITIALIZED_ROW
) && \

84 !
	$deföed
(
PNG_WARN_UNINITIALIZED_ROW
)

85 
	#PNG_WARN_UNINITIALIZED_ROW
 1

	)

102 #i‚de‡
PNG_ZBUF_SIZE


103 
	#PNG_ZBUF_SIZE
 8192

	)

108 #i‚de‡
PNG_NO_READ_SUPPORTED


109 
	#PNG_READ_SUPPORTED


	)

114 #i‚de‡
PNG_NO_WRITE_SUPPORTED


115 
	#PNG_WRITE_SUPPORTED


	)

119 #ifde‡
PNG_ALLOW_BENIGN_ERRORS


120 
	#≤g_bíign_îr‹
 
≤g_w¨nög


	)

121 
	#≤g_chunk_bíign_îr‹
 
≤g_chunk_w¨nög


	)

123 #i‚de‡
PNG_BENIGN_ERRORS_SUPPORTED


124 
	#≤g_bíign_îr‹
 
≤g_îr‹


	)

125 
	#≤g_chunk_bíign_îr‹
 
≤g_chunk_îr‹


	)

130 #i‡!
	`deföed
(
PNG_NO_WARNINGS
Ë&& !deföed(
PNG_WARNINGS_SUPPORTED
)

131 
	#PNG_WARNINGS_SUPPORTED


	)

134 #i‡!
	`deföed
(
PNG_NO_ERROR_TEXT
Ë&& !deföed(
PNG_ERROR_TEXT_SUPPORTED
)

135 
	#PNG_ERROR_TEXT_SUPPORTED


	)

138 #i‡!
	`deföed
(
PNG_NO_CHECK_cHRM
Ë&& !deföed(
PNG_CHECK_cHRM_SUPPORTED
)

139 
	#PNG_CHECK_cHRM_SUPPORTED


	)

145 #i‡!
	`deföed
(
PNG_1_0_X
Ë&& !deföed(
PNG_NO_MNG_FEATURES
)

146 #i‚de‡
PNG_MNG_FEATURES_SUPPORTED


147 
	#PNG_MNG_FEATURES_SUPPORTED


	)

151 #i‚de‡
PNG_NO_FLOATING_POINT_SUPPORTED


152 #i‚de‡
PNG_FLOATING_POINT_SUPPORTED


153 
	#PNG_FLOATING_POINT_SUPPORTED


	)

165 #i‡
	`deföed
(
MAXSEG_64K
Ë&& !deföed(
PNG_MAX_MALLOC_64K
)

166 
	#PNG_MAX_MALLOC_64K


	)

202 #ifde‡
__CYGWIN__


203 #ifde‡
ALL_STATIC


204 #ifde‡
PNG_BUILD_DLL


205 #unde‡
PNG_BUILD_DLL


207 #ifde‡
PNG_USE_DLL


208 #unde‡
PNG_USE_DLL


210 #ifde‡
PNG_DLL


211 #unde‡
PNG_DLL


213 #i‚de‡
PNG_STATIC


214 
	#PNG_STATIC


	)

217 #ifde‡
PNG_BUILD_DLL


218 #ifde‡
PNG_STATIC


219 #unde‡
PNG_STATIC


221 #ifde‡
PNG_USE_DLL


222 #unde‡
PNG_USE_DLL


224 #i‚de‡
PNG_DLL


225 
	#PNG_DLL


	)

228 #ifde‡
PNG_STATIC


229 #ifde‡
PNG_USE_DLL


230 #unde‡
PNG_USE_DLL


232 #ifde‡
PNG_DLL


233 #unde‡
PNG_DLL


236 #i‚de‡
PNG_USE_DLL


237 
	#PNG_USE_DLL


	)

239 #i‚de‡
PNG_DLL


240 
	#PNG_DLL


	)

260 #i‡!
	`deföed
(
PNG_NO_STDIO
Ë&& !deföed(
PNG_STDIO_SUPPORTED
)

261 
	#PNG_STDIO_SUPPORTED


	)

264 #ifde‡
_WIN32_WCE


265 
	~<wödows.h
>

267 
	#PNG_NO_CONSOLE_IO


	)

269 
	#PNG_ABORT
(Ë
	`exô
(-1)

	)

270 #ifde‡
PNG_DEBUG


271 #unde‡
PNG_DEBUG


275 #ifde‡
PNG_BUILD_DLL


276 #i‚de‡
PNG_CONSOLE_IO_SUPPORTED


277 #i‚de‡
PNG_NO_CONSOLE_IO


278 
	#PNG_NO_CONSOLE_IO


	)

283 #ifde‡
PNG_NO_STDIO


284 #i‚de‡
PNG_NO_CONSOLE_IO


285 
	#PNG_NO_CONSOLE_IO


	)

287 #ifde‡
PNG_DEBUG


288 #i‡(
PNG_DEBUG
 > 0)

289 
	~<°dio.h
>

293 #i‚de‡
_WIN32_WCE


295 
	~<°dio.h
>

299 #i‡!(
deföed
 
PNG_NO_CONSOLE_IO
Ë&& !
	`deföed
(
PNG_CONSOLE_IO_SUPPORTED
)

300 
	#PNG_CONSOLE_IO_SUPPORTED


	)

310 #i‚de‡
PNGARG


312 #ifde‡
OF


313 
	#PNGARG
(
¨gli°
Ë
	`OF
◊rgli°)

	)

316 #ifde‡
_NO_PROTO


317 
	#PNGARG
(
¨gli°
Ë()

	)

318 #i‚de‡
PNG_TYPECAST_NULL


319 
	#PNG_TYPECAST_NULL


	)

322 
	#PNGARG
(
¨gli°
Ë
	)
arglist

334 #i‚de‡
MACOS


335 #i‡(
	`deföed
(
__MWERKS__
Ë&& deföed(
macötosh
)Ë|| deföed(
≠∂ec
) || \

336 
	`deföed
(
THINK_C
Ë|| deföed(
__SC__
Ë|| 
	$deföed
(
TARGET_OS_MAC
)

337 
	#MACOS


	)

342 #i‡!
	`deföed
(
MACOS
Ë&& !deföed(
RISCOS
Ë&& !deföed(
_WIN32_WCE
)

343 
	~<sys/ty≥s.h
>

346 #i‡!
	`deföed
(
PNG_SETJMP_NOT_SUPPORTED
Ë&& !deföed(
PNG_NO_SETJMP_SUPPORTED
)

347 
	#PNG_SETJMP_SUPPORTED


	)

350 #ifde‡
PNG_SETJMP_SUPPORTED


361 #i‚de‡
PNG_SKIP_SETJMP_CHECK


362 #ifde‡
__löux__


363 #ifde‡
_BSD_SOURCE


364 
	#PNG_SAVE_BSD_SOURCE


	)

365 #unde‡
_BSD_SOURCE


367 #ifde‡
_SETJMP_H


371 
__≤gc⁄f
.
h__
 
ö
 
lib≤g
 
Æªady
 
ö˛udes
 
£tjmp
.
h
;

372 
__d⁄t__
 
ö˛ude
 
ô
 
agaö
.;

378 
	~<£tjmp.h
>

380 #ifde‡
__löux__


381 #ifde‡
PNG_SAVE_BSD_SOURCE


382 #i‚de‡
_BSD_SOURCE


383 
	#_BSD_SOURCE


	)

385 #unde‡
PNG_SAVE_BSD_SOURCE


390 #ifde‡
BSD


391 
	~<°rögs.h
>

393 
	~<°rög.h
>

397 #ifde‡
PNG_INTERNAL


399 
	~<°dlib.h
>

408 
	#PNG_EXTERN


	)

414 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


415 #ifde‡
MACOS


420 #i‡!
	`deföed
(
__MATH_H__
Ë&& !deföed(
__MATH_H
Ë&& !deföed(
__cm©h__
)

421 
	~<Â.h
>

424 
	~<m©h.h
>

426 #i‡
	`deföed
(
_AMIGA
Ë&& deföed(
__SASC
Ë&& deföed(
_M68881
)

430 
	~<m68881.h
>

435 #i‡(
	`deföed
(
__MWERKS__
Ë&& deföed(
WIN32
)Ë|| deföed(
__STDC__
)

436 
	#PNG_ALWAYS_EXTERN


	)

440 #i‡
	`deföed
(
__TURBOC__
Ë&& deföed(
__MSDOS__
)

441 
	~<mem.h
>

442 
	~<Æloc.h
>

446 #i‡
	`deföed
(
_MSC_VER
Ë&& (deföed(
WIN32
Ë|| deföed(
_Wödows
) || \

447 
	`deföed
(
_WINDOWS
Ë|| deföed(
_WIN32
Ë|| 
	$deföed
(
__WIN32__
))

448 
	~<mÆloc.h
>

455 #i‚de‡
PNG_DITHER_RED_BITS


456 
	#PNG_DITHER_RED_BITS
 5

	)

458 #i‚de‡
PNG_DITHER_GREEN_BITS


459 
	#PNG_DITHER_GREEN_BITS
 5

	)

461 #i‚de‡
PNG_DITHER_BLUE_BITS


462 
	#PNG_DITHER_BLUE_BITS
 5

	)

472 #i‚de‡
PNG_MAX_GAMMA_8


473 
	#PNG_MAX_GAMMA_8
 11

	)

479 #i‚de‡
PNG_GAMMA_THRESHOLD


480 
	#PNG_GAMMA_THRESHOLD
 0.05

	)

490 #i‚de‡
PNG_NO_CONST


491 
	#PNG_CONST
 c⁄°

	)

493 
	#PNG_CONST


	)

529 #i‡
	`deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

530 #i‚de‡
PNG_NO_iTXt_SUPPORTED


531 
	#PNG_NO_iTXt_SUPPORTED


	)

533 #i‚de‡
PNG_NO_READ_iTXt


534 
	#PNG_NO_READ_iTXt


	)

536 #i‚de‡
PNG_NO_WRITE_iTXt


537 
	#PNG_NO_WRITE_iTXt


	)

541 #i‡!
	`deföed
(
PNG_NO_iTXt_SUPPORTED
)

542 #i‡!
	`deföed
(
PNG_READ_iTXt_SUPPORTED
Ë&& !deföed(
PNG_NO_READ_iTXt
)

543 
	#PNG_READ_iTXt


	)

545 #i‡!
	`deföed
(
PNG_WRITE_iTXt_SUPPORTED
Ë&& !deföed(
PNG_NO_WRITE_iTXt
)

546 
	#PNG_WRITE_iTXt


	)

556 #ifde‡
PNG_LEGACY_SUPPORTED


557 
	#PNG_NO_FREE_ME


	)

558 
	#PNG_NO_READ_UNKNOWN_CHUNKS


	)

559 
	#PNG_NO_WRITE_UNKNOWN_CHUNKS


	)

560 
	#PNG_NO_HANDLE_AS_UNKNOWN


	)

561 
	#PNG_NO_READ_USER_CHUNKS


	)

562 
	#PNG_NO_READ_iCCP


	)

563 
	#PNG_NO_WRITE_iCCP


	)

564 
	#PNG_NO_READ_iTXt


	)

565 
	#PNG_NO_WRITE_iTXt


	)

566 
	#PNG_NO_READ_sCAL


	)

567 
	#PNG_NO_WRITE_sCAL


	)

568 
	#PNG_NO_READ_sPLT


	)

569 
	#PNG_NO_WRITE_sPLT


	)

570 
	#PNG_NO_INFO_IMAGE


	)

571 
	#PNG_NO_READ_RGB_TO_GRAY


	)

572 
	#PNG_NO_READ_USER_TRANSFORM


	)

573 
	#PNG_NO_WRITE_USER_TRANSFORM


	)

574 
	#PNG_NO_USER_MEM


	)

575 
	#PNG_NO_READ_EMPTY_PLTE


	)

576 
	#PNG_NO_MNG_FEATURES


	)

577 
	#PNG_NO_FIXED_POINT_SUPPORTED


	)

581 #i‡!
	`deföed
(
PNG_FLOATING_POINT_SUPPORTED
) || \

582 !
	$deföed
(
PNG_NO_FIXED_POINT_SUPPORTED
)

583 
	#PNG_FIXED_POINT_SUPPORTED


	)

586 #i‚de‡
PNG_NO_FREE_ME


587 
	#PNG_FREE_ME_SUPPORTED


	)

590 #ifde‡
PNG_READ_SUPPORTED


592 #i‡!
	`deföed
(
PNG_READ_TRANSFORMS_NOT_SUPPORTED
) && \

593 !
	$deföed
(
PNG_NO_READ_TRANSFORMS
)

594 
	#PNG_READ_TRANSFORMS_SUPPORTED


	)

597 #ifde‡
PNG_READ_TRANSFORMS_SUPPORTED


598 #i‚de‡
PNG_NO_READ_EXPAND


599 
	#PNG_READ_EXPAND_SUPPORTED


	)

601 #i‚de‡
PNG_NO_READ_SHIFT


602 
	#PNG_READ_SHIFT_SUPPORTED


	)

604 #i‚de‡
PNG_NO_READ_PACK


605 
	#PNG_READ_PACK_SUPPORTED


	)

607 #i‚de‡
PNG_NO_READ_BGR


608 
	#PNG_READ_BGR_SUPPORTED


	)

610 #i‚de‡
PNG_NO_READ_SWAP


611 
	#PNG_READ_SWAP_SUPPORTED


	)

613 #i‚de‡
PNG_NO_READ_PACKSWAP


614 
	#PNG_READ_PACKSWAP_SUPPORTED


	)

616 #i‚de‡
PNG_NO_READ_INVERT


617 
	#PNG_READ_INVERT_SUPPORTED


	)

619 #i‚de‡
PNG_NO_READ_DITHER


620 
	#PNG_READ_DITHER_SUPPORTED


	)

622 #i‚de‡
PNG_NO_READ_BACKGROUND


623 
	#PNG_READ_BACKGROUND_SUPPORTED


	)

625 #i‚de‡
PNG_NO_READ_16_TO_8


626 
	#PNG_READ_16_TO_8_SUPPORTED


	)

628 #i‚de‡
PNG_NO_READ_FILLER


629 
	#PNG_READ_FILLER_SUPPORTED


	)

631 #i‚de‡
PNG_NO_READ_GAMMA


632 
	#PNG_READ_GAMMA_SUPPORTED


	)

634 #i‚de‡
PNG_NO_READ_GRAY_TO_RGB


635 
	#PNG_READ_GRAY_TO_RGB_SUPPORTED


	)

637 #i‚de‡
PNG_NO_READ_SWAP_ALPHA


638 
	#PNG_READ_SWAP_ALPHA_SUPPORTED


	)

640 #i‚de‡
PNG_NO_READ_INVERT_ALPHA


641 
	#PNG_READ_INVERT_ALPHA_SUPPORTED


	)

643 #i‚de‡
PNG_NO_READ_STRIP_ALPHA


644 
	#PNG_READ_STRIP_ALPHA_SUPPORTED


	)

646 #i‚de‡
PNG_NO_READ_USER_TRANSFORM


647 
	#PNG_READ_USER_TRANSFORM_SUPPORTED


	)

649 #i‚de‡
PNG_NO_READ_RGB_TO_GRAY


650 
	#PNG_READ_RGB_TO_GRAY_SUPPORTED


	)

655 #i‡!
	`deföed
(
PNG_NO_PROGRESSIVE_READ
) && \

656 !
	$deföed
(
PNG_PROGRESSIVE_READ_NOT_SUPPORTED
)

657 
	#PNG_PROGRESSIVE_READ_SUPPORTED


	)

660 
	#PNG_READ_INTERLACING_SUPPORTED


	)

663 #i‡!
	`deföed
(
PNG_NO_SEQUENTIAL_READ
) && \

664 !
	`deföed
(
PNG_SEQUENTIAL_READ_SUPPORTED
) && \

665 !
	$deföed
(
PNG_NO_SEQUENTIAL_READ_SUPPORTED
)

666 
	#PNG_SEQUENTIAL_READ_SUPPORTED


	)

669 
	#PNG_READ_INTERLACING_SUPPORTED


	)

671 #i‚de‡
PNG_NO_READ_COMPOSITE_NODIV


672 #i‚de‡
PNG_NO_READ_COMPOSITED_NODIV


673 
	#PNG_READ_COMPOSITE_NODIV_SUPPORTED


	)

677 #i‡
	`deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

680 #i‚de‡
PNG_NO_READ_EMPTY_PLTE


681 
	#PNG_READ_EMPTY_PLTE_SUPPORTED


	)

687 #ifde‡
PNG_WRITE_SUPPORTED


689 #i‡!
	`deföed
(
PNG_WRITE_TRANSFORMS_NOT_SUPPORTED
) && \

690 !
	$deföed
(
PNG_NO_WRITE_TRANSFORMS
)

691 
	#PNG_WRITE_TRANSFORMS_SUPPORTED


	)

694 #ifde‡
PNG_WRITE_TRANSFORMS_SUPPORTED


695 #i‚de‡
PNG_NO_WRITE_SHIFT


696 
	#PNG_WRITE_SHIFT_SUPPORTED


	)

698 #i‚de‡
PNG_NO_WRITE_PACK


699 
	#PNG_WRITE_PACK_SUPPORTED


	)

701 #i‚de‡
PNG_NO_WRITE_BGR


702 
	#PNG_WRITE_BGR_SUPPORTED


	)

704 #i‚de‡
PNG_NO_WRITE_SWAP


705 
	#PNG_WRITE_SWAP_SUPPORTED


	)

707 #i‚de‡
PNG_NO_WRITE_PACKSWAP


708 
	#PNG_WRITE_PACKSWAP_SUPPORTED


	)

710 #i‚de‡
PNG_NO_WRITE_INVERT


711 
	#PNG_WRITE_INVERT_SUPPORTED


	)

713 #i‚de‡
PNG_NO_WRITE_FILLER


714 
	#PNG_WRITE_FILLER_SUPPORTED


	)

716 #i‚de‡
PNG_NO_WRITE_SWAP_ALPHA


717 
	#PNG_WRITE_SWAP_ALPHA_SUPPORTED


	)

719 #i‚de‡
PNG_1_0_X


720 #i‚de‡
PNG_NO_WRITE_INVERT_ALPHA


721 
	#PNG_WRITE_INVERT_ALPHA_SUPPORTED


	)

724 #i‚de‡
PNG_NO_WRITE_USER_TRANSFORM


725 
	#PNG_WRITE_USER_TRANSFORM_SUPPORTED


	)

729 #i‡!
	`deföed
(
PNG_NO_WRITE_INTERLACING_SUPPORTED
) && \

730 !
	$deföed
(
PNG_WRITE_INTERLACING_SUPPORTED
)

731 
	#PNG_WRITE_INTERLACING_SUPPORTED


	)

736 #i‡!
	`deföed
(
PNG_NO_WRITE_WEIGHTED_FILTER
) && \

737 !
	`deföed
(
PNG_WRITE_WEIGHTED_FILTER
) && \

738 
	$deföed
(
PNG_FLOATING_POINT_SUPPORTED
)

739 
	#PNG_WRITE_WEIGHTED_FILTER_SUPPORTED


	)

742 #i‚de‡
PNG_NO_WRITE_FLUSH


743 
	#PNG_WRITE_FLUSH_SUPPORTED


	)

746 #i‡
	`deföed
(
PNG_1_0_X
Ë|| deföed (
PNG_1_2_X
)

748 #i‚de‡
PNG_NO_WRITE_EMPTY_PLTE


749 
	#PNG_WRITE_EMPTY_PLTE_SUPPORTED


	)

755 #i‚de‡
PNG_1_0_X


756 #i‚de‡
PNG_NO_ERROR_NUMBERS


757 
	#PNG_ERROR_NUMBERS_SUPPORTED


	)

761 #i‡
	`deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
) || \

762 
	$deföed
(
PNG_WRITE_USER_TRANSFORM_SUPPORTED
)

763 #i‚de‡
PNG_NO_USER_TRANSFORM_PTR


764 
	#PNG_USER_TRANSFORM_PTR_SUPPORTED


	)

768 #i‚de‡
PNG_NO_STDIO


769 
	#PNG_TIME_RFC1123_SUPPORTED


	)

788 #i‡!
	`deföed
(
PNG_NO_EASY_ACCESS
Ë&& !deföed(
PNG_EASY_ACCESS_SUPPORTED
)

789 
	#PNG_EASY_ACCESS_SUPPORTED


	)

797 #i‡
	`deföed
(
PNG_READ_SUPPORTED
Ë&& !deföed(
PNG_NO_OPTIMIZED_CODE
)

798 #i‚de‡
PNG_OPTIMIZED_CODE_SUPPORTED


799 
	#PNG_OPTIMIZED_CODE_SUPPORTED


	)

803 #i‡
	`deföed
(
PNG_READ_SUPPORTED
Ë&& !deföed(
PNG_NO_ASSEMBLER_CODE
)

804 #i‚de‡
PNG_ASSEMBLER_CODE_SUPPORTED


805 
	#PNG_ASSEMBLER_CODE_SUPPORTED


	)

808 #i‡
	`deföed
(
__GNUC__
Ë&& deföed(
__x86_64__
) && (__GNUC__ < 4)

810 #i‡!
	`deföed
(
PNG_MMX_CODE_SUPPORTED
Ë&& !deföed(
PNG_NO_MMX_CODE
)

811 
	#PNG_NO_MMX_CODE


	)

815 #ifde‡
__APPLE__


816 #i‡!
	`deföed
(
PNG_MMX_CODE_SUPPORTED
Ë&& !deföed(
PNG_NO_MMX_CODE
)

817 
	#PNG_NO_MMX_CODE


	)

821 #i‡(
	`deföed
(
__MWERKS__
Ë&& ((__MWERKS__ < 0x0900Ë|| 
macötosh
))

822 #i‡!
	`deföed
(
PNG_MMX_CODE_SUPPORTED
Ë&& !deföed(
PNG_NO_MMX_CODE
)

823 
	#PNG_NO_MMX_CODE


	)

827 #i‡!
	`deföed
(
PNG_MMX_CODE_SUPPORTED
Ë&& !deföed(
PNG_NO_MMX_CODE
)

828 
	#PNG_MMX_CODE_SUPPORTED


	)

835 #i‚de‡
PNG_1_0_X


836 #i‡!
	`deföed
(
PNG_NO_USER_MEM
Ë&& !deföed(
PNG_USER_MEM_SUPPORTED
)

837 
	#PNG_USER_MEM_SUPPORTED


	)

842 #i‚de‡
PNG_1_0_X


843 #i‚de‡
PNG_SET_USER_LIMITS_SUPPORTED


844 #i‚de‡
PNG_NO_SET_USER_LIMITS


845 
	#PNG_SET_USER_LIMITS_SUPPORTED


	)

851 #i‚de‡
PNG_USER_LIMITS_SUPPORTED


852 #i‚de‡
PNG_NO_USER_LIMITS


853 
	#PNG_USER_LIMITS_SUPPORTED


	)

860 #i‚de‡
PNG_USER_WIDTH_MAX


861 
	#PNG_USER_WIDTH_MAX
 1000000L

	)

863 #i‚de‡
PNG_USER_HEIGHT_MAX


864 
	#PNG_USER_HEIGHT_MAX
 1000000L

	)

870 #i‚de‡
PNG_USER_CHUNK_CACHE_MAX


871 
	#PNG_USER_CHUNK_CACHE_MAX
 0

	)

875 #i‚de‡
PNG_USER_CHUNK_MALLOC_MAX


876 
	#PNG_USER_CHUNK_MALLOC_MAX
 0

	)

879 #i‚de‡
PNG_LITERAL_SHARP


880 
	#PNG_LITERAL_SHARP
 0x23

	)

882 #i‚de‡
PNG_LITERAL_LEFT_SQUARE_BRACKET


883 
	#PNG_LITERAL_LEFT_SQUARE_BRACKET
 0x5b

	)

885 #i‚de‡
PNG_LITERAL_RIGHT_SQUARE_BRACKET


886 
	#PNG_LITERAL_RIGHT_SQUARE_BRACKET
 0x5d

	)

890 #i‚de‡
PNG_STRING_NEWLINE


891 
	#PNG_STRING_NEWLINE
 "\n"

	)

918 #i‡!
	`deföed
(
PNG_NO_POINTER_INDEXING
) && \

919 !
	$deföed
(
PNG_POINTER_INDEXING_SUPPORTED
)

920 
	#PNG_POINTER_INDEXING_SUPPORTED


	)

935 #i‡
	`deföed
(
PNG_READ_SUPPORTED
) && \

936 !
	`deföed
(
PNG_READ_ANCILLARY_CHUNKS_NOT_SUPPORTED
) && \

937 !
	$deföed
(
PNG_NO_READ_ANCILLARY_CHUNKS
)

938 
	#PNG_READ_ANCILLARY_CHUNKS_SUPPORTED


	)

941 #i‡
	`deföed
(
PNG_WRITE_SUPPORTED
) && \

942 !
	`deföed
(
PNG_WRITE_ANCILLARY_CHUNKS_NOT_SUPPORTED
) && \

943 !
	$deföed
(
PNG_NO_WRITE_ANCILLARY_CHUNKS
)

944 
	#PNG_WRITE_ANCILLARY_CHUNKS_SUPPORTED


	)

947 #ifde‡
PNG_READ_ANCILLARY_CHUNKS_SUPPORTED


949 #ifde‡
PNG_NO_READ_TEXT


950 
	#PNG_NO_READ_iTXt


	)

951 
	#PNG_NO_READ_tEXt


	)

952 
	#PNG_NO_READ_zTXt


	)

954 #i‚de‡
PNG_NO_READ_bKGD


955 
	#PNG_READ_bKGD_SUPPORTED


	)

956 
	#PNG_bKGD_SUPPORTED


	)

958 #i‚de‡
PNG_NO_READ_cHRM


959 
	#PNG_READ_cHRM_SUPPORTED


	)

960 
	#PNG_cHRM_SUPPORTED


	)

962 #i‚de‡
PNG_NO_READ_gAMA


963 
	#PNG_READ_gAMA_SUPPORTED


	)

964 
	#PNG_gAMA_SUPPORTED


	)

966 #i‚de‡
PNG_NO_READ_hIST


967 
	#PNG_READ_hIST_SUPPORTED


	)

968 
	#PNG_hIST_SUPPORTED


	)

970 #i‚de‡
PNG_NO_READ_iCCP


971 
	#PNG_READ_iCCP_SUPPORTED


	)

972 
	#PNG_iCCP_SUPPORTED


	)

974 #i‚de‡
PNG_NO_READ_iTXt


975 #i‚de‡
PNG_READ_iTXt_SUPPORTED


976 
	#PNG_READ_iTXt_SUPPORTED


	)

978 #i‚de‡
PNG_iTXt_SUPPORTED


979 
	#PNG_iTXt_SUPPORTED


	)

982 #i‚de‡
PNG_NO_READ_oFFs


983 
	#PNG_READ_oFFs_SUPPORTED


	)

984 
	#PNG_oFFs_SUPPORTED


	)

986 #i‚de‡
PNG_NO_READ_pCAL


987 
	#PNG_READ_pCAL_SUPPORTED


	)

988 
	#PNG_pCAL_SUPPORTED


	)

990 #i‚de‡
PNG_NO_READ_sCAL


991 
	#PNG_READ_sCAL_SUPPORTED


	)

992 
	#PNG_sCAL_SUPPORTED


	)

994 #i‚de‡
PNG_NO_READ_pHYs


995 
	#PNG_READ_pHYs_SUPPORTED


	)

996 
	#PNG_pHYs_SUPPORTED


	)

998 #i‚de‡
PNG_NO_READ_sBIT


999 
	#PNG_READ_sBIT_SUPPORTED


	)

1000 
	#PNG_sBIT_SUPPORTED


	)

1002 #i‚de‡
PNG_NO_READ_sPLT


1003 
	#PNG_READ_sPLT_SUPPORTED


	)

1004 
	#PNG_sPLT_SUPPORTED


	)

1006 #i‚de‡
PNG_NO_READ_sRGB


1007 
	#PNG_READ_sRGB_SUPPORTED


	)

1008 
	#PNG_sRGB_SUPPORTED


	)

1010 #i‚de‡
PNG_NO_READ_tEXt


1011 
	#PNG_READ_tEXt_SUPPORTED


	)

1012 
	#PNG_tEXt_SUPPORTED


	)

1014 #i‚de‡
PNG_NO_READ_tIME


1015 
	#PNG_READ_tIME_SUPPORTED


	)

1016 
	#PNG_tIME_SUPPORTED


	)

1018 #i‚de‡
PNG_NO_READ_tRNS


1019 
	#PNG_READ_tRNS_SUPPORTED


	)

1020 
	#PNG_tRNS_SUPPORTED


	)

1022 #i‚de‡
PNG_NO_READ_zTXt


1023 
	#PNG_READ_zTXt_SUPPORTED


	)

1024 
	#PNG_zTXt_SUPPORTED


	)

1026 #i‚de‡
PNG_NO_READ_OPT_PLTE


1027 
	#PNG_READ_OPT_PLTE_SUPPORTED


	)

1029 #i‡
	`deföed
(
PNG_READ_iTXt_SUPPORTED
Ë|| deföed(
PNG_READ_tEXt_SUPPORTED
) || \

1030 
	$deföed
(
PNG_READ_zTXt_SUPPORTED
)

1031 
	#PNG_READ_TEXT_SUPPORTED


	)

1032 
	#PNG_TEXT_SUPPORTED


	)

1037 #i‚de‡
PNG_NO_READ_UNKNOWN_CHUNKS


1038 
	#PNG_READ_UNKNOWN_CHUNKS_SUPPORTED


	)

1039 #i‚de‡
PNG_UNKNOWN_CHUNKS_SUPPORTED


1040 
	#PNG_UNKNOWN_CHUNKS_SUPPORTED


	)

1043 #i‡!
	`deföed
(
PNG_NO_READ_USER_CHUNKS
) && \

1044 
	$deföed
(
PNG_READ_UNKNOWN_CHUNKS_SUPPORTED
)

1045 
	#PNG_READ_USER_CHUNKS_SUPPORTED


	)

1046 
	#PNG_USER_CHUNKS_SUPPORTED


	)

1047 #ifde‡
PNG_NO_READ_UNKNOWN_CHUNKS


1048 #unde‡
PNG_NO_READ_UNKNOWN_CHUNKS


1050 #ifde‡
PNG_NO_HANDLE_AS_UNKNOWN


1051 #unde‡
PNG_NO_HANDLE_AS_UNKNOWN


1055 #i‚de‡
PNG_NO_HANDLE_AS_UNKNOWN


1056 #i‚de‡
PNG_HANDLE_AS_UNKNOWN_SUPPORTED


1057 
	#PNG_HANDLE_AS_UNKNOWN_SUPPORTED


	)

1061 #ifde‡
PNG_WRITE_SUPPORTED


1062 #ifde‡
PNG_WRITE_ANCILLARY_CHUNKS_SUPPORTED


1064 #ifde‡
PNG_NO_WRITE_TEXT


1065 
	#PNG_NO_WRITE_iTXt


	)

1066 
	#PNG_NO_WRITE_tEXt


	)

1067 
	#PNG_NO_WRITE_zTXt


	)

1069 #i‚de‡
PNG_NO_WRITE_bKGD


1070 
	#PNG_WRITE_bKGD_SUPPORTED


	)

1071 #i‚de‡
PNG_bKGD_SUPPORTED


1072 
	#PNG_bKGD_SUPPORTED


	)

1075 #i‚de‡
PNG_NO_WRITE_cHRM


1076 
	#PNG_WRITE_cHRM_SUPPORTED


	)

1077 #i‚de‡
PNG_cHRM_SUPPORTED


1078 
	#PNG_cHRM_SUPPORTED


	)

1081 #i‚de‡
PNG_NO_WRITE_gAMA


1082 
	#PNG_WRITE_gAMA_SUPPORTED


	)

1083 #i‚de‡
PNG_gAMA_SUPPORTED


1084 
	#PNG_gAMA_SUPPORTED


	)

1087 #i‚de‡
PNG_NO_WRITE_hIST


1088 
	#PNG_WRITE_hIST_SUPPORTED


	)

1089 #i‚de‡
PNG_hIST_SUPPORTED


1090 
	#PNG_hIST_SUPPORTED


	)

1093 #i‚de‡
PNG_NO_WRITE_iCCP


1094 
	#PNG_WRITE_iCCP_SUPPORTED


	)

1095 #i‚de‡
PNG_iCCP_SUPPORTED


1096 
	#PNG_iCCP_SUPPORTED


	)

1099 #i‚de‡
PNG_NO_WRITE_iTXt


1100 #i‚de‡
PNG_WRITE_iTXt_SUPPORTED


1101 
	#PNG_WRITE_iTXt_SUPPORTED


	)

1103 #i‚de‡
PNG_iTXt_SUPPORTED


1104 
	#PNG_iTXt_SUPPORTED


	)

1107 #i‚de‡
PNG_NO_WRITE_oFFs


1108 
	#PNG_WRITE_oFFs_SUPPORTED


	)

1109 #i‚de‡
PNG_oFFs_SUPPORTED


1110 
	#PNG_oFFs_SUPPORTED


	)

1113 #i‚de‡
PNG_NO_WRITE_pCAL


1114 
	#PNG_WRITE_pCAL_SUPPORTED


	)

1115 #i‚de‡
PNG_pCAL_SUPPORTED


1116 
	#PNG_pCAL_SUPPORTED


	)

1119 #i‚de‡
PNG_NO_WRITE_sCAL


1120 
	#PNG_WRITE_sCAL_SUPPORTED


	)

1121 #i‚de‡
PNG_sCAL_SUPPORTED


1122 
	#PNG_sCAL_SUPPORTED


	)

1125 #i‚de‡
PNG_NO_WRITE_pHYs


1126 
	#PNG_WRITE_pHYs_SUPPORTED


	)

1127 #i‚de‡
PNG_pHYs_SUPPORTED


1128 
	#PNG_pHYs_SUPPORTED


	)

1131 #i‚de‡
PNG_NO_WRITE_sBIT


1132 
	#PNG_WRITE_sBIT_SUPPORTED


	)

1133 #i‚de‡
PNG_sBIT_SUPPORTED


1134 
	#PNG_sBIT_SUPPORTED


	)

1137 #i‚de‡
PNG_NO_WRITE_sPLT


1138 
	#PNG_WRITE_sPLT_SUPPORTED


	)

1139 #i‚de‡
PNG_sPLT_SUPPORTED


1140 
	#PNG_sPLT_SUPPORTED


	)

1143 #i‚de‡
PNG_NO_WRITE_sRGB


1144 
	#PNG_WRITE_sRGB_SUPPORTED


	)

1145 #i‚de‡
PNG_sRGB_SUPPORTED


1146 
	#PNG_sRGB_SUPPORTED


	)

1149 #i‚de‡
PNG_NO_WRITE_tEXt


1150 
	#PNG_WRITE_tEXt_SUPPORTED


	)

1151 #i‚de‡
PNG_tEXt_SUPPORTED


1152 
	#PNG_tEXt_SUPPORTED


	)

1155 #i‚de‡
PNG_NO_WRITE_tIME


1156 
	#PNG_WRITE_tIME_SUPPORTED


	)

1157 #i‚de‡
PNG_tIME_SUPPORTED


1158 
	#PNG_tIME_SUPPORTED


	)

1161 #i‚de‡
PNG_NO_WRITE_tRNS


1162 
	#PNG_WRITE_tRNS_SUPPORTED


	)

1163 #i‚de‡
PNG_tRNS_SUPPORTED


1164 
	#PNG_tRNS_SUPPORTED


	)

1167 #i‚de‡
PNG_NO_WRITE_zTXt


1168 
	#PNG_WRITE_zTXt_SUPPORTED


	)

1169 #i‚de‡
PNG_zTXt_SUPPORTED


1170 
	#PNG_zTXt_SUPPORTED


	)

1173 #i‡
	`deföed
(
PNG_WRITE_iTXt_SUPPORTED
Ë|| deföed(
PNG_WRITE_tEXt_SUPPORTED
) || \

1174 
	$deföed
(
PNG_WRITE_zTXt_SUPPORTED
)

1175 
	#PNG_WRITE_TEXT_SUPPORTED


	)

1176 #i‚de‡
PNG_TEXT_SUPPORTED


1177 
	#PNG_TEXT_SUPPORTED


	)

1181 #ifde‡
PNG_WRITE_tIME_SUPPORTED


1182 #i‚de‡
PNG_NO_CONVERT_tIME


1183 #i‚de‡
_WIN32_WCE


1185 #i‚de‡
PNG_CONVERT_tIME_SUPPORTED


1186 
	#PNG_CONVERT_tIME_SUPPORTED


	)

1194 #i‡!
	`deföed
(
PNG_NO_WRITE_FILTER
Ë&& !deföed(
PNG_WRITE_FILTER_SUPPORTED
)

1195 
	#PNG_WRITE_FILTER_SUPPORTED


	)

1198 #i‚de‡
PNG_NO_WRITE_UNKNOWN_CHUNKS


1199 
	#PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED


	)

1200 #i‚de‡
PNG_UNKNOWN_CHUNKS_SUPPORTED


1201 
	#PNG_UNKNOWN_CHUNKS_SUPPORTED


	)

1205 #i‚de‡
PNG_NO_HANDLE_AS_UNKNOWN


1206 #i‚de‡
PNG_HANDLE_AS_UNKNOWN_SUPPORTED


1207 
	#PNG_HANDLE_AS_UNKNOWN_SUPPORTED


	)

1216 #i‚de‡
PNG_NO_INFO_IMAGE


1217 
	#PNG_INFO_IMAGE_SUPPORTED


	)

1221 #ifde‡
PNG_CONVERT_tIME_SUPPORTED


1223 
	~<time.h
>

1235 
	t≤g_uöt_32
;

1236 
	t≤g_öt_32
;

1237 
	t≤g_uöt_16
;

1238 
	t≤g_öt_16
;

1239 
	t≤g_byã
;

1243 #ifde‡
PNG_SIZE_T


1244 
PNG_SIZE_T
 
	t≤g_size_t
;

1245 
	#≤g_sizeof
(
x
Ë
	`≤g_c⁄vît_size
((x))

	)

1247 
size_t
 
	t≤g_size_t
;

1248 
	#≤g_sizeof
(
x
Ë(x)

	)

1262 #ifde‡
__BORLANDC__


1263 #i‡
	`deföed
(
__LARGE__
Ë|| deföed(
__HUGE__
Ë|| deföed(
__COMPACT__
)

1264 
	#LDATA
 1

	)

1266 
	#LDATA
 0

	)

1269 #i‡!
	`deföed
(
__WIN32__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__CYGWIN__
)

1270 
	#PNG_MAX_MALLOC_64K


	)

1271 #i‡(
LDATA
 != 1)

1272 #i‚de‡
FAR


1273 
	#FAR
 
__Ár


	)

1275 
	#USE_FAR_KEYWORD


	)

1292 #ifde‡
FAR


1293 #ifde‡
M_I86MM


1294 
	#USE_FAR_KEYWORD


	)

1295 
	#FARDATA
 
FAR


	)

1296 
	~<dos.h
>

1301 #i‚de‡
FAR


1302 
	#FAR


	)

1306 #i‚de‡
FARDATA


1307 
	#FARDATA


	)

1312 
≤g_öt_32
 
	t≤g_fixed_poöt
;

1315 
	tFAR
 * 
	t≤g_voidp
;

1316 
≤g_byã
 
	tFAR
 * 
	t≤g_byãp
;

1317 
≤g_uöt_32
 
	tFAR
 * 
	t≤g_uöt_32p
;

1318 
≤g_öt_32
 
	tFAR
 * 
	t≤g_öt_32p
;

1319 
≤g_uöt_16
 
	tFAR
 * 
	t≤g_uöt_16p
;

1320 
≤g_öt_16
 
	tFAR
 * 
	t≤g_öt_16p
;

1321 
PNG_CONST
 
	tFAR
 * 
	t≤g_c⁄°_ch¨p
;

1322 
	tFAR
 * 
	t≤g_ch¨p
;

1323 
≤g_fixed_poöt
 
	tFAR
 * 
	t≤g_fixed_poöt_p
;

1325 #i‚de‡
PNG_NO_STDIO


1326 #ifde‡
_WIN32_WCE


1327 
HANDLE
 
	t≤g_FILE_p
;

1329 
FILE
 * 
	t≤g_FILE_p
;

1333 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1334 
	tFAR
 * 
	t≤g_doubÀp
;

1338 
≤g_byã
 
	tFAR
 * FAR * 
	t≤g_byãµ
;

1339 
≤g_uöt_32
 
	tFAR
 * FAR * 
	t≤g_uöt_32µ
;

1340 
≤g_öt_32
 
	tFAR
 * FAR * 
	t≤g_öt_32µ
;

1341 
≤g_uöt_16
 
	tFAR
 * FAR * 
	t≤g_uöt_16µ
;

1342 
≤g_öt_16
 
	tFAR
 * FAR * 
	t≤g_öt_16µ
;

1343 
PNG_CONST
 
	tFAR
 * FAR * 
	t≤g_c⁄°_ch¨µ
;

1344 
	tFAR
 * FAR * 
	t≤g_ch¨µ
;

1345 
≤g_fixed_poöt
 
	tFAR
 * FAR * 
	t≤g_fixed_poöt_µ
;

1346 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1347 
	tFAR
 * FAR * 
	t≤g_doubÀµ
;

1351 
	tFAR
 * FAR * FAR * 
	t≤g_ch¨µp
;

1353 #i‡
	`deföed
(
PNG_1_0_X
Ë|| deföed(
PNG_1_2_X
)

1360 
ch¨f
 * 
	t≤g_zch¨p
;

1361 
ch¨f
 * 
	tFAR
 * 
	t≤g_zch¨µ
;

1362 
z_°ªam
 
	tFAR
 * 
	t≤g_z°ªamp
;

1383 #i‡!
	`deföed
(
PNG_DLL
Ë&& (deföed(
PNG_BUILD_DLL
Ë|| deföed(
PNG_USE_DLL
))

1384 
	#PNG_DLL


	)

1390 #ifde‡
__CYGWIN__


1391 #i‚de‡
PNG_STATIC


1392 #ifde‡
PNG_USE_GLOBAL_ARRAYS


1393 #unde‡
PNG_USE_GLOBAL_ARRAYS


1395 #i‚de‡
PNG_USE_LOCAL_ARRAYS


1396 
	#PNG_USE_LOCAL_ARRAYS


	)

1399 #i‡
	`deföed
(
PNG_USE_LOCAL_ARRAYS
Ë|| deföed(
PNG_NO_GLOBAL_ARRAYS
)

1400 #ifde‡
PNG_USE_GLOBAL_ARRAYS


1401 #unde‡
PNG_USE_GLOBAL_ARRAYS


1405 #i‡!
	`deföed
(
PNG_USE_LOCAL_ARRAYS
Ë&& !deföed(
PNG_USE_GLOBAL_ARRAYS
)

1406 
	#PNG_USE_LOCAL_ARRAYS


	)

1414 #i‡!
	`deföed
(
PNG_USE_LOCAL_ARRAYS
Ë&& !deföed(
PNG_USE_GLOBAL_ARRAYS
)

1415 #i‡
	`deföed
(
PNG_NO_GLOBAL_ARRAYS
) || \

1416 (
	`deföed
(
__GNUC__
Ë&& deföed(
PNG_DLL
)Ë|| 
	$deföed
(
_MSC_VER
)

1417 
	#PNG_USE_LOCAL_ARRAYS


	)

1419 
	#PNG_USE_GLOBAL_ARRAYS


	)

1423 #ifde‡
__CYGWIN__


1424 #unde‡
PNGAPI


1425 
	#PNGAPI
 
__cde˛


	)

1426 #unde‡
PNG_IMPEXP


1427 
	#PNG_IMPEXP


	)

1437 #i‡
	`deföed
(
__MINGW32__
Ë&& !deföed(
PNG_MODULEDEF
)

1438 #i‚de‡
PNG_NO_MODULEDEF


1439 
	#PNG_NO_MODULEDEF


	)

1443 #i‡!
	`deföed
(
PNG_IMPEXP
Ë&& deföed(
PNG_BUILD_DLL
Ë&& !deföed(
PNG_NO_MODULEDEF
)

1444 
	#PNG_IMPEXP


	)

1447 #i‡
	`deföed
(
PNG_DLL
Ë|| deföed(
_DLL
Ë|| deföed(
__DLL__
 ) || \

1448 (–
	`deföed
(
_Wödows
Ë|| deföed(
_WINDOWS
) || \

1449 
	`deföed
(
WIN32
Ë|| deföed(
_WIN32
Ë|| 
	$deföed
(
__WIN32__
) ))

1451 #i‚de‡
PNGAPI


1452 #i‡
	`deföed
(
__GNUC__
Ë|| (deföed (
_MSC_VER
) && (_MSC_VER >= 800))

1453 
	#PNGAPI
 
__cde˛


	)

1455 
	#PNGAPI
 
_cde˛


	)

1459 #i‡!
	`deföed
(
PNG_IMPEXP
Ë&& (!deföed(
PNG_DLL
) || \

1461 
	#PNG_IMPEXP


	)

1464 #i‚de‡
PNG_IMPEXP


1466 
	#PNG_EXPORT_TYPE1
(
ty≥
,
symbﬁ
Ë
PNG_IMPEXP
Åy≥ 
PNGAPI
 
	)
symbol

1467 
	#PNG_EXPORT_TYPE2
(
ty≥
,
symbﬁ
Ëty≥ 
PNG_IMPEXP
 
PNGAPI
 
	)
symbol

1470 #i‡
	`deföed
(
_MSC_VER
Ë|| deföed(
__BORLANDC__
)

1471 #i‡(
_MSC_VER
 >800Ë|| (
__BORLANDC__
 >= 0x500)

1472 
	#PNG_EXPORT
 
PNG_EXPORT_TYPE1


	)

1474 
	#PNG_EXPORT
 
PNG_EXPORT_TYPE2


	)

1475 #ifde‡
PNG_BUILD_DLL


1476 
	#PNG_IMPEXP
 
__exp‹t


	)

1478 
	#PNG_IMPEXP


	)

1481 
C
++ 
	`˛as£s
 (=
huge
) */

1485 #i‚de‡
PNG_IMPEXP


1486 #ifde‡
PNG_BUILD_DLL


1487 
	#PNG_IMPEXP
 
	`__de˛•ec
(
dŒexp‹t
)

	)

1489 
	#PNG_IMPEXP
 
	`__de˛•ec
(
dŒimp‹t
)

	)

1494 #i‡(
	`deföed
(
__IBMC__
Ë|| deföed(
__IBMCPP__
)Ë&& deföed(
__OS2__
)

1495 #i‚de‡
PNGAPI


1496 
	#PNGAPI
 
_Sy°em


	)

1504 #i‚de‡
PNGAPI


1505 
	#PNGAPI


	)

1507 #i‚de‡
PNG_IMPEXP


1508 
	#PNG_IMPEXP


	)

1511 #ifde‡
PNG_BUILDSYMS


1512 #i‚de‡
PNG_EXPORT


1513 
	#PNG_EXPORT
(
ty≥
,
symbﬁ
Ë
PNG_FUNCTION_EXPORT
 symbﬁ 
END


	)

1515 #ifde‡
PNG_USE_GLOBAL_ARRAYS


1516 #i‚de‡
PNG_EXPORT_VAR


1517 
	#PNG_EXPORT_VAR
(
ty≥
Ë
PNG_DATA_EXPORT


	)

1522 #i‚de‡
PNG_EXPORT


1523 
	#PNG_EXPORT
(
ty≥
,
symbﬁ
Ë
PNG_IMPEXP
Åy≥ 
PNGAPI
 
	)
symbol

1526 #ifde‡
PNG_USE_GLOBAL_ARRAYS


1527 #i‚de‡
PNG_EXPORT_VAR


1528 
	#PNG_EXPORT_VAR
(
ty≥
Ë
PNG_IMPEXP
 
	)
type

1532 #ifde‡
PNG_PEDANTIC_WARNINGS


1533 #i‚de‡
PNG_PEDANTIC_WARNINGS_SUPPORTED


1534 
	#PNG_PEDANTIC_WARNINGS_SUPPORTED


	)

1538 #ifde‡
PNG_PEDANTIC_WARNINGS_SUPPORTED


1544 #ifde‡
__GNUC__


1545 #i‚de‡
PNG_USE_RESULT


1546 
	#PNG_USE_RESULT
 
	`__©åibuã__
((
__w¨n_unu£d_ªsu…__
))

	)

1548 #i‚de‡
PNG_NORETURN


1549 
	#PNG_NORETURN
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

1551 #i‚de‡
PNG_ALLOCATED


1552 
	#PNG_ALLOCATED
 
	`__©åibuã__
((
__mÆloc__
))

	)

1559 #i‚de‡
PNG_DEPRECATED


1560 
	#PNG_DEPRECATED
 
	`__©åibuã__
((
__dïªˇãd__
))

	)

1562 #i‚de‡
PNG_DEPSTRUCT


1563 
	#PNG_DEPSTRUCT
 
	`__©åibuã__
((
__dïªˇãd__
))

	)

1565 #i‚de‡
PNG_PRIVATE


1567 
	#PNG_PRIVATE
 \

1568 
	`__©åibuã__
((
	`w¨nög
("Thi†fun˘i⁄ i†nŸÉxp‹ãd byÜib≤g.")))

	)

1570 
	#PNG_PRIVATE
 \

1571 
	`__©åibuã__
((
__dïªˇãd__
))

	)

1577 #i‚de‡
PNG_DEPRECATED


1578 
	#PNG_DEPRECATED


	)

1580 #i‚de‡
PNG_USE_RESULT


1581 
	#PNG_USE_RESULT


	)

1583 #i‚de‡
PNG_NORETURN


1584 
	#PNG_NORETURN


	)

1586 #i‚de‡
PNG_ALLOCATED


1587 
	#PNG_ALLOCATED


	)

1589 #i‚de‡
PNG_DEPSTRUCT


1590 
	#PNG_DEPSTRUCT


	)

1592 #i‚de‡
PNG_PRIVATE


1593 
	#PNG_PRIVATE


	)

1600 #i‚de‡
PNG_ABORT


1601 
	#PNG_ABORT
(Ë
	`ab‹t
()

	)

1604 #ifde‡
PNG_SETJMP_SUPPORTED


1605 
	#≤g_jmpbuf
(
≤g_±r
Ë(’ng_±r)->
jmpbuf
)

	)

1607 
	#≤g_jmpbuf
(
≤g_±r
) \

1608 (
LIBPNG_WAS_COMPILED_WITH__PNG_SETJMP_NOT_SUPPORTED
)

	)

1611 #ifde‡
USE_FAR_KEYWORD


1613 
	#CHECK
 1

	)

1614 
	#NOCHECK
 0

	)

1615 
	#CVT_PTR
(
±r
Ë(
	`≤g_Ár_to_√¨
(
≤g_±r
,±r,
CHECK
))

	)

1616 
	#CVT_PTR_NOCHECK
(
±r
Ë(
	`≤g_Ár_to_√¨
(
≤g_±r
,±r,
NOCHECK
))

	)

1617 
	#≤g_¢¥ötf
 
_f¢¥ötf


	)

1618 
	#≤g_°æí
 
_f°æí


	)

1619 
	#≤g_memcmp
 
_fmemcmp


	)

1620 
	#≤g_mem˝y
 
_fmem˝y


	)

1621 
	#≤g_mem£t
 
_fmem£t


	)

1623 
	#CVT_PTR
(
±r
Ë’å)

	)

1624 
	#CVT_PTR_NOCHECK
(
±r
Ë’å)

	)

1625 #i‚de‡
PNG_NO_SNPRINTF


1626 #ifde‡
_MSC_VER


1627 
	#≤g_¢¥ötf
 
_¢¥ötf


	)

1628 
	#≤g_¢¥ötf2
 
_¢¥ötf


	)

1629 
	#≤g_¢¥ötf6
 
_¢¥ötf


	)

1631 
	#≤g_¢¥ötf
 
¢¥ötf


	)

1632 
	#≤g_¢¥ötf2
 
¢¥ötf


	)

1633 
	#≤g_¢¥ötf6
 
¢¥ötf


	)

1642 
	#≤g_¢¥ötf
(
s1
,
n
,
fmt
,
x1
Ë
	`•rötf
(s1,fmt,x1)

	)

1643 
	#≤g_¢¥ötf2
(
s1
,
n
,
fmt
,
x1
,
x2
Ë
	`•rötf
(s1,fmt,x1,x2)

	)

1644 
	#≤g_¢¥ötf6
(
s1
,
n
,
fmt
,
x1
,
x2
,
x3
,
x4
,
x5
,
x6
) \

1645 
	`•rötf
(
s1
,
fmt
,
x1
,
x2
,
x3
,
x4
,
x5
,
x6
)

	)

1647 
	#≤g_°æí
 
°æí


	)

1648 
	#≤g_memcmp
 
memcmp


	)

1649 
	#≤g_mem˝y
 
mem˝y


	)

1650 
	#≤g_mem£t
 
mem£t


	)

1657 #i‡(
PNG_ZBUF_SIZE
 > 65536LË&& 
	`deföed
(
PNG_MAX_MALLOC_64K
)

1658 #unde‡
PNG_ZBUF_SIZE


1659 
	#PNG_ZBUF_SIZE
 65536L

	)

	@/usr/include/pulse/channelmap.h

1 #i‚de‡
fooch™√lm≠hfoo


2 
	#fooch™√lm≠hfoo


	)

26 
	~<pul£/ßm∂e.h
>

27 
	~<pul£/cde˛.h
>

28 
	~<pul£/gccma¸o.h
>

29 
	~<pul£/vîsi⁄.h
>

73 
PA_C_DECL_BEGIN


76 
	e∑_ch™√l_posôi⁄
 {

77 
	mPA_CHANNEL_POSITION_INVALID
 = -1,

78 
	mPA_CHANNEL_POSITION_MONO
 = 0,

80 
	mPA_CHANNEL_POSITION_FRONT_LEFT
,

81 
	mPA_CHANNEL_POSITION_FRONT_RIGHT
,

82 
	mPA_CHANNEL_POSITION_FRONT_CENTER
,

85 
	mPA_CHANNEL_POSITION_LEFT
 = 
PA_CHANNEL_POSITION_FRONT_LEFT
,

86 
	mPA_CHANNEL_POSITION_RIGHT
 = 
PA_CHANNEL_POSITION_FRONT_RIGHT
,

87 
	mPA_CHANNEL_POSITION_CENTER
 = 
PA_CHANNEL_POSITION_FRONT_CENTER
,

90 
	mPA_CHANNEL_POSITION_REAR_CENTER
,

91 
	mPA_CHANNEL_POSITION_REAR_LEFT
,

92 
	mPA_CHANNEL_POSITION_REAR_RIGHT
,

94 
	mPA_CHANNEL_POSITION_LFE
,

96 
	mPA_CHANNEL_POSITION_SUBWOOFER
 = 
PA_CHANNEL_POSITION_LFE
,

99 
	mPA_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER
,

100 
	mPA_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER
,

102 
	mPA_CHANNEL_POSITION_SIDE_LEFT
,

103 
	mPA_CHANNEL_POSITION_SIDE_RIGHT
,

105 
	mPA_CHANNEL_POSITION_AUX0
,

106 
	mPA_CHANNEL_POSITION_AUX1
,

107 
	mPA_CHANNEL_POSITION_AUX2
,

108 
	mPA_CHANNEL_POSITION_AUX3
,

109 
	mPA_CHANNEL_POSITION_AUX4
,

110 
	mPA_CHANNEL_POSITION_AUX5
,

111 
	mPA_CHANNEL_POSITION_AUX6
,

112 
	mPA_CHANNEL_POSITION_AUX7
,

113 
	mPA_CHANNEL_POSITION_AUX8
,

114 
	mPA_CHANNEL_POSITION_AUX9
,

115 
	mPA_CHANNEL_POSITION_AUX10
,

116 
	mPA_CHANNEL_POSITION_AUX11
,

117 
	mPA_CHANNEL_POSITION_AUX12
,

118 
	mPA_CHANNEL_POSITION_AUX13
,

119 
	mPA_CHANNEL_POSITION_AUX14
,

120 
	mPA_CHANNEL_POSITION_AUX15
,

121 
	mPA_CHANNEL_POSITION_AUX16
,

122 
	mPA_CHANNEL_POSITION_AUX17
,

123 
	mPA_CHANNEL_POSITION_AUX18
,

124 
	mPA_CHANNEL_POSITION_AUX19
,

125 
	mPA_CHANNEL_POSITION_AUX20
,

126 
	mPA_CHANNEL_POSITION_AUX21
,

127 
	mPA_CHANNEL_POSITION_AUX22
,

128 
	mPA_CHANNEL_POSITION_AUX23
,

129 
	mPA_CHANNEL_POSITION_AUX24
,

130 
	mPA_CHANNEL_POSITION_AUX25
,

131 
	mPA_CHANNEL_POSITION_AUX26
,

132 
	mPA_CHANNEL_POSITION_AUX27
,

133 
	mPA_CHANNEL_POSITION_AUX28
,

134 
	mPA_CHANNEL_POSITION_AUX29
,

135 
	mPA_CHANNEL_POSITION_AUX30
,

136 
	mPA_CHANNEL_POSITION_AUX31
,

138 
	mPA_CHANNEL_POSITION_TOP_CENTER
,

140 
	mPA_CHANNEL_POSITION_TOP_FRONT_LEFT
,

141 
	mPA_CHANNEL_POSITION_TOP_FRONT_RIGHT
,

142 
	mPA_CHANNEL_POSITION_TOP_FRONT_CENTER
,

144 
	mPA_CHANNEL_POSITION_TOP_REAR_LEFT
,

145 
	mPA_CHANNEL_POSITION_TOP_REAR_RIGHT
,

146 
	mPA_CHANNEL_POSITION_TOP_REAR_CENTER
,

148 
	mPA_CHANNEL_POSITION_MAX


149 } 
	t∑_ch™√l_posôi⁄_t
;

152 
	#PA_CHANNEL_POSITION_INVALID
 
PA_CHANNEL_POSITION_INVALID


	)

153 
	#PA_CHANNEL_POSITION_MONO
 
PA_CHANNEL_POSITION_MONO


	)

154 
	#PA_CHANNEL_POSITION_LEFT
 
PA_CHANNEL_POSITION_LEFT


	)

155 
	#PA_CHANNEL_POSITION_RIGHT
 
PA_CHANNEL_POSITION_RIGHT


	)

156 
	#PA_CHANNEL_POSITION_CENTER
 
PA_CHANNEL_POSITION_CENTER


	)

157 
	#PA_CHANNEL_POSITION_FRONT_LEFT
 
PA_CHANNEL_POSITION_FRONT_LEFT


	)

158 
	#PA_CHANNEL_POSITION_FRONT_RIGHT
 
PA_CHANNEL_POSITION_FRONT_RIGHT


	)

159 
	#PA_CHANNEL_POSITION_FRONT_CENTER
 
PA_CHANNEL_POSITION_FRONT_CENTER


	)

160 
	#PA_CHANNEL_POSITION_REAR_CENTER
 
PA_CHANNEL_POSITION_REAR_CENTER


	)

161 
	#PA_CHANNEL_POSITION_REAR_LEFT
 
PA_CHANNEL_POSITION_REAR_LEFT


	)

162 
	#PA_CHANNEL_POSITION_REAR_RIGHT
 
PA_CHANNEL_POSITION_REAR_RIGHT


	)

163 
	#PA_CHANNEL_POSITION_LFE
 
PA_CHANNEL_POSITION_LFE


	)

164 
	#PA_CHANNEL_POSITION_SUBWOOFER
 
PA_CHANNEL_POSITION_SUBWOOFER


	)

165 
	#PA_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER
 
PA_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER


	)

166 
	#PA_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER
 
PA_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER


	)

167 
	#PA_CHANNEL_POSITION_SIDE_LEFT
 
PA_CHANNEL_POSITION_SIDE_LEFT


	)

168 
	#PA_CHANNEL_POSITION_SIDE_RIGHT
 
PA_CHANNEL_POSITION_SIDE_RIGHT


	)

169 
	#PA_CHANNEL_POSITION_AUX0
 
PA_CHANNEL_POSITION_AUX0


	)

170 
	#PA_CHANNEL_POSITION_AUX1
 
PA_CHANNEL_POSITION_AUX1


	)

171 
	#PA_CHANNEL_POSITION_AUX2
 
PA_CHANNEL_POSITION_AUX2


	)

172 
	#PA_CHANNEL_POSITION_AUX3
 
PA_CHANNEL_POSITION_AUX3


	)

173 
	#PA_CHANNEL_POSITION_AUX4
 
PA_CHANNEL_POSITION_AUX4


	)

174 
	#PA_CHANNEL_POSITION_AUX5
 
PA_CHANNEL_POSITION_AUX5


	)

175 
	#PA_CHANNEL_POSITION_AUX6
 
PA_CHANNEL_POSITION_AUX6


	)

176 
	#PA_CHANNEL_POSITION_AUX7
 
PA_CHANNEL_POSITION_AUX7


	)

177 
	#PA_CHANNEL_POSITION_AUX8
 
PA_CHANNEL_POSITION_AUX8


	)

178 
	#PA_CHANNEL_POSITION_AUX9
 
PA_CHANNEL_POSITION_AUX9


	)

179 
	#PA_CHANNEL_POSITION_AUX10
 
PA_CHANNEL_POSITION_AUX10


	)

180 
	#PA_CHANNEL_POSITION_AUX11
 
PA_CHANNEL_POSITION_AUX11


	)

181 
	#PA_CHANNEL_POSITION_AUX12
 
PA_CHANNEL_POSITION_AUX12


	)

182 
	#PA_CHANNEL_POSITION_AUX13
 
PA_CHANNEL_POSITION_AUX13


	)

183 
	#PA_CHANNEL_POSITION_AUX14
 
PA_CHANNEL_POSITION_AUX14


	)

184 
	#PA_CHANNEL_POSITION_AUX15
 
PA_CHANNEL_POSITION_AUX15


	)

185 
	#PA_CHANNEL_POSITION_AUX16
 
PA_CHANNEL_POSITION_AUX16


	)

186 
	#PA_CHANNEL_POSITION_AUX17
 
PA_CHANNEL_POSITION_AUX17


	)

187 
	#PA_CHANNEL_POSITION_AUX18
 
PA_CHANNEL_POSITION_AUX18


	)

188 
	#PA_CHANNEL_POSITION_AUX19
 
PA_CHANNEL_POSITION_AUX19


	)

189 
	#PA_CHANNEL_POSITION_AUX20
 
PA_CHANNEL_POSITION_AUX20


	)

190 
	#PA_CHANNEL_POSITION_AUX21
 
PA_CHANNEL_POSITION_AUX21


	)

191 
	#PA_CHANNEL_POSITION_AUX22
 
PA_CHANNEL_POSITION_AUX22


	)

192 
	#PA_CHANNEL_POSITION_AUX23
 
PA_CHANNEL_POSITION_AUX23


	)

193 
	#PA_CHANNEL_POSITION_AUX24
 
PA_CHANNEL_POSITION_AUX24


	)

194 
	#PA_CHANNEL_POSITION_AUX25
 
PA_CHANNEL_POSITION_AUX25


	)

195 
	#PA_CHANNEL_POSITION_AUX26
 
PA_CHANNEL_POSITION_AUX26


	)

196 
	#PA_CHANNEL_POSITION_AUX27
 
PA_CHANNEL_POSITION_AUX27


	)

197 
	#PA_CHANNEL_POSITION_AUX28
 
PA_CHANNEL_POSITION_AUX28


	)

198 
	#PA_CHANNEL_POSITION_AUX29
 
PA_CHANNEL_POSITION_AUX29


	)

199 
	#PA_CHANNEL_POSITION_AUX30
 
PA_CHANNEL_POSITION_AUX30


	)

200 
	#PA_CHANNEL_POSITION_AUX31
 
PA_CHANNEL_POSITION_AUX31


	)

201 
	#PA_CHANNEL_POSITION_TOP_CENTER
 
PA_CHANNEL_POSITION_TOP_CENTER


	)

202 
	#PA_CHANNEL_POSITION_TOP_FRONT_LEFT
 
PA_CHANNEL_POSITION_TOP_FRONT_LEFT


	)

203 
	#PA_CHANNEL_POSITION_TOP_FRONT_RIGHT
 
PA_CHANNEL_POSITION_TOP_FRONT_RIGHT


	)

204 
	#PA_CHANNEL_POSITION_TOP_FRONT_CENTER
 
PA_CHANNEL_POSITION_TOP_FRONT_CENTER


	)

205 
	#PA_CHANNEL_POSITION_TOP_REAR_LEFT
 
PA_CHANNEL_POSITION_TOP_REAR_LEFT


	)

206 
	#PA_CHANNEL_POSITION_TOP_REAR_RIGHT
 
PA_CHANNEL_POSITION_TOP_REAR_RIGHT


	)

207 
	#PA_CHANNEL_POSITION_TOP_REAR_CENTER
 
PA_CHANNEL_POSITION_TOP_REAR_CENTER


	)

208 
	#PA_CHANNEL_POSITION_MAX
 
PA_CHANNEL_POSITION_MAX


	)

212 
uöt64_t
 
	t∑_ch™√l_posôi⁄_mask_t
;

215 
	#PA_CHANNEL_POSITION_MASK
(
f
Ë((
∑_ch™√l_posôi⁄_mask_t
Ë(1ULL << (f)))

	)

218 
	e∑_ch™√l_m≠_def
 {

219 
	mPA_CHANNEL_MAP_AIFF
,

223 
	mPA_CHANNEL_MAP_ALSA
,

229 
	mPA_CHANNEL_MAP_AUX
,

232 
	mPA_CHANNEL_MAP_WAVEEX
,

237 
	mPA_CHANNEL_MAP_OSS
,

245 
	mPA_CHANNEL_MAP_DEF_MAX
,

247 
	mPA_CHANNEL_MAP_DEFAULT
 = 
PA_CHANNEL_MAP_AIFF


249 } 
	t∑_ch™√l_m≠_def_t
;

252 
	#PA_CHANNEL_MAP_AIFF
 
PA_CHANNEL_MAP_AIFF


	)

253 
	#PA_CHANNEL_MAP_ALSA
 
PA_CHANNEL_MAP_ALSA


	)

254 
	#PA_CHANNEL_MAP_AUX
 
PA_CHANNEL_MAP_AUX


	)

255 
	#PA_CHANNEL_MAP_WAVEEX
 
PA_CHANNEL_MAP_WAVEEX


	)

256 
	#PA_CHANNEL_MAP_OSS
 
PA_CHANNEL_MAP_OSS


	)

257 
	#PA_CHANNEL_MAP_DEF_MAX
 
PA_CHANNEL_MAP_DEF_MAX


	)

258 
	#PA_CHANNEL_MAP_DEFAULT
 
PA_CHANNEL_MAP_DEFAULT


	)

264 
	s∑_ch™√l_m≠
 {

265 
uöt8_t
 
	mch™√ls
;

268 
∑_ch™√l_posôi⁄_t
 
	mm≠
[
PA_CHANNELS_MAX
];

270 } 
	t∑_ch™√l_m≠
;

275 
∑_ch™√l_m≠
* 
∑_ch™√l_m≠_öô
’a_ch™√l_m≠ *
m
);

278 
∑_ch™√l_m≠
* 
∑_ch™√l_m≠_öô_m⁄o
’a_ch™√l_m≠ *
m
);

281 
∑_ch™√l_m≠
* 
∑_ch™√l_m≠_öô_°îeo
’a_ch™√l_m≠ *
m
);

287 
∑_ch™√l_m≠
* 
∑_ch™√l_m≠_öô_auto
’a_ch™√l_m≠ *
m
, 
ch™√ls
, 
∑_ch™√l_m≠_def_t
 
def
);

293 
∑_ch™√l_m≠
* 
∑_ch™√l_m≠_öô_exãnd
’a_ch™√l_m≠ *
m
, 
ch™√ls
, 
∑_ch™√l_m≠_def_t
 
def
);

296 c⁄° * 
	$∑_ch™√l_posôi⁄_to_°rög
(
∑_ch™√l_posôi⁄_t
 
pos
Ë
PA_GCC_PURE
;

299 
∑_ch™√l_posôi⁄_t
 
	$∑_ch™√l_posôi⁄_‰om_°rög
(c⁄° *
s
Ë
PA_GCC_PURE
;

302 c⁄° * 
	`∑_ch™√l_posôi⁄_to_¥ëty_°rög
(
∑_ch™√l_posôi⁄_t
 
pos
);

309 
	#PA_CHANNEL_MAP_SNPRINT_MAX
 336

	)

312 * 
	`∑_ch™√l_m≠_¢¥öt
(*
s
, 
size_t
 
l
, c⁄° 
∑_ch™√l_m≠
 *
m≠
);

318 
∑_ch™√l_m≠
 *
	`∑_ch™√l_m≠_∑r£
’a_ch™√l_m≠ *
m≠
, c⁄° *
s
);

321 
	$∑_ch™√l_m≠_equÆ
(c⁄° 
∑_ch™√l_m≠
 *
a
, c⁄°Öa_ch™√l_m≠ *
b
Ë
PA_GCC_PURE
;

324 
	$∑_ch™√l_m≠_vÆid
(c⁄° 
∑_ch™√l_m≠
 *
m≠
Ë
PA_GCC_PURE
;

328 
	$∑_ch™√l_m≠_com∑tibÀ
(c⁄° 
∑_ch™√l_m≠
 *
m≠
, c⁄° 
∑_ßm∂e_•ec
 *
ss
Ë
PA_GCC_PURE
;

331 
	$∑_ch™√l_m≠_su≥r£t
(c⁄° 
∑_ch™√l_m≠
 *
a
, c⁄°Öa_ch™√l_m≠ *
b
Ë
PA_GCC_PURE
;

336 
	$∑_ch™√l_m≠_ˇn_bÆ™˚
(c⁄° 
∑_ch™√l_m≠
 *
m≠
Ë
PA_GCC_PURE
;

341 
	$∑_ch™√l_m≠_ˇn_Áde
(c⁄° 
∑_ch™√l_m≠
 *
m≠
Ë
PA_GCC_PURE
;

347 c⁄° * 
	$∑_ch™√l_m≠_to_«me
(c⁄° 
∑_ch™√l_m≠
 *
m≠
Ë
PA_GCC_PURE
;

352 c⁄° * 
	$∑_ch™√l_m≠_to_¥ëty_«me
(c⁄° 
∑_ch™√l_m≠
 *
m≠
Ë
PA_GCC_PURE
;

356 
	$∑_ch™√l_m≠_has_posôi⁄
(c⁄° 
∑_ch™√l_m≠
 *
m≠
, 
∑_ch™√l_posôi⁄_t
 
p
Ë
PA_GCC_PURE
;

359 
∑_ch™√l_posôi⁄_mask_t
 
	$∑_ch™√l_m≠_mask
(c⁄° 
∑_ch™√l_m≠
 *
m≠
Ë
PA_GCC_PURE
;

361 
PA_C_DECL_END


	@/usr/include/pulse/context.h

1 #i‚de‡
fooc⁄ãxthfoo


2 
	#fooc⁄ãxthfoo


	)

26 
	~<pul£/ßm∂e.h
>

27 
	~<pul£/def.h
>

28 
	~<pul£/maölo›-≠i.h
>

29 
	~<pul£/cde˛.h
>

30 
	~<pul£/›î©i⁄.h
>

31 
	~<pul£/¥›li°.h
>

32 
	~<pul£/vîsi⁄.h
>

153 
PA_C_DECL_BEGIN


156 
∑_c⁄ãxt
 
	t∑_c⁄ãxt
;

159 (*
	t∑_c⁄ãxt_nŸify_cb_t
)(
	t∑_c⁄ãxt
 *
	tc
, *
	tu£rd©a
);

162 (*
	t∑_c⁄ãxt_suc˚ss_cb_t
Ë(
	t∑_c⁄ãxt
 *
	tc
, 
	tsuc˚ss
, *
	tu£rd©a
);

169 (*
	t∑_c⁄ãxt_evít_cb_t
)(
	t∑_c⁄ãxt
 *
	tc
, c⁄° *
	t«me
, 
	t∑_¥›li°
 *
	tp
, *
	tu£rd©a
);

174 
∑_c⁄ãxt
 *
	`∑_c⁄ãxt_√w
(
∑_maölo›_≠i
 *
maölo›
, c⁄° *
«me
);

179 
∑_c⁄ãxt
 *
	`∑_c⁄ãxt_√w_wôh_¥›li°
(
∑_maölo›_≠i
 *
maölo›
, c⁄° *
«me
, 
∑_¥›li°
 *
¥›li°
);

182 
	`∑_c⁄ãxt_uƒef
(
∑_c⁄ãxt
 *
c
);

185 
∑_c⁄ãxt
* 
	`∑_c⁄ãxt_ªf
’a_c⁄ãxà*
c
);

188 
	`∑_c⁄ãxt_£t_°©e_ˇŒback
(
∑_c⁄ãxt
 *
c
, 
∑_c⁄ãxt_nŸify_cb_t
 
cb
, *
u£rd©a
);

192 
	`∑_c⁄ãxt_£t_evít_ˇŒback
(
∑_c⁄ãxt
 *
p
, 
∑_c⁄ãxt_evít_cb_t
 
cb
, *
u£rd©a
);

195 
	`∑_c⁄ãxt_î∫o
(
∑_c⁄ãxt
 *
c
);

198 
	`∑_c⁄ãxt_is_≥ndög
(
∑_c⁄ãxt
 *
c
);

201 
∑_c⁄ãxt_°©e_t
 
	`∑_c⁄ãxt_gë_°©e
(
∑_c⁄ãxt
 *
c
);

211 
	`∑_c⁄ãxt_c⁄√˘
(
∑_c⁄ãxt
 *
c
, c⁄° *
£rvî
, 
∑_c⁄ãxt_Êags_t
 
Êags
, c⁄° 
∑_•awn_≠i
 *
≠i
);

214 
	`∑_c⁄ãxt_disc⁄√˘
(
∑_c⁄ãxt
 *
c
);

217 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_døö
(
∑_c⁄ãxt
 *
c
, 
∑_c⁄ãxt_nŸify_cb_t
 
cb
, *
u£rd©a
);

222 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_exô_d´m⁄
(
∑_c⁄ãxt
 *
c
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

225 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_deÁu…_sök
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

228 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_deÁu…_sour˚
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

231 
	`∑_c⁄ãxt_is_loˇl
(
∑_c⁄ãxt
 *
c
);

234 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

237 c⁄° * 
	`∑_c⁄ãxt_gë_£rvî
(
∑_c⁄ãxt
 *
c
);

240 
uöt32_t
 
	`∑_c⁄ãxt_gë_¥Ÿocﬁ_vîsi⁄
(
∑_c⁄ãxt
 *
c
);

243 
uöt32_t
 
	`∑_c⁄ãxt_gë_£rvî_¥Ÿocﬁ_vîsi⁄
(
∑_c⁄ãxt
 *
c
);

250 
∑_›î©i⁄
 *
	`∑_c⁄ãxt_¥›li°_upd©e
(
∑_c⁄ãxt
 *
c
, 
∑_upd©e_mode_t
 
mode
, 
∑_¥›li°
 *
p
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

253 
∑_›î©i⁄
 *
	`∑_c⁄ãxt_¥›li°_ªmove
(
∑_c⁄ãxt
 *
c
, c⁄° *c⁄° 
keys
[], 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

258 
uöt32_t
 
	`∑_c⁄ãxt_gë_ödex
(
∑_c⁄ãxt
 *
s
);

262 
∑_time_evít
* 
	`∑_c⁄ãxt_πtime_√w
(
∑_c⁄ãxt
 *
c
, 
∑_u£c_t
 
u£c
, 
∑_time_evít_cb_t
 
cb
, *
u£rd©a
);

266 
	`∑_c⁄ãxt_πtime_ª°¨t
(
∑_c⁄ãxt
 *
c
, 
∑_time_evít
 *
e
, 
∑_u£c_t
 
u£c
);

281 
size_t
 
	`∑_c⁄ãxt_gë_tûe_size
(
∑_c⁄ãxt
 *
c
, c⁄° 
∑_ßm∂e_•ec
 *
ss
);

289 
	`∑_c⁄ãxt_lﬂd_cookõ_‰om_fûe
(
∑_c⁄ãxt
 *
c
, c⁄° *
cookõ_fûe_∑th
);

291 
PA_C_DECL_END


	@/usr/include/pulse/def.h

1 #i‚de‡
foodefhfoo


2 
	#foodefhfoo


	)

26 
	~<öây≥s.h
>

27 
	~<sys/time.h
>

29 
	~<pul£/cde˛.h
>

30 
	~<pul£/ßm∂e.h
>

31 
	~<pul£/vîsi⁄.h
>

36 
PA_C_DECL_BEGIN


39 
	e∑_c⁄ãxt_°©e
 {

40 
	mPA_CONTEXT_UNCONNECTED
,

41 
	mPA_CONTEXT_CONNECTING
,

42 
	mPA_CONTEXT_AUTHORIZING
,

43 
	mPA_CONTEXT_SETTING_NAME
,

44 
	mPA_CONTEXT_READY
,

45 
	mPA_CONTEXT_FAILED
,

46 
	mPA_CONTEXT_TERMINATED


47 } 
	t∑_c⁄ãxt_°©e_t
;

50 
ölöe
 
	$PA_CONTEXT_IS_GOOD
(
∑_c⁄ãxt_°©e_t
 
x
) {

52 
x
 =
PA_CONTEXT_CONNECTING
 ||

53 
x
 =
PA_CONTEXT_AUTHORIZING
 ||

54 
x
 =
PA_CONTEXT_SETTING_NAME
 ||

55 
x
 =
PA_CONTEXT_READY
;

56 
	}
}

59 
	#PA_CONTEXT_UNCONNECTED
 
PA_CONTEXT_UNCONNECTED


	)

60 
	#PA_CONTEXT_CONNECTING
 
PA_CONTEXT_CONNECTING


	)

61 
	#PA_CONTEXT_AUTHORIZING
 
PA_CONTEXT_AUTHORIZING


	)

62 
	#PA_CONTEXT_SETTING_NAME
 
PA_CONTEXT_SETTING_NAME


	)

63 
	#PA_CONTEXT_READY
 
PA_CONTEXT_READY


	)

64 
	#PA_CONTEXT_FAILED
 
PA_CONTEXT_FAILED


	)

65 
	#PA_CONTEXT_TERMINATED
 
PA_CONTEXT_TERMINATED


	)

66 
	#PA_CONTEXT_IS_GOOD
 
PA_CONTEXT_IS_GOOD


	)

70 
	e∑_°ªam_°©e
 {

71 
	mPA_STREAM_UNCONNECTED
,

72 
	mPA_STREAM_CREATING
,

73 
	mPA_STREAM_READY
,

74 
	mPA_STREAM_FAILED
,

75 
	mPA_STREAM_TERMINATED


76 } 
	t∑_°ªam_°©e_t
;

79 
ölöe
 
	$PA_STREAM_IS_GOOD
(
∑_°ªam_°©e_t
 
x
) {

81 
x
 =
PA_STREAM_CREATING
 ||

82 
x
 =
PA_STREAM_READY
;

83 
	}
}

86 
	#PA_STREAM_UNCONNECTED
 
PA_STREAM_UNCONNECTED


	)

87 
	#PA_STREAM_CREATING
 
PA_STREAM_CREATING


	)

88 
	#PA_STREAM_READY
 
PA_STREAM_READY


	)

89 
	#PA_STREAM_FAILED
 
PA_STREAM_FAILED


	)

90 
	#PA_STREAM_TERMINATED
 
PA_STREAM_TERMINATED


	)

91 
	#PA_STREAM_IS_GOOD
 
PA_STREAM_IS_GOOD


	)

95 
	e∑_›î©i⁄_°©e
 {

96 
	mPA_OPERATION_RUNNING
,

98 
	mPA_OPERATION_DONE
,

100 
	mPA_OPERATION_CANCELLED


104 } 
	t∑_›î©i⁄_°©e_t
;

107 
	#PA_OPERATION_RUNNING
 
PA_OPERATION_RUNNING


	)

108 
	#PA_OPERATION_DONE
 
PA_OPERATION_DONE


	)

109 
	#PA_OPERATION_CANCELED
 
PA_OPERATION_CANCELLED


	)

110 
	#PA_OPERATION_CANCELLED
 
PA_OPERATION_CANCELLED


	)

114 
	#PA_INVALID_INDEX
 ((
uöt32_t
Ë-1)

	)

117 
	e∑_c⁄ãxt_Êags
 {

118 
	mPA_CONTEXT_NOFLAGS
 = 0x0000U,

120 
	mPA_CONTEXT_NOAUTOSPAWN
 = 0x0001U,

122 
	mPA_CONTEXT_NOFAIL
 = 0x0002U

124 } 
	t∑_c⁄ãxt_Êags_t
;

128 
	#PA_CONTEXT_NOAUTOSPAWN
 
PA_CONTEXT_NOAUTOSPAWN


	)

129 
	#PA_CONTEXT_NOFAIL
 
PA_CONTEXT_NOFAIL


	)

136 
	e∑_dúe˘i⁄
 {

137 
	mPA_DIRECTION_OUTPUT
 = 0x0001U,

138 
	mPA_DIRECTION_INPUT
 = 0x0002U

139 } 
	t∑_dúe˘i⁄_t
;

142 
	#PA_DIRECTION_OUTPUT
 
PA_DIRECTION_OUTPUT


	)

143 
	#PA_DIRECTION_INPUT
 
PA_DIRECTION_INPUT


	)

147 
	e∑_devi˚_ty≥
 {

148 
	mPA_DEVICE_TYPE_SINK
,

149 
	mPA_DEVICE_TYPE_SOURCE


150 } 
	t∑_devi˚_ty≥_t
;

153 
	#PA_DEVICE_TYPE_SINK
 
PA_DEVICE_TYPE_SINK


	)

154 
	#PA_DEVICE_TYPE_SOURCE
 
PA_DEVICE_TYPE_SOURCE


	)

158 
	e∑_°ªam_dúe˘i⁄
 {

159 
	mPA_STREAM_NODIRECTION
,

160 
	mPA_STREAM_PLAYBACK
,

161 
	mPA_STREAM_RECORD
,

162 
	mPA_STREAM_UPLOAD


163 } 
	t∑_°ªam_dúe˘i⁄_t
;

166 
	#PA_STREAM_NODIRECTION
 
PA_STREAM_NODIRECTION


	)

167 
	#PA_STREAM_PLAYBACK
 
PA_STREAM_PLAYBACK


	)

168 
	#PA_STREAM_RECORD
 
PA_STREAM_RECORD


	)

169 
	#PA_STREAM_UPLOAD
 
PA_STREAM_UPLOAD


	)

173 
	e∑_°ªam_Êags
 {

175 
	mPA_STREAM_NOFLAGS
 = 0x0000U,

178 
	mPA_STREAM_START_CORKED
 = 0x0001U,

182 
	mPA_STREAM_INTERPOLATE_TIMING
 = 0x0002U,

194 
	mPA_STREAM_NOT_MONOTONIC
 = 0x0004U,

206 
	mPA_STREAM_AUTO_TIMING_UPDATE
 = 0x0008U,

213 
	mPA_STREAM_NO_REMAP_CHANNELS
 = 0x0010U,

219 
	mPA_STREAM_NO_REMIX_CHANNELS
 = 0x0020U,

225 
	mPA_STREAM_FIX_FORMAT
 = 0x0040U,

246 
	mPA_STREAM_FIX_RATE
 = 0x0080U,

261 
	mPA_STREAM_FIX_CHANNELS
 = 0x0100,

280 
	mPA_STREAM_DONT_MOVE
 = 0x0200U,

289 
	mPA_STREAM_VARIABLE_RATE
 = 0x0400U,

295 
	mPA_STREAM_PEAK_DETECT
 = 0x0800U,

298 
	mPA_STREAM_START_MUTED
 = 0x1000U,

304 
	mPA_STREAM_ADJUST_LATENCY
 = 0x2000U,

311 
	mPA_STREAM_EARLY_REQUESTS
 = 0x4000U,

328 
	mPA_STREAM_DONT_INHIBIT_AUTO_SUSPEND
 = 0x8000U,

333 
	mPA_STREAM_START_UNMUTED
 = 0x10000U,

339 
	mPA_STREAM_FAIL_ON_SUSPEND
 = 0x20000U,

345 
	mPA_STREAM_RELATIVE_VOLUME
 = 0x40000U,

352 
	mPA_STREAM_PASSTHROUGH
 = 0x80000U

357 } 
	t∑_°ªam_Êags_t
;

362 
	#PA_STREAM_NOT_MONOTONOUS
 
PA_STREAM_NOT_MONOTONIC


	)

365 
	#PA_STREAM_START_CORKED
 
PA_STREAM_START_CORKED


	)

366 
	#PA_STREAM_INTERPOLATE_TIMING
 
PA_STREAM_INTERPOLATE_TIMING


	)

367 
	#PA_STREAM_NOT_MONOTONIC
 
PA_STREAM_NOT_MONOTONIC


	)

368 
	#PA_STREAM_AUTO_TIMING_UPDATE
 
PA_STREAM_AUTO_TIMING_UPDATE


	)

369 
	#PA_STREAM_NO_REMAP_CHANNELS
 
PA_STREAM_NO_REMAP_CHANNELS


	)

370 
	#PA_STREAM_NO_REMIX_CHANNELS
 
PA_STREAM_NO_REMIX_CHANNELS


	)

371 
	#PA_STREAM_FIX_FORMAT
 
PA_STREAM_FIX_FORMAT


	)

372 
	#PA_STREAM_FIX_RATE
 
PA_STREAM_FIX_RATE


	)

373 
	#PA_STREAM_FIX_CHANNELS
 
PA_STREAM_FIX_CHANNELS


	)

374 
	#PA_STREAM_DONT_MOVE
 
PA_STREAM_DONT_MOVE


	)

375 
	#PA_STREAM_VARIABLE_RATE
 
PA_STREAM_VARIABLE_RATE


	)

376 
	#PA_STREAM_PEAK_DETECT
 
PA_STREAM_PEAK_DETECT


	)

377 
	#PA_STREAM_START_MUTED
 
PA_STREAM_START_MUTED


	)

378 
	#PA_STREAM_ADJUST_LATENCY
 
PA_STREAM_ADJUST_LATENCY


	)

379 
	#PA_STREAM_EARLY_REQUESTS
 
PA_STREAM_EARLY_REQUESTS


	)

380 
	#PA_STREAM_DONT_INHIBIT_AUTO_SUSPEND
 
PA_STREAM_DONT_INHIBIT_AUTO_SUSPEND


	)

381 
	#PA_STREAM_START_UNMUTED
 
PA_STREAM_START_UNMUTED


	)

382 
	#PA_STREAM_FAIL_ON_SUSPEND
 
PA_STREAM_FAIL_ON_SUSPEND


	)

383 
	#PA_STREAM_RELATIVE_VOLUME
 
PA_STREAM_RELATIVE_VOLUME


	)

384 
	#PA_STREAM_PASSTHROUGH
 
PA_STREAM_PASSTHROUGH


	)

389 
	s∑_buf„r_©å
 {

390 
uöt32_t
 
	mmaxÀngth
;

401 
uöt32_t
 
	méígth
;

419 
uöt32_t
 
	m¥ebuf
;

430 
uöt32_t
 
	mmöªq
;

440 
uöt32_t
 
	m‰agsize
;

454 } 
	t∑_buf„r_©å
;

457 
	e∑_îr‹_code
 {

458 
	mPA_OK
 = 0,

459 
	mPA_ERR_ACCESS
,

460 
	mPA_ERR_COMMAND
,

461 
	mPA_ERR_INVALID
,

462 
	mPA_ERR_EXIST
,

463 
	mPA_ERR_NOENTITY
,

464 
	mPA_ERR_CONNECTIONREFUSED
,

465 
	mPA_ERR_PROTOCOL
,

466 
	mPA_ERR_TIMEOUT
,

467 
	mPA_ERR_AUTHKEY
,

468 
	mPA_ERR_INTERNAL
,

469 
	mPA_ERR_CONNECTIONTERMINATED
,

470 
	mPA_ERR_KILLED
,

471 
	mPA_ERR_INVALIDSERVER
,

472 
	mPA_ERR_MODINITFAILED
,

473 
	mPA_ERR_BADSTATE
,

474 
	mPA_ERR_NODATA
,

475 
	mPA_ERR_VERSION
,

476 
	mPA_ERR_TOOLARGE
,

477 
	mPA_ERR_NOTSUPPORTED
,

478 
	mPA_ERR_UNKNOWN
,

479 
	mPA_ERR_NOEXTENSION
,

480 
	mPA_ERR_OBSOLETE
,

481 
	mPA_ERR_NOTIMPLEMENTED
,

482 
	mPA_ERR_FORKED
,

483 
	mPA_ERR_IO
,

484 
	mPA_ERR_BUSY
,

485 
	mPA_ERR_MAX


486 } 
	t∑_îr‹_code_t
;

489 
	#PA_OK
 
PA_OK


	)

490 
	#PA_ERR_ACCESS
 
PA_ERR_ACCESS


	)

491 
	#PA_ERR_COMMAND
 
PA_ERR_COMMAND


	)

492 
	#PA_ERR_INVALID
 
PA_ERR_INVALID


	)

493 
	#PA_ERR_EXIST
 
PA_ERR_EXIST


	)

494 
	#PA_ERR_NOENTITY
 
PA_ERR_NOENTITY


	)

495 
	#PA_ERR_CONNECTIONREFUSED
 
PA_ERR_CONNECTIONREFUSED


	)

496 
	#PA_ERR_PROTOCOL
 
PA_ERR_PROTOCOL


	)

497 
	#PA_ERR_TIMEOUT
 
PA_ERR_TIMEOUT


	)

498 
	#PA_ERR_AUTHKEY
 
PA_ERR_AUTHKEY


	)

499 
	#PA_ERR_INTERNAL
 
PA_ERR_INTERNAL


	)

500 
	#PA_ERR_CONNECTIONTERMINATED
 
PA_ERR_CONNECTIONTERMINATED


	)

501 
	#PA_ERR_KILLED
 
PA_ERR_KILLED


	)

502 
	#PA_ERR_INVALIDSERVER
 
PA_ERR_INVALIDSERVER


	)

503 
	#PA_ERR_MODINITFAILED
 
PA_ERR_MODINITFAILED


	)

504 
	#PA_ERR_BADSTATE
 
PA_ERR_BADSTATE


	)

505 
	#PA_ERR_NODATA
 
PA_ERR_NODATA


	)

506 
	#PA_ERR_VERSION
 
PA_ERR_VERSION


	)

507 
	#PA_ERR_TOOLARGE
 
PA_ERR_TOOLARGE


	)

508 
	#PA_ERR_NOTSUPPORTED
 
PA_ERR_NOTSUPPORTED


	)

509 
	#PA_ERR_UNKNOWN
 
PA_ERR_UNKNOWN


	)

510 
	#PA_ERR_NOEXTENSION
 
PA_ERR_NOEXTENSION


	)

511 
	#PA_ERR_OBSOLETE
 
PA_ERR_OBSOLETE


	)

512 
	#PA_ERR_NOTIMPLEMENTED
 
PA_ERR_NOTIMPLEMENTED


	)

513 
	#PA_ERR_FORKED
 
PA_ERR_FORKED


	)

514 
	#PA_ERR_MAX
 
PA_ERR_MAX


	)

518 
	e∑_subs¸ùti⁄_mask
 {

519 
	mPA_SUBSCRIPTION_MASK_NULL
 = 0x0000U,

522 
	mPA_SUBSCRIPTION_MASK_SINK
 = 0x0001U,

525 
	mPA_SUBSCRIPTION_MASK_SOURCE
 = 0x0002U,

528 
	mPA_SUBSCRIPTION_MASK_SINK_INPUT
 = 0x0004U,

531 
	mPA_SUBSCRIPTION_MASK_SOURCE_OUTPUT
 = 0x0008U,

534 
	mPA_SUBSCRIPTION_MASK_MODULE
 = 0x0010U,

537 
	mPA_SUBSCRIPTION_MASK_CLIENT
 = 0x0020U,

540 
	mPA_SUBSCRIPTION_MASK_SAMPLE_CACHE
 = 0x0040U,

543 
	mPA_SUBSCRIPTION_MASK_SERVER
 = 0x0080U,

547 
	mPA_SUBSCRIPTION_MASK_AUTOLOAD
 = 0x0100U,

551 
	mPA_SUBSCRIPTION_MASK_CARD
 = 0x0200U,

554 
	mPA_SUBSCRIPTION_MASK_ALL
 = 0x02ffU

556 } 
	t∑_subs¸ùti⁄_mask_t
;

559 
	e∑_subs¸ùti⁄_evít_ty≥
 {

560 
	mPA_SUBSCRIPTION_EVENT_SINK
 = 0x0000U,

563 
	mPA_SUBSCRIPTION_EVENT_SOURCE
 = 0x0001U,

566 
	mPA_SUBSCRIPTION_EVENT_SINK_INPUT
 = 0x0002U,

569 
	mPA_SUBSCRIPTION_EVENT_SOURCE_OUTPUT
 = 0x0003U,

572 
	mPA_SUBSCRIPTION_EVENT_MODULE
 = 0x0004U,

575 
	mPA_SUBSCRIPTION_EVENT_CLIENT
 = 0x0005U,

578 
	mPA_SUBSCRIPTION_EVENT_SAMPLE_CACHE
 = 0x0006U,

581 
	mPA_SUBSCRIPTION_EVENT_SERVER
 = 0x0007U,

585 
	mPA_SUBSCRIPTION_EVENT_AUTOLOAD
 = 0x0008U,

589 
	mPA_SUBSCRIPTION_EVENT_CARD
 = 0x0009U,

592 
	mPA_SUBSCRIPTION_EVENT_FACILITY_MASK
 = 0x000FU,

595 
	mPA_SUBSCRIPTION_EVENT_NEW
 = 0x0000U,

598 
	mPA_SUBSCRIPTION_EVENT_CHANGE
 = 0x0010U,

601 
	mPA_SUBSCRIPTION_EVENT_REMOVE
 = 0x0020U,

604 
	mPA_SUBSCRIPTION_EVENT_TYPE_MASK
 = 0x0030U

607 } 
	t∑_subs¸ùti⁄_evít_ty≥_t
;

610 
	#∑_subs¸ùti⁄_m©ch_Êags
(
m
, 
t
Ë(!!((mË& (1 << (—Ë& 
PA_SUBSCRIPTION_EVENT_FACILITY_MASK
))))

	)

613 
	#PA_SUBSCRIPTION_MASK_NULL
 
PA_SUBSCRIPTION_MASK_NULL


	)

614 
	#PA_SUBSCRIPTION_MASK_SINK
 
PA_SUBSCRIPTION_MASK_SINK


	)

615 
	#PA_SUBSCRIPTION_MASK_SOURCE
 
PA_SUBSCRIPTION_MASK_SOURCE


	)

616 
	#PA_SUBSCRIPTION_MASK_SINK_INPUT
 
PA_SUBSCRIPTION_MASK_SINK_INPUT


	)

617 
	#PA_SUBSCRIPTION_MASK_SOURCE_OUTPUT
 
PA_SUBSCRIPTION_MASK_SOURCE_OUTPUT


	)

618 
	#PA_SUBSCRIPTION_MASK_MODULE
 
PA_SUBSCRIPTION_MASK_MODULE


	)

619 
	#PA_SUBSCRIPTION_MASK_CLIENT
 
PA_SUBSCRIPTION_MASK_CLIENT


	)

620 
	#PA_SUBSCRIPTION_MASK_SAMPLE_CACHE
 
PA_SUBSCRIPTION_MASK_SAMPLE_CACHE


	)

621 
	#PA_SUBSCRIPTION_MASK_SERVER
 
PA_SUBSCRIPTION_MASK_SERVER


	)

622 
	#PA_SUBSCRIPTION_MASK_AUTOLOAD
 
PA_SUBSCRIPTION_MASK_AUTOLOAD


	)

623 
	#PA_SUBSCRIPTION_MASK_CARD
 
PA_SUBSCRIPTION_MASK_CARD


	)

624 
	#PA_SUBSCRIPTION_MASK_ALL
 
PA_SUBSCRIPTION_MASK_ALL


	)

625 
	#PA_SUBSCRIPTION_EVENT_SINK
 
PA_SUBSCRIPTION_EVENT_SINK


	)

626 
	#PA_SUBSCRIPTION_EVENT_SOURCE
 
PA_SUBSCRIPTION_EVENT_SOURCE


	)

627 
	#PA_SUBSCRIPTION_EVENT_SINK_INPUT
 
PA_SUBSCRIPTION_EVENT_SINK_INPUT


	)

628 
	#PA_SUBSCRIPTION_EVENT_SOURCE_OUTPUT
 
PA_SUBSCRIPTION_EVENT_SOURCE_OUTPUT


	)

629 
	#PA_SUBSCRIPTION_EVENT_MODULE
 
PA_SUBSCRIPTION_EVENT_MODULE


	)

630 
	#PA_SUBSCRIPTION_EVENT_CLIENT
 
PA_SUBSCRIPTION_EVENT_CLIENT


	)

631 
	#PA_SUBSCRIPTION_EVENT_SAMPLE_CACHE
 
PA_SUBSCRIPTION_EVENT_SAMPLE_CACHE


	)

632 
	#PA_SUBSCRIPTION_EVENT_SERVER
 
PA_SUBSCRIPTION_EVENT_SERVER


	)

633 
	#PA_SUBSCRIPTION_EVENT_AUTOLOAD
 
PA_SUBSCRIPTION_EVENT_AUTOLOAD


	)

634 
	#PA_SUBSCRIPTION_EVENT_CARD
 
PA_SUBSCRIPTION_EVENT_CARD


	)

635 
	#PA_SUBSCRIPTION_EVENT_FACILITY_MASK
 
PA_SUBSCRIPTION_EVENT_FACILITY_MASK


	)

636 
	#PA_SUBSCRIPTION_EVENT_NEW
 
PA_SUBSCRIPTION_EVENT_NEW


	)

637 
	#PA_SUBSCRIPTION_EVENT_CHANGE
 
PA_SUBSCRIPTION_EVENT_CHANGE


	)

638 
	#PA_SUBSCRIPTION_EVENT_REMOVE
 
PA_SUBSCRIPTION_EVENT_REMOVE


	)

639 
	#PA_SUBSCRIPTION_EVENT_TYPE_MASK
 
PA_SUBSCRIPTION_EVENT_TYPE_MASK


	)

660 
	s∑_timög_öfo
 {

661 
timevÆ
 
	mtime°amp
;

664 
	msynchr⁄ized_˛ocks
;

671 
∑_u£c_t
 
	msök_u£c
;

676 
∑_u£c_t
 
	msour˚_u£c
;

680 
∑_u£c_t
 
	må™•‹t_u£c
;

684 
	m∂ayög
;

691 
	mwrôe_ödex_c‹ru±
;

698 
öt64_t
 
	mwrôe_ödex
;

704 
	mªad_ödex_c‹ru±
;

709 
öt64_t
 
	mªad_ödex
;

715 
∑_u£c_t
 
	mc⁄figuªd_sök_u£c
;

718 
∑_u£c_t
 
	mc⁄figuªd_sour˚_u£c
;

721 
öt64_t
 
	msö˚_undîrun
;

727 } 
	t∑_timög_öfo
;

736 
	s∑_•awn_≠i
 {

737 (*
	m¥ef‹k
)();

741 (*
	mpo°f‹k
)();

745 (*
	m©f‹k
)();

751 } 
	t∑_•awn_≠i
;

754 
	e∑_£ek_mode
 {

755 
	mPA_SEEK_RELATIVE
 = 0,

758 
	mPA_SEEK_ABSOLUTE
 = 1,

761 
	mPA_SEEK_RELATIVE_ON_READ
 = 2,

764 
	mPA_SEEK_RELATIVE_END
 = 3

766 } 
	t∑_£ek_mode_t
;

769 
	#PA_SEEK_RELATIVE
 
PA_SEEK_RELATIVE


	)

770 
	#PA_SEEK_ABSOLUTE
 
PA_SEEK_ABSOLUTE


	)

771 
	#PA_SEEK_RELATIVE_ON_READ
 
PA_SEEK_RELATIVE_ON_READ


	)

772 
	#PA_SEEK_RELATIVE_END
 
PA_SEEK_RELATIVE_END


	)

776 
	e∑_sök_Êags
 {

777 
	mPA_SINK_NOFLAGS
 = 0x0000U,

780 
	mPA_SINK_HW_VOLUME_CTRL
 = 0x0001U,

784 
	mPA_SINK_LATENCY
 = 0x0002U,

787 
	mPA_SINK_HARDWARE
 = 0x0004U,

791 
	mPA_SINK_NETWORK
 = 0x0008U,

794 
	mPA_SINK_HW_MUTE_CTRL
 = 0x0010U,

798 
	mPA_SINK_DECIBEL_VOLUME
 = 0x0020U,

803 
	mPA_SINK_FLAT_VOLUME
 = 0x0040U,

807 
	mPA_SINK_DYNAMIC_LATENCY
 = 0x0080U,

811 
	mPA_SINK_SET_FORMATS
 = 0x0100U,

816 #ifde‡
__INCLUDED_FROM_PULSE_AUDIO


822 
	mPA_SINK_SHARE_VOLUME_WITH_MASTER
 = 0x1000000U,

826 
	mPA_SINK_DEFERRED_VOLUME
 = 0x2000000U,

831 } 
	t∑_sök_Êags_t
;

834 
	#PA_SINK_HW_VOLUME_CTRL
 
PA_SINK_HW_VOLUME_CTRL


	)

835 
	#PA_SINK_LATENCY
 
PA_SINK_LATENCY


	)

836 
	#PA_SINK_HARDWARE
 
PA_SINK_HARDWARE


	)

837 
	#PA_SINK_NETWORK
 
PA_SINK_NETWORK


	)

838 
	#PA_SINK_HW_MUTE_CTRL
 
PA_SINK_HW_MUTE_CTRL


	)

839 
	#PA_SINK_DECIBEL_VOLUME
 
PA_SINK_DECIBEL_VOLUME


	)

840 
	#PA_SINK_FLAT_VOLUME
 
PA_SINK_FLAT_VOLUME


	)

841 
	#PA_SINK_DYNAMIC_LATENCY
 
PA_SINK_DYNAMIC_LATENCY


	)

842 
	#PA_SINK_SET_FORMATS
 
PA_SINK_SET_FORMATS


	)

843 #ifde‡
__INCLUDED_FROM_PULSE_AUDIO


844 
	#PA_SINK_CLIENT_FLAGS_MASK
 0xFFFFFF

	)

850 
	e∑_sök_°©e
 {

851 
	mPA_SINK_INVALID_STATE
 = -1,

854 
	mPA_SINK_RUNNING
 = 0,

857 
	mPA_SINK_IDLE
 = 1,

860 
	mPA_SINK_SUSPENDED
 = 2,

870 
	mPA_SINK_INIT
 = -2,

873 
	mPA_SINK_UNLINKED
 = -3

877 } 
	t∑_sök_°©e_t
;

880 
ölöe
 
	$PA_SINK_IS_OPENED
(
∑_sök_°©e_t
 
x
) {

881  
x
 =
PA_SINK_RUNNING
 || x =
PA_SINK_IDLE
;

882 
	}
}

885 
ölöe
 
	$PA_SINK_IS_RUNNING
(
∑_sök_°©e_t
 
x
) {

886  
x
 =
PA_SINK_RUNNING
;

887 
	}
}

890 
	#PA_SINK_INVALID_STATE
 
PA_SINK_INVALID_STATE


	)

891 
	#PA_SINK_RUNNING
 
PA_SINK_RUNNING


	)

892 
	#PA_SINK_IDLE
 
PA_SINK_IDLE


	)

893 
	#PA_SINK_SUSPENDED
 
PA_SINK_SUSPENDED


	)

894 
	#PA_SINK_INIT
 
PA_SINK_INIT


	)

895 
	#PA_SINK_UNLINKED
 
PA_SINK_UNLINKED


	)

896 
	#PA_SINK_IS_OPENED
 
PA_SINK_IS_OPENED


	)

900 
	e∑_sour˚_Êags
 {

901 
	mPA_SOURCE_NOFLAGS
 = 0x0000U,

904 
	mPA_SOURCE_HW_VOLUME_CTRL
 = 0x0001U,

908 
	mPA_SOURCE_LATENCY
 = 0x0002U,

911 
	mPA_SOURCE_HARDWARE
 = 0x0004U,

915 
	mPA_SOURCE_NETWORK
 = 0x0008U,

918 
	mPA_SOURCE_HW_MUTE_CTRL
 = 0x0010U,

922 
	mPA_SOURCE_DECIBEL_VOLUME
 = 0x0020U,

927 
	mPA_SOURCE_DYNAMIC_LATENCY
 = 0x0040U,

931 
	mPA_SOURCE_FLAT_VOLUME
 = 0x0080U,

935 #ifde‡
__INCLUDED_FROM_PULSE_AUDIO


941 
	mPA_SOURCE_SHARE_VOLUME_WITH_MASTER
 = 0x1000000U,

945 
	mPA_SOURCE_DEFERRED_VOLUME
 = 0x2000000U,

948 } 
	t∑_sour˚_Êags_t
;

951 
	#PA_SOURCE_HW_VOLUME_CTRL
 
PA_SOURCE_HW_VOLUME_CTRL


	)

952 
	#PA_SOURCE_LATENCY
 
PA_SOURCE_LATENCY


	)

953 
	#PA_SOURCE_HARDWARE
 
PA_SOURCE_HARDWARE


	)

954 
	#PA_SOURCE_NETWORK
 
PA_SOURCE_NETWORK


	)

955 
	#PA_SOURCE_HW_MUTE_CTRL
 
PA_SOURCE_HW_MUTE_CTRL


	)

956 
	#PA_SOURCE_DECIBEL_VOLUME
 
PA_SOURCE_DECIBEL_VOLUME


	)

957 
	#PA_SOURCE_DYNAMIC_LATENCY
 
PA_SOURCE_DYNAMIC_LATENCY


	)

958 
	#PA_SOURCE_FLAT_VOLUME
 
PA_SOURCE_FLAT_VOLUME


	)

959 #ifde‡
__INCLUDED_FROM_PULSE_AUDIO


960 
	#PA_SOURCE_CLIENT_FLAGS_MASK
 0xFFFFFF

	)

966 
	e∑_sour˚_°©e
 {

967 
	mPA_SOURCE_INVALID_STATE
 = -1,

970 
	mPA_SOURCE_RUNNING
 = 0,

973 
	mPA_SOURCE_IDLE
 = 1,

976 
	mPA_SOURCE_SUSPENDED
 = 2,

986 
	mPA_SOURCE_INIT
 = -2,

989 
	mPA_SOURCE_UNLINKED
 = -3

993 } 
	t∑_sour˚_°©e_t
;

996 
ölöe
 
	$PA_SOURCE_IS_OPENED
(
∑_sour˚_°©e_t
 
x
) {

997  
x
 =
PA_SOURCE_RUNNING
 || x =
PA_SOURCE_IDLE
;

998 
	}
}

1001 
ölöe
 
	$PA_SOURCE_IS_RUNNING
(
∑_sour˚_°©e_t
 
x
) {

1002  
x
 =
PA_SOURCE_RUNNING
;

1003 
	}
}

1006 
	#PA_SOURCE_INVALID_STATE
 
PA_SOURCE_INVALID_STATE


	)

1007 
	#PA_SOURCE_RUNNING
 
PA_SOURCE_RUNNING


	)

1008 
	#PA_SOURCE_IDLE
 
PA_SOURCE_IDLE


	)

1009 
	#PA_SOURCE_SUSPENDED
 
PA_SOURCE_SUSPENDED


	)

1010 
	#PA_SOURCE_INIT
 
PA_SOURCE_INIT


	)

1011 
	#PA_SOURCE_UNLINKED
 
PA_SOURCE_UNLINKED


	)

1012 
	#PA_SOURCE_IS_OPENED
 
PA_SOURCE_IS_OPENED


	)

1016 (*
	t∑_‰ì_cb_t
)(*
	tp
);

1021 
	#PA_STREAM_EVENT_REQUEST_CORK
 "ªque°-c‹k"

	)

1026 
	#PA_STREAM_EVENT_REQUEST_UNCORK
 "ªque°-unc‹k"

	)

1033 
	#PA_STREAM_EVENT_FORMAT_LOST
 "f‹m©-lo°"

	)

1035 #i‚de‡
__INCLUDED_FROM_PULSE_AUDIO


1038 
	e∑_p‹t_avaûabÀ
 {

1039 
PA_PORT_AVAILABLE_UNKNOWN
 = 0,

1040 
PA_PORT_AVAILABLE_NO
 = 1,

1041 
PA_PORT_AVAILABLE_YES
 = 2,

1042 } 
	t∑_p‹t_avaûabÀ_t
;

1045 
	#PA_PORT_AVAILABLE_UNKNOWN
 
PA_PORT_AVAILABLE_UNKNOWN


	)

1046 
	#PA_PORT_AVAILABLE_NO
 
PA_PORT_AVAILABLE_NO


	)

1047 
	#PA_PORT_AVAILABLE_YES
 
PA_PORT_AVAILABLE_YES


	)

1052 
PA_C_DECL_END


	@/usr/include/pulse/error.h

1 #i‚de‡
fo€º‹hfoo


2 
	#fo€º‹hfoo


	)

26 
	~<pul£/cde˛.h
>

27 
	~<pul£/vîsi⁄.h
>

32 
PA_C_DECL_BEGIN


35 c⁄° * 
∑_°ªº‹
(
îr‹
);

37 
	gPA_C_DECL_END


	@/usr/include/pulse/format.h

1 #i‚de‡
foof‹m©hfoo


2 
	#foof‹m©hfoo


	)

27 
	~<pul£/cde˛.h
>

28 
	~<pul£/gccma¸o.h
>

29 
	~<pul£/¥›li°.h
>

30 
	~<pul£/ßm∂e.h
>

31 
	~<pul£/ch™√lm≠.h
>

36 
PA_C_DECL_BEGIN


39 
	e∑_ícodög
 {

40 
	mPA_ENCODING_ANY
,

43 
	mPA_ENCODING_PCM
,

46 
	mPA_ENCODING_AC3_IEC61937
,

49 
	mPA_ENCODING_EAC3_IEC61937
,

52 
	mPA_ENCODING_MPEG_IEC61937
,

55 
	mPA_ENCODING_DTS_IEC61937
,

58 
	mPA_ENCODING_MPEG2_AAC_IEC61937
,

61 
	mPA_ENCODING_MAX
,

64 
	mPA_ENCODING_INVALID
 = -1,

66 } 
	t∑_ícodög_t
;

69 
	#PA_ENCODING_ANY
 
PA_ENCODING_ANY


	)

70 
	#PA_ENCODING_PCM
 
PA_ENCODING_PCM


	)

71 
	#PA_ENCODING_AC3_IEC61937
 
PA_ENCODING_AC3_IEC61937


	)

72 
	#PA_ENCODING_EAC3_IEC61937
 
PA_ENCODING_EAC3_IEC61937


	)

73 
	#PA_ENCODING_MPEG_IEC61937
 
PA_ENCODING_MPEG_IEC61937


	)

74 
	#PA_ENCODING_DTS_IEC61937
 
PA_ENCODING_DTS_IEC61937


	)

75 
	#PA_ENCODING_MPEG2_AAC_IEC61937
 
PA_ENCODING_MPEG2_AAC_IEC61937


	)

76 
	#PA_ENCODING_MAX
 
PA_ENCODING_MAX


	)

77 
	#PA_ENCODING_INVALID
 
PA_ENCODING_INVALID


	)

81 c⁄° *
	$∑_ícodög_to_°rög
(
∑_ícodög_t
 
e
Ë
PA_GCC_CONST
;

84 
∑_ícodög_t
 
	`∑_ícodög_‰om_°rög
(c⁄° *
ícodög
);

87 
	s∑_f‹m©_öfo
 {

88 
∑_ícodög_t
 
ícodög
;

91 
∑_¥›li°
 *
∂i°
;

93 } 
	t∑_f‹m©_öfo
;

96 
∑_f‹m©_öfo
* 
	`∑_f‹m©_öfo_√w
();

99 
∑_f‹m©_öfo
* 
	`∑_f‹m©_öfo_c›y
(c⁄°Öa_f‹m©_öfÿ*
§c
);

102 
	`∑_f‹m©_öfo_‰ì
(
∑_f‹m©_öfo
 *
f
);

105 
	`∑_f‹m©_öfo_vÆid
(c⁄° 
∑_f‹m©_öfo
 *
f
);

108 
	`∑_f‹m©_öfo_is_pcm
(c⁄° 
∑_f‹m©_öfo
 *
f
);

117 
	`∑_f‹m©_öfo_is_com∑tibÀ
(c⁄° 
∑_f‹m©_öfo
 *
fú°
, c⁄°Öa_f‹m©_öfÿ*
£c⁄d
);

124 
	#PA_FORMAT_INFO_SNPRINT_MAX
 256

	)

127 *
	`∑_f‹m©_öfo_¢¥öt
(*
s
, 
size_t
 
l
, c⁄° 
∑_f‹m©_öfo
 *
f
);

131 
∑_f‹m©_öfo
* 
	`∑_f‹m©_öfo_‰om_°rög
(c⁄° *
°r
);

145 
∑_f‹m©_öfo
* 
	`∑_f‹m©_öfo_‰om_ßm∂e_•ec
(c⁄° 
∑_ßm∂e_•ec
 *
ss
, c⁄° 
∑_ch™√l_m≠
 *
m≠
);

152 
	`∑_f‹m©_öfo_to_ßm∂e_•ec
(c⁄° 
∑_f‹m©_öfo
 *
f
, 
∑_ßm∂e_•ec
 *
ss
, 
∑_ch™√l_m≠
 *
m≠
);

155 
	e∑_¥›_ty≥_t
 {

156 
PA_PROP_TYPE_INT
,

159 
PA_PROP_TYPE_INT_RANGE
,

162 
PA_PROP_TYPE_INT_ARRAY
,

165 
PA_PROP_TYPE_STRING
,

168 
PA_PROP_TYPE_STRING_ARRAY
,

171 
PA_PROP_TYPE_INVALID
 = -1,

173 } 
	t∑_¥›_ty≥_t
;

176 
	#PA_PROP_TYPE_INT
 
PA_PROP_TYPE_INT


	)

177 
	#PA_PROP_TYPE_INT_RANGE
 
PA_PROP_TYPE_INT_RANGE


	)

178 
	#PA_PROP_TYPE_INT_ARRAY
 
PA_PROP_TYPE_INT_ARRAY


	)

179 
	#PA_PROP_TYPE_STRING
 
PA_PROP_TYPE_STRING


	)

180 
	#PA_PROP_TYPE_STRING_ARRAY
 
PA_PROP_TYPE_STRING_ARRAY


	)

181 
	#PA_PROP_TYPE_INVALID
 
PA_PROP_TYPE_INVALID


	)

185 
∑_¥›_ty≥_t
 
	`∑_f‹m©_öfo_gë_¥›_ty≥
(c⁄° 
∑_f‹m©_öfo
 *
f
, c⁄° *
key
);

188 
	`∑_f‹m©_öfo_gë_¥›_öt
(c⁄° 
∑_f‹m©_öfo
 *
f
, c⁄° *
key
, *
v
);

191 
	`∑_f‹m©_öfo_gë_¥›_öt_ønge
(c⁄° 
∑_f‹m©_öfo
 *
f
, c⁄° *
key
, *
mö
, *
max
);

195 
	`∑_f‹m©_öfo_gë_¥›_öt_¨øy
(c⁄° 
∑_f‹m©_öfo
 *
f
, c⁄° *
key
, **
vÆues
, *
n_vÆues
);

198 
	`∑_f‹m©_öfo_gë_¥›_°rög
(c⁄° 
∑_f‹m©_öfo
 *
f
, c⁄° *
key
, **
v
);

202 
	`∑_f‹m©_öfo_gë_¥›_°rög_¨øy
(c⁄° 
∑_f‹m©_öfo
 *
f
, c⁄° *
key
, ***
vÆues
, *
n_vÆues
);

205 
	`∑_f‹m©_öfo_‰ì_°rög_¨øy
(**
vÆues
, 
n_vÆues
);

208 
	`∑_f‹m©_öfo_£t_¥›_öt
(
∑_f‹m©_öfo
 *
f
, c⁄° *
key
, 
vÆue
);

210 
	`∑_f‹m©_öfo_£t_¥›_öt_¨øy
(
∑_f‹m©_öfo
 *
f
, c⁄° *
key
, c⁄° *
vÆues
, 
n_vÆues
);

212 
	`∑_f‹m©_öfo_£t_¥›_öt_ønge
(
∑_f‹m©_öfo
 *
f
, c⁄° *
key
, 
mö
, 
max
);

214 
	`∑_f‹m©_öfo_£t_¥›_°rög
(
∑_f‹m©_öfo
 *
f
, c⁄° *
key
, c⁄° *
vÆue
);

216 
	`∑_f‹m©_öfo_£t_¥›_°rög_¨øy
(
∑_f‹m©_öfo
 *
f
, c⁄° *
key
, c⁄° **
vÆues
, 
n_vÆues
);

227 
	`∑_f‹m©_öfo_£t_ßm∂e_f‹m©
(
∑_f‹m©_öfo
 *
f
, 
∑_ßm∂e_f‹m©_t
 
sf
);

238 
	`∑_f‹m©_öfo_£t_øã
(
∑_f‹m©_öfo
 *
f
, 
øã
);

249 
	`∑_f‹m©_öfo_£t_ch™√ls
(
∑_f‹m©_öfo
 *
f
, 
ch™√ls
);

260 
	`∑_f‹m©_öfo_£t_ch™√l_m≠
(
∑_f‹m©_öfo
 *
f
, c⁄° 
∑_ch™√l_m≠
 *
m≠
);

262 
PA_C_DECL_END


	@/usr/include/pulse/introspect.h

1 #i‚de‡
fooöåo•e˘hfoo


2 
	#fooöåo•e˘hfoo


	)

26 
	~<öây≥s.h
>

28 
	~<pul£/›î©i⁄.h
>

29 
	~<pul£/c⁄ãxt.h
>

30 
	~<pul£/cde˛.h
>

31 
	~<pul£/gccma¸o.h
>

32 
	~<pul£/ch™√lm≠.h
>

33 
	~<pul£/vﬁume.h
>

34 
	~<pul£/¥›li°.h
>

35 
	~<pul£/f‹m©.h
>

36 
	~<pul£/vîsi⁄.h
>

222 
PA_C_DECL_BEGIN


229 
	s∑_sök_p‹t_öfo
 {

230 c⁄° *
	m«me
;

231 c⁄° *
	mdes¸ùti⁄
;

232 
uöt32_t
 
	m¥i‹ôy
;

233 
	mavaûabÀ
;

234 } 
	t∑_sök_p‹t_öfo
;

239 
	s∑_sök_öfo
 {

240 c⁄° *
	m«me
;

241 
uöt32_t
 
	mödex
;

242 c⁄° *
	mdes¸ùti⁄
;

243 
∑_ßm∂e_•ec
 
	mßm∂e_•ec
;

244 
∑_ch™√l_m≠
 
	mch™√l_m≠
;

245 
uöt32_t
 
	mow√r_moduÀ
;

246 
∑_cvﬁume
 
	mvﬁume
;

247 
	mmuã
;

248 
uöt32_t
 
	mm⁄ô‹_sour˚
;

249 c⁄° *
	mm⁄ô‹_sour˚_«me
;

250 
∑_u£c_t
 
	mœãncy
;

251 c⁄° *
	mdrivî
;

252 
∑_sök_Êags_t
 
	mÊags
;

253 
∑_¥›li°
 *
	m¥›li°
;

254 
∑_u£c_t
 
	mc⁄figuªd_œãncy
;

255 
∑_vﬁume_t
 
	mba£_vﬁume
;

256 
∑_sök_°©e_t
 
	m°©e
;

257 
uöt32_t
 
	mn_vﬁume_°ïs
;

258 
uöt32_t
 
	mˇrd
;

259 
uöt32_t
 
	mn_p‹ts
;

260 
∑_sök_p‹t_öfo
** 
	mp‹ts
;

261 
∑_sök_p‹t_öfo
* 
	ma˘ive_p‹t
;

262 
uöt8_t
 
	mn_f‹m©s
;

263 
∑_f‹m©_öfo
 **
	mf‹m©s
;

264 } 
	t∑_sök_öfo
;

267 (*
	t∑_sök_öfo_cb_t
)(
	t∑_c⁄ãxt
 *
	tc
, c⁄° 
	t∑_sök_öfo
 *
	ti
, 
	teﬁ
, *
	tu£rd©a
);

270 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_sök_öfo_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, 
∑_sök_öfo_cb_t
 
cb
, *
u£rd©a
);

273 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_sök_öfo_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_sök_öfo_cb_t
 
cb
, *
u£rd©a
);

276 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_sök_öfo_li°
(
∑_c⁄ãxt
 *
c
, 
∑_sök_öfo_cb_t
 
cb
, *
u£rd©a
);

279 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sök_vﬁume_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, c⁄° 
∑_cvﬁume
 *
vﬁume
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

282 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sök_vﬁume_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, c⁄° 
∑_cvﬁume
 *
vﬁume
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

285 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sök_muã_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
muã
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

288 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sök_muã_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, 
muã
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

291 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_su•íd_sök_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
sök_«me
, 
su•íd
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, * 
u£rd©a
);

294 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_su•íd_sök_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
su•íd
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, * 
u£rd©a
);

297 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sök_p‹t_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, c⁄° *
p‹t
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

300 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sök_p‹t_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, c⁄° *
p‹t
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

309 
	s∑_sour˚_p‹t_öfo
 {

310 c⁄° *
«me
;

311 c⁄° *
des¸ùti⁄
;

312 
uöt32_t
 
¥i‹ôy
;

313 
avaûabÀ
;

314 } 
	t∑_sour˚_p‹t_öfo
;

319 
	s∑_sour˚_öfo
 {

320 c⁄° *
«me
;

321 
uöt32_t
 
ödex
;

322 c⁄° *
des¸ùti⁄
;

323 
∑_ßm∂e_•ec
 
ßm∂e_•ec
;

324 
∑_ch™√l_m≠
 
ch™√l_m≠
;

325 
uöt32_t
 
ow√r_moduÀ
;

326 
∑_cvﬁume
 
vﬁume
;

327 
muã
;

328 
uöt32_t
 
m⁄ô‹_of_sök
;

329 c⁄° *
m⁄ô‹_of_sök_«me
;

330 
∑_u£c_t
 
œãncy
;

331 c⁄° *
drivî
;

332 
∑_sour˚_Êags_t
 
Êags
;

333 
∑_¥›li°
 *
¥›li°
;

334 
∑_u£c_t
 
c⁄figuªd_œãncy
;

335 
∑_vﬁume_t
 
ba£_vﬁume
;

336 
∑_sour˚_°©e_t
 
°©e
;

337 
uöt32_t
 
n_vﬁume_°ïs
;

338 
uöt32_t
 
ˇrd
;

339 
uöt32_t
 
n_p‹ts
;

340 
∑_sour˚_p‹t_öfo
** 
p‹ts
;

341 
∑_sour˚_p‹t_öfo
* 
a˘ive_p‹t
;

342 
uöt8_t
 
n_f‹m©s
;

343 
∑_f‹m©_öfo
 **
f‹m©s
;

344 } 
	t∑_sour˚_öfo
;

347 (*
	t∑_sour˚_öfo_cb_t
)(
	t∑_c⁄ãxt
 *
	tc
, c⁄° 
	t∑_sour˚_öfo
 *
	ti
, 
	teﬁ
, *
	tu£rd©a
);

350 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_sour˚_öfo_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, 
∑_sour˚_öfo_cb_t
 
cb
, *
u£rd©a
);

353 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_sour˚_öfo_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_sour˚_öfo_cb_t
 
cb
, *
u£rd©a
);

356 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_sour˚_öfo_li°
(
∑_c⁄ãxt
 *
c
, 
∑_sour˚_öfo_cb_t
 
cb
, *
u£rd©a
);

359 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sour˚_vﬁume_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, c⁄° 
∑_cvﬁume
 *
vﬁume
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

362 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sour˚_vﬁume_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, c⁄° 
∑_cvﬁume
 *
vﬁume
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

365 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sour˚_muã_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
muã
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

368 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sour˚_muã_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, 
muã
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

371 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_su•íd_sour˚_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
sour˚_«me
, 
su•íd
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, * 
u£rd©a
);

374 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_su•íd_sour˚_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
su•íd
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, * 
u£rd©a
);

377 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sour˚_p‹t_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, c⁄° *
p‹t
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

380 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sour˚_p‹t_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, c⁄° *
p‹t
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

389 
	s∑_£rvî_öfo
 {

390 c⁄° *
u£r_«me
;

391 c⁄° *
ho°_«me
;

392 c⁄° *
£rvî_vîsi⁄
;

393 c⁄° *
£rvî_«me
;

394 
∑_ßm∂e_•ec
 
ßm∂e_•ec
;

395 c⁄° *
deÁu…_sök_«me
;

396 c⁄° *
deÁu…_sour˚_«me
;

397 
uöt32_t
 
cookõ
;

398 
∑_ch™√l_m≠
 
ch™√l_m≠
;

399 } 
	t∑_£rvî_öfo
;

402 (*
	t∑_£rvî_öfo_cb_t
Ë(
	t∑_c⁄ãxt
 *
	tc
, c⁄° 
	t∑_£rvî_öfo
*
	ti
, *
	tu£rd©a
);

405 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_£rvî_öfo
(
∑_c⁄ãxt
 *
c
, 
∑_£rvî_öfo_cb_t
 
cb
, *
u£rd©a
);

414 
	s∑_moduÀ_öfo
 {

415 
uöt32_t
 
ödex
;

416 c⁄° *
«me
,

417 *
¨gumít
;

418 
uöt32_t
 
n_u£d
;

420 
auto_u∆ﬂd
;

422 
∑_¥›li°
 *
¥›li°
;

423 } 
	t∑_moduÀ_öfo
;

426 (*
	t∑_moduÀ_öfo_cb_t
Ë(
	t∑_c⁄ãxt
 *
	tc
, c⁄° 
	t∑_moduÀ_öfo
*
	ti
, 
	teﬁ
, *
	tu£rd©a
);

429 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_moduÀ_öfo
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_moduÀ_öfo_cb_t
 
cb
, *
u£rd©a
);

432 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_moduÀ_öfo_li°
(
∑_c⁄ãxt
 *
c
, 
∑_moduÀ_öfo_cb_t
 
cb
, *
u£rd©a
);

435 (*
	t∑_c⁄ãxt_ödex_cb_t
)(
	t∑_c⁄ãxt
 *
	tc
, 
	tuöt32_t
 
	tidx
, *
	tu£rd©a
);

438 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_lﬂd_moduÀ
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, c⁄° *
¨gumít
, 
∑_c⁄ãxt_ödex_cb_t
 
cb
, *
u£rd©a
);

441 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_u∆ﬂd_moduÀ
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

450 
	s∑_˛õ¡_öfo
 {

451 
uöt32_t
 
ödex
;

452 c⁄° *
«me
;

453 
uöt32_t
 
ow√r_moduÀ
;

454 c⁄° *
drivî
;

455 
∑_¥›li°
 *
¥›li°
;

456 } 
	t∑_˛õ¡_öfo
;

459 (*
	t∑_˛õ¡_öfo_cb_t
Ë(
	t∑_c⁄ãxt
 *
	tc
, c⁄° 
	t∑_˛õ¡_öfo
*
	ti
, 
	teﬁ
, *
	tu£rd©a
);

462 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_˛õ¡_öfo
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_˛õ¡_öfo_cb_t
 
cb
, *
u£rd©a
);

465 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_˛õ¡_öfo_li°
(
∑_c⁄ãxt
 *
c
, 
∑_˛õ¡_öfo_cb_t
 
cb
, *
u£rd©a
);

468 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_kûl_˛õ¡
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

475 
	s∑_ˇrd_¥ofûe_öfo
 {

476 c⁄° *
«me
;

477 c⁄° *
des¸ùti⁄
;

478 
uöt32_t
 
n_söks
;

479 
uöt32_t
 
n_sour˚s
;

480 
uöt32_t
 
¥i‹ôy
;

481 } 
	t∑_ˇrd_¥ofûe_öfo
;

486 
	s∑_ˇrd_¥ofûe_öfo2
 {

487 c⁄° *
«me
;

488 c⁄° *
des¸ùti⁄
;

489 
uöt32_t
 
n_söks
;

490 
uöt32_t
 
n_sour˚s
;

491 
uöt32_t
 
¥i‹ôy
;

492 
avaûabÀ
;

498 } 
	t∑_ˇrd_¥ofûe_öfo2
;

503 
	s∑_ˇrd_p‹t_öfo
 {

504 c⁄° *
«me
;

505 c⁄° *
des¸ùti⁄
;

506 
uöt32_t
 
¥i‹ôy
;

507 
avaûabÀ
;

508 
dúe˘i⁄
;

509 
uöt32_t
 
n_¥ofûes
;

510 
∑_ˇrd_¥ofûe_öfo
** 
¥ofûes
;

511 
∑_¥›li°
 *
¥›li°
;

512 
öt64_t
 
œãncy_off£t
;

513 
∑_ˇrd_¥ofûe_öfo2
** 
¥ofûes2
;

514 } 
	t∑_ˇrd_p‹t_öfo
;

519 
	s∑_ˇrd_öfo
 {

520 
uöt32_t
 
ödex
;

521 c⁄° *
«me
;

522 
uöt32_t
 
ow√r_moduÀ
;

523 c⁄° *
drivî
;

524 
uöt32_t
 
n_¥ofûes
;

525 
∑_ˇrd_¥ofûe_öfo
* 
¥ofûes
;

526 
∑_ˇrd_¥ofûe_öfo
* 
a˘ive_¥ofûe
;

527 
∑_¥›li°
 *
¥›li°
;

528 
uöt32_t
 
n_p‹ts
;

529 
∑_ˇrd_p‹t_öfo
 **
p‹ts
;

530 
∑_ˇrd_¥ofûe_öfo2
** 
¥ofûes2
;

531 
∑_ˇrd_¥ofûe_öfo2
* 
a˘ive_¥ofûe2
;

532 } 
	t∑_ˇrd_öfo
;

535 (*
	t∑_ˇrd_öfo_cb_t
Ë(
	t∑_c⁄ãxt
 *
	tc
, c⁄° 
	t∑_ˇrd_öfo
*
	ti
, 
	teﬁ
, *
	tu£rd©a
);

538 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_ˇrd_öfo_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_ˇrd_öfo_cb_t
 
cb
, *
u£rd©a
);

541 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_ˇrd_öfo_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, 
∑_ˇrd_öfo_cb_t
 
cb
, *
u£rd©a
);

544 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_ˇrd_öfo_li°
(
∑_c⁄ãxt
 *
c
, 
∑_ˇrd_öfo_cb_t
 
cb
, *
u£rd©a
);

547 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_ˇrd_¥ofûe_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, c⁄° *
¥ofûe
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

550 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_ˇrd_¥ofûe_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, c⁄° *
¥ofûe
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

553 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_p‹t_œãncy_off£t
(
∑_c⁄ãxt
 *
c
, c⁄° *
ˇrd_«me
, c⁄° *
p‹t_«me
, 
öt64_t
 
off£t
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

562 
	s∑_sök_öput_öfo
 {

563 
uöt32_t
 
ödex
;

564 c⁄° *
«me
;

565 
uöt32_t
 
ow√r_moduÀ
;

566 
uöt32_t
 
˛õ¡
;

567 
uöt32_t
 
sök
;

568 
∑_ßm∂e_•ec
 
ßm∂e_•ec
;

569 
∑_ch™√l_m≠
 
ch™√l_m≠
;

570 
∑_cvﬁume
 
vﬁume
;

571 
∑_u£c_t
 
buf„r_u£c
;

572 
∑_u£c_t
 
sök_u£c
;

573 c⁄° *
ªßm∂e_mëhod
;

574 c⁄° *
drivî
;

575 
muã
;

576 
∑_¥›li°
 *
¥›li°
;

577 
c‹ked
;

578 
has_vﬁume
;

579 
vﬁume_wrôabÀ
;

580 
∑_f‹m©_öfo
 *
f‹m©
;

581 } 
	t∑_sök_öput_öfo
;

584 (*
	t∑_sök_öput_öfo_cb_t
Ë(
	t∑_c⁄ãxt
 *
	tc
, c⁄° 
	t∑_sök_öput_öfo
 *
	ti
, 
	teﬁ
, *
	tu£rd©a
);

587 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_sök_öput_öfo
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_sök_öput_öfo_cb_t
 
cb
, *
u£rd©a
);

590 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_sök_öput_öfo_li°
(
∑_c⁄ãxt
 *
c
, 
∑_sök_öput_öfo_cb_t
 
cb
, *
u£rd©a
);

593 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_move_sök_öput_by_«me
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, c⁄° *
sök_«me
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, * 
u£rd©a
);

596 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_move_sök_öput_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, uöt32_à
sök_idx
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, * 
u£rd©a
);

599 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sök_öput_vﬁume
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, c⁄° 
∑_cvﬁume
 *
vﬁume
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

602 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sök_öput_muã
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
muã
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

605 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_kûl_sök_öput
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

614 
	s∑_sour˚_ouçut_öfo
 {

615 
uöt32_t
 
ödex
;

616 c⁄° *
«me
;

617 
uöt32_t
 
ow√r_moduÀ
;

618 
uöt32_t
 
˛õ¡
;

619 
uöt32_t
 
sour˚
;

620 
∑_ßm∂e_•ec
 
ßm∂e_•ec
;

621 
∑_ch™√l_m≠
 
ch™√l_m≠
;

622 
∑_u£c_t
 
buf„r_u£c
;

623 
∑_u£c_t
 
sour˚_u£c
;

624 c⁄° *
ªßm∂e_mëhod
;

625 c⁄° *
drivî
;

626 
∑_¥›li°
 *
¥›li°
;

627 
c‹ked
;

628 
∑_cvﬁume
 
vﬁume
;

629 
muã
;

630 
has_vﬁume
;

631 
vﬁume_wrôabÀ
;

632 
∑_f‹m©_öfo
 *
f‹m©
;

633 } 
	t∑_sour˚_ouçut_öfo
;

636 (*
	t∑_sour˚_ouçut_öfo_cb_t
Ë(
	t∑_c⁄ãxt
 *
	tc
, c⁄° 
	t∑_sour˚_ouçut_öfo
 *
	ti
, 
	teﬁ
, *
	tu£rd©a
);

639 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_sour˚_ouçut_öfo
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_sour˚_ouçut_öfo_cb_t
 
cb
, *
u£rd©a
);

642 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_sour˚_ouçut_öfo_li°
(
∑_c⁄ãxt
 *
c
, 
∑_sour˚_ouçut_öfo_cb_t
 
cb
, *
u£rd©a
);

645 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_move_sour˚_ouçut_by_«me
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, c⁄° *
sour˚_«me
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, * 
u£rd©a
);

648 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_move_sour˚_ouçut_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, uöt32_à
sour˚_idx
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, * 
u£rd©a
);

651 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sour˚_ouçut_vﬁume
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, c⁄° 
∑_cvﬁume
 *
vﬁume
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

654 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_£t_sour˚_ouçut_muã
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
muã
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

657 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_kûl_sour˚_ouçut
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

666 
	s∑_°©_öfo
 {

667 
uöt32_t
 
memblock_tŸÆ
;

668 
uöt32_t
 
memblock_tŸÆ_size
;

669 
uöt32_t
 
memblock_Æloˇãd
;

670 
uöt32_t
 
memblock_Æloˇãd_size
;

671 
uöt32_t
 
sˇche_size
;

672 } 
	t∑_°©_öfo
;

675 (*
	t∑_°©_öfo_cb_t
Ë(
	t∑_c⁄ãxt
 *
	tc
, c⁄° 
	t∑_°©_öfo
 *
	ti
, *
	tu£rd©a
);

678 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_°©
(
∑_c⁄ãxt
 *
c
, 
∑_°©_öfo_cb_t
 
cb
, *
u£rd©a
);

687 
	s∑_ßm∂e_öfo
 {

688 
uöt32_t
 
ödex
;

689 c⁄° *
«me
;

690 
∑_cvﬁume
 
vﬁume
;

691 
∑_ßm∂e_•ec
 
ßm∂e_•ec
;

692 
∑_ch™√l_m≠
 
ch™√l_m≠
;

693 
∑_u£c_t
 
duøti⁄
;

694 
uöt32_t
 
byãs
;

695 
œzy
;

696 c⁄° *
fûíame
;

697 
∑_¥›li°
 *
¥›li°
;

698 } 
	t∑_ßm∂e_öfo
;

701 (*
	t∑_ßm∂e_öfo_cb_t
)(
	t∑_c⁄ãxt
 *
	tc
, c⁄° 
	t∑_ßm∂e_öfo
 *
	ti
, 
	teﬁ
, *
	tu£rd©a
);

704 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_ßm∂e_öfo_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, 
∑_ßm∂e_öfo_cb_t
 
cb
, *
u£rd©a
);

707 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_ßm∂e_öfo_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_ßm∂e_öfo_cb_t
 
cb
, *
u£rd©a
);

710 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_gë_ßm∂e_öfo_li°
(
∑_c⁄ãxt
 *
c
, 
∑_ßm∂e_öfo_cb_t
 
cb
, *
u£rd©a
);

719 
	e∑_autﬁﬂd_ty≥
 {

720 
PA_AUTOLOAD_SINK
 = 0,

721 
PA_AUTOLOAD_SOURCE
 = 1

722 } 
	t∑_autﬁﬂd_ty≥_t
;

727 
	s∑_autﬁﬂd_öfo
 {

728 
uöt32_t
 
ödex
;

729 c⁄° *
«me
;

730 
∑_autﬁﬂd_ty≥_t
 
ty≥
;

731 c⁄° *
moduÀ
;

732 c⁄° *
¨gumít
;

733 } 
	t∑_autﬁﬂd_öfo
;

736 (*
	t∑_autﬁﬂd_öfo_cb_t
)(
	t∑_c⁄ãxt
 *
	tc
, c⁄° 
	t∑_autﬁﬂd_öfo
 *
	ti
, 
	teﬁ
, *
	tu£rd©a
);

739 
∑_›î©i⁄
* 
	$∑_c⁄ãxt_gë_autﬁﬂd_öfo_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, 
∑_autﬁﬂd_ty≥_t
 
ty≥
, 
∑_autﬁﬂd_öfo_cb_t
 
cb
, *
u£rd©a
Ë
PA_GCC_DEPRECATED
;

742 
∑_›î©i⁄
* 
	$∑_c⁄ãxt_gë_autﬁﬂd_öfo_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_autﬁﬂd_öfo_cb_t
 
cb
, *
u£rd©a
Ë
PA_GCC_DEPRECATED
;

745 
∑_›î©i⁄
* 
	$∑_c⁄ãxt_gë_autﬁﬂd_öfo_li°
(
∑_c⁄ãxt
 *
c
, 
∑_autﬁﬂd_öfo_cb_t
 
cb
, *
u£rd©a
Ë
PA_GCC_DEPRECATED
;

748 
∑_›î©i⁄
* 
	$∑_c⁄ãxt_add_autﬁﬂd
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, 
∑_autﬁﬂd_ty≥_t
 
ty≥
, c⁄° *
moduÀ
, c⁄° *
¨gumít
, 
∑_c⁄ãxt_ödex_cb_t
, * 
u£rd©a
Ë
PA_GCC_DEPRECATED
;

751 
∑_›î©i⁄
* 
	$∑_c⁄ãxt_ªmove_autﬁﬂd_by_«me
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, 
∑_autﬁﬂd_ty≥_t
 
ty≥
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, * 
u£rd©a
Ë
PA_GCC_DEPRECATED
;

754 
∑_›î©i⁄
* 
	$∑_c⁄ãxt_ªmove_autﬁﬂd_by_ödex
(
∑_c⁄ãxt
 *
c
, 
uöt32_t
 
idx
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, * 
u£rd©a
Ë
PA_GCC_DEPRECATED
;

760 
PA_C_DECL_END


	@/usr/include/pulse/mainloop-api.h

1 #i‚de‡
foomaölo›≠ihfoo


2 
	#foomaölo›≠ihfoo


	)

26 
	~<sys/time.h
>

28 
	~<pul£/cde˛.h
>

29 
	~<pul£/vîsi⁄.h
>

46 
PA_C_DECL_BEGIN


49 
∑_maölo›_≠i
 
	t∑_maölo›_≠i
;

52 
	e∑_io_evít_Êags
 {

53 
	mPA_IO_EVENT_NULL
 = 0,

54 
	mPA_IO_EVENT_INPUT
 = 1,

55 
	mPA_IO_EVENT_OUTPUT
 = 2,

56 
	mPA_IO_EVENT_HANGUP
 = 4,

57 
	mPA_IO_EVENT_ERROR
 = 8

58 } 
	t∑_io_evít_Êags_t
;

61 
∑_io_evít
 
	t∑_io_evít
;

63 (*
	t∑_io_evít_cb_t
)(
	t∑_maölo›_≠i
*
	tó
, 
	t∑_io_evít
* 
	te
, 
	tfd
, 
	t∑_io_evít_Êags_t
 
	tevíts
, *
	tu£rd©a
);

65 (*
	t∑_io_evít_de°roy_cb_t
)(
	t∑_maölo›_≠i
*
	ta
, 
	t∑_io_evít
 *
	te
, *
	tu£rd©a
);

68 
∑_time_evít
 
	t∑_time_evít
;

70 (*
	t∑_time_evít_cb_t
)(
	t∑_maölo›_≠i
*
	ta
, 
	t∑_time_evít
* 
	te
, c⁄° 
	ttimevÆ
 *
	ttv
, *
	tu£rd©a
);

72 (*
	t∑_time_evít_de°roy_cb_t
)(
	t∑_maölo›_≠i
*
	ta
, 
	t∑_time_evít
 *
	te
, *
	tu£rd©a
);

75 
∑_de„r_evít
 
	t∑_de„r_evít
;

77 (*
	t∑_de„r_evít_cb_t
)(
	t∑_maölo›_≠i
*
	ta
, 
	t∑_de„r_evít
* 
	te
, *
	tu£rd©a
);

79 (*
	t∑_de„r_evít_de°roy_cb_t
)(
	t∑_maölo›_≠i
*
	ta
, 
	t∑_de„r_evít
 *
	te
, *
	tu£rd©a
);

82 
	s∑_maölo›_≠i
 {

84 *
u£rd©a
;

87 
∑_io_evít
* (*
io_√w
)(
∑_maölo›_≠i
*
a
, 
fd
, 
∑_io_evít_Êags_t
 
evíts
, 
∑_io_evít_cb_t
 
cb
, *
u£rd©a
);

89 (*
io_íabÀ
)(
∑_io_evít
* 
e
, 
∑_io_evít_Êags_t
 
evíts
);

91 (*
io_‰ì
)(
∑_io_evít
* 
e
);

93 (*
io_£t_de°roy
)(
∑_io_evít
 *
e
, 
∑_io_evít_de°roy_cb_t
 
cb
);

96 
∑_time_evít
* (*
time_√w
)(
∑_maölo›_≠i
*
a
, c⁄° 
timevÆ
 *
tv
, 
∑_time_evít_cb_t
 
cb
, *
u£rd©a
);

98 (*
time_ª°¨t
)(
∑_time_evít
* 
e
, c⁄° 
timevÆ
 *
tv
);

100 (*
time_‰ì
)(
∑_time_evít
* 
e
);

102 (*
time_£t_de°roy
)(
∑_time_evít
 *
e
, 
∑_time_evít_de°roy_cb_t
 
cb
);

105 
∑_de„r_evít
* (*
de„r_√w
)(
∑_maölo›_≠i
*
a
, 
∑_de„r_evít_cb_t
 
cb
, *
u£rd©a
);

107 (*
de„r_íabÀ
)(
∑_de„r_evít
* 
e
, 
b
);

109 (*
de„r_‰ì
)(
∑_de„r_evít
* 
e
);

111 (*
de„r_£t_de°roy
)(
∑_de„r_evít
 *
e
, 
∑_de„r_evít_de°roy_cb_t
 
cb
);

114 (*
quô
)(
∑_maölo›_≠i
*
a
, 
ªtvÆ
);

120 
	`∑_maölo›_≠i_⁄˚
(
∑_maölo›_≠i
*
m
, (*
ˇŒback
)’a_maölo›_≠i*m, *
u£rd©a
), *userdata);

122 
PA_C_DECL_END


	@/usr/include/pulse/mainloop-signal.h

1 #i‚de‡
foomaölo›sig«lhfoo


2 
	#foomaölo›sig«lhfoo


	)

26 
	~<pul£/maölo›-≠i.h
>

27 
	~<pul£/cde˛.h
>

29 
PA_C_DECL_BEGIN


41 
∑_sig«l_evít
 
	t∑_sig«l_evít
;

44 (*
	t∑_sig«l_cb_t
Ë(
	t∑_maölo›_≠i
 *
	t≠i
, 
	t∑_sig«l_evít
*
	te
, 
	tsig
, *
	tu£rd©a
);

47 (*
	t∑_sig«l_de°roy_cb_t
Ë(
	t∑_maölo›_≠i
 *
	t≠i
, 
	t∑_sig«l_evít
*
	te
, *
	tu£rd©a
);

50 
	`∑_sig«l_öô
(
∑_maölo›_≠i
 *
≠i
);

53 
	`∑_sig«l_d⁄e
();

56 
∑_sig«l_evít
* 
	`∑_sig«l_√w
(
sig
, 
∑_sig«l_cb_t
 
ˇŒback
, *
u£rd©a
);

59 
	`∑_sig«l_‰ì
(
∑_sig«l_evít
 *
e
);

62 
	`∑_sig«l_£t_de°roy
(
∑_sig«l_evít
 *
e
, 
∑_sig«l_de°roy_cb_t
 
ˇŒback
);

64 
PA_C_DECL_END


	@/usr/include/pulse/mainloop.h

1 #i‚de‡
foomaölo›hfoo


2 
	#foomaölo›hfoo


	)

26 
	~<pul£/maölo›-≠i.h
>

27 
	~<pul£/cde˛.h
>

29 
PA_C_DECL_BEGIN


31 
	gpﬁlfd
;

80 
∑_maölo›
 
	t∑_maölo›
;

83 
∑_maölo›
 *
∑_maölo›_√w
();

86 
∑_maölo›_‰ì
(
∑_maölo›
* 
m
);

91 
∑_maölo›_¥ï¨e
(
∑_maölo›
 *
m
, 
timeout
);

94 
∑_maölo›_pﬁl
(
∑_maölo›
 *
m
);

98 
∑_maölo›_di•©ch
(
∑_maölo›
 *
m
);

101 
∑_maölo›_gë_ªtvÆ
(
∑_maölo›
 *
m
);

109 
∑_maölo›_ôî©e
(
∑_maölo›
 *
m
, 
block
, *
ªtvÆ
);

112 
∑_maölo›_run
(
∑_maölo›
 *
m
, *
ªtvÆ
);

117 
∑_maölo›_≠i
* 
∑_maölo›_gë_≠i
(
∑_maölo›
*
m
);

120 
∑_maölo›_quô
(
∑_maölo›
 *
m
, 
r
);

123 
∑_maölo›_wakeup
(
∑_maölo›
 *
m
);

126 (*
	t∑_pﬁl_func
)(
	tpﬁlfd
 *
	tufds
, 
	tnfds
, 
	ttimeout
, *
	tu£rd©a
);

129 
	`∑_maölo›_£t_pﬁl_func
(
∑_maölo›
 *
m
, 
∑_pﬁl_func
 
pﬁl_func
, *
u£rd©a
);

131 
PA_C_DECL_END


	@/usr/include/pulse/operation.h

1 #i‚de‡
foo›î©i⁄hfoo


2 
	#foo›î©i⁄hfoo


	)

25 
	~<pul£/cde˛.h
>

26 
	~<pul£/def.h
>

27 
	~<pul£/vîsi⁄.h
>

32 
PA_C_DECL_BEGIN


35 
∑_›î©i⁄
 
	t∑_›î©i⁄
;

38 (*
	t∑_›î©i⁄_nŸify_cb_t
Ë(
	t∑_›î©i⁄
 *
	to
, *
	tu£rd©a
);

41 
∑_›î©i⁄
 *
	`∑_›î©i⁄_ªf
’a_›î©i⁄ *
o
);

44 
	`∑_›î©i⁄_uƒef
(
∑_›î©i⁄
 *
o
);

51 
	`∑_›î©i⁄_ˇn˚l
(
∑_›î©i⁄
 *
o
);

54 
∑_›î©i⁄_°©e_t
 
	`∑_›î©i⁄_gë_°©e
(
∑_›î©i⁄
 *
o
);

62 
	`∑_›î©i⁄_£t_°©e_ˇŒback
(
∑_›î©i⁄
 *
o
, 
∑_›î©i⁄_nŸify_cb_t
 
cb
, *
u£rd©a
);

64 
PA_C_DECL_END


	@/usr/include/pulse/proplist.h

1 #i‚de‡
fo›ul£¥›li°hfoo


2 
	#fo›ul£¥›li°hfoo


	)

25 
	~<sys/ty≥s.h
>

27 
	~<pul£/cde˛.h
>

28 
	~<pul£/gccma¸o.h
>

29 
	~<pul£/vîsi⁄.h
>

34 
	gPA_C_DECL_BEGIN


37 
	#PA_PROP_MEDIA_NAME
 "medü.«me"

	)

40 
	#PA_PROP_MEDIA_TITLE
 "medü.tôÀ"

	)

43 
	#PA_PROP_MEDIA_ARTIST
 "medü.¨ti°"

	)

46 
	#PA_PROP_MEDIA_COPYRIGHT
 "medü.c›yright"

	)

49 
	#PA_PROP_MEDIA_SOFTWARE
 "medü.so·w¨e"

	)

52 
	#PA_PROP_MEDIA_LANGUAGE
 "medü.œnguage"

	)

55 
	#PA_PROP_MEDIA_FILENAME
 "medü.fûíame"

	)

59 
	#PA_PROP_MEDIA_ICON
 "medü.ic⁄"

	)

63 
	#PA_PROP_MEDIA_ICON_NAME
 "medü.ic⁄_«me"

	)

66 
	#PA_PROP_MEDIA_ROLE
 "medü.rﬁe"

	)

69 
	#PA_PROP_FILTER_WANT
 "fûãr.w™t"

	)

72 
	#PA_PROP_FILTER_APPLY
 "fûãr.≠∂y"

	)

75 
	#PA_PROP_FILTER_SUPPRESS
 "fûãr.suµªss"

	)

78 
	#PA_PROP_EVENT_ID
 "evít.id"

	)

81 
	#PA_PROP_EVENT_DESCRIPTION
 "evít.des¸ùti⁄"

	)

84 
	#PA_PROP_EVENT_MOUSE_X
 "evít.mou£.x"

	)

87 
	#PA_PROP_EVENT_MOUSE_Y
 "evít.mou£.y"

	)

90 
	#PA_PROP_EVENT_MOUSE_HPOS
 "evít.mou£.hpos"

	)

93 
	#PA_PROP_EVENT_MOUSE_VPOS
 "evít.mou£.vpos"

	)

96 
	#PA_PROP_EVENT_MOUSE_BUTTON
 "evít.mou£.buâ⁄"

	)

99 
	#PA_PROP_WINDOW_NAME
 "wödow.«me"

	)

102 
	#PA_PROP_WINDOW_ID
 "wödow.id"

	)

106 
	#PA_PROP_WINDOW_ICON
 "wödow.ic⁄"

	)

110 
	#PA_PROP_WINDOW_ICON_NAME
 "wödow.ic⁄_«me"

	)

113 
	#PA_PROP_WINDOW_X
 "wödow.x"

	)

116 
	#PA_PROP_WINDOW_Y
 "wödow.y"

	)

119 
	#PA_PROP_WINDOW_WIDTH
 "wödow.width"

	)

122 
	#PA_PROP_WINDOW_HEIGHT
 "wödow.height"

	)

125 
	#PA_PROP_WINDOW_HPOS
 "wödow.hpos"

	)

128 
	#PA_PROP_WINDOW_VPOS
 "wödow.vpos"

	)

131 
	#PA_PROP_WINDOW_DESKTOP
 "wödow.deskt›"

	)

134 
	#PA_PROP_WINDOW_X11_DISPLAY
 "wödow.x11.di•œy"

	)

137 
	#PA_PROP_WINDOW_X11_SCREEN
 "wödow.x11.s¸ìn"

	)

140 
	#PA_PROP_WINDOW_X11_MONITOR
 "wödow.x11.m⁄ô‹"

	)

143 
	#PA_PROP_WINDOW_X11_XID
 "wödow.x11.xid"

	)

146 
	#PA_PROP_APPLICATION_NAME
 "≠∂iˇti⁄.«me"

	)

149 
	#PA_PROP_APPLICATION_ID
 "≠∂iˇti⁄.id"

	)

152 
	#PA_PROP_APPLICATION_VERSION
 "≠∂iˇti⁄.vîsi⁄"

	)

156 
	#PA_PROP_APPLICATION_ICON
 "≠∂iˇti⁄.ic⁄"

	)

160 
	#PA_PROP_APPLICATION_ICON_NAME
 "≠∂iˇti⁄.ic⁄_«me"

	)

163 
	#PA_PROP_APPLICATION_LANGUAGE
 "≠∂iˇti⁄.œnguage"

	)

166 
	#PA_PROP_APPLICATION_PROCESS_ID
 "≠∂iˇti⁄.¥o˚ss.id"

	)

169 
	#PA_PROP_APPLICATION_PROCESS_BINARY
 "≠∂iˇti⁄.¥o˚ss.bö¨y"

	)

172 
	#PA_PROP_APPLICATION_PROCESS_USER
 "≠∂iˇti⁄.¥o˚ss.u£r"

	)

175 
	#PA_PROP_APPLICATION_PROCESS_HOST
 "≠∂iˇti⁄.¥o˚ss.ho°"

	)

178 
	#PA_PROP_APPLICATION_PROCESS_MACHINE_ID
 "≠∂iˇti⁄.¥o˚ss.machöe_id"

	)

181 
	#PA_PROP_APPLICATION_PROCESS_SESSION_ID
 "≠∂iˇti⁄.¥o˚ss.£ssi⁄_id"

	)

184 
	#PA_PROP_DEVICE_STRING
 "devi˚.°rög"

	)

187 
	#PA_PROP_DEVICE_API
 "devi˚.≠i"

	)

190 
	#PA_PROP_DEVICE_DESCRIPTION
 "devi˚.des¸ùti⁄"

	)

193 
	#PA_PROP_DEVICE_BUS_PATH
 "devi˚.bus_∑th"

	)

196 
	#PA_PROP_DEVICE_SERIAL
 "devi˚.£rül"

	)

199 
	#PA_PROP_DEVICE_VENDOR_ID
 "devi˚.víd‹.id"

	)

202 
	#PA_PROP_DEVICE_VENDOR_NAME
 "devi˚.víd‹.«me"

	)

205 
	#PA_PROP_DEVICE_PRODUCT_ID
 "devi˚.¥odu˘.id"

	)

208 
	#PA_PROP_DEVICE_PRODUCT_NAME
 "devi˚.¥odu˘.«me"

	)

211 
	#PA_PROP_DEVICE_CLASS
 "devi˚.˛ass"

	)

214 
	#PA_PROP_DEVICE_FORM_FACTOR
 "devi˚.f‹m_Á˘‹"

	)

217 
	#PA_PROP_DEVICE_BUS
 "devi˚.bus"

	)

221 
	#PA_PROP_DEVICE_ICON
 "devi˚.ic⁄"

	)

225 
	#PA_PROP_DEVICE_ICON_NAME
 "devi˚.ic⁄_«me"

	)

228 
	#PA_PROP_DEVICE_ACCESS_MODE
 "devi˚.ac˚ss_mode"

	)

231 
	#PA_PROP_DEVICE_MASTER_DEVICE
 "devi˚.ma°î_devi˚"

	)

234 
	#PA_PROP_DEVICE_BUFFERING_BUFFER_SIZE
 "devi˚.buf„rög.buf„r_size"

	)

237 
	#PA_PROP_DEVICE_BUFFERING_FRAGMENT_SIZE
 "devi˚.buf„rög.‰agmít_size"

	)

240 
	#PA_PROP_DEVICE_PROFILE_NAME
 "devi˚.¥ofûe.«me"

	)

243 
	#PA_PROP_DEVICE_INTENDED_ROLES
 "devi˚.öãnded_rﬁes"

	)

246 
	#PA_PROP_DEVICE_PROFILE_DESCRIPTION
 "devi˚.¥ofûe.des¸ùti⁄"

	)

249 
	#PA_PROP_MODULE_AUTHOR
 "moduÀ.auth‹"

	)

252 
	#PA_PROP_MODULE_DESCRIPTION
 "moduÀ.des¸ùti⁄"

	)

255 
	#PA_PROP_MODULE_USAGE
 "moduÀ.ußge"

	)

258 
	#PA_PROP_MODULE_VERSION
 "moduÀ.vîsi⁄"

	)

261 
	#PA_PROP_FORMAT_SAMPLE_FORMAT
 "f‹m©.ßm∂e_f‹m©"

	)

264 
	#PA_PROP_FORMAT_RATE
 "f‹m©.øã"

	)

267 
	#PA_PROP_FORMAT_CHANNELS
 "f‹m©.ch™√ls"

	)

270 
	#PA_PROP_FORMAT_CHANNEL_MAP
 "f‹m©.ch™√l_m≠"

	)

274 
∑_¥›li°
 
	t∑_¥›li°
;

277 
∑_¥›li°
* 
∑_¥›li°_√w
();

280 
∑_¥›li°_‰ì
(
∑_¥›li°
* 
p
);

283 
∑_¥›li°_key_vÆid
(c⁄° *
key
);

289 
∑_¥›li°_£ts
(
∑_¥›li°
 *
p
, c⁄° *
key
, c⁄° *
vÆue
);

297 
∑_¥›li°_£ç
(
∑_¥›li°
 *
p
, c⁄° *
∑ú
);

304 
	$∑_¥›li°_£tf
(
∑_¥›li°
 *
p
, c⁄° *
key
, c⁄° *
f‹m©
, ...Ë
	`PA_GCC_PRINTF_ATTR
(3,4);

309 
	`∑_¥›li°_£t
(
∑_¥›li°
 *
p
, c⁄° *
key
, c⁄° *
d©a
, 
size_t
 
nbyãs
);

315 c⁄° *
	`∑_¥›li°_gës
(
∑_¥›li°
 *
p
, c⁄° *
key
);

322 
	`∑_¥›li°_gë
(
∑_¥›li°
 *
p
, c⁄° *
key
, c⁄° **
d©a
, 
size_t
 *
nbyãs
);

325 
	e∑_upd©e_mode
 {

326 
PA_UPDATE_SET


330 
PA_UPDATE_MERGE


335 
PA_UPDATE_REPLACE


339 } 
	t∑_upd©e_mode_t
;

342 
	#PA_UPDATE_SET
 
PA_UPDATE_SET


	)

343 
	#PA_UPDATE_MERGE
 
PA_UPDATE_MERGE


	)

344 
	#PA_UPDATE_REPLACE
 
PA_UPDATE_REPLACE


	)

349 
	`∑_¥›li°_upd©e
(
∑_¥›li°
 *
p
, 
∑_upd©e_mode_t
 
mode
, c⁄°Öa_¥›li° *
Ÿhî
);

353 
	`∑_¥›li°_un£t
(
∑_¥›li°
 *
p
, c⁄° *
key
);

360 
	`∑_¥›li°_un£t_m™y
(
∑_¥›li°
 *
p
, c⁄° * c⁄° 
keys
[]);

371 c⁄° *
	`∑_¥›li°_ôî©e
(
∑_¥›li°
 *
p
, **
°©e
);

377 *
	`∑_¥›li°_to_°rög
(
∑_¥›li°
 *
p
);

382 *
	`∑_¥›li°_to_°rög_£p
(
∑_¥›li°
 *
p
, c⁄° *
£p
);

386 
∑_¥›li°
 *
	`∑_¥›li°_‰om_°rög
(c⁄° *
°r
);

390 
	`∑_¥›li°_c⁄èös
(
∑_¥›li°
 *
p
, c⁄° *
key
);

393 
	`∑_¥›li°_˛ór
(
∑_¥›li°
 *
p
);

397 
∑_¥›li°
* 
	`∑_¥›li°_c›y
(c⁄°Öa_¥›li° *
p
);

400 
	`∑_¥›li°_size
(
∑_¥›li°
 *
p
);

403 
	`∑_¥›li°_i£m±y
(
∑_¥›li°
 *
p
);

407 
	`∑_¥›li°_equÆ
(
∑_¥›li°
 *
a
,Öa_¥›li° *
b
);

409 
PA_C_DECL_END


	@/usr/include/pulse/rtclock.h

1 #i‚de‡
fo‹t˛ockfoo


2 
	#fo‹t˛ockfoo


	)

25 
	~<pul£/cde˛.h
>

26 
	~<pul£/ßm∂e.h
>

31 
PA_C_DECL_BEGIN


36 
∑_u£c_t
 
∑_π˛ock_now
();

38 
	gPA_C_DECL_END


	@/usr/include/pulse/sample.h

1 #i‚de‡
fooßm∂ehfoo


2 
	#fooßm∂ehfoo


	)

26 
	~<öây≥s.h
>

27 
	~<sys/ty≥s.h
>

28 
	~<sys/∑øm.h
>

30 
	~<pul£/gccma¸o.h
>

31 
	~<pul£/cde˛.h
>

32 
	~<pul£/vîsi⁄.h
>

112 
	gPA_C_DECL_BEGIN


114 #i‡!
deföed
(
WORDS_BIGENDIAN
)

116 #i‡
deföed
(
__BYTE_ORDER
)

117 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


118 
	#WORDS_BIGENDIAN


	)

123 #i‡
deföed
(
__•¨c__
Ë&& deföed(
_BIG_ENDIAN
)

124 
	#WORDS_BIGENDIAN


	)

130 
	#PA_CHANNELS_MAX
 32U

	)

133 
	#PA_RATE_MAX
 (48000U*4U)

	)

136 
	e∑_ßm∂e_f‹m©
 {

137 
	mPA_SAMPLE_U8
,

140 
	mPA_SAMPLE_ALAW
,

143 
	mPA_SAMPLE_ULAW
,

146 
	mPA_SAMPLE_S16LE
,

149 
	mPA_SAMPLE_S16BE
,

152 
	mPA_SAMPLE_FLOAT32LE
,

155 
	mPA_SAMPLE_FLOAT32BE
,

158 
	mPA_SAMPLE_S32LE
,

161 
	mPA_SAMPLE_S32BE
,

164 
	mPA_SAMPLE_S24LE
,

167 
	mPA_SAMPLE_S24BE
,

170 
	mPA_SAMPLE_S24_32LE
,

173 
	mPA_SAMPLE_S24_32BE
,

176 
	mPA_SAMPLE_MAX
,

179 
	mPA_SAMPLE_INVALID
 = -1

181 } 
	t∑_ßm∂e_f‹m©_t
;

183 #ifde‡
WORDS_BIGENDIAN


185 
	#PA_SAMPLE_S16NE
 
PA_SAMPLE_S16BE


	)

187 
	#PA_SAMPLE_FLOAT32NE
 
PA_SAMPLE_FLOAT32BE


	)

189 
	#PA_SAMPLE_S32NE
 
PA_SAMPLE_S32BE


	)

191 
	#PA_SAMPLE_S24NE
 
PA_SAMPLE_S24BE


	)

193 
	#PA_SAMPLE_S24_32NE
 
PA_SAMPLE_S24_32BE


	)

196 
	#PA_SAMPLE_S16RE
 
PA_SAMPLE_S16LE


	)

198 
	#PA_SAMPLE_FLOAT32RE
 
PA_SAMPLE_FLOAT32LE


	)

200 
	#PA_SAMPLE_S32RE
 
PA_SAMPLE_S32LE


	)

202 
	#PA_SAMPLE_S24RE
 
PA_SAMPLE_S24LE


	)

204 
	#PA_SAMPLE_S24_32RE
 
PA_SAMPLE_S24_32LE


	)

207 
	#PA_SAMPLE_S16NE
 
PA_SAMPLE_S16LE


	)

209 
	#PA_SAMPLE_FLOAT32NE
 
PA_SAMPLE_FLOAT32LE


	)

211 
	#PA_SAMPLE_S32NE
 
PA_SAMPLE_S32LE


	)

213 
	#PA_SAMPLE_S24NE
 
PA_SAMPLE_S24LE


	)

215 
	#PA_SAMPLE_S24_32NE
 
PA_SAMPLE_S24_32LE


	)

218 
	#PA_SAMPLE_S16RE
 
PA_SAMPLE_S16BE


	)

220 
	#PA_SAMPLE_FLOAT32RE
 
PA_SAMPLE_FLOAT32BE


	)

222 
	#PA_SAMPLE_S32RE
 
PA_SAMPLE_S32BE


	)

224 
	#PA_SAMPLE_S24RE
 
PA_SAMPLE_S24BE


	)

226 
	#PA_SAMPLE_S24_32RE
 
PA_SAMPLE_S24_32BE


	)

230 
	#PA_SAMPLE_FLOAT32
 
PA_SAMPLE_FLOAT32NE


	)

234 
	#PA_SAMPLE_U8
 
PA_SAMPLE_U8


	)

235 
	#PA_SAMPLE_ALAW
 
PA_SAMPLE_ALAW


	)

236 
	#PA_SAMPLE_ULAW
 
PA_SAMPLE_ULAW


	)

237 
	#PA_SAMPLE_S16LE
 
PA_SAMPLE_S16LE


	)

238 
	#PA_SAMPLE_S16BE
 
PA_SAMPLE_S16BE


	)

239 
	#PA_SAMPLE_FLOAT32LE
 
PA_SAMPLE_FLOAT32LE


	)

240 
	#PA_SAMPLE_FLOAT32BE
 
PA_SAMPLE_FLOAT32BE


	)

241 
	#PA_SAMPLE_S32LE
 
PA_SAMPLE_S32LE


	)

242 
	#PA_SAMPLE_S32BE
 
PA_SAMPLE_S32BE


	)

243 
	#PA_SAMPLE_S24LE
 
PA_SAMPLE_S24LE


	)

244 
	#PA_SAMPLE_S24BE
 
PA_SAMPLE_S24BE


	)

245 
	#PA_SAMPLE_S24_32LE
 
PA_SAMPLE_S24_32LE


	)

246 
	#PA_SAMPLE_S24_32BE
 
PA_SAMPLE_S24_32BE


	)

250 
	s∑_ßm∂e_•ec
 {

251 
∑_ßm∂e_f‹m©_t
 
	mf‹m©
;

254 
uöt32_t
 
	møã
;

257 
uöt8_t
 
	mch™√ls
;

259 } 
	t∑_ßm∂e_•ec
;

262 
uöt64_t
 
	t∑_u£c_t
;

265 
size_t
 
	$∑_byãs_≥r_£c⁄d
(c⁄° 
∑_ßm∂e_•ec
 *
•ec
Ë
PA_GCC_PURE
;

268 
size_t
 
	$∑_‰ame_size
(c⁄° 
∑_ßm∂e_•ec
 *
•ec
Ë
PA_GCC_PURE
;

271 
size_t
 
	$∑_ßm∂e_size
(c⁄° 
∑_ßm∂e_•ec
 *
•ec
Ë
PA_GCC_PURE
;

275 
size_t
 
	$∑_ßm∂e_size_of_f‹m©
(
∑_ßm∂e_f‹m©_t
 
f
Ë
PA_GCC_PURE
;

280 
∑_u£c_t
 
	$∑_byãs_to_u£c
(
uöt64_t
 
Àngth
, c⁄° 
∑_ßm∂e_•ec
 *
•ec
Ë
PA_GCC_PURE
;

285 
size_t
 
	$∑_u£c_to_byãs
(
∑_u£c_t
 
t
, c⁄° 
∑_ßm∂e_•ec
 *
•ec
Ë
PA_GCC_PURE
;

290 
∑_ßm∂e_•ec
* 
	`∑_ßm∂e_•ec_öô
’a_ßm∂e_•e¯*
•ec
);

293 
	$∑_ßm∂e_f‹m©_vÆid
(
f‹m©
Ë
PA_GCC_PURE
;

296 
	$∑_ßm∂e_øã_vÆid
(
uöt32_t
 
øã
Ë
PA_GCC_PURE
;

300 
	$∑_ch™√ls_vÆid
(
uöt8_t
 
ch™√ls
Ë
PA_GCC_PURE
;

303 
	$∑_ßm∂e_•ec_vÆid
(c⁄° 
∑_ßm∂e_•ec
 *
•ec
Ë
PA_GCC_PURE
;

306 
	$∑_ßm∂e_•ec_equÆ
(c⁄° 
∑_ßm∂e_•ec
*
a
, c⁄°Öa_ßm∂e_•ec*
b
Ë
PA_GCC_PURE
;

309 c⁄° *
	$∑_ßm∂e_f‹m©_to_°rög
(
∑_ßm∂e_f‹m©_t
 
f
Ë
PA_GCC_PURE
;

312 
∑_ßm∂e_f‹m©_t
 
	$∑_∑r£_ßm∂e_f‹m©
(c⁄° *
f‹m©
Ë
PA_GCC_PURE
;

319 
	#PA_SAMPLE_SPEC_SNPRINT_MAX
 32

	)

322 * 
	`∑_ßm∂e_•ec_¢¥öt
(*
s
, 
size_t
 
l
, c⁄° 
∑_ßm∂e_•ec
 *
•ec
);

329 
	#PA_BYTES_SNPRINT_MAX
 11

	)

332 * 
	`∑_byãs_¢¥öt
(*
s
, 
size_t
 
l
, 
v
);

336 
	$∑_ßm∂e_f‹m©_is_À
(
∑_ßm∂e_f‹m©_t
 
f
Ë
PA_GCC_PURE
;

340 
	$∑_ßm∂e_f‹m©_is_be
(
∑_ßm∂e_f‹m©_t
 
f
Ë
PA_GCC_PURE
;

342 #ifde‡
WORDS_BIGENDIAN


343 
	#∑_ßm∂e_f‹m©_is_√
(
f
Ë
	`∑_ßm∂e_f‹m©_is_be
(f)

	)

344 
	#∑_ßm∂e_f‹m©_is_ª
(
f
Ë
	`∑_ßm∂e_f‹m©_is_À
(f)

	)

348 
	#∑_ßm∂e_f‹m©_is_√
(
f
Ë
	`∑_ßm∂e_f‹m©_is_À
(f)

	)

351 
	#∑_ßm∂e_f‹m©_is_ª
(
f
Ë
	`∑_ßm∂e_f‹m©_is_be
(f)

	)

354 
PA_C_DECL_END


	@/usr/include/pulse/scache.h

1 #i‚de‡
foosˇchehfoo


2 
	#foosˇchehfoo


	)

26 
	~<sys/ty≥s.h
>

28 
	~<pul£/c⁄ãxt.h
>

29 
	~<pul£/°ªam.h
>

30 
	~<pul£/cde˛.h
>

31 
	~<pul£/vîsi⁄.h
>

82 
PA_C_DECL_BEGIN


87 (*
	t∑_c⁄ãxt_∂ay_ßm∂e_cb_t
)(
	t∑_c⁄ãxt
 *
	tc
, 
	tuöt32_t
 
	tidx
, *
	tu£rd©a
);

90 
	`∑_°ªam_c⁄√˘_u∂ﬂd
(
∑_°ªam
 *
s
, 
size_t
 
Àngth
);

95 
	`∑_°ªam_föish_u∂ﬂd
(
∑_°ªam
 *
s
);

98 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_ªmove_ßm∂e
(
∑_c⁄ãxt
 *
c
, c⁄° *
«me
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

103 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_∂ay_ßm∂e
(

104 
∑_c⁄ãxt
 *
c
 ,

105 c⁄° *
«me
 ,

106 c⁄° *
dev
 ,

107 
∑_vﬁume_t
 
vﬁume
 ,

108 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
 ,

109 *
u£rd©a
 );

115 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_∂ay_ßm∂e_wôh_¥›li°
(

116 
∑_c⁄ãxt
 *
c
 ,

117 c⁄° *
«me
 ,

118 c⁄° *
dev
 ,

119 
∑_vﬁume_t
 
vﬁume
 ,

120 
∑_¥›li°
 *
¥›li°
 ,

121 
∑_c⁄ãxt_∂ay_ßm∂e_cb_t
 
cb
 ,

122 *
u£rd©a
 );

124 
PA_C_DECL_END


	@/usr/include/pulse/stream.h

1 #i‚de‡
foo°ªamhfoo


2 
	#foo°ªamhfoo


	)

26 
	~<sys/ty≥s.h
>

28 
	~<pul£/ßm∂e.h
>

29 
	~<pul£/f‹m©.h
>

30 
	~<pul£/ch™√lm≠.h
>

31 
	~<pul£/vﬁume.h
>

32 
	~<pul£/def.h
>

33 
	~<pul£/cde˛.h
>

34 
	~<pul£/›î©i⁄.h
>

35 
	~<pul£/c⁄ãxt.h
>

36 
	~<pul£/¥›li°.h
>

334 
PA_C_DECL_BEGIN


337 
∑_°ªam
 
	t∑_°ªam
;

340 (*
	t∑_°ªam_suc˚ss_cb_t
Ë(
	t∑_°ªam
*
	ts
, 
	tsuc˚ss
, *
	tu£rd©a
);

343 (*
	t∑_°ªam_ªque°_cb_t
)(
	t∑_°ªam
 *
	tp
, 
	tsize_t
 
	tnbyãs
, *
	tu£rd©a
);

346 (*
	t∑_°ªam_nŸify_cb_t
)(
	t∑_°ªam
 *
	tp
, *
	tu£rd©a
);

354 (*
	t∑_°ªam_evít_cb_t
)(
	t∑_°ªam
 *
	tp
, c⁄° *
	t«me
, 
	t∑_¥›li°
 *
	t∂
, *
	tu£rd©a
);

359 
∑_°ªam
* 
	`∑_°ªam_√w
(

360 
∑_c⁄ãxt
 *
c
 ,

361 c⁄° *
«me
 ,

362 c⁄° 
∑_ßm∂e_•ec
 *
ss
 ,

363 c⁄° 
∑_ch™√l_m≠
 *
m≠
 );

368 
∑_°ªam
* 
	`∑_°ªam_√w_wôh_¥›li°
(

369 
∑_c⁄ãxt
 *
c
 ,

370 c⁄° *
«me
 ,

371 c⁄° 
∑_ßm∂e_•ec
 *
ss
 ,

372 c⁄° 
∑_ch™√l_m≠
 *
m≠
 ,

373 
∑_¥›li°
 *
p
 );

379 
∑_°ªam
 *
	`∑_°ªam_√w_exãnded
(

380 
∑_c⁄ãxt
 *
c
 ,

381 c⁄° *
«me
 ,

382 
∑_f‹m©_öfo
 * c⁄° * 
f‹m©s
 ,

383 
n_f‹m©s
 ,

384 
∑_¥›li°
 *
p
 );

387 
	`∑_°ªam_uƒef
(
∑_°ªam
 *
s
);

390 
∑_°ªam
 *
	`∑_°ªam_ªf
’a_°ªam *
s
);

393 
∑_°ªam_°©e_t
 
	`∑_°ªam_gë_°©e
(
∑_°ªam
 *
p
);

396 
∑_c⁄ãxt
* 
	`∑_°ªam_gë_c⁄ãxt
(
∑_°ªam
 *
p
);

402 
uöt32_t
 
	`∑_°ªam_gë_ödex
(
∑_°ªam
 *
s
);

413 
uöt32_t
 
	`∑_°ªam_gë_devi˚_ödex
(
∑_°ªam
 *
s
);

424 c⁄° *
	`∑_°ªam_gë_devi˚_«me
(
∑_°ªam
 *
s
);

430 
	`∑_°ªam_is_su•íded
(
∑_°ªam
 *
s
);

434 
	`∑_°ªam_is_c‹ked
(
∑_°ªam
 *
s
);

460 
	`∑_°ªam_c⁄√˘_∂ayback
(

461 
∑_°ªam
 *
s
 ,

462 c⁄° *
dev
 ,

463 c⁄° 
∑_buf„r_©å
 *
©å
 ,

464 
∑_°ªam_Êags_t
 
Êags
 ,

465 c⁄° 
∑_cvﬁume
 *
vﬁume
 ,

466 
∑_°ªam
 *
sync_°ªam
 );

469 
	`∑_°ªam_c⁄√˘_ªc‹d
(

470 
∑_°ªam
 *
s
 ,

471 c⁄° *
dev
 ,

472 c⁄° 
∑_buf„r_©å
 *
©å
 ,

473 
∑_°ªam_Êags_t
 
Êags
 );

476 
	`∑_°ªam_disc⁄√˘
(
∑_°ªam
 *
s
);

510 
	`∑_°ªam_begö_wrôe
(

511 
∑_°ªam
 *
p
,

512 **
d©a
,

513 
size_t
 *
nbyãs
);

524 
	`∑_°ªam_ˇn˚l_wrôe
(

525 
∑_°ªam
 *
p
);

549 
	`∑_°ªam_wrôe
(

550 
∑_°ªam
 *
p
 ,

551 c⁄° *
d©a
 ,

552 
size_t
 
nbyãs
 ,

553 
∑_‰ì_cb_t
 
‰ì_cb
 ,

554 
öt64_t
 
off£t
,

555 
∑_£ek_mode_t
 
£ek
 );

573 
	`∑_°ªam_≥ek
(

574 
∑_°ªam
 *
p
 ,

575 c⁄° **
d©a
 ,

576 
size_t
 *
nbyãs
 );

580 
	`∑_°ªam_dr›
(
∑_°ªam
 *
p
);

583 
size_t
 
	`∑_°ªam_wrôabÀ_size
(
∑_°ªam
 *
p
);

586 
size_t
 
	`∑_°ªam_ªadabÀ_size
(
∑_°ªam
 *
p
);

592 
∑_›î©i⁄
* 
	`∑_°ªam_døö
(
∑_°ªam
 *
s
, 
∑_°ªam_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

598 
∑_›î©i⁄
* 
	`∑_°ªam_upd©e_timög_öfo
(
∑_°ªam
 *
p
, 
∑_°ªam_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

601 
	`∑_°ªam_£t_°©e_ˇŒback
(
∑_°ªam
 *
s
, 
∑_°ªam_nŸify_cb_t
 
cb
, *
u£rd©a
);

605 
	`∑_°ªam_£t_wrôe_ˇŒback
(
∑_°ªam
 *
p
, 
∑_°ªam_ªque°_cb_t
 
cb
, *
u£rd©a
);

608 
	`∑_°ªam_£t_ªad_ˇŒback
(
∑_°ªam
 *
p
, 
∑_°ªam_ªque°_cb_t
 
cb
, *
u£rd©a
);

611 
	`∑_°ªam_£t_ovîÊow_ˇŒback
(
∑_°ªam
 *
p
, 
∑_°ªam_nŸify_cb_t
 
cb
, *
u£rd©a
);

617 
öt64_t
 
	`∑_°ªam_gë_undîÊow_ödex
(
∑_°ªam
 *
p
);

620 
	`∑_°ªam_£t_undîÊow_ˇŒback
(
∑_°ªam
 *
p
, 
∑_°ªam_nŸify_cb_t
 
cb
, *
u£rd©a
);

627 
	`∑_°ªam_£t_°¨ãd_ˇŒback
(
∑_°ªam
 *
p
, 
∑_°ªam_nŸify_cb_t
 
cb
, *
u£rd©a
);

632 
	`∑_°ªam_£t_œãncy_upd©e_ˇŒback
(
∑_°ªam
 *
p
, 
∑_°ªam_nŸify_cb_t
 
cb
, *
u£rd©a
);

639 
	`∑_°ªam_£t_moved_ˇŒback
(
∑_°ªam
 *
p
, 
∑_°ªam_nŸify_cb_t
 
cb
, *
u£rd©a
);

649 
	`∑_°ªam_£t_su•íded_ˇŒback
(
∑_°ªam
 *
p
, 
∑_°ªam_nŸify_cb_t
 
cb
, *
u£rd©a
);

653 
	`∑_°ªam_£t_evít_ˇŒback
(
∑_°ªam
 *
p
, 
∑_°ªam_evít_cb_t
 
cb
, *
u£rd©a
);

660 
	`∑_°ªam_£t_buf„r_©å_ˇŒback
(
∑_°ªam
 *
p
, 
∑_°ªam_nŸify_cb_t
 
cb
, *
u£rd©a
);

672 
∑_›î©i⁄
* 
	`∑_°ªam_c‹k
(
∑_°ªam
 *
s
, 
b
, 
∑_°ªam_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

677 
∑_›î©i⁄
* 
	`∑_°ªam_Êush
(
∑_°ªam
 *
s
, 
∑_°ªam_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

681 
∑_›î©i⁄
* 
	`∑_°ªam_¥ebuf
(
∑_°ªam
 *
s
, 
∑_°ªam_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

686 
∑_›î©i⁄
* 
	`∑_°ªam_åiggî
(
∑_°ªam
 *
s
, 
∑_°ªam_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

689 
∑_›î©i⁄
* 
	`∑_°ªam_£t_«me
(
∑_°ªam
 *
s
, c⁄° *
«me
, 
∑_°ªam_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

722 
	`∑_°ªam_gë_time
(
∑_°ªam
 *
s
, 
∑_u£c_t
 *
r_u£c
);

736 
	`∑_°ªam_gë_œãncy
(
∑_°ªam
 *
s
, 
∑_u£c_t
 *
r_u£c
, *
√g©ive
);

752 c⁄° 
∑_timög_öfo
* 
	`∑_°ªam_gë_timög_öfo
(
∑_°ªam
 *
s
);

755 c⁄° 
∑_ßm∂e_•ec
* 
	`∑_°ªam_gë_ßm∂e_•ec
(
∑_°ªam
 *
s
);

758 c⁄° 
∑_ch™√l_m≠
* 
	`∑_°ªam_gë_ch™√l_m≠
(
∑_°ªam
 *
s
);

761 c⁄° 
∑_f‹m©_öfo
* 
	`∑_°ªam_gë_f‹m©_öfo
(
∑_°ªam
 *
s
);

771 c⁄° 
∑_buf„r_©å
* 
	`∑_°ªam_gë_buf„r_©å
(
∑_°ªam
 *
s
);

781 
∑_›î©i⁄
 *
	`∑_°ªam_£t_buf„r_©å
(
∑_°ªam
 *
s
, c⁄° 
∑_buf„r_©å
 *
©å
, 
∑_°ªam_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

788 
∑_›î©i⁄
 *
	`∑_°ªam_upd©e_ßm∂e_øã
(
∑_°ªam
 *
s
, 
uöt32_t
 
øã
, 
∑_°ªam_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

796 
∑_›î©i⁄
 *
	`∑_°ªam_¥›li°_upd©e
(
∑_°ªam
 *
s
, 
∑_upd©e_mode_t
 
mode
, 
∑_¥›li°
 *
p
, 
∑_°ªam_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

800 
∑_›î©i⁄
 *
	`∑_°ªam_¥›li°_ªmove
(
∑_°ªam
 *
s
, c⁄° *c⁄° 
keys
[], 
∑_°ªam_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

806 
	`∑_°ªam_£t_m⁄ô‹_°ªam
(
∑_°ªam
 *
s
, 
uöt32_t
 
sök_öput_idx
);

811 
uöt32_t
 
	`∑_°ªam_gë_m⁄ô‹_°ªam
(
∑_°ªam
 *
s
);

813 
PA_C_DECL_END


	@/usr/include/pulse/subscribe.h

1 #i‚de‡
foosubs¸ibehfoo


2 
	#foosubs¸ibehfoo


	)

26 
	~<öây≥s.h
>

28 
	~<pul£/def.h
>

29 
	~<pul£/c⁄ãxt.h
>

30 
	~<pul£/cde˛.h
>

31 
	~<pul£/vîsi⁄.h
>

72 
PA_C_DECL_BEGIN


75 (*
	t∑_c⁄ãxt_subs¸ibe_cb_t
)(
	t∑_c⁄ãxt
 *
	tc
, 
	t∑_subs¸ùti⁄_evít_ty≥_t
 
	tt
, 
	tuöt32_t
 
	tidx
, *
	tu£rd©a
);

78 
∑_›î©i⁄
* 
	`∑_c⁄ãxt_subs¸ibe
(
∑_c⁄ãxt
 *
c
, 
∑_subs¸ùti⁄_mask_t
 
m
, 
∑_c⁄ãxt_suc˚ss_cb_t
 
cb
, *
u£rd©a
);

81 
	`∑_c⁄ãxt_£t_subs¸ibe_ˇŒback
(
∑_c⁄ãxt
 *
c
, 
∑_c⁄ãxt_subs¸ibe_cb_t
 
cb
, *
u£rd©a
);

83 
PA_C_DECL_END


	@/usr/include/pulse/thread-mainloop.h

1 #i‚de‡
foŸhªadmaölo›hfoo


2 
	#foŸhªadmaölo›hfoo


	)

26 
	~<pul£/maölo›-≠i.h
>

27 
	~<pul£/cde˛.h
>

28 
	~<pul£/vîsi⁄.h
>

30 
PA_C_DECL_BEGIN


248 
∑_thªaded_maölo›
 
	t∑_thªaded_maölo›
;

253 
∑_thªaded_maölo›
 *
∑_thªaded_maölo›_√w
();

258 
∑_thªaded_maölo›_‰ì
(
∑_thªaded_maölo›
* 
m
);

261 
∑_thªaded_maölo›_°¨t
(
∑_thªaded_maölo›
 *
m
);

265 
∑_thªaded_maölo›_°›
(
∑_thªaded_maölo›
 *
m
);

273 
∑_thªaded_maölo›_lock
(
∑_thªaded_maölo›
 *
m
);

276 
∑_thªaded_maölo›_u∆ock
(
∑_thªaded_maölo›
 *
m
);

287 
∑_thªaded_maölo›_waô
(
∑_thªaded_maölo›
 *
m
);

294 
∑_thªaded_maölo›_sig«l
(
∑_thªaded_maölo›
 *
m
, 
waô_f‹_ac˚±
);

300 
∑_thªaded_maölo›_ac˚±
(
∑_thªaded_maölo›
 *
m
);

304 
∑_thªaded_maölo›_gë_ªtvÆ
(
∑_thªaded_maölo›
 *
m
);

309 
∑_maölo›_≠i
* 
∑_thªaded_maölo›_gë_≠i
(
∑_thªaded_maölo›
*
m
);

312 
∑_thªaded_maölo›_ö_thªad
(
∑_thªaded_maölo›
 *
m
);

315 
∑_thªaded_maölo›_£t_«me
(
∑_thªaded_maölo›
 *
m
, c⁄° *
«me
);

317 
	gPA_C_DECL_END


	@/usr/include/pulse/timeval.h

1 #i‚de‡
foŸimevÆhfoo


2 
	#foŸimevÆhfoo


	)

26 
	~<pul£/cde˛.h
>

27 
	~<pul£/gccma¸o.h
>

28 
	~<pul£/ßm∂e.h
>

29 
	~<pul£/vîsi⁄.h
>

34 
	gPA_C_DECL_BEGIN


37 
	#PA_MSEC_PER_SEC
 ((
∑_u£c_t
Ë1000ULL)

	)

40 
	#PA_USEC_PER_SEC
 ((
∑_u£c_t
Ë1000000ULL)

	)

43 
	#PA_NSEC_PER_SEC
 ((Ë1000000000ULL)

	)

46 
	#PA_USEC_PER_MSEC
 ((
∑_u£c_t
Ë1000ULL)

	)

49 
	#PA_NSEC_PER_MSEC
 ((Ë1000000ULL)

	)

52 
	#PA_NSEC_PER_USEC
 ((Ë1000ULL)

	)

55 
	#PA_USEC_INVALID
 ((
∑_u£c_t
Ë-1)

	)

58 
	#PA_USEC_MAX
 ((
∑_u£c_t
Ë-2)

	)

60 
	gtimevÆ
;

63 
timevÆ
 *
∑_gëtimeofday
(timevÆ *
tv
);

67 
∑_u£c_t
 
	$∑_timevÆ_diff
(c⁄° 
timevÆ
 *
a
, c⁄° timevÆ *
b
Ë
PA_GCC_PURE
;

70 
	$∑_timevÆ_cmp
(c⁄° 
timevÆ
 *
a
, c⁄° timevÆ *
b
Ë
PA_GCC_PURE
;

73 
∑_u£c_t
 
	`∑_timevÆ_age
(c⁄° 
timevÆ
 *
tv
);

76 
timevÆ
* 
	`∑_timevÆ_add
(timevÆ *
tv
, 
∑_u£c_t
 
v
);

79 
timevÆ
* 
	`∑_timevÆ_sub
(timevÆ *
tv
, 
∑_u£c_t
 
v
);

82 
timevÆ
* 
	`∑_timevÆ_°‹e
(timevÆ *
tv
, 
∑_u£c_t
 
v
);

85 
∑_u£c_t
 
	`∑_timevÆ_lﬂd
(c⁄° 
timevÆ
 *
tv
);

87 
PA_C_DECL_END


	@/usr/include/pulse/utf8.h

1 #i‚de‡
fooutf8hfoo


2 
	#fooutf8hfoo


	)

26 
	~<pul£/cde˛.h
>

27 
	~<pul£/gccma¸o.h
>

28 
	~<pul£/vîsi⁄.h
>

34 
PA_C_DECL_BEGIN


37 *
	$∑_utf8_vÆid
(c⁄° *
°r
Ë
PA_GCC_PURE
;

40 *
	$∑_ascii_vÆid
(c⁄° *
°r
Ë
PA_GCC_PURE
;

43 *
	`∑_utf8_fûãr
(c⁄° *
°r
);

46 *
	`∑_ascii_fûãr
(c⁄° *
°r
);

49 * 
	`∑_utf8_to_loˇÀ
 (c⁄° *
°r
);

52 * 
	`∑_loˇÀ_to_utf8
 (c⁄° *
°r
);

54 
PA_C_DECL_END


	@/usr/include/pulse/util.h

1 #i‚de‡
fooutûhfoo


2 
	#fooutûhfoo


	)

26 
	~<°ddef.h
>

28 
	~<pul£/cde˛.h
>

29 
	~<pul£/vîsi⁄.h
>

34 
PA_C_DECL_BEGIN


37 *
∑_gë_u£r_«me
(*
s
, 
size_t
 
l
);

40 *
∑_gë_ho°_«me
(*
s
, 
size_t
 
l
);

43 *
∑_gë_fqdn
(*
s
, 
size_t
 
l
);

46 *
∑_gë_home_dú
(*
s
, 
size_t
 
l
);

50 *
∑_gë_bö¨y_«me
(*
s
, 
size_t
 
l
);

54 *
∑_∑th_gë_fûíame
(c⁄° *
p
);

57 
∑_m¶ìp
(
t
);

59 
	gPA_C_DECL_END


	@/usr/include/pulse/version.h

1 #i‚de‡
foovîsi⁄hfoo


2 
	#foovîsi⁄hfoo


	)

28 
	~<pul£/cde˛.h
>

33 
	gPA_C_DECL_BEGIN


38 
	#∑_gë_hódîs_vîsi⁄
(Ë("5.0.0")

	)

42 c⁄° * 
∑_gë_libøry_vîsi⁄
();

48 
	#PA_API_VERSION
 12

	)

52 
	#PA_PROTOCOL_VERSION
 29

	)

55 
	#PA_MAJOR
 5

	)

58 
	#PA_MINOR
 0

	)

61 
	#PA_MICRO
 0

	)

65 
	#PA_CHECK_VERSION
(
maj‹
,
mö‹
,
mi¸o
) \

66 ((
PA_MAJOR
 > (
maj‹
)) || \

67 (
PA_MAJOR
 =(
maj‹
Ë&& 
PA_MINOR
 > (
mö‹
)) || \

68 (
PA_MAJOR
 =(
maj‹
Ë&& 
PA_MINOR
 =(
mö‹
Ë&& 
PA_MICRO
 >(
mi¸o
)))

	)

70 
	gPA_C_DECL_END


	@/usr/include/pulse/volume.h

1 #i‚de‡
foovﬁumehfoo


2 
	#foovﬁumehfoo


	)

26 
	~<öây≥s.h
>

27 
	~<limôs.h
>

29 
	~<pul£/cde˛.h
>

30 
	~<pul£/gccma¸o.h
>

31 
	~<pul£/ßm∂e.h
>

32 
	~<pul£/ch™√lm≠.h
>

33 
	~<pul£/vîsi⁄.h
>

115 
PA_C_DECL_BEGIN


122 
uöt32_t
 
	t∑_vﬁume_t
;

125 
	#PA_VOLUME_NORM
 ((
∑_vﬁume_t
Ë0x10000U)

	)

128 
	#PA_VOLUME_MUTED
 ((
∑_vﬁume_t
Ë0U)

	)

131 
	#PA_VOLUME_MAX
 ((
∑_vﬁume_t
Ë
UINT32_MAX
/2)

	)

138 
	#PA_VOLUME_UI_MAX
 (
	`∑_sw_vﬁume_‰om_dB
(+11.0))

	)

141 
	#PA_VOLUME_INVALID
 ((
∑_vﬁume_t
Ë
UINT32_MAX
)

	)

144 
	#PA_VOLUME_IS_VALID
(
v
Ë((vË<
PA_VOLUME_MAX
)

	)

147 
	#PA_CLAMP_VOLUME
(
v
Ë(
	`PA_CLAMP_UNLIKELY
((v), 
PA_VOLUME_MUTED
, 
PA_VOLUME_MAX
))

	)

150 
	s∑_cvﬁume
 {

151 
uöt8_t
 
	mch™√ls
;

152 
∑_vﬁume_t
 
	mvÆues
[
PA_CHANNELS_MAX
];

153 } 
	t∑_cvﬁume
;

156 
	$∑_cvﬁume_equÆ
(c⁄° 
∑_cvﬁume
 *
a
, c⁄°Öa_cvﬁumê*
b
Ë
PA_GCC_PURE
;

161 
∑_cvﬁume
* 
	`∑_cvﬁume_öô
’a_cvﬁumê*
a
);

164 
	#∑_cvﬁume_ª£t
(
a
, 
n
Ë
	`∑_cvﬁume_£t
(◊), (n), 
PA_VOLUME_NORM
)

	)

167 
	#∑_cvﬁume_muã
(
a
, 
n
Ë
	`∑_cvﬁume_£t
(◊), (n), 
PA_VOLUME_MUTED
)

	)

170 
∑_cvﬁume
* 
	`∑_cvﬁume_£t
’a_cvﬁumê*
a
, 
ch™√ls
, 
∑_vﬁume_t
 
v
);

177 
	#PA_CVOLUME_SNPRINT_MAX
 320

	)

180 *
	`∑_cvﬁume_¢¥öt
(*
s
, 
size_t
 
l
, c⁄° 
∑_cvﬁume
 *
c
);

187 
	#PA_SW_CVOLUME_SNPRINT_DB_MAX
 448

	)

190 *
	`∑_sw_cvﬁume_¢¥öt_dB
(*
s
, 
size_t
 
l
, c⁄° 
∑_cvﬁume
 *
c
);

196 
	#PA_CVOLUME_SNPRINT_VERBOSE_MAX
 1984

	)

202 *
	`∑_cvﬁume_¢¥öt_vîbo£
(*
s
, 
size_t
 
l
, c⁄° 
∑_cvﬁume
 *
c
, c⁄° 
∑_ch™√l_m≠
 *
m≠
, 
¥öt_dB
);

209 
	#PA_VOLUME_SNPRINT_MAX
 10

	)

212 *
	`∑_vﬁume_¢¥öt
(*
s
, 
size_t
 
l
, 
∑_vﬁume_t
 
v
);

219 
	#PA_SW_VOLUME_SNPRINT_DB_MAX
 10

	)

222 *
	`∑_sw_vﬁume_¢¥öt_dB
(*
s
, 
size_t
 
l
, 
∑_vﬁume_t
 
v
);

228 
	#PA_VOLUME_SNPRINT_VERBOSE_MAX
 35

	)

233 *
	`∑_vﬁume_¢¥öt_vîbo£
(*
s
, 
size_t
 
l
, 
∑_vﬁume_t
 
v
, 
¥öt_dB
);

236 
∑_vﬁume_t
 
	$∑_cvﬁume_avg
(c⁄° 
∑_cvﬁume
 *
a
Ë
PA_GCC_PURE
;

243 
∑_vﬁume_t
 
	$∑_cvﬁume_avg_mask
(c⁄° 
∑_cvﬁume
 *
a
, c⁄° 
∑_ch™√l_m≠
 *
cm
, 
∑_ch™√l_posôi⁄_mask_t
 
mask
Ë
PA_GCC_PURE
;

246 
∑_vﬁume_t
 
	$∑_cvﬁume_max
(c⁄° 
∑_cvﬁume
 *
a
Ë
PA_GCC_PURE
;

253 
∑_vﬁume_t
 
	$∑_cvﬁume_max_mask
(c⁄° 
∑_cvﬁume
 *
a
, c⁄° 
∑_ch™√l_m≠
 *
cm
, 
∑_ch™√l_posôi⁄_mask_t
 
mask
Ë
PA_GCC_PURE
;

256 
∑_vﬁume_t
 
	$∑_cvﬁume_mö
(c⁄° 
∑_cvﬁume
 *
a
Ë
PA_GCC_PURE
;

263 
∑_vﬁume_t
 
	$∑_cvﬁume_mö_mask
(c⁄° 
∑_cvﬁume
 *
a
, c⁄° 
∑_ch™√l_m≠
 *
cm
, 
∑_ch™√l_posôi⁄_mask_t
 
mask
Ë
PA_GCC_PURE
;

266 
	$∑_cvﬁume_vÆid
(c⁄° 
∑_cvﬁume
 *
v
Ë
PA_GCC_PURE
;

269 
	$∑_cvﬁume_ch™√ls_equÆ_to
(c⁄° 
∑_cvﬁume
 *
a
, 
∑_vﬁume_t
 
v
Ë
PA_GCC_PURE
;

272 
	#∑_cvﬁume_is_muãd
(
a
Ë
	`∑_cvﬁume_ch™√ls_equÆ_to
(◊), 
PA_VOLUME_MUTED
)

	)

275 
	#∑_cvﬁume_is_n‹m
(
a
Ë
	`∑_cvﬁume_ch™√ls_equÆ_to
(◊), 
PA_VOLUME_NORM
)

	)

280 
∑_vﬁume_t
 
	$∑_sw_vﬁume_mu…ùly
(
∑_vﬁume_t
 
a
,Öa_vﬁume_à
b
Ë
PA_GCC_CONST
;

285 
∑_cvﬁume
 *
	`∑_sw_cvﬁume_mu…ùly
’a_cvﬁumê*
de°
, c⁄°Öa_cvﬁumê*
a
, c⁄°Öa_cvﬁumê*
b
);

291 
∑_cvﬁume
 *
	`∑_sw_cvﬁume_mu…ùly_sˇœr
’a_cvﬁumê*
de°
, c⁄°Öa_cvﬁumê*
a
, 
∑_vﬁume_t
 
b
);

297 
∑_vﬁume_t
 
	$∑_sw_vﬁume_divide
(
∑_vﬁume_t
 
a
,Öa_vﬁume_à
b
Ë
PA_GCC_CONST
;

302 
∑_cvﬁume
 *
	`∑_sw_cvﬁume_divide
’a_cvﬁumê*
de°
, c⁄°Öa_cvﬁumê*
a
, c⁄°Öa_cvﬁumê*
b
);

308 
∑_cvﬁume
 *
	`∑_sw_cvﬁume_divide_sˇœr
’a_cvﬁumê*
de°
, c⁄°Öa_cvﬁumê*
a
, 
∑_vﬁume_t
 
b
);

311 
∑_vﬁume_t
 
	$∑_sw_vﬁume_‰om_dB
(
f
Ë
PA_GCC_CONST
;

314 
	$∑_sw_vﬁume_to_dB
(
∑_vﬁume_t
 
v
Ë
PA_GCC_CONST
;

318 
∑_vﬁume_t
 
	$∑_sw_vﬁume_‰om_löór
(
v
Ë
PA_GCC_CONST
;

321 
	$∑_sw_vﬁume_to_löór
(
∑_vﬁume_t
 
v
Ë
PA_GCC_CONST
;

323 #ifde‡
INFINITY


324 
	#PA_DECIBEL_MININFTY
 ((Ë-
INFINITY
)

	)

327 
	#PA_DECIBEL_MININFTY
 ((Ë-200.0)

	)

331 
∑_cvﬁume
 *
	`∑_cvﬁume_ªm≠
’a_cvﬁumê*
v
, c⁄° 
∑_ch™√l_m≠
 *
‰om
, c⁄°Öa_ch™√l_m≠ *
to
);

335 
	$∑_cvﬁume_com∑tibÀ
(c⁄° 
∑_cvﬁume
 *
v
, c⁄° 
∑_ßm∂e_•ec
 *
ss
Ë
PA_GCC_PURE
;

339 
	$∑_cvﬁume_com∑tibÀ_wôh_ch™√l_m≠
(c⁄° 
∑_cvﬁume
 *
v
, c⁄° 
∑_ch™√l_m≠
 *
cm
Ë
PA_GCC_PURE
;

346 
	$∑_cvﬁume_gë_bÆ™˚
(c⁄° 
∑_cvﬁume
 *
v
, c⁄° 
∑_ch™√l_m≠
 *
m≠
Ë
PA_GCC_PURE
;

357 
∑_cvﬁume
* 
	`∑_cvﬁume_£t_bÆ™˚
’a_cvﬁumê*
v
, c⁄° 
∑_ch™√l_m≠
 *
m≠
, 
√w_bÆ™˚
);

364 
	$∑_cvﬁume_gë_Áde
(c⁄° 
∑_cvﬁume
 *
v
, c⁄° 
∑_ch™√l_m≠
 *
m≠
Ë
PA_GCC_PURE
;

375 
∑_cvﬁume
* 
	`∑_cvﬁume_£t_Áde
’a_cvﬁumê*
v
, c⁄° 
∑_ch™√l_m≠
 *
m≠
, 
√w_Áde
);

380 
∑_cvﬁume
* 
	`∑_cvﬁume_sˇÀ
’a_cvﬁumê*
v
, 
∑_vﬁume_t
 
max
);

386 
∑_cvﬁume
* 
	`∑_cvﬁume_sˇÀ_mask
’a_cvﬁumê*
v
, 
∑_vﬁume_t
 
max
, 
∑_ch™√l_m≠
 *
cm
, 
∑_ch™√l_posôi⁄_mask_t
 
mask
);

393 
∑_cvﬁume
* 
	`∑_cvﬁume_£t_posôi⁄
’a_cvﬁumê*
cv
, c⁄° 
∑_ch™√l_m≠
 *
m≠
, 
∑_ch™√l_posôi⁄_t
 
t
, 
∑_vﬁume_t
 
v
);

399 
∑_vﬁume_t
 
	$∑_cvﬁume_gë_posôi⁄
(
∑_cvﬁume
 *
cv
, c⁄° 
∑_ch™√l_m≠
 *
m≠
, 
∑_ch™√l_posôi⁄_t
 
t
Ë
PA_GCC_PURE
;

404 
∑_cvﬁume
* 
	`∑_cvﬁume_mîge
’a_cvﬁumê*
de°
, c⁄°Öa_cvﬁumê*
a
, c⁄°Öa_cvﬁumê*
b
);

408 
∑_cvﬁume
* 
	`∑_cvﬁume_öc_˛amp
’a_cvﬁumê*
v
, 
∑_vﬁume_t
 
öc
,Öa_vﬁume_à
limô
);

412 
∑_cvﬁume
* 
	`∑_cvﬁume_öc
’a_cvﬁumê*
v
, 
∑_vﬁume_t
 
öc
);

416 
∑_cvﬁume
* 
	`∑_cvﬁume_dec
’a_cvﬁumê*
v
, 
∑_vﬁume_t
 
dec
);

418 
PA_C_DECL_END


	@/usr/include/pulse/xmalloc.h

1 #i‚de‡
foomem‹yhfoo


2 
	#foomem‹yhfoo


	)

25 
	~<sys/ty≥s.h
>

26 
	~<°dlib.h
>

27 
	~<limôs.h
>

28 
	~<as£π.h
>

30 
	~<pul£/cde˛.h
>

31 
	~<pul£/gccma¸o.h
>

32 
	~<pul£/vîsi⁄.h
>

38 
PA_C_DECL_BEGIN


41 * 
	$∑_xmÆloc
(
size_t
 
l
Ë
PA_GCC_MALLOC
 
	`PA_GCC_ALLOC_SIZE
(1);

44 *
	$∑_xmÆloc0
(
size_t
 
l
Ë
PA_GCC_MALLOC
 
	`PA_GCC_ALLOC_SIZE
(1);

47 *
	$∑_xªÆloc
(*
±r
, 
size_t
 
size
Ë
	`PA_GCC_ALLOC_SIZE
(2);

50 
	`∑_x‰ì
(*
p
);

53 *
	$∑_x°rdup
(c⁄° *
s
Ë
PA_GCC_MALLOC
;

56 *
	$∑_x°∫dup
(c⁄° *
s
, 
size_t
 
l
Ë
PA_GCC_MALLOC
;

59 * 
	$∑_xmemdup
(c⁄° *
p
, 
size_t
 
l
Ë
PA_GCC_MALLOC
 
	`PA_GCC_ALLOC_SIZE
(2);

62 * 
	$_∑_x√w_öã∫Æ
(
size_t
 
n
, size_à
k
Ë
PA_GCC_MALLOC
 
	`PA_GCC_ALLOC_SIZE2
(1,2);

64 
ölöe
 * 
	$_∑_x√w_öã∫Æ
(
size_t
 
n
, size_à
k
) {

65 
	`as£π
(
n
 < 
INT_MAX
/
k
);

66  
	`∑_xmÆloc
(
n
*
k
);

67 
	}
}

70 
	#∑_x√w
(
ty≥
, 
n
Ë(—y≥*Ë
	`_∑_x√w_öã∫Æ
(“), —y≥)))

	)

73 * 
	$_∑_x√w0_öã∫Æ
(
size_t
 
n
, size_à
k
Ë
PA_GCC_MALLOC
 
	`PA_GCC_ALLOC_SIZE2
(1,2);

75 
ölöe
 * 
	$_∑_x√w0_öã∫Æ
(
size_t
 
n
, size_à
k
) {

76 
	`as£π
(
n
 < 
INT_MAX
/
k
);

77  
	`∑_xmÆloc0
(
n
*
k
);

78 
	}
}

81 
	#∑_x√w0
(
ty≥
, 
n
Ë(—y≥*Ë
	`_∑_x√w0_öã∫Æ
(“), —y≥)))

	)

84 * 
	$_∑_x√wdup_öã∫Æ
(c⁄° *
p
, 
size_t
 
n
, size_à
k
Ë
PA_GCC_MALLOC
 
	`PA_GCC_ALLOC_SIZE2
(2,3);

86 
ölöe
 * 
	$_∑_x√wdup_öã∫Æ
(c⁄° *
p
, 
size_t
 
n
, size_à
k
) {

87 
	`as£π
(
n
 < 
INT_MAX
/
k
);

88  
	`∑_xmemdup
(
p
, 
n
*
k
);

89 
	}
}

92 
	#∑_x√wdup
(
ty≥
, 
p
, 
n
Ë(—y≥*Ë
	`_∑_x√wdup_öã∫Æ
(’), (n), —y≥)))

	)

95 * 
	$_∑_xª√w_öã∫Æ
(*
p
, 
size_t
 
n
, size_à
k
Ë
PA_GCC_MALLOC
 
	`PA_GCC_ALLOC_SIZE2
(2,3);

97 
ölöe
 * 
	$_∑_xª√w_öã∫Æ
(*
p
, 
size_t
 
n
, size_à
k
) {

98 
	`as£π
(
n
 < 
INT_MAX
/
k
);

99  
	`∑_xªÆloc
(
p
, 
n
*
k
);

100 
	}
}

103 
	#∑_xª√w
(
ty≥
, 
p
, 
n
Ë(—y≥*Ë
	`_∑_xª√w_öã∫Æ
’, (n), —y≥)))

	)

105 
	gPA_C_DECL_END


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 
	#__√ed_time_t


	)

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

34 #i‚de‡
__pid_t_deföed


35 
__pid_t
 
	tpid_t
;

36 
	#__pid_t_deföed


	)

41 
	~<bôs/sched.h
>

43 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

46 
__BEGIN_DECLS


49 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

50 
__THROW
;

53 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

56 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

57 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

60 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

63 
	$sched_yõld
 (Ë
__THROW
;

66 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

69 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

72 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

75 #ifde‡
__USE_GNU


77 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

78 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

80 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

81 
˝u£ç
)

	)

82 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

83 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

86 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

87 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

88 
˝u£ç
)

	)

89 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

90 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

93 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

94 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

97 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

103 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

105 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

107 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

110 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

111 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

112 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

116 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

117 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

120 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

121 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

124 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/KHR/khrplatform.h

1 #i‚de‡
__khΩœtf‹m_h_


2 
	#__khΩœtf‹m_h_


	)

100 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__SCITECH_SNAP__
)

101 #i‡
deföed
(
KHRONOS_DLL_EXPORTS
)

102 
	#KHRONOS_APICALL
 
	`__de˛•ec
(
dŒexp‹t
)

	)

104 
	#KHRONOS_APICALL
 
	`__de˛•ec
(
dŒimp‹t
)

	)

106 #ñi‡
deföed
 (
__SYMBIAN32__
)

107 
	#KHRONOS_APICALL
 
IMPORT_C


	)

108 #ñi‡(
deföed
(
__GNUC__
Ë&& (__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 303) \

109 || (
deföed
(
__SUNPRO_C
Ë&& (
	g__SUNPRO_C
 >= 0x590))

111 
	#KHRONOS_APICALL
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

113 
	#KHRONOS_APICALL


	)

122 #i‡
deföed
(
_WIN32
Ë&& !deföed(
_WIN32_WCE
Ë&& !deföed(
__SCITECH_SNAP__
)

124 
	#KHRONOS_APIENTRY
 
__°dˇŒ


	)

126 
	#KHRONOS_APIENTRY


	)

134 #i‡
deföed
 (
__ARMCC_2__
)

135 
	#KHRONOS_APIATTRIBUTES
 
__so·Â


	)

137 
	#KHRONOS_APIATTRIBUTES


	)

143 #i‡(
deföed
(
__STDC_VERSION__
Ë&& __STDC_VERSION__ >199901LË|| deföed(
__GNUC__
Ë|| deföed(
__SCO__
Ë|| deföed(
__USLC__
)

149 
	~<°döt.h
>

150 
öt32_t
 
	tkhr⁄os_öt32_t
;

151 
uöt32_t
 
	tkhr⁄os_uöt32_t
;

152 
öt64_t
 
	tkhr⁄os_öt64_t
;

153 
uöt64_t
 
	tkhr⁄os_uöt64_t
;

154 
	#KHRONOS_SUPPORT_INT64
 1

	)

155 
	#KHRONOS_SUPPORT_FLOAT
 1

	)

157 #ñi‡
deföed
(
__VMS
 ) || deföed(
__sgi
)

162 
	~<öây≥s.h
>

163 
öt32_t
 
	tkhr⁄os_öt32_t
;

164 
uöt32_t
 
	tkhr⁄os_uöt32_t
;

165 
öt64_t
 
	tkhr⁄os_öt64_t
;

166 
uöt64_t
 
	tkhr⁄os_uöt64_t
;

167 
	#KHRONOS_SUPPORT_INT64
 1

	)

168 
	#KHRONOS_SUPPORT_FLOAT
 1

	)

170 #ñi‡
deföed
(
_WIN32
Ë&& !deföed(
__SCITECH_SNAP__
)

175 
__öt32
 
	tkhr⁄os_öt32_t
;

176 
	t__öt32
 
	tkhr⁄os_uöt32_t
;

177 
__öt64
 
	tkhr⁄os_öt64_t
;

178 
	t__öt64
 
	tkhr⁄os_uöt64_t
;

179 
	#KHRONOS_SUPPORT_INT64
 1

	)

180 
	#KHRONOS_SUPPORT_FLOAT
 1

	)

182 #ñi‡
deföed
(
__sun__
Ë|| deföed(
__digôÆ__
)

187 
	tkhr⁄os_öt32_t
;

188 
	tkhr⁄os_uöt32_t
;

189 #i‡
deföed
(
__¨ch64__
Ë|| deföed(
_LP64
)

190 
	tkhr⁄os_öt64_t
;

191 
	tkhr⁄os_uöt64_t
;

193 
	tkhr⁄os_öt64_t
;

194 
	tkhr⁄os_uöt64_t
;

196 
	#KHRONOS_SUPPORT_INT64
 1

	)

197 
	#KHRONOS_SUPPORT_FLOAT
 1

	)

204 
	tkhr⁄os_öt32_t
;

205 
	tkhr⁄os_uöt32_t
;

206 
	#KHRONOS_SUPPORT_INT64
 0

	)

207 
	#KHRONOS_SUPPORT_FLOAT
 0

	)

214 
	~<°döt.h
>

215 
öt32_t
 
	tkhr⁄os_öt32_t
;

216 
uöt32_t
 
	tkhr⁄os_uöt32_t
;

217 
öt64_t
 
	tkhr⁄os_öt64_t
;

218 
uöt64_t
 
	tkhr⁄os_uöt64_t
;

219 
	#KHRONOS_SUPPORT_INT64
 1

	)

220 
	#KHRONOS_SUPPORT_FLOAT
 1

	)

228 sig√d 
	tkhr⁄os_öt8_t
;

229 
	tkhr⁄os_uöt8_t
;

230 sig√d 
	tkhr⁄os_öt16_t
;

231 
	tkhr⁄os_uöt16_t
;

232 sig√d 
	tkhr⁄os_öçå_t
;

233 
	tkhr⁄os_uöçå_t
;

234 sig√d 
	tkhr⁄os_ssize_t
;

235 
	tkhr⁄os_usize_t
;

237 #i‡
KHRONOS_SUPPORT_FLOAT


241 
	tkhr⁄os_Êﬂt_t
;

244 #i‡
KHRONOS_SUPPORT_INT64


254 
khr⁄os_uöt64_t
 
	tkhr⁄os_utime_«no£c⁄ds_t
;

255 
khr⁄os_öt64_t
 
	tkhr⁄os_°ime_«no£c⁄ds_t
;

261 #i‚de‡
KHRONOS_MAX_ENUM


262 
	#KHRONOS_MAX_ENUM
 0x7FFFFFFF

	)

272 
	mKHRONOS_FALSE
 = 0,

273 
	mKHRONOS_TRUE
 = 1,

274 
	mKHRONOS_BOOLEAN_ENUM_FORCE_SIZE
 = 
KHRONOS_MAX_ENUM


275 } 
	tkhr⁄os_boﬁón_íum_t
;

	@/usr/include/X11/Xmd.h

47 #i‚de‡
XMD_H


48 
	#XMD_H
 1

	)

56 #i‡
deföed
(
__sun
Ë&& deföed(
__SVR4
)

57 
	~<sys/iß_defs.h
>

60 #i‡
deföed
 (
_LP64
Ë|| deföed(
__LP64__
) || \

61 
deföed
(
__Æpha
Ë|| deföed(
__Æpha__
) || \

62 
deföed
(
__ü64__
Ë|| deföed(
ü64
) || \

63 
deföed
(
__•¨c64__
) || \

64 
deföed
(
__s390x__
) || \

65 
deföed
(
__amd64__
Ë|| deföed(
amd64
) || \

66 
	$deföed
(
__powîpc64__
)

67 #i‡!
	`deföed
(
__ILP32__
)

68 
	#LONG64


	)

86 
	#_SIZEOF
(
x
Ë
sz_
##
	)
x

87 
	#SIZEOF
(
x
Ë
	`_SIZEOF
(x)

	)

94 
	#B32


	)

95 
	#B16


	)

96 #ifde‡
LONG64


97 
	tINT64
;

98 
	tINT32
;

100 
	tINT32
;

102 
	tINT16
;

104 sig√d 
	tINT8
;

106 #ifde‡
LONG64


107 
	tCARD64
;

108 
	tCARD32
;

110 
	tCARD64
;

111 
	tCARD32
;

113 
	tCARD16
;

114 
	tCARD8
;

116 
CARD32
 
	tBITS32
;

117 
CARD16
 
	tBITS16
;

119 
CARD8
 
	tBYTE
;

120 
CARD8
 
	tBOOL
;

126 
	#cvtINT8toI¡
(
vÆ
Ë(vÆ)

	)

127 
	#cvtINT16toI¡
(
vÆ
Ë(vÆ)

	)

128 
	#cvtINT32toI¡
(
vÆ
Ë(vÆ)

	)

129 
	#cvtINT8toSh‹t
(
vÆ
Ë(vÆ)

	)

130 
	#cvtINT16toSh‹t
(
vÆ
Ë(vÆ)

	)

131 
	#cvtINT32toSh‹t
(
vÆ
Ë(vÆ)

	)

132 
	#cvtINT8toL⁄g
(
vÆ
Ë(vÆ)

	)

133 
	#cvtINT16toL⁄g
(
vÆ
Ë(vÆ)

	)

134 
	#cvtINT32toL⁄g
(
vÆ
Ë(vÆ)

	)

140 
	#NEXTPTR
(
p
,
t
Ë((— *)’)Ë+ 1)

	)

	@/usr/include/X11/extensions/XKB.h

27 #i‚de‡
_XKB_H_


28 
	#_XKB_H_


	)

35 
	#X_kbU£Exãnsi⁄
 0

	)

36 
	#X_kbSñe˘Evíts
 1

	)

37 
	#X_kbBñl
 3

	)

38 
	#X_kbGëSèã
 4

	)

39 
	#X_kbL©chLockSèã
 5

	)

40 
	#X_kbGëC⁄åﬁs
 6

	)

41 
	#X_kbSëC⁄åﬁs
 7

	)

42 
	#X_kbGëM≠
 8

	)

43 
	#X_kbSëM≠
 9

	)

44 
	#X_kbGëCom∑tM≠
 10

	)

45 
	#X_kbSëCom∑tM≠
 11

	)

46 
	#X_kbGëIndiˇt‹Sèã
 12

	)

47 
	#X_kbGëIndiˇt‹M≠
 13

	)

48 
	#X_kbSëIndiˇt‹M≠
 14

	)

49 
	#X_kbGëNamedIndiˇt‹
 15

	)

50 
	#X_kbSëNamedIndiˇt‹
 16

	)

51 
	#X_kbGëNames
 17

	)

52 
	#X_kbSëNames
 18

	)

53 
	#X_kbGëGeomëry
 19

	)

54 
	#X_kbSëGeomëry
 20

	)

55 
	#X_kbPîClõ¡Fœgs
 21

	)

56 
	#X_kbLi°Comp⁄íts
 22

	)

57 
	#X_kbGëKbdByName
 23

	)

58 
	#X_kbGëDevi˚Info
 24

	)

59 
	#X_kbSëDevi˚Info
 25

	)

60 
	#X_kbSëDebuggögFœgs
 101

	)

66 
	#XkbEvítCode
 0

	)

67 
	#XkbNumbîEvíts
 (
XkbEvítCode
+1)

	)

76 
	#XkbNewKeybﬂrdNŸify
 0

	)

77 
	#XkbM≠NŸify
 1

	)

78 
	#XkbSèãNŸify
 2

	)

79 
	#XkbC⁄åﬁsNŸify
 3

	)

80 
	#XkbIndiˇt‹SèãNŸify
 4

	)

81 
	#XkbIndiˇt‹M≠NŸify
 5

	)

82 
	#XkbNamesNŸify
 6

	)

83 
	#XkbCom∑tM≠NŸify
 7

	)

84 
	#XkbBñlNŸify
 8

	)

85 
	#XkbA˘i⁄Mesßge
 9

	)

86 
	#XkbAc˚ssXNŸify
 10

	)

87 
	#XkbExãnsi⁄Devi˚NŸify
 11

	)

93 
	#XkbNewKeybﬂrdNŸifyMask
 (1L << 0)

	)

94 
	#XkbM≠NŸifyMask
 (1L << 1)

	)

95 
	#XkbSèãNŸifyMask
 (1L << 2)

	)

96 
	#XkbC⁄åﬁsNŸifyMask
 (1L << 3)

	)

97 
	#XkbIndiˇt‹SèãNŸifyMask
 (1L << 4)

	)

98 
	#XkbIndiˇt‹M≠NŸifyMask
 (1L << 5)

	)

99 
	#XkbNamesNŸifyMask
 (1L << 6)

	)

100 
	#XkbCom∑tM≠NŸifyMask
 (1L << 7)

	)

101 
	#XkbBñlNŸifyMask
 (1L << 8)

	)

102 
	#XkbA˘i⁄MesßgeMask
 (1L << 9)

	)

103 
	#XkbAc˚ssXNŸifyMask
 (1L << 10)

	)

104 
	#XkbExãnsi⁄Devi˚NŸifyMask
 (1L << 11)

	)

105 
	#XkbAŒEvítsMask
 (0xFFF)

	)

110 
	#XkbNKN_KeycodesMask
 (1L << 0)

	)

111 
	#XkbNKN_GeomëryMask
 (1L << 1)

	)

112 
	#XkbNKN_Devi˚IDMask
 (1L << 2)

	)

113 
	#XkbAŒNewKeybﬂrdEvítsMask
 (0x7)

	)

120 
	#XkbAXN_SKPªss
 0

	)

121 
	#XkbAXN_SKAc˚±
 1

	)

122 
	#XkbAXN_SKReje˘
 2

	)

123 
	#XkbAXN_SKRñó£
 3

	)

124 
	#XkbAXN_BKAc˚±
 4

	)

125 
	#XkbAXN_BKReje˘
 5

	)

126 
	#XkbAXN_AXKW¨nög
 6

	)

133 
	#XkbAXN_SKPªssMask
 (1L << 0)

	)

134 
	#XkbAXN_SKAc˚±Mask
 (1L << 1)

	)

135 
	#XkbAXN_SKReje˘Mask
 (1L << 2)

	)

136 
	#XkbAXN_SKRñó£Mask
 (1L << 3)

	)

137 
	#XkbAXN_BKAc˚±Mask
 (1L << 4)

	)

138 
	#XkbAXN_BKReje˘Mask
 (1L << 5)

	)

139 
	#XkbAXN_AXKW¨nögMask
 (1L << 6)

	)

140 
	#XkbAŒAc˚ssXEvítsMask
 (0x7f)

	)

147 
	#XkbAŒSèãEvítsMask
 
XkbAŒSèãComp⁄ítsMask


	)

148 
	#XkbAŒM≠EvítsMask
 
XkbAŒM≠Comp⁄ítsMask


	)

149 
	#XkbAŒC⁄åﬁEvítsMask
 
XkbAŒC⁄åﬁsMask


	)

150 
	#XkbAŒIndiˇt‹EvítsMask
 
XkbAŒIndiˇt‹sMask


	)

151 
	#XkbAŒNameEvítsMask
 
XkbAŒNamesMask


	)

152 
	#XkbAŒCom∑tM≠EvítsMask
 
XkbAŒCom∑tMask


	)

153 
	#XkbAŒBñlEvítsMask
 (1L << 0)

	)

154 
	#XkbAŒA˘i⁄MesßgesMask
 (1L << 0)

	)

169 
	#XkbKeybﬂrd
 0

	)

170 
	#XkbNumbîEº‹s
 1

	)

172 
	#XkbEº_BadDevi˚
 0xff

	)

173 
	#XkbEº_BadCœss
 0x„

	)

174 
	#XkbEº_BadId
 0xfd

	)

180 
	#XkbClõ¡M≠Mask
 (1L << 0)

	)

181 
	#XkbSîvîM≠Mask
 (1L << 1)

	)

182 
	#XkbCom∑tM≠Mask
 (1L << 2)

	)

183 
	#XkbIndiˇt‹M≠Mask
 (1L << 3)

	)

184 
	#XkbNamesMask
 (1L << 4)

	)

185 
	#XkbGeomëryMask
 (1L << 5)

	)

186 
	#XkbC⁄åﬁsMask
 (1L << 6)

	)

187 
	#XkbAŒComp⁄ítsMask
 (0x7f)

	)

196 
	#XkbModifõrSèãMask
 (1L << 0)

	)

197 
	#XkbModifõrBa£Mask
 (1L << 1)

	)

198 
	#XkbModifõrL©chMask
 (1L << 2)

	)

199 
	#XkbModifõrLockMask
 (1L << 3)

	)

200 
	#XkbGroupSèãMask
 (1L << 4)

	)

201 
	#XkbGroupBa£Mask
 (1L << 5)

	)

202 
	#XkbGroupL©chMask
 (1L << 6)

	)

203 
	#XkbGroupLockMask
 (1L << 7)

	)

204 
	#XkbCom∑tSèãMask
 (1L << 8)

	)

205 
	#XkbGøbModsMask
 (1L << 9)

	)

206 
	#XkbCom∑tGøbModsMask
 (1L << 10)

	)

207 
	#XkbLookupModsMask
 (1L << 11)

	)

208 
	#XkbCom∑tLookupModsMask
 (1L << 12)

	)

209 
	#XkbPoöãrBuâ⁄Mask
 (1L << 13)

	)

210 
	#XkbAŒSèãComp⁄ítsMask
 (0x3fff)

	)

240 
	#XkbRïótKeysMask
 (1L << 0)

	)

241 
	#XkbSlowKeysMask
 (1L << 1)

	)

242 
	#XkbBoun˚KeysMask
 (1L << 2)

	)

243 
	#XkbStickyKeysMask
 (1L << 3)

	)

244 
	#XkbMou£KeysMask
 (1L << 4)

	)

245 
	#XkbMou£KeysAc˚lMask
 (1L << 5)

	)

246 
	#XkbAc˚ssXKeysMask
 (1L << 6)

	)

247 
	#XkbAc˚ssXTimeoutMask
 (1L << 7)

	)

248 
	#XkbAc˚ssXFìdbackMask
 (1L << 8)

	)

249 
	#XkbAudibÀBñlMask
 (1L << 9)

	)

250 
	#XkbOvîœy1Mask
 (1L << 10)

	)

251 
	#XkbOvîœy2Mask
 (1L << 11)

	)

252 
	#XkbIgn‹eGroupLockMask
 (1L << 12)

	)

253 
	#XkbGroupsWøpMask
 (1L << 27)

	)

254 
	#XkbI¡î«lModsMask
 (1L << 28)

	)

255 
	#XkbIgn‹eLockModsMask
 (1L << 29)

	)

256 
	#XkbPîKeyRïótMask
 (1L << 30)

	)

257 
	#XkbC⁄åﬁsE«bÀdMask
 (1L << 31)

	)

259 
	#XkbAc˚ssXO±i⁄sMask
 (
XkbStickyKeysMask
|
XkbAc˚ssXFìdbackMask
)

	)

261 
	#XkbAŒBoﬁónCålsMask
 (0x00001FFF)

	)

262 
	#XkbAŒC⁄åﬁsMask
 (0xF8001FFF)

	)

263 
	#XkbAŒC⁄åﬁEvítsMask
 
XkbAŒC⁄åﬁsMask


	)

274 
	#XkbAX_SKPªssFBMask
 (1L << 0)

	)

275 
	#XkbAX_SKAc˚±FBMask
 (1L << 1)

	)

276 
	#XkbAX_FótuªFBMask
 (1L << 2)

	)

277 
	#XkbAX_SlowW¨nFBMask
 (1L << 3)

	)

278 
	#XkbAX_Indiˇt‹FBMask
 (1L << 4)

	)

279 
	#XkbAX_StickyKeysFBMask
 (1L << 5)

	)

280 
	#XkbAX_TwoKeysMask
 (1L << 6)

	)

281 
	#XkbAX_L©chToLockMask
 (1L << 7)

	)

282 
	#XkbAX_SKRñó£FBMask
 (1L << 8)

	)

283 
	#XkbAX_SKReje˘FBMask
 (1L << 9)

	)

284 
	#XkbAX_BKReje˘FBMask
 (1L << 10)

	)

285 
	#XkbAX_DumbBñlFBMask
 (1L << 11)

	)

286 
	#XkbAX_FBO±i⁄sMask
 (0xF3F)

	)

287 
	#XkbAX_SKO±i⁄sMask
 (0x0C0)

	)

288 
	#XkbAX_AŒO±i⁄sMask
 (0xFFF)

	)

317 
	#XkbU£C‹eKbd
 0x0100

	)

318 
	#XkbU£C‹ePå
 0x0200

	)

319 
	#XkbDÊtXICœss
 0x0300

	)

320 
	#XkbDÊtXIId
 0x0400

	)

321 
	#XkbAŒXICœs£s
 0x0500

	)

322 
	#XkbAŒXIIds
 0x0600

	)

323 
	#XkbXIN⁄e
 0xff00

	)

325 
	#XkbLegÆXILedCœss
(
c
Ë(((c)==
KbdFìdbackCœss
)||\

326 ((
c
)==
LedFìdbackCœss
)||\

327 ((
c
)==
XkbDÊtXICœss
)||\

328 ((
c
)==
XkbAŒXICœs£s
))

	)

329 
	#XkbLegÆXIBñlCœss
(
c
Ë(((c)==
KbdFìdbackCœss
)||\

330 ((
c
)==
BñlFìdbackCœss
)||\

331 ((
c
)==
XkbDÊtXICœss
)||\

332 ((
c
)==
XkbAŒXICœs£s
))

	)

333 
	#XkbEx∂icôXIDevi˚
(
c
Ë(((c)&(~0xff))==0)

	)

334 
	#XkbEx∂icôXICœss
(
c
Ë(((c)&(~0xff))==0)

	)

335 
	#XkbEx∂icôXIId
(
c
Ë(((c)&(~0xff))==0)

	)

336 
	#XkbSögÀXICœss
(
c
Ë((((c)&(~0xff))==0)||((c)==
XkbDÊtXICœss
))

	)

337 
	#XkbSögÀXIId
(
c
Ë((((c)&(~0xff))==0)||((c)==
XkbDÊtXIId
))

	)

339 
	#XkbNoModifõr
 0xff

	)

340 
	#XkbNoShi·Levñ
 0xff

	)

341 
	#XkbNoSh≠e
 0xff

	)

342 
	#XkbNoIndiˇt‹
 0xff

	)

344 
	#XkbNoModifõrMask
 0

	)

345 
	#XkbAŒModifõrsMask
 0xff

	)

346 
	#XkbAŒVútuÆModsMask
 0xffff

	)

348 
	#XkbNumKbdGroups
 4

	)

349 
	#XkbMaxKbdGroup
 (
XkbNumKbdGroups
-1)

	)

351 
	#XkbMaxMou£KeysBä
 4

	)

358 
	#XkbGroup1Index
 0

	)

359 
	#XkbGroup2Index
 1

	)

360 
	#XkbGroup3Index
 2

	)

361 
	#XkbGroup4Index
 3

	)

362 
	#XkbAnyGroup
 254

	)

363 
	#XkbAŒGroups
 255

	)

365 
	#XkbGroup1Mask
 (1<<0)

	)

366 
	#XkbGroup2Mask
 (1<<1)

	)

367 
	#XkbGroup3Mask
 (1<<2)

	)

368 
	#XkbGroup4Mask
 (1<<3)

	)

369 
	#XkbAnyGroupMask
 (1<<7)

	)

370 
	#XkbAŒGroupsMask
 (0xf)

	)

379 
	#XkbBuûdC‹eSèã
(
m
,
g
Ë((((g)&0x3)<<13)|((m)&0xff))

	)

380 
	#XkbGroupF‹C‹eSèã
(
s
Ë(((s)>>13)&0x3)

	)

381 
	#XkbIsLegÆGroup
(
g
Ë(((g)>=0)&&((g)<
XkbNumKbdGroups
))

	)

391 
	#XkbWøpI¡oR™ge
 (0x00)

	)

392 
	#XkbCœmpI¡oR™ge
 (0x40)

	)

393 
	#XkbRedúe˘I¡oR™ge
 (0x80)

	)

426 
	#XkbSA_CÀ¨Locks
 (1L << 0)

	)

427 
	#XkbSA_L©chToLock
 (1L << 1)

	)

429 
	#XkbSA_LockNoLock
 (1L << 0)

	)

430 
	#XkbSA_LockNoU∆ock
 (1L << 1)

	)

432 
	#XkbSA_U£ModM≠Mods
 (1L << 2)

	)

434 
	#XkbSA_GroupAbsﬁuã
 (1L << 2)

	)

435 
	#XkbSA_U£DÊtBuâ⁄
 0

	)

437 
	#XkbSA_NoAc˚Àøti⁄
 (1L << 0)

	)

438 
	#XkbSA_MoveAbsﬁuãX
 (1L << 1)

	)

439 
	#XkbSA_MoveAbsﬁuãY
 (1L << 2)

	)

441 
	#XkbSA_ISODÊtIsGroup
 (1L << 7)

	)

442 
	#XkbSA_ISONoAf„˘Mods
 (1L << 6)

	)

443 
	#XkbSA_ISONoAf„˘Group
 (1L << 5)

	)

444 
	#XkbSA_ISONoAf„˘På
 (1L << 4)

	)

445 
	#XkbSA_ISONoAf„˘Cåls
 (1L << 3)

	)

446 
	#XkbSA_ISOAf„˘Mask
 (0x78)

	)

448 
	#XkbSA_MesßgeOnPªss
 (1L << 0)

	)

449 
	#XkbSA_MesßgeOnRñó£
 (1L << 1)

	)

450 
	#XkbSA_MesßgeGíKeyEvít
 (1L << 2)

	)

452 
	#XkbSA_Af„˘DÊtBä
 1

	)

453 
	#XkbSA_DÊtBäAbsﬁuã
 (1L << 2)

	)

455 
	#XkbSA_SwôchAµliˇti⁄
 (1L << 0)

	)

456 
	#XkbSA_SwôchAbsﬁuã
 (1L << 2)

	)

464 
	#XkbSA_Ign‹eVÆ
 (0x00)

	)

465 
	#XkbSA_SëVÆMö
 (0x10)

	)

466 
	#XkbSA_SëVÆCíãr
 (0x20)

	)

467 
	#XkbSA_SëVÆMax
 (0x30)

	)

468 
	#XkbSA_SëVÆRñ©ive
 (0x40)

	)

469 
	#XkbSA_SëVÆAbsﬁuã
 (0x50)

	)

470 
	#XkbSA_VÆOpMask
 (0x70)

	)

471 
	#XkbSA_VÆSˇÀMask
 (0x07)

	)

472 
	#XkbSA_VÆOp
(
a
Ë(◊)&
XkbSA_VÆOpMask
)

	)

473 
	#XkbSA_VÆSˇÀ
(
a
Ë(◊)&
XkbSA_VÆSˇÀMask
)

	)

479 
	#XkbSA_NoA˘i⁄
 0x00

	)

480 
	#XkbSA_SëMods
 0x01

	)

481 
	#XkbSA_L©chMods
 0x02

	)

482 
	#XkbSA_LockMods
 0x03

	)

483 
	#XkbSA_SëGroup
 0x04

	)

484 
	#XkbSA_L©chGroup
 0x05

	)

485 
	#XkbSA_LockGroup
 0x06

	)

486 
	#XkbSA_MovePå
 0x07

	)

487 
	#XkbSA_PåBä
 0x08

	)

488 
	#XkbSA_LockPåBä
 0x09

	)

489 
	#XkbSA_SëPåDÊt
 0x0a

	)

490 
	#XkbSA_ISOLock
 0x0b

	)

491 
	#XkbSA_Tîmö©e
 0x0c

	)

492 
	#XkbSA_SwôchS¸ìn
 0x0d

	)

493 
	#XkbSA_SëC⁄åﬁs
 0x0e

	)

494 
	#XkbSA_LockC⁄åﬁs
 0x0f

	)

495 
	#XkbSA_A˘i⁄Mesßge
 0x10

	)

496 
	#XkbSA_Redúe˘Key
 0x11

	)

497 
	#XkbSA_Devi˚Bä
 0x12

	)

498 
	#XkbSA_LockDevi˚Bä
 0x13

	)

499 
	#XkbSA_Devi˚VÆu©‹
 0x14

	)

500 
	#XkbSA_La°A˘i⁄
 
XkbSA_Devi˚VÆu©‹


	)

501 
	#XkbSA_NumA˘i⁄s
 (
XkbSA_La°A˘i⁄
+1)

	)

503 
	#XkbSA_XFªe86Priv©e
 0x86

	)

508 
	#XkbSA_BªakL©ch
 \

509 ((1<<
XkbSA_NoA˘i⁄
)|(1<<
XkbSA_PåBä
)|(1<<
XkbSA_LockPåBä
)|\

510 (1<<
XkbSA_Tîmö©e
)|(1<<
XkbSA_SwôchS¸ìn
)|(1<<
XkbSA_SëC⁄åﬁs
)|\

511 (1<<
XkbSA_LockC⁄åﬁs
)|(1<<
XkbSA_A˘i⁄Mesßge
)|\

512 (1<<
XkbSA_Redúe˘Key
)|(1<<
XkbSA_Devi˚Bä
)|(1<<
XkbSA_LockDevi˚Bä
))

	)

517 
	#XkbIsModA˘i⁄
(
a
Ë((◊)->
ty≥
>=
Xkb_SASëMods
)&&(◊)->ty≥<=
XkbSA_LockMods
))

	)

518 
	#XkbIsGroupA˘i⁄
(
a
Ë((◊)->
ty≥
>=
XkbSA_SëGroup
)&&(◊)->ty≥<=
XkbSA_LockGroup
))

	)

519 
	#XkbIsPåA˘i⁄
(
a
Ë((◊)->
ty≥
>=
XkbSA_MovePå
)&&(◊)->ty≥<=
XkbSA_SëPåDÊt
))

	)

530 
	#XkbKB_Pîm™ít
 0x80

	)

531 
	#XkbKB_OpMask
 0x7f

	)

533 
	#XkbKB_DeÁu…
 0x00

	)

534 
	#XkbKB_Lock
 0x01

	)

535 
	#XkbKB_RadioGroup
 0x02

	)

536 
	#XkbKB_Ovîœy1
 0x03

	)

537 
	#XkbKB_Ovîœy2
 0x04

	)

539 
	#XkbKB_RGAŒowN⁄e
 0x80

	)

544 
	#XkbMöLegÆKeyCode
 8

	)

545 
	#XkbMaxLegÆKeyCode
 255

	)

546 
	#XkbMaxKeyCou¡
 (
XkbMaxLegÆKeyCode
-
XkbMöLegÆKeyCode
+1)

	)

547 
	#XkbPîKeyBôAºaySize
 ((
XkbMaxLegÆKeyCode
+1)/8)

	)

549 
	#XkbIsLegÆKeycode
(
k
Ë((k)>=
XkbMöLegÆKeyCode
)

	)

554 
	#XkbNumModifõrs
 8

	)

555 
	#XkbNumVútuÆMods
 16

	)

556 
	#XkbNumIndiˇt‹s
 32

	)

557 
	#XkbAŒIndiˇt‹sMask
 (0xffffffff)

	)

558 
	#XkbMaxRadioGroups
 32

	)

559 
	#XkbAŒRadioGroupsMask
 (0xffffffff)

	)

560 
	#XkbMaxShi·Levñ
 63

	)

561 
	#XkbMaxSymsPîKey
 (
XkbMaxShi·Levñ
*
XkbNumKbdGroups
)

	)

562 
	#XkbRGMaxMembîs
 12

	)

563 
	#XkbA˘i⁄MesßgeLígth
 6

	)

564 
	#XkbKeyNameLígth
 4

	)

565 
	#XkbMaxRedúe˘Cou¡
 8

	)

567 
	#XkbGeomPtsPîMM
 10

	)

568 
	#XkbGeomMaxCﬁ‹s
 32

	)

569 
	#XkbGeomMaxLabñCﬁ‹s
 3

	)

570 
	#XkbGeomMaxPri‹ôy
 255

	)

575 
	#XkbO√LevñIndex
 0

	)

576 
	#XkbTwoLevñIndex
 1

	)

577 
	#XkbAÕhabëicIndex
 2

	)

578 
	#XkbKey∑dIndex
 3

	)

579 
	#XkbLa°RequúedTy≥
 
XkbKey∑dIndex


	)

580 
	#XkbNumRequúedTy≥s
 (
XkbLa°RequúedTy≥
+1)

	)

581 
	#XkbMaxKeyTy≥s
 255

	)

583 
	#XkbO√LevñMask
 (1<<0)

	)

584 
	#XkbTwoLevñMask
 (1<<1)

	)

585 
	#XkbAÕhabëicMask
 (1<<2)

	)

586 
	#XkbKey∑dMask
 (1<<3)

	)

587 
	#XkbAŒRequúedTy≥s
 (0xf)

	)

589 
	#XkbShi·Levñ
(
n
Ë(“)-1)

	)

590 
	#XkbShi·LevñMask
(
n
Ë(1<<(“)-1))

	)

595 
	#XkbName
 "XKEYBOARD"

	)

596 
	#XkbMaj‹Vîsi⁄
 1

	)

597 
	#XkbMö‹Vîsi⁄
 0

	)

605 
	#XkbEx∂icôKeyTy≥sMask
 (0x0f)

	)

606 
	#XkbEx∂icôKeyTy≥1Mask
 (1<<0)

	)

607 
	#XkbEx∂icôKeyTy≥2Mask
 (1<<1)

	)

608 
	#XkbEx∂icôKeyTy≥3Mask
 (1<<2)

	)

609 
	#XkbEx∂icôKeyTy≥4Mask
 (1<<3)

	)

610 
	#XkbEx∂icôI¡î¥ëMask
 (1<<4)

	)

611 
	#XkbEx∂icôAutoRïótMask
 (1<<5)

	)

612 
	#XkbEx∂icôBehavi‹Mask
 (1<<6)

	)

613 
	#XkbEx∂icôVModM≠Mask
 (1<<7)

	)

614 
	#XkbAŒEx∂icôMask
 (0xff)

	)

626 
	#XkbKeyTy≥sMask
 (1<<0)

	)

627 
	#XkbKeySymsMask
 (1<<1)

	)

628 
	#XkbModifõrM≠Mask
 (1<<2)

	)

629 
	#XkbEx∂icôComp⁄ítsMask
 (1<<3)

	)

630 
	#XkbKeyA˘i⁄sMask
 (1<<4)

	)

631 
	#XkbKeyBehavi‹sMask
 (1<<5)

	)

632 
	#XkbVútuÆModsMask
 (1<<6)

	)

633 
	#XkbVútuÆModM≠Mask
 (1<<7)

	)

635 
	#XkbAŒClõ¡InfoMask
 (
XkbKeyTy≥sMask
|
XkbKeySymsMask
|
XkbModifõrM≠Mask
)

	)

636 
	#XkbAŒSîvîInfoMask
 (
XkbEx∂icôComp⁄ítsMask
|
XkbKeyA˘i⁄sMask
|
XkbKeyBehavi‹sMask
|
XkbVútuÆModsMask
|
XkbVútuÆModM≠Mask
)

	)

637 
	#XkbAŒM≠Comp⁄ítsMask
 (
XkbAŒClõ¡InfoMask
|
XkbAŒSîvîInfoMask
)

	)

643 
	#XkbSI_AutoRïót
 (1<<0)

	)

644 
	#XkbSI_LockögKey
 (1<<1)

	)

651 
	#XkbSI_LevñO√O∆y
 (0x80)

	)

652 
	#XkbSI_OpMask
 (0x7f)

	)

653 
	#XkbSI_N⁄eOf
 (0)

	)

654 
	#XkbSI_AnyOfOrN⁄e
 (1)

	)

655 
	#XkbSI_AnyOf
 (2)

	)

656 
	#XkbSI_AŒOf
 (3)

	)

657 
	#XkbSI_Exa˘ly
 (4)

	)

665 
	#XkbIM_NoEx∂icô
 (1L << 7)

	)

666 
	#XkbIM_NoAutom©ic
 (1L << 6)

	)

667 
	#XkbIM_LEDDrivesKB
 (1L << 5)

	)

675 
	#XkbIM_U£Ba£
 (1L << 0)

	)

676 
	#XkbIM_U£L©ched
 (1L << 1)

	)

677 
	#XkbIM_U£Locked
 (1L << 2)

	)

678 
	#XkbIM_U£Ef„˘ive
 (1L << 3)

	)

679 
	#XkbIM_U£Com∑t
 (1L << 4)

	)

681 
	#XkbIM_U£N⁄e
 0

	)

682 
	#XkbIM_U£AnyGroup
 (
XkbIM_U£Ba£
|
XkbIM_U£L©ched
|
XkbIM_U£Locked
\

683 |
XkbIM_U£Ef„˘ive
)

	)

684 
	#XkbIM_U£AnyMods
 (
XkbIM_U£AnyGroup
|
XkbIM_U£Com∑t
)

	)

690 
	#XkbSymI¡îpMask
 (1<<0)

	)

691 
	#XkbGroupCom∑tMask
 (1<<1)

	)

692 
	#XkbAŒCom∑tMask
 (0x3)

	)

701 
	#XkbKeycodesNameMask
 (1<<0)

	)

702 
	#XkbGeomëryNameMask
 (1<<1)

	)

703 
	#XkbSymbﬁsNameMask
 (1<<2)

	)

704 
	#XkbPhysSymbﬁsNameMask
 (1<<3)

	)

705 
	#XkbTy≥sNameMask
 (1<<4)

	)

706 
	#XkbCom∑tNameMask
 (1<<5)

	)

707 
	#XkbKeyTy≥NamesMask
 (1<<6)

	)

708 
	#XkbKTLevñNamesMask
 (1<<7)

	)

709 
	#XkbIndiˇt‹NamesMask
 (1<<8)

	)

710 
	#XkbKeyNamesMask
 (1<<9)

	)

711 
	#XkbKeyAlü£sMask
 (1<<10)

	)

712 
	#XkbVútuÆModNamesMask
 (1<<11)

	)

713 
	#XkbGroupNamesMask
 (1<<12)

	)

714 
	#XkbRGNamesMask
 (1<<13)

	)

715 
	#XkbComp⁄ítNamesMask
 (0x3f)

	)

716 
	#XkbAŒNamesMask
 (0x3fff)

	)

723 
	#XkbGBN_Ty≥sMask
 (1L << 0)

	)

724 
	#XkbGBN_Com∑tM≠Mask
 (1L << 1)

	)

725 
	#XkbGBN_Clõ¡SymbﬁsMask
 (1L << 2)

	)

726 
	#XkbGBN_SîvîSymbﬁsMask
 (1L << 3)

	)

727 
	#XkbGBN_SymbﬁsMask
 (
XkbGBN_Clõ¡SymbﬁsMask
|
XkbGBN_SîvîSymbﬁsMask
)

	)

728 
	#XkbGBN_Indiˇt‹M≠Mask
 (1L << 4)

	)

729 
	#XkbGBN_KeyNamesMask
 (1L << 5)

	)

730 
	#XkbGBN_GeomëryMask
 (1L << 6)

	)

731 
	#XkbGBN_OthîNamesMask
 (1L << 7)

	)

732 
	#XkbGBN_AŒComp⁄ítsMask
 (0xff)

	)

737 
	#XkbLC_Hiddí
 (1L << 0)

	)

738 
	#XkbLC_DeÁu…
 (1L << 1)

	)

739 
	#XkbLC_P¨tül
 (1L << 2)

	)

741 
	#XkbLC_AÕh™umîicKeys
 (1L << 8)

	)

742 
	#XkbLC_ModifõrKeys
 (1L << 9)

	)

743 
	#XkbLC_Key∑dKeys
 (1L << 10)

	)

744 
	#XkbLC_Fun˘i⁄Keys
 (1L << 11)

	)

745 
	#XkbLC_A…î«ãGroup
 (1L << 12)

	)

758 
	#XkbXI_KeybﬂrdsMask
 (1L << 0)

	)

759 
	#XkbXI_Buâ⁄A˘i⁄sMask
 (1L << 1)

	)

760 
	#XkbXI_Indiˇt‹NamesMask
 (1L << 2)

	)

761 
	#XkbXI_Indiˇt‹M≠sMask
 (1L << 3)

	)

762 
	#XkbXI_Indiˇt‹SèãMask
 (1L << 4)

	)

763 
	#XkbXI_Unsuµ‹ãdFótuªMask
 (1L << 15)

	)

764 
	#XkbXI_AŒFótuªsMask
 (0x001f)

	)

765 
	#XkbXI_AŒDevi˚FótuªsMask
 (0x001e)

	)

767 
	#XkbXI_Indiˇt‹sMask
 (0x001c)

	)

768 
	#XkbAŒExãnsi⁄Devi˚EvítsMask
 (0x801f)

	)

774 
	#XkbPCF_Dëe˘abÀAutoRïótMask
 (1L << 0)

	)

775 
	#XkbPCF_GøbsU£XKBSèãMask
 (1L << 1)

	)

776 
	#XkbPCF_AutoRe£tC⁄åﬁsMask
 (1L << 2)

	)

777 
	#XkbPCF_LookupSèãWhíGøbbed
 (1L << 3)

	)

778 
	#XkbPCF_SídEvítU£sXKBSèã
 (1L << 4)

	)

779 
	#XkbPCF_AŒFœgsMask
 (0x1F)

	)

784 
	#XkbDF_DißbÀLocks
 (1<<0)

	)

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/v4l2-common.h

29 #i‚de‡
__V4L2_COMMON__


30 
	#__V4L2_COMMON__


	)

32 
	~<löux/ty≥s.h
>

41 
	#V4L2_SEL_TGT_CROP
 0x0000

	)

43 
	#V4L2_SEL_TGT_CROP_DEFAULT
 0x0001

	)

45 
	#V4L2_SEL_TGT_CROP_BOUNDS
 0x0002

	)

47 
	#V4L2_SEL_TGT_COMPOSE
 0x0100

	)

49 
	#V4L2_SEL_TGT_COMPOSE_DEFAULT
 0x0101

	)

51 
	#V4L2_SEL_TGT_COMPOSE_BOUNDS
 0x0102

	)

53 
	#V4L2_SEL_TGT_COMPOSE_PADDED
 0x0103

	)

56 
	#V4L2_SEL_TGT_CROP_ACTIVE
 
V4L2_SEL_TGT_CROP


	)

57 
	#V4L2_SEL_TGT_COMPOSE_ACTIVE
 
V4L2_SEL_TGT_COMPOSE


	)

58 
	#V4L2_SUBDEV_SEL_TGT_CROP_ACTUAL
 
V4L2_SEL_TGT_CROP


	)

59 
	#V4L2_SUBDEV_SEL_TGT_COMPOSE_ACTUAL
 
V4L2_SEL_TGT_COMPOSE


	)

60 
	#V4L2_SUBDEV_SEL_TGT_CROP_BOUNDS
 
V4L2_SEL_TGT_CROP_BOUNDS


	)

61 
	#V4L2_SUBDEV_SEL_TGT_COMPOSE_BOUNDS
 
V4L2_SEL_TGT_COMPOSE_BOUNDS


	)

64 
	#V4L2_SEL_FLAG_GE
 (1 << 0)

	)

65 
	#V4L2_SEL_FLAG_LE
 (1 << 1)

	)

66 
	#V4L2_SEL_FLAG_KEEP_CONFIG
 (1 << 2)

	)

69 
	#V4L2_SUBDEV_SEL_FLAG_SIZE_GE
 
V4L2_SEL_FLAG_GE


	)

70 
	#V4L2_SUBDEV_SEL_FLAG_SIZE_LE
 
V4L2_SEL_FLAG_LE


	)

71 
	#V4L2_SUBDEV_SEL_FLAG_KEEP_CONFIG
 
V4L2_SEL_FLAG_KEEP_CONFIG


	)

73 
	sv4l2_edid
 {

74 
__u32
 
	m∑d
;

75 
__u32
 
	m°¨t_block
;

76 
__u32
 
	mblocks
;

77 
__u32
 
	mª£rved
[5];

78 
__u8
 *
	medid
;

	@/usr/include/linux/v4l2-controls.h

49 #i‚de‡
__LINUX_V4L2_CONTROLS_H


50 
	#__LINUX_V4L2_CONTROLS_H


	)

53 
	#V4L2_CTRL_CLASS_USER
 0x00980000

	)

54 
	#V4L2_CTRL_CLASS_MPEG
 0x00990000

	)

55 
	#V4L2_CTRL_CLASS_CAMERA
 0x009a0000

	)

56 
	#V4L2_CTRL_CLASS_FM_TX
 0x009b0000

	)

57 
	#V4L2_CTRL_CLASS_FLASH
 0x009c0000

	)

58 
	#V4L2_CTRL_CLASS_JPEG
 0x009d0000

	)

59 
	#V4L2_CTRL_CLASS_IMAGE_SOURCE
 0x009e0000

	)

60 
	#V4L2_CTRL_CLASS_IMAGE_PROC
 0x009f0000

	)

61 
	#V4L2_CTRL_CLASS_DV
 0x00a00000

	)

62 
	#V4L2_CTRL_CLASS_FM_RX
 0x00a10000

	)

63 
	#V4L2_CTRL_CLASS_RF_TUNER
 0x00a20000

	)

67 
	#V4L2_CID_BASE
 (
V4L2_CTRL_CLASS_USER
 | 0x900)

	)

68 
	#V4L2_CID_USER_BASE
 
V4L2_CID_BASE


	)

69 
	#V4L2_CID_USER_CLASS
 (
V4L2_CTRL_CLASS_USER
 | 1)

	)

70 
	#V4L2_CID_BRIGHTNESS
 (
V4L2_CID_BASE
+0)

	)

71 
	#V4L2_CID_CONTRAST
 (
V4L2_CID_BASE
+1)

	)

72 
	#V4L2_CID_SATURATION
 (
V4L2_CID_BASE
+2)

	)

73 
	#V4L2_CID_HUE
 (
V4L2_CID_BASE
+3)

	)

74 
	#V4L2_CID_AUDIO_VOLUME
 (
V4L2_CID_BASE
+5)

	)

75 
	#V4L2_CID_AUDIO_BALANCE
 (
V4L2_CID_BASE
+6)

	)

76 
	#V4L2_CID_AUDIO_BASS
 (
V4L2_CID_BASE
+7)

	)

77 
	#V4L2_CID_AUDIO_TREBLE
 (
V4L2_CID_BASE
+8)

	)

78 
	#V4L2_CID_AUDIO_MUTE
 (
V4L2_CID_BASE
+9)

	)

79 
	#V4L2_CID_AUDIO_LOUDNESS
 (
V4L2_CID_BASE
+10)

	)

80 
	#V4L2_CID_BLACK_LEVEL
 (
V4L2_CID_BASE
+11Ë

	)

81 
	#V4L2_CID_AUTO_WHITE_BALANCE
 (
V4L2_CID_BASE
+12)

	)

82 
	#V4L2_CID_DO_WHITE_BALANCE
 (
V4L2_CID_BASE
+13)

	)

83 
	#V4L2_CID_RED_BALANCE
 (
V4L2_CID_BASE
+14)

	)

84 
	#V4L2_CID_BLUE_BALANCE
 (
V4L2_CID_BASE
+15)

	)

85 
	#V4L2_CID_GAMMA
 (
V4L2_CID_BASE
+16)

	)

86 
	#V4L2_CID_WHITENESS
 (
V4L2_CID_GAMMA
Ë

	)

87 
	#V4L2_CID_EXPOSURE
 (
V4L2_CID_BASE
+17)

	)

88 
	#V4L2_CID_AUTOGAIN
 (
V4L2_CID_BASE
+18)

	)

89 
	#V4L2_CID_GAIN
 (
V4L2_CID_BASE
+19)

	)

90 
	#V4L2_CID_HFLIP
 (
V4L2_CID_BASE
+20)

	)

91 
	#V4L2_CID_VFLIP
 (
V4L2_CID_BASE
+21)

	)

93 
	#V4L2_CID_POWER_LINE_FREQUENCY
 (
V4L2_CID_BASE
+24)

	)

94 
	ev4l2_powî_löe_‰equícy
 {

95 
	mV4L2_CID_POWER_LINE_FREQUENCY_DISABLED
 = 0,

96 
	mV4L2_CID_POWER_LINE_FREQUENCY_50HZ
 = 1,

97 
	mV4L2_CID_POWER_LINE_FREQUENCY_60HZ
 = 2,

98 
	mV4L2_CID_POWER_LINE_FREQUENCY_AUTO
 = 3,

100 
	#V4L2_CID_HUE_AUTO
 (
V4L2_CID_BASE
+25)

	)

101 
	#V4L2_CID_WHITE_BALANCE_TEMPERATURE
 (
V4L2_CID_BASE
+26)

	)

102 
	#V4L2_CID_SHARPNESS
 (
V4L2_CID_BASE
+27)

	)

103 
	#V4L2_CID_BACKLIGHT_COMPENSATION
 (
V4L2_CID_BASE
+28)

	)

104 
	#V4L2_CID_CHROMA_AGC
 (
V4L2_CID_BASE
+29)

	)

105 
	#V4L2_CID_COLOR_KILLER
 (
V4L2_CID_BASE
+30)

	)

106 
	#V4L2_CID_COLORFX
 (
V4L2_CID_BASE
+31)

	)

107 
	ev4l2_cﬁ‹fx
 {

108 
	mV4L2_COLORFX_NONE
 = 0,

109 
	mV4L2_COLORFX_BW
 = 1,

110 
	mV4L2_COLORFX_SEPIA
 = 2,

111 
	mV4L2_COLORFX_NEGATIVE
 = 3,

112 
	mV4L2_COLORFX_EMBOSS
 = 4,

113 
	mV4L2_COLORFX_SKETCH
 = 5,

114 
	mV4L2_COLORFX_SKY_BLUE
 = 6,

115 
	mV4L2_COLORFX_GRASS_GREEN
 = 7,

116 
	mV4L2_COLORFX_SKIN_WHITEN
 = 8,

117 
	mV4L2_COLORFX_VIVID
 = 9,

118 
	mV4L2_COLORFX_AQUA
 = 10,

119 
	mV4L2_COLORFX_ART_FREEZE
 = 11,

120 
	mV4L2_COLORFX_SILHOUETTE
 = 12,

121 
	mV4L2_COLORFX_SOLARIZATION
 = 13,

122 
	mV4L2_COLORFX_ANTIQUE
 = 14,

123 
	mV4L2_COLORFX_SET_CBCR
 = 15,

125 
	#V4L2_CID_AUTOBRIGHTNESS
 (
V4L2_CID_BASE
+32)

	)

126 
	#V4L2_CID_BAND_STOP_FILTER
 (
V4L2_CID_BASE
+33)

	)

128 
	#V4L2_CID_ROTATE
 (
V4L2_CID_BASE
+34)

	)

129 
	#V4L2_CID_BG_COLOR
 (
V4L2_CID_BASE
+35)

	)

131 
	#V4L2_CID_CHROMA_GAIN
 (
V4L2_CID_BASE
+36)

	)

133 
	#V4L2_CID_ILLUMINATORS_1
 (
V4L2_CID_BASE
+37)

	)

134 
	#V4L2_CID_ILLUMINATORS_2
 (
V4L2_CID_BASE
+38)

	)

136 
	#V4L2_CID_MIN_BUFFERS_FOR_CAPTURE
 (
V4L2_CID_BASE
+39)

	)

137 
	#V4L2_CID_MIN_BUFFERS_FOR_OUTPUT
 (
V4L2_CID_BASE
+40)

	)

139 
	#V4L2_CID_ALPHA_COMPONENT
 (
V4L2_CID_BASE
+41)

	)

140 
	#V4L2_CID_COLORFX_CBCR
 (
V4L2_CID_BASE
+42)

	)

143 
	#V4L2_CID_LASTP1
 (
V4L2_CID_BASE
+43)

	)

149 
	#V4L2_CID_USER_MEYE_BASE
 (
V4L2_CID_USER_BASE
 + 0x1000)

	)

153 
	#V4L2_CID_USER_BTTV_BASE
 (
V4L2_CID_USER_BASE
 + 0x1010)

	)

158 
	#V4L2_CID_USER_S2255_BASE
 (
V4L2_CID_USER_BASE
 + 0x1030)

	)

162 
	#V4L2_CID_USER_SI476X_BASE
 (
V4L2_CID_USER_BASE
 + 0x1040)

	)

166 
	#V4L2_CID_USER_TI_VPE_BASE
 (
V4L2_CID_USER_BASE
 + 0x1050)

	)

170 
	#V4L2_CID_USER_SAA7134_BASE
 (
V4L2_CID_USER_BASE
 + 0x1060)

	)

176 
	#V4L2_CID_MPEG_BASE
 (
V4L2_CTRL_CLASS_MPEG
 | 0x900)

	)

177 
	#V4L2_CID_MPEG_CLASS
 (
V4L2_CTRL_CLASS_MPEG
 | 1)

	)

180 
	#V4L2_CID_MPEG_STREAM_TYPE
 (
V4L2_CID_MPEG_BASE
+0)

	)

181 
	ev4l2_m≥g_°ªam_ty≥
 {

182 
	mV4L2_MPEG_STREAM_TYPE_MPEG2_PS
 = 0,

183 
	mV4L2_MPEG_STREAM_TYPE_MPEG2_TS
 = 1,

184 
	mV4L2_MPEG_STREAM_TYPE_MPEG1_SS
 = 2,

185 
	mV4L2_MPEG_STREAM_TYPE_MPEG2_DVD
 = 3,

186 
	mV4L2_MPEG_STREAM_TYPE_MPEG1_VCD
 = 4,

187 
	mV4L2_MPEG_STREAM_TYPE_MPEG2_SVCD
 = 5,

189 
	#V4L2_CID_MPEG_STREAM_PID_PMT
 (
V4L2_CID_MPEG_BASE
+1)

	)

190 
	#V4L2_CID_MPEG_STREAM_PID_AUDIO
 (
V4L2_CID_MPEG_BASE
+2)

	)

191 
	#V4L2_CID_MPEG_STREAM_PID_VIDEO
 (
V4L2_CID_MPEG_BASE
+3)

	)

192 
	#V4L2_CID_MPEG_STREAM_PID_PCR
 (
V4L2_CID_MPEG_BASE
+4)

	)

193 
	#V4L2_CID_MPEG_STREAM_PES_ID_AUDIO
 (
V4L2_CID_MPEG_BASE
+5)

	)

194 
	#V4L2_CID_MPEG_STREAM_PES_ID_VIDEO
 (
V4L2_CID_MPEG_BASE
+6)

	)

195 
	#V4L2_CID_MPEG_STREAM_VBI_FMT
 (
V4L2_CID_MPEG_BASE
+7)

	)

196 
	ev4l2_m≥g_°ªam_vbi_fmt
 {

197 
	mV4L2_MPEG_STREAM_VBI_FMT_NONE
 = 0,

198 
	mV4L2_MPEG_STREAM_VBI_FMT_IVTV
 = 1,

202 
	#V4L2_CID_MPEG_AUDIO_SAMPLING_FREQ
 (
V4L2_CID_MPEG_BASE
+100)

	)

203 
	ev4l2_m≥g_audio_ßm∂ög_‰eq
 {

204 
	mV4L2_MPEG_AUDIO_SAMPLING_FREQ_44100
 = 0,

205 
	mV4L2_MPEG_AUDIO_SAMPLING_FREQ_48000
 = 1,

206 
	mV4L2_MPEG_AUDIO_SAMPLING_FREQ_32000
 = 2,

208 
	#V4L2_CID_MPEG_AUDIO_ENCODING
 (
V4L2_CID_MPEG_BASE
+101)

	)

209 
	ev4l2_m≥g_audio_ícodög
 {

210 
	mV4L2_MPEG_AUDIO_ENCODING_LAYER_1
 = 0,

211 
	mV4L2_MPEG_AUDIO_ENCODING_LAYER_2
 = 1,

212 
	mV4L2_MPEG_AUDIO_ENCODING_LAYER_3
 = 2,

213 
	mV4L2_MPEG_AUDIO_ENCODING_AAC
 = 3,

214 
	mV4L2_MPEG_AUDIO_ENCODING_AC3
 = 4,

216 
	#V4L2_CID_MPEG_AUDIO_L1_BITRATE
 (
V4L2_CID_MPEG_BASE
+102)

	)

217 
	ev4l2_m≥g_audio_l1_bôøã
 {

218 
	mV4L2_MPEG_AUDIO_L1_BITRATE_32K
 = 0,

219 
	mV4L2_MPEG_AUDIO_L1_BITRATE_64K
 = 1,

220 
	mV4L2_MPEG_AUDIO_L1_BITRATE_96K
 = 2,

221 
	mV4L2_MPEG_AUDIO_L1_BITRATE_128K
 = 3,

222 
	mV4L2_MPEG_AUDIO_L1_BITRATE_160K
 = 4,

223 
	mV4L2_MPEG_AUDIO_L1_BITRATE_192K
 = 5,

224 
	mV4L2_MPEG_AUDIO_L1_BITRATE_224K
 = 6,

225 
	mV4L2_MPEG_AUDIO_L1_BITRATE_256K
 = 7,

226 
	mV4L2_MPEG_AUDIO_L1_BITRATE_288K
 = 8,

227 
	mV4L2_MPEG_AUDIO_L1_BITRATE_320K
 = 9,

228 
	mV4L2_MPEG_AUDIO_L1_BITRATE_352K
 = 10,

229 
	mV4L2_MPEG_AUDIO_L1_BITRATE_384K
 = 11,

230 
	mV4L2_MPEG_AUDIO_L1_BITRATE_416K
 = 12,

231 
	mV4L2_MPEG_AUDIO_L1_BITRATE_448K
 = 13,

233 
	#V4L2_CID_MPEG_AUDIO_L2_BITRATE
 (
V4L2_CID_MPEG_BASE
+103)

	)

234 
	ev4l2_m≥g_audio_l2_bôøã
 {

235 
	mV4L2_MPEG_AUDIO_L2_BITRATE_32K
 = 0,

236 
	mV4L2_MPEG_AUDIO_L2_BITRATE_48K
 = 1,

237 
	mV4L2_MPEG_AUDIO_L2_BITRATE_56K
 = 2,

238 
	mV4L2_MPEG_AUDIO_L2_BITRATE_64K
 = 3,

239 
	mV4L2_MPEG_AUDIO_L2_BITRATE_80K
 = 4,

240 
	mV4L2_MPEG_AUDIO_L2_BITRATE_96K
 = 5,

241 
	mV4L2_MPEG_AUDIO_L2_BITRATE_112K
 = 6,

242 
	mV4L2_MPEG_AUDIO_L2_BITRATE_128K
 = 7,

243 
	mV4L2_MPEG_AUDIO_L2_BITRATE_160K
 = 8,

244 
	mV4L2_MPEG_AUDIO_L2_BITRATE_192K
 = 9,

245 
	mV4L2_MPEG_AUDIO_L2_BITRATE_224K
 = 10,

246 
	mV4L2_MPEG_AUDIO_L2_BITRATE_256K
 = 11,

247 
	mV4L2_MPEG_AUDIO_L2_BITRATE_320K
 = 12,

248 
	mV4L2_MPEG_AUDIO_L2_BITRATE_384K
 = 13,

250 
	#V4L2_CID_MPEG_AUDIO_L3_BITRATE
 (
V4L2_CID_MPEG_BASE
+104)

	)

251 
	ev4l2_m≥g_audio_l3_bôøã
 {

252 
	mV4L2_MPEG_AUDIO_L3_BITRATE_32K
 = 0,

253 
	mV4L2_MPEG_AUDIO_L3_BITRATE_40K
 = 1,

254 
	mV4L2_MPEG_AUDIO_L3_BITRATE_48K
 = 2,

255 
	mV4L2_MPEG_AUDIO_L3_BITRATE_56K
 = 3,

256 
	mV4L2_MPEG_AUDIO_L3_BITRATE_64K
 = 4,

257 
	mV4L2_MPEG_AUDIO_L3_BITRATE_80K
 = 5,

258 
	mV4L2_MPEG_AUDIO_L3_BITRATE_96K
 = 6,

259 
	mV4L2_MPEG_AUDIO_L3_BITRATE_112K
 = 7,

260 
	mV4L2_MPEG_AUDIO_L3_BITRATE_128K
 = 8,

261 
	mV4L2_MPEG_AUDIO_L3_BITRATE_160K
 = 9,

262 
	mV4L2_MPEG_AUDIO_L3_BITRATE_192K
 = 10,

263 
	mV4L2_MPEG_AUDIO_L3_BITRATE_224K
 = 11,

264 
	mV4L2_MPEG_AUDIO_L3_BITRATE_256K
 = 12,

265 
	mV4L2_MPEG_AUDIO_L3_BITRATE_320K
 = 13,

267 
	#V4L2_CID_MPEG_AUDIO_MODE
 (
V4L2_CID_MPEG_BASE
+105)

	)

268 
	ev4l2_m≥g_audio_mode
 {

269 
	mV4L2_MPEG_AUDIO_MODE_STEREO
 = 0,

270 
	mV4L2_MPEG_AUDIO_MODE_JOINT_STEREO
 = 1,

271 
	mV4L2_MPEG_AUDIO_MODE_DUAL
 = 2,

272 
	mV4L2_MPEG_AUDIO_MODE_MONO
 = 3,

274 
	#V4L2_CID_MPEG_AUDIO_MODE_EXTENSION
 (
V4L2_CID_MPEG_BASE
+106)

	)

275 
	ev4l2_m≥g_audio_mode_exãnsi⁄
 {

276 
	mV4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_4
 = 0,

277 
	mV4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_8
 = 1,

278 
	mV4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_12
 = 2,

279 
	mV4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_16
 = 3,

281 
	#V4L2_CID_MPEG_AUDIO_EMPHASIS
 (
V4L2_CID_MPEG_BASE
+107)

	)

282 
	ev4l2_m≥g_audio_emphasis
 {

283 
	mV4L2_MPEG_AUDIO_EMPHASIS_NONE
 = 0,

284 
	mV4L2_MPEG_AUDIO_EMPHASIS_50_DIV_15_uS
 = 1,

285 
	mV4L2_MPEG_AUDIO_EMPHASIS_CCITT_J17
 = 2,

287 
	#V4L2_CID_MPEG_AUDIO_CRC
 (
V4L2_CID_MPEG_BASE
+108)

	)

288 
	ev4l2_m≥g_audio_¸c
 {

289 
	mV4L2_MPEG_AUDIO_CRC_NONE
 = 0,

290 
	mV4L2_MPEG_AUDIO_CRC_CRC16
 = 1,

292 
	#V4L2_CID_MPEG_AUDIO_MUTE
 (
V4L2_CID_MPEG_BASE
+109)

	)

293 
	#V4L2_CID_MPEG_AUDIO_AAC_BITRATE
 (
V4L2_CID_MPEG_BASE
+110)

	)

294 
	#V4L2_CID_MPEG_AUDIO_AC3_BITRATE
 (
V4L2_CID_MPEG_BASE
+111)

	)

295 
	ev4l2_m≥g_audio_ac3_bôøã
 {

296 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_32K
 = 0,

297 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_40K
 = 1,

298 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_48K
 = 2,

299 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_56K
 = 3,

300 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_64K
 = 4,

301 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_80K
 = 5,

302 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_96K
 = 6,

303 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_112K
 = 7,

304 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_128K
 = 8,

305 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_160K
 = 9,

306 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_192K
 = 10,

307 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_224K
 = 11,

308 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_256K
 = 12,

309 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_320K
 = 13,

310 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_384K
 = 14,

311 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_448K
 = 15,

312 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_512K
 = 16,

313 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_576K
 = 17,

314 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_640K
 = 18,

316 
	#V4L2_CID_MPEG_AUDIO_DEC_PLAYBACK
 (
V4L2_CID_MPEG_BASE
+112)

	)

317 
	ev4l2_m≥g_audio_dec_∂ayback
 {

318 
	mV4L2_MPEG_AUDIO_DEC_PLAYBACK_AUTO
 = 0,

319 
	mV4L2_MPEG_AUDIO_DEC_PLAYBACK_STEREO
 = 1,

320 
	mV4L2_MPEG_AUDIO_DEC_PLAYBACK_LEFT
 = 2,

321 
	mV4L2_MPEG_AUDIO_DEC_PLAYBACK_RIGHT
 = 3,

322 
	mV4L2_MPEG_AUDIO_DEC_PLAYBACK_MONO
 = 4,

323 
	mV4L2_MPEG_AUDIO_DEC_PLAYBACK_SWAPPED_STEREO
 = 5,

325 
	#V4L2_CID_MPEG_AUDIO_DEC_MULTILINGUAL_PLAYBACK
 (
V4L2_CID_MPEG_BASE
+113)

	)

328 
	#V4L2_CID_MPEG_VIDEO_ENCODING
 (
V4L2_CID_MPEG_BASE
+200)

	)

329 
	ev4l2_m≥g_video_ícodög
 {

330 
	mV4L2_MPEG_VIDEO_ENCODING_MPEG_1
 = 0,

331 
	mV4L2_MPEG_VIDEO_ENCODING_MPEG_2
 = 1,

332 
	mV4L2_MPEG_VIDEO_ENCODING_MPEG_4_AVC
 = 2,

334 
	#V4L2_CID_MPEG_VIDEO_ASPECT
 (
V4L2_CID_MPEG_BASE
+201)

	)

335 
	ev4l2_m≥g_video_a•e˘
 {

336 
	mV4L2_MPEG_VIDEO_ASPECT_1x1
 = 0,

337 
	mV4L2_MPEG_VIDEO_ASPECT_4x3
 = 1,

338 
	mV4L2_MPEG_VIDEO_ASPECT_16x9
 = 2,

339 
	mV4L2_MPEG_VIDEO_ASPECT_221x100
 = 3,

341 
	#V4L2_CID_MPEG_VIDEO_B_FRAMES
 (
V4L2_CID_MPEG_BASE
+202)

	)

342 
	#V4L2_CID_MPEG_VIDEO_GOP_SIZE
 (
V4L2_CID_MPEG_BASE
+203)

	)

343 
	#V4L2_CID_MPEG_VIDEO_GOP_CLOSURE
 (
V4L2_CID_MPEG_BASE
+204)

	)

344 
	#V4L2_CID_MPEG_VIDEO_PULLDOWN
 (
V4L2_CID_MPEG_BASE
+205)

	)

345 
	#V4L2_CID_MPEG_VIDEO_BITRATE_MODE
 (
V4L2_CID_MPEG_BASE
+206)

	)

346 
	ev4l2_m≥g_video_bôøã_mode
 {

347 
	mV4L2_MPEG_VIDEO_BITRATE_MODE_VBR
 = 0,

348 
	mV4L2_MPEG_VIDEO_BITRATE_MODE_CBR
 = 1,

350 
	#V4L2_CID_MPEG_VIDEO_BITRATE
 (
V4L2_CID_MPEG_BASE
+207)

	)

351 
	#V4L2_CID_MPEG_VIDEO_BITRATE_PEAK
 (
V4L2_CID_MPEG_BASE
+208)

	)

352 
	#V4L2_CID_MPEG_VIDEO_TEMPORAL_DECIMATION
 (
V4L2_CID_MPEG_BASE
+209)

	)

353 
	#V4L2_CID_MPEG_VIDEO_MUTE
 (
V4L2_CID_MPEG_BASE
+210)

	)

354 
	#V4L2_CID_MPEG_VIDEO_MUTE_YUV
 (
V4L2_CID_MPEG_BASE
+211)

	)

355 
	#V4L2_CID_MPEG_VIDEO_DECODER_SLICE_INTERFACE
 (
V4L2_CID_MPEG_BASE
+212)

	)

356 
	#V4L2_CID_MPEG_VIDEO_DECODER_MPEG4_DEBLOCK_FILTER
 (
V4L2_CID_MPEG_BASE
+213)

	)

357 
	#V4L2_CID_MPEG_VIDEO_CYCLIC_INTRA_REFRESH_MB
 (
V4L2_CID_MPEG_BASE
+214)

	)

358 
	#V4L2_CID_MPEG_VIDEO_FRAME_RC_ENABLE
 (
V4L2_CID_MPEG_BASE
+215)

	)

359 
	#V4L2_CID_MPEG_VIDEO_HEADER_MODE
 (
V4L2_CID_MPEG_BASE
+216)

	)

360 
	ev4l2_m≥g_video_hódî_mode
 {

361 
	mV4L2_MPEG_VIDEO_HEADER_MODE_SEPARATE
 = 0,

362 
	mV4L2_MPEG_VIDEO_HEADER_MODE_JOINED_WITH_1ST_FRAME
 = 1,

365 
	#V4L2_CID_MPEG_VIDEO_MAX_REF_PIC
 (
V4L2_CID_MPEG_BASE
+217)

	)

366 
	#V4L2_CID_MPEG_VIDEO_MB_RC_ENABLE
 (
V4L2_CID_MPEG_BASE
+218)

	)

367 
	#V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_BYTES
 (
V4L2_CID_MPEG_BASE
+219)

	)

368 
	#V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_MB
 (
V4L2_CID_MPEG_BASE
+220)

	)

369 
	#V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MODE
 (
V4L2_CID_MPEG_BASE
+221)

	)

370 
	ev4l2_m≥g_video_mu…i_¶i˚_mode
 {

371 
	mV4L2_MPEG_VIDEO_MULTI_SLICE_MODE_SINGLE
 = 0,

372 
	mV4L2_MPEG_VIDEO_MULTI_SICE_MODE_MAX_MB
 = 1,

373 
	mV4L2_MPEG_VIDEO_MULTI_SICE_MODE_MAX_BYTES
 = 2,

375 
	#V4L2_CID_MPEG_VIDEO_VBV_SIZE
 (
V4L2_CID_MPEG_BASE
+222)

	)

376 
	#V4L2_CID_MPEG_VIDEO_DEC_PTS
 (
V4L2_CID_MPEG_BASE
+223)

	)

377 
	#V4L2_CID_MPEG_VIDEO_DEC_FRAME
 (
V4L2_CID_MPEG_BASE
+224)

	)

378 
	#V4L2_CID_MPEG_VIDEO_VBV_DELAY
 (
V4L2_CID_MPEG_BASE
+225)

	)

379 
	#V4L2_CID_MPEG_VIDEO_REPEAT_SEQ_HEADER
 (
V4L2_CID_MPEG_BASE
+226)

	)

380 
	#V4L2_CID_MPEG_VIDEO_MV_H_SEARCH_RANGE
 (
V4L2_CID_MPEG_BASE
+227)

	)

381 
	#V4L2_CID_MPEG_VIDEO_MV_V_SEARCH_RANGE
 (
V4L2_CID_MPEG_BASE
+228)

	)

383 
	#V4L2_CID_MPEG_VIDEO_H263_I_FRAME_QP
 (
V4L2_CID_MPEG_BASE
+300)

	)

384 
	#V4L2_CID_MPEG_VIDEO_H263_P_FRAME_QP
 (
V4L2_CID_MPEG_BASE
+301)

	)

385 
	#V4L2_CID_MPEG_VIDEO_H263_B_FRAME_QP
 (
V4L2_CID_MPEG_BASE
+302)

	)

386 
	#V4L2_CID_MPEG_VIDEO_H263_MIN_QP
 (
V4L2_CID_MPEG_BASE
+303)

	)

387 
	#V4L2_CID_MPEG_VIDEO_H263_MAX_QP
 (
V4L2_CID_MPEG_BASE
+304)

	)

388 
	#V4L2_CID_MPEG_VIDEO_H264_I_FRAME_QP
 (
V4L2_CID_MPEG_BASE
+350)

	)

389 
	#V4L2_CID_MPEG_VIDEO_H264_P_FRAME_QP
 (
V4L2_CID_MPEG_BASE
+351)

	)

390 
	#V4L2_CID_MPEG_VIDEO_H264_B_FRAME_QP
 (
V4L2_CID_MPEG_BASE
+352)

	)

391 
	#V4L2_CID_MPEG_VIDEO_H264_MIN_QP
 (
V4L2_CID_MPEG_BASE
+353)

	)

392 
	#V4L2_CID_MPEG_VIDEO_H264_MAX_QP
 (
V4L2_CID_MPEG_BASE
+354)

	)

393 
	#V4L2_CID_MPEG_VIDEO_H264_8X8_TRANSFORM
 (
V4L2_CID_MPEG_BASE
+355)

	)

394 
	#V4L2_CID_MPEG_VIDEO_H264_CPB_SIZE
 (
V4L2_CID_MPEG_BASE
+356)

	)

395 
	#V4L2_CID_MPEG_VIDEO_H264_ENTROPY_MODE
 (
V4L2_CID_MPEG_BASE
+357)

	)

396 
	ev4l2_m≥g_video_h264_íå›y_mode
 {

397 
	mV4L2_MPEG_VIDEO_H264_ENTROPY_MODE_CAVLC
 = 0,

398 
	mV4L2_MPEG_VIDEO_H264_ENTROPY_MODE_CABAC
 = 1,

400 
	#V4L2_CID_MPEG_VIDEO_H264_I_PERIOD
 (
V4L2_CID_MPEG_BASE
+358)

	)

401 
	#V4L2_CID_MPEG_VIDEO_H264_LEVEL
 (
V4L2_CID_MPEG_BASE
+359)

	)

402 
	ev4l2_m≥g_video_h264_Àvñ
 {

403 
	mV4L2_MPEG_VIDEO_H264_LEVEL_1_0
 = 0,

404 
	mV4L2_MPEG_VIDEO_H264_LEVEL_1B
 = 1,

405 
	mV4L2_MPEG_VIDEO_H264_LEVEL_1_1
 = 2,

406 
	mV4L2_MPEG_VIDEO_H264_LEVEL_1_2
 = 3,

407 
	mV4L2_MPEG_VIDEO_H264_LEVEL_1_3
 = 4,

408 
	mV4L2_MPEG_VIDEO_H264_LEVEL_2_0
 = 5,

409 
	mV4L2_MPEG_VIDEO_H264_LEVEL_2_1
 = 6,

410 
	mV4L2_MPEG_VIDEO_H264_LEVEL_2_2
 = 7,

411 
	mV4L2_MPEG_VIDEO_H264_LEVEL_3_0
 = 8,

412 
	mV4L2_MPEG_VIDEO_H264_LEVEL_3_1
 = 9,

413 
	mV4L2_MPEG_VIDEO_H264_LEVEL_3_2
 = 10,

414 
	mV4L2_MPEG_VIDEO_H264_LEVEL_4_0
 = 11,

415 
	mV4L2_MPEG_VIDEO_H264_LEVEL_4_1
 = 12,

416 
	mV4L2_MPEG_VIDEO_H264_LEVEL_4_2
 = 13,

417 
	mV4L2_MPEG_VIDEO_H264_LEVEL_5_0
 = 14,

418 
	mV4L2_MPEG_VIDEO_H264_LEVEL_5_1
 = 15,

420 
	#V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_ALPHA
 (
V4L2_CID_MPEG_BASE
+360)

	)

421 
	#V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_BETA
 (
V4L2_CID_MPEG_BASE
+361)

	)

422 
	#V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_MODE
 (
V4L2_CID_MPEG_BASE
+362)

	)

423 
	ev4l2_m≥g_video_h264_lo›_fûãr_mode
 {

424 
	mV4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_ENABLED
 = 0,

425 
	mV4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_DISABLED
 = 1,

426 
	mV4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_DISABLED_AT_SLICE_BOUNDARY
 = 2,

428 
	#V4L2_CID_MPEG_VIDEO_H264_PROFILE
 (
V4L2_CID_MPEG_BASE
+363)

	)

429 
	ev4l2_m≥g_video_h264_¥ofûe
 {

430 
	mV4L2_MPEG_VIDEO_H264_PROFILE_BASELINE
 = 0,

431 
	mV4L2_MPEG_VIDEO_H264_PROFILE_CONSTRAINED_BASELINE
 = 1,

432 
	mV4L2_MPEG_VIDEO_H264_PROFILE_MAIN
 = 2,

433 
	mV4L2_MPEG_VIDEO_H264_PROFILE_EXTENDED
 = 3,

434 
	mV4L2_MPEG_VIDEO_H264_PROFILE_HIGH
 = 4,

435 
	mV4L2_MPEG_VIDEO_H264_PROFILE_HIGH_10
 = 5,

436 
	mV4L2_MPEG_VIDEO_H264_PROFILE_HIGH_422
 = 6,

437 
	mV4L2_MPEG_VIDEO_H264_PROFILE_HIGH_444_PREDICTIVE
 = 7,

438 
	mV4L2_MPEG_VIDEO_H264_PROFILE_HIGH_10_INTRA
 = 8,

439 
	mV4L2_MPEG_VIDEO_H264_PROFILE_HIGH_422_INTRA
 = 9,

440 
	mV4L2_MPEG_VIDEO_H264_PROFILE_HIGH_444_INTRA
 = 10,

441 
	mV4L2_MPEG_VIDEO_H264_PROFILE_CAVLC_444_INTRA
 = 11,

442 
	mV4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_BASELINE
 = 12,

443 
	mV4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_HIGH
 = 13,

444 
	mV4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_HIGH_INTRA
 = 14,

445 
	mV4L2_MPEG_VIDEO_H264_PROFILE_STEREO_HIGH
 = 15,

446 
	mV4L2_MPEG_VIDEO_H264_PROFILE_MULTIVIEW_HIGH
 = 16,

448 
	#V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_HEIGHT
 (
V4L2_CID_MPEG_BASE
+364)

	)

449 
	#V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_WIDTH
 (
V4L2_CID_MPEG_BASE
+365)

	)

450 
	#V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_ENABLE
 (
V4L2_CID_MPEG_BASE
+366)

	)

451 
	#V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_IDC
 (
V4L2_CID_MPEG_BASE
+367)

	)

452 
	ev4l2_m≥g_video_h264_vui_ßr_idc
 {

453 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_UNSPECIFIED
 = 0,

454 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_1x1
 = 1,

455 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_12x11
 = 2,

456 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_10x11
 = 3,

457 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_16x11
 = 4,

458 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_40x33
 = 5,

459 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_24x11
 = 6,

460 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_20x11
 = 7,

461 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_32x11
 = 8,

462 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_80x33
 = 9,

463 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_18x11
 = 10,

464 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_15x11
 = 11,

465 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_64x33
 = 12,

466 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_160x99
 = 13,

467 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_4x3
 = 14,

468 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_3x2
 = 15,

469 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_2x1
 = 16,

470 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_EXTENDED
 = 17,

472 
	#V4L2_CID_MPEG_VIDEO_H264_SEI_FRAME_PACKING
 (
V4L2_CID_MPEG_BASE
+368)

	)

473 
	#V4L2_CID_MPEG_VIDEO_H264_SEI_FP_CURRENT_FRAME_0
 (
V4L2_CID_MPEG_BASE
+369)

	)

474 
	#V4L2_CID_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE
 (
V4L2_CID_MPEG_BASE
+370)

	)

475 
	ev4l2_m≥g_video_h264_£i_Â_¨øngemít_ty≥
 {

476 
	mV4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_CHECKERBOARD
 = 0,

477 
	mV4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_COLUMN
 = 1,

478 
	mV4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_ROW
 = 2,

479 
	mV4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_SIDE_BY_SIDE
 = 3,

480 
	mV4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_TOP_BOTTOM
 = 4,

481 
	mV4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_TEMPORAL
 = 5,

483 
	#V4L2_CID_MPEG_VIDEO_H264_FMO
 (
V4L2_CID_MPEG_BASE
+371)

	)

484 
	#V4L2_CID_MPEG_VIDEO_H264_FMO_MAP_TYPE
 (
V4L2_CID_MPEG_BASE
+372)

	)

485 
	ev4l2_m≥g_video_h264_fmo_m≠_ty≥
 {

486 
	mV4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_INTERLEAVED_SLICES
 = 0,

487 
	mV4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_SCATTERED_SLICES
 = 1,

488 
	mV4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_FOREGROUND_WITH_LEFT_OVER
 = 2,

489 
	mV4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_BOX_OUT
 = 3,

490 
	mV4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_RASTER_SCAN
 = 4,

491 
	mV4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_WIPE_SCAN
 = 5,

492 
	mV4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_EXPLICIT
 = 6,

494 
	#V4L2_CID_MPEG_VIDEO_H264_FMO_SLICE_GROUP
 (
V4L2_CID_MPEG_BASE
+373)

	)

495 
	#V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_DIRECTION
 (
V4L2_CID_MPEG_BASE
+374)

	)

496 
	ev4l2_m≥g_video_h264_fmo_ch™ge_dú
 {

497 
	mV4L2_MPEG_VIDEO_H264_FMO_CHANGE_DIR_RIGHT
 = 0,

498 
	mV4L2_MPEG_VIDEO_H264_FMO_CHANGE_DIR_LEFT
 = 1,

500 
	#V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_RATE
 (
V4L2_CID_MPEG_BASE
+375)

	)

501 
	#V4L2_CID_MPEG_VIDEO_H264_FMO_RUN_LENGTH
 (
V4L2_CID_MPEG_BASE
+376)

	)

502 
	#V4L2_CID_MPEG_VIDEO_H264_ASO
 (
V4L2_CID_MPEG_BASE
+377)

	)

503 
	#V4L2_CID_MPEG_VIDEO_H264_ASO_SLICE_ORDER
 (
V4L2_CID_MPEG_BASE
+378)

	)

504 
	#V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING
 (
V4L2_CID_MPEG_BASE
+379)

	)

505 
	#V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_TYPE
 (
V4L2_CID_MPEG_BASE
+380)

	)

506 
	ev4l2_m≥g_video_h264_hõørchiˇl_codög_ty≥
 {

507 
	mV4L2_MPEG_VIDEO_H264_HIERARCHICAL_CODING_B
 = 0,

508 
	mV4L2_MPEG_VIDEO_H264_HIERARCHICAL_CODING_P
 = 1,

510 
	#V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER
 (
V4L2_CID_MPEG_BASE
+381)

	)

511 
	#V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER_QP
 (
V4L2_CID_MPEG_BASE
+382)

	)

512 
	#V4L2_CID_MPEG_VIDEO_MPEG4_I_FRAME_QP
 (
V4L2_CID_MPEG_BASE
+400)

	)

513 
	#V4L2_CID_MPEG_VIDEO_MPEG4_P_FRAME_QP
 (
V4L2_CID_MPEG_BASE
+401)

	)

514 
	#V4L2_CID_MPEG_VIDEO_MPEG4_B_FRAME_QP
 (
V4L2_CID_MPEG_BASE
+402)

	)

515 
	#V4L2_CID_MPEG_VIDEO_MPEG4_MIN_QP
 (
V4L2_CID_MPEG_BASE
+403)

	)

516 
	#V4L2_CID_MPEG_VIDEO_MPEG4_MAX_QP
 (
V4L2_CID_MPEG_BASE
+404)

	)

517 
	#V4L2_CID_MPEG_VIDEO_MPEG4_LEVEL
 (
V4L2_CID_MPEG_BASE
+405)

	)

518 
	ev4l2_m≥g_video_m≥g4_Àvñ
 {

519 
	mV4L2_MPEG_VIDEO_MPEG4_LEVEL_0
 = 0,

520 
	mV4L2_MPEG_VIDEO_MPEG4_LEVEL_0B
 = 1,

521 
	mV4L2_MPEG_VIDEO_MPEG4_LEVEL_1
 = 2,

522 
	mV4L2_MPEG_VIDEO_MPEG4_LEVEL_2
 = 3,

523 
	mV4L2_MPEG_VIDEO_MPEG4_LEVEL_3
 = 4,

524 
	mV4L2_MPEG_VIDEO_MPEG4_LEVEL_3B
 = 5,

525 
	mV4L2_MPEG_VIDEO_MPEG4_LEVEL_4
 = 6,

526 
	mV4L2_MPEG_VIDEO_MPEG4_LEVEL_5
 = 7,

528 
	#V4L2_CID_MPEG_VIDEO_MPEG4_PROFILE
 (
V4L2_CID_MPEG_BASE
+406)

	)

529 
	ev4l2_m≥g_video_m≥g4_¥ofûe
 {

530 
	mV4L2_MPEG_VIDEO_MPEG4_PROFILE_SIMPLE
 = 0,

531 
	mV4L2_MPEG_VIDEO_MPEG4_PROFILE_ADVANCED_SIMPLE
 = 1,

532 
	mV4L2_MPEG_VIDEO_MPEG4_PROFILE_CORE
 = 2,

533 
	mV4L2_MPEG_VIDEO_MPEG4_PROFILE_SIMPLE_SCALABLE
 = 3,

534 
	mV4L2_MPEG_VIDEO_MPEG4_PROFILE_ADVANCED_CODING_EFFICIENCY
 = 4,

536 
	#V4L2_CID_MPEG_VIDEO_MPEG4_QPEL
 (
V4L2_CID_MPEG_BASE
+407)

	)

542 
	#V4L2_CID_MPEG_VIDEO_VPX_NUM_PARTITIONS
 (
V4L2_CID_MPEG_BASE
+500)

	)

543 
	ev4l2_vp8_num_∑πôi⁄s
 {

544 
	mV4L2_CID_MPEG_VIDEO_VPX_1_PARTITION
 = 0,

545 
	mV4L2_CID_MPEG_VIDEO_VPX_2_PARTITIONS
 = 1,

546 
	mV4L2_CID_MPEG_VIDEO_VPX_4_PARTITIONS
 = 2,

547 
	mV4L2_CID_MPEG_VIDEO_VPX_8_PARTITIONS
 = 3,

549 
	#V4L2_CID_MPEG_VIDEO_VPX_IMD_DISABLE_4X4
 (
V4L2_CID_MPEG_BASE
+501)

	)

550 
	#V4L2_CID_MPEG_VIDEO_VPX_NUM_REF_FRAMES
 (
V4L2_CID_MPEG_BASE
+502)

	)

551 
	ev4l2_vp8_num_ªf_‰ames
 {

552 
	mV4L2_CID_MPEG_VIDEO_VPX_1_REF_FRAME
 = 0,

553 
	mV4L2_CID_MPEG_VIDEO_VPX_2_REF_FRAME
 = 1,

554 
	mV4L2_CID_MPEG_VIDEO_VPX_3_REF_FRAME
 = 2,

556 
	#V4L2_CID_MPEG_VIDEO_VPX_FILTER_LEVEL
 (
V4L2_CID_MPEG_BASE
+503)

	)

557 
	#V4L2_CID_MPEG_VIDEO_VPX_FILTER_SHARPNESS
 (
V4L2_CID_MPEG_BASE
+504)

	)

558 
	#V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_REF_PERIOD
 (
V4L2_CID_MPEG_BASE
+505)

	)

559 
	#V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_SEL
 (
V4L2_CID_MPEG_BASE
+506)

	)

560 
	ev4l2_vp8_gﬁdí_‰ame_£l
 {

561 
	mV4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_USE_PREV
 = 0,

562 
	mV4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_USE_REF_PERIOD
 = 1,

564 
	#V4L2_CID_MPEG_VIDEO_VPX_MIN_QP
 (
V4L2_CID_MPEG_BASE
+507)

	)

565 
	#V4L2_CID_MPEG_VIDEO_VPX_MAX_QP
 (
V4L2_CID_MPEG_BASE
+508)

	)

566 
	#V4L2_CID_MPEG_VIDEO_VPX_I_FRAME_QP
 (
V4L2_CID_MPEG_BASE
+509)

	)

567 
	#V4L2_CID_MPEG_VIDEO_VPX_P_FRAME_QP
 (
V4L2_CID_MPEG_BASE
+510)

	)

568 
	#V4L2_CID_MPEG_VIDEO_VPX_PROFILE
 (
V4L2_CID_MPEG_BASE
+511)

	)

571 
	#V4L2_CID_MPEG_CX2341X_BASE
 (
V4L2_CTRL_CLASS_MPEG
 | 0x1000)

	)

572 
	#V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE
 (
V4L2_CID_MPEG_CX2341X_BASE
+0)

	)

573 
	ev4l2_m≥g_cx2341x_video_•©ül_fûãr_mode
 {

574 
	mV4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_MANUAL
 = 0,

575 
	mV4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_AUTO
 = 1,

577 
	#V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER
 (
V4L2_CID_MPEG_CX2341X_BASE
+1)

	)

578 
	#V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE
 (
V4L2_CID_MPEG_CX2341X_BASE
+2)

	)

579 
	ev4l2_m≥g_cx2341x_video_luma_•©ül_fûãr_ty≥
 {

580 
	mV4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_OFF
 = 0,

581 
	mV4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_HOR
 = 1,

582 
	mV4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_VERT
 = 2,

583 
	mV4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_HV_SEPARABLE
 = 3,

584 
	mV4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_SYM_NON_SEPARABLE
 = 4,

586 
	#V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE
 (
V4L2_CID_MPEG_CX2341X_BASE
+3)

	)

587 
	ev4l2_m≥g_cx2341x_video_chroma_•©ül_fûãr_ty≥
 {

588 
	mV4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_OFF
 = 0,

589 
	mV4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_1D_HOR
 = 1,

591 
	#V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE
 (
V4L2_CID_MPEG_CX2341X_BASE
+4)

	)

592 
	ev4l2_m≥g_cx2341x_video_ãmp‹Æ_fûãr_mode
 {

593 
	mV4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_MANUAL
 = 0,

594 
	mV4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_AUTO
 = 1,

596 
	#V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER
 (
V4L2_CID_MPEG_CX2341X_BASE
+5)

	)

597 
	#V4L2_CID_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE
 (
V4L2_CID_MPEG_CX2341X_BASE
+6)

	)

598 
	ev4l2_m≥g_cx2341x_video_medün_fûãr_ty≥
 {

599 
	mV4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_OFF
 = 0,

600 
	mV4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR
 = 1,

601 
	mV4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_VERT
 = 2,

602 
	mV4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR_VERT
 = 3,

603 
	mV4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_DIAG
 = 4,

605 
	#V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_BOTTOM
 (
V4L2_CID_MPEG_CX2341X_BASE
+7)

	)

606 
	#V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_TOP
 (
V4L2_CID_MPEG_CX2341X_BASE
+8)

	)

607 
	#V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_BOTTOM
 (
V4L2_CID_MPEG_CX2341X_BASE
+9)

	)

608 
	#V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_TOP
 (
V4L2_CID_MPEG_CX2341X_BASE
+10)

	)

609 
	#V4L2_CID_MPEG_CX2341X_STREAM_INSERT_NAV_PACKETS
 (
V4L2_CID_MPEG_CX2341X_BASE
+11)

	)

612 
	#V4L2_CID_MPEG_MFC51_BASE
 (
V4L2_CTRL_CLASS_MPEG
 | 0x1100)

	)

614 
	#V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY
 (
V4L2_CID_MPEG_MFC51_BASE
+0)

	)

615 
	#V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY_ENABLE
 (
V4L2_CID_MPEG_MFC51_BASE
+1)

	)

616 
	#V4L2_CID_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE
 (
V4L2_CID_MPEG_MFC51_BASE
+2)

	)

617 
	ev4l2_m≥g_mfc51_video_‰ame_skù_mode
 {

618 
	mV4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_DISABLED
 = 0,

619 
	mV4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_LEVEL_LIMIT
 = 1,

620 
	mV4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_BUF_LIMIT
 = 2,

622 
	#V4L2_CID_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE
 (
V4L2_CID_MPEG_MFC51_BASE
+3)

	)

623 
	ev4l2_m≥g_mfc51_video_f‹˚_‰ame_ty≥
 {

624 
	mV4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_DISABLED
 = 0,

625 
	mV4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_I_FRAME
 = 1,

626 
	mV4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_NOT_CODED
 = 2,

628 
	#V4L2_CID_MPEG_MFC51_VIDEO_PADDING
 (
V4L2_CID_MPEG_MFC51_BASE
+4)

	)

629 
	#V4L2_CID_MPEG_MFC51_VIDEO_PADDING_YUV
 (
V4L2_CID_MPEG_MFC51_BASE
+5)

	)

630 
	#V4L2_CID_MPEG_MFC51_VIDEO_RC_FIXED_TARGET_BIT
 (
V4L2_CID_MPEG_MFC51_BASE
+6)

	)

631 
	#V4L2_CID_MPEG_MFC51_VIDEO_RC_REACTION_COEFF
 (
V4L2_CID_MPEG_MFC51_BASE
+7)

	)

632 
	#V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_ACTIVITY
 (
V4L2_CID_MPEG_MFC51_BASE
+50)

	)

633 
	#V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_DARK
 (
V4L2_CID_MPEG_MFC51_BASE
+51)

	)

634 
	#V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_SMOOTH
 (
V4L2_CID_MPEG_MFC51_BASE
+52)

	)

635 
	#V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_STATIC
 (
V4L2_CID_MPEG_MFC51_BASE
+53)

	)

636 
	#V4L2_CID_MPEG_MFC51_VIDEO_H264_NUM_REF_PIC_FOR_P
 (
V4L2_CID_MPEG_MFC51_BASE
+54)

	)

641 
	#V4L2_CID_CAMERA_CLASS_BASE
 (
V4L2_CTRL_CLASS_CAMERA
 | 0x900)

	)

642 
	#V4L2_CID_CAMERA_CLASS
 (
V4L2_CTRL_CLASS_CAMERA
 | 1)

	)

644 
	#V4L2_CID_EXPOSURE_AUTO
 (
V4L2_CID_CAMERA_CLASS_BASE
+1)

	)

645 
	ev4l2_exposuª_auto_ty≥
 {

646 
	mV4L2_EXPOSURE_AUTO
 = 0,

647 
	mV4L2_EXPOSURE_MANUAL
 = 1,

648 
	mV4L2_EXPOSURE_SHUTTER_PRIORITY
 = 2,

649 
	mV4L2_EXPOSURE_APERTURE_PRIORITY
 = 3

651 
	#V4L2_CID_EXPOSURE_ABSOLUTE
 (
V4L2_CID_CAMERA_CLASS_BASE
+2)

	)

652 
	#V4L2_CID_EXPOSURE_AUTO_PRIORITY
 (
V4L2_CID_CAMERA_CLASS_BASE
+3)

	)

654 
	#V4L2_CID_PAN_RELATIVE
 (
V4L2_CID_CAMERA_CLASS_BASE
+4)

	)

655 
	#V4L2_CID_TILT_RELATIVE
 (
V4L2_CID_CAMERA_CLASS_BASE
+5)

	)

656 
	#V4L2_CID_PAN_RESET
 (
V4L2_CID_CAMERA_CLASS_BASE
+6)

	)

657 
	#V4L2_CID_TILT_RESET
 (
V4L2_CID_CAMERA_CLASS_BASE
+7)

	)

659 
	#V4L2_CID_PAN_ABSOLUTE
 (
V4L2_CID_CAMERA_CLASS_BASE
+8)

	)

660 
	#V4L2_CID_TILT_ABSOLUTE
 (
V4L2_CID_CAMERA_CLASS_BASE
+9)

	)

662 
	#V4L2_CID_FOCUS_ABSOLUTE
 (
V4L2_CID_CAMERA_CLASS_BASE
+10)

	)

663 
	#V4L2_CID_FOCUS_RELATIVE
 (
V4L2_CID_CAMERA_CLASS_BASE
+11)

	)

664 
	#V4L2_CID_FOCUS_AUTO
 (
V4L2_CID_CAMERA_CLASS_BASE
+12)

	)

666 
	#V4L2_CID_ZOOM_ABSOLUTE
 (
V4L2_CID_CAMERA_CLASS_BASE
+13)

	)

667 
	#V4L2_CID_ZOOM_RELATIVE
 (
V4L2_CID_CAMERA_CLASS_BASE
+14)

	)

668 
	#V4L2_CID_ZOOM_CONTINUOUS
 (
V4L2_CID_CAMERA_CLASS_BASE
+15)

	)

670 
	#V4L2_CID_PRIVACY
 (
V4L2_CID_CAMERA_CLASS_BASE
+16)

	)

672 
	#V4L2_CID_IRIS_ABSOLUTE
 (
V4L2_CID_CAMERA_CLASS_BASE
+17)

	)

673 
	#V4L2_CID_IRIS_RELATIVE
 (
V4L2_CID_CAMERA_CLASS_BASE
+18)

	)

675 
	#V4L2_CID_AUTO_EXPOSURE_BIAS
 (
V4L2_CID_CAMERA_CLASS_BASE
+19)

	)

677 
	#V4L2_CID_AUTO_N_PRESET_WHITE_BALANCE
 (
V4L2_CID_CAMERA_CLASS_BASE
+20)

	)

678 
	ev4l2_auto_n_¥e£t_whôe_bÆ™˚
 {

679 
	mV4L2_WHITE_BALANCE_MANUAL
 = 0,

680 
	mV4L2_WHITE_BALANCE_AUTO
 = 1,

681 
	mV4L2_WHITE_BALANCE_INCANDESCENT
 = 2,

682 
	mV4L2_WHITE_BALANCE_FLUORESCENT
 = 3,

683 
	mV4L2_WHITE_BALANCE_FLUORESCENT_H
 = 4,

684 
	mV4L2_WHITE_BALANCE_HORIZON
 = 5,

685 
	mV4L2_WHITE_BALANCE_DAYLIGHT
 = 6,

686 
	mV4L2_WHITE_BALANCE_FLASH
 = 7,

687 
	mV4L2_WHITE_BALANCE_CLOUDY
 = 8,

688 
	mV4L2_WHITE_BALANCE_SHADE
 = 9,

691 
	#V4L2_CID_WIDE_DYNAMIC_RANGE
 (
V4L2_CID_CAMERA_CLASS_BASE
+21)

	)

692 
	#V4L2_CID_IMAGE_STABILIZATION
 (
V4L2_CID_CAMERA_CLASS_BASE
+22)

	)

694 
	#V4L2_CID_ISO_SENSITIVITY
 (
V4L2_CID_CAMERA_CLASS_BASE
+23)

	)

695 
	#V4L2_CID_ISO_SENSITIVITY_AUTO
 (
V4L2_CID_CAMERA_CLASS_BASE
+24)

	)

696 
	ev4l2_iso_£nsôivôy_auto_ty≥
 {

697 
	mV4L2_ISO_SENSITIVITY_MANUAL
 = 0,

698 
	mV4L2_ISO_SENSITIVITY_AUTO
 = 1,

701 
	#V4L2_CID_EXPOSURE_METERING
 (
V4L2_CID_CAMERA_CLASS_BASE
+25)

	)

702 
	ev4l2_exposuª_mëîög
 {

703 
	mV4L2_EXPOSURE_METERING_AVERAGE
 = 0,

704 
	mV4L2_EXPOSURE_METERING_CENTER_WEIGHTED
 = 1,

705 
	mV4L2_EXPOSURE_METERING_SPOT
 = 2,

706 
	mV4L2_EXPOSURE_METERING_MATRIX
 = 3,

709 
	#V4L2_CID_SCENE_MODE
 (
V4L2_CID_CAMERA_CLASS_BASE
+26)

	)

710 
	ev4l2_s˚√_mode
 {

711 
	mV4L2_SCENE_MODE_NONE
 = 0,

712 
	mV4L2_SCENE_MODE_BACKLIGHT
 = 1,

713 
	mV4L2_SCENE_MODE_BEACH_SNOW
 = 2,

714 
	mV4L2_SCENE_MODE_CANDLE_LIGHT
 = 3,

715 
	mV4L2_SCENE_MODE_DAWN_DUSK
 = 4,

716 
	mV4L2_SCENE_MODE_FALL_COLORS
 = 5,

717 
	mV4L2_SCENE_MODE_FIREWORKS
 = 6,

718 
	mV4L2_SCENE_MODE_LANDSCAPE
 = 7,

719 
	mV4L2_SCENE_MODE_NIGHT
 = 8,

720 
	mV4L2_SCENE_MODE_PARTY_INDOOR
 = 9,

721 
	mV4L2_SCENE_MODE_PORTRAIT
 = 10,

722 
	mV4L2_SCENE_MODE_SPORTS
 = 11,

723 
	mV4L2_SCENE_MODE_SUNSET
 = 12,

724 
	mV4L2_SCENE_MODE_TEXT
 = 13,

727 
	#V4L2_CID_3A_LOCK
 (
V4L2_CID_CAMERA_CLASS_BASE
+27)

	)

728 
	#V4L2_LOCK_EXPOSURE
 (1 << 0)

	)

729 
	#V4L2_LOCK_WHITE_BALANCE
 (1 << 1)

	)

730 
	#V4L2_LOCK_FOCUS
 (1 << 2)

	)

732 
	#V4L2_CID_AUTO_FOCUS_START
 (
V4L2_CID_CAMERA_CLASS_BASE
+28)

	)

733 
	#V4L2_CID_AUTO_FOCUS_STOP
 (
V4L2_CID_CAMERA_CLASS_BASE
+29)

	)

734 
	#V4L2_CID_AUTO_FOCUS_STATUS
 (
V4L2_CID_CAMERA_CLASS_BASE
+30)

	)

735 
	#V4L2_AUTO_FOCUS_STATUS_IDLE
 (0 << 0)

	)

736 
	#V4L2_AUTO_FOCUS_STATUS_BUSY
 (1 << 0)

	)

737 
	#V4L2_AUTO_FOCUS_STATUS_REACHED
 (1 << 1)

	)

738 
	#V4L2_AUTO_FOCUS_STATUS_FAILED
 (1 << 2)

	)

740 
	#V4L2_CID_AUTO_FOCUS_RANGE
 (
V4L2_CID_CAMERA_CLASS_BASE
+31)

	)

741 
	ev4l2_auto_focus_ønge
 {

742 
	mV4L2_AUTO_FOCUS_RANGE_AUTO
 = 0,

743 
	mV4L2_AUTO_FOCUS_RANGE_NORMAL
 = 1,

744 
	mV4L2_AUTO_FOCUS_RANGE_MACRO
 = 2,

745 
	mV4L2_AUTO_FOCUS_RANGE_INFINITY
 = 3,

751 
	#V4L2_CID_FM_TX_CLASS_BASE
 (
V4L2_CTRL_CLASS_FM_TX
 | 0x900)

	)

752 
	#V4L2_CID_FM_TX_CLASS
 (
V4L2_CTRL_CLASS_FM_TX
 | 1)

	)

754 
	#V4L2_CID_RDS_TX_DEVIATION
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 1)

	)

755 
	#V4L2_CID_RDS_TX_PI
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 2)

	)

756 
	#V4L2_CID_RDS_TX_PTY
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 3)

	)

757 
	#V4L2_CID_RDS_TX_PS_NAME
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 5)

	)

758 
	#V4L2_CID_RDS_TX_RADIO_TEXT
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 6)

	)

760 
	#V4L2_CID_AUDIO_LIMITER_ENABLED
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 64)

	)

761 
	#V4L2_CID_AUDIO_LIMITER_RELEASE_TIME
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 65)

	)

762 
	#V4L2_CID_AUDIO_LIMITER_DEVIATION
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 66)

	)

764 
	#V4L2_CID_AUDIO_COMPRESSION_ENABLED
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 80)

	)

765 
	#V4L2_CID_AUDIO_COMPRESSION_GAIN
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 81)

	)

766 
	#V4L2_CID_AUDIO_COMPRESSION_THRESHOLD
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 82)

	)

767 
	#V4L2_CID_AUDIO_COMPRESSION_ATTACK_TIME
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 83)

	)

768 
	#V4L2_CID_AUDIO_COMPRESSION_RELEASE_TIME
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 84)

	)

770 
	#V4L2_CID_PILOT_TONE_ENABLED
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 96)

	)

771 
	#V4L2_CID_PILOT_TONE_DEVIATION
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 97)

	)

772 
	#V4L2_CID_PILOT_TONE_FREQUENCY
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 98)

	)

774 
	#V4L2_CID_TUNE_PREEMPHASIS
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 112)

	)

775 
	ev4l2_¥ìmphasis
 {

776 
	mV4L2_PREEMPHASIS_DISABLED
 = 0,

777 
	mV4L2_PREEMPHASIS_50_uS
 = 1,

778 
	mV4L2_PREEMPHASIS_75_uS
 = 2,

780 
	#V4L2_CID_TUNE_POWER_LEVEL
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 113)

	)

781 
	#V4L2_CID_TUNE_ANTENNA_CAPACITOR
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 114)

	)

786 
	#V4L2_CID_FLASH_CLASS_BASE
 (
V4L2_CTRL_CLASS_FLASH
 | 0x900)

	)

787 
	#V4L2_CID_FLASH_CLASS
 (
V4L2_CTRL_CLASS_FLASH
 | 1)

	)

789 
	#V4L2_CID_FLASH_LED_MODE
 (
V4L2_CID_FLASH_CLASS_BASE
 + 1)

	)

790 
	ev4l2_Êash_Àd_mode
 {

791 
	mV4L2_FLASH_LED_MODE_NONE
,

792 
	mV4L2_FLASH_LED_MODE_FLASH
,

793 
	mV4L2_FLASH_LED_MODE_TORCH
,

796 
	#V4L2_CID_FLASH_STROBE_SOURCE
 (
V4L2_CID_FLASH_CLASS_BASE
 + 2)

	)

797 
	ev4l2_Êash_°robe_sour˚
 {

798 
	mV4L2_FLASH_STROBE_SOURCE_SOFTWARE
,

799 
	mV4L2_FLASH_STROBE_SOURCE_EXTERNAL
,

802 
	#V4L2_CID_FLASH_STROBE
 (
V4L2_CID_FLASH_CLASS_BASE
 + 3)

	)

803 
	#V4L2_CID_FLASH_STROBE_STOP
 (
V4L2_CID_FLASH_CLASS_BASE
 + 4)

	)

804 
	#V4L2_CID_FLASH_STROBE_STATUS
 (
V4L2_CID_FLASH_CLASS_BASE
 + 5)

	)

806 
	#V4L2_CID_FLASH_TIMEOUT
 (
V4L2_CID_FLASH_CLASS_BASE
 + 6)

	)

807 
	#V4L2_CID_FLASH_INTENSITY
 (
V4L2_CID_FLASH_CLASS_BASE
 + 7)

	)

808 
	#V4L2_CID_FLASH_TORCH_INTENSITY
 (
V4L2_CID_FLASH_CLASS_BASE
 + 8)

	)

809 
	#V4L2_CID_FLASH_INDICATOR_INTENSITY
 (
V4L2_CID_FLASH_CLASS_BASE
 + 9)

	)

811 
	#V4L2_CID_FLASH_FAULT
 (
V4L2_CID_FLASH_CLASS_BASE
 + 10)

	)

812 
	#V4L2_FLASH_FAULT_OVER_VOLTAGE
 (1 << 0)

	)

813 
	#V4L2_FLASH_FAULT_TIMEOUT
 (1 << 1)

	)

814 
	#V4L2_FLASH_FAULT_OVER_TEMPERATURE
 (1 << 2)

	)

815 
	#V4L2_FLASH_FAULT_SHORT_CIRCUIT
 (1 << 3)

	)

816 
	#V4L2_FLASH_FAULT_OVER_CURRENT
 (1 << 4)

	)

817 
	#V4L2_FLASH_FAULT_INDICATOR
 (1 << 5)

	)

818 
	#V4L2_FLASH_FAULT_UNDER_VOLTAGE
 (1 << 6)

	)

819 
	#V4L2_FLASH_FAULT_INPUT_VOLTAGE
 (1 << 7)

	)

820 
	#V4L2_FLASH_FAULT_LED_OVER_TEMPERATURE
 (1 << 8)

	)

822 
	#V4L2_CID_FLASH_CHARGE
 (
V4L2_CID_FLASH_CLASS_BASE
 + 11)

	)

823 
	#V4L2_CID_FLASH_READY
 (
V4L2_CID_FLASH_CLASS_BASE
 + 12)

	)

828 
	#V4L2_CID_JPEG_CLASS_BASE
 (
V4L2_CTRL_CLASS_JPEG
 | 0x900)

	)

829 
	#V4L2_CID_JPEG_CLASS
 (
V4L2_CTRL_CLASS_JPEG
 | 1)

	)

831 
	#V4L2_CID_JPEG_CHROMA_SUBSAMPLING
 (
V4L2_CID_JPEG_CLASS_BASE
 + 1)

	)

832 
	ev4l2_j≥g_chroma_subßm∂ög
 {

833 
	mV4L2_JPEG_CHROMA_SUBSAMPLING_444
 = 0,

834 
	mV4L2_JPEG_CHROMA_SUBSAMPLING_422
 = 1,

835 
	mV4L2_JPEG_CHROMA_SUBSAMPLING_420
 = 2,

836 
	mV4L2_JPEG_CHROMA_SUBSAMPLING_411
 = 3,

837 
	mV4L2_JPEG_CHROMA_SUBSAMPLING_410
 = 4,

838 
	mV4L2_JPEG_CHROMA_SUBSAMPLING_GRAY
 = 5,

840 
	#V4L2_CID_JPEG_RESTART_INTERVAL
 (
V4L2_CID_JPEG_CLASS_BASE
 + 2)

	)

841 
	#V4L2_CID_JPEG_COMPRESSION_QUALITY
 (
V4L2_CID_JPEG_CLASS_BASE
 + 3)

	)

843 
	#V4L2_CID_JPEG_ACTIVE_MARKER
 (
V4L2_CID_JPEG_CLASS_BASE
 + 4)

	)

844 
	#V4L2_JPEG_ACTIVE_MARKER_APP0
 (1 << 0)

	)

845 
	#V4L2_JPEG_ACTIVE_MARKER_APP1
 (1 << 1)

	)

846 
	#V4L2_JPEG_ACTIVE_MARKER_COM
 (1 << 16)

	)

847 
	#V4L2_JPEG_ACTIVE_MARKER_DQT
 (1 << 17)

	)

848 
	#V4L2_JPEG_ACTIVE_MARKER_DHT
 (1 << 18)

	)

852 
	#V4L2_CID_IMAGE_SOURCE_CLASS_BASE
 (
V4L2_CTRL_CLASS_IMAGE_SOURCE
 | 0x900)

	)

853 
	#V4L2_CID_IMAGE_SOURCE_CLASS
 (
V4L2_CTRL_CLASS_IMAGE_SOURCE
 | 1)

	)

855 
	#V4L2_CID_VBLANK
 (
V4L2_CID_IMAGE_SOURCE_CLASS_BASE
 + 1)

	)

856 
	#V4L2_CID_HBLANK
 (
V4L2_CID_IMAGE_SOURCE_CLASS_BASE
 + 2)

	)

857 
	#V4L2_CID_ANALOGUE_GAIN
 (
V4L2_CID_IMAGE_SOURCE_CLASS_BASE
 + 3)

	)

862 
	#V4L2_CID_IMAGE_PROC_CLASS_BASE
 (
V4L2_CTRL_CLASS_IMAGE_PROC
 | 0x900)

	)

863 
	#V4L2_CID_IMAGE_PROC_CLASS
 (
V4L2_CTRL_CLASS_IMAGE_PROC
 | 1)

	)

865 
	#V4L2_CID_LINK_FREQ
 (
V4L2_CID_IMAGE_PROC_CLASS_BASE
 + 1)

	)

866 
	#V4L2_CID_PIXEL_RATE
 (
V4L2_CID_IMAGE_PROC_CLASS_BASE
 + 2)

	)

867 
	#V4L2_CID_TEST_PATTERN
 (
V4L2_CID_IMAGE_PROC_CLASS_BASE
 + 3)

	)

871 
	#V4L2_CID_DV_CLASS_BASE
 (
V4L2_CTRL_CLASS_DV
 | 0x900)

	)

872 
	#V4L2_CID_DV_CLASS
 (
V4L2_CTRL_CLASS_DV
 | 1)

	)

874 
	#V4L2_CID_DV_TX_HOTPLUG
 (
V4L2_CID_DV_CLASS_BASE
 + 1)

	)

875 
	#V4L2_CID_DV_TX_RXSENSE
 (
V4L2_CID_DV_CLASS_BASE
 + 2)

	)

876 
	#V4L2_CID_DV_TX_EDID_PRESENT
 (
V4L2_CID_DV_CLASS_BASE
 + 3)

	)

877 
	#V4L2_CID_DV_TX_MODE
 (
V4L2_CID_DV_CLASS_BASE
 + 4)

	)

878 
	ev4l2_dv_tx_mode
 {

879 
	mV4L2_DV_TX_MODE_DVI_D
 = 0,

880 
	mV4L2_DV_TX_MODE_HDMI
 = 1,

882 
	#V4L2_CID_DV_TX_RGB_RANGE
 (
V4L2_CID_DV_CLASS_BASE
 + 5)

	)

883 
	ev4l2_dv_rgb_ønge
 {

884 
	mV4L2_DV_RGB_RANGE_AUTO
 = 0,

885 
	mV4L2_DV_RGB_RANGE_LIMITED
 = 1,

886 
	mV4L2_DV_RGB_RANGE_FULL
 = 2,

889 
	#V4L2_CID_DV_RX_POWER_PRESENT
 (
V4L2_CID_DV_CLASS_BASE
 + 100)

	)

890 
	#V4L2_CID_DV_RX_RGB_RANGE
 (
V4L2_CID_DV_CLASS_BASE
 + 101)

	)

892 
	#V4L2_CID_FM_RX_CLASS_BASE
 (
V4L2_CTRL_CLASS_FM_RX
 | 0x900)

	)

893 
	#V4L2_CID_FM_RX_CLASS
 (
V4L2_CTRL_CLASS_FM_RX
 | 1)

	)

895 
	#V4L2_CID_TUNE_DEEMPHASIS
 (
V4L2_CID_FM_RX_CLASS_BASE
 + 1)

	)

896 
	ev4l2_dìmphasis
 {

897 
	mV4L2_DEEMPHASIS_DISABLED
 = 
V4L2_PREEMPHASIS_DISABLED
,

898 
	mV4L2_DEEMPHASIS_50_uS
 = 
V4L2_PREEMPHASIS_50_uS
,

899 
	mV4L2_DEEMPHASIS_75_uS
 = 
V4L2_PREEMPHASIS_75_uS
,

902 
	#V4L2_CID_RDS_RECEPTION
 (
V4L2_CID_FM_RX_CLASS_BASE
 + 2)

	)

904 
	#V4L2_CID_RF_TUNER_CLASS_BASE
 (
V4L2_CTRL_CLASS_RF_TUNER
 | 0x900)

	)

905 
	#V4L2_CID_RF_TUNER_CLASS
 (
V4L2_CTRL_CLASS_RF_TUNER
 | 1)

	)

907 
	#V4L2_CID_RF_TUNER_BANDWIDTH_AUTO
 (
V4L2_CID_RF_TUNER_CLASS_BASE
 + 11)

	)

908 
	#V4L2_CID_RF_TUNER_BANDWIDTH
 (
V4L2_CID_RF_TUNER_CLASS_BASE
 + 12)

	)

909 
	#V4L2_CID_RF_TUNER_LNA_GAIN_AUTO
 (
V4L2_CID_RF_TUNER_CLASS_BASE
 + 41)

	)

910 
	#V4L2_CID_RF_TUNER_LNA_GAIN
 (
V4L2_CID_RF_TUNER_CLASS_BASE
 + 42)

	)

911 
	#V4L2_CID_RF_TUNER_MIXER_GAIN_AUTO
 (
V4L2_CID_RF_TUNER_CLASS_BASE
 + 51)

	)

912 
	#V4L2_CID_RF_TUNER_MIXER_GAIN
 (
V4L2_CID_RF_TUNER_CLASS_BASE
 + 52)

	)

913 
	#V4L2_CID_RF_TUNER_IF_GAIN_AUTO
 (
V4L2_CID_RF_TUNER_CLASS_BASE
 + 61)

	)

914 
	#V4L2_CID_RF_TUNER_IF_GAIN
 (
V4L2_CID_RF_TUNER_CLASS_BASE
 + 62)

	)

915 
	#V4L2_CID_RF_TUNER_PLL_LOCK
 (
V4L2_CID_RF_TUNER_CLASS_BASE
 + 91)

	)

	@/usr/include/ncurses_dll.h

30 #i‚de‡
NCURSES_DLL_H_ö˛


31 
	#NCURSES_DLL_H_ö˛
 1

	)

37 #i‡
deföed
(
__MINGW64__
)

38 #ñi‡
deföed
(
__MINGW32__
)

39 #i‡(
__GNUC__
 =4Ë&& (
__GNUC_MINOR__
 == 8)

41 #ifde‡
åa˚


42 #unde‡
åa˚


43 
	#TRACE


	)

53 
	#NCURSES_PUBLIC_VAR
(
«me
Ë
_nc_
##
	)
name

54 
	#NCURSES_WRAPPED_VAR
(
ty≥
,
«me
Ëty≥ 
	`NCURSES_PUBLIC_VAR
“ame)()

	)

60 #unde‡
NCURSES_DLL


61 
	#NCURSES_STATIC


	)

63 #i‡
deföed
(
__CYGWIN__
Ë|| deföed(
__MINGW32__
)

64 #i‡
deföed
(
NCURSES_DLL
)

65 #i‡
deföed
(
NCURSES_STATIC
)

66 #unde‡
NCURSES_STATIC


69 #unde‡
NCURSES_IMPEXP


70 #unde‡
NCURSES_API


71 #unde‡
NCURSES_EXPORT


72 #unde‡
NCURSES_EXPORT_VAR


73 #i‡
deföed
(
NCURSES_DLL
)

75 
	#NCURSES_IMPEXP
 
	`__de˛•ec
(
dŒexp‹t
)

	)

76 #ñi‡
deföed
(
NCURSES_STATIC
)

78 
	#NCURSES_IMPEXP


	)

81 
	#NCURSES_IMPEXP
 
	`__de˛•ec
(
dŒimp‹t
)

	)

83 
	#NCURSES_API
 
__cde˛


	)

84 
	#NCURSES_EXPORT
(
ty≥
Ë
NCURSES_IMPEXP
Åy≥ 
NCURSES_API


	)

85 
	#NCURSES_EXPORT_VAR
(
ty≥
Ë
NCURSES_IMPEXP
 
	)
type

89 #i‡!
deföed
(
NCURSES_IMPEXP
)

90 
	#NCURSES_IMPEXP


	)

92 #i‡!
deföed
(
NCURSES_API
)

93 
	#NCURSES_API


	)

95 #i‡!
deföed
(
NCURSES_EXPORT
)

96 
	#NCURSES_EXPORT
(
ty≥
Ë
NCURSES_IMPEXP
Åy≥ 
NCURSES_API


	)

98 #i‡!
deföed
(
NCURSES_EXPORT_VAR
)

99 
	#NCURSES_EXPORT_VAR
(
ty≥
Ë
NCURSES_IMPEXP
 
	)
type

	@/usr/include/pulse/cdecl.h

1 #i‚de‡
fo›ul£cde˛hfoo


2 
	#fo›ul£cde˛hfoo


	)

28 #ifde‡
__˝lu•lus


30 
	#PA_C_DECL_BEGIN
 "C" {

	)

32 
	#PA_C_DECL_END
 }

	)

36 
	#PA_C_DECL_BEGIN


	)

38 
	#PA_C_DECL_END


	)

	@/usr/include/pulse/gccmacro.h

1 #i‚de‡
fo›ul£gccma¸ohfoo


2 
	#fo›ul£gccma¸ohfoo


	)

28 #i‡
deföed
(
__GNUC__
)

29 #ifde‡
__MINGW32__


33 
	#PA_GCC_PRINTF_ATTR
(
a
,
b
Ë
	`__©åibuã__
 ((
	`f‹m©
 (
__¥ötf__
,á, b)))

	)

35 
	#PA_GCC_PRINTF_ATTR
(
a
,
b
Ë
	`__©åibuã__
 ((
	`f‹m©
 (
¥ötf
,á, b)))

	)

39 
	#PA_GCC_PRINTF_ATTR
(
a
,
b
)

	)

42 #i‡
deföed
(
__GNUC__
) && (__GNUC__ >= 4)

43 
	#PA_GCC_SENTINEL
 
	`__©åibuã__
 ((
£¡öñ
))

	)

46 
	#PA_GCC_SENTINEL


	)

49 #ifde‡
__GNUC__


50 
	#PA_GCC_NORETURN
 
	`__©åibuã__
((
n‹ëu∫
))

	)

53 
	#PA_GCC_NORETURN


	)

56 #ifde‡
__GNUC__


57 
	#PA_GCC_UNUSED
 
	`__©åibuã__
 ((
unu£d
))

	)

60 
	#PA_GCC_UNUSED


	)

63 #ifde‡
__GNUC__


64 
	#PA_GCC_DESTRUCTOR
 
	`__©åibuã__
 ((
de°ru˘‹
))

	)

67 
	#PA_GCC_DESTRUCTOR


	)

70 #i‚de‡
PA_GCC_PURE


71 #ifde‡
__GNUC__


72 
	#PA_GCC_PURE
 
	`__©åibuã__
 ((
puª
))

	)

75 
	#PA_GCC_PURE


	)

79 #i‚de‡
PA_GCC_CONST


80 #ifde‡
__GNUC__


81 
	#PA_GCC_CONST
 
	`__©åibuã__
 ((c⁄°))

	)

84 
	#PA_GCC_CONST


	)

88 #i‚de‡
PA_GCC_DEPRECATED


89 #ifde‡
__GNUC__


90 
	#PA_GCC_DEPRECATED
 
	`__©åibuã__
 ((
dïªˇãd
))

	)

93 
	#PA_GCC_DEPRECATED


	)

97 #i‚de‡
PA_GCC_PACKED


98 #ifde‡
__GNUC__


99 
	#PA_GCC_PACKED
 
	`__©åibuã__
 ((
∑cked
))

	)

102 
	#PA_GCC_PACKED


	)

106 #i‚de‡
PA_GCC_ALLOC_SIZE


107 #i‡
deföed
(
__GNUC__
Ë&& (__GNUC__ >4Ë&& (
__GNUC_MINOR__
 >= 3)

108 
	#PA_GCC_ALLOC_SIZE
(
x
Ë
	`__©åibuã__
 ((
	`__Æloc_size__
(x)))

	)

109 
	#PA_GCC_ALLOC_SIZE2
(
x
,
y
Ë
	`__©åibuã__
 ((
	`__Æloc_size__
(x,y)))

	)

112 
	#PA_GCC_ALLOC_SIZE
(
x
)

	)

114 
	#PA_GCC_ALLOC_SIZE2
(
x
,
y
)

	)

118 #i‚de‡
PA_GCC_MALLOC


119 #ifde‡
__GNUC__


120 
	#PA_GCC_MALLOC
 
	`__©åibuã__
 ((
mÆloc
))

	)

123 
	#PA_GCC_MALLOC


	)

127 #i‚de‡
PA_GCC_WEAKREF


128 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__ELF__
Ë&& (((__GNUC__ =4Ë&& (
__GNUC_MINOR__
 > 1)) || (__GNUC__ > 4))

130 
	#PA_GCC_WEAKREF
(
x
Ë
	`__©åibuã__
((
	`wókªf
(#x)))

	)

	@/usr/include/setjmp.h

22 #i‚def 
_SETJMP_H


23 
	#_SETJMP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/sig£t.h
>

34 
	s__jmp_buf_èg


40 
__jmp_buf
 
	m__jmpbuf
;

41 
	m__mask_was_ßved
;

42 
__sig£t_t
 
	m__ßved_mask
;

46 
__BEGIN_NAMESPACE_STD


48 
__jmp_buf_èg
 
	tjmp_buf
[1];

52 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROWNL
;

54 
__END_NAMESPACE_STD


59 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROWNL
;

63 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROWNL
;

67 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

70 
__BEGIN_NAMESPACE_STD


74 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

75 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

77 
__END_NAMESPACE_STD


79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


83 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

84 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 #ifdef 
__USE_POSIX


92 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

96 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

102 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

103 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

108 #i‡
__USE_FORTIFY_LEVEL
 > 0

109 
	~<bôs/£tjmp2.h
>

112 
__END_DECLS


	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/unctrl.h

44 #i‚de‡
NCURSES_UNCTRL_H_ö˛


45 
	#NCURSES_UNCTRL_H_ö˛
 1

	)

47 #unde‡
NCURSES_VERSION


48 
	#NCURSES_VERSION
 "5.9"

	)

50 #ifde‡
__˝lu•lus


54 
	~<cur£s.h
>

56 #unde‡
un˘æ


57 
NCURSES_EXPORT
(
NCURSES_CONST
 *Ë
un˘æ
 (
chty≥
);

60 
NCURSES_EXPORT
(
NCURSES_CONST
 *Ë
NCURSES_SP_NAME
(
un˘æ
Ë(
SCREEN
*, 
chty≥
);

63 #ifde‡
__˝lu•lus


	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifde‡
__USE_ISOC99


479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #ifde‡
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/linux/stddef.h

	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
398
10580
frontend/320240/pollux_set.c
frontend/320240/ui_gp2x.h
frontend/Cheat.h
frontend/blit320.h
frontend/cspace.c
frontend/cspace.h
frontend/in_tsbutton.c
frontend/in_tsbutton.h
frontend/libpicofe/arm/neon_eagle2x.h
frontend/libpicofe/arm/neon_scale2x.h
frontend/libpicofe/arm_linux.h
frontend/libpicofe/config_file.c
frontend/libpicofe/config_file.h
frontend/libpicofe/fonts.c
frontend/libpicofe/fonts.h
frontend/libpicofe/gl.c
frontend/libpicofe/gl.h
frontend/libpicofe/gl_platform.c
frontend/libpicofe/gl_platform.h
frontend/libpicofe/gp2x/in_gp2x.c
frontend/libpicofe/gp2x/in_gp2x.h
frontend/libpicofe/gp2x/plat.c
frontend/libpicofe/gp2x/plat_gp2x.h
frontend/libpicofe/gp2x/pollux_set.c
frontend/libpicofe/gp2x/pollux_set.h
frontend/libpicofe/gp2x/soc.c
frontend/libpicofe/gp2x/soc.h
frontend/libpicofe/gp2x/soc_mmsp2.c
frontend/libpicofe/gp2x/soc_mmsp2.h
frontend/libpicofe/gp2x/soc_pollux.c
frontend/libpicofe/gp2x/soc_pollux.h
frontend/libpicofe/in_sdl.c
frontend/libpicofe/in_sdl.h
frontend/libpicofe/input.c
frontend/libpicofe/input.h
frontend/libpicofe/linux/fbdev.c
frontend/libpicofe/linux/fbdev.h
frontend/libpicofe/linux/host_dasm.c
frontend/libpicofe/linux/host_dasm.h
frontend/libpicofe/linux/in_evdev.c
frontend/libpicofe/linux/in_evdev.h
frontend/libpicofe/linux/plat.c
frontend/libpicofe/linux/sndout_alsa.c
frontend/libpicofe/linux/sndout_alsa.h
frontend/libpicofe/linux/sndout_oss.c
frontend/libpicofe/linux/sndout_oss.h
frontend/libpicofe/linux/xenv.c
frontend/libpicofe/linux/xenv.h
frontend/libpicofe/lprintf.h
frontend/libpicofe/menu.c
frontend/libpicofe/menu.h
frontend/libpicofe/pandora/picorestore.c
frontend/libpicofe/pandora/plat.c
frontend/libpicofe/plat.h
frontend/libpicofe/plat_dummy.c
frontend/libpicofe/plat_sdl.c
frontend/libpicofe/plat_sdl.h
frontend/libpicofe/posix.h
frontend/libpicofe/readpng.c
frontend/libpicofe/readpng.h
frontend/libpicofe/sndout.c
frontend/libpicofe/sndout.h
frontend/libpicofe/sndout_sdl.c
frontend/libpicofe/sndout_sdl.h
frontend/libpicofe/win32/direct.cpp
frontend/libpicofe/win32/direct.h
frontend/libpicofe/win32/dsnd.cpp
frontend/libpicofe/win32/dsnd.h
frontend/libpicofe/win32/in_vk.c
frontend/libpicofe/win32/in_vk.h
frontend/libretro.c
frontend/libretro.h
frontend/main.c
frontend/main.h
frontend/menu.c
frontend/menu.h
frontend/nopic.h
frontend/pandora/picorestore.c
frontend/pandora/ui_feat.h
frontend/pl_gun_ts.c
frontend/pl_gun_ts.h
frontend/plat.h
frontend/plat_dummy.c
frontend/plat_omap.c
frontend/plat_omap.h
frontend/plat_pandora.c
frontend/plat_pollux.c
frontend/plat_sdl.c
frontend/plugin.c
frontend/plugin.h
frontend/plugin_lib.c
frontend/plugin_lib.h
frontend/revision.h
frontend/warm/module/warm_main.c
frontend/warm/module/warm_ops.h
frontend/warm/test.c
frontend/warm/warm.c
frontend/warm/warm.h
include/arm_features.h
include/config.h
include/pcnt.h
include/psemu_plugin_defs.h
libpcsxcore/cdriso.c
libpcsxcore/cdriso.h
libpcsxcore/cdrom.c
libpcsxcore/cdrom.h
libpcsxcore/cheat.c
libpcsxcore/cheat.h
libpcsxcore/coff.h
libpcsxcore/debug.c
libpcsxcore/debug.h
libpcsxcore/decode_xa.c
libpcsxcore/decode_xa.h
libpcsxcore/disr3000a.c
libpcsxcore/gpu.h
libpcsxcore/gte.c
libpcsxcore/gte.h
libpcsxcore/gte_arm.h
libpcsxcore/gte_divider.c
libpcsxcore/gte_divider.h
libpcsxcore/gte_neon.h
libpcsxcore/gte_nf.c
libpcsxcore/mdec.c
libpcsxcore/mdec.h
libpcsxcore/memmap.h
libpcsxcore/memmap_win32.c
libpcsxcore/misc.c
libpcsxcore/misc.h
libpcsxcore/new_dynarec/assem_arm.c
libpcsxcore/new_dynarec/assem_arm.h
libpcsxcore/new_dynarec/emu_if.c
libpcsxcore/new_dynarec/emu_if.h
libpcsxcore/new_dynarec/fpu.c
libpcsxcore/new_dynarec/fpu.h
libpcsxcore/new_dynarec/linkage_offsets.h
libpcsxcore/new_dynarec/new_dynarec.c
libpcsxcore/new_dynarec/new_dynarec.h
libpcsxcore/new_dynarec/pcsxmem.c
libpcsxcore/new_dynarec/pcsxmem.h
libpcsxcore/new_dynarec/pcsxmem_inline.c
libpcsxcore/plugins.c
libpcsxcore/plugins.h
libpcsxcore/ppf.c
libpcsxcore/ppf.h
libpcsxcore/psxbios.c
libpcsxcore/psxbios.h
libpcsxcore/psxcommon.c
libpcsxcore/psxcommon.h
libpcsxcore/psxcounters.c
libpcsxcore/psxcounters.h
libpcsxcore/psxdma.c
libpcsxcore/psxdma.h
libpcsxcore/psxhle.c
libpcsxcore/psxhle.h
libpcsxcore/psxhw.c
libpcsxcore/psxhw.h
libpcsxcore/psxinterpreter.c
libpcsxcore/psxmem.c
libpcsxcore/psxmem.h
libpcsxcore/psxmem_map.h
libpcsxcore/r3000a.c
libpcsxcore/r3000a.h
libpcsxcore/sio.c
libpcsxcore/sio.h
libpcsxcore/sjisfont.h
libpcsxcore/socket.c
libpcsxcore/socket.h
libpcsxcore/spu.c
libpcsxcore/spu.h
libpcsxcore/system.h
maemo/hildon.c
maemo/maemo_common.h
maemo/maemo_xkb.c
maemo/main.c
plugins/cdrcimg/cdrcimg.c
plugins/cdrcimg/cdrcimg.h
plugins/dfinput/externals.h
plugins/dfinput/guncon.c
plugins/dfinput/main.c
plugins/dfinput/main.h
plugins/dfinput/pad.c
plugins/dfsound/adsr.c
plugins/dfsound/adsr.h
plugins/dfsound/alsa.c
plugins/dfsound/dma.c
plugins/dfsound/dma.h
plugins/dfsound/externals.h
plugins/dfsound/freeze.c
plugins/dfsound/gauss_i.h
plugins/dfsound/nullsnd.c
plugins/dfsound/oss.c
plugins/dfsound/out.c
plugins/dfsound/out.h
plugins/dfsound/psemuxa.h
plugins/dfsound/pulseaudio.c
plugins/dfsound/registers.c
plugins/dfsound/registers.h
plugins/dfsound/reverb.c
plugins/dfsound/sdl.c
plugins/dfsound/spu.c
plugins/dfsound/spu.h
plugins/dfsound/spu_c64x.c
plugins/dfsound/spu_c64x.h
plugins/dfsound/spu_c64x_dspcode.c
plugins/dfsound/spu_config.h
plugins/dfsound/stdafx.h
plugins/dfsound/xa.c
plugins/dfsound/xa.h
plugins/dfxvideo/draw.c
plugins/dfxvideo/draw_pl.c
plugins/dfxvideo/fps.c
plugins/dfxvideo/gpu.c
plugins/dfxvideo/gpu.h
plugins/dfxvideo/gpulib_if.c
plugins/dfxvideo/prim.c
plugins/dfxvideo/soft.c
plugins/gpu-gles/gpuDraw.c
plugins/gpu-gles/gpuDraw.h
plugins/gpu-gles/gpuExternals.h
plugins/gpu-gles/gpuFps.c
plugins/gpu-gles/gpuFps.h
plugins/gpu-gles/gpuPlugin.c
plugins/gpu-gles/gpuPlugin.h
plugins/gpu-gles/gpuPrim.c
plugins/gpu-gles/gpuPrim.h
plugins/gpu-gles/gpuStdafx.h
plugins/gpu-gles/gpuTexture.c
plugins/gpu-gles/gpuTexture.h
plugins/gpu-gles/gpulib_if.c
plugins/gpu-gles/hud.c
plugins/gpu_neon/psx_gpu/common.h
plugins/gpu_neon/psx_gpu/psx_gpu.c
plugins/gpu_neon/psx_gpu/psx_gpu.h
plugins/gpu_neon/psx_gpu/psx_gpu_4x.c
plugins/gpu_neon/psx_gpu/psx_gpu_main.c
plugins/gpu_neon/psx_gpu/psx_gpu_offsets.h
plugins/gpu_neon/psx_gpu/psx_gpu_offsets_update.c
plugins/gpu_neon/psx_gpu/psx_gpu_parse.c
plugins/gpu_neon/psx_gpu/psx_gpu_standard.c
plugins/gpu_neon/psx_gpu/vector_ops.h
plugins/gpu_neon/psx_gpu_if.c
plugins/gpu_unai/debug.h
plugins/gpu_unai/gpu.cpp
plugins/gpu_unai/gpu.h
plugins/gpu_unai/gpu_arm.h
plugins/gpu_unai/gpu_blit.h
plugins/gpu_unai/gpu_command.h
plugins/gpu_unai/gpu_fixedpoint.h
plugins/gpu_unai/gpu_inner.h
plugins/gpu_unai/gpu_inner_blend.h
plugins/gpu_unai/gpu_inner_light.h
plugins/gpu_unai/gpu_raster_image.h
plugins/gpu_unai/gpu_raster_line.h
plugins/gpu_unai/gpu_raster_polygon.h
plugins/gpu_unai/gpu_raster_sprite.h
plugins/gpu_unai/gpulib_if.cpp
plugins/gpu_unai/port.h
plugins/gpu_unai/profiler.h
plugins/gpulib/gpu.c
plugins/gpulib/gpu.h
plugins/gpulib/test.c
plugins/gpulib/vout_pl.c
plugins/gpulib/vout_sdl.c
plugins/spunull/register.h
plugins/spunull/spunull.c
plugins/spunull/xa.h
tools/psxcimg.c
/usr/include/EGL/egl.h
/usr/include/GLES/gl.h
/usr/include/GLES/glext.h
/usr/include/X11/XKBlib.h
/usr/include/X11/Xatom.h
/usr/include/X11/Xlib.h
/usr/include/X11/Xutil.h
/usr/include/X11/cursorfont.h
/usr/include/X11/extensions/XShm.h
/usr/include/X11/keysym.h
/usr/include/alsa/asoundlib.h
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/dlfcn.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/inttypes.h
/usr/include/libintl.h
/usr/include/limits.h
/usr/include/linux/fb.h
/usr/include/linux/fs.h
/usr/include/linux/input.h
/usr/include/linux/ioctl.h
/usr/include/linux/kd.h
/usr/include/linux/kernel.h
/usr/include/linux/matroxfb.h
/usr/include/linux/omapfb.h
/usr/include/linux/soundcard.h
/usr/include/linux/version.h
/usr/include/locale.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/menu.h
/usr/include/netinet/in.h
/usr/include/png.h
/usr/include/pthread.h
/usr/include/pulse/pulseaudio.h
/usr/include/semaphore.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/termios.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/zlib.h
/usr/include/EGL/eglplatform.h
/usr/include/GLES/glplatform.h
/usr/include/X11/X.h
/usr/include/X11/Xfuncproto.h
/usr/include/X11/Xosdefs.h
/usr/include/X11/extensions/XKBstr.h
/usr/include/X11/extensions/shm.h
/usr/include/X11/keysymdef.h
/usr/include/alloca.h
/usr/include/alsa/asoundef.h
/usr/include/alsa/conf.h
/usr/include/alsa/control.h
/usr/include/alsa/error.h
/usr/include/alsa/global.h
/usr/include/alsa/hwdep.h
/usr/include/alsa/input.h
/usr/include/alsa/mixer.h
/usr/include/alsa/output.h
/usr/include/alsa/pcm.h
/usr/include/alsa/rawmidi.h
/usr/include/alsa/seq.h
/usr/include/alsa/seq_event.h
/usr/include/alsa/seq_midi_event.h
/usr/include/alsa/seqmid.h
/usr/include/alsa/timer.h
/usr/include/alsa/version.h
/usr/include/curses.h
/usr/include/endian.h
/usr/include/eti.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/i2c.h
/usr/include/linux/limits.h
/usr/include/linux/patchkey.h
/usr/include/linux/sysinfo.h
/usr/include/linux/types.h
/usr/include/linux/videodev2.h
/usr/include/pngconf.h
/usr/include/pulse/channelmap.h
/usr/include/pulse/context.h
/usr/include/pulse/def.h
/usr/include/pulse/error.h
/usr/include/pulse/format.h
/usr/include/pulse/introspect.h
/usr/include/pulse/mainloop-api.h
/usr/include/pulse/mainloop-signal.h
/usr/include/pulse/mainloop.h
/usr/include/pulse/operation.h
/usr/include/pulse/proplist.h
/usr/include/pulse/rtclock.h
/usr/include/pulse/sample.h
/usr/include/pulse/scache.h
/usr/include/pulse/stream.h
/usr/include/pulse/subscribe.h
/usr/include/pulse/thread-mainloop.h
/usr/include/pulse/timeval.h
/usr/include/pulse/utf8.h
/usr/include/pulse/util.h
/usr/include/pulse/version.h
/usr/include/pulse/volume.h
/usr/include/pulse/xmalloc.h
/usr/include/sched.h
/usr/include/xlocale.h
/usr/include/KHR/khrplatform.h
/usr/include/X11/Xmd.h
/usr/include/X11/extensions/XKB.h
/usr/include/_G_config.h
/usr/include/linux/posix_types.h
/usr/include/linux/v4l2-common.h
/usr/include/linux/v4l2-controls.h
/usr/include/ncurses_dll.h
/usr/include/pulse/cdecl.h
/usr/include/pulse/gccmacro.h
/usr/include/setjmp.h
/usr/include/stdc-predef.h
/usr/include/unctrl.h
/usr/include/wchar.h
/usr/include/gconv.h
/usr/include/linux/stddef.h
/usr/include/wctype.h
